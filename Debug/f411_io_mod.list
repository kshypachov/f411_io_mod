
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ebb8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005aa8  0802ed58  0802ed58  0002fd58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034800  08034800  000369c8  2**0
                  CONTENTS
  4 .ARM          00000008  08034800  08034800  00035800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08034808  08034808  000369c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08034808  08034808  00035808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08034810  08034810  00035810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009c8  20000000  08034814  00036000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017acc  200009c8  080351dc  000369c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20018494  080351dc  00037494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000369c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034254  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fbe  00000000  00000000  0006ac4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e88  00000000  00000000  00070c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002774  00000000  00000000  00073a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f455  00000000  00000000  0007620c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032ee7  00000000  00000000  00095661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8327  00000000  00000000  000c8548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017086f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000efb4  00000000  00000000  001708b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200009c8 	.word	0x200009c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0802ed40 	.word	0x0802ed40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200009cc 	.word	0x200009cc
 80001dc:	0802ed40 	.word	0x0802ed40

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd6:	f000 b9ff 	b.w	80010d8 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f897 	bl	8000e1c <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f88a 	bl	8000e1c <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f879 	bl	8000e1c <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f86b 	bl	8000e1c <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d6c:	f000 b9b4 	b.w	80010d8 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f850 	bl	8000e1c <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__popcountsi2>:
 8000d88:	0843      	lsrs	r3, r0, #1
 8000d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000d8e:	1ac0      	subs	r0, r0, r3
 8000d90:	0883      	lsrs	r3, r0, #2
 8000d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8000d9a:	4418      	add	r0, r3
 8000d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8000da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000dac:	0e00      	lsrs	r0, r0, #24
 8000dae:	4770      	bx	lr

08000db0 <__aeabi_d2lz>:
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	2200      	movs	r2, #0
 8000db4:	2300      	movs	r3, #0
 8000db6:	4604      	mov	r4, r0
 8000db8:	460d      	mov	r5, r1
 8000dba:	f7ff fea7 	bl	8000b0c <__aeabi_dcmplt>
 8000dbe:	b928      	cbnz	r0, 8000dcc <__aeabi_d2lz+0x1c>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc8:	f000 b80a 	b.w	8000de0 <__aeabi_d2ulz>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dd2:	f000 f805 	bl	8000de0 <__aeabi_d2ulz>
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
 8000dde:	bf00      	nop

08000de0 <__aeabi_d2ulz>:
 8000de0:	b5d0      	push	{r4, r6, r7, lr}
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <__aeabi_d2ulz+0x34>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	4606      	mov	r6, r0
 8000de8:	460f      	mov	r7, r1
 8000dea:	f7ff fc1d 	bl	8000628 <__aeabi_dmul>
 8000dee:	f7ff fef3 	bl	8000bd8 <__aeabi_d2uiz>
 8000df2:	4604      	mov	r4, r0
 8000df4:	f7ff fb9e 	bl	8000534 <__aeabi_ui2d>
 8000df8:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <__aeabi_d2ulz+0x38>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f7ff fc14 	bl	8000628 <__aeabi_dmul>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4630      	mov	r0, r6
 8000e06:	4639      	mov	r1, r7
 8000e08:	f7ff fa56 	bl	80002b8 <__aeabi_dsub>
 8000e0c:	f7ff fee4 	bl	8000bd8 <__aeabi_d2uiz>
 8000e10:	4621      	mov	r1, r4
 8000e12:	bdd0      	pop	{r4, r6, r7, pc}
 8000e14:	3df00000 	.word	0x3df00000
 8000e18:	41f00000 	.word	0x41f00000

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of SPI2Mutex */
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 80010e0:	482f      	ldr	r0, [pc, #188]	@ (80011a0 <MX_FREERTOS_Init+0xc4>)
 80010e2:	f007 fe57 	bl	8008d94 <osMutexNew>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a2e      	ldr	r2, [pc, #184]	@ (80011a4 <MX_FREERTOS_Init+0xc8>)
 80010ea:	6013      	str	r3, [r2, #0]

  /* creation of FSMutex */
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 80010ec:	482e      	ldr	r0, [pc, #184]	@ (80011a8 <MX_FREERTOS_Init+0xcc>)
 80010ee:	f007 fe51 	bl	8008d94 <osMutexNew>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a2d      	ldr	r2, [pc, #180]	@ (80011ac <MX_FREERTOS_Init+0xd0>)
 80010f6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inputReadQ */
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 80010f8:	4a2d      	ldr	r2, [pc, #180]	@ (80011b0 <MX_FREERTOS_Init+0xd4>)
 80010fa:	2103      	movs	r1, #3
 80010fc:	2001      	movs	r0, #1
 80010fe:	f007 ff57 	bl	8008fb0 <osMessageQueueNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a2b      	ldr	r2, [pc, #172]	@ (80011b4 <MX_FREERTOS_Init+0xd8>)
 8001106:	6013      	str	r3, [r2, #0]

  /* creation of outputReadQ */
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8001108:	4a2b      	ldr	r2, [pc, #172]	@ (80011b8 <MX_FREERTOS_Init+0xdc>)
 800110a:	2103      	movs	r1, #3
 800110c:	2001      	movs	r0, #1
 800110e:	f007 ff4f 	bl	8008fb0 <osMessageQueueNew>
 8001112:	4603      	mov	r3, r0
 8001114:	4a29      	ldr	r2, [pc, #164]	@ (80011bc <MX_FREERTOS_Init+0xe0>)
 8001116:	6013      	str	r3, [r2, #0]

  /* creation of outputWriteQ */
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8001118:	4a29      	ldr	r2, [pc, #164]	@ (80011c0 <MX_FREERTOS_Init+0xe4>)
 800111a:	2103      	movs	r1, #3
 800111c:	2001      	movs	r0, #1
 800111e:	f007 ff47 	bl	8008fb0 <osMessageQueueNew>
 8001122:	4603      	mov	r3, r0
 8001124:	4a27      	ldr	r2, [pc, #156]	@ (80011c4 <MX_FREERTOS_Init+0xe8>)
 8001126:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8001128:	4a27      	ldr	r2, [pc, #156]	@ (80011c8 <MX_FREERTOS_Init+0xec>)
 800112a:	21c6      	movs	r1, #198	@ 0xc6
 800112c:	2001      	movs	r0, #1
 800112e:	f007 ff3f 	bl	8008fb0 <osMessageQueueNew>
 8001132:	4603      	mov	r3, r0
 8001134:	4a25      	ldr	r2, [pc, #148]	@ (80011cc <MX_FREERTOS_Init+0xf0>)
 8001136:	6013      	str	r3, [r2, #0]

  /* creation of loggingQ */
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 8001138:	4a25      	ldr	r2, [pc, #148]	@ (80011d0 <MX_FREERTOS_Init+0xf4>)
 800113a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800113e:	200f      	movs	r0, #15
 8001140:	f007 ff36 	bl	8008fb0 <osMessageQueueNew>
 8001144:	4603      	mov	r3, r0
 8001146:	4a23      	ldr	r2, [pc, #140]	@ (80011d4 <MX_FREERTOS_Init+0xf8>)
 8001148:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethTask */
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 800114a:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <MX_FREERTOS_Init+0xfc>)
 800114c:	2100      	movs	r1, #0
 800114e:	4823      	ldr	r0, [pc, #140]	@ (80011dc <MX_FREERTOS_Init+0x100>)
 8001150:	f007 fd72 	bl	8008c38 <osThreadNew>
 8001154:	4603      	mov	r3, r0
 8001156:	4a22      	ldr	r2, [pc, #136]	@ (80011e0 <MX_FREERTOS_Init+0x104>)
 8001158:	6013      	str	r3, [r2, #0]

  /* creation of IOTask */
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 800115a:	4a22      	ldr	r2, [pc, #136]	@ (80011e4 <MX_FREERTOS_Init+0x108>)
 800115c:	2100      	movs	r1, #0
 800115e:	4822      	ldr	r0, [pc, #136]	@ (80011e8 <MX_FREERTOS_Init+0x10c>)
 8001160:	f007 fd6a 	bl	8008c38 <osThreadNew>
 8001164:	4603      	mov	r3, r0
 8001166:	4a21      	ldr	r2, [pc, #132]	@ (80011ec <MX_FREERTOS_Init+0x110>)
 8001168:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 800116a:	4a21      	ldr	r2, [pc, #132]	@ (80011f0 <MX_FREERTOS_Init+0x114>)
 800116c:	2100      	movs	r1, #0
 800116e:	4821      	ldr	r0, [pc, #132]	@ (80011f4 <MX_FREERTOS_Init+0x118>)
 8001170:	f007 fd62 	bl	8008c38 <osThreadNew>
 8001174:	4603      	mov	r3, r0
 8001176:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <MX_FREERTOS_Init+0x11c>)
 8001178:	6013      	str	r3, [r2, #0]

  /* creation of settingsTask */
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 800117a:	4a20      	ldr	r2, [pc, #128]	@ (80011fc <MX_FREERTOS_Init+0x120>)
 800117c:	2100      	movs	r1, #0
 800117e:	4820      	ldr	r0, [pc, #128]	@ (8001200 <MX_FREERTOS_Init+0x124>)
 8001180:	f007 fd5a 	bl	8008c38 <osThreadNew>
 8001184:	4603      	mov	r3, r0
 8001186:	4a1f      	ldr	r2, [pc, #124]	@ (8001204 <MX_FREERTOS_Init+0x128>)
 8001188:	6013      	str	r3, [r2, #0]

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 800118a:	4a1f      	ldr	r2, [pc, #124]	@ (8001208 <MX_FREERTOS_Init+0x12c>)
 800118c:	2100      	movs	r1, #0
 800118e:	481f      	ldr	r0, [pc, #124]	@ (800120c <MX_FREERTOS_Init+0x130>)
 8001190:	f007 fd52 	bl	8008c38 <osThreadNew>
 8001194:	4603      	mov	r3, r0
 8001196:	4a1e      	ldr	r2, [pc, #120]	@ (8001210 <MX_FREERTOS_Init+0x134>)
 8001198:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	0803325c 	.word	0x0803325c
 80011a4:	20000a14 	.word	0x20000a14
 80011a8:	0803326c 	.word	0x0803326c
 80011ac:	20000a18 	.word	0x20000a18
 80011b0:	080331e4 	.word	0x080331e4
 80011b4:	20000a00 	.word	0x20000a00
 80011b8:	080331fc 	.word	0x080331fc
 80011bc:	20000a04 	.word	0x20000a04
 80011c0:	08033214 	.word	0x08033214
 80011c4:	20000a08 	.word	0x20000a08
 80011c8:	0803322c 	.word	0x0803322c
 80011cc:	20000a0c 	.word	0x20000a0c
 80011d0:	08033244 	.word	0x08033244
 80011d4:	20000a10 	.word	0x20000a10
 80011d8:	08033130 	.word	0x08033130
 80011dc:	08001215 	.word	0x08001215
 80011e0:	200009ec 	.word	0x200009ec
 80011e4:	08033154 	.word	0x08033154
 80011e8:	080014d5 	.word	0x080014d5
 80011ec:	200009f0 	.word	0x200009f0
 80011f0:	08033178 	.word	0x08033178
 80011f4:	0800169d 	.word	0x0800169d
 80011f8:	200009f4 	.word	0x200009f4
 80011fc:	0803319c 	.word	0x0803319c
 8001200:	080018cd 	.word	0x080018cd
 8001204:	200009f8 	.word	0x200009f8
 8001208:	080331c0 	.word	0x080331c0
 800120c:	08001a35 	.word	0x08001a35
 8001210:	200009fc 	.word	0x200009fc

08001214 <StartEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEthTask */
void StartEthTask(void *argument)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b0f1      	sub	sp, #452	@ 0x1c4
 8001218:	af02      	add	r7, sp, #8
 800121a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800121e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001222:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEthTask */
  void 		           *web_handler;
  struct 			   mg_mgr mgr; // Initialise
  MQTT_cred_struct	   mqtt_conf;
  struct mg_connection *mqtt_conn;
  struct               mg_tcpip_spi spi = {
 8001224:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001228:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800122c:	4a9c      	ldr	r2, [pc, #624]	@ (80014a0 <StartEthTask+0x28c>)
 800122e:	461c      	mov	r4, r3
 8001230:	4613      	mov	r3, r2
 8001232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											  .begin = EthBegin,
											  .end = EthEnd,
											  .txn = EthTxn,
											  .spi = &hspi2,
										  };
  struct              mg_tcpip_if   mif = {
 8001238:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800123c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001240:	4618      	mov	r0, r3
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	461a      	mov	r2, r3
 8001246:	2100      	movs	r1, #0
 8001248:	f024 fe86 	bl	8025f58 <memset>
 800124c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001250:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001254:	2240      	movs	r2, #64	@ 0x40
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800125c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001260:	2222      	movs	r2, #34	@ 0x22
 8001262:	705a      	strb	r2, [r3, #1]
											  .mac = {
													  0x40,
													  0x22,
													  *(uint8_t*)(UID_BASE),
 8001264:	4b8f      	ldr	r3, [pc, #572]	@ (80014a4 <StartEthTask+0x290>)
 8001266:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001268:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800126c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001270:	709a      	strb	r2, [r3, #2]
													  *(uint8_t*)(UID_BASE + 0x02),
 8001272:	4b8d      	ldr	r3, [pc, #564]	@ (80014a8 <StartEthTask+0x294>)
 8001274:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001276:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800127a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800127e:	70da      	strb	r2, [r3, #3]
													  *(uint8_t*)(UID_BASE + 0x04),
 8001280:	4b8a      	ldr	r3, [pc, #552]	@ (80014ac <StartEthTask+0x298>)
 8001282:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001284:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001288:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800128c:	711a      	strb	r2, [r3, #4]
													  *(uint8_t*)(UID_BASE + 0x08)
 800128e:	4b88      	ldr	r3, [pc, #544]	@ (80014b0 <StartEthTask+0x29c>)
 8001290:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001292:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001296:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800129a:	715a      	strb	r2, [r3, #5]
 800129c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012a4:	2201      	movs	r2, #1
 80012a6:	77da      	strb	r2, [r3, #31]
 80012a8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012ac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2020 	strb.w	r2, [r3, #32]
 80012b6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012be:	4a7d      	ldr	r2, [pc, #500]	@ (80014b4 <StartEthTask+0x2a0>)
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80012c2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012ca:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
											  .enable_req_sntp = true,
											  .driver = &mg_tcpip_driver_w5500,
											  .driver_data = &spi
										  };

  mg_full_info.mgr =  &mgr;
 80012d0:	4a79      	ldr	r2, [pc, #484]	@ (80014b8 <StartEthTask+0x2a4>)
 80012d2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012d6:	6013      	str	r3, [r2, #0]
  mg_full_info.mgr_if =  &mif;
 80012d8:	4a77      	ldr	r2, [pc, #476]	@ (80014b8 <StartEthTask+0x2a4>)
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	6053      	str	r3, [r2, #4]



  mg_mgr_init(&mgr);        // Mongoose event manager
 80012e0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012e4:	4618      	mov	r0, r3
 80012e6:	f01c fb63 	bl	801d9b0 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 80012ea:	4b74      	ldr	r3, [pc, #464]	@ (80014bc <StartEthTask+0x2a8>)
 80012ec:	2203      	movs	r2, #3
 80012ee:	601a      	str	r2, [r3, #0]

  web_handler = dash_hdl(); // Get dashboard handler
 80012f0:	f002 fd00 	bl	8003cf4 <dash_hdl>
 80012f4:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0

  while(mif.mtu == 0){
 80012f8:	e013      	b.n	8001322 <StartEthTask+0x10e>
	  EthResetBegin();
 80012fa:	f000 fc75 	bl	8001be8 <EthResetBegin>
	  osDelay(500);
 80012fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001302:	f007 fd2c 	bl	8008d5e <osDelay>
	  EthResetEnd();
 8001306:	f000 fc7b 	bl	8001c00 <EthResetEnd>
	  osDelay(2000);
 800130a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800130e:	f007 fd26 	bl	8008d5e <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8001312:	f107 0208 	add.w	r2, r7, #8
 8001316:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f01f f8cf 	bl	80204c0 <mg_tcpip_init>
  while(mif.mtu == 0){
 8001322:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001326:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800132a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0e3      	beq.n	80012fa <StartEthTask+0xe6>
  }
  set_device_id(mif.mac, sizeof(mif.mac));
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2106      	movs	r1, #6
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fa15 	bl	8004768 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 800133e:	4860      	ldr	r0, [pc, #384]	@ (80014c0 <StartEthTask+0x2ac>)
 8001340:	f002 fce2 	bl	8003d08 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8001344:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8001348:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 800134c:	4b5a      	ldr	r3, [pc, #360]	@ (80014b8 <StartEthTask+0x2a4>)
 800134e:	495d      	ldr	r1, [pc, #372]	@ (80014c4 <StartEthTask+0x2b0>)
 8001350:	f018 fd46 	bl	8019de0 <mg_http_listen>

  while (mif.state != MG_TCPIP_STATE_READY) {
 8001354:	e008      	b.n	8001368 <StartEthTask+0x154>
    mg_mgr_poll(&mgr, 1);
 8001356:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800135a:	2101      	movs	r1, #1
 800135c:	4618      	mov	r0, r3
 800135e:	f01f fbc3 	bl	8020ae8 <mg_mgr_poll>
    osDelay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f007 fcfb 	bl	8008d5e <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8001368:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800136c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001370:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001374:	2b03      	cmp	r3, #3
 8001376:	d1ee      	bne.n	8001356 <StartEthTask+0x142>
  }

  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001378:	4b4f      	ldr	r3, [pc, #316]	@ (80014b8 <StartEthTask+0x2a4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	b2d9      	uxtb	r1, r3
 8001380:	4b4d      	ldr	r3, [pc, #308]	@ (80014b8 <StartEthTask+0x2a4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	b2d8      	uxtb	r0, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 800138a:	4b4b      	ldr	r3, [pc, #300]	@ (80014b8 <StartEthTask+0x2a4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	0c1b      	lsrs	r3, r3, #16
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001392:	b2db      	uxtb	r3, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001394:	4a48      	ldr	r2, [pc, #288]	@ (80014b8 <StartEthTask+0x2a4>)
 8001396:	6852      	ldr	r2, [r2, #4]
 8001398:	6892      	ldr	r2, [r2, #8]
 800139a:	0e12      	lsrs	r2, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 800139c:	9201      	str	r2, [sp, #4]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	4603      	mov	r3, r0
 80013a2:	460a      	mov	r2, r1
 80013a4:	4948      	ldr	r1, [pc, #288]	@ (80014c8 <StartEthTask+0x2b4>)
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 fec8 	bl	800213c <logging>

  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 80013ac:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fceb 	bl	8001d90 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 80013ba:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d018      	beq.n	80013fa <StartEthTask+0x1e6>
	  logging(L_INFO, "MQTT function enabled.");
 80013c8:	4940      	ldr	r1, [pc, #256]	@ (80014cc <StartEthTask+0x2b8>)
 80013ca:	2001      	movs	r0, #1
 80013cc:	f000 feb6 	bl	800213c <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 80013d0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013d4:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 80013d8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013dc:	1c9a      	adds	r2, r3, #2
 80013de:	f107 0108 	add.w	r1, r7, #8
 80013e2:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80013e6:	4b36      	ldr	r3, [pc, #216]	@ (80014c0 <StartEthTask+0x2ac>)
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013ee:	33a5      	adds	r3, #165	@ 0xa5
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4623      	mov	r3, r4
 80013f4:	f003 f8c2 	bl	800457c <mqtt_init>
 80013f8:	e003      	b.n	8001402 <StartEthTask+0x1ee>
  }else{
	  logging(L_INFO, "MQTT function disabled");
 80013fa:	4935      	ldr	r1, [pc, #212]	@ (80014d0 <StartEthTask+0x2bc>)
 80013fc:	2001      	movs	r0, #1
 80013fe:	f000 fe9d 	bl	800213c <logging>
  }
  start_sntp(&mgr);
 8001402:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fe9c 	bl	8005144 <start_sntp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 800140c:	f009 fc20 	bl	800ac50 <xTaskGetTickCount>
 8001410:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4

  /* Infinite loop */
  for(;;)
  {
	  TickType_t current_tick = xTaskGetTickCount();
 8001414:	f009 fc1c 	bl	800ac50 <xTaskGetTickCount>
 8001418:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
	  uint32_t elapsed_ms = (current_tick - last_tick) * portTICK_PERIOD_MS; // количество миллисекунд, прошедших с последнего вызова
 800141c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001420:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	  last_tick = current_tick; // обновляем значение тиков
 800142a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800142e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8001432:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8001436:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f01f fb53 	bl	8020ae8 <mg_mgr_poll>

      while (mif.driver->up(&mif) == false){
 8001442:	e018      	b.n	8001476 <StartEthTask+0x262>
    	  EthResetBegin(); //enable reset state w5500
 8001444:	f000 fbd0 	bl	8001be8 <EthResetBegin>
    	  osDelay(100);
 8001448:	2064      	movs	r0, #100	@ 0x64
 800144a:	f007 fc88 	bl	8008d5e <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 800144e:	f000 fbd7 	bl	8001c00 <EthResetEnd>
    	  osDelay(3000);
 8001452:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001456:	f007 fc82 	bl	8008d5e <osDelay>
    	  mif.driver->init(&mif);
 800145a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800145e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f107 0208 	add.w	r2, r7, #8
 800146a:	4610      	mov	r0, r2
 800146c:	4798      	blx	r3
    	  osDelay(7000);
 800146e:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001472:	f007 fc74 	bl	8008d5e <osDelay>
      while (mif.driver->up(&mif) == false){
 8001476:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800147a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f107 0208 	add.w	r2, r7, #8
 8001486:	4610      	mov	r0, r2
 8001488:	4798      	blx	r3
 800148a:	4603      	mov	r3, r0
 800148c:	f083 0301 	eor.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1d6      	bne.n	8001444 <StartEthTask+0x230>
      }
      osDelay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f007 fc61 	bl	8008d5e <osDelay>
  {
 800149c:	e7ba      	b.n	8001414 <StartEthTask+0x200>
 800149e:	bf00      	nop
 80014a0:	0802ee40 	.word	0x0802ee40
 80014a4:	1fff7a10 	.word	0x1fff7a10
 80014a8:	1fff7a12 	.word	0x1fff7a12
 80014ac:	1fff7a14 	.word	0x1fff7a14
 80014b0:	1fff7a18 	.word	0x1fff7a18
 80014b4:	200002a0 	.word	0x200002a0
 80014b8:	200009e4 	.word	0x200009e4
 80014bc:	20000298 	.word	0x20000298
 80014c0:	08001d91 	.word	0x08001d91
 80014c4:	0802ede0 	.word	0x0802ede0
 80014c8:	0802edf4 	.word	0x0802edf4
 80014cc:	0802ee10 	.word	0x0802ee10
 80014d0:	0802ee28 	.word	0x0802ee28

080014d4 <StartIOTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIOTask */
void StartIOTask(void *argument)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b091      	sub	sp, #68	@ 0x44
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIOTask */
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 80014dc:	4a69      	ldr	r2, [pc, #420]	@ (8001684 <StartIOTask+0x1b0>)
 80014de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e6:	6018      	str	r0, [r3, #0]
 80014e8:	3304      	adds	r3, #4
 80014ea:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 80014ec:	4a66      	ldr	r2, [pc, #408]	@ (8001688 <StartIOTask+0x1b4>)
 80014ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 80014f8:	4a64      	ldr	r2, [pc, #400]	@ (800168c <StartIOTask+0x1b8>)
 80014fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001502:	6018      	str	r0, [r3, #0]
 8001504:	3304      	adds	r3, #4
 8001506:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8001508:	4a5f      	ldr	r2, [pc, #380]	@ (8001688 <StartIOTask+0x1b4>)
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001510:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
  /* Infinite loop */
  for(;;)
  {
	 // write outputs
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8001514:	4b5e      	ldr	r3, [pc, #376]	@ (8001690 <StartIOTask+0x1bc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f007 fe7b 	bl	8009214 <osMessageQueueGetCount>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d041      	beq.n	80015a8 <StartIOTask+0xd4>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8001524:	4b5a      	ldr	r3, [pc, #360]	@ (8001690 <StartIOTask+0x1bc>)
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	f107 010c 	add.w	r1, r7, #12
 800152c:	2300      	movs	r3, #0
 800152e:	2200      	movs	r2, #0
 8001530:	f007 fe12 	bl	8009158 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8001534:	2300      	movs	r3, #0
 8001536:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800153a:	e031      	b.n	80015a0 <StartIOTask+0xcc>
		     if (pinOutputs_w[i]) {
 800153c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001540:	3340      	adds	r3, #64	@ 0x40
 8001542:	443b      	add	r3, r7
 8001544:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d012      	beq.n	8001572 <StartIOTask+0x9e>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 800154c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	3340      	adds	r3, #64	@ 0x40
 8001554:	443b      	add	r3, r7
 8001556:	f853 0c14 	ldr.w	r0, [r3, #-20]
 800155a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	3340      	adds	r3, #64	@ 0x40
 8001562:	443b      	add	r3, r7
 8001564:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8001568:	2201      	movs	r2, #1
 800156a:	4619      	mov	r1, r3
 800156c:	f004 fcfc 	bl	8005f68 <HAL_GPIO_WritePin>
 8001570:	e011      	b.n	8001596 <StartIOTask+0xc2>
		     } else {
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8001572:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	3340      	adds	r3, #64	@ 0x40
 800157a:	443b      	add	r3, r7
 800157c:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8001580:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	3340      	adds	r3, #64	@ 0x40
 8001588:	443b      	add	r3, r7
 800158a:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	f004 fce9 	bl	8005f68 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8001596:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800159a:	3301      	adds	r3, #1
 800159c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80015a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d9c9      	bls.n	800153c <StartIOTask+0x68>
		     }
		 }
	 }

	 // read outputs status
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80015ae:	e01f      	b.n	80015f0 <StartIOTask+0x11c>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80015b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	3340      	adds	r3, #64	@ 0x40
 80015b8:	443b      	add	r3, r7
 80015ba:	f853 2c14 	ldr.w	r2, [r3, #-20]
 80015be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	3340      	adds	r3, #64	@ 0x40
 80015c6:	443b      	add	r3, r7
 80015c8:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80015cc:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 80015d0:	4619      	mov	r1, r3
 80015d2:	4610      	mov	r0, r2
 80015d4:	f004 fcb0 	bl	8005f38 <HAL_GPIO_ReadPin>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80015e0:	443b      	add	r3, r7
 80015e2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80015e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015ea:	3301      	adds	r3, #1
 80015ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80015f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d9db      	bls.n	80015b0 <StartIOTask+0xdc>
	}
	//xQueueOverwrite(outputReadQHandle, &pinOutputs_r);
	osMessageQueueReset(outputReadQHandle);
 80015f8:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <StartIOTask+0x1c0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f007 fe29 	bl	8009254 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <StartIOTask+0x1c0>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	f107 0110 	add.w	r1, r7, #16
 800160a:	2300      	movs	r3, #0
 800160c:	2200      	movs	r2, #0
 800160e:	f007 fd43 	bl	8009098 <osMessageQueuePut>

	// read inputs status
	for (i = 0; i < INPUTS_COUNT; i++) {
 8001612:	2300      	movs	r3, #0
 8001614:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001618:	e01f      	b.n	800165a <StartIOTask+0x186>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 800161a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	3340      	adds	r3, #64	@ 0x40
 8001622:	443b      	add	r3, r7
 8001624:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8001628:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	3340      	adds	r3, #64	@ 0x40
 8001630:	443b      	add	r3, r7
 8001632:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001636:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 800163a:	4619      	mov	r1, r3
 800163c:	4610      	mov	r0, r2
 800163e:	f004 fc7b 	bl	8005f38 <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800164a:	443b      	add	r3, r7
 800164c:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8001650:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001654:	3301      	adds	r3, #1
 8001656:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800165a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800165e:	2b02      	cmp	r3, #2
 8001660:	d9db      	bls.n	800161a <StartIOTask+0x146>
	}
	//xQueueOverwrite(inputReadQHandle, &pinInputs_r);
	osMessageQueueReset(inputReadQHandle);
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <StartIOTask+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f007 fdf4 	bl	8009254 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <StartIOTask+0x1c4>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	f107 0114 	add.w	r1, r7, #20
 8001674:	2300      	movs	r3, #0
 8001676:	2200      	movs	r2, #0
 8001678:	f007 fd0e 	bl	8009098 <osMessageQueuePut>

    osDelay(1);
 800167c:	2001      	movs	r0, #1
 800167e:	f007 fb6e 	bl	8008d5e <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8001682:	e747      	b.n	8001514 <StartIOTask+0x40>
 8001684:	0802ee50 	.word	0x0802ee50
 8001688:	0802ee58 	.word	0x0802ee58
 800168c:	0802ee64 	.word	0x0802ee64
 8001690:	20000a08 	.word	0x20000a08
 8001694:	20000a04 	.word	0x20000a04
 8001698:	20000a00 	.word	0x20000a00

0800169c <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	b08f      	sub	sp, #60	@ 0x3c
 80016a0:	af04      	add	r7, sp, #16
 80016a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	uint8_t x,y;
	char buf[20];
	osDelay(1000);//
 80016a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016a8:	f007 fb59 	bl	8008d5e <osDelay>

	SSD1306_Init (); // initialise the display
 80016ac:	f006 ff82 	bl	80085b4 <SSD1306_Init>
	osDelay(100);//
 80016b0:	2064      	movs	r0, #100	@ 0x64
 80016b2:	f007 fb54 	bl	8008d5e <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80016b6:	2301      	movs	r3, #1
 80016b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016c2:	2100      	movs	r1, #0
 80016c4:	2001      	movs	r0, #1
 80016c6:	f007 f8d5 	bl	8008874 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f007 f85a 	bl	8008784 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80016d0:	2201      	movs	r2, #1
 80016d2:	4972      	ldr	r1, [pc, #456]	@ (800189c <StartDisplayTask+0x200>)
 80016d4:	4872      	ldr	r0, [pc, #456]	@ (80018a0 <StartDisplayTask+0x204>)
 80016d6:	f007 f961 	bl	800899c <SSD1306_Puts>
    //SSD1306_GotoXY(x=1,y=y+11);
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80016da:	2201      	movs	r2, #1
 80016dc:	496f      	ldr	r1, [pc, #444]	@ (800189c <StartDisplayTask+0x200>)
 80016de:	4871      	ldr	r0, [pc, #452]	@ (80018a4 <StartDisplayTask+0x208>)
 80016e0:	f007 f95c 	bl	800899c <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80016e4:	2301      	movs	r3, #1
 80016e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016ea:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016ee:	330b      	adds	r3, #11
 80016f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4619      	mov	r1, r3
 80016fc:	2001      	movs	r0, #1
 80016fe:	f007 f8b9 	bl	8008874 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 8001702:	2201      	movs	r2, #1
 8001704:	4965      	ldr	r1, [pc, #404]	@ (800189c <StartDisplayTask+0x200>)
 8001706:	4868      	ldr	r0, [pc, #416]	@ (80018a8 <StartDisplayTask+0x20c>)
 8001708:	f007 f948 	bl	800899c <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 800170c:	2301      	movs	r3, #1
 800170e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001712:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001716:	330b      	adds	r3, #11
 8001718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800171c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001720:	b29b      	uxth	r3, r3
 8001722:	4619      	mov	r1, r3
 8001724:	2001      	movs	r0, #1
 8001726:	f007 f8a5 	bl	8008874 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 800172a:	2201      	movs	r2, #1
 800172c:	495b      	ldr	r1, [pc, #364]	@ (800189c <StartDisplayTask+0x200>)
 800172e:	485f      	ldr	r0, [pc, #380]	@ (80018ac <StartDisplayTask+0x210>)
 8001730:	f007 f934 	bl	800899c <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8001734:	2301      	movs	r3, #1
 8001736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800173a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800173e:	330b      	adds	r3, #11
 8001740:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001744:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001748:	b29b      	uxth	r3, r3
 800174a:	4619      	mov	r1, r3
 800174c:	2001      	movs	r0, #1
 800174e:	f007 f891 	bl	8008874 <SSD1306_GotoXY>
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8001752:	4b57      	ldr	r3, [pc, #348]	@ (80018b0 <StartDisplayTask+0x214>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	781b      	ldrb	r3, [r3, #0]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001758:	461d      	mov	r5, r3
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 800175a:	4b55      	ldr	r3, [pc, #340]	@ (80018b0 <StartDisplayTask+0x214>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	785b      	ldrb	r3, [r3, #1]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001760:	461e      	mov	r6, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8001762:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <StartDisplayTask+0x214>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	789b      	ldrb	r3, [r3, #2]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001768:	461a      	mov	r2, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 800176a:	4b51      	ldr	r3, [pc, #324]	@ (80018b0 <StartDisplayTask+0x214>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	78db      	ldrb	r3, [r3, #3]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001770:	4619      	mov	r1, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8001772:	4b4f      	ldr	r3, [pc, #316]	@ (80018b0 <StartDisplayTask+0x214>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	791b      	ldrb	r3, [r3, #4]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001778:	461c      	mov	r4, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 800177a:	4b4d      	ldr	r3, [pc, #308]	@ (80018b0 <StartDisplayTask+0x214>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	795b      	ldrb	r3, [r3, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001780:	f107 000c 	add.w	r0, r7, #12
 8001784:	9303      	str	r3, [sp, #12]
 8001786:	9402      	str	r4, [sp, #8]
 8001788:	9101      	str	r1, [sp, #4]
 800178a:	9200      	str	r2, [sp, #0]
 800178c:	4633      	mov	r3, r6
 800178e:	462a      	mov	r2, r5
 8001790:	4948      	ldr	r1, [pc, #288]	@ (80018b4 <StartDisplayTask+0x218>)
 8001792:	f024 f81f 	bl	80257d4 <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2201      	movs	r2, #1
 800179c:	493f      	ldr	r1, [pc, #252]	@ (800189c <StartDisplayTask+0x200>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f007 f8fc 	bl	800899c <SSD1306_Puts>

    SSD1306_UpdateScreen();
 80017a4:	f006 ffc0 	bl	8008728 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 80017a8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80017ac:	f009 f8fe 	bl	800a9ac <vTaskDelay>
    int i=0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Infinite loop */
  for(;;)
  {
		SSD1306_GotoXY(x=1,y=0);
 80017b4:	2301      	movs	r3, #1
 80017b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80017c0:	2100      	movs	r1, #0
 80017c2:	2001      	movs	r0, #1
 80017c4:	f007 f856 	bl	8008874 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f006 ffdb 	bl	8008784 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 80017ce:	2201      	movs	r2, #1
 80017d0:	4932      	ldr	r1, [pc, #200]	@ (800189c <StartDisplayTask+0x200>)
 80017d2:	4839      	ldr	r0, [pc, #228]	@ (80018b8 <StartDisplayTask+0x21c>)
 80017d4:	f007 f8e2 	bl	800899c <SSD1306_Puts>
	    sprintf(buf,"%lu.%lu.%lu.%lu",
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80017d8:	4b35      	ldr	r3, [pc, #212]	@ (80018b0 <StartDisplayTask+0x214>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80017de:	b2d9      	uxtb	r1, r3
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80017e0:	4b33      	ldr	r3, [pc, #204]	@ (80018b0 <StartDisplayTask+0x214>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	0a1b      	lsrs	r3, r3, #8
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80017e8:	b2dc      	uxtb	r4, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80017ea:	4b31      	ldr	r3, [pc, #196]	@ (80018b0 <StartDisplayTask+0x214>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	0c1b      	lsrs	r3, r3, #16
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80017f2:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80017f4:	4a2e      	ldr	r2, [pc, #184]	@ (80018b0 <StartDisplayTask+0x214>)
 80017f6:	6852      	ldr	r2, [r2, #4]
 80017f8:	6892      	ldr	r2, [r2, #8]
 80017fa:	0e12      	lsrs	r2, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80017fc:	f107 000c 	add.w	r0, r7, #12
 8001800:	9201      	str	r2, [sp, #4]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4623      	mov	r3, r4
 8001806:	460a      	mov	r2, r1
 8001808:	492c      	ldr	r1, [pc, #176]	@ (80018bc <StartDisplayTask+0x220>)
 800180a:	f023 ffe3 	bl	80257d4 <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2201      	movs	r2, #1
 8001814:	4921      	ldr	r1, [pc, #132]	@ (800189c <StartDisplayTask+0x200>)
 8001816:	4618      	mov	r0, r3
 8001818:	f007 f8c0 	bl	800899c <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 800181c:	2301      	movs	r3, #1
 800181e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001822:	230a      	movs	r3, #10
 8001824:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001828:	210a      	movs	r1, #10
 800182a:	2001      	movs	r0, #1
 800182c:	f007 f822 	bl	8008874 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 8001830:	2201      	movs	r2, #1
 8001832:	491a      	ldr	r1, [pc, #104]	@ (800189c <StartDisplayTask+0x200>)
 8001834:	4822      	ldr	r0, [pc, #136]	@ (80018c0 <StartDisplayTask+0x224>)
 8001836:	f007 f8b1 	bl	800899c <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	3301      	adds	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001846:	491f      	ldr	r1, [pc, #124]	@ (80018c4 <StartDisplayTask+0x228>)
 8001848:	4618      	mov	r0, r3
 800184a:	f023 ffc3 	bl	80257d4 <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2201      	movs	r2, #1
 8001854:	4911      	ldr	r1, [pc, #68]	@ (800189c <StartDisplayTask+0x200>)
 8001856:	4618      	mov	r0, r3
 8001858:	f007 f8a0 	bl	800899c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800185c:	f006 ff64 	bl	8008728 <SSD1306_UpdateScreen>

		if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 8001860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001864:	2201      	movs	r2, #1
 8001866:	2178      	movs	r1, #120	@ 0x78
 8001868:	4817      	ldr	r0, [pc, #92]	@ (80018c8 <StartDisplayTask+0x22c>)
 800186a:	f004 fe09 	bl	8006480 <HAL_I2C_IsDeviceReady>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00e      	beq.n	8001892 <StartDisplayTask+0x1f6>
			HAL_I2C_DeInit(&hi2c1);
 8001874:	4814      	ldr	r0, [pc, #80]	@ (80018c8 <StartDisplayTask+0x22c>)
 8001876:	f004 fcd5 	bl	8006224 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 800187a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800187e:	f009 f895 	bl	800a9ac <vTaskDelay>
			MX_I2C1_Init();
 8001882:	f000 fb85 	bl	8001f90 <MX_I2C1_Init>
			vTaskDelay(1000);
 8001886:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800188a:	f009 f88f 	bl	800a9ac <vTaskDelay>
			SSD1306_Init ();
 800188e:	f006 fe91 	bl	80085b4 <SSD1306_Init>
		}
		osDelay(1000);
 8001892:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001896:	f007 fa62 	bl	8008d5e <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 800189a:	e78b      	b.n	80017b4 <StartDisplayTask+0x118>
 800189c:	2000007c 	.word	0x2000007c
 80018a0:	0802ee6c 	.word	0x0802ee6c
 80018a4:	0802ee78 	.word	0x0802ee78
 80018a8:	0802ee84 	.word	0x0802ee84
 80018ac:	0802ee90 	.word	0x0802ee90
 80018b0:	200009e4 	.word	0x200009e4
 80018b4:	0802ee98 	.word	0x0802ee98
 80018b8:	0802eeb8 	.word	0x0802eeb8
 80018bc:	0802eebc 	.word	0x0802eebc
 80018c0:	0802eecc 	.word	0x0802eecc
 80018c4:	0802eed0 	.word	0x0802eed0
 80018c8:	20000a1c 	.word	0x20000a1c

080018cc <StartSettingsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSettingsTask */
void StartSettingsTask(void *argument)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0b6      	sub	sp, #216	@ 0xd8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSettingsTask */
	size_t  f_size = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	void *  f_pointer = NULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	MQTT_cred_struct mqtt_config;

  SPI_flash_reg_cb(FlashBegin, FlashEnd, RecvBuffSPI2, SendByteSPI2);
 80018e0:	4b46      	ldr	r3, [pc, #280]	@ (80019fc <StartSettingsTask+0x130>)
 80018e2:	4a47      	ldr	r2, [pc, #284]	@ (8001a00 <StartSettingsTask+0x134>)
 80018e4:	4947      	ldr	r1, [pc, #284]	@ (8001a04 <StartSettingsTask+0x138>)
 80018e6:	4848      	ldr	r0, [pc, #288]	@ (8001a08 <StartSettingsTask+0x13c>)
 80018e8:	f003 fc62 	bl	80051b0 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 80018ec:	4947      	ldr	r1, [pc, #284]	@ (8001a0c <StartSettingsTask+0x140>)
 80018ee:	4848      	ldr	r0, [pc, #288]	@ (8001a10 <StartSettingsTask+0x144>)
 80018f0:	f00b f882 	bl	800c9f8 <lfs_fs_ll_init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	da01      	bge.n	80018fe <StartSettingsTask+0x32>
	  HAL_NVIC_SystemReset();
 80018fa:	f004 f8b0 	bl	8005a5e <HAL_NVIC_SystemReset>
  }

  mg_fs_lfs_mkdir("/web");
 80018fe:	4845      	ldr	r0, [pc, #276]	@ (8001a14 <StartSettingsTask+0x148>)
 8001900:	f00b f866 	bl	800c9d0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 8001904:	4844      	ldr	r0, [pc, #272]	@ (8001a18 <StartSettingsTask+0x14c>)
 8001906:	f00b f84f 	bl	800c9a8 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 800190a:	4844      	ldr	r0, [pc, #272]	@ (8001a1c <StartSettingsTask+0x150>)
 800190c:	f00b f84c 	bl	800c9a8 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8001910:	4841      	ldr	r0, [pc, #260]	@ (8001a18 <StartSettingsTask+0x14c>)
 8001912:	f00b f85d 	bl	800c9d0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 8001916:	4842      	ldr	r0, [pc, #264]	@ (8001a20 <StartSettingsTask+0x154>)
 8001918:	f00b f85a 	bl	800c9d0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 800191c:	4841      	ldr	r0, [pc, #260]	@ (8001a24 <StartSettingsTask+0x158>)
 800191e:	f00b f857 	bl	800c9d0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 8001922:	4841      	ldr	r0, [pc, #260]	@ (8001a28 <StartSettingsTask+0x15c>)
 8001924:	f00b f854 	bl	800c9d0 <mg_fs_lfs_mkdir>



  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 8001928:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	483e      	ldr	r0, [pc, #248]	@ (8001a2c <StartSettingsTask+0x160>)
 8001932:	f00a fee1 	bl	800c6f8 <mg_fs_lfs_status>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01c      	beq.n	8001976 <StartSettingsTask+0xaa>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 800193c:	2101      	movs	r1, #1
 800193e:	483b      	ldr	r0, [pc, #236]	@ (8001a2c <StartSettingsTask+0x160>)
 8001940:	f00a ff78 	bl	800c834 <mg_fs_lfs_open>
 8001944:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	22c6      	movs	r2, #198	@ 0xc6
 800194e:	4619      	mov	r1, r3
 8001950:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001954:	f00a ffbc 	bl	800c8d0 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 8001958:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800195c:	f00a ffa4 	bl	800c8a8 <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	723b      	strb	r3, [r7, #8]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8001964:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <StartSettingsTask+0x164>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	f107 0108 	add.w	r1, r7, #8
 800196c:	2302      	movs	r3, #2
 800196e:	2200      	movs	r2, #0
 8001970:	f007 ff78 	bl	8009864 <xQueueGenericSend>
 8001974:	e00e      	b.n	8001994 <StartSettingsTask+0xc8>
  }else{
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	22c6      	movs	r2, #198	@ 0xc6
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f024 faea 	bl	8025f58 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8001984:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <StartSettingsTask+0x164>)
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	f107 0108 	add.w	r1, r7, #8
 800198c:	2302      	movs	r3, #2
 800198e:	2200      	movs	r2, #0
 8001990:	f007 ff68 	bl	8009864 <xQueueGenericSend>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 8001994:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <StartSettingsTask+0x164>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f107 0108 	add.w	r1, r7, #8
 800199c:	2200      	movs	r2, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f008 faf2 	bl	8009f88 <xQueuePeek>
	  if(mqtt_config.save){
 80019a4:	7a3b      	ldrb	r3, [r7, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d022      	beq.n	80019f0 <StartSettingsTask+0x124>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 80019aa:	4820      	ldr	r0, [pc, #128]	@ (8001a2c <StartSettingsTask+0x160>)
 80019ac:	f00a fffc 	bl	800c9a8 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 80019b0:	2102      	movs	r1, #2
 80019b2:	481e      	ldr	r0, [pc, #120]	@ (8001a2c <StartSettingsTask+0x160>)
 80019b4:	f00a ff3e 	bl	800c834 <mg_fs_lfs_open>
 80019b8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 80019bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d015      	beq.n	80019f0 <StartSettingsTask+0x124>
			  //mg_fs_lfs_seek(f_pointer, 0);
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	22c6      	movs	r2, #198	@ 0xc6
 80019ca:	4619      	mov	r1, r3
 80019cc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80019d0:	f00a ff96 	bl	800c900 <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 80019d4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80019d8:	f00a ff66 	bl	800c8a8 <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	723b      	strb	r3, [r7, #8]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <StartSettingsTask+0x164>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	f107 0108 	add.w	r1, r7, #8
 80019e8:	2302      	movs	r3, #2
 80019ea:	2200      	movs	r2, #0
 80019ec:	f007 ff3a 	bl	8009864 <xQueueGenericSend>
		  }
	  }

    osDelay(1000);
 80019f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f4:	f007 f9b3 	bl	8008d5e <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80019f8:	e7cc      	b.n	8001994 <StartSettingsTask+0xc8>
 80019fa:	bf00      	nop
 80019fc:	08001d01 	.word	0x08001d01
 8001a00:	08001d25 	.word	0x08001d25
 8001a04:	08001cd9 	.word	0x08001cd9
 8001a08:	08001cad 	.word	0x08001cad
 8001a0c:	08001d71 	.word	0x08001d71
 8001a10:	08001d4d 	.word	0x08001d4d
 8001a14:	0802eed4 	.word	0x0802eed4
 8001a18:	0802eedc 	.word	0x0802eedc
 8001a1c:	0802eee8 	.word	0x0802eee8
 8001a20:	0802eef8 	.word	0x0802eef8
 8001a24:	0802ef04 	.word	0x0802ef04
 8001a28:	0802ef0c 	.word	0x0802ef0c
 8001a2c:	0802ef14 	.word	0x0802ef14
 8001a30:	20000a0c 	.word	0x20000a0c

08001a34 <StartLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggingTask */
void StartLoggingTask(void *argument)
{
 8001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a36:	b0d5      	sub	sp, #340	@ 0x154
 8001a38:	af06      	add	r7, sp, #24
 8001a3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a3e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a42:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartLoggingTask */

	uint32_t count = 2000;
 8001a44:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a48:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	void *  f_pointer = NULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	size_t fs_size;
	HeapStats_t heap_status;

	osDelay(2000);
 8001a52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a56:	f007 f982 	bl	8008d5e <osDelay>
	reg_logging_fn(add_log_mess_to_q);
 8001a5a:	4859      	ldr	r0, [pc, #356]	@ (8001bc0 <StartLoggingTask+0x18c>)
 8001a5c:	f000 fb5c 	bl	8002118 <reg_logging_fn>

	logging(L_INFO, "Device started...");
 8001a60:	4958      	ldr	r1, [pc, #352]	@ (8001bc4 <StartLoggingTask+0x190>)
 8001a62:	2001      	movs	r0, #1
 8001a64:	f000 fb6a 	bl	800213c <logging>
  /* Infinite loop */
  for(;;)
  {
	  //--------logging
	  if (osMessageQueueGetCount(loggingQHandle)){
 8001a68:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <StartLoggingTask+0x194>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f007 fbd1 	bl	8009214 <osMessageQueueGetCount>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <StartLoggingTask+0x86>
		  log_message_t log;
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 8001a78:	4b53      	ldr	r3, [pc, #332]	@ (8001bc8 <StartLoggingTask+0x194>)
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	f107 010c 	add.w	r1, r7, #12
 8001a80:	2300      	movs	r3, #0
 8001a82:	2200      	movs	r2, #0
 8001a84:	f007 fb68 	bl	8009158 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 8001a88:	2102      	movs	r1, #2
 8001a8a:	4850      	ldr	r0, [pc, #320]	@ (8001bcc <StartLoggingTask+0x198>)
 8001a8c:	f00a fed2 	bl	800c834 <mg_fs_lfs_open>
 8001a90:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 8001a94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001a9c:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001aae:	f00a ff27 	bl	800c900 <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8001ab2:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001ab6:	f00a fef7 	bl	800c8a8 <mg_fs_lfs_close>
	  }
	  //--------logging
    osDelay(500);
 8001aba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001abe:	f007 f94e 	bl	8008d5e <osDelay>


    if (count == 2000){
 8001ac2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001ac6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001aca:	d173      	bne.n	8001bb4 <StartLoggingTask+0x180>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 8001acc:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	483d      	ldr	r0, [pc, #244]	@ (8001bcc <StartLoggingTask+0x198>)
 8001ad6:	f00a fe0f 	bl	800c6f8 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8001ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ade:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d90a      	bls.n	8001afc <StartLoggingTask+0xc8>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 8001ae6:	483a      	ldr	r0, [pc, #232]	@ (8001bd0 <StartLoggingTask+0x19c>)
 8001ae8:	f00a ff5e 	bl	800c9a8 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8001aec:	4938      	ldr	r1, [pc, #224]	@ (8001bd0 <StartLoggingTask+0x19c>)
 8001aee:	4837      	ldr	r0, [pc, #220]	@ (8001bcc <StartLoggingTask+0x198>)
 8001af0:	f00a ff44 	bl	800c97c <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 8001af4:	4937      	ldr	r1, [pc, #220]	@ (8001bd4 <StartLoggingTask+0x1a0>)
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 fb20 	bl	800213c <logging>
    	}

    	count = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    	vPortGetHeapStats(&heap_status);
 8001b02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b06:	4618      	mov	r0, r3
 8001b08:	f00a fd78 	bl	800c5fc <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
                (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 8001b0c:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
                (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 8001b10:	f8d7 6114 	ldr.w	r6, [r7, #276]	@ 0x114
                (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 8001b14:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
                (unsigned int)heap_status.xNumberOfFreeBlocks,
 8001b18:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
                (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 8001b1c:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
                (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8001b20:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
                (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 8001b24:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8001b28:	9404      	str	r4, [sp, #16]
 8001b2a:	9003      	str	r0, [sp, #12]
 8001b2c:	9102      	str	r1, [sp, #8]
 8001b2e:	9201      	str	r2, [sp, #4]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	4633      	mov	r3, r6
 8001b34:	462a      	mov	r2, r5
 8001b36:	4928      	ldr	r1, [pc, #160]	@ (8001bd8 <StartLoggingTask+0x1a4>)
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f000 faff 	bl	800213c <logging>

    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001b3e:	4b27      	ldr	r3, [pc, #156]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b44:	b2d9      	uxtb	r1, r3
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001b46:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b4e:	b2d8      	uxtb	r0, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0c1b      	lsrs	r3, r3, #16
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b58:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001b5a:	4a20      	ldr	r2, [pc, #128]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b5c:	6852      	ldr	r2, [r2, #4]
 8001b5e:	6892      	ldr	r2, [r2, #8]
 8001b60:	0e12      	lsrs	r2, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b62:	9201      	str	r2, [sp, #4]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	4603      	mov	r3, r0
 8001b68:	460a      	mov	r2, r1
 8001b6a:	491d      	ldr	r1, [pc, #116]	@ (8001be0 <StartLoggingTask+0x1ac>)
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f000 fae5 	bl	800213c <logging>

    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8001b72:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	781b      	ldrb	r3, [r3, #0]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b78:	461c      	mov	r4, r3
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8001b7a:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	785b      	ldrb	r3, [r3, #1]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b80:	461d      	mov	r5, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	789b      	ldrb	r3, [r3, #2]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b88:	461a      	mov	r2, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	78db      	ldrb	r3, [r3, #3]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b90:	4619      	mov	r1, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8001b92:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	791b      	ldrb	r3, [r3, #4]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b98:	4618      	mov	r0, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8001b9a:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	795b      	ldrb	r3, [r3, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001ba0:	9303      	str	r3, [sp, #12]
 8001ba2:	9002      	str	r0, [sp, #8]
 8001ba4:	9101      	str	r1, [sp, #4]
 8001ba6:	9200      	str	r2, [sp, #0]
 8001ba8:	462b      	mov	r3, r5
 8001baa:	4622      	mov	r2, r4
 8001bac:	490d      	ldr	r1, [pc, #52]	@ (8001be4 <StartLoggingTask+0x1b0>)
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f000 fac4 	bl	800213c <logging>

    }
    count ++;
 8001bb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  if (osMessageQueueGetCount(loggingQHandle)){
 8001bbe:	e753      	b.n	8001a68 <StartLoggingTask+0x34>
 8001bc0:	08001e4d 	.word	0x08001e4d
 8001bc4:	0802ef28 	.word	0x0802ef28
 8001bc8:	20000a10 	.word	0x20000a10
 8001bcc:	0802ef3c 	.word	0x0802ef3c
 8001bd0:	0802ef4c 	.word	0x0802ef4c
 8001bd4:	0802ef5c 	.word	0x0802ef5c
 8001bd8:	0802ef70 	.word	0x0802ef70
 8001bdc:	200009e4 	.word	0x200009e4
 8001be0:	0802edf4 	.word	0x0802edf4
 8001be4:	0802f004 	.word	0x0802f004

08001be8 <EthResetBegin>:
  /* USER CODE END StartLoggingTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void EthResetBegin(void){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bf2:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <EthResetBegin+0x14>)
 8001bf4:	f004 f9b8 	bl	8005f68 <HAL_GPIO_WritePin>
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40020000 	.word	0x40020000

08001c00 <EthResetEnd>:

void EthResetEnd(void){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c0a:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <EthResetEnd+0x14>)
 8001c0c:	f004 f9ac 	bl	8005f68 <HAL_GPIO_WritePin>
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40020000 	.word	0x40020000

08001c18 <EthBegin>:

void EthBegin(void * param){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <EthBegin+0x2c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f007 f939 	bl	8008ea0 <osMutexAcquire>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c34:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <EthBegin+0x30>)
 8001c36:	f004 f997 	bl	8005f68 <HAL_GPIO_WritePin>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000a14 	.word	0x20000a14
 8001c48:	40020400 	.word	0x40020400

08001c4c <EthEnd>:

void EthEnd(void * param){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	//osDelay(1);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c5a:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <EthEnd+0x28>)
 8001c5c:	f004 f984 	bl	8005f68 <HAL_GPIO_WritePin>
	osMutexRelease(SPI2MutexHandle);
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <EthEnd+0x2c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f007 f966 	bl	8008f36 <osMutexRelease>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40020400 	.word	0x40020400
 8001c78:	20000a14 	.word	0x20000a14

08001c7c <EthTxn>:

uint8_t EthTxn(void *spi, uint8_t data) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8001c88:	f107 020f 	add.w	r2, r7, #15
 8001c8c:	1cf9      	adds	r1, r7, #3
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2301      	movs	r3, #1
 8001c96:	4804      	ldr	r0, [pc, #16]	@ (8001ca8 <EthTxn+0x2c>)
 8001c98:	f005 ff2c 	bl	8007af4 <HAL_SPI_TransmitReceive>
  return rx_data;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000a70 	.word	0x20000a70

08001cac <FlashBegin>:

void FlashBegin(void){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 8001cb0:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <FlashBegin+0x24>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f007 f8f1 	bl	8008ea0 <osMutexAcquire>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cc4:	4803      	ldr	r0, [pc, #12]	@ (8001cd4 <FlashBegin+0x28>)
 8001cc6:	f004 f94f 	bl	8005f68 <HAL_GPIO_WritePin>
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000a14 	.word	0x20000a14
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <FlashEnd>:

void FlashEnd(void){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ce2:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <FlashEnd+0x20>)
 8001ce4:	f004 f940 	bl	8005f68 <HAL_GPIO_WritePin>
	osMutexRelease(SPI2MutexHandle);
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <FlashEnd+0x24>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f007 f922 	bl	8008f36 <osMutexRelease>
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	20000a14 	.word	0x20000a14

08001d00 <SendByteSPI2>:

void SendByteSPI2(uint8_t byte){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &byte, 1, HAL_MAX_DELAY);
 8001d0a:	1df9      	adds	r1, r7, #7
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d10:	2201      	movs	r2, #1
 8001d12:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <SendByteSPI2+0x20>)
 8001d14:	f005 fc91 	bl	800763a <HAL_SPI_Transmit>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000a70 	.word	0x20000a70

08001d24 <RecvBuffSPI2>:

int RecvBuffSPI2(uint8_t * buffer, uint16_t size){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Receive(&hspi2, buffer, size, HAL_MAX_DELAY);
 8001d30:	887a      	ldrh	r2, [r7, #2]
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4803      	ldr	r0, [pc, #12]	@ (8001d48 <RecvBuffSPI2+0x24>)
 8001d3a:	f005 fdc2 	bl	80078c2 <HAL_SPI_Receive>
 8001d3e:	4603      	mov	r3, r0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000a70 	.word	0x20000a70

08001d4c <FS_Lock>:

void FS_Lock(void * param){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <FS_Lock+0x20>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f007 f89f 	bl	8008ea0 <osMutexAcquire>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000a18 	.word	0x20000a18

08001d70 <FS_Unlock>:

void FS_Unlock(void * param){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	osMutexRelease(FSMutexHandle);
 8001d78:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <FS_Unlock+0x1c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f007 f8da 	bl	8008f36 <osMutexRelease>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000a18 	.word	0x20000a18

08001d90 <RW_parameters_from_queue>:

    // �?спользуем функцию отправки и приема байта
    return SPI_SendReceiveByte(hspi, data);
}

void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	70fb      	strb	r3, [r7, #3]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	70bb      	strb	r3, [r7, #2]
	switch (param_type) {
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d02b      	beq.n	8001dfe <RW_parameters_from_queue+0x6e>
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	dc44      	bgt.n	8001e34 <RW_parameters_from_queue+0xa4>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <RW_parameters_from_queue+0x24>
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d018      	beq.n	8001de4 <RW_parameters_from_queue+0x54>
				xQueuePeek(outputReadQHandle, output, 0);
			}else if(direction == S_WRITE){
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}
 8001db2:	e03f      	b.n	8001e34 <RW_parameters_from_queue+0xa4>
			MQTT_cred_struct * pr = (MQTT_cred_struct *) param;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	60fb      	str	r3, [r7, #12]
			if (direction == S_READ){
 8001db8:	78bb      	ldrb	r3, [r7, #2]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d107      	bne.n	8001dce <RW_parameters_from_queue+0x3e>
				xQueuePeek(mqttQHandle, pr, 0);
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <RW_parameters_from_queue+0xac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f008 f8de 	bl	8009f88 <xQueuePeek>
			break;
 8001dcc:	e02f      	b.n	8001e2e <RW_parameters_from_queue+0x9e>
			}else if (direction == S_WRITE){
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d12c      	bne.n	8001e2e <RW_parameters_from_queue+0x9e>
				xQueueOverwrite(mqttQHandle, pr);
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <RW_parameters_from_queue+0xac>)
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	2302      	movs	r3, #2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	68f9      	ldr	r1, [r7, #12]
 8001dde:	f007 fd41 	bl	8009864 <xQueueGenericSend>
			break;
 8001de2:	e024      	b.n	8001e2e <RW_parameters_from_queue+0x9e>
			inputs_state_t * input = (inputs_state_t *) param;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	613b      	str	r3, [r7, #16]
			if (direction == S_READ){
 8001de8:	78bb      	ldrb	r3, [r7, #2]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d121      	bne.n	8001e32 <RW_parameters_from_queue+0xa2>
				xQueuePeek(inputReadQHandle, input, 0);
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <RW_parameters_from_queue+0xb0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	6939      	ldr	r1, [r7, #16]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f008 f8c6 	bl	8009f88 <xQueuePeek>
			break;
 8001dfc:	e019      	b.n	8001e32 <RW_parameters_from_queue+0xa2>
			inputs_state_t * output = (inputs_state_t *) param;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	617b      	str	r3, [r7, #20]
			if (direction == S_READ){
 8001e02:	78bb      	ldrb	r3, [r7, #2]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <RW_parameters_from_queue+0x88>
				xQueuePeek(outputReadQHandle, output, 0);
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <RW_parameters_from_queue+0xb4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6979      	ldr	r1, [r7, #20]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 f8b9 	bl	8009f88 <xQueuePeek>
}
 8001e16:	e00d      	b.n	8001e34 <RW_parameters_from_queue+0xa4>
			}else if(direction == S_WRITE){
 8001e18:	78bb      	ldrb	r3, [r7, #2]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10a      	bne.n	8001e34 <RW_parameters_from_queue+0xa4>
				xQueueOverwrite(outputWriteQHandle, output);
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <RW_parameters_from_queue+0xb8>)
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	2302      	movs	r3, #2
 8001e24:	2200      	movs	r2, #0
 8001e26:	6979      	ldr	r1, [r7, #20]
 8001e28:	f007 fd1c 	bl	8009864 <xQueueGenericSend>
}
 8001e2c:	e002      	b.n	8001e34 <RW_parameters_from_queue+0xa4>
			break;
 8001e2e:	bf00      	nop
 8001e30:	e000      	b.n	8001e34 <RW_parameters_from_queue+0xa4>
			break;
 8001e32:	bf00      	nop
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000a0c 	.word	0x20000a0c
 8001e40:	20000a00 	.word	0x20000a00
 8001e44:	20000a04 	.word	0x20000a04
 8001e48:	20000a08 	.word	0x20000a08

08001e4c <add_log_mess_to_q>:

void add_log_mess_to_q(struct log_message mess){
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	f107 0c08 	add.w	ip, r7, #8
 8001e56:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <add_log_mess_to_q+0x2c>)
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2200      	movs	r2, #0
 8001e62:	f107 0108 	add.w	r1, r7, #8
 8001e66:	f007 f917 	bl	8009098 <osMessageQueuePut>

}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e72:	b004      	add	sp, #16
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000a10 	.word	0x20000a10

08001e7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b38      	ldr	r3, [pc, #224]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b34      	ldr	r3, [pc, #208]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a33      	ldr	r2, [pc, #204]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b31      	ldr	r3, [pc, #196]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eda:	4b2a      	ldr	r3, [pc, #168]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001eec:	4826      	ldr	r0, [pc, #152]	@ (8001f88 <MX_GPIO_Init+0x10c>)
 8001eee:	f004 f83b 	bl	8005f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ef8:	4824      	ldr	r0, [pc, #144]	@ (8001f8c <MX_GPIO_Init+0x110>)
 8001efa:	f004 f835 	bl	8005f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f04:	4820      	ldr	r0, [pc, #128]	@ (8001f88 <MX_GPIO_Init+0x10c>)
 8001f06:	f004 f82f 	bl	8005f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f12:	2302      	movs	r3, #2
 8001f14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481a      	ldr	r0, [pc, #104]	@ (8001f88 <MX_GPIO_Init+0x10c>)
 8001f1e:	f003 fda3 	bl	8005a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8001f22:	23e0      	movs	r3, #224	@ 0xe0
 8001f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f26:	2301      	movs	r3, #1
 8001f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	4619      	mov	r1, r3
 8001f38:	4813      	ldr	r0, [pc, #76]	@ (8001f88 <MX_GPIO_Init+0x10c>)
 8001f3a:	f003 fd95 	bl	8005a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	4619      	mov	r1, r3
 8001f56:	480d      	ldr	r0, [pc, #52]	@ (8001f8c <MX_GPIO_Init+0x110>)
 8001f58:	f003 fd86 	bl	8005a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8001f5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f62:	2301      	movs	r3, #1
 8001f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	4619      	mov	r1, r3
 8001f74:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <MX_GPIO_Init+0x10c>)
 8001f76:	f003 fd77 	bl	8005a68 <HAL_GPIO_Init>

}
 8001f7a:	bf00      	nop
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020400 	.word	0x40020400

08001f90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001f96:	4a13      	ldr	r2, [pc, #76]	@ (8001fe4 <MX_I2C1_Init+0x54>)
 8001f98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001f9c:	4a12      	ldr	r2, [pc, #72]	@ (8001fe8 <MX_I2C1_Init+0x58>)
 8001f9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fce:	f003 ffe5 	bl	8005f9c <HAL_I2C_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fd8:	f000 fa54 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000a1c 	.word	0x20000a1c
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	00030d40 	.word	0x00030d40

08001fec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_I2C_MspInit+0x84>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12b      	bne.n	8002066 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4a17      	ldr	r2, [pc, #92]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	@ 0x30
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800202a:	23c0      	movs	r3, #192	@ 0xc0
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202e:	2312      	movs	r3, #18
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002032:	2301      	movs	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800203a:	2304      	movs	r3, #4
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	480c      	ldr	r0, [pc, #48]	@ (8002078 <HAL_I2C_MspInit+0x8c>)
 8002046:	f003 fd0f 	bl	8005a68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	4a08      	ldr	r2, [pc, #32]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002054:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002058:	6413      	str	r3, [r2, #64]	@ 0x40
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	@ 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40005400 	.word	0x40005400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400

0800207c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <HAL_I2C_MspDeInit+0x38>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10d      	bne.n	80020aa <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_I2C_MspDeInit+0x3c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	4a09      	ldr	r2, [pc, #36]	@ (80020b8 <HAL_I2C_MspDeInit+0x3c>)
 8002094:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002098:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800209a:	2140      	movs	r1, #64	@ 0x40
 800209c:	4807      	ldr	r0, [pc, #28]	@ (80020bc <HAL_I2C_MspDeInit+0x40>)
 800209e:	f003 fe67 	bl	8005d70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80020a2:	2180      	movs	r1, #128	@ 0x80
 80020a4:	4805      	ldr	r0, [pc, #20]	@ (80020bc <HAL_I2C_MspDeInit+0x40>)
 80020a6:	f003 fe63 	bl	8005d70 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40005400 	.word	0x40005400
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020400 	.word	0x40020400

080020c0 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f00a f8a2 	bl	800c21c <pvPortMalloc>
 80020d8:	4603      	mov	r3, r0
 80020da:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <mg_calloc+0x34>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	2100      	movs	r1, #0
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f023 ff32 	bl	8025f58 <memset>
  return p;
 80020f4:	68fb      	ldr	r3, [r7, #12]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <proto>:

#include "mongoose.h"

#define time_ms_now() mg_now()

static void proto(struct log_message mess ){};
 80020fe:	b084      	sub	sp, #16
 8002100:	b490      	push	{r4, r7}
 8002102:	af00      	add	r7, sp, #0
 8002104:	f107 0408 	add.w	r4, r7, #8
 8002108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc90      	pop	{r4, r7}
 8002112:	b004      	add	sp, #16
 8002114:	4770      	bx	lr
	...

08002118 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	if (fn != NULL){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <reg_logging_fn+0x14>
		_send_log_mess = fn;
 8002126:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <reg_logging_fn+0x20>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6013      	str	r3, [r2, #0]
	}
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	20000000 	.word	0x20000000

0800213c <logging>:

void logging(uint8_t level, const char *format, ...){
 800213c:	b40e      	push	{r1, r2, r3}
 800213e:	b5b0      	push	{r4, r5, r7, lr}
 8002140:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8002144:	af3e      	add	r7, sp, #248	@ 0xf8
 8002146:	4602      	mov	r2, r0
 8002148:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800214c:	f2a3 1399 	subw	r3, r3, #409	@ 0x199
 8002150:	701a      	strb	r2, [r3, #0]
    va_list args;

    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8002158:	2101      	movs	r1, #1
 800215a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800215e:	f7ff ffaf 	bl	80020c0 <mg_calloc>
 8002162:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

    if (!tmp_buf){
 8002166:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80e8 	beq.w	8002340 <logging+0x204>
    	return;
    }

    // Инициализация структуры нулями
    memset(&mess, 0, sizeof(log_message_t));
 8002170:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002174:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f023 feec 	bl	8025f58 <memset>

    // Установка уровня логирования
    mess.log_level = level;
 8002180:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002184:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002188:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800218c:	f2a2 1299 	subw	r2, r2, #409	@ 0x199
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	701a      	strb	r2, [r3, #0]


    // Получение текущего времени в миллисекундах
    double ms_now = time_ms_now();
 8002194:	f01f f878 	bl	8021288 <mg_now>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe fa0c 	bl	80005bc <__aeabi_ul2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

    // Преобразование миллисекунд в секунды для time_t
    time_t now = (time_t)(ms_now / 1000.0);
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	4b67      	ldr	r3, [pc, #412]	@ (8002350 <logging+0x214>)
 80021b2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80021b6:	f7fe fb61 	bl	800087c <__aeabi_ddiv>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7fe fdf5 	bl	8000db0 <__aeabi_d2lz>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    // Получение локального времени
    struct tm tm_info;
    localtime_r(&now, &tm_info);
 80021ce:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80021d2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f023 ff53 	bl	8026084 <localtime_r>

    // Форматирование времени
    char time_str[64];
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 80021de:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80021e2:	f107 000c 	add.w	r0, r7, #12
 80021e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002354 <logging+0x218>)
 80021e8:	2140      	movs	r1, #64	@ 0x40
 80021ea:	f024 fd5d 	bl	8026ca8 <strftime>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Вычисление миллисекунд
    int millis = (int)(ms_now) % 1000;
 80021f4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80021f8:	f7fe fcc6 	bl	8000b88 <__aeabi_d2iz>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4a56      	ldr	r2, [pc, #344]	@ (8002358 <logging+0x21c>)
 8002200:	fb82 1203 	smull	r1, r2, r2, r3
 8002204:	1191      	asrs	r1, r2, #6
 8002206:	17da      	asrs	r2, r3, #31
 8002208:	1a8a      	subs	r2, r1, r2
 800220a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800220e:	fb01 f202 	mul.w	r2, r1, r2
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

    // Добавление миллисекунд к строке времени
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8002218:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800221c:	f107 020c 	add.w	r2, r7, #12
 8002220:	18d0      	adds	r0, r2, r3
 8002222:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002226:	f1c3 0140 	rsb	r1, r3, #64	@ 0x40
 800222a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800222e:	4a4b      	ldr	r2, [pc, #300]	@ (800235c <logging+0x220>)
 8002230:	f023 f968 	bl	8025504 <snprintf>
 8002234:	4602      	mov	r2, r0
 8002236:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800223a:	4413      	add	r3, r2
 800223c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Добавление разделителя, например, пробела
    time_str[time_len++] = ' ';
 8002240:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 800224a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800224e:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8002252:	2120      	movs	r1, #32
 8002254:	54d1      	strb	r1, [r2, r3]
    time_str[time_len++] = '\0';
 8002256:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8002260:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002264:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8002268:	2100      	movs	r1, #0
 800226a:	54d1      	strb	r1, [r2, r3]
    time_len += 1;
 800226c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002270:	3301      	adds	r3, #1
 8002272:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Инициализация списка аргументов
    va_start(args, format);
 8002276:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 800227a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800227e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002282:	601a      	str	r2, [r3, #0]

    // Форматирование строки с ограничением на размер log_text
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8002284:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002288:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800228c:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8002290:	1c50      	adds	r0, r2, #1
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002298:	21fd      	movs	r1, #253	@ 0xfd
 800229a:	f023 fbfb 	bl	8025a94 <vsnprintf>
 800229e:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    //formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN  - 3, format, args);

    // Завершение работы со списком аргументов
    va_end(args);

    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s\r\n", time_str, mess.log_text);
 80022a2:	f107 020c 	add.w	r2, r7, #12
 80022a6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80022aa:	3301      	adds	r3, #1
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002360 <logging+0x224>)
 80022b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022b6:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 80022ba:	f023 f923 	bl	8025504 <snprintf>
    // Проверка длины отформатированной строки
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 3) {
 80022be:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	db12      	blt.n	80022ec <logging+0x1b0>
 80022c6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80022ca:	2bfc      	cmp	r3, #252	@ 0xfc
 80022cc:	dc0e      	bgt.n	80022ec <logging+0x1b0>
         mess.log_len = time_len + formatted_len;
 80022ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4413      	add	r3, r2
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022e6:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
 80022ea:	e006      	b.n	80022fa <logging+0x1be>
     } else {
         mess.log_len = LOG_MES_TEXT_LEN - 3;
 80022ec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022f4:	22fd      	movs	r2, #253	@ 0xfd
 80022f6:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
     }

     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 80022fa:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80022fe:	3301      	adds	r3, #1
 8002300:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002304:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8002308:	4618      	mov	r0, r3
 800230a:	f023 fe6c 	bl	8025fe6 <strncpy>
//     mess.log_text[mess.log_len + 1] = '\n';
//     mess.log_text[mess.log_len + 2] = '\0';
//     mess.log_len += 2;  // Обновление длины для учёта \r\n

    // Проверка на существование функции перед вызовом
    if (_send_log_mess) {
 800230e:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <logging+0x228>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00f      	beq.n	8002336 <logging+0x1fa>
        _send_log_mess(mess);
 8002316:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <logging+0x228>)
 8002318:	681d      	ldr	r5, [r3, #0]
 800231a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800231e:	f5a3 7490 	sub.w	r4, r3, #288	@ 0x120
 8002322:	4668      	mov	r0, sp
 8002324:	f104 0310 	add.w	r3, r4, #16
 8002328:	22f2      	movs	r2, #242	@ 0xf2
 800232a:	4619      	mov	r1, r3
 800232c:	f025 f86c 	bl	8027408 <memcpy>
 8002330:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002334:	47a8      	blx	r5
    }

    free(tmp_buf);
 8002336:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800233a:	f00a f83d 	bl	800c3b8 <vPortFree>
 800233e:	e000      	b.n	8002342 <logging+0x206>
    	return;
 8002340:	bf00      	nop
}
 8002342:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8002346:	46bd      	mov	sp, r7
 8002348:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800234c:	b003      	add	sp, #12
 800234e:	4770      	bx	lr
 8002350:	408f4000 	.word	0x408f4000
 8002354:	0802f02c 	.word	0x0802f02c
 8002358:	10624dd3 	.word	0x10624dd3
 800235c:	0802f040 	.word	0x0802f040
 8002360:	0802f048 	.word	0x0802f048
 8002364:	20000000 	.word	0x20000000

08002368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800236c:	f003 fa18 	bl	80057a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002370:	f000 f80e 	bl	8002390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002374:	f7ff fd82 	bl	8001e7c <MX_GPIO_Init>
  MX_SPI2_Init();
 8002378:	f000 f88a 	bl	8002490 <MX_SPI2_Init>
  MX_I2C1_Init();
 800237c:	f7ff fe08 	bl	8001f90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002380:	f006 fc10 	bl	8008ba4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002384:	f7fe feaa 	bl	80010dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002388:	f006 fc30 	bl	8008bec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <main+0x24>

08002390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b094      	sub	sp, #80	@ 0x50
 8002394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002396:	f107 0320 	add.w	r3, r7, #32
 800239a:	2230      	movs	r2, #48	@ 0x30
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f023 fdda 	bl	8025f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <SystemClock_Config+0xc8>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	4a26      	ldr	r2, [pc, #152]	@ (8002458 <SystemClock_Config+0xc8>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c4:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <SystemClock_Config+0xc8>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d0:	2300      	movs	r3, #0
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	4b21      	ldr	r3, [pc, #132]	@ (800245c <SystemClock_Config+0xcc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a20      	ldr	r2, [pc, #128]	@ (800245c <SystemClock_Config+0xcc>)
 80023da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <SystemClock_Config+0xcc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023f6:	2302      	movs	r3, #2
 80023f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002400:	2304      	movs	r3, #4
 8002402:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002404:	2364      	movs	r3, #100	@ 0x64
 8002406:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002408:	2302      	movs	r3, #2
 800240a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800240c:	2304      	movs	r3, #4
 800240e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002410:	f107 0320 	add.w	r3, r7, #32
 8002414:	4618      	mov	r0, r3
 8002416:	f004 fbbd 	bl	8006b94 <HAL_RCC_OscConfig>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002420:	f000 f830 	bl	8002484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002424:	230f      	movs	r3, #15
 8002426:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002428:	2302      	movs	r3, #2
 800242a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002434:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	2103      	movs	r1, #3
 8002440:	4618      	mov	r0, r3
 8002442:	f004 fe1f 	bl	8007084 <HAL_RCC_ClockConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800244c:	f000 f81a 	bl	8002484 <Error_Handler>
  }
}
 8002450:	bf00      	nop
 8002452:	3750      	adds	r7, #80	@ 0x50
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	40007000 	.word	0x40007000

08002460 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a04      	ldr	r2, [pc, #16]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002472:	f003 f9b7 	bl	80057e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40014000 	.word	0x40014000

08002484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002488:	b672      	cpsid	i
}
 800248a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <Error_Handler+0x8>

08002490 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002494:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <MX_SPI2_Init+0x64>)
 8002496:	4a18      	ldr	r2, [pc, #96]	@ (80024f8 <MX_SPI2_Init+0x68>)
 8002498:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800249a:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <MX_SPI2_Init+0x64>)
 800249c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024a2:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a8:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024c4:	2210      	movs	r2, #16
 80024c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d4:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024dc:	220a      	movs	r2, #10
 80024de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024e0:	4804      	ldr	r0, [pc, #16]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024e2:	f005 f821 	bl	8007528 <HAL_SPI_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024ec:	f7ff ffca 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000a70 	.word	0x20000a70
 80024f8:	40003800 	.word	0x40003800

080024fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	@ 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <HAL_SPI_MspInit+0x84>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12c      	bne.n	8002578 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b18      	ldr	r3, [pc, #96]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	4a17      	ldr	r2, [pc, #92]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 8002528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800252c:	6413      	str	r3, [r2, #64]	@ 0x40
 800252e:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a10      	ldr	r2, [pc, #64]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002556:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800255a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002568:	2305      	movs	r3, #5
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	4805      	ldr	r0, [pc, #20]	@ (8002588 <HAL_SPI_MspInit+0x8c>)
 8002574:	f003 fa78 	bl	8005a68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002578:	bf00      	nop
 800257a:	3728      	adds	r7, #40	@ 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40003800 	.word	0x40003800
 8002584:	40023800 	.word	0x40023800
 8002588:	40020400 	.word	0x40020400

0800258c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <HAL_MspInit+0x54>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259a:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <HAL_MspInit+0x54>)
 800259c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a2:	4b0f      	ldr	r3, [pc, #60]	@ (80025e0 <HAL_MspInit+0x54>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <HAL_MspInit+0x54>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	4a0a      	ldr	r2, [pc, #40]	@ (80025e0 <HAL_MspInit+0x54>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025be:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <HAL_MspInit+0x54>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	210f      	movs	r1, #15
 80025ce:	f06f 0001 	mvn.w	r0, #1
 80025d2:	f003 fa1a 	bl	8005a0a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800

080025e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	@ 0x30
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	4b2e      	ldr	r3, [pc, #184]	@ (80026b4 <HAL_InitTick+0xd0>)
 80025fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fc:	4a2d      	ldr	r2, [pc, #180]	@ (80026b4 <HAL_InitTick+0xd0>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002602:	6453      	str	r3, [r2, #68]	@ 0x44
 8002604:	4b2b      	ldr	r3, [pc, #172]	@ (80026b4 <HAL_InitTick+0xd0>)
 8002606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002610:	f107 020c 	add.w	r2, r7, #12
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f004 ff52 	bl	80074c4 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002620:	f004 ff3c 	bl	800749c <HAL_RCC_GetPCLK2Freq>
 8002624:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002628:	4a23      	ldr	r2, [pc, #140]	@ (80026b8 <HAL_InitTick+0xd4>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0c9b      	lsrs	r3, r3, #18
 8002630:	3b01      	subs	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002634:	4b21      	ldr	r3, [pc, #132]	@ (80026bc <HAL_InitTick+0xd8>)
 8002636:	4a22      	ldr	r2, [pc, #136]	@ (80026c0 <HAL_InitTick+0xdc>)
 8002638:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <HAL_InitTick+0xd8>)
 800263c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002640:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002642:	4a1e      	ldr	r2, [pc, #120]	@ (80026bc <HAL_InitTick+0xd8>)
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002648:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <HAL_InitTick+0xd8>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264e:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <HAL_InitTick+0xd8>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002654:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <HAL_InitTick+0xd8>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800265a:	4818      	ldr	r0, [pc, #96]	@ (80026bc <HAL_InitTick+0xd8>)
 800265c:	f005 fd36 	bl	80080cc <HAL_TIM_Base_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002666:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800266a:	2b00      	cmp	r3, #0
 800266c:	d11b      	bne.n	80026a6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800266e:	4813      	ldr	r0, [pc, #76]	@ (80026bc <HAL_InitTick+0xd8>)
 8002670:	f005 fd86 	bl	8008180 <HAL_TIM_Base_Start_IT>
 8002674:	4603      	mov	r3, r0
 8002676:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800267a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800267e:	2b00      	cmp	r3, #0
 8002680:	d111      	bne.n	80026a6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002682:	2018      	movs	r0, #24
 8002684:	f003 f9dd 	bl	8005a42 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	d808      	bhi.n	80026a0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800268e:	2200      	movs	r2, #0
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	2018      	movs	r0, #24
 8002694:	f003 f9b9 	bl	8005a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002698:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <HAL_InitTick+0xe0>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e002      	b.n	80026a6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3730      	adds	r7, #48	@ 0x30
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	431bde83 	.word	0x431bde83
 80026bc:	20000ac8 	.word	0x20000ac8
 80026c0:	40014000 	.word	0x40014000
 80026c4:	20000074 	.word	0x20000074

080026c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026cc:	bf00      	nop
 80026ce:	e7fd      	b.n	80026cc <NMI_Handler+0x4>

080026d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <HardFault_Handler+0x4>

080026d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <MemManage_Handler+0x4>

080026e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <BusFault_Handler+0x4>

080026e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <UsageFault_Handler+0x4>

080026f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002704:	4802      	ldr	r0, [pc, #8]	@ (8002710 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002706:	f005 fd9d 	bl	8008244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000ac8 	.word	0x20000ac8

08002714 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return 1;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_kill>:

int _kill(int pid, int sig)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800272e:	f024 fe27 	bl	8027380 <__errno>
 8002732:	4603      	mov	r3, r0
 8002734:	2216      	movs	r2, #22
 8002736:	601a      	str	r2, [r3, #0]
  return -1;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_exit>:

void _exit (int status)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800274c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ffe7 	bl	8002724 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002756:	bf00      	nop
 8002758:	e7fd      	b.n	8002756 <_exit+0x12>

0800275a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e00a      	b.n	8002782 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800276c:	f3af 8000 	nop.w
 8002770:	4601      	mov	r1, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	60ba      	str	r2, [r7, #8]
 8002778:	b2ca      	uxtb	r2, r1
 800277a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3301      	adds	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	dbf0      	blt.n	800276c <_read+0x12>
  }

  return len;
 800278a:	687b      	ldr	r3, [r7, #4]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e009      	b.n	80027ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	60ba      	str	r2, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3301      	adds	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	dbf1      	blt.n	80027a6 <_write+0x12>
  }
  return len;
 80027c2:	687b      	ldr	r3, [r7, #4]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_close>:

int _close(int file)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027f4:	605a      	str	r2, [r3, #4]
  return 0;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_isatty>:

int _isatty(int file)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800283c:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <_sbrk+0x5c>)
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <_sbrk+0x60>)
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002848:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <_sbrk+0x64>)
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <_sbrk+0x68>)
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <_sbrk+0x64>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d207      	bcs.n	8002874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002864:	f024 fd8c 	bl	8027380 <__errno>
 8002868:	4603      	mov	r3, r0
 800286a:	220c      	movs	r2, #12
 800286c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002872:	e009      	b.n	8002888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002874:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800287a:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <_sbrk+0x64>)
 8002884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20020000 	.word	0x20020000
 8002894:	00000800 	.word	0x00000800
 8002898:	20000b14 	.word	0x20000b14
 800289c:	20018498 	.word	0x20018498

080028a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <SystemInit+0x20>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028aa:	4a05      	ldr	r2, [pc, #20]	@ (80028c0 <SystemInit+0x20>)
 80028ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028c8:	f7ff ffea 	bl	80028a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028cc:	480c      	ldr	r0, [pc, #48]	@ (8002900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ce:	490d      	ldr	r1, [pc, #52]	@ (8002904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d4:	e002      	b.n	80028dc <LoopCopyDataInit>

080028d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028da:	3304      	adds	r3, #4

080028dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e0:	d3f9      	bcc.n	80028d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028e2:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e8:	e001      	b.n	80028ee <LoopFillZerobss>

080028ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028ec:	3204      	adds	r2, #4

080028ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f0:	d3fb      	bcc.n	80028ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028f2:	f024 fd5f 	bl	80273b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f6:	f7ff fd37 	bl	8002368 <main>
  bx  lr    
 80028fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002904:	200009c8 	.word	0x200009c8
  ldr r2, =_sidata
 8002908:	08034814 	.word	0x08034814
  ldr r2, =_sbss
 800290c:	200009c8 	.word	0x200009c8
  ldr r4, =_ebss
 8002910:	20018494 	.word	0x20018494

08002914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002914:	e7fe      	b.n	8002914 <ADC_IRQHandler>

08002916 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	4618      	mov	r0, r3
 800292a:	f009 fc77 	bl	800c21c <pvPortMalloc>
 800292e:	4603      	mov	r3, r0
 8002930:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <mg_calloc+0x34>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	461a      	mov	r2, r3
 8002942:	2100      	movs	r1, #0
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f023 fb07 	bl	8025f58 <memset>
  return p;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <handle_ram_status_get>:

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;



static void handle_ram_status_get(struct mg_connection *c){
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	b093      	sub	sp, #76	@ 0x4c
 8002958:	af08      	add	r7, sp, #32
 800295a:	6078      	str	r0, [r7, #4]
	HeapStats_t heap_status;
	vPortGetHeapStats(&heap_status);
 800295c:	f107 030c 	add.w	r3, r7, #12
 8002960:	4618      	mov	r0, r3
 8002962:	f009 fe4b 	bl	800c5fc <vPortGetHeapStats>

	logging(1, "Start execute API RAM status");
 8002966:	490e      	ldr	r1, [pc, #56]	@ (80029a0 <handle_ram_status_get+0x4c>)
 8002968:	2001      	movs	r0, #1
 800296a:	f7ff fbe7 	bl	800213c <logging>
                  "\"xNumberOfFreeBlocks\": \"%u\","
                  "\"xMinimumEverFreeBytesRemaining\": \"%u\","
                  "\"xNumberOfSuccessfulAllocations\": \"%u\","
                  "\"xNumberOfSuccessfulFrees\": \"%u\""
                  "}\r\n",
                  (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 800296e:	68fb      	ldr	r3, [r7, #12]
                  (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 8002970:	693a      	ldr	r2, [r7, #16]
                  (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 8002972:	6979      	ldr	r1, [r7, #20]
                  (unsigned int)heap_status.xNumberOfFreeBlocks,
 8002974:	69b8      	ldr	r0, [r7, #24]
                  (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 8002976:	69fc      	ldr	r4, [r7, #28]
                  (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8002978:	6a3d      	ldr	r5, [r7, #32]
                  (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 800297a:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 800297c:	9606      	str	r6, [sp, #24]
 800297e:	9505      	str	r5, [sp, #20]
 8002980:	9404      	str	r4, [sp, #16]
 8002982:	9003      	str	r0, [sp, #12]
 8002984:	9102      	str	r1, [sp, #8]
 8002986:	9201      	str	r2, [sp, #4]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <handle_ram_status_get+0x50>)
 800298c:	4a06      	ldr	r2, [pc, #24]	@ (80029a8 <handle_ram_status_get+0x54>)
 800298e:	21c8      	movs	r1, #200	@ 0xc8
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f015 faa3 	bl	8017edc <mg_http_reply>
}
 8002996:	bf00      	nop
 8002998:	372c      	adds	r7, #44	@ 0x2c
 800299a:	46bd      	mov	sp, r7
 800299c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800299e:	bf00      	nop
 80029a0:	0802f050 	.word	0x0802f050
 80029a4:	0802f070 	.word	0x0802f070
 80029a8:	0802f174 	.word	0x0802f174

080029ac <calc_file_md5sum>:

static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b0a0      	sub	sp, #128	@ 0x80
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
	uint32_t md5_str_size = 33; // 32 символа для MD5 + 1 символ для '\0'
 80029b6:	2321      	movs	r3, #33	@ 0x21
 80029b8:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint16_t  buff_len = 1024;
 80029ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint8_t	  digest_len = 16;
 80029c2:	2310      	movs	r3, #16
 80029c4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	char * buff = calloc(buff_len, 1);
 80029c8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ffa1 	bl	8002916 <mg_calloc>
 80029d4:	6738      	str	r0, [r7, #112]	@ 0x70
	if (buff == NULL){
 80029d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <calc_file_md5sum+0x3c>
		free(buff);
 80029dc:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80029de:	f009 fceb 	bl	800c3b8 <vPortFree>
		return -1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029e6:	e067      	b.n	8002ab8 <calc_file_md5sum+0x10c>
	}


	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 80029e8:	2201      	movs	r2, #1
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4834      	ldr	r0, [pc, #208]	@ (8002ac0 <calc_file_md5sum+0x114>)
 80029ee:	f013 ff0d 	bl	801680c <mg_fs_open>
 80029f2:	66f8      	str	r0, [r7, #108]	@ 0x6c
	if (fd==NULL){
 80029f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d108      	bne.n	8002a0c <calc_file_md5sum+0x60>
		mg_fs_close(fd);
 80029fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80029fc:	f013 ff2d 	bl	801685a <mg_fs_close>
		free(buff);
 8002a00:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002a02:	f009 fcd9 	bl	800c3b8 <vPortFree>
		return -2;
 8002a06:	f06f 0301 	mvn.w	r3, #1
 8002a0a:	e055      	b.n	8002ab8 <calc_file_md5sum+0x10c>
		}


	mg_md5_ctx md5_ctx;
	mg_md5_init(&md5_ctx);
 8002a0c:	f107 030c 	add.w	r3, r7, #12
 8002a10:	4618      	mov	r0, r3
 8002a12:	f018 fb75 	bl	801b100 <mg_md5_init>
	size_t bytes_read;
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8002a16:	e006      	b.n	8002a26 <calc_file_md5sum+0x7a>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a1e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002a20:	4618      	mov	r0, r3
 8002a22:	f019 fa19 	bl	801be58 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8002a26:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <calc_file_md5sum+0x114>)
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a2c:	6810      	ldr	r0, [r2, #0]
 8002a2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8002a32:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002a34:	4798      	blx	r3
 8002a36:	66b8      	str	r0, [r7, #104]	@ 0x68
 8002a38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1ec      	bne.n	8002a18 <calc_file_md5sum+0x6c>
	}

	mg_fs_close(fd);
 8002a3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002a40:	f013 ff0b 	bl	801685a <mg_fs_close>

	uint8_t * digest = calloc(digest_len, 1);
 8002a44:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff63 	bl	8002916 <mg_calloc>
 8002a50:	6678      	str	r0, [r7, #100]	@ 0x64
	if (digest == NULL){
 8002a52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d108      	bne.n	8002a6a <calc_file_md5sum+0xbe>
		free(buff);
 8002a58:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002a5a:	f009 fcad 	bl	800c3b8 <vPortFree>
		free(digest);
 8002a5e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002a60:	f009 fcaa 	bl	800c3b8 <vPortFree>
		return -1;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a68:	e026      	b.n	8002ab8 <calc_file_md5sum+0x10c>
	}

	mg_md5_final(&md5_ctx, digest);
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002a70:	4618      	mov	r0, r3
 8002a72:	f019 fa6f 	bl	801bf54 <mg_md5_final>
	// Преобразование контрольной суммы в строку
	for (int i = 0; i < 16; ++i) {
 8002a76:	2300      	movs	r3, #0
 8002a78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a7a:	e013      	b.n	8002aa4 <calc_file_md5sum+0xf8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8002a7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	461a      	mov	r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	1898      	adds	r0, r3, r2
 8002a86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a8e:	1a99      	subs	r1, r3, r2
 8002a90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a94:	4413      	add	r3, r2
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac4 <calc_file_md5sum+0x118>)
 8002a9a:	f022 fd33 	bl	8025504 <snprintf>
	for (int i = 0; i < 16; ++i) {
 8002a9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002aa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	dde8      	ble.n	8002a7c <calc_file_md5sum+0xd0>
	}

	free(buff);
 8002aaa:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002aac:	f009 fc84 	bl	800c3b8 <vPortFree>
	free(digest);
 8002ab0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002ab2:	f009 fc81 	bl	800c3b8 <vPortFree>

	return 0;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3780      	adds	r7, #128	@ 0x80
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	2000000c 	.word	0x2000000c
 8002ac4:	0802f1b8 	.word	0x0802f1b8

08002ac8 <handle_io_status_get>:

static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8002ac8:	b5b0      	push	{r4, r5, r7, lr}
 8002aca:	b094      	sub	sp, #80	@ 0x50
 8002acc:	af06      	add	r7, sp, #24
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]


	//Processing GET request
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad6:	4960      	ldr	r1, [pc, #384]	@ (8002c58 <handle_io_status_get+0x190>)
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f01e feab 	bl	8021834 <mg_str_s>
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae8:	cb0c      	ldmia	r3, {r2, r3}
 8002aea:	c903      	ldmia	r1, {r0, r1}
 8002aec:	f01e ff75 	bl	80219da <mg_match>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d023      	beq.n	8002b3e <handle_io_status_get+0x76>
		struct DeviceStatus status;

		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 8002af6:	4b59      	ldr	r3, [pc, #356]	@ (8002c5c <handle_io_status_get+0x194>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f107 001c 	add.w	r0, r7, #28
 8002afe:	2200      	movs	r2, #0
 8002b00:	2101      	movs	r1, #1
 8002b02:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8002b04:	4b55      	ldr	r3, [pc, #340]	@ (8002c5c <handle_io_status_get+0x194>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f107 021c 	add.w	r2, r7, #28
 8002b0c:	1cd0      	adds	r0, r2, #3
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2102      	movs	r1, #2
 8002b12:	4798      	blx	r3
		mg_http_reply(c, 200, headers, //TODO delete for release,
						"{"
						"\"inputs\": [%d, %d, %d], \"outputs\": [%d, %d, %d]"
						"}\r\n",
						status.inputs[0], status.inputs[1], status.inputs[2],
 8002b14:	7f3b      	ldrb	r3, [r7, #28]
 8002b16:	7f7a      	ldrb	r2, [r7, #29]
 8002b18:	7fb9      	ldrb	r1, [r7, #30]
						status.outputs[0], status.outputs[1], status.outputs[2]
 8002b1a:	7ff8      	ldrb	r0, [r7, #31]
 8002b1c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002b20:	f897 5021 	ldrb.w	r5, [r7, #33]	@ 0x21
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8002b24:	9505      	str	r5, [sp, #20]
 8002b26:	9404      	str	r4, [sp, #16]
 8002b28:	9003      	str	r0, [sp, #12]
 8002b2a:	9102      	str	r1, [sp, #8]
 8002b2c:	9201      	str	r2, [sp, #4]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4b4b      	ldr	r3, [pc, #300]	@ (8002c60 <handle_io_status_get+0x198>)
 8002b32:	4a4c      	ldr	r2, [pc, #304]	@ (8002c64 <handle_io_status_get+0x19c>)
 8002b34:	21c8      	movs	r1, #200	@ 0xc8
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f015 f9d0 	bl	8017edc <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");

	}
}
 8002b3c:	e087      	b.n	8002c4e <handle_io_status_get+0x186>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8002b3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b42:	4949      	ldr	r1, [pc, #292]	@ (8002c68 <handle_io_status_get+0x1a0>)
 8002b44:	4618      	mov	r0, r3
 8002b46:	f01e fe75 	bl	8021834 <mg_str_s>
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b54:	cb0c      	ldmia	r3, {r2, r3}
 8002b56:	c903      	ldmia	r1, {r0, r1}
 8002b58:	f01e ff3f 	bl	80219da <mg_match>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d06d      	beq.n	8002c3e <handle_io_status_get+0x176>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	4a40      	ldr	r2, [pc, #256]	@ (8002c6c <handle_io_status_get+0x1a4>)
 8002b6a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002b6e:	c903      	ldmia	r1, {r0, r1}
 8002b70:	f017 ffce 	bl	801ab10 <mg_json_get_num>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d059      	beq.n	8002c2e <handle_io_status_get+0x166>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 8002b7a:	f107 0308 	add.w	r3, r7, #8
 8002b7e:	6839      	ldr	r1, [r7, #0]
 8002b80:	4a3b      	ldr	r2, [pc, #236]	@ (8002c70 <handle_io_status_get+0x1a8>)
 8002b82:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002b86:	c903      	ldmia	r1, {r0, r1}
 8002b88:	f017 ffc2 	bl	801ab10 <mg_json_get_num>
 8002b8c:	4603      	mov	r3, r0
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d04d      	beq.n	8002c2e <handle_io_status_get+0x166>
			relay_id = (uint8_t) tmp1;
 8002b92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fe f81d 	bl	8000bd8 <__aeabi_d2uiz>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			state = (uint8_t) tmp2;
 8002ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	f7fe f814 	bl	8000bd8 <__aeabi_d2uiz>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8002bb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02f      	beq.n	8002c1e <handle_io_status_get+0x156>
 8002bbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d82b      	bhi.n	8002c1e <handle_io_status_get+0x156>
 8002bc6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <handle_io_status_get+0x10e>
 8002bce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d123      	bne.n	8002c1e <handle_io_status_get+0x156>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 8002bd6:	4b21      	ldr	r3, [pc, #132]	@ (8002c5c <handle_io_status_get+0x194>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f107 0018 	add.w	r0, r7, #24
 8002bde:	2200      	movs	r2, #0
 8002be0:	2102      	movs	r1, #2
 8002be2:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 8002be4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002be8:	3b01      	subs	r3, #1
 8002bea:	3338      	adds	r3, #56	@ 0x38
 8002bec:	443b      	add	r3, r7
 8002bee:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002bf2:	f803 2c20 	strb.w	r2, [r3, #-32]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 8002bf6:	4b19      	ldr	r3, [pc, #100]	@ (8002c5c <handle_io_status_get+0x194>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f107 0018 	add.w	r0, r7, #24
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2102      	movs	r1, #2
 8002c02:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 8002c04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c08:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002c0c:	9201      	str	r2, [sp, #4]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4b18      	ldr	r3, [pc, #96]	@ (8002c74 <handle_io_status_get+0x1ac>)
 8002c12:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <handle_io_status_get+0x19c>)
 8002c14:	21c8      	movs	r1, #200	@ 0xc8
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f015 f960 	bl	8017edc <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8002c1c:	e017      	b.n	8002c4e <handle_io_status_get+0x186>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 8002c1e:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <handle_io_status_get+0x1b0>)
 8002c20:	4a10      	ldr	r2, [pc, #64]	@ (8002c64 <handle_io_status_get+0x19c>)
 8002c22:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f015 f958 	bl	8017edc <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8002c2c:	e00f      	b.n	8002c4e <handle_io_status_get+0x186>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 8002c2e:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <handle_io_status_get+0x1b4>)
 8002c30:	4a0c      	ldr	r2, [pc, #48]	@ (8002c64 <handle_io_status_get+0x19c>)
 8002c32:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f015 f950 	bl	8017edc <mg_http_reply>
}
 8002c3c:	e007      	b.n	8002c4e <handle_io_status_get+0x186>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002c3e:	4b10      	ldr	r3, [pc, #64]	@ (8002c80 <handle_io_status_get+0x1b8>)
 8002c40:	4a08      	ldr	r2, [pc, #32]	@ (8002c64 <handle_io_status_get+0x19c>)
 8002c42:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f015 f948 	bl	8017edc <mg_http_reply>
}
 8002c4c:	e7ff      	b.n	8002c4e <handle_io_status_get+0x186>
 8002c4e:	bf00      	nop
 8002c50:	3738      	adds	r7, #56	@ 0x38
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bdb0      	pop	{r4, r5, r7, pc}
 8002c56:	bf00      	nop
 8002c58:	0802f1c0 	.word	0x0802f1c0
 8002c5c:	20000b18 	.word	0x20000b18
 8002c60:	0802f1c4 	.word	0x0802f1c4
 8002c64:	0802f1f8 	.word	0x0802f1f8
 8002c68:	0802f268 	.word	0x0802f268
 8002c6c:	0802f270 	.word	0x0802f270
 8002c70:	0802f27c 	.word	0x0802f27c
 8002c74:	0802f284 	.word	0x0802f284
 8002c78:	0802f2bc 	.word	0x0802f2bc
 8002c7c:	0802f2f8 	.word	0x0802f2f8
 8002c80:	0802f334 	.word	0x0802f334

08002c84 <handle_mqtt_conf>:

static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b092      	sub	sp, #72	@ 0x48
 8002c88:	af04      	add	r7, sp, #16
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	49a7      	ldr	r1, [pc, #668]	@ (8002f30 <handle_mqtt_conf+0x2ac>)
 8002c94:	4618      	mov	r0, r3
 8002c96:	f01e fdcd 	bl	8021834 <mg_str_s>
 8002c9a:	6839      	ldr	r1, [r7, #0]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	cb0c      	ldmia	r3, {r2, r3}
 8002ca6:	c903      	ldmia	r1, {r0, r1}
 8002ca8:	f01e fe97 	bl	80219da <mg_match>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d04d      	beq.n	8002d4e <handle_mqtt_conf+0xca>

		uint8_t pass_len = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8002cb8:	21c6      	movs	r1, #198	@ 0xc6
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f7ff fe2b 	bl	8002916 <mg_calloc>
 8002cc0:	61f8      	str	r0, [r7, #28]
		if (mqtt_config == NULL) {
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <handle_mqtt_conf+0x5a>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8002cc8:	4b9a      	ldr	r3, [pc, #616]	@ (8002f34 <handle_mqtt_conf+0x2b0>)
 8002cca:	4a9b      	ldr	r2, [pc, #620]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002ccc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f015 f903 	bl	8017edc <mg_http_reply>
			free(mqtt_config);
 8002cd6:	69f8      	ldr	r0, [r7, #28]
 8002cd8:	f009 fb6e 	bl	800c3b8 <vPortFree>
			return;
 8002cdc:	e124      	b.n	8002f28 <handle_mqtt_conf+0x2a4>
		}

		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 8002cde:	4b97      	ldr	r3, [pc, #604]	@ (8002f3c <handle_mqtt_conf+0x2b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	69f8      	ldr	r0, [r7, #28]
 8002ce8:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	33a5      	adds	r3, #165	@ 0xa5
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fad6 	bl	80002a0 <strlen>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	33a5      	adds	r3, #165	@ 0xa5
 8002cfe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d02:	212a      	movs	r1, #42	@ 0x2a
 8002d04:	4618      	mov	r0, r3
 8002d06:	f023 f927 	bl	8025f58 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 8002d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5


		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <handle_mqtt_conf+0xa0>
 8002d20:	4b87      	ldr	r3, [pc, #540]	@ (8002f40 <handle_mqtt_conf+0x2bc>)
 8002d22:	e000      	b.n	8002d26 <handle_mqtt_conf+0xa2>
 8002d24:	4b87      	ldr	r3, [pc, #540]	@ (8002f44 <handle_mqtt_conf+0x2c0>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	3202      	adds	r2, #2
 8002d2a:	69f9      	ldr	r1, [r7, #28]
 8002d2c:	3184      	adds	r1, #132	@ 0x84
 8002d2e:	69f8      	ldr	r0, [r7, #28]
 8002d30:	30a5      	adds	r0, #165	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8002d32:	9003      	str	r0, [sp, #12]
 8002d34:	9102      	str	r1, [sp, #8]
 8002d36:	9201      	str	r2, [sp, #4]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4b83      	ldr	r3, [pc, #524]	@ (8002f48 <handle_mqtt_conf+0x2c4>)
 8002d3c:	4a7e      	ldr	r2, [pc, #504]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002d3e:	21c8      	movs	r1, #200	@ 0xc8
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f015 f8cb 	bl	8017edc <mg_http_reply>

		free(mqtt_config);
 8002d46:	69f8      	ldr	r0, [r7, #28]
 8002d48:	f009 fb36 	bl	800c3b8 <vPortFree>
 8002d4c:	e0ec      	b.n	8002f28 <handle_mqtt_conf+0x2a4>

	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	497e      	ldr	r1, [pc, #504]	@ (8002f4c <handle_mqtt_conf+0x2c8>)
 8002d54:	4618      	mov	r0, r3
 8002d56:	f01e fd6d 	bl	8021834 <mg_str_s>
 8002d5a:	6839      	ldr	r1, [r7, #0]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	cb0c      	ldmia	r3, {r2, r3}
 8002d66:	c903      	ldmia	r1, {r0, r1}
 8002d68:	f01e fe37 	bl	80219da <mg_match>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80d3 	beq.w	8002f1a <handle_mqtt_conf+0x296>

		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8002d74:	21c6      	movs	r1, #198	@ 0xc6
 8002d76:	2001      	movs	r0, #1
 8002d78:	f7ff fdcd 	bl	8002916 <mg_calloc>
 8002d7c:	6378      	str	r0, [r7, #52]	@ 0x34
		if (mqtt_config == NULL) {
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <handle_mqtt_conf+0x116>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8002d84:	4b6b      	ldr	r3, [pc, #428]	@ (8002f34 <handle_mqtt_conf+0x2b0>)
 8002d86:	4a6c      	ldr	r2, [pc, #432]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002d88:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f015 f8a5 	bl	8017edc <mg_http_reply>
			free(mqtt_config);
 8002d92:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002d94:	f009 fb10 	bl	800c3b8 <vPortFree>
			return;
 8002d98:	e0c6      	b.n	8002f28 <handle_mqtt_conf+0x2a4>
		}
		int length;
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	6839      	ldr	r1, [r7, #0]
 8002da0:	4a6b      	ldr	r2, [pc, #428]	@ (8002f50 <handle_mqtt_conf+0x2cc>)
 8002da2:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002da6:	c903      	ldmia	r1, {r0, r1}
 8002da8:	f017 fb78 	bl	801a49c <mg_json_get>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	da07      	bge.n	8002dc2 <handle_mqtt_conf+0x13e>

			mg_http_reply(c, 400, headers, //TODO delete for release,
 8002db2:	4b68      	ldr	r3, [pc, #416]	@ (8002f54 <handle_mqtt_conf+0x2d0>)
 8002db4:	4a60      	ldr	r2, [pc, #384]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002db6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f015 f88e 	bl	8017edc <mg_http_reply>
 8002dc0:	e0a7      	b.n	8002f12 <handle_mqtt_conf+0x28e>
					"{\"status\":\"error\",\"message\":\"Incorrect JSON\"}\r\n");

		}else{//JSON validation success
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	6839      	ldr	r1, [r7, #0]
 8002dc8:	4a63      	ldr	r2, [pc, #396]	@ (8002f58 <handle_mqtt_conf+0x2d4>)
 8002dca:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002dce:	c903      	ldmia	r1, {r0, r1}
 8002dd0:	f017 fee5 	bl	801ab9e <mg_json_get_bool>

			char * broker = NULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	633b      	str	r3, [r7, #48]	@ 0x30
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	4a60      	ldr	r2, [pc, #384]	@ (8002f5c <handle_mqtt_conf+0x2d8>)
 8002ddc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002de0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002de4:	f017 ffa5 	bl	801ad32 <mg_json_get_str>
 8002de8:	6338      	str	r0, [r7, #48]	@ 0x30
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d04e      	beq.n	8002e8e <handle_mqtt_conf+0x20a>
				int err = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8002df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002df6:	f020 f857 	bl	8022ea8 <is_valid_mqtt_url>
 8002dfa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <handle_mqtt_conf+0x18e>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8002e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e04:	3302      	adds	r3, #2
 8002e06:	227f      	movs	r2, #127	@ 0x7f
 8002e08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f023 f8eb 	bl	8025fe6 <strncpy>
 8002e10:	e03d      	b.n	8002e8e <handle_mqtt_conf+0x20a>
				}else{
					switch (err) {
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d82a      	bhi.n	8002e70 <handle_mqtt_conf+0x1ec>
 8002e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <handle_mqtt_conf+0x19c>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e61 	.word	0x08002e61
 8002e24:	08002e51 	.word	0x08002e51
 8002e28:	08002e41 	.word	0x08002e41
 8002e2c:	08002e31 	.word	0x08002e31
						case -1:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e30:	4b4b      	ldr	r3, [pc, #300]	@ (8002f60 <handle_mqtt_conf+0x2dc>)
 8002e32:	4a41      	ldr	r2, [pc, #260]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002e34:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f015 f84f 	bl	8017edc <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not start with 'mqtt://'\"}\r\n");
							break;
 8002e3e:	e01f      	b.n	8002e80 <handle_mqtt_conf+0x1fc>
						case -2:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e40:	4b48      	ldr	r3, [pc, #288]	@ (8002f64 <handle_mqtt_conf+0x2e0>)
 8002e42:	4a3d      	ldr	r2, [pc, #244]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002e44:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f015 f847 	bl	8017edc <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not contain a port separator ':'\"}\r\n");
							break;
 8002e4e:	e017      	b.n	8002e80 <handle_mqtt_conf+0x1fc>
						case -3:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e50:	4b45      	ldr	r3, [pc, #276]	@ (8002f68 <handle_mqtt_conf+0x2e4>)
 8002e52:	4a39      	ldr	r2, [pc, #228]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002e54:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f015 f83f 	bl	8017edc <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid domain or IP address\"}\r\n");
							break;
 8002e5e:	e00f      	b.n	8002e80 <handle_mqtt_conf+0x1fc>
						case -4:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e60:	4b42      	ldr	r3, [pc, #264]	@ (8002f6c <handle_mqtt_conf+0x2e8>)
 8002e62:	4a35      	ldr	r2, [pc, #212]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002e64:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f015 f837 	bl	8017edc <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid port number\"}\r\n");
							break;
 8002e6e:	e007      	b.n	8002e80 <handle_mqtt_conf+0x1fc>
						default:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e70:	4b3f      	ldr	r3, [pc, #252]	@ (8002f70 <handle_mqtt_conf+0x2ec>)
 8002e72:	4a31      	ldr	r2, [pc, #196]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002e74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f015 f82f 	bl	8017edc <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid MQTT_URI\"}\r\n");

							break;
 8002e7e:	bf00      	nop
					}
					free(broker);
 8002e80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e82:	f009 fa99 	bl	800c3b8 <vPortFree>
					free(mqtt_config);
 8002e86:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e88:	f009 fa96 	bl	800c3b8 <vPortFree>
					return;
 8002e8c:	e04c      	b.n	8002f28 <handle_mqtt_conf+0x2a4>
				}

			}
			free(broker);
 8002e8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e90:	f009 fa92 	bl	800c3b8 <vPortFree>

			char * username = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62bb      	str	r3, [r7, #40]	@ 0x28
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4a36      	ldr	r2, [pc, #216]	@ (8002f74 <handle_mqtt_conf+0x2f0>)
 8002e9c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ea0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ea4:	f017 ff45 	bl	801ad32 <mg_json_get_str>
 8002ea8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <handle_mqtt_conf+0x23a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb2:	3384      	adds	r3, #132	@ 0x84
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f023 f894 	bl	8025fe6 <strncpy>
			}
			free(username);
 8002ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ec0:	f009 fa7a 	bl	800c3b8 <vPortFree>

			char * password = NULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4a2b      	ldr	r2, [pc, #172]	@ (8002f78 <handle_mqtt_conf+0x2f4>)
 8002ecc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ed0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ed4:	f017 ff2d 	bl	801ad32 <mg_json_get_str>
 8002ed8:	6278      	str	r0, [r7, #36]	@ 0x24
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <handle_mqtt_conf+0x26a>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee2:	33a5      	adds	r3, #165	@ 0xa5
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f023 f87c 	bl	8025fe6 <strncpy>
			}
			free(password);
 8002eee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ef0:	f009 fa62 	bl	800c3b8 <vPortFree>

			mqtt_config->save = 1;
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]

			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8002efa:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <handle_mqtt_conf+0x2b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	2100      	movs	r1, #0
 8002f02:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f04:	4798      	blx	r3

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8002f06:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <handle_mqtt_conf+0x2f8>)
 8002f08:	4a0b      	ldr	r2, [pc, #44]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002f0a:	21c8      	movs	r1, #200	@ 0xc8
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f014 ffe5 	bl	8017edc <mg_http_reply>
				"{\"status\":\"success\",\"message\":\"MQTT settings updated!\"}\r\n");

		}

		free(mqtt_config);
 8002f12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f14:	f009 fa50 	bl	800c3b8 <vPortFree>
 8002f18:	e006      	b.n	8002f28 <handle_mqtt_conf+0x2a4>

	}else{//error, unsupported method
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002f1a:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <handle_mqtt_conf+0x2fc>)
 8002f1c:	4a06      	ldr	r2, [pc, #24]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002f1e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f014 ffda 	bl	8017edc <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
	}
}
 8002f28:	3738      	adds	r7, #56	@ 0x38
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	0802f1c0 	.word	0x0802f1c0
 8002f34:	0802f388 	.word	0x0802f388
 8002f38:	0802f1f8 	.word	0x0802f1f8
 8002f3c:	20000b18 	.word	0x20000b18
 8002f40:	0802f3c4 	.word	0x0802f3c4
 8002f44:	0802f3cc 	.word	0x0802f3cc
 8002f48:	0802f3d4 	.word	0x0802f3d4
 8002f4c:	0802f268 	.word	0x0802f268
 8002f50:	0802f41c 	.word	0x0802f41c
 8002f54:	0802f420 	.word	0x0802f420
 8002f58:	0802f450 	.word	0x0802f450
 8002f5c:	0802f45c 	.word	0x0802f45c
 8002f60:	0802f468 	.word	0x0802f468
 8002f64:	0802f4ac 	.word	0x0802f4ac
 8002f68:	0802f4f8 	.word	0x0802f4f8
 8002f6c:	0802f538 	.word	0x0802f538
 8002f70:	0802f570 	.word	0x0802f570
 8002f74:	0802f5a4 	.word	0x0802f5a4
 8002f78:	0802f5b0 	.word	0x0802f5b0
 8002f7c:	0802f5bc 	.word	0x0802f5bc
 8002f80:	0802f334 	.word	0x0802f334

08002f84 <handle_dev_status>:

static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b0d2      	sub	sp, #328	@ 0x148
 8002f88:	af06      	add	r7, sp, #24
 8002f8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002f92:	6018      	str	r0, [r3, #0]
 8002f94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f98:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f9c:	6019      	str	r1, [r3, #0]

	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8002f9e:	4acf      	ldr	r2, [pc, #828]	@ (80032dc <handle_dev_status+0x358>)
 8002fa0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	2272      	movs	r2, #114	@ 0x72
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f024 fa2d 	bl	8027408 <memcpy>
	struct mg_connection* mqtt_connection = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	int    str_part_len = 30;
 8002fb4:	231e      	movs	r3, #30
 8002fb6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8002fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fca8 	bl	8002916 <mg_calloc>
 8002fc6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8002fca:	2101      	movs	r1, #1
 8002fcc:	202e      	movs	r0, #46	@ 0x2e
 8002fce:	f7ff fca2 	bl	8002916 <mg_calloc>
 8002fd2:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	202e      	movs	r0, #46	@ 0x2e
 8002fda:	f7ff fc9c 	bl	8002916 <mg_calloc>
 8002fde:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8002fe8:	f7ff fc95 	bl	8002916 <mg_calloc>
 8002fec:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8002ff6:	f7ff fc8e 	bl	8002916 <mg_calloc>
 8002ffa:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 8002ffe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8182 	beq.w	800330c <handle_dev_status+0x388>
 8003008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 817d 	beq.w	800330c <handle_dev_status+0x388>
 8003012:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8178 	beq.w	800330c <handle_dev_status+0x388>
 800301c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8173 	beq.w	800330c <handle_dev_status+0x388>
 8003026:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 816e 	beq.w	800330c <handle_dev_status+0x388>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8003030:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8003034:	49aa      	ldr	r1, [pc, #680]	@ (80032e0 <handle_dev_status+0x35c>)
 8003036:	4618      	mov	r0, r3
 8003038:	f01e fbfc 	bl	8021834 <mg_str_s>
 800303c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003040:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	2300      	movs	r3, #0
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800304e:	cb0c      	ldmia	r3, {r2, r3}
 8003050:	c903      	ldmia	r1, {r0, r1}
 8003052:	f01e fcc2 	bl	80219da <mg_match>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8132 	beq.w	80032c2 <handle_dev_status+0x33e>
			mqtt_connection =  get_mqtt_connection();
 800305e:	f001 fa81 	bl	8004564 <get_mqtt_connection>
 8003062:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

			if(!mqtt_connection){
 8003066:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800306a:	2b00      	cmp	r3, #0
 800306c:	d108      	bne.n	8003080 <handle_dev_status+0xfc>
				strncpy(mqtt_status_str, "closed", str_part_len);
 800306e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003072:	461a      	mov	r2, r3
 8003074:	499b      	ldr	r1, [pc, #620]	@ (80032e4 <handle_dev_status+0x360>)
 8003076:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800307a:	f022 ffb4 	bl	8025fe6 <strncpy>
 800307e:	e041      	b.n	8003104 <handle_dev_status+0x180>
			}else{
				if (mqtt_connection->is_connecting){
 8003080:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003084:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <handle_dev_status+0x120>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8003092:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003096:	461a      	mov	r2, r3
 8003098:	4993      	ldr	r1, [pc, #588]	@ (80032e8 <handle_dev_status+0x364>)
 800309a:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800309e:	f022 ffa2 	bl	8025fe6 <strncpy>
 80030a2:	e019      	b.n	80030d8 <handle_dev_status+0x154>
				}else if(mqtt_connection->is_closing){
 80030a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030a8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <handle_dev_status+0x144>
					strncpy(mqtt_status_str, "closing",str_part_len);
 80030b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030ba:	461a      	mov	r2, r3
 80030bc:	498b      	ldr	r1, [pc, #556]	@ (80032ec <handle_dev_status+0x368>)
 80030be:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80030c2:	f022 ff90 	bl	8025fe6 <strncpy>
 80030c6:	e007      	b.n	80030d8 <handle_dev_status+0x154>
				}else{
					strncpy(mqtt_status_str, "established", str_part_len);
 80030c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030cc:	461a      	mov	r2, r3
 80030ce:	4988      	ldr	r1, [pc, #544]	@ (80032f0 <handle_dev_status+0x36c>)
 80030d0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80030d4:	f022 ff87 	bl	8025fe6 <strncpy>
				}

				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 80030d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030dc:	3308      	adds	r3, #8
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4b84      	ldr	r3, [pc, #528]	@ (80032f4 <handle_dev_status+0x370>)
 80030e2:	4a85      	ldr	r2, [pc, #532]	@ (80032f8 <handle_dev_status+0x374>)
 80030e4:	212e      	movs	r1, #46	@ 0x2e
 80030e6:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80030ea:	f01d febb 	bl	8020e64 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 80030ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030f2:	331c      	adds	r3, #28
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4b7f      	ldr	r3, [pc, #508]	@ (80032f4 <handle_dev_status+0x370>)
 80030f8:	4a7f      	ldr	r2, [pc, #508]	@ (80032f8 <handle_dev_status+0x374>)
 80030fa:	212e      	movs	r1, #46	@ 0x2e
 80030fc:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8003100:	f01d feb0 	bl	8020e64 <mg_snprintf>

			}

			char topic[MQTT_TOPIK_MAX_LEN];
			strcat(pub_topics_str, "\"");
 8003104:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8003108:	f7fd f8ca 	bl	80002a0 <strlen>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003114:	4413      	add	r3, r2
 8003116:	4979      	ldr	r1, [pc, #484]	@ (80032fc <handle_dev_status+0x378>)
 8003118:	461a      	mov	r2, r3
 800311a:	460b      	mov	r3, r1
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков состояний для INPUT_SENSOR
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8003120:	2301      	movs	r3, #1
 8003122:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003126:	e022      	b.n	800316e <handle_dev_status+0x1ea>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8003128:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f107 000c 	add.w	r0, r7, #12
 8003132:	2201      	movs	r2, #1
 8003134:	2180      	movs	r1, #128	@ 0x80
 8003136:	f001 ff27 	bl	8004f88 <generate_status_topik>
				strcat(pub_topics_str, topic);
 800313a:	f107 030c 	add.w	r3, r7, #12
 800313e:	4619      	mov	r1, r3
 8003140:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8003144:	f022 ff10 	bl	8025f68 <strcat>
				strcat(pub_topics_str, "\", \"");
 8003148:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800314c:	f7fd f8a8 	bl	80002a0 <strlen>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003158:	4413      	add	r3, r2
 800315a:	4a69      	ldr	r2, [pc, #420]	@ (8003300 <handle_dev_status+0x37c>)
 800315c:	6810      	ldr	r0, [r2, #0]
 800315e:	6018      	str	r0, [r3, #0]
 8003160:	7912      	ldrb	r2, [r2, #4]
 8003162:	711a      	strb	r2, [r3, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8003164:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003168:	3301      	adds	r3, #1
 800316a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800316e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003172:	2b03      	cmp	r3, #3
 8003174:	ddd8      	ble.n	8003128 <handle_dev_status+0x1a4>
			}

			// Формируем список топиков состояний для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8003176:	2301      	movs	r3, #1
 8003178:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800317c:	e035      	b.n	80031ea <handle_dev_status+0x266>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 800317e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f107 000c 	add.w	r0, r7, #12
 8003188:	2202      	movs	r2, #2
 800318a:	2180      	movs	r1, #128	@ 0x80
 800318c:	f001 fefc 	bl	8004f88 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	4619      	mov	r1, r3
 8003196:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800319a:	f022 fee5 	bl	8025f68 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 800319e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	dc0e      	bgt.n	80031c4 <handle_dev_status+0x240>
					strcat(pub_topics_str, "\", \"");
 80031a6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80031aa:	f7fd f879 	bl	80002a0 <strlen>
 80031ae:	4603      	mov	r3, r0
 80031b0:	461a      	mov	r2, r3
 80031b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031b6:	4413      	add	r3, r2
 80031b8:	4a51      	ldr	r2, [pc, #324]	@ (8003300 <handle_dev_status+0x37c>)
 80031ba:	6810      	ldr	r0, [r2, #0]
 80031bc:	6018      	str	r0, [r3, #0]
 80031be:	7912      	ldrb	r2, [r2, #4]
 80031c0:	711a      	strb	r2, [r3, #4]
 80031c2:	e00d      	b.n	80031e0 <handle_dev_status+0x25c>
				}else{
					strcat(pub_topics_str, "\"");
 80031c4:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80031c8:	f7fd f86a 	bl	80002a0 <strlen>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031d4:	4413      	add	r3, r2
 80031d6:	4949      	ldr	r1, [pc, #292]	@ (80032fc <handle_dev_status+0x378>)
 80031d8:	461a      	mov	r2, r3
 80031da:	460b      	mov	r3, r1
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80031e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80031e4:	3301      	adds	r3, #1
 80031e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80031ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	ddc5      	ble.n	800317e <handle_dev_status+0x1fa>
				}
			}

			strcat(subscr_topics_str, "\"");
 80031f2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80031f6:	f7fd f853 	bl	80002a0 <strlen>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003202:	4413      	add	r3, r2
 8003204:	493d      	ldr	r1, [pc, #244]	@ (80032fc <handle_dev_status+0x378>)
 8003206:	461a      	mov	r2, r3
 8003208:	460b      	mov	r3, r1
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков подписки для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 800320e:	2301      	movs	r3, #1
 8003210:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003214:	e035      	b.n	8003282 <handle_dev_status+0x2fe>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8003216:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f107 000c 	add.w	r0, r7, #12
 8003220:	2202      	movs	r2, #2
 8003222:	2180      	movs	r1, #128	@ 0x80
 8003224:	f001 fe86 	bl	8004f34 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	4619      	mov	r1, r3
 800322e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003232:	f022 fe99 	bl	8025f68 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 8003236:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800323a:	2b02      	cmp	r3, #2
 800323c:	dc0e      	bgt.n	800325c <handle_dev_status+0x2d8>
					strcat(subscr_topics_str, "\", \"");
 800323e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003242:	f7fd f82d 	bl	80002a0 <strlen>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800324e:	4413      	add	r3, r2
 8003250:	4a2b      	ldr	r2, [pc, #172]	@ (8003300 <handle_dev_status+0x37c>)
 8003252:	6810      	ldr	r0, [r2, #0]
 8003254:	6018      	str	r0, [r3, #0]
 8003256:	7912      	ldrb	r2, [r2, #4]
 8003258:	711a      	strb	r2, [r3, #4]
 800325a:	e00d      	b.n	8003278 <handle_dev_status+0x2f4>
				}else{
					strcat(subscr_topics_str, "\"");
 800325c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003260:	f7fd f81e 	bl	80002a0 <strlen>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800326c:	4413      	add	r3, r2
 800326e:	4923      	ldr	r1, [pc, #140]	@ (80032fc <handle_dev_status+0x378>)
 8003270:	461a      	mov	r2, r3
 8003272:	460b      	mov	r3, r1
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8003278:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800327c:	3301      	adds	r3, #1
 800327e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003282:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003286:	2b03      	cmp	r3, #3
 8003288:	ddc5      	ble.n	8003216 <handle_dev_status+0x292>
				}
			}


			mg_http_reply(c, 200, headers, //TODO delete for release,
 800328a:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 800328e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003292:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8003296:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800329a:	9304      	str	r3, [sp, #16]
 800329c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032a0:	9303      	str	r3, [sp, #12]
 80032a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a6:	9302      	str	r3, [sp, #8]
 80032a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	4a13      	ldr	r2, [pc, #76]	@ (8003304 <handle_dev_status+0x380>)
 80032b8:	21c8      	movs	r1, #200	@ 0xc8
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	f014 fe0e 	bl	8017edc <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 80032c0:	e02f      	b.n	8003322 <handle_dev_status+0x39e>
					dev_status_template, mqtt_status_str, mqtt_local_addr, mqtt_server_addr, pub_topics_str, subscr_topics_str);

		}else{//error, unsupported method
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80032c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80032c6:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 80032ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <handle_dev_status+0x384>)
 80032cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <handle_dev_status+0x380>)
 80032ce:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80032d2:	6800      	ldr	r0, [r0, #0]
 80032d4:	f014 fe02 	bl	8017edc <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 80032d8:	e023      	b.n	8003322 <handle_dev_status+0x39e>
 80032da:	bf00      	nop
 80032dc:	0802f66c 	.word	0x0802f66c
 80032e0:	0802f1c0 	.word	0x0802f1c0
 80032e4:	0802f5f8 	.word	0x0802f5f8
 80032e8:	0802f600 	.word	0x0802f600
 80032ec:	0802f60c 	.word	0x0802f60c
 80032f0:	0802f614 	.word	0x0802f614
 80032f4:	08021095 	.word	0x08021095
 80032f8:	0802f620 	.word	0x0802f620
 80032fc:	0802f624 	.word	0x0802f624
 8003300:	0802f628 	.word	0x0802f628
 8003304:	0802f1f8 	.word	0x0802f1f8
 8003308:	0802f334 	.word	0x0802f334
					"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
		}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800330c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003310:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8003314:	4b0f      	ldr	r3, [pc, #60]	@ (8003354 <handle_dev_status+0x3d0>)
 8003316:	4a10      	ldr	r2, [pc, #64]	@ (8003358 <handle_dev_status+0x3d4>)
 8003318:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800331c:	6800      	ldr	r0, [r0, #0]
 800331e:	f014 fddd 	bl	8017edc <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Memory allocation error\"}\r\n");

	}

	free(mqtt_status_str);
 8003322:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003326:	f009 f847 	bl	800c3b8 <vPortFree>
	free(mqtt_server_addr);
 800332a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800332e:	f009 f843 	bl	800c3b8 <vPortFree>
	free(mqtt_local_addr);
 8003332:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8003336:	f009 f83f 	bl	800c3b8 <vPortFree>
	free(pub_topics_str);
 800333a:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800333e:	f009 f83b 	bl	800c3b8 <vPortFree>
	free(subscr_topics_str);
 8003342:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003346:	f009 f837 	bl	800c3b8 <vPortFree>
}
 800334a:	bf00      	nop
 800334c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	0802f630 	.word	0x0802f630
 8003358:	0802f1f8 	.word	0x0802f1f8

0800335c <handle_OPTIONS_method>:


static void handle_OPTIONS_method(struct mg_connection *c){
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

	mg_http_reply(c, 200,
 8003364:	4b04      	ldr	r3, [pc, #16]	@ (8003378 <handle_OPTIONS_method+0x1c>)
 8003366:	4a05      	ldr	r2, [pc, #20]	@ (800337c <handle_OPTIONS_method+0x20>)
 8003368:	21c8      	movs	r1, #200	@ 0xc8
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f014 fdb6 	bl	8017edc <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	0802f6e0 	.word	0x0802f6e0
 800337c:	0802f6e4 	.word	0x0802f6e4

08003380 <handle_restart_mcu>:

static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	@ 0x28
 8003384:	af04      	add	r7, sp, #16
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]

	//HAL_NVIC_SystemReset();
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	491a      	ldr	r1, [pc, #104]	@ (80033f8 <handle_restart_mcu+0x78>)
 8003390:	4618      	mov	r0, r3
 8003392:	f01e fa4f 	bl	8021834 <mg_str_s>
 8003396:	6839      	ldr	r1, [r7, #0]
 8003398:	2300      	movs	r3, #0
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	cb0c      	ldmia	r3, {r2, r3}
 80033a2:	c903      	ldmia	r1, {r0, r1}
 80033a4:	f01e fb19 	bl	80219da <mg_match>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d018      	beq.n	80033e0 <handle_restart_mcu+0x60>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033b2:	617b      	str	r3, [r7, #20]


		mg_timer_add(param->mgr, 2000 /* 05 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	6819      	ldr	r1, [r3, #0]
 80033b8:	2300      	movs	r3, #0
 80033ba:	9302      	str	r3, [sp, #8]
 80033bc:	4b0f      	ldr	r3, [pc, #60]	@ (80033fc <handle_restart_mcu+0x7c>)
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	2301      	movs	r3, #1
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	4608      	mov	r0, r1
 80033ce:	f01a fac7 	bl	801d960 <mg_timer_add>

		mg_http_reply(c, 200, headers, //TODO delete for release,
 80033d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <handle_restart_mcu+0x80>)
 80033d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003404 <handle_restart_mcu+0x84>)
 80033d6:	21c8      	movs	r1, #200	@ 0xc8
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f014 fd7f 	bl	8017edc <mg_http_reply>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 80033de:	e006      	b.n	80033ee <handle_restart_mcu+0x6e>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80033e0:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <handle_restart_mcu+0x88>)
 80033e2:	4a08      	ldr	r2, [pc, #32]	@ (8003404 <handle_restart_mcu+0x84>)
 80033e4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f014 fd77 	bl	8017edc <mg_http_reply>
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	0802f268 	.word	0x0802f268
 80033fc:	08005a5f 	.word	0x08005a5f
 8003400:	0802f784 	.word	0x0802f784
 8003404:	0802f1f8 	.word	0x0802f1f8
 8003408:	0802f7b8 	.word	0x0802f7b8

0800340c <handle_firmware_upload>:

static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 800340c:	b580      	push	{r7, lr}
 800340e:	b0a6      	sub	sp, #152	@ 0x98
 8003410:	af02      	add	r7, sp, #8
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8003416:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800341a:	4920      	ldr	r1, [pc, #128]	@ (800349c <handle_firmware_upload+0x90>)
 800341c:	4618      	mov	r0, r3
 800341e:	f01e fa09 	bl	8021834 <mg_str_s>
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800342c:	cb0c      	ldmia	r3, {r2, r3}
 800342e:	c903      	ldmia	r1, {r0, r1}
 8003430:	f01e fad3 	bl	80219da <mg_match>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d024      	beq.n	8003484 <handle_firmware_upload+0x78>
		char file[MG_PATH_MAX];
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f103 0010 	add.w	r0, r3, #16
 8003440:	f107 0208 	add.w	r2, r7, #8
 8003444:	2380      	movs	r3, #128	@ 0x80
 8003446:	4916      	ldr	r1, [pc, #88]	@ (80034a0 <handle_firmware_upload+0x94>)
 8003448:	f013 fbba 	bl	8016bc0 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 800344c:	f107 0308 	add.w	r3, r7, #8
 8003450:	4914      	ldr	r1, [pc, #80]	@ (80034a4 <handle_firmware_upload+0x98>)
 8003452:	4618      	mov	r0, r3
 8003454:	f7fc fec4 	bl	80001e0 <strcmp>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d108      	bne.n	8003470 <handle_firmware_upload+0x64>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 800345e:	4b12      	ldr	r3, [pc, #72]	@ (80034a8 <handle_firmware_upload+0x9c>)
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	4b12      	ldr	r3, [pc, #72]	@ (80034ac <handle_firmware_upload+0xa0>)
 8003464:	4a12      	ldr	r2, [pc, #72]	@ (80034b0 <handle_firmware_upload+0xa4>)
 8003466:	6839      	ldr	r1, [r7, #0]
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f015 fef3 	bl	8019254 <mg_http_upload>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 800346e:	e010      	b.n	8003492 <handle_firmware_upload+0x86>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <handle_firmware_upload+0x98>)
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	4b0f      	ldr	r3, [pc, #60]	@ (80034b4 <handle_firmware_upload+0xa8>)
 8003476:	4a10      	ldr	r2, [pc, #64]	@ (80034b8 <handle_firmware_upload+0xac>)
 8003478:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f014 fd2d 	bl	8017edc <mg_http_reply>
}
 8003482:	e006      	b.n	8003492 <handle_firmware_upload+0x86>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003484:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <handle_firmware_upload+0xb0>)
 8003486:	4a0c      	ldr	r2, [pc, #48]	@ (80034b8 <handle_firmware_upload+0xac>)
 8003488:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f014 fd25 	bl	8017edc <mg_http_reply>
}
 8003492:	bf00      	nop
 8003494:	3790      	adds	r7, #144	@ 0x90
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	0802f268 	.word	0x0802f268
 80034a0:	0802f808 	.word	0x0802f808
 80034a4:	0802f810 	.word	0x0802f810
 80034a8:	00030d40 	.word	0x00030d40
 80034ac:	0802f820 	.word	0x0802f820
 80034b0:	2000000c 	.word	0x2000000c
 80034b4:	0802f82c 	.word	0x0802f82c
 80034b8:	0802f1f8 	.word	0x0802f1f8
 80034bc:	0802f7b8 	.word	0x0802f7b8

080034c0 <handle_firmware_md5>:

static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80034ca:	f107 030c 	add.w	r3, r7, #12
 80034ce:	491d      	ldr	r1, [pc, #116]	@ (8003544 <handle_firmware_md5+0x84>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f01e f9af 	bl	8021834 <mg_str_s>
 80034d6:	6839      	ldr	r1, [r7, #0]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	cb0c      	ldmia	r3, {r2, r3}
 80034e2:	c903      	ldmia	r1, {r0, r1}
 80034e4:	f01e fa79 	bl	80219da <mg_match>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01f      	beq.n	800352e <handle_firmware_md5+0x6e>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 80034ee:	2101      	movs	r1, #1
 80034f0:	2021      	movs	r0, #33	@ 0x21
 80034f2:	f7ff fa10 	bl	8002916 <mg_calloc>
 80034f6:	6178      	str	r0, [r7, #20]
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 80034f8:	6979      	ldr	r1, [r7, #20]
 80034fa:	4813      	ldr	r0, [pc, #76]	@ (8003548 <handle_firmware_md5+0x88>)
 80034fc:	f7ff fa56 	bl	80029ac <calc_file_md5sum>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <handle_firmware_md5+0x58>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4b10      	ldr	r3, [pc, #64]	@ (800354c <handle_firmware_md5+0x8c>)
 800350c:	4a10      	ldr	r2, [pc, #64]	@ (8003550 <handle_firmware_md5+0x90>)
 800350e:	21c8      	movs	r1, #200	@ 0xc8
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f014 fce3 	bl	8017edc <mg_http_reply>
 8003516:	e006      	b.n	8003526 <handle_firmware_md5+0x66>
						"{\"status\":\"success\",\"message\":\"Firmware update file md5 sum: %s\"}\r\n", md5_str);
		}else{
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8003518:	4b0e      	ldr	r3, [pc, #56]	@ (8003554 <handle_firmware_md5+0x94>)
 800351a:	4a0d      	ldr	r2, [pc, #52]	@ (8003550 <handle_firmware_md5+0x90>)
 800351c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f014 fcdb 	bl	8017edc <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Firmware update file not found\"}\r\n");
		}

		free(md5_str);
 8003526:	6978      	ldr	r0, [r7, #20]
 8003528:	f008 ff46 	bl	800c3b8 <vPortFree>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
	}
}
 800352c:	e006      	b.n	800353c <handle_firmware_md5+0x7c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800352e:	4b0a      	ldr	r3, [pc, #40]	@ (8003558 <handle_firmware_md5+0x98>)
 8003530:	4a07      	ldr	r2, [pc, #28]	@ (8003550 <handle_firmware_md5+0x90>)
 8003532:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f014 fcd0 	bl	8017edc <mg_http_reply>
}
 800353c:	bf00      	nop
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	0802f1c0 	.word	0x0802f1c0
 8003548:	0802f878 	.word	0x0802f878
 800354c:	0802f890 	.word	0x0802f890
 8003550:	0802f1f8 	.word	0x0802f1f8
 8003554:	0802f8d4 	.word	0x0802f8d4
 8003558:	0802f914 	.word	0x0802f914

0800355c <handle_firmware_activate>:

static void handle_firmware_activate(struct mg_connection *c, struct mg_http_message *hm){
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	@ 0x28
 8003560:	af02      	add	r7, sp, #8
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8003566:	f107 0310 	add.w	r3, r7, #16
 800356a:	492e      	ldr	r1, [pc, #184]	@ (8003624 <handle_firmware_activate+0xc8>)
 800356c:	4618      	mov	r0, r3
 800356e:	f01e f961 	bl	8021834 <mg_str_s>
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	2300      	movs	r3, #0
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f107 0310 	add.w	r3, r7, #16
 800357c:	cb0c      	ldmia	r3, {r2, r3}
 800357e:	c903      	ldmia	r1, {r0, r1}
 8003580:	f01e fa2b 	bl	80219da <mg_match>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d017      	beq.n	80035ba <handle_firmware_activate+0x5e>
		size_t  size;

		if (mg_fs_lfs.st("/firmware.bin", &size, NULL)){ //Check if file exist
 800358a:	4b27      	ldr	r3, [pc, #156]	@ (8003628 <handle_firmware_activate+0xcc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f107 010c 	add.w	r1, r7, #12
 8003592:	2200      	movs	r2, #0
 8003594:	4825      	ldr	r0, [pc, #148]	@ (800362c <handle_firmware_activate+0xd0>)
 8003596:	4798      	blx	r3
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <handle_firmware_activate+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 800359e:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <handle_firmware_activate+0xd4>)
 80035a0:	4a24      	ldr	r2, [pc, #144]	@ (8003634 <handle_firmware_activate+0xd8>)
 80035a2:	21c8      	movs	r1, #200	@ 0xc8
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f014 fc99 	bl	8017edc <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");

	}
}
 80035aa:	e036      	b.n	800361a <handle_firmware_activate+0xbe>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80035ac:	4b22      	ldr	r3, [pc, #136]	@ (8003638 <handle_firmware_activate+0xdc>)
 80035ae:	4a21      	ldr	r2, [pc, #132]	@ (8003634 <handle_firmware_activate+0xd8>)
 80035b0:	21c8      	movs	r1, #200	@ 0xc8
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f014 fc92 	bl	8017edc <mg_http_reply>
}
 80035b8:	e02f      	b.n	800361a <handle_firmware_activate+0xbe>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 80035ba:	f107 0318 	add.w	r3, r7, #24
 80035be:	491f      	ldr	r1, [pc, #124]	@ (800363c <handle_firmware_activate+0xe0>)
 80035c0:	4618      	mov	r0, r3
 80035c2:	f01e f937 	bl	8021834 <mg_str_s>
 80035c6:	6839      	ldr	r1, [r7, #0]
 80035c8:	2300      	movs	r3, #0
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	f107 0318 	add.w	r3, r7, #24
 80035d0:	cb0c      	ldmia	r3, {r2, r3}
 80035d2:	c903      	ldmia	r1, {r0, r1}
 80035d4:	f01e fa01 	bl	80219da <mg_match>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <handle_firmware_activate+0xb0>
	    if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 80035de:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <handle_firmware_activate+0xcc>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	4912      	ldr	r1, [pc, #72]	@ (800362c <handle_firmware_activate+0xd0>)
 80035e4:	4816      	ldr	r0, [pc, #88]	@ (8003640 <handle_firmware_activate+0xe4>)
 80035e6:	4798      	blx	r3
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d006      	beq.n	80035fc <handle_firmware_activate+0xa0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80035ee:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <handle_firmware_activate+0xd4>)
 80035f0:	4a10      	ldr	r2, [pc, #64]	@ (8003634 <handle_firmware_activate+0xd8>)
 80035f2:	21c8      	movs	r1, #200	@ 0xc8
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f014 fc71 	bl	8017edc <mg_http_reply>
}
 80035fa:	e00e      	b.n	800361a <handle_firmware_activate+0xbe>
			mg_http_reply(c, 500, headers, //TODO delete for release,
 80035fc:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <handle_firmware_activate+0xe8>)
 80035fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003634 <handle_firmware_activate+0xd8>)
 8003600:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f014 fc69 	bl	8017edc <mg_http_reply>
}
 800360a:	e006      	b.n	800361a <handle_firmware_activate+0xbe>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800360c:	4b0e      	ldr	r3, [pc, #56]	@ (8003648 <handle_firmware_activate+0xec>)
 800360e:	4a09      	ldr	r2, [pc, #36]	@ (8003634 <handle_firmware_activate+0xd8>)
 8003610:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f014 fc61 	bl	8017edc <mg_http_reply>
}
 800361a:	bf00      	nop
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	0802f1c0 	.word	0x0802f1c0
 8003628:	2000000c 	.word	0x2000000c
 800362c:	0802f964 	.word	0x0802f964
 8003630:	0802f974 	.word	0x0802f974
 8003634:	0802f1f8 	.word	0x0802f1f8
 8003638:	0802f9ac 	.word	0x0802f9ac
 800363c:	0802f268 	.word	0x0802f268
 8003640:	0802f878 	.word	0x0802f878
 8003644:	0802f9e8 	.word	0x0802f9e8
 8003648:	0802fa2c 	.word	0x0802fa2c

0800364c <handle_firmware_deactivate>:

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af02      	add	r7, sp, #8
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8003656:	f107 0308 	add.w	r3, r7, #8
 800365a:	4918      	ldr	r1, [pc, #96]	@ (80036bc <handle_firmware_deactivate+0x70>)
 800365c:	4618      	mov	r0, r3
 800365e:	f01e f8e9 	bl	8021834 <mg_str_s>
 8003662:	6839      	ldr	r1, [r7, #0]
 8003664:	2300      	movs	r3, #0
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	f107 0308 	add.w	r3, r7, #8
 800366c:	cb0c      	ldmia	r3, {r2, r3}
 800366e:	c903      	ldmia	r1, {r0, r1}
 8003670:	f01e f9b3 	bl	80219da <mg_match>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d014      	beq.n	80036a4 <handle_firmware_deactivate+0x58>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 800367a:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <handle_firmware_deactivate+0x74>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4811      	ldr	r0, [pc, #68]	@ (80036c4 <handle_firmware_deactivate+0x78>)
 8003680:	4798      	blx	r3
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d006      	beq.n	8003696 <handle_firmware_deactivate+0x4a>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8003688:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <handle_firmware_deactivate+0x7c>)
 800368a:	4a10      	ldr	r2, [pc, #64]	@ (80036cc <handle_firmware_deactivate+0x80>)
 800368c:	21c8      	movs	r1, #200	@ 0xc8
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f014 fc24 	bl	8017edc <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 8003694:	e00d      	b.n	80036b2 <handle_firmware_deactivate+0x66>
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8003696:	4b0e      	ldr	r3, [pc, #56]	@ (80036d0 <handle_firmware_deactivate+0x84>)
 8003698:	4a0c      	ldr	r2, [pc, #48]	@ (80036cc <handle_firmware_deactivate+0x80>)
 800369a:	21c8      	movs	r1, #200	@ 0xc8
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f014 fc1d 	bl	8017edc <mg_http_reply>
}
 80036a2:	e006      	b.n	80036b2 <handle_firmware_deactivate+0x66>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <handle_firmware_deactivate+0x88>)
 80036a6:	4a09      	ldr	r2, [pc, #36]	@ (80036cc <handle_firmware_deactivate+0x80>)
 80036a8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f014 fc15 	bl	8017edc <mg_http_reply>
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	0802f268 	.word	0x0802f268
 80036c0:	2000000c 	.word	0x2000000c
 80036c4:	0802f964 	.word	0x0802f964
 80036c8:	0802fa84 	.word	0x0802fa84
 80036cc:	0802f1f8 	.word	0x0802f1f8
 80036d0:	0802fac0 	.word	0x0802fac0
 80036d4:	0802f7b8 	.word	0x0802f7b8

080036d8 <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	4915      	ldr	r1, [pc, #84]	@ (800373c <handle_web_files_remove+0x64>)
 80036e8:	4618      	mov	r0, r3
 80036ea:	f01e f8a3 	bl	8021834 <mg_str_s>
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	2300      	movs	r3, #0
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	cb0c      	ldmia	r3, {r2, r3}
 80036fa:	c903      	ldmia	r1, {r0, r1}
 80036fc:	f01e f96d 	bl	80219da <mg_match>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00e      	beq.n	8003724 <handle_web_files_remove+0x4c>
			mg_fs_lfs.rm("/web");
 8003706:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <handle_web_files_remove+0x68>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	480e      	ldr	r0, [pc, #56]	@ (8003744 <handle_web_files_remove+0x6c>)
 800370c:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 800370e:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <handle_web_files_remove+0x68>)
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	480c      	ldr	r0, [pc, #48]	@ (8003744 <handle_web_files_remove+0x6c>)
 8003714:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8003716:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <handle_web_files_remove+0x70>)
 8003718:	4a0c      	ldr	r2, [pc, #48]	@ (800374c <handle_web_files_remove+0x74>)
 800371a:	21c8      	movs	r1, #200	@ 0xc8
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f014 fbdd 	bl	8017edc <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 8003722:	e006      	b.n	8003732 <handle_web_files_remove+0x5a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003724:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <handle_web_files_remove+0x78>)
 8003726:	4a09      	ldr	r2, [pc, #36]	@ (800374c <handle_web_files_remove+0x74>)
 8003728:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f014 fbd5 	bl	8017edc <mg_http_reply>
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	0802f268 	.word	0x0802f268
 8003740:	2000000c 	.word	0x2000000c
 8003744:	0802fb04 	.word	0x0802fb04
 8003748:	0802fb0c 	.word	0x0802fb0c
 800374c:	0802f1f8 	.word	0x0802f1f8
 8003750:	0802f7b8 	.word	0x0802f7b8

08003754 <handle_fs_mkdir>:

// Функция для создания папки
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b0c6      	sub	sp, #280	@ 0x118
 8003758:	af02      	add	r7, sp, #8
 800375a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800375e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003762:	6018      	str	r0, [r3, #0]
 8003764:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003768:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800376c:	6019      	str	r1, [r3, #0]
  char name[123];
  char path[MG_PATH_MAX];

  if (mg_match(hm->method, mg_str("POST"), NULL)){
 800376e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003772:	4934      	ldr	r1, [pc, #208]	@ (8003844 <handle_fs_mkdir+0xf0>)
 8003774:	4618      	mov	r0, r3
 8003776:	f01e f85d 	bl	8021834 <mg_str_s>
 800377a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800377e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800378c:	cb0c      	ldmia	r3, {r2, r3}
 800378e:	c903      	ldmia	r1, {r0, r1}
 8003790:	f01e f923 	bl	80219da <mg_match>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d043      	beq.n	8003822 <handle_fs_mkdir+0xce>
			// Получаем имя папки из параметра запроса
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 800379a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800379e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f503 7000 	add.w	r0, r3, #512	@ 0x200
 80037a8:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80037ac:	237b      	movs	r3, #123	@ 0x7b
 80037ae:	4926      	ldr	r1, [pc, #152]	@ (8003848 <handle_fs_mkdir+0xf4>)
 80037b0:	f013 fa06 	bl	8016bc0 <mg_http_get_var>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	dd27      	ble.n	800380a <handle_fs_mkdir+0xb6>
		// Формируем полный путь
		snprintf(path, sizeof(path), "/web/%s", name);
 80037ba:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80037be:	f107 000c 	add.w	r0, r7, #12
 80037c2:	4a22      	ldr	r2, [pc, #136]	@ (800384c <handle_fs_mkdir+0xf8>)
 80037c4:	2180      	movs	r1, #128	@ 0x80
 80037c6:	f021 fe9d 	bl	8025504 <snprintf>

		// Создаем папку
		if (mg_fs_lfs.mkd(path)) {
 80037ca:	4b21      	ldr	r3, [pc, #132]	@ (8003850 <handle_fs_mkdir+0xfc>)
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	f107 020c 	add.w	r2, r7, #12
 80037d2:	4610      	mov	r0, r2
 80037d4:	4798      	blx	r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <handle_fs_mkdir+0x9e>
		  // Если создание успешно, отправляем положительный ответ
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 80037dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037e0:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80037e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003854 <handle_fs_mkdir+0x100>)
 80037e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003858 <handle_fs_mkdir+0x104>)
 80037e8:	21c8      	movs	r1, #200	@ 0xc8
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	f014 fb76 	bl	8017edc <mg_http_reply>
	  }
  }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
  }
}
 80037f0:	e022      	b.n	8003838 <handle_fs_mkdir+0xe4>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 80037f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037f6:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80037fa:	4b18      	ldr	r3, [pc, #96]	@ (800385c <handle_fs_mkdir+0x108>)
 80037fc:	4a16      	ldr	r2, [pc, #88]	@ (8003858 <handle_fs_mkdir+0x104>)
 80037fe:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003802:	6800      	ldr	r0, [r0, #0]
 8003804:	f014 fb6a 	bl	8017edc <mg_http_reply>
}
 8003808:	e016      	b.n	8003838 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800380a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800380e:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8003812:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <handle_fs_mkdir+0x10c>)
 8003814:	4a10      	ldr	r2, [pc, #64]	@ (8003858 <handle_fs_mkdir+0x104>)
 8003816:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800381a:	6800      	ldr	r0, [r0, #0]
 800381c:	f014 fb5e 	bl	8017edc <mg_http_reply>
}
 8003820:	e00a      	b.n	8003838 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003822:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003826:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800382a:	4b0e      	ldr	r3, [pc, #56]	@ (8003864 <handle_fs_mkdir+0x110>)
 800382c:	4a0a      	ldr	r2, [pc, #40]	@ (8003858 <handle_fs_mkdir+0x104>)
 800382e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003832:	6800      	ldr	r0, [r0, #0]
 8003834:	f014 fb52 	bl	8017edc <mg_http_reply>
}
 8003838:	bf00      	nop
 800383a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	0802f268 	.word	0x0802f268
 8003848:	0802fb54 	.word	0x0802fb54
 800384c:	0802fb5c 	.word	0x0802fb5c
 8003850:	2000000c 	.word	0x2000000c
 8003854:	0802fb64 	.word	0x0802fb64
 8003858:	0802f1f8 	.word	0x0802f1f8
 800385c:	0802fb98 	.word	0x0802fb98
 8003860:	0802fbd4 	.word	0x0802fbd4
 8003864:	0802f7b8 	.word	0x0802f7b8

08003868 <handle_fs_get_log>:

// function for show logging
// function for show logging
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8003868:	b580      	push	{r7, lr}
 800386a:	b090      	sub	sp, #64	@ 0x40
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8003874:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003878:	492c      	ldr	r1, [pc, #176]	@ (800392c <handle_fs_get_log+0xc4>)
 800387a:	4618      	mov	r0, r3
 800387c:	f01d ffda 	bl	8021834 <mg_str_s>
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	2300      	movs	r3, #0
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800388a:	cb0c      	ldmia	r3, {r2, r3}
 800388c:	c903      	ldmia	r1, {r0, r1}
 800388e:	f01e f8a4 	bl	80219da <mg_match>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02b      	beq.n	80038f0 <handle_fs_get_log+0x88>

		struct mg_http_serve_opts opts = {
 8003898:	f107 0310 	add.w	r3, r7, #16
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	611a      	str	r2, [r3, #16]
 80038a8:	615a      	str	r2, [r3, #20]
 80038aa:	4b21      	ldr	r3, [pc, #132]	@ (8003930 <handle_fs_get_log+0xc8>)
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	4b21      	ldr	r3, [pc, #132]	@ (8003934 <handle_fs_get_log+0xcc>)
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
			.root_dir = "/log",
			.fs = &mg_fs_lfs
		};

		switch (number) {
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <handle_fs_get_log+0x58>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d008      	beq.n	80038d0 <handle_fs_get_log+0x68>
 80038be:	e00f      	b.n	80038e0 <handle_fs_get_log+0x78>
			case 0:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 80038c0:	f107 0310 	add.w	r3, r7, #16
 80038c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003938 <handle_fs_get_log+0xd0>)
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f014 fcfb 	bl	80182c4 <mg_http_serve_file>
				break;
 80038ce:	e029      	b.n	8003924 <handle_fs_get_log+0xbc>
			case 1:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 80038d0:	f107 0310 	add.w	r3, r7, #16
 80038d4:	4a19      	ldr	r2, [pc, #100]	@ (800393c <handle_fs_get_log+0xd4>)
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f014 fcf3 	bl	80182c4 <mg_http_serve_file>
				break;
 80038de:	e021      	b.n	8003924 <handle_fs_get_log+0xbc>
			default:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 80038e0:	f107 0310 	add.w	r3, r7, #16
 80038e4:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <handle_fs_get_log+0xd0>)
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f014 fceb 	bl	80182c4 <mg_http_serve_file>
				break;
 80038ee:	e019      	b.n	8003924 <handle_fs_get_log+0xbc>
		}


	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 80038f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038f4:	4912      	ldr	r1, [pc, #72]	@ (8003940 <handle_fs_get_log+0xd8>)
 80038f6:	4618      	mov	r0, r3
 80038f8:	f01d ff9c 	bl	8021834 <mg_str_s>
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	2300      	movs	r3, #0
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003906:	cb0c      	ldmia	r3, {r2, r3}
 8003908:	c903      	ldmia	r1, {r0, r1}
 800390a:	f01e f866 	bl	80219da <mg_match>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d107      	bne.n	8003924 <handle_fs_get_log+0xbc>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003914:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <handle_fs_get_log+0xdc>)
 8003916:	4a0c      	ldr	r2, [pc, #48]	@ (8003948 <handle_fs_get_log+0xe0>)
 8003918:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f014 fadd 	bl	8017edc <mg_http_reply>
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}
}
 8003922:	e7ff      	b.n	8003924 <handle_fs_get_log+0xbc>
 8003924:	bf00      	nop
 8003926:	3738      	adds	r7, #56	@ 0x38
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	0802f1c0 	.word	0x0802f1c0
 8003930:	0802fc10 	.word	0x0802fc10
 8003934:	2000000c 	.word	0x2000000c
 8003938:	0802fc18 	.word	0x0802fc18
 800393c:	0802fc28 	.word	0x0802fc28
 8003940:	0802f268 	.word	0x0802f268
 8003944:	0802fa2c 	.word	0x0802fa2c
 8003948:	0802f1f8 	.word	0x0802f1f8

0800394c <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b0ac      	sub	sp, #176	@ 0xb0
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

	if (ev == MG_EV_HTTP_MSG) {
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b0b      	cmp	r3, #11
 800395c:	f040 81c0 	bne.w	8003ce0 <dashboard+0x394>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8003966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800396a:	49b5      	ldr	r1, [pc, #724]	@ (8003c40 <dashboard+0x2f4>)
 800396c:	4618      	mov	r0, r3
 800396e:	f01d ff61 	bl	8021834 <mg_str_s>
 8003972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800397e:	cb0c      	ldmia	r3, {r2, r3}
 8003980:	c903      	ldmia	r1, {r0, r1}
 8003982:	f01e f82a 	bl	80219da <mg_match>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <dashboard+0x48>
            	handle_OPTIONS_method(c);
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7ff fce5 	bl	800335c <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 8003992:	e1a5      	b.n	8003ce0 <dashboard+0x394>
        }else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8003994:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003998:	49aa      	ldr	r1, [pc, #680]	@ (8003c44 <dashboard+0x2f8>)
 800399a:	4618      	mov	r0, r3
 800399c:	f01d ff4a 	bl	8021834 <mg_str_s>
 80039a0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039a4:	2300      	movs	r3, #0
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039ac:	cb0c      	ldmia	r3, {r2, r3}
 80039ae:	3108      	adds	r1, #8
 80039b0:	c903      	ldmia	r1, {r0, r1}
 80039b2:	f01e f812 	bl	80219da <mg_match>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <dashboard+0x78>
			handle_ram_status_get(c);
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7fe ffc9 	bl	8002954 <handle_ram_status_get>
}
 80039c2:	e18d      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 80039c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80039c8:	499f      	ldr	r1, [pc, #636]	@ (8003c48 <dashboard+0x2fc>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f01d ff32 	bl	8021834 <mg_str_s>
 80039d0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039d4:	2300      	movs	r3, #0
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80039dc:	cb0c      	ldmia	r3, {r2, r3}
 80039de:	3108      	adds	r1, #8
 80039e0:	c903      	ldmia	r1, {r0, r1}
 80039e2:	f01d fffa 	bl	80219da <mg_match>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <dashboard+0xac>
			handle_io_status_get(c, hm);
 80039ec:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff f869 	bl	8002ac8 <handle_io_status_get>
}
 80039f6:	e173      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 80039f8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80039fc:	4993      	ldr	r1, [pc, #588]	@ (8003c4c <dashboard+0x300>)
 80039fe:	4618      	mov	r0, r3
 8003a00:	f01d ff18 	bl	8021834 <mg_str_s>
 8003a04:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003a10:	cb0c      	ldmia	r3, {r2, r3}
 8003a12:	3108      	adds	r1, #8
 8003a14:	c903      	ldmia	r1, {r0, r1}
 8003a16:	f01d ffe0 	bl	80219da <mg_match>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <dashboard+0xe0>
			handle_mqtt_conf(c, hm);
 8003a20:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f7ff f92d 	bl	8002c84 <handle_mqtt_conf>
}
 8003a2a:	e159      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8003a2c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003a30:	4987      	ldr	r1, [pc, #540]	@ (8003c50 <dashboard+0x304>)
 8003a32:	4618      	mov	r0, r3
 8003a34:	f01d fefe 	bl	8021834 <mg_str_s>
 8003a38:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003a44:	cb0c      	ldmia	r3, {r2, r3}
 8003a46:	3108      	adds	r1, #8
 8003a48:	c903      	ldmia	r1, {r0, r1}
 8003a4a:	f01d ffc6 	bl	80219da <mg_match>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <dashboard+0x114>
			handle_dev_status(c, hm);
 8003a54:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff fa93 	bl	8002f84 <handle_dev_status>
}
 8003a5e:	e13f      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8003a60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a64:	497b      	ldr	r1, [pc, #492]	@ (8003c54 <dashboard+0x308>)
 8003a66:	4618      	mov	r0, r3
 8003a68:	f01d fee4 	bl	8021834 <mg_str_s>
 8003a6c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a70:	2300      	movs	r3, #0
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a78:	cb0c      	ldmia	r3, {r2, r3}
 8003a7a:	3108      	adds	r1, #8
 8003a7c:	c903      	ldmia	r1, {r0, r1}
 8003a7e:	f01d ffac 	bl	80219da <mg_match>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d006      	beq.n	8003a96 <dashboard+0x14a>
			handle_fs_get_log(c, hm, 0);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff feea 	bl	8003868 <handle_fs_get_log>
}
 8003a94:	e124      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8003a96:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003a9a:	496f      	ldr	r1, [pc, #444]	@ (8003c58 <dashboard+0x30c>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f01d fec9 	bl	8021834 <mg_str_s>
 8003aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003aae:	cb0c      	ldmia	r3, {r2, r3}
 8003ab0:	3108      	adds	r1, #8
 8003ab2:	c903      	ldmia	r1, {r0, r1}
 8003ab4:	f01d ff91 	bl	80219da <mg_match>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <dashboard+0x180>
			handle_fs_get_log(c, hm, 1);
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f7ff fecf 	bl	8003868 <handle_fs_get_log>
}
 8003aca:	e109      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8003acc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ad0:	4962      	ldr	r1, [pc, #392]	@ (8003c5c <dashboard+0x310>)
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f01d feae 	bl	8021834 <mg_str_s>
 8003ad8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003adc:	2300      	movs	r3, #0
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ae4:	cb0c      	ldmia	r3, {r2, r3}
 8003ae6:	3108      	adds	r1, #8
 8003ae8:	c903      	ldmia	r1, {r0, r1}
 8003aea:	f01d ff76 	bl	80219da <mg_match>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <dashboard+0x1b4>
			handle_restart_mcu(c, hm);
 8003af4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff fc41 	bl	8003380 <handle_restart_mcu>
}
 8003afe:	e0ef      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8003b00:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b04:	4956      	ldr	r1, [pc, #344]	@ (8003c60 <dashboard+0x314>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f01d fe94 	bl	8021834 <mg_str_s>
 8003b0c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b10:	2300      	movs	r3, #0
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b18:	cb0c      	ldmia	r3, {r2, r3}
 8003b1a:	3108      	adds	r1, #8
 8003b1c:	c903      	ldmia	r1, {r0, r1}
 8003b1e:	f01d ff5c 	bl	80219da <mg_match>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <dashboard+0x1e8>
			handle_firmware_upload(c, hm);
 8003b28:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff fc6d 	bl	800340c <handle_firmware_upload>
}
 8003b32:	e0d5      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8003b34:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b38:	494a      	ldr	r1, [pc, #296]	@ (8003c64 <dashboard+0x318>)
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f01d fe7a 	bl	8021834 <mg_str_s>
 8003b40:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b44:	2300      	movs	r3, #0
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b4c:	cb0c      	ldmia	r3, {r2, r3}
 8003b4e:	3108      	adds	r1, #8
 8003b50:	c903      	ldmia	r1, {r0, r1}
 8003b52:	f01d ff42 	bl	80219da <mg_match>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <dashboard+0x21c>
			handle_firmware_md5(c, hm);
 8003b5c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff fcad 	bl	80034c0 <handle_firmware_md5>
}
 8003b66:	e0bb      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/activate"), NULL)){
 8003b68:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b6c:	493e      	ldr	r1, [pc, #248]	@ (8003c68 <dashboard+0x31c>)
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f01d fe60 	bl	8021834 <mg_str_s>
 8003b74:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b80:	cb0c      	ldmia	r3, {r2, r3}
 8003b82:	3108      	adds	r1, #8
 8003b84:	c903      	ldmia	r1, {r0, r1}
 8003b86:	f01d ff28 	bl	80219da <mg_match>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <dashboard+0x250>
			handle_firmware_activate(c, hm);
 8003b90:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7ff fce1 	bl	800355c <handle_firmware_activate>
}
 8003b9a:	e0a1      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8003b9c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003ba0:	4932      	ldr	r1, [pc, #200]	@ (8003c6c <dashboard+0x320>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f01d fe46 	bl	8021834 <mg_str_s>
 8003ba8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bac:	2300      	movs	r3, #0
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003bb4:	cb0c      	ldmia	r3, {r2, r3}
 8003bb6:	3108      	adds	r1, #8
 8003bb8:	c903      	ldmia	r1, {r0, r1}
 8003bba:	f01d ff0e 	bl	80219da <mg_match>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <dashboard+0x284>
			handle_firmware_deactivate(c, hm);
 8003bc4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7ff fd3f 	bl	800364c <handle_firmware_deactivate>
}
 8003bce:	e087      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8003bd0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003bd4:	4926      	ldr	r1, [pc, #152]	@ (8003c70 <dashboard+0x324>)
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f01d fe2c 	bl	8021834 <mg_str_s>
 8003bdc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003be0:	2300      	movs	r3, #0
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003be8:	cb0c      	ldmia	r3, {r2, r3}
 8003bea:	3108      	adds	r1, #8
 8003bec:	c903      	ldmia	r1, {r0, r1}
 8003bee:	f01d fef4 	bl	80219da <mg_match>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <dashboard+0x2b8>
			 handle_web_files_remove(c, hm);
 8003bf8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f7ff fd6b 	bl	80036d8 <handle_web_files_remove>
}
 8003c02:	e06d      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8003c04:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003c08:	491a      	ldr	r1, [pc, #104]	@ (8003c74 <dashboard+0x328>)
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f01d fe12 	bl	8021834 <mg_str_s>
 8003c10:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c14:	2300      	movs	r3, #0
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003c1c:	cb0c      	ldmia	r3, {r2, r3}
 8003c1e:	3108      	adds	r1, #8
 8003c20:	c903      	ldmia	r1, {r0, r1}
 8003c22:	f01d feda 	bl	80219da <mg_match>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d02b      	beq.n	8003c84 <dashboard+0x338>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8003c2c:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <dashboard+0x32c>)
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	4b12      	ldr	r3, [pc, #72]	@ (8003c7c <dashboard+0x330>)
 8003c32:	4a13      	ldr	r2, [pc, #76]	@ (8003c80 <dashboard+0x334>)
 8003c34:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f015 fb0b 	bl	8019254 <mg_http_upload>
}
 8003c3e:	e04f      	b.n	8003ce0 <dashboard+0x394>
 8003c40:	0802fc38 	.word	0x0802fc38
 8003c44:	0802fc40 	.word	0x0802fc40
 8003c48:	0802fc50 	.word	0x0802fc50
 8003c4c:	0802fc60 	.word	0x0802fc60
 8003c50:	0802fc74 	.word	0x0802fc74
 8003c54:	0802fc88 	.word	0x0802fc88
 8003c58:	0802fc98 	.word	0x0802fc98
 8003c5c:	0802fcac 	.word	0x0802fcac
 8003c60:	0802fcc0 	.word	0x0802fcc0
 8003c64:	0802fcd8 	.word	0x0802fcd8
 8003c68:	0802fcec 	.word	0x0802fcec
 8003c6c:	0802fd04 	.word	0x0802fd04
 8003c70:	0802fd20 	.word	0x0802fd20
 8003c74:	0802fd3c 	.word	0x0802fd3c
 8003c78:	0016e360 	.word	0x0016e360
 8003c7c:	0802fb04 	.word	0x0802fb04
 8003c80:	2000000c 	.word	0x2000000c
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8003c84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c88:	4917      	ldr	r1, [pc, #92]	@ (8003ce8 <dashboard+0x39c>)
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f01d fdd2 	bl	8021834 <mg_str_s>
 8003c90:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c94:	2300      	movs	r3, #0
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c9c:	cb0c      	ldmia	r3, {r2, r3}
 8003c9e:	3108      	adds	r1, #8
 8003ca0:	c903      	ldmia	r1, {r0, r1}
 8003ca2:	f01d fe9a 	bl	80219da <mg_match>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <dashboard+0x36c>
			 handle_fs_mkdir(c, hm);
 8003cac:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7ff fd4f 	bl	8003754 <handle_fs_mkdir>
}
 8003cb6:	e013      	b.n	8003ce0 <dashboard+0x394>
			struct mg_http_serve_opts opts = {
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
 8003cc8:	615a      	str	r2, [r3, #20]
 8003cca:	4b08      	ldr	r3, [pc, #32]	@ (8003cec <dashboard+0x3a0>)
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	4b08      	ldr	r3, [pc, #32]	@ (8003cf0 <dashboard+0x3a4>)
 8003cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
			mg_http_serve_dir(c, ev_data, &opts);
 8003cd2:	f107 0314 	add.w	r3, r7, #20
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f015 f9cc 	bl	8019078 <mg_http_serve_dir>
}
 8003ce0:	bf00      	nop
 8003ce2:	37a8      	adds	r7, #168	@ 0xa8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	0802fd58 	.word	0x0802fd58
 8003cec:	0802fb04 	.word	0x0802fb04
 8003cf0:	2000000c 	.word	0x2000000c

08003cf4 <dash_hdl>:

void * dash_hdl (void){
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
	return &dashboard;
 8003cf8:	4b02      	ldr	r3, [pc, #8]	@ (8003d04 <dash_hdl+0x10>)
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	0800394d 	.word	0x0800394d

08003d08 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
    r_w_parameter = func;
 8003d10:	4a04      	ldr	r2, [pc, #16]	@ (8003d24 <reg_parameter_handler+0x1c>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6013      	str	r3, [r2, #0]
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000b18 	.word	0x20000b18

08003d28 <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f008 fa6e 	bl	800c21c <pvPortMalloc>
 8003d40:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <_ZL9my_callocjj+0x32>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	2100      	movs	r1, #0
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f022 f8ff 	bl	8025f58 <memset>
  return p;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
		{OUTPUT_SENSOR, 3}
    };

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;

static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b08d      	sub	sp, #52	@ 0x34
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	6178      	str	r0, [r7, #20]
 8003d6c:	6139      	str	r1, [r7, #16]
 8003d6e:	60fa      	str	r2, [r7, #12]

	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8003d70:	4b3a      	ldr	r3, [pc, #232]	@ (8003e5c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3308      	adds	r3, #8
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	4b39      	ldr	r3, [pc, #228]	@ (8003e60 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xfc>)
 8003d7c:	4a39      	ldr	r2, [pc, #228]	@ (8003e64 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x100>)
 8003d7e:	2128      	movs	r1, #40	@ 0x28
 8003d80:	f01d f870 	bl	8020e64 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8003d84:	4b35      	ldr	r3, [pc, #212]	@ (8003e5c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8003d86:	681c      	ldr	r4, [r3, #0]
 8003d88:	4b34      	ldr	r3, [pc, #208]	@ (8003e5c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc fa87 	bl	80002a0 <strlen>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4619      	mov	r1, r3
 8003d96:	4620      	mov	r0, r4
 8003d98:	f000 fd26 	bl	80047e8 <set_device_conf_ip>


	for (size_t i = 0; i < sensor_count; i++) {
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da0:	e052      	b.n	8003e48 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xe4>
	        int sensor_type = sensors[i].sensor_type;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4413      	add	r3, r2
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	623b      	str	r3, [r7, #32]
	        int sensor_number = sensors[i].sensor_number;
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4413      	add	r3, r2
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	61fb      	str	r3, [r7, #28]
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8003dba:	4b2b      	ldr	r3, [pc, #172]	@ (8003e68 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2180      	movs	r1, #128	@ 0x80
 8003dc8:	f000 fd38 	bl	800483c <get_config_topik_string>

			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8003dcc:	4b26      	ldr	r3, [pc, #152]	@ (8003e68 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4926      	ldr	r1, [pc, #152]	@ (8003e6c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x108>)
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	f7fe f9b1 	bl	800213c <logging>

			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8003dda:	4b25      	ldr	r3, [pc, #148]	@ (8003e70 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003dea:	f000 fe01 	bl	80049f0 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8003dee:	4b1e      	ldr	r3, [pc, #120]	@ (8003e68 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4c20      	ldr	r4, [pc, #128]	@ (8003e74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003df4:	463b      	mov	r3, r7
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f01d fd1b 	bl	8021834 <mg_str_s>
 8003dfe:	f104 0318 	add.w	r3, r4, #24
 8003e02:	463a      	mov	r2, r7
 8003e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e08:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8003e0c:	4b18      	ldr	r3, [pc, #96]	@ (8003e70 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4c18      	ldr	r4, [pc, #96]	@ (8003e74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003e12:	463b      	mov	r3, r7
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f01d fd0c 	bl	8021834 <mg_str_s>
 8003e1c:	f104 0320 	add.w	r3, r4, #32
 8003e20:	463a      	mov	r2, r7
 8003e22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e26:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8003e2a:	4b12      	ldr	r3, [pc, #72]	@ (8003e74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8003e32:	4b10      	ldr	r3, [pc, #64]	@ (8003e74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8003e3a:	490e      	ldr	r1, [pc, #56]	@ (8003e74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003e3c:	6978      	ldr	r0, [r7, #20]
 8003e3e:	f018 fd4b 	bl	801c8d8 <mg_mqtt_pub>
	for (size_t i = 0; i < sensor_count; i++) {
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	3301      	adds	r3, #1
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d3a8      	bcc.n	8003da2 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x3e>

	}
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	372c      	adds	r7, #44	@ 0x2c
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd90      	pop	{r4, r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000b7c 	.word	0x20000b7c
 8003e60:	0802104b 	.word	0x0802104b
 8003e64:	0802fd74 	.word	0x0802fd74
 8003e68:	20000b28 	.word	0x20000b28
 8003e6c:	0802fd78 	.word	0x0802fd78
 8003e70:	20000b2c 	.word	0x20000b2c
 8003e74:	20000b38 	.word	0x20000b38

08003e78 <_ZL19mqtt_send_io_statusP13mg_connectionb>:


static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b08d      	sub	sp, #52	@ 0x34
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	460b      	mov	r3, r1
 8003e82:	72fb      	strb	r3, [r7, #11]

	struct   DeviceStatus status;
	static struct DeviceStatus prev_status;
	uint8_t  i;
	char *   payload = NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	623b      	str	r3, [r7, #32]
	char *   topik = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]

	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8003e8c:	4b70      	ldr	r3, [pc, #448]	@ (8004050 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f107 0014 	add.w	r0, r7, #20
 8003e94:	2200      	movs	r2, #0
 8003e96:	2101      	movs	r1, #1
 8003e98:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8003e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8004050 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f107 0214 	add.w	r2, r7, #20
 8003ea2:	1cd0      	adds	r0, r2, #3
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	4798      	blx	r3

	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	2203      	movs	r2, #3
 8003eb0:	4968      	ldr	r1, [pc, #416]	@ (8004054 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f021 ffbc 	bl	8025e30 <memcmp>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10e      	bne.n	8003edc <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8003ebe:	f107 0314 	add.w	r3, r7, #20
 8003ec2:	3303      	adds	r3, #3
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	4964      	ldr	r1, [pc, #400]	@ (8004058 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e0>)
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f021 ffb1 	bl	8025e30 <memcmp>
 8003ece:	4603      	mov	r3, r0
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d103      	bne.n	8003edc <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8003ed4:	7afb      	ldrb	r3, [r7, #11]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80b5 	beq.w	8004046 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ce>
	    // Состояние изменилось, продолжаем
		memcpy(&prev_status, &status, sizeof(status));
 8003edc:	4b5d      	ldr	r3, [pc, #372]	@ (8004054 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 8003ede:	f107 0214 	add.w	r2, r7, #20
 8003ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ee6:	6018      	str	r0, [r3, #0]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	8019      	strh	r1, [r3, #0]

		//logging(L_INFO, "Send io status data to MQTT server");

		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8003eec:	2101      	movs	r1, #1
 8003eee:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003ef2:	f7ff ff19 	bl	8003d28 <_ZL9my_callocjj>
 8003ef6:	6238      	str	r0, [r7, #32]
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8003ef8:	2101      	movs	r1, #1
 8003efa:	2080      	movs	r0, #128	@ 0x80
 8003efc:	f7ff ff14 	bl	8003d28 <_ZL9my_callocjj>
 8003f00:	61f8      	str	r0, [r7, #28]

		for (i = 0; i < INPUTS_COUNT; i++){
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003f08:	e045      	b.n	8003f96 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x11e>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8003f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f0e:	3301      	adds	r3, #1
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f16:	3328      	adds	r3, #40	@ 0x28
 8003f18:	443b      	add	r3, r7
 8003f1a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	2201      	movs	r2, #1
 8003f24:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003f28:	6a38      	ldr	r0, [r7, #32]
 8003f2a:	f000 ffbf 	bl	8004eac <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8003f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f32:	3301      	adds	r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2201      	movs	r2, #1
 8003f38:	2180      	movs	r1, #128	@ 0x80
 8003f3a:	69f8      	ldr	r0, [r7, #28]
 8003f3c:	f001 f824 	bl	8004f88 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8003f40:	4c46      	ldr	r4, [pc, #280]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f42:	463b      	mov	r3, r7
 8003f44:	69f9      	ldr	r1, [r7, #28]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f01d fc74 	bl	8021834 <mg_str_s>
 8003f4c:	f104 0318 	add.w	r3, r4, #24
 8003f50:	463a      	mov	r2, r7
 8003f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f56:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8003f5a:	4c40      	ldr	r4, [pc, #256]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	6a39      	ldr	r1, [r7, #32]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f01d fc67 	bl	8021834 <mg_str_s>
 8003f66:	f104 0320 	add.w	r3, r4, #32
 8003f6a:	463a      	mov	r2, r7
 8003f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f70:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8003f74:	4b39      	ldr	r3, [pc, #228]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8003f7c:	4b37      	ldr	r3, [pc, #220]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8003f84:	4935      	ldr	r1, [pc, #212]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f018 fca6 	bl	801c8d8 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8003f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f90:	3301      	adds	r3, #1
 8003f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003f96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d9b5      	bls.n	8003f0a <_ZL19mqtt_send_io_statusP13mg_connectionb+0x92>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}

		for (i = 0; i < OUTPUTS_COUNT; i++){
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003fa4:	e045      	b.n	8004032 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ba>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8003fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003faa:	3301      	adds	r3, #1
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fb2:	3328      	adds	r3, #40	@ 0x28
 8003fb4:	443b      	add	r3, r7
 8003fb6:	f813 3c11 	ldrb.w	r3, [r3, #-17]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003fc4:	6a38      	ldr	r0, [r7, #32]
 8003fc6:	f000 ff71 	bl	8004eac <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8003fca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fce:	3301      	adds	r3, #1
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	2180      	movs	r1, #128	@ 0x80
 8003fd6:	69f8      	ldr	r0, [r7, #28]
 8003fd8:	f000 ffd6 	bl	8004f88 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8003fdc:	4c1f      	ldr	r4, [pc, #124]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003fde:	463b      	mov	r3, r7
 8003fe0:	69f9      	ldr	r1, [r7, #28]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f01d fc26 	bl	8021834 <mg_str_s>
 8003fe8:	f104 0318 	add.w	r3, r4, #24
 8003fec:	463a      	mov	r2, r7
 8003fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ff2:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8003ff6:	4c19      	ldr	r4, [pc, #100]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	6a39      	ldr	r1, [r7, #32]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f01d fc19 	bl	8021834 <mg_str_s>
 8004002:	f104 0320 	add.w	r3, r4, #32
 8004006:	463a      	mov	r2, r7
 8004008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800400c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8004010:	4b12      	ldr	r3, [pc, #72]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8004018:	4b10      	ldr	r3, [pc, #64]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 800401a:	2200      	movs	r2, #0
 800401c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8004020:	490e      	ldr	r1, [pc, #56]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f018 fc58 	bl	801c8d8 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8004028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800402c:	3301      	adds	r3, #1
 800402e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004032:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004036:	2b02      	cmp	r3, #2
 8004038:	d9b5      	bls.n	8003fa6 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x12e>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}


		free(payload);
 800403a:	6a38      	ldr	r0, [r7, #32]
 800403c:	f008 f9bc 	bl	800c3b8 <vPortFree>
		free(topik);
 8004040:	69f8      	ldr	r0, [r7, #28]
 8004042:	f008 f9b9 	bl	800c3b8 <vPortFree>
	}
}
 8004046:	bf00      	nop
 8004048:	372c      	adds	r7, #44	@ 0x2c
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	bf00      	nop
 8004050:	20000b90 	.word	0x20000b90
 8004054:	20000b94 	.word	0x20000b94
 8004058:	20000b97 	.word	0x20000b97
 800405c:	20000b38 	.word	0x20000b38

08004060 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:

static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 8004060:	b590      	push	{r4, r7, lr}
 8004062:	b089      	sub	sp, #36	@ 0x24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6178      	str	r0, [r7, #20]
 8004068:	6139      	str	r1, [r7, #16]
 800406a:	60fa      	str	r2, [r7, #12]

	char * topik = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61bb      	str	r3, [r7, #24]

	for (size_t i = 0; i < sensor_count; i++) {
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	e036      	b.n	80040e4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x84>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4413      	add	r3, r2
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d12c      	bne.n	80040de <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7e>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8004084:	2101      	movs	r1, #1
 8004086:	2080      	movs	r0, #128	@ 0x80
 8004088:	f7ff fe4e 	bl	8003d28 <_ZL9my_callocjj>
 800408c:	61b8      	str	r0, [r7, #24]
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2202      	movs	r2, #2
 800409c:	2180      	movs	r1, #128	@ 0x80
 800409e:	69b8      	ldr	r0, [r7, #24]
 80040a0:	f000 ff48 	bl	8004f34 <generate_comand_topik_for_subscrabe>

			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4914      	ldr	r1, [pc, #80]	@ (80040f8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 80040a8:	2001      	movs	r0, #1
 80040aa:	f7fe f847 	bl	800213c <logging>

			mqtt_opts.qos = 1;
 80040ae:	4b13      	ldr	r3, [pc, #76]	@ (80040fc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x9c>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 80040b6:	4c11      	ldr	r4, [pc, #68]	@ (80040fc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x9c>)
 80040b8:	463b      	mov	r3, r7
 80040ba:	69b9      	ldr	r1, [r7, #24]
 80040bc:	4618      	mov	r0, r3
 80040be:	f01d fbb9 	bl	8021834 <mg_str_s>
 80040c2:	f104 0318 	add.w	r3, r4, #24
 80040c6:	463a      	mov	r2, r7
 80040c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040cc:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 80040d0:	490a      	ldr	r1, [pc, #40]	@ (80040fc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x9c>)
 80040d2:	6978      	ldr	r0, [r7, #20]
 80040d4:	f018 fcce 	bl	801ca74 <mg_mqtt_sub>
			free(topik);
 80040d8:	69b8      	ldr	r0, [r7, #24]
 80040da:	f008 f96d 	bl	800c3b8 <vPortFree>
	for (size_t i = 0; i < sensor_count; i++) {
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3301      	adds	r3, #1
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d3c4      	bcc.n	8004076 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x16>
		}
	}
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	3724      	adds	r7, #36	@ 0x24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd90      	pop	{r4, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	0802fd9c 	.word	0x0802fd9c
 80040fc:	20000b38 	.word	0x20000b38

08004100 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:

static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

	inputs_state_t  sw_r, sw_w;
	int relay_number = 0;  // Переменная для хранения номера реле
 8004108:	2300      	movs	r3, #0
 800410a:	60bb      	str	r3, [r7, #8]
    //char *state = NULL;  // Строка для хранения состояния (ON/OFF)

    //Топик выглядит как "cedar_4022422E1436/switch0/set"
    const char *topic = mess->topic.buf;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61fb      	str	r3, [r7, #28]
    const char *message = mess->data.buf;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]

    if(message == NULL || topic == NULL){
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10e      	bne.n	8004142 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x42>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8004124:	4b7e      	ldr	r3, [pc, #504]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f340 80f5 	ble.w	8004318 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
 800412e:	4b7d      	ldr	r3, [pc, #500]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8004130:	2292      	movs	r2, #146	@ 0x92
 8004132:	497d      	ldr	r1, [pc, #500]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8004134:	2001      	movs	r0, #1
 8004136:	f016 fe79 	bl	801ae2c <mg_log_prefix>
 800413a:	487c      	ldr	r0, [pc, #496]	@ (800432c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22c>)
 800413c:	f016 fec6 	bl	801aecc <mg_log>
    	return;
 8004140:	e0ea      	b.n	8004318 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
    }

    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8004142:	4b7b      	ldr	r3, [pc, #492]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f107 0010 	add.w	r0, r7, #16
 800414a:	2200      	movs	r2, #0
 800414c:	2102      	movs	r1, #2
 800414e:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 8004150:	f107 030c 	add.w	r3, r7, #12
 8004154:	f107 0210 	add.w	r2, r7, #16
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	4611      	mov	r1, r2
 800415c:	8019      	strh	r1, [r3, #0]
 800415e:	3302      	adds	r3, #2
 8004160:	0c12      	lsrs	r2, r2, #16
 8004162:	701a      	strb	r2, [r3, #0]

    // Ищем "switch" в топике и затем извлекаем номер реле
    const char *switch_position = strstr(topic, "switch");
 8004164:	4973      	ldr	r1, [pc, #460]	@ (8004334 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x234>)
 8004166:	69f8      	ldr	r0, [r7, #28]
 8004168:	f021 ff76 	bl	8026058 <strstr>
 800416c:	6178      	str	r0, [r7, #20]

    if (switch_position != NULL) {
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80bd 	beq.w	80042f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>
    	// Извлекаем номер реле (например, "3" из "switch3")
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8004176:	f107 0308 	add.w	r3, r7, #8
 800417a:	461a      	mov	r2, r3
 800417c:	496e      	ldr	r1, [pc, #440]	@ (8004338 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x238>)
 800417e:	6978      	ldr	r0, [r7, #20]
 8004180:	f021 fb48 	bl	8025814 <sscanf>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 809b 	beq.w	80042cc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1cc>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8004196:	4b62      	ldr	r3, [pc, #392]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	dd0b      	ble.n	80041b6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb6>
 800419e:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80041a0:	229f      	movs	r2, #159	@ 0x9f
 80041a2:	4961      	ldr	r1, [pc, #388]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80041a4:	2002      	movs	r0, #2
 80041a6:	f016 fe41 	bl	801ae2c <mg_log_prefix>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	4619      	mov	r1, r3
 80041b0:	4862      	ldr	r0, [pc, #392]	@ (800433c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x23c>)
 80041b2:	f016 fe8b 	bl	801aecc <mg_log>

    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4961      	ldr	r1, [pc, #388]	@ (8004340 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x240>)
 80041bc:	2001      	movs	r0, #1
 80041be:	f7fd ffbd 	bl	800213c <logging>

    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	dd02      	ble.n	80041ce <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xce>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	dd16      	ble.n	80041fc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xfc>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 80041ce:	4b54      	ldr	r3, [pc, #336]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dd0b      	ble.n	80041ee <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xee>
 80041d6:	4b53      	ldr	r3, [pc, #332]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80041d8:	22a4      	movs	r2, #164	@ 0xa4
 80041da:	4953      	ldr	r1, [pc, #332]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80041dc:	2001      	movs	r0, #1
 80041de:	f016 fe25 	bl	801ae2c <mg_log_prefix>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	461a      	mov	r2, r3
 80041e6:	2103      	movs	r1, #3
 80041e8:	4856      	ldr	r0, [pc, #344]	@ (8004344 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 80041ea:	f016 fe6f 	bl	801aecc <mg_log>

    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2203      	movs	r2, #3
 80041f2:	4954      	ldr	r1, [pc, #336]	@ (8004344 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 80041f4:	2003      	movs	r0, #3
 80041f6:	f7fd ffa1 	bl	800213c <logging>

    			return;
 80041fa:	e08e      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    		}

    		// Получаем состояние реле (ON или OFF) из данных сообщения
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d125      	bne.n	8004250 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
 8004204:	2202      	movs	r2, #2
 8004206:	4950      	ldr	r1, [pc, #320]	@ (8004348 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x248>)
 8004208:	69b8      	ldr	r0, [r7, #24]
 800420a:	f021 feda 	bl	8025fc2 <strncmp>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d11d      	bne.n	8004250 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
				sw_w[relay_number-1] = 1;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	3b01      	subs	r3, #1
 8004218:	3320      	adds	r3, #32
 800421a:	443b      	add	r3, r7
 800421c:	2201      	movs	r2, #1
 800421e:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8004222:	4b3f      	ldr	r3, [pc, #252]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	dd0a      	ble.n	8004240 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x140>
 800422a:	4b3e      	ldr	r3, [pc, #248]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 800422c:	22ae      	movs	r2, #174	@ 0xae
 800422e:	493e      	ldr	r1, [pc, #248]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8004230:	2002      	movs	r0, #2
 8004232:	f016 fdfb 	bl	801ae2c <mg_log_prefix>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4619      	mov	r1, r3
 800423a:	4844      	ldr	r0, [pc, #272]	@ (800434c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 800423c:	f016 fe46 	bl	801aecc <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8004240:	4b3b      	ldr	r3, [pc, #236]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f107 000c 	add.w	r0, r7, #12
 8004248:	2201      	movs	r2, #1
 800424a:	2102      	movs	r1, #2
 800424c:	4798      	blx	r3
 800424e:	e064      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d125      	bne.n	80042a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
 8004258:	2203      	movs	r2, #3
 800425a:	493d      	ldr	r1, [pc, #244]	@ (8004350 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 800425c:	69b8      	ldr	r0, [r7, #24]
 800425e:	f021 feb0 	bl	8025fc2 <strncmp>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11d      	bne.n	80042a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
				sw_w[relay_number-1] = 0;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3b01      	subs	r3, #1
 800426c:	3320      	adds	r3, #32
 800426e:	443b      	add	r3, r7
 8004270:	2200      	movs	r2, #0
 8004272:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8004276:	4b2a      	ldr	r3, [pc, #168]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b01      	cmp	r3, #1
 800427c:	dd0a      	ble.n	8004294 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x194>
 800427e:	4b29      	ldr	r3, [pc, #164]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8004280:	22b2      	movs	r2, #178	@ 0xb2
 8004282:	4929      	ldr	r1, [pc, #164]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8004284:	2002      	movs	r0, #2
 8004286:	f016 fdd1 	bl	801ae2c <mg_log_prefix>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4619      	mov	r1, r3
 800428e:	4831      	ldr	r0, [pc, #196]	@ (8004354 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8004290:	f016 fe1c 	bl	801aecc <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8004294:	4b26      	ldr	r3, [pc, #152]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f107 000c 	add.w	r0, r7, #12
 800429c:	2201      	movs	r2, #1
 800429e:	2102      	movs	r1, #2
 80042a0:	4798      	blx	r3
 80042a2:	e03a      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>

			}else{
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 80042a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	dd09      	ble.n	80042c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c0>
 80042ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80042ae:	22b6      	movs	r2, #182	@ 0xb6
 80042b0:	491d      	ldr	r1, [pc, #116]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80042b2:	2001      	movs	r0, #1
 80042b4:	f016 fdba 	bl	801ae2c <mg_log_prefix>
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	4827      	ldr	r0, [pc, #156]	@ (8004358 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80042bc:	f016 fe06 	bl	801aecc <mg_log>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4925      	ldr	r1, [pc, #148]	@ (8004358 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80042c4:	2003      	movs	r0, #3
 80042c6:	f7fd ff39 	bl	800213c <logging>
 80042ca:	e026      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			}

    	}else{
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 80042cc:	4b14      	ldr	r3, [pc, #80]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	dd08      	ble.n	80042e6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
 80042d4:	4b13      	ldr	r3, [pc, #76]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80042d6:	22bb      	movs	r2, #187	@ 0xbb
 80042d8:	4913      	ldr	r1, [pc, #76]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80042da:	2001      	movs	r0, #1
 80042dc:	f016 fda6 	bl	801ae2c <mg_log_prefix>
 80042e0:	481e      	ldr	r0, [pc, #120]	@ (800435c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 80042e2:	f016 fdf3 	bl	801aecc <mg_log>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 80042e6:	491e      	ldr	r1, [pc, #120]	@ (8004360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 80042e8:	2003      	movs	r0, #3
 80042ea:	f7fd ff27 	bl	800213c <logging>
 80042ee:	e014      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	}
    }else{
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 80042f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	dd09      	ble.n	800430c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>
 80042f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80042fa:	22bf      	movs	r2, #191	@ 0xbf
 80042fc:	490a      	ldr	r1, [pc, #40]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80042fe:	2001      	movs	r0, #1
 8004300:	f016 fd94 	bl	801ae2c <mg_log_prefix>
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	4817      	ldr	r0, [pc, #92]	@ (8004364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8004308:	f016 fde0 	bl	801aecc <mg_log>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	4915      	ldr	r1, [pc, #84]	@ (8004364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8004310:	2003      	movs	r0, #3
 8004312:	f7fd ff13 	bl	800213c <logging>
 8004316:	e000      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	return;
 8004318:	bf00      	nop
    }
}
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000298 	.word	0x20000298
 8004324:	0802fdb8 	.word	0x0802fdb8
 8004328:	0802fdd8 	.word	0x0802fdd8
 800432c:	0802fe04 	.word	0x0802fe04
 8004330:	20000b90 	.word	0x20000b90
 8004334:	0802fe28 	.word	0x0802fe28
 8004338:	0802fe30 	.word	0x0802fe30
 800433c:	0802fe3c 	.word	0x0802fe3c
 8004340:	0802fe68 	.word	0x0802fe68
 8004344:	0802fe90 	.word	0x0802fe90
 8004348:	0802fee0 	.word	0x0802fee0
 800434c:	0802fee4 	.word	0x0802fee4
 8004350:	0802fef8 	.word	0x0802fef8
 8004354:	0802fefc 	.word	0x0802fefc
 8004358:	0802ff10 	.word	0x0802ff10
 800435c:	0802ff4c 	.word	0x0802ff4c
 8004360:	0802ff84 	.word	0x0802ff84
 8004364:	0802ffbc 	.word	0x0802ffbc

08004368 <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:


static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	if(is_registered){
 8004370:	4b06      	ldr	r3, [pc, #24]	@ (800438c <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x24>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>
		mqtt_send_io_status(mqtt_conn, 1);
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x28>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2101      	movs	r1, #1
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fd7a 	bl	8003e78 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000b8c 	.word	0x20000b8c
 8004390:	20000b78 	.word	0x20000b78

08004394 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:

static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b11      	cmp	r3, #17
 80043a4:	d132      	bne.n	800440c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x78>
		MG_DEBUG(("MQTT_open_connection"));
 80043a6:	4b2d      	ldr	r3, [pc, #180]	@ (800445c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	dd08      	ble.n	80043c0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x2c>
 80043ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004460 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xcc>)
 80043b0:	22cd      	movs	r2, #205	@ 0xcd
 80043b2:	492c      	ldr	r1, [pc, #176]	@ (8004464 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd0>)
 80043b4:	2003      	movs	r0, #3
 80043b6:	f016 fd39 	bl	801ae2c <mg_log_prefix>
 80043ba:	482b      	ldr	r0, [pc, #172]	@ (8004468 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd4>)
 80043bc:	f016 fd86 	bl	801aecc <mg_log>
		logging(L_INFO, "MQTT Open connection");
 80043c0:	492a      	ldr	r1, [pc, #168]	@ (800446c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd8>)
 80043c2:	2001      	movs	r0, #1
 80043c4:	f7fd feba 	bl	800213c <logging>
		mqtt_conn = conn;
 80043c8:	4a29      	ldr	r2, [pc, #164]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6013      	str	r3, [r2, #0]
		if(!is_registered){
 80043ce:	4b29      	ldr	r3, [pc, #164]	@ (8004474 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f083 0301 	eor.w	r3, r3, #1
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d03a      	beq.n	8004452 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80043dc:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2206      	movs	r2, #6
 80043e2:	4925      	ldr	r1, [pc, #148]	@ (8004478 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fcbd 	bl	8003d64 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 80043ea:	4b21      	ldr	r3, [pc, #132]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2101      	movs	r1, #1
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fd41 	bl	8003e78 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80043f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2206      	movs	r2, #6
 80043fc:	491e      	ldr	r1, [pc, #120]	@ (8004478 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fe2e 	bl	8004060 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8004404:	4b1b      	ldr	r3, [pc, #108]	@ (8004474 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
	}else if (ev == MG_EV_CLOSE){
		logging(L_INFO, "MQTT Close connection");
		mqtt_conn     = NULL;
		is_registered = false;
	}
}
 800440a:	e022      	b.n	8004452 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_MSG){
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b10      	cmp	r3, #16
 8004410:	d10f      	bne.n	8004432 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9e>
		logging(L_INFO, "Receive message from MQTT server");
 8004412:	491a      	ldr	r1, [pc, #104]	@ (800447c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe8>)
 8004414:	2001      	movs	r0, #1
 8004416:	f7fd fe91 	bl	800213c <logging>
		 struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	617b      	str	r3, [r7, #20]
		 mqtt_subscrabe_recv_cmd_parce(mm);
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f7ff fe6e 	bl	8004100 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8004424:	4b12      	ldr	r3, [pc, #72]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fd24 	bl	8003e78 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8004430:	e00f      	b.n	8004452 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_CMD){
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b0f      	cmp	r3, #15
 8004436:	d00c      	beq.n	8004452 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_CLOSE){
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b09      	cmp	r3, #9
 800443c:	d109      	bne.n	8004452 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
		logging(L_INFO, "MQTT Close connection");
 800443e:	4910      	ldr	r1, [pc, #64]	@ (8004480 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xec>)
 8004440:	2001      	movs	r0, #1
 8004442:	f7fd fe7b 	bl	800213c <logging>
		mqtt_conn     = NULL;
 8004446:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
		is_registered = false;
 800444c:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
}
 8004452:	bf00      	nop
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000298 	.word	0x20000298
 8004460:	0802ffec 	.word	0x0802ffec
 8004464:	0802fdd8 	.word	0x0802fdd8
 8004468:	08030000 	.word	0x08030000
 800446c:	08030018 	.word	0x08030018
 8004470:	20000b78 	.word	0x20000b78
 8004474:	20000b8c 	.word	0x20000b8c
 8004478:	20000034 	.word	0x20000034
 800447c:	08030030 	.word	0x08030030
 8004480:	08030054 	.word	0x08030054

08004484 <_ZL18mqtt_timer_handlerPv>:

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
 8004484:	b590      	push	{r4, r7, lr}
 8004486:	b087      	sub	sp, #28
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
	if (!mqtt_conn){
 800448c:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <_ZL18mqtt_timer_handlerPv+0x8c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d136      	bne.n	8004502 <_ZL18mqtt_timer_handlerPv+0x7e>
		logging(L_INFO, "Try to connect to MQTT server");
 8004494:	491f      	ldr	r1, [pc, #124]	@ (8004514 <_ZL18mqtt_timer_handlerPv+0x90>)
 8004496:	2001      	movs	r0, #1
 8004498:	f7fd fe50 	bl	800213c <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 800449c:	2240      	movs	r2, #64	@ 0x40
 800449e:	2100      	movs	r1, #0
 80044a0:	481d      	ldr	r0, [pc, #116]	@ (8004518 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044a2:	f021 fd59 	bl	8025f58 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 80044a6:	4b1d      	ldr	r3, [pc, #116]	@ (800451c <_ZL18mqtt_timer_handlerPv+0x98>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4c1b      	ldr	r4, [pc, #108]	@ (8004518 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044ac:	463b      	mov	r3, r7
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f01d f9bf 	bl	8021834 <mg_str_s>
 80044b6:	4622      	mov	r2, r4
 80044b8:	463b      	mov	r3, r7
 80044ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044be:	e882 0003 	stmia.w	r2, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 80044c2:	4b17      	ldr	r3, [pc, #92]	@ (8004520 <_ZL18mqtt_timer_handlerPv+0x9c>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4c14      	ldr	r4, [pc, #80]	@ (8004518 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044c8:	463b      	mov	r3, r7
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f01d f9b1 	bl	8021834 <mg_str_s>
 80044d2:	f104 0308 	add.w	r3, r4, #8
 80044d6:	463a      	mov	r2, r7
 80044d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044dc:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 80044e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044e2:	223c      	movs	r2, #60	@ 0x3c
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 80044e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004524 <_ZL18mqtt_timer_handlerPv+0xa0>)
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004528 <_ZL18mqtt_timer_handlerPv+0xa4>)
 80044ec:	6819      	ldr	r1, [r3, #0]
 80044ee:	2300      	movs	r3, #0
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	4b0e      	ldr	r3, [pc, #56]	@ (800452c <_ZL18mqtt_timer_handlerPv+0xa8>)
 80044f4:	4a08      	ldr	r2, [pc, #32]	@ (8004518 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044f6:	f018 fd97 	bl	801d028 <mg_mqtt_connect>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4a04      	ldr	r2, [pc, #16]	@ (8004510 <_ZL18mqtt_timer_handlerPv+0x8c>)
 80044fe:	6013      	str	r3, [r2, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 8004500:	e002      	b.n	8004508 <_ZL18mqtt_timer_handlerPv+0x84>
	}else if(mqtt_conn && is_registered){ //connection established and registered sensors
 8004502:	4b03      	ldr	r3, [pc, #12]	@ (8004510 <_ZL18mqtt_timer_handlerPv+0x8c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
}//void * param, sett_type_t param_type,  sett_direction_t direction
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	bd90      	pop	{r4, r7, pc}
 8004510:	20000b78 	.word	0x20000b78
 8004514:	0803006c 	.word	0x0803006c
 8004518:	20000b38 	.word	0x20000b38
 800451c:	20000b20 	.word	0x20000b20
 8004520:	20000b24 	.word	0x20000b24
 8004524:	20000b30 	.word	0x20000b30
 8004528:	20000b1c 	.word	0x20000b1c
 800452c:	08004395 	.word	0x08004395

08004530 <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	if(mqtt_conn && is_registered){
 8004538:	4b08      	ldr	r3, [pc, #32]	@ (800455c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
 8004540:	4b07      	ldr	r3, [pc, #28]	@ (8004560 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x30>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
		mqtt_send_io_status(mqtt_conn, 0);
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fc92 	bl	8003e78 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000b78 	.word	0x20000b78
 8004560:	20000b8c 	.word	0x20000b8c

08004564 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
    return mqtt_conn;
 8004568:	4b03      	ldr	r3, [pc, #12]	@ (8004578 <get_mqtt_connection+0x14>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000b78 	.word	0x20000b78

0800457c <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b08b      	sub	sp, #44	@ 0x2c
 8004580:	af04      	add	r7, sp, #16
 8004582:	6178      	str	r0, [r7, #20]
 8004584:	6139      	str	r1, [r7, #16]
 8004586:	60fa      	str	r2, [r7, #12]
 8004588:	60bb      	str	r3, [r7, #8]

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 800458a:	2101      	movs	r1, #1
 800458c:	2080      	movs	r0, #128	@ 0x80
 800458e:	f7ff fbcb 	bl	8003d28 <_ZL9my_callocjj>
 8004592:	4603      	mov	r3, r0
 8004594:	4a54      	ldr	r2, [pc, #336]	@ (80046e8 <mqtt_init+0x16c>)
 8004596:	6013      	str	r3, [r2, #0]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 8004598:	2101      	movs	r1, #1
 800459a:	2021      	movs	r0, #33	@ 0x21
 800459c:	f7ff fbc4 	bl	8003d28 <_ZL9my_callocjj>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4a52      	ldr	r2, [pc, #328]	@ (80046ec <mqtt_init+0x170>)
 80045a4:	6013      	str	r3, [r2, #0]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 80045a6:	2101      	movs	r1, #1
 80045a8:	2021      	movs	r0, #33	@ 0x21
 80045aa:	f7ff fbbd 	bl	8003d28 <_ZL9my_callocjj>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4a4f      	ldr	r2, [pc, #316]	@ (80046f0 <mqtt_init+0x174>)
 80045b2:	6013      	str	r3, [r2, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80045b4:	2101      	movs	r1, #1
 80045b6:	2080      	movs	r0, #128	@ 0x80
 80045b8:	f7ff fbb6 	bl	8003d28 <_ZL9my_callocjj>
 80045bc:	4603      	mov	r3, r0
 80045be:	4a4d      	ldr	r2, [pc, #308]	@ (80046f4 <mqtt_init+0x178>)
 80045c0:	6013      	str	r3, [r2, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80045c2:	2101      	movs	r1, #1
 80045c4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80045c8:	f7ff fbae 	bl	8003d28 <_ZL9my_callocjj>
 80045cc:	4603      	mov	r3, r0
 80045ce:	4a4a      	ldr	r2, [pc, #296]	@ (80046f8 <mqtt_init+0x17c>)
 80045d0:	6013      	str	r3, [r2, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 80045d2:	2101      	movs	r1, #1
 80045d4:	2028      	movs	r0, #40	@ 0x28
 80045d6:	f7ff fba7 	bl	8003d28 <_ZL9my_callocjj>
 80045da:	4603      	mov	r3, r0
 80045dc:	4a47      	ldr	r2, [pc, #284]	@ (80046fc <mqtt_init+0x180>)
 80045de:	6013      	str	r3, [r2, #0]
	r_w_parameter   = fn;
 80045e0:	4a47      	ldr	r2, [pc, #284]	@ (8004700 <mqtt_init+0x184>)
 80045e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e4:	6013      	str	r3, [r2, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 80045e6:	4b40      	ldr	r3, [pc, #256]	@ (80046e8 <mqtt_init+0x16c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f022 fed9 	bl	80273a4 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 80045f2:	4b3e      	ldr	r3, [pc, #248]	@ (80046ec <mqtt_init+0x170>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f022 fed3 	bl	80273a4 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 80045fe:	4b3c      	ldr	r3, [pc, #240]	@ (80046f0 <mqtt_init+0x174>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004604:	4618      	mov	r0, r3
 8004606:	f022 fecd 	bl	80273a4 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 800460a:	4b37      	ldr	r3, [pc, #220]	@ (80046e8 <mqtt_init+0x16c>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b37      	ldr	r3, [pc, #220]	@ (80046ec <mqtt_init+0x170>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	493c      	ldr	r1, [pc, #240]	@ (8004704 <mqtt_init+0x188>)
 8004614:	2001      	movs	r0, #1
 8004616:	f7fd fd91 	bl	800213c <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 800461a:	4a3b      	ldr	r2, [pc, #236]	@ (8004708 <mqtt_init+0x18c>)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	6013      	str	r3, [r2, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 8004620:	4a3a      	ldr	r2, [pc, #232]	@ (800470c <mqtt_init+0x190>)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6013      	str	r3, [r2, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 8004626:	4b39      	ldr	r3, [pc, #228]	@ (800470c <mqtt_init+0x190>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2106      	movs	r1, #6
 800462c:	4618      	mov	r0, r3
 800462e:	f000 f89b 	bl	8004768 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 8004632:	4b2e      	ldr	r3, [pc, #184]	@ (80046ec <mqtt_init+0x170>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4c36      	ldr	r4, [pc, #216]	@ (8004710 <mqtt_init+0x194>)
 8004638:	463b      	mov	r3, r7
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f01d f8f9 	bl	8021834 <mg_str_s>
 8004642:	4622      	mov	r2, r4
 8004644:	463b      	mov	r3, r7
 8004646:	e893 0003 	ldmia.w	r3, {r0, r1}
 800464a:	e882 0003 	stmia.w	r2, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 800464e:	4b28      	ldr	r3, [pc, #160]	@ (80046f0 <mqtt_init+0x174>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4c2f      	ldr	r4, [pc, #188]	@ (8004710 <mqtt_init+0x194>)
 8004654:	463b      	mov	r3, r7
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f01d f8eb 	bl	8021834 <mg_str_s>
 800465e:	f104 0308 	add.w	r3, r4, #8
 8004662:	463a      	mov	r2, r7
 8004664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004668:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 800466c:	4b28      	ldr	r3, [pc, #160]	@ (8004710 <mqtt_init+0x194>)
 800466e:	223c      	movs	r2, #60	@ 0x3c
 8004670:	855a      	strh	r2, [r3, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 8004672:	4b25      	ldr	r3, [pc, #148]	@ (8004708 <mqtt_init+0x18c>)
 8004674:	6819      	ldr	r1, [r3, #0]
 8004676:	2300      	movs	r3, #0
 8004678:	9302      	str	r3, [sp, #8]
 800467a:	4b26      	ldr	r3, [pc, #152]	@ (8004714 <mqtt_init+0x198>)
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	2303      	movs	r3, #3
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	4608      	mov	r0, r1
 800468c:	f019 f968 	bl	801d960 <mg_timer_add>
 8004690:	4603      	mov	r3, r0
 8004692:	4a21      	ldr	r2, [pc, #132]	@ (8004718 <mqtt_init+0x19c>)
 8004694:	6013      	str	r3, [r2, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 8004696:	4b1c      	ldr	r3, [pc, #112]	@ (8004708 <mqtt_init+0x18c>)
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	2300      	movs	r3, #0
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	4b1f      	ldr	r3, [pc, #124]	@ (800471c <mqtt_init+0x1a0>)
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	2301      	movs	r3, #1
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	4608      	mov	r0, r1
 80046b0:	f019 f956 	bl	801d960 <mg_timer_add>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004720 <mqtt_init+0x1a4>)
 80046b8:	6013      	str	r3, [r2, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 80046ba:	4b13      	ldr	r3, [pc, #76]	@ (8004708 <mqtt_init+0x18c>)
 80046bc:	6819      	ldr	r1, [r3, #0]
 80046be:	2300      	movs	r3, #0
 80046c0:	9302      	str	r3, [sp, #8]
 80046c2:	4b18      	ldr	r3, [pc, #96]	@ (8004724 <mqtt_init+0x1a8>)
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	2301      	movs	r3, #1
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	4608      	mov	r0, r1
 80046d4:	f019 f944 	bl	801d960 <mg_timer_add>
 80046d8:	4603      	mov	r3, r0
 80046da:	4a13      	ldr	r2, [pc, #76]	@ (8004728 <mqtt_init+0x1ac>)
 80046dc:	6013      	str	r3, [r2, #0]

}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd90      	pop	{r4, r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000b1c 	.word	0x20000b1c
 80046ec:	20000b20 	.word	0x20000b20
 80046f0:	20000b24 	.word	0x20000b24
 80046f4:	20000b28 	.word	0x20000b28
 80046f8:	20000b2c 	.word	0x20000b2c
 80046fc:	20000b7c 	.word	0x20000b7c
 8004700:	20000b90 	.word	0x20000b90
 8004704:	0803008c 	.word	0x0803008c
 8004708:	20000b30 	.word	0x20000b30
 800470c:	20000b34 	.word	0x20000b34
 8004710:	20000b38 	.word	0x20000b38
 8004714:	08004485 	.word	0x08004485
 8004718:	20000b80 	.word	0x20000b80
 800471c:	08004369 	.word	0x08004369
 8004720:	20000b84 	.word	0x20000b84
 8004724:	08004531 	.word	0x08004531
 8004728:	20000b88 	.word	0x20000b88

0800472c <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	4618      	mov	r0, r3
 8004740:	f007 fd6c 	bl	800c21c <pvPortMalloc>
 8004744:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <_ZL9my_callocjj+0x32>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	461a      	mov	r2, r3
 8004756:	2100      	movs	r1, #0
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f021 fbfd 	bl	8025f58 <memset>
  return p;
 800475e:	68fb      	ldr	r3, [r7, #12]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]

	if ( unical_id){
 8004772:	4b1b      	ldr	r3, [pc, #108]	@ (80047e0 <set_device_id+0x78>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <set_device_id+0x1c>
		free(unical_id);
 800477a:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <set_device_id+0x78>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f007 fe1a 	bl	800c3b8 <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	3301      	adds	r3, #1
 800478a:	2101      	movs	r1, #1
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff ffcd 	bl	800472c <_ZL9my_callocjj>
 8004792:	4603      	mov	r3, r0
 8004794:	4a12      	ldr	r2, [pc, #72]	@ (80047e0 <set_device_id+0x78>)
 8004796:	6013      	str	r3, [r2, #0]


	if (unical_id){
 8004798:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <set_device_id+0x78>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d017      	beq.n	80047d0 <set_device_id+0x68>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	e00f      	b.n	80047c6 <set_device_id+0x5e>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 80047a6:	4b0e      	ldr	r3, [pc, #56]	@ (80047e0 <set_device_id+0x78>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	18d0      	adds	r0, r2, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	490a      	ldr	r1, [pc, #40]	@ (80047e4 <set_device_id+0x7c>)
 80047bc:	f021 f80a 	bl	80257d4 <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d3eb      	bcc.n	80047a6 <set_device_id+0x3e>
 80047ce:	e002      	b.n	80047d6 <set_device_id+0x6e>
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047d4:	e000      	b.n	80047d8 <set_device_id+0x70>
	}

	return NO_ERR; // Успешно
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000b9c 	.word	0x20000b9c
 80047e4:	080300b8 	.word	0x080300b8

080047e8 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]

	if(dev_conf_ip){
 80047f2:	4b11      	ldr	r3, [pc, #68]	@ (8004838 <set_device_conf_ip+0x50>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <set_device_conf_ip+0x1c>
		free(dev_conf_ip);
 80047fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004838 <set_device_conf_ip+0x50>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f007 fdda 	bl	800c3b8 <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len, sizeof(char));
 8004804:	2101      	movs	r1, #1
 8004806:	6838      	ldr	r0, [r7, #0]
 8004808:	f7ff ff90 	bl	800472c <_ZL9my_callocjj>
 800480c:	4603      	mov	r3, r0
 800480e:	4a0a      	ldr	r2, [pc, #40]	@ (8004838 <set_device_conf_ip+0x50>)
 8004810:	6013      	str	r3, [r2, #0]

	if(dev_conf_ip){
 8004812:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <set_device_conf_ip+0x50>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <set_device_conf_ip+0x44>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 800481a:	4b07      	ldr	r3, [pc, #28]	@ (8004838 <set_device_conf_ip+0x50>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	4618      	mov	r0, r3
 8004824:	f021 fbdf 	bl	8025fe6 <strncpy>
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
 8004828:	2300      	movs	r3, #0
 800482a:	e001      	b.n	8004830 <set_device_conf_ip+0x48>
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 800482c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000ba0 	.word	0x20000ba0

0800483c <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	@ 0x28
 8004840:	af06      	add	r7, sp, #24
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	460b      	mov	r3, r1
 800484c:	71fb      	strb	r3, [r7, #7]
 800484e:	4613      	mov	r3, r2
 8004850:	71bb      	strb	r3, [r7, #6]

	strcpy(buff, "");
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	3b01      	subs	r3, #1
 800485c:	2b07      	cmp	r3, #7
 800485e:	f200 80a3 	bhi.w	80049a8 <get_config_topik_string+0x16c>
 8004862:	a201      	add	r2, pc, #4	@ (adr r2, 8004868 <get_config_topik_string+0x2c>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004889 	.word	0x08004889
 800486c:	080048ad 	.word	0x080048ad
 8004870:	080048d1 	.word	0x080048d1
 8004874:	08004919 	.word	0x08004919
 8004878:	080048f5 	.word	0x080048f5
 800487c:	08004961 	.word	0x08004961
 8004880:	08004985 	.word	0x08004985
 8004884:	0800493d 	.word	0x0800493d
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 8004888:	4b4b      	ldr	r3, [pc, #300]	@ (80049b8 <get_config_topik_string+0x17c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	79ba      	ldrb	r2, [r7, #6]
 800488e:	9204      	str	r2, [sp, #16]
 8004890:	4a4a      	ldr	r2, [pc, #296]	@ (80049bc <get_config_topik_string+0x180>)
 8004892:	9203      	str	r2, [sp, #12]
 8004894:	9302      	str	r3, [sp, #8]
 8004896:	4b4a      	ldr	r3, [pc, #296]	@ (80049c0 <get_config_topik_string+0x184>)
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	4b4a      	ldr	r3, [pc, #296]	@ (80049c4 <get_config_topik_string+0x188>)
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	4b4a      	ldr	r3, [pc, #296]	@ (80049c8 <get_config_topik_string+0x18c>)
 80048a0:	4a4a      	ldr	r2, [pc, #296]	@ (80049cc <get_config_topik_string+0x190>)
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f020 fe2d 	bl	8025504 <snprintf>
			break;
 80048aa:	e080      	b.n	80049ae <get_config_topik_string+0x172>
		case OUTPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 80048ac:	4b42      	ldr	r3, [pc, #264]	@ (80049b8 <get_config_topik_string+0x17c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	79ba      	ldrb	r2, [r7, #6]
 80048b2:	9204      	str	r2, [sp, #16]
 80048b4:	4a46      	ldr	r2, [pc, #280]	@ (80049d0 <get_config_topik_string+0x194>)
 80048b6:	9203      	str	r2, [sp, #12]
 80048b8:	9302      	str	r3, [sp, #8]
 80048ba:	4b41      	ldr	r3, [pc, #260]	@ (80049c0 <get_config_topik_string+0x184>)
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	4b44      	ldr	r3, [pc, #272]	@ (80049d0 <get_config_topik_string+0x194>)
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	4b41      	ldr	r3, [pc, #260]	@ (80049c8 <get_config_topik_string+0x18c>)
 80048c4:	4a41      	ldr	r2, [pc, #260]	@ (80049cc <get_config_topik_string+0x190>)
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f020 fe1b 	bl	8025504 <snprintf>
			break;
 80048ce:	e06e      	b.n	80049ae <get_config_topik_string+0x172>
		case ENERGY_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 80048d0:	4b39      	ldr	r3, [pc, #228]	@ (80049b8 <get_config_topik_string+0x17c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	79ba      	ldrb	r2, [r7, #6]
 80048d6:	9204      	str	r2, [sp, #16]
 80048d8:	4a3e      	ldr	r2, [pc, #248]	@ (80049d4 <get_config_topik_string+0x198>)
 80048da:	9203      	str	r2, [sp, #12]
 80048dc:	9302      	str	r3, [sp, #8]
 80048de:	4b38      	ldr	r3, [pc, #224]	@ (80049c0 <get_config_topik_string+0x184>)
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	4b3d      	ldr	r3, [pc, #244]	@ (80049d8 <get_config_topik_string+0x19c>)
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	4b38      	ldr	r3, [pc, #224]	@ (80049c8 <get_config_topik_string+0x18c>)
 80048e8:	4a38      	ldr	r2, [pc, #224]	@ (80049cc <get_config_topik_string+0x190>)
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f020 fe09 	bl	8025504 <snprintf>
			break;
 80048f2:	e05c      	b.n	80049ae <get_config_topik_string+0x172>
		case VOLTAGE_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 80048f4:	4b30      	ldr	r3, [pc, #192]	@ (80049b8 <get_config_topik_string+0x17c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	79ba      	ldrb	r2, [r7, #6]
 80048fa:	9204      	str	r2, [sp, #16]
 80048fc:	4a37      	ldr	r2, [pc, #220]	@ (80049dc <get_config_topik_string+0x1a0>)
 80048fe:	9203      	str	r2, [sp, #12]
 8004900:	9302      	str	r3, [sp, #8]
 8004902:	4b2f      	ldr	r3, [pc, #188]	@ (80049c0 <get_config_topik_string+0x184>)
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	4b34      	ldr	r3, [pc, #208]	@ (80049d8 <get_config_topik_string+0x19c>)
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	4b2f      	ldr	r3, [pc, #188]	@ (80049c8 <get_config_topik_string+0x18c>)
 800490c:	4a2f      	ldr	r2, [pc, #188]	@ (80049cc <get_config_topik_string+0x190>)
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f020 fdf7 	bl	8025504 <snprintf>
			break;
 8004916:	e04a      	b.n	80049ae <get_config_topik_string+0x172>
		case POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8004918:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <get_config_topik_string+0x17c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	79ba      	ldrb	r2, [r7, #6]
 800491e:	9204      	str	r2, [sp, #16]
 8004920:	4a2f      	ldr	r2, [pc, #188]	@ (80049e0 <get_config_topik_string+0x1a4>)
 8004922:	9203      	str	r2, [sp, #12]
 8004924:	9302      	str	r3, [sp, #8]
 8004926:	4b26      	ldr	r3, [pc, #152]	@ (80049c0 <get_config_topik_string+0x184>)
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	4b2b      	ldr	r3, [pc, #172]	@ (80049d8 <get_config_topik_string+0x19c>)
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	4b26      	ldr	r3, [pc, #152]	@ (80049c8 <get_config_topik_string+0x18c>)
 8004930:	4a26      	ldr	r2, [pc, #152]	@ (80049cc <get_config_topik_string+0x190>)
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f020 fde5 	bl	8025504 <snprintf>
			break;
 800493a:	e038      	b.n	80049ae <get_config_topik_string+0x172>
		case APPARENT_POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 800493c:	4b1e      	ldr	r3, [pc, #120]	@ (80049b8 <get_config_topik_string+0x17c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	79ba      	ldrb	r2, [r7, #6]
 8004942:	9204      	str	r2, [sp, #16]
 8004944:	4a27      	ldr	r2, [pc, #156]	@ (80049e4 <get_config_topik_string+0x1a8>)
 8004946:	9203      	str	r2, [sp, #12]
 8004948:	9302      	str	r3, [sp, #8]
 800494a:	4b1d      	ldr	r3, [pc, #116]	@ (80049c0 <get_config_topik_string+0x184>)
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	4b22      	ldr	r3, [pc, #136]	@ (80049d8 <get_config_topik_string+0x19c>)
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4b1d      	ldr	r3, [pc, #116]	@ (80049c8 <get_config_topik_string+0x18c>)
 8004954:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <get_config_topik_string+0x190>)
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f020 fdd3 	bl	8025504 <snprintf>
			break;
 800495e:	e026      	b.n	80049ae <get_config_topik_string+0x172>
		case POWER_FACTOR_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8004960:	4b15      	ldr	r3, [pc, #84]	@ (80049b8 <get_config_topik_string+0x17c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	79ba      	ldrb	r2, [r7, #6]
 8004966:	9204      	str	r2, [sp, #16]
 8004968:	4a1f      	ldr	r2, [pc, #124]	@ (80049e8 <get_config_topik_string+0x1ac>)
 800496a:	9203      	str	r2, [sp, #12]
 800496c:	9302      	str	r3, [sp, #8]
 800496e:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <get_config_topik_string+0x184>)
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	4b19      	ldr	r3, [pc, #100]	@ (80049d8 <get_config_topik_string+0x19c>)
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	4b14      	ldr	r3, [pc, #80]	@ (80049c8 <get_config_topik_string+0x18c>)
 8004978:	4a14      	ldr	r2, [pc, #80]	@ (80049cc <get_config_topik_string+0x190>)
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f020 fdc1 	bl	8025504 <snprintf>
			break;
 8004982:	e014      	b.n	80049ae <get_config_topik_string+0x172>
		case CURRENT_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 8004984:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <get_config_topik_string+0x17c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	79ba      	ldrb	r2, [r7, #6]
 800498a:	9204      	str	r2, [sp, #16]
 800498c:	4a17      	ldr	r2, [pc, #92]	@ (80049ec <get_config_topik_string+0x1b0>)
 800498e:	9203      	str	r2, [sp, #12]
 8004990:	9302      	str	r3, [sp, #8]
 8004992:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <get_config_topik_string+0x184>)
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	4b10      	ldr	r3, [pc, #64]	@ (80049d8 <get_config_topik_string+0x19c>)
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <get_config_topik_string+0x18c>)
 800499c:	4a0b      	ldr	r2, [pc, #44]	@ (80049cc <get_config_topik_string+0x190>)
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f020 fdaf 	bl	8025504 <snprintf>
			break;
 80049a6:	e002      	b.n	80049ae <get_config_topik_string+0x172>
		default:
			return -1;
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049ac:	e000      	b.n	80049b0 <get_config_topik_string+0x174>
			break;
	}


	return 0;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000b9c 	.word	0x20000b9c
 80049bc:	080300d8 	.word	0x080300d8
 80049c0:	080300e0 	.word	0x080300e0
 80049c4:	080300e8 	.word	0x080300e8
 80049c8:	20000064 	.word	0x20000064
 80049cc:	080300c0 	.word	0x080300c0
 80049d0:	080300f8 	.word	0x080300f8
 80049d4:	08030100 	.word	0x08030100
 80049d8:	08030108 	.word	0x08030108
 80049dc:	08030110 	.word	0x08030110
 80049e0:	08030118 	.word	0x08030118
 80049e4:	08030120 	.word	0x08030120
 80049e8:	08030130 	.word	0x08030130
 80049ec:	08030140 	.word	0x08030140

080049f0 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 80049f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f2:	b09f      	sub	sp, #124	@ 0x7c
 80049f4:	af16      	add	r7, sp, #88	@ 0x58
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	4611      	mov	r1, r2
 80049fc:	461a      	mov	r2, r3
 80049fe:	460b      	mov	r3, r1
 8004a00:	71fb      	strb	r3, [r7, #7]
 8004a02:	4613      	mov	r3, r2
 8004a04:	71bb      	strb	r3, [r7, #6]

	uint8_t len = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	77fb      	strb	r3, [r7, #31]
	char * name      = NULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
	char * com_topik = NULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
	memset(payload, 0, payload_len * sizeof(char));
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	2100      	movs	r1, #0
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f021 fa9e 	bl	8025f58 <memset>

	switch (payload_type) {
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	2b07      	cmp	r3, #7
 8004a22:	f200 820f 	bhi.w	8004e44 <get_config_payload_string+0x454>
 8004a26:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <get_config_payload_string+0x3c>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a4d 	.word	0x08004a4d
 8004a30:	08004add 	.word	0x08004add
 8004a34:	08004ba7 	.word	0x08004ba7
 8004a38:	08004ccd 	.word	0x08004ccd
 8004a3c:	08004c05 	.word	0x08004c05
 8004a40:	08004d89 	.word	0x08004d89
 8004a44:	08004de7 	.word	0x08004de7
 8004a48:	08004d2b 	.word	0x08004d2b

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	2080      	movs	r0, #128	@ 0x80
 8004a50:	f7ff fe6c 	bl	800472c <_ZL9my_callocjj>
 8004a54:	61b8      	str	r0, [r7, #24]
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8004a56:	79bb      	ldrb	r3, [r7, #6]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	4b82      	ldr	r3, [pc, #520]	@ (8004c64 <get_config_payload_string+0x274>)
 8004a5c:	4a82      	ldr	r2, [pc, #520]	@ (8004c68 <get_config_payload_string+0x278>)
 8004a5e:	2180      	movs	r1, #128	@ 0x80
 8004a60:	69b8      	ldr	r0, [r7, #24]
 8004a62:	f020 fd4f 	bl	8025504 <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8004a66:	4b81      	ldr	r3, [pc, #516]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	79ba      	ldrb	r2, [r7, #6]
 8004a6c:	79b9      	ldrb	r1, [r7, #6]
 8004a6e:	487f      	ldr	r0, [pc, #508]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004a70:	6800      	ldr	r0, [r0, #0]
 8004a72:	79bc      	ldrb	r4, [r7, #6]
 8004a74:	4d7d      	ldr	r5, [pc, #500]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004a76:	682d      	ldr	r5, [r5, #0]
 8004a78:	4e7d      	ldr	r6, [pc, #500]	@ (8004c70 <get_config_payload_string+0x280>)
 8004a7a:	6836      	ldr	r6, [r6, #0]
 8004a7c:	9614      	str	r6, [sp, #80]	@ 0x50
 8004a7e:	4e7d      	ldr	r6, [pc, #500]	@ (8004c74 <get_config_payload_string+0x284>)
 8004a80:	9613      	str	r6, [sp, #76]	@ 0x4c
 8004a82:	4e7c      	ldr	r6, [pc, #496]	@ (8004c74 <get_config_payload_string+0x284>)
 8004a84:	9612      	str	r6, [sp, #72]	@ 0x48
 8004a86:	4e7c      	ldr	r6, [pc, #496]	@ (8004c78 <get_config_payload_string+0x288>)
 8004a88:	9611      	str	r6, [sp, #68]	@ 0x44
 8004a8a:	4e7c      	ldr	r6, [pc, #496]	@ (8004c7c <get_config_payload_string+0x28c>)
 8004a8c:	9610      	str	r6, [sp, #64]	@ 0x40
 8004a8e:	4e7c      	ldr	r6, [pc, #496]	@ (8004c80 <get_config_payload_string+0x290>)
 8004a90:	960f      	str	r6, [sp, #60]	@ 0x3c
 8004a92:	950e      	str	r5, [sp, #56]	@ 0x38
 8004a94:	4d7b      	ldr	r5, [pc, #492]	@ (8004c84 <get_config_payload_string+0x294>)
 8004a96:	950d      	str	r5, [sp, #52]	@ 0x34
 8004a98:	4d7b      	ldr	r5, [pc, #492]	@ (8004c88 <get_config_payload_string+0x298>)
 8004a9a:	950c      	str	r5, [sp, #48]	@ 0x30
 8004a9c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004a9e:	4c7b      	ldr	r4, [pc, #492]	@ (8004c8c <get_config_payload_string+0x29c>)
 8004aa0:	940a      	str	r4, [sp, #40]	@ 0x28
 8004aa2:	9009      	str	r0, [sp, #36]	@ 0x24
 8004aa4:	4877      	ldr	r0, [pc, #476]	@ (8004c84 <get_config_payload_string+0x294>)
 8004aa6:	9008      	str	r0, [sp, #32]
 8004aa8:	69b8      	ldr	r0, [r7, #24]
 8004aaa:	9007      	str	r0, [sp, #28]
 8004aac:	4878      	ldr	r0, [pc, #480]	@ (8004c90 <get_config_payload_string+0x2a0>)
 8004aae:	9006      	str	r0, [sp, #24]
 8004ab0:	9105      	str	r1, [sp, #20]
 8004ab2:	4976      	ldr	r1, [pc, #472]	@ (8004c8c <get_config_payload_string+0x29c>)
 8004ab4:	9104      	str	r1, [sp, #16]
 8004ab6:	9203      	str	r2, [sp, #12]
 8004ab8:	4a74      	ldr	r2, [pc, #464]	@ (8004c8c <get_config_payload_string+0x29c>)
 8004aba:	9202      	str	r2, [sp, #8]
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	4b71      	ldr	r3, [pc, #452]	@ (8004c84 <get_config_payload_string+0x294>)
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4b74      	ldr	r3, [pc, #464]	@ (8004c94 <get_config_payload_string+0x2a4>)
 8004ac4:	4a74      	ldr	r2, [pc, #464]	@ (8004c98 <get_config_payload_string+0x2a8>)
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f020 fd1b 	bl	8025504 <snprintf>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	77fb      	strb	r3, [r7, #31]
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8004ad2:	69b8      	ldr	r0, [r7, #24]
 8004ad4:	f007 fc70 	bl	800c3b8 <vPortFree>

			return len;
 8004ad8:	7ffb      	ldrb	r3, [r7, #31]
 8004ada:	e1b6      	b.n	8004e4a <get_config_payload_string+0x45a>
			break;

		case OUT_CONF_PAYLOAD:

			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8004adc:	2101      	movs	r1, #1
 8004ade:	2080      	movs	r0, #128	@ 0x80
 8004ae0:	f7ff fe24 	bl	800472c <_ZL9my_callocjj>
 8004ae4:	61b8      	str	r0, [r7, #24]
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	2080      	movs	r0, #128	@ 0x80
 8004aea:	f7ff fe1f 	bl	800472c <_ZL9my_callocjj>
 8004aee:	6178      	str	r0, [r7, #20]

			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8004af0:	79bb      	ldrb	r3, [r7, #6]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4b69      	ldr	r3, [pc, #420]	@ (8004c9c <get_config_payload_string+0x2ac>)
 8004af6:	4a6a      	ldr	r2, [pc, #424]	@ (8004ca0 <get_config_payload_string+0x2b0>)
 8004af8:	2180      	movs	r1, #128	@ 0x80
 8004afa:	69b8      	ldr	r0, [r7, #24]
 8004afc:	f020 fd02 	bl	8025504 <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8004b00:	4b5a      	ldr	r3, [pc, #360]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a60      	ldr	r2, [pc, #384]	@ (8004c88 <get_config_payload_string+0x298>)
 8004b06:	9202      	str	r2, [sp, #8]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	9201      	str	r2, [sp, #4]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8004c84 <get_config_payload_string+0x294>)
 8004b10:	4a64      	ldr	r2, [pc, #400]	@ (8004ca4 <get_config_payload_string+0x2b4>)
 8004b12:	2180      	movs	r1, #128	@ 0x80
 8004b14:	6978      	ldr	r0, [r7, #20]
 8004b16:	f020 fcf5 	bl	8025504 <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8004b1a:	79bb      	ldrb	r3, [r7, #6]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	4b62      	ldr	r3, [pc, #392]	@ (8004ca8 <get_config_payload_string+0x2b8>)
 8004b20:	4a51      	ldr	r2, [pc, #324]	@ (8004c68 <get_config_payload_string+0x278>)
 8004b22:	2180      	movs	r1, #128	@ 0x80
 8004b24:	69b8      	ldr	r0, [r7, #24]
 8004b26:	f020 fced 	bl	8025504 <snprintf>

			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8004b2a:	4b50      	ldr	r3, [pc, #320]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	79ba      	ldrb	r2, [r7, #6]
 8004b30:	79b9      	ldrb	r1, [r7, #6]
 8004b32:	484e      	ldr	r0, [pc, #312]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004b34:	6800      	ldr	r0, [r0, #0]
 8004b36:	79bc      	ldrb	r4, [r7, #6]
 8004b38:	4d4c      	ldr	r5, [pc, #304]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004b3a:	682d      	ldr	r5, [r5, #0]
 8004b3c:	4e4c      	ldr	r6, [pc, #304]	@ (8004c70 <get_config_payload_string+0x280>)
 8004b3e:	6836      	ldr	r6, [r6, #0]
 8004b40:	9614      	str	r6, [sp, #80]	@ 0x50
 8004b42:	4e4c      	ldr	r6, [pc, #304]	@ (8004c74 <get_config_payload_string+0x284>)
 8004b44:	9613      	str	r6, [sp, #76]	@ 0x4c
 8004b46:	4e4b      	ldr	r6, [pc, #300]	@ (8004c74 <get_config_payload_string+0x284>)
 8004b48:	9612      	str	r6, [sp, #72]	@ 0x48
 8004b4a:	4e4b      	ldr	r6, [pc, #300]	@ (8004c78 <get_config_payload_string+0x288>)
 8004b4c:	9611      	str	r6, [sp, #68]	@ 0x44
 8004b4e:	4e4b      	ldr	r6, [pc, #300]	@ (8004c7c <get_config_payload_string+0x28c>)
 8004b50:	9610      	str	r6, [sp, #64]	@ 0x40
 8004b52:	4e4b      	ldr	r6, [pc, #300]	@ (8004c80 <get_config_payload_string+0x290>)
 8004b54:	960f      	str	r6, [sp, #60]	@ 0x3c
 8004b56:	950e      	str	r5, [sp, #56]	@ 0x38
 8004b58:	4d4a      	ldr	r5, [pc, #296]	@ (8004c84 <get_config_payload_string+0x294>)
 8004b5a:	950d      	str	r5, [sp, #52]	@ 0x34
 8004b5c:	4d4a      	ldr	r5, [pc, #296]	@ (8004c88 <get_config_payload_string+0x298>)
 8004b5e:	950c      	str	r5, [sp, #48]	@ 0x30
 8004b60:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004b62:	4c4e      	ldr	r4, [pc, #312]	@ (8004c9c <get_config_payload_string+0x2ac>)
 8004b64:	940a      	str	r4, [sp, #40]	@ 0x28
 8004b66:	9009      	str	r0, [sp, #36]	@ 0x24
 8004b68:	4846      	ldr	r0, [pc, #280]	@ (8004c84 <get_config_payload_string+0x294>)
 8004b6a:	9008      	str	r0, [sp, #32]
 8004b6c:	69b8      	ldr	r0, [r7, #24]
 8004b6e:	9007      	str	r0, [sp, #28]
 8004b70:	6978      	ldr	r0, [r7, #20]
 8004b72:	9006      	str	r0, [sp, #24]
 8004b74:	9105      	str	r1, [sp, #20]
 8004b76:	4949      	ldr	r1, [pc, #292]	@ (8004c9c <get_config_payload_string+0x2ac>)
 8004b78:	9104      	str	r1, [sp, #16]
 8004b7a:	9203      	str	r2, [sp, #12]
 8004b7c:	4a47      	ldr	r2, [pc, #284]	@ (8004c9c <get_config_payload_string+0x2ac>)
 8004b7e:	9202      	str	r2, [sp, #8]
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	4b40      	ldr	r3, [pc, #256]	@ (8004c84 <get_config_payload_string+0x294>)
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	4b45      	ldr	r3, [pc, #276]	@ (8004c9c <get_config_payload_string+0x2ac>)
 8004b88:	4a43      	ldr	r2, [pc, #268]	@ (8004c98 <get_config_payload_string+0x2a8>)
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f020 fcb9 	bl	8025504 <snprintf>
 8004b92:	4603      	mov	r3, r0
 8004b94:	77fb      	strb	r3, [r7, #31]
							unical_id, component_switch, obj_number, component_switch, obj_number, com_topik, \
							name, dev_system, unical_id, \
							component_switch, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
							dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			//len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
			free(name);
 8004b96:	69b8      	ldr	r0, [r7, #24]
 8004b98:	f007 fc0e 	bl	800c3b8 <vPortFree>
			free(com_topik);
 8004b9c:	6978      	ldr	r0, [r7, #20]
 8004b9e:	f007 fc0b 	bl	800c3b8 <vPortFree>

			return len;
 8004ba2:	7ffb      	ldrb	r3, [r7, #31]
 8004ba4:	e151      	b.n	8004e4a <get_config_payload_string+0x45a>
			break;

		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8004ba6:	4b31      	ldr	r3, [pc, #196]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a30      	ldr	r2, [pc, #192]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	492f      	ldr	r1, [pc, #188]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004bb0:	6809      	ldr	r1, [r1, #0]
 8004bb2:	482f      	ldr	r0, [pc, #188]	@ (8004c70 <get_config_payload_string+0x280>)
 8004bb4:	6800      	ldr	r0, [r0, #0]
 8004bb6:	9010      	str	r0, [sp, #64]	@ 0x40
 8004bb8:	482e      	ldr	r0, [pc, #184]	@ (8004c74 <get_config_payload_string+0x284>)
 8004bba:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004bbc:	482d      	ldr	r0, [pc, #180]	@ (8004c74 <get_config_payload_string+0x284>)
 8004bbe:	900e      	str	r0, [sp, #56]	@ 0x38
 8004bc0:	482d      	ldr	r0, [pc, #180]	@ (8004c78 <get_config_payload_string+0x288>)
 8004bc2:	900d      	str	r0, [sp, #52]	@ 0x34
 8004bc4:	482d      	ldr	r0, [pc, #180]	@ (8004c7c <get_config_payload_string+0x28c>)
 8004bc6:	900c      	str	r0, [sp, #48]	@ 0x30
 8004bc8:	482d      	ldr	r0, [pc, #180]	@ (8004c80 <get_config_payload_string+0x290>)
 8004bca:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004bcc:	910a      	str	r1, [sp, #40]	@ 0x28
 8004bce:	492d      	ldr	r1, [pc, #180]	@ (8004c84 <get_config_payload_string+0x294>)
 8004bd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bd2:	4936      	ldr	r1, [pc, #216]	@ (8004cac <get_config_payload_string+0x2bc>)
 8004bd4:	9108      	str	r1, [sp, #32]
 8004bd6:	4936      	ldr	r1, [pc, #216]	@ (8004cb0 <get_config_payload_string+0x2c0>)
 8004bd8:	9107      	str	r1, [sp, #28]
 8004bda:	9206      	str	r2, [sp, #24]
 8004bdc:	4a29      	ldr	r2, [pc, #164]	@ (8004c84 <get_config_payload_string+0x294>)
 8004bde:	9205      	str	r2, [sp, #20]
 8004be0:	4a34      	ldr	r2, [pc, #208]	@ (8004cb4 <get_config_payload_string+0x2c4>)
 8004be2:	9204      	str	r2, [sp, #16]
 8004be4:	4a34      	ldr	r2, [pc, #208]	@ (8004cb8 <get_config_payload_string+0x2c8>)
 8004be6:	9203      	str	r2, [sp, #12]
 8004be8:	4a31      	ldr	r2, [pc, #196]	@ (8004cb0 <get_config_payload_string+0x2c0>)
 8004bea:	9202      	str	r2, [sp, #8]
 8004bec:	4a33      	ldr	r2, [pc, #204]	@ (8004cbc <get_config_payload_string+0x2cc>)
 8004bee:	9201      	str	r2, [sp, #4]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <get_config_payload_string+0x294>)
 8004bf4:	4a2e      	ldr	r2, [pc, #184]	@ (8004cb0 <get_config_payload_string+0x2c0>)
 8004bf6:	4928      	ldr	r1, [pc, #160]	@ (8004c98 <get_config_payload_string+0x2a8>)
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f020 fdeb 	bl	80257d4 <sprintf>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004c02:	e122      	b.n	8004e4a <get_config_payload_string+0x45a>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8004c04:	4b19      	ldr	r3, [pc, #100]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	4917      	ldr	r1, [pc, #92]	@ (8004c6c <get_config_payload_string+0x27c>)
 8004c0e:	6809      	ldr	r1, [r1, #0]
 8004c10:	4817      	ldr	r0, [pc, #92]	@ (8004c70 <get_config_payload_string+0x280>)
 8004c12:	6800      	ldr	r0, [r0, #0]
 8004c14:	9010      	str	r0, [sp, #64]	@ 0x40
 8004c16:	4817      	ldr	r0, [pc, #92]	@ (8004c74 <get_config_payload_string+0x284>)
 8004c18:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004c1a:	4816      	ldr	r0, [pc, #88]	@ (8004c74 <get_config_payload_string+0x284>)
 8004c1c:	900e      	str	r0, [sp, #56]	@ 0x38
 8004c1e:	4816      	ldr	r0, [pc, #88]	@ (8004c78 <get_config_payload_string+0x288>)
 8004c20:	900d      	str	r0, [sp, #52]	@ 0x34
 8004c22:	4816      	ldr	r0, [pc, #88]	@ (8004c7c <get_config_payload_string+0x28c>)
 8004c24:	900c      	str	r0, [sp, #48]	@ 0x30
 8004c26:	4816      	ldr	r0, [pc, #88]	@ (8004c80 <get_config_payload_string+0x290>)
 8004c28:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004c2a:	910a      	str	r1, [sp, #40]	@ 0x28
 8004c2c:	4915      	ldr	r1, [pc, #84]	@ (8004c84 <get_config_payload_string+0x294>)
 8004c2e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c30:	4923      	ldr	r1, [pc, #140]	@ (8004cc0 <get_config_payload_string+0x2d0>)
 8004c32:	9108      	str	r1, [sp, #32]
 8004c34:	4923      	ldr	r1, [pc, #140]	@ (8004cc4 <get_config_payload_string+0x2d4>)
 8004c36:	9107      	str	r1, [sp, #28]
 8004c38:	9206      	str	r2, [sp, #24]
 8004c3a:	4a12      	ldr	r2, [pc, #72]	@ (8004c84 <get_config_payload_string+0x294>)
 8004c3c:	9205      	str	r2, [sp, #20]
 8004c3e:	4a22      	ldr	r2, [pc, #136]	@ (8004cc8 <get_config_payload_string+0x2d8>)
 8004c40:	9204      	str	r2, [sp, #16]
 8004c42:	4a13      	ldr	r2, [pc, #76]	@ (8004c90 <get_config_payload_string+0x2a0>)
 8004c44:	9203      	str	r2, [sp, #12]
 8004c46:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc4 <get_config_payload_string+0x2d4>)
 8004c48:	9202      	str	r2, [sp, #8]
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cbc <get_config_payload_string+0x2cc>)
 8004c4c:	9201      	str	r2, [sp, #4]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	4b0c      	ldr	r3, [pc, #48]	@ (8004c84 <get_config_payload_string+0x294>)
 8004c52:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc4 <get_config_payload_string+0x2d4>)
 8004c54:	4910      	ldr	r1, [pc, #64]	@ (8004c98 <get_config_payload_string+0x2a8>)
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f020 fdbc 	bl	80257d4 <sprintf>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004c60:	e0f3      	b.n	8004e4a <get_config_payload_string+0x45a>
 8004c62:	bf00      	nop
 8004c64:	08030148 	.word	0x08030148
 8004c68:	08030154 	.word	0x08030154
 8004c6c:	20000b9c 	.word	0x20000b9c
 8004c70:	20000ba0 	.word	0x20000ba0
 8004c74:	0803015c 	.word	0x0803015c
 8004c78:	08030160 	.word	0x08030160
 8004c7c:	08030170 	.word	0x08030170
 8004c80:	08030184 	.word	0x08030184
 8004c84:	080300e0 	.word	0x080300e0
 8004c88:	08030190 	.word	0x08030190
 8004c8c:	080300d8 	.word	0x080300d8
 8004c90:	08030194 	.word	0x08030194
 8004c94:	08030118 	.word	0x08030118
 8004c98:	08033294 	.word	0x08033294
 8004c9c:	080300f8 	.word	0x080300f8
 8004ca0:	08030198 	.word	0x08030198
 8004ca4:	08033414 	.word	0x08033414
 8004ca8:	080301a0 	.word	0x080301a0
 8004cac:	080301b4 	.word	0x080301b4
 8004cb0:	08030100 	.word	0x08030100
 8004cb4:	080301b8 	.word	0x080301b8
 8004cb8:	080301c8 	.word	0x080301c8
 8004cbc:	080301ec 	.word	0x080301ec
 8004cc0:	080301f4 	.word	0x080301f4
 8004cc4:	08030110 	.word	0x08030110
 8004cc8:	080301f8 	.word	0x080301f8
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8004ccc:	4b61      	ldr	r3, [pc, #388]	@ (8004e54 <get_config_payload_string+0x464>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a60      	ldr	r2, [pc, #384]	@ (8004e54 <get_config_payload_string+0x464>)
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	495f      	ldr	r1, [pc, #380]	@ (8004e54 <get_config_payload_string+0x464>)
 8004cd6:	6809      	ldr	r1, [r1, #0]
 8004cd8:	485f      	ldr	r0, [pc, #380]	@ (8004e58 <get_config_payload_string+0x468>)
 8004cda:	6800      	ldr	r0, [r0, #0]
 8004cdc:	9010      	str	r0, [sp, #64]	@ 0x40
 8004cde:	485f      	ldr	r0, [pc, #380]	@ (8004e5c <get_config_payload_string+0x46c>)
 8004ce0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004ce2:	485e      	ldr	r0, [pc, #376]	@ (8004e5c <get_config_payload_string+0x46c>)
 8004ce4:	900e      	str	r0, [sp, #56]	@ 0x38
 8004ce6:	485e      	ldr	r0, [pc, #376]	@ (8004e60 <get_config_payload_string+0x470>)
 8004ce8:	900d      	str	r0, [sp, #52]	@ 0x34
 8004cea:	485e      	ldr	r0, [pc, #376]	@ (8004e64 <get_config_payload_string+0x474>)
 8004cec:	900c      	str	r0, [sp, #48]	@ 0x30
 8004cee:	485e      	ldr	r0, [pc, #376]	@ (8004e68 <get_config_payload_string+0x478>)
 8004cf0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004cf2:	910a      	str	r1, [sp, #40]	@ 0x28
 8004cf4:	495d      	ldr	r1, [pc, #372]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004cf6:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cf8:	495d      	ldr	r1, [pc, #372]	@ (8004e70 <get_config_payload_string+0x480>)
 8004cfa:	9108      	str	r1, [sp, #32]
 8004cfc:	495d      	ldr	r1, [pc, #372]	@ (8004e74 <get_config_payload_string+0x484>)
 8004cfe:	9107      	str	r1, [sp, #28]
 8004d00:	9206      	str	r2, [sp, #24]
 8004d02:	4a5a      	ldr	r2, [pc, #360]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004d04:	9205      	str	r2, [sp, #20]
 8004d06:	4a5c      	ldr	r2, [pc, #368]	@ (8004e78 <get_config_payload_string+0x488>)
 8004d08:	9204      	str	r2, [sp, #16]
 8004d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8004e7c <get_config_payload_string+0x48c>)
 8004d0c:	9203      	str	r2, [sp, #12]
 8004d0e:	4a59      	ldr	r2, [pc, #356]	@ (8004e74 <get_config_payload_string+0x484>)
 8004d10:	9202      	str	r2, [sp, #8]
 8004d12:	4a5b      	ldr	r2, [pc, #364]	@ (8004e80 <get_config_payload_string+0x490>)
 8004d14:	9201      	str	r2, [sp, #4]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4b54      	ldr	r3, [pc, #336]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004d1a:	4a56      	ldr	r2, [pc, #344]	@ (8004e74 <get_config_payload_string+0x484>)
 8004d1c:	4959      	ldr	r1, [pc, #356]	@ (8004e84 <get_config_payload_string+0x494>)
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f020 fd58 	bl	80257d4 <sprintf>
 8004d24:	4603      	mov	r3, r0
 8004d26:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004d28:	e08f      	b.n	8004e4a <get_config_payload_string+0x45a>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8004d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e54 <get_config_payload_string+0x464>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a49      	ldr	r2, [pc, #292]	@ (8004e54 <get_config_payload_string+0x464>)
 8004d30:	6812      	ldr	r2, [r2, #0]
 8004d32:	4948      	ldr	r1, [pc, #288]	@ (8004e54 <get_config_payload_string+0x464>)
 8004d34:	6809      	ldr	r1, [r1, #0]
 8004d36:	4848      	ldr	r0, [pc, #288]	@ (8004e58 <get_config_payload_string+0x468>)
 8004d38:	6800      	ldr	r0, [r0, #0]
 8004d3a:	9010      	str	r0, [sp, #64]	@ 0x40
 8004d3c:	4847      	ldr	r0, [pc, #284]	@ (8004e5c <get_config_payload_string+0x46c>)
 8004d3e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004d40:	4846      	ldr	r0, [pc, #280]	@ (8004e5c <get_config_payload_string+0x46c>)
 8004d42:	900e      	str	r0, [sp, #56]	@ 0x38
 8004d44:	4846      	ldr	r0, [pc, #280]	@ (8004e60 <get_config_payload_string+0x470>)
 8004d46:	900d      	str	r0, [sp, #52]	@ 0x34
 8004d48:	4846      	ldr	r0, [pc, #280]	@ (8004e64 <get_config_payload_string+0x474>)
 8004d4a:	900c      	str	r0, [sp, #48]	@ 0x30
 8004d4c:	4846      	ldr	r0, [pc, #280]	@ (8004e68 <get_config_payload_string+0x478>)
 8004d4e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004d50:	910a      	str	r1, [sp, #40]	@ 0x28
 8004d52:	4946      	ldr	r1, [pc, #280]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004d54:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d56:	494c      	ldr	r1, [pc, #304]	@ (8004e88 <get_config_payload_string+0x498>)
 8004d58:	9108      	str	r1, [sp, #32]
 8004d5a:	494c      	ldr	r1, [pc, #304]	@ (8004e8c <get_config_payload_string+0x49c>)
 8004d5c:	9107      	str	r1, [sp, #28]
 8004d5e:	9206      	str	r2, [sp, #24]
 8004d60:	4a42      	ldr	r2, [pc, #264]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004d62:	9205      	str	r2, [sp, #20]
 8004d64:	4a4a      	ldr	r2, [pc, #296]	@ (8004e90 <get_config_payload_string+0x4a0>)
 8004d66:	9204      	str	r2, [sp, #16]
 8004d68:	4a44      	ldr	r2, [pc, #272]	@ (8004e7c <get_config_payload_string+0x48c>)
 8004d6a:	9203      	str	r2, [sp, #12]
 8004d6c:	4a47      	ldr	r2, [pc, #284]	@ (8004e8c <get_config_payload_string+0x49c>)
 8004d6e:	9202      	str	r2, [sp, #8]
 8004d70:	4a43      	ldr	r2, [pc, #268]	@ (8004e80 <get_config_payload_string+0x490>)
 8004d72:	9201      	str	r2, [sp, #4]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	4b3d      	ldr	r3, [pc, #244]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004d78:	4a44      	ldr	r2, [pc, #272]	@ (8004e8c <get_config_payload_string+0x49c>)
 8004d7a:	4942      	ldr	r1, [pc, #264]	@ (8004e84 <get_config_payload_string+0x494>)
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f020 fd29 	bl	80257d4 <sprintf>
 8004d82:	4603      	mov	r3, r0
 8004d84:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004d86:	e060      	b.n	8004e4a <get_config_payload_string+0x45a>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8004d88:	4b32      	ldr	r3, [pc, #200]	@ (8004e54 <get_config_payload_string+0x464>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a31      	ldr	r2, [pc, #196]	@ (8004e54 <get_config_payload_string+0x464>)
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	4930      	ldr	r1, [pc, #192]	@ (8004e54 <get_config_payload_string+0x464>)
 8004d92:	6809      	ldr	r1, [r1, #0]
 8004d94:	4830      	ldr	r0, [pc, #192]	@ (8004e58 <get_config_payload_string+0x468>)
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	9010      	str	r0, [sp, #64]	@ 0x40
 8004d9a:	4830      	ldr	r0, [pc, #192]	@ (8004e5c <get_config_payload_string+0x46c>)
 8004d9c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004d9e:	482f      	ldr	r0, [pc, #188]	@ (8004e5c <get_config_payload_string+0x46c>)
 8004da0:	900e      	str	r0, [sp, #56]	@ 0x38
 8004da2:	482f      	ldr	r0, [pc, #188]	@ (8004e60 <get_config_payload_string+0x470>)
 8004da4:	900d      	str	r0, [sp, #52]	@ 0x34
 8004da6:	482f      	ldr	r0, [pc, #188]	@ (8004e64 <get_config_payload_string+0x474>)
 8004da8:	900c      	str	r0, [sp, #48]	@ 0x30
 8004daa:	482f      	ldr	r0, [pc, #188]	@ (8004e68 <get_config_payload_string+0x478>)
 8004dac:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004dae:	910a      	str	r1, [sp, #40]	@ 0x28
 8004db0:	492e      	ldr	r1, [pc, #184]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004db2:	9109      	str	r1, [sp, #36]	@ 0x24
 8004db4:	4937      	ldr	r1, [pc, #220]	@ (8004e94 <get_config_payload_string+0x4a4>)
 8004db6:	9108      	str	r1, [sp, #32]
 8004db8:	4937      	ldr	r1, [pc, #220]	@ (8004e98 <get_config_payload_string+0x4a8>)
 8004dba:	9107      	str	r1, [sp, #28]
 8004dbc:	9206      	str	r2, [sp, #24]
 8004dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004dc0:	9205      	str	r2, [sp, #20]
 8004dc2:	4a36      	ldr	r2, [pc, #216]	@ (8004e9c <get_config_payload_string+0x4ac>)
 8004dc4:	9204      	str	r2, [sp, #16]
 8004dc6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e7c <get_config_payload_string+0x48c>)
 8004dc8:	9203      	str	r2, [sp, #12]
 8004dca:	4a33      	ldr	r2, [pc, #204]	@ (8004e98 <get_config_payload_string+0x4a8>)
 8004dcc:	9202      	str	r2, [sp, #8]
 8004dce:	4a2c      	ldr	r2, [pc, #176]	@ (8004e80 <get_config_payload_string+0x490>)
 8004dd0:	9201      	str	r2, [sp, #4]
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	4b25      	ldr	r3, [pc, #148]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004dd6:	4a30      	ldr	r2, [pc, #192]	@ (8004e98 <get_config_payload_string+0x4a8>)
 8004dd8:	492a      	ldr	r1, [pc, #168]	@ (8004e84 <get_config_payload_string+0x494>)
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f020 fcfa 	bl	80257d4 <sprintf>
 8004de0:	4603      	mov	r3, r0
 8004de2:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004de4:	e031      	b.n	8004e4a <get_config_payload_string+0x45a>
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8004de6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <get_config_payload_string+0x464>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1a      	ldr	r2, [pc, #104]	@ (8004e54 <get_config_payload_string+0x464>)
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	4919      	ldr	r1, [pc, #100]	@ (8004e54 <get_config_payload_string+0x464>)
 8004df0:	6809      	ldr	r1, [r1, #0]
 8004df2:	4819      	ldr	r0, [pc, #100]	@ (8004e58 <get_config_payload_string+0x468>)
 8004df4:	6800      	ldr	r0, [r0, #0]
 8004df6:	9010      	str	r0, [sp, #64]	@ 0x40
 8004df8:	4818      	ldr	r0, [pc, #96]	@ (8004e5c <get_config_payload_string+0x46c>)
 8004dfa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004dfc:	4817      	ldr	r0, [pc, #92]	@ (8004e5c <get_config_payload_string+0x46c>)
 8004dfe:	900e      	str	r0, [sp, #56]	@ 0x38
 8004e00:	4817      	ldr	r0, [pc, #92]	@ (8004e60 <get_config_payload_string+0x470>)
 8004e02:	900d      	str	r0, [sp, #52]	@ 0x34
 8004e04:	4817      	ldr	r0, [pc, #92]	@ (8004e64 <get_config_payload_string+0x474>)
 8004e06:	900c      	str	r0, [sp, #48]	@ 0x30
 8004e08:	4817      	ldr	r0, [pc, #92]	@ (8004e68 <get_config_payload_string+0x478>)
 8004e0a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004e0c:	910a      	str	r1, [sp, #40]	@ 0x28
 8004e0e:	4917      	ldr	r1, [pc, #92]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004e10:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e12:	4923      	ldr	r1, [pc, #140]	@ (8004ea0 <get_config_payload_string+0x4b0>)
 8004e14:	9108      	str	r1, [sp, #32]
 8004e16:	4923      	ldr	r1, [pc, #140]	@ (8004ea4 <get_config_payload_string+0x4b4>)
 8004e18:	9107      	str	r1, [sp, #28]
 8004e1a:	9206      	str	r2, [sp, #24]
 8004e1c:	4a13      	ldr	r2, [pc, #76]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004e1e:	9205      	str	r2, [sp, #20]
 8004e20:	4a21      	ldr	r2, [pc, #132]	@ (8004ea8 <get_config_payload_string+0x4b8>)
 8004e22:	9204      	str	r2, [sp, #16]
 8004e24:	4a15      	ldr	r2, [pc, #84]	@ (8004e7c <get_config_payload_string+0x48c>)
 8004e26:	9203      	str	r2, [sp, #12]
 8004e28:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea4 <get_config_payload_string+0x4b4>)
 8004e2a:	9202      	str	r2, [sp, #8]
 8004e2c:	4a14      	ldr	r2, [pc, #80]	@ (8004e80 <get_config_payload_string+0x490>)
 8004e2e:	9201      	str	r2, [sp, #4]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	4b0e      	ldr	r3, [pc, #56]	@ (8004e6c <get_config_payload_string+0x47c>)
 8004e34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea4 <get_config_payload_string+0x4b4>)
 8004e36:	4913      	ldr	r1, [pc, #76]	@ (8004e84 <get_config_payload_string+0x494>)
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f020 fccb 	bl	80257d4 <sprintf>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004e42:	e002      	b.n	8004e4a <get_config_payload_string+0x45a>

		default:
			return -1;
 8004e44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e48:	e7ff      	b.n	8004e4a <get_config_payload_string+0x45a>
			break;
	}
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3724      	adds	r7, #36	@ 0x24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000b9c 	.word	0x20000b9c
 8004e58:	20000ba0 	.word	0x20000ba0
 8004e5c:	0803015c 	.word	0x0803015c
 8004e60:	08030160 	.word	0x08030160
 8004e64:	08030170 	.word	0x08030170
 8004e68:	08030184 	.word	0x08030184
 8004e6c:	080300e0 	.word	0x080300e0
 8004e70:	08030208 	.word	0x08030208
 8004e74:	08030118 	.word	0x08030118
 8004e78:	0803020c 	.word	0x0803020c
 8004e7c:	08030194 	.word	0x08030194
 8004e80:	080301ec 	.word	0x080301ec
 8004e84:	08033294 	.word	0x08033294
 8004e88:	08030230 	.word	0x08030230
 8004e8c:	08030120 	.word	0x08030120
 8004e90:	08030234 	.word	0x08030234
 8004e94:	08030254 	.word	0x08030254
 8004e98:	08030130 	.word	0x08030130
 8004e9c:	08030258 	.word	0x08030258
 8004ea0:	08030284 	.word	0x08030284
 8004ea4:	08030140 	.word	0x08030140
 8004ea8:	08030288 	.word	0x08030288

08004eac <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	460b      	mov	r3, r1
 8004ebc:	71fb      	strb	r3, [r7, #7]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	71bb      	strb	r3, [r7, #6]

	char * sens_name = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
	switch (sensor_type) {
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d002      	beq.n	8004ed2 <gen_bin_sensor_status_payload_JSON+0x26>
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d003      	beq.n	8004ed8 <gen_bin_sensor_status_payload_JSON+0x2c>
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
			break;
		default:
			break;
 8004ed0:	e005      	b.n	8004ede <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)component_input;
 8004ed2:	4b13      	ldr	r3, [pc, #76]	@ (8004f20 <gen_bin_sensor_status_payload_JSON+0x74>)
 8004ed4:	617b      	str	r3, [r7, #20]
			break;
 8004ed6:	e002      	b.n	8004ede <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)dev_class_switch;
 8004ed8:	4b12      	ldr	r3, [pc, #72]	@ (8004f24 <gen_bin_sensor_status_payload_JSON+0x78>)
 8004eda:	617b      	str	r3, [r7, #20]
			break;
 8004edc:	bf00      	nop
	}

	if (state){
 8004ede:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00b      	beq.n	8004efe <gen_bin_sensor_status_payload_JSON+0x52>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 8004ee6:	79bb      	ldrb	r3, [r7, #6]
 8004ee8:	4a0f      	ldr	r2, [pc, #60]	@ (8004f28 <gen_bin_sensor_status_payload_JSON+0x7c>)
 8004eea:	9201      	str	r2, [sp, #4]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8004f2c <gen_bin_sensor_status_payload_JSON+0x80>)
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f020 fb05 	bl	8025504 <snprintf>
 8004efa:	4603      	mov	r3, r0
 8004efc:	e00b      	b.n	8004f16 <gen_bin_sensor_status_payload_JSON+0x6a>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8004efe:	79bb      	ldrb	r3, [r7, #6]
 8004f00:	4a0b      	ldr	r2, [pc, #44]	@ (8004f30 <gen_bin_sensor_status_payload_JSON+0x84>)
 8004f02:	9201      	str	r2, [sp, #4]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	4a08      	ldr	r2, [pc, #32]	@ (8004f2c <gen_bin_sensor_status_payload_JSON+0x80>)
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f020 faf9 	bl	8025504 <snprintf>
 8004f12:	4603      	mov	r3, r0
 8004f14:	bf00      	nop
	}
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	080300d8 	.word	0x080300d8
 8004f24:	080300f8 	.word	0x080300f8
 8004f28:	08030294 	.word	0x08030294
 8004f2c:	0803343c 	.word	0x0803343c
 8004f30:	08030298 	.word	0x08030298

08004f34 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af04      	add	r7, sp, #16
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4611      	mov	r1, r2
 8004f40:	461a      	mov	r2, r3
 8004f42:	460b      	mov	r3, r1
 8004f44:	71fb      	strb	r3, [r7, #7]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71bb      	strb	r3, [r7, #6]

	switch(sensor_type){
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d10e      	bne.n	8004f6e <generate_comand_topik_for_subscrabe+0x3a>

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8004f50:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <generate_comand_topik_for_subscrabe+0x44>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	79ba      	ldrb	r2, [r7, #6]
 8004f56:	9202      	str	r2, [sp, #8]
 8004f58:	4a08      	ldr	r2, [pc, #32]	@ (8004f7c <generate_comand_topik_for_subscrabe+0x48>)
 8004f5a:	9201      	str	r2, [sp, #4]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	4b08      	ldr	r3, [pc, #32]	@ (8004f80 <generate_comand_topik_for_subscrabe+0x4c>)
 8004f60:	4a08      	ldr	r2, [pc, #32]	@ (8004f84 <generate_comand_topik_for_subscrabe+0x50>)
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f020 facd 	bl	8025504 <snprintf>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	e7ff      	b.n	8004f6e <generate_comand_topik_for_subscrabe+0x3a>
			break;
	}
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000b9c 	.word	0x20000b9c
 8004f7c:	080300f8 	.word	0x080300f8
 8004f80:	080300e0 	.word	0x080300e0
 8004f84:	0803029c 	.word	0x0803029c

08004f88 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af04      	add	r7, sp, #16
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	4611      	mov	r1, r2
 8004f94:	461a      	mov	r2, r3
 8004f96:	460b      	mov	r3, r1
 8004f98:	71fb      	strb	r3, [r7, #7]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	71bb      	strb	r3, [r7, #6]

	strcpy(topik, "\0");
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]

	switch (sensor_type) {
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d002      	beq.n	8004fb0 <generate_status_topik+0x28>
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d00f      	beq.n	8004fce <generate_status_topik+0x46>
 8004fae:	e01d      	b.n	8004fec <generate_status_topik+0x64>
		case INPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8004fb0:	4b11      	ldr	r3, [pc, #68]	@ (8004ff8 <generate_status_topik+0x70>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	79ba      	ldrb	r2, [r7, #6]
 8004fb6:	9202      	str	r2, [sp, #8]
 8004fb8:	4a10      	ldr	r2, [pc, #64]	@ (8004ffc <generate_status_topik+0x74>)
 8004fba:	9201      	str	r2, [sp, #4]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	4b10      	ldr	r3, [pc, #64]	@ (8005000 <generate_status_topik+0x78>)
 8004fc0:	4a10      	ldr	r2, [pc, #64]	@ (8005004 <generate_status_topik+0x7c>)
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f020 fa9d 	bl	8025504 <snprintf>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	e010      	b.n	8004ff0 <generate_status_topik+0x68>
			break;

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8004fce:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff8 <generate_status_topik+0x70>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	79ba      	ldrb	r2, [r7, #6]
 8004fd4:	9202      	str	r2, [sp, #8]
 8004fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8005008 <generate_status_topik+0x80>)
 8004fd8:	9201      	str	r2, [sp, #4]
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <generate_status_topik+0x78>)
 8004fde:	4a09      	ldr	r2, [pc, #36]	@ (8005004 <generate_status_topik+0x7c>)
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f020 fa8e 	bl	8025504 <snprintf>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	e001      	b.n	8004ff0 <generate_status_topik+0x68>
			break;

		default:
			return -1;
 8004fec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
			break;
	}

	return 0;
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000b9c 	.word	0x20000b9c
 8004ffc:	080300d8 	.word	0x080300d8
 8005000:	080300e0 	.word	0x080300e0
 8005004:	080302ac 	.word	0x080302ac
 8005008:	080300f8 	.word	0x080300f8

0800500c <sfn>:

// SNTP client connection
static struct mg_connection *s_sntp_conn = NULL;

// SNTP client callback
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 800500c:	b5b0      	push	{r4, r5, r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_SNTP_TIME) {
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b12      	cmp	r3, #18
 800501c:	d14b      	bne.n	80050b6 <sfn+0xaa>
	  logging(L_INFO, "Response from NTP server received");
 800501e:	492d      	ldr	r1, [pc, #180]	@ (80050d4 <sfn+0xc8>)
 8005020:	2001      	movs	r0, #1
 8005022:	f7fd f88b 	bl	800213c <logging>
    // Time received, the internal protocol handler updates what mg_now() returns
    uint64_t curtime = mg_now();
 8005026:	f01c f92f 	bl	8021288 <mg_now>
 800502a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 800502e:	4b2a      	ldr	r3, [pc, #168]	@ (80050d8 <sfn+0xcc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b01      	cmp	r3, #1
 8005034:	dd0a      	ble.n	800504c <sfn+0x40>
 8005036:	4b29      	ldr	r3, [pc, #164]	@ (80050dc <sfn+0xd0>)
 8005038:	221b      	movs	r2, #27
 800503a:	4929      	ldr	r1, [pc, #164]	@ (80050e0 <sfn+0xd4>)
 800503c:	2002      	movs	r0, #2
 800503e:	f015 fef5 	bl	801ae2c <mg_log_prefix>
 8005042:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005046:	4827      	ldr	r0, [pc, #156]	@ (80050e4 <sfn+0xd8>)
 8005048:	f015 ff40 	bl	801aecc <mg_log>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 800504c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005050:	4924      	ldr	r1, [pc, #144]	@ (80050e4 <sfn+0xd8>)
 8005052:	2001      	movs	r0, #1
 8005054:	f7fd f872 	bl	800213c <logging>
    // otherwise, you can process the server returned data yourself
    {
      uint64_t t = *(uint64_t *) ev_data;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 8005062:	f01d fc1b 	bl	802289c <mg_millis>
 8005066:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800506a:	1a14      	subs	r4, r2, r0
 800506c:	eb63 0501 	sbc.w	r5, r3, r1
 8005070:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	4620      	mov	r0, r4
 800507a:	4629      	mov	r1, r5
 800507c:	f7fb fe6c 	bl	8000d58 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4918      	ldr	r1, [pc, #96]	@ (80050e8 <sfn+0xdc>)
 8005086:	e9c1 2300 	strd	r2, r3, [r1]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 800508a:	4b13      	ldr	r3, [pc, #76]	@ (80050d8 <sfn+0xcc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b01      	cmp	r3, #1
 8005090:	dd0a      	ble.n	80050a8 <sfn+0x9c>
 8005092:	4b12      	ldr	r3, [pc, #72]	@ (80050dc <sfn+0xd0>)
 8005094:	2221      	movs	r2, #33	@ 0x21
 8005096:	4912      	ldr	r1, [pc, #72]	@ (80050e0 <sfn+0xd4>)
 8005098:	2002      	movs	r0, #2
 800509a:	f015 fec7 	bl	801ae2c <mg_log_prefix>
 800509e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050a2:	4812      	ldr	r0, [pc, #72]	@ (80050ec <sfn+0xe0>)
 80050a4:	f015 ff12 	bl	801aecc <mg_log>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 80050a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050ac:	4910      	ldr	r1, [pc, #64]	@ (80050f0 <sfn+0xe4>)
 80050ae:	2001      	movs	r0, #1
 80050b0:	f7fd f844 	bl	800213c <logging>
  } else if (ev == MG_EV_CLOSE) {
	  logging(L_ERR, "NTP connection is closed");
    s_sntp_conn = NULL;
  }
  (void) c;
}
 80050b4:	e009      	b.n	80050ca <sfn+0xbe>
  } else if (ev == MG_EV_CLOSE) {
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b09      	cmp	r3, #9
 80050ba:	d106      	bne.n	80050ca <sfn+0xbe>
	  logging(L_ERR, "NTP connection is closed");
 80050bc:	490d      	ldr	r1, [pc, #52]	@ (80050f4 <sfn+0xe8>)
 80050be:	2003      	movs	r0, #3
 80050c0:	f7fd f83c 	bl	800213c <logging>
    s_sntp_conn = NULL;
 80050c4:	4b0c      	ldr	r3, [pc, #48]	@ (80050f8 <sfn+0xec>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bdb0      	pop	{r4, r5, r7, pc}
 80050d2:	bf00      	nop
 80050d4:	080302d0 	.word	0x080302d0
 80050d8:	20000298 	.word	0x20000298
 80050dc:	0803344c 	.word	0x0803344c
 80050e0:	080302f4 	.word	0x080302f4
 80050e4:	08030314 	.word	0x08030314
 80050e8:	20000ba8 	.word	0x20000ba8
 80050ec:	08030348 	.word	0x08030348
 80050f0:	0803036c 	.word	0x0803036c
 80050f4:	08030390 	.word	0x08030390
 80050f8:	20000bb0 	.word	0x20000bb0

080050fc <timer_fn>:


void timer_fn(void *arg) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60fb      	str	r3, [r7, #12]
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8005108:	4b0c      	ldr	r3, [pc, #48]	@ (800513c <timer_fn+0x40>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d108      	bne.n	8005122 <timer_fn+0x26>
 8005110:	2300      	movs	r3, #0
 8005112:	4a0b      	ldr	r2, [pc, #44]	@ (8005140 <timer_fn+0x44>)
 8005114:	2100      	movs	r1, #0
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f01c fb4e 	bl	80217b8 <mg_sntp_connect>
 800511c:	4603      	mov	r3, r0
 800511e:	4a07      	ldr	r2, [pc, #28]	@ (800513c <timer_fn+0x40>)
 8005120:	6013      	str	r3, [r2, #0]
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8005122:	4b06      	ldr	r3, [pc, #24]	@ (800513c <timer_fn+0x40>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d004      	beq.n	8005134 <timer_fn+0x38>
 800512a:	4b04      	ldr	r3, [pc, #16]	@ (800513c <timer_fn+0x40>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f01c fab6 	bl	80216a0 <mg_sntp_request>
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000bb0 	.word	0x20000bb0
 8005140:	0800500d 	.word	0x0800500d

08005144 <start_sntp>:

void start_sntp(void *arg){
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af04      	add	r7, sp, #16
 800514a:	6078      	str	r0, [r7, #4]
	logging(L_INFO, "starting NTP client service");
 800514c:	4911      	ldr	r1, [pc, #68]	@ (8005194 <start_sntp+0x50>)
 800514e:	2001      	movs	r0, #1
 8005150:	f7fc fff4 	bl	800213c <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60fb      	str	r3, [r7, #12]

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	9302      	str	r3, [sp, #8]
 800515c:	4b0e      	ldr	r3, [pc, #56]	@ (8005198 <start_sntp+0x54>)
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	2300      	movs	r3, #0
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f018 fbf7 	bl	801d960 <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	9302      	str	r3, [sp, #8]
 8005176:	4b08      	ldr	r3, [pc, #32]	@ (8005198 <start_sntp+0x54>)
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	2301      	movs	r3, #1
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	4a07      	ldr	r2, [pc, #28]	@ (800519c <start_sntp+0x58>)
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f018 fbeb 	bl	801d960 <mg_timer_add>

}
 800518a:	bf00      	nop
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	080303ac 	.word	0x080303ac
 8005198:	080050fd 	.word	0x080050fd
 800519c:	00107ac0 	.word	0x00107ac0

080051a0 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]

	if (chip_select){
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 80051c4:	4a0e      	ldr	r2, [pc, #56]	@ (8005200 <SPI_flash_reg_cb+0x50>)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	60d3      	str	r3, [r2, #12]
 80051ca:	e002      	b.n	80051d2 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 80051cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005200 <SPI_flash_reg_cb+0x50>)
 80051ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005204 <SPI_flash_reg_cb+0x54>)
 80051d0:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 80051d8:	4a09      	ldr	r2, [pc, #36]	@ (8005200 <SPI_flash_reg_cb+0x50>)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6113      	str	r3, [r2, #16]
 80051de:	e002      	b.n	80051e6 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 80051e0:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <SPI_flash_reg_cb+0x50>)
 80051e2:	4a08      	ldr	r2, [pc, #32]	@ (8005204 <SPI_flash_reg_cb+0x54>)
 80051e4:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_buffer	= receive_buffer;
 80051e6:	4a06      	ldr	r2, [pc, #24]	@ (8005200 <SPI_flash_reg_cb+0x50>)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 80051ec:	4a04      	ldr	r2, [pc, #16]	@ (8005200 <SPI_flash_reg_cb+0x50>)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6093      	str	r3, [r2, #8]

}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20000bb4 	.word	0x20000bb4
 8005204:	080051a1 	.word	0x080051a1

08005208 <sFLASH_Reset>:

void SPI_flash_io_init(void){

}

void sFLASH_Reset(void){
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
    sFLASH_CS_LOW();
 800520c:	f000 f8d2 	bl	80053b4 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8005210:	2066      	movs	r0, #102	@ 0x66
 8005212:	f000 fa8d 	bl	8005730 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8005216:	2099      	movs	r0, #153	@ 0x99
 8005218:	f000 fa8a 	bl	8005730 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 800521c:	f000 f8d4 	bl	80053c8 <sFLASH_CS_HIGH>
}
 8005220:	bf00      	nop
 8005222:	bd80      	pop	{r7, pc}

08005224 <sFLASH_Init>:

void sFLASH_Init(void){
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 8005228:	2064      	movs	r0, #100	@ 0x64
 800522a:	f000 fafb 	bl	8005824 <HAL_Delay>
    sFLASH_Reset();
 800522e:	f7ff ffeb 	bl	8005208 <sFLASH_Reset>
    HAL_Delay(100);
 8005232:	2064      	movs	r0, #100	@ 0x64
 8005234:	f000 faf6 	bl	8005824 <HAL_Delay>
    HAL_Delay(100);
 8005238:	2064      	movs	r0, #100	@ 0x64
 800523a:	f000 faf3 	bl	8005824 <HAL_Delay>
}
 800523e:	bf00      	nop
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <sFLASH_GetInfo>:

struct SPI_flash_info sFLASH_GetInfo(void){
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

	sFLASH_Init();
 800524c:	f7ff ffea 	bl	8005224 <sFLASH_Init>

	flash_id = sFLASH_ReadID();
 8005250:	f000 fa18 	bl	8005684 <sFLASH_ReadID>
 8005254:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a4f      	ldr	r2, [pc, #316]	@ (8005398 <sFLASH_GetInfo+0x154>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d076      	beq.n	800534c <sFLASH_GetInfo+0x108>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a4d      	ldr	r2, [pc, #308]	@ (8005398 <sFLASH_GetInfo+0x154>)
 8005262:	4293      	cmp	r3, r2
 8005264:	f0c0 8088 	bcc.w	8005378 <sFLASH_GetInfo+0x134>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4a4c      	ldr	r2, [pc, #304]	@ (800539c <sFLASH_GetInfo+0x158>)
 800526c:	4293      	cmp	r3, r2
 800526e:	f200 8083 	bhi.w	8005378 <sFLASH_GetInfo+0x134>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4a4a      	ldr	r2, [pc, #296]	@ (80053a0 <sFLASH_GetInfo+0x15c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d37e      	bcc.n	8005378 <sFLASH_GetInfo+0x134>
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4b49      	ldr	r3, [pc, #292]	@ (80053a4 <sFLASH_GetInfo+0x160>)
 800527e:	4413      	add	r3, r2
 8005280:	2b03      	cmp	r3, #3
 8005282:	d879      	bhi.n	8005378 <sFLASH_GetInfo+0x134>
 8005284:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <sFLASH_GetInfo+0x48>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	0800529d 	.word	0x0800529d
 8005290:	080052c9 	.word	0x080052c9
 8005294:	080052f5 	.word	0x080052f5
 8005298:	08005321 	.word	0x08005321
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 800529c:	4b42      	ldr	r3, [pc, #264]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 800529e:	4a40      	ldr	r2, [pc, #256]	@ (80053a0 <sFLASH_GetInfo+0x15c>)
 80052a0:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80052a2:	4b41      	ldr	r3, [pc, #260]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80052a8:	4b3f      	ldr	r3, [pc, #252]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80052ae:	4b3e      	ldr	r3, [pc, #248]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80052b4:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80052b6:	4b3c      	ldr	r3, [pc, #240]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052bc:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 80052be:	4b3a      	ldr	r3, [pc, #232]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052c4:	819a      	strh	r2, [r3, #12]
			break;
 80052c6:	e05b      	b.n	8005380 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 80052c8:	4b37      	ldr	r3, [pc, #220]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052ca:	4a38      	ldr	r2, [pc, #224]	@ (80053ac <sFLASH_GetInfo+0x168>)
 80052cc:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80052ce:	4b36      	ldr	r3, [pc, #216]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80052d4:	4b34      	ldr	r3, [pc, #208]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80052da:	4b33      	ldr	r3, [pc, #204]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80052e0:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80052e2:	4b31      	ldr	r3, [pc, #196]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052e8:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80052ea:	4b2f      	ldr	r3, [pc, #188]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052f0:	819a      	strh	r2, [r3, #12]
			break;
 80052f2:	e045      	b.n	8005380 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 80052f4:	4b2c      	ldr	r3, [pc, #176]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052f6:	4a2e      	ldr	r2, [pc, #184]	@ (80053b0 <sFLASH_GetInfo+0x16c>)
 80052f8:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80052fa:	4b2b      	ldr	r3, [pc, #172]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8005300:	4b29      	ldr	r3, [pc, #164]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005302:	2201      	movs	r2, #1
 8005304:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8005306:	4b28      	ldr	r3, [pc, #160]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005308:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800530c:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 800530e:	4b26      	ldr	r3, [pc, #152]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005310:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005314:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 8005316:	4b24      	ldr	r3, [pc, #144]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005318:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800531c:	819a      	strh	r2, [r3, #12]
			break;
 800531e:	e02f      	b.n	8005380 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q128BV_ID:
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8005320:	4b21      	ldr	r3, [pc, #132]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005322:	4a1e      	ldr	r2, [pc, #120]	@ (800539c <sFLASH_GetInfo+0x158>)
 8005324:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8005326:	4b20      	ldr	r3, [pc, #128]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005328:	2201      	movs	r2, #1
 800532a:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 800532c:	4b1e      	ldr	r3, [pc, #120]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 800532e:	2201      	movs	r2, #1
 8005330:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8005332:	4b1d      	ldr	r3, [pc, #116]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005334:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005338:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 800533a:	4b1b      	ldr	r3, [pc, #108]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 800533c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005340:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 4096;
 8005342:	4b19      	ldr	r3, [pc, #100]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005344:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005348:	819a      	strh	r2, [r3, #12]
			break;
 800534a:	e019      	b.n	8005380 <sFLASH_GetInfo+0x13c>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 800534c:	4b16      	ldr	r3, [pc, #88]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 800534e:	4a12      	ldr	r2, [pc, #72]	@ (8005398 <sFLASH_GetInfo+0x154>)
 8005350:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8005352:	4b15      	ldr	r3, [pc, #84]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005354:	2201      	movs	r2, #1
 8005356:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8005358:	4b13      	ldr	r3, [pc, #76]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 800535a:	2201      	movs	r2, #1
 800535c:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 800535e:	4b12      	ldr	r3, [pc, #72]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005360:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005364:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8005366:	4b10      	ldr	r3, [pc, #64]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005368:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800536c:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 800536e:	4b0e      	ldr	r3, [pc, #56]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005370:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005374:	819a      	strh	r2, [r3, #12]
			break;
 8005376:	e003      	b.n	8005380 <sFLASH_GetInfo+0x13c>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8005378:	4b0b      	ldr	r3, [pc, #44]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
			break;
 800537e:	bf00      	nop
	}

	return flash_info;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a09      	ldr	r2, [pc, #36]	@ (80053a8 <sFLASH_GetInfo+0x164>)
 8005384:	461c      	mov	r4, r3
 8005386:	4613      	mov	r3, r2
 8005388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800538a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	bd90      	pop	{r4, r7, pc}
 8005396:	bf00      	nop
 8005398:	00c22016 	.word	0x00c22016
 800539c:	00ef4018 	.word	0x00ef4018
 80053a0:	00ef4015 	.word	0x00ef4015
 80053a4:	ff10bfeb 	.word	0xff10bfeb
 80053a8:	20000bc8 	.word	0x20000bc8
 80053ac:	00ef4016 	.word	0x00ef4016
 80053b0:	00ef4017 	.word	0x00ef4017

080053b4 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 80053b8:	4b02      	ldr	r3, [pc, #8]	@ (80053c4 <sFLASH_CS_LOW+0x10>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4798      	blx	r3

}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000bb4 	.word	0x20000bb4

080053c8 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 80053cc:	4b02      	ldr	r3, [pc, #8]	@ (80053d8 <sFLASH_CS_HIGH+0x10>)
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	4798      	blx	r3
}
 80053d2:	bf00      	nop
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000bb4 	.word	0x20000bb4

080053dc <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 80053e4:	f000 f9b4 	bl	8005750 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80053e8:	f7ff ffe4 	bl	80053b4 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 80053ec:	2020      	movs	r0, #32
 80053ee:	f000 f99f 	bl	8005730 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 f999 	bl	8005730 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	0a1b      	lsrs	r3, r3, #8
 8005402:	b2db      	uxtb	r3, r3
 8005404:	4618      	mov	r0, r3
 8005406:	f000 f993 	bl	8005730 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f98e 	bl	8005730 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8005414:	f7ff ffd8 	bl	80053c8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8005418:	f000 f9a5 	bl	8005766 <sFLASH_WaitForWriteEnd>
}
 800541c:	bf00      	nop
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	4613      	mov	r3, r2
 8005430:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8005432:	f000 f98d 	bl	8005750 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8005436:	f7ff ffbd 	bl	80053b4 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 800543a:	2002      	movs	r0, #2
 800543c:	f000 f978 	bl	8005730 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	0c1b      	lsrs	r3, r3, #16
 8005444:	b2db      	uxtb	r3, r3
 8005446:	4618      	mov	r0, r3
 8005448:	f000 f972 	bl	8005730 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	0a1b      	lsrs	r3, r3, #8
 8005450:	b2db      	uxtb	r3, r3
 8005452:	4618      	mov	r0, r3
 8005454:	f000 f96c 	bl	8005730 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	4618      	mov	r0, r3
 800545e:	f000 f967 	bl	8005730 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8005462:	e007      	b.n	8005474 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f961 	bl	8005730 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3301      	adds	r3, #1
 8005472:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8005474:	88fb      	ldrh	r3, [r7, #6]
 8005476:	1e5a      	subs	r2, r3, #1
 8005478:	80fa      	strh	r2, [r7, #6]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f2      	bne.n	8005464 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800547e:	f7ff ffa3 	bl	80053c8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8005482:	f000 f970 	bl	8005766 <sFLASH_WaitForWriteEnd>
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b086      	sub	sp, #24
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	4613      	mov	r3, r2
 800549a:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	75fb      	strb	r3, [r7, #23]
 80054a0:	2300      	movs	r3, #0
 80054a2:	75bb      	strb	r3, [r7, #22]
 80054a4:	2300      	movs	r3, #0
 80054a6:	757b      	strb	r3, [r7, #21]
 80054a8:	2300      	movs	r3, #0
 80054aa:	753b      	strb	r3, [r7, #20]
 80054ac:	2300      	movs	r3, #0
 80054ae:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 80054b4:	7d7b      	ldrb	r3, [r7, #21]
 80054b6:	425b      	negs	r3, r3
 80054b8:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	b29b      	uxth	r3, r3
 80054c0:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 80054c6:	7d7b      	ldrb	r3, [r7, #21]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d124      	bne.n	8005516 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d114      	bne.n	80054fc <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	461a      	mov	r2, r3
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff ffa3 	bl	8005424 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 80054de:	e07b      	b.n	80055d8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80054e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7ff ff9c 	bl	8005424 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054f2:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054fa:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
 80054fe:	1e5a      	subs	r2, r3, #1
 8005500:	75fa      	strb	r2, [r7, #23]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1ec      	bne.n	80054e0 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8005506:	7dbb      	ldrb	r3, [r7, #22]
 8005508:	b29b      	uxth	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff ff88 	bl	8005424 <sFLASH_WritePage>
}
 8005514:	e060      	b.n	80055d8 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8005516:	7dfb      	ldrb	r3, [r7, #23]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d125      	bne.n	8005568 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 800551c:	7dba      	ldrb	r2, [r7, #22]
 800551e:	7d3b      	ldrb	r3, [r7, #20]
 8005520:	429a      	cmp	r2, r3
 8005522:	d91a      	bls.n	800555a <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 8005524:	7dba      	ldrb	r2, [r7, #22]
 8005526:	7d3b      	ldrb	r3, [r7, #20]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 800552c:	7d3b      	ldrb	r3, [r7, #20]
 800552e:	b29b      	uxth	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7ff ff75 	bl	8005424 <sFLASH_WritePage>
        WriteAddr +=  count;
 800553a:	7d3b      	ldrb	r3, [r7, #20]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	4413      	add	r3, r2
 8005540:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8005542:	7d3b      	ldrb	r3, [r7, #20]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 800554a:	7cfb      	ldrb	r3, [r7, #19]
 800554c:	b29b      	uxth	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff ff66 	bl	8005424 <sFLASH_WritePage>
}
 8005558:	e03e      	b.n	80055d8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	461a      	mov	r2, r3
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff ff5f 	bl	8005424 <sFLASH_WritePage>
}
 8005566:	e037      	b.n	80055d8 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8005568:	7d3b      	ldrb	r3, [r7, #20]
 800556a:	b29b      	uxth	r3, r3
 800556c:	88fa      	ldrh	r2, [r7, #6]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	b29b      	uxth	r3, r3
 8005578:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 800557e:	7d3b      	ldrb	r3, [r7, #20]
 8005580:	b29b      	uxth	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7ff ff4c 	bl	8005424 <sFLASH_WritePage>
      WriteAddr +=  count;
 800558c:	7d3b      	ldrb	r3, [r7, #20]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	4413      	add	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 8005594:	7d3b      	ldrb	r3, [r7, #20]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 800559c:	e00d      	b.n	80055ba <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 800559e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff ff3d 	bl	8005424 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055b0:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055b8:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
 80055bc:	1e5a      	subs	r2, r3, #1
 80055be:	75fa      	strb	r2, [r7, #23]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1ec      	bne.n	800559e <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 80055c4:	7dbb      	ldrb	r3, [r7, #22]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d006      	beq.n	80055d8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80055ca:	7dbb      	ldrb	r3, [r7, #22]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff ff26 	bl	8005424 <sFLASH_WritePage>
}
 80055d8:	bf00      	nop
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
//#include "cmsis_os.h"
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80055ee:	f7ff fee1 	bl	80053b4 <sFLASH_CS_LOW>

  if (NumByteToRead > 16){
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d91c      	bls.n	8005632 <sFLASH_ReadBuffer+0x52>
	  //Send "Fast read" inctruction
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 80055f8:	200b      	movs	r0, #11
 80055fa:	f000 f899 	bl	8005730 <sFLASH_SendByte>
	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	b2db      	uxtb	r3, r3
 8005604:	4618      	mov	r0, r3
 8005606:	f000 f893 	bl	8005730 <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	0a1b      	lsrs	r3, r3, #8
 800560e:	b2db      	uxtb	r3, r3
 8005610:	4618      	mov	r0, r3
 8005612:	f000 f88d 	bl	8005730 <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f888 	bl	8005730 <sFLASH_SendByte>

	  sFLASH_SendByte(0x00);
 8005620:	2000      	movs	r0, #0
 8005622:	f000 f885 	bl	8005730 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	4619      	mov	r1, r3
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f86e 	bl	800570c <sFLASH_SPI_ReadBuffer>
 8005630:	e022      	b.n	8005678 <sFLASH_ReadBuffer+0x98>


  }else{
	  /*!< Send "Read from Memory " instruction */
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8005632:	2003      	movs	r0, #3
 8005634:	f000 f87c 	bl	8005730 <sFLASH_SendByte>

	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	0c1b      	lsrs	r3, r3, #16
 800563c:	b2db      	uxtb	r3, r3
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f876 	bl	8005730 <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	0a1b      	lsrs	r3, r3, #8
 8005648:	b2db      	uxtb	r3, r3
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f870 	bl	8005730 <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	4618      	mov	r0, r3
 8005656:	f000 f86b 	bl	8005730 <sFLASH_SendByte>

	  while (NumByteToRead--) /*!< while there is data to be read */
 800565a:	e008      	b.n	800566e <sFLASH_ReadBuffer+0x8e>
	  {
		/*!< Read a byte from the FLASH */
		//*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
		  *pBuffer = sFLASH_ReadByte();
 800565c:	f000 f846 	bl	80056ec <sFLASH_ReadByte>
 8005660:	4603      	mov	r3, r0
 8005662:	461a      	mov	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	701a      	strb	r2, [r3, #0]
		/*!< Point to the next location where the byte read will be saved */
		pBuffer++;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3301      	adds	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
	  while (NumByteToRead--) /*!< while there is data to be read */
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	1e5a      	subs	r2, r3, #1
 8005672:	80fa      	strh	r2, [r7, #6]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f1      	bne.n	800565c <sFLASH_ReadBuffer+0x7c>
	  }
  }
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8005678:	f7ff fea6 	bl	80053c8 <sFLASH_CS_HIGH>
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	2300      	movs	r3, #0
 8005694:	607b      	str	r3, [r7, #4]
 8005696:	2300      	movs	r3, #0
 8005698:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800569a:	f7ff fe8b 	bl	80053b4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 800569e:	f7ff fe93 	bl	80053c8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80056a2:	f7ff fe87 	bl	80053b4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80056a6:	f7ff fe8f 	bl	80053c8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80056aa:	f7ff fe83 	bl	80053b4 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80056ae:	209f      	movs	r0, #159	@ 0x9f
 80056b0:	f000 f83e 	bl	8005730 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 80056b4:	f000 f81a 	bl	80056ec <sFLASH_ReadByte>
 80056b8:	4603      	mov	r3, r0
 80056ba:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 80056bc:	f000 f816 	bl	80056ec <sFLASH_ReadByte>
 80056c0:	4603      	mov	r3, r0
 80056c2:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 80056c4:	f000 f812 	bl	80056ec <sFLASH_ReadByte>
 80056c8:	4603      	mov	r3, r0
 80056ca:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80056cc:	f7ff fe7c 	bl	80053c8 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	041a      	lsls	r2, r3, #16
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	4313      	orrs	r3, r2
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]

  return Temp;
 80056e0:	68fb      	ldr	r3, [r7, #12]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
	uint8_t byte;
	flash_conf.receive_buffer(&byte, 1);
 80056f2:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <sFLASH_ReadByte+0x1c>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	1dfa      	adds	r2, r7, #7
 80056f8:	2101      	movs	r1, #1
 80056fa:	4610      	mov	r0, r2
 80056fc:	4798      	blx	r3
	return byte;
 80056fe:	79fb      	ldrb	r3, [r7, #7]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20000bb4 	.word	0x20000bb4

0800570c <sFLASH_SPI_ReadBuffer>:


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	807b      	strh	r3, [r7, #2]
	flash_conf.receive_buffer(buffer, size);
 8005718:	4b04      	ldr	r3, [pc, #16]	@ (800572c <sFLASH_SPI_ReadBuffer+0x20>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	887a      	ldrh	r2, [r7, #2]
 800571e:	4611      	mov	r1, r2
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4798      	blx	r3
}
 8005724:	bf00      	nop
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20000bb4 	.word	0x20000bb4

08005730 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 800573a:	4b04      	ldr	r3, [pc, #16]	@ (800574c <sFLASH_SendByte+0x1c>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	79fa      	ldrb	r2, [r7, #7]
 8005740:	4610      	mov	r0, r2
 8005742:	4798      	blx	r3
}
 8005744:	bf00      	nop
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000bb4 	.word	0x20000bb4

08005750 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8005754:	f7ff fe2e 	bl	80053b4 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8005758:	2006      	movs	r0, #6
 800575a:	f7ff ffe9 	bl	8005730 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800575e:	f7ff fe33 	bl	80053c8 <sFLASH_CS_HIGH>
}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}

08005766 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8005770:	f7ff fe20 	bl	80053b4 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8005774:	2005      	movs	r0, #5
 8005776:	f7ff ffdb 	bl	8005730 <sFLASH_SendByte>

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 800577a:	2005      	movs	r0, #5
 800577c:	f7ff ffd8 	bl	8005730 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8005780:	f7ff ffb4 	bl	80056ec <sFLASH_ReadByte>
 8005784:	4603      	mov	r3, r0
 8005786:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f3      	bne.n	800577a <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8005792:	f7ff fe19 	bl	80053c8 <sFLASH_CS_HIGH>
}
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057a4:	4b0e      	ldr	r3, [pc, #56]	@ (80057e0 <HAL_Init+0x40>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a0d      	ldr	r2, [pc, #52]	@ (80057e0 <HAL_Init+0x40>)
 80057aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057b0:	4b0b      	ldr	r3, [pc, #44]	@ (80057e0 <HAL_Init+0x40>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a0a      	ldr	r2, [pc, #40]	@ (80057e0 <HAL_Init+0x40>)
 80057b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057bc:	4b08      	ldr	r3, [pc, #32]	@ (80057e0 <HAL_Init+0x40>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a07      	ldr	r2, [pc, #28]	@ (80057e0 <HAL_Init+0x40>)
 80057c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057c8:	2003      	movs	r0, #3
 80057ca:	f000 f913 	bl	80059f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057ce:	200f      	movs	r0, #15
 80057d0:	f7fc ff08 	bl	80025e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057d4:	f7fc feda 	bl	800258c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40023c00 	.word	0x40023c00

080057e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057e8:	4b06      	ldr	r3, [pc, #24]	@ (8005804 <HAL_IncTick+0x20>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <HAL_IncTick+0x24>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4413      	add	r3, r2
 80057f4:	4a04      	ldr	r2, [pc, #16]	@ (8005808 <HAL_IncTick+0x24>)
 80057f6:	6013      	str	r3, [r2, #0]
}
 80057f8:	bf00      	nop
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000078 	.word	0x20000078
 8005808:	20000bd8 	.word	0x20000bd8

0800580c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  return uwTick;
 8005810:	4b03      	ldr	r3, [pc, #12]	@ (8005820 <HAL_GetTick+0x14>)
 8005812:	681b      	ldr	r3, [r3, #0]
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000bd8 	.word	0x20000bd8

08005824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800582c:	f7ff ffee 	bl	800580c <HAL_GetTick>
 8005830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800583c:	d005      	beq.n	800584a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800583e:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <HAL_Delay+0x44>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800584a:	bf00      	nop
 800584c:	f7ff ffde 	bl	800580c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	429a      	cmp	r2, r3
 800585a:	d8f7      	bhi.n	800584c <HAL_Delay+0x28>
  {
  }
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000078 	.word	0x20000078

0800586c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800587c:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <__NVIC_SetPriorityGrouping+0x44>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005888:	4013      	ands	r3, r2
 800588a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005894:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800589c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800589e:	4a04      	ldr	r2, [pc, #16]	@ (80058b0 <__NVIC_SetPriorityGrouping+0x44>)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	60d3      	str	r3, [r2, #12]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	e000ed00 	.word	0xe000ed00

080058b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058b8:	4b04      	ldr	r3, [pc, #16]	@ (80058cc <__NVIC_GetPriorityGrouping+0x18>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	0a1b      	lsrs	r3, r3, #8
 80058be:	f003 0307 	and.w	r3, r3, #7
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	e000ed00 	.word	0xe000ed00

080058d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	db0b      	blt.n	80058fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	f003 021f 	and.w	r2, r3, #31
 80058e8:	4907      	ldr	r1, [pc, #28]	@ (8005908 <__NVIC_EnableIRQ+0x38>)
 80058ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	2001      	movs	r0, #1
 80058f2:	fa00 f202 	lsl.w	r2, r0, r2
 80058f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	e000e100 	.word	0xe000e100

0800590c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	6039      	str	r1, [r7, #0]
 8005916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800591c:	2b00      	cmp	r3, #0
 800591e:	db0a      	blt.n	8005936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	b2da      	uxtb	r2, r3
 8005924:	490c      	ldr	r1, [pc, #48]	@ (8005958 <__NVIC_SetPriority+0x4c>)
 8005926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592a:	0112      	lsls	r2, r2, #4
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	440b      	add	r3, r1
 8005930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005934:	e00a      	b.n	800594c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	b2da      	uxtb	r2, r3
 800593a:	4908      	ldr	r1, [pc, #32]	@ (800595c <__NVIC_SetPriority+0x50>)
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	3b04      	subs	r3, #4
 8005944:	0112      	lsls	r2, r2, #4
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	440b      	add	r3, r1
 800594a:	761a      	strb	r2, [r3, #24]
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	e000e100 	.word	0xe000e100
 800595c:	e000ed00 	.word	0xe000ed00

08005960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005960:	b480      	push	{r7}
 8005962:	b089      	sub	sp, #36	@ 0x24
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f1c3 0307 	rsb	r3, r3, #7
 800597a:	2b04      	cmp	r3, #4
 800597c:	bf28      	it	cs
 800597e:	2304      	movcs	r3, #4
 8005980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3304      	adds	r3, #4
 8005986:	2b06      	cmp	r3, #6
 8005988:	d902      	bls.n	8005990 <NVIC_EncodePriority+0x30>
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3b03      	subs	r3, #3
 800598e:	e000      	b.n	8005992 <NVIC_EncodePriority+0x32>
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	43da      	mvns	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	401a      	ands	r2, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	43d9      	mvns	r1, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059b8:	4313      	orrs	r3, r2
         );
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3724      	adds	r7, #36	@ 0x24
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80059cc:	f3bf 8f4f 	dsb	sy
}
 80059d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80059d2:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <__NVIC_SystemReset+0x24>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80059da:	4904      	ldr	r1, [pc, #16]	@ (80059ec <__NVIC_SystemReset+0x24>)
 80059dc:	4b04      	ldr	r3, [pc, #16]	@ (80059f0 <__NVIC_SystemReset+0x28>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80059e2:	f3bf 8f4f 	dsb	sy
}
 80059e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80059e8:	bf00      	nop
 80059ea:	e7fd      	b.n	80059e8 <__NVIC_SystemReset+0x20>
 80059ec:	e000ed00 	.word	0xe000ed00
 80059f0:	05fa0004 	.word	0x05fa0004

080059f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7ff ff35 	bl	800586c <__NVIC_SetPriorityGrouping>
}
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b086      	sub	sp, #24
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	4603      	mov	r3, r0
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a1c:	f7ff ff4a 	bl	80058b4 <__NVIC_GetPriorityGrouping>
 8005a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	6978      	ldr	r0, [r7, #20]
 8005a28:	f7ff ff9a 	bl	8005960 <NVIC_EncodePriority>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a32:	4611      	mov	r1, r2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff ff69 	bl	800590c <__NVIC_SetPriority>
}
 8005a3a:	bf00      	nop
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	4603      	mov	r3, r0
 8005a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff ff3d 	bl	80058d0 <__NVIC_EnableIRQ>
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005a62:	f7ff ffb1 	bl	80059c8 <__NVIC_SystemReset>
	...

08005a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b089      	sub	sp, #36	@ 0x24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	e159      	b.n	8005d38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a84:	2201      	movs	r2, #1
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4013      	ands	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	f040 8148 	bne.w	8005d32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d005      	beq.n	8005aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d130      	bne.n	8005b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005af0:	2201      	movs	r2, #1
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	43db      	mvns	r3, r3
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4013      	ands	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f003 0201 	and.w	r2, r3, #1
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d017      	beq.n	8005b58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	2203      	movs	r2, #3
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d123      	bne.n	8005bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	08da      	lsrs	r2, r3, #3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3208      	adds	r2, #8
 8005b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	220f      	movs	r2, #15
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	43db      	mvns	r3, r3
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	4013      	ands	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	08da      	lsrs	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3208      	adds	r2, #8
 8005ba6:	69b9      	ldr	r1, [r7, #24]
 8005ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 0203 	and.w	r2, r3, #3
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80a2 	beq.w	8005d32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	4b57      	ldr	r3, [pc, #348]	@ (8005d50 <HAL_GPIO_Init+0x2e8>)
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf6:	4a56      	ldr	r2, [pc, #344]	@ (8005d50 <HAL_GPIO_Init+0x2e8>)
 8005bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bfe:	4b54      	ldr	r3, [pc, #336]	@ (8005d50 <HAL_GPIO_Init+0x2e8>)
 8005c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c0a:	4a52      	ldr	r2, [pc, #328]	@ (8005d54 <HAL_GPIO_Init+0x2ec>)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	089b      	lsrs	r3, r3, #2
 8005c10:	3302      	adds	r3, #2
 8005c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	220f      	movs	r2, #15
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	43db      	mvns	r3, r3
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a49      	ldr	r2, [pc, #292]	@ (8005d58 <HAL_GPIO_Init+0x2f0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d019      	beq.n	8005c6a <HAL_GPIO_Init+0x202>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a48      	ldr	r2, [pc, #288]	@ (8005d5c <HAL_GPIO_Init+0x2f4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d013      	beq.n	8005c66 <HAL_GPIO_Init+0x1fe>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a47      	ldr	r2, [pc, #284]	@ (8005d60 <HAL_GPIO_Init+0x2f8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00d      	beq.n	8005c62 <HAL_GPIO_Init+0x1fa>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a46      	ldr	r2, [pc, #280]	@ (8005d64 <HAL_GPIO_Init+0x2fc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <HAL_GPIO_Init+0x1f6>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a45      	ldr	r2, [pc, #276]	@ (8005d68 <HAL_GPIO_Init+0x300>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d101      	bne.n	8005c5a <HAL_GPIO_Init+0x1f2>
 8005c56:	2304      	movs	r3, #4
 8005c58:	e008      	b.n	8005c6c <HAL_GPIO_Init+0x204>
 8005c5a:	2307      	movs	r3, #7
 8005c5c:	e006      	b.n	8005c6c <HAL_GPIO_Init+0x204>
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e004      	b.n	8005c6c <HAL_GPIO_Init+0x204>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e002      	b.n	8005c6c <HAL_GPIO_Init+0x204>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <HAL_GPIO_Init+0x204>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	f002 0203 	and.w	r2, r2, #3
 8005c72:	0092      	lsls	r2, r2, #2
 8005c74:	4093      	lsls	r3, r2
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c7c:	4935      	ldr	r1, [pc, #212]	@ (8005d54 <HAL_GPIO_Init+0x2ec>)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	089b      	lsrs	r3, r3, #2
 8005c82:	3302      	adds	r3, #2
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c8a:	4b38      	ldr	r3, [pc, #224]	@ (8005d6c <HAL_GPIO_Init+0x304>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	43db      	mvns	r3, r3
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	4013      	ands	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cae:	4a2f      	ldr	r2, [pc, #188]	@ (8005d6c <HAL_GPIO_Init+0x304>)
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8005d6c <HAL_GPIO_Init+0x304>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cd8:	4a24      	ldr	r2, [pc, #144]	@ (8005d6c <HAL_GPIO_Init+0x304>)
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cde:	4b23      	ldr	r3, [pc, #140]	@ (8005d6c <HAL_GPIO_Init+0x304>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	43db      	mvns	r3, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	4013      	ands	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d02:	4a1a      	ldr	r2, [pc, #104]	@ (8005d6c <HAL_GPIO_Init+0x304>)
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d08:	4b18      	ldr	r3, [pc, #96]	@ (8005d6c <HAL_GPIO_Init+0x304>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	43db      	mvns	r3, r3
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4013      	ands	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8005d6c <HAL_GPIO_Init+0x304>)
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	3301      	adds	r3, #1
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b0f      	cmp	r3, #15
 8005d3c:	f67f aea2 	bls.w	8005a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d40:	bf00      	nop
 8005d42:	bf00      	nop
 8005d44:	3724      	adds	r7, #36	@ 0x24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40023800 	.word	0x40023800
 8005d54:	40013800 	.word	0x40013800
 8005d58:	40020000 	.word	0x40020000
 8005d5c:	40020400 	.word	0x40020400
 8005d60:	40020800 	.word	0x40020800
 8005d64:	40020c00 	.word	0x40020c00
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	40013c00 	.word	0x40013c00

08005d70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	e0bb      	b.n	8005f04 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	f040 80ab 	bne.w	8005efe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005da8:	4a5c      	ldr	r2, [pc, #368]	@ (8005f1c <HAL_GPIO_DeInit+0x1ac>)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	089b      	lsrs	r3, r3, #2
 8005dae:	3302      	adds	r3, #2
 8005db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	220f      	movs	r2, #15
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a54      	ldr	r2, [pc, #336]	@ (8005f20 <HAL_GPIO_DeInit+0x1b0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d019      	beq.n	8005e06 <HAL_GPIO_DeInit+0x96>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a53      	ldr	r2, [pc, #332]	@ (8005f24 <HAL_GPIO_DeInit+0x1b4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <HAL_GPIO_DeInit+0x92>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a52      	ldr	r2, [pc, #328]	@ (8005f28 <HAL_GPIO_DeInit+0x1b8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00d      	beq.n	8005dfe <HAL_GPIO_DeInit+0x8e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a51      	ldr	r2, [pc, #324]	@ (8005f2c <HAL_GPIO_DeInit+0x1bc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <HAL_GPIO_DeInit+0x8a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a50      	ldr	r2, [pc, #320]	@ (8005f30 <HAL_GPIO_DeInit+0x1c0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <HAL_GPIO_DeInit+0x86>
 8005df2:	2304      	movs	r3, #4
 8005df4:	e008      	b.n	8005e08 <HAL_GPIO_DeInit+0x98>
 8005df6:	2307      	movs	r3, #7
 8005df8:	e006      	b.n	8005e08 <HAL_GPIO_DeInit+0x98>
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e004      	b.n	8005e08 <HAL_GPIO_DeInit+0x98>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e002      	b.n	8005e08 <HAL_GPIO_DeInit+0x98>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <HAL_GPIO_DeInit+0x98>
 8005e06:	2300      	movs	r3, #0
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	f002 0203 	and.w	r2, r2, #3
 8005e0e:	0092      	lsls	r2, r2, #2
 8005e10:	4093      	lsls	r3, r2
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d132      	bne.n	8005e7e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e18:	4b46      	ldr	r3, [pc, #280]	@ (8005f34 <HAL_GPIO_DeInit+0x1c4>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	43db      	mvns	r3, r3
 8005e20:	4944      	ldr	r1, [pc, #272]	@ (8005f34 <HAL_GPIO_DeInit+0x1c4>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e26:	4b43      	ldr	r3, [pc, #268]	@ (8005f34 <HAL_GPIO_DeInit+0x1c4>)
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	4941      	ldr	r1, [pc, #260]	@ (8005f34 <HAL_GPIO_DeInit+0x1c4>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005e34:	4b3f      	ldr	r3, [pc, #252]	@ (8005f34 <HAL_GPIO_DeInit+0x1c4>)
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	493d      	ldr	r1, [pc, #244]	@ (8005f34 <HAL_GPIO_DeInit+0x1c4>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005e42:	4b3c      	ldr	r3, [pc, #240]	@ (8005f34 <HAL_GPIO_DeInit+0x1c4>)
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	493a      	ldr	r1, [pc, #232]	@ (8005f34 <HAL_GPIO_DeInit+0x1c4>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	220f      	movs	r2, #15
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005e60:	4a2e      	ldr	r2, [pc, #184]	@ (8005f1c <HAL_GPIO_DeInit+0x1ac>)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	089b      	lsrs	r3, r3, #2
 8005e66:	3302      	adds	r3, #2
 8005e68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	43da      	mvns	r2, r3
 8005e70:	482a      	ldr	r0, [pc, #168]	@ (8005f1c <HAL_GPIO_DeInit+0x1ac>)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	089b      	lsrs	r3, r3, #2
 8005e76:	400a      	ands	r2, r1
 8005e78:	3302      	adds	r3, #2
 8005e7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	2103      	movs	r1, #3
 8005e88:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	401a      	ands	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	08da      	lsrs	r2, r3, #3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3208      	adds	r2, #8
 8005e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	220f      	movs	r2, #15
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	08d2      	lsrs	r2, r2, #3
 8005eb4:	4019      	ands	r1, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3208      	adds	r2, #8
 8005eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	2103      	movs	r1, #3
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	401a      	ands	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	2101      	movs	r1, #1
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	401a      	ands	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	2103      	movs	r1, #3
 8005ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	401a      	ands	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	3301      	adds	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2b0f      	cmp	r3, #15
 8005f08:	f67f af40 	bls.w	8005d8c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40013800 	.word	0x40013800
 8005f20:	40020000 	.word	0x40020000
 8005f24:	40020400 	.word	0x40020400
 8005f28:	40020800 	.word	0x40020800
 8005f2c:	40020c00 	.word	0x40020c00
 8005f30:	40021000 	.word	0x40021000
 8005f34:	40013c00 	.word	0x40013c00

08005f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	887b      	ldrh	r3, [r7, #2]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f50:	2301      	movs	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]
 8005f54:	e001      	b.n	8005f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
 8005f74:	4613      	mov	r3, r2
 8005f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f78:	787b      	ldrb	r3, [r7, #1]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f7e:	887a      	ldrh	r2, [r7, #2]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f84:	e003      	b.n	8005f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f86:	887b      	ldrh	r3, [r7, #2]
 8005f88:	041a      	lsls	r2, r3, #16
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	619a      	str	r2, [r3, #24]
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e12b      	b.n	8006206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fc f812 	bl	8001fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2224      	movs	r2, #36	@ 0x24
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0201 	bic.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006000:	f001 fa38 	bl	8007474 <HAL_RCC_GetPCLK1Freq>
 8006004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	4a81      	ldr	r2, [pc, #516]	@ (8006210 <HAL_I2C_Init+0x274>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d807      	bhi.n	8006020 <HAL_I2C_Init+0x84>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4a80      	ldr	r2, [pc, #512]	@ (8006214 <HAL_I2C_Init+0x278>)
 8006014:	4293      	cmp	r3, r2
 8006016:	bf94      	ite	ls
 8006018:	2301      	movls	r3, #1
 800601a:	2300      	movhi	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	e006      	b.n	800602e <HAL_I2C_Init+0x92>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4a7d      	ldr	r2, [pc, #500]	@ (8006218 <HAL_I2C_Init+0x27c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	bf94      	ite	ls
 8006028:	2301      	movls	r3, #1
 800602a:	2300      	movhi	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e0e7      	b.n	8006206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a78      	ldr	r2, [pc, #480]	@ (800621c <HAL_I2C_Init+0x280>)
 800603a:	fba2 2303 	umull	r2, r3, r2, r3
 800603e:	0c9b      	lsrs	r3, r3, #18
 8006040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	430a      	orrs	r2, r1
 8006054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4a6a      	ldr	r2, [pc, #424]	@ (8006210 <HAL_I2C_Init+0x274>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d802      	bhi.n	8006070 <HAL_I2C_Init+0xd4>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	3301      	adds	r3, #1
 800606e:	e009      	b.n	8006084 <HAL_I2C_Init+0xe8>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006076:	fb02 f303 	mul.w	r3, r2, r3
 800607a:	4a69      	ldr	r2, [pc, #420]	@ (8006220 <HAL_I2C_Init+0x284>)
 800607c:	fba2 2303 	umull	r2, r3, r2, r3
 8006080:	099b      	lsrs	r3, r3, #6
 8006082:	3301      	adds	r3, #1
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6812      	ldr	r2, [r2, #0]
 8006088:	430b      	orrs	r3, r1
 800608a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006096:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	495c      	ldr	r1, [pc, #368]	@ (8006210 <HAL_I2C_Init+0x274>)
 80060a0:	428b      	cmp	r3, r1
 80060a2:	d819      	bhi.n	80060d8 <HAL_I2C_Init+0x13c>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1e59      	subs	r1, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80060b2:	1c59      	adds	r1, r3, #1
 80060b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80060b8:	400b      	ands	r3, r1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <HAL_I2C_Init+0x138>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1e59      	subs	r1, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80060cc:	3301      	adds	r3, #1
 80060ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d2:	e051      	b.n	8006178 <HAL_I2C_Init+0x1dc>
 80060d4:	2304      	movs	r3, #4
 80060d6:	e04f      	b.n	8006178 <HAL_I2C_Init+0x1dc>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d111      	bne.n	8006104 <HAL_I2C_Init+0x168>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	1e58      	subs	r0, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6859      	ldr	r1, [r3, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	440b      	add	r3, r1
 80060ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80060f2:	3301      	adds	r3, #1
 80060f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bf0c      	ite	eq
 80060fc:	2301      	moveq	r3, #1
 80060fe:	2300      	movne	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	e012      	b.n	800612a <HAL_I2C_Init+0x18e>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1e58      	subs	r0, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6859      	ldr	r1, [r3, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	0099      	lsls	r1, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	fbb0 f3f3 	udiv	r3, r0, r3
 800611a:	3301      	adds	r3, #1
 800611c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006120:	2b00      	cmp	r3, #0
 8006122:	bf0c      	ite	eq
 8006124:	2301      	moveq	r3, #1
 8006126:	2300      	movne	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <HAL_I2C_Init+0x196>
 800612e:	2301      	movs	r3, #1
 8006130:	e022      	b.n	8006178 <HAL_I2C_Init+0x1dc>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10e      	bne.n	8006158 <HAL_I2C_Init+0x1bc>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	1e58      	subs	r0, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6859      	ldr	r1, [r3, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	440b      	add	r3, r1
 8006148:	fbb0 f3f3 	udiv	r3, r0, r3
 800614c:	3301      	adds	r3, #1
 800614e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006156:	e00f      	b.n	8006178 <HAL_I2C_Init+0x1dc>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	1e58      	subs	r0, r3, #1
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6859      	ldr	r1, [r3, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	0099      	lsls	r1, r3, #2
 8006168:	440b      	add	r3, r1
 800616a:	fbb0 f3f3 	udiv	r3, r0, r3
 800616e:	3301      	adds	r3, #1
 8006170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006174:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	6809      	ldr	r1, [r1, #0]
 800617c:	4313      	orrs	r3, r2
 800617e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80061a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6911      	ldr	r1, [r2, #16]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	68d2      	ldr	r2, [r2, #12]
 80061b2:	4311      	orrs	r1, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6812      	ldr	r2, [r2, #0]
 80061b8:	430b      	orrs	r3, r1
 80061ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695a      	ldr	r2, [r3, #20]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	000186a0 	.word	0x000186a0
 8006214:	001e847f 	.word	0x001e847f
 8006218:	003d08ff 	.word	0x003d08ff
 800621c:	431bde83 	.word	0x431bde83
 8006220:	10624dd3 	.word	0x10624dd3

08006224 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e021      	b.n	800627a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2224      	movs	r2, #36	@ 0x24
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0201 	bic.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fb ff14 	bl	800207c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af02      	add	r7, sp, #8
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	607a      	str	r2, [r7, #4]
 800628e:	461a      	mov	r2, r3
 8006290:	460b      	mov	r3, r1
 8006292:	817b      	strh	r3, [r7, #10]
 8006294:	4613      	mov	r3, r2
 8006296:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006298:	f7ff fab8 	bl	800580c <HAL_GetTick>
 800629c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	f040 80e0 	bne.w	800646c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	2319      	movs	r3, #25
 80062b2:	2201      	movs	r2, #1
 80062b4:	4970      	ldr	r1, [pc, #448]	@ (8006478 <HAL_I2C_Master_Transmit+0x1f4>)
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fa92 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062c2:	2302      	movs	r3, #2
 80062c4:	e0d3      	b.n	800646e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_I2C_Master_Transmit+0x50>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e0cc      	b.n	800646e <HAL_I2C_Master_Transmit+0x1ea>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d007      	beq.n	80062fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0201 	orr.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2221      	movs	r2, #33	@ 0x21
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2210      	movs	r2, #16
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	893a      	ldrh	r2, [r7, #8]
 800632a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4a50      	ldr	r2, [pc, #320]	@ (800647c <HAL_I2C_Master_Transmit+0x1f8>)
 800633a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800633c:	8979      	ldrh	r1, [r7, #10]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	6a3a      	ldr	r2, [r7, #32]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f9ca 	bl	80066dc <I2C_MasterRequestWrite>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e08d      	b.n	800646e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006352:	2300      	movs	r3, #0
 8006354:	613b      	str	r3, [r7, #16]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	613b      	str	r3, [r7, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006368:	e066      	b.n	8006438 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	6a39      	ldr	r1, [r7, #32]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fb50 	bl	8006a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00d      	beq.n	8006396 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637e:	2b04      	cmp	r3, #4
 8006380:	d107      	bne.n	8006392 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006390:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e06b      	b.n	800646e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639a:	781a      	ldrb	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d11b      	bne.n	800640c <HAL_I2C_Master_Transmit+0x188>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d017      	beq.n	800640c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	6a39      	ldr	r1, [r7, #32]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fb47 	bl	8006aa4 <I2C_WaitOnBTFFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00d      	beq.n	8006438 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006420:	2b04      	cmp	r3, #4
 8006422:	d107      	bne.n	8006434 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006432:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e01a      	b.n	800646e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800643c:	2b00      	cmp	r3, #0
 800643e:	d194      	bne.n	800636a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800644e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	e000      	b.n	800646e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800646c:	2302      	movs	r3, #2
  }
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	00100002 	.word	0x00100002
 800647c:	ffff0000 	.word	0xffff0000

08006480 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08a      	sub	sp, #40	@ 0x28
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	460b      	mov	r3, r1
 800648e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006490:	f7ff f9bc 	bl	800580c <HAL_GetTick>
 8006494:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b20      	cmp	r3, #32
 80064a4:	f040 8111 	bne.w	80066ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	2319      	movs	r3, #25
 80064ae:	2201      	movs	r2, #1
 80064b0:	4988      	ldr	r1, [pc, #544]	@ (80066d4 <HAL_I2C_IsDeviceReady+0x254>)
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 f994 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80064be:	2302      	movs	r3, #2
 80064c0:	e104      	b.n	80066cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_I2C_IsDeviceReady+0x50>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e0fd      	b.n	80066cc <HAL_I2C_IsDeviceReady+0x24c>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d007      	beq.n	80064f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0201 	orr.w	r2, r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006504:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2224      	movs	r2, #36	@ 0x24
 800650a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4a70      	ldr	r2, [pc, #448]	@ (80066d8 <HAL_I2C_IsDeviceReady+0x258>)
 8006518:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006528:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2200      	movs	r2, #0
 8006532:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 f952 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00d      	beq.n	800655e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006550:	d103      	bne.n	800655a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006558:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e0b6      	b.n	80066cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800655e:	897b      	ldrh	r3, [r7, #10]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	461a      	mov	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800656c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800656e:	f7ff f94d 	bl	800580c <HAL_GetTick>
 8006572:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b02      	cmp	r3, #2
 8006580:	bf0c      	ite	eq
 8006582:	2301      	moveq	r3, #1
 8006584:	2300      	movne	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006598:	bf0c      	ite	eq
 800659a:	2301      	moveq	r3, #1
 800659c:	2300      	movne	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80065a2:	e025      	b.n	80065f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065a4:	f7ff f932 	bl	800580c <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d302      	bcc.n	80065ba <HAL_I2C_IsDeviceReady+0x13a>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	22a0      	movs	r2, #160	@ 0xa0
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	bf0c      	ite	eq
 80065d0:	2301      	moveq	r3, #1
 80065d2:	2300      	movne	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80065fa:	d005      	beq.n	8006608 <HAL_I2C_IsDeviceReady+0x188>
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <HAL_I2C_IsDeviceReady+0x188>
 8006602:	7dbb      	ldrb	r3, [r7, #22]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0cd      	beq.n	80065a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b02      	cmp	r3, #2
 800661c:	d129      	bne.n	8006672 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800662c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800662e:	2300      	movs	r3, #0
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	2319      	movs	r3, #25
 800664a:	2201      	movs	r2, #1
 800664c:	4921      	ldr	r1, [pc, #132]	@ (80066d4 <HAL_I2C_IsDeviceReady+0x254>)
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f8c6 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e036      	b.n	80066cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	e02c      	b.n	80066cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006680:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800668a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	2319      	movs	r3, #25
 8006692:	2201      	movs	r2, #1
 8006694:	490f      	ldr	r1, [pc, #60]	@ (80066d4 <HAL_I2C_IsDeviceReady+0x254>)
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 f8a2 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e012      	b.n	80066cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	3301      	adds	r3, #1
 80066aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	f4ff af32 	bcc.w	800651a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80066ca:	2302      	movs	r3, #2
  }
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3720      	adds	r7, #32
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	00100002 	.word	0x00100002
 80066d8:	ffff0000 	.word	0xffff0000

080066dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	460b      	mov	r3, r1
 80066ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d006      	beq.n	8006706 <I2C_MasterRequestWrite+0x2a>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d003      	beq.n	8006706 <I2C_MasterRequestWrite+0x2a>
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006704:	d108      	bne.n	8006718 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	e00b      	b.n	8006730 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671c:	2b12      	cmp	r3, #18
 800671e:	d107      	bne.n	8006730 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800672e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f84f 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00d      	beq.n	8006764 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006756:	d103      	bne.n	8006760 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800675e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e035      	b.n	80067d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800676c:	d108      	bne.n	8006780 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800676e:	897b      	ldrh	r3, [r7, #10]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800677c:	611a      	str	r2, [r3, #16]
 800677e:	e01b      	b.n	80067b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006780:	897b      	ldrh	r3, [r7, #10]
 8006782:	11db      	asrs	r3, r3, #7
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f003 0306 	and.w	r3, r3, #6
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f063 030f 	orn	r3, r3, #15
 8006790:	b2da      	uxtb	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	490e      	ldr	r1, [pc, #56]	@ (80067d8 <I2C_MasterRequestWrite+0xfc>)
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f898 	bl	80068d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e010      	b.n	80067d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80067ae:	897b      	ldrh	r3, [r7, #10]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	4907      	ldr	r1, [pc, #28]	@ (80067dc <I2C_MasterRequestWrite+0x100>)
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f888 	bl	80068d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e000      	b.n	80067d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	00010008 	.word	0x00010008
 80067dc:	00010002 	.word	0x00010002

080067e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	4613      	mov	r3, r2
 80067ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067f0:	e048      	b.n	8006884 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067f8:	d044      	beq.n	8006884 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7ff f807 	bl	800580c <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <I2C_WaitOnFlagUntilTimeout+0x30>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d139      	bne.n	8006884 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	0c1b      	lsrs	r3, r3, #16
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b01      	cmp	r3, #1
 8006818:	d10d      	bne.n	8006836 <I2C_WaitOnFlagUntilTimeout+0x56>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	43da      	mvns	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	4013      	ands	r3, r2
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	bf0c      	ite	eq
 800682c:	2301      	moveq	r3, #1
 800682e:	2300      	movne	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	e00c      	b.n	8006850 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	43da      	mvns	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4013      	ands	r3, r2
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	429a      	cmp	r2, r3
 8006854:	d116      	bne.n	8006884 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006870:	f043 0220 	orr.w	r2, r3, #32
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e023      	b.n	80068cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	0c1b      	lsrs	r3, r3, #16
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b01      	cmp	r3, #1
 800688c:	d10d      	bne.n	80068aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	43da      	mvns	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4013      	ands	r3, r2
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	e00c      	b.n	80068c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	43da      	mvns	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	4013      	ands	r3, r2
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	bf0c      	ite	eq
 80068bc:	2301      	moveq	r3, #1
 80068be:	2300      	movne	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	79fb      	ldrb	r3, [r7, #7]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d093      	beq.n	80067f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068e2:	e071      	b.n	80069c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f2:	d123      	bne.n	800693c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006902:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800690c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006928:	f043 0204 	orr.w	r2, r3, #4
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e067      	b.n	8006a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006942:	d041      	beq.n	80069c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006944:	f7fe ff62 	bl	800580c <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d302      	bcc.n	800695a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d136      	bne.n	80069c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	0c1b      	lsrs	r3, r3, #16
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	d10c      	bne.n	800697e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	43da      	mvns	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4013      	ands	r3, r2
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	bf14      	ite	ne
 8006976:	2301      	movne	r3, #1
 8006978:	2300      	moveq	r3, #0
 800697a:	b2db      	uxtb	r3, r3
 800697c:	e00b      	b.n	8006996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	43da      	mvns	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4013      	ands	r3, r2
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	bf14      	ite	ne
 8006990:	2301      	movne	r3, #1
 8006992:	2300      	moveq	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d016      	beq.n	80069c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b4:	f043 0220 	orr.w	r2, r3, #32
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e021      	b.n	8006a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	0c1b      	lsrs	r3, r3, #16
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d10c      	bne.n	80069ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	43da      	mvns	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4013      	ands	r3, r2
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	bf14      	ite	ne
 80069e4:	2301      	movne	r3, #1
 80069e6:	2300      	moveq	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	e00b      	b.n	8006a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	43da      	mvns	r2, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4013      	ands	r3, r2
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	bf14      	ite	ne
 80069fe:	2301      	movne	r3, #1
 8006a00:	2300      	moveq	r3, #0
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f47f af6d 	bne.w	80068e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a20:	e034      	b.n	8006a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f886 	bl	8006b34 <I2C_IsAcknowledgeFailed>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e034      	b.n	8006a9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a38:	d028      	beq.n	8006a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3a:	f7fe fee7 	bl	800580c <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d11d      	bne.n	8006a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a5a:	2b80      	cmp	r3, #128	@ 0x80
 8006a5c:	d016      	beq.n	8006a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a78:	f043 0220 	orr.w	r2, r3, #32
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e007      	b.n	8006a9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a96:	2b80      	cmp	r3, #128	@ 0x80
 8006a98:	d1c3      	bne.n	8006a22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ab0:	e034      	b.n	8006b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 f83e 	bl	8006b34 <I2C_IsAcknowledgeFailed>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e034      	b.n	8006b2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ac8:	d028      	beq.n	8006b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aca:	f7fe fe9f 	bl	800580c <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d302      	bcc.n	8006ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d11d      	bne.n	8006b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d016      	beq.n	8006b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b08:	f043 0220 	orr.w	r2, r3, #32
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e007      	b.n	8006b2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d1c3      	bne.n	8006ab2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b4a:	d11b      	bne.n	8006b84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b70:	f043 0204 	orr.w	r2, r3, #4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
	...

08006b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e267      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d075      	beq.n	8006c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bb2:	4b88      	ldr	r3, [pc, #544]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 030c 	and.w	r3, r3, #12
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d00c      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bbe:	4b85      	ldr	r3, [pc, #532]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d112      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bca:	4b82      	ldr	r3, [pc, #520]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bd6:	d10b      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd8:	4b7e      	ldr	r3, [pc, #504]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d05b      	beq.n	8006c9c <HAL_RCC_OscConfig+0x108>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d157      	bne.n	8006c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e242      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf8:	d106      	bne.n	8006c08 <HAL_RCC_OscConfig+0x74>
 8006bfa:	4b76      	ldr	r3, [pc, #472]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a75      	ldr	r2, [pc, #468]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	e01d      	b.n	8006c44 <HAL_RCC_OscConfig+0xb0>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c10:	d10c      	bne.n	8006c2c <HAL_RCC_OscConfig+0x98>
 8006c12:	4b70      	ldr	r3, [pc, #448]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a6f      	ldr	r2, [pc, #444]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a6c      	ldr	r2, [pc, #432]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	e00b      	b.n	8006c44 <HAL_RCC_OscConfig+0xb0>
 8006c2c:	4b69      	ldr	r3, [pc, #420]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a68      	ldr	r2, [pc, #416]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	4b66      	ldr	r3, [pc, #408]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a65      	ldr	r2, [pc, #404]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d013      	beq.n	8006c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4c:	f7fe fdde 	bl	800580c <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c54:	f7fe fdda 	bl	800580c <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b64      	cmp	r3, #100	@ 0x64
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e207      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c66:	4b5b      	ldr	r3, [pc, #364]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f0      	beq.n	8006c54 <HAL_RCC_OscConfig+0xc0>
 8006c72:	e014      	b.n	8006c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c74:	f7fe fdca 	bl	800580c <HAL_GetTick>
 8006c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c7c:	f7fe fdc6 	bl	800580c <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b64      	cmp	r3, #100	@ 0x64
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e1f3      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c8e:	4b51      	ldr	r3, [pc, #324]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f0      	bne.n	8006c7c <HAL_RCC_OscConfig+0xe8>
 8006c9a:	e000      	b.n	8006c9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d063      	beq.n	8006d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006caa:	4b4a      	ldr	r3, [pc, #296]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 030c 	and.w	r3, r3, #12
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00b      	beq.n	8006cce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cb6:	4b47      	ldr	r3, [pc, #284]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d11c      	bne.n	8006cfc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cc2:	4b44      	ldr	r3, [pc, #272]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d116      	bne.n	8006cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cce:	4b41      	ldr	r3, [pc, #260]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x152>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d001      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e1c7      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	4937      	ldr	r1, [pc, #220]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cfa:	e03a      	b.n	8006d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d020      	beq.n	8006d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d04:	4b34      	ldr	r3, [pc, #208]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0a:	f7fe fd7f 	bl	800580c <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d12:	f7fe fd7b 	bl	800580c <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e1a8      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d24:	4b2b      	ldr	r3, [pc, #172]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d30:	4b28      	ldr	r3, [pc, #160]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	4925      	ldr	r1, [pc, #148]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	600b      	str	r3, [r1, #0]
 8006d44:	e015      	b.n	8006d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d46:	4b24      	ldr	r3, [pc, #144]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4c:	f7fe fd5e 	bl	800580c <HAL_GetTick>
 8006d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d54:	f7fe fd5a 	bl	800580c <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e187      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d66:	4b1b      	ldr	r3, [pc, #108]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f0      	bne.n	8006d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0308 	and.w	r3, r3, #8
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d036      	beq.n	8006dec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d016      	beq.n	8006db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d86:	4b15      	ldr	r3, [pc, #84]	@ (8006ddc <HAL_RCC_OscConfig+0x248>)
 8006d88:	2201      	movs	r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8c:	f7fe fd3e 	bl	800580c <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d94:	f7fe fd3a 	bl	800580c <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e167      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006da6:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd4 <HAL_RCC_OscConfig+0x240>)
 8006da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0f0      	beq.n	8006d94 <HAL_RCC_OscConfig+0x200>
 8006db2:	e01b      	b.n	8006dec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006db4:	4b09      	ldr	r3, [pc, #36]	@ (8006ddc <HAL_RCC_OscConfig+0x248>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dba:	f7fe fd27 	bl	800580c <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dc0:	e00e      	b.n	8006de0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dc2:	f7fe fd23 	bl	800580c <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d907      	bls.n	8006de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e150      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	42470000 	.word	0x42470000
 8006ddc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006de0:	4b88      	ldr	r3, [pc, #544]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1ea      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8097 	beq.w	8006f28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dfe:	4b81      	ldr	r3, [pc, #516]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10f      	bne.n	8006e2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	4b7d      	ldr	r3, [pc, #500]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e12:	4a7c      	ldr	r2, [pc, #496]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e1a:	4b7a      	ldr	r3, [pc, #488]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e22:	60bb      	str	r3, [r7, #8]
 8006e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e2a:	4b77      	ldr	r3, [pc, #476]	@ (8007008 <HAL_RCC_OscConfig+0x474>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d118      	bne.n	8006e68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e36:	4b74      	ldr	r3, [pc, #464]	@ (8007008 <HAL_RCC_OscConfig+0x474>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a73      	ldr	r2, [pc, #460]	@ (8007008 <HAL_RCC_OscConfig+0x474>)
 8006e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e42:	f7fe fce3 	bl	800580c <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4a:	f7fe fcdf 	bl	800580c <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e10c      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5c:	4b6a      	ldr	r3, [pc, #424]	@ (8007008 <HAL_RCC_OscConfig+0x474>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d106      	bne.n	8006e7e <HAL_RCC_OscConfig+0x2ea>
 8006e70:	4b64      	ldr	r3, [pc, #400]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e74:	4a63      	ldr	r2, [pc, #396]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e7c:	e01c      	b.n	8006eb8 <HAL_RCC_OscConfig+0x324>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2b05      	cmp	r3, #5
 8006e84:	d10c      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x30c>
 8006e86:	4b5f      	ldr	r3, [pc, #380]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006e8c:	f043 0304 	orr.w	r3, r3, #4
 8006e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e92:	4b5c      	ldr	r3, [pc, #368]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e96:	4a5b      	ldr	r2, [pc, #364]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e9e:	e00b      	b.n	8006eb8 <HAL_RCC_OscConfig+0x324>
 8006ea0:	4b58      	ldr	r3, [pc, #352]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea4:	4a57      	ldr	r2, [pc, #348]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006ea6:	f023 0301 	bic.w	r3, r3, #1
 8006eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eac:	4b55      	ldr	r3, [pc, #340]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb0:	4a54      	ldr	r2, [pc, #336]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	f023 0304 	bic.w	r3, r3, #4
 8006eb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d015      	beq.n	8006eec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec0:	f7fe fca4 	bl	800580c <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec6:	e00a      	b.n	8006ede <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec8:	f7fe fca0 	bl	800580c <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e0cb      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ede:	4b49      	ldr	r3, [pc, #292]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0ee      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x334>
 8006eea:	e014      	b.n	8006f16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eec:	f7fe fc8e 	bl	800580c <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ef2:	e00a      	b.n	8006f0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ef4:	f7fe fc8a 	bl	800580c <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e0b5      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1ee      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d105      	bne.n	8006f28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f1c:	4b39      	ldr	r3, [pc, #228]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f20:	4a38      	ldr	r2, [pc, #224]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 80a1 	beq.w	8007074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f32:	4b34      	ldr	r3, [pc, #208]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 030c 	and.w	r3, r3, #12
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d05c      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d141      	bne.n	8006fca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f46:	4b31      	ldr	r3, [pc, #196]	@ (800700c <HAL_RCC_OscConfig+0x478>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f4c:	f7fe fc5e 	bl	800580c <HAL_GetTick>
 8006f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f54:	f7fe fc5a 	bl	800580c <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e087      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f66:	4b27      	ldr	r3, [pc, #156]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f0      	bne.n	8006f54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69da      	ldr	r2, [r3, #28]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	019b      	lsls	r3, r3, #6
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f88:	085b      	lsrs	r3, r3, #1
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	041b      	lsls	r3, r3, #16
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f94:	061b      	lsls	r3, r3, #24
 8006f96:	491b      	ldr	r1, [pc, #108]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800700c <HAL_RCC_OscConfig+0x478>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa2:	f7fe fc33 	bl	800580c <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006faa:	f7fe fc2f 	bl	800580c <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e05c      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fbc:	4b11      	ldr	r3, [pc, #68]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f0      	beq.n	8006faa <HAL_RCC_OscConfig+0x416>
 8006fc8:	e054      	b.n	8007074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fca:	4b10      	ldr	r3, [pc, #64]	@ (800700c <HAL_RCC_OscConfig+0x478>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd0:	f7fe fc1c 	bl	800580c <HAL_GetTick>
 8006fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd8:	f7fe fc18 	bl	800580c <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e045      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fea:	4b06      	ldr	r3, [pc, #24]	@ (8007004 <HAL_RCC_OscConfig+0x470>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1f0      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x444>
 8006ff6:	e03d      	b.n	8007074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d107      	bne.n	8007010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e038      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
 8007004:	40023800 	.word	0x40023800
 8007008:	40007000 	.word	0x40007000
 800700c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007010:	4b1b      	ldr	r3, [pc, #108]	@ (8007080 <HAL_RCC_OscConfig+0x4ec>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d028      	beq.n	8007070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007028:	429a      	cmp	r2, r3
 800702a:	d121      	bne.n	8007070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007036:	429a      	cmp	r2, r3
 8007038:	d11a      	bne.n	8007070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007040:	4013      	ands	r3, r2
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007048:	4293      	cmp	r3, r2
 800704a:	d111      	bne.n	8007070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007056:	085b      	lsrs	r3, r3, #1
 8007058:	3b01      	subs	r3, #1
 800705a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800705c:	429a      	cmp	r2, r3
 800705e:	d107      	bne.n	8007070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800706c:	429a      	cmp	r2, r3
 800706e:	d001      	beq.n	8007074 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e000      	b.n	8007076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40023800 	.word	0x40023800

08007084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e0cc      	b.n	8007232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007098:	4b68      	ldr	r3, [pc, #416]	@ (800723c <HAL_RCC_ClockConfig+0x1b8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d90c      	bls.n	80070c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070a6:	4b65      	ldr	r3, [pc, #404]	@ (800723c <HAL_RCC_ClockConfig+0x1b8>)
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ae:	4b63      	ldr	r3, [pc, #396]	@ (800723c <HAL_RCC_ClockConfig+0x1b8>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d001      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e0b8      	b.n	8007232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d020      	beq.n	800710e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070d8:	4b59      	ldr	r3, [pc, #356]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	4a58      	ldr	r2, [pc, #352]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80070e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070f0:	4b53      	ldr	r3, [pc, #332]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	4a52      	ldr	r2, [pc, #328]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 80070f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80070fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070fc:	4b50      	ldr	r3, [pc, #320]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	494d      	ldr	r1, [pc, #308]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 800710a:	4313      	orrs	r3, r2
 800710c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d044      	beq.n	80071a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d107      	bne.n	8007132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007122:	4b47      	ldr	r3, [pc, #284]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d119      	bne.n	8007162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e07f      	b.n	8007232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2b02      	cmp	r3, #2
 8007138:	d003      	beq.n	8007142 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800713e:	2b03      	cmp	r3, #3
 8007140:	d107      	bne.n	8007152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007142:	4b3f      	ldr	r3, [pc, #252]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e06f      	b.n	8007232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007152:	4b3b      	ldr	r3, [pc, #236]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e067      	b.n	8007232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007162:	4b37      	ldr	r3, [pc, #220]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f023 0203 	bic.w	r2, r3, #3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	4934      	ldr	r1, [pc, #208]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 8007170:	4313      	orrs	r3, r2
 8007172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007174:	f7fe fb4a 	bl	800580c <HAL_GetTick>
 8007178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800717a:	e00a      	b.n	8007192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800717c:	f7fe fb46 	bl	800580c <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800718a:	4293      	cmp	r3, r2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e04f      	b.n	8007232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007192:	4b2b      	ldr	r3, [pc, #172]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 020c 	and.w	r2, r3, #12
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d1eb      	bne.n	800717c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071a4:	4b25      	ldr	r3, [pc, #148]	@ (800723c <HAL_RCC_ClockConfig+0x1b8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d20c      	bcs.n	80071cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b2:	4b22      	ldr	r3, [pc, #136]	@ (800723c <HAL_RCC_ClockConfig+0x1b8>)
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ba:	4b20      	ldr	r3, [pc, #128]	@ (800723c <HAL_RCC_ClockConfig+0x1b8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d001      	beq.n	80071cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e032      	b.n	8007232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d008      	beq.n	80071ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071d8:	4b19      	ldr	r3, [pc, #100]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	4916      	ldr	r1, [pc, #88]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0308 	and.w	r3, r3, #8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071f6:	4b12      	ldr	r3, [pc, #72]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	490e      	ldr	r1, [pc, #56]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 8007206:	4313      	orrs	r3, r2
 8007208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800720a:	f000 f821 	bl	8007250 <HAL_RCC_GetSysClockFreq>
 800720e:	4602      	mov	r2, r0
 8007210:	4b0b      	ldr	r3, [pc, #44]	@ (8007240 <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	091b      	lsrs	r3, r3, #4
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	490a      	ldr	r1, [pc, #40]	@ (8007244 <HAL_RCC_ClockConfig+0x1c0>)
 800721c:	5ccb      	ldrb	r3, [r1, r3]
 800721e:	fa22 f303 	lsr.w	r3, r2, r3
 8007222:	4a09      	ldr	r2, [pc, #36]	@ (8007248 <HAL_RCC_ClockConfig+0x1c4>)
 8007224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007226:	4b09      	ldr	r3, [pc, #36]	@ (800724c <HAL_RCC_ClockConfig+0x1c8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4618      	mov	r0, r3
 800722c:	f7fb f9da 	bl	80025e4 <HAL_InitTick>

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	40023c00 	.word	0x40023c00
 8007240:	40023800 	.word	0x40023800
 8007244:	0803327c 	.word	0x0803327c
 8007248:	20000008 	.word	0x20000008
 800724c:	20000074 	.word	0x20000074

08007250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007254:	b094      	sub	sp, #80	@ 0x50
 8007256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007268:	4b79      	ldr	r3, [pc, #484]	@ (8007450 <HAL_RCC_GetSysClockFreq+0x200>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f003 030c 	and.w	r3, r3, #12
 8007270:	2b08      	cmp	r3, #8
 8007272:	d00d      	beq.n	8007290 <HAL_RCC_GetSysClockFreq+0x40>
 8007274:	2b08      	cmp	r3, #8
 8007276:	f200 80e1 	bhi.w	800743c <HAL_RCC_GetSysClockFreq+0x1ec>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <HAL_RCC_GetSysClockFreq+0x34>
 800727e:	2b04      	cmp	r3, #4
 8007280:	d003      	beq.n	800728a <HAL_RCC_GetSysClockFreq+0x3a>
 8007282:	e0db      	b.n	800743c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007284:	4b73      	ldr	r3, [pc, #460]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x204>)
 8007286:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007288:	e0db      	b.n	8007442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800728a:	4b73      	ldr	r3, [pc, #460]	@ (8007458 <HAL_RCC_GetSysClockFreq+0x208>)
 800728c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800728e:	e0d8      	b.n	8007442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007290:	4b6f      	ldr	r3, [pc, #444]	@ (8007450 <HAL_RCC_GetSysClockFreq+0x200>)
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007298:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800729a:	4b6d      	ldr	r3, [pc, #436]	@ (8007450 <HAL_RCC_GetSysClockFreq+0x200>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d063      	beq.n	800736e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007450 <HAL_RCC_GetSysClockFreq+0x200>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	099b      	lsrs	r3, r3, #6
 80072ac:	2200      	movs	r2, #0
 80072ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80072b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ba:	2300      	movs	r3, #0
 80072bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80072be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80072c2:	4622      	mov	r2, r4
 80072c4:	462b      	mov	r3, r5
 80072c6:	f04f 0000 	mov.w	r0, #0
 80072ca:	f04f 0100 	mov.w	r1, #0
 80072ce:	0159      	lsls	r1, r3, #5
 80072d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072d4:	0150      	lsls	r0, r2, #5
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4621      	mov	r1, r4
 80072dc:	1a51      	subs	r1, r2, r1
 80072de:	6139      	str	r1, [r7, #16]
 80072e0:	4629      	mov	r1, r5
 80072e2:	eb63 0301 	sbc.w	r3, r3, r1
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072f4:	4659      	mov	r1, fp
 80072f6:	018b      	lsls	r3, r1, #6
 80072f8:	4651      	mov	r1, sl
 80072fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072fe:	4651      	mov	r1, sl
 8007300:	018a      	lsls	r2, r1, #6
 8007302:	4651      	mov	r1, sl
 8007304:	ebb2 0801 	subs.w	r8, r2, r1
 8007308:	4659      	mov	r1, fp
 800730a:	eb63 0901 	sbc.w	r9, r3, r1
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	f04f 0300 	mov.w	r3, #0
 8007316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800731a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800731e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007322:	4690      	mov	r8, r2
 8007324:	4699      	mov	r9, r3
 8007326:	4623      	mov	r3, r4
 8007328:	eb18 0303 	adds.w	r3, r8, r3
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	462b      	mov	r3, r5
 8007330:	eb49 0303 	adc.w	r3, r9, r3
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	f04f 0200 	mov.w	r2, #0
 800733a:	f04f 0300 	mov.w	r3, #0
 800733e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007342:	4629      	mov	r1, r5
 8007344:	024b      	lsls	r3, r1, #9
 8007346:	4621      	mov	r1, r4
 8007348:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800734c:	4621      	mov	r1, r4
 800734e:	024a      	lsls	r2, r1, #9
 8007350:	4610      	mov	r0, r2
 8007352:	4619      	mov	r1, r3
 8007354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007356:	2200      	movs	r2, #0
 8007358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800735a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800735c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007360:	f7f9 fcfa 	bl	8000d58 <__aeabi_uldivmod>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4613      	mov	r3, r2
 800736a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800736c:	e058      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800736e:	4b38      	ldr	r3, [pc, #224]	@ (8007450 <HAL_RCC_GetSysClockFreq+0x200>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	099b      	lsrs	r3, r3, #6
 8007374:	2200      	movs	r2, #0
 8007376:	4618      	mov	r0, r3
 8007378:	4611      	mov	r1, r2
 800737a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800737e:	623b      	str	r3, [r7, #32]
 8007380:	2300      	movs	r3, #0
 8007382:	627b      	str	r3, [r7, #36]	@ 0x24
 8007384:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007388:	4642      	mov	r2, r8
 800738a:	464b      	mov	r3, r9
 800738c:	f04f 0000 	mov.w	r0, #0
 8007390:	f04f 0100 	mov.w	r1, #0
 8007394:	0159      	lsls	r1, r3, #5
 8007396:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800739a:	0150      	lsls	r0, r2, #5
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4641      	mov	r1, r8
 80073a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80073a6:	4649      	mov	r1, r9
 80073a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80073ac:	f04f 0200 	mov.w	r2, #0
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80073b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80073bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80073c0:	ebb2 040a 	subs.w	r4, r2, sl
 80073c4:	eb63 050b 	sbc.w	r5, r3, fp
 80073c8:	f04f 0200 	mov.w	r2, #0
 80073cc:	f04f 0300 	mov.w	r3, #0
 80073d0:	00eb      	lsls	r3, r5, #3
 80073d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073d6:	00e2      	lsls	r2, r4, #3
 80073d8:	4614      	mov	r4, r2
 80073da:	461d      	mov	r5, r3
 80073dc:	4643      	mov	r3, r8
 80073de:	18e3      	adds	r3, r4, r3
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	464b      	mov	r3, r9
 80073e4:	eb45 0303 	adc.w	r3, r5, r3
 80073e8:	607b      	str	r3, [r7, #4]
 80073ea:	f04f 0200 	mov.w	r2, #0
 80073ee:	f04f 0300 	mov.w	r3, #0
 80073f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073f6:	4629      	mov	r1, r5
 80073f8:	028b      	lsls	r3, r1, #10
 80073fa:	4621      	mov	r1, r4
 80073fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007400:	4621      	mov	r1, r4
 8007402:	028a      	lsls	r2, r1, #10
 8007404:	4610      	mov	r0, r2
 8007406:	4619      	mov	r1, r3
 8007408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800740a:	2200      	movs	r2, #0
 800740c:	61bb      	str	r3, [r7, #24]
 800740e:	61fa      	str	r2, [r7, #28]
 8007410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007414:	f7f9 fca0 	bl	8000d58 <__aeabi_uldivmod>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4613      	mov	r3, r2
 800741e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007420:	4b0b      	ldr	r3, [pc, #44]	@ (8007450 <HAL_RCC_GetSysClockFreq+0x200>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	3301      	adds	r3, #1
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007430:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007434:	fbb2 f3f3 	udiv	r3, r2, r3
 8007438:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800743a:	e002      	b.n	8007442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800743c:	4b05      	ldr	r3, [pc, #20]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x204>)
 800743e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007444:	4618      	mov	r0, r3
 8007446:	3750      	adds	r7, #80	@ 0x50
 8007448:	46bd      	mov	sp, r7
 800744a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800744e:	bf00      	nop
 8007450:	40023800 	.word	0x40023800
 8007454:	00f42400 	.word	0x00f42400
 8007458:	007a1200 	.word	0x007a1200

0800745c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800745c:	b480      	push	{r7}
 800745e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007460:	4b03      	ldr	r3, [pc, #12]	@ (8007470 <HAL_RCC_GetHCLKFreq+0x14>)
 8007462:	681b      	ldr	r3, [r3, #0]
}
 8007464:	4618      	mov	r0, r3
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	20000008 	.word	0x20000008

08007474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007478:	f7ff fff0 	bl	800745c <HAL_RCC_GetHCLKFreq>
 800747c:	4602      	mov	r2, r0
 800747e:	4b05      	ldr	r3, [pc, #20]	@ (8007494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	0a9b      	lsrs	r3, r3, #10
 8007484:	f003 0307 	and.w	r3, r3, #7
 8007488:	4903      	ldr	r1, [pc, #12]	@ (8007498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800748a:	5ccb      	ldrb	r3, [r1, r3]
 800748c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007490:	4618      	mov	r0, r3
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40023800 	.word	0x40023800
 8007498:	0803328c 	.word	0x0803328c

0800749c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074a0:	f7ff ffdc 	bl	800745c <HAL_RCC_GetHCLKFreq>
 80074a4:	4602      	mov	r2, r0
 80074a6:	4b05      	ldr	r3, [pc, #20]	@ (80074bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	0b5b      	lsrs	r3, r3, #13
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	4903      	ldr	r1, [pc, #12]	@ (80074c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074b2:	5ccb      	ldrb	r3, [r1, r3]
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	40023800 	.word	0x40023800
 80074c0:	0803328c 	.word	0x0803328c

080074c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	220f      	movs	r2, #15
 80074d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074d4:	4b12      	ldr	r3, [pc, #72]	@ (8007520 <HAL_RCC_GetClockConfig+0x5c>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 0203 	and.w	r2, r3, #3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007520 <HAL_RCC_GetClockConfig+0x5c>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007520 <HAL_RCC_GetClockConfig+0x5c>)
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80074f8:	4b09      	ldr	r3, [pc, #36]	@ (8007520 <HAL_RCC_GetClockConfig+0x5c>)
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	08db      	lsrs	r3, r3, #3
 80074fe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007506:	4b07      	ldr	r3, [pc, #28]	@ (8007524 <HAL_RCC_GetClockConfig+0x60>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0207 	and.w	r2, r3, #7
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	601a      	str	r2, [r3, #0]
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	40023800 	.word	0x40023800
 8007524:	40023c00 	.word	0x40023c00

08007528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e07b      	b.n	8007632 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753e:	2b00      	cmp	r3, #0
 8007540:	d108      	bne.n	8007554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800754a:	d009      	beq.n	8007560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	61da      	str	r2, [r3, #28]
 8007552:	e005      	b.n	8007560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fa ffbe 	bl	80024fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80075a8:	431a      	orrs	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075d0:	431a      	orrs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e4:	ea42 0103 	orr.w	r1, r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	0c1b      	lsrs	r3, r3, #16
 80075fe:	f003 0104 	and.w	r1, r3, #4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007606:	f003 0210 	and.w	r2, r3, #16
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69da      	ldr	r2, [r3, #28]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007620:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b088      	sub	sp, #32
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	603b      	str	r3, [r7, #0]
 8007646:	4613      	mov	r3, r2
 8007648:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800764a:	f7fe f8df 	bl	800580c <HAL_GetTick>
 800764e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007650:	88fb      	ldrh	r3, [r7, #6]
 8007652:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b01      	cmp	r3, #1
 800765e:	d001      	beq.n	8007664 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007660:	2302      	movs	r3, #2
 8007662:	e12a      	b.n	80078ba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_SPI_Transmit+0x36>
 800766a:	88fb      	ldrh	r3, [r7, #6]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e122      	b.n	80078ba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_SPI_Transmit+0x48>
 800767e:	2302      	movs	r3, #2
 8007680:	e11b      	b.n	80078ba <HAL_SPI_Transmit+0x280>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2203      	movs	r2, #3
 800768e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	88fa      	ldrh	r2, [r7, #6]
 80076a2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	88fa      	ldrh	r2, [r7, #6]
 80076a8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076d0:	d10f      	bne.n	80076f2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076fc:	2b40      	cmp	r3, #64	@ 0x40
 80076fe:	d007      	beq.n	8007710 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800770e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007718:	d152      	bne.n	80077c0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <HAL_SPI_Transmit+0xee>
 8007722:	8b7b      	ldrh	r3, [r7, #26]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d145      	bne.n	80077b4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772c:	881a      	ldrh	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007738:	1c9a      	adds	r2, r3, #2
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800774c:	e032      	b.n	80077b4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f003 0302 	and.w	r3, r3, #2
 8007758:	2b02      	cmp	r3, #2
 800775a:	d112      	bne.n	8007782 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007760:	881a      	ldrh	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776c:	1c9a      	adds	r2, r3, #2
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007780:	e018      	b.n	80077b4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007782:	f7fe f843 	bl	800580c <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d803      	bhi.n	800779a <HAL_SPI_Transmit+0x160>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007798:	d102      	bne.n	80077a0 <HAL_SPI_Transmit+0x166>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d109      	bne.n	80077b4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e082      	b.n	80078ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1c7      	bne.n	800774e <HAL_SPI_Transmit+0x114>
 80077be:	e053      	b.n	8007868 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <HAL_SPI_Transmit+0x194>
 80077c8:	8b7b      	ldrh	r3, [r7, #26]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d147      	bne.n	800785e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	330c      	adds	r3, #12
 80077d8:	7812      	ldrb	r2, [r2, #0]
 80077da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077f4:	e033      	b.n	800785e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b02      	cmp	r3, #2
 8007802:	d113      	bne.n	800782c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	330c      	adds	r3, #12
 800780e:	7812      	ldrb	r2, [r2, #0]
 8007810:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	86da      	strh	r2, [r3, #54]	@ 0x36
 800782a:	e018      	b.n	800785e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800782c:	f7fd ffee 	bl	800580c <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d803      	bhi.n	8007844 <HAL_SPI_Transmit+0x20a>
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007842:	d102      	bne.n	800784a <HAL_SPI_Transmit+0x210>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d109      	bne.n	800785e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e02d      	b.n	80078ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1c6      	bne.n	80077f6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007868:	69fa      	ldr	r2, [r7, #28]
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 fbd9 	bl	8008024 <SPI_EndRxTxTransaction>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	617b      	str	r3, [r7, #20]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	617b      	str	r3, [r7, #20]
 800789a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e000      	b.n	80078ba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80078b8:	2300      	movs	r3, #0
  }
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b088      	sub	sp, #32
 80078c6:	af02      	add	r7, sp, #8
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	603b      	str	r3, [r7, #0]
 80078ce:	4613      	mov	r3, r2
 80078d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d001      	beq.n	80078e2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80078de:	2302      	movs	r3, #2
 80078e0:	e104      	b.n	8007aec <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078ea:	d112      	bne.n	8007912 <HAL_SPI_Receive+0x50>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10e      	bne.n	8007912 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2204      	movs	r2, #4
 80078f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80078fc:	88fa      	ldrh	r2, [r7, #6]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	4613      	mov	r3, r2
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f8f3 	bl	8007af4 <HAL_SPI_TransmitReceive>
 800790e:	4603      	mov	r3, r0
 8007910:	e0ec      	b.n	8007aec <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007912:	f7fd ff7b 	bl	800580c <HAL_GetTick>
 8007916:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <HAL_SPI_Receive+0x62>
 800791e:	88fb      	ldrh	r3, [r7, #6]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e0e1      	b.n	8007aec <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_SPI_Receive+0x74>
 8007932:	2302      	movs	r3, #2
 8007934:	e0da      	b.n	8007aec <HAL_SPI_Receive+0x22a>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2204      	movs	r2, #4
 8007942:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	88fa      	ldrh	r2, [r7, #6]
 8007956:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	88fa      	ldrh	r2, [r7, #6]
 800795c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007984:	d10f      	bne.n	80079a6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007994:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80079a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b0:	2b40      	cmp	r3, #64	@ 0x40
 80079b2:	d007      	beq.n	80079c4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d170      	bne.n	8007aae <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80079cc:	e035      	b.n	8007a3a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d115      	bne.n	8007a08 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f103 020c 	add.w	r2, r3, #12
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e8:	7812      	ldrb	r2, [r2, #0]
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a06:	e018      	b.n	8007a3a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a08:	f7fd ff00 	bl	800580c <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d803      	bhi.n	8007a20 <HAL_SPI_Receive+0x15e>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a1e:	d102      	bne.n	8007a26 <HAL_SPI_Receive+0x164>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e058      	b.n	8007aec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1c4      	bne.n	80079ce <HAL_SPI_Receive+0x10c>
 8007a44:	e038      	b.n	8007ab8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d113      	bne.n	8007a7c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5e:	b292      	uxth	r2, r2
 8007a60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a66:	1c9a      	adds	r2, r3, #2
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a7a:	e018      	b.n	8007aae <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a7c:	f7fd fec6 	bl	800580c <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d803      	bhi.n	8007a94 <HAL_SPI_Receive+0x1d2>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a92:	d102      	bne.n	8007a9a <HAL_SPI_Receive+0x1d8>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e01e      	b.n	8007aec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1c6      	bne.n	8007a46 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 fa4b 	bl	8007f58 <SPI_EndRxTransaction>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2220      	movs	r2, #32
 8007acc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007aea:	2300      	movs	r3, #0
  }
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08a      	sub	sp, #40	@ 0x28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b02:	2301      	movs	r3, #1
 8007b04:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b06:	f7fd fe81 	bl	800580c <HAL_GetTick>
 8007b0a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b12:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007b1a:	887b      	ldrh	r3, [r7, #2]
 8007b1c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b1e:	7ffb      	ldrb	r3, [r7, #31]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d00c      	beq.n	8007b3e <HAL_SPI_TransmitReceive+0x4a>
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b2a:	d106      	bne.n	8007b3a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d102      	bne.n	8007b3a <HAL_SPI_TransmitReceive+0x46>
 8007b34:	7ffb      	ldrb	r3, [r7, #31]
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d001      	beq.n	8007b3e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e17f      	b.n	8007e3e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <HAL_SPI_TransmitReceive+0x5c>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_SPI_TransmitReceive+0x5c>
 8007b4a:	887b      	ldrh	r3, [r7, #2]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e174      	b.n	8007e3e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_SPI_TransmitReceive+0x6e>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	e16d      	b.n	8007e3e <HAL_SPI_TransmitReceive+0x34a>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d003      	beq.n	8007b7e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2205      	movs	r2, #5
 8007b7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	887a      	ldrh	r2, [r7, #2]
 8007b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	887a      	ldrh	r2, [r7, #2]
 8007b94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	887a      	ldrh	r2, [r7, #2]
 8007ba0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	887a      	ldrh	r2, [r7, #2]
 8007ba6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bbe:	2b40      	cmp	r3, #64	@ 0x40
 8007bc0:	d007      	beq.n	8007bd2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bda:	d17e      	bne.n	8007cda <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <HAL_SPI_TransmitReceive+0xf6>
 8007be4:	8afb      	ldrh	r3, [r7, #22]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d16c      	bne.n	8007cc4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bee:	881a      	ldrh	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfa:	1c9a      	adds	r2, r3, #2
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	3b01      	subs	r3, #1
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c0e:	e059      	b.n	8007cc4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d11b      	bne.n	8007c56 <HAL_SPI_TransmitReceive+0x162>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d016      	beq.n	8007c56 <HAL_SPI_TransmitReceive+0x162>
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d113      	bne.n	8007c56 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c32:	881a      	ldrh	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c3e:	1c9a      	adds	r2, r3, #2
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d119      	bne.n	8007c98 <HAL_SPI_TransmitReceive+0x1a4>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d014      	beq.n	8007c98 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c78:	b292      	uxth	r2, r2
 8007c7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c80:	1c9a      	adds	r2, r3, #2
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c94:	2301      	movs	r3, #1
 8007c96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c98:	f7fd fdb8 	bl	800580c <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d80d      	bhi.n	8007cc4 <HAL_SPI_TransmitReceive+0x1d0>
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cae:	d009      	beq.n	8007cc4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e0bc      	b.n	8007e3e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1a0      	bne.n	8007c10 <HAL_SPI_TransmitReceive+0x11c>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d19b      	bne.n	8007c10 <HAL_SPI_TransmitReceive+0x11c>
 8007cd8:	e082      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <HAL_SPI_TransmitReceive+0x1f4>
 8007ce2:	8afb      	ldrh	r3, [r7, #22]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d171      	bne.n	8007dcc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	7812      	ldrb	r2, [r2, #0]
 8007cf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d0e:	e05d      	b.n	8007dcc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d11c      	bne.n	8007d58 <HAL_SPI_TransmitReceive+0x264>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d017      	beq.n	8007d58 <HAL_SPI_TransmitReceive+0x264>
 8007d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d114      	bne.n	8007d58 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	330c      	adds	r3, #12
 8007d38:	7812      	ldrb	r2, [r2, #0]
 8007d3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d119      	bne.n	8007d9a <HAL_SPI_TransmitReceive+0x2a6>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d014      	beq.n	8007d9a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d96:	2301      	movs	r3, #1
 8007d98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d9a:	f7fd fd37 	bl	800580c <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d803      	bhi.n	8007db2 <HAL_SPI_TransmitReceive+0x2be>
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007db0:	d102      	bne.n	8007db8 <HAL_SPI_TransmitReceive+0x2c4>
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d109      	bne.n	8007dcc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e038      	b.n	8007e3e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d19c      	bne.n	8007d10 <HAL_SPI_TransmitReceive+0x21c>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d197      	bne.n	8007d10 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007de0:	6a3a      	ldr	r2, [r7, #32]
 8007de2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f91d 	bl	8008024 <SPI_EndRxTxTransaction>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d008      	beq.n	8007e02 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e01d      	b.n	8007e3e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	613b      	str	r3, [r7, #16]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	613b      	str	r3, [r7, #16]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	613b      	str	r3, [r7, #16]
 8007e1e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e000      	b.n	8007e3e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
  }
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3728      	adds	r7, #40	@ 0x28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	4613      	mov	r3, r2
 8007e56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e58:	f7fd fcd8 	bl	800580c <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e60:	1a9b      	subs	r3, r3, r2
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	4413      	add	r3, r2
 8007e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e68:	f7fd fcd0 	bl	800580c <HAL_GetTick>
 8007e6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e6e:	4b39      	ldr	r3, [pc, #228]	@ (8007f54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	015b      	lsls	r3, r3, #5
 8007e74:	0d1b      	lsrs	r3, r3, #20
 8007e76:	69fa      	ldr	r2, [r7, #28]
 8007e78:	fb02 f303 	mul.w	r3, r2, r3
 8007e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e7e:	e054      	b.n	8007f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e86:	d050      	beq.n	8007f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e88:	f7fd fcc0 	bl	800580c <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	69fa      	ldr	r2, [r7, #28]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d902      	bls.n	8007e9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d13d      	bne.n	8007f1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007eb6:	d111      	bne.n	8007edc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ec0:	d004      	beq.n	8007ecc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eca:	d107      	bne.n	8007edc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ee4:	d10f      	bne.n	8007f06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e017      	b.n	8007f4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	3b01      	subs	r3, #1
 8007f28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	4013      	ands	r3, r2
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	bf0c      	ite	eq
 8007f3a:	2301      	moveq	r3, #1
 8007f3c:	2300      	movne	r3, #0
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	461a      	mov	r2, r3
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d19b      	bne.n	8007e80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3720      	adds	r7, #32
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000008 	.word	0x20000008

08007f58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f6c:	d111      	bne.n	8007f92 <SPI_EndRxTransaction+0x3a>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f76:	d004      	beq.n	8007f82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f80:	d107      	bne.n	8007f92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f90:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f9a:	d12a      	bne.n	8007ff2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fa4:	d012      	beq.n	8007fcc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2200      	movs	r2, #0
 8007fae:	2180      	movs	r1, #128	@ 0x80
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f7ff ff49 	bl	8007e48 <SPI_WaitFlagStateUntilTimeout>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d02d      	beq.n	8008018 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc0:	f043 0220 	orr.w	r2, r3, #32
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e026      	b.n	800801a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f7ff ff36 	bl	8007e48 <SPI_WaitFlagStateUntilTimeout>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d01a      	beq.n	8008018 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe6:	f043 0220 	orr.w	r2, r3, #32
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e013      	b.n	800801a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f7ff ff23 	bl	8007e48 <SPI_WaitFlagStateUntilTimeout>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d007      	beq.n	8008018 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800800c:	f043 0220 	orr.w	r2, r3, #32
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e000      	b.n	800801a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af02      	add	r7, sp, #8
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2201      	movs	r2, #1
 8008038:	2102      	movs	r1, #2
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f7ff ff04 	bl	8007e48 <SPI_WaitFlagStateUntilTimeout>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804a:	f043 0220 	orr.w	r2, r3, #32
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e032      	b.n	80080bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008056:	4b1b      	ldr	r3, [pc, #108]	@ (80080c4 <SPI_EndRxTxTransaction+0xa0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a1b      	ldr	r2, [pc, #108]	@ (80080c8 <SPI_EndRxTxTransaction+0xa4>)
 800805c:	fba2 2303 	umull	r2, r3, r2, r3
 8008060:	0d5b      	lsrs	r3, r3, #21
 8008062:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008066:	fb02 f303 	mul.w	r3, r2, r3
 800806a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008074:	d112      	bne.n	800809c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2200      	movs	r2, #0
 800807e:	2180      	movs	r1, #128	@ 0x80
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff fee1 	bl	8007e48 <SPI_WaitFlagStateUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d016      	beq.n	80080ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008090:	f043 0220 	orr.w	r2, r3, #32
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e00f      	b.n	80080bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080b2:	2b80      	cmp	r3, #128	@ 0x80
 80080b4:	d0f2      	beq.n	800809c <SPI_EndRxTxTransaction+0x78>
 80080b6:	e000      	b.n	80080ba <SPI_EndRxTxTransaction+0x96>
        break;
 80080b8:	bf00      	nop
  }

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000008 	.word	0x20000008
 80080c8:	165e9f81 	.word	0x165e9f81

080080cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e041      	b.n	8008162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f839 	bl	800816a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3304      	adds	r3, #4
 8008108:	4619      	mov	r1, r3
 800810a:	4610      	mov	r0, r2
 800810c:	f000 f9b2 	bl	8008474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b01      	cmp	r3, #1
 8008192:	d001      	beq.n	8008198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e044      	b.n	8008222 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0201 	orr.w	r2, r2, #1
 80081ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a1e      	ldr	r2, [pc, #120]	@ (8008230 <HAL_TIM_Base_Start_IT+0xb0>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d018      	beq.n	80081ec <HAL_TIM_Base_Start_IT+0x6c>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081c2:	d013      	beq.n	80081ec <HAL_TIM_Base_Start_IT+0x6c>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008234 <HAL_TIM_Base_Start_IT+0xb4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00e      	beq.n	80081ec <HAL_TIM_Base_Start_IT+0x6c>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a19      	ldr	r2, [pc, #100]	@ (8008238 <HAL_TIM_Base_Start_IT+0xb8>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d009      	beq.n	80081ec <HAL_TIM_Base_Start_IT+0x6c>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a17      	ldr	r2, [pc, #92]	@ (800823c <HAL_TIM_Base_Start_IT+0xbc>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d004      	beq.n	80081ec <HAL_TIM_Base_Start_IT+0x6c>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a16      	ldr	r2, [pc, #88]	@ (8008240 <HAL_TIM_Base_Start_IT+0xc0>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d111      	bne.n	8008210 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b06      	cmp	r3, #6
 80081fc:	d010      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f042 0201 	orr.w	r2, r2, #1
 800820c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820e:	e007      	b.n	8008220 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0201 	orr.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	40010000 	.word	0x40010000
 8008234:	40000400 	.word	0x40000400
 8008238:	40000800 	.word	0x40000800
 800823c:	40000c00 	.word	0x40000c00
 8008240:	40014000 	.word	0x40014000

08008244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d020      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01b      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0202 	mvn.w	r2, #2
 8008278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f8d2 	bl	8008438 <HAL_TIM_IC_CaptureCallback>
 8008294:	e005      	b.n	80082a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f8c4 	bl	8008424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f8d5 	bl	800844c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d020      	beq.n	80082f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d01b      	beq.n	80082f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0204 	mvn.w	r2, #4
 80082c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2202      	movs	r2, #2
 80082ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f8ac 	bl	8008438 <HAL_TIM_IC_CaptureCallback>
 80082e0:	e005      	b.n	80082ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f89e 	bl	8008424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f8af 	bl	800844c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d020      	beq.n	8008340 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f003 0308 	and.w	r3, r3, #8
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01b      	beq.n	8008340 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f06f 0208 	mvn.w	r2, #8
 8008310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2204      	movs	r2, #4
 8008316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f886 	bl	8008438 <HAL_TIM_IC_CaptureCallback>
 800832c:	e005      	b.n	800833a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f878 	bl	8008424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f889 	bl	800844c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f003 0310 	and.w	r3, r3, #16
 8008346:	2b00      	cmp	r3, #0
 8008348:	d020      	beq.n	800838c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01b      	beq.n	800838c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f06f 0210 	mvn.w	r2, #16
 800835c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2208      	movs	r2, #8
 8008362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f860 	bl	8008438 <HAL_TIM_IC_CaptureCallback>
 8008378:	e005      	b.n	8008386 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f852 	bl	8008424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f863 	bl	800844c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00c      	beq.n	80083b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d007      	beq.n	80083b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0201 	mvn.w	r2, #1
 80083a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7fa f858 	bl	8002460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00c      	beq.n	80083d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d007      	beq.n	80083d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80083cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f8e6 	bl	80085a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00c      	beq.n	80083f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d007      	beq.n	80083f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f834 	bl	8008460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00c      	beq.n	800841c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d007      	beq.n	800841c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0220 	mvn.w	r2, #32
 8008414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f8b8 	bl	800858c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800841c:	bf00      	nop
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a3a      	ldr	r2, [pc, #232]	@ (8008570 <TIM_Base_SetConfig+0xfc>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d00f      	beq.n	80084ac <TIM_Base_SetConfig+0x38>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008492:	d00b      	beq.n	80084ac <TIM_Base_SetConfig+0x38>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a37      	ldr	r2, [pc, #220]	@ (8008574 <TIM_Base_SetConfig+0x100>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d007      	beq.n	80084ac <TIM_Base_SetConfig+0x38>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a36      	ldr	r2, [pc, #216]	@ (8008578 <TIM_Base_SetConfig+0x104>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d003      	beq.n	80084ac <TIM_Base_SetConfig+0x38>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a35      	ldr	r2, [pc, #212]	@ (800857c <TIM_Base_SetConfig+0x108>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d108      	bne.n	80084be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a2b      	ldr	r2, [pc, #172]	@ (8008570 <TIM_Base_SetConfig+0xfc>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d01b      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084cc:	d017      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a28      	ldr	r2, [pc, #160]	@ (8008574 <TIM_Base_SetConfig+0x100>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d013      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a27      	ldr	r2, [pc, #156]	@ (8008578 <TIM_Base_SetConfig+0x104>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00f      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a26      	ldr	r2, [pc, #152]	@ (800857c <TIM_Base_SetConfig+0x108>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00b      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a25      	ldr	r2, [pc, #148]	@ (8008580 <TIM_Base_SetConfig+0x10c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d007      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a24      	ldr	r2, [pc, #144]	@ (8008584 <TIM_Base_SetConfig+0x110>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d003      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a23      	ldr	r2, [pc, #140]	@ (8008588 <TIM_Base_SetConfig+0x114>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d108      	bne.n	8008510 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a0e      	ldr	r2, [pc, #56]	@ (8008570 <TIM_Base_SetConfig+0xfc>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d103      	bne.n	8008544 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b01      	cmp	r3, #1
 8008554:	d105      	bne.n	8008562 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	f023 0201 	bic.w	r2, r3, #1
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	611a      	str	r2, [r3, #16]
  }
}
 8008562:	bf00      	nop
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	40010000 	.word	0x40010000
 8008574:	40000400 	.word	0x40000400
 8008578:	40000800 	.word	0x40000800
 800857c:	40000c00 	.word	0x40000c00
 8008580:	40014000 	.word	0x40014000
 8008584:	40014400 	.word	0x40014400
 8008588:	40014800 	.word	0x40014800

0800858c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80085ba:	f000 fa15 	bl	80089e8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80085be:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80085c2:	2201      	movs	r2, #1
 80085c4:	2178      	movs	r1, #120	@ 0x78
 80085c6:	4856      	ldr	r0, [pc, #344]	@ (8008720 <SSD1306_Init+0x16c>)
 80085c8:	f7fd ff5a 	bl	8006480 <HAL_I2C_IsDeviceReady>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	e09f      	b.n	8008716 <SSD1306_Init+0x162>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80085d6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80085da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80085dc:	e002      	b.n	80085e4 <SSD1306_Init+0x30>
		p--;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3b01      	subs	r3, #1
 80085e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1f9      	bne.n	80085de <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80085ea:	22ae      	movs	r2, #174	@ 0xae
 80085ec:	2100      	movs	r1, #0
 80085ee:	2078      	movs	r0, #120	@ 0x78
 80085f0:	f000 fa76 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80085f4:	2220      	movs	r2, #32
 80085f6:	2100      	movs	r1, #0
 80085f8:	2078      	movs	r0, #120	@ 0x78
 80085fa:	f000 fa71 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80085fe:	2210      	movs	r2, #16
 8008600:	2100      	movs	r1, #0
 8008602:	2078      	movs	r0, #120	@ 0x78
 8008604:	f000 fa6c 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8008608:	22b0      	movs	r2, #176	@ 0xb0
 800860a:	2100      	movs	r1, #0
 800860c:	2078      	movs	r0, #120	@ 0x78
 800860e:	f000 fa67 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8008612:	22c8      	movs	r2, #200	@ 0xc8
 8008614:	2100      	movs	r1, #0
 8008616:	2078      	movs	r0, #120	@ 0x78
 8008618:	f000 fa62 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800861c:	2200      	movs	r2, #0
 800861e:	2100      	movs	r1, #0
 8008620:	2078      	movs	r0, #120	@ 0x78
 8008622:	f000 fa5d 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8008626:	2210      	movs	r2, #16
 8008628:	2100      	movs	r1, #0
 800862a:	2078      	movs	r0, #120	@ 0x78
 800862c:	f000 fa58 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8008630:	2240      	movs	r2, #64	@ 0x40
 8008632:	2100      	movs	r1, #0
 8008634:	2078      	movs	r0, #120	@ 0x78
 8008636:	f000 fa53 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800863a:	2281      	movs	r2, #129	@ 0x81
 800863c:	2100      	movs	r1, #0
 800863e:	2078      	movs	r0, #120	@ 0x78
 8008640:	f000 fa4e 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8008644:	22ff      	movs	r2, #255	@ 0xff
 8008646:	2100      	movs	r1, #0
 8008648:	2078      	movs	r0, #120	@ 0x78
 800864a:	f000 fa49 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800864e:	22a1      	movs	r2, #161	@ 0xa1
 8008650:	2100      	movs	r1, #0
 8008652:	2078      	movs	r0, #120	@ 0x78
 8008654:	f000 fa44 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8008658:	22a6      	movs	r2, #166	@ 0xa6
 800865a:	2100      	movs	r1, #0
 800865c:	2078      	movs	r0, #120	@ 0x78
 800865e:	f000 fa3f 	bl	8008ae0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008662:	22a8      	movs	r2, #168	@ 0xa8
 8008664:	2100      	movs	r1, #0
 8008666:	2078      	movs	r0, #120	@ 0x78
 8008668:	f000 fa3a 	bl	8008ae0 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 800866c:	223f      	movs	r2, #63	@ 0x3f
 800866e:	2100      	movs	r1, #0
 8008670:	2078      	movs	r0, #120	@ 0x78
 8008672:	f000 fa35 	bl	8008ae0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008676:	22a4      	movs	r2, #164	@ 0xa4
 8008678:	2100      	movs	r1, #0
 800867a:	2078      	movs	r0, #120	@ 0x78
 800867c:	f000 fa30 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8008680:	22d3      	movs	r2, #211	@ 0xd3
 8008682:	2100      	movs	r1, #0
 8008684:	2078      	movs	r0, #120	@ 0x78
 8008686:	f000 fa2b 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800868a:	2200      	movs	r2, #0
 800868c:	2100      	movs	r1, #0
 800868e:	2078      	movs	r0, #120	@ 0x78
 8008690:	f000 fa26 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8008694:	22d5      	movs	r2, #213	@ 0xd5
 8008696:	2100      	movs	r1, #0
 8008698:	2078      	movs	r0, #120	@ 0x78
 800869a:	f000 fa21 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800869e:	22f0      	movs	r2, #240	@ 0xf0
 80086a0:	2100      	movs	r1, #0
 80086a2:	2078      	movs	r0, #120	@ 0x78
 80086a4:	f000 fa1c 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80086a8:	22d9      	movs	r2, #217	@ 0xd9
 80086aa:	2100      	movs	r1, #0
 80086ac:	2078      	movs	r0, #120	@ 0x78
 80086ae:	f000 fa17 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80086b2:	2222      	movs	r2, #34	@ 0x22
 80086b4:	2100      	movs	r1, #0
 80086b6:	2078      	movs	r0, #120	@ 0x78
 80086b8:	f000 fa12 	bl	8008ae0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80086bc:	22da      	movs	r2, #218	@ 0xda
 80086be:	2100      	movs	r1, #0
 80086c0:	2078      	movs	r0, #120	@ 0x78
 80086c2:	f000 fa0d 	bl	8008ae0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80086c6:	2212      	movs	r2, #18
 80086c8:	2100      	movs	r1, #0
 80086ca:	2078      	movs	r0, #120	@ 0x78
 80086cc:	f000 fa08 	bl	8008ae0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80086d0:	22db      	movs	r2, #219	@ 0xdb
 80086d2:	2100      	movs	r1, #0
 80086d4:	2078      	movs	r0, #120	@ 0x78
 80086d6:	f000 fa03 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80086da:	2220      	movs	r2, #32
 80086dc:	2100      	movs	r1, #0
 80086de:	2078      	movs	r0, #120	@ 0x78
 80086e0:	f000 f9fe 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80086e4:	228d      	movs	r2, #141	@ 0x8d
 80086e6:	2100      	movs	r1, #0
 80086e8:	2078      	movs	r0, #120	@ 0x78
 80086ea:	f000 f9f9 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80086ee:	2214      	movs	r2, #20
 80086f0:	2100      	movs	r1, #0
 80086f2:	2078      	movs	r0, #120	@ 0x78
 80086f4:	f000 f9f4 	bl	8008ae0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80086f8:	22af      	movs	r2, #175	@ 0xaf
 80086fa:	2100      	movs	r1, #0
 80086fc:	2078      	movs	r0, #120	@ 0x78
 80086fe:	f000 f9ef 	bl	8008ae0 <ssd1306_I2C_Write>
	
	/* Update screen */
	//SSD1306_UpdateScreen();
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8008702:	4b08      	ldr	r3, [pc, #32]	@ (8008724 <SSD1306_Init+0x170>)
 8008704:	2200      	movs	r2, #0
 8008706:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8008708:	4b06      	ldr	r3, [pc, #24]	@ (8008724 <SSD1306_Init+0x170>)
 800870a:	2200      	movs	r2, #0
 800870c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800870e:	4b05      	ldr	r3, [pc, #20]	@ (8008724 <SSD1306_Init+0x170>)
 8008710:	2201      	movs	r2, #1
 8008712:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8008714:	2301      	movs	r3, #1
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20000a1c 	.word	0x20000a1c
 8008724:	20000fdc 	.word	0x20000fdc

08008728 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800872e:	2300      	movs	r3, #0
 8008730:	71fb      	strb	r3, [r7, #7]
 8008732:	e01d      	b.n	8008770 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	3b50      	subs	r3, #80	@ 0x50
 8008738:	b2db      	uxtb	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	2100      	movs	r1, #0
 800873e:	2078      	movs	r0, #120	@ 0x78
 8008740:	f000 f9ce 	bl	8008ae0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8008744:	2200      	movs	r2, #0
 8008746:	2100      	movs	r1, #0
 8008748:	2078      	movs	r0, #120	@ 0x78
 800874a:	f000 f9c9 	bl	8008ae0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800874e:	2210      	movs	r2, #16
 8008750:	2100      	movs	r1, #0
 8008752:	2078      	movs	r0, #120	@ 0x78
 8008754:	f000 f9c4 	bl	8008ae0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	01db      	lsls	r3, r3, #7
 800875c:	4a08      	ldr	r2, [pc, #32]	@ (8008780 <SSD1306_UpdateScreen+0x58>)
 800875e:	441a      	add	r2, r3
 8008760:	2380      	movs	r3, #128	@ 0x80
 8008762:	2140      	movs	r1, #64	@ 0x40
 8008764:	2078      	movs	r0, #120	@ 0x78
 8008766:	f000 f955 	bl	8008a14 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	3301      	adds	r3, #1
 800876e:	71fb      	strb	r3, [r7, #7]
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	2b07      	cmp	r3, #7
 8008774:	d9de      	bls.n	8008734 <SSD1306_UpdateScreen+0xc>
	}
}
 8008776:	bf00      	nop
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20000bdc 	.word	0x20000bdc

08008784 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	4603      	mov	r3, r0
 800878c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800878e:	79fb      	ldrb	r3, [r7, #7]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <SSD1306_Fill+0x14>
 8008794:	2300      	movs	r3, #0
 8008796:	e000      	b.n	800879a <SSD1306_Fill+0x16>
 8008798:	23ff      	movs	r3, #255	@ 0xff
 800879a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800879e:	4619      	mov	r1, r3
 80087a0:	4803      	ldr	r0, [pc, #12]	@ (80087b0 <SSD1306_Fill+0x2c>)
 80087a2:	f01d fbd9 	bl	8025f58 <memset>
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	20000bdc 	.word	0x20000bdc

080087b4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4603      	mov	r3, r0
 80087bc:	80fb      	strh	r3, [r7, #6]
 80087be:	460b      	mov	r3, r1
 80087c0:	80bb      	strh	r3, [r7, #4]
 80087c2:	4613      	mov	r3, r2
 80087c4:	70fb      	strb	r3, [r7, #3]
	if (
 80087c6:	88fb      	ldrh	r3, [r7, #6]
 80087c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80087ca:	d848      	bhi.n	800885e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80087cc:	88bb      	ldrh	r3, [r7, #4]
 80087ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80087d0:	d845      	bhi.n	800885e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80087d2:	4b26      	ldr	r3, [pc, #152]	@ (800886c <SSD1306_DrawPixel+0xb8>)
 80087d4:	791b      	ldrb	r3, [r3, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d006      	beq.n	80087e8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80087da:	78fb      	ldrb	r3, [r7, #3]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	bf0c      	ite	eq
 80087e0:	2301      	moveq	r3, #1
 80087e2:	2300      	movne	r3, #0
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80087e8:	78fb      	ldrb	r3, [r7, #3]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d11a      	bne.n	8008824 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80087ee:	88fa      	ldrh	r2, [r7, #6]
 80087f0:	88bb      	ldrh	r3, [r7, #4]
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	b298      	uxth	r0, r3
 80087f6:	4603      	mov	r3, r0
 80087f8:	01db      	lsls	r3, r3, #7
 80087fa:	4413      	add	r3, r2
 80087fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008870 <SSD1306_DrawPixel+0xbc>)
 80087fe:	5cd3      	ldrb	r3, [r2, r3]
 8008800:	b25a      	sxtb	r2, r3
 8008802:	88bb      	ldrh	r3, [r7, #4]
 8008804:	f003 0307 	and.w	r3, r3, #7
 8008808:	2101      	movs	r1, #1
 800880a:	fa01 f303 	lsl.w	r3, r1, r3
 800880e:	b25b      	sxtb	r3, r3
 8008810:	4313      	orrs	r3, r2
 8008812:	b259      	sxtb	r1, r3
 8008814:	88fa      	ldrh	r2, [r7, #6]
 8008816:	4603      	mov	r3, r0
 8008818:	01db      	lsls	r3, r3, #7
 800881a:	4413      	add	r3, r2
 800881c:	b2c9      	uxtb	r1, r1
 800881e:	4a14      	ldr	r2, [pc, #80]	@ (8008870 <SSD1306_DrawPixel+0xbc>)
 8008820:	54d1      	strb	r1, [r2, r3]
 8008822:	e01d      	b.n	8008860 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008824:	88fa      	ldrh	r2, [r7, #6]
 8008826:	88bb      	ldrh	r3, [r7, #4]
 8008828:	08db      	lsrs	r3, r3, #3
 800882a:	b298      	uxth	r0, r3
 800882c:	4603      	mov	r3, r0
 800882e:	01db      	lsls	r3, r3, #7
 8008830:	4413      	add	r3, r2
 8008832:	4a0f      	ldr	r2, [pc, #60]	@ (8008870 <SSD1306_DrawPixel+0xbc>)
 8008834:	5cd3      	ldrb	r3, [r2, r3]
 8008836:	b25a      	sxtb	r2, r3
 8008838:	88bb      	ldrh	r3, [r7, #4]
 800883a:	f003 0307 	and.w	r3, r3, #7
 800883e:	2101      	movs	r1, #1
 8008840:	fa01 f303 	lsl.w	r3, r1, r3
 8008844:	b25b      	sxtb	r3, r3
 8008846:	43db      	mvns	r3, r3
 8008848:	b25b      	sxtb	r3, r3
 800884a:	4013      	ands	r3, r2
 800884c:	b259      	sxtb	r1, r3
 800884e:	88fa      	ldrh	r2, [r7, #6]
 8008850:	4603      	mov	r3, r0
 8008852:	01db      	lsls	r3, r3, #7
 8008854:	4413      	add	r3, r2
 8008856:	b2c9      	uxtb	r1, r1
 8008858:	4a05      	ldr	r2, [pc, #20]	@ (8008870 <SSD1306_DrawPixel+0xbc>)
 800885a:	54d1      	strb	r1, [r2, r3]
 800885c:	e000      	b.n	8008860 <SSD1306_DrawPixel+0xac>
		return;
 800885e:	bf00      	nop
	}
}
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	20000fdc 	.word	0x20000fdc
 8008870:	20000bdc 	.word	0x20000bdc

08008874 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	460a      	mov	r2, r1
 800887e:	80fb      	strh	r3, [r7, #6]
 8008880:	4613      	mov	r3, r2
 8008882:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8008884:	4a05      	ldr	r2, [pc, #20]	@ (800889c <SSD1306_GotoXY+0x28>)
 8008886:	88fb      	ldrh	r3, [r7, #6]
 8008888:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800888a:	4a04      	ldr	r2, [pc, #16]	@ (800889c <SSD1306_GotoXY+0x28>)
 800888c:	88bb      	ldrh	r3, [r7, #4]
 800888e:	8053      	strh	r3, [r2, #2]
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	20000fdc 	.word	0x20000fdc

080088a0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	6039      	str	r1, [r7, #0]
 80088aa:	71fb      	strb	r3, [r7, #7]
 80088ac:	4613      	mov	r3, r2
 80088ae:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80088b0:	4b39      	ldr	r3, [pc, #228]	@ (8008998 <SSD1306_Putc+0xf8>)
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	461a      	mov	r2, r3
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	4413      	add	r3, r2
	if (
 80088bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80088be:	dc07      	bgt.n	80088d0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80088c0:	4b35      	ldr	r3, [pc, #212]	@ (8008998 <SSD1306_Putc+0xf8>)
 80088c2:	885b      	ldrh	r3, [r3, #2]
 80088c4:	461a      	mov	r2, r3
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	785b      	ldrb	r3, [r3, #1]
 80088ca:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80088cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80088ce:	dd01      	ble.n	80088d4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	e05d      	b.n	8008990 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80088d4:	2300      	movs	r3, #0
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	e04b      	b.n	8008972 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	3b20      	subs	r3, #32
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	7849      	ldrb	r1, [r1, #1]
 80088e6:	fb01 f303 	mul.w	r3, r1, r3
 80088ea:	4619      	mov	r1, r3
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	440b      	add	r3, r1
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4413      	add	r3, r2
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80088f8:	2300      	movs	r3, #0
 80088fa:	613b      	str	r3, [r7, #16]
 80088fc:	e030      	b.n	8008960 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	fa02 f303 	lsl.w	r3, r2, r3
 8008906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d010      	beq.n	8008930 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800890e:	4b22      	ldr	r3, [pc, #136]	@ (8008998 <SSD1306_Putc+0xf8>)
 8008910:	881a      	ldrh	r2, [r3, #0]
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	b29b      	uxth	r3, r3
 8008916:	4413      	add	r3, r2
 8008918:	b298      	uxth	r0, r3
 800891a:	4b1f      	ldr	r3, [pc, #124]	@ (8008998 <SSD1306_Putc+0xf8>)
 800891c:	885a      	ldrh	r2, [r3, #2]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	b29b      	uxth	r3, r3
 8008922:	4413      	add	r3, r2
 8008924:	b29b      	uxth	r3, r3
 8008926:	79ba      	ldrb	r2, [r7, #6]
 8008928:	4619      	mov	r1, r3
 800892a:	f7ff ff43 	bl	80087b4 <SSD1306_DrawPixel>
 800892e:	e014      	b.n	800895a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8008930:	4b19      	ldr	r3, [pc, #100]	@ (8008998 <SSD1306_Putc+0xf8>)
 8008932:	881a      	ldrh	r2, [r3, #0]
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	b29b      	uxth	r3, r3
 8008938:	4413      	add	r3, r2
 800893a:	b298      	uxth	r0, r3
 800893c:	4b16      	ldr	r3, [pc, #88]	@ (8008998 <SSD1306_Putc+0xf8>)
 800893e:	885a      	ldrh	r2, [r3, #2]
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	b29b      	uxth	r3, r3
 8008944:	4413      	add	r3, r2
 8008946:	b299      	uxth	r1, r3
 8008948:	79bb      	ldrb	r3, [r7, #6]
 800894a:	2b00      	cmp	r3, #0
 800894c:	bf0c      	ite	eq
 800894e:	2301      	moveq	r3, #1
 8008950:	2300      	movne	r3, #0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	461a      	mov	r2, r3
 8008956:	f7ff ff2d 	bl	80087b4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	3301      	adds	r3, #1
 800895e:	613b      	str	r3, [r7, #16]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	4293      	cmp	r3, r2
 800896a:	d3c8      	bcc.n	80088fe <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	3301      	adds	r3, #1
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	785b      	ldrb	r3, [r3, #1]
 8008976:	461a      	mov	r2, r3
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	4293      	cmp	r3, r2
 800897c:	d3ad      	bcc.n	80088da <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800897e:	4b06      	ldr	r3, [pc, #24]	@ (8008998 <SSD1306_Putc+0xf8>)
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	7812      	ldrb	r2, [r2, #0]
 8008986:	4413      	add	r3, r2
 8008988:	b29a      	uxth	r2, r3
 800898a:	4b03      	ldr	r3, [pc, #12]	@ (8008998 <SSD1306_Putc+0xf8>)
 800898c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800898e:	79fb      	ldrb	r3, [r7, #7]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20000fdc 	.word	0x20000fdc

0800899c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	4613      	mov	r3, r2
 80089a8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80089aa:	e012      	b.n	80089d2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	79fa      	ldrb	r2, [r7, #7]
 80089b2:	68b9      	ldr	r1, [r7, #8]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff ff73 	bl	80088a0 <SSD1306_Putc>
 80089ba:	4603      	mov	r3, r0
 80089bc:	461a      	mov	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d002      	beq.n	80089cc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	e008      	b.n	80089de <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	3301      	adds	r3, #1
 80089d0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e8      	bne.n	80089ac <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	781b      	ldrb	r3, [r3, #0]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80089ee:	4b08      	ldr	r3, [pc, #32]	@ (8008a10 <ssd1306_I2C_Init+0x28>)
 80089f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80089f2:	e002      	b.n	80089fa <ssd1306_I2C_Init+0x12>
		p--;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1f9      	bne.n	80089f4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	0003d090 	.word	0x0003d090

08008a14 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8008a14:	b590      	push	{r4, r7, lr}
 8008a16:	b0c7      	sub	sp, #284	@ 0x11c
 8008a18:	af02      	add	r7, sp, #8
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8008a22:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8008a26:	600a      	str	r2, [r1, #0]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a2e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008a32:	4622      	mov	r2, r4
 8008a34:	701a      	strb	r2, [r3, #0]
 8008a36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a3a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8008a3e:	4602      	mov	r2, r0
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a4a:	460a      	mov	r2, r1
 8008a4c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8008a4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a56:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008a5a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8008a5e:	7812      	ldrb	r2, [r2, #0]
 8008a60:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8008a62:	2300      	movs	r3, #0
 8008a64:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8008a68:	e015      	b.n	8008a96 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8008a6a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008a6e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008a72:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8008a76:	6812      	ldr	r2, [r2, #0]
 8008a78:	441a      	add	r2, r3
 8008a7a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008a7e:	3301      	adds	r3, #1
 8008a80:	7811      	ldrb	r1, [r2, #0]
 8008a82:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008a86:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8008a8a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8008a8c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008a90:	3301      	adds	r3, #1
 8008a92:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8008a96:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008aa0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8008aa4:	8812      	ldrh	r2, [r2, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d8df      	bhi.n	8008a6a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8008aaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008aae:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	b299      	uxth	r1, r3
 8008ab6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008aba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	f107 020c 	add.w	r2, r7, #12
 8008ac8:	200a      	movs	r0, #10
 8008aca:	9000      	str	r0, [sp, #0]
 8008acc:	4803      	ldr	r0, [pc, #12]	@ (8008adc <ssd1306_I2C_WriteMulti+0xc8>)
 8008ace:	f7fd fbd9 	bl	8006284 <HAL_I2C_Master_Transmit>
}
 8008ad2:	bf00      	nop
 8008ad4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd90      	pop	{r4, r7, pc}
 8008adc:	20000a1c 	.word	0x20000a1c

08008ae0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	71fb      	strb	r3, [r7, #7]
 8008aea:	460b      	mov	r3, r1
 8008aec:	71bb      	strb	r3, [r7, #6]
 8008aee:	4613      	mov	r3, r2
 8008af0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8008af2:	79bb      	ldrb	r3, [r7, #6]
 8008af4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8008af6:	797b      	ldrb	r3, [r7, #5]
 8008af8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8008afa:	79fb      	ldrb	r3, [r7, #7]
 8008afc:	b299      	uxth	r1, r3
 8008afe:	f107 020c 	add.w	r2, r7, #12
 8008b02:	230a      	movs	r3, #10
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	2302      	movs	r3, #2
 8008b08:	4803      	ldr	r0, [pc, #12]	@ (8008b18 <ssd1306_I2C_Write+0x38>)
 8008b0a:	f7fd fbbb 	bl	8006284 <HAL_I2C_Master_Transmit>
}
 8008b0e:	bf00      	nop
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000a1c 	.word	0x20000a1c

08008b1c <__NVIC_SetPriority>:
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	6039      	str	r1, [r7, #0]
 8008b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	db0a      	blt.n	8008b46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	490c      	ldr	r1, [pc, #48]	@ (8008b68 <__NVIC_SetPriority+0x4c>)
 8008b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b3a:	0112      	lsls	r2, r2, #4
 8008b3c:	b2d2      	uxtb	r2, r2
 8008b3e:	440b      	add	r3, r1
 8008b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008b44:	e00a      	b.n	8008b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	4908      	ldr	r1, [pc, #32]	@ (8008b6c <__NVIC_SetPriority+0x50>)
 8008b4c:	79fb      	ldrb	r3, [r7, #7]
 8008b4e:	f003 030f 	and.w	r3, r3, #15
 8008b52:	3b04      	subs	r3, #4
 8008b54:	0112      	lsls	r2, r2, #4
 8008b56:	b2d2      	uxtb	r2, r2
 8008b58:	440b      	add	r3, r1
 8008b5a:	761a      	strb	r2, [r3, #24]
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	e000e100 	.word	0xe000e100
 8008b6c:	e000ed00 	.word	0xe000ed00

08008b70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008b74:	4b05      	ldr	r3, [pc, #20]	@ (8008b8c <SysTick_Handler+0x1c>)
 8008b76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008b78:	f002 fbc2 	bl	800b300 <xTaskGetSchedulerState>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d001      	beq.n	8008b86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008b82:	f003 fab9 	bl	800c0f8 <xPortSysTickHandler>
  }
}
 8008b86:	bf00      	nop
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	e000e010 	.word	0xe000e010

08008b90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008b94:	2100      	movs	r1, #0
 8008b96:	f06f 0004 	mvn.w	r0, #4
 8008b9a:	f7ff ffbf 	bl	8008b1c <__NVIC_SetPriority>
#endif
}
 8008b9e:	bf00      	nop
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008baa:	f3ef 8305 	mrs	r3, IPSR
 8008bae:	603b      	str	r3, [r7, #0]
  return(result);
 8008bb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008bb6:	f06f 0305 	mvn.w	r3, #5
 8008bba:	607b      	str	r3, [r7, #4]
 8008bbc:	e00c      	b.n	8008bd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8008be8 <osKernelInitialize+0x44>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d105      	bne.n	8008bd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008bc6:	4b08      	ldr	r3, [pc, #32]	@ (8008be8 <osKernelInitialize+0x44>)
 8008bc8:	2201      	movs	r2, #1
 8008bca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	607b      	str	r3, [r7, #4]
 8008bd0:	e002      	b.n	8008bd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008bd8:	687b      	ldr	r3, [r7, #4]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	20000fe4 	.word	0x20000fe4

08008bec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bf2:	f3ef 8305 	mrs	r3, IPSR
 8008bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8008bf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008bfe:	f06f 0305 	mvn.w	r3, #5
 8008c02:	607b      	str	r3, [r7, #4]
 8008c04:	e010      	b.n	8008c28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c06:	4b0b      	ldr	r3, [pc, #44]	@ (8008c34 <osKernelStart+0x48>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d109      	bne.n	8008c22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c0e:	f7ff ffbf 	bl	8008b90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c12:	4b08      	ldr	r3, [pc, #32]	@ (8008c34 <osKernelStart+0x48>)
 8008c14:	2202      	movs	r2, #2
 8008c16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c18:	f001 fefe 	bl	800aa18 <vTaskStartScheduler>
      stat = osOK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	607b      	str	r3, [r7, #4]
 8008c20:	e002      	b.n	8008c28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c28:	687b      	ldr	r3, [r7, #4]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000fe4 	.word	0x20000fe4

08008c38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08e      	sub	sp, #56	@ 0x38
 8008c3c:	af04      	add	r7, sp, #16
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c44:	2300      	movs	r3, #0
 8008c46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c48:	f3ef 8305 	mrs	r3, IPSR
 8008c4c:	617b      	str	r3, [r7, #20]
  return(result);
 8008c4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d17f      	bne.n	8008d54 <osThreadNew+0x11c>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d07c      	beq.n	8008d54 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008c5a:	2380      	movs	r3, #128	@ 0x80
 8008c5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008c5e:	2318      	movs	r3, #24
 8008c60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008c66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d046      	beq.n	8008d00 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <osThreadNew+0x48>
        name = attr->name;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d008      	beq.n	8008ca6 <osThreadNew+0x6e>
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	2b38      	cmp	r3, #56	@ 0x38
 8008c98:	d805      	bhi.n	8008ca6 <osThreadNew+0x6e>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <osThreadNew+0x72>
        return (NULL);
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	e055      	b.n	8008d56 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	089b      	lsrs	r3, r3, #2
 8008cb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00f      	beq.n	8008ce2 <osThreadNew+0xaa>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8008cca:	d30a      	bcc.n	8008ce2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d006      	beq.n	8008ce2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <osThreadNew+0xaa>
        mem = 1;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	e010      	b.n	8008d04 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10c      	bne.n	8008d04 <osThreadNew+0xcc>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d108      	bne.n	8008d04 <osThreadNew+0xcc>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d104      	bne.n	8008d04 <osThreadNew+0xcc>
          mem = 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61bb      	str	r3, [r7, #24]
 8008cfe:	e001      	b.n	8008d04 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d110      	bne.n	8008d2c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d12:	9202      	str	r2, [sp, #8]
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	6a3a      	ldr	r2, [r7, #32]
 8008d1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f001 fc5b 	bl	800a5dc <xTaskCreateStatic>
 8008d26:	4603      	mov	r3, r0
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	e013      	b.n	8008d54 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d110      	bne.n	8008d54 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	f107 0310 	add.w	r3, r7, #16
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f001 fcab 	bl	800a6a0 <xTaskCreate>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d001      	beq.n	8008d54 <osThreadNew+0x11c>
            hTask = NULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008d54:	693b      	ldr	r3, [r7, #16]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3728      	adds	r7, #40	@ 0x28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d66:	f3ef 8305 	mrs	r3, IPSR
 8008d6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <osDelay+0x1c>
    stat = osErrorISR;
 8008d72:	f06f 0305 	mvn.w	r3, #5
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	e007      	b.n	8008d8a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <osDelay+0x2c>
      vTaskDelay(ticks);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f001 fe11 	bl	800a9ac <vTaskDelay>
    }
  }

  return (stat);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008da0:	f3ef 8305 	mrs	r3, IPSR
 8008da4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008da6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d174      	bne.n	8008e96 <osMutexNew+0x102>
    if (attr != NULL) {
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <osMutexNew+0x26>
      type = attr->attr_bits;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	61bb      	str	r3, [r7, #24]
 8008db8:	e001      	b.n	8008dbe <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <osMutexNew+0x3a>
      rmtx = 1U;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	e001      	b.n	8008dd2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d15c      	bne.n	8008e96 <osMutexNew+0x102>
      mem = -1;
 8008ddc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008de0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d015      	beq.n	8008e14 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d006      	beq.n	8008dfe <osMutexNew+0x6a>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	2b4f      	cmp	r3, #79	@ 0x4f
 8008df6:	d902      	bls.n	8008dfe <osMutexNew+0x6a>
          mem = 1;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	e00c      	b.n	8008e18 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d108      	bne.n	8008e18 <osMutexNew+0x84>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d104      	bne.n	8008e18 <osMutexNew+0x84>
            mem = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	613b      	str	r3, [r7, #16]
 8008e12:	e001      	b.n	8008e18 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d112      	bne.n	8008e44 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d007      	beq.n	8008e34 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	2004      	movs	r0, #4
 8008e2c:	f000 fc93 	bl	8009756 <xQueueCreateMutexStatic>
 8008e30:	61f8      	str	r0, [r7, #28]
 8008e32:	e016      	b.n	8008e62 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	f000 fc8b 	bl	8009756 <xQueueCreateMutexStatic>
 8008e40:	61f8      	str	r0, [r7, #28]
 8008e42:	e00e      	b.n	8008e62 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10b      	bne.n	8008e62 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d004      	beq.n	8008e5a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008e50:	2004      	movs	r0, #4
 8008e52:	f000 fc68 	bl	8009726 <xQueueCreateMutex>
 8008e56:	61f8      	str	r0, [r7, #28]
 8008e58:	e003      	b.n	8008e62 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008e5a:	2001      	movs	r0, #1
 8008e5c:	f000 fc63 	bl	8009726 <xQueueCreateMutex>
 8008e60:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00c      	beq.n	8008e82 <osMutexNew+0xee>
        if (attr != NULL) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <osMutexNew+0xe2>
          name = attr->name;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	e001      	b.n	8008e7a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008e7a:	68f9      	ldr	r1, [r7, #12]
 8008e7c:	69f8      	ldr	r0, [r7, #28]
 8008e7e:	f001 fb4f 	bl	800a520 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d006      	beq.n	8008e96 <osMutexNew+0x102>
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	f043 0301 	orr.w	r3, r3, #1
 8008e94:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008e96:	69fb      	ldr	r3, [r7, #28]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3720      	adds	r7, #32
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f023 0301 	bic.w	r3, r3, #1
 8008eb0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ebe:	f3ef 8305 	mrs	r3, IPSR
 8008ec2:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ec4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008eca:	f06f 0305 	mvn.w	r3, #5
 8008ece:	617b      	str	r3, [r7, #20]
 8008ed0:	e02c      	b.n	8008f2c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d103      	bne.n	8008ee0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008ed8:	f06f 0303 	mvn.w	r3, #3
 8008edc:	617b      	str	r3, [r7, #20]
 8008ede:	e025      	b.n	8008f2c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d011      	beq.n	8008f0a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6938      	ldr	r0, [r7, #16]
 8008eea:	f000 fc84 	bl	80097f6 <xQueueTakeMutexRecursive>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d01b      	beq.n	8008f2c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008efa:	f06f 0301 	mvn.w	r3, #1
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	e014      	b.n	8008f2c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008f02:	f06f 0302 	mvn.w	r3, #2
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	e010      	b.n	8008f2c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6938      	ldr	r0, [r7, #16]
 8008f0e:	f000 ff2b 	bl	8009d68 <xQueueSemaphoreTake>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d009      	beq.n	8008f2c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008f1e:	f06f 0301 	mvn.w	r3, #1
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	e002      	b.n	8008f2c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008f26:	f06f 0302 	mvn.w	r3, #2
 8008f2a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008f2c:	697b      	ldr	r3, [r7, #20]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b086      	sub	sp, #24
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f023 0301 	bic.w	r3, r3, #1
 8008f44:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f52:	f3ef 8305 	mrs	r3, IPSR
 8008f56:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f58:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008f5e:	f06f 0305 	mvn.w	r3, #5
 8008f62:	617b      	str	r3, [r7, #20]
 8008f64:	e01f      	b.n	8008fa6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d103      	bne.n	8008f74 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008f6c:	f06f 0303 	mvn.w	r3, #3
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	e018      	b.n	8008fa6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d009      	beq.n	8008f8e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008f7a:	6938      	ldr	r0, [r7, #16]
 8008f7c:	f000 fc06 	bl	800978c <xQueueGiveMutexRecursive>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d00f      	beq.n	8008fa6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008f86:	f06f 0302 	mvn.w	r3, #2
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	e00b      	b.n	8008fa6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008f8e:	2300      	movs	r3, #0
 8008f90:	2200      	movs	r2, #0
 8008f92:	2100      	movs	r1, #0
 8008f94:	6938      	ldr	r0, [r7, #16]
 8008f96:	f000 fc65 	bl	8009864 <xQueueGenericSend>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d002      	beq.n	8008fa6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008fa0:	f06f 0302 	mvn.w	r3, #2
 8008fa4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008fa6:	697b      	ldr	r3, [r7, #20]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08a      	sub	sp, #40	@ 0x28
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fc0:	f3ef 8305 	mrs	r3, IPSR
 8008fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8008fc6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d15f      	bne.n	800908c <osMessageQueueNew+0xdc>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d05c      	beq.n	800908c <osMessageQueueNew+0xdc>
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d059      	beq.n	800908c <osMessageQueueNew+0xdc>
    mem = -1;
 8008fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fdc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d029      	beq.n	8009038 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d012      	beq.n	8009012 <osMessageQueueNew+0x62>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	2b4f      	cmp	r3, #79	@ 0x4f
 8008ff2:	d90e      	bls.n	8009012 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00a      	beq.n	8009012 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	695a      	ldr	r2, [r3, #20]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68b9      	ldr	r1, [r7, #8]
 8009004:	fb01 f303 	mul.w	r3, r1, r3
 8009008:	429a      	cmp	r2, r3
 800900a:	d302      	bcc.n	8009012 <osMessageQueueNew+0x62>
        mem = 1;
 800900c:	2301      	movs	r3, #1
 800900e:	61bb      	str	r3, [r7, #24]
 8009010:	e014      	b.n	800903c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d110      	bne.n	800903c <osMessageQueueNew+0x8c>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10c      	bne.n	800903c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009026:	2b00      	cmp	r3, #0
 8009028:	d108      	bne.n	800903c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <osMessageQueueNew+0x8c>
          mem = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	61bb      	str	r3, [r7, #24]
 8009036:	e001      	b.n	800903c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009038:	2300      	movs	r3, #0
 800903a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d10b      	bne.n	800905a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	691a      	ldr	r2, [r3, #16]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	2100      	movs	r1, #0
 800904c:	9100      	str	r1, [sp, #0]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 fa73 	bl	800953c <xQueueGenericCreateStatic>
 8009056:	61f8      	str	r0, [r7, #28]
 8009058:	e008      	b.n	800906c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d105      	bne.n	800906c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009060:	2200      	movs	r2, #0
 8009062:	68b9      	ldr	r1, [r7, #8]
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 fae6 	bl	8009636 <xQueueGenericCreate>
 800906a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00c      	beq.n	800908c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	617b      	str	r3, [r7, #20]
 800907e:	e001      	b.n	8009084 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009084:	6979      	ldr	r1, [r7, #20]
 8009086:	69f8      	ldr	r0, [r7, #28]
 8009088:	f001 fa4a 	bl	800a520 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800908c:	69fb      	ldr	r3, [r7, #28]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3720      	adds	r7, #32
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	603b      	str	r3, [r7, #0]
 80090a4:	4613      	mov	r3, r2
 80090a6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090b0:	f3ef 8305 	mrs	r3, IPSR
 80090b4:	617b      	str	r3, [r7, #20]
  return(result);
 80090b6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d028      	beq.n	800910e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d005      	beq.n	80090ce <osMessageQueuePut+0x36>
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <osMessageQueuePut+0x36>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80090ce:	f06f 0303 	mvn.w	r3, #3
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	e038      	b.n	8009148 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80090da:	f107 0210 	add.w	r2, r7, #16
 80090de:	2300      	movs	r3, #0
 80090e0:	68b9      	ldr	r1, [r7, #8]
 80090e2:	69b8      	ldr	r0, [r7, #24]
 80090e4:	f000 fcc0 	bl	8009a68 <xQueueGenericSendFromISR>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d003      	beq.n	80090f6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80090ee:	f06f 0302 	mvn.w	r3, #2
 80090f2:	61fb      	str	r3, [r7, #28]
 80090f4:	e028      	b.n	8009148 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d025      	beq.n	8009148 <osMessageQueuePut+0xb0>
 80090fc:	4b15      	ldr	r3, [pc, #84]	@ (8009154 <osMessageQueuePut+0xbc>)
 80090fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	e01c      	b.n	8009148 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <osMessageQueuePut+0x82>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d103      	bne.n	8009122 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800911a:	f06f 0303 	mvn.w	r3, #3
 800911e:	61fb      	str	r3, [r7, #28]
 8009120:	e012      	b.n	8009148 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009122:	2300      	movs	r3, #0
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	69b8      	ldr	r0, [r7, #24]
 800912a:	f000 fb9b 	bl	8009864 <xQueueGenericSend>
 800912e:	4603      	mov	r3, r0
 8009130:	2b01      	cmp	r3, #1
 8009132:	d009      	beq.n	8009148 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800913a:	f06f 0301 	mvn.w	r3, #1
 800913e:	61fb      	str	r3, [r7, #28]
 8009140:	e002      	b.n	8009148 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009142:	f06f 0302 	mvn.w	r3, #2
 8009146:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009148:	69fb      	ldr	r3, [r7, #28]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	e000ed04 	.word	0xe000ed04

08009158 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800916a:	2300      	movs	r3, #0
 800916c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800916e:	f3ef 8305 	mrs	r3, IPSR
 8009172:	617b      	str	r3, [r7, #20]
  return(result);
 8009174:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009176:	2b00      	cmp	r3, #0
 8009178:	d028      	beq.n	80091cc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d005      	beq.n	800918c <osMessageQueueGet+0x34>
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <osMessageQueueGet+0x34>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800918c:	f06f 0303 	mvn.w	r3, #3
 8009190:	61fb      	str	r3, [r7, #28]
 8009192:	e037      	b.n	8009204 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009194:	2300      	movs	r3, #0
 8009196:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009198:	f107 0310 	add.w	r3, r7, #16
 800919c:	461a      	mov	r2, r3
 800919e:	68b9      	ldr	r1, [r7, #8]
 80091a0:	69b8      	ldr	r0, [r7, #24]
 80091a2:	f000 ffd5 	bl	800a150 <xQueueReceiveFromISR>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d003      	beq.n	80091b4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80091ac:	f06f 0302 	mvn.w	r3, #2
 80091b0:	61fb      	str	r3, [r7, #28]
 80091b2:	e027      	b.n	8009204 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d024      	beq.n	8009204 <osMessageQueueGet+0xac>
 80091ba:	4b15      	ldr	r3, [pc, #84]	@ (8009210 <osMessageQueueGet+0xb8>)
 80091bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	e01b      	b.n	8009204 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <osMessageQueueGet+0x80>
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d103      	bne.n	80091e0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80091d8:	f06f 0303 	mvn.w	r3, #3
 80091dc:	61fb      	str	r3, [r7, #28]
 80091de:	e011      	b.n	8009204 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	68b9      	ldr	r1, [r7, #8]
 80091e4:	69b8      	ldr	r0, [r7, #24]
 80091e6:	f000 fcdd 	bl	8009ba4 <xQueueReceive>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d009      	beq.n	8009204 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80091f6:	f06f 0301 	mvn.w	r3, #1
 80091fa:	61fb      	str	r3, [r7, #28]
 80091fc:	e002      	b.n	8009204 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80091fe:	f06f 0302 	mvn.w	r3, #2
 8009202:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009204:	69fb      	ldr	r3, [r7, #28]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3720      	adds	r7, #32
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	e000ed04 	.word	0xe000ed04

08009214 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d102      	bne.n	800922c <osMessageQueueGetCount+0x18>
    count = 0U;
 8009226:	2300      	movs	r3, #0
 8009228:	617b      	str	r3, [r7, #20]
 800922a:	e00e      	b.n	800924a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800922c:	f3ef 8305 	mrs	r3, IPSR
 8009230:	60fb      	str	r3, [r7, #12]
  return(result);
 8009232:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009234:	2b00      	cmp	r3, #0
 8009236:	d004      	beq.n	8009242 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009238:	6938      	ldr	r0, [r7, #16]
 800923a:	f001 f82a 	bl	800a292 <uxQueueMessagesWaitingFromISR>
 800923e:	6178      	str	r0, [r7, #20]
 8009240:	e003      	b.n	800924a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009242:	6938      	ldr	r0, [r7, #16]
 8009244:	f001 f806 	bl	800a254 <uxQueueMessagesWaiting>
 8009248:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800924a:	697b      	ldr	r3, [r7, #20]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009260:	f3ef 8305 	mrs	r3, IPSR
 8009264:	60fb      	str	r3, [r7, #12]
  return(result);
 8009266:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800926c:	f06f 0305 	mvn.w	r3, #5
 8009270:	617b      	str	r3, [r7, #20]
 8009272:	e00c      	b.n	800928e <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d103      	bne.n	8009282 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800927a:	f06f 0303 	mvn.w	r3, #3
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	e005      	b.n	800928e <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8009282:	2300      	movs	r3, #0
 8009284:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8009286:	2100      	movs	r1, #0
 8009288:	6938      	ldr	r0, [r7, #16]
 800928a:	f000 f8ed 	bl	8009468 <xQueueGenericReset>
  }

  return (stat);
 800928e:	697b      	ldr	r3, [r7, #20]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4a07      	ldr	r2, [pc, #28]	@ (80092c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80092a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	4a06      	ldr	r2, [pc, #24]	@ (80092c8 <vApplicationGetIdleTaskMemory+0x30>)
 80092ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2280      	movs	r2, #128	@ 0x80
 80092b4:	601a      	str	r2, [r3, #0]
}
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20000fe8 	.word	0x20000fe8
 80092c8:	20001168 	.word	0x20001168

080092cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4a07      	ldr	r2, [pc, #28]	@ (80092f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80092dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	4a06      	ldr	r2, [pc, #24]	@ (80092fc <vApplicationGetTimerTaskMemory+0x30>)
 80092e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80092ea:	601a      	str	r2, [r3, #0]
}
 80092ec:	bf00      	nop
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	20001368 	.word	0x20001368
 80092fc:	200014e8 	.word	0x200014e8

08009300 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f103 0208 	add.w	r2, r3, #8
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009318:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f103 0208 	add.w	r2, r3, #8
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f103 0208 	add.w	r2, r3, #8
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800935a:	b480      	push	{r7}
 800935c:	b085      	sub	sp, #20
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	1c5a      	adds	r2, r3, #1
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	601a      	str	r2, [r3, #0]
}
 8009396:	bf00      	nop
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093a2:	b480      	push	{r7}
 80093a4:	b085      	sub	sp, #20
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093b8:	d103      	bne.n	80093c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	e00c      	b.n	80093dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3308      	adds	r3, #8
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	e002      	b.n	80093d0 <vListInsert+0x2e>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d2f6      	bcs.n	80093ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	685a      	ldr	r2, [r3, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	683a      	ldr	r2, [r7, #0]
 80093f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	601a      	str	r2, [r3, #0]
}
 8009408:	bf00      	nop
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	6892      	ldr	r2, [r2, #8]
 800942a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	6852      	ldr	r2, [r2, #4]
 8009434:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	429a      	cmp	r2, r3
 800943e:	d103      	bne.n	8009448 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	1e5a      	subs	r2, r3, #1
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10b      	bne.n	8009494 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800948e:	bf00      	nop
 8009490:	bf00      	nop
 8009492:	e7fd      	b.n	8009490 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009494:	f002 fda0 	bl	800bfd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a0:	68f9      	ldr	r1, [r7, #12]
 80094a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80094a4:	fb01 f303 	mul.w	r3, r1, r3
 80094a8:	441a      	add	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c4:	3b01      	subs	r3, #1
 80094c6:	68f9      	ldr	r1, [r7, #12]
 80094c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80094ca:	fb01 f303 	mul.w	r3, r1, r3
 80094ce:	441a      	add	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	22ff      	movs	r2, #255	@ 0xff
 80094d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	22ff      	movs	r2, #255	@ 0xff
 80094e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d114      	bne.n	8009514 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d01a      	beq.n	8009528 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3310      	adds	r3, #16
 80094f6:	4618      	mov	r0, r3
 80094f8:	f001 fd2c 	bl	800af54 <xTaskRemoveFromEventList>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d012      	beq.n	8009528 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009502:	4b0d      	ldr	r3, [pc, #52]	@ (8009538 <xQueueGenericReset+0xd0>)
 8009504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	e009      	b.n	8009528 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3310      	adds	r3, #16
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff fef1 	bl	8009300 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3324      	adds	r3, #36	@ 0x24
 8009522:	4618      	mov	r0, r3
 8009524:	f7ff feec 	bl	8009300 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009528:	f002 fd88 	bl	800c03c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800952c:	2301      	movs	r3, #1
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08e      	sub	sp, #56	@ 0x38
 8009540:	af02      	add	r7, sp, #8
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10b      	bne.n	8009568 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10b      	bne.n	8009586 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	e7fd      	b.n	8009582 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <xQueueGenericCreateStatic+0x56>
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <xQueueGenericCreateStatic+0x5a>
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <xQueueGenericCreateStatic+0x5c>
 8009596:	2300      	movs	r3, #0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10b      	bne.n	80095b4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	623b      	str	r3, [r7, #32]
}
 80095ae:	bf00      	nop
 80095b0:	bf00      	nop
 80095b2:	e7fd      	b.n	80095b0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d102      	bne.n	80095c0 <xQueueGenericCreateStatic+0x84>
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <xQueueGenericCreateStatic+0x88>
 80095c0:	2301      	movs	r3, #1
 80095c2:	e000      	b.n	80095c6 <xQueueGenericCreateStatic+0x8a>
 80095c4:	2300      	movs	r3, #0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10b      	bne.n	80095e2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	61fb      	str	r3, [r7, #28]
}
 80095dc:	bf00      	nop
 80095de:	bf00      	nop
 80095e0:	e7fd      	b.n	80095de <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095e2:	2350      	movs	r3, #80	@ 0x50
 80095e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b50      	cmp	r3, #80	@ 0x50
 80095ea:	d00b      	beq.n	8009604 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	61bb      	str	r3, [r7, #24]
}
 80095fe:	bf00      	nop
 8009600:	bf00      	nop
 8009602:	e7fd      	b.n	8009600 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009604:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800960a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00d      	beq.n	800962c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009618:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800961c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4613      	mov	r3, r2
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 f840 	bl	80096ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800962c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800962e:	4618      	mov	r0, r3
 8009630:	3730      	adds	r7, #48	@ 0x30
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009636:	b580      	push	{r7, lr}
 8009638:	b08a      	sub	sp, #40	@ 0x28
 800963a:	af02      	add	r7, sp, #8
 800963c:	60f8      	str	r0, [r7, #12]
 800963e:	60b9      	str	r1, [r7, #8]
 8009640:	4613      	mov	r3, r2
 8009642:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10b      	bne.n	8009662 <xQueueGenericCreate+0x2c>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	613b      	str	r3, [r7, #16]
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	e7fd      	b.n	800965e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	fb02 f303 	mul.w	r3, r2, r3
 800966a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	3350      	adds	r3, #80	@ 0x50
 8009670:	4618      	mov	r0, r3
 8009672:	f002 fdd3 	bl	800c21c <pvPortMalloc>
 8009676:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d011      	beq.n	80096a2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	3350      	adds	r3, #80	@ 0x50
 8009686:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009690:	79fa      	ldrb	r2, [r7, #7]
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	4613      	mov	r3, r2
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 f805 	bl	80096ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096a2:	69bb      	ldr	r3, [r7, #24]
	}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3720      	adds	r7, #32
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d103      	bne.n	80096c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	e002      	b.n	80096ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096da:	2101      	movs	r1, #1
 80096dc:	69b8      	ldr	r0, [r7, #24]
 80096de:	f7ff fec3 	bl	8009468 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	78fa      	ldrb	r2, [r7, #3]
 80096e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00e      	beq.n	800971e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009712:	2300      	movs	r3, #0
 8009714:	2200      	movs	r2, #0
 8009716:	2100      	movs	r1, #0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f8a3 	bl	8009864 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800971e:	bf00      	nop
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009726:	b580      	push	{r7, lr}
 8009728:	b086      	sub	sp, #24
 800972a:	af00      	add	r7, sp, #0
 800972c:	4603      	mov	r3, r0
 800972e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009730:	2301      	movs	r3, #1
 8009732:	617b      	str	r3, [r7, #20]
 8009734:	2300      	movs	r3, #0
 8009736:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009738:	79fb      	ldrb	r3, [r7, #7]
 800973a:	461a      	mov	r2, r3
 800973c:	6939      	ldr	r1, [r7, #16]
 800973e:	6978      	ldr	r0, [r7, #20]
 8009740:	f7ff ff79 	bl	8009636 <xQueueGenericCreate>
 8009744:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff ffd3 	bl	80096f2 <prvInitialiseMutex>

		return xNewQueue;
 800974c:	68fb      	ldr	r3, [r7, #12]
	}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009756:	b580      	push	{r7, lr}
 8009758:	b088      	sub	sp, #32
 800975a:	af02      	add	r7, sp, #8
 800975c:	4603      	mov	r3, r0
 800975e:	6039      	str	r1, [r7, #0]
 8009760:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009762:	2301      	movs	r3, #1
 8009764:	617b      	str	r3, [r7, #20]
 8009766:	2300      	movs	r3, #0
 8009768:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2200      	movs	r2, #0
 8009772:	6939      	ldr	r1, [r7, #16]
 8009774:	6978      	ldr	r0, [r7, #20]
 8009776:	f7ff fee1 	bl	800953c <xQueueGenericCreateStatic>
 800977a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f7ff ffb8 	bl	80096f2 <prvInitialiseMutex>

		return xNewQueue;
 8009782:	68fb      	ldr	r3, [r7, #12]
	}
 8009784:	4618      	mov	r0, r3
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800978c:	b590      	push	{r4, r7, lr}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10b      	bne.n	80097b6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	60fb      	str	r3, [r7, #12]
}
 80097b0:	bf00      	nop
 80097b2:	bf00      	nop
 80097b4:	e7fd      	b.n	80097b2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	689c      	ldr	r4, [r3, #8]
 80097ba:	f001 fd91 	bl	800b2e0 <xTaskGetCurrentTaskHandle>
 80097be:	4603      	mov	r3, r0
 80097c0:	429c      	cmp	r4, r3
 80097c2:	d111      	bne.n	80097e8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	1e5a      	subs	r2, r3, #1
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d105      	bne.n	80097e2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80097d6:	2300      	movs	r3, #0
 80097d8:	2200      	movs	r2, #0
 80097da:	2100      	movs	r1, #0
 80097dc:	6938      	ldr	r0, [r7, #16]
 80097de:	f000 f841 	bl	8009864 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80097e2:	2301      	movs	r3, #1
 80097e4:	617b      	str	r3, [r7, #20]
 80097e6:	e001      	b.n	80097ec <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80097ec:	697b      	ldr	r3, [r7, #20]
	}
 80097ee:	4618      	mov	r0, r3
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd90      	pop	{r4, r7, pc}

080097f6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80097f6:	b590      	push	{r4, r7, lr}
 80097f8:	b087      	sub	sp, #28
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10b      	bne.n	8009822 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	60fb      	str	r3, [r7, #12]
}
 800981c:	bf00      	nop
 800981e:	bf00      	nop
 8009820:	e7fd      	b.n	800981e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	689c      	ldr	r4, [r3, #8]
 8009826:	f001 fd5b 	bl	800b2e0 <xTaskGetCurrentTaskHandle>
 800982a:	4603      	mov	r3, r0
 800982c:	429c      	cmp	r4, r3
 800982e:	d107      	bne.n	8009840 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800983a:	2301      	movs	r3, #1
 800983c:	617b      	str	r3, [r7, #20]
 800983e:	e00c      	b.n	800985a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6938      	ldr	r0, [r7, #16]
 8009844:	f000 fa90 	bl	8009d68 <xQueueSemaphoreTake>
 8009848:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d004      	beq.n	800985a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	1c5a      	adds	r2, r3, #1
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800985a:	697b      	ldr	r3, [r7, #20]
	}
 800985c:	4618      	mov	r0, r3
 800985e:	371c      	adds	r7, #28
 8009860:	46bd      	mov	sp, r7
 8009862:	bd90      	pop	{r4, r7, pc}

08009864 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08e      	sub	sp, #56	@ 0x38
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009872:	2300      	movs	r3, #0
 8009874:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10b      	bne.n	8009898 <xQueueGenericSend+0x34>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009892:	bf00      	nop
 8009894:	bf00      	nop
 8009896:	e7fd      	b.n	8009894 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d103      	bne.n	80098a6 <xQueueGenericSend+0x42>
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d101      	bne.n	80098aa <xQueueGenericSend+0x46>
 80098a6:	2301      	movs	r3, #1
 80098a8:	e000      	b.n	80098ac <xQueueGenericSend+0x48>
 80098aa:	2300      	movs	r3, #0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10b      	bne.n	80098c8 <xQueueGenericSend+0x64>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80098c2:	bf00      	nop
 80098c4:	bf00      	nop
 80098c6:	e7fd      	b.n	80098c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d103      	bne.n	80098d6 <xQueueGenericSend+0x72>
 80098ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d101      	bne.n	80098da <xQueueGenericSend+0x76>
 80098d6:	2301      	movs	r3, #1
 80098d8:	e000      	b.n	80098dc <xQueueGenericSend+0x78>
 80098da:	2300      	movs	r3, #0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10b      	bne.n	80098f8 <xQueueGenericSend+0x94>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	623b      	str	r3, [r7, #32]
}
 80098f2:	bf00      	nop
 80098f4:	bf00      	nop
 80098f6:	e7fd      	b.n	80098f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098f8:	f001 fd02 	bl	800b300 <xTaskGetSchedulerState>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d102      	bne.n	8009908 <xQueueGenericSend+0xa4>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <xQueueGenericSend+0xa8>
 8009908:	2301      	movs	r3, #1
 800990a:	e000      	b.n	800990e <xQueueGenericSend+0xaa>
 800990c:	2300      	movs	r3, #0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10b      	bne.n	800992a <xQueueGenericSend+0xc6>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	61fb      	str	r3, [r7, #28]
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop
 8009928:	e7fd      	b.n	8009926 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800992a:	f002 fb55 	bl	800bfd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009936:	429a      	cmp	r2, r3
 8009938:	d302      	bcc.n	8009940 <xQueueGenericSend+0xdc>
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	2b02      	cmp	r3, #2
 800993e:	d129      	bne.n	8009994 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	68b9      	ldr	r1, [r7, #8]
 8009944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009946:	f000 fcdb 	bl	800a300 <prvCopyDataToQueue>
 800994a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009950:	2b00      	cmp	r3, #0
 8009952:	d010      	beq.n	8009976 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009956:	3324      	adds	r3, #36	@ 0x24
 8009958:	4618      	mov	r0, r3
 800995a:	f001 fafb 	bl	800af54 <xTaskRemoveFromEventList>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d013      	beq.n	800998c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009964:	4b3f      	ldr	r3, [pc, #252]	@ (8009a64 <xQueueGenericSend+0x200>)
 8009966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800996a:	601a      	str	r2, [r3, #0]
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	f3bf 8f6f 	isb	sy
 8009974:	e00a      	b.n	800998c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009978:	2b00      	cmp	r3, #0
 800997a:	d007      	beq.n	800998c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800997c:	4b39      	ldr	r3, [pc, #228]	@ (8009a64 <xQueueGenericSend+0x200>)
 800997e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800998c:	f002 fb56 	bl	800c03c <vPortExitCritical>
				return pdPASS;
 8009990:	2301      	movs	r3, #1
 8009992:	e063      	b.n	8009a5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d103      	bne.n	80099a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800999a:	f002 fb4f 	bl	800c03c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800999e:	2300      	movs	r3, #0
 80099a0:	e05c      	b.n	8009a5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d106      	bne.n	80099b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099a8:	f107 0314 	add.w	r3, r7, #20
 80099ac:	4618      	mov	r0, r3
 80099ae:	f001 fb35 	bl	800b01c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099b2:	2301      	movs	r3, #1
 80099b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099b6:	f002 fb41 	bl	800c03c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099ba:	f001 f89d 	bl	800aaf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099be:	f002 fb0b 	bl	800bfd8 <vPortEnterCritical>
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099c8:	b25b      	sxtb	r3, r3
 80099ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099ce:	d103      	bne.n	80099d8 <xQueueGenericSend+0x174>
 80099d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099de:	b25b      	sxtb	r3, r3
 80099e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099e4:	d103      	bne.n	80099ee <xQueueGenericSend+0x18a>
 80099e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099ee:	f002 fb25 	bl	800c03c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099f2:	1d3a      	adds	r2, r7, #4
 80099f4:	f107 0314 	add.w	r3, r7, #20
 80099f8:	4611      	mov	r1, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f001 fb24 	bl	800b048 <xTaskCheckForTimeOut>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d124      	bne.n	8009a50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a08:	f000 fd72 	bl	800a4f0 <prvIsQueueFull>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d018      	beq.n	8009a44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a14:	3310      	adds	r3, #16
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f001 fa48 	bl	800aeb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a22:	f000 fcfd 	bl	800a420 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a26:	f001 f875 	bl	800ab14 <xTaskResumeAll>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f47f af7c 	bne.w	800992a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009a32:	4b0c      	ldr	r3, [pc, #48]	@ (8009a64 <xQueueGenericSend+0x200>)
 8009a34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	e772      	b.n	800992a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a46:	f000 fceb 	bl	800a420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a4a:	f001 f863 	bl	800ab14 <xTaskResumeAll>
 8009a4e:	e76c      	b.n	800992a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a52:	f000 fce5 	bl	800a420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a56:	f001 f85d 	bl	800ab14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3738      	adds	r7, #56	@ 0x38
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	e000ed04 	.word	0xe000ed04

08009a68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b090      	sub	sp, #64	@ 0x40
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10b      	bne.n	8009a98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009a92:	bf00      	nop
 8009a94:	bf00      	nop
 8009a96:	e7fd      	b.n	8009a94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d103      	bne.n	8009aa6 <xQueueGenericSendFromISR+0x3e>
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <xQueueGenericSendFromISR+0x42>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e000      	b.n	8009aac <xQueueGenericSendFromISR+0x44>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10b      	bne.n	8009ac8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009ac2:	bf00      	nop
 8009ac4:	bf00      	nop
 8009ac6:	e7fd      	b.n	8009ac4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d103      	bne.n	8009ad6 <xQueueGenericSendFromISR+0x6e>
 8009ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d101      	bne.n	8009ada <xQueueGenericSendFromISR+0x72>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e000      	b.n	8009adc <xQueueGenericSendFromISR+0x74>
 8009ada:	2300      	movs	r3, #0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10b      	bne.n	8009af8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	623b      	str	r3, [r7, #32]
}
 8009af2:	bf00      	nop
 8009af4:	bf00      	nop
 8009af6:	e7fd      	b.n	8009af4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009af8:	f002 fb4e 	bl	800c198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009afc:	f3ef 8211 	mrs	r2, BASEPRI
 8009b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	61fa      	str	r2, [r7, #28]
 8009b12:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b14:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b16:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d302      	bcc.n	8009b2a <xQueueGenericSendFromISR+0xc2>
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d12f      	bne.n	8009b8a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	68b9      	ldr	r1, [r7, #8]
 8009b3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b40:	f000 fbde 	bl	800a300 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b4c:	d112      	bne.n	8009b74 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d016      	beq.n	8009b84 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b58:	3324      	adds	r3, #36	@ 0x24
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f001 f9fa 	bl	800af54 <xTaskRemoveFromEventList>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00e      	beq.n	8009b84 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00b      	beq.n	8009b84 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	e007      	b.n	8009b84 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009b78:	3301      	adds	r3, #1
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	b25a      	sxtb	r2, r3
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009b84:	2301      	movs	r3, #1
 8009b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009b88:	e001      	b.n	8009b8e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b90:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3740      	adds	r7, #64	@ 0x40
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08c      	sub	sp, #48	@ 0x30
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10b      	bne.n	8009bd6 <xQueueReceive+0x32>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	623b      	str	r3, [r7, #32]
}
 8009bd0:	bf00      	nop
 8009bd2:	bf00      	nop
 8009bd4:	e7fd      	b.n	8009bd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d103      	bne.n	8009be4 <xQueueReceive+0x40>
 8009bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <xQueueReceive+0x44>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e000      	b.n	8009bea <xQueueReceive+0x46>
 8009be8:	2300      	movs	r3, #0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10b      	bne.n	8009c06 <xQueueReceive+0x62>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	61fb      	str	r3, [r7, #28]
}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	e7fd      	b.n	8009c02 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c06:	f001 fb7b 	bl	800b300 <xTaskGetSchedulerState>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d102      	bne.n	8009c16 <xQueueReceive+0x72>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <xQueueReceive+0x76>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e000      	b.n	8009c1c <xQueueReceive+0x78>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10b      	bne.n	8009c38 <xQueueReceive+0x94>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	61bb      	str	r3, [r7, #24]
}
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	e7fd      	b.n	8009c34 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c38:	f002 f9ce 	bl	800bfd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c40:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d01f      	beq.n	8009c88 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c48:	68b9      	ldr	r1, [r7, #8]
 8009c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c4c:	f000 fbc2 	bl	800a3d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c52:	1e5a      	subs	r2, r3, #1
 8009c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c56:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00f      	beq.n	8009c80 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c62:	3310      	adds	r3, #16
 8009c64:	4618      	mov	r0, r3
 8009c66:	f001 f975 	bl	800af54 <xTaskRemoveFromEventList>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d007      	beq.n	8009c80 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c70:	4b3c      	ldr	r3, [pc, #240]	@ (8009d64 <xQueueReceive+0x1c0>)
 8009c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c76:	601a      	str	r2, [r3, #0]
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c80:	f002 f9dc 	bl	800c03c <vPortExitCritical>
				return pdPASS;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e069      	b.n	8009d5c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d103      	bne.n	8009c96 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c8e:	f002 f9d5 	bl	800c03c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c92:	2300      	movs	r3, #0
 8009c94:	e062      	b.n	8009d5c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d106      	bne.n	8009caa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c9c:	f107 0310 	add.w	r3, r7, #16
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f001 f9bb 	bl	800b01c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009caa:	f002 f9c7 	bl	800c03c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cae:	f000 ff23 	bl	800aaf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cb2:	f002 f991 	bl	800bfd8 <vPortEnterCritical>
 8009cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cbc:	b25b      	sxtb	r3, r3
 8009cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cc2:	d103      	bne.n	8009ccc <xQueueReceive+0x128>
 8009cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cd2:	b25b      	sxtb	r3, r3
 8009cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cd8:	d103      	bne.n	8009ce2 <xQueueReceive+0x13e>
 8009cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ce2:	f002 f9ab 	bl	800c03c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ce6:	1d3a      	adds	r2, r7, #4
 8009ce8:	f107 0310 	add.w	r3, r7, #16
 8009cec:	4611      	mov	r1, r2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f001 f9aa 	bl	800b048 <xTaskCheckForTimeOut>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d123      	bne.n	8009d42 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cfc:	f000 fbe2 	bl	800a4c4 <prvIsQueueEmpty>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d017      	beq.n	8009d36 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	3324      	adds	r3, #36	@ 0x24
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f001 f8ce 	bl	800aeb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d16:	f000 fb83 	bl	800a420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d1a:	f000 fefb 	bl	800ab14 <xTaskResumeAll>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d189      	bne.n	8009c38 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009d24:	4b0f      	ldr	r3, [pc, #60]	@ (8009d64 <xQueueReceive+0x1c0>)
 8009d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d2a:	601a      	str	r2, [r3, #0]
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	e780      	b.n	8009c38 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d38:	f000 fb72 	bl	800a420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d3c:	f000 feea 	bl	800ab14 <xTaskResumeAll>
 8009d40:	e77a      	b.n	8009c38 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d44:	f000 fb6c 	bl	800a420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d48:	f000 fee4 	bl	800ab14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d4e:	f000 fbb9 	bl	800a4c4 <prvIsQueueEmpty>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f43f af6f 	beq.w	8009c38 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3730      	adds	r7, #48	@ 0x30
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	e000ed04 	.word	0xe000ed04

08009d68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b08e      	sub	sp, #56	@ 0x38
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d72:	2300      	movs	r3, #0
 8009d74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10b      	bne.n	8009d9c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	623b      	str	r3, [r7, #32]
}
 8009d96:	bf00      	nop
 8009d98:	bf00      	nop
 8009d9a:	e7fd      	b.n	8009d98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00b      	beq.n	8009dbc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	61fb      	str	r3, [r7, #28]
}
 8009db6:	bf00      	nop
 8009db8:	bf00      	nop
 8009dba:	e7fd      	b.n	8009db8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dbc:	f001 faa0 	bl	800b300 <xTaskGetSchedulerState>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <xQueueSemaphoreTake+0x64>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <xQueueSemaphoreTake+0x68>
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e000      	b.n	8009dd2 <xQueueSemaphoreTake+0x6a>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10b      	bne.n	8009dee <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	61bb      	str	r3, [r7, #24]
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	e7fd      	b.n	8009dea <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dee:	f002 f8f3 	bl	800bfd8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d024      	beq.n	8009e48 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e00:	1e5a      	subs	r2, r3, #1
 8009e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e04:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d104      	bne.n	8009e18 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009e0e:	f001 fbf1 	bl	800b5f4 <pvTaskIncrementMutexHeldCount>
 8009e12:	4602      	mov	r2, r0
 8009e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e16:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00f      	beq.n	8009e40 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e22:	3310      	adds	r3, #16
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 f895 	bl	800af54 <xTaskRemoveFromEventList>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d007      	beq.n	8009e40 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e30:	4b54      	ldr	r3, [pc, #336]	@ (8009f84 <xQueueSemaphoreTake+0x21c>)
 8009e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e40:	f002 f8fc 	bl	800c03c <vPortExitCritical>
				return pdPASS;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e098      	b.n	8009f7a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d112      	bne.n	8009e74 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	617b      	str	r3, [r7, #20]
}
 8009e66:	bf00      	nop
 8009e68:	bf00      	nop
 8009e6a:	e7fd      	b.n	8009e68 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009e6c:	f002 f8e6 	bl	800c03c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e70:	2300      	movs	r3, #0
 8009e72:	e082      	b.n	8009f7a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d106      	bne.n	8009e88 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e7a:	f107 030c 	add.w	r3, r7, #12
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f001 f8cc 	bl	800b01c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e84:	2301      	movs	r3, #1
 8009e86:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e88:	f002 f8d8 	bl	800c03c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e8c:	f000 fe34 	bl	800aaf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e90:	f002 f8a2 	bl	800bfd8 <vPortEnterCritical>
 8009e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e9a:	b25b      	sxtb	r3, r3
 8009e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ea0:	d103      	bne.n	8009eaa <xQueueSemaphoreTake+0x142>
 8009ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009eb0:	b25b      	sxtb	r3, r3
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009eb6:	d103      	bne.n	8009ec0 <xQueueSemaphoreTake+0x158>
 8009eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ec0:	f002 f8bc 	bl	800c03c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ec4:	463a      	mov	r2, r7
 8009ec6:	f107 030c 	add.w	r3, r7, #12
 8009eca:	4611      	mov	r1, r2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f001 f8bb 	bl	800b048 <xTaskCheckForTimeOut>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d132      	bne.n	8009f3e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ed8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009eda:	f000 faf3 	bl	800a4c4 <prvIsQueueEmpty>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d026      	beq.n	8009f32 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d109      	bne.n	8009f00 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009eec:	f002 f874 	bl	800bfd8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f001 fa21 	bl	800b33c <xTaskPriorityInherit>
 8009efa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009efc:	f002 f89e 	bl	800c03c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f02:	3324      	adds	r3, #36	@ 0x24
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	4611      	mov	r1, r2
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 ffd1 	bl	800aeb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f10:	f000 fa86 	bl	800a420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f14:	f000 fdfe 	bl	800ab14 <xTaskResumeAll>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f47f af67 	bne.w	8009dee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009f20:	4b18      	ldr	r3, [pc, #96]	@ (8009f84 <xQueueSemaphoreTake+0x21c>)
 8009f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	e75d      	b.n	8009dee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009f32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f34:	f000 fa74 	bl	800a420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f38:	f000 fdec 	bl	800ab14 <xTaskResumeAll>
 8009f3c:	e757      	b.n	8009dee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009f3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f40:	f000 fa6e 	bl	800a420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f44:	f000 fde6 	bl	800ab14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f4a:	f000 fabb 	bl	800a4c4 <prvIsQueueEmpty>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f43f af4c 	beq.w	8009dee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00d      	beq.n	8009f78 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009f5c:	f002 f83c 	bl	800bfd8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009f60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f62:	f000 f9b5 	bl	800a2d0 <prvGetDisinheritPriorityAfterTimeout>
 8009f66:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f001 fabc 	bl	800b4ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009f74:	f002 f862 	bl	800c03c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3738      	adds	r7, #56	@ 0x38
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	e000ed04 	.word	0xe000ed04

08009f88 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08e      	sub	sp, #56	@ 0x38
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f94:	2300      	movs	r3, #0
 8009f96:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10b      	bne.n	8009fba <xQueuePeek+0x32>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop
 8009fb8:	e7fd      	b.n	8009fb6 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d103      	bne.n	8009fc8 <xQueuePeek+0x40>
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <xQueuePeek+0x44>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e000      	b.n	8009fce <xQueuePeek+0x46>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10b      	bne.n	8009fea <xQueuePeek+0x62>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	623b      	str	r3, [r7, #32]
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop
 8009fe8:	e7fd      	b.n	8009fe6 <xQueuePeek+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fea:	f001 f989 	bl	800b300 <xTaskGetSchedulerState>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d102      	bne.n	8009ffa <xQueuePeek+0x72>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <xQueuePeek+0x76>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e000      	b.n	800a000 <xQueuePeek+0x78>
 8009ffe:	2300      	movs	r3, #0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10b      	bne.n	800a01c <xQueuePeek+0x94>
	__asm volatile
 800a004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	61fb      	str	r3, [r7, #28]
}
 800a016:	bf00      	nop
 800a018:	bf00      	nop
 800a01a:	e7fd      	b.n	800a018 <xQueuePeek+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a01c:	f001 ffdc 	bl	800bfd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a024:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d021      	beq.n	800a070 <xQueuePeek+0xe8>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a032:	68b9      	ldr	r1, [r7, #8]
 800a034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a036:	f000 f9cd 	bl	800a3d4 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 800a03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a03e:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00f      	beq.n	800a068 <xQueuePeek+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04a:	3324      	adds	r3, #36	@ 0x24
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 ff81 	bl	800af54 <xTaskRemoveFromEventList>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d007      	beq.n	800a068 <xQueuePeek+0xe0>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 800a058:	4b3c      	ldr	r3, [pc, #240]	@ (800a14c <xQueuePeek+0x1c4>)
 800a05a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a068:	f001 ffe8 	bl	800c03c <vPortExitCritical>
				return pdPASS;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e069      	b.n	800a144 <xQueuePeek+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d103      	bne.n	800a07e <xQueuePeek+0xf6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a076:	f001 ffe1 	bl	800c03c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a07a:	2300      	movs	r3, #0
 800a07c:	e062      	b.n	800a144 <xQueuePeek+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a07e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a080:	2b00      	cmp	r3, #0
 800a082:	d106      	bne.n	800a092 <xQueuePeek+0x10a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a084:	f107 0314 	add.w	r3, r7, #20
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 ffc7 	bl	800b01c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a08e:	2301      	movs	r3, #1
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a092:	f001 ffd3 	bl	800c03c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a096:	f000 fd2f 	bl	800aaf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a09a:	f001 ff9d 	bl	800bfd8 <vPortEnterCritical>
 800a09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0a4:	b25b      	sxtb	r3, r3
 800a0a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0aa:	d103      	bne.n	800a0b4 <xQueuePeek+0x12c>
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0ba:	b25b      	sxtb	r3, r3
 800a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0c0:	d103      	bne.n	800a0ca <xQueuePeek+0x142>
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0ca:	f001 ffb7 	bl	800c03c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0ce:	1d3a      	adds	r2, r7, #4
 800a0d0:	f107 0314 	add.w	r3, r7, #20
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 ffb6 	bl	800b048 <xTaskCheckForTimeOut>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d123      	bne.n	800a12a <xQueuePeek+0x1a2>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0e4:	f000 f9ee 	bl	800a4c4 <prvIsQueueEmpty>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d017      	beq.n	800a11e <xQueuePeek+0x196>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f0:	3324      	adds	r3, #36	@ 0x24
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 feda 	bl	800aeb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0fe:	f000 f98f 	bl	800a420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a102:	f000 fd07 	bl	800ab14 <xTaskResumeAll>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d187      	bne.n	800a01c <xQueuePeek+0x94>
				{
					portYIELD_WITHIN_API();
 800a10c:	4b0f      	ldr	r3, [pc, #60]	@ (800a14c <xQueuePeek+0x1c4>)
 800a10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	e77e      	b.n	800a01c <xQueuePeek+0x94>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800a11e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a120:	f000 f97e 	bl	800a420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a124:	f000 fcf6 	bl	800ab14 <xTaskResumeAll>
 800a128:	e778      	b.n	800a01c <xQueuePeek+0x94>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800a12a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a12c:	f000 f978 	bl	800a420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a130:	f000 fcf0 	bl	800ab14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a134:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a136:	f000 f9c5 	bl	800a4c4 <prvIsQueueEmpty>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f43f af6d 	beq.w	800a01c <xQueuePeek+0x94>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a142:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a144:	4618      	mov	r0, r3
 800a146:	3738      	adds	r7, #56	@ 0x38
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	e000ed04 	.word	0xe000ed04

0800a150 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08e      	sub	sp, #56	@ 0x38
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10b      	bne.n	800a17e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	623b      	str	r3, [r7, #32]
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	e7fd      	b.n	800a17a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d103      	bne.n	800a18c <xQueueReceiveFromISR+0x3c>
 800a184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <xQueueReceiveFromISR+0x40>
 800a18c:	2301      	movs	r3, #1
 800a18e:	e000      	b.n	800a192 <xQueueReceiveFromISR+0x42>
 800a190:	2300      	movs	r3, #0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10b      	bne.n	800a1ae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	61fb      	str	r3, [r7, #28]
}
 800a1a8:	bf00      	nop
 800a1aa:	bf00      	nop
 800a1ac:	e7fd      	b.n	800a1aa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1ae:	f001 fff3 	bl	800c198 <vPortValidateInterruptPriority>
	__asm volatile
 800a1b2:	f3ef 8211 	mrs	r2, BASEPRI
 800a1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	61ba      	str	r2, [r7, #24]
 800a1c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a1ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d02f      	beq.n	800a23a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1e4:	68b9      	ldr	r1, [r7, #8]
 800a1e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1e8:	f000 f8f4 	bl	800a3d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ee:	1e5a      	subs	r2, r3, #1
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a1f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a1f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1fc:	d112      	bne.n	800a224 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d016      	beq.n	800a234 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a208:	3310      	adds	r3, #16
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 fea2 	bl	800af54 <xTaskRemoveFromEventList>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00e      	beq.n	800a234 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00b      	beq.n	800a234 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	e007      	b.n	800a234 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a228:	3301      	adds	r3, #1
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	b25a      	sxtb	r2, r3
 800a22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a234:	2301      	movs	r3, #1
 800a236:	637b      	str	r3, [r7, #52]	@ 0x34
 800a238:	e001      	b.n	800a23e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a240:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f383 8811 	msr	BASEPRI, r3
}
 800a248:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3738      	adds	r7, #56	@ 0x38
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10b      	bne.n	800a27a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	60bb      	str	r3, [r7, #8]
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop
 800a278:	e7fd      	b.n	800a276 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a27a:	f001 fead 	bl	800bfd8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a282:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a284:	f001 feda 	bl	800c03c <vPortExitCritical>

	return uxReturn;
 800a288:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a292:	b480      	push	{r7}
 800a294:	b087      	sub	sp, #28
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10b      	bne.n	800a2bc <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	60fb      	str	r3, [r7, #12]
}
 800a2b6:	bf00      	nop
 800a2b8:	bf00      	nop
 800a2ba:	e7fd      	b.n	800a2b8 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a2c2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	371c      	adds	r7, #28
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d006      	beq.n	800a2ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	e001      	b.n	800a2f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
	}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a30c:	2300      	movs	r3, #0
 800a30e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a314:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10d      	bne.n	800a33a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d14d      	bne.n	800a3c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f001 f86e 	bl	800b40c <xTaskPriorityDisinherit>
 800a330:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	609a      	str	r2, [r3, #8]
 800a338:	e043      	b.n	800a3c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d119      	bne.n	800a374 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6858      	ldr	r0, [r3, #4]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a348:	461a      	mov	r2, r3
 800a34a:	68b9      	ldr	r1, [r7, #8]
 800a34c:	f01d f85c 	bl	8027408 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a358:	441a      	add	r2, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	429a      	cmp	r2, r3
 800a368:	d32b      	bcc.n	800a3c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	605a      	str	r2, [r3, #4]
 800a372:	e026      	b.n	800a3c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	68d8      	ldr	r0, [r3, #12]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a37c:	461a      	mov	r2, r3
 800a37e:	68b9      	ldr	r1, [r7, #8]
 800a380:	f01d f842 	bl	8027408 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	68da      	ldr	r2, [r3, #12]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a38c:	425b      	negs	r3, r3
 800a38e:	441a      	add	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	68da      	ldr	r2, [r3, #12]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d207      	bcs.n	800a3b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a8:	425b      	negs	r3, r3
 800a3aa:	441a      	add	r2, r3
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d105      	bne.n	800a3c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a3ca:	697b      	ldr	r3, [r7, #20]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d018      	beq.n	800a418 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ee:	441a      	add	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68da      	ldr	r2, [r3, #12]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d303      	bcc.n	800a408 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	68d9      	ldr	r1, [r3, #12]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a410:	461a      	mov	r2, r3
 800a412:	6838      	ldr	r0, [r7, #0]
 800a414:	f01c fff8 	bl	8027408 <memcpy>
	}
}
 800a418:	bf00      	nop
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a428:	f001 fdd6 	bl	800bfd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a432:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a434:	e011      	b.n	800a45a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d012      	beq.n	800a464 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3324      	adds	r3, #36	@ 0x24
 800a442:	4618      	mov	r0, r3
 800a444:	f000 fd86 	bl	800af54 <xTaskRemoveFromEventList>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a44e:	f000 fe5f 	bl	800b110 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a452:	7bfb      	ldrb	r3, [r7, #15]
 800a454:	3b01      	subs	r3, #1
 800a456:	b2db      	uxtb	r3, r3
 800a458:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	dce9      	bgt.n	800a436 <prvUnlockQueue+0x16>
 800a462:	e000      	b.n	800a466 <prvUnlockQueue+0x46>
					break;
 800a464:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	22ff      	movs	r2, #255	@ 0xff
 800a46a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a46e:	f001 fde5 	bl	800c03c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a472:	f001 fdb1 	bl	800bfd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a47c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a47e:	e011      	b.n	800a4a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d012      	beq.n	800a4ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3310      	adds	r3, #16
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 fd61 	bl	800af54 <xTaskRemoveFromEventList>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a498:	f000 fe3a 	bl	800b110 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a49c:	7bbb      	ldrb	r3, [r7, #14]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	dce9      	bgt.n	800a480 <prvUnlockQueue+0x60>
 800a4ac:	e000      	b.n	800a4b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a4ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	22ff      	movs	r2, #255	@ 0xff
 800a4b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a4b8:	f001 fdc0 	bl	800c03c <vPortExitCritical>
}
 800a4bc:	bf00      	nop
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4cc:	f001 fd84 	bl	800bfd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d102      	bne.n	800a4de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	e001      	b.n	800a4e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4e2:	f001 fdab 	bl	800c03c <vPortExitCritical>

	return xReturn;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4f8:	f001 fd6e 	bl	800bfd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a504:	429a      	cmp	r2, r3
 800a506:	d102      	bne.n	800a50e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	e001      	b.n	800a512 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a50e:	2300      	movs	r3, #0
 800a510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a512:	f001 fd93 	bl	800c03c <vPortExitCritical>

	return xReturn;
 800a516:	68fb      	ldr	r3, [r7, #12]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a52a:	2300      	movs	r3, #0
 800a52c:	60fb      	str	r3, [r7, #12]
 800a52e:	e014      	b.n	800a55a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a530:	4a0f      	ldr	r2, [pc, #60]	@ (800a570 <vQueueAddToRegistry+0x50>)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10b      	bne.n	800a554 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a53c:	490c      	ldr	r1, [pc, #48]	@ (800a570 <vQueueAddToRegistry+0x50>)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a546:	4a0a      	ldr	r2, [pc, #40]	@ (800a570 <vQueueAddToRegistry+0x50>)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	4413      	add	r3, r2
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a552:	e006      	b.n	800a562 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	3301      	adds	r3, #1
 800a558:	60fb      	str	r3, [r7, #12]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2b07      	cmp	r3, #7
 800a55e:	d9e7      	bls.n	800a530 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a560:	bf00      	nop
 800a562:	bf00      	nop
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	200018e8 	.word	0x200018e8

0800a574 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a584:	f001 fd28 	bl	800bfd8 <vPortEnterCritical>
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a58e:	b25b      	sxtb	r3, r3
 800a590:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a594:	d103      	bne.n	800a59e <vQueueWaitForMessageRestricted+0x2a>
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5a4:	b25b      	sxtb	r3, r3
 800a5a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5aa:	d103      	bne.n	800a5b4 <vQueueWaitForMessageRestricted+0x40>
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5b4:	f001 fd42 	bl	800c03c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d106      	bne.n	800a5ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	3324      	adds	r3, #36	@ 0x24
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	68b9      	ldr	r1, [r7, #8]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 fc97 	bl	800aefc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a5ce:	6978      	ldr	r0, [r7, #20]
 800a5d0:	f7ff ff26 	bl	800a420 <prvUnlockQueue>
	}
 800a5d4:	bf00      	nop
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08e      	sub	sp, #56	@ 0x38
 800a5e0:	af04      	add	r7, sp, #16
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10b      	bne.n	800a608 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	623b      	str	r3, [r7, #32]
}
 800a602:	bf00      	nop
 800a604:	bf00      	nop
 800a606:	e7fd      	b.n	800a604 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10b      	bne.n	800a626 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	61fb      	str	r3, [r7, #28]
}
 800a620:	bf00      	nop
 800a622:	bf00      	nop
 800a624:	e7fd      	b.n	800a622 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a626:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800a62a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800a632:	d00b      	beq.n	800a64c <xTaskCreateStatic+0x70>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	61bb      	str	r3, [r7, #24]
}
 800a646:	bf00      	nop
 800a648:	bf00      	nop
 800a64a:	e7fd      	b.n	800a648 <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a64c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01e      	beq.n	800a692 <xTaskCreateStatic+0xb6>
 800a654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a656:	2b00      	cmp	r3, #0
 800a658:	d01b      	beq.n	800a692 <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a660:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a662:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	2202      	movs	r2, #2
 800a668:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a66c:	2300      	movs	r3, #0
 800a66e:	9303      	str	r3, [sp, #12]
 800a670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a672:	9302      	str	r3, [sp, #8]
 800a674:	f107 0314 	add.w	r3, r7, #20
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	68b9      	ldr	r1, [r7, #8]
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 f851 	bl	800a72c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a68a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a68c:	f000 f91e 	bl	800a8cc <prvAddNewTaskToReadyList>
 800a690:	e001      	b.n	800a696 <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 800a692:	2300      	movs	r3, #0
 800a694:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a696:	697b      	ldr	r3, [r7, #20]
	}
 800a698:	4618      	mov	r0, r3
 800a69a:	3728      	adds	r7, #40	@ 0x28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08c      	sub	sp, #48	@ 0x30
 800a6a4:	af04      	add	r7, sp, #16
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	603b      	str	r3, [r7, #0]
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a6b0:	88fb      	ldrh	r3, [r7, #6]
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f001 fdb1 	bl	800c21c <pvPortMalloc>
 800a6ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00f      	beq.n	800a6e2 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a6c2:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800a6c6:	f001 fda9 	bl	800c21c <pvPortMalloc>
 800a6ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d003      	beq.n	800a6da <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	631a      	str	r2, [r3, #48]	@ 0x30
 800a6d8:	e005      	b.n	800a6e6 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a6da:	6978      	ldr	r0, [r7, #20]
 800a6dc:	f001 fe6c 	bl	800c3b8 <vPortFree>
 800a6e0:	e001      	b.n	800a6e6 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d017      	beq.n	800a71c <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6f4:	88fa      	ldrh	r2, [r7, #6]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9303      	str	r3, [sp, #12]
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	9302      	str	r3, [sp, #8]
 800a6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68b9      	ldr	r1, [r7, #8]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 f80e 	bl	800a72c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a710:	69f8      	ldr	r0, [r7, #28]
 800a712:	f000 f8db 	bl	800a8cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a716:	2301      	movs	r3, #1
 800a718:	61bb      	str	r3, [r7, #24]
 800a71a:	e002      	b.n	800a722 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a71c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a720:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a722:	69bb      	ldr	r3, [r7, #24]
	}
 800a724:	4618      	mov	r0, r3
 800a726:	3720      	adds	r7, #32
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b088      	sub	sp, #32
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	461a      	mov	r2, r3
 800a744:	21a5      	movs	r1, #165	@ 0xa5
 800a746:	f01b fc07 	bl	8025f58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a754:	3b01      	subs	r3, #1
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	f023 0307 	bic.w	r3, r3, #7
 800a762:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	f003 0307 	and.w	r3, r3, #7
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00b      	beq.n	800a786 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	617b      	str	r3, [r7, #20]
}
 800a780:	bf00      	nop
 800a782:	bf00      	nop
 800a784:	e7fd      	b.n	800a782 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d01f      	beq.n	800a7cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a78c:	2300      	movs	r3, #0
 800a78e:	61fb      	str	r3, [r7, #28]
 800a790:	e012      	b.n	800a7b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	4413      	add	r3, r2
 800a798:	7819      	ldrb	r1, [r3, #0]
 800a79a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	4413      	add	r3, r2
 800a7a0:	3334      	adds	r3, #52	@ 0x34
 800a7a2:	460a      	mov	r2, r1
 800a7a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d006      	beq.n	800a7c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	61fb      	str	r3, [r7, #28]
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	2b0f      	cmp	r3, #15
 800a7bc:	d9e9      	bls.n	800a792 <prvInitialiseNewTask+0x66>
 800a7be:	e000      	b.n	800a7c2 <prvInitialiseNewTask+0x96>
			{
				break;
 800a7c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a7ca:	e003      	b.n	800a7d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d6:	2b37      	cmp	r3, #55	@ 0x37
 800a7d8:	d901      	bls.n	800a7de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a7da:	2337      	movs	r3, #55	@ 0x37
 800a7dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fe fda3 	bl	8009340 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	3318      	adds	r3, #24
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe fd9e 	bl	8009340 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a808:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a812:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a818:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81c:	2200      	movs	r2, #0
 800a81e:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a824:	2200      	movs	r2, #0
 800a826:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82c:	3358      	adds	r3, #88	@ 0x58
 800a82e:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800a832:	2100      	movs	r1, #0
 800a834:	4618      	mov	r0, r3
 800a836:	f01b fb8f 	bl	8025f58 <memset>
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	4a20      	ldr	r2, [pc, #128]	@ (800a8c0 <prvInitialiseNewTask+0x194>)
 800a83e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a842:	4a20      	ldr	r2, [pc, #128]	@ (800a8c4 <prvInitialiseNewTask+0x198>)
 800a844:	661a      	str	r2, [r3, #96]	@ 0x60
 800a846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a848:	4a1f      	ldr	r2, [pc, #124]	@ (800a8c8 <prvInitialiseNewTask+0x19c>)
 800a84a:	665a      	str	r2, [r3, #100]	@ 0x64
 800a84c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a84e:	f04f 0201 	mov.w	r2, #1
 800a852:	f04f 0300 	mov.w	r3, #0
 800a856:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
 800a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85c:	f243 320e 	movw	r2, #13070	@ 0x330e
 800a860:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 800a864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a866:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 800a86a:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
 800a86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a870:	f241 2234 	movw	r2, #4660	@ 0x1234
 800a874:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	f24e 626d 	movw	r2, #58989	@ 0xe66d
 800a87e:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
 800a882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a884:	f64d 62ec 	movw	r2, #57068	@ 0xdeec
 800a888:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 800a88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88e:	2205      	movs	r2, #5
 800a890:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 800a894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a896:	220b      	movs	r2, #11
 800a898:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	68f9      	ldr	r1, [r7, #12]
 800a8a0:	69b8      	ldr	r0, [r7, #24]
 800a8a2:	f001 fa69 	bl	800bd78 <pxPortInitialiseStack>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <prvInitialiseNewTask+0x18c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8b8:	bf00      	nop
 800a8ba:	3720      	adds	r7, #32
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	20018194 	.word	0x20018194
 800a8c4:	200181fc 	.word	0x200181fc
 800a8c8:	20018264 	.word	0x20018264

0800a8cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8d4:	f001 fb80 	bl	800bfd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8d8:	4b2d      	ldr	r3, [pc, #180]	@ (800a990 <prvAddNewTaskToReadyList+0xc4>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	4a2c      	ldr	r2, [pc, #176]	@ (800a990 <prvAddNewTaskToReadyList+0xc4>)
 800a8e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8e2:	4b2c      	ldr	r3, [pc, #176]	@ (800a994 <prvAddNewTaskToReadyList+0xc8>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d109      	bne.n	800a8fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8ea:	4a2a      	ldr	r2, [pc, #168]	@ (800a994 <prvAddNewTaskToReadyList+0xc8>)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a8f0:	4b27      	ldr	r3, [pc, #156]	@ (800a990 <prvAddNewTaskToReadyList+0xc4>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d110      	bne.n	800a91a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a8f8:	f000 fc2e 	bl	800b158 <prvInitialiseTaskLists>
 800a8fc:	e00d      	b.n	800a91a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a8fe:	4b26      	ldr	r3, [pc, #152]	@ (800a998 <prvAddNewTaskToReadyList+0xcc>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d109      	bne.n	800a91a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a906:	4b23      	ldr	r3, [pc, #140]	@ (800a994 <prvAddNewTaskToReadyList+0xc8>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a910:	429a      	cmp	r2, r3
 800a912:	d802      	bhi.n	800a91a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a914:	4a1f      	ldr	r2, [pc, #124]	@ (800a994 <prvAddNewTaskToReadyList+0xc8>)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a91a:	4b20      	ldr	r3, [pc, #128]	@ (800a99c <prvAddNewTaskToReadyList+0xd0>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3301      	adds	r3, #1
 800a920:	4a1e      	ldr	r2, [pc, #120]	@ (800a99c <prvAddNewTaskToReadyList+0xd0>)
 800a922:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a924:	4b1d      	ldr	r3, [pc, #116]	@ (800a99c <prvAddNewTaskToReadyList+0xd0>)
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a930:	4b1b      	ldr	r3, [pc, #108]	@ (800a9a0 <prvAddNewTaskToReadyList+0xd4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	429a      	cmp	r2, r3
 800a936:	d903      	bls.n	800a940 <prvAddNewTaskToReadyList+0x74>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93c:	4a18      	ldr	r2, [pc, #96]	@ (800a9a0 <prvAddNewTaskToReadyList+0xd4>)
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a944:	4613      	mov	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4a15      	ldr	r2, [pc, #84]	@ (800a9a4 <prvAddNewTaskToReadyList+0xd8>)
 800a94e:	441a      	add	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3304      	adds	r3, #4
 800a954:	4619      	mov	r1, r3
 800a956:	4610      	mov	r0, r2
 800a958:	f7fe fcff 	bl	800935a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a95c:	f001 fb6e 	bl	800c03c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a960:	4b0d      	ldr	r3, [pc, #52]	@ (800a998 <prvAddNewTaskToReadyList+0xcc>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00e      	beq.n	800a986 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a968:	4b0a      	ldr	r3, [pc, #40]	@ (800a994 <prvAddNewTaskToReadyList+0xc8>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a972:	429a      	cmp	r2, r3
 800a974:	d207      	bcs.n	800a986 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a976:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a8 <prvAddNewTaskToReadyList+0xdc>)
 800a978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a986:	bf00      	nop
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	20001dfc 	.word	0x20001dfc
 800a994:	20001928 	.word	0x20001928
 800a998:	20001e08 	.word	0x20001e08
 800a99c:	20001e18 	.word	0x20001e18
 800a9a0:	20001e04 	.word	0x20001e04
 800a9a4:	2000192c 	.word	0x2000192c
 800a9a8:	e000ed04 	.word	0xe000ed04

0800a9ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d018      	beq.n	800a9f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a9be:	4b14      	ldr	r3, [pc, #80]	@ (800aa10 <vTaskDelay+0x64>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00b      	beq.n	800a9de <vTaskDelay+0x32>
	__asm volatile
 800a9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	60bb      	str	r3, [r7, #8]
}
 800a9d8:	bf00      	nop
 800a9da:	bf00      	nop
 800a9dc:	e7fd      	b.n	800a9da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a9de:	f000 f88b 	bl	800aaf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fe19 	bl	800b61c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a9ea:	f000 f893 	bl	800ab14 <xTaskResumeAll>
 800a9ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d107      	bne.n	800aa06 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a9f6:	4b07      	ldr	r3, [pc, #28]	@ (800aa14 <vTaskDelay+0x68>)
 800a9f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9fc:	601a      	str	r2, [r3, #0]
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa06:	bf00      	nop
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20001e24 	.word	0x20001e24
 800aa14:	e000ed04 	.word	0xe000ed04

0800aa18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b08a      	sub	sp, #40	@ 0x28
 800aa1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa22:	2300      	movs	r3, #0
 800aa24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa26:	463a      	mov	r2, r7
 800aa28:	1d39      	adds	r1, r7, #4
 800aa2a:	f107 0308 	add.w	r3, r7, #8
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe fc32 	bl	8009298 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	9202      	str	r2, [sp, #8]
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	2300      	movs	r3, #0
 800aa44:	460a      	mov	r2, r1
 800aa46:	4924      	ldr	r1, [pc, #144]	@ (800aad8 <vTaskStartScheduler+0xc0>)
 800aa48:	4824      	ldr	r0, [pc, #144]	@ (800aadc <vTaskStartScheduler+0xc4>)
 800aa4a:	f7ff fdc7 	bl	800a5dc <xTaskCreateStatic>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	4a23      	ldr	r2, [pc, #140]	@ (800aae0 <vTaskStartScheduler+0xc8>)
 800aa52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa54:	4b22      	ldr	r3, [pc, #136]	@ (800aae0 <vTaskStartScheduler+0xc8>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d002      	beq.n	800aa62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	617b      	str	r3, [r7, #20]
 800aa60:	e001      	b.n	800aa66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d102      	bne.n	800aa72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa6c:	f000 fe2a 	bl	800b6c4 <xTimerCreateTimerTask>
 800aa70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d11b      	bne.n	800aab0 <vTaskStartScheduler+0x98>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	613b      	str	r3, [r7, #16]
}
 800aa8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa8c:	4b15      	ldr	r3, [pc, #84]	@ (800aae4 <vTaskStartScheduler+0xcc>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3358      	adds	r3, #88	@ 0x58
 800aa92:	4a15      	ldr	r2, [pc, #84]	@ (800aae8 <vTaskStartScheduler+0xd0>)
 800aa94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa96:	4b15      	ldr	r3, [pc, #84]	@ (800aaec <vTaskStartScheduler+0xd4>)
 800aa98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa9e:	4b14      	ldr	r3, [pc, #80]	@ (800aaf0 <vTaskStartScheduler+0xd8>)
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aaa4:	4b13      	ldr	r3, [pc, #76]	@ (800aaf4 <vTaskStartScheduler+0xdc>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aaaa:	f001 f9f1 	bl	800be90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aaae:	e00f      	b.n	800aad0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aab6:	d10b      	bne.n	800aad0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	60fb      	str	r3, [r7, #12]
}
 800aaca:	bf00      	nop
 800aacc:	bf00      	nop
 800aace:	e7fd      	b.n	800aacc <vTaskStartScheduler+0xb4>
}
 800aad0:	bf00      	nop
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	080303c8 	.word	0x080303c8
 800aadc:	0800b129 	.word	0x0800b129
 800aae0:	20001e20 	.word	0x20001e20
 800aae4:	20001928 	.word	0x20001928
 800aae8:	20000840 	.word	0x20000840
 800aaec:	20001e1c 	.word	0x20001e1c
 800aaf0:	20001e08 	.word	0x20001e08
 800aaf4:	20001e00 	.word	0x20001e00

0800aaf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aafc:	4b04      	ldr	r3, [pc, #16]	@ (800ab10 <vTaskSuspendAll+0x18>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	3301      	adds	r3, #1
 800ab02:	4a03      	ldr	r2, [pc, #12]	@ (800ab10 <vTaskSuspendAll+0x18>)
 800ab04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ab06:	bf00      	nop
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	20001e24 	.word	0x20001e24

0800ab14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ab22:	4b42      	ldr	r3, [pc, #264]	@ (800ac2c <xTaskResumeAll+0x118>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10b      	bne.n	800ab42 <xTaskResumeAll+0x2e>
	__asm volatile
 800ab2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	603b      	str	r3, [r7, #0]
}
 800ab3c:	bf00      	nop
 800ab3e:	bf00      	nop
 800ab40:	e7fd      	b.n	800ab3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab42:	f001 fa49 	bl	800bfd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab46:	4b39      	ldr	r3, [pc, #228]	@ (800ac2c <xTaskResumeAll+0x118>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	4a37      	ldr	r2, [pc, #220]	@ (800ac2c <xTaskResumeAll+0x118>)
 800ab4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab50:	4b36      	ldr	r3, [pc, #216]	@ (800ac2c <xTaskResumeAll+0x118>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d162      	bne.n	800ac1e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab58:	4b35      	ldr	r3, [pc, #212]	@ (800ac30 <xTaskResumeAll+0x11c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d05e      	beq.n	800ac1e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab60:	e02f      	b.n	800abc2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab62:	4b34      	ldr	r3, [pc, #208]	@ (800ac34 <xTaskResumeAll+0x120>)
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	3318      	adds	r3, #24
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fe fc50 	bl	8009414 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	3304      	adds	r3, #4
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7fe fc4b 	bl	8009414 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab82:	4b2d      	ldr	r3, [pc, #180]	@ (800ac38 <xTaskResumeAll+0x124>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d903      	bls.n	800ab92 <xTaskResumeAll+0x7e>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab8e:	4a2a      	ldr	r2, [pc, #168]	@ (800ac38 <xTaskResumeAll+0x124>)
 800ab90:	6013      	str	r3, [r2, #0]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab96:	4613      	mov	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4413      	add	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4a27      	ldr	r2, [pc, #156]	@ (800ac3c <xTaskResumeAll+0x128>)
 800aba0:	441a      	add	r2, r3
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3304      	adds	r3, #4
 800aba6:	4619      	mov	r1, r3
 800aba8:	4610      	mov	r0, r2
 800abaa:	f7fe fbd6 	bl	800935a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abb2:	4b23      	ldr	r3, [pc, #140]	@ (800ac40 <xTaskResumeAll+0x12c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb8:	429a      	cmp	r2, r3
 800abba:	d302      	bcc.n	800abc2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800abbc:	4b21      	ldr	r3, [pc, #132]	@ (800ac44 <xTaskResumeAll+0x130>)
 800abbe:	2201      	movs	r2, #1
 800abc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abc2:	4b1c      	ldr	r3, [pc, #112]	@ (800ac34 <xTaskResumeAll+0x120>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1cb      	bne.n	800ab62 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d001      	beq.n	800abd4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800abd0:	f000 fb66 	bl	800b2a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800abd4:	4b1c      	ldr	r3, [pc, #112]	@ (800ac48 <xTaskResumeAll+0x134>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d010      	beq.n	800ac02 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800abe0:	f000 f846 	bl	800ac70 <xTaskIncrementTick>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800abea:	4b16      	ldr	r3, [pc, #88]	@ (800ac44 <xTaskResumeAll+0x130>)
 800abec:	2201      	movs	r2, #1
 800abee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	3b01      	subs	r3, #1
 800abf4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1f1      	bne.n	800abe0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800abfc:	4b12      	ldr	r3, [pc, #72]	@ (800ac48 <xTaskResumeAll+0x134>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac02:	4b10      	ldr	r3, [pc, #64]	@ (800ac44 <xTaskResumeAll+0x130>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d009      	beq.n	800ac1e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ac0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ac4c <xTaskResumeAll+0x138>)
 800ac10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac14:	601a      	str	r2, [r3, #0]
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac1e:	f001 fa0d 	bl	800c03c <vPortExitCritical>

	return xAlreadyYielded;
 800ac22:	68bb      	ldr	r3, [r7, #8]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	20001e24 	.word	0x20001e24
 800ac30:	20001dfc 	.word	0x20001dfc
 800ac34:	20001dbc 	.word	0x20001dbc
 800ac38:	20001e04 	.word	0x20001e04
 800ac3c:	2000192c 	.word	0x2000192c
 800ac40:	20001928 	.word	0x20001928
 800ac44:	20001e10 	.word	0x20001e10
 800ac48:	20001e0c 	.word	0x20001e0c
 800ac4c:	e000ed04 	.word	0xe000ed04

0800ac50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac56:	4b05      	ldr	r3, [pc, #20]	@ (800ac6c <xTaskGetTickCount+0x1c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac5c:	687b      	ldr	r3, [r7, #4]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	20001e00 	.word	0x20001e00

0800ac70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac7a:	4b4f      	ldr	r3, [pc, #316]	@ (800adb8 <xTaskIncrementTick+0x148>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f040 8090 	bne.w	800ada4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac84:	4b4d      	ldr	r3, [pc, #308]	@ (800adbc <xTaskIncrementTick+0x14c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac8c:	4a4b      	ldr	r2, [pc, #300]	@ (800adbc <xTaskIncrementTick+0x14c>)
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d121      	bne.n	800acdc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac98:	4b49      	ldr	r3, [pc, #292]	@ (800adc0 <xTaskIncrementTick+0x150>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00b      	beq.n	800acba <xTaskIncrementTick+0x4a>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	603b      	str	r3, [r7, #0]
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop
 800acb8:	e7fd      	b.n	800acb6 <xTaskIncrementTick+0x46>
 800acba:	4b41      	ldr	r3, [pc, #260]	@ (800adc0 <xTaskIncrementTick+0x150>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	4b40      	ldr	r3, [pc, #256]	@ (800adc4 <xTaskIncrementTick+0x154>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a3e      	ldr	r2, [pc, #248]	@ (800adc0 <xTaskIncrementTick+0x150>)
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	4a3e      	ldr	r2, [pc, #248]	@ (800adc4 <xTaskIncrementTick+0x154>)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6013      	str	r3, [r2, #0]
 800acce:	4b3e      	ldr	r3, [pc, #248]	@ (800adc8 <xTaskIncrementTick+0x158>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3301      	adds	r3, #1
 800acd4:	4a3c      	ldr	r2, [pc, #240]	@ (800adc8 <xTaskIncrementTick+0x158>)
 800acd6:	6013      	str	r3, [r2, #0]
 800acd8:	f000 fae2 	bl	800b2a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acdc:	4b3b      	ldr	r3, [pc, #236]	@ (800adcc <xTaskIncrementTick+0x15c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d349      	bcc.n	800ad7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ace6:	4b36      	ldr	r3, [pc, #216]	@ (800adc0 <xTaskIncrementTick+0x150>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d104      	bne.n	800acfa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf0:	4b36      	ldr	r3, [pc, #216]	@ (800adcc <xTaskIncrementTick+0x15c>)
 800acf2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acf6:	601a      	str	r2, [r3, #0]
					break;
 800acf8:	e03f      	b.n	800ad7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acfa:	4b31      	ldr	r3, [pc, #196]	@ (800adc0 <xTaskIncrementTick+0x150>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d203      	bcs.n	800ad1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ad12:	4a2e      	ldr	r2, [pc, #184]	@ (800adcc <xTaskIncrementTick+0x15c>)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ad18:	e02f      	b.n	800ad7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe fb78 	bl	8009414 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d004      	beq.n	800ad36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	3318      	adds	r3, #24
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe fb6f 	bl	8009414 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad3a:	4b25      	ldr	r3, [pc, #148]	@ (800add0 <xTaskIncrementTick+0x160>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d903      	bls.n	800ad4a <xTaskIncrementTick+0xda>
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad46:	4a22      	ldr	r2, [pc, #136]	@ (800add0 <xTaskIncrementTick+0x160>)
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4a1f      	ldr	r2, [pc, #124]	@ (800add4 <xTaskIncrementTick+0x164>)
 800ad58:	441a      	add	r2, r3
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4610      	mov	r0, r2
 800ad62:	f7fe fafa 	bl	800935a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad6a:	4b1b      	ldr	r3, [pc, #108]	@ (800add8 <xTaskIncrementTick+0x168>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d3b8      	bcc.n	800ace6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ad74:	2301      	movs	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad78:	e7b5      	b.n	800ace6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad7a:	4b17      	ldr	r3, [pc, #92]	@ (800add8 <xTaskIncrementTick+0x168>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad80:	4914      	ldr	r1, [pc, #80]	@ (800add4 <xTaskIncrementTick+0x164>)
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	440b      	add	r3, r1
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d901      	bls.n	800ad96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ad92:	2301      	movs	r3, #1
 800ad94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad96:	4b11      	ldr	r3, [pc, #68]	@ (800addc <xTaskIncrementTick+0x16c>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d007      	beq.n	800adae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	617b      	str	r3, [r7, #20]
 800ada2:	e004      	b.n	800adae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ada4:	4b0e      	ldr	r3, [pc, #56]	@ (800ade0 <xTaskIncrementTick+0x170>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3301      	adds	r3, #1
 800adaa:	4a0d      	ldr	r2, [pc, #52]	@ (800ade0 <xTaskIncrementTick+0x170>)
 800adac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800adae:	697b      	ldr	r3, [r7, #20]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	20001e24 	.word	0x20001e24
 800adbc:	20001e00 	.word	0x20001e00
 800adc0:	20001db4 	.word	0x20001db4
 800adc4:	20001db8 	.word	0x20001db8
 800adc8:	20001e14 	.word	0x20001e14
 800adcc:	20001e1c 	.word	0x20001e1c
 800add0:	20001e04 	.word	0x20001e04
 800add4:	2000192c 	.word	0x2000192c
 800add8:	20001928 	.word	0x20001928
 800addc:	20001e10 	.word	0x20001e10
 800ade0:	20001e0c 	.word	0x20001e0c

0800ade4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800adea:	4b2b      	ldr	r3, [pc, #172]	@ (800ae98 <vTaskSwitchContext+0xb4>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800adf2:	4b2a      	ldr	r3, [pc, #168]	@ (800ae9c <vTaskSwitchContext+0xb8>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800adf8:	e047      	b.n	800ae8a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800adfa:	4b28      	ldr	r3, [pc, #160]	@ (800ae9c <vTaskSwitchContext+0xb8>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae00:	4b27      	ldr	r3, [pc, #156]	@ (800aea0 <vTaskSwitchContext+0xbc>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	60fb      	str	r3, [r7, #12]
 800ae06:	e011      	b.n	800ae2c <vTaskSwitchContext+0x48>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10b      	bne.n	800ae26 <vTaskSwitchContext+0x42>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	607b      	str	r3, [r7, #4]
}
 800ae20:	bf00      	nop
 800ae22:	bf00      	nop
 800ae24:	e7fd      	b.n	800ae22 <vTaskSwitchContext+0x3e>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	60fb      	str	r3, [r7, #12]
 800ae2c:	491d      	ldr	r1, [pc, #116]	@ (800aea4 <vTaskSwitchContext+0xc0>)
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	4613      	mov	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	440b      	add	r3, r1
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d0e3      	beq.n	800ae08 <vTaskSwitchContext+0x24>
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	4613      	mov	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4a16      	ldr	r2, [pc, #88]	@ (800aea4 <vTaskSwitchContext+0xc0>)
 800ae4c:	4413      	add	r3, r2
 800ae4e:	60bb      	str	r3, [r7, #8]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	605a      	str	r2, [r3, #4]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	3308      	adds	r3, #8
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d104      	bne.n	800ae70 <vTaskSwitchContext+0x8c>
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	605a      	str	r2, [r3, #4]
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	4a0c      	ldr	r2, [pc, #48]	@ (800aea8 <vTaskSwitchContext+0xc4>)
 800ae78:	6013      	str	r3, [r2, #0]
 800ae7a:	4a09      	ldr	r2, [pc, #36]	@ (800aea0 <vTaskSwitchContext+0xbc>)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae80:	4b09      	ldr	r3, [pc, #36]	@ (800aea8 <vTaskSwitchContext+0xc4>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	3358      	adds	r3, #88	@ 0x58
 800ae86:	4a09      	ldr	r2, [pc, #36]	@ (800aeac <vTaskSwitchContext+0xc8>)
 800ae88:	6013      	str	r3, [r2, #0]
}
 800ae8a:	bf00      	nop
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	20001e24 	.word	0x20001e24
 800ae9c:	20001e10 	.word	0x20001e10
 800aea0:	20001e04 	.word	0x20001e04
 800aea4:	2000192c 	.word	0x2000192c
 800aea8:	20001928 	.word	0x20001928
 800aeac:	20000840 	.word	0x20000840

0800aeb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10b      	bne.n	800aed8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	60fb      	str	r3, [r7, #12]
}
 800aed2:	bf00      	nop
 800aed4:	bf00      	nop
 800aed6:	e7fd      	b.n	800aed4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aed8:	4b07      	ldr	r3, [pc, #28]	@ (800aef8 <vTaskPlaceOnEventList+0x48>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3318      	adds	r3, #24
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7fe fa5e 	bl	80093a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aee6:	2101      	movs	r1, #1
 800aee8:	6838      	ldr	r0, [r7, #0]
 800aeea:	f000 fb97 	bl	800b61c <prvAddCurrentTaskToDelayedList>
}
 800aeee:	bf00      	nop
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20001928 	.word	0x20001928

0800aefc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10b      	bne.n	800af26 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	617b      	str	r3, [r7, #20]
}
 800af20:	bf00      	nop
 800af22:	bf00      	nop
 800af24:	e7fd      	b.n	800af22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af26:	4b0a      	ldr	r3, [pc, #40]	@ (800af50 <vTaskPlaceOnEventListRestricted+0x54>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	3318      	adds	r3, #24
 800af2c:	4619      	mov	r1, r3
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f7fe fa13 	bl	800935a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d002      	beq.n	800af40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800af3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af40:	6879      	ldr	r1, [r7, #4]
 800af42:	68b8      	ldr	r0, [r7, #8]
 800af44:	f000 fb6a 	bl	800b61c <prvAddCurrentTaskToDelayedList>
	}
 800af48:	bf00      	nop
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	20001928 	.word	0x20001928

0800af54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10b      	bne.n	800af82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	60fb      	str	r3, [r7, #12]
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	e7fd      	b.n	800af7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	3318      	adds	r3, #24
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe fa44 	bl	8009414 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af8c:	4b1d      	ldr	r3, [pc, #116]	@ (800b004 <xTaskRemoveFromEventList+0xb0>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d11d      	bne.n	800afd0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	3304      	adds	r3, #4
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fe fa3b 	bl	8009414 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afa2:	4b19      	ldr	r3, [pc, #100]	@ (800b008 <xTaskRemoveFromEventList+0xb4>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d903      	bls.n	800afb2 <xTaskRemoveFromEventList+0x5e>
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afae:	4a16      	ldr	r2, [pc, #88]	@ (800b008 <xTaskRemoveFromEventList+0xb4>)
 800afb0:	6013      	str	r3, [r2, #0]
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afb6:	4613      	mov	r3, r2
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4413      	add	r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4a13      	ldr	r2, [pc, #76]	@ (800b00c <xTaskRemoveFromEventList+0xb8>)
 800afc0:	441a      	add	r2, r3
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	3304      	adds	r3, #4
 800afc6:	4619      	mov	r1, r3
 800afc8:	4610      	mov	r0, r2
 800afca:	f7fe f9c6 	bl	800935a <vListInsertEnd>
 800afce:	e005      	b.n	800afdc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	3318      	adds	r3, #24
 800afd4:	4619      	mov	r1, r3
 800afd6:	480e      	ldr	r0, [pc, #56]	@ (800b010 <xTaskRemoveFromEventList+0xbc>)
 800afd8:	f7fe f9bf 	bl	800935a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe0:	4b0c      	ldr	r3, [pc, #48]	@ (800b014 <xTaskRemoveFromEventList+0xc0>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d905      	bls.n	800aff6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afea:	2301      	movs	r3, #1
 800afec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afee:	4b0a      	ldr	r3, [pc, #40]	@ (800b018 <xTaskRemoveFromEventList+0xc4>)
 800aff0:	2201      	movs	r2, #1
 800aff2:	601a      	str	r2, [r3, #0]
 800aff4:	e001      	b.n	800affa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aff6:	2300      	movs	r3, #0
 800aff8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800affa:	697b      	ldr	r3, [r7, #20]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	20001e24 	.word	0x20001e24
 800b008:	20001e04 	.word	0x20001e04
 800b00c:	2000192c 	.word	0x2000192c
 800b010:	20001dbc 	.word	0x20001dbc
 800b014:	20001928 	.word	0x20001928
 800b018:	20001e10 	.word	0x20001e10

0800b01c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b024:	4b06      	ldr	r3, [pc, #24]	@ (800b040 <vTaskInternalSetTimeOutState+0x24>)
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b02c:	4b05      	ldr	r3, [pc, #20]	@ (800b044 <vTaskInternalSetTimeOutState+0x28>)
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	605a      	str	r2, [r3, #4]
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr
 800b040:	20001e14 	.word	0x20001e14
 800b044:	20001e00 	.word	0x20001e00

0800b048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10b      	bne.n	800b070 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	613b      	str	r3, [r7, #16]
}
 800b06a:	bf00      	nop
 800b06c:	bf00      	nop
 800b06e:	e7fd      	b.n	800b06c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10b      	bne.n	800b08e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	60fb      	str	r3, [r7, #12]
}
 800b088:	bf00      	nop
 800b08a:	bf00      	nop
 800b08c:	e7fd      	b.n	800b08a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b08e:	f000 ffa3 	bl	800bfd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b092:	4b1d      	ldr	r3, [pc, #116]	@ (800b108 <xTaskCheckForTimeOut+0xc0>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	69ba      	ldr	r2, [r7, #24]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0aa:	d102      	bne.n	800b0b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	61fb      	str	r3, [r7, #28]
 800b0b0:	e023      	b.n	800b0fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	4b15      	ldr	r3, [pc, #84]	@ (800b10c <xTaskCheckForTimeOut+0xc4>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d007      	beq.n	800b0ce <xTaskCheckForTimeOut+0x86>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d302      	bcc.n	800b0ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	61fb      	str	r3, [r7, #28]
 800b0cc:	e015      	b.n	800b0fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d20b      	bcs.n	800b0f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	1ad2      	subs	r2, r2, r3
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f7ff ff99 	bl	800b01c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	61fb      	str	r3, [r7, #28]
 800b0ee:	e004      	b.n	800b0fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b0fa:	f000 ff9f 	bl	800c03c <vPortExitCritical>

	return xReturn;
 800b0fe:	69fb      	ldr	r3, [r7, #28]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3720      	adds	r7, #32
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20001e00 	.word	0x20001e00
 800b10c:	20001e14 	.word	0x20001e14

0800b110 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b110:	b480      	push	{r7}
 800b112:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b114:	4b03      	ldr	r3, [pc, #12]	@ (800b124 <vTaskMissedYield+0x14>)
 800b116:	2201      	movs	r2, #1
 800b118:	601a      	str	r2, [r3, #0]
}
 800b11a:	bf00      	nop
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	20001e10 	.word	0x20001e10

0800b128 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b130:	f000 f852 	bl	800b1d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b134:	4b06      	ldr	r3, [pc, #24]	@ (800b150 <prvIdleTask+0x28>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d9f9      	bls.n	800b130 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b13c:	4b05      	ldr	r3, [pc, #20]	@ (800b154 <prvIdleTask+0x2c>)
 800b13e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b14c:	e7f0      	b.n	800b130 <prvIdleTask+0x8>
 800b14e:	bf00      	nop
 800b150:	2000192c 	.word	0x2000192c
 800b154:	e000ed04 	.word	0xe000ed04

0800b158 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b15e:	2300      	movs	r3, #0
 800b160:	607b      	str	r3, [r7, #4]
 800b162:	e00c      	b.n	800b17e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	4613      	mov	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4413      	add	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4a12      	ldr	r2, [pc, #72]	@ (800b1b8 <prvInitialiseTaskLists+0x60>)
 800b170:	4413      	add	r3, r2
 800b172:	4618      	mov	r0, r3
 800b174:	f7fe f8c4 	bl	8009300 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3301      	adds	r3, #1
 800b17c:	607b      	str	r3, [r7, #4]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b37      	cmp	r3, #55	@ 0x37
 800b182:	d9ef      	bls.n	800b164 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b184:	480d      	ldr	r0, [pc, #52]	@ (800b1bc <prvInitialiseTaskLists+0x64>)
 800b186:	f7fe f8bb 	bl	8009300 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b18a:	480d      	ldr	r0, [pc, #52]	@ (800b1c0 <prvInitialiseTaskLists+0x68>)
 800b18c:	f7fe f8b8 	bl	8009300 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b190:	480c      	ldr	r0, [pc, #48]	@ (800b1c4 <prvInitialiseTaskLists+0x6c>)
 800b192:	f7fe f8b5 	bl	8009300 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b196:	480c      	ldr	r0, [pc, #48]	@ (800b1c8 <prvInitialiseTaskLists+0x70>)
 800b198:	f7fe f8b2 	bl	8009300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b19c:	480b      	ldr	r0, [pc, #44]	@ (800b1cc <prvInitialiseTaskLists+0x74>)
 800b19e:	f7fe f8af 	bl	8009300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b1a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b1d0 <prvInitialiseTaskLists+0x78>)
 800b1a4:	4a05      	ldr	r2, [pc, #20]	@ (800b1bc <prvInitialiseTaskLists+0x64>)
 800b1a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d4 <prvInitialiseTaskLists+0x7c>)
 800b1aa:	4a05      	ldr	r2, [pc, #20]	@ (800b1c0 <prvInitialiseTaskLists+0x68>)
 800b1ac:	601a      	str	r2, [r3, #0]
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	2000192c 	.word	0x2000192c
 800b1bc:	20001d8c 	.word	0x20001d8c
 800b1c0:	20001da0 	.word	0x20001da0
 800b1c4:	20001dbc 	.word	0x20001dbc
 800b1c8:	20001dd0 	.word	0x20001dd0
 800b1cc:	20001de8 	.word	0x20001de8
 800b1d0:	20001db4 	.word	0x20001db4
 800b1d4:	20001db8 	.word	0x20001db8

0800b1d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1de:	e019      	b.n	800b214 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1e0:	f000 fefa 	bl	800bfd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1e4:	4b10      	ldr	r3, [pc, #64]	@ (800b228 <prvCheckTasksWaitingTermination+0x50>)
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7fe f90f 	bl	8009414 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b22c <prvCheckTasksWaitingTermination+0x54>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	4a0b      	ldr	r2, [pc, #44]	@ (800b22c <prvCheckTasksWaitingTermination+0x54>)
 800b1fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b200:	4b0b      	ldr	r3, [pc, #44]	@ (800b230 <prvCheckTasksWaitingTermination+0x58>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3b01      	subs	r3, #1
 800b206:	4a0a      	ldr	r2, [pc, #40]	@ (800b230 <prvCheckTasksWaitingTermination+0x58>)
 800b208:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b20a:	f000 ff17 	bl	800c03c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f810 	bl	800b234 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b214:	4b06      	ldr	r3, [pc, #24]	@ (800b230 <prvCheckTasksWaitingTermination+0x58>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1e1      	bne.n	800b1e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b21c:	bf00      	nop
 800b21e:	bf00      	nop
 800b220:	3708      	adds	r7, #8
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20001dd0 	.word	0x20001dd0
 800b22c:	20001dfc 	.word	0x20001dfc
 800b230:	20001de4 	.word	0x20001de4

0800b234 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3358      	adds	r3, #88	@ 0x58
 800b240:	4618      	mov	r0, r3
 800b242:	f01c f82b 	bl	802729c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d108      	bne.n	800b262 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b254:	4618      	mov	r0, r3
 800b256:	f001 f8af 	bl	800c3b8 <vPortFree>
				vPortFree( pxTCB );
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f001 f8ac 	bl	800c3b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b260:	e019      	b.n	800b296 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d103      	bne.n	800b274 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f001 f8a3 	bl	800c3b8 <vPortFree>
	}
 800b272:	e010      	b.n	800b296 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d00b      	beq.n	800b296 <prvDeleteTCB+0x62>
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	60fb      	str	r3, [r7, #12]
}
 800b290:	bf00      	nop
 800b292:	bf00      	nop
 800b294:	e7fd      	b.n	800b292 <prvDeleteTCB+0x5e>
	}
 800b296:	bf00      	nop
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
	...

0800b2a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d8 <prvResetNextTaskUnblockTime+0x38>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d104      	bne.n	800b2ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b2b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b2dc <prvResetNextTaskUnblockTime+0x3c>)
 800b2b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b2b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b2b8:	e008      	b.n	800b2cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ba:	4b07      	ldr	r3, [pc, #28]	@ (800b2d8 <prvResetNextTaskUnblockTime+0x38>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	4a04      	ldr	r2, [pc, #16]	@ (800b2dc <prvResetNextTaskUnblockTime+0x3c>)
 800b2ca:	6013      	str	r3, [r2, #0]
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	20001db4 	.word	0x20001db4
 800b2dc:	20001e1c 	.word	0x20001e1c

0800b2e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b2e6:	4b05      	ldr	r3, [pc, #20]	@ (800b2fc <xTaskGetCurrentTaskHandle+0x1c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b2ec:	687b      	ldr	r3, [r7, #4]
	}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	370c      	adds	r7, #12
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	20001928 	.word	0x20001928

0800b300 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b306:	4b0b      	ldr	r3, [pc, #44]	@ (800b334 <xTaskGetSchedulerState+0x34>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d102      	bne.n	800b314 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b30e:	2301      	movs	r3, #1
 800b310:	607b      	str	r3, [r7, #4]
 800b312:	e008      	b.n	800b326 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b314:	4b08      	ldr	r3, [pc, #32]	@ (800b338 <xTaskGetSchedulerState+0x38>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d102      	bne.n	800b322 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b31c:	2302      	movs	r3, #2
 800b31e:	607b      	str	r3, [r7, #4]
 800b320:	e001      	b.n	800b326 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b322:	2300      	movs	r3, #0
 800b324:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b326:	687b      	ldr	r3, [r7, #4]
	}
 800b328:	4618      	mov	r0, r3
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	20001e08 	.word	0x20001e08
 800b338:	20001e24 	.word	0x20001e24

0800b33c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b348:	2300      	movs	r3, #0
 800b34a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d051      	beq.n	800b3f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b356:	4b2a      	ldr	r3, [pc, #168]	@ (800b400 <xTaskPriorityInherit+0xc4>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d241      	bcs.n	800b3e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	2b00      	cmp	r3, #0
 800b366:	db06      	blt.n	800b376 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b368:	4b25      	ldr	r3, [pc, #148]	@ (800b400 <xTaskPriorityInherit+0xc4>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b36e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	6959      	ldr	r1, [r3, #20]
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4a1f      	ldr	r2, [pc, #124]	@ (800b404 <xTaskPriorityInherit+0xc8>)
 800b388:	4413      	add	r3, r2
 800b38a:	4299      	cmp	r1, r3
 800b38c:	d122      	bne.n	800b3d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	3304      	adds	r3, #4
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe f83e 	bl	8009414 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b398:	4b19      	ldr	r3, [pc, #100]	@ (800b400 <xTaskPriorityInherit+0xc4>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3a6:	4b18      	ldr	r3, [pc, #96]	@ (800b408 <xTaskPriorityInherit+0xcc>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d903      	bls.n	800b3b6 <xTaskPriorityInherit+0x7a>
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b2:	4a15      	ldr	r2, [pc, #84]	@ (800b408 <xTaskPriorityInherit+0xcc>)
 800b3b4:	6013      	str	r3, [r2, #0]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4a10      	ldr	r2, [pc, #64]	@ (800b404 <xTaskPriorityInherit+0xc8>)
 800b3c4:	441a      	add	r2, r3
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	f7fd ffc4 	bl	800935a <vListInsertEnd>
 800b3d2:	e004      	b.n	800b3de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b3d4:	4b0a      	ldr	r3, [pc, #40]	@ (800b400 <xTaskPriorityInherit+0xc4>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	60fb      	str	r3, [r7, #12]
 800b3e2:	e008      	b.n	800b3f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3e8:	4b05      	ldr	r3, [pc, #20]	@ (800b400 <xTaskPriorityInherit+0xc4>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d201      	bcs.n	800b3f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
	}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	20001928 	.word	0x20001928
 800b404:	2000192c 	.word	0x2000192c
 800b408:	20001e04 	.word	0x20001e04

0800b40c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b418:	2300      	movs	r3, #0
 800b41a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d058      	beq.n	800b4d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b422:	4b2f      	ldr	r3, [pc, #188]	@ (800b4e0 <xTaskPriorityDisinherit+0xd4>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d00b      	beq.n	800b444 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b430:	f383 8811 	msr	BASEPRI, r3
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	60fb      	str	r3, [r7, #12]
}
 800b43e:	bf00      	nop
 800b440:	bf00      	nop
 800b442:	e7fd      	b.n	800b440 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10b      	bne.n	800b464 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b450:	f383 8811 	msr	BASEPRI, r3
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	60bb      	str	r3, [r7, #8]
}
 800b45e:	bf00      	nop
 800b460:	bf00      	nop
 800b462:	e7fd      	b.n	800b460 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b468:	1e5a      	subs	r2, r3, #1
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b476:	429a      	cmp	r2, r3
 800b478:	d02c      	beq.n	800b4d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d128      	bne.n	800b4d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	3304      	adds	r3, #4
 800b486:	4618      	mov	r0, r3
 800b488:	f7fd ffc4 	bl	8009414 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b498:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4a4:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e4 <xTaskPriorityDisinherit+0xd8>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d903      	bls.n	800b4b4 <xTaskPriorityDisinherit+0xa8>
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b0:	4a0c      	ldr	r2, [pc, #48]	@ (800b4e4 <xTaskPriorityDisinherit+0xd8>)
 800b4b2:	6013      	str	r3, [r2, #0]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4413      	add	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4a09      	ldr	r2, [pc, #36]	@ (800b4e8 <xTaskPriorityDisinherit+0xdc>)
 800b4c2:	441a      	add	r2, r3
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	3304      	adds	r3, #4
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	f7fd ff45 	bl	800935a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4d4:	697b      	ldr	r3, [r7, #20]
	}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	20001928 	.word	0x20001928
 800b4e4:	20001e04 	.word	0x20001e04
 800b4e8:	2000192c 	.word	0x2000192c

0800b4ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d06c      	beq.n	800b5de <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10b      	bne.n	800b524 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	60fb      	str	r3, [r7, #12]
}
 800b51e:	bf00      	nop
 800b520:	bf00      	nop
 800b522:	e7fd      	b.n	800b520 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d902      	bls.n	800b534 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	61fb      	str	r3, [r7, #28]
 800b532:	e002      	b.n	800b53a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b538:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53e:	69fa      	ldr	r2, [r7, #28]
 800b540:	429a      	cmp	r2, r3
 800b542:	d04c      	beq.n	800b5de <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d147      	bne.n	800b5de <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b54e:	4b26      	ldr	r3, [pc, #152]	@ (800b5e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	429a      	cmp	r2, r3
 800b556:	d10b      	bne.n	800b570 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	60bb      	str	r3, [r7, #8]
}
 800b56a:	bf00      	nop
 800b56c:	bf00      	nop
 800b56e:	e7fd      	b.n	800b56c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b574:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	69fa      	ldr	r2, [r7, #28]
 800b57a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	2b00      	cmp	r3, #0
 800b582:	db04      	blt.n	800b58e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	6959      	ldr	r1, [r3, #20]
 800b592:	693a      	ldr	r2, [r7, #16]
 800b594:	4613      	mov	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4413      	add	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4a13      	ldr	r2, [pc, #76]	@ (800b5ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b59e:	4413      	add	r3, r2
 800b5a0:	4299      	cmp	r1, r3
 800b5a2:	d11c      	bne.n	800b5de <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7fd ff33 	bl	8009414 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5b2:	4b0f      	ldr	r3, [pc, #60]	@ (800b5f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d903      	bls.n	800b5c2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5be:	4a0c      	ldr	r2, [pc, #48]	@ (800b5f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b5c0:	6013      	str	r3, [r2, #0]
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4a07      	ldr	r2, [pc, #28]	@ (800b5ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b5d0:	441a      	add	r2, r3
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	4610      	mov	r0, r2
 800b5da:	f7fd febe 	bl	800935a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5de:	bf00      	nop
 800b5e0:	3720      	adds	r7, #32
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	20001928 	.word	0x20001928
 800b5ec:	2000192c 	.word	0x2000192c
 800b5f0:	20001e04 	.word	0x20001e04

0800b5f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b5f4:	b480      	push	{r7}
 800b5f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b5f8:	4b07      	ldr	r3, [pc, #28]	@ (800b618 <pvTaskIncrementMutexHeldCount+0x24>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d004      	beq.n	800b60a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b600:	4b05      	ldr	r3, [pc, #20]	@ (800b618 <pvTaskIncrementMutexHeldCount+0x24>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b606:	3201      	adds	r2, #1
 800b608:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b60a:	4b03      	ldr	r3, [pc, #12]	@ (800b618 <pvTaskIncrementMutexHeldCount+0x24>)
 800b60c:	681b      	ldr	r3, [r3, #0]
	}
 800b60e:	4618      	mov	r0, r3
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	20001928 	.word	0x20001928

0800b61c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b626:	4b21      	ldr	r3, [pc, #132]	@ (800b6ac <prvAddCurrentTaskToDelayedList+0x90>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b62c:	4b20      	ldr	r3, [pc, #128]	@ (800b6b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3304      	adds	r3, #4
 800b632:	4618      	mov	r0, r3
 800b634:	f7fd feee 	bl	8009414 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b63e:	d10a      	bne.n	800b656 <prvAddCurrentTaskToDelayedList+0x3a>
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d007      	beq.n	800b656 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b646:	4b1a      	ldr	r3, [pc, #104]	@ (800b6b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	3304      	adds	r3, #4
 800b64c:	4619      	mov	r1, r3
 800b64e:	4819      	ldr	r0, [pc, #100]	@ (800b6b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b650:	f7fd fe83 	bl	800935a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b654:	e026      	b.n	800b6a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4413      	add	r3, r2
 800b65c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b65e:	4b14      	ldr	r3, [pc, #80]	@ (800b6b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b666:	68ba      	ldr	r2, [r7, #8]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d209      	bcs.n	800b682 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b66e:	4b12      	ldr	r3, [pc, #72]	@ (800b6b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3304      	adds	r3, #4
 800b678:	4619      	mov	r1, r3
 800b67a:	4610      	mov	r0, r2
 800b67c:	f7fd fe91 	bl	80093a2 <vListInsert>
}
 800b680:	e010      	b.n	800b6a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b682:	4b0e      	ldr	r3, [pc, #56]	@ (800b6bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	3304      	adds	r3, #4
 800b68c:	4619      	mov	r1, r3
 800b68e:	4610      	mov	r0, r2
 800b690:	f7fd fe87 	bl	80093a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b694:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	68ba      	ldr	r2, [r7, #8]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d202      	bcs.n	800b6a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b69e:	4a08      	ldr	r2, [pc, #32]	@ (800b6c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	6013      	str	r3, [r2, #0]
}
 800b6a4:	bf00      	nop
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	20001e00 	.word	0x20001e00
 800b6b0:	20001928 	.word	0x20001928
 800b6b4:	20001de8 	.word	0x20001de8
 800b6b8:	20001db8 	.word	0x20001db8
 800b6bc:	20001db4 	.word	0x20001db4
 800b6c0:	20001e1c 	.word	0x20001e1c

0800b6c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b08a      	sub	sp, #40	@ 0x28
 800b6c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b6ce:	f000 fb13 	bl	800bcf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b6d2:	4b1d      	ldr	r3, [pc, #116]	@ (800b748 <xTimerCreateTimerTask+0x84>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d021      	beq.n	800b71e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b6e2:	1d3a      	adds	r2, r7, #4
 800b6e4:	f107 0108 	add.w	r1, r7, #8
 800b6e8:	f107 030c 	add.w	r3, r7, #12
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fd fded 	bl	80092cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b6f2:	6879      	ldr	r1, [r7, #4]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	9202      	str	r2, [sp, #8]
 800b6fa:	9301      	str	r3, [sp, #4]
 800b6fc:	2302      	movs	r3, #2
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	2300      	movs	r3, #0
 800b702:	460a      	mov	r2, r1
 800b704:	4911      	ldr	r1, [pc, #68]	@ (800b74c <xTimerCreateTimerTask+0x88>)
 800b706:	4812      	ldr	r0, [pc, #72]	@ (800b750 <xTimerCreateTimerTask+0x8c>)
 800b708:	f7fe ff68 	bl	800a5dc <xTaskCreateStatic>
 800b70c:	4603      	mov	r3, r0
 800b70e:	4a11      	ldr	r2, [pc, #68]	@ (800b754 <xTimerCreateTimerTask+0x90>)
 800b710:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b712:	4b10      	ldr	r3, [pc, #64]	@ (800b754 <xTimerCreateTimerTask+0x90>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b71a:	2301      	movs	r3, #1
 800b71c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10b      	bne.n	800b73c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	613b      	str	r3, [r7, #16]
}
 800b736:	bf00      	nop
 800b738:	bf00      	nop
 800b73a:	e7fd      	b.n	800b738 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b73c:	697b      	ldr	r3, [r7, #20]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3718      	adds	r7, #24
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20001e58 	.word	0x20001e58
 800b74c:	080303d0 	.word	0x080303d0
 800b750:	0800b891 	.word	0x0800b891
 800b754:	20001e5c 	.word	0x20001e5c

0800b758 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08a      	sub	sp, #40	@ 0x28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
 800b764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b766:	2300      	movs	r3, #0
 800b768:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10b      	bne.n	800b788 <xTimerGenericCommand+0x30>
	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b774:	f383 8811 	msr	BASEPRI, r3
 800b778:	f3bf 8f6f 	isb	sy
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	623b      	str	r3, [r7, #32]
}
 800b782:	bf00      	nop
 800b784:	bf00      	nop
 800b786:	e7fd      	b.n	800b784 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b788:	4b19      	ldr	r3, [pc, #100]	@ (800b7f0 <xTimerGenericCommand+0x98>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d02a      	beq.n	800b7e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2b05      	cmp	r3, #5
 800b7a0:	dc18      	bgt.n	800b7d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7a2:	f7ff fdad 	bl	800b300 <xTaskGetSchedulerState>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d109      	bne.n	800b7c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7ac:	4b10      	ldr	r3, [pc, #64]	@ (800b7f0 <xTimerGenericCommand+0x98>)
 800b7ae:	6818      	ldr	r0, [r3, #0]
 800b7b0:	f107 0110 	add.w	r1, r7, #16
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7b8:	f7fe f854 	bl	8009864 <xQueueGenericSend>
 800b7bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800b7be:	e012      	b.n	800b7e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b7c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b7f0 <xTimerGenericCommand+0x98>)
 800b7c2:	6818      	ldr	r0, [r3, #0]
 800b7c4:	f107 0110 	add.w	r1, r7, #16
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f7fe f84a 	bl	8009864 <xQueueGenericSend>
 800b7d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b7d2:	e008      	b.n	800b7e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7d4:	4b06      	ldr	r3, [pc, #24]	@ (800b7f0 <xTimerGenericCommand+0x98>)
 800b7d6:	6818      	ldr	r0, [r3, #0]
 800b7d8:	f107 0110 	add.w	r1, r7, #16
 800b7dc:	2300      	movs	r3, #0
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	f7fe f942 	bl	8009a68 <xQueueGenericSendFromISR>
 800b7e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3728      	adds	r7, #40	@ 0x28
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	20001e58 	.word	0x20001e58

0800b7f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b088      	sub	sp, #32
 800b7f8:	af02      	add	r7, sp, #8
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7fe:	4b23      	ldr	r3, [pc, #140]	@ (800b88c <prvProcessExpiredTimer+0x98>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	3304      	adds	r3, #4
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7fd fe01 	bl	8009414 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b818:	f003 0304 	and.w	r3, r3, #4
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d023      	beq.n	800b868 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	699a      	ldr	r2, [r3, #24]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	18d1      	adds	r1, r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	6978      	ldr	r0, [r7, #20]
 800b82e:	f000 f8d5 	bl	800b9dc <prvInsertTimerInActiveList>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d020      	beq.n	800b87a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b838:	2300      	movs	r3, #0
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	2300      	movs	r3, #0
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	2100      	movs	r1, #0
 800b842:	6978      	ldr	r0, [r7, #20]
 800b844:	f7ff ff88 	bl	800b758 <xTimerGenericCommand>
 800b848:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d114      	bne.n	800b87a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	60fb      	str	r3, [r7, #12]
}
 800b862:	bf00      	nop
 800b864:	bf00      	nop
 800b866:	e7fd      	b.n	800b864 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b86e:	f023 0301 	bic.w	r3, r3, #1
 800b872:	b2da      	uxtb	r2, r3
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	6a1b      	ldr	r3, [r3, #32]
 800b87e:	6978      	ldr	r0, [r7, #20]
 800b880:	4798      	blx	r3
}
 800b882:	bf00      	nop
 800b884:	3718      	adds	r7, #24
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20001e50 	.word	0x20001e50

0800b890 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b898:	f107 0308 	add.w	r3, r7, #8
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 f859 	bl	800b954 <prvGetNextExpireTime>
 800b8a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f000 f805 	bl	800b8b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b8ae:	f000 f8d7 	bl	800ba60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8b2:	bf00      	nop
 800b8b4:	e7f0      	b.n	800b898 <prvTimerTask+0x8>
	...

0800b8b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8c2:	f7ff f919 	bl	800aaf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8c6:	f107 0308 	add.w	r3, r7, #8
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 f866 	bl	800b99c <prvSampleTimeNow>
 800b8d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d130      	bne.n	800b93a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10a      	bne.n	800b8f4 <prvProcessTimerOrBlockTask+0x3c>
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d806      	bhi.n	800b8f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b8e6:	f7ff f915 	bl	800ab14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b8ea:	68f9      	ldr	r1, [r7, #12]
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff ff81 	bl	800b7f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b8f2:	e024      	b.n	800b93e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d008      	beq.n	800b90c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b8fa:	4b13      	ldr	r3, [pc, #76]	@ (800b948 <prvProcessTimerOrBlockTask+0x90>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d101      	bne.n	800b908 <prvProcessTimerOrBlockTask+0x50>
 800b904:	2301      	movs	r3, #1
 800b906:	e000      	b.n	800b90a <prvProcessTimerOrBlockTask+0x52>
 800b908:	2300      	movs	r3, #0
 800b90a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b90c:	4b0f      	ldr	r3, [pc, #60]	@ (800b94c <prvProcessTimerOrBlockTask+0x94>)
 800b90e:	6818      	ldr	r0, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	4619      	mov	r1, r3
 800b91a:	f7fe fe2b 	bl	800a574 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b91e:	f7ff f8f9 	bl	800ab14 <xTaskResumeAll>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10a      	bne.n	800b93e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b928:	4b09      	ldr	r3, [pc, #36]	@ (800b950 <prvProcessTimerOrBlockTask+0x98>)
 800b92a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b92e:	601a      	str	r2, [r3, #0]
 800b930:	f3bf 8f4f 	dsb	sy
 800b934:	f3bf 8f6f 	isb	sy
}
 800b938:	e001      	b.n	800b93e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b93a:	f7ff f8eb 	bl	800ab14 <xTaskResumeAll>
}
 800b93e:	bf00      	nop
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	20001e54 	.word	0x20001e54
 800b94c:	20001e58 	.word	0x20001e58
 800b950:	e000ed04 	.word	0xe000ed04

0800b954 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b95c:	4b0e      	ldr	r3, [pc, #56]	@ (800b998 <prvGetNextExpireTime+0x44>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <prvGetNextExpireTime+0x16>
 800b966:	2201      	movs	r2, #1
 800b968:	e000      	b.n	800b96c <prvGetNextExpireTime+0x18>
 800b96a:	2200      	movs	r2, #0
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d105      	bne.n	800b984 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b978:	4b07      	ldr	r3, [pc, #28]	@ (800b998 <prvGetNextExpireTime+0x44>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	60fb      	str	r3, [r7, #12]
 800b982:	e001      	b.n	800b988 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b988:	68fb      	ldr	r3, [r7, #12]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	20001e50 	.word	0x20001e50

0800b99c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b9a4:	f7ff f954 	bl	800ac50 <xTaskGetTickCount>
 800b9a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b9d8 <prvSampleTimeNow+0x3c>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d205      	bcs.n	800b9c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9b4:	f000 f93a 	bl	800bc2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	601a      	str	r2, [r3, #0]
 800b9be:	e002      	b.n	800b9c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9c6:	4a04      	ldr	r2, [pc, #16]	@ (800b9d8 <prvSampleTimeNow+0x3c>)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20001e60 	.word	0x20001e60

0800b9dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
 800b9e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b9fa:	68ba      	ldr	r2, [r7, #8]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d812      	bhi.n	800ba28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	1ad2      	subs	r2, r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d302      	bcc.n	800ba16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba10:	2301      	movs	r3, #1
 800ba12:	617b      	str	r3, [r7, #20]
 800ba14:	e01b      	b.n	800ba4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba16:	4b10      	ldr	r3, [pc, #64]	@ (800ba58 <prvInsertTimerInActiveList+0x7c>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	4619      	mov	r1, r3
 800ba20:	4610      	mov	r0, r2
 800ba22:	f7fd fcbe 	bl	80093a2 <vListInsert>
 800ba26:	e012      	b.n	800ba4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d206      	bcs.n	800ba3e <prvInsertTimerInActiveList+0x62>
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d302      	bcc.n	800ba3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	617b      	str	r3, [r7, #20]
 800ba3c:	e007      	b.n	800ba4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba3e:	4b07      	ldr	r3, [pc, #28]	@ (800ba5c <prvInsertTimerInActiveList+0x80>)
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3304      	adds	r3, #4
 800ba46:	4619      	mov	r1, r3
 800ba48:	4610      	mov	r0, r2
 800ba4a:	f7fd fcaa 	bl	80093a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba4e:	697b      	ldr	r3, [r7, #20]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	20001e54 	.word	0x20001e54
 800ba5c:	20001e50 	.word	0x20001e50

0800ba60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b08e      	sub	sp, #56	@ 0x38
 800ba64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba66:	e0ce      	b.n	800bc06 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	da19      	bge.n	800baa2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba6e:	1d3b      	adds	r3, r7, #4
 800ba70:	3304      	adds	r3, #4
 800ba72:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10b      	bne.n	800ba92 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	61fb      	str	r3, [r7, #28]
}
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
 800ba90:	e7fd      	b.n	800ba8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba98:	6850      	ldr	r0, [r2, #4]
 800ba9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba9c:	6892      	ldr	r2, [r2, #8]
 800ba9e:	4611      	mov	r1, r2
 800baa0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f2c0 80ae 	blt.w	800bc06 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800baae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d004      	beq.n	800bac0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab8:	3304      	adds	r3, #4
 800baba:	4618      	mov	r0, r3
 800babc:	f7fd fcaa 	bl	8009414 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bac0:	463b      	mov	r3, r7
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7ff ff6a 	bl	800b99c <prvSampleTimeNow>
 800bac8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b09      	cmp	r3, #9
 800bace:	f200 8097 	bhi.w	800bc00 <prvProcessReceivedCommands+0x1a0>
 800bad2:	a201      	add	r2, pc, #4	@ (adr r2, 800bad8 <prvProcessReceivedCommands+0x78>)
 800bad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad8:	0800bb01 	.word	0x0800bb01
 800badc:	0800bb01 	.word	0x0800bb01
 800bae0:	0800bb01 	.word	0x0800bb01
 800bae4:	0800bb77 	.word	0x0800bb77
 800bae8:	0800bb8b 	.word	0x0800bb8b
 800baec:	0800bbd7 	.word	0x0800bbd7
 800baf0:	0800bb01 	.word	0x0800bb01
 800baf4:	0800bb01 	.word	0x0800bb01
 800baf8:	0800bb77 	.word	0x0800bb77
 800bafc:	0800bb8b 	.word	0x0800bb8b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb06:	f043 0301 	orr.w	r3, r3, #1
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	18d1      	adds	r1, r2, r3
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb20:	f7ff ff5c 	bl	800b9dc <prvInsertTimerInActiveList>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d06c      	beq.n	800bc04 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2c:	6a1b      	ldr	r3, [r3, #32]
 800bb2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb38:	f003 0304 	and.w	r3, r3, #4
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d061      	beq.n	800bc04 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb44:	699b      	ldr	r3, [r3, #24]
 800bb46:	441a      	add	r2, r3
 800bb48:	2300      	movs	r3, #0
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	2100      	movs	r1, #0
 800bb50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb52:	f7ff fe01 	bl	800b758 <xTimerGenericCommand>
 800bb56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb58:	6a3b      	ldr	r3, [r7, #32]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d152      	bne.n	800bc04 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	61bb      	str	r3, [r7, #24]
}
 800bb70:	bf00      	nop
 800bb72:	bf00      	nop
 800bb74:	e7fd      	b.n	800bb72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb7c:	f023 0301 	bic.w	r3, r3, #1
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bb88:	e03d      	b.n	800bc06 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb90:	f043 0301 	orr.w	r3, r3, #1
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb9c:	68ba      	ldr	r2, [r7, #8]
 800bb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba4:	699b      	ldr	r3, [r3, #24]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10b      	bne.n	800bbc2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	617b      	str	r3, [r7, #20]
}
 800bbbc:	bf00      	nop
 800bbbe:	bf00      	nop
 800bbc0:	e7fd      	b.n	800bbbe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc4:	699a      	ldr	r2, [r3, #24]
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc8:	18d1      	adds	r1, r2, r3
 800bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbd0:	f7ff ff04 	bl	800b9dc <prvInsertTimerInActiveList>
					break;
 800bbd4:	e017      	b.n	800bc06 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbdc:	f003 0302 	and.w	r3, r3, #2
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d103      	bne.n	800bbec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bbe4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbe6:	f000 fbe7 	bl	800c3b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bbea:	e00c      	b.n	800bc06 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbf2:	f023 0301 	bic.w	r3, r3, #1
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bbfe:	e002      	b.n	800bc06 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bc00:	bf00      	nop
 800bc02:	e000      	b.n	800bc06 <prvProcessReceivedCommands+0x1a6>
					break;
 800bc04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc06:	4b08      	ldr	r3, [pc, #32]	@ (800bc28 <prvProcessReceivedCommands+0x1c8>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	1d39      	adds	r1, r7, #4
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fd ffc8 	bl	8009ba4 <xQueueReceive>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f47f af26 	bne.w	800ba68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bc1c:	bf00      	nop
 800bc1e:	bf00      	nop
 800bc20:	3730      	adds	r7, #48	@ 0x30
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	20001e58 	.word	0x20001e58

0800bc2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b088      	sub	sp, #32
 800bc30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc32:	e049      	b.n	800bcc8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc34:	4b2e      	ldr	r3, [pc, #184]	@ (800bcf0 <prvSwitchTimerLists+0xc4>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc3e:	4b2c      	ldr	r3, [pc, #176]	@ (800bcf0 <prvSwitchTimerLists+0xc4>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7fd fbe1 	bl	8009414 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc60:	f003 0304 	and.w	r3, r3, #4
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d02f      	beq.n	800bcc8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	699b      	ldr	r3, [r3, #24]
 800bc6c:	693a      	ldr	r2, [r7, #16]
 800bc6e:	4413      	add	r3, r2
 800bc70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d90e      	bls.n	800bc98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc86:	4b1a      	ldr	r3, [pc, #104]	@ (800bcf0 <prvSwitchTimerLists+0xc4>)
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3304      	adds	r3, #4
 800bc8e:	4619      	mov	r1, r3
 800bc90:	4610      	mov	r0, r2
 800bc92:	f7fd fb86 	bl	80093a2 <vListInsert>
 800bc96:	e017      	b.n	800bcc8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc98:	2300      	movs	r3, #0
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	2100      	movs	r1, #0
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f7ff fd58 	bl	800b758 <xTimerGenericCommand>
 800bca8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d10b      	bne.n	800bcc8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	603b      	str	r3, [r7, #0]
}
 800bcc2:	bf00      	nop
 800bcc4:	bf00      	nop
 800bcc6:	e7fd      	b.n	800bcc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcc8:	4b09      	ldr	r3, [pc, #36]	@ (800bcf0 <prvSwitchTimerLists+0xc4>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1b0      	bne.n	800bc34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bcd2:	4b07      	ldr	r3, [pc, #28]	@ (800bcf0 <prvSwitchTimerLists+0xc4>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bcd8:	4b06      	ldr	r3, [pc, #24]	@ (800bcf4 <prvSwitchTimerLists+0xc8>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a04      	ldr	r2, [pc, #16]	@ (800bcf0 <prvSwitchTimerLists+0xc4>)
 800bcde:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bce0:	4a04      	ldr	r2, [pc, #16]	@ (800bcf4 <prvSwitchTimerLists+0xc8>)
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	6013      	str	r3, [r2, #0]
}
 800bce6:	bf00      	nop
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20001e50 	.word	0x20001e50
 800bcf4:	20001e54 	.word	0x20001e54

0800bcf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bcfe:	f000 f96b 	bl	800bfd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd02:	4b15      	ldr	r3, [pc, #84]	@ (800bd58 <prvCheckForValidListAndQueue+0x60>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d120      	bne.n	800bd4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd0a:	4814      	ldr	r0, [pc, #80]	@ (800bd5c <prvCheckForValidListAndQueue+0x64>)
 800bd0c:	f7fd faf8 	bl	8009300 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd10:	4813      	ldr	r0, [pc, #76]	@ (800bd60 <prvCheckForValidListAndQueue+0x68>)
 800bd12:	f7fd faf5 	bl	8009300 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd16:	4b13      	ldr	r3, [pc, #76]	@ (800bd64 <prvCheckForValidListAndQueue+0x6c>)
 800bd18:	4a10      	ldr	r2, [pc, #64]	@ (800bd5c <prvCheckForValidListAndQueue+0x64>)
 800bd1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd1c:	4b12      	ldr	r3, [pc, #72]	@ (800bd68 <prvCheckForValidListAndQueue+0x70>)
 800bd1e:	4a10      	ldr	r2, [pc, #64]	@ (800bd60 <prvCheckForValidListAndQueue+0x68>)
 800bd20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd22:	2300      	movs	r3, #0
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	4b11      	ldr	r3, [pc, #68]	@ (800bd6c <prvCheckForValidListAndQueue+0x74>)
 800bd28:	4a11      	ldr	r2, [pc, #68]	@ (800bd70 <prvCheckForValidListAndQueue+0x78>)
 800bd2a:	2110      	movs	r1, #16
 800bd2c:	200a      	movs	r0, #10
 800bd2e:	f7fd fc05 	bl	800953c <xQueueGenericCreateStatic>
 800bd32:	4603      	mov	r3, r0
 800bd34:	4a08      	ldr	r2, [pc, #32]	@ (800bd58 <prvCheckForValidListAndQueue+0x60>)
 800bd36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd38:	4b07      	ldr	r3, [pc, #28]	@ (800bd58 <prvCheckForValidListAndQueue+0x60>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d005      	beq.n	800bd4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd40:	4b05      	ldr	r3, [pc, #20]	@ (800bd58 <prvCheckForValidListAndQueue+0x60>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	490b      	ldr	r1, [pc, #44]	@ (800bd74 <prvCheckForValidListAndQueue+0x7c>)
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fe fbea 	bl	800a520 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd4c:	f000 f976 	bl	800c03c <vPortExitCritical>
}
 800bd50:	bf00      	nop
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20001e58 	.word	0x20001e58
 800bd5c:	20001e28 	.word	0x20001e28
 800bd60:	20001e3c 	.word	0x20001e3c
 800bd64:	20001e50 	.word	0x20001e50
 800bd68:	20001e54 	.word	0x20001e54
 800bd6c:	20001f04 	.word	0x20001f04
 800bd70:	20001e64 	.word	0x20001e64
 800bd74:	080303d8 	.word	0x080303d8

0800bd78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	3b04      	subs	r3, #4
 800bd88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bd90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3b04      	subs	r3, #4
 800bd96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	f023 0201 	bic.w	r2, r3, #1
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3b04      	subs	r3, #4
 800bda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bda8:	4a0c      	ldr	r2, [pc, #48]	@ (800bddc <pxPortInitialiseStack+0x64>)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	3b14      	subs	r3, #20
 800bdb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	3b04      	subs	r3, #4
 800bdbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f06f 0202 	mvn.w	r2, #2
 800bdc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3b20      	subs	r3, #32
 800bdcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdce:	68fb      	ldr	r3, [r7, #12]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	0800bde1 	.word	0x0800bde1

0800bde0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdea:	4b13      	ldr	r3, [pc, #76]	@ (800be38 <prvTaskExitError+0x58>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bdf2:	d00b      	beq.n	800be0c <prvTaskExitError+0x2c>
	__asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	60fb      	str	r3, [r7, #12]
}
 800be06:	bf00      	nop
 800be08:	bf00      	nop
 800be0a:	e7fd      	b.n	800be08 <prvTaskExitError+0x28>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	60bb      	str	r3, [r7, #8]
}
 800be1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be20:	bf00      	nop
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d0fc      	beq.n	800be22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be28:	bf00      	nop
 800be2a:	bf00      	nop
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	20000084 	.word	0x20000084
 800be3c:	00000000 	.word	0x00000000

0800be40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be40:	4b07      	ldr	r3, [pc, #28]	@ (800be60 <pxCurrentTCBConst2>)
 800be42:	6819      	ldr	r1, [r3, #0]
 800be44:	6808      	ldr	r0, [r1, #0]
 800be46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4a:	f380 8809 	msr	PSP, r0
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f04f 0000 	mov.w	r0, #0
 800be56:	f380 8811 	msr	BASEPRI, r0
 800be5a:	4770      	bx	lr
 800be5c:	f3af 8000 	nop.w

0800be60 <pxCurrentTCBConst2>:
 800be60:	20001928 	.word	0x20001928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop

0800be68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be68:	4808      	ldr	r0, [pc, #32]	@ (800be8c <prvPortStartFirstTask+0x24>)
 800be6a:	6800      	ldr	r0, [r0, #0]
 800be6c:	6800      	ldr	r0, [r0, #0]
 800be6e:	f380 8808 	msr	MSP, r0
 800be72:	f04f 0000 	mov.w	r0, #0
 800be76:	f380 8814 	msr	CONTROL, r0
 800be7a:	b662      	cpsie	i
 800be7c:	b661      	cpsie	f
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	df00      	svc	0
 800be88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be8a:	bf00      	nop
 800be8c:	e000ed08 	.word	0xe000ed08

0800be90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800be96:	4b47      	ldr	r3, [pc, #284]	@ (800bfb4 <xPortStartScheduler+0x124>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a47      	ldr	r2, [pc, #284]	@ (800bfb8 <xPortStartScheduler+0x128>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d10b      	bne.n	800beb8 <xPortStartScheduler+0x28>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	613b      	str	r3, [r7, #16]
}
 800beb2:	bf00      	nop
 800beb4:	bf00      	nop
 800beb6:	e7fd      	b.n	800beb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800beb8:	4b3e      	ldr	r3, [pc, #248]	@ (800bfb4 <xPortStartScheduler+0x124>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a3f      	ldr	r2, [pc, #252]	@ (800bfbc <xPortStartScheduler+0x12c>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d10b      	bne.n	800beda <xPortStartScheduler+0x4a>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	60fb      	str	r3, [r7, #12]
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	e7fd      	b.n	800bed6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800beda:	4b39      	ldr	r3, [pc, #228]	@ (800bfc0 <xPortStartScheduler+0x130>)
 800bedc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	22ff      	movs	r2, #255	@ 0xff
 800beea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bef4:	78fb      	ldrb	r3, [r7, #3]
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800befc:	b2da      	uxtb	r2, r3
 800befe:	4b31      	ldr	r3, [pc, #196]	@ (800bfc4 <xPortStartScheduler+0x134>)
 800bf00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf02:	4b31      	ldr	r3, [pc, #196]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf04:	2207      	movs	r2, #7
 800bf06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf08:	e009      	b.n	800bf1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bf0a:	4b2f      	ldr	r3, [pc, #188]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	4a2d      	ldr	r2, [pc, #180]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf14:	78fb      	ldrb	r3, [r7, #3]
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf1e:	78fb      	ldrb	r3, [r7, #3]
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf26:	2b80      	cmp	r3, #128	@ 0x80
 800bf28:	d0ef      	beq.n	800bf0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf2a:	4b27      	ldr	r3, [pc, #156]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f1c3 0307 	rsb	r3, r3, #7
 800bf32:	2b04      	cmp	r3, #4
 800bf34:	d00b      	beq.n	800bf4e <xPortStartScheduler+0xbe>
	__asm volatile
 800bf36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf3a:	f383 8811 	msr	BASEPRI, r3
 800bf3e:	f3bf 8f6f 	isb	sy
 800bf42:	f3bf 8f4f 	dsb	sy
 800bf46:	60bb      	str	r3, [r7, #8]
}
 800bf48:	bf00      	nop
 800bf4a:	bf00      	nop
 800bf4c:	e7fd      	b.n	800bf4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf4e:	4b1e      	ldr	r3, [pc, #120]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	021b      	lsls	r3, r3, #8
 800bf54:	4a1c      	ldr	r2, [pc, #112]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf58:	4b1b      	ldr	r3, [pc, #108]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf60:	4a19      	ldr	r2, [pc, #100]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf6c:	4b17      	ldr	r3, [pc, #92]	@ (800bfcc <xPortStartScheduler+0x13c>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a16      	ldr	r2, [pc, #88]	@ (800bfcc <xPortStartScheduler+0x13c>)
 800bf72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bf76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf78:	4b14      	ldr	r3, [pc, #80]	@ (800bfcc <xPortStartScheduler+0x13c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a13      	ldr	r2, [pc, #76]	@ (800bfcc <xPortStartScheduler+0x13c>)
 800bf7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bf82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf84:	f000 f8da 	bl	800c13c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf88:	4b11      	ldr	r3, [pc, #68]	@ (800bfd0 <xPortStartScheduler+0x140>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf8e:	f000 f8f9 	bl	800c184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf92:	4b10      	ldr	r3, [pc, #64]	@ (800bfd4 <xPortStartScheduler+0x144>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a0f      	ldr	r2, [pc, #60]	@ (800bfd4 <xPortStartScheduler+0x144>)
 800bf98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bf9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf9e:	f7ff ff63 	bl	800be68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfa2:	f7fe ff1f 	bl	800ade4 <vTaskSwitchContext>
	prvTaskExitError();
 800bfa6:	f7ff ff1b 	bl	800bde0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	e000ed00 	.word	0xe000ed00
 800bfb8:	410fc271 	.word	0x410fc271
 800bfbc:	410fc270 	.word	0x410fc270
 800bfc0:	e000e400 	.word	0xe000e400
 800bfc4:	20001f54 	.word	0x20001f54
 800bfc8:	20001f58 	.word	0x20001f58
 800bfcc:	e000ed20 	.word	0xe000ed20
 800bfd0:	20000084 	.word	0x20000084
 800bfd4:	e000ef34 	.word	0xe000ef34

0800bfd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
	__asm volatile
 800bfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe2:	f383 8811 	msr	BASEPRI, r3
 800bfe6:	f3bf 8f6f 	isb	sy
 800bfea:	f3bf 8f4f 	dsb	sy
 800bfee:	607b      	str	r3, [r7, #4]
}
 800bff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bff2:	4b10      	ldr	r3, [pc, #64]	@ (800c034 <vPortEnterCritical+0x5c>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	3301      	adds	r3, #1
 800bff8:	4a0e      	ldr	r2, [pc, #56]	@ (800c034 <vPortEnterCritical+0x5c>)
 800bffa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bffc:	4b0d      	ldr	r3, [pc, #52]	@ (800c034 <vPortEnterCritical+0x5c>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d110      	bne.n	800c026 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c004:	4b0c      	ldr	r3, [pc, #48]	@ (800c038 <vPortEnterCritical+0x60>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00b      	beq.n	800c026 <vPortEnterCritical+0x4e>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	603b      	str	r3, [r7, #0]
}
 800c020:	bf00      	nop
 800c022:	bf00      	nop
 800c024:	e7fd      	b.n	800c022 <vPortEnterCritical+0x4a>
	}
}
 800c026:	bf00      	nop
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	20000084 	.word	0x20000084
 800c038:	e000ed04 	.word	0xe000ed04

0800c03c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c042:	4b12      	ldr	r3, [pc, #72]	@ (800c08c <vPortExitCritical+0x50>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10b      	bne.n	800c062 <vPortExitCritical+0x26>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	607b      	str	r3, [r7, #4]
}
 800c05c:	bf00      	nop
 800c05e:	bf00      	nop
 800c060:	e7fd      	b.n	800c05e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c062:	4b0a      	ldr	r3, [pc, #40]	@ (800c08c <vPortExitCritical+0x50>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	3b01      	subs	r3, #1
 800c068:	4a08      	ldr	r2, [pc, #32]	@ (800c08c <vPortExitCritical+0x50>)
 800c06a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c06c:	4b07      	ldr	r3, [pc, #28]	@ (800c08c <vPortExitCritical+0x50>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d105      	bne.n	800c080 <vPortExitCritical+0x44>
 800c074:	2300      	movs	r3, #0
 800c076:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	f383 8811 	msr	BASEPRI, r3
}
 800c07e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	20000084 	.word	0x20000084

0800c090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c090:	f3ef 8009 	mrs	r0, PSP
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	4b15      	ldr	r3, [pc, #84]	@ (800c0f0 <pxCurrentTCBConst>)
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	f01e 0f10 	tst.w	lr, #16
 800c0a0:	bf08      	it	eq
 800c0a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0aa:	6010      	str	r0, [r2, #0]
 800c0ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c0b4:	f380 8811 	msr	BASEPRI, r0
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f7fe fe90 	bl	800ade4 <vTaskSwitchContext>
 800c0c4:	f04f 0000 	mov.w	r0, #0
 800c0c8:	f380 8811 	msr	BASEPRI, r0
 800c0cc:	bc09      	pop	{r0, r3}
 800c0ce:	6819      	ldr	r1, [r3, #0]
 800c0d0:	6808      	ldr	r0, [r1, #0]
 800c0d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d6:	f01e 0f10 	tst.w	lr, #16
 800c0da:	bf08      	it	eq
 800c0dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c0e0:	f380 8809 	msr	PSP, r0
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	f3af 8000 	nop.w

0800c0f0 <pxCurrentTCBConst>:
 800c0f0:	20001928 	.word	0x20001928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop

0800c0f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	607b      	str	r3, [r7, #4]
}
 800c110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c112:	f7fe fdad 	bl	800ac70 <xTaskIncrementTick>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d003      	beq.n	800c124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c11c:	4b06      	ldr	r3, [pc, #24]	@ (800c138 <xPortSysTickHandler+0x40>)
 800c11e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	2300      	movs	r3, #0
 800c126:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	f383 8811 	msr	BASEPRI, r3
}
 800c12e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c130:	bf00      	nop
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	e000ed04 	.word	0xe000ed04

0800c13c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c13c:	b480      	push	{r7}
 800c13e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c140:	4b0b      	ldr	r3, [pc, #44]	@ (800c170 <vPortSetupTimerInterrupt+0x34>)
 800c142:	2200      	movs	r2, #0
 800c144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c146:	4b0b      	ldr	r3, [pc, #44]	@ (800c174 <vPortSetupTimerInterrupt+0x38>)
 800c148:	2200      	movs	r2, #0
 800c14a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c14c:	4b0a      	ldr	r3, [pc, #40]	@ (800c178 <vPortSetupTimerInterrupt+0x3c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a0a      	ldr	r2, [pc, #40]	@ (800c17c <vPortSetupTimerInterrupt+0x40>)
 800c152:	fba2 2303 	umull	r2, r3, r2, r3
 800c156:	099b      	lsrs	r3, r3, #6
 800c158:	4a09      	ldr	r2, [pc, #36]	@ (800c180 <vPortSetupTimerInterrupt+0x44>)
 800c15a:	3b01      	subs	r3, #1
 800c15c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c15e:	4b04      	ldr	r3, [pc, #16]	@ (800c170 <vPortSetupTimerInterrupt+0x34>)
 800c160:	2207      	movs	r2, #7
 800c162:	601a      	str	r2, [r3, #0]
}
 800c164:	bf00      	nop
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	e000e010 	.word	0xe000e010
 800c174:	e000e018 	.word	0xe000e018
 800c178:	20000008 	.word	0x20000008
 800c17c:	10624dd3 	.word	0x10624dd3
 800c180:	e000e014 	.word	0xe000e014

0800c184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c184:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c194 <vPortEnableVFP+0x10>
 800c188:	6801      	ldr	r1, [r0, #0]
 800c18a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c18e:	6001      	str	r1, [r0, #0]
 800c190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c192:	bf00      	nop
 800c194:	e000ed88 	.word	0xe000ed88

0800c198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c19e:	f3ef 8305 	mrs	r3, IPSR
 800c1a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b0f      	cmp	r3, #15
 800c1a8:	d915      	bls.n	800c1d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1aa:	4a18      	ldr	r2, [pc, #96]	@ (800c20c <vPortValidateInterruptPriority+0x74>)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1b4:	4b16      	ldr	r3, [pc, #88]	@ (800c210 <vPortValidateInterruptPriority+0x78>)
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	7afa      	ldrb	r2, [r7, #11]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d20b      	bcs.n	800c1d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	607b      	str	r3, [r7, #4]
}
 800c1d0:	bf00      	nop
 800c1d2:	bf00      	nop
 800c1d4:	e7fd      	b.n	800c1d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c214 <vPortValidateInterruptPriority+0x7c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c1de:	4b0e      	ldr	r3, [pc, #56]	@ (800c218 <vPortValidateInterruptPriority+0x80>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d90b      	bls.n	800c1fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	603b      	str	r3, [r7, #0]
}
 800c1f8:	bf00      	nop
 800c1fa:	bf00      	nop
 800c1fc:	e7fd      	b.n	800c1fa <vPortValidateInterruptPriority+0x62>
	}
 800c1fe:	bf00      	nop
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	e000e3f0 	.word	0xe000e3f0
 800c210:	20001f54 	.word	0x20001f54
 800c214:	e000ed0c 	.word	0xe000ed0c
 800c218:	20001f58 	.word	0x20001f58

0800c21c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08a      	sub	sp, #40	@ 0x28
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c224:	2300      	movs	r3, #0
 800c226:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c228:	f7fe fc66 	bl	800aaf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c22c:	4b5c      	ldr	r3, [pc, #368]	@ (800c3a0 <pvPortMalloc+0x184>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c234:	f000 f924 	bl	800c480 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c238:	4b5a      	ldr	r3, [pc, #360]	@ (800c3a4 <pvPortMalloc+0x188>)
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4013      	ands	r3, r2
 800c240:	2b00      	cmp	r3, #0
 800c242:	f040 8095 	bne.w	800c370 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d01e      	beq.n	800c28a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c24c:	2208      	movs	r2, #8
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4413      	add	r3, r2
 800c252:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f003 0307 	and.w	r3, r3, #7
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d015      	beq.n	800c28a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f023 0307 	bic.w	r3, r3, #7
 800c264:	3308      	adds	r3, #8
 800c266:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f003 0307 	and.w	r3, r3, #7
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00b      	beq.n	800c28a <pvPortMalloc+0x6e>
	__asm volatile
 800c272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	617b      	str	r3, [r7, #20]
}
 800c284:	bf00      	nop
 800c286:	bf00      	nop
 800c288:	e7fd      	b.n	800c286 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d06f      	beq.n	800c370 <pvPortMalloc+0x154>
 800c290:	4b45      	ldr	r3, [pc, #276]	@ (800c3a8 <pvPortMalloc+0x18c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	429a      	cmp	r2, r3
 800c298:	d86a      	bhi.n	800c370 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c29a:	4b44      	ldr	r3, [pc, #272]	@ (800c3ac <pvPortMalloc+0x190>)
 800c29c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c29e:	4b43      	ldr	r3, [pc, #268]	@ (800c3ac <pvPortMalloc+0x190>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2a4:	e004      	b.n	800c2b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d903      	bls.n	800c2c2 <pvPortMalloc+0xa6>
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1f1      	bne.n	800c2a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2c2:	4b37      	ldr	r3, [pc, #220]	@ (800c3a0 <pvPortMalloc+0x184>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d051      	beq.n	800c370 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2208      	movs	r2, #8
 800c2d2:	4413      	add	r3, r2
 800c2d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	1ad2      	subs	r2, r2, r3
 800c2e6:	2308      	movs	r3, #8
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d920      	bls.n	800c330 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	f003 0307 	and.w	r3, r3, #7
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <pvPortMalloc+0xfc>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	613b      	str	r3, [r7, #16]
}
 800c312:	bf00      	nop
 800c314:	bf00      	nop
 800c316:	e7fd      	b.n	800c314 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	1ad2      	subs	r2, r2, r3
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c32a:	69b8      	ldr	r0, [r7, #24]
 800c32c:	f000 f90c 	bl	800c548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c330:	4b1d      	ldr	r3, [pc, #116]	@ (800c3a8 <pvPortMalloc+0x18c>)
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3a8 <pvPortMalloc+0x18c>)
 800c33c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c33e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a8 <pvPortMalloc+0x18c>)
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	4b1b      	ldr	r3, [pc, #108]	@ (800c3b0 <pvPortMalloc+0x194>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	429a      	cmp	r2, r3
 800c348:	d203      	bcs.n	800c352 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c34a:	4b17      	ldr	r3, [pc, #92]	@ (800c3a8 <pvPortMalloc+0x18c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a18      	ldr	r2, [pc, #96]	@ (800c3b0 <pvPortMalloc+0x194>)
 800c350:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	4b13      	ldr	r3, [pc, #76]	@ (800c3a4 <pvPortMalloc+0x188>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	431a      	orrs	r2, r3
 800c35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c362:	2200      	movs	r2, #0
 800c364:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c366:	4b13      	ldr	r3, [pc, #76]	@ (800c3b4 <pvPortMalloc+0x198>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3301      	adds	r3, #1
 800c36c:	4a11      	ldr	r2, [pc, #68]	@ (800c3b4 <pvPortMalloc+0x198>)
 800c36e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c370:	f7fe fbd0 	bl	800ab14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	f003 0307 	and.w	r3, r3, #7
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00b      	beq.n	800c396 <pvPortMalloc+0x17a>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	60fb      	str	r3, [r7, #12]
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	e7fd      	b.n	800c392 <pvPortMalloc+0x176>
	return pvReturn;
 800c396:	69fb      	ldr	r3, [r7, #28]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3728      	adds	r7, #40	@ 0x28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	2001805c 	.word	0x2001805c
 800c3a4:	20018070 	.word	0x20018070
 800c3a8:	20018060 	.word	0x20018060
 800c3ac:	20018054 	.word	0x20018054
 800c3b0:	20018064 	.word	0x20018064
 800c3b4:	20018068 	.word	0x20018068

0800c3b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d04f      	beq.n	800c46a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3ca:	2308      	movs	r3, #8
 800c3cc:	425b      	negs	r3, r3
 800c3ce:	697a      	ldr	r2, [r7, #20]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	4b25      	ldr	r3, [pc, #148]	@ (800c474 <vPortFree+0xbc>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10b      	bne.n	800c3fe <vPortFree+0x46>
	__asm volatile
 800c3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	60fb      	str	r3, [r7, #12]
}
 800c3f8:	bf00      	nop
 800c3fa:	bf00      	nop
 800c3fc:	e7fd      	b.n	800c3fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00b      	beq.n	800c41e <vPortFree+0x66>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	60bb      	str	r3, [r7, #8]
}
 800c418:	bf00      	nop
 800c41a:	bf00      	nop
 800c41c:	e7fd      	b.n	800c41a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	4b14      	ldr	r3, [pc, #80]	@ (800c474 <vPortFree+0xbc>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4013      	ands	r3, r2
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d01e      	beq.n	800c46a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d11a      	bne.n	800c46a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	685a      	ldr	r2, [r3, #4]
 800c438:	4b0e      	ldr	r3, [pc, #56]	@ (800c474 <vPortFree+0xbc>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	43db      	mvns	r3, r3
 800c43e:	401a      	ands	r2, r3
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c444:	f7fe fb58 	bl	800aaf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	4b0a      	ldr	r3, [pc, #40]	@ (800c478 <vPortFree+0xc0>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4413      	add	r3, r2
 800c452:	4a09      	ldr	r2, [pc, #36]	@ (800c478 <vPortFree+0xc0>)
 800c454:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c456:	6938      	ldr	r0, [r7, #16]
 800c458:	f000 f876 	bl	800c548 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c45c:	4b07      	ldr	r3, [pc, #28]	@ (800c47c <vPortFree+0xc4>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	3301      	adds	r3, #1
 800c462:	4a06      	ldr	r2, [pc, #24]	@ (800c47c <vPortFree+0xc4>)
 800c464:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c466:	f7fe fb55 	bl	800ab14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c46a:	bf00      	nop
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20018070 	.word	0x20018070
 800c478:	20018060 	.word	0x20018060
 800c47c:	2001806c 	.word	0x2001806c

0800c480 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c486:	4b29      	ldr	r3, [pc, #164]	@ (800c52c <prvHeapInit+0xac>)
 800c488:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c48a:	4b29      	ldr	r3, [pc, #164]	@ (800c530 <prvHeapInit+0xb0>)
 800c48c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f003 0307 	and.w	r3, r3, #7
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00c      	beq.n	800c4b2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	3307      	adds	r3, #7
 800c49c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f023 0307 	bic.w	r3, r3, #7
 800c4a4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	4a20      	ldr	r2, [pc, #128]	@ (800c530 <prvHeapInit+0xb0>)
 800c4ae:	4413      	add	r3, r2
 800c4b0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4b6:	4a1f      	ldr	r2, [pc, #124]	@ (800c534 <prvHeapInit+0xb4>)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4bc:	4b1d      	ldr	r3, [pc, #116]	@ (800c534 <prvHeapInit+0xb4>)
 800c4be:	2200      	movs	r2, #0
 800c4c0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4ca:	2208      	movs	r2, #8
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	1a9b      	subs	r3, r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f023 0307 	bic.w	r3, r3, #7
 800c4d8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	4a16      	ldr	r2, [pc, #88]	@ (800c538 <prvHeapInit+0xb8>)
 800c4de:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4e0:	4b15      	ldr	r3, [pc, #84]	@ (800c538 <prvHeapInit+0xb8>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4e8:	4b13      	ldr	r3, [pc, #76]	@ (800c538 <prvHeapInit+0xb8>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	1ad2      	subs	r2, r2, r3
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c4fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c538 <prvHeapInit+0xb8>)
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	4a0c      	ldr	r2, [pc, #48]	@ (800c53c <prvHeapInit+0xbc>)
 800c50c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	4a0b      	ldr	r2, [pc, #44]	@ (800c540 <prvHeapInit+0xc0>)
 800c514:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c516:	4b0b      	ldr	r3, [pc, #44]	@ (800c544 <prvHeapInit+0xc4>)
 800c518:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c51c:	601a      	str	r2, [r3, #0]
}
 800c51e:	bf00      	nop
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	000160f8 	.word	0x000160f8
 800c530:	20001f5c 	.word	0x20001f5c
 800c534:	20018054 	.word	0x20018054
 800c538:	2001805c 	.word	0x2001805c
 800c53c:	20018064 	.word	0x20018064
 800c540:	20018060 	.word	0x20018060
 800c544:	20018070 	.word	0x20018070

0800c548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c550:	4b28      	ldr	r3, [pc, #160]	@ (800c5f4 <prvInsertBlockIntoFreeList+0xac>)
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	e002      	b.n	800c55c <prvInsertBlockIntoFreeList+0x14>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	429a      	cmp	r2, r3
 800c564:	d8f7      	bhi.n	800c556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	4413      	add	r3, r2
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	429a      	cmp	r2, r3
 800c576:	d108      	bne.n	800c58a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	685a      	ldr	r2, [r3, #4]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	441a      	add	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	441a      	add	r2, r3
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d118      	bne.n	800c5d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	4b15      	ldr	r3, [pc, #84]	@ (800c5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d00d      	beq.n	800c5c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	685a      	ldr	r2, [r3, #4]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	441a      	add	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	e008      	b.n	800c5d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	601a      	str	r2, [r3, #0]
 800c5ce:	e003      	b.n	800c5d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d002      	beq.n	800c5e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5e6:	bf00      	nop
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	20018054 	.word	0x20018054
 800c5f8:	2001805c 	.word	0x2001805c

0800c5fc <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 800c604:	2300      	movs	r3, #0
 800c606:	613b      	str	r3, [r7, #16]
 800c608:	2300      	movs	r3, #0
 800c60a:	60fb      	str	r3, [r7, #12]
 800c60c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c610:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 800c612:	f7fe fa71 	bl	800aaf8 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 800c616:	4b22      	ldr	r3, [pc, #136]	@ (800c6a0 <vPortGetHeapStats+0xa4>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d01a      	beq.n	800c658 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	3301      	adds	r3, #1
 800c626:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d202      	bcs.n	800c638 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	68ba      	ldr	r2, [r7, #8]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d902      	bls.n	800c648 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 800c64e:	4b15      	ldr	r3, [pc, #84]	@ (800c6a4 <vPortGetHeapStats+0xa8>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	697a      	ldr	r2, [r7, #20]
 800c654:	429a      	cmp	r2, r3
 800c656:	d1e4      	bne.n	800c622 <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 800c658:	f7fe fa5c 	bl	800ab14 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	693a      	ldr	r2, [r7, #16]
 800c66c:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 800c66e:	f7ff fcb3 	bl	800bfd8 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 800c672:	4b0d      	ldr	r3, [pc, #52]	@ (800c6a8 <vPortGetHeapStats+0xac>)
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 800c67a:	4b0c      	ldr	r3, [pc, #48]	@ (800c6ac <vPortGetHeapStats+0xb0>)
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 800c682:	4b0b      	ldr	r3, [pc, #44]	@ (800c6b0 <vPortGetHeapStats+0xb4>)
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 800c68a:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b4 <vPortGetHeapStats+0xb8>)
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 800c692:	f7ff fcd3 	bl	800c03c <vPortExitCritical>
}
 800c696:	bf00      	nop
 800c698:	3718      	adds	r7, #24
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	20018054 	.word	0x20018054
 800c6a4:	2001805c 	.word	0x2001805c
 800c6a8:	20018060 	.word	0x20018060
 800c6ac:	20018068 	.word	0x20018068
 800c6b0:	2001806c 	.word	0x2001806c
 800c6b4:	20018064 	.word	0x20018064

0800c6b8 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7ff fda6 	bl	800c21c <pvPortMalloc>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d008      	beq.n	800c6ec <mg_calloc+0x34>
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	fb02 f303 	mul.w	r3, r2, r3
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f019 fc36 	bl	8025f58 <memset>
  return p;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
	...

0800c6f8 <mg_fs_lfs_status>:
//struct mg_fs *mg_fs;

void fs_proto(void){}; //function prototype

// Получение информации о файле
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b0c6      	sub	sp, #280	@ 0x118
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c702:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c706:	6018      	str	r0, [r3, #0]
 800c708:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c70c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c710:	6019      	str	r1, [r3, #0]
 800c712:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c716:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c71a:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    if (lfs_stat(&lfs, path, &info) == 0) {
 800c71c:	f107 0210 	add.w	r2, r7, #16
 800c720:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c724:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c728:	6819      	ldr	r1, [r3, #0]
 800c72a:	481d      	ldr	r0, [pc, #116]	@ (800c7a0 <mg_fs_lfs_status+0xa8>)
 800c72c:	f007 ff3c 	bl	80145a8 <lfs_stat>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d12e      	bne.n	800c794 <mg_fs_lfs_status+0x9c>
        if (size) *size = info.size;
 800c736:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c73a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00a      	beq.n	800c75a <mg_fs_lfs_status+0x62>
 800c744:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c752:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	601a      	str	r2, [r3, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 800c75a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c75e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d00a      	beq.n	800c77e <mg_fs_lfs_status+0x86>
 800c768:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c76c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c770:	6819      	ldr	r1, [r3, #0]
 800c772:	f04f 0200 	mov.w	r2, #0
 800c776:	f04f 0300 	mov.w	r3, #0
 800c77a:	e9c1 2300 	strd	r2, r3, [r1]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 800c77e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d101      	bne.n	800c790 <mg_fs_lfs_status+0x98>
 800c78c:	2304      	movs	r3, #4
 800c78e:	e002      	b.n	800c796 <mg_fs_lfs_status+0x9e>
 800c790:	2301      	movs	r3, #1
 800c792:	e000      	b.n	800c796 <mg_fs_lfs_status+0x9e>
    }
    return 0;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	20018074 	.word	0x20018074

0800c7a4 <mg_fs_lfs_list>:

// Список файлов в директории
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b0d4      	sub	sp, #336	@ 0x150
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c7ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800c7b2:	6018      	str	r0, [r3, #0]
 800c7b4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c7b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800c7bc:	6019      	str	r1, [r3, #0]
 800c7be:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c7c2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800c7c6:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    lfs_dir_t dir;
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 800c7c8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c7cc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800c7d0:	f107 0114 	add.w	r1, r7, #20
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	4816      	ldr	r0, [pc, #88]	@ (800c830 <mg_fs_lfs_list+0x8c>)
 800c7d8:	f008 f89e 	bl	8014918 <lfs_dir_open>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d120      	bne.n	800c824 <mg_fs_lfs_list+0x80>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 800c7e2:	e00e      	b.n	800c802 <mg_fs_lfs_list+0x5e>
            fn(info.name, userdata);
 800c7e4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c7e8:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800c7ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c7f0:	f103 0008 	add.w	r0, r3, #8
 800c7f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c7f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6811      	ldr	r1, [r2, #0]
 800c800:	4798      	blx	r3
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 800c802:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800c806:	f107 0314 	add.w	r3, r7, #20
 800c80a:	4619      	mov	r1, r3
 800c80c:	4808      	ldr	r0, [pc, #32]	@ (800c830 <mg_fs_lfs_list+0x8c>)
 800c80e:	f008 f8e4 	bl	80149da <lfs_dir_read>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	dce5      	bgt.n	800c7e4 <mg_fs_lfs_list+0x40>
        }
        lfs_dir_close(&lfs, &dir);
 800c818:	f107 0314 	add.w	r3, r7, #20
 800c81c:	4619      	mov	r1, r3
 800c81e:	4804      	ldr	r0, [pc, #16]	@ (800c830 <mg_fs_lfs_list+0x8c>)
 800c820:	f008 f8b8 	bl	8014994 <lfs_dir_close>
    }
}
 800c824:	bf00      	nop
 800c826:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	20018074 	.word	0x20018074

0800c834 <mg_fs_lfs_open>:

// Открытие файла
void *mg_fs_lfs_open(const char *path, int flags) {
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 800c83e:	2054      	movs	r0, #84	@ 0x54
 800c840:	f7ff fcec 	bl	800c21c <pvPortMalloc>
 800c844:	4603      	mov	r3, r0
 800c846:	60bb      	str	r3, [r7, #8]
    if (fd == NULL) return NULL;
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d101      	bne.n	800c852 <mg_fs_lfs_open+0x1e>
 800c84e:	2300      	movs	r3, #0
 800c850:	e024      	b.n	800c89c <mg_fs_lfs_open+0x68>

    int lfs_flags = 0;
 800c852:	2300      	movs	r3, #0
 800c854:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	f003 0301 	and.w	r3, r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d003      	beq.n	800c868 <mg_fs_lfs_open+0x34>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f043 0301 	orr.w	r3, r3, #1
 800c866:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	f003 0302 	and.w	r3, r3, #2
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d005      	beq.n	800c87e <mg_fs_lfs_open+0x4a>
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 800c878:	f043 0302 	orr.w	r3, r3, #2
 800c87c:	60fb      	str	r3, [r7, #12]

    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 800c87e:	68b9      	ldr	r1, [r7, #8]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	4807      	ldr	r0, [pc, #28]	@ (800c8a4 <mg_fs_lfs_open+0x70>)
 800c886:	f007 feb5 	bl	80145f4 <lfs_file_open>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	da04      	bge.n	800c89a <mg_fs_lfs_open+0x66>
        free(fd);
 800c890:	68b8      	ldr	r0, [r7, #8]
 800c892:	f7ff fd91 	bl	800c3b8 <vPortFree>
        return NULL;
 800c896:	2300      	movs	r3, #0
 800c898:	e000      	b.n	800c89c <mg_fs_lfs_open+0x68>
    }
    return fd;
 800c89a:	68bb      	ldr	r3, [r7, #8]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	20018074 	.word	0x20018074

0800c8a8 <mg_fs_lfs_close>:

// Закрытие файла
void mg_fs_lfs_close(void *fd) {
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	60fb      	str	r3, [r7, #12]
    lfs_file_close(&lfs, &file->file);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	4804      	ldr	r0, [pc, #16]	@ (800c8cc <mg_fs_lfs_close+0x24>)
 800c8ba:	f007 fedb 	bl	8014674 <lfs_file_close>
    free(file);
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f7ff fd7a 	bl	800c3b8 <vPortFree>
}
 800c8c4:	bf00      	nop
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	20018074 	.word	0x20018074

0800c8d0 <mg_fs_lfs_read>:

// Чтение из файла
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	617b      	str	r3, [r7, #20]
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 800c8e0:	6979      	ldr	r1, [r7, #20]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	4805      	ldr	r0, [pc, #20]	@ (800c8fc <mg_fs_lfs_read+0x2c>)
 800c8e8:	f007 fefe 	bl	80146e8 <lfs_file_read>
 800c8ec:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3718      	adds	r7, #24
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	20018074 	.word	0x20018074

0800c900 <mg_fs_lfs_write>:

// Запись в файл
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	617b      	str	r3, [r7, #20]
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 800c910:	6979      	ldr	r1, [r7, #20]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	4805      	ldr	r0, [pc, #20]	@ (800c92c <mg_fs_lfs_write+0x2c>)
 800c918:	f007 ff24 	bl	8014764 <lfs_file_write>
 800c91c:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800c924:	4618      	mov	r0, r3
 800c926:	3718      	adds	r7, #24
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	20018074 	.word	0x20018074

0800c930 <mg_fs_lfs_seek>:

// Установка позиции в файле
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	60fb      	str	r3, [r7, #12]

    // Попытка установить позицию в файле
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 800c93e:	68f9      	ldr	r1, [r7, #12]
 800c940:	683a      	ldr	r2, [r7, #0]
 800c942:	2300      	movs	r3, #0
 800c944:	480c      	ldr	r0, [pc, #48]	@ (800c978 <mg_fs_lfs_seek+0x48>)
 800c946:	f007 ff4b 	bl	80147e0 <lfs_file_seek>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	da02      	bge.n	800c956 <mg_fs_lfs_seek+0x26>
        return (size_t)-1;  // Ошибка при перемещении
 800c950:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c954:	e00c      	b.n	800c970 <mg_fs_lfs_seek+0x40>
    }

    // Получение текущей позиции в файле
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	4619      	mov	r1, r3
 800c95a:	4807      	ldr	r0, [pc, #28]	@ (800c978 <mg_fs_lfs_seek+0x48>)
 800c95c:	f007 ff7e 	bl	801485c <lfs_file_tell>
 800c960:	60b8      	str	r0, [r7, #8]

    // Проверка ошибки
     if (pos < 0) {
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	2b00      	cmp	r3, #0
 800c966:	da02      	bge.n	800c96e <mg_fs_lfs_seek+0x3e>
         return (size_t)-1;  // Ошибка при получении позиции
 800c968:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c96c:	e000      	b.n	800c970 <mg_fs_lfs_seek+0x40>
     }

     return (size_t)pos;  // Возвращаем текущую позицию
 800c96e:	68bb      	ldr	r3, [r7, #8]

}
 800c970:	4618      	mov	r0, r3
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	20018074 	.word	0x20018074

0800c97c <mg_fs_lfs_rename>:

// Переименование файла
bool mg_fs_lfs_rename(const char *from, const char *to) {
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
    return lfs_rename(&lfs, from, to) == 0;
 800c986:	683a      	ldr	r2, [r7, #0]
 800c988:	6879      	ldr	r1, [r7, #4]
 800c98a:	4806      	ldr	r0, [pc, #24]	@ (800c9a4 <mg_fs_lfs_rename+0x28>)
 800c98c:	f007 fde7 	bl	801455e <lfs_rename>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	bf0c      	ite	eq
 800c996:	2301      	moveq	r3, #1
 800c998:	2300      	movne	r3, #0
 800c99a:	b2db      	uxtb	r3, r3
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3708      	adds	r7, #8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	20018074 	.word	0x20018074

0800c9a8 <mg_fs_lfs_remove>:

// Удаление файла
bool mg_fs_lfs_remove(const char *path) {
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
    return lfs_remove(&lfs, path) == 0;
 800c9b0:	6879      	ldr	r1, [r7, #4]
 800c9b2:	4806      	ldr	r0, [pc, #24]	@ (800c9cc <mg_fs_lfs_remove+0x24>)
 800c9b4:	f007 fdb0 	bl	8014518 <lfs_remove>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	bf0c      	ite	eq
 800c9be:	2301      	moveq	r3, #1
 800c9c0:	2300      	movne	r3, #0
 800c9c2:	b2db      	uxtb	r3, r3
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	20018074 	.word	0x20018074

0800c9d0 <mg_fs_lfs_mkdir>:
    // Удаление пустой директории
    return lfs_remove(&lfs, path);
}

// Создание директории
bool mg_fs_lfs_mkdir(const char *path) {
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
    return lfs_mkdir(&lfs, path) == 0;
 800c9d8:	6879      	ldr	r1, [r7, #4]
 800c9da:	4806      	ldr	r0, [pc, #24]	@ (800c9f4 <mg_fs_lfs_mkdir+0x24>)
 800c9dc:	f007 ff78 	bl	80148d0 <lfs_mkdir>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	bf0c      	ite	eq
 800c9e6:	2301      	moveq	r3, #1
 800c9e8:	2300      	movne	r3, #0
 800c9ea:	b2db      	uxtb	r3, r3
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	20018074 	.word	0x20018074

0800c9f8 <lfs_fs_ll_init>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size);
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size);
int block_device_erase(const struct lfs_config *c, lfs_block_t block);
int block_device_sync(const struct lfs_config *c);

int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08a      	sub	sp, #40	@ 0x28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]

	struct SPI_flash_info	flash_info;

	flash_info = sFLASH_GetInfo();
 800ca02:	f107 030c 	add.w	r3, r7, #12
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7f8 fc1c 	bl	8005244 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d102      	bne.n	800ca18 <lfs_fs_ll_init+0x20>
 800ca12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca16:	e066      	b.n	800cae6 <lfs_fs_ll_init+0xee>

	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 800ca18:	8afb      	ldrh	r3, [r7, #22]
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	2001      	movs	r0, #1
 800ca1e:	f7ff fe4b 	bl	800c6b8 <mg_calloc>
 800ca22:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 800ca24:	8afb      	ldrh	r3, [r7, #22]
 800ca26:	4619      	mov	r1, r3
 800ca28:	2001      	movs	r0, #1
 800ca2a:	f7ff fe45 	bl	800c6b8 <mg_calloc>
 800ca2e:	6238      	str	r0, [r7, #32]
	void * lookahead_buff = calloc(1, flash_info.page_size);
 800ca30:	8afb      	ldrh	r3, [r7, #22]
 800ca32:	4619      	mov	r1, r3
 800ca34:	2001      	movs	r0, #1
 800ca36:	f7ff fe3f 	bl	800c6b8 <mg_calloc>
 800ca3a:	61f8      	str	r0, [r7, #28]

	if (!(read_buff || write_buff || lookahead_buff)){
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d108      	bne.n	800ca54 <lfs_fs_ll_init+0x5c>
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d105      	bne.n	800ca54 <lfs_fs_ll_init+0x5c>
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d102      	bne.n	800ca54 <lfs_fs_ll_init+0x5c>
		return -2;
 800ca4e:	f06f 0301 	mvn.w	r3, #1
 800ca52:	e048      	b.n	800cae6 <lfs_fs_ll_init+0xee>
	}

	cfg.read_size         = flash_info.read_size;
 800ca54:	8a3b      	ldrh	r3, [r7, #16]
 800ca56:	461a      	mov	r2, r3
 800ca58:	4b25      	ldr	r3, [pc, #148]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800ca5a:	61da      	str	r2, [r3, #28]
	cfg.prog_size         = flash_info.write_size;
 800ca5c:	8a7b      	ldrh	r3, [r7, #18]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	4b23      	ldr	r3, [pc, #140]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800ca62:	621a      	str	r2, [r3, #32]
    cfg.block_size        = flash_info.erase_size;
 800ca64:	8abb      	ldrh	r3, [r7, #20]
 800ca66:	461a      	mov	r2, r3
 800ca68:	4b21      	ldr	r3, [pc, #132]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800ca6a:	625a      	str	r2, [r3, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 800ca6c:	8b3b      	ldrh	r3, [r7, #24]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	4b1f      	ldr	r3, [pc, #124]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800ca72:	629a      	str	r2, [r3, #40]	@ 0x28

    cfg.lookahead_size    = flash_info.page_size;
 800ca74:	8afb      	ldrh	r3, [r7, #22]
 800ca76:	461a      	mov	r2, r3
 800ca78:	4b1d      	ldr	r3, [pc, #116]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800ca7a:	635a      	str	r2, [r3, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 800ca7c:	8afb      	ldrh	r3, [r7, #22]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	4b1b      	ldr	r3, [pc, #108]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800ca82:	631a      	str	r2, [r3, #48]	@ 0x30

    cfg.read_buffer       = read_buff;
 800ca84:	4a1a      	ldr	r2, [pc, #104]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800ca86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca88:	63d3      	str	r3, [r2, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 800ca8a:	4a19      	ldr	r2, [pc, #100]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800ca8c:	6a3b      	ldr	r3, [r7, #32]
 800ca8e:	6413      	str	r3, [r2, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 800ca90:	4a17      	ldr	r2, [pc, #92]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	6453      	str	r3, [r2, #68]	@ 0x44

    cfg.read   = block_device_read;
 800ca96:	4b16      	ldr	r3, [pc, #88]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800ca98:	4a16      	ldr	r2, [pc, #88]	@ (800caf4 <lfs_fs_ll_init+0xfc>)
 800ca9a:	605a      	str	r2, [r3, #4]
    cfg.prog   = block_device_prog;
 800ca9c:	4b14      	ldr	r3, [pc, #80]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800ca9e:	4a16      	ldr	r2, [pc, #88]	@ (800caf8 <lfs_fs_ll_init+0x100>)
 800caa0:	609a      	str	r2, [r3, #8]
    cfg.erase  = block_device_erase;
 800caa2:	4b13      	ldr	r3, [pc, #76]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800caa4:	4a15      	ldr	r2, [pc, #84]	@ (800cafc <lfs_fs_ll_init+0x104>)
 800caa6:	60da      	str	r2, [r3, #12]
    cfg.sync   = block_device_sync;
 800caa8:	4b11      	ldr	r3, [pc, #68]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800caaa:	4a15      	ldr	r2, [pc, #84]	@ (800cb00 <lfs_fs_ll_init+0x108>)
 800caac:	611a      	str	r2, [r3, #16]

    cfg.lock 	= lock;
 800caae:	4a10      	ldr	r2, [pc, #64]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6153      	str	r3, [r2, #20]
	cfg.unlock	= unlock;
 800cab4:	4a0e      	ldr	r2, [pc, #56]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	6193      	str	r3, [r2, #24]

#ifdef LFS_THREADSAFE
#endif

    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 800caba:	4b0d      	ldr	r3, [pc, #52]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800cabc:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cac0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (lfs_mount(&lfs, &cfg)< 0){
 800cac2:	490b      	ldr	r1, [pc, #44]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800cac4:	480f      	ldr	r0, [pc, #60]	@ (800cb04 <lfs_fs_ll_init+0x10c>)
 800cac6:	f007 fd0a 	bl	80144de <lfs_mount>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	da09      	bge.n	800cae4 <lfs_fs_ll_init+0xec>
    	lfs_format(&lfs, &cfg);
 800cad0:	4907      	ldr	r1, [pc, #28]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800cad2:	480c      	ldr	r0, [pc, #48]	@ (800cb04 <lfs_fs_ll_init+0x10c>)
 800cad4:	f007 fce6 	bl	80144a4 <lfs_format>
    	return lfs_mount(&lfs, &cfg);
 800cad8:	4905      	ldr	r1, [pc, #20]	@ (800caf0 <lfs_fs_ll_init+0xf8>)
 800cada:	480a      	ldr	r0, [pc, #40]	@ (800cb04 <lfs_fs_ll_init+0x10c>)
 800cadc:	f007 fcff 	bl	80144de <lfs_mount>
 800cae0:	4603      	mov	r3, r0
 800cae2:	e000      	b.n	800cae6 <lfs_fs_ll_init+0xee>
    }

	return 0;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3728      	adds	r7, #40	@ 0x28
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	200180f4 	.word	0x200180f4
 800caf4:	0800cb09 	.word	0x0800cb09
 800caf8:	0800cba9 	.word	0x0800cba9
 800cafc:	0800cb61 	.word	0x0800cb61
 800cb00:	0800cc01 	.word	0x0800cc01
 800cb04:	20018074 	.word	0x20018074

0800cb08 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d306      	bcc.n	800cb2e <block_device_read+0x26>
 800cb20:	4b0c      	ldr	r3, [pc, #48]	@ (800cb54 <block_device_read+0x4c>)
 800cb22:	4a0d      	ldr	r2, [pc, #52]	@ (800cb58 <block_device_read+0x50>)
 800cb24:	f240 1111 	movw	r1, #273	@ 0x111
 800cb28:	480c      	ldr	r0, [pc, #48]	@ (800cb5c <block_device_read+0x54>)
 800cb2a:	f016 fa35 	bl	8022f98 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	fb03 f202 	mul.w	r2, r3, r2
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	69ba      	ldr	r2, [r7, #24]
 800cb3e:	b292      	uxth	r2, r2
 800cb40:	4619      	mov	r1, r3
 800cb42:	6838      	ldr	r0, [r7, #0]
 800cb44:	f7f8 fd4c 	bl	80055e0 <sFLASH_ReadBuffer>
	return 0;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	080303f0 	.word	0x080303f0
 800cb58:	08033bbc 	.word	0x08033bbc
 800cb5c:	08030408 	.word	0x08030408

0800cb60 <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb6e:	683a      	ldr	r2, [r7, #0]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d306      	bcc.n	800cb82 <block_device_erase+0x22>
 800cb74:	4b09      	ldr	r3, [pc, #36]	@ (800cb9c <block_device_erase+0x3c>)
 800cb76:	4a0a      	ldr	r2, [pc, #40]	@ (800cba0 <block_device_erase+0x40>)
 800cb78:	f240 1119 	movw	r1, #281	@ 0x119
 800cb7c:	4809      	ldr	r0, [pc, #36]	@ (800cba4 <block_device_erase+0x44>)
 800cb7e:	f016 fa0b 	bl	8022f98 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	fb02 f303 	mul.w	r3, r2, r3
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7f8 fc25 	bl	80053dc <sFLASH_EraseSector>
	return 0;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	080303f0 	.word	0x080303f0
 800cba0:	08033bd0 	.word	0x08033bd0
 800cba4:	08030408 	.word	0x08030408

0800cba8 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
 800cbb4:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbba:	68ba      	ldr	r2, [r7, #8]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d306      	bcc.n	800cbce <block_device_prog+0x26>
 800cbc0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbf4 <block_device_prog+0x4c>)
 800cbc2:	4a0d      	ldr	r2, [pc, #52]	@ (800cbf8 <block_device_prog+0x50>)
 800cbc4:	f240 1121 	movw	r1, #289	@ 0x121
 800cbc8:	480c      	ldr	r0, [pc, #48]	@ (800cbfc <block_device_prog+0x54>)
 800cbca:	f016 f9e5 	bl	8022f98 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	fb03 f202 	mul.w	r2, r3, r2
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4413      	add	r3, r2
 800cbdc:	69ba      	ldr	r2, [r7, #24]
 800cbde:	b292      	uxth	r2, r2
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	6838      	ldr	r0, [r7, #0]
 800cbe4:	f7f8 fc53 	bl	800548e <sFLASH_WriteBuffer>
	return 0;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	080303f0 	.word	0x080303f0
 800cbf8:	08033be4 	.word	0x08033be4
 800cbfc:	08030408 	.word	0x08030408

0800cc00 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
	return 0;
 800cc08:	2300      	movs	r3, #0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	370c      	adds	r7, #12
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800cc16:	b480      	push	{r7}
 800cc18:	b083      	sub	sp, #12
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4293      	cmp	r3, r2
 800cc26:	bf38      	it	cc
 800cc28:	4613      	movcc	r3, r2
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	370c      	adds	r7, #12
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr

0800cc36 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800cc36:	b480      	push	{r7}
 800cc38:	b083      	sub	sp, #12
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800cc40:	683a      	ldr	r2, [r7, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4293      	cmp	r3, r2
 800cc46:	bf28      	it	cs
 800cc48:	4613      	movcs	r3, r2
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	370c      	adds	r7, #12
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr

0800cc56 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800cc56:	b480      	push	{r7}
 800cc58:	b083      	sub	sp, #12
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	fb01 f202 	mul.w	r2, r1, r2
 800cc6e:	1a9b      	subs	r3, r3, r2
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	1ad3      	subs	r3, r2, r3
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	4413      	add	r3, r2
 800cc90:	3b01      	subs	r3, #1
 800cc92:	6839      	ldr	r1, [r7, #0]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff ffde 	bl	800cc56 <lfs_aligndown>
 800cc9a:	4603      	mov	r3, r0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	fab3 f383 	clz	r3, r3
 800ccb4:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	fa93 f3a3 	rbit	r3, r3
 800ccd2:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	370c      	adds	r7, #12
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b082      	sub	sp, #8
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7f4 f84c 	bl	8000d88 <__popcountsi2>
 800ccf0:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800ccfa:	b480      	push	{r7}
 800ccfc:	b083      	sub	sp, #12
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
 800cd02:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	1ad3      	subs	r3, r2, r3
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	370c      	adds	r7, #12
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800cd16:	b480      	push	{r7}
 800cd18:	b083      	sub	sp, #12
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800cd1e:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f7ff ffee 	bl	800cd16 <lfs_fromle32>
 800cd3a:	4603      	mov	r3, r0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7ff ffed 	bl	800cd44 <lfs_frombe32>
 800cd6a:	4603      	mov	r3, r0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff fa4d 	bl	800c21c <pvPortMalloc>
 800cd82:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f7ff fb0f 	bl	800c3b8 <vPortFree>
#else
    (void)p;
#endif
}
 800cd9a:	bf00      	nop
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800cda2:	b480      	push	{r7}
 800cda4:	b083      	sub	sp, #12
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdb2:	601a      	str	r2, [r3, #0]
}
 800cdb4:	bf00      	nop
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	68d8      	ldr	r0, [r3, #12]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	21ff      	movs	r1, #255	@ 0xff
 800cdd8:	f019 f8be 	bl	8025f58 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cde2:	601a      	str	r2, [r3, #0]
}
 800cde4:	bf00      	nop
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800cdec:	b5b0      	push	{r4, r5, r7, lr}
 800cdee:	b08a      	sub	sp, #40	@ 0x28
 800cdf0:	af02      	add	r7, sp, #8
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfc:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 800cdfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce02:	441a      	add	r2, r3
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d80a      	bhi.n	800ce24 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f000 8124 	beq.w	800d060 <lfs_bd_read+0x274>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	f0c0 811e 	bcc.w	800d060 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 800ce24:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800ce28:	e11f      	b.n	800d06a <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800ce2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce2c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d03f      	beq.n	800ceb4 <lfs_bd_read+0xc8>
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d13a      	bne.n	800ceb4 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	685a      	ldr	r2, [r3, #4]
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800ce48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d232      	bcs.n	800ceb4 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d324      	bcc.n	800cea2 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	689a      	ldr	r2, [r3, #8]
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	6859      	ldr	r1, [r3, #4]
 800ce60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce62:	1acb      	subs	r3, r1, r3
 800ce64:	4413      	add	r3, r2
 800ce66:	4619      	mov	r1, r3
 800ce68:	69b8      	ldr	r0, [r7, #24]
 800ce6a:	f7ff fee4 	bl	800cc36 <lfs_min>
 800ce6e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	68da      	ldr	r2, [r3, #12]
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ce7a:	1acb      	subs	r3, r1, r3
 800ce7c:	4413      	add	r3, r2
 800ce7e:	69ba      	ldr	r2, [r7, #24]
 800ce80:	4619      	mov	r1, r3
 800ce82:	69f8      	ldr	r0, [r7, #28]
 800ce84:	f01a fac0 	bl	8027408 <memcpy>

                data += diff;
 800ce88:	69fa      	ldr	r2, [r7, #28]
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800ce90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	4413      	add	r3, r2
 800ce96:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800ce98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800cea0:	e0de      	b.n	800d060 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	685a      	ldr	r2, [r3, #4]
 800cea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	4619      	mov	r1, r3
 800ceac:	69b8      	ldr	r0, [r7, #24]
 800ceae:	f7ff fec2 	bl	800cc36 <lfs_min>
 800ceb2:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d13a      	bne.n	800cf34 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	685a      	ldr	r2, [r3, #4]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	4413      	add	r3, r2
        if (block == rcache->block &&
 800cec8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d232      	bcs.n	800cf34 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d324      	bcc.n	800cf22 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	689a      	ldr	r2, [r3, #8]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6859      	ldr	r1, [r3, #4]
 800cee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee2:	1acb      	subs	r3, r1, r3
 800cee4:	4413      	add	r3, r2
 800cee6:	4619      	mov	r1, r3
 800cee8:	69b8      	ldr	r0, [r7, #24]
 800ceea:	f7ff fea4 	bl	800cc36 <lfs_min>
 800ceee:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	68da      	ldr	r2, [r3, #12]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cefa:	1acb      	subs	r3, r1, r3
 800cefc:	4413      	add	r3, r2
 800cefe:	69ba      	ldr	r2, [r7, #24]
 800cf00:	4619      	mov	r1, r3
 800cf02:	69f8      	ldr	r0, [r7, #28]
 800cf04:	f01a fa80 	bl	8027408 <memcpy>

                data += diff;
 800cf08:	69fa      	ldr	r2, [r7, #28]
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800cf10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	4413      	add	r3, r2
 800cf16:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800cf18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800cf20:	e09e      	b.n	800d060 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	685a      	ldr	r2, [r3, #4]
 800cf26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	69b8      	ldr	r0, [r7, #24]
 800cf2e:	f7ff fe82 	bl	800cc36 <lfs_min>
 800cf32:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800cf34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d336      	bcc.n	800cfaa <lfs_bd_read+0x1be>
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf40:	69da      	ldr	r2, [r3, #28]
 800cf42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf44:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf48:	fb01 f202 	mul.w	r2, r1, r2
 800cf4c:	1a9b      	subs	r3, r3, r2
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d12b      	bne.n	800cfaa <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf56:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800cf58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d325      	bcc.n	800cfaa <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf62:	69db      	ldr	r3, [r3, #28]
 800cf64:	4619      	mov	r1, r3
 800cf66:	69b8      	ldr	r0, [r7, #24]
 800cf68:	f7ff fe75 	bl	800cc56 <lfs_aligndown>
 800cf6c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf72:	685c      	ldr	r4, [r3, #4]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cf82:	47a0      	blx	r4
 800cf84:	6178      	str	r0, [r7, #20]
            if (err) {
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <lfs_bd_read+0x1a4>
                return err;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	e06c      	b.n	800d06a <lfs_bd_read+0x27e>
            }

            data += diff;
 800cf90:	69fa      	ldr	r2, [r7, #28]
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	4413      	add	r3, r2
 800cf96:	61fb      	str	r3, [r7, #28]
            off += diff;
 800cf98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 800cfa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 800cfa8:	e05a      	b.n	800d060 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <lfs_bd_read+0x1dc>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d305      	bcc.n	800cfc8 <lfs_bd_read+0x1dc>
 800cfbc:	4b2d      	ldr	r3, [pc, #180]	@ (800d074 <lfs_bd_read+0x288>)
 800cfbe:	4a2e      	ldr	r2, [pc, #184]	@ (800d078 <lfs_bd_read+0x28c>)
 800cfc0:	216b      	movs	r1, #107	@ 0x6b
 800cfc2:	482e      	ldr	r0, [pc, #184]	@ (800d07c <lfs_bd_read+0x290>)
 800cfc4:	f015 ffe8 	bl	8022f98 <__assert_func>
        rcache->block = block;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfcc:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfd2:	69db      	ldr	r3, [r3, #28]
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cfd8:	f7ff fe3d 	bl	800cc56 <lfs_aligndown>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800cfe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfec:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800cfee:	4619      	mov	r1, r3
 800cff0:	4610      	mov	r0, r2
 800cff2:	f7ff fe45 	bl	800cc80 <lfs_alignup>
 800cff6:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                lfs_min(
 800cffe:	4619      	mov	r1, r3
 800d000:	4610      	mov	r0, r2
 800d002:	f7ff fe18 	bl	800cc36 <lfs_min>
 800d006:	4602      	mov	r2, r0
                - rcache->off,
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800d00c:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(
 800d014:	4619      	mov	r1, r3
 800d016:	4610      	mov	r0, r2
 800d018:	f7ff fe0d 	bl	800cc36 <lfs_min>
 800d01c:	4602      	mov	r2, r0
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d026:	685c      	ldr	r4, [r3, #4]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6819      	ldr	r1, [r3, #0]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	462b      	mov	r3, r5
 800d040:	47a0      	blx	r4
 800d042:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	2b00      	cmp	r3, #0
 800d048:	dd05      	ble.n	800d056 <lfs_bd_read+0x26a>
 800d04a:	4b0d      	ldr	r3, [pc, #52]	@ (800d080 <lfs_bd_read+0x294>)
 800d04c:	4a0a      	ldr	r2, [pc, #40]	@ (800d078 <lfs_bd_read+0x28c>)
 800d04e:	2176      	movs	r1, #118	@ 0x76
 800d050:	480a      	ldr	r0, [pc, #40]	@ (800d07c <lfs_bd_read+0x290>)
 800d052:	f015 ffa1 	bl	8022f98 <__assert_func>
        if (err) {
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <lfs_bd_read+0x274>
            return err;
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	e004      	b.n	800d06a <lfs_bd_read+0x27e>
    while (size > 0) {
 800d060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d062:	2b00      	cmp	r3, #0
 800d064:	f47f aee1 	bne.w	800ce2a <lfs_bd_read+0x3e>
        }
    }

    return 0;
 800d068:	2300      	movs	r3, #0
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3720      	adds	r7, #32
 800d06e:	46bd      	mov	sp, r7
 800d070:	bdb0      	pop	{r4, r5, r7, pc}
 800d072:	bf00      	nop
 800d074:	08030444 	.word	0x08030444
 800d078:	08033bf8 	.word	0x08033bf8
 800d07c:	08030474 	.word	0x08030474
 800d080:	080304a4 	.word	0x080304a4

0800d084 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800d084:	b580      	push	{r7, lr}
 800d086:	b090      	sub	sp, #64	@ 0x40
 800d088:	af04      	add	r7, sp, #16
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
 800d090:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800d092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d094:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 800d09a:	2300      	movs	r3, #0
 800d09c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d09e:	e039      	b.n	800d114 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800d0a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a4:	1ad3      	subs	r3, r2, r3
 800d0a6:	2108      	movs	r1, #8
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff fdc4 	bl	800cc36 <lfs_min>
 800d0ae:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b4:	1ad1      	subs	r1, r2, r3
 800d0b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ba:	4413      	add	r3, r2
 800d0bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0be:	9203      	str	r2, [sp, #12]
 800d0c0:	f107 0214 	add.w	r2, r7, #20
 800d0c4:	9202      	str	r2, [sp, #8]
 800d0c6:	9301      	str	r3, [sp, #4]
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	68b9      	ldr	r1, [r7, #8]
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f7ff fe8a 	bl	800cdec <lfs_bd_read>
 800d0d8:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800d0da:	6a3b      	ldr	r3, [r7, #32]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d001      	beq.n	800d0e4 <lfs_bd_cmp+0x60>
            return err;
 800d0e0:	6a3b      	ldr	r3, [r7, #32]
 800d0e2:	e01c      	b.n	800d11e <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 800d0e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e8:	18d1      	adds	r1, r2, r3
 800d0ea:	f107 0314 	add.w	r3, r7, #20
 800d0ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f018 fe9d 	bl	8025e30 <memcmp>
 800d0f6:	61f8      	str	r0, [r7, #28]
        if (res) {
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d006      	beq.n	800d10c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	2b00      	cmp	r3, #0
 800d102:	da01      	bge.n	800d108 <lfs_bd_cmp+0x84>
 800d104:	2301      	movs	r3, #1
 800d106:	e00a      	b.n	800d11e <lfs_bd_cmp+0x9a>
 800d108:	2302      	movs	r3, #2
 800d10a:	e008      	b.n	800d11e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800d10c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d110:	4413      	add	r3, r2
 800d112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d118:	429a      	cmp	r2, r3
 800d11a:	d3c1      	bcc.n	800d0a0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3730      	adds	r7, #48	@ 0x30
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800d126:	b580      	push	{r7, lr}
 800d128:	b08e      	sub	sp, #56	@ 0x38
 800d12a:	af04      	add	r7, sp, #16
 800d12c:	60f8      	str	r0, [r7, #12]
 800d12e:	60b9      	str	r1, [r7, #8]
 800d130:	607a      	str	r2, [r7, #4]
 800d132:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800d138:	2300      	movs	r3, #0
 800d13a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d13c:	e030      	b.n	800d1a0 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800d13e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d142:	1ad3      	subs	r3, r2, r3
 800d144:	2108      	movs	r1, #8
 800d146:	4618      	mov	r0, r3
 800d148:	f7ff fd75 	bl	800cc36 <lfs_min>
 800d14c:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 800d14e:	683a      	ldr	r2, [r7, #0]
 800d150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d152:	1ad1      	subs	r1, r2, r3
 800d154:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d158:	4413      	add	r3, r2
 800d15a:	6a3a      	ldr	r2, [r7, #32]
 800d15c:	9203      	str	r2, [sp, #12]
 800d15e:	f107 0214 	add.w	r2, r7, #20
 800d162:	9202      	str	r2, [sp, #8]
 800d164:	9301      	str	r3, [sp, #4]
 800d166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	460b      	mov	r3, r1
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	68b9      	ldr	r1, [r7, #8]
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f7ff fe3b 	bl	800cdec <lfs_bd_read>
 800d176:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <lfs_bd_crc+0x5c>
            return err;
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	e013      	b.n	800d1aa <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 800d182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f107 0114 	add.w	r1, r7, #20
 800d18a:	6a3a      	ldr	r2, [r7, #32]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f007 fc49 	bl	8014a24 <lfs_crc>
 800d192:	4602      	mov	r2, r0
 800d194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d196:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 800d198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	4413      	add	r3, r2
 800d19e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d3ca      	bcc.n	800d13e <lfs_bd_crc+0x18>
    }

    return 0;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3728      	adds	r7, #40	@ 0x28
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
	...

0800d1b4 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800d1b4:	b5b0      	push	{r4, r5, r7, lr}
 800d1b6:	b08c      	sub	sp, #48	@ 0x30
 800d1b8:	af04      	add	r7, sp, #16
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1ca:	d060      	beq.n	800d28e <lfs_bd_flush+0xda>
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f113 0f02 	cmn.w	r3, #2
 800d1d4:	d05b      	beq.n	800d28e <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d305      	bcc.n	800d1ee <lfs_bd_flush+0x3a>
 800d1e2:	4b2d      	ldr	r3, [pc, #180]	@ (800d298 <lfs_bd_flush+0xe4>)
 800d1e4:	4a2d      	ldr	r2, [pc, #180]	@ (800d29c <lfs_bd_flush+0xe8>)
 800d1e6:	21b3      	movs	r1, #179	@ 0xb3
 800d1e8:	482d      	ldr	r0, [pc, #180]	@ (800d2a0 <lfs_bd_flush+0xec>)
 800d1ea:	f015 fed5 	bl	8022f98 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	689a      	ldr	r2, [r3, #8]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1f6:	6a1b      	ldr	r3, [r3, #32]
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	f7ff fd40 	bl	800cc80 <lfs_alignup>
 800d200:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d206:	689c      	ldr	r4, [r3, #8]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	6819      	ldr	r1, [r3, #0]
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	462b      	mov	r3, r5
 800d21e:	47a0      	blx	r4
 800d220:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	2b00      	cmp	r3, #0
 800d226:	dd05      	ble.n	800d234 <lfs_bd_flush+0x80>
 800d228:	4b1e      	ldr	r3, [pc, #120]	@ (800d2a4 <lfs_bd_flush+0xf0>)
 800d22a:	4a1c      	ldr	r2, [pc, #112]	@ (800d29c <lfs_bd_flush+0xe8>)
 800d22c:	21b7      	movs	r1, #183	@ 0xb7
 800d22e:	481c      	ldr	r0, [pc, #112]	@ (800d2a0 <lfs_bd_flush+0xec>)
 800d230:	f015 feb2 	bl	8022f98 <__assert_func>
        if (err) {
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d001      	beq.n	800d23e <lfs_bd_flush+0x8a>
            return err;
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	e028      	b.n	800d290 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 800d23e:	78fb      	ldrb	r3, [r7, #3]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d020      	beq.n	800d286 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800d244:	6879      	ldr	r1, [r7, #4]
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f7ff fdab 	bl	800cda2 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800d254:	68b9      	ldr	r1, [r7, #8]
 800d256:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800d258:	69f8      	ldr	r0, [r7, #28]
 800d25a:	9003      	str	r0, [sp, #12]
 800d25c:	9102      	str	r1, [sp, #8]
 800d25e:	9201      	str	r2, [sp, #4]
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	2100      	movs	r1, #0
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f7ff ff0b 	bl	800d084 <lfs_bd_cmp>
 800d26e:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	2b00      	cmp	r3, #0
 800d274:	da01      	bge.n	800d27a <lfs_bd_flush+0xc6>
                return res;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	e00a      	b.n	800d290 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d002      	beq.n	800d286 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 800d280:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800d284:	e004      	b.n	800d290 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800d286:	68b9      	ldr	r1, [r7, #8]
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f7ff fd99 	bl	800cdc0 <lfs_cache_zero>
    }

    return 0;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3720      	adds	r7, #32
 800d294:	46bd      	mov	sp, r7
 800d296:	bdb0      	pop	{r4, r5, r7, pc}
 800d298:	080304b0 	.word	0x080304b0
 800d29c:	08033c04 	.word	0x08033c04
 800d2a0:	08030474 	.word	0x08030474
 800d2a4:	080304a4 	.word	0x080304a4

0800d2a8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b086      	sub	sp, #24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]
 800d2b4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800d2b6:	6879      	ldr	r1, [r7, #4]
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f7ff fd72 	bl	800cda2 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800d2be:	78fb      	ldrb	r3, [r7, #3]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	68b9      	ldr	r1, [r7, #8]
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f7ff ff75 	bl	800d1b4 <lfs_bd_flush>
 800d2ca:	6178      	str	r0, [r7, #20]
    if (err) {
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <lfs_bd_sync+0x2e>
        return err;
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	e011      	b.n	800d2fa <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2da:	691b      	ldr	r3, [r3, #16]
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	4798      	blx	r3
 800d2e4:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	dd05      	ble.n	800d2f8 <lfs_bd_sync+0x50>
 800d2ec:	4b05      	ldr	r3, [pc, #20]	@ (800d304 <lfs_bd_sync+0x5c>)
 800d2ee:	4a06      	ldr	r2, [pc, #24]	@ (800d308 <lfs_bd_sync+0x60>)
 800d2f0:	21dd      	movs	r1, #221	@ 0xdd
 800d2f2:	4806      	ldr	r0, [pc, #24]	@ (800d30c <lfs_bd_sync+0x64>)
 800d2f4:	f015 fe50 	bl	8022f98 <__assert_func>
    return err;
 800d2f8:	697b      	ldr	r3, [r7, #20]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3718      	adds	r7, #24
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	080304a4 	.word	0x080304a4
 800d308:	08033c14 	.word	0x08033c14
 800d30c:	08030474 	.word	0x08030474

0800d310 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800d310:	b580      	push	{r7, lr}
 800d312:	b088      	sub	sp, #32
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
 800d31c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800d31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d320:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800d322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d324:	f113 0f02 	cmn.w	r3, #2
 800d328:	d00a      	beq.n	800d340 <lfs_bd_prog+0x30>
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d32e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d330:	429a      	cmp	r2, r3
 800d332:	d305      	bcc.n	800d340 <lfs_bd_prog+0x30>
 800d334:	4b48      	ldr	r3, [pc, #288]	@ (800d458 <lfs_bd_prog+0x148>)
 800d336:	4a49      	ldr	r2, [pc, #292]	@ (800d45c <lfs_bd_prog+0x14c>)
 800d338:	21e8      	movs	r1, #232	@ 0xe8
 800d33a:	4849      	ldr	r0, [pc, #292]	@ (800d460 <lfs_bd_prog+0x150>)
 800d33c:	f015 fe2c 	bl	8022f98 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800d340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d344:	441a      	add	r2, r3
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d97a      	bls.n	800d446 <lfs_bd_prog+0x136>
 800d350:	4b44      	ldr	r3, [pc, #272]	@ (800d464 <lfs_bd_prog+0x154>)
 800d352:	4a42      	ldr	r2, [pc, #264]	@ (800d45c <lfs_bd_prog+0x14c>)
 800d354:	21e9      	movs	r1, #233	@ 0xe9
 800d356:	4842      	ldr	r0, [pc, #264]	@ (800d460 <lfs_bd_prog+0x150>)
 800d358:	f015 fe1e 	bl	8022f98 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d362:	429a      	cmp	r2, r3
 800d364:	d151      	bne.n	800d40a <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800d36a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d34c      	bcc.n	800d40a <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d37a:	4413      	add	r3, r2
                off >= pcache->off &&
 800d37c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d37e:	429a      	cmp	r2, r3
 800d380:	d243      	bcs.n	800d40a <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d386:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	6859      	ldr	r1, [r3, #4]
 800d38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38e:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800d390:	4413      	add	r3, r2
 800d392:	4619      	mov	r1, r3
 800d394:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d396:	f7ff fc4e 	bl	800cc36 <lfs_min>
 800d39a:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	68da      	ldr	r2, [r3, #12]
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3a6:	1acb      	subs	r3, r1, r3
 800d3a8:	4413      	add	r3, r2
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	69f9      	ldr	r1, [r7, #28]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f01a f82a 	bl	8027408 <memcpy>

            data += diff;
 800d3b4:	69fa      	ldr	r2, [r7, #28]
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	61fb      	str	r3, [r7, #28]
            off += diff;
 800d3bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 800d3c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	1ad3      	subs	r3, r2, r3
 800d3ca:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	6898      	ldr	r0, [r3, #8]
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3d6:	1ad3      	subs	r3, r2, r3
 800d3d8:	4619      	mov	r1, r3
 800d3da:	f7ff fc1c 	bl	800cc16 <lfs_max>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	689a      	ldr	r2, [r3, #8]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d128      	bne.n	800d444 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800d3f2:	78fb      	ldrb	r3, [r7, #3]
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	68b9      	ldr	r1, [r7, #8]
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f7ff fedb 	bl	800d1b4 <lfs_bd_flush>
 800d3fe:	6178      	str	r0, [r7, #20]
                if (err) {
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d01e      	beq.n	800d444 <lfs_bd_prog+0x134>
                    return err;
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	e021      	b.n	800d44e <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d412:	d006      	beq.n	800d422 <lfs_bd_prog+0x112>
 800d414:	4b14      	ldr	r3, [pc, #80]	@ (800d468 <lfs_bd_prog+0x158>)
 800d416:	4a11      	ldr	r2, [pc, #68]	@ (800d45c <lfs_bd_prog+0x14c>)
 800d418:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800d41c:	4810      	ldr	r0, [pc, #64]	@ (800d460 <lfs_bd_prog+0x150>)
 800d41e:	f015 fdbb 	bl	8022f98 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d426:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d42c:	6a1b      	ldr	r3, [r3, #32]
 800d42e:	4619      	mov	r1, r3
 800d430:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d432:	f7ff fc10 	bl	800cc56 <lfs_aligndown>
 800d436:	4602      	mov	r2, r0
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	2200      	movs	r2, #0
 800d440:	609a      	str	r2, [r3, #8]
 800d442:	e000      	b.n	800d446 <lfs_bd_prog+0x136>
            continue;
 800d444:	bf00      	nop
    while (size > 0) {
 800d446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d187      	bne.n	800d35c <lfs_bd_prog+0x4c>
    }

    return 0;
 800d44c:	2300      	movs	r3, #0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3720      	adds	r7, #32
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	080304d4 	.word	0x080304d4
 800d45c:	08033c20 	.word	0x08033c20
 800d460:	08030474 	.word	0x08030474
 800d464:	0803050c 	.word	0x0803050c
 800d468:	08030530 	.word	0x08030530

0800d46c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d306      	bcc.n	800d48e <lfs_bd_erase+0x22>
 800d480:	4b0f      	ldr	r3, [pc, #60]	@ (800d4c0 <lfs_bd_erase+0x54>)
 800d482:	4a10      	ldr	r2, [pc, #64]	@ (800d4c4 <lfs_bd_erase+0x58>)
 800d484:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800d488:	480f      	ldr	r0, [pc, #60]	@ (800d4c8 <lfs_bd_erase+0x5c>)
 800d48a:	f015 fd85 	bl	8022f98 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d498:	6839      	ldr	r1, [r7, #0]
 800d49a:	4610      	mov	r0, r2
 800d49c:	4798      	blx	r3
 800d49e:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	dd06      	ble.n	800d4b4 <lfs_bd_erase+0x48>
 800d4a6:	4b09      	ldr	r3, [pc, #36]	@ (800d4cc <lfs_bd_erase+0x60>)
 800d4a8:	4a06      	ldr	r2, [pc, #24]	@ (800d4c4 <lfs_bd_erase+0x58>)
 800d4aa:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800d4ae:	4806      	ldr	r0, [pc, #24]	@ (800d4c8 <lfs_bd_erase+0x5c>)
 800d4b0:	f015 fd72 	bl	8022f98 <__assert_func>
    return err;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	08030554 	.word	0x08030554
 800d4c4:	08033c2c 	.word	0x08033c2c
 800d4c8:	08030474 	.word	0x08030474
 800d4cc:	080304a4 	.word	0x080304a4

0800d4d0 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	685a      	ldr	r2, [r3, #4]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	601a      	str	r2, [r3, #0]
}
 800d4ee:	bf00      	nop
 800d4f0:	3714      	adds	r7, #20
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr

0800d4fa <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800d4fa:	b480      	push	{r7}
 800d4fc:	b083      	sub	sp, #12
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d50a:	d005      	beq.n	800d518 <lfs_pair_isnull+0x1e>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	3304      	adds	r3, #4
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d516:	d101      	bne.n	800d51c <lfs_pair_isnull+0x22>
 800d518:	2301      	movs	r3, #1
 800d51a:	e000      	b.n	800d51e <lfs_pair_isnull+0x24>
 800d51c:	2300      	movs	r3, #0
 800d51e:	f003 0301 	and.w	r3, r3, #1
 800d522:	b2db      	uxtb	r3, r3
}
 800d524:	4618      	mov	r0, r3
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	429a      	cmp	r2, r3
 800d544:	d017      	beq.n	800d576 <lfs_pair_cmp+0x46>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	3304      	adds	r3, #4
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	3304      	adds	r3, #4
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	429a      	cmp	r2, r3
 800d554:	d00f      	beq.n	800d576 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	3304      	adds	r3, #4
 800d55e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d560:	429a      	cmp	r2, r3
 800d562:	d008      	beq.n	800d576 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3304      	adds	r3, #4
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d56e:	429a      	cmp	r2, r3
 800d570:	d001      	beq.n	800d576 <lfs_pair_cmp+0x46>
 800d572:	2301      	movs	r3, #1
 800d574:	e000      	b.n	800d578 <lfs_pair_cmp+0x48>
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	429a      	cmp	r2, r3
 800d598:	d107      	bne.n	800d5aa <lfs_pair_issync+0x26>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	3304      	adds	r3, #4
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	3304      	adds	r3, #4
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d00d      	beq.n	800d5c6 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d108      	bne.n	800d5ca <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	3304      	adds	r3, #4
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d101      	bne.n	800d5ca <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e000      	b.n	800d5cc <lfs_pair_issync+0x48>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f003 0301 	and.w	r3, r3, #1
 800d5d0:	b2db      	uxtb	r3, r3
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	370c      	adds	r7, #12
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800d5de:	b590      	push	{r4, r7, lr}
 800d5e0:	b083      	sub	sp, #12
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7ff fb93 	bl	800cd16 <lfs_fromle32>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	1d1c      	adds	r4, r3, #4
 800d600:	4610      	mov	r0, r2
 800d602:	f7ff fb88 	bl	800cd16 <lfs_fromle32>
 800d606:	4603      	mov	r3, r0
 800d608:	6023      	str	r3, [r4, #0]
}
 800d60a:	bf00      	nop
 800d60c:	370c      	adds	r7, #12
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd90      	pop	{r4, r7, pc}

0800d612 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800d612:	b590      	push	{r4, r7, lr}
 800d614:	b083      	sub	sp, #12
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4618      	mov	r0, r3
 800d620:	f7ff fb84 	bl	800cd2c <lfs_tole32>
 800d624:	4602      	mov	r2, r0
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	3304      	adds	r3, #4
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	1d1c      	adds	r4, r3, #4
 800d634:	4610      	mov	r0, r2
 800d636:	f7ff fb79 	bl	800cd2c <lfs_tole32>
 800d63a:	4603      	mov	r3, r0
 800d63c:	6023      	str	r3, [r4, #0]
}
 800d63e:	bf00      	nop
 800d640:	370c      	adds	r7, #12
 800d642:	46bd      	mov	sp, r7
 800d644:	bd90      	pop	{r4, r7, pc}

0800d646 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800d646:	b480      	push	{r7}
 800d648:	b083      	sub	sp, #12
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	43db      	mvns	r3, r3
 800d652:	0fdb      	lsrs	r3, r3, #31
 800d654:	b2db      	uxtb	r3, r3
}
 800d656:	4618      	mov	r0, r3
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800d662:	b480      	push	{r7}
 800d664:	b083      	sub	sp, #12
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	059b      	lsls	r3, r3, #22
 800d66e:	159b      	asrs	r3, r3, #22
 800d670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d674:	bf0c      	ite	eq
 800d676:	2301      	moveq	r3, #1
 800d678:	2300      	movne	r3, #0
 800d67a:	b2db      	uxtb	r3, r3
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	0d1b      	lsrs	r3, r3, #20
 800d694:	b29b      	uxth	r3, r3
 800d696:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d69a:	b29b      	uxth	r3, r3
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	0d1b      	lsrs	r3, r3, #20
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 800d6ba:	b29b      	uxth	r3, r3
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	0d1b      	lsrs	r3, r3, #20
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d6da:	b29b      	uxth	r3, r3
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800d6e8:	b480      	push	{r7}
 800d6ea:	b083      	sub	sp, #12
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	0d1b      	lsrs	r3, r3, #20
 800d6f4:	b2db      	uxtb	r3, r3
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	370c      	adds	r7, #12
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr

0800d702 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800d702:	b580      	push	{r7, lr}
 800d704:	b082      	sub	sp, #8
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7ff ffec 	bl	800d6e8 <lfs_tag_chunk>
 800d710:	4603      	mov	r3, r0
 800d712:	b25b      	sxtb	r3, r3
}
 800d714:	4618      	mov	r0, r3
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	0a9b      	lsrs	r3, r3, #10
 800d728:	b29b      	uxth	r3, r3
 800d72a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d72e:	b29b      	uxth	r3, r3
}
 800d730:	4618      	mov	r0, r3
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	370c      	adds	r7, #12
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800d756:	b580      	push	{r7, lr}
 800d758:	b082      	sub	sp, #8
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff ff7f 	bl	800d662 <lfs_tag_isdelete>
 800d764:	4603      	mov	r3, r0
 800d766:	461a      	mov	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4413      	add	r3, r2
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7ff ffe5 	bl	800d73c <lfs_tag_size>
 800d772:	4603      	mov	r3, r0
 800d774:	3304      	adds	r3, #4
}
 800d776:	4618      	mov	r0, r3
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800d77e:	b480      	push	{r7}
 800d780:	b085      	sub	sp, #20
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
 800d786:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800d788:	2300      	movs	r3, #0
 800d78a:	60fb      	str	r3, [r7, #12]
 800d78c:	e012      	b.n	800d7b4 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	4413      	add	r3, r2
 800d796:	6819      	ldr	r1, [r3, #0]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	4413      	add	r3, r2
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	4403      	add	r3, r0
 800d7aa:	404a      	eors	r2, r1
 800d7ac:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	60fb      	str	r3, [r7, #12]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2b02      	cmp	r3, #2
 800d7b8:	dde9      	ble.n	800d78e <lfs_gstate_xor+0x10>
    }
}
 800d7ba:	bf00      	nop
 800d7bc:	bf00      	nop
 800d7be:	3714      	adds	r7, #20
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	60fb      	str	r3, [r7, #12]
 800d7d4:	e00b      	b.n	800d7ee <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	4413      	add	r3, r2
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d001      	beq.n	800d7e8 <lfs_gstate_iszero+0x20>
            return false;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	e006      	b.n	800d7f6 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	60fb      	str	r3, [r7, #12]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	ddf0      	ble.n	800d7d6 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800d7f4:	2301      	movs	r3, #1
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4618      	mov	r0, r3
 800d810:	f7ff ff94 	bl	800d73c <lfs_tag_size>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	bf14      	ite	ne
 800d81a:	2301      	movne	r3, #1
 800d81c:	2300      	moveq	r3, #0
 800d81e:	b2db      	uxtb	r3, r3
}
 800d820:	4618      	mov	r0, r3
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4618      	mov	r0, r3
 800d836:	f7ff ff81 	bl	800d73c <lfs_tag_size>
 800d83a:	4603      	mov	r3, r0
 800d83c:	b2db      	uxtb	r3, r3
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800d846:	b580      	push	{r7, lr}
 800d848:	b082      	sub	sp, #8
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4618      	mov	r0, r3
 800d854:	f7ff ff18 	bl	800d688 <lfs_tag_type1>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	bf14      	ite	ne
 800d85e:	2301      	movne	r3, #1
 800d860:	2300      	moveq	r3, #0
 800d862:	b2db      	uxtb	r3, r3
}
 800d864:	4618      	mov	r0, r3
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4618      	mov	r0, r3
 800d87a:	f7ff ff5f 	bl	800d73c <lfs_tag_size>
 800d87e:	4603      	mov	r3, r0
 800d880:	0a5b      	lsrs	r3, r3, #9
 800d882:	2b00      	cmp	r3, #0
 800d884:	bf14      	ite	ne
 800d886:	2301      	movne	r3, #1
 800d888:	2300      	moveq	r3, #0
 800d88a:	b2db      	uxtb	r3, r3
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7ff fef0 	bl	800d688 <lfs_tag_type1>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00a      	beq.n	800d8c4 <lfs_gstate_hasmovehere+0x30>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	6839      	ldr	r1, [r7, #0]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7ff fe3b 	bl	800d530 <lfs_pair_cmp>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d101      	bne.n	800d8c4 <lfs_gstate_hasmovehere+0x30>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e000      	b.n	800d8c6 <lfs_gstate_hasmovehere+0x32>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	f003 0301 	and.w	r3, r3, #1
 800d8ca:	b2db      	uxtb	r3, r3
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7ff fa18 	bl	800cd16 <lfs_fromle32>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7ff fa10 	bl	800cd16 <lfs_fromle32>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	4618      	mov	r0, r3
 800d902:	f7ff fa08 	bl	800cd16 <lfs_fromle32>
 800d906:	4602      	mov	r2, r0
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	609a      	str	r2, [r3, #8]
}
 800d90c:	bf00      	nop
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff fa03 	bl	800cd2c <lfs_tole32>
 800d926:	4602      	mov	r2, r0
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	685b      	ldr	r3, [r3, #4]
 800d930:	4618      	mov	r0, r3
 800d932:	f7ff f9fb 	bl	800cd2c <lfs_tole32>
 800d936:	4602      	mov	r2, r0
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	4618      	mov	r0, r3
 800d942:	f7ff f9f3 	bl	800cd2c <lfs_tole32>
 800d946:	4602      	mov	r2, r0
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	609a      	str	r2, [r3, #8]
}
 800d94c:	bf00      	nop
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff f9d8 	bl	800cd16 <lfs_fromle32>
 800d966:	4602      	mov	r2, r0
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	4618      	mov	r0, r3
 800d972:	f7ff f9d0 	bl	800cd16 <lfs_fromle32>
 800d976:	4602      	mov	r2, r0
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	605a      	str	r2, [r3, #4]
}
 800d97c:	bf00      	nop
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4618      	mov	r0, r3
 800d992:	f7ff f9cb 	bl	800cd2c <lfs_tole32>
 800d996:	4602      	mov	r2, r0
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7ff f9c3 	bl	800cd2c <lfs_tole32>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	605a      	str	r2, [r3, #4]
}
 800d9ac:	bf00      	nop
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7ff f9a8 	bl	800cd16 <lfs_fromle32>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff f9a0 	bl	800cd16 <lfs_fromle32>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	605a      	str	r2, [r3, #4]
}
 800d9dc:	bf00      	nop
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7ff f99b 	bl	800cd2c <lfs_tole32>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff f993 	bl	800cd2c <lfs_tole32>
 800da06:	4602      	mov	r2, r0
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	605a      	str	r2, [r3, #4]
}
 800da0c:	bf00      	nop
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4618      	mov	r0, r3
 800da22:	f7ff f978 	bl	800cd16 <lfs_fromle32>
 800da26:	4602      	mov	r2, r0
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff f970 	bl	800cd16 <lfs_fromle32>
 800da36:	4602      	mov	r2, r0
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	4618      	mov	r0, r3
 800da42:	f7ff f968 	bl	800cd16 <lfs_fromle32>
 800da46:	4602      	mov	r2, r0
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	4618      	mov	r0, r3
 800da52:	f7ff f960 	bl	800cd16 <lfs_fromle32>
 800da56:	4602      	mov	r2, r0
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	691b      	ldr	r3, [r3, #16]
 800da60:	4618      	mov	r0, r3
 800da62:	f7ff f958 	bl	800cd16 <lfs_fromle32>
 800da66:	4602      	mov	r2, r0
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	695b      	ldr	r3, [r3, #20]
 800da70:	4618      	mov	r0, r3
 800da72:	f7ff f950 	bl	800cd16 <lfs_fromle32>
 800da76:	4602      	mov	r2, r0
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	615a      	str	r2, [r3, #20]
}
 800da7c:	bf00      	nop
 800da7e:	3708      	adds	r7, #8
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4618      	mov	r0, r3
 800da92:	f7ff f94b 	bl	800cd2c <lfs_tole32>
 800da96:	4602      	mov	r2, r0
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff f943 	bl	800cd2c <lfs_tole32>
 800daa6:	4602      	mov	r2, r0
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7ff f93b 	bl	800cd2c <lfs_tole32>
 800dab6:	4602      	mov	r2, r0
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7ff f933 	bl	800cd2c <lfs_tole32>
 800dac6:	4602      	mov	r2, r0
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	691b      	ldr	r3, [r3, #16]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7ff f92b 	bl	800cd2c <lfs_tole32>
 800dad6:	4602      	mov	r2, r0
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	695b      	ldr	r3, [r3, #20]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7ff f923 	bl	800cd2c <lfs_tole32>
 800dae6:	4602      	mov	r2, r0
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	615a      	str	r2, [r3, #20]
}
 800daec:	bf00      	nop
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800dafe:	1d3b      	adds	r3, r7, #4
 800db00:	60fb      	str	r3, [r7, #12]
 800db02:	e009      	b.n	800db18 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	683a      	ldr	r2, [r7, #0]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d101      	bne.n	800db12 <lfs_mlist_isopen+0x1e>
            return true;
 800db0e:	2301      	movs	r3, #1
 800db10:	e007      	b.n	800db22 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	60fb      	str	r3, [r7, #12]
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1f1      	bne.n	800db04 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	3714      	adds	r7, #20
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr

0800db2e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800db2e:	b480      	push	{r7}
 800db30:	b085      	sub	sp, #20
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
 800db36:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3328      	adds	r3, #40	@ 0x28
 800db3c:	60fb      	str	r3, [r7, #12]
 800db3e:	e00d      	b.n	800db5c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	683a      	ldr	r2, [r7, #0]
 800db46:	429a      	cmp	r2, r3
 800db48:	d105      	bne.n	800db56 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	601a      	str	r2, [r3, #0]
            break;
 800db54:	e007      	b.n	800db66 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	60fb      	str	r3, [r7, #12]
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1ed      	bne.n	800db40 <lfs_mlist_remove+0x12>
        }
    }
}
 800db64:	bf00      	nop
 800db66:	bf00      	nop
 800db68:	3714      	adds	r7, #20
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr

0800db72 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800db72:	b480      	push	{r7}
 800db74:	b083      	sub	sp, #12
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
 800db7a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800db8a:	bf00      	nop
 800db8c:	370c      	adds	r7, #12
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
	...

0800db98 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800db98:	b480      	push	{r7}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 800dba0:	4b03      	ldr	r3, [pc, #12]	@ (800dbb0 <lfs_fs_disk_version+0x18>)
    }
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	370c      	adds	r7, #12
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	00020001 	.word	0x00020001

0800dbb4 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7ff ffeb 	bl	800db98 <lfs_fs_disk_version>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	0c1b      	lsrs	r3, r3, #16
 800dbc6:	b29b      	uxth	r3, r3

}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3708      	adds	r7, #8
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f7ff ffdd 	bl	800db98 <lfs_fs_disk_version>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	b29b      	uxth	r3, r3
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3708      	adds	r7, #8
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800dbfa:	bf00      	nop
 800dbfc:	370c      	adds	r7, #12
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr

0800dc06 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b082      	sub	sp, #8
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2200      	movs	r2, #0
 800dc18:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7ff ffe5 	bl	800dbea <lfs_alloc_ckpoint>
}
 800dc20:	bf00      	nop
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc42:	4413      	add	r3, r2
 800dc44:	68fa      	ldr	r2, [r7, #12]
 800dc46:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 800dc48:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc4c:	fb01 f202 	mul.w	r2, r1, r2
 800dc50:	1a9b      	subs	r3, r3, r2
 800dc52:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc58:	68ba      	ldr	r2, [r7, #8]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d212      	bcs.n	800dc84 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	08db      	lsrs	r3, r3, #3
 800dc66:	441a      	add	r2, r3
 800dc68:	7811      	ldrb	r1, [r2, #0]
 800dc6a:	68ba      	ldr	r2, [r7, #8]
 800dc6c:	f002 0207 	and.w	r2, r2, #7
 800dc70:	2001      	movs	r0, #1
 800dc72:	fa00 f202 	lsl.w	r2, r0, r2
 800dc76:	b2d2      	uxtb	r2, r2
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800dc7c:	4403      	add	r3, r0
 800dc7e:	430a      	orrs	r2, r1
 800dc80:	b2d2      	uxtb	r2, r2
 800dc82:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3714      	adds	r7, #20
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
	...

0800dc94 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dca4:	4413      	add	r3, r2
            % lfs->block_count;
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800dcaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcae:	fb01 f202 	mul.w	r2, r1, r2
 800dcb2:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dcc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 800dcc4:	00da      	lsls	r2, r3, #3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dcca:	4619      	mov	r1, r3
 800dccc:	4610      	mov	r0, r2
 800dcce:	f7fe ffb2 	bl	800cc36 <lfs_min>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dce2:	461a      	mov	r2, r3
 800dce4:	2100      	movs	r1, #0
 800dce6:	f018 f937 	bl	8025f58 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 800dcea:	2301      	movs	r3, #1
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	4909      	ldr	r1, [pc, #36]	@ (800dd14 <lfs_alloc_scan+0x80>)
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f005 fdc9 	bl	8013888 <lfs_fs_traverse_>
 800dcf6:	60f8      	str	r0, [r7, #12]
    if (err) {
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d004      	beq.n	800dd08 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7ff ff81 	bl	800dc06 <lfs_alloc_drop>
        return err;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	e000      	b.n	800dd0a <lfs_alloc_scan+0x76>
    }

    return 0;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	0800dc29 	.word	0x0800dc29

0800dd18 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af02      	add	r7, sp, #8
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800dd22:	e04d      	b.n	800ddc0 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd2c:	08db      	lsrs	r3, r3, #3
 800dd2e:	4413      	add	r3, r2
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd38:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800dd3c:	fa22 f303 	lsr.w	r3, r2, r3
 800dd40:	f003 0301 	and.w	r3, r3, #1
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d131      	bne.n	800ddac <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd50:	4413      	add	r3, r2
                        % lfs->block_count;
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800dd56:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd5a:	fb01 f202 	mul.w	r2, r1, r2
 800dd5e:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd68:	1c5a      	adds	r2, r3, #1
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd72:	1e5a      	subs	r2, r3, #1
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d211      	bcs.n	800dda8 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd8c:	08db      	lsrs	r3, r3, #3
 800dd8e:	4413      	add	r3, r2
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd98:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800dd9c:	fa22 f303 	lsr.w	r3, r2, r3
 800dda0:	f003 0301 	and.w	r3, r3, #1
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1dd      	bne.n	800dd64 <lfs_alloc+0x4c>
                        return 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	e032      	b.n	800de12 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ddba:	1e5a      	subs	r2, r3, #1
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d3ab      	bcc.n	800dd24 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d116      	bne.n	800de02 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dddc:	4413      	add	r3, r2
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800dde2:	fbb3 f1f2 	udiv	r1, r3, r2
 800dde6:	fb01 f202 	mul.w	r2, r1, r2
 800ddea:	1a9b      	subs	r3, r3, r2
 800ddec:	4a0b      	ldr	r2, [pc, #44]	@ (800de1c <lfs_alloc+0x104>)
 800ddee:	9200      	str	r2, [sp, #0]
 800ddf0:	f240 22b1 	movw	r2, #689	@ 0x2b1
 800ddf4:	490a      	ldr	r1, [pc, #40]	@ (800de20 <lfs_alloc+0x108>)
 800ddf6:	480b      	ldr	r0, [pc, #44]	@ (800de24 <lfs_alloc+0x10c>)
 800ddf8:	f015 fb82 	bl	8023500 <printf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 800ddfc:	f06f 031b 	mvn.w	r3, #27
 800de00:	e007      	b.n	800de12 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7ff ff46 	bl	800dc94 <lfs_alloc_scan>
 800de08:	60f8      	str	r0, [r7, #12]
        if(err) {
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d088      	beq.n	800dd22 <lfs_alloc+0xa>
            return err;
 800de10:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	0803059c 	.word	0x0803059c
 800de20:	08030474 	.word	0x08030474
 800de24:	08030570 	.word	0x08030570

0800de28 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800de28:	b590      	push	{r4, r7, lr}
 800de2a:	b08f      	sub	sp, #60	@ 0x3c
 800de2c:	af04      	add	r7, sp, #16
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
 800de34:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	691b      	ldr	r3, [r3, #16]
 800de40:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	333c      	adds	r3, #60	@ 0x3c
 800de4a:	68ba      	ldr	r2, [r7, #8]
 800de4c:	4611      	mov	r1, r2
 800de4e:	4618      	mov	r0, r3
 800de50:	f7ff fd20 	bl	800d894 <lfs_gstate_hasmovehere>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	f000 80ca 	beq.w	800dff0 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7ff fc5d 	bl	800d71c <lfs_tag_id>
 800de62:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800de64:	2b00      	cmp	r3, #0
 800de66:	f000 80c3 	beq.w	800dff0 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de6e:	4618      	mov	r0, r3
 800de70:	f7ff fc54 	bl	800d71c <lfs_tag_id>
 800de74:	4603      	mov	r3, r0
 800de76:	461c      	mov	r4, r3
 800de78:	6838      	ldr	r0, [r7, #0]
 800de7a:	f7ff fc4f 	bl	800d71c <lfs_tag_id>
 800de7e:	4603      	mov	r3, r0
 800de80:	429c      	cmp	r4, r3
 800de82:	d102      	bne.n	800de8a <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 800de84:	f06f 0301 	mvn.w	r3, #1
 800de88:	e0be      	b.n	800e008 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de8e:	4618      	mov	r0, r3
 800de90:	f7ff fc44 	bl	800d71c <lfs_tag_id>
 800de94:	4603      	mov	r3, r0
 800de96:	461c      	mov	r4, r3
 800de98:	6838      	ldr	r0, [r7, #0]
 800de9a:	f7ff fc3f 	bl	800d71c <lfs_tag_id>
 800de9e:	4603      	mov	r3, r0
 800dea0:	429c      	cmp	r4, r3
 800dea2:	f080 80a5 	bcs.w	800dff0 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800deac:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800deae:	e09f      	b.n	800dff0 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7ff fc4f 	bl	800d756 <lfs_tag_dsize>
 800deb8:	4602      	mov	r2, r0
 800deba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800debc:	1a9b      	subs	r3, r3, r2
 800debe:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800dec4:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800deca:	2204      	movs	r2, #4
 800decc:	9203      	str	r2, [sp, #12]
 800dece:	f107 0210 	add.w	r2, r7, #16
 800ded2:	9202      	str	r2, [sp, #8]
 800ded4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ded6:	9201      	str	r2, [sp, #4]
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	2304      	movs	r3, #4
 800dedc:	460a      	mov	r2, r1
 800dede:	2100      	movs	r1, #0
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f7fe ff83 	bl	800cdec <lfs_bd_read>
 800dee6:	61b8      	str	r0, [r7, #24]
        if (err) {
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d001      	beq.n	800def2 <lfs_dir_getslice+0xca>
            return err;
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	e08a      	b.n	800e008 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	4618      	mov	r0, r3
 800def6:	f7fe ff25 	bl	800cd44 <lfs_frombe32>
 800defa:	4602      	mov	r2, r0
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	4053      	eors	r3, r2
 800df00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df04:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f7ff fc08 	bl	800d71c <lfs_tag_id>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d02b      	beq.n	800df6a <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800df12:	69f8      	ldr	r0, [r7, #28]
 800df14:	f7ff fbb8 	bl	800d688 <lfs_tag_type1>
 800df18:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800df1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df1e:	d124      	bne.n	800df6a <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800df20:	69f8      	ldr	r0, [r7, #28]
 800df22:	f7ff fbfb 	bl	800d71c <lfs_tag_id>
 800df26:	4603      	mov	r3, r0
 800df28:	461c      	mov	r4, r3
 800df2a:	6a3b      	ldr	r3, [r7, #32]
 800df2c:	683a      	ldr	r2, [r7, #0]
 800df2e:	1ad3      	subs	r3, r2, r3
 800df30:	4618      	mov	r0, r3
 800df32:	f7ff fbf3 	bl	800d71c <lfs_tag_id>
 800df36:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800df38:	429c      	cmp	r4, r3
 800df3a:	d816      	bhi.n	800df6a <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	683a      	ldr	r2, [r7, #0]
 800df40:	1ad2      	subs	r2, r2, r3
 800df42:	4b33      	ldr	r3, [pc, #204]	@ (800e010 <lfs_dir_getslice+0x1e8>)
 800df44:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800df46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800df4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df4e:	69fa      	ldr	r2, [r7, #28]
 800df50:	429a      	cmp	r2, r3
 800df52:	d102      	bne.n	800df5a <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 800df54:	f06f 0301 	mvn.w	r3, #1
 800df58:	e056      	b.n	800e008 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800df5a:	69f8      	ldr	r0, [r7, #28]
 800df5c:	f7ff fbd1 	bl	800d702 <lfs_tag_splice>
 800df60:	4603      	mov	r3, r0
 800df62:	029a      	lsls	r2, r3, #10
 800df64:	6a3b      	ldr	r3, [r7, #32]
 800df66:	4413      	add	r3, r2
 800df68:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	401a      	ands	r2, r3
 800df70:	6a3b      	ldr	r3, [r7, #32]
 800df72:	6839      	ldr	r1, [r7, #0]
 800df74:	1ac9      	subs	r1, r1, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	400b      	ands	r3, r1
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d138      	bne.n	800dff0 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 800df7e:	69f8      	ldr	r0, [r7, #28]
 800df80:	f7ff fb6f 	bl	800d662 <lfs_tag_isdelete>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d002      	beq.n	800df90 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 800df8a:	f06f 0301 	mvn.w	r3, #1
 800df8e:	e03b      	b.n	800e008 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800df90:	69f8      	ldr	r0, [r7, #28]
 800df92:	f7ff fbd3 	bl	800d73c <lfs_tag_size>
 800df96:	4603      	mov	r3, r0
 800df98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fe fe4b 	bl	800cc36 <lfs_min>
 800dfa0:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800dfa2:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dfaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfac:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800dfae:	3204      	adds	r2, #4
 800dfb0:	6979      	ldr	r1, [r7, #20]
 800dfb2:	9103      	str	r1, [sp, #12]
 800dfb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dfb6:	9102      	str	r1, [sp, #8]
 800dfb8:	9201      	str	r2, [sp, #4]
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f7fe ff12 	bl	800cdec <lfs_bd_read>
 800dfc8:	61b8      	str	r0, [r7, #24]
            if (err) {
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <lfs_dir_getslice+0x1ac>
                return err;
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	e019      	b.n	800e008 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800dfd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	18d0      	adds	r0, r2, r3
 800dfda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	f017 ffb8 	bl	8025f58 <memset>

            return tag + gdiff;
 800dfe8:	6a3a      	ldr	r2, [r7, #32]
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	4413      	add	r3, r2
 800dfee:	e00b      	b.n	800e008 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7ff fbaf 	bl	800d756 <lfs_tag_dsize>
 800dff8:	4603      	mov	r3, r0
 800dffa:	3304      	adds	r3, #4
 800dffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dffe:	429a      	cmp	r2, r3
 800e000:	f4bf af56 	bcs.w	800deb0 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 800e004:	f06f 0301 	mvn.w	r3, #1
}
 800e008:	4618      	mov	r0, r3
 800e00a:	372c      	adds	r7, #44	@ 0x2c
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd90      	pop	{r4, r7, pc}
 800e010:	000ffc00 	.word	0x000ffc00

0800e014 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800e014:	b580      	push	{r7, lr}
 800e016:	b088      	sub	sp, #32
 800e018:	af04      	add	r7, sp, #16
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
 800e020:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800e022:	6838      	ldr	r0, [r7, #0]
 800e024:	f7ff fb8a 	bl	800d73c <lfs_tag_size>
 800e028:	4603      	mov	r3, r0
 800e02a:	9302      	str	r3, [sp, #8]
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	9301      	str	r3, [sp, #4]
 800e030:	2300      	movs	r3, #0
 800e032:	9300      	str	r3, [sp, #0]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	68b9      	ldr	r1, [r7, #8]
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f7ff fef4 	bl	800de28 <lfs_dir_getslice>
 800e040:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800e042:	4618      	mov	r0, r3
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b08c      	sub	sp, #48	@ 0x30
 800e04e:	af04      	add	r7, sp, #16
 800e050:	60f8      	str	r0, [r7, #12]
 800e052:	60b9      	str	r1, [r7, #8]
 800e054:	607a      	str	r2, [r7, #4]
 800e056:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800e058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e05a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800e05c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e060:	441a      	add	r2, r3
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e068:	429a      	cmp	r2, r3
 800e06a:	f240 80c0 	bls.w	800e1ee <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800e06e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800e072:	e0c1      	b.n	800e1f8 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800e074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e076:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d03f      	beq.n	800e0fe <lfs_dir_getread+0xb4>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f113 0f02 	cmn.w	r3, #2
 800e086:	d13a      	bne.n	800e0fe <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685a      	ldr	r2, [r3, #4]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800e092:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e094:	429a      	cmp	r2, r3
 800e096:	d232      	bcs.n	800e0fe <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d324      	bcc.n	800e0ec <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	689a      	ldr	r2, [r3, #8]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6859      	ldr	r1, [r3, #4]
 800e0aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0ac:	1acb      	subs	r3, r1, r3
 800e0ae:	4413      	add	r3, r2
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	69b8      	ldr	r0, [r7, #24]
 800e0b4:	f7fe fdbf 	bl	800cc36 <lfs_min>
 800e0b8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	68da      	ldr	r2, [r3, #12]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e0c4:	1acb      	subs	r3, r1, r3
 800e0c6:	4413      	add	r3, r2
 800e0c8:	69ba      	ldr	r2, [r7, #24]
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	69f8      	ldr	r0, [r7, #28]
 800e0ce:	f019 f99b 	bl	8027408 <memcpy>

                data += diff;
 800e0d2:	69fa      	ldr	r2, [r7, #28]
 800e0d4:	69bb      	ldr	r3, [r7, #24]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	61fb      	str	r3, [r7, #28]
                off += diff;
 800e0da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	4413      	add	r3, r2
 800e0e0:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800e0e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0e4:	69bb      	ldr	r3, [r7, #24]
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800e0ea:	e080      	b.n	800e1ee <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	685a      	ldr	r2, [r3, #4]
 800e0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	69b8      	ldr	r0, [r7, #24]
 800e0f8:	f7fe fd9d 	bl	800cc36 <lfs_min>
 800e0fc:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f113 0f02 	cmn.w	r3, #2
 800e106:	d13a      	bne.n	800e17e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	685a      	ldr	r2, [r3, #4]
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800e112:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e114:	429a      	cmp	r2, r3
 800e116:	d232      	bcs.n	800e17e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e11e:	429a      	cmp	r2, r3
 800e120:	d324      	bcc.n	800e16c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	689a      	ldr	r2, [r3, #8]
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	6859      	ldr	r1, [r3, #4]
 800e12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e12c:	1acb      	subs	r3, r1, r3
 800e12e:	4413      	add	r3, r2
 800e130:	4619      	mov	r1, r3
 800e132:	69b8      	ldr	r0, [r7, #24]
 800e134:	f7fe fd7f 	bl	800cc36 <lfs_min>
 800e138:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	68da      	ldr	r2, [r3, #12]
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e144:	1acb      	subs	r3, r1, r3
 800e146:	4413      	add	r3, r2
 800e148:	69ba      	ldr	r2, [r7, #24]
 800e14a:	4619      	mov	r1, r3
 800e14c:	69f8      	ldr	r0, [r7, #28]
 800e14e:	f019 f95b 	bl	8027408 <memcpy>

                data += diff;
 800e152:	69fa      	ldr	r2, [r7, #28]
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	4413      	add	r3, r2
 800e158:	61fb      	str	r3, [r7, #28]
                off += diff;
 800e15a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	4413      	add	r3, r2
 800e160:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800e162:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	1ad3      	subs	r3, r2, r3
 800e168:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800e16a:	e040      	b.n	800e1ee <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e172:	1ad3      	subs	r3, r2, r3
 800e174:	4619      	mov	r1, r3
 800e176:	69b8      	ldr	r0, [r7, #24]
 800e178:	f7fe fd5d 	bl	800cc36 <lfs_min>
 800e17c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	f06f 0201 	mvn.w	r2, #1
 800e184:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e18a:	69db      	ldr	r3, [r3, #28]
 800e18c:	4619      	mov	r1, r3
 800e18e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e190:	f7fe fd61 	bl	800cc56 <lfs_aligndown>
 800e194:	4602      	mov	r2, r0
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800e19a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e19e:	441a      	add	r2, r3
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e1a4:	69db      	ldr	r3, [r3, #28]
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	4610      	mov	r0, r2
 800e1aa:	f7fe fd69 	bl	800cc80 <lfs_alignup>
 800e1ae:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e1b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	4610      	mov	r0, r2
 800e1ba:	f7fe fd3c 	bl	800cc36 <lfs_min>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800e1cc:	6839      	ldr	r1, [r7, #0]
 800e1ce:	6889      	ldr	r1, [r1, #8]
 800e1d0:	9102      	str	r1, [sp, #8]
 800e1d2:	9201      	str	r2, [sp, #4]
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1da:	68b9      	ldr	r1, [r7, #8]
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f7ff fe23 	bl	800de28 <lfs_dir_getslice>
 800e1e2:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	da01      	bge.n	800e1ee <lfs_dir_getread+0x1a4>
            return err;
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	e004      	b.n	800e1f8 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800e1ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f47f af3f 	bne.w	800e074 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800e1f6:	2300      	movs	r3, #0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3720      	adds	r7, #32
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800e200:	b590      	push	{r4, r7, lr}
 800e202:	b087      	sub	sp, #28
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800e216:	2b00      	cmp	r3, #0
 800e218:	d001      	beq.n	800e21e <lfs_dir_traverse_filter+0x1e>
 800e21a:	4b24      	ldr	r3, [pc, #144]	@ (800e2ac <lfs_dir_traverse_filter+0xac>)
 800e21c:	e000      	b.n	800e220 <lfs_dir_traverse_filter+0x20>
 800e21e:	4b24      	ldr	r3, [pc, #144]	@ (800e2b0 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800e220:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	405a      	eors	r2, r3
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	4013      	ands	r3, r2
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d014      	beq.n	800e25c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4618      	mov	r0, r3
 800e238:	f7ff fa13 	bl	800d662 <lfs_tag_isdelete>
 800e23c:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d10c      	bne.n	800e25c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	4a19      	ldr	r2, [pc, #100]	@ (800e2ac <lfs_dir_traverse_filter+0xac>)
 800e246:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	6819      	ldr	r1, [r3, #0]
 800e24c:	4b19      	ldr	r3, [pc, #100]	@ (800e2b4 <lfs_dir_traverse_filter+0xb4>)
 800e24e:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800e250:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800e254:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800e258:	429a      	cmp	r2, r3
 800e25a:	d104      	bne.n	800e266 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	2200      	movs	r2, #0
 800e260:	601a      	str	r2, [r3, #0]
        return true;
 800e262:	2301      	movs	r3, #1
 800e264:	e01e      	b.n	800e2a4 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e266:	68b8      	ldr	r0, [r7, #8]
 800e268:	f7ff fa0e 	bl	800d688 <lfs_tag_type1>
 800e26c:	4603      	mov	r3, r0
 800e26e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e272:	d116      	bne.n	800e2a2 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800e274:	68b8      	ldr	r0, [r7, #8]
 800e276:	f7ff fa51 	bl	800d71c <lfs_tag_id>
 800e27a:	4603      	mov	r3, r0
 800e27c:	461c      	mov	r4, r3
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4618      	mov	r0, r3
 800e284:	f7ff fa4a 	bl	800d71c <lfs_tag_id>
 800e288:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e28a:	429c      	cmp	r4, r3
 800e28c:	d809      	bhi.n	800e2a2 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800e28e:	68b8      	ldr	r0, [r7, #8]
 800e290:	f7ff fa37 	bl	800d702 <lfs_tag_splice>
 800e294:	4603      	mov	r3, r0
 800e296:	029a      	lsls	r2, r3, #10
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	441a      	add	r2, r3
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	601a      	str	r2, [r3, #0]
    }

    return false;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	371c      	adds	r7, #28
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd90      	pop	{r4, r7, pc}
 800e2ac:	7ffffc00 	.word	0x7ffffc00
 800e2b0:	700ffc00 	.word	0x700ffc00
 800e2b4:	000ffc00 	.word	0x000ffc00

0800e2b8 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800e2b8:	b590      	push	{r4, r7, lr}
 800e2ba:	b0c1      	sub	sp, #260	@ 0x104
 800e2bc:	af04      	add	r7, sp, #16
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	607a      	str	r2, [r7, #4]
 800e2c4:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 800e2cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	601a      	str	r2, [r3, #0]
 800e2d4:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 800e2d6:	6838      	ldr	r0, [r7, #0]
 800e2d8:	f7ff fa3d 	bl	800d756 <lfs_tag_dsize>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	441a      	add	r2, r3
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d237      	bcs.n	800e35a <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 800e2ea:	6838      	ldr	r0, [r7, #0]
 800e2ec:	f7ff fa33 	bl	800d756 <lfs_tag_dsize>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 800e2f8:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 800e2fe:	2204      	movs	r2, #4
 800e300:	9203      	str	r2, [sp, #12]
 800e302:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800e306:	9202      	str	r2, [sp, #8]
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	9201      	str	r2, [sp, #4]
 800e30c:	9300      	str	r3, [sp, #0]
 800e30e:	2304      	movs	r3, #4
 800e310:	460a      	mov	r2, r1
 800e312:	2100      	movs	r1, #0
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f7fe fd69 	bl	800cdec <lfs_bd_read>
 800e31a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 800e31e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e322:	2b00      	cmp	r3, #0
 800e324:	d002      	beq.n	800e32c <lfs_dir_traverse+0x74>
                    return err;
 800e326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e32a:	e3a5      	b.n	800ea78 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800e32c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fe fd08 	bl	800cd44 <lfs_frombe32>
 800e334:	4602      	mov	r2, r0
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	4053      	eors	r3, r2
 800e33a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e33e:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	3304      	adds	r3, #4
 800e34a:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 800e34c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e350:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 800e354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e356:	603b      	str	r3, [r7, #0]
 800e358:	e01b      	b.n	800e392 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 800e35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e35e:	2b00      	cmp	r3, #0
 800e360:	dd13      	ble.n	800e38a <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800e362:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 800e36a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 800e374:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e378:	3308      	adds	r3, #8
 800e37a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 800e37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e382:	3b01      	subs	r3, #1
 800e384:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e388:	e003      	b.n	800e392 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 800e390:	e2a1      	b.n	800e8d6 <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800e392:	4b7e      	ldr	r3, [pc, #504]	@ (800e58c <lfs_dir_traverse+0x2d4>)
 800e394:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800e398:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e39a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e39e:	405a      	eors	r2, r3
 800e3a0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800e3a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800e3a8:	400b      	ands	r3, r1
 800e3aa:	4013      	ands	r3, r2
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	f040 8284 	bne.w	800e8ba <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800e3b2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800e3b6:	f7ff f9b1 	bl	800d71c <lfs_tag_id>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f000 80ef 	beq.w	800e5a0 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800e3c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e3c6:	2b02      	cmp	r3, #2
 800e3c8:	d906      	bls.n	800e3d8 <lfs_dir_traverse+0x120>
 800e3ca:	4b71      	ldr	r3, [pc, #452]	@ (800e590 <lfs_dir_traverse+0x2d8>)
 800e3cc:	4a71      	ldr	r2, [pc, #452]	@ (800e594 <lfs_dir_traverse+0x2dc>)
 800e3ce:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800e3d2:	4871      	ldr	r0, [pc, #452]	@ (800e598 <lfs_dir_traverse+0x2e0>)
 800e3d4:	f014 fde0 	bl	8022f98 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800e3d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e3da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e3de:	4613      	mov	r3, r2
 800e3e0:	011b      	lsls	r3, r3, #4
 800e3e2:	1a9b      	subs	r3, r3, r2
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	33f0      	adds	r3, #240	@ 0xf0
 800e3e8:	443b      	add	r3, r7
 800e3ea:	3b98      	subs	r3, #152	@ 0x98
 800e3ec:	68ba      	ldr	r2, [r7, #8]
 800e3ee:	601a      	str	r2, [r3, #0]
 800e3f0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	011b      	lsls	r3, r3, #4
 800e3f8:	1a9b      	subs	r3, r3, r2
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	33f0      	adds	r3, #240	@ 0xf0
 800e3fe:	443b      	add	r3, r7
 800e400:	3b94      	subs	r3, #148	@ 0x94
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	601a      	str	r2, [r3, #0]
 800e406:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e40a:	4613      	mov	r3, r2
 800e40c:	011b      	lsls	r3, r3, #4
 800e40e:	1a9b      	subs	r3, r3, r2
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	33f0      	adds	r3, #240	@ 0xf0
 800e414:	443b      	add	r3, r7
 800e416:	3b90      	subs	r3, #144	@ 0x90
 800e418:	683a      	ldr	r2, [r7, #0]
 800e41a:	601a      	str	r2, [r3, #0]
 800e41c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e420:	4613      	mov	r3, r2
 800e422:	011b      	lsls	r3, r3, #4
 800e424:	1a9b      	subs	r3, r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	33f0      	adds	r3, #240	@ 0xf0
 800e42a:	443b      	add	r3, r7
 800e42c:	3b8c      	subs	r3, #140	@ 0x8c
 800e42e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800e432:	601a      	str	r2, [r3, #0]
 800e434:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e438:	4613      	mov	r3, r2
 800e43a:	011b      	lsls	r3, r3, #4
 800e43c:	1a9b      	subs	r3, r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	33f0      	adds	r3, #240	@ 0xf0
 800e442:	443b      	add	r3, r7
 800e444:	3b88      	subs	r3, #136	@ 0x88
 800e446:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e44a:	601a      	str	r2, [r3, #0]
 800e44c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e450:	4613      	mov	r3, r2
 800e452:	011b      	lsls	r3, r3, #4
 800e454:	1a9b      	subs	r3, r3, r2
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	33f0      	adds	r3, #240	@ 0xf0
 800e45a:	443b      	add	r3, r7
 800e45c:	3b84      	subs	r3, #132	@ 0x84
 800e45e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800e462:	601a      	str	r2, [r3, #0]
 800e464:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e468:	4613      	mov	r3, r2
 800e46a:	011b      	lsls	r3, r3, #4
 800e46c:	1a9b      	subs	r3, r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	33f0      	adds	r3, #240	@ 0xf0
 800e472:	443b      	add	r3, r7
 800e474:	3b80      	subs	r3, #128	@ 0x80
 800e476:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e47a:	601a      	str	r2, [r3, #0]
 800e47c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e480:	4613      	mov	r3, r2
 800e482:	011b      	lsls	r3, r3, #4
 800e484:	1a9b      	subs	r3, r3, r2
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	33f0      	adds	r3, #240	@ 0xf0
 800e48a:	443b      	add	r3, r7
 800e48c:	3b7c      	subs	r3, #124	@ 0x7c
 800e48e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800e492:	801a      	strh	r2, [r3, #0]
 800e494:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e498:	4613      	mov	r3, r2
 800e49a:	011b      	lsls	r3, r3, #4
 800e49c:	1a9b      	subs	r3, r3, r2
 800e49e:	009b      	lsls	r3, r3, #2
 800e4a0:	33f0      	adds	r3, #240	@ 0xf0
 800e4a2:	443b      	add	r3, r7
 800e4a4:	3b7a      	subs	r3, #122	@ 0x7a
 800e4a6:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800e4aa:	801a      	strh	r2, [r3, #0]
 800e4ac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	011b      	lsls	r3, r3, #4
 800e4b4:	1a9b      	subs	r3, r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	33f0      	adds	r3, #240	@ 0xf0
 800e4ba:	443b      	add	r3, r7
 800e4bc:	3b78      	subs	r3, #120	@ 0x78
 800e4be:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800e4c2:	801a      	strh	r2, [r3, #0]
 800e4c4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	011b      	lsls	r3, r3, #4
 800e4cc:	1a9b      	subs	r3, r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	33f0      	adds	r3, #240	@ 0xf0
 800e4d2:	443b      	add	r3, r7
 800e4d4:	3b74      	subs	r3, #116	@ 0x74
 800e4d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e4da:	601a      	str	r2, [r3, #0]
 800e4dc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e4e0:	4613      	mov	r3, r2
 800e4e2:	011b      	lsls	r3, r3, #4
 800e4e4:	1a9b      	subs	r3, r3, r2
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	33f0      	adds	r3, #240	@ 0xf0
 800e4ea:	443b      	add	r3, r7
 800e4ec:	3b70      	subs	r3, #112	@ 0x70
 800e4ee:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	011b      	lsls	r3, r3, #4
 800e4fc:	1a9b      	subs	r3, r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	33f0      	adds	r3, #240	@ 0xf0
 800e502:	443b      	add	r3, r7
 800e504:	3b6c      	subs	r3, #108	@ 0x6c
 800e506:	6019      	str	r1, [r3, #0]
 800e508:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e50c:	4613      	mov	r3, r2
 800e50e:	011b      	lsls	r3, r3, #4
 800e510:	1a9b      	subs	r3, r3, r2
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	33f0      	adds	r3, #240	@ 0xf0
 800e516:	443b      	add	r3, r7
 800e518:	3b68      	subs	r3, #104	@ 0x68
 800e51a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e51e:	601a      	str	r2, [r3, #0]
 800e520:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e524:	4613      	mov	r3, r2
 800e526:	011b      	lsls	r3, r3, #4
 800e528:	1a9b      	subs	r3, r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	33f0      	adds	r3, #240	@ 0xf0
 800e52e:	443b      	add	r3, r7
 800e530:	3b68      	subs	r3, #104	@ 0x68
 800e532:	3304      	adds	r3, #4
 800e534:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800e538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e53c:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800e540:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e544:	3301      	adds	r3, #1
 800e546:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 800e54a:	2300      	movs	r3, #0
 800e54c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 800e550:	2300      	movs	r3, #0
 800e552:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800e556:	2300      	movs	r3, #0
 800e558:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 800e562:	2300      	movs	r3, #0
 800e564:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 800e568:	4b0c      	ldr	r3, [pc, #48]	@ (800e59c <lfs_dir_traverse+0x2e4>)
 800e56a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 800e56e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e572:	1e5a      	subs	r2, r3, #1
 800e574:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800e578:	4613      	mov	r3, r2
 800e57a:	011b      	lsls	r3, r3, #4
 800e57c:	1a9b      	subs	r3, r3, r2
 800e57e:	009b      	lsls	r3, r3, #2
 800e580:	3328      	adds	r3, #40	@ 0x28
 800e582:	440b      	add	r3, r1
 800e584:	3304      	adds	r3, #4
 800e586:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 800e58a:	e19d      	b.n	800e8c8 <lfs_dir_traverse+0x610>
 800e58c:	7ff00000 	.word	0x7ff00000
 800e590:	080305a0 	.word	0x080305a0
 800e594:	08033c3c 	.word	0x08033c3c
 800e598:	08030474 	.word	0x08030474
 800e59c:	0800e201 	.word	0x0800e201
            }
        }

popped:
 800e5a0:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800e5a2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800e5a6:	f7ff f8b9 	bl	800d71c <lfs_tag_id>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d015      	beq.n	800e5dc <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800e5b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7ff f8b2 	bl	800d71c <lfs_tag_id>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800e5bc:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	f200 817c 	bhi.w	800e8be <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800e5c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7ff f8a7 	bl	800d71c <lfs_tag_id>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	f240 8171 	bls.w	800e8be <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800e5dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7ff f872 	bl	800d6c8 <lfs_tag_type3>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f43f ae75 	beq.w	800e2d6 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800e5ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7ff f86a 	bl	800d6c8 <lfs_tag_type3>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	f240 1301 	movw	r3, #257	@ 0x101
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	f040 80e0 	bne.w	800e7c2 <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800e602:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e606:	4ab1      	ldr	r2, [pc, #708]	@ (800e8cc <lfs_dir_traverse+0x614>)
 800e608:	4293      	cmp	r3, r2
 800e60a:	f000 815a 	beq.w	800e8c2 <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800e60e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e612:	4613      	mov	r3, r2
 800e614:	011b      	lsls	r3, r3, #4
 800e616:	1a9b      	subs	r3, r3, r2
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	33f0      	adds	r3, #240	@ 0xf0
 800e61c:	443b      	add	r3, r7
 800e61e:	3b98      	subs	r3, #152	@ 0x98
 800e620:	4618      	mov	r0, r3
 800e622:	233c      	movs	r3, #60	@ 0x3c
 800e624:	461a      	mov	r2, r3
 800e626:	2100      	movs	r1, #0
 800e628:	f017 fc96 	bl	8025f58 <memset>
 800e62c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e630:	4613      	mov	r3, r2
 800e632:	011b      	lsls	r3, r3, #4
 800e634:	1a9b      	subs	r3, r3, r2
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	33f0      	adds	r3, #240	@ 0xf0
 800e63a:	443b      	add	r3, r7
 800e63c:	3b98      	subs	r3, #152	@ 0x98
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	601a      	str	r2, [r3, #0]
 800e642:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e646:	4613      	mov	r3, r2
 800e648:	011b      	lsls	r3, r3, #4
 800e64a:	1a9b      	subs	r3, r3, r2
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	33f0      	adds	r3, #240	@ 0xf0
 800e650:	443b      	add	r3, r7
 800e652:	3b94      	subs	r3, #148	@ 0x94
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	601a      	str	r2, [r3, #0]
 800e658:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e65c:	4613      	mov	r3, r2
 800e65e:	011b      	lsls	r3, r3, #4
 800e660:	1a9b      	subs	r3, r3, r2
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	33f0      	adds	r3, #240	@ 0xf0
 800e666:	443b      	add	r3, r7
 800e668:	3b90      	subs	r3, #144	@ 0x90
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	601a      	str	r2, [r3, #0]
 800e66e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e672:	4613      	mov	r3, r2
 800e674:	011b      	lsls	r3, r3, #4
 800e676:	1a9b      	subs	r3, r3, r2
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	33f0      	adds	r3, #240	@ 0xf0
 800e67c:	443b      	add	r3, r7
 800e67e:	3b8c      	subs	r3, #140	@ 0x8c
 800e680:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800e684:	601a      	str	r2, [r3, #0]
 800e686:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e68a:	4613      	mov	r3, r2
 800e68c:	011b      	lsls	r3, r3, #4
 800e68e:	1a9b      	subs	r3, r3, r2
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	33f0      	adds	r3, #240	@ 0xf0
 800e694:	443b      	add	r3, r7
 800e696:	3b88      	subs	r3, #136	@ 0x88
 800e698:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e6a2:	4613      	mov	r3, r2
 800e6a4:	011b      	lsls	r3, r3, #4
 800e6a6:	1a9b      	subs	r3, r3, r2
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	33f0      	adds	r3, #240	@ 0xf0
 800e6ac:	443b      	add	r3, r7
 800e6ae:	3b84      	subs	r3, #132	@ 0x84
 800e6b0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e6ba:	4613      	mov	r3, r2
 800e6bc:	011b      	lsls	r3, r3, #4
 800e6be:	1a9b      	subs	r3, r3, r2
 800e6c0:	009b      	lsls	r3, r3, #2
 800e6c2:	33f0      	adds	r3, #240	@ 0xf0
 800e6c4:	443b      	add	r3, r7
 800e6c6:	3b80      	subs	r3, #128	@ 0x80
 800e6c8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e6cc:	601a      	str	r2, [r3, #0]
 800e6ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	011b      	lsls	r3, r3, #4
 800e6d6:	1a9b      	subs	r3, r3, r2
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	33f0      	adds	r3, #240	@ 0xf0
 800e6dc:	443b      	add	r3, r7
 800e6de:	3b7c      	subs	r3, #124	@ 0x7c
 800e6e0:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800e6e4:	801a      	strh	r2, [r3, #0]
 800e6e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	011b      	lsls	r3, r3, #4
 800e6ee:	1a9b      	subs	r3, r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	33f0      	adds	r3, #240	@ 0xf0
 800e6f4:	443b      	add	r3, r7
 800e6f6:	3b7a      	subs	r3, #122	@ 0x7a
 800e6f8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800e6fc:	801a      	strh	r2, [r3, #0]
 800e6fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e702:	4613      	mov	r3, r2
 800e704:	011b      	lsls	r3, r3, #4
 800e706:	1a9b      	subs	r3, r3, r2
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	33f0      	adds	r3, #240	@ 0xf0
 800e70c:	443b      	add	r3, r7
 800e70e:	3b78      	subs	r3, #120	@ 0x78
 800e710:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800e714:	801a      	strh	r2, [r3, #0]
 800e716:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e71a:	4613      	mov	r3, r2
 800e71c:	011b      	lsls	r3, r3, #4
 800e71e:	1a9b      	subs	r3, r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	33f0      	adds	r3, #240	@ 0xf0
 800e724:	443b      	add	r3, r7
 800e726:	3b74      	subs	r3, #116	@ 0x74
 800e728:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e732:	4613      	mov	r3, r2
 800e734:	011b      	lsls	r3, r3, #4
 800e736:	1a9b      	subs	r3, r3, r2
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	33f0      	adds	r3, #240	@ 0xf0
 800e73c:	443b      	add	r3, r7
 800e73e:	3b70      	subs	r3, #112	@ 0x70
 800e740:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e744:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800e746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e74a:	3301      	adds	r3, #1
 800e74c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 800e750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e752:	4618      	mov	r0, r3
 800e754:	f7fe fff2 	bl	800d73c <lfs_tag_size>
 800e758:	4603      	mov	r3, r0
 800e75a:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 800e75e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e760:	4618      	mov	r0, r3
 800e762:	f7fe ffdb 	bl	800d71c <lfs_tag_id>
 800e766:	4603      	mov	r3, r0
 800e768:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 800e76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e770:	60bb      	str	r3, [r7, #8]
            off = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800e776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e77a:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800e77c:	2300      	movs	r3, #0
 800e77e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800e782:	2300      	movs	r3, #0
 800e784:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800e788:	4b51      	ldr	r3, [pc, #324]	@ (800e8d0 <lfs_dir_traverse+0x618>)
 800e78a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800e78e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800e792:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800e796:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800e79a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 800e79e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 800e7a8:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 800e7ac:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800e7b0:	1ad3      	subs	r3, r2, r3
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800e7b8:	4413      	add	r3, r2
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 800e7c0:	e589      	b.n	800e2d6 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800e7c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7fe ff7f 	bl	800d6c8 <lfs_tag_type3>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800e7d0:	d159      	bne.n	800e886 <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e7d8:	e04b      	b.n	800e872 <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 800e7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800e7e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	005b      	lsls	r3, r3, #1
 800e7ea:	4413      	add	r3, r2
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e7f4:	4413      	add	r3, r2
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800e7fc:	051c      	lsls	r4, r3, #20
 800e7fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e800:	4618      	mov	r0, r3
 800e802:	f7fe ff8b 	bl	800d71c <lfs_tag_id>
 800e806:	4603      	mov	r3, r0
 800e808:	461a      	mov	r2, r3
 800e80a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800e80e:	4413      	add	r3, r2
 800e810:	029b      	lsls	r3, r3, #10
 800e812:	ea44 0103 	orr.w	r1, r4, r3
 800e816:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e81a:	4613      	mov	r3, r2
 800e81c:	005b      	lsls	r3, r3, #1
 800e81e:	4413      	add	r3, r2
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	461a      	mov	r2, r3
 800e824:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e828:	4413      	add	r3, r2
 800e82a:	689b      	ldr	r3, [r3, #8]
 800e82c:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800e82e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e832:	4613      	mov	r3, r2
 800e834:	005b      	lsls	r3, r3, #1
 800e836:	4413      	add	r3, r2
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	461a      	mov	r2, r3
 800e83c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e840:	4413      	add	r3, r2
 800e842:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800e844:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e848:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800e84c:	4798      	blx	r3
 800e84e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 800e852:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e856:	2b00      	cmp	r3, #0
 800e858:	da02      	bge.n	800e860 <lfs_dir_traverse+0x5a8>
                    return res;
 800e85a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e85e:	e10b      	b.n	800ea78 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 800e860:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e864:	2b00      	cmp	r3, #0
 800e866:	d12e      	bne.n	800e8c6 <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800e868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e86c:	3301      	adds	r3, #1
 800e86e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e874:	4618      	mov	r0, r3
 800e876:	f7fe ff61 	bl	800d73c <lfs_tag_size>
 800e87a:	4602      	mov	r2, r0
 800e87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e880:	4293      	cmp	r3, r2
 800e882:	d3aa      	bcc.n	800e7da <lfs_dir_traverse+0x522>
 800e884:	e527      	b.n	800e2d6 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800e886:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800e88a:	029a      	lsls	r2, r3, #10
 800e88c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e88e:	18d1      	adds	r1, r2, r3
 800e890:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e894:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e898:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800e89c:	4798      	blx	r3
 800e89e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800e8a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	da02      	bge.n	800e8b0 <lfs_dir_traverse+0x5f8>
                return res;
 800e8aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e8ae:	e0e3      	b.n	800ea78 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 800e8b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d10d      	bne.n	800e8d4 <lfs_dir_traverse+0x61c>
 800e8b8:	e50d      	b.n	800e2d6 <lfs_dir_traverse+0x1e>
                continue;
 800e8ba:	bf00      	nop
 800e8bc:	e50b      	b.n	800e2d6 <lfs_dir_traverse+0x1e>
            continue;
 800e8be:	bf00      	nop
 800e8c0:	e509      	b.n	800e2d6 <lfs_dir_traverse+0x1e>
                continue;
 800e8c2:	bf00      	nop
 800e8c4:	e507      	b.n	800e2d6 <lfs_dir_traverse+0x1e>
                    break;
 800e8c6:	bf00      	nop
        {
 800e8c8:	e505      	b.n	800e2d6 <lfs_dir_traverse+0x1e>
 800e8ca:	bf00      	nop
 800e8cc:	0800e201 	.word	0x0800e201
 800e8d0:	600ffc00 	.word	0x600ffc00
                break;
 800e8d4:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800e8d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f000 80ca 	beq.w	800ea74 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800e8e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e8e4:	1e5a      	subs	r2, r3, #1
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	011b      	lsls	r3, r3, #4
 800e8ea:	1a9b      	subs	r3, r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	33f0      	adds	r3, #240	@ 0xf0
 800e8f0:	443b      	add	r3, r7
 800e8f2:	3b98      	subs	r3, #152	@ 0x98
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800e8f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e8fc:	1e5a      	subs	r2, r3, #1
 800e8fe:	4613      	mov	r3, r2
 800e900:	011b      	lsls	r3, r3, #4
 800e902:	1a9b      	subs	r3, r3, r2
 800e904:	009b      	lsls	r3, r3, #2
 800e906:	33f0      	adds	r3, #240	@ 0xf0
 800e908:	443b      	add	r3, r7
 800e90a:	3b94      	subs	r3, #148	@ 0x94
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800e910:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e914:	1e5a      	subs	r2, r3, #1
 800e916:	4613      	mov	r3, r2
 800e918:	011b      	lsls	r3, r3, #4
 800e91a:	1a9b      	subs	r3, r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	33f0      	adds	r3, #240	@ 0xf0
 800e920:	443b      	add	r3, r7
 800e922:	3b90      	subs	r3, #144	@ 0x90
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800e928:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e92c:	1e5a      	subs	r2, r3, #1
 800e92e:	4613      	mov	r3, r2
 800e930:	011b      	lsls	r3, r3, #4
 800e932:	1a9b      	subs	r3, r3, r2
 800e934:	009b      	lsls	r3, r3, #2
 800e936:	33f0      	adds	r3, #240	@ 0xf0
 800e938:	443b      	add	r3, r7
 800e93a:	3b8c      	subs	r3, #140	@ 0x8c
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 800e942:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e946:	1e5a      	subs	r2, r3, #1
 800e948:	4613      	mov	r3, r2
 800e94a:	011b      	lsls	r3, r3, #4
 800e94c:	1a9b      	subs	r3, r3, r2
 800e94e:	009b      	lsls	r3, r3, #2
 800e950:	33f0      	adds	r3, #240	@ 0xf0
 800e952:	443b      	add	r3, r7
 800e954:	3b88      	subs	r3, #136	@ 0x88
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 800e95c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e960:	1e5a      	subs	r2, r3, #1
 800e962:	4613      	mov	r3, r2
 800e964:	011b      	lsls	r3, r3, #4
 800e966:	1a9b      	subs	r3, r3, r2
 800e968:	009b      	lsls	r3, r3, #2
 800e96a:	33f0      	adds	r3, #240	@ 0xf0
 800e96c:	443b      	add	r3, r7
 800e96e:	3b84      	subs	r3, #132	@ 0x84
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 800e976:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e97a:	1e5a      	subs	r2, r3, #1
 800e97c:	4613      	mov	r3, r2
 800e97e:	011b      	lsls	r3, r3, #4
 800e980:	1a9b      	subs	r3, r3, r2
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	33f0      	adds	r3, #240	@ 0xf0
 800e986:	443b      	add	r3, r7
 800e988:	3b80      	subs	r3, #128	@ 0x80
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 800e990:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e994:	1e5a      	subs	r2, r3, #1
 800e996:	4613      	mov	r3, r2
 800e998:	011b      	lsls	r3, r3, #4
 800e99a:	1a9b      	subs	r3, r3, r2
 800e99c:	009b      	lsls	r3, r3, #2
 800e99e:	33f0      	adds	r3, #240	@ 0xf0
 800e9a0:	443b      	add	r3, r7
 800e9a2:	3b7c      	subs	r3, #124	@ 0x7c
 800e9a4:	881b      	ldrh	r3, [r3, #0]
 800e9a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 800e9aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e9ae:	1e5a      	subs	r2, r3, #1
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	011b      	lsls	r3, r3, #4
 800e9b4:	1a9b      	subs	r3, r3, r2
 800e9b6:	009b      	lsls	r3, r3, #2
 800e9b8:	33f0      	adds	r3, #240	@ 0xf0
 800e9ba:	443b      	add	r3, r7
 800e9bc:	3b7a      	subs	r3, #122	@ 0x7a
 800e9be:	881b      	ldrh	r3, [r3, #0]
 800e9c0:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 800e9c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e9c8:	1e5a      	subs	r2, r3, #1
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	011b      	lsls	r3, r3, #4
 800e9ce:	1a9b      	subs	r3, r3, r2
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	33f0      	adds	r3, #240	@ 0xf0
 800e9d4:	443b      	add	r3, r7
 800e9d6:	3b78      	subs	r3, #120	@ 0x78
 800e9d8:	881b      	ldrh	r3, [r3, #0]
 800e9da:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 800e9de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e9e2:	1e5a      	subs	r2, r3, #1
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	011b      	lsls	r3, r3, #4
 800e9e8:	1a9b      	subs	r3, r3, r2
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	33f0      	adds	r3, #240	@ 0xf0
 800e9ee:	443b      	add	r3, r7
 800e9f0:	3b74      	subs	r3, #116	@ 0x74
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 800e9f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e9fc:	1e5a      	subs	r2, r3, #1
 800e9fe:	4613      	mov	r3, r2
 800ea00:	011b      	lsls	r3, r3, #4
 800ea02:	1a9b      	subs	r3, r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	33f0      	adds	r3, #240	@ 0xf0
 800ea08:	443b      	add	r3, r7
 800ea0a:	3b70      	subs	r3, #112	@ 0x70
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 800ea12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ea16:	1e5a      	subs	r2, r3, #1
 800ea18:	4613      	mov	r3, r2
 800ea1a:	011b      	lsls	r3, r3, #4
 800ea1c:	1a9b      	subs	r3, r3, r2
 800ea1e:	009b      	lsls	r3, r3, #2
 800ea20:	33f0      	adds	r3, #240	@ 0xf0
 800ea22:	443b      	add	r3, r7
 800ea24:	3b6c      	subs	r3, #108	@ 0x6c
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 800ea2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ea2e:	1e5a      	subs	r2, r3, #1
 800ea30:	4613      	mov	r3, r2
 800ea32:	011b      	lsls	r3, r3, #4
 800ea34:	1a9b      	subs	r3, r3, r2
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	33f0      	adds	r3, #240	@ 0xf0
 800ea3a:	443b      	add	r3, r7
 800ea3c:	3b68      	subs	r3, #104	@ 0x68
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 800ea44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ea48:	1e5a      	subs	r2, r3, #1
 800ea4a:	4613      	mov	r3, r2
 800ea4c:	011b      	lsls	r3, r3, #4
 800ea4e:	1a9b      	subs	r3, r3, r2
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	33f0      	adds	r3, #240	@ 0xf0
 800ea54:	443b      	add	r3, r7
 800ea56:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 800ea5a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ea5e:	3204      	adds	r2, #4
 800ea60:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea64:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800ea68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ea6c:	3b01      	subs	r3, #1
 800ea6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 800ea72:	e596      	b.n	800e5a2 <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 800ea74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	37f4      	adds	r7, #244	@ 0xf4
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd90      	pop	{r4, r7, pc}

0800ea80 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800ea80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea82:	b0a5      	sub	sp, #148	@ 0x94
 800ea84:	af04      	add	r7, sp, #16
 800ea86:	6178      	str	r0, [r7, #20]
 800ea88:	6139      	str	r1, [r7, #16]
 800ea8a:	60fa      	str	r2, [r7, #12]
 800ea8c:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800ea8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea92:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00f      	beq.n	800eabc <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d206      	bcs.n	800eab6 <lfs_dir_fetchmatch+0x36>
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	3304      	adds	r3, #4
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d302      	bcc.n	800eabc <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800eab6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800eaba:	e3a4      	b.n	800f206 <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800eabc:	2300      	movs	r3, #0
 800eabe:	647b      	str	r3, [r7, #68]	@ 0x44
 800eac0:	2300      	movs	r3, #0
 800eac2:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 800eac4:	2300      	movs	r3, #0
 800eac6:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800eac8:	2300      	movs	r3, #0
 800eaca:	677b      	str	r3, [r7, #116]	@ 0x74
 800eacc:	e05a      	b.n	800eb84 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 800eace:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800ead0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	68fa      	ldr	r2, [r7, #12]
 800ead6:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800ead8:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800eada:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800eade:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800eae0:	0092      	lsls	r2, r2, #2
 800eae2:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800eae4:	2104      	movs	r1, #4
 800eae6:	9103      	str	r1, [sp, #12]
 800eae8:	9202      	str	r2, [sp, #8]
 800eaea:	2200      	movs	r2, #0
 800eaec:	9201      	str	r2, [sp, #4]
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	2304      	movs	r3, #4
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	6978      	ldr	r0, [r7, #20]
 800eaf8:	f7fe f978 	bl	800cdec <lfs_bd_read>
 800eafc:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 800eafe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	3378      	adds	r3, #120	@ 0x78
 800eb04:	f107 0208 	add.w	r2, r7, #8
 800eb08:	4413      	add	r3, r2
 800eb0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fe f901 	bl	800cd16 <lfs_fromle32>
 800eb14:	4602      	mov	r2, r0
 800eb16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	3378      	adds	r3, #120	@ 0x78
 800eb1c:	f107 0108 	add.w	r1, r7, #8
 800eb20:	440b      	add	r3, r1
 800eb22:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800eb26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d005      	beq.n	800eb38 <lfs_dir_fetchmatch+0xb8>
 800eb2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb2e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800eb32:	d001      	beq.n	800eb38 <lfs_dir_fetchmatch+0xb8>
            return err;
 800eb34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb36:	e366      	b.n	800f206 <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 800eb38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb3a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800eb3e:	d01e      	beq.n	800eb7e <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800eb40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb42:	009b      	lsls	r3, r3, #2
 800eb44:	3378      	adds	r3, #120	@ 0x78
 800eb46:	f107 0208 	add.w	r2, r7, #8
 800eb4a:	4413      	add	r3, r2
 800eb4c:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800eb50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb52:	3301      	adds	r3, #1
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	f003 0301 	and.w	r3, r3, #1
 800eb5a:	bfb8      	it	lt
 800eb5c:	425b      	neglt	r3, r3
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	3378      	adds	r3, #120	@ 0x78
 800eb62:	f107 0108 	add.w	r1, r7, #8
 800eb66:	440b      	add	r3, r1
 800eb68:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4610      	mov	r0, r2
 800eb70:	f7fe f8c3 	bl	800ccfa <lfs_scmp>
 800eb74:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	dd01      	ble.n	800eb7e <lfs_dir_fetchmatch+0xfe>
            r = i;
 800eb7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb7c:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800eb7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb80:	3301      	adds	r3, #1
 800eb82:	677b      	str	r3, [r7, #116]	@ 0x74
 800eb84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	dda1      	ble.n	800eace <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800eb8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f003 0301 	and.w	r3, r3, #1
 800eb92:	bfb8      	it	lt
 800eb94:	425b      	neglt	r3, r3
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800eba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eba4:	3301      	adds	r3, #1
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	f003 0301 	and.w	r3, r3, #1
 800ebac:	bfb8      	it	lt
 800ebae:	425b      	neglt	r3, r3
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	68fa      	ldr	r2, [r7, #12]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800ebbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f003 0301 	and.w	r3, r3, #1
 800ebc4:	bfb8      	it	lt
 800ebc6:	425b      	neglt	r3, r3
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	3378      	adds	r3, #120	@ 0x78
 800ebcc:	f107 0208 	add.w	r2, r7, #8
 800ebd0:	4413      	add	r3, r2
 800ebd2:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	673b      	str	r3, [r7, #112]	@ 0x70
 800ebe4:	e2fb      	b.n	800f1de <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 800ebea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ebee:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800ebf6:	4aa9      	ldr	r2, [pc, #676]	@ (800ee9c <lfs_dir_fetchmatch+0x41c>)
 800ebf8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ebfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec00:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800ec04:	2300      	movs	r3, #0
 800ec06:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 800ec0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ec0c:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 800ec14:	2300      	movs	r3, #0
 800ec16:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7fe f884 	bl	800cd2c <lfs_tole32>
 800ec24:	4602      	mov	r2, r0
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	3308      	adds	r3, #8
 800ec2e:	2204      	movs	r2, #4
 800ec30:	4619      	mov	r1, r3
 800ec32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec36:	f005 fef5 	bl	8014a24 <lfs_crc>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fe f867 	bl	800cd16 <lfs_fromle32>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800ec4e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800ec50:	f7fe fd81 	bl	800d756 <lfs_tag_dsize>
 800ec54:	4602      	mov	r2, r0
 800ec56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec58:	4413      	add	r3, r2
 800ec5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 800ec5c:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ec62:	6a58      	ldr	r0, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2204      	movs	r2, #4
 800ec6a:	9203      	str	r2, [sp, #12]
 800ec6c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ec70:	9202      	str	r2, [sp, #8]
 800ec72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ec74:	9201      	str	r2, [sp, #4]
 800ec76:	9300      	str	r3, [sp, #0]
 800ec78:	4603      	mov	r3, r0
 800ec7a:	460a      	mov	r2, r1
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	6978      	ldr	r0, [r7, #20]
 800ec80:	f7fe f8b4 	bl	800cdec <lfs_bd_read>
 800ec84:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800ec86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d006      	beq.n	800ec9a <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 800ec8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec8e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ec92:	f000 81d6 	beq.w	800f042 <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800ec96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec98:	e2b5      	b.n	800f206 <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800eca0:	2204      	movs	r2, #4
 800eca2:	4618      	mov	r0, r3
 800eca4:	f005 febe 	bl	8014a24 <lfs_crc>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 800ecac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fe f848 	bl	800cd44 <lfs_frombe32>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ecb8:	4053      	eors	r3, r2
 800ecba:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 800ecbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe fcc1 	bl	800d646 <lfs_tag_isvalid>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	f083 0301 	eor.w	r3, r3, #1
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d00b      	beq.n	800ece8 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 800ecd0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800ecd2:	f7fe fce9 	bl	800d6a8 <lfs_tag_type2>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800ecdc:	bf0c      	ite	eq
 800ecde:	2301      	moveq	r3, #1
 800ece0:	2300      	movne	r3, #0
 800ece2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 800ece6:	e1bb      	b.n	800f060 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800ece8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe fd33 	bl	800d756 <lfs_tag_dsize>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecf4:	441a      	add	r2, r3
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ecfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	f200 81a2 	bhi.w	800f046 <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 800ed02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed04:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fe fccd 	bl	800d6a8 <lfs_tag_type2>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800ed14:	d15e      	bne.n	800edd4 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800ed16:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed1c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ed24:	3204      	adds	r2, #4
 800ed26:	2104      	movs	r1, #4
 800ed28:	9103      	str	r1, [sp, #12]
 800ed2a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ed2e:	9102      	str	r1, [sp, #8]
 800ed30:	9201      	str	r2, [sp, #4]
 800ed32:	9300      	str	r3, [sp, #0]
 800ed34:	4623      	mov	r3, r4
 800ed36:	4602      	mov	r2, r0
 800ed38:	2100      	movs	r1, #0
 800ed3a:	6978      	ldr	r0, [r7, #20]
 800ed3c:	f7fe f856 	bl	800cdec <lfs_bd_read>
 800ed40:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800ed42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d006      	beq.n	800ed56 <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 800ed48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed4a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ed4e:	f000 817c 	beq.w	800f04a <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 800ed52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 800ed54:	e257      	b.n	800f206 <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 800ed56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7fd ffdc 	bl	800cd16 <lfs_fromle32>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 800ed62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed66:	429a      	cmp	r2, r3
 800ed68:	f040 8171 	bne.w	800f04e <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800ed6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7fe fcba 	bl	800d6e8 <lfs_tag_chunk>
 800ed74:	4603      	mov	r3, r0
 800ed76:	07db      	lsls	r3, r3, #31
 800ed78:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ed7a:	4053      	eors	r3, r2
 800ed7c:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed82:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800ed86:	2204      	movs	r2, #4
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f005 fe4b 	bl	8014a24 <lfs_crc>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800ed94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ed96:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 800ed98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fe fcdb 	bl	800d756 <lfs_tag_dsize>
 800eda0:	4602      	mov	r2, r0
 800eda2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eda4:	441a      	add	r2, r3
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800edae:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800edb6:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800edb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800edbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800edca:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 800edcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800edd0:	633b      	str	r3, [r7, #48]	@ 0x30
 800edd2:	e73c      	b.n	800ec4e <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 800edd4:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800edda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eddc:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	681c      	ldr	r4, [r3, #0]
 800ede2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ede4:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800ede6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ede8:	4618      	mov	r0, r3
 800edea:	f7fe fcb4 	bl	800d756 <lfs_tag_dsize>
 800edee:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 800edf0:	3b04      	subs	r3, #4
 800edf2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800edf6:	9203      	str	r2, [sp, #12]
 800edf8:	9302      	str	r3, [sp, #8]
 800edfa:	9501      	str	r5, [sp, #4]
 800edfc:	9400      	str	r4, [sp, #0]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4632      	mov	r2, r6
 800ee02:	2100      	movs	r1, #0
 800ee04:	6978      	ldr	r0, [r7, #20]
 800ee06:	f7fe f98e 	bl	800d126 <lfs_bd_crc>
 800ee0a:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 800ee0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d006      	beq.n	800ee20 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 800ee12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee14:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ee18:	f000 811b 	beq.w	800f052 <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 800ee1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee1e:	e1f2      	b.n	800f206 <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800ee20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fe fc30 	bl	800d688 <lfs_tag_type1>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d113      	bne.n	800ee56 <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800ee2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7fe fc73 	bl	800d71c <lfs_tag_id>
 800ee36:	4603      	mov	r3, r0
 800ee38:	461a      	mov	r2, r3
 800ee3a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	f200 80b6 	bhi.w	800efb0 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 800ee44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fe fc68 	bl	800d71c <lfs_tag_id>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	3301      	adds	r3, #1
 800ee50:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800ee54:	e0ac      	b.n	800efb0 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800ee56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fe fc15 	bl	800d688 <lfs_tag_type1>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee64:	d13a      	bne.n	800eedc <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 800ee66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7fe fc4a 	bl	800d702 <lfs_tag_splice>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800ee76:	4413      	add	r3, r2
 800ee78:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800ee7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ee7e:	4b08      	ldr	r3, [pc, #32]	@ (800eea0 <lfs_dir_fetchmatch+0x420>)
 800ee80:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800ee82:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800ee86:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800ee8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d109      	bne.n	800eea4 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 800ee90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ee92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ee96:	663b      	str	r3, [r7, #96]	@ 0x60
 800ee98:	e08a      	b.n	800efb0 <lfs_dir_fetchmatch+0x530>
 800ee9a:	bf00      	nop
 800ee9c:	080305e0 	.word	0x080305e0
 800eea0:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 800eea4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eea6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eeaa:	f000 8081 	beq.w	800efb0 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800eeae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7fe fc33 	bl	800d71c <lfs_tag_id>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	461c      	mov	r4, r3
 800eeba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fe fc2d 	bl	800d71c <lfs_tag_id>
 800eec2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800eec4:	429c      	cmp	r4, r3
 800eec6:	d873      	bhi.n	800efb0 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800eec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fe fc19 	bl	800d702 <lfs_tag_splice>
 800eed0:	4603      	mov	r3, r0
 800eed2:	029a      	lsls	r2, r3, #10
 800eed4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eed6:	4413      	add	r3, r2
 800eed8:	663b      	str	r3, [r7, #96]	@ 0x60
 800eeda:	e069      	b.n	800efb0 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800eedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fe fbd2 	bl	800d688 <lfs_tag_type1>
 800eee4:	4603      	mov	r3, r0
 800eee6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800eeea:	d132      	bne.n	800ef52 <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800eeec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fe fbfa 	bl	800d6e8 <lfs_tag_chunk>
 800eef4:	4603      	mov	r3, r0
 800eef6:	f003 0301 	and.w	r3, r3, #1
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	bf14      	ite	ne
 800eefe:	2301      	movne	r3, #1
 800ef00:	2300      	moveq	r3, #0
 800ef02:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 800ef06:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ef0c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ef14:	3204      	adds	r2, #4
 800ef16:	2108      	movs	r1, #8
 800ef18:	9103      	str	r1, [sp, #12]
 800ef1a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800ef1e:	9102      	str	r1, [sp, #8]
 800ef20:	9201      	str	r2, [sp, #4]
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	4623      	mov	r3, r4
 800ef26:	4602      	mov	r2, r0
 800ef28:	2100      	movs	r1, #0
 800ef2a:	6978      	ldr	r0, [r7, #20]
 800ef2c:	f7fd ff5e 	bl	800cdec <lfs_bd_read>
 800ef30:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800ef32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d006      	beq.n	800ef46 <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 800ef38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef3a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ef3e:	f000 808a 	beq.w	800f056 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 800ef42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef44:	e15f      	b.n	800f206 <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 800ef46:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fe fb47 	bl	800d5de <lfs_pair_fromle32>
 800ef50:	e02e      	b.n	800efb0 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 800ef52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7fe fbb7 	bl	800d6c8 <lfs_tag_type3>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d124      	bne.n	800efb0 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 800ef66:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ef6c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ef74:	3204      	adds	r2, #4
 800ef76:	2108      	movs	r1, #8
 800ef78:	9103      	str	r1, [sp, #12]
 800ef7a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800ef7e:	9102      	str	r1, [sp, #8]
 800ef80:	9201      	str	r2, [sp, #4]
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	4623      	mov	r3, r4
 800ef86:	4602      	mov	r2, r0
 800ef88:	2100      	movs	r1, #0
 800ef8a:	6978      	ldr	r0, [r7, #20]
 800ef8c:	f7fd ff2e 	bl	800cdec <lfs_bd_read>
 800ef90:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 800ef92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d003      	beq.n	800efa0 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 800ef98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef9a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ef9e:	d05c      	beq.n	800f05a <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 800efa0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fe fcd5 	bl	800d954 <lfs_fcrc_fromle32>
                hasfcrc = true;
 800efaa:	2301      	movs	r3, #1
 800efac:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800efb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800efb6:	405a      	eors	r2, r3
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	4013      	ands	r3, r2
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f47f ae46 	bne.w	800ec4e <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800efc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800efc8:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800efca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efcc:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800efce:	627b      	str	r3, [r7, #36]	@ 0x24
 800efd0:	f107 0220 	add.w	r2, r7, #32
 800efd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800efd8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800efdc:	4798      	blx	r3
 800efde:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 800efe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	da05      	bge.n	800eff2 <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 800efe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efe8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800efec:	d037      	beq.n	800f05e <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 800efee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 800eff0:	e109      	b.n	800f206 <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 800eff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d102      	bne.n	800effe <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 800eff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800effa:	663b      	str	r3, [r7, #96]	@ 0x60
 800effc:	e627      	b.n	800ec4e <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800effe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f000:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f002:	405a      	eors	r2, r3
 800f004:	4b82      	ldr	r3, [pc, #520]	@ (800f210 <lfs_dir_fetchmatch+0x790>)
 800f006:	4013      	ands	r3, r2
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d103      	bne.n	800f014 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800f00c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f010:	663b      	str	r3, [r7, #96]	@ 0x60
 800f012:	e61c      	b.n	800ec4e <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 800f014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f016:	2b02      	cmp	r3, #2
 800f018:	f47f ae19 	bne.w	800ec4e <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800f01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fe fb7c 	bl	800d71c <lfs_tag_id>
 800f024:	4603      	mov	r3, r0
 800f026:	461c      	mov	r4, r3
 800f028:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fe fb76 	bl	800d71c <lfs_tag_id>
 800f030:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800f032:	429c      	cmp	r4, r3
 800f034:	f63f ae0b 	bhi.w	800ec4e <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800f038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f03a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f03e:	663b      	str	r3, [r7, #96]	@ 0x60
 800f040:	e605      	b.n	800ec4e <lfs_dir_fetchmatch+0x1ce>
                    break;
 800f042:	bf00      	nop
 800f044:	e00c      	b.n	800f060 <lfs_dir_fetchmatch+0x5e0>
                break;
 800f046:	bf00      	nop
 800f048:	e00a      	b.n	800f060 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f04a:	bf00      	nop
 800f04c:	e008      	b.n	800f060 <lfs_dir_fetchmatch+0x5e0>
                    break;
 800f04e:	bf00      	nop
 800f050:	e006      	b.n	800f060 <lfs_dir_fetchmatch+0x5e0>
                    break;
 800f052:	bf00      	nop
 800f054:	e004      	b.n	800f060 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f056:	bf00      	nop
 800f058:	e002      	b.n	800f060 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f05a:	bf00      	nop
 800f05c:	e000      	b.n	800f060 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f05e:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d000      	beq.n	800f06a <lfs_dir_fetchmatch+0x5ea>
 800f068:	e017      	b.n	800f09a <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fe fa2f 	bl	800d4d0 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 800f072:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f074:	3301      	adds	r3, #1
 800f076:	2b00      	cmp	r3, #0
 800f078:	f003 0301 	and.w	r3, r3, #1
 800f07c:	bfb8      	it	lt
 800f07e:	425b      	neglt	r3, r3
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	3378      	adds	r3, #120	@ 0x78
 800f084:	f107 0208 	add.w	r2, r7, #8
 800f088:	4413      	add	r3, r2
 800f08a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800f092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f094:	3301      	adds	r3, #1
 800f096:	673b      	str	r3, [r7, #112]	@ 0x70
 800f098:	e0a1      	b.n	800f1de <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	2200      	movs	r2, #0
 800f09e:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 800f0a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d03a      	beq.n	800f11e <lfs_dir_fetchmatch+0x69e>
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f0b0:	6a12      	ldr	r2, [r2, #32]
 800f0b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0b6:	fb01 f202 	mul.w	r2, r1, r2
 800f0ba:	1a9b      	subs	r3, r3, r2
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d12e      	bne.n	800f11e <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 800f0c0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d02a      	beq.n	800f11e <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 800f0c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f0cc:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 800f0ce:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f0d4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	693a      	ldr	r2, [r7, #16]
 800f0dc:	68d2      	ldr	r2, [r2, #12]
 800f0de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f0e0:	f107 001c 	add.w	r0, r7, #28
 800f0e4:	9003      	str	r0, [sp, #12]
 800f0e6:	9102      	str	r1, [sp, #8]
 800f0e8:	9201      	str	r2, [sp, #4]
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	462b      	mov	r3, r5
 800f0ee:	4622      	mov	r2, r4
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	6978      	ldr	r0, [r7, #20]
 800f0f4:	f7fe f817 	bl	800d126 <lfs_bd_crc>
 800f0f8:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 800f0fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d005      	beq.n	800f10c <lfs_dir_fetchmatch+0x68c>
 800f100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f102:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f106:	d001      	beq.n	800f10c <lfs_dir_fetchmatch+0x68c>
                    return err;
 800f108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f10a:	e07c      	b.n	800f206 <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 800f10c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	429a      	cmp	r2, r3
 800f112:	bf0c      	ite	eq
 800f114:	2301      	moveq	r3, #1
 800f116:	2300      	movne	r3, #0
 800f118:	b2da      	uxtb	r2, r3
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	333c      	adds	r3, #60	@ 0x3c
 800f122:	693a      	ldr	r2, [r7, #16]
 800f124:	4611      	mov	r1, r2
 800f126:	4618      	mov	r0, r3
 800f128:	f7fe fbb4 	bl	800d894 <lfs_gstate_hasmovehere>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d028      	beq.n	800f184 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f136:	4618      	mov	r0, r3
 800f138:	f7fe faf0 	bl	800d71c <lfs_tag_id>
 800f13c:	4603      	mov	r3, r0
 800f13e:	461c      	mov	r4, r3
 800f140:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f142:	4618      	mov	r0, r3
 800f144:	f7fe faea 	bl	800d71c <lfs_tag_id>
 800f148:	4603      	mov	r3, r0
 800f14a:	429c      	cmp	r4, r3
 800f14c:	d104      	bne.n	800f158 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 800f14e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f150:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f154:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f156:	e015      	b.n	800f184 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 800f158:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f15a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f15e:	d011      	beq.n	800f184 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f164:	4618      	mov	r0, r3
 800f166:	f7fe fad9 	bl	800d71c <lfs_tag_id>
 800f16a:	4603      	mov	r3, r0
 800f16c:	461c      	mov	r4, r3
 800f16e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f170:	4618      	mov	r0, r3
 800f172:	f7fe fad3 	bl	800d71c <lfs_tag_id>
 800f176:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 800f178:	429c      	cmp	r4, r3
 800f17a:	d203      	bcs.n	800f184 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 800f17c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f17e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800f182:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 800f184:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d010      	beq.n	800f1ae <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800f18c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fe fac4 	bl	800d71c <lfs_tag_id>
 800f194:	4603      	mov	r3, r0
 800f196:	461a      	mov	r2, r3
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	8a9b      	ldrh	r3, [r3, #20]
 800f19c:	4619      	mov	r1, r3
 800f19e:	4610      	mov	r0, r2
 800f1a0:	f7fd fd49 	bl	800cc36 <lfs_min>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f1ac:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 800f1ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7fe fa48 	bl	800d646 <lfs_tag_isvalid>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d001      	beq.n	800f1c0 <lfs_dir_fetchmatch+0x740>
            return besttag;
 800f1bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f1be:	e022      	b.n	800f206 <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 800f1c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7fe faaa 	bl	800d71c <lfs_tag_id>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	8a9b      	ldrh	r3, [r3, #20]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d202      	bcs.n	800f1da <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 800f1d4:	f06f 0301 	mvn.w	r3, #1
 800f1d8:	e015      	b.n	800f206 <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	e013      	b.n	800f206 <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 800f1de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	f77f ad00 	ble.w	800ebe6 <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	4909      	ldr	r1, [pc, #36]	@ (800f214 <lfs_dir_fetchmatch+0x794>)
 800f1f0:	9101      	str	r1, [sp, #4]
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	4613      	mov	r3, r2
 800f1f6:	f240 5259 	movw	r2, #1369	@ 0x559
 800f1fa:	4907      	ldr	r1, [pc, #28]	@ (800f218 <lfs_dir_fetchmatch+0x798>)
 800f1fc:	4807      	ldr	r0, [pc, #28]	@ (800f21c <lfs_dir_fetchmatch+0x79c>)
 800f1fe:	f014 f97f 	bl	8023500 <printf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800f202:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 800f206:	4618      	mov	r0, r3
 800f208:	3784      	adds	r7, #132	@ 0x84
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f20e:	bf00      	nop
 800f210:	7ffffc00 	.word	0x7ffffc00
 800f214:	0803059c 	.word	0x0803059c
 800f218:	08030474 	.word	0x08030474
 800f21c:	080305a8 	.word	0x080305a8

0800f220 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800f220:	b580      	push	{r7, lr}
 800f222:	b088      	sub	sp, #32
 800f224:	af04      	add	r7, sp, #16
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800f22c:	2300      	movs	r3, #0
 800f22e:	9303      	str	r3, [sp, #12]
 800f230:	2300      	movs	r3, #0
 800f232:	9302      	str	r3, [sp, #8]
 800f234:	2300      	movs	r3, #0
 800f236:	9301      	str	r3, [sp, #4]
 800f238:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	68b9      	ldr	r1, [r7, #8]
 800f246:	68f8      	ldr	r0, [r7, #12]
 800f248:	f7ff fc1a 	bl	800ea80 <lfs_dir_fetchmatch>
 800f24c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3710      	adds	r7, #16
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
	...

0800f258 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800f258:	b580      	push	{r7, lr}
 800f25a:	b08a      	sub	sp, #40	@ 0x28
 800f25c:	af02      	add	r7, sp, #8
 800f25e:	60f8      	str	r0, [r7, #12]
 800f260:	60b9      	str	r1, [r7, #8]
 800f262:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800f264:	f107 0310 	add.w	r3, r7, #16
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	4b12      	ldr	r3, [pc, #72]	@ (800f2b4 <lfs_dir_getgstate+0x5c>)
 800f26c:	4a12      	ldr	r2, [pc, #72]	@ (800f2b8 <lfs_dir_getgstate+0x60>)
 800f26e:	68b9      	ldr	r1, [r7, #8]
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	f7fe fecf 	bl	800e014 <lfs_dir_get>
 800f276:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	da05      	bge.n	800f28a <lfs_dir_getgstate+0x32>
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	f113 0f02 	cmn.w	r3, #2
 800f284:	d001      	beq.n	800f28a <lfs_dir_getgstate+0x32>
        return res;
 800f286:	69fb      	ldr	r3, [r7, #28]
 800f288:	e00f      	b.n	800f2aa <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	f113 0f02 	cmn.w	r3, #2
 800f290:	d00a      	beq.n	800f2a8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800f292:	f107 0310 	add.w	r3, r7, #16
 800f296:	4618      	mov	r0, r3
 800f298:	f7fe fb1c 	bl	800d8d4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800f29c:	f107 0310 	add.w	r3, r7, #16
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7fe fa6b 	bl	800d77e <lfs_gstate_xor>
    }

    return 0;
 800f2a8:	2300      	movs	r3, #0
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3720      	adds	r7, #32
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	7ff0000c 	.word	0x7ff0000c
 800f2b8:	7ff00000 	.word	0x7ff00000

0800f2bc <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b08a      	sub	sp, #40	@ 0x28
 800f2c0:	af02      	add	r7, sp, #8
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	603b      	str	r3, [r7, #0]
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 800f2cc:	88fb      	ldrh	r3, [r7, #6]
 800f2ce:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d10b      	bne.n	800f2ee <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	3308      	adds	r3, #8
 800f2da:	4932      	ldr	r1, [pc, #200]	@ (800f3a4 <lfs_dir_getinfo+0xe8>)
 800f2dc:	461a      	mov	r2, r3
 800f2de:	460b      	mov	r3, r1
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	2202      	movs	r2, #2
 800f2e8:	701a      	strb	r2, [r3, #0]
        return 0;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	e055      	b.n	800f39a <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800f2ee:	88fb      	ldrh	r3, [r7, #6]
 800f2f0:	029a      	lsls	r2, r3, #10
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2f6:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800f2f8:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800f2fe:	9300      	str	r3, [sp, #0]
 800f300:	4613      	mov	r3, r2
 800f302:	4a29      	ldr	r2, [pc, #164]	@ (800f3a8 <lfs_dir_getinfo+0xec>)
 800f304:	68b9      	ldr	r1, [r7, #8]
 800f306:	68f8      	ldr	r0, [r7, #12]
 800f308:	f7fe fe84 	bl	800e014 <lfs_dir_get>
 800f30c:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800f30e:	69fb      	ldr	r3, [r7, #28]
 800f310:	2b00      	cmp	r3, #0
 800f312:	da01      	bge.n	800f318 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 800f314:	69fb      	ldr	r3, [r7, #28]
 800f316:	e040      	b.n	800f39a <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fe f9d4 	bl	800d6c8 <lfs_tag_type3>
 800f320:	4603      	mov	r3, r0
 800f322:	b2da      	uxtb	r2, r3
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800f328:	88fb      	ldrh	r3, [r7, #6]
 800f32a:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f32c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f330:	f043 0308 	orr.w	r3, r3, #8
 800f334:	f107 0214 	add.w	r2, r7, #20
 800f338:	9200      	str	r2, [sp, #0]
 800f33a:	4a1c      	ldr	r2, [pc, #112]	@ (800f3ac <lfs_dir_getinfo+0xf0>)
 800f33c:	68b9      	ldr	r1, [r7, #8]
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	f7fe fe68 	bl	800e014 <lfs_dir_get>
 800f344:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800f346:	69fb      	ldr	r3, [r7, #28]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	da01      	bge.n	800f350 <lfs_dir_getinfo+0x94>
        return (int)tag;
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	e024      	b.n	800f39a <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 800f350:	f107 0314 	add.w	r3, r7, #20
 800f354:	4618      	mov	r0, r3
 800f356:	f7fe fb2d 	bl	800d9b4 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fe f9b3 	bl	800d6c8 <lfs_tag_type3>
 800f362:	4603      	mov	r3, r0
 800f364:	461a      	mov	r2, r3
 800f366:	f240 2302 	movw	r3, #514	@ 0x202
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d103      	bne.n	800f376 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 800f36e:	69ba      	ldr	r2, [r7, #24]
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	605a      	str	r2, [r3, #4]
 800f374:	e010      	b.n	800f398 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	4618      	mov	r0, r3
 800f37a:	f7fe f9a5 	bl	800d6c8 <lfs_tag_type3>
 800f37e:	4603      	mov	r3, r0
 800f380:	461a      	mov	r2, r3
 800f382:	f240 2301 	movw	r3, #513	@ 0x201
 800f386:	429a      	cmp	r2, r3
 800f388:	d106      	bne.n	800f398 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fe f9d5 	bl	800d73c <lfs_tag_size>
 800f392:	4602      	mov	r2, r0
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	605a      	str	r2, [r3, #4]
    }

    return 0;
 800f398:	2300      	movs	r3, #0
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3720      	adds	r7, #32
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	080305e8 	.word	0x080305e8
 800f3a8:	780ffc00 	.word	0x780ffc00
 800f3ac:	700ffc00 	.word	0x700ffc00

0800f3b0 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800f3b0:	b590      	push	{r4, r7, lr}
 800f3b2:	b08f      	sub	sp, #60	@ 0x3c
 800f3b4:	af04      	add	r7, sp, #16
 800f3b6:	60f8      	str	r0, [r7, #12]
 800f3b8:	60b9      	str	r1, [r7, #8]
 800f3ba:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 800f3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3cc:	689c      	ldr	r4, [r3, #8]
 800f3ce:	68b8      	ldr	r0, [r7, #8]
 800f3d0:	f7fe f9b4 	bl	800d73c <lfs_tag_size>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f7fd fc2c 	bl	800cc36 <lfs_min>
 800f3de:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800f3e0:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	69fa      	ldr	r2, [r7, #28]
 800f3e8:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800f3ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f3ec:	6849      	ldr	r1, [r1, #4]
 800f3ee:	69b8      	ldr	r0, [r7, #24]
 800f3f0:	9003      	str	r0, [sp, #12]
 800f3f2:	9102      	str	r1, [sp, #8]
 800f3f4:	9201      	str	r2, [sp, #4]
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	4622      	mov	r2, r4
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	6a38      	ldr	r0, [r7, #32]
 800f400:	f7fd fe40 	bl	800d084 <lfs_bd_cmp>
 800f404:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d001      	beq.n	800f410 <lfs_dir_find_match+0x60>
        return res;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	e014      	b.n	800f43a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800f410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f412:	689c      	ldr	r4, [r3, #8]
 800f414:	68b8      	ldr	r0, [r7, #8]
 800f416:	f7fe f991 	bl	800d73c <lfs_tag_size>
 800f41a:	4603      	mov	r3, r0
 800f41c:	429c      	cmp	r4, r3
 800f41e:	d00b      	beq.n	800f438 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800f420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f422:	689c      	ldr	r4, [r3, #8]
 800f424:	68b8      	ldr	r0, [r7, #8]
 800f426:	f7fe f989 	bl	800d73c <lfs_tag_size>
 800f42a:	4603      	mov	r3, r0
 800f42c:	429c      	cmp	r4, r3
 800f42e:	d201      	bcs.n	800f434 <lfs_dir_find_match+0x84>
 800f430:	2301      	movs	r3, #1
 800f432:	e002      	b.n	800f43a <lfs_dir_find_match+0x8a>
 800f434:	2302      	movs	r3, #2
 800f436:	e000      	b.n	800f43a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800f438:	2300      	movs	r3, #0
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	372c      	adds	r7, #44	@ 0x2c
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd90      	pop	{r4, r7, pc}
	...

0800f444 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800f444:	b590      	push	{r4, r7, lr}
 800f446:	b093      	sub	sp, #76	@ 0x4c
 800f448:	af04      	add	r7, sp, #16
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
 800f450:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d003      	beq.n	800f466 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800f464:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800f466:	4b6e      	ldr	r3, [pc, #440]	@ (800f620 <lfs_dir_find+0x1dc>)
 800f468:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	6a1a      	ldr	r2, [r3, #32]
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800f47a:	496a      	ldr	r1, [pc, #424]	@ (800f624 <lfs_dir_find+0x1e0>)
 800f47c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f47e:	f016 fddb 	bl	8026038 <strspn>
 800f482:	4602      	mov	r2, r0
 800f484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f486:	4413      	add	r3, r2
 800f488:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800f48a:	4966      	ldr	r1, [pc, #408]	@ (800f624 <lfs_dir_find+0x1e0>)
 800f48c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f48e:	f016 fd87 	bl	8025fa0 <strcspn>
 800f492:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800f494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f496:	2b01      	cmp	r3, #1
 800f498:	d105      	bne.n	800f4a6 <lfs_dir_find+0x62>
 800f49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f49c:	781a      	ldrb	r2, [r3, #0]
 800f49e:	4b62      	ldr	r3, [pc, #392]	@ (800f628 <lfs_dir_find+0x1e4>)
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d00a      	beq.n	800f4bc <lfs_dir_find+0x78>
 800f4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4a8:	2b02      	cmp	r3, #2
 800f4aa:	d10c      	bne.n	800f4c6 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800f4ac:	2202      	movs	r2, #2
 800f4ae:	495f      	ldr	r1, [pc, #380]	@ (800f62c <lfs_dir_find+0x1e8>)
 800f4b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f4b2:	f016 fcbd 	bl	8025e30 <memcmp>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d104      	bne.n	800f4c6 <lfs_dir_find+0x82>
            name += namelen;
 800f4bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c0:	4413      	add	r3, r2
 800f4c2:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 800f4c4:	e7d9      	b.n	800f47a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800f4c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ca:	4413      	add	r3, r2
 800f4cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800f4d2:	4954      	ldr	r1, [pc, #336]	@ (800f624 <lfs_dir_find+0x1e0>)
 800f4d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4d6:	f016 fdaf 	bl	8026038 <strspn>
 800f4da:	4602      	mov	r2, r0
 800f4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4de:	4413      	add	r3, r2
 800f4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 800f4e2:	4950      	ldr	r1, [pc, #320]	@ (800f624 <lfs_dir_find+0x1e0>)
 800f4e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4e6:	f016 fd5b 	bl	8025fa0 <strcspn>
 800f4ea:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800f4ec:	6a3b      	ldr	r3, [r7, #32]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d01d      	beq.n	800f52e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800f4f2:	6a3b      	ldr	r3, [r7, #32]
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d112      	bne.n	800f51e <lfs_dir_find+0xda>
 800f4f8:	2202      	movs	r2, #2
 800f4fa:	494c      	ldr	r1, [pc, #304]	@ (800f62c <lfs_dir_find+0x1e8>)
 800f4fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4fe:	f016 fc97 	bl	8025e30 <memcmp>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10a      	bne.n	800f51e <lfs_dir_find+0xda>
                depth -= 1;
 800f508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f50a:	3b01      	subs	r3, #1
 800f50c:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 800f50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f510:	2b00      	cmp	r3, #0
 800f512:	d107      	bne.n	800f524 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800f514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	4413      	add	r3, r2
 800f51a:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 800f51c:	e7ad      	b.n	800f47a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800f51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f520:	3301      	adds	r3, #1
 800f522:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 800f524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f526:	6a3b      	ldr	r3, [r7, #32]
 800f528:	4413      	add	r3, r2
 800f52a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 800f52c:	e7d1      	b.n	800f4d2 <lfs_dir_find+0x8e>
                break;
 800f52e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800f530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d101      	bne.n	800f53c <lfs_dir_find+0xf8>
            return tag;
 800f538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f53a:	e06c      	b.n	800f616 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f540:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800f542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f544:	4618      	mov	r0, r3
 800f546:	f7fe f8bf 	bl	800d6c8 <lfs_tag_type3>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b02      	cmp	r3, #2
 800f54e:	d002      	beq.n	800f556 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800f550:	f06f 0313 	mvn.w	r3, #19
 800f554:	e05f      	b.n	800f616 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800f556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f558:	4618      	mov	r0, r3
 800f55a:	f7fe f8df 	bl	800d71c <lfs_tag_id>
 800f55e:	4603      	mov	r3, r0
 800f560:	461a      	mov	r2, r3
 800f562:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800f566:	429a      	cmp	r2, r3
 800f568:	d01c      	beq.n	800f5a4 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800f56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fe f8d5 	bl	800d71c <lfs_tag_id>
 800f572:	4603      	mov	r3, r0
 800f574:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f576:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f57a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800f57e:	68ba      	ldr	r2, [r7, #8]
 800f580:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f582:	9200      	str	r2, [sp, #0]
 800f584:	4a2a      	ldr	r2, [pc, #168]	@ (800f630 <lfs_dir_find+0x1ec>)
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f7fe fd43 	bl	800e014 <lfs_dir_get>
 800f58e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	2b00      	cmp	r3, #0
 800f594:	da01      	bge.n	800f59a <lfs_dir_find+0x156>
                return res;
 800f596:	69fb      	ldr	r3, [r7, #28]
 800f598:	e03d      	b.n	800f616 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	3318      	adds	r3, #24
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fe f81d 	bl	800d5de <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800f5aa:	212f      	movs	r1, #47	@ 0x2f
 800f5ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f5ae:	f016 fcea 	bl	8025f86 <strchr>
 800f5b2:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d101      	bne.n	800f5bc <lfs_dir_find+0x178>
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	e000      	b.n	800f5be <lfs_dir_find+0x17a>
 800f5bc:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800f5be:	68fa      	ldr	r2, [r7, #12]
 800f5c0:	613a      	str	r2, [r7, #16]
 800f5c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5c4:	617a      	str	r2, [r7, #20]
 800f5c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f5c8:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f5ca:	f107 0210 	add.w	r2, r7, #16
 800f5ce:	9203      	str	r2, [sp, #12]
 800f5d0:	4a18      	ldr	r2, [pc, #96]	@ (800f634 <lfs_dir_find+0x1f0>)
 800f5d2:	9202      	str	r2, [sp, #8]
 800f5d4:	9301      	str	r3, [sp, #4]
 800f5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d8:	9300      	str	r3, [sp, #0]
 800f5da:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 800f5de:	4622      	mov	r2, r4
 800f5e0:	68b9      	ldr	r1, [r7, #8]
 800f5e2:	68f8      	ldr	r0, [r7, #12]
 800f5e4:	f7ff fa4c 	bl	800ea80 <lfs_dir_fetchmatch>
 800f5e8:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	da01      	bge.n	800f5f4 <lfs_dir_find+0x1b0>
                return tag;
 800f5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f2:	e010      	b.n	800f616 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800f5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d004      	beq.n	800f604 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800f5fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5fe:	4413      	add	r3, r2
 800f600:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 800f602:	e73a      	b.n	800f47a <lfs_dir_find+0x36>
            if (!dir->split) {
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	7ddb      	ldrb	r3, [r3, #23]
 800f608:	f083 0301 	eor.w	r3, r3, #1
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d0c8      	beq.n	800f5a4 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800f612:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f616:	4618      	mov	r0, r3
 800f618:	373c      	adds	r7, #60	@ 0x3c
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd90      	pop	{r4, r7, pc}
 800f61e:	bf00      	nop
 800f620:	002ffc00 	.word	0x002ffc00
 800f624:	080305e8 	.word	0x080305e8
 800f628:	080305ec 	.word	0x080305ec
 800f62c:	080305f0 	.word	0x080305f0
 800f630:	700ffc00 	.word	0x700ffc00
 800f634:	0800f3b1 	.word	0x0800f3b1

0800f638 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800f638:	b590      	push	{r4, r7, lr}
 800f63a:	b08b      	sub	sp, #44	@ 0x2c
 800f63c:	af04      	add	r7, sp, #16
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]
 800f644:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f103 0010 	add.w	r0, r3, #16
 800f64c:	68fc      	ldr	r4, [r7, #12]
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	6852      	ldr	r2, [r2, #4]
 800f656:	6839      	ldr	r1, [r7, #0]
 800f658:	9103      	str	r1, [sp, #12]
 800f65a:	6879      	ldr	r1, [r7, #4]
 800f65c:	9102      	str	r1, [sp, #8]
 800f65e:	9201      	str	r2, [sp, #4]
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	2300      	movs	r3, #0
 800f664:	4622      	mov	r2, r4
 800f666:	4601      	mov	r1, r0
 800f668:	68f8      	ldr	r0, [r7, #12]
 800f66a:	f7fd fe51 	bl	800d310 <lfs_bd_prog>
 800f66e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d001      	beq.n	800f67a <lfs_dir_commitprog+0x42>
        return err;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	e010      	b.n	800f69c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	683a      	ldr	r2, [r7, #0]
 800f680:	6879      	ldr	r1, [r7, #4]
 800f682:	4618      	mov	r0, r3
 800f684:	f005 f9ce 	bl	8014a24 <lfs_crc>
 800f688:	4602      	mov	r2, r0
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	685a      	ldr	r2, [r3, #4]
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	441a      	add	r2, r3
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	605a      	str	r2, [r3, #4]
    return 0;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	371c      	adds	r7, #28
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd90      	pop	{r4, r7, pc}

0800f6a4 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800f6a4:	b590      	push	{r4, r7, lr}
 800f6a6:	b08f      	sub	sp, #60	@ 0x3c
 800f6a8:	af04      	add	r7, sp, #16
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	607a      	str	r2, [r7, #4]
 800f6b0:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f7fe f84f 	bl	800d756 <lfs_tag_dsize>
 800f6b8:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	685a      	ldr	r2, [r3, #4]
 800f6be:	6a3b      	ldr	r3, [r7, #32]
 800f6c0:	441a      	add	r2, r3
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	695b      	ldr	r3, [r3, #20]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d902      	bls.n	800f6d0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800f6ca:	f06f 031b 	mvn.w	r3, #27
 800f6ce:	e065      	b.n	800f79c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	689b      	ldr	r3, [r3, #8]
 800f6da:	4053      	eors	r3, r2
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7fd fb3d 	bl	800cd5c <lfs_tobe32>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800f6e6:	f107 0214 	add.w	r2, r7, #20
 800f6ea:	2304      	movs	r3, #4
 800f6ec:	68b9      	ldr	r1, [r7, #8]
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	f7ff ffa2 	bl	800f638 <lfs_dir_commitprog>
 800f6f4:	61f8      	str	r0, [r7, #28]
    if (err) {
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d001      	beq.n	800f700 <lfs_dir_commitattr+0x5c>
        return err;
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	e04d      	b.n	800f79c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	db0c      	blt.n	800f720 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800f706:	6a3b      	ldr	r3, [r7, #32]
 800f708:	3b04      	subs	r3, #4
 800f70a:	683a      	ldr	r2, [r7, #0]
 800f70c:	68b9      	ldr	r1, [r7, #8]
 800f70e:	68f8      	ldr	r0, [r7, #12]
 800f710:	f7ff ff92 	bl	800f638 <lfs_dir_commitprog>
 800f714:	61f8      	str	r0, [r7, #28]
        if (err) {
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d039      	beq.n	800f790 <lfs_dir_commitattr+0xec>
            return err;
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	e03d      	b.n	800f79c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800f724:	2300      	movs	r3, #0
 800f726:	627b      	str	r3, [r7, #36]	@ 0x24
 800f728:	e02d      	b.n	800f786 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800f72a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800f72c:	6a3a      	ldr	r2, [r7, #32]
 800f72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f730:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800f732:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	69ba      	ldr	r2, [r7, #24]
 800f73a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800f73c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f73e:	440a      	add	r2, r1
 800f740:	2101      	movs	r1, #1
 800f742:	9103      	str	r1, [sp, #12]
 800f744:	f107 0113 	add.w	r1, r7, #19
 800f748:	9102      	str	r1, [sp, #8]
 800f74a:	9201      	str	r2, [sp, #4]
 800f74c:	9300      	str	r3, [sp, #0]
 800f74e:	4623      	mov	r3, r4
 800f750:	4602      	mov	r2, r0
 800f752:	2100      	movs	r1, #0
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f7fd fb49 	bl	800cdec <lfs_bd_read>
 800f75a:	61f8      	str	r0, [r7, #28]
            if (err) {
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d001      	beq.n	800f766 <lfs_dir_commitattr+0xc2>
                return err;
 800f762:	69fb      	ldr	r3, [r7, #28]
 800f764:	e01a      	b.n	800f79c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800f766:	f107 0213 	add.w	r2, r7, #19
 800f76a:	2301      	movs	r3, #1
 800f76c:	68b9      	ldr	r1, [r7, #8]
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	f7ff ff62 	bl	800f638 <lfs_dir_commitprog>
 800f774:	61f8      	str	r0, [r7, #28]
            if (err) {
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d001      	beq.n	800f780 <lfs_dir_commitattr+0xdc>
                return err;
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	e00d      	b.n	800f79c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800f780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f782:	3301      	adds	r3, #1
 800f784:	627b      	str	r3, [r7, #36]	@ 0x24
 800f786:	6a3b      	ldr	r3, [r7, #32]
 800f788:	3b04      	subs	r3, #4
 800f78a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d3cc      	bcc.n	800f72a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	609a      	str	r2, [r3, #8]
    return 0;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	372c      	adds	r7, #44	@ 0x2c
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd90      	pop	{r4, r7, pc}

0800f7a4 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800f7a4:	b590      	push	{r4, r7, lr}
 800f7a6:	b097      	sub	sp, #92	@ 0x5c
 800f7a8:	af04      	add	r7, sp, #16
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800f7b2:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    const lfs_off_t end = lfs_alignup(
 800f7bc:	4619      	mov	r1, r3
 800f7be:	4610      	mov	r0, r2
 800f7c0:	f7fd fa39 	bl	800cc36 <lfs_min>
 800f7c4:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7ca:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	4610      	mov	r0, r2
 800f7d0:	f7fd fa56 	bl	800cc80 <lfs_alignup>
 800f7d4:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800f7de:	e0fe      	b.n	800f9de <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	3b04      	subs	r3, #4
 800f7ea:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fd fa21 	bl	800cc36 <lfs_min>
 800f7f4:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	4413      	add	r3, r2
        lfs_off_t noff = (
 800f7fc:	3304      	adds	r3, #4
 800f7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 800f800:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f804:	429a      	cmp	r2, r3
 800f806:	d206      	bcs.n	800f816 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 800f808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f80a:	3b14      	subs	r3, #20
 800f80c:	4619      	mov	r1, r3
 800f80e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f810:	f7fd fa11 	bl	800cc36 <lfs_min>
 800f814:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 800f816:	23ff      	movs	r3, #255	@ 0xff
 800f818:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800f81a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81e:	429a      	cmp	r2, r3
 800f820:	d35f      	bcc.n	800f8e2 <lfs_dir_commitcrc+0x13e>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f82c:	6a1b      	ldr	r3, [r3, #32]
 800f82e:	1ad3      	subs	r3, r2, r3
 800f830:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f832:	429a      	cmp	r2, r3
 800f834:	d855      	bhi.n	800f8e2 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800f836:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f83c:	6a18      	ldr	r0, [r3, #32]
            int err = lfs_bd_read(lfs,
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	2201      	movs	r2, #1
 800f844:	9203      	str	r2, [sp, #12]
 800f846:	f107 021b 	add.w	r2, r7, #27
 800f84a:	9202      	str	r2, [sp, #8]
 800f84c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f84e:	9201      	str	r2, [sp, #4]
 800f850:	9300      	str	r3, [sp, #0]
 800f852:	4603      	mov	r3, r0
 800f854:	460a      	mov	r2, r1
 800f856:	2100      	movs	r1, #0
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f7fd fac7 	bl	800cdec <lfs_bd_read>
 800f85e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 800f860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f862:	2b00      	cmp	r3, #0
 800f864:	d005      	beq.n	800f872 <lfs_dir_commitcrc+0xce>
 800f866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f868:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f86c:	d001      	beq.n	800f872 <lfs_dir_commitcrc+0xce>
                return err;
 800f86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f870:	e101      	b.n	800fa76 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f876:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 800f878:	60bb      	str	r3, [r7, #8]
 800f87a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f87e:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 800f880:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f886:	6a1c      	ldr	r4, [r3, #32]
                err = lfs_bd_crc(lfs,
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	68ba      	ldr	r2, [r7, #8]
 800f88e:	f107 0108 	add.w	r1, r7, #8
 800f892:	3104      	adds	r1, #4
 800f894:	9103      	str	r1, [sp, #12]
 800f896:	9202      	str	r2, [sp, #8]
 800f898:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f89a:	9201      	str	r2, [sp, #4]
 800f89c:	9300      	str	r3, [sp, #0]
 800f89e:	4623      	mov	r3, r4
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f7fd fc3e 	bl	800d126 <lfs_bd_crc>
 800f8aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 800f8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d005      	beq.n	800f8be <lfs_dir_commitcrc+0x11a>
 800f8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8b4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f8b8:	d001      	beq.n	800f8be <lfs_dir_commitcrc+0x11a>
                    return err;
 800f8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8bc:	e0db      	b.n	800fa76 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 800f8be:	f107 0308 	add.w	r3, r7, #8
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7fe f85e 	bl	800d984 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 800f8c8:	f107 0308 	add.w	r3, r7, #8
 800f8cc:	4a6c      	ldr	r2, [pc, #432]	@ (800fa80 <lfs_dir_commitcrc+0x2dc>)
 800f8ce:	6839      	ldr	r1, [r7, #0]
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f7ff fee7 	bl	800f6a4 <lfs_dir_commitattr>
 800f8d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 800f8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d001      	beq.n	800f8e2 <lfs_dir_commitcrc+0x13e>
                    return err;
 800f8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8e0:	e0c9      	b.n	800fa76 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 800f8e2:	7efb      	ldrb	r3, [r7, #27]
 800f8e4:	43db      	mvns	r3, r3
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	09db      	lsrs	r3, r3, #7
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f8f0:	051a      	lsls	r2, r3, #20
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f8f8:	1acb      	subs	r3, r1, r3
 800f8fa:	3b04      	subs	r3, #4
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 800f902:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800f906:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	689a      	ldr	r2, [r3, #8]
 800f90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f90e:	4053      	eors	r3, r2
 800f910:	4618      	mov	r0, r3
 800f912:	f7fd fa23 	bl	800cd5c <lfs_tobe32>
 800f916:	4603      	mov	r3, r0
 800f918:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	f107 0110 	add.w	r1, r7, #16
 800f922:	2204      	movs	r2, #4
 800f924:	4618      	mov	r0, r3
 800f926:	f005 f87d 	bl	8014a24 <lfs_crc>
 800f92a:	4602      	mov	r2, r0
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	4618      	mov	r0, r3
 800f936:	f7fd f9f9 	bl	800cd2c <lfs_tole32>
 800f93a:	4603      	mov	r3, r0
 800f93c:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f103 0010 	add.w	r0, r3, #16
 800f944:	687c      	ldr	r4, [r7, #4]
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	683a      	ldr	r2, [r7, #0]
 800f94c:	6852      	ldr	r2, [r2, #4]
 800f94e:	2108      	movs	r1, #8
 800f950:	9103      	str	r1, [sp, #12]
 800f952:	f107 0110 	add.w	r1, r7, #16
 800f956:	9102      	str	r1, [sp, #8]
 800f958:	9201      	str	r2, [sp, #4]
 800f95a:	9300      	str	r3, [sp, #0]
 800f95c:	2300      	movs	r3, #0
 800f95e:	4622      	mov	r2, r4
 800f960:	4601      	mov	r1, r0
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f7fd fcd4 	bl	800d310 <lfs_bd_prog>
 800f968:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800f96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d001      	beq.n	800f974 <lfs_dir_commitcrc+0x1d0>
            return err;
 800f970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f972:	e080      	b.n	800fa76 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800f974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f976:	2b00      	cmp	r3, #0
 800f978:	d106      	bne.n	800f988 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	3304      	adds	r3, #4
 800f980:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	68db      	ldr	r3, [r3, #12]
 800f986:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f98c:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 800f98e:	7efb      	ldrb	r3, [r7, #27]
 800f990:	43db      	mvns	r3, r3
 800f992:	061b      	lsls	r3, r3, #24
 800f994:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800f998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f99a:	405a      	eors	r2, r3
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9a6:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800f9a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d208      	bcs.n	800f9c2 <lfs_dir_commitcrc+0x21e>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	695a      	ldr	r2, [r3, #20]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f9b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9ba:	4413      	add	r3, r2
 800f9bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d30d      	bcc.n	800f9de <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f103 0110 	add.w	r1, r3, #16
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7fd fc6b 	bl	800d2a8 <lfs_bd_sync>
 800f9d2:	6238      	str	r0, [r7, #32]
            if (err) {
 800f9d4:	6a3b      	ldr	r3, [r7, #32]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d001      	beq.n	800f9de <lfs_dir_commitcrc+0x23a>
                return err;
 800f9da:	6a3b      	ldr	r3, [r7, #32]
 800f9dc:	e04b      	b.n	800fa76 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	f63f aefb 	bhi.w	800f7e0 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	691b      	ldr	r3, [r3, #16]
 800f9ee:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 800f9f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f9f4:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9fa:	1d1c      	adds	r4, r3, #4
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa04:	1a8a      	subs	r2, r1, r2
 800fa06:	f107 011c 	add.w	r1, r7, #28
 800fa0a:	9103      	str	r1, [sp, #12]
 800fa0c:	9202      	str	r2, [sp, #8]
 800fa0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa10:	9201      	str	r2, [sp, #4]
 800fa12:	9300      	str	r3, [sp, #0]
 800fa14:	4623      	mov	r3, r4
 800fa16:	4602      	mov	r2, r0
 800fa18:	2100      	movs	r1, #0
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7fd fb83 	bl	800d126 <lfs_bd_crc>
 800fa20:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 800fa22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d001      	beq.n	800fa2c <lfs_dir_commitcrc+0x288>
        return err;
 800fa28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa2a:	e024      	b.n	800fa76 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d002      	beq.n	800fa3a <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 800fa34:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800fa38:	e01d      	b.n	800fa76 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800fa3a:	6879      	ldr	r1, [r7, #4]
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f107 021c 	add.w	r2, r7, #28
 800fa44:	9203      	str	r2, [sp, #12]
 800fa46:	2204      	movs	r2, #4
 800fa48:	9202      	str	r2, [sp, #8]
 800fa4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fa4c:	9201      	str	r2, [sp, #4]
 800fa4e:	9300      	str	r3, [sp, #0]
 800fa50:	2304      	movs	r3, #4
 800fa52:	460a      	mov	r2, r1
 800fa54:	2100      	movs	r1, #0
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7fd fb65 	bl	800d126 <lfs_bd_crc>
 800fa5c:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800fa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d001      	beq.n	800fa68 <lfs_dir_commitcrc+0x2c4>
        return err;
 800fa64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa66:	e006      	b.n	800fa76 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d002      	beq.n	800fa74 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 800fa6e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800fa72:	e000      	b.n	800fa76 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800fa74:	2300      	movs	r3, #0
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	374c      	adds	r7, #76	@ 0x4c
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd90      	pop	{r4, r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	5ffffc08 	.word	0x5ffffc08

0800fa84 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b08a      	sub	sp, #40	@ 0x28
 800fa88:	af04      	add	r7, sp, #16
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800fa8e:	2300      	movs	r3, #0
 800fa90:	617b      	str	r3, [r7, #20]
 800fa92:	e016      	b.n	800fac2 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	3301      	adds	r3, #1
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f003 0301 	and.w	r3, r3, #1
 800fa9e:	bfb8      	it	lt
 800faa0:	425b      	neglt	r3, r3
 800faa2:	009b      	lsls	r3, r3, #2
 800faa4:	683a      	ldr	r2, [r7, #0]
 800faa6:	4413      	add	r3, r2
 800faa8:	4619      	mov	r1, r3
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7fe f934 	bl	800dd18 <lfs_alloc>
 800fab0:	60f8      	str	r0, [r7, #12]
        if (err) {
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d001      	beq.n	800fabc <lfs_dir_alloc+0x38>
            return err;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	e058      	b.n	800fb6e <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	3301      	adds	r3, #1
 800fac0:	617b      	str	r3, [r7, #20]
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	dde5      	ble.n	800fa94 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	2200      	movs	r2, #0
 800facc:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800face:	6879      	ldr	r1, [r7, #4]
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800fad4:	683a      	ldr	r2, [r7, #0]
 800fad6:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800fad8:	2004      	movs	r0, #4
 800fada:	9003      	str	r0, [sp, #12]
 800fadc:	9202      	str	r2, [sp, #8]
 800fade:	2200      	movs	r2, #0
 800fae0:	9201      	str	r2, [sp, #4]
 800fae2:	9300      	str	r3, [sp, #0]
 800fae4:	2304      	movs	r3, #4
 800fae6:	460a      	mov	r2, r1
 800fae8:	2100      	movs	r1, #0
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7fd f97e 	bl	800cdec <lfs_bd_read>
 800faf0:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	689b      	ldr	r3, [r3, #8]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fd f90d 	bl	800cd16 <lfs_fromle32>
 800fafc:	4602      	mov	r2, r0
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d005      	beq.n	800fb14 <lfs_dir_alloc+0x90>
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fb0e:	d001      	beq.n	800fb14 <lfs_dir_alloc+0x90>
        return err;
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	e02c      	b.n	800fb6e <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	dd0e      	ble.n	800fb3c <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	689a      	ldr	r2, [r3, #8]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb28:	3301      	adds	r3, #1
 800fb2a:	f043 0301 	orr.w	r3, r3, #1
 800fb2e:	4619      	mov	r1, r3
 800fb30:	4610      	mov	r0, r2
 800fb32:	f7fd f8a5 	bl	800cc80 <lfs_alignup>
 800fb36:	4602      	mov	r2, r0
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	2204      	movs	r2, #4
 800fb40:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb48:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb56:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb5e:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	2200      	movs	r2, #0
 800fb64:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800fb6c:	2300      	movs	r3, #0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3718      	adds	r7, #24
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
	...

0800fb78 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b08a      	sub	sp, #40	@ 0x28
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	3348      	adds	r3, #72	@ 0x48
 800fb88:	461a      	mov	r2, r3
 800fb8a:	6879      	ldr	r1, [r7, #4]
 800fb8c:	68f8      	ldr	r0, [r7, #12]
 800fb8e:	f7ff fb63 	bl	800f258 <lfs_dir_getgstate>
 800fb92:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 800fb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d001      	beq.n	800fb9e <lfs_dir_drop+0x26>
        return err;
 800fb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb9c:	e022      	b.n	800fbe4 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	3318      	adds	r3, #24
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7fd fd35 	bl	800d612 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	7ddb      	ldrb	r3, [r3, #23]
 800fbac:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800fbb0:	051a      	lsls	r2, r3, #20
 800fbb2:	4b0e      	ldr	r3, [pc, #56]	@ (800fbec <lfs_dir_drop+0x74>)
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	61fb      	str	r3, [r7, #28]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	3318      	adds	r3, #24
 800fbbc:	623b      	str	r3, [r7, #32]
 800fbbe:	f107 021c 	add.w	r2, r7, #28
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	68b9      	ldr	r1, [r7, #8]
 800fbc6:	68f8      	ldr	r0, [r7, #12]
 800fbc8:	f001 f984 	bl	8010ed4 <lfs_dir_commit>
 800fbcc:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	3318      	adds	r3, #24
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7fd fd03 	bl	800d5de <lfs_pair_fromle32>
    if (err) {
 800fbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d001      	beq.n	800fbe2 <lfs_dir_drop+0x6a>
        return err;
 800fbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe0:	e000      	b.n	800fbe4 <lfs_dir_drop+0x6c>
    }

    return 0;
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3728      	adds	r7, #40	@ 0x28
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	000ffc08 	.word	0x000ffc08

0800fbf0 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b092      	sub	sp, #72	@ 0x48
 800fbf4:	af04      	add	r7, sp, #16
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	607a      	str	r2, [r7, #4]
 800fbfc:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800fbfe:	f107 0310 	add.w	r3, r7, #16
 800fc02:	4619      	mov	r1, r3
 800fc04:	68f8      	ldr	r0, [r7, #12]
 800fc06:	f7ff ff3d 	bl	800fa84 <lfs_dir_alloc>
 800fc0a:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 800fc0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d001      	beq.n	800fc16 <lfs_dir_split+0x26>
        return err;
 800fc12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc14:	e03c      	b.n	800fc90 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	7ddb      	ldrb	r3, [r3, #23]
 800fc1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	699b      	ldr	r3, [r3, #24]
 800fc22:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	69db      	ldr	r3, [r3, #28]
 800fc28:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800fc2a:	f107 0110 	add.w	r1, r7, #16
 800fc2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800fc32:	9302      	str	r3, [sp, #8]
 800fc34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fc38:	9301      	str	r3, [sp, #4]
 800fc3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc3c:	9300      	str	r3, [sp, #0]
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	68f8      	ldr	r0, [r7, #12]
 800fc44:	f000 f87a 	bl	800fd3c <lfs_dir_compact>
 800fc48:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 800fc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	da01      	bge.n	800fc54 <lfs_dir_split+0x64>
        return res;
 800fc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc52:	e01d      	b.n	800fc90 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800fc54:	693a      	ldr	r2, [r7, #16]
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800fc5a:	697a      	ldr	r2, [r7, #20]
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	2201      	movs	r2, #1
 800fc64:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800fc66:	68ba      	ldr	r2, [r7, #8]
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	3320      	adds	r3, #32
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	4610      	mov	r0, r2
 800fc70:	f7fd fc5e 	bl	800d530 <lfs_pair_cmp>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d109      	bne.n	800fc8e <lfs_dir_split+0x9e>
 800fc7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d105      	bne.n	800fc8e <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800fc82:	693a      	ldr	r2, [r7, #16]
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800fc88:	697a      	ldr	r2, [r7, #20]
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3738      	adds	r7, #56	@ 0x38
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b086      	sub	sp, #24
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800fca8:	68b8      	ldr	r0, [r7, #8]
 800fcaa:	f7fd fd54 	bl	800d756 <lfs_tag_dsize>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	441a      	add	r2, r3
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	601a      	str	r2, [r3, #0]
    return 0;
 800fcba:	2300      	movs	r3, #0
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3718      	adds	r7, #24
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	6818      	ldr	r0, [r3, #0]
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	6859      	ldr	r1, [r3, #4]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	68ba      	ldr	r2, [r7, #8]
 800fce0:	f7ff fce0 	bl	800f6a4 <lfs_dir_commitattr>
 800fce4:	4603      	mov	r3, r0
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3718      	adds	r7, #24
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800fcee:	b480      	push	{r7}
 800fcf0:	b083      	sub	sp, #12
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
 800fcf6:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fcfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	dd11      	ble.n	800fd26 <lfs_dir_needsrelocation+0x38>
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	689b      	ldr	r3, [r3, #8]
 800fd06:	3301      	adds	r3, #1
 800fd08:	687a      	ldr	r2, [r7, #4]
 800fd0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800fd0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800fd0e:	3201      	adds	r2, #1
 800fd10:	f042 0201 	orr.w	r2, r2, #1
 800fd14:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd18:	fb01 f202 	mul.w	r2, r1, r2
 800fd1c:	1a9b      	subs	r3, r3, r2
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d101      	bne.n	800fd26 <lfs_dir_needsrelocation+0x38>
 800fd22:	2301      	movs	r3, #1
 800fd24:	e000      	b.n	800fd28 <lfs_dir_needsrelocation+0x3a>
 800fd26:	2300      	movs	r3, #0
 800fd28:	f003 0301 	and.w	r3, r3, #1
 800fd2c:	b2db      	uxtb	r3, r3
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	370c      	adds	r7, #12
 800fd32:	46bd      	mov	sp, r7
 800fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd38:	4770      	bx	lr
	...

0800fd3c <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b0a4      	sub	sp, #144	@ 0x90
 800fd40:	af0a      	add	r7, sp, #40	@ 0x28
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
 800fd48:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 800fd50:	68b9      	ldr	r1, [r7, #8]
 800fd52:	68f8      	ldr	r0, [r7, #12]
 800fd54:	f7ff ffcb 	bl	800fcee <lfs_dir_needsrelocation>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	689b      	ldr	r3, [r3, #8]
 800fd62:	1c5a      	adds	r2, r3, #1
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800fd68:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d00e      	beq.n	800fd8e <lfs_dir_compact+0x52>
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	2200      	movs	r2, #0
 800fd74:	657a      	str	r2, [r7, #84]	@ 0x54
 800fd76:	2201      	movs	r2, #1
 800fd78:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fd7a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800fd7e:	4611      	mov	r1, r2
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fd fbd5 	bl	800d530 <lfs_pair_cmp>
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	f040 8155 	bne.w	8010038 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800fd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fd94:	2300      	movs	r3, #0
 800fd96:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fda2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fda4:	2300      	movs	r3, #0
 800fda6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fdac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d004      	beq.n	800fdbc <lfs_dir_compact+0x80>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fdb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdb8:	3b08      	subs	r3, #8
 800fdba:	e003      	b.n	800fdc4 <lfs_dir_compact+0x88>
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fdc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdc2:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800fdc4:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	4619      	mov	r1, r3
 800fdcc:	68f8      	ldr	r0, [r7, #12]
 800fdce:	f7fd fb4d 	bl	800d46c <lfs_bd_erase>
 800fdd2:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800fdd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d006      	beq.n	800fde8 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800fdda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fddc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fde0:	f000 812c 	beq.w	801003c <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800fde4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fde6:	e188      	b.n	80100fa <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7fc ff9d 	bl	800cd2c <lfs_tole32>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800fdfe:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800fe02:	2304      	movs	r3, #4
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f7ff fc17 	bl	800f638 <lfs_dir_commitprog>
 800fe0a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	689b      	ldr	r3, [r3, #8]
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7fc ff80 	bl	800cd16 <lfs_fromle32>
 800fe16:	4602      	mov	r2, r0
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	609a      	str	r2, [r3, #8]
            if (err) {
 800fe1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d006      	beq.n	800fe30 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800fe22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe24:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fe28:	f000 810a 	beq.w	8010040 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 800fe2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe2e:	e164      	b.n	80100fa <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800fe30:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800fe34:	425b      	negs	r3, r3
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800fe3a:	68fa      	ldr	r2, [r7, #12]
 800fe3c:	637a      	str	r2, [r7, #52]	@ 0x34
 800fe3e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800fe42:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 800fe44:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fe48:	9208      	str	r2, [sp, #32]
 800fe4a:	4aae      	ldr	r2, [pc, #696]	@ (8010104 <lfs_dir_compact+0x3c8>)
 800fe4c:	9207      	str	r2, [sp, #28]
 800fe4e:	9306      	str	r3, [sp, #24]
 800fe50:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800fe54:	9305      	str	r3, [sp, #20]
 800fe56:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800fe5a:	9304      	str	r3, [sp, #16]
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	9303      	str	r3, [sp, #12]
 800fe60:	4ba9      	ldr	r3, [pc, #676]	@ (8010108 <lfs_dir_compact+0x3cc>)
 800fe62:	9302      	str	r3, [sp, #8]
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	9301      	str	r3, [sp, #4]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	9300      	str	r3, [sp, #0]
 800fe6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fe70:	2200      	movs	r2, #0
 800fe72:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f7fe fa1f 	bl	800e2b8 <lfs_dir_traverse>
 800fe7a:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 800fe7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d006      	beq.n	800fe90 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 800fe82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe84:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fe88:	f000 80dc 	beq.w	8010044 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 800fe8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe8e:	e134      	b.n	80100fa <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	3318      	adds	r3, #24
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7fd fb30 	bl	800d4fa <lfs_pair_isnull>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	f083 0301 	eor.w	r3, r3, #1
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d022      	beq.n	800feec <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	3318      	adds	r3, #24
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fd fbb1 	bl	800d612 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	7ddb      	ldrb	r3, [r3, #23]
 800feb4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800feb8:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800feba:	4a94      	ldr	r2, [pc, #592]	@ (801010c <lfs_dir_compact+0x3d0>)
 800febc:	431a      	orrs	r2, r3
                        dir->tail);
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800fec2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	f7ff fbec 	bl	800f6a4 <lfs_dir_commitattr>
 800fecc:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	3318      	adds	r3, #24
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fd fb83 	bl	800d5de <lfs_pair_fromle32>
                if (err) {
 800fed8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d006      	beq.n	800feec <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800fede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fee0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fee4:	f000 80b0 	beq.w	8010048 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 800fee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800feea:	e106      	b.n	80100fa <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800feec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fef0:	2200      	movs	r2, #0
 800fef2:	601a      	str	r2, [r3, #0]
 800fef4:	605a      	str	r2, [r3, #4]
 800fef6:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800fef8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fefc:	f083 0301 	eor.w	r3, r3, #1
 800ff00:	b2db      	uxtb	r3, r3
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d011      	beq.n	800ff2a <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ff0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff10:	4611      	mov	r1, r2
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7fd fc33 	bl	800d77e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff22:	4611      	mov	r1, r2
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7fd fc2a 	bl	800d77e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800ff30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff34:	4611      	mov	r1, r2
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fd fc21 	bl	800d77e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800ff3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800ff42:	f023 0303 	bic.w	r3, r3, #3
 800ff46:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800ff48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	68b9      	ldr	r1, [r7, #8]
 800ff50:	68f8      	ldr	r0, [r7, #12]
 800ff52:	f7ff f981 	bl	800f258 <lfs_dir_getgstate>
 800ff56:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800ff58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d001      	beq.n	800ff62 <lfs_dir_compact+0x226>
                return err;
 800ff5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff60:	e0cb      	b.n	80100fa <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800ff62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7fd fc2e 	bl	800d7c8 <lfs_gstate_iszero>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	f083 0301 	eor.w	r3, r3, #1
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d016      	beq.n	800ffa6 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800ff78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7fd fcc9 	bl	800d914 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800ff82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff86:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800ff8a:	4a61      	ldr	r2, [pc, #388]	@ (8010110 <lfs_dir_compact+0x3d4>)
 800ff8c:	68f8      	ldr	r0, [r7, #12]
 800ff8e:	f7ff fb89 	bl	800f6a4 <lfs_dir_commitattr>
 800ff92:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800ff94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d005      	beq.n	800ffa6 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800ff9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff9c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ffa0:	d054      	beq.n	801004c <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800ffa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffa4:	e0a9      	b.n	80100fa <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800ffa6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ffaa:	4619      	mov	r1, r3
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f7ff fbf9 	bl	800f7a4 <lfs_dir_commitcrc>
 800ffb2:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800ffb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d005      	beq.n	800ffc6 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800ffba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffbc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ffc0:	d046      	beq.n	8010050 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800ffc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffc4:	e099      	b.n	80100fa <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800ffc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ffc8:	68fa      	ldr	r2, [r7, #12]
 800ffca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ffcc:	6a12      	ldr	r2, [r2, #32]
 800ffce:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffd2:	fb01 f202 	mul.w	r2, r1, r2
 800ffd6:	1a9b      	subs	r3, r3, r2
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d006      	beq.n	800ffea <lfs_dir_compact+0x2ae>
 800ffdc:	4b4d      	ldr	r3, [pc, #308]	@ (8010114 <lfs_dir_compact+0x3d8>)
 800ffde:	4a4e      	ldr	r2, [pc, #312]	@ (8010118 <lfs_dir_compact+0x3dc>)
 800ffe0:	f640 0106 	movw	r1, #2054	@ 0x806
 800ffe4:	484d      	ldr	r0, [pc, #308]	@ (801011c <lfs_dir_compact+0x3e0>)
 800ffe6:	f012 ffd7 	bl	8022f98 <__assert_func>
            lfs_pair_swap(dir->pair);
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fd fa6f 	bl	800d4d0 <lfs_pair_swap>
            dir->count = end - begin;
 800fff2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800fff6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800fffa:	1ad3      	subs	r3, r2, r3
 800fffc:	b29a      	uxth	r2, r3
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8010002:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8010008:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	3348      	adds	r3, #72	@ 0x48
 8010012:	2200      	movs	r2, #0
 8010014:	601a      	str	r2, [r3, #0]
 8010016:	605a      	str	r2, [r3, #4]
 8010018:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 801001a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801001e:	f083 0301 	eor.w	r3, r3, #1
 8010022:	b2db      	uxtb	r3, r3
 8010024:	2b00      	cmp	r3, #0
 8010026:	d065      	beq.n	80100f4 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	68fa      	ldr	r2, [r7, #12]
 801002c:	333c      	adds	r3, #60	@ 0x3c
 801002e:	3230      	adds	r2, #48	@ 0x30
 8010030:	ca07      	ldmia	r2, {r0, r1, r2}
 8010032:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8010036:	e05d      	b.n	80100f4 <lfs_dir_compact+0x3b8>
        goto relocate;
 8010038:	bf00      	nop
 801003a:	e00a      	b.n	8010052 <lfs_dir_compact+0x316>
                    goto relocate;
 801003c:	bf00      	nop
 801003e:	e008      	b.n	8010052 <lfs_dir_compact+0x316>
                    goto relocate;
 8010040:	bf00      	nop
 8010042:	e006      	b.n	8010052 <lfs_dir_compact+0x316>
                    goto relocate;
 8010044:	bf00      	nop
 8010046:	e004      	b.n	8010052 <lfs_dir_compact+0x316>
                        goto relocate;
 8010048:	bf00      	nop
 801004a:	e002      	b.n	8010052 <lfs_dir_compact+0x316>
                        goto relocate;
 801004c:	bf00      	nop
 801004e:	e000      	b.n	8010052 <lfs_dir_compact+0x316>
                    goto relocate;
 8010050:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8010052:	2301      	movs	r3, #1
 8010054:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	3310      	adds	r3, #16
 801005c:	4619      	mov	r1, r3
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f7fc fe9f 	bl	800cda2 <lfs_cache_drop>
        if (!tired) {
 8010064:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8010068:	f083 0301 	eor.w	r3, r3, #1
 801006c:	b2db      	uxtb	r3, r3
 801006e:	2b00      	cmp	r3, #0
 8010070:	d009      	beq.n	8010086 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	4a2a      	ldr	r2, [pc, #168]	@ (8010120 <lfs_dir_compact+0x3e4>)
 8010078:	9200      	str	r2, [sp, #0]
 801007a:	f640 0218 	movw	r2, #2072	@ 0x818
 801007e:	4927      	ldr	r1, [pc, #156]	@ (801011c <lfs_dir_compact+0x3e0>)
 8010080:	4828      	ldr	r0, [pc, #160]	@ (8010124 <lfs_dir_compact+0x3e8>)
 8010082:	f013 fa3d 	bl	8023500 <printf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	2200      	movs	r2, #0
 801008a:	617a      	str	r2, [r7, #20]
 801008c:	2201      	movs	r2, #1
 801008e:	61ba      	str	r2, [r7, #24]
 8010090:	f107 0214 	add.w	r2, r7, #20
 8010094:	4611      	mov	r1, r2
 8010096:	4618      	mov	r0, r3
 8010098:	f7fd fa4a 	bl	800d530 <lfs_pair_cmp>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d10c      	bne.n	80100bc <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	4a1e      	ldr	r2, [pc, #120]	@ (8010120 <lfs_dir_compact+0x3e4>)
 80100a8:	9200      	str	r2, [sp, #0]
 80100aa:	f640 021d 	movw	r2, #2077	@ 0x81d
 80100ae:	491b      	ldr	r1, [pc, #108]	@ (801011c <lfs_dir_compact+0x3e0>)
 80100b0:	481d      	ldr	r0, [pc, #116]	@ (8010128 <lfs_dir_compact+0x3ec>)
 80100b2:	f013 fa25 	bl	8023500 <printf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80100b6:	f06f 031b 	mvn.w	r3, #27
 80100ba:	e01e      	b.n	80100fa <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	3304      	adds	r3, #4
 80100c0:	4619      	mov	r1, r3
 80100c2:	68f8      	ldr	r0, [r7, #12]
 80100c4:	f7fd fe28 	bl	800dd18 <lfs_alloc>
 80100c8:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80100ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d00c      	beq.n	80100ea <lfs_dir_compact+0x3ae>
 80100d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80100d2:	f113 0f1c 	cmn.w	r3, #28
 80100d6:	d106      	bne.n	80100e6 <lfs_dir_compact+0x3aa>
 80100d8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80100dc:	f083 0301 	eor.w	r3, r3, #1
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d001      	beq.n	80100ea <lfs_dir_compact+0x3ae>
            return err;
 80100e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80100e8:	e007      	b.n	80100fa <lfs_dir_compact+0x3be>
        }

        tired = false;
 80100ea:	2300      	movs	r3, #0
 80100ec:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 80100f0:	bf00      	nop
    while (true) {
 80100f2:	e64c      	b.n	800fd8e <lfs_dir_compact+0x52>
        break;
 80100f4:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 80100f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3768      	adds	r7, #104	@ 0x68
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop
 8010104:	0800fcc5 	.word	0x0800fcc5
 8010108:	400ffc00 	.word	0x400ffc00
 801010c:	000ffc08 	.word	0x000ffc08
 8010110:	7ffffc0c 	.word	0x7ffffc0c
 8010114:	080305f4 	.word	0x080305f4
 8010118:	08033c50 	.word	0x08033c50
 801011c:	08030474 	.word	0x08030474
 8010120:	0803059c 	.word	0x0803059c
 8010124:	0803061c 	.word	0x0803061c
 8010128:	08030640 	.word	0x08030640

0801012c <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801012c:	b590      	push	{r4, r7, lr}
 801012e:	b097      	sub	sp, #92	@ 0x5c
 8010130:	af0a      	add	r7, sp, #40	@ 0x28
 8010132:	60f8      	str	r0, [r7, #12]
 8010134:	60b9      	str	r1, [r7, #8]
 8010136:	607a      	str	r2, [r7, #4]
 8010138:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 801013a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801013e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8010140:	e058      	b.n	80101f4 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8010142:	2300      	movs	r3, #0
 8010144:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8010146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010148:	b29b      	uxth	r3, r3
 801014a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801014c:	b292      	uxth	r2, r2
 801014e:	4252      	negs	r2, r2
 8010150:	b292      	uxth	r2, r2
 8010152:	b212      	sxth	r2, r2
 8010154:	f107 0118 	add.w	r1, r7, #24
 8010158:	9108      	str	r1, [sp, #32]
 801015a:	4979      	ldr	r1, [pc, #484]	@ (8010340 <lfs_dir_splittingcompact+0x214>)
 801015c:	9107      	str	r1, [sp, #28]
 801015e:	9206      	str	r2, [sp, #24]
 8010160:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8010164:	9205      	str	r2, [sp, #20]
 8010166:	9304      	str	r3, [sp, #16]
 8010168:	2300      	movs	r3, #0
 801016a:	9303      	str	r3, [sp, #12]
 801016c:	4b75      	ldr	r3, [pc, #468]	@ (8010344 <lfs_dir_splittingcompact+0x218>)
 801016e:	9302      	str	r3, [sp, #8]
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	9301      	str	r3, [sp, #4]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	9300      	str	r3, [sp, #0]
 8010178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801017c:	2200      	movs	r2, #0
 801017e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f7fe f899 	bl	800e2b8 <lfs_dir_traverse>
 8010186:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8010188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801018a:	2b00      	cmp	r3, #0
 801018c:	d001      	beq.n	8010192 <lfs_dir_splittingcompact+0x66>
                return err;
 801018e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010190:	e0d2      	b.n	8010338 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8010192:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8010196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010198:	1ad3      	subs	r3, r2, r3
 801019a:	2bfe      	cmp	r3, #254	@ 0xfe
 801019c:	d822      	bhi.n	80101e4 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 80101a4:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d004      	beq.n	80101bc <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 80101b8:	085b      	lsrs	r3, r3, #1
 80101ba:	e003      	b.n	80101c4 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 80101c2:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 80101c4:	68fa      	ldr	r2, [r7, #12]
 80101c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80101c8:	6a12      	ldr	r2, [r2, #32]
                    && size <= lfs_min(
 80101ca:	4611      	mov	r1, r2
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7fc fd57 	bl	800cc80 <lfs_alignup>
 80101d2:	4603      	mov	r3, r0
 80101d4:	4619      	mov	r1, r3
 80101d6:	4620      	mov	r0, r4
 80101d8:	f7fc fd2d 	bl	800cc36 <lfs_min>
 80101dc:	4602      	mov	r2, r0
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d20e      	bcs.n	8010202 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 80101e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80101e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ea:	1ad3      	subs	r3, r2, r3
 80101ec:	085b      	lsrs	r3, r3, #1
 80101ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101f0:	4413      	add	r3, r2
 80101f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 80101f4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80101f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101fa:	1ad3      	subs	r3, r2, r3
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d8a0      	bhi.n	8010142 <lfs_dir_splittingcompact+0x16>
 8010200:	e000      	b.n	8010204 <lfs_dir_splittingcompact+0xd8>
                break;
 8010202:	bf00      	nop
        }

        if (split == begin) {
 8010204:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801020a:	429a      	cmp	r2, r3
 801020c:	d02d      	beq.n	801026a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801020e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010210:	b29b      	uxth	r3, r3
 8010212:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8010216:	9202      	str	r2, [sp, #8]
 8010218:	9301      	str	r3, [sp, #4]
 801021a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801021c:	9300      	str	r3, [sp, #0]
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	68b9      	ldr	r1, [r7, #8]
 8010224:	68f8      	ldr	r0, [r7, #12]
 8010226:	f7ff fce3 	bl	800fbf0 <lfs_dir_split>
 801022a:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 801022c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801022e:	2b00      	cmp	r3, #0
 8010230:	d005      	beq.n	801023e <lfs_dir_splittingcompact+0x112>
 8010232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010234:	f113 0f1c 	cmn.w	r3, #28
 8010238:	d001      	beq.n	801023e <lfs_dir_splittingcompact+0x112>
            return err;
 801023a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801023c:	e07c      	b.n	8010338 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 801023e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00e      	beq.n	8010262 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	493e      	ldr	r1, [pc, #248]	@ (8010348 <lfs_dir_splittingcompact+0x21c>)
 801024e:	9101      	str	r1, [sp, #4]
 8010250:	9300      	str	r3, [sp, #0]
 8010252:	4613      	mov	r3, r2
 8010254:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 8010258:	493c      	ldr	r1, [pc, #240]	@ (801034c <lfs_dir_splittingcompact+0x220>)
 801025a:	483d      	ldr	r0, [pc, #244]	@ (8010350 <lfs_dir_splittingcompact+0x224>)
 801025c:	f013 f950 	bl	8023500 <printf>
                    dir->pair[0], dir->pair[1]);
            break;
 8010260:	e004      	b.n	801026c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8010262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010264:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 8010268:	e767      	b.n	801013a <lfs_dir_splittingcompact+0xe>
            break;
 801026a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 801026c:	68b9      	ldr	r1, [r7, #8]
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f7ff fd3d 	bl	800fcee <lfs_dir_needsrelocation>
 8010274:	4603      	mov	r3, r0
 8010276:	2b00      	cmp	r3, #0
 8010278:	d04f      	beq.n	801031a <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	2200      	movs	r2, #0
 801027e:	613a      	str	r2, [r7, #16]
 8010280:	2201      	movs	r2, #1
 8010282:	617a      	str	r2, [r7, #20]
 8010284:	f107 0210 	add.w	r2, r7, #16
 8010288:	4611      	mov	r1, r2
 801028a:	4618      	mov	r0, r3
 801028c:	f7fd f950 	bl	800d530 <lfs_pair_cmp>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d141      	bne.n	801031a <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8010296:	68f8      	ldr	r0, [r7, #12]
 8010298:	f004 f8ea 	bl	8014470 <lfs_fs_size_>
 801029c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 801029e:	6a3b      	ldr	r3, [r7, #32]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	da01      	bge.n	80102a8 <lfs_dir_splittingcompact+0x17c>
            return size;
 80102a4:	6a3b      	ldr	r3, [r7, #32]
 80102a6:	e047      	b.n	8010338 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80102ac:	6a3b      	ldr	r3, [r7, #32]
 80102ae:	1ad2      	subs	r2, r2, r3
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102b4:	08db      	lsrs	r3, r3, #3
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d92f      	bls.n	801031a <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	689b      	ldr	r3, [r3, #8]
 80102be:	4a22      	ldr	r2, [pc, #136]	@ (8010348 <lfs_dir_splittingcompact+0x21c>)
 80102c0:	9200      	str	r2, [sp, #0]
 80102c2:	f640 0286 	movw	r2, #2182	@ 0x886
 80102c6:	4921      	ldr	r1, [pc, #132]	@ (801034c <lfs_dir_splittingcompact+0x220>)
 80102c8:	4822      	ldr	r0, [pc, #136]	@ (8010354 <lfs_dir_splittingcompact+0x228>)
 80102ca:	f013 f919 	bl	8023500 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80102ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80102d2:	9302      	str	r3, [sp, #8]
 80102d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80102d8:	9301      	str	r3, [sp, #4]
 80102da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102dc:	9300      	str	r3, [sp, #0]
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	687a      	ldr	r2, [r7, #4]
 80102e2:	68b9      	ldr	r1, [r7, #8]
 80102e4:	68f8      	ldr	r0, [r7, #12]
 80102e6:	f7ff fc83 	bl	800fbf0 <lfs_dir_split>
 80102ea:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d005      	beq.n	80102fe <lfs_dir_splittingcompact+0x1d2>
 80102f2:	69fb      	ldr	r3, [r7, #28]
 80102f4:	f113 0f1c 	cmn.w	r3, #28
 80102f8:	d001      	beq.n	80102fe <lfs_dir_splittingcompact+0x1d2>
                return err;
 80102fa:	69fb      	ldr	r3, [r7, #28]
 80102fc:	e01c      	b.n	8010338 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 80102fe:	69fb      	ldr	r3, [r7, #28]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d007      	beq.n	8010314 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8010304:	4b10      	ldr	r3, [pc, #64]	@ (8010348 <lfs_dir_splittingcompact+0x21c>)
 8010306:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801030a:	4910      	ldr	r1, [pc, #64]	@ (801034c <lfs_dir_splittingcompact+0x220>)
 801030c:	4812      	ldr	r0, [pc, #72]	@ (8010358 <lfs_dir_splittingcompact+0x22c>)
 801030e:	f013 f8f7 	bl	8023500 <printf>
 8010312:	e002      	b.n	801031a <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8010314:	2301      	movs	r3, #1
 8010316:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801031a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801031e:	9302      	str	r3, [sp, #8]
 8010320:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010324:	9301      	str	r3, [sp, #4]
 8010326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	687a      	ldr	r2, [r7, #4]
 801032e:	68b9      	ldr	r1, [r7, #8]
 8010330:	68f8      	ldr	r0, [r7, #12]
 8010332:	f7ff fd03 	bl	800fd3c <lfs_dir_compact>
 8010336:	4603      	mov	r3, r0
}
 8010338:	4618      	mov	r0, r3
 801033a:	3734      	adds	r7, #52	@ 0x34
 801033c:	46bd      	mov	sp, r7
 801033e:	bd90      	pop	{r4, r7, pc}
 8010340:	0800fc99 	.word	0x0800fc99
 8010344:	400ffc00 	.word	0x400ffc00
 8010348:	0803059c 	.word	0x0803059c
 801034c:	08030474 	.word	0x08030474
 8010350:	08030678 	.word	0x08030678
 8010354:	080306a8 	.word	0x080306a8
 8010358:	080306d8 	.word	0x080306d8

0801035c <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 801035c:	b5b0      	push	{r4, r5, r7, lr}
 801035e:	b0a6      	sub	sp, #152	@ 0x98
 8010360:	af0a      	add	r7, sp, #40	@ 0x28
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	607a      	str	r2, [r7, #4]
 8010368:	603b      	str	r3, [r7, #0]
    int state = 0;
 801036a:	2300      	movs	r3, #0
 801036c:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 801036e:	2300      	movs	r3, #0
 8010370:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8010374:	2300      	movs	r3, #0
 8010376:	667b      	str	r3, [r7, #100]	@ 0x64
 8010378:	e06d      	b.n	8010456 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801037a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801037c:	00db      	lsls	r3, r3, #3
 801037e:	683a      	ldr	r2, [r7, #0]
 8010380:	4413      	add	r3, r2
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	4618      	mov	r0, r3
 8010386:	f7fd f99f 	bl	800d6c8 <lfs_tag_type3>
 801038a:	4603      	mov	r3, r0
 801038c:	461a      	mov	r2, r3
 801038e:	f240 4301 	movw	r3, #1025	@ 0x401
 8010392:	429a      	cmp	r2, r3
 8010394:	d106      	bne.n	80103a4 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	8a9b      	ldrh	r3, [r3, #20]
 801039a:	3301      	adds	r3, #1
 801039c:	b29a      	uxth	r2, r3
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	829a      	strh	r2, [r3, #20]
 80103a2:	e055      	b.n	8010450 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80103a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103a6:	00db      	lsls	r3, r3, #3
 80103a8:	683a      	ldr	r2, [r7, #0]
 80103aa:	4413      	add	r3, r2
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fd f98a 	bl	800d6c8 <lfs_tag_type3>
 80103b4:	4603      	mov	r3, r0
 80103b6:	461a      	mov	r2, r3
 80103b8:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80103bc:	429a      	cmp	r2, r3
 80103be:	d114      	bne.n	80103ea <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	8a9b      	ldrh	r3, [r3, #20]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d106      	bne.n	80103d6 <lfs_dir_relocatingcommit+0x7a>
 80103c8:	4ba4      	ldr	r3, [pc, #656]	@ (801065c <lfs_dir_relocatingcommit+0x300>)
 80103ca:	4aa5      	ldr	r2, [pc, #660]	@ (8010660 <lfs_dir_relocatingcommit+0x304>)
 80103cc:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 80103d0:	48a4      	ldr	r0, [pc, #656]	@ (8010664 <lfs_dir_relocatingcommit+0x308>)
 80103d2:	f012 fde1 	bl	8022f98 <__assert_func>
            dir->count -= 1;
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	8a9b      	ldrh	r3, [r3, #20]
 80103da:	3b01      	subs	r3, #1
 80103dc:	b29a      	uxth	r2, r3
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80103e2:	2301      	movs	r3, #1
 80103e4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80103e8:	e032      	b.n	8010450 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80103ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103ec:	00db      	lsls	r3, r3, #3
 80103ee:	683a      	ldr	r2, [r7, #0]
 80103f0:	4413      	add	r3, r2
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fd f947 	bl	800d688 <lfs_tag_type1>
 80103fa:	4603      	mov	r3, r0
 80103fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8010400:	d126      	bne.n	8010450 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8010402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010404:	00db      	lsls	r3, r3, #3
 8010406:	683a      	ldr	r2, [r7, #0]
 8010408:	4413      	add	r3, r2
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8010412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010414:	00db      	lsls	r3, r3, #3
 8010416:	683a      	ldr	r2, [r7, #0]
 8010418:	4413      	add	r3, r2
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	685a      	ldr	r2, [r3, #4]
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8010422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010424:	00db      	lsls	r3, r3, #3
 8010426:	683a      	ldr	r2, [r7, #0]
 8010428:	4413      	add	r3, r2
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4618      	mov	r0, r3
 801042e:	f7fd f95b 	bl	800d6e8 <lfs_tag_chunk>
 8010432:	4603      	mov	r3, r0
 8010434:	f003 0301 	and.w	r3, r3, #1
 8010438:	2b00      	cmp	r3, #0
 801043a:	bf14      	ite	ne
 801043c:	2301      	movne	r3, #1
 801043e:	2300      	moveq	r3, #0
 8010440:	b2da      	uxtb	r2, r3
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	3318      	adds	r3, #24
 801044a:	4618      	mov	r0, r3
 801044c:	f7fd f8c7 	bl	800d5de <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8010450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010452:	3301      	adds	r3, #1
 8010454:	667b      	str	r3, [r7, #100]	@ 0x64
 8010456:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010458:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801045c:	429a      	cmp	r2, r3
 801045e:	db8c      	blt.n	801037a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8010460:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010464:	2b00      	cmp	r3, #0
 8010466:	d02b      	beq.n	80104c0 <lfs_dir_relocatingcommit+0x164>
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	8a9b      	ldrh	r3, [r3, #20]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d127      	bne.n	80104c0 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8010470:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010474:	2b00      	cmp	r3, #0
 8010476:	d106      	bne.n	8010486 <lfs_dir_relocatingcommit+0x12a>
 8010478:	4b7b      	ldr	r3, [pc, #492]	@ (8010668 <lfs_dir_relocatingcommit+0x30c>)
 801047a:	4a79      	ldr	r2, [pc, #484]	@ (8010660 <lfs_dir_relocatingcommit+0x304>)
 801047c:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 8010480:	4878      	ldr	r0, [pc, #480]	@ (8010664 <lfs_dir_relocatingcommit+0x308>)
 8010482:	f012 fd89 	bl	8022f98 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801048c:	4619      	mov	r1, r3
 801048e:	68f8      	ldr	r0, [r7, #12]
 8010490:	f003 fb4a 	bl	8013b28 <lfs_fs_pred>
 8010494:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8010496:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010498:	2b00      	cmp	r3, #0
 801049a:	d005      	beq.n	80104a8 <lfs_dir_relocatingcommit+0x14c>
 801049c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801049e:	f113 0f02 	cmn.w	r3, #2
 80104a2:	d001      	beq.n	80104a8 <lfs_dir_relocatingcommit+0x14c>
            return err;
 80104a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80104a6:	e210      	b.n	80108ca <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 80104a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80104aa:	f113 0f02 	cmn.w	r3, #2
 80104ae:	d007      	beq.n	80104c0 <lfs_dir_relocatingcommit+0x164>
 80104b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80104b4:	7ddb      	ldrb	r3, [r3, #23]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d002      	beq.n	80104c0 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 80104ba:	2302      	movs	r3, #2
 80104bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 80104be:	e121      	b.n	8010704 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	7d9b      	ldrb	r3, [r3, #22]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f000 80fb 	beq.w	80106c0 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 80104ce:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80104d4:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 80104da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80104dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80104e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80104e6:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d004      	beq.n	80104fc <lfs_dir_relocatingcommit+0x1a0>
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104f8:	3b08      	subs	r3, #8
 80104fa:	e003      	b.n	8010504 <lfs_dir_relocatingcommit+0x1a8>
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010502:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8010504:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	3318      	adds	r3, #24
 801050a:	4618      	mov	r0, r3
 801050c:	f7fd f881 	bl	800d612 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	68da      	ldr	r2, [r3, #12]
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801051c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010520:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 8010522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010526:	9308      	str	r3, [sp, #32]
 8010528:	4b50      	ldr	r3, [pc, #320]	@ (801066c <lfs_dir_relocatingcommit+0x310>)
 801052a:	9307      	str	r3, [sp, #28]
 801052c:	2300      	movs	r3, #0
 801052e:	9306      	str	r3, [sp, #24]
 8010530:	2300      	movs	r3, #0
 8010532:	9305      	str	r3, [sp, #20]
 8010534:	2300      	movs	r3, #0
 8010536:	9304      	str	r3, [sp, #16]
 8010538:	2300      	movs	r3, #0
 801053a:	9303      	str	r3, [sp, #12]
 801053c:	2300      	movs	r3, #0
 801053e:	9302      	str	r3, [sp, #8]
 8010540:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010544:	9301      	str	r3, [sp, #4]
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	9300      	str	r3, [sp, #0]
 801054a:	460b      	mov	r3, r1
 801054c:	68b9      	ldr	r1, [r7, #8]
 801054e:	68f8      	ldr	r0, [r7, #12]
 8010550:	f7fd feb2 	bl	800e2b8 <lfs_dir_traverse>
 8010554:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	3318      	adds	r3, #24
 801055a:	4618      	mov	r0, r3
 801055c:	f7fd f83f 	bl	800d5de <lfs_pair_fromle32>
        if (err) {
 8010560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010562:	2b00      	cmp	r3, #0
 8010564:	d00b      	beq.n	801057e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8010566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010568:	f113 0f1c 	cmn.w	r3, #28
 801056c:	f000 80aa 	beq.w	80106c4 <lfs_dir_relocatingcommit+0x368>
 8010570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010572:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010576:	f000 80a5 	beq.w	80106c4 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 801057a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801057c:	e1a5      	b.n	80108ca <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 801057e:	f107 031c 	add.w	r3, r7, #28
 8010582:	2200      	movs	r2, #0
 8010584:	601a      	str	r2, [r3, #0]
 8010586:	605a      	str	r2, [r3, #4]
 8010588:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010590:	f107 031c 	add.w	r3, r7, #28
 8010594:	4611      	mov	r1, r2
 8010596:	4618      	mov	r0, r3
 8010598:	f7fd f8f1 	bl	800d77e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80105a2:	f107 031c 	add.w	r3, r7, #28
 80105a6:	4611      	mov	r1, r2
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fd f8e8 	bl	800d77e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80105b4:	f107 031c 	add.w	r3, r7, #28
 80105b8:	4611      	mov	r1, r2
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fd f8df 	bl	800d77e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80105c6:	f023 0303 	bic.w	r3, r3, #3
 80105ca:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 80105cc:	f107 031c 	add.w	r3, r7, #28
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7fd f8f9 	bl	800d7c8 <lfs_gstate_iszero>
 80105d6:	4603      	mov	r3, r0
 80105d8:	f083 0301 	eor.w	r3, r3, #1
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d027      	beq.n	8010632 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80105e2:	f107 031c 	add.w	r3, r7, #28
 80105e6:	461a      	mov	r2, r3
 80105e8:	68b9      	ldr	r1, [r7, #8]
 80105ea:	68f8      	ldr	r0, [r7, #12]
 80105ec:	f7fe fe34 	bl	800f258 <lfs_dir_getgstate>
 80105f0:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 80105f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d001      	beq.n	80105fc <lfs_dir_relocatingcommit+0x2a0>
                return err;
 80105f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105fa:	e166      	b.n	80108ca <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 80105fc:	f107 031c 	add.w	r3, r7, #28
 8010600:	4618      	mov	r0, r3
 8010602:	f7fd f987 	bl	800d914 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8010606:	f107 031c 	add.w	r3, r7, #28
 801060a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801060e:	4a18      	ldr	r2, [pc, #96]	@ (8010670 <lfs_dir_relocatingcommit+0x314>)
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	f7ff f847 	bl	800f6a4 <lfs_dir_commitattr>
 8010616:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8010618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801061a:	2b00      	cmp	r3, #0
 801061c:	d009      	beq.n	8010632 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801061e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010620:	f113 0f1c 	cmn.w	r3, #28
 8010624:	d050      	beq.n	80106c8 <lfs_dir_relocatingcommit+0x36c>
 8010626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010628:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801062c:	d04c      	beq.n	80106c8 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 801062e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010630:	e14b      	b.n	80108ca <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8010632:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010636:	4619      	mov	r1, r3
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	f7ff f8b3 	bl	800f7a4 <lfs_dir_commitcrc>
 801063e:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 8010640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010642:	2b00      	cmp	r3, #0
 8010644:	d016      	beq.n	8010674 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8010646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010648:	f113 0f1c 	cmn.w	r3, #28
 801064c:	d03e      	beq.n	80106cc <lfs_dir_relocatingcommit+0x370>
 801064e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010650:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010654:	d03a      	beq.n	80106cc <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8010656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010658:	e137      	b.n	80108ca <lfs_dir_relocatingcommit+0x56e>
 801065a:	bf00      	nop
 801065c:	08030704 	.word	0x08030704
 8010660:	08033c60 	.word	0x08033c60
 8010664:	08030474 	.word	0x08030474
 8010668:	08030714 	.word	0x08030714
 801066c:	0800fcc5 	.word	0x0800fcc5
 8010670:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8010674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010676:	68fa      	ldr	r2, [r7, #12]
 8010678:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801067a:	6a12      	ldr	r2, [r2, #32]
 801067c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010680:	fb01 f202 	mul.w	r2, r1, r2
 8010684:	1a9b      	subs	r3, r3, r2
 8010686:	2b00      	cmp	r3, #0
 8010688:	d006      	beq.n	8010698 <lfs_dir_relocatingcommit+0x33c>
 801068a:	4b92      	ldr	r3, [pc, #584]	@ (80108d4 <lfs_dir_relocatingcommit+0x578>)
 801068c:	4a92      	ldr	r2, [pc, #584]	@ (80108d8 <lfs_dir_relocatingcommit+0x57c>)
 801068e:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8010692:	4892      	ldr	r0, [pc, #584]	@ (80108dc <lfs_dir_relocatingcommit+0x580>)
 8010694:	f012 fc80 	bl	8022f98 <__assert_func>
        dir->off = commit.off;
 8010698:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 801069e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	333c      	adds	r3, #60	@ 0x3c
 80106aa:	3230      	adds	r2, #48	@ 0x30
 80106ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80106ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	3348      	adds	r3, #72	@ 0x48
 80106b6:	2200      	movs	r2, #0
 80106b8:	601a      	str	r2, [r3, #0]
 80106ba:	605a      	str	r2, [r3, #4]
 80106bc:	609a      	str	r2, [r3, #8]
 80106be:	e021      	b.n	8010704 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80106c0:	bf00      	nop
 80106c2:	e004      	b.n	80106ce <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80106c4:	bf00      	nop
 80106c6:	e002      	b.n	80106ce <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 80106c8:	bf00      	nop
 80106ca:	e000      	b.n	80106ce <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80106cc:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	3310      	adds	r3, #16
 80106d2:	4619      	mov	r1, r3
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	f7fc fb64 	bl	800cda2 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	8a9b      	ldrh	r3, [r3, #20]
 80106de:	9302      	str	r3, [sp, #8]
 80106e0:	2300      	movs	r3, #0
 80106e2:	9301      	str	r3, [sp, #4]
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	9300      	str	r3, [sp, #0]
 80106e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80106ec:	683a      	ldr	r2, [r7, #0]
 80106ee:	68b9      	ldr	r1, [r7, #8]
 80106f0:	68f8      	ldr	r0, [r7, #12]
 80106f2:	f7ff fd1b 	bl	801012c <lfs_dir_splittingcompact>
 80106f6:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 80106f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	da01      	bge.n	8010702 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 80106fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010700:	e0e3      	b.n	80108ca <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 8010702:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	64bb      	str	r3, [r7, #72]	@ 0x48
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	3304      	adds	r3, #4
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010716:	663b      	str	r3, [r7, #96]	@ 0x60
 8010718:	e0d2      	b.n	80108c0 <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 801071a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801071c:	3308      	adds	r3, #8
 801071e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8010722:	4611      	mov	r1, r2
 8010724:	4618      	mov	r0, r3
 8010726:	f7fc ff03 	bl	800d530 <lfs_pair_cmp>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	f040 80c4 	bne.w	80108ba <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 8010732:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010734:	68ba      	ldr	r2, [r7, #8]
 8010736:	f103 0408 	add.w	r4, r3, #8
 801073a:	4615      	mov	r5, r2
 801073c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801073e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010740:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8010748:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801074a:	3308      	adds	r3, #8
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	429a      	cmp	r2, r3
 8010750:	f000 80a9 	beq.w	80108a6 <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 8010754:	2300      	movs	r3, #0
 8010756:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010758:	e07b      	b.n	8010852 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801075a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801075c:	00db      	lsls	r3, r3, #3
 801075e:	683a      	ldr	r2, [r7, #0]
 8010760:	4413      	add	r3, r2
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4618      	mov	r0, r3
 8010766:	f7fc ffaf 	bl	800d6c8 <lfs_tag_type3>
 801076a:	4603      	mov	r3, r0
 801076c:	461a      	mov	r2, r3
 801076e:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8010772:	429a      	cmp	r2, r3
 8010774:	d115      	bne.n	80107a2 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8010776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010778:	889c      	ldrh	r4, [r3, #4]
 801077a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801077c:	00db      	lsls	r3, r3, #3
 801077e:	683a      	ldr	r2, [r7, #0]
 8010780:	4413      	add	r3, r2
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4618      	mov	r0, r3
 8010786:	f7fc ffc9 	bl	800d71c <lfs_tag_id>
 801078a:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801078c:	429c      	cmp	r4, r3
 801078e:	d108      	bne.n	80107a2 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8010790:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010792:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010796:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8010798:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801079a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801079e:	60da      	str	r2, [r3, #12]
 80107a0:	e054      	b.n	801084c <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80107a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80107a4:	00db      	lsls	r3, r3, #3
 80107a6:	683a      	ldr	r2, [r7, #0]
 80107a8:	4413      	add	r3, r2
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fc ff8b 	bl	800d6c8 <lfs_tag_type3>
 80107b2:	4603      	mov	r3, r0
 80107b4:	461a      	mov	r2, r3
 80107b6:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d11c      	bne.n	80107f8 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80107be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107c0:	889c      	ldrh	r4, [r3, #4]
 80107c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80107c4:	00db      	lsls	r3, r3, #3
 80107c6:	683a      	ldr	r2, [r7, #0]
 80107c8:	4413      	add	r3, r2
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7fc ffa5 	bl	800d71c <lfs_tag_id>
 80107d2:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80107d4:	429c      	cmp	r4, r3
 80107d6:	d90f      	bls.n	80107f8 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 80107d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107da:	889b      	ldrh	r3, [r3, #4]
 80107dc:	3b01      	subs	r3, #1
 80107de:	b29a      	uxth	r2, r3
 80107e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107e2:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80107e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107e6:	799b      	ldrb	r3, [r3, #6]
 80107e8:	2b02      	cmp	r3, #2
 80107ea:	d12f      	bne.n	801084c <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 80107ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107f0:	1e5a      	subs	r2, r3, #1
 80107f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107f4:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 80107f6:	e029      	b.n	801084c <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80107f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80107fa:	00db      	lsls	r3, r3, #3
 80107fc:	683a      	ldr	r2, [r7, #0]
 80107fe:	4413      	add	r3, r2
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	4618      	mov	r0, r3
 8010804:	f7fc ff60 	bl	800d6c8 <lfs_tag_type3>
 8010808:	4603      	mov	r3, r0
 801080a:	461a      	mov	r2, r3
 801080c:	f240 4301 	movw	r3, #1025	@ 0x401
 8010810:	429a      	cmp	r2, r3
 8010812:	d11b      	bne.n	801084c <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8010814:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010816:	889c      	ldrh	r4, [r3, #4]
 8010818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801081a:	00db      	lsls	r3, r3, #3
 801081c:	683a      	ldr	r2, [r7, #0]
 801081e:	4413      	add	r3, r2
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4618      	mov	r0, r3
 8010824:	f7fc ff7a 	bl	800d71c <lfs_tag_id>
 8010828:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801082a:	429c      	cmp	r4, r3
 801082c:	d30e      	bcc.n	801084c <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 801082e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010830:	889b      	ldrh	r3, [r3, #4]
 8010832:	3301      	adds	r3, #1
 8010834:	b29a      	uxth	r2, r3
 8010836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010838:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801083a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801083c:	799b      	ldrb	r3, [r3, #6]
 801083e:	2b02      	cmp	r3, #2
 8010840:	d104      	bne.n	801084c <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8010842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010846:	1c5a      	adds	r2, r3, #1
 8010848:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801084a:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 801084c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801084e:	3301      	adds	r3, #1
 8010850:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010852:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010854:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010858:	429a      	cmp	r2, r3
 801085a:	f6ff af7e 	blt.w	801075a <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 801085e:	e022      	b.n	80108a6 <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 8010860:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010862:	f103 0220 	add.w	r2, r3, #32
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	3320      	adds	r3, #32
 801086a:	4619      	mov	r1, r3
 801086c:	4610      	mov	r0, r2
 801086e:	f7fc fe5f 	bl	800d530 <lfs_pair_cmp>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d007      	beq.n	8010888 <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 8010878:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801087a:	889a      	ldrh	r2, [r3, #4]
 801087c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801087e:	8b9b      	ldrh	r3, [r3, #28]
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	b29a      	uxth	r2, r3
 8010884:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010886:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8010888:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801088a:	f103 0108 	add.w	r1, r3, #8
 801088e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010890:	3320      	adds	r3, #32
 8010892:	461a      	mov	r2, r3
 8010894:	68f8      	ldr	r0, [r7, #12]
 8010896:	f7fe fcc3 	bl	800f220 <lfs_dir_fetch>
 801089a:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 801089c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d001      	beq.n	80108a6 <lfs_dir_relocatingcommit+0x54a>
                    return err;
 80108a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108a4:	e011      	b.n	80108ca <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 80108a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108a8:	889a      	ldrh	r2, [r3, #4]
 80108aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108ac:	8b9b      	ldrh	r3, [r3, #28]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d303      	bcc.n	80108ba <lfs_dir_relocatingcommit+0x55e>
 80108b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108b4:	7fdb      	ldrb	r3, [r3, #31]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d1d2      	bne.n	8010860 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80108ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	663b      	str	r3, [r7, #96]	@ 0x60
 80108c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f47f af29 	bne.w	801071a <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 80108c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3770      	adds	r7, #112	@ 0x70
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bdb0      	pop	{r4, r5, r7, pc}
 80108d2:	bf00      	nop
 80108d4:	080305f4 	.word	0x080305f4
 80108d8:	08033c60 	.word	0x08033c60
 80108dc:	08030474 	.word	0x08030474

080108e0 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80108e0:	b5b0      	push	{r4, r5, r7, lr}
 80108e2:	b0bc      	sub	sp, #240	@ 0xf0
 80108e4:	af04      	add	r7, sp, #16
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	607a      	str	r2, [r7, #4]
 80108ec:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80108f6:	e045      	b.n	8010984 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80108f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80108fc:	3308      	adds	r3, #8
 80108fe:	68ba      	ldr	r2, [r7, #8]
 8010900:	429a      	cmp	r2, r3
 8010902:	d03a      	beq.n	801097a <lfs_dir_orphaningcommit+0x9a>
 8010904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010908:	3308      	adds	r3, #8
 801090a:	68ba      	ldr	r2, [r7, #8]
 801090c:	4611      	mov	r1, r2
 801090e:	4618      	mov	r0, r3
 8010910:	f7fc fe0e 	bl	800d530 <lfs_pair_cmp>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d12f      	bne.n	801097a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801091a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801091e:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8010920:	2b01      	cmp	r3, #1
 8010922:	d12a      	bne.n	801097a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8010924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801092a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801092e:	2b00      	cmp	r3, #0
 8010930:	d023      	beq.n	801097a <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8010932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801093e:	429a      	cmp	r2, r3
 8010940:	d91b      	bls.n	801097a <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8010942:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	f001 fa3e 	bl	8011dc8 <lfs_file_outline>
 801094c:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8010950:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010954:	2b00      	cmp	r3, #0
 8010956:	d002      	beq.n	801095e <lfs_dir_orphaningcommit+0x7e>
                return err;
 8010958:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801095c:	e2ad      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 801095e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8010962:	68f8      	ldr	r0, [r7, #12]
 8010964:	f001 fa52 	bl	8011e0c <lfs_file_flush>
 8010968:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 801096c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010970:	2b00      	cmp	r3, #0
 8010972:	d002      	beq.n	801097a <lfs_dir_orphaningcommit+0x9a>
                return err;
 8010974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010978:	e29f      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801097a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8010984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010988:	2b00      	cmp	r3, #0
 801098a:	d1b5      	bne.n	80108f8 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80109a2:	461d      	mov	r5, r3
 80109a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80109ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80109b0:	68ba      	ldr	r2, [r7, #8]
 80109b2:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80109b6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80109ba:	9301      	str	r3, [sp, #4]
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	9300      	str	r3, [sp, #0]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	68f8      	ldr	r0, [r7, #12]
 80109c4:	f7ff fcca 	bl	801035c <lfs_dir_relocatingcommit>
 80109c8:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 80109cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	da02      	bge.n	80109da <lfs_dir_orphaningcommit+0xfa>
        return state;
 80109d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80109d8:	e26f      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80109e0:	4611      	mov	r1, r2
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7fc fda4 	bl	800d530 <lfs_pair_cmp>
 80109e8:	4603      	mov	r3, r0
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d109      	bne.n	8010a02 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	461d      	mov	r5, r3
 80109f2:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80109f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80109fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80109fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8010a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a06:	2b02      	cmp	r3, #2
 8010a08:	d14a      	bne.n	8010aa0 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	3348      	adds	r3, #72	@ 0x48
 8010a0e:	461a      	mov	r2, r3
 8010a10:	68b9      	ldr	r1, [r7, #8]
 8010a12:	68f8      	ldr	r0, [r7, #12]
 8010a14:	f7fe fc20 	bl	800f258 <lfs_dir_getgstate>
 8010a18:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8010a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d002      	beq.n	8010a2a <lfs_dir_orphaningcommit+0x14a>
            return err;
 8010a24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010a28:	e247      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8010a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 8010a30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010a32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	3318      	adds	r3, #24
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fc fde9 	bl	800d612 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	7ddb      	ldrb	r3, [r3, #23]
 8010a44:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8010a48:	051a      	lsls	r2, r3, #20
 8010a4a:	4bc2      	ldr	r3, [pc, #776]	@ (8010d54 <lfs_dir_orphaningcommit+0x474>)
 8010a4c:	4313      	orrs	r3, r2
 8010a4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	3318      	adds	r3, #24
 8010a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010a56:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8010a5a:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8010a5e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8010a62:	2000      	movs	r0, #0
 8010a64:	9001      	str	r0, [sp, #4]
 8010a66:	2001      	movs	r0, #1
 8010a68:	9000      	str	r0, [sp, #0]
 8010a6a:	68f8      	ldr	r0, [r7, #12]
 8010a6c:	f7ff fc76 	bl	801035c <lfs_dir_relocatingcommit>
 8010a70:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	3318      	adds	r3, #24
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7fc fdb0 	bl	800d5de <lfs_pair_fromle32>
        if (state < 0) {
 8010a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	da02      	bge.n	8010a8c <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8010a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a8a:	e216      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8010a8c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010a90:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8010a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 8010aa6:	e1fc      	b.n	8010ea2 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8010aa8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8010aac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8010ab0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010ab4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010ab8:	4ca7      	ldr	r4, [pc, #668]	@ (8010d58 <lfs_dir_orphaningcommit+0x478>)
 8010aba:	9403      	str	r4, [sp, #12]
 8010abc:	9102      	str	r1, [sp, #8]
 8010abe:	9201      	str	r2, [sp, #4]
 8010ac0:	9300      	str	r3, [sp, #0]
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	f640 128c 	movw	r2, #2444	@ 0x98c
 8010ac8:	49a4      	ldr	r1, [pc, #656]	@ (8010d5c <lfs_dir_orphaningcommit+0x47c>)
 8010aca:	48a5      	ldr	r0, [pc, #660]	@ (8010d60 <lfs_dir_orphaningcommit+0x480>)
 8010acc:	f012 fd18 	bl	8023500 <printf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f103 0220 	add.w	r2, r3, #32
 8010adc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010ae0:	4611      	mov	r1, r2
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fc fd24 	bl	800d530 <lfs_pair_cmp>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d107      	bne.n	8010afe <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8010aee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8010af6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010b06:	e037      	b.n	8010b78 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8010b08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b0c:	f103 0208 	add.w	r2, r3, #8
 8010b10:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010b14:	4611      	mov	r1, r2
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fc fd0a 	bl	800d530 <lfs_pair_cmp>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d109      	bne.n	8010b36 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8010b22:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010b26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b2a:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8010b2c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010b30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b34:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8010b36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b3a:	799b      	ldrb	r3, [r3, #6]
 8010b3c:	2b02      	cmp	r3, #2
 8010b3e:	d116      	bne.n	8010b6e <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8010b40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b44:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8010b48:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010b4c:	4611      	mov	r1, r2
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7fc fcee 	bl	800d530 <lfs_pair_cmp>
 8010b54:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d109      	bne.n	8010b6e <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8010b5a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010b5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b62:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8010b64:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010b68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b6c:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010b6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010b78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d1c3      	bne.n	8010b08 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8010b80:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010b84:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010b88:	4619      	mov	r1, r3
 8010b8a:	68f8      	ldr	r0, [r7, #12]
 8010b8c:	f003 f87e 	bl	8013c8c <lfs_fs_parent>
 8010b90:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8010b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	da07      	bge.n	8010bac <lfs_dir_orphaningcommit+0x2cc>
 8010b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010ba0:	f113 0f02 	cmn.w	r3, #2
 8010ba4:	d002      	beq.n	8010bac <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8010ba6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010baa:	e186      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8010bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010bb0:	f113 0f02 	cmn.w	r3, #2
 8010bb4:	bf14      	ite	ne
 8010bb6:	2301      	movne	r3, #1
 8010bb8:	2300      	moveq	r3, #0
 8010bba:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8010bbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010bc2:	f113 0f02 	cmn.w	r3, #2
 8010bc6:	f000 809e 	beq.w	8010d06 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8010bca:	2101      	movs	r1, #1
 8010bcc:	68f8      	ldr	r0, [r7, #12]
 8010bce:	f003 f8f5 	bl	8013dbc <lfs_fs_preporphans>
 8010bd2:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8010bd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d002      	beq.n	8010be4 <lfs_dir_orphaningcommit+0x304>
                return err;
 8010bde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010be2:	e16a      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8010be4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010be8:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	3330      	adds	r3, #48	@ 0x30
 8010bf0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010bf4:	4611      	mov	r1, r2
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7fc fe4c 	bl	800d894 <lfs_gstate_hasmovehere>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d02d      	beq.n	8010c5e <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fc fd88 	bl	800d71c <lfs_tag_id>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8010c12:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010c14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010c16:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8010c1a:	484f      	ldr	r0, [pc, #316]	@ (8010d58 <lfs_dir_orphaningcommit+0x478>)
 8010c1c:	9002      	str	r0, [sp, #8]
 8010c1e:	9201      	str	r2, [sp, #4]
 8010c20:	9300      	str	r3, [sp, #0]
 8010c22:	460b      	mov	r3, r1
 8010c24:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 8010c28:	494c      	ldr	r1, [pc, #304]	@ (8010d5c <lfs_dir_orphaningcommit+0x47c>)
 8010c2a:	484e      	ldr	r0, [pc, #312]	@ (8010d64 <lfs_dir_orphaningcommit+0x484>)
 8010c2c:	f012 fc68 	bl	8023500 <printf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8010c30:	2200      	movs	r2, #0
 8010c32:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8010c36:	68f8      	ldr	r0, [r7, #12]
 8010c38:	f003 f910 	bl	8013e5c <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8010c3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fc fd6b 	bl	800d71c <lfs_tag_id>
 8010c46:	4603      	mov	r3, r0
 8010c48:	461a      	mov	r2, r3
 8010c4a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d205      	bcs.n	8010c5e <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8010c52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010c56:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8010c5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8010c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c60:	657b      	str	r3, [r7, #84]	@ 0x54
 8010c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010c64:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 8010c66:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fc fcd1 	bl	800d612 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8010c70:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8010c74:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d007      	beq.n	8010c8c <lfs_dir_orphaningcommit+0x3ac>
 8010c7c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8010c80:	029b      	lsls	r3, r3, #10
 8010c82:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010c86:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010c8a:	e000      	b.n	8010c8e <lfs_dir_orphaningcommit+0x3ae>
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c90:	2300      	movs	r3, #0
 8010c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c9a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010c9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010ca0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010ca4:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8010ca8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8010cac:	2000      	movs	r0, #0
 8010cae:	9001      	str	r0, [sp, #4]
 8010cb0:	2002      	movs	r0, #2
 8010cb2:	9000      	str	r0, [sp, #0]
 8010cb4:	68f8      	ldr	r0, [r7, #12]
 8010cb6:	f7ff fb51 	bl	801035c <lfs_dir_relocatingcommit>
 8010cba:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8010cbe:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7fc fc8b 	bl	800d5de <lfs_pair_fromle32>
            if (state < 0) {
 8010cc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	da02      	bge.n	8010cd6 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8010cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010cd4:	e0f1      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8010cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d113      	bne.n	8010d06 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8010cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8010ce4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 8010cea:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010cee:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8010cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010cf6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010cfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8010d04:	e0cd      	b.n	8010ea2 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8010d06:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010d0a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010d0e:	4619      	mov	r1, r3
 8010d10:	68f8      	ldr	r0, [r7, #12]
 8010d12:	f002 ff09 	bl	8013b28 <lfs_fs_pred>
 8010d16:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8010d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d007      	beq.n	8010d32 <lfs_dir_orphaningcommit+0x452>
 8010d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d26:	f113 0f02 	cmn.w	r3, #2
 8010d2a:	d002      	beq.n	8010d32 <lfs_dir_orphaningcommit+0x452>
            return err;
 8010d2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d30:	e0c3      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8010d32:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d01a      	beq.n	8010d70 <lfs_dir_orphaningcommit+0x490>
 8010d3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d3e:	f113 0f02 	cmn.w	r3, #2
 8010d42:	d115      	bne.n	8010d70 <lfs_dir_orphaningcommit+0x490>
 8010d44:	4b08      	ldr	r3, [pc, #32]	@ (8010d68 <lfs_dir_orphaningcommit+0x488>)
 8010d46:	4a09      	ldr	r2, [pc, #36]	@ (8010d6c <lfs_dir_orphaningcommit+0x48c>)
 8010d48:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 8010d4c:	4803      	ldr	r0, [pc, #12]	@ (8010d5c <lfs_dir_orphaningcommit+0x47c>)
 8010d4e:	f012 f923 	bl	8022f98 <__assert_func>
 8010d52:	bf00      	nop
 8010d54:	000ffc08 	.word	0x000ffc08
 8010d58:	0803059c 	.word	0x0803059c
 8010d5c:	08030474 	.word	0x08030474
 8010d60:	0803071c 	.word	0x0803071c
 8010d64:	08030758 	.word	0x08030758
 8010d68:	0803079c 	.word	0x0803079c
 8010d6c:	08033c7c 	.word	0x08033c7c

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8010d70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d74:	f113 0f02 	cmn.w	r3, #2
 8010d78:	f000 8093 	beq.w	8010ea2 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	3330      	adds	r3, #48	@ 0x30
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fc fd3e 	bl	800d802 <lfs_gstate_hasorphans>
 8010d86:	4603      	mov	r3, r0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d011      	beq.n	8010db0 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8010d8c:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8010d90:	425b      	negs	r3, r3
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	b25b      	sxtb	r3, r3
 8010d96:	4619      	mov	r1, r3
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f003 f80f 	bl	8013dbc <lfs_fs_preporphans>
 8010d9e:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8010da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d002      	beq.n	8010db0 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8010daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010dae:	e084      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8010db0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010db4:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	3330      	adds	r3, #48	@ 0x30
 8010dbc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010dc0:	4611      	mov	r1, r2
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7fc fd66 	bl	800d894 <lfs_gstate_hasmovehere>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d01c      	beq.n	8010e08 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fc fca2 	bl	800d71c <lfs_tag_id>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8010dde:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010de0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010de2:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8010de6:	4837      	ldr	r0, [pc, #220]	@ (8010ec4 <lfs_dir_orphaningcommit+0x5e4>)
 8010de8:	9002      	str	r0, [sp, #8]
 8010dea:	9201      	str	r2, [sp, #4]
 8010dec:	9300      	str	r3, [sp, #0]
 8010dee:	460b      	mov	r3, r1
 8010df0:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 8010df4:	4934      	ldr	r1, [pc, #208]	@ (8010ec8 <lfs_dir_orphaningcommit+0x5e8>)
 8010df6:	4835      	ldr	r0, [pc, #212]	@ (8010ecc <lfs_dir_orphaningcommit+0x5ec>)
 8010df8:	f012 fb82 	bl	8023500 <printf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8010e02:	68f8      	ldr	r0, [r7, #12]
 8010e04:	f003 f82a 	bl	8013e5c <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8010e08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 8010e0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010e10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8010e14:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fc fbfa 	bl	800d612 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8010e1e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8010e22:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d007      	beq.n	8010e3a <lfs_dir_orphaningcommit+0x55a>
 8010e2a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8010e2e:	029b      	lsls	r3, r3, #10
 8010e30:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010e34:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010e38:	e000      	b.n	8010e3c <lfs_dir_orphaningcommit+0x55c>
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e3e:	2300      	movs	r3, #0
 8010e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e42:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010e46:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8010e4a:	051a      	lsls	r2, r3, #20
 8010e4c:	4b20      	ldr	r3, [pc, #128]	@ (8010ed0 <lfs_dir_orphaningcommit+0x5f0>)
 8010e4e:	4313      	orrs	r3, r2
 8010e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e52:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010e56:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010e5c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8010e60:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8010e64:	2000      	movs	r0, #0
 8010e66:	9001      	str	r0, [sp, #4]
 8010e68:	2002      	movs	r0, #2
 8010e6a:	9000      	str	r0, [sp, #0]
 8010e6c:	68f8      	ldr	r0, [r7, #12]
 8010e6e:	f7ff fa75 	bl	801035c <lfs_dir_relocatingcommit>
 8010e72:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8010e76:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fc fbaf 	bl	800d5de <lfs_pair_fromle32>
            if (state < 0) {
 8010e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	da02      	bge.n	8010e8e <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8010e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010e8c:	e015      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8010e8e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010e92:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8010e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8010ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	f43f adfe 	beq.w	8010aa8 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8010eac:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d001      	beq.n	8010eb8 <lfs_dir_orphaningcommit+0x5d8>
 8010eb4:	2303      	movs	r3, #3
 8010eb6:	e000      	b.n	8010eba <lfs_dir_orphaningcommit+0x5da>
 8010eb8:	2300      	movs	r3, #0
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	37e0      	adds	r7, #224	@ 0xe0
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	0803059c 	.word	0x0803059c
 8010ec8:	08030474 	.word	0x08030474
 8010ecc:	08030758 	.word	0x08030758
 8010ed0:	000ffc08 	.word	0x000ffc08

08010ed4 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b086      	sub	sp, #24
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	607a      	str	r2, [r7, #4]
 8010ee0:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	68b9      	ldr	r1, [r7, #8]
 8010ee8:	68f8      	ldr	r0, [r7, #12]
 8010eea:	f7ff fcf9 	bl	80108e0 <lfs_dir_orphaningcommit>
 8010eee:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	da01      	bge.n	8010efa <lfs_dir_commit+0x26>
        return orphans;
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	e00d      	b.n	8010f16 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d009      	beq.n	8010f14 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8010f00:	2100      	movs	r1, #0
 8010f02:	68f8      	ldr	r0, [r7, #12]
 8010f04:	f003 f8cc 	bl	80140a0 <lfs_fs_deorphan>
 8010f08:	6138      	str	r0, [r7, #16]
        if (err) {
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <lfs_dir_commit+0x40>
            return err;
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	e000      	b.n	8010f16 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8010f14:	2300      	movs	r3, #0
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3718      	adds	r7, #24
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
	...

08010f20 <lfs_mkdir_>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 8010f20:	b5b0      	push	{r4, r5, r7, lr}
 8010f22:	b0b8      	sub	sp, #224	@ 0xe0
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f003 fa68 	bl	8014400 <lfs_fs_forceconsistency>
 8010f30:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 8010f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d002      	beq.n	8010f42 <lfs_mkdir_+0x22>
        return err;
 8010f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f40:	e128      	b.n	8011194 <lfs_mkdir_+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 8010f4a:	f107 00ae 	add.w	r0, r7, #174	@ 0xae
 8010f4e:	463a      	mov	r2, r7
 8010f50:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8010f54:	f103 0108 	add.w	r1, r3, #8
 8010f58:	4603      	mov	r3, r0
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f7fe fa72 	bl	800f444 <lfs_dir_find>
 8010f60:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8010f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f68:	f113 0f02 	cmn.w	r3, #2
 8010f6c:	d105      	bne.n	8010f7a <lfs_mkdir_+0x5a>
 8010f6e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8010f72:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d109      	bne.n	8010f8e <lfs_mkdir_+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 8010f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	da02      	bge.n	8010f88 <lfs_mkdir_+0x68>
 8010f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f86:	e105      	b.n	8011194 <lfs_mkdir_+0x274>
 8010f88:	f06f 0310 	mvn.w	r3, #16
 8010f8c:	e102      	b.n	8011194 <lfs_mkdir_+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7ef f985 	bl	80002a0 <strlen>
 8010f96:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    if (nlen > lfs->name_max) {
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f9e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d902      	bls.n	8010fac <lfs_mkdir_+0x8c>
        return LFS_ERR_NAMETOOLONG;
 8010fa6:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8010faa:	e0f3      	b.n	8011194 <lfs_mkdir_+0x274>
    }

    // build up new directory
    lfs_alloc_ckpoint(lfs);
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f7fc fe1c 	bl	800dbea <lfs_alloc_ckpoint>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 8010fb2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f7fe fd63 	bl	800fa84 <lfs_dir_alloc>
 8010fbe:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 8010fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d002      	beq.n	8010fd0 <lfs_mkdir_+0xb0>
        return err;
 8010fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010fce:	e0e1      	b.n	8011194 <lfs_mkdir_+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8010fd0:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8010fd4:	f107 05b8 	add.w	r5, r7, #184	@ 0xb8
 8010fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010fdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8010fe4:	e012      	b.n	801100c <lfs_mkdir_+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 8010fe6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8010fea:	f103 0218 	add.w	r2, r3, #24
 8010fee:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7fe f913 	bl	800f220 <lfs_dir_fetch>
 8010ffa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 8010ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011002:	2b00      	cmp	r3, #0
 8011004:	d002      	beq.n	801100c <lfs_mkdir_+0xec>
            return err;
 8011006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801100a:	e0c3      	b.n	8011194 <lfs_mkdir_+0x274>
    while (pred.split) {
 801100c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011010:	2b00      	cmp	r3, #0
 8011012:	d1e8      	bne.n	8010fe6 <lfs_mkdir_+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8011014:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011018:	3318      	adds	r3, #24
 801101a:	4618      	mov	r0, r3
 801101c:	f7fc faf9 	bl	800d612 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8011020:	4b5e      	ldr	r3, [pc, #376]	@ (801119c <lfs_mkdir_+0x27c>)
 8011022:	667b      	str	r3, [r7, #100]	@ 0x64
 8011024:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011028:	3318      	adds	r3, #24
 801102a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801102c:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8011030:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8011034:	2301      	movs	r3, #1
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f7ff ff4c 	bl	8010ed4 <lfs_dir_commit>
 801103c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8011040:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011044:	3318      	adds	r3, #24
 8011046:	4618      	mov	r0, r3
 8011048:	f7fc fac9 	bl	800d5de <lfs_pair_fromle32>
    if (err) {
 801104c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011050:	2b00      	cmp	r3, #0
 8011052:	d002      	beq.n	801105a <lfs_mkdir_+0x13a>
        return err;
 8011054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011058:	e09c      	b.n	8011194 <lfs_mkdir_+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 801105a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 801105e:	2b00      	cmp	r3, #0
 8011060:	d04c      	beq.n	80110fc <lfs_mkdir_+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8011062:	2101      	movs	r1, #1
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f002 fea9 	bl	8013dbc <lfs_fs_preporphans>
 801106a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 801106e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011072:	2b00      	cmp	r3, #0
 8011074:	d002      	beq.n	801107c <lfs_mkdir_+0x15c>
            return err;
 8011076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801107a:	e08b      	b.n	8011194 <lfs_mkdir_+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 801107c:	2300      	movs	r3, #0
 801107e:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
        cwd.id = 0;
 8011082:	2300      	movs	r3, #0
 8011084:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
        lfs->mlist = &cwd;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 801108e:	629a      	str	r2, [r3, #40]	@ 0x28

        lfs_pair_tole32(dir.pair);
 8011090:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011094:	4618      	mov	r0, r3
 8011096:	f7fc fabc 	bl	800d612 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801109a:	4b40      	ldr	r3, [pc, #256]	@ (801119c <lfs_mkdir_+0x27c>)
 801109c:	617b      	str	r3, [r7, #20]
 801109e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80110a2:	61bb      	str	r3, [r7, #24]
 80110a4:	f107 0214 	add.w	r2, r7, #20
 80110a8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80110ac:	2301      	movs	r3, #1
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f7ff ff10 	bl	8010ed4 <lfs_dir_commit>
 80110b4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 80110b8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fc fa8e 	bl	800d5de <lfs_pair_fromle32>
        if (err) {
 80110c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d006      	beq.n	80110d8 <lfs_mkdir_+0x1b8>
            lfs->mlist = cwd.next;
 80110ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 80110d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110d6:	e05d      	b.n	8011194 <lfs_mkdir_+0x274>
        }

        lfs->mlist = cwd.next;
 80110d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	629a      	str	r2, [r3, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 80110e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f002 fe69 	bl	8013dbc <lfs_fs_preporphans>
 80110ea:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 80110ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d002      	beq.n	80110fc <lfs_mkdir_+0x1dc>
            return err;
 80110f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110fa:	e04b      	b.n	8011194 <lfs_mkdir_+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 80110fc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011100:	4618      	mov	r0, r3
 8011102:	f7fc fa86 	bl	800d612 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8011106:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 801110a:	029b      	lsls	r3, r3, #10
 801110c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011110:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011116:	2300      	movs	r3, #0
 8011118:	643b      	str	r3, [r7, #64]	@ 0x40
 801111a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 801111e:	029a      	lsls	r2, r3, #10
 8011120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011124:	4313      	orrs	r3, r2
 8011126:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801112a:	647b      	str	r3, [r7, #68]	@ 0x44
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011130:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8011134:	029b      	lsls	r3, r3, #10
 8011136:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801113a:	f043 0308 	orr.w	r3, r3, #8
 801113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011140:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011144:	653b      	str	r3, [r7, #80]	@ 0x50
 8011146:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 801114a:	f083 0301 	eor.w	r3, r3, #1
 801114e:	b2db      	uxtb	r3, r3
 8011150:	2b00      	cmp	r3, #0
 8011152:	d001      	beq.n	8011158 <lfs_mkdir_+0x238>
 8011154:	4b11      	ldr	r3, [pc, #68]	@ (801119c <lfs_mkdir_+0x27c>)
 8011156:	e000      	b.n	801115a <lfs_mkdir_+0x23a>
 8011158:	2300      	movs	r3, #0
 801115a:	657b      	str	r3, [r7, #84]	@ 0x54
 801115c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011160:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011162:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8011166:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801116a:	f103 0108 	add.w	r1, r3, #8
 801116e:	2304      	movs	r3, #4
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f7ff feaf 	bl	8010ed4 <lfs_dir_commit>
 8011176:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 801117a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801117e:	4618      	mov	r0, r3
 8011180:	f7fc fa2d 	bl	800d5de <lfs_pair_fromle32>
    if (err) {
 8011184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011188:	2b00      	cmp	r3, #0
 801118a:	d002      	beq.n	8011192 <lfs_mkdir_+0x272>
        return err;
 801118c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011190:	e000      	b.n	8011194 <lfs_mkdir_+0x274>
    }

    return 0;
 8011192:	2300      	movs	r3, #0
}
 8011194:	4618      	mov	r0, r3
 8011196:	37e0      	adds	r7, #224	@ 0xe0
 8011198:	46bd      	mov	sp, r7
 801119a:	bdb0      	pop	{r4, r5, r7, pc}
 801119c:	600ffc08 	.word	0x600ffc08

080111a0 <lfs_dir_open_>:
#endif

static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80111a0:	b590      	push	{r4, r7, lr}
 80111a2:	b08d      	sub	sp, #52	@ 0x34
 80111a4:	af02      	add	r7, sp, #8
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	f103 0108 	add.w	r1, r3, #8
 80111b2:	1d3a      	adds	r2, r7, #4
 80111b4:	2300      	movs	r3, #0
 80111b6:	68f8      	ldr	r0, [r7, #12]
 80111b8:	f7fe f944 	bl	800f444 <lfs_dir_find>
 80111bc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (tag < 0) {
 80111be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	da01      	bge.n	80111c8 <lfs_dir_open_+0x28>
        return tag;
 80111c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c6:	e05e      	b.n	8011286 <lfs_dir_open_+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80111c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fc fa7c 	bl	800d6c8 <lfs_tag_type3>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b02      	cmp	r3, #2
 80111d4:	d002      	beq.n	80111dc <lfs_dir_open_+0x3c>
        return LFS_ERR_NOTDIR;
 80111d6:	f06f 0313 	mvn.w	r3, #19
 80111da:	e054      	b.n	8011286 <lfs_dir_open_+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 80111dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fc fa9c 	bl	800d71c <lfs_tag_id>
 80111e4:	4603      	mov	r3, r0
 80111e6:	461a      	mov	r2, r3
 80111e8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d106      	bne.n	80111fe <lfs_dir_open_+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	6a1b      	ldr	r3, [r3, #32]
 80111f4:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111fa:	61bb      	str	r3, [r7, #24]
 80111fc:	e01f      	b.n	801123e <lfs_dir_open_+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8011204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011206:	4618      	mov	r0, r3
 8011208:	f7fc fa88 	bl	800d71c <lfs_tag_id>
 801120c:	4603      	mov	r3, r0
 801120e:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8011210:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011214:	f043 0308 	orr.w	r3, r3, #8
 8011218:	f107 0214 	add.w	r2, r7, #20
 801121c:	9200      	str	r2, [sp, #0]
 801121e:	4a1c      	ldr	r2, [pc, #112]	@ (8011290 <lfs_dir_open_+0xf0>)
 8011220:	4621      	mov	r1, r4
 8011222:	68f8      	ldr	r0, [r7, #12]
 8011224:	f7fc fef6 	bl	800e014 <lfs_dir_get>
 8011228:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 801122a:	6a3b      	ldr	r3, [r7, #32]
 801122c:	2b00      	cmp	r3, #0
 801122e:	da01      	bge.n	8011234 <lfs_dir_open_+0x94>
            return res;
 8011230:	6a3b      	ldr	r3, [r7, #32]
 8011232:	e028      	b.n	8011286 <lfs_dir_open_+0xe6>
        }
        lfs_pair_fromle32(pair);
 8011234:	f107 0314 	add.w	r3, r7, #20
 8011238:	4618      	mov	r0, r3
 801123a:	f7fc f9d0 	bl	800d5de <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	3308      	adds	r3, #8
 8011242:	f107 0214 	add.w	r2, r7, #20
 8011246:	4619      	mov	r1, r3
 8011248:	68f8      	ldr	r0, [r7, #12]
 801124a:	f7fd ffe9 	bl	800f220 <lfs_dir_fetch>
 801124e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8011250:	69fb      	ldr	r3, [r7, #28]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d001      	beq.n	801125a <lfs_dir_open_+0xba>
        return err;
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	e015      	b.n	8011286 <lfs_dir_open_+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	689a      	ldr	r2, [r3, #8]
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	62da      	str	r2, [r3, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	68da      	ldr	r2, [r3, #12]
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	631a      	str	r2, [r3, #48]	@ 0x30
    dir->id = 0;
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	2200      	movs	r2, #0
 801126e:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	2200      	movs	r2, #0
 8011274:	629a      	str	r2, [r3, #40]	@ 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	2202      	movs	r2, #2
 801127a:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801127c:	68b9      	ldr	r1, [r7, #8]
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f7fc fc77 	bl	800db72 <lfs_mlist_append>

    return 0;
 8011284:	2300      	movs	r3, #0
}
 8011286:	4618      	mov	r0, r3
 8011288:	372c      	adds	r7, #44	@ 0x2c
 801128a:	46bd      	mov	sp, r7
 801128c:	bd90      	pop	{r4, r7, pc}
 801128e:	bf00      	nop
 8011290:	700ffc00 	.word	0x700ffc00

08011294 <lfs_dir_close_>:

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801129e:	6839      	ldr	r1, [r7, #0]
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f7fc fc44 	bl	800db2e <lfs_mlist_remove>

    return 0;
 80112a6:	2300      	movs	r3, #0
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <lfs_dir_read_>:

static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b086      	sub	sp, #24
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 80112bc:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80112c0:	2100      	movs	r1, #0
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f014 fe48 	bl	8025f58 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d110      	bne.n	80112f2 <lfs_dir_read_+0x42>
        info->type = LFS_TYPE_DIR;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2202      	movs	r2, #2
 80112d4:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	3308      	adds	r3, #8
 80112da:	4935      	ldr	r1, [pc, #212]	@ (80113b0 <lfs_dir_read_+0x100>)
 80112dc:	461a      	mov	r2, r3
 80112de:	460b      	mov	r3, r1
 80112e0:	881b      	ldrh	r3, [r3, #0]
 80112e2:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112e8:	1c5a      	adds	r2, r3, #1
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 80112ee:	2301      	movs	r3, #1
 80112f0:	e05a      	b.n	80113a8 <lfs_dir_read_+0xf8>
    } else if (dir->pos == 1) {
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	d110      	bne.n	801131c <lfs_dir_read_+0x6c>
        info->type = LFS_TYPE_DIR;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2202      	movs	r2, #2
 80112fe:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	3308      	adds	r3, #8
 8011304:	4a2b      	ldr	r2, [pc, #172]	@ (80113b4 <lfs_dir_read_+0x104>)
 8011306:	8811      	ldrh	r1, [r2, #0]
 8011308:	7892      	ldrb	r2, [r2, #2]
 801130a:	8019      	strh	r1, [r3, #0]
 801130c:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011312:	1c5a      	adds	r2, r3, #1
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 8011318:	2301      	movs	r3, #1
 801131a:	e045      	b.n	80113a8 <lfs_dir_read_+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	889a      	ldrh	r2, [r3, #4]
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	8b9b      	ldrh	r3, [r3, #28]
 8011324:	429a      	cmp	r2, r3
 8011326:	d11a      	bne.n	801135e <lfs_dir_read_+0xae>
            if (!dir->m.split) {
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	7fdb      	ldrb	r3, [r3, #31]
 801132c:	f083 0301 	eor.w	r3, r3, #1
 8011330:	b2db      	uxtb	r3, r3
 8011332:	2b00      	cmp	r3, #0
 8011334:	d001      	beq.n	801133a <lfs_dir_read_+0x8a>
                return false;
 8011336:	2300      	movs	r3, #0
 8011338:	e036      	b.n	80113a8 <lfs_dir_read_+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	f103 0108 	add.w	r1, r3, #8
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	3320      	adds	r3, #32
 8011344:	461a      	mov	r2, r3
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	f7fd ff6a 	bl	800f220 <lfs_dir_fetch>
 801134c:	6178      	str	r0, [r7, #20]
            if (err) {
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d001      	beq.n	8011358 <lfs_dir_read_+0xa8>
                return err;
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	e027      	b.n	80113a8 <lfs_dir_read_+0xf8>
            }

            dir->id = 0;
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	2200      	movs	r2, #0
 801135c:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	f103 0108 	add.w	r1, r3, #8
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	889a      	ldrh	r2, [r3, #4]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	68f8      	ldr	r0, [r7, #12]
 801136c:	f7fd ffa6 	bl	800f2bc <lfs_dir_getinfo>
 8011370:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d005      	beq.n	8011384 <lfs_dir_read_+0xd4>
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	f113 0f02 	cmn.w	r3, #2
 801137e:	d001      	beq.n	8011384 <lfs_dir_read_+0xd4>
            return err;
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	e011      	b.n	80113a8 <lfs_dir_read_+0xf8>
        }

        dir->id += 1;
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	889b      	ldrh	r3, [r3, #4]
 8011388:	3301      	adds	r3, #1
 801138a:	b29a      	uxth	r2, r3
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	f113 0f02 	cmn.w	r3, #2
 8011396:	d100      	bne.n	801139a <lfs_dir_read_+0xea>
    while (true) {
 8011398:	e7c0      	b.n	801131c <lfs_dir_read_+0x6c>
            break;
 801139a:	bf00      	nop
        }
    }

    dir->pos += 1;
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113a0:	1c5a      	adds	r2, r3, #1
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	629a      	str	r2, [r3, #40]	@ 0x28
    return true;
 80113a6:	2301      	movs	r3, #1
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	3718      	adds	r7, #24
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	080305ec 	.word	0x080305ec
 80113b4:	080305f0 	.word	0x080305f0

080113b8 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80113b8:	b590      	push	{r4, r7, lr}
 80113ba:	b087      	sub	sp, #28
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80113cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113ce:	3b08      	subs	r3, #8
 80113d0:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80113d2:	697a      	ldr	r2, [r7, #20]
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80113da:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d101      	bne.n	80113e6 <lfs_ctz_index+0x2e>
        return 0;
 80113e2:	2300      	movs	r3, #0
 80113e4:	e01c      	b.n	8011420 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	3b01      	subs	r3, #1
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fb fc79 	bl	800cce2 <lfs_popc>
 80113f0:	4603      	mov	r3, r0
 80113f2:	3302      	adds	r3, #2
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	697a      	ldr	r2, [r7, #20]
 80113f8:	1ad2      	subs	r2, r2, r3
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011400:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	68fa      	ldr	r2, [r7, #12]
 8011406:	fb02 f303 	mul.w	r3, r2, r3
 801140a:	697a      	ldr	r2, [r7, #20]
 801140c:	1ad4      	subs	r4, r2, r3
 801140e:	68f8      	ldr	r0, [r7, #12]
 8011410:	f7fb fc67 	bl	800cce2 <lfs_popc>
 8011414:	4603      	mov	r3, r0
 8011416:	009b      	lsls	r3, r3, #2
 8011418:	1ae2      	subs	r2, r4, r3
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	601a      	str	r2, [r3, #0]
    return i;
 801141e:	68fb      	ldr	r3, [r7, #12]
}
 8011420:	4618      	mov	r0, r3
 8011422:	371c      	adds	r7, #28
 8011424:	46bd      	mov	sp, r7
 8011426:	bd90      	pop	{r4, r7, pc}

08011428 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8011428:	b590      	push	{r4, r7, lr}
 801142a:	b08f      	sub	sp, #60	@ 0x3c
 801142c:	af04      	add	r7, sp, #16
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	60b9      	str	r1, [r7, #8]
 8011432:	607a      	str	r2, [r7, #4]
 8011434:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8011436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011438:	2b00      	cmp	r3, #0
 801143a:	d108      	bne.n	801144e <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 801143c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801143e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011442:	601a      	str	r2, [r3, #0]
        *off = 0;
 8011444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011446:	2200      	movs	r2, #0
 8011448:	601a      	str	r2, [r3, #0]
        return 0;
 801144a:	2300      	movs	r3, #0
 801144c:	e053      	b.n	80114f6 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801144e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011450:	3b01      	subs	r3, #1
 8011452:	617b      	str	r3, [r7, #20]
 8011454:	f107 0314 	add.w	r3, r7, #20
 8011458:	4619      	mov	r1, r3
 801145a:	68f8      	ldr	r0, [r7, #12]
 801145c:	f7ff ffac 	bl	80113b8 <lfs_ctz_index>
 8011460:	4603      	mov	r3, r0
 8011462:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8011464:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011468:	4619      	mov	r1, r3
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f7ff ffa4 	bl	80113b8 <lfs_ctz_index>
 8011470:	4603      	mov	r3, r0
 8011472:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8011474:	e034      	b.n	80114e0 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8011476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011478:	6a3b      	ldr	r3, [r7, #32]
 801147a:	1ad3      	subs	r3, r2, r3
 801147c:	3301      	adds	r3, #1
 801147e:	4618      	mov	r0, r3
 8011480:	f7fb fc10 	bl	800cca4 <lfs_npw2>
 8011484:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8011486:	1e5c      	subs	r4, r3, #1
 8011488:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801148a:	f7fb fc1b 	bl	800ccc4 <lfs_ctz>
 801148e:	4603      	mov	r3, r0
 8011490:	4619      	mov	r1, r3
 8011492:	4620      	mov	r0, r4
 8011494:	f7fb fbcf 	bl	800cc36 <lfs_min>
 8011498:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	69fa      	ldr	r2, [r7, #28]
 801149e:	0092      	lsls	r2, r2, #2
 80114a0:	2104      	movs	r1, #4
 80114a2:	9103      	str	r1, [sp, #12]
 80114a4:	4639      	mov	r1, r7
 80114a6:	9102      	str	r1, [sp, #8]
 80114a8:	9201      	str	r2, [sp, #4]
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	2304      	movs	r3, #4
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	68b9      	ldr	r1, [r7, #8]
 80114b2:	68f8      	ldr	r0, [r7, #12]
 80114b4:	f7fb fc9a 	bl	800cdec <lfs_bd_read>
 80114b8:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fb fc2a 	bl	800cd16 <lfs_fromle32>
 80114c2:	4603      	mov	r3, r0
 80114c4:	603b      	str	r3, [r7, #0]
        if (err) {
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d001      	beq.n	80114d0 <lfs_ctz_find+0xa8>
            return err;
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	e012      	b.n	80114f6 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80114d0:	2201      	movs	r2, #1
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	fa02 f303 	lsl.w	r3, r2, r3
 80114d8:	461a      	mov	r2, r3
 80114da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114dc:	1a9b      	subs	r3, r3, r2
 80114de:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 80114e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114e2:	6a3b      	ldr	r3, [r7, #32]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d8c6      	bhi.n	8011476 <lfs_ctz_find+0x4e>
    }

    *block = head;
 80114e8:	683a      	ldr	r2, [r7, #0]
 80114ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114ec:	601a      	str	r2, [r3, #0]
    *off = pos;
 80114ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80114f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114f2:	601a      	str	r2, [r3, #0]
    return 0;
 80114f4:	2300      	movs	r3, #0
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	372c      	adds	r7, #44	@ 0x2c
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd90      	pop	{r4, r7, pc}
	...

08011500 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8011500:	b580      	push	{r7, lr}
 8011502:	b092      	sub	sp, #72	@ 0x48
 8011504:	af04      	add	r7, sp, #16
 8011506:	60f8      	str	r0, [r7, #12]
 8011508:	60b9      	str	r1, [r7, #8]
 801150a:	607a      	str	r2, [r7, #4]
 801150c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 801150e:	f107 0320 	add.w	r3, r7, #32
 8011512:	4619      	mov	r1, r3
 8011514:	68f8      	ldr	r0, [r7, #12]
 8011516:	f7fc fbff 	bl	800dd18 <lfs_alloc>
 801151a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 801151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801151e:	2b00      	cmp	r3, #0
 8011520:	d001      	beq.n	8011526 <lfs_ctz_extend+0x26>
            return err;
 8011522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011524:	e0e9      	b.n	80116fa <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8011526:	6a3b      	ldr	r3, [r7, #32]
 8011528:	4619      	mov	r1, r3
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	f7fb ff9e 	bl	800d46c <lfs_bd_erase>
 8011530:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8011532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011534:	2b00      	cmp	r3, #0
 8011536:	d006      	beq.n	8011546 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8011538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801153a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801153e:	f000 80cb 	beq.w	80116d8 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8011542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011544:	e0d9      	b.n	80116fa <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8011546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011548:	2b00      	cmp	r3, #0
 801154a:	d107      	bne.n	801155c <lfs_ctz_extend+0x5c>
                *block = nblock;
 801154c:	6a3a      	ldr	r2, [r7, #32]
 801154e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011550:	601a      	str	r2, [r3, #0]
                *off = 0;
 8011552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011554:	2200      	movs	r2, #0
 8011556:	601a      	str	r2, [r3, #0]
                return 0;
 8011558:	2300      	movs	r3, #0
 801155a:	e0ce      	b.n	80116fa <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 801155c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801155e:	3b01      	subs	r3, #1
 8011560:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8011562:	f107 031c 	add.w	r3, r7, #28
 8011566:	4619      	mov	r1, r3
 8011568:	68f8      	ldr	r0, [r7, #12]
 801156a:	f7ff ff25 	bl	80113b8 <lfs_ctz_index>
 801156e:	4603      	mov	r3, r0
 8011570:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	3301      	adds	r3, #1
 8011576:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801157c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801157e:	69fb      	ldr	r3, [r7, #28]
 8011580:	429a      	cmp	r2, r3
 8011582:	d044      	beq.n	801160e <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8011584:	2300      	movs	r3, #0
 8011586:	637b      	str	r3, [r7, #52]	@ 0x34
 8011588:	e035      	b.n	80115f6 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 801158a:	69fa      	ldr	r2, [r7, #28]
 801158c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801158e:	1ad2      	subs	r2, r2, r3
 8011590:	2301      	movs	r3, #1
 8011592:	9303      	str	r3, [sp, #12]
 8011594:	f107 0317 	add.w	r3, r7, #23
 8011598:	9302      	str	r3, [sp, #8]
 801159a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801159c:	9301      	str	r3, [sp, #4]
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	9300      	str	r3, [sp, #0]
 80115a2:	4613      	mov	r3, r2
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	2100      	movs	r1, #0
 80115a8:	68f8      	ldr	r0, [r7, #12]
 80115aa:	f7fb fc1f 	bl	800cdec <lfs_bd_read>
 80115ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80115b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d001      	beq.n	80115ba <lfs_ctz_extend+0xba>
                        return err;
 80115b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b8:	e09f      	b.n	80116fa <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 80115ba:	6a3b      	ldr	r3, [r7, #32]
 80115bc:	2201      	movs	r2, #1
 80115be:	9203      	str	r2, [sp, #12]
 80115c0:	f107 0217 	add.w	r2, r7, #23
 80115c4:	9202      	str	r2, [sp, #8]
 80115c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115c8:	9201      	str	r2, [sp, #4]
 80115ca:	9300      	str	r3, [sp, #0]
 80115cc:	2301      	movs	r3, #1
 80115ce:	687a      	ldr	r2, [r7, #4]
 80115d0:	68b9      	ldr	r1, [r7, #8]
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f7fb fe9c 	bl	800d310 <lfs_bd_prog>
 80115d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80115da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d007      	beq.n	80115f0 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80115e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80115e6:	d101      	bne.n	80115ec <lfs_ctz_extend+0xec>
                            goto relocate;
 80115e8:	bf00      	nop
                    goto relocate;
 80115ea:	e075      	b.n	80116d8 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 80115ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 80115ee:	e084      	b.n	80116fa <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 80115f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115f2:	3301      	adds	r3, #1
 80115f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d3c5      	bcc.n	801158a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 80115fe:	6a3a      	ldr	r2, [r7, #32]
 8011600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011602:	601a      	str	r2, [r3, #0]
                *off = noff;
 8011604:	69fa      	ldr	r2, [r7, #28]
 8011606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011608:	601a      	str	r2, [r3, #0]
                return 0;
 801160a:	2300      	movs	r3, #0
 801160c:	e075      	b.n	80116fa <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 801160e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011610:	3301      	adds	r3, #1
 8011612:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8011614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011616:	f7fb fb55 	bl	800ccc4 <lfs_ctz>
 801161a:	4603      	mov	r3, r0
 801161c:	3301      	adds	r3, #1
 801161e:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8011624:	2300      	movs	r3, #0
 8011626:	633b      	str	r3, [r7, #48]	@ 0x30
 8011628:	e049      	b.n	80116be <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 801162a:	69bb      	ldr	r3, [r7, #24]
 801162c:	4618      	mov	r0, r3
 801162e:	f7fb fb7d 	bl	800cd2c <lfs_tole32>
 8011632:	4603      	mov	r3, r0
 8011634:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8011636:	6a3b      	ldr	r3, [r7, #32]
 8011638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801163a:	0092      	lsls	r2, r2, #2
 801163c:	2104      	movs	r1, #4
 801163e:	9103      	str	r1, [sp, #12]
 8011640:	f107 0118 	add.w	r1, r7, #24
 8011644:	9102      	str	r1, [sp, #8]
 8011646:	9201      	str	r2, [sp, #4]
 8011648:	9300      	str	r3, [sp, #0]
 801164a:	2301      	movs	r3, #1
 801164c:	687a      	ldr	r2, [r7, #4]
 801164e:	68b9      	ldr	r1, [r7, #8]
 8011650:	68f8      	ldr	r0, [r7, #12]
 8011652:	f7fb fe5d 	bl	800d310 <lfs_bd_prog>
 8011656:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8011658:	69bb      	ldr	r3, [r7, #24]
 801165a:	4618      	mov	r0, r3
 801165c:	f7fb fb5b 	bl	800cd16 <lfs_fromle32>
 8011660:	4603      	mov	r3, r0
 8011662:	61bb      	str	r3, [r7, #24]
                if (err) {
 8011664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011666:	2b00      	cmp	r3, #0
 8011668:	d005      	beq.n	8011676 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 801166a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801166c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011670:	d034      	beq.n	80116dc <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8011672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011674:	e041      	b.n	80116fa <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8011676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011678:	3b01      	subs	r3, #1
 801167a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801167c:	429a      	cmp	r2, r3
 801167e:	d01b      	beq.n	80116b8 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8011680:	69bb      	ldr	r3, [r7, #24]
 8011682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011684:	0092      	lsls	r2, r2, #2
 8011686:	2104      	movs	r1, #4
 8011688:	9103      	str	r1, [sp, #12]
 801168a:	f107 0118 	add.w	r1, r7, #24
 801168e:	9102      	str	r1, [sp, #8]
 8011690:	9201      	str	r2, [sp, #4]
 8011692:	9300      	str	r3, [sp, #0]
 8011694:	2304      	movs	r3, #4
 8011696:	687a      	ldr	r2, [r7, #4]
 8011698:	2100      	movs	r1, #0
 801169a:	68f8      	ldr	r0, [r7, #12]
 801169c:	f7fb fba6 	bl	800cdec <lfs_bd_read>
 80116a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7fb fb36 	bl	800cd16 <lfs_fromle32>
 80116aa:	4603      	mov	r3, r0
 80116ac:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80116ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d001      	beq.n	80116b8 <lfs_ctz_extend+0x1b8>
                        return err;
 80116b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116b6:	e020      	b.n	80116fa <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80116b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116ba:	3301      	adds	r3, #1
 80116bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80116be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d3b1      	bcc.n	801162a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 80116c6:	6a3a      	ldr	r2, [r7, #32]
 80116c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116ca:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80116cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ce:	009a      	lsls	r2, r3, #2
 80116d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116d2:	601a      	str	r2, [r3, #0]
            return 0;
 80116d4:	2300      	movs	r3, #0
 80116d6:	e010      	b.n	80116fa <lfs_ctz_extend+0x1fa>
                    goto relocate;
 80116d8:	bf00      	nop
 80116da:	e000      	b.n	80116de <lfs_ctz_extend+0x1de>
                        goto relocate;
 80116dc:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80116de:	6a3b      	ldr	r3, [r7, #32]
 80116e0:	4a08      	ldr	r2, [pc, #32]	@ (8011704 <lfs_ctz_extend+0x204>)
 80116e2:	9200      	str	r2, [sp, #0]
 80116e4:	f640 32a6 	movw	r2, #2982	@ 0xba6
 80116e8:	4907      	ldr	r1, [pc, #28]	@ (8011708 <lfs_ctz_extend+0x208>)
 80116ea:	4808      	ldr	r0, [pc, #32]	@ (801170c <lfs_ctz_extend+0x20c>)
 80116ec:	f011 ff08 	bl	8023500 <printf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 80116f0:	68b9      	ldr	r1, [r7, #8]
 80116f2:	68f8      	ldr	r0, [r7, #12]
 80116f4:	f7fb fb55 	bl	800cda2 <lfs_cache_drop>
    while (true) {
 80116f8:	e709      	b.n	801150e <lfs_ctz_extend+0xe>
    }
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3738      	adds	r7, #56	@ 0x38
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	0803059c 	.word	0x0803059c
 8011708:	08030474 	.word	0x08030474
 801170c:	0803061c 	.word	0x0803061c

08011710 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8011710:	b580      	push	{r7, lr}
 8011712:	b090      	sub	sp, #64	@ 0x40
 8011714:	af04      	add	r7, sp, #16
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	607a      	str	r2, [r7, #4]
 801171c:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 801171e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011720:	2b00      	cmp	r3, #0
 8011722:	d101      	bne.n	8011728 <lfs_ctz_traverse+0x18>
        return 0;
 8011724:	2300      	movs	r3, #0
 8011726:	e06b      	b.n	8011800 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8011728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801172a:	3b01      	subs	r3, #1
 801172c:	61fb      	str	r3, [r7, #28]
 801172e:	f107 031c 	add.w	r3, r7, #28
 8011732:	4619      	mov	r1, r3
 8011734:	68f8      	ldr	r0, [r7, #12]
 8011736:	f7ff fe3f 	bl	80113b8 <lfs_ctz_index>
 801173a:	4603      	mov	r3, r0
 801173c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 801173e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011740:	6839      	ldr	r1, [r7, #0]
 8011742:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011744:	4798      	blx	r3
 8011746:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8011748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801174a:	2b00      	cmp	r3, #0
 801174c:	d001      	beq.n	8011752 <lfs_ctz_traverse+0x42>
            return err;
 801174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011750:	e056      	b.n	8011800 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8011752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011754:	2b00      	cmp	r3, #0
 8011756:	d101      	bne.n	801175c <lfs_ctz_traverse+0x4c>
            return 0;
 8011758:	2300      	movs	r3, #0
 801175a:	e051      	b.n	8011800 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 801175c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801175e:	f003 0301 	and.w	r3, r3, #1
 8011762:	f1c3 0302 	rsb	r3, r3, #2
 8011766:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8011768:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 801176a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 801176c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 801176e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8011770:	9303      	str	r3, [sp, #12]
 8011772:	f107 0314 	add.w	r3, r7, #20
 8011776:	9302      	str	r3, [sp, #8]
 8011778:	2300      	movs	r3, #0
 801177a:	9301      	str	r3, [sp, #4]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	9300      	str	r3, [sp, #0]
 8011780:	4613      	mov	r3, r2
 8011782:	687a      	ldr	r2, [r7, #4]
 8011784:	68b9      	ldr	r1, [r7, #8]
 8011786:	68f8      	ldr	r0, [r7, #12]
 8011788:	f7fb fb30 	bl	800cdec <lfs_bd_read>
 801178c:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	4618      	mov	r0, r3
 8011792:	f7fb fac0 	bl	800cd16 <lfs_fromle32>
 8011796:	4603      	mov	r3, r0
 8011798:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 801179a:	69bb      	ldr	r3, [r7, #24]
 801179c:	4618      	mov	r0, r3
 801179e:	f7fb faba 	bl	800cd16 <lfs_fromle32>
 80117a2:	4603      	mov	r3, r0
 80117a4:	61bb      	str	r3, [r7, #24]
        if (err) {
 80117a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d001      	beq.n	80117b0 <lfs_ctz_traverse+0xa0>
            return err;
 80117ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ae:	e027      	b.n	8011800 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 80117b0:	2300      	movs	r3, #0
 80117b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117b4:	e012      	b.n	80117dc <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 80117b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117b8:	009b      	lsls	r3, r3, #2
 80117ba:	3330      	adds	r3, #48	@ 0x30
 80117bc:	443b      	add	r3, r7
 80117be:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80117c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117c4:	4611      	mov	r1, r2
 80117c6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80117c8:	4798      	blx	r3
 80117ca:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 80117cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d001      	beq.n	80117d6 <lfs_ctz_traverse+0xc6>
                return err;
 80117d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d4:	e014      	b.n	8011800 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 80117d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117d8:	3301      	adds	r3, #1
 80117da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117dc:	6a3b      	ldr	r3, [r7, #32]
 80117de:	3b01      	subs	r3, #1
 80117e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117e2:	429a      	cmp	r2, r3
 80117e4:	dbe7      	blt.n	80117b6 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 80117e6:	6a3b      	ldr	r3, [r7, #32]
 80117e8:	3b01      	subs	r3, #1
 80117ea:	009b      	lsls	r3, r3, #2
 80117ec:	3330      	adds	r3, #48	@ 0x30
 80117ee:	443b      	add	r3, r7
 80117f0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80117f4:	603b      	str	r3, [r7, #0]
        index -= count;
 80117f6:	6a3b      	ldr	r3, [r7, #32]
 80117f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117fa:	1ad3      	subs	r3, r2, r3
 80117fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 80117fe:	e79e      	b.n	801173e <lfs_ctz_traverse+0x2e>
    }
}
 8011800:	4618      	mov	r0, r3
 8011802:	3730      	adds	r7, #48	@ 0x30
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}

08011808 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8011808:	b5b0      	push	{r4, r5, r7, lr}
 801180a:	b09a      	sub	sp, #104	@ 0x68
 801180c:	af02      	add	r7, sp, #8
 801180e:	60f8      	str	r0, [r7, #12]
 8011810:	60b9      	str	r1, [r7, #8]
 8011812:	607a      	str	r2, [r7, #4]
 8011814:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	f003 0302 	and.w	r3, r3, #2
 801181c:	2b00      	cmp	r3, #0
 801181e:	d008      	beq.n	8011832 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8011820:	68f8      	ldr	r0, [r7, #12]
 8011822:	f002 fded 	bl	8014400 <lfs_fs_forceconsistency>
 8011826:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8011828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801182a:	2b00      	cmp	r3, #0
 801182c:	d001      	beq.n	8011832 <lfs_file_opencfg_+0x2a>
            return err;
 801182e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011830:	e1b0      	b.n	8011b94 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011836:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8011838:	683a      	ldr	r2, [r7, #0]
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	2200      	movs	r2, #0
 8011842:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	2200      	movs	r2, #0
 8011848:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	2200      	movs	r2, #0
 801184e:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	f103 0108 	add.w	r1, r3, #8
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	3304      	adds	r3, #4
 801185a:	1d3a      	adds	r2, r7, #4
 801185c:	68f8      	ldr	r0, [r7, #12]
 801185e:	f7fd fdf1 	bl	800f444 <lfs_dir_find>
 8011862:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8011864:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011866:	2b00      	cmp	r3, #0
 8011868:	da0c      	bge.n	8011884 <lfs_file_opencfg_+0x7c>
 801186a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801186c:	f113 0f02 	cmn.w	r3, #2
 8011870:	d105      	bne.n	801187e <lfs_file_opencfg_+0x76>
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	889b      	ldrh	r3, [r3, #4]
 8011876:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801187a:	4293      	cmp	r3, r2
 801187c:	d102      	bne.n	8011884 <lfs_file_opencfg_+0x7c>
        err = tag;
 801187e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011880:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8011882:	e17c      	b.n	8011b7e <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	2201      	movs	r2, #1
 8011888:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801188a:	68b9      	ldr	r1, [r7, #8]
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f7fc f970 	bl	800db72 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8011892:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011894:	f113 0f02 	cmn.w	r3, #2
 8011898:	d14e      	bne.n	8011938 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d103      	bne.n	80118ac <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 80118a4:	f06f 0301 	mvn.w	r3, #1
 80118a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80118aa:	e168      	b.n	8011b7e <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7ee fcf6 	bl	80002a0 <strlen>
 80118b4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80118bc:	429a      	cmp	r2, r3
 80118be:	d903      	bls.n	80118c8 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 80118c0:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80118c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80118c6:	e15a      	b.n	8011b7e <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	f103 0108 	add.w	r1, r3, #8
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	889b      	ldrh	r3, [r3, #4]
 80118d2:	029b      	lsls	r3, r3, #10
 80118d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80118d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80118dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80118de:	2300      	movs	r3, #0
 80118e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	889b      	ldrh	r3, [r3, #4]
 80118e6:	029a      	lsls	r2, r3, #10
 80118e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118ea:	4313      	orrs	r3, r2
 80118ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80118f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	889b      	ldrh	r3, [r3, #4]
 80118fa:	029b      	lsls	r3, r3, #10
 80118fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011900:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011906:	2300      	movs	r3, #0
 8011908:	643b      	str	r3, [r7, #64]	@ 0x40
 801190a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801190e:	2303      	movs	r3, #3
 8011910:	68f8      	ldr	r0, [r7, #12]
 8011912:	f7ff fadf 	bl	8010ed4 <lfs_dir_commit>
 8011916:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8011918:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801191a:	f113 0f1c 	cmn.w	r3, #28
 801191e:	d001      	beq.n	8011924 <lfs_file_opencfg_+0x11c>
 8011920:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011922:	e001      	b.n	8011928 <lfs_file_opencfg_+0x120>
 8011924:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8011928:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 801192a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801192c:	2b00      	cmp	r3, #0
 801192e:	f040 8125 	bne.w	8011b7c <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8011932:	4b9a      	ldr	r3, [pc, #616]	@ (8011b9c <lfs_file_opencfg_+0x394>)
 8011934:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011936:	e044      	b.n	80119c2 <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801193e:	2b00      	cmp	r3, #0
 8011940:	d003      	beq.n	801194a <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 8011942:	f06f 0310 	mvn.w	r3, #16
 8011946:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8011948:	e119      	b.n	8011b7e <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801194a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801194c:	4618      	mov	r0, r3
 801194e:	f7fb febb 	bl	800d6c8 <lfs_tag_type3>
 8011952:	4603      	mov	r3, r0
 8011954:	2b01      	cmp	r3, #1
 8011956:	d003      	beq.n	8011960 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8011958:	f06f 0314 	mvn.w	r3, #20
 801195c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 801195e:	e10e      	b.n	8011b7e <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011966:	2b00      	cmp	r3, #0
 8011968:	d00e      	beq.n	8011988 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	889b      	ldrh	r3, [r3, #4]
 801196e:	029b      	lsls	r3, r3, #10
 8011970:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011974:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011978:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801197e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	631a      	str	r2, [r3, #48]	@ 0x30
 8011986:	e01c      	b.n	80119c2 <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	889b      	ldrh	r3, [r3, #4]
 8011992:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8011994:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011998:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801199c:	68ba      	ldr	r2, [r7, #8]
 801199e:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80119a0:	9200      	str	r2, [sp, #0]
 80119a2:	4a7f      	ldr	r2, [pc, #508]	@ (8011ba0 <lfs_file_opencfg_+0x398>)
 80119a4:	68f8      	ldr	r0, [r7, #12]
 80119a6:	f7fc fb35 	bl	800e014 <lfs_dir_get>
 80119aa:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 80119ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	da02      	bge.n	80119b8 <lfs_file_opencfg_+0x1b0>
            err = tag;
 80119b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80119b6:	e0e2      	b.n	8011b7e <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	3328      	adds	r3, #40	@ 0x28
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fb fff9 	bl	800d9b4 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80119c2:	2300      	movs	r3, #0
 80119c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80119c6:	e063      	b.n	8011a90 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119cc:	f003 0301 	and.w	r3, r3, #1
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d03c      	beq.n	8011a4e <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119de:	6859      	ldr	r1, [r3, #4]
 80119e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80119e2:	4613      	mov	r3, r2
 80119e4:	005b      	lsls	r3, r3, #1
 80119e6:	4413      	add	r3, r2
 80119e8:	009b      	lsls	r3, r3, #2
 80119ea:	440b      	add	r3, r1
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80119f2:	051a      	lsls	r2, r3, #20
 80119f4:	68bb      	ldr	r3, [r7, #8]
 80119f6:	889b      	ldrh	r3, [r3, #4]
 80119f8:	029b      	lsls	r3, r3, #10
 80119fa:	ea42 0103 	orr.w	r1, r2, r3
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a02:	6858      	ldr	r0, [r3, #4]
 8011a04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a06:	4613      	mov	r3, r2
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	4413      	add	r3, r2
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	4403      	add	r3, r0
 8011a10:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011a12:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a1a:	6859      	ldr	r1, [r3, #4]
 8011a1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a1e:	4613      	mov	r3, r2
 8011a20:	005b      	lsls	r3, r3, #1
 8011a22:	4413      	add	r3, r2
 8011a24:	009b      	lsls	r3, r3, #2
 8011a26:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	9300      	str	r3, [sp, #0]
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	4a5d      	ldr	r2, [pc, #372]	@ (8011ba4 <lfs_file_opencfg_+0x39c>)
 8011a30:	4621      	mov	r1, r4
 8011a32:	68f8      	ldr	r0, [r7, #12]
 8011a34:	f7fc faee 	bl	800e014 <lfs_dir_get>
 8011a38:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8011a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	da06      	bge.n	8011a4e <lfs_file_opencfg_+0x246>
 8011a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a42:	f113 0f02 	cmn.w	r3, #2
 8011a46:	d002      	beq.n	8011a4e <lfs_file_opencfg_+0x246>
                err = res;
 8011a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8011a4c:	e097      	b.n	8011b7e <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a52:	f003 0302 	and.w	r3, r3, #2
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d017      	beq.n	8011a8a <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a5e:	6859      	ldr	r1, [r3, #4]
 8011a60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a62:	4613      	mov	r3, r2
 8011a64:	005b      	lsls	r3, r3, #1
 8011a66:	4413      	add	r3, r2
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	440b      	add	r3, r1
 8011a6c:	689a      	ldr	r2, [r3, #8]
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d903      	bls.n	8011a7e <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 8011a76:	f06f 031b 	mvn.w	r3, #27
 8011a7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8011a7c:	e07f      	b.n	8011b7e <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8011a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a94:	689b      	ldr	r3, [r3, #8]
 8011a96:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d395      	bcc.n	80119c8 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d005      	beq.n	8011ab2 <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	64da      	str	r2, [r3, #76]	@ 0x4c
 8011ab0:	e010      	b.n	8011ad4 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fb f95b 	bl	800cd74 <lfs_malloc>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d103      	bne.n	8011ad4 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 8011acc:	f06f 030b 	mvn.w	r3, #11
 8011ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8011ad2:	e054      	b.n	8011b7e <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	3340      	adds	r3, #64	@ 0x40
 8011ad8:	4619      	mov	r1, r3
 8011ada:	68f8      	ldr	r0, [r7, #12]
 8011adc:	f7fb f970 	bl	800cdc0 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8011ae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fb fdf0 	bl	800d6c8 <lfs_tag_type3>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	461a      	mov	r2, r3
 8011aec:	f240 2301 	movw	r3, #513	@ 0x201
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d141      	bne.n	8011b78 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	f06f 0201 	mvn.w	r2, #1
 8011afa:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8011afc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7fb fe1c 	bl	800d73c <lfs_tag_size>
 8011b04:	4602      	mov	r2, r0
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b0e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	2200      	movs	r2, #0
 8011b22:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d020      	beq.n	8011b78 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	889b      	ldrh	r3, [r3, #4]
 8011b40:	029c      	lsls	r4, r3, #10
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b46:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fb f873 	bl	800cc36 <lfs_min>
 8011b50:	4603      	mov	r3, r0
 8011b52:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011b54:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011b5c:	9300      	str	r3, [sp, #0]
 8011b5e:	4613      	mov	r3, r2
 8011b60:	4a0f      	ldr	r2, [pc, #60]	@ (8011ba0 <lfs_file_opencfg_+0x398>)
 8011b62:	4629      	mov	r1, r5
 8011b64:	68f8      	ldr	r0, [r7, #12]
 8011b66:	f7fc fa55 	bl	800e014 <lfs_dir_get>
 8011b6a:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 8011b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	da02      	bge.n	8011b78 <lfs_file_opencfg_+0x370>
                err = res;
 8011b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8011b76:	e002      	b.n	8011b7e <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	e00b      	b.n	8011b94 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 8011b7c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b82:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 8011b8a:	68b9      	ldr	r1, [r7, #8]
 8011b8c:	68f8      	ldr	r0, [r7, #12]
 8011b8e:	f000 f823 	bl	8011bd8 <lfs_file_close_>
    return err;
 8011b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3760      	adds	r7, #96	@ 0x60
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8011b9c:	20100000 	.word	0x20100000
 8011ba0:	700ffc00 	.word	0x700ffc00
 8011ba4:	7ffffc00 	.word	0x7ffffc00

08011ba8 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b088      	sub	sp, #32
 8011bac:	af02      	add	r7, sp, #8
 8011bae:	60f8      	str	r0, [r7, #12]
 8011bb0:	60b9      	str	r1, [r7, #8]
 8011bb2:	607a      	str	r2, [r7, #4]
 8011bb4:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8011bb6:	4b07      	ldr	r3, [pc, #28]	@ (8011bd4 <lfs_file_open_+0x2c>)
 8011bb8:	9300      	str	r3, [sp, #0]
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	68b9      	ldr	r1, [r7, #8]
 8011bc0:	68f8      	ldr	r0, [r7, #12]
 8011bc2:	f7ff fe21 	bl	8011808 <lfs_file_opencfg_>
 8011bc6:	6178      	str	r0, [r7, #20]
    return err;
 8011bc8:	697b      	ldr	r3, [r7, #20]
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3718      	adds	r7, #24
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
 8011bd2:	bf00      	nop
 8011bd4:	08033c94 	.word	0x08033c94

08011bd8 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8011be2:	6839      	ldr	r1, [r7, #0]
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f000 f9e5 	bl	8011fb4 <lfs_file_sync_>
 8011bea:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8011bec:	6839      	ldr	r1, [r7, #0]
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f7fb ff9d 	bl	800db2e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d104      	bne.n	8011c08 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fb f8c2 	bl	800cd8c <lfs_free>
    }

    return err;
 8011c08:	68fb      	ldr	r3, [r7, #12]
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3710      	adds	r7, #16
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
	...

08011c14 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8011c14:	b590      	push	{r4, r7, lr}
 8011c16:	b08d      	sub	sp, #52	@ 0x34
 8011c18:	af06      	add	r7, sp, #24
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8011c1e:	f107 030c 	add.w	r3, r7, #12
 8011c22:	4619      	mov	r1, r3
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f7fc f877 	bl	800dd18 <lfs_alloc>
 8011c2a:	6138      	str	r0, [r7, #16]
        if (err) {
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d001      	beq.n	8011c36 <lfs_file_relocate+0x22>
            return err;
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	e0bb      	b.n	8011dae <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	4619      	mov	r1, r3
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f7fb fc16 	bl	800d46c <lfs_bd_erase>
 8011c40:	6138      	str	r0, [r7, #16]
        if (err) {
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d006      	beq.n	8011c56 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011c4e:	f000 809b 	beq.w	8011d88 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	e0ab      	b.n	8011dae <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8011c56:	2300      	movs	r3, #0
 8011c58:	617b      	str	r3, [r7, #20]
 8011c5a:	e069      	b.n	8011d30 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d027      	beq.n	8011cb8 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	f103 0008 	add.w	r0, r3, #8
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	889b      	ldrh	r3, [r3, #4]
 8011c80:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8011c82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c8a:	2101      	movs	r1, #1
 8011c8c:	9105      	str	r1, [sp, #20]
 8011c8e:	f107 010b 	add.w	r1, r7, #11
 8011c92:	9104      	str	r1, [sp, #16]
 8011c94:	6979      	ldr	r1, [r7, #20]
 8011c96:	9103      	str	r1, [sp, #12]
 8011c98:	9302      	str	r3, [sp, #8]
 8011c9a:	4b47      	ldr	r3, [pc, #284]	@ (8011db8 <lfs_file_relocate+0x1a4>)
 8011c9c:	9301      	str	r3, [sp, #4]
 8011c9e:	9200      	str	r2, [sp, #0]
 8011ca0:	4623      	mov	r3, r4
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	4601      	mov	r1, r0
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f7fc f9cf 	bl	800e04a <lfs_dir_getread>
 8011cac:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d01e      	beq.n	8011cf2 <lfs_file_relocate+0xde>
                    return err;
 8011cb4:	693b      	ldr	r3, [r7, #16]
 8011cb6:	e07a      	b.n	8011dae <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 8011cbe:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	1ad4      	subs	r4, r2, r3
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ccc:	2201      	movs	r2, #1
 8011cce:	9203      	str	r2, [sp, #12]
 8011cd0:	f107 020b 	add.w	r2, r7, #11
 8011cd4:	9202      	str	r2, [sp, #8]
 8011cd6:	697a      	ldr	r2, [r7, #20]
 8011cd8:	9201      	str	r2, [sp, #4]
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	4623      	mov	r3, r4
 8011cde:	4602      	mov	r2, r0
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f7fb f883 	bl	800cdec <lfs_bd_read>
 8011ce6:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d001      	beq.n	8011cf2 <lfs_file_relocate+0xde>
                    return err;
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	e05d      	b.n	8011dae <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f103 0110 	add.w	r1, r3, #16
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	9203      	str	r2, [sp, #12]
 8011d00:	f107 020b 	add.w	r2, r7, #11
 8011d04:	9202      	str	r2, [sp, #8]
 8011d06:	697a      	ldr	r2, [r7, #20]
 8011d08:	9201      	str	r2, [sp, #4]
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	4602      	mov	r2, r0
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7fb fafd 	bl	800d310 <lfs_bd_prog>
 8011d16:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8011d18:	693b      	ldr	r3, [r7, #16]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d005      	beq.n	8011d2a <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011d24:	d032      	beq.n	8011d8c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	e041      	b.n	8011dae <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	617b      	str	r3, [r7, #20]
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d34:	697a      	ldr	r2, [r7, #20]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d390      	bcc.n	8011c5c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	69d9      	ldr	r1, [r3, #28]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d48:	461a      	mov	r2, r3
 8011d4a:	f015 fb5d 	bl	8027408 <memcpy>
        file->cache.block = lfs->pcache.block;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	691a      	ldr	r2, [r3, #16]
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	695a      	ldr	r2, [r3, #20]
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	699a      	ldr	r2, [r3, #24]
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	3310      	adds	r3, #16
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f7fb f827 	bl	800cdc0 <lfs_cache_zero>

        file->block = nblock;
 8011d72:	68fa      	ldr	r2, [r7, #12]
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d7c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8011d84:	2300      	movs	r3, #0
 8011d86:	e012      	b.n	8011dae <lfs_file_relocate+0x19a>
                goto relocate;
 8011d88:	bf00      	nop
 8011d8a:	e000      	b.n	8011d8e <lfs_file_relocate+0x17a>
                    goto relocate;
 8011d8c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	4a0a      	ldr	r2, [pc, #40]	@ (8011dbc <lfs_file_relocate+0x1a8>)
 8011d92:	9200      	str	r2, [sp, #0]
 8011d94:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8011d98:	4909      	ldr	r1, [pc, #36]	@ (8011dc0 <lfs_file_relocate+0x1ac>)
 8011d9a:	480a      	ldr	r0, [pc, #40]	@ (8011dc4 <lfs_file_relocate+0x1b0>)
 8011d9c:	f011 fbb0 	bl	8023500 <printf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	3310      	adds	r3, #16
 8011da4:	4619      	mov	r1, r3
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f7fa fffb 	bl	800cda2 <lfs_cache_drop>
    while (true) {
 8011dac:	e737      	b.n	8011c1e <lfs_file_relocate+0xa>
    }
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	371c      	adds	r7, #28
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd90      	pop	{r4, r7, pc}
 8011db6:	bf00      	nop
 8011db8:	fff7fc00 	.word	0xfff7fc00
 8011dbc:	0803059c 	.word	0x0803059c
 8011dc0:	08030474 	.word	0x08030474
 8011dc4:	0803061c 	.word	0x0803061c

08011dc8 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b084      	sub	sp, #16
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f7fb ff05 	bl	800dbea <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 8011de0:	6839      	ldr	r1, [r7, #0]
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7ff ff16 	bl	8011c14 <lfs_file_relocate>
 8011de8:	60f8      	str	r0, [r7, #12]
    if (err) {
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d001      	beq.n	8011df4 <lfs_file_outline+0x2c>
        return err;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	e006      	b.n	8011e02 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011df8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 8011e00:	2300      	movs	r3, #0
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3710      	adds	r7, #16
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
	...

08011e0c <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8011e0c:	b590      	push	{r4, r7, lr}
 8011e0e:	b09f      	sub	sp, #124	@ 0x7c
 8011e10:	af02      	add	r7, sp, #8
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d011      	beq.n	8011e46 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d105      	bne.n	8011e3a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	3340      	adds	r3, #64	@ 0x40
 8011e32:	4619      	mov	r1, r3
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f7fa ffb4 	bl	800cda2 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e3e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	f000 80a4 	beq.w	8011f9c <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e58:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d176      	bne.n	8011f54 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8011e66:	f107 030c 	add.w	r3, r7, #12
 8011e6a:	2254      	movs	r2, #84	@ 0x54
 8011e6c:	2100      	movs	r1, #0
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f014 f872 	bl	8025f58 <memset>
                .ctz.head = file->ctz.head,
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8011e78:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 8011e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011e80:	2301      	movs	r3, #1
 8011e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8011e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8011e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	4619      	mov	r1, r3
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f7fa ff81 	bl	800cda2 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8011ea0:	e02b      	b.n	8011efa <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8011ea2:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8011ea6:	f107 010c 	add.w	r1, r7, #12
 8011eaa:	2301      	movs	r3, #1
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f000 f921 	bl	80120f4 <lfs_file_flushedread>
 8011eb2:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8011eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	da01      	bge.n	8011ebe <lfs_file_flush+0xb2>
                    return res;
 8011eba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ebc:	e06f      	b.n	8011f9e <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8011ebe:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	6839      	ldr	r1, [r7, #0]
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f000 fa1c 	bl	8012304 <lfs_file_flushedwrite>
 8011ecc:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8011ece:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	da01      	bge.n	8011ed8 <lfs_file_flush+0xcc>
                    return res;
 8011ed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ed6:	e062      	b.n	8011f9e <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011ee0:	d00b      	beq.n	8011efa <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8011ee2:	f107 030c 	add.w	r3, r7, #12
 8011ee6:	3340      	adds	r3, #64	@ 0x40
 8011ee8:	4619      	mov	r1, r3
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f7fa ff59 	bl	800cda2 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f7fa ff54 	bl	800cda2 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f02:	429a      	cmp	r2, r3
 8011f04:	d3cd      	bcc.n	8011ea2 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	2301      	movs	r3, #1
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f7fb f94f 	bl	800d1b4 <lfs_bd_flush>
 8011f16:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8011f18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d026      	beq.n	8011f6c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8011f1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f20:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011f24:	d001      	beq.n	8011f2a <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8011f26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f28:	e039      	b.n	8011f9e <lfs_file_flush+0x192>
                        goto relocate;
 8011f2a:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f30:	4a1d      	ldr	r2, [pc, #116]	@ (8011fa8 <lfs_file_flush+0x19c>)
 8011f32:	9200      	str	r2, [sp, #0]
 8011f34:	f640 522b 	movw	r2, #3371	@ 0xd2b
 8011f38:	491c      	ldr	r1, [pc, #112]	@ (8011fac <lfs_file_flush+0x1a0>)
 8011f3a:	481d      	ldr	r0, [pc, #116]	@ (8011fb0 <lfs_file_flush+0x1a4>)
 8011f3c:	f011 fae0 	bl	8023500 <printf>
                err = lfs_file_relocate(lfs, file);
 8011f40:	6839      	ldr	r1, [r7, #0]
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7ff fe66 	bl	8011c14 <lfs_file_relocate>
 8011f48:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8011f4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d0da      	beq.n	8011f06 <lfs_file_flush+0xfa>
                    return err;
 8011f50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f52:	e024      	b.n	8011f9e <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	4610      	mov	r0, r2
 8011f60:	f7fa fe59 	bl	800cc16 <lfs_max>
 8011f64:	4602      	mov	r2, r0
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	635a      	str	r2, [r3, #52]	@ 0x34
 8011f6a:	e000      	b.n	8011f6e <lfs_file_flush+0x162>
                break;
 8011f6c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f8e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f9a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 8011f9c:	2300      	movs	r3, #0
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3774      	adds	r7, #116	@ 0x74
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd90      	pop	{r4, r7, pc}
 8011fa6:	bf00      	nop
 8011fa8:	0803059c 	.word	0x0803059c
 8011fac:	08030474 	.word	0x08030474
 8011fb0:	0803061c 	.word	0x0803061c

08011fb4 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b090      	sub	sp, #64	@ 0x40
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d001      	beq.n	8011fce <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	e08e      	b.n	80120ec <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 8011fce:	6839      	ldr	r1, [r7, #0]
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f7ff ff1b 	bl	8011e0c <lfs_file_flush>
 8011fd6:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8011fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d007      	beq.n	8011fee <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fe2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 8011fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fec:	e07e      	b.n	80120ec <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d077      	beq.n	80120ea <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	3308      	adds	r3, #8
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7fb fa7b 	bl	800d4fa <lfs_pair_isnull>
 8012004:	4603      	mov	r3, r0
 8012006:	f083 0301 	eor.w	r3, r3, #1
 801200a:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 801200c:	2b00      	cmp	r3, #0
 801200e:	d06c      	beq.n	80120ea <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012018:	2b00      	cmp	r3, #0
 801201a:	d10d      	bne.n	8012038 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f103 0110 	add.w	r1, r3, #16
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	2300      	movs	r3, #0
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f7fb f93e 	bl	800d2a8 <lfs_bd_sync>
 801202c:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 801202e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012030:	2b00      	cmp	r3, #0
 8012032:	d001      	beq.n	8012038 <lfs_file_sync_+0x84>
                return err;
 8012034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012036:	e059      	b.n	80120ec <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801203c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012040:	2b00      	cmp	r3, #0
 8012042:	d009      	beq.n	8012058 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8012044:	f240 2301 	movw	r3, #513	@ 0x201
 8012048:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801204e:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012054:	637b      	str	r3, [r7, #52]	@ 0x34
 8012056:	e014      	b.n	8012082 <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8012058:	f240 2302 	movw	r3, #514	@ 0x202
 801205c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 801205e:	683a      	ldr	r2, [r7, #0]
 8012060:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012064:	3228      	adds	r2, #40	@ 0x28
 8012066:	e892 0003 	ldmia.w	r2, {r0, r1}
 801206a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 801206e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012072:	4618      	mov	r0, r3
 8012074:	f7fb fcb6 	bl	800d9e4 <lfs_ctz_tole32>
            buffer = &ctz;
 8012078:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801207c:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 801207e:	2308      	movs	r3, #8
 8012080:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	f103 0108 	add.w	r1, r3, #8
 8012088:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801208a:	051a      	lsls	r2, r3, #20
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	889b      	ldrh	r3, [r3, #4]
 8012090:	029b      	lsls	r3, r3, #10
 8012092:	431a      	orrs	r2, r3
 8012094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012096:	4313      	orrs	r3, r2
 8012098:	61bb      	str	r3, [r7, #24]
 801209a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801209c:	61fb      	str	r3, [r7, #28]
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	889b      	ldrh	r3, [r3, #4]
 80120a2:	029a      	lsls	r2, r3, #10
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120a8:	689b      	ldr	r3, [r3, #8]
 80120aa:	4313      	orrs	r3, r2
 80120ac:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 80120b0:	623b      	str	r3, [r7, #32]
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80120ba:	f107 0218 	add.w	r2, r7, #24
 80120be:	2302      	movs	r3, #2
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f7fe ff07 	bl	8010ed4 <lfs_dir_commit>
 80120c6:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80120c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d007      	beq.n	80120de <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120d2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80120da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120dc:	e006      	b.n	80120ec <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 80120ea:	2300      	movs	r3, #0
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	3740      	adds	r7, #64	@ 0x40
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80120f4:	b5b0      	push	{r4, r5, r7, lr}
 80120f6:	b090      	sub	sp, #64	@ 0x40
 80120f8:	af06      	add	r7, sp, #24
 80120fa:	60f8      	str	r0, [r7, #12]
 80120fc:	60b9      	str	r1, [r7, #8]
 80120fe:	607a      	str	r2, [r7, #4]
 8012100:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012112:	429a      	cmp	r2, r3
 8012114:	d301      	bcc.n	801211a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8012116:	2300      	movs	r3, #0
 8012118:	e0b7      	b.n	801228a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012122:	1ad3      	subs	r3, r2, r3
 8012124:	4619      	mov	r1, r3
 8012126:	6838      	ldr	r0, [r7, #0]
 8012128:	f7fa fd85 	bl	800cc36 <lfs_min>
 801212c:	6038      	str	r0, [r7, #0]
    nsize = size;
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8012132:	e0a5      	b.n	8012280 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012138:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801213c:	2b00      	cmp	r3, #0
 801213e:	d006      	beq.n	801214e <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801214a:	429a      	cmp	r2, r3
 801214c:	d130      	bne.n	80121b0 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012156:	2b00      	cmp	r3, #0
 8012158:	d11c      	bne.n	8012194 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012168:	68ba      	ldr	r2, [r7, #8]
 801216a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801216c:	68b9      	ldr	r1, [r7, #8]
 801216e:	3138      	adds	r1, #56	@ 0x38
 8012170:	68b8      	ldr	r0, [r7, #8]
 8012172:	303c      	adds	r0, #60	@ 0x3c
 8012174:	9003      	str	r0, [sp, #12]
 8012176:	9102      	str	r1, [sp, #8]
 8012178:	9201      	str	r2, [sp, #4]
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	462b      	mov	r3, r5
 801217e:	4622      	mov	r2, r4
 8012180:	2100      	movs	r1, #0
 8012182:	68f8      	ldr	r0, [r7, #12]
 8012184:	f7ff f950 	bl	8011428 <lfs_ctz_find>
 8012188:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 801218a:	69fb      	ldr	r3, [r7, #28]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d009      	beq.n	80121a4 <lfs_file_flushedread+0xb0>
                    return err;
 8012190:	69fb      	ldr	r3, [r7, #28]
 8012192:	e07a      	b.n	801228a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	f06f 0201 	mvn.w	r2, #1
 801219a:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80121b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121ba:	1ad3      	subs	r3, r2, r3
 80121bc:	4619      	mov	r1, r3
 80121be:	6a38      	ldr	r0, [r7, #32]
 80121c0:	f7fa fd39 	bl	800cc36 <lfs_min>
 80121c4:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d026      	beq.n	8012220 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	f103 0408 	add.w	r4, r3, #8
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80121e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	889b      	ldrh	r3, [r3, #4]
 80121e8:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80121ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80121ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80121f2:	68b9      	ldr	r1, [r7, #8]
 80121f4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80121f6:	69b8      	ldr	r0, [r7, #24]
 80121f8:	9005      	str	r0, [sp, #20]
 80121fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80121fc:	9004      	str	r0, [sp, #16]
 80121fe:	9103      	str	r1, [sp, #12]
 8012200:	9302      	str	r3, [sp, #8]
 8012202:	4b24      	ldr	r3, [pc, #144]	@ (8012294 <lfs_file_flushedread+0x1a0>)
 8012204:	9301      	str	r3, [sp, #4]
 8012206:	9200      	str	r2, [sp, #0]
 8012208:	462b      	mov	r3, r5
 801220a:	2200      	movs	r2, #0
 801220c:	4621      	mov	r1, r4
 801220e:	68f8      	ldr	r0, [r7, #12]
 8012210:	f7fb ff1b 	bl	800e04a <lfs_dir_getread>
 8012214:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d01d      	beq.n	8012258 <lfs_file_flushedread+0x164>
                return err;
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	e034      	b.n	801228a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801222a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012230:	68ba      	ldr	r2, [r7, #8]
 8012232:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8012234:	69b9      	ldr	r1, [r7, #24]
 8012236:	9103      	str	r1, [sp, #12]
 8012238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801223a:	9102      	str	r1, [sp, #8]
 801223c:	9201      	str	r2, [sp, #4]
 801223e:	9300      	str	r3, [sp, #0]
 8012240:	4623      	mov	r3, r4
 8012242:	4602      	mov	r2, r0
 8012244:	2100      	movs	r1, #0
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f7fa fdd0 	bl	800cdec <lfs_bd_read>
 801224c:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d001      	beq.n	8012258 <lfs_file_flushedread+0x164>
                return err;
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	e018      	b.n	801228a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801225c:	69bb      	ldr	r3, [r7, #24]
 801225e:	441a      	add	r2, r3
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012268:	69bb      	ldr	r3, [r7, #24]
 801226a:	441a      	add	r2, r3
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8012270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012272:	69bb      	ldr	r3, [r7, #24]
 8012274:	4413      	add	r3, r2
 8012276:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8012278:	6a3a      	ldr	r2, [r7, #32]
 801227a:	69bb      	ldr	r3, [r7, #24]
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8012280:	6a3b      	ldr	r3, [r7, #32]
 8012282:	2b00      	cmp	r3, #0
 8012284:	f47f af56 	bne.w	8012134 <lfs_file_flushedread+0x40>
    }

    return size;
 8012288:	683b      	ldr	r3, [r7, #0]
}
 801228a:	4618      	mov	r0, r3
 801228c:	3728      	adds	r7, #40	@ 0x28
 801228e:	46bd      	mov	sp, r7
 8012290:	bdb0      	pop	{r4, r5, r7, pc}
 8012292:	bf00      	nop
 8012294:	fff7fc00 	.word	0xfff7fc00

08012298 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8012298:	b580      	push	{r7, lr}
 801229a:	b086      	sub	sp, #24
 801229c:	af00      	add	r7, sp, #0
 801229e:	60f8      	str	r0, [r7, #12]
 80122a0:	60b9      	str	r1, [r7, #8]
 80122a2:	607a      	str	r2, [r7, #4]
 80122a4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122aa:	f003 0301 	and.w	r3, r3, #1
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d106      	bne.n	80122c0 <lfs_file_read_+0x28>
 80122b2:	4b11      	ldr	r3, [pc, #68]	@ (80122f8 <lfs_file_read_+0x60>)
 80122b4:	4a11      	ldr	r2, [pc, #68]	@ (80122fc <lfs_file_read_+0x64>)
 80122b6:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 80122ba:	4811      	ldr	r0, [pc, #68]	@ (8012300 <lfs_file_read_+0x68>)
 80122bc:	f010 fe6c 	bl	8022f98 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d009      	beq.n	80122e0 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80122cc:	68b9      	ldr	r1, [r7, #8]
 80122ce:	68f8      	ldr	r0, [r7, #12]
 80122d0:	f7ff fd9c 	bl	8011e0c <lfs_file_flush>
 80122d4:	6178      	str	r0, [r7, #20]
        if (err) {
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d001      	beq.n	80122e0 <lfs_file_read_+0x48>
            return err;
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	e006      	b.n	80122ee <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	687a      	ldr	r2, [r7, #4]
 80122e4:	68b9      	ldr	r1, [r7, #8]
 80122e6:	68f8      	ldr	r0, [r7, #12]
 80122e8:	f7ff ff04 	bl	80120f4 <lfs_file_flushedread>
 80122ec:	4603      	mov	r3, r0
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3718      	adds	r7, #24
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	080307c4 	.word	0x080307c4
 80122fc:	08033ca0 	.word	0x08033ca0
 8012300:	08030474 	.word	0x08030474

08012304 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8012304:	b5b0      	push	{r4, r5, r7, lr}
 8012306:	b090      	sub	sp, #64	@ 0x40
 8012308:	af04      	add	r7, sp, #16
 801230a:	60f8      	str	r0, [r7, #12]
 801230c:	60b9      	str	r1, [r7, #8]
 801230e:	607a      	str	r2, [r7, #4]
 8012310:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801231e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012322:	2b00      	cmp	r3, #0
 8012324:	f000 80f4 	beq.w	8012510 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801232c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801232e:	441a      	add	r2, r3
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012334:	4619      	mov	r1, r3
 8012336:	4610      	mov	r0, r2
 8012338:	f7fa fc6d 	bl	800cc16 <lfs_max>
 801233c:	4602      	mov	r2, r0
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8012342:	429a      	cmp	r2, r3
 8012344:	f240 80e4 	bls.w	8012510 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8012348:	68b9      	ldr	r1, [r7, #8]
 801234a:	68f8      	ldr	r0, [r7, #12]
 801234c:	f7ff fd3c 	bl	8011dc8 <lfs_file_outline>
 8012350:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8012352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012354:	2b00      	cmp	r3, #0
 8012356:	f000 80db 	beq.w	8012510 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801235e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8012366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012368:	e0d7      	b.n	801251a <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012372:	2b00      	cmp	r3, #0
 8012374:	d006      	beq.n	8012384 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 8012380:	429a      	cmp	r2, r3
 8012382:	d16d      	bne.n	8012460 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012388:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801238c:	2b00      	cmp	r3, #0
 801238e:	d159      	bne.n	8012444 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012398:	2b00      	cmp	r3, #0
 801239a:	d12f      	bne.n	80123fc <lfs_file_flushedwrite+0xf8>
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d02b      	beq.n	80123fc <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80123b2:	68ba      	ldr	r2, [r7, #8]
 80123b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80123b6:	3a01      	subs	r2, #1
 80123b8:	68b9      	ldr	r1, [r7, #8]
 80123ba:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80123bc:	2000      	movs	r0, #0
 80123be:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80123c0:	f107 0010 	add.w	r0, r7, #16
 80123c4:	9003      	str	r0, [sp, #12]
 80123c6:	9102      	str	r1, [sp, #8]
 80123c8:	9201      	str	r2, [sp, #4]
 80123ca:	9300      	str	r3, [sp, #0]
 80123cc:	462b      	mov	r3, r5
 80123ce:	4622      	mov	r2, r4
 80123d0:	2100      	movs	r1, #0
 80123d2:	68f8      	ldr	r0, [r7, #12]
 80123d4:	f7ff f828 	bl	8011428 <lfs_ctz_find>
 80123d8:	6238      	str	r0, [r7, #32]
                    if (err) {
 80123da:	6a3b      	ldr	r3, [r7, #32]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d007      	beq.n	80123f0 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 80123ec:	6a3b      	ldr	r3, [r7, #32]
 80123ee:	e094      	b.n	801251a <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	3340      	adds	r3, #64	@ 0x40
 80123f4:	4619      	mov	r1, r3
 80123f6:	68f8      	ldr	r0, [r7, #12]
 80123f8:	f7fa fce2 	bl	800cdc0 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 80123fc:	68f8      	ldr	r0, [r7, #12]
 80123fe:	f7fb fbf4 	bl	800dbea <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8012408:	68fc      	ldr	r4, [r7, #12]
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012412:	68ba      	ldr	r2, [r7, #8]
 8012414:	3238      	adds	r2, #56	@ 0x38
 8012416:	68b9      	ldr	r1, [r7, #8]
 8012418:	313c      	adds	r1, #60	@ 0x3c
 801241a:	9102      	str	r1, [sp, #8]
 801241c:	9201      	str	r2, [sp, #4]
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	462b      	mov	r3, r5
 8012422:	4622      	mov	r2, r4
 8012424:	4601      	mov	r1, r0
 8012426:	68f8      	ldr	r0, [r7, #12]
 8012428:	f7ff f86a 	bl	8011500 <lfs_ctz_extend>
 801242c:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 801242e:	69fb      	ldr	r3, [r7, #28]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d00f      	beq.n	8012454 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012438:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	e06a      	b.n	801251a <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	f06f 0201 	mvn.w	r2, #1
 801244a:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012458:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801246a:	1ad3      	subs	r3, r2, r3
 801246c:	4619      	mov	r1, r3
 801246e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012470:	f7fa fbe1 	bl	800cc36 <lfs_min>
 8012474:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 801247c:	68fc      	ldr	r4, [r7, #12]
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012482:	68ba      	ldr	r2, [r7, #8]
 8012484:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8012486:	69b9      	ldr	r1, [r7, #24]
 8012488:	9103      	str	r1, [sp, #12]
 801248a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801248c:	9102      	str	r1, [sp, #8]
 801248e:	9201      	str	r2, [sp, #4]
 8012490:	9300      	str	r3, [sp, #0]
 8012492:	2301      	movs	r3, #1
 8012494:	4622      	mov	r2, r4
 8012496:	4601      	mov	r1, r0
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f7fa ff39 	bl	800d310 <lfs_bd_prog>
 801249e:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d01c      	beq.n	80124e0 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80124ac:	d007      	beq.n	80124be <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124b2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	e02d      	b.n	801251a <lfs_file_flushedwrite+0x216>
                    goto relocate;
 80124be:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80124c0:	68b9      	ldr	r1, [r7, #8]
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f7ff fba6 	bl	8011c14 <lfs_file_relocate>
 80124c8:	6178      	str	r0, [r7, #20]
            if (err) {
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d0d2      	beq.n	8012476 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124d4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	e01c      	b.n	801251a <lfs_file_flushedwrite+0x216>
            break;
 80124e0:	bf00      	nop
            }
        }

        file->pos += diff;
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80124e6:	69bb      	ldr	r3, [r7, #24]
 80124e8:	441a      	add	r2, r3
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	441a      	add	r2, r3
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 80124fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80124fc:	69bb      	ldr	r3, [r7, #24]
 80124fe:	4413      	add	r3, r2
 8012500:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8012502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012504:	69bb      	ldr	r3, [r7, #24]
 8012506:	1ad3      	subs	r3, r2, r3
 8012508:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 801250a:	68f8      	ldr	r0, [r7, #12]
 801250c:	f7fb fb6d 	bl	800dbea <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8012510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012512:	2b00      	cmp	r3, #0
 8012514:	f47f af29 	bne.w	801236a <lfs_file_flushedwrite+0x66>
    }

    return size;
 8012518:	683b      	ldr	r3, [r7, #0]
}
 801251a:	4618      	mov	r0, r3
 801251c:	3730      	adds	r7, #48	@ 0x30
 801251e:	46bd      	mov	sp, r7
 8012520:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012524 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8012524:	b580      	push	{r7, lr}
 8012526:	b08a      	sub	sp, #40	@ 0x28
 8012528:	af00      	add	r7, sp, #0
 801252a:	60f8      	str	r0, [r7, #12]
 801252c:	60b9      	str	r1, [r7, #8]
 801252e:	607a      	str	r2, [r7, #4]
 8012530:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012536:	f003 0302 	and.w	r3, r3, #2
 801253a:	2b00      	cmp	r3, #0
 801253c:	d106      	bne.n	801254c <lfs_file_write_+0x28>
 801253e:	4b38      	ldr	r3, [pc, #224]	@ (8012620 <lfs_file_write_+0xfc>)
 8012540:	4a38      	ldr	r2, [pc, #224]	@ (8012624 <lfs_file_write_+0x100>)
 8012542:	f640 6126 	movw	r1, #3622	@ 0xe26
 8012546:	4838      	ldr	r0, [pc, #224]	@ (8012628 <lfs_file_write_+0x104>)
 8012548:	f010 fd26 	bl	8022f98 <__assert_func>

    if (file->flags & LFS_F_READING) {
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012550:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012554:	2b00      	cmp	r3, #0
 8012556:	d009      	beq.n	801256c <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8012558:	68b9      	ldr	r1, [r7, #8]
 801255a:	68f8      	ldr	r0, [r7, #12]
 801255c:	f7ff fc56 	bl	8011e0c <lfs_file_flush>
 8012560:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8012562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012564:	2b00      	cmp	r3, #0
 8012566:	d001      	beq.n	801256c <lfs_file_write_+0x48>
            return err;
 8012568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801256a:	e055      	b.n	8012618 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012574:	2b00      	cmp	r3, #0
 8012576:	d009      	beq.n	801258c <lfs_file_write_+0x68>
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012580:	429a      	cmp	r2, r3
 8012582:	d203      	bcs.n	801258c <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	441a      	add	r2, r3
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012598:	429a      	cmp	r2, r3
 801259a:	d902      	bls.n	80125a2 <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 801259c:	f06f 031a 	mvn.w	r3, #26
 80125a0:	e03a      	b.n	8012618 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d121      	bne.n	80125f2 <lfs_file_write_+0xce>
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d91b      	bls.n	80125f2 <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80125be:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 80125c8:	e00e      	b.n	80125e8 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80125ca:	2300      	movs	r3, #0
 80125cc:	75fb      	strb	r3, [r7, #23]
 80125ce:	f107 0217 	add.w	r2, r7, #23
 80125d2:	2301      	movs	r3, #1
 80125d4:	68b9      	ldr	r1, [r7, #8]
 80125d6:	68f8      	ldr	r0, [r7, #12]
 80125d8:	f7ff fe94 	bl	8012304 <lfs_file_flushedwrite>
 80125dc:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80125de:	69fb      	ldr	r3, [r7, #28]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	da01      	bge.n	80125e8 <lfs_file_write_+0xc4>
                return res;
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	e017      	b.n	8012618 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 80125e8:	68bb      	ldr	r3, [r7, #8]
 80125ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80125ec:	6a3a      	ldr	r2, [r7, #32]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d8eb      	bhi.n	80125ca <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	68b9      	ldr	r1, [r7, #8]
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	f7ff fe83 	bl	8012304 <lfs_file_flushedwrite>
 80125fe:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8012600:	69bb      	ldr	r3, [r7, #24]
 8012602:	2b00      	cmp	r3, #0
 8012604:	da01      	bge.n	801260a <lfs_file_write_+0xe6>
        return nsize;
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	e006      	b.n	8012618 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801260e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8012616:	69bb      	ldr	r3, [r7, #24]
}
 8012618:	4618      	mov	r0, r3
 801261a:	3728      	adds	r7, #40	@ 0x28
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}
 8012620:	080307f4 	.word	0x080307f4
 8012624:	08033cb0 	.word	0x08033cb0
 8012628:	08030474 	.word	0x08030474

0801262c <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801262c:	b580      	push	{r7, lr}
 801262e:	b08c      	sub	sp, #48	@ 0x30
 8012630:	af00      	add	r7, sp, #0
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	607a      	str	r2, [r7, #4]
 8012638:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801263e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d102      	bne.n	801264c <lfs_file_seek_+0x20>
        npos = off;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801264a:	e025      	b.n	8012698 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	2b01      	cmp	r3, #1
 8012650:	d10f      	bne.n	8012672 <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012656:	461a      	mov	r2, r3
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	4413      	add	r3, r2
 801265c:	2b00      	cmp	r3, #0
 801265e:	da02      	bge.n	8012666 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 8012660:	f06f 0315 	mvn.w	r3, #21
 8012664:	e067      	b.n	8012736 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	4413      	add	r3, r2
 801266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012670:	e012      	b.n	8012698 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	2b02      	cmp	r3, #2
 8012676:	d10f      	bne.n	8012698 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 8012678:	68b9      	ldr	r1, [r7, #8]
 801267a:	68f8      	ldr	r0, [r7, #12]
 801267c:	f000 f86c 	bl	8012758 <lfs_file_size_>
 8012680:	4602      	mov	r2, r0
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	4413      	add	r3, r2
 8012686:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 8012688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801268a:	2b00      	cmp	r3, #0
 801268c:	da02      	bge.n	8012694 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 801268e:	f06f 0315 	mvn.w	r3, #21
 8012692:	e050      	b.n	8012736 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 8012694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012696:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801269c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801269e:	429a      	cmp	r2, r3
 80126a0:	d902      	bls.n	80126a8 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 80126a2:	f06f 0315 	mvn.w	r3, #21
 80126a6:	e046      	b.n	8012736 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d101      	bne.n	80126b6 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 80126b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126b4:	e03f      	b.n	8012736 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d12b      	bne.n	801271a <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126c6:	61bb      	str	r3, [r7, #24]
 80126c8:	f107 0318 	add.w	r3, r7, #24
 80126cc:	4619      	mov	r1, r3
 80126ce:	68f8      	ldr	r0, [r7, #12]
 80126d0:	f7fe fe72 	bl	80113b8 <lfs_ctz_index>
 80126d4:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 80126d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126d8:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 80126da:	f107 0314 	add.w	r3, r7, #20
 80126de:	4619      	mov	r1, r3
 80126e0:	68f8      	ldr	r0, [r7, #12]
 80126e2:	f7fe fe69 	bl	80113b8 <lfs_ctz_index>
 80126e6:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 80126e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126ea:	6a3b      	ldr	r3, [r7, #32]
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d114      	bne.n	801271a <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d80f      	bhi.n	801271a <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012702:	441a      	add	r2, r3
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	429a      	cmp	r2, r3
 8012708:	d907      	bls.n	801271a <lfs_file_seek_+0xee>
            file->pos = npos;
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801270e:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 8012710:	697a      	ldr	r2, [r7, #20]
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8012716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012718:	e00d      	b.n	8012736 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 801271a:	68b9      	ldr	r1, [r7, #8]
 801271c:	68f8      	ldr	r0, [r7, #12]
 801271e:	f7ff fb75 	bl	8011e0c <lfs_file_flush>
 8012722:	61f8      	str	r0, [r7, #28]
    if (err) {
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d001      	beq.n	801272e <lfs_file_seek_+0x102>
        return err;
 801272a:	69fb      	ldr	r3, [r7, #28]
 801272c:	e003      	b.n	8012736 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012732:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8012734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8012736:	4618      	mov	r0, r3
 8012738:	3730      	adds	r7, #48	@ 0x30
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}

0801273e <lfs_file_tell_>:

    return 0;
}
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
 801273e:	b480      	push	{r7}
 8012740:	b083      	sub	sp, #12
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
 8012746:	6039      	str	r1, [r7, #0]
    (void)lfs;
    return file->pos;
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 801274c:	4618      	mov	r0, r3
 801274e:	370c      	adds	r7, #12
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr

08012758 <lfs_file_size_>:
    }

    return 0;
}

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801276a:	2b00      	cmp	r3, #0
 801276c:	d009      	beq.n	8012782 <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012776:	4619      	mov	r1, r3
 8012778:	4610      	mov	r0, r2
 801277a:	f7fa fa4c 	bl	800cc16 <lfs_max>
 801277e:	4603      	mov	r3, r0
 8012780:	e001      	b.n	8012786 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8012786:	4618      	mov	r0, r3
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <lfs_stat_>:


/// General fs operations ///
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801278e:	b580      	push	{r7, lr}
 8012790:	b08e      	sub	sp, #56	@ 0x38
 8012792:	af00      	add	r7, sp, #0
 8012794:	60f8      	str	r0, [r7, #12]
 8012796:	60b9      	str	r1, [r7, #8]
 8012798:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801279a:	f107 0208 	add.w	r2, r7, #8
 801279e:	f107 0114 	add.w	r1, r7, #20
 80127a2:	2300      	movs	r3, #0
 80127a4:	68f8      	ldr	r0, [r7, #12]
 80127a6:	f7fc fe4d 	bl	800f444 <lfs_dir_find>
 80127aa:	6378      	str	r0, [r7, #52]	@ 0x34
    if (tag < 0) {
 80127ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	da01      	bge.n	80127b6 <lfs_stat_+0x28>
        return (int)tag;
 80127b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127b4:	e00c      	b.n	80127d0 <lfs_stat_+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 80127b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7fa ffaf 	bl	800d71c <lfs_tag_id>
 80127be:	4603      	mov	r3, r0
 80127c0:	461a      	mov	r2, r3
 80127c2:	f107 0114 	add.w	r1, r7, #20
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	68f8      	ldr	r0, [r7, #12]
 80127ca:	f7fc fd77 	bl	800f2bc <lfs_dir_getinfo>
 80127ce:	4603      	mov	r3, r0
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3738      	adds	r7, #56	@ 0x38
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <lfs_remove_>:

#ifndef LFS_READONLY
static int lfs_remove_(lfs_t *lfs, const char *path) {
 80127d8:	b580      	push	{r7, lr}
 80127da:	b0a0      	sub	sp, #128	@ 0x80
 80127dc:	af02      	add	r7, sp, #8
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f001 fe0c 	bl	8014400 <lfs_fs_forceconsistency>
 80127e8:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 80127ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d001      	beq.n	80127f4 <lfs_remove_+0x1c>
        return err;
 80127f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80127f2:	e0bc      	b.n	801296e <lfs_remove_+0x196>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 80127f4:	463a      	mov	r2, r7
 80127f6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80127fa:	2300      	movs	r3, #0
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f7fc fe21 	bl	800f444 <lfs_dir_find>
 8012802:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8012804:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012806:	2b00      	cmp	r3, #0
 8012808:	db09      	blt.n	801281e <lfs_remove_+0x46>
 801280a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801280c:	4618      	mov	r0, r3
 801280e:	f7fa ff85 	bl	800d71c <lfs_tag_id>
 8012812:	4603      	mov	r3, r0
 8012814:	461a      	mov	r2, r3
 8012816:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801281a:	429a      	cmp	r2, r3
 801281c:	d107      	bne.n	801282e <lfs_remove_+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801281e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012820:	2b00      	cmp	r3, #0
 8012822:	da01      	bge.n	8012828 <lfs_remove_+0x50>
 8012824:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012826:	e0a2      	b.n	801296e <lfs_remove_+0x196>
 8012828:	f06f 0315 	mvn.w	r3, #21
 801282c:	e09f      	b.n	801296e <lfs_remove_+0x196>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012832:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8012834:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012836:	4618      	mov	r0, r3
 8012838:	f7fa ff46 	bl	800d6c8 <lfs_tag_type3>
 801283c:	4603      	mov	r3, r0
 801283e:	2b02      	cmp	r3, #2
 8012840:	d142      	bne.n	80128c8 <lfs_remove_+0xf0>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8012842:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012844:	4618      	mov	r0, r3
 8012846:	f7fa ff69 	bl	800d71c <lfs_tag_id>
 801284a:	4603      	mov	r3, r0
 801284c:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801284e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012852:	f043 0308 	orr.w	r3, r3, #8
 8012856:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801285a:	f107 020c 	add.w	r2, r7, #12
 801285e:	9200      	str	r2, [sp, #0]
 8012860:	4a45      	ldr	r2, [pc, #276]	@ (8012978 <lfs_remove_+0x1a0>)
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7fb fbd6 	bl	800e014 <lfs_dir_get>
 8012868:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 801286a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801286c:	2b00      	cmp	r3, #0
 801286e:	da01      	bge.n	8012874 <lfs_remove_+0x9c>
            return (int)res;
 8012870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012872:	e07c      	b.n	801296e <lfs_remove_+0x196>
        }
        lfs_pair_fromle32(pair);
 8012874:	f107 030c 	add.w	r3, r7, #12
 8012878:	4618      	mov	r0, r3
 801287a:	f7fa feb0 	bl	800d5de <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801287e:	f107 020c 	add.w	r2, r7, #12
 8012882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012886:	3308      	adds	r3, #8
 8012888:	4619      	mov	r1, r3
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f7fc fcc8 	bl	800f220 <lfs_dir_fetch>
 8012890:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012894:	2b00      	cmp	r3, #0
 8012896:	d001      	beq.n	801289c <lfs_remove_+0xc4>
            return err;
 8012898:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801289a:	e068      	b.n	801296e <lfs_remove_+0x196>
        }

        if (dir.m.count > 0 || dir.m.split) {
 801289c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80128a0:	2b00      	cmp	r3, #0
//            return LFS_ERR_NOTEMPTY;  COMMENT make possible to remove directory iven if not epty.
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 80128a2:	2101      	movs	r1, #1
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f001 fa89 	bl	8013dbc <lfs_fs_preporphans>
 80128aa:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 80128ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d001      	beq.n	80128b6 <lfs_remove_+0xde>
            return err;
 80128b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80128b4:	e05b      	b.n	801296e <lfs_remove_+0x196>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 80128b6:	2300      	movs	r3, #0
 80128b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 80128bc:	2300      	movs	r3, #0
 80128be:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80128c6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 80128c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7fa ff26 	bl	800d71c <lfs_tag_id>
 80128d0:	4603      	mov	r3, r0
 80128d2:	029b      	lsls	r3, r3, #10
 80128d4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80128d8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80128dc:	61fb      	str	r3, [r7, #28]
 80128de:	2300      	movs	r3, #0
 80128e0:	623b      	str	r3, [r7, #32]
 80128e2:	f107 021c 	add.w	r2, r7, #28
 80128e6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80128ea:	2301      	movs	r3, #1
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7fe faf1 	bl	8010ed4 <lfs_dir_commit>
 80128f2:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 80128f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d004      	beq.n	8012904 <lfs_remove_+0x12c>
        lfs->mlist = dir.next;
 80128fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8012900:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012902:	e034      	b.n	801296e <lfs_remove_+0x196>
    }

    lfs->mlist = dir.next;
 8012904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801290a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801290c:	4618      	mov	r0, r3
 801290e:	f7fa fedb 	bl	800d6c8 <lfs_tag_type3>
 8012912:	4603      	mov	r3, r0
 8012914:	2b02      	cmp	r3, #2
 8012916:	d129      	bne.n	801296c <lfs_remove_+0x194>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8012918:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f001 fa4d 	bl	8013dbc <lfs_fs_preporphans>
 8012922:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012924:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012926:	2b00      	cmp	r3, #0
 8012928:	d001      	beq.n	801292e <lfs_remove_+0x156>
            return err;
 801292a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801292c:	e01f      	b.n	801296e <lfs_remove_+0x196>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801292e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8012932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012936:	3308      	adds	r3, #8
 8012938:	4619      	mov	r1, r3
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f001 f8f4 	bl	8013b28 <lfs_fs_pred>
 8012940:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012944:	2b00      	cmp	r3, #0
 8012946:	d001      	beq.n	801294c <lfs_remove_+0x174>
            return err;
 8012948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801294a:	e010      	b.n	801296e <lfs_remove_+0x196>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801294c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012950:	f103 0208 	add.w	r2, r3, #8
 8012954:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012958:	4619      	mov	r1, r3
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f7fd f90c 	bl	800fb78 <lfs_dir_drop>
 8012960:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012964:	2b00      	cmp	r3, #0
 8012966:	d001      	beq.n	801296c <lfs_remove_+0x194>
            return err;
 8012968:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801296a:	e000      	b.n	801296e <lfs_remove_+0x196>
        }
    }

    return 0;
 801296c:	2300      	movs	r3, #0
}
 801296e:	4618      	mov	r0, r3
 8012970:	3778      	adds	r7, #120	@ 0x78
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	bf00      	nop
 8012978:	700ffc00 	.word	0x700ffc00

0801297c <lfs_rename_>:
#endif

#ifndef LFS_READONLY
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801297c:	b590      	push	{r4, r7, lr}
 801297e:	b0c3      	sub	sp, #268	@ 0x10c
 8012980:	af02      	add	r7, sp, #8
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	60b9      	str	r1, [r7, #8]
 8012986:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8012988:	68f8      	ldr	r0, [r7, #12]
 801298a:	f001 fd39 	bl	8014400 <lfs_fs_forceconsistency>
 801298e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    if (err) {
 8012992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012996:	2b00      	cmp	r3, #0
 8012998:	d002      	beq.n	80129a0 <lfs_rename_+0x24>
        return err;
 801299a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801299e:	e203      	b.n	8012da8 <lfs_rename_+0x42c>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 80129a0:	f107 0208 	add.w	r2, r7, #8
 80129a4:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 80129a8:	2300      	movs	r3, #0
 80129aa:	68f8      	ldr	r0, [r7, #12]
 80129ac:	f7fc fd4a 	bl	800f444 <lfs_dir_find>
 80129b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 80129b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	db0a      	blt.n	80129d2 <lfs_rename_+0x56>
 80129bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7fa feab 	bl	800d71c <lfs_tag_id>
 80129c6:	4603      	mov	r3, r0
 80129c8:	461a      	mov	r2, r3
 80129ca:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d109      	bne.n	80129e6 <lfs_rename_+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 80129d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	da02      	bge.n	80129e0 <lfs_rename_+0x64>
 80129da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80129de:	e1e3      	b.n	8012da8 <lfs_rename_+0x42c>
 80129e0:	f06f 0315 	mvn.w	r3, #21
 80129e4:	e1e0      	b.n	8012da8 <lfs_rename_+0x42c>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 80129e6:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 80129ea:	1d3a      	adds	r2, r7, #4
 80129ec:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	f7fc fd27 	bl	800f444 <lfs_dir_find>
 80129f6:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 80129fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	db0a      	blt.n	8012a18 <lfs_rename_+0x9c>
 8012a02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7fa fe88 	bl	800d71c <lfs_tag_id>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	461a      	mov	r2, r3
 8012a10:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d114      	bne.n	8012a42 <lfs_rename_+0xc6>
 8012a18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a1c:	f113 0f02 	cmn.w	r3, #2
 8012a20:	d105      	bne.n	8012a2e <lfs_rename_+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 8012a22:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012a26:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8012a2a:	4293      	cmp	r3, r2
 8012a2c:	d109      	bne.n	8012a42 <lfs_rename_+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 8012a2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	da02      	bge.n	8012a3c <lfs_rename_+0xc0>
 8012a36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a3a:	e1b5      	b.n	8012da8 <lfs_rename_+0x42c>
 8012a3c:	f06f 0315 	mvn.w	r3, #21
 8012a40:	e1b2      	b.n	8012da8 <lfs_rename_+0x42c>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 8012a42:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8012a46:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8012a4a:	4611      	mov	r1, r2
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7fa fd6f 	bl	800d530 <lfs_pair_cmp>
 8012a52:	4603      	mov	r3, r0
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	bf0c      	ite	eq
 8012a58:	2301      	moveq	r3, #1
 8012a5a:	2300      	movne	r3, #0
 8012a5c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 8012a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fa fe59 	bl	800d71c <lfs_tag_id>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a74:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (prevtag == LFS_ERR_NOENT) {
 8012a76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a7a:	f113 0f02 	cmn.w	r3, #2
 8012a7e:	d120      	bne.n	8012ac2 <lfs_rename_+0x146>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7ed fc0c 	bl	80002a0 <strlen>
 8012a88:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (nlen > lfs->name_max) {
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a90:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d902      	bls.n	8012a9e <lfs_rename_+0x122>
            return LFS_ERR_NAMETOOLONG;
 8012a98:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8012a9c:	e184      	b.n	8012da8 <lfs_rename_+0x42c>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 8012a9e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	f000 8090 	beq.w	8012bc8 <lfs_rename_+0x24c>
 8012aa8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012aac:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	f0c0 8089 	bcc.w	8012bc8 <lfs_rename_+0x24c>
            newoldid += 1;
 8012ab6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8012aba:	3301      	adds	r3, #1
 8012abc:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8012ac0:	e082      	b.n	8012bc8 <lfs_rename_+0x24c>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 8012ac2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7fa fdfe 	bl	800d6c8 <lfs_tag_type3>
 8012acc:	4603      	mov	r3, r0
 8012ace:	461c      	mov	r4, r3
 8012ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7fa fdf7 	bl	800d6c8 <lfs_tag_type3>
 8012ada:	4603      	mov	r3, r0
 8012adc:	429c      	cmp	r4, r3
 8012ade:	d00d      	beq.n	8012afc <lfs_rename_+0x180>
        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)
 8012ae0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7fa fdef 	bl	800d6c8 <lfs_tag_type3>
 8012aea:	4603      	mov	r3, r0
                ? LFS_ERR_ISDIR
                : LFS_ERR_NOTDIR;
 8012aec:	2b02      	cmp	r3, #2
 8012aee:	d102      	bne.n	8012af6 <lfs_rename_+0x17a>
 8012af0:	f06f 0314 	mvn.w	r3, #20
 8012af4:	e158      	b.n	8012da8 <lfs_rename_+0x42c>
 8012af6:	f06f 0313 	mvn.w	r3, #19
 8012afa:	e155      	b.n	8012da8 <lfs_rename_+0x42c>
    } else if (samepair && newid == newoldid) {
 8012afc:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d007      	beq.n	8012b14 <lfs_rename_+0x198>
 8012b04:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012b08:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d101      	bne.n	8012b14 <lfs_rename_+0x198>
        // we're renaming to ourselves??
        return 0;
 8012b10:	2300      	movs	r3, #0
 8012b12:	e149      	b.n	8012da8 <lfs_rename_+0x42c>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8012b14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7fa fdd5 	bl	800d6c8 <lfs_tag_type3>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b02      	cmp	r3, #2
 8012b22:	d151      	bne.n	8012bc8 <lfs_rename_+0x24c>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8012b24:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012b28:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8012b2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012b2e:	f043 0308 	orr.w	r3, r3, #8
 8012b32:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8012b36:	f107 0220 	add.w	r2, r7, #32
 8012b3a:	9200      	str	r2, [sp, #0]
 8012b3c:	4a9d      	ldr	r2, [pc, #628]	@ (8012db4 <lfs_rename_+0x438>)
 8012b3e:	68f8      	ldr	r0, [r7, #12]
 8012b40:	f7fb fa68 	bl	800e014 <lfs_dir_get>
 8012b44:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
        if (res < 0) {
 8012b48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	da02      	bge.n	8012b56 <lfs_rename_+0x1da>
            return (int)res;
 8012b50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012b54:	e128      	b.n	8012da8 <lfs_rename_+0x42c>
        }
        lfs_pair_fromle32(prevpair);
 8012b56:	f107 0320 	add.w	r3, r7, #32
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7fa fd3f 	bl	800d5de <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 8012b60:	f107 0220 	add.w	r2, r7, #32
 8012b64:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8012b68:	3308      	adds	r3, #8
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	68f8      	ldr	r0, [r7, #12]
 8012b6e:	f7fc fb57 	bl	800f220 <lfs_dir_fetch>
 8012b72:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012b76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d002      	beq.n	8012b84 <lfs_rename_+0x208>
            return err;
 8012b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012b82:	e111      	b.n	8012da8 <lfs_rename_+0x42c>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 8012b84:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d103      	bne.n	8012b94 <lfs_rename_+0x218>
 8012b8c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d002      	beq.n	8012b9a <lfs_rename_+0x21e>
            return LFS_ERR_NOTEMPTY;
 8012b94:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 8012b98:	e106      	b.n	8012da8 <lfs_rename_+0x42c>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8012b9a:	2101      	movs	r1, #1
 8012b9c:	68f8      	ldr	r0, [r7, #12]
 8012b9e:	f001 f90d 	bl	8013dbc <lfs_fs_preporphans>
 8012ba2:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d002      	beq.n	8012bb4 <lfs_rename_+0x238>
            return err;
 8012bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012bb2:	e0f9      	b.n	8012da8 <lfs_rename_+0x42c>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
        prevdir.id = 0;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        lfs->mlist = &prevdir;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8012bc6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (!samepair) {
 8012bc8:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012bcc:	f083 0301 	eor.w	r3, r3, #1
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d007      	beq.n	8012be6 <lfs_rename_+0x26a>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 8012bd6:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8012bda:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8012bde:	4619      	mov	r1, r3
 8012be0:	68f8      	ldr	r0, [r7, #12]
 8012be2:	f001 f93b 	bl	8013e5c <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8012be6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012bea:	f113 0f02 	cmn.w	r3, #2
 8012bee:	d007      	beq.n	8012c00 <lfs_rename_+0x284>
 8012bf0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012bf4:	029b      	lsls	r3, r3, #10
 8012bf6:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012bfa:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8012bfe:	e000      	b.n	8012c02 <lfs_rename_+0x286>
 8012c00:	2300      	movs	r3, #0
 8012c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8012c04:	2300      	movs	r3, #0
 8012c06:	657b      	str	r3, [r7, #84]	@ 0x54
 8012c08:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012c0c:	029b      	lsls	r3, r3, #10
 8012c0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012c12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012c16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012c18:	2300      	movs	r3, #0
 8012c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7fa fd51 	bl	800d6c8 <lfs_tag_type3>
 8012c26:	4603      	mov	r3, r0
 8012c28:	051a      	lsls	r2, r3, #20
 8012c2a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012c2e:	029b      	lsls	r3, r3, #10
 8012c30:	ea42 0403 	orr.w	r4, r2, r3
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7ed fb32 	bl	80002a0 <strlen>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	4323      	orrs	r3, r4
 8012c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	667b      	str	r3, [r7, #100]	@ 0x64
 8012c46:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012c4a:	029c      	lsls	r4, r3, #10
 8012c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7fa fd63 	bl	800d71c <lfs_tag_id>
 8012c56:	4603      	mov	r3, r0
 8012c58:	4323      	orrs	r3, r4
 8012c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012c62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012c64:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8012c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012c6a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d007      	beq.n	8012c82 <lfs_rename_+0x306>
 8012c72:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8012c76:	029b      	lsls	r3, r3, #10
 8012c78:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012c7c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8012c80:	e000      	b.n	8012c84 <lfs_rename_+0x308>
 8012c82:	2300      	movs	r3, #0
 8012c84:	673b      	str	r3, [r7, #112]	@ 0x70
 8012c86:	2300      	movs	r3, #0
 8012c88:	677b      	str	r3, [r7, #116]	@ 0x74
 8012c8a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8012c8e:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8012c92:	2305      	movs	r3, #5
 8012c94:	68f8      	ldr	r0, [r7, #12]
 8012c96:	f7fe f91d 	bl	8010ed4 <lfs_dir_commit>
 8012c9a:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 8012c9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d005      	beq.n	8012cb2 <lfs_rename_+0x336>
        lfs->mlist = prevdir.next;
 8012ca6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8012cac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012cb0:	e07a      	b.n	8012da8 <lfs_rename_+0x42c>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 8012cb2:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012cb6:	f083 0301 	eor.w	r3, r3, #1
 8012cba:	b2db      	uxtb	r3, r3
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d02f      	beq.n	8012d20 <lfs_rename_+0x3a4>
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	3330      	adds	r3, #48	@ 0x30
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7fa fdbe 	bl	800d846 <lfs_gstate_hasmove>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d027      	beq.n	8012d20 <lfs_rename_+0x3a4>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8012cd6:	68f8      	ldr	r0, [r7, #12]
 8012cd8:	f001 f8c0 	bl	8013e5c <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 8012cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fa fd1b 	bl	800d71c <lfs_tag_id>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	029b      	lsls	r3, r3, #10
 8012cea:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012cee:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8012cf2:	61bb      	str	r3, [r7, #24]
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	61fb      	str	r3, [r7, #28]
 8012cf8:	f107 0218 	add.w	r2, r7, #24
 8012cfc:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8012d00:	2301      	movs	r3, #1
 8012d02:	68f8      	ldr	r0, [r7, #12]
 8012d04:	f7fe f8e6 	bl	8010ed4 <lfs_dir_commit>
 8012d08:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 8012d0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d005      	beq.n	8012d20 <lfs_rename_+0x3a4>
            lfs->mlist = prevdir.next;
 8012d14:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 8012d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d1e:	e043      	b.n	8012da8 <lfs_rename_+0x42c>
        }
    }

    lfs->mlist = prevdir.next;
 8012d20:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	629a      	str	r2, [r3, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 8012d26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d2a:	f113 0f02 	cmn.w	r3, #2
 8012d2e:	d03a      	beq.n	8012da6 <lfs_rename_+0x42a>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8012d30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7fa fcc7 	bl	800d6c8 <lfs_tag_type3>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2b02      	cmp	r3, #2
 8012d3e:	d132      	bne.n	8012da6 <lfs_rename_+0x42a>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8012d40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012d44:	68f8      	ldr	r0, [r7, #12]
 8012d46:	f001 f839 	bl	8013dbc <lfs_fs_preporphans>
 8012d4a:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d002      	beq.n	8012d5c <lfs_rename_+0x3e0>
            return err;
 8012d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d5a:	e025      	b.n	8012da8 <lfs_rename_+0x42c>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 8012d5c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8012d60:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8012d64:	3308      	adds	r3, #8
 8012d66:	4619      	mov	r1, r3
 8012d68:	68f8      	ldr	r0, [r7, #12]
 8012d6a:	f000 fedd 	bl	8013b28 <lfs_fs_pred>
 8012d6e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d002      	beq.n	8012d80 <lfs_rename_+0x404>
            return err;
 8012d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d7e:	e013      	b.n	8012da8 <lfs_rename_+0x42c>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 8012d80:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8012d84:	f103 0208 	add.w	r2, r3, #8
 8012d88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	68f8      	ldr	r0, [r7, #12]
 8012d90:	f7fc fef2 	bl	800fb78 <lfs_dir_drop>
 8012d94:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012d98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d002      	beq.n	8012da6 <lfs_rename_+0x42a>
            return err;
 8012da0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012da4:	e000      	b.n	8012da8 <lfs_rename_+0x42c>
        }
    }

    return 0;
 8012da6:	2300      	movs	r3, #0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd90      	pop	{r4, r7, pc}
 8012db2:	bf00      	nop
 8012db4:	700ffc00 	.word	0x700ffc00

08012db8 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8012db8:	b590      	push	{r4, r7, lr}
 8012dba:	b08d      	sub	sp, #52	@ 0x34
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	683a      	ldr	r2, [r7, #0]
 8012dc6:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012dd8:	69db      	ldr	r3, [r3, #28]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d106      	bne.n	8012dec <lfs_init+0x34>
 8012dde:	4b96      	ldr	r3, [pc, #600]	@ (8013038 <lfs_init+0x280>)
 8012de0:	4a96      	ldr	r2, [pc, #600]	@ (801303c <lfs_init+0x284>)
 8012de2:	f241 0152 	movw	r1, #4178	@ 0x1052
 8012de6:	4896      	ldr	r0, [pc, #600]	@ (8013040 <lfs_init+0x288>)
 8012de8:	f010 f8d6 	bl	8022f98 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012df0:	6a1b      	ldr	r3, [r3, #32]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d106      	bne.n	8012e04 <lfs_init+0x4c>
 8012df6:	4b93      	ldr	r3, [pc, #588]	@ (8013044 <lfs_init+0x28c>)
 8012df8:	4a90      	ldr	r2, [pc, #576]	@ (801303c <lfs_init+0x284>)
 8012dfa:	f241 0153 	movw	r1, #4179	@ 0x1053
 8012dfe:	4890      	ldr	r0, [pc, #576]	@ (8013040 <lfs_init+0x288>)
 8012e00:	f010 f8ca 	bl	8022f98 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d106      	bne.n	8012e1c <lfs_init+0x64>
 8012e0e:	4b8e      	ldr	r3, [pc, #568]	@ (8013048 <lfs_init+0x290>)
 8012e10:	4a8a      	ldr	r2, [pc, #552]	@ (801303c <lfs_init+0x284>)
 8012e12:	f241 0154 	movw	r1, #4180	@ 0x1054
 8012e16:	488a      	ldr	r0, [pc, #552]	@ (8013040 <lfs_init+0x288>)
 8012e18:	f010 f8be 	bl	8022f98 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012e26:	69d2      	ldr	r2, [r2, #28]
 8012e28:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e2c:	fb01 f202 	mul.w	r2, r1, r2
 8012e30:	1a9b      	subs	r3, r3, r2
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d006      	beq.n	8012e44 <lfs_init+0x8c>
 8012e36:	4b85      	ldr	r3, [pc, #532]	@ (801304c <lfs_init+0x294>)
 8012e38:	4a80      	ldr	r2, [pc, #512]	@ (801303c <lfs_init+0x284>)
 8012e3a:	f241 0158 	movw	r1, #4184	@ 0x1058
 8012e3e:	4880      	ldr	r0, [pc, #512]	@ (8013040 <lfs_init+0x288>)
 8012e40:	f010 f8aa 	bl	8022f98 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012e4e:	6a12      	ldr	r2, [r2, #32]
 8012e50:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e54:	fb01 f202 	mul.w	r2, r1, r2
 8012e58:	1a9b      	subs	r3, r3, r2
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d006      	beq.n	8012e6c <lfs_init+0xb4>
 8012e5e:	4b7c      	ldr	r3, [pc, #496]	@ (8013050 <lfs_init+0x298>)
 8012e60:	4a76      	ldr	r2, [pc, #472]	@ (801303c <lfs_init+0x284>)
 8012e62:	f241 0159 	movw	r1, #4185	@ 0x1059
 8012e66:	4876      	ldr	r0, [pc, #472]	@ (8013040 <lfs_init+0x288>)
 8012e68:	f010 f896 	bl	8022f98 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e72:	687a      	ldr	r2, [r7, #4]
 8012e74:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012e76:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012e78:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e7c:	fb01 f202 	mul.w	r2, r1, r2
 8012e80:	1a9b      	subs	r3, r3, r2
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d006      	beq.n	8012e94 <lfs_init+0xdc>
 8012e86:	4b73      	ldr	r3, [pc, #460]	@ (8013054 <lfs_init+0x29c>)
 8012e88:	4a6c      	ldr	r2, [pc, #432]	@ (801303c <lfs_init+0x284>)
 8012e8a:	f241 015a 	movw	r1, #4186	@ 0x105a
 8012e8e:	486c      	ldr	r0, [pc, #432]	@ (8013040 <lfs_init+0x288>)
 8012e90:	f010 f882 	bl	8022f98 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8012e9c:	d806      	bhi.n	8012eac <lfs_init+0xf4>
 8012e9e:	4b6e      	ldr	r3, [pc, #440]	@ (8013058 <lfs_init+0x2a0>)
 8012ea0:	4a66      	ldr	r2, [pc, #408]	@ (801303c <lfs_init+0x284>)
 8012ea2:	f241 015d 	movw	r1, #4189	@ 0x105d
 8012ea6:	4866      	ldr	r0, [pc, #408]	@ (8013040 <lfs_init+0x288>)
 8012ea8:	f010 f876 	bl	8022f98 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012eb2:	3b08      	subs	r3, #8
 8012eb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7f9 fef1 	bl	800cca4 <lfs_npw2>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	009a      	lsls	r2, r3, #2
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d906      	bls.n	8012ede <lfs_init+0x126>
 8012ed0:	4b62      	ldr	r3, [pc, #392]	@ (801305c <lfs_init+0x2a4>)
 8012ed2:	4a5a      	ldr	r2, [pc, #360]	@ (801303c <lfs_init+0x284>)
 8012ed4:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8012ed8:	4859      	ldr	r0, [pc, #356]	@ (8013040 <lfs_init+0x288>)
 8012eda:	f010 f85d 	bl	8022f98 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d106      	bne.n	8012ef6 <lfs_init+0x13e>
 8012ee8:	4b5d      	ldr	r3, [pc, #372]	@ (8013060 <lfs_init+0x2a8>)
 8012eea:	4a54      	ldr	r2, [pc, #336]	@ (801303c <lfs_init+0x284>)
 8012eec:	f241 0169 	movw	r1, #4201	@ 0x1069
 8012ef0:	4853      	ldr	r0, [pc, #332]	@ (8013040 <lfs_init+0x288>)
 8012ef2:	f010 f851 	bl	8022f98 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d00f      	beq.n	8012f20 <lfs_init+0x168>
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f0c:	085b      	lsrs	r3, r3, #1
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d206      	bcs.n	8012f20 <lfs_init+0x168>
 8012f12:	4b54      	ldr	r3, [pc, #336]	@ (8013064 <lfs_init+0x2ac>)
 8012f14:	4a49      	ldr	r2, [pc, #292]	@ (801303c <lfs_init+0x284>)
 8012f16:	f241 016f 	movw	r1, #4207	@ 0x106f
 8012f1a:	4849      	ldr	r0, [pc, #292]	@ (8013040 <lfs_init+0x288>)
 8012f1c:	f010 f83c 	bl	8022f98 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012f2a:	d00e      	beq.n	8012f4a <lfs_init+0x192>
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f38:	429a      	cmp	r2, r3
 8012f3a:	d906      	bls.n	8012f4a <lfs_init+0x192>
 8012f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8013068 <lfs_init+0x2b0>)
 8012f3e:	4a3f      	ldr	r2, [pc, #252]	@ (801303c <lfs_init+0x284>)
 8012f40:	f241 0171 	movw	r1, #4209	@ 0x1071
 8012f44:	483e      	ldr	r0, [pc, #248]	@ (8013040 <lfs_init+0x288>)
 8012f46:	f010 f827 	bl	8022f98 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d005      	beq.n	8012f60 <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	60da      	str	r2, [r3, #12]
 8012f5e:	e010      	b.n	8012f82 <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7f9 ff04 	bl	800cd74 <lfs_malloc>
 8012f6c:	4602      	mov	r2, r0
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d103      	bne.n	8012f82 <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 8012f7a:	f06f 030b 	mvn.w	r3, #11
 8012f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8012f80:	e163      	b.n	801324a <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d005      	beq.n	8012f98 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	61da      	str	r2, [r3, #28]
 8012f96:	e010      	b.n	8012fba <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7f9 fee8 	bl	800cd74 <lfs_malloc>
 8012fa4:	4602      	mov	r2, r0
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	69db      	ldr	r3, [r3, #28]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d103      	bne.n	8012fba <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 8012fb2:	f06f 030b 	mvn.w	r3, #11
 8012fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8012fb8:	e147      	b.n	801324a <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	6878      	ldr	r0, [r7, #4]
 8012fc0:	f7f9 fefe 	bl	800cdc0 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	3310      	adds	r3, #16
 8012fc8:	4619      	mov	r1, r3
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f7f9 fef8 	bl	800cdc0 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d106      	bne.n	8012fe8 <lfs_init+0x230>
 8012fda:	4b24      	ldr	r3, [pc, #144]	@ (801306c <lfs_init+0x2b4>)
 8012fdc:	4a17      	ldr	r2, [pc, #92]	@ (801303c <lfs_init+0x284>)
 8012fde:	f241 0190 	movw	r1, #4240	@ 0x1090
 8012fe2:	4817      	ldr	r0, [pc, #92]	@ (8013040 <lfs_init+0x288>)
 8012fe4:	f00f ffd8 	bl	8022f98 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d005      	beq.n	8012ffe <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ff6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	665a      	str	r2, [r3, #100]	@ 0x64
 8012ffc:	e010      	b.n	8013020 <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013004:	4618      	mov	r0, r3
 8013006:	f7f9 feb5 	bl	800cd74 <lfs_malloc>
 801300a:	4602      	mov	r2, r0
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013014:	2b00      	cmp	r3, #0
 8013016:	d103      	bne.n	8013020 <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 8013018:	f06f 030b 	mvn.w	r3, #11
 801301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 801301e:	e114      	b.n	801324a <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013026:	2bff      	cmp	r3, #255	@ 0xff
 8013028:	d924      	bls.n	8013074 <lfs_init+0x2bc>
 801302a:	4b11      	ldr	r3, [pc, #68]	@ (8013070 <lfs_init+0x2b8>)
 801302c:	4a03      	ldr	r2, [pc, #12]	@ (801303c <lfs_init+0x284>)
 801302e:	f241 019c 	movw	r1, #4252	@ 0x109c
 8013032:	4803      	ldr	r0, [pc, #12]	@ (8013040 <lfs_init+0x288>)
 8013034:	f00f ffb0 	bl	8022f98 <__assert_func>
 8013038:	08030824 	.word	0x08030824
 801303c:	08033cc0 	.word	0x08033cc0
 8013040:	08030474 	.word	0x08030474
 8013044:	08030840 	.word	0x08030840
 8013048:	0803085c 	.word	0x0803085c
 801304c:	08030878 	.word	0x08030878
 8013050:	080308a8 	.word	0x080308a8
 8013054:	080308d8 	.word	0x080308d8
 8013058:	0803090c 	.word	0x0803090c
 801305c:	08030928 	.word	0x08030928
 8013060:	08030974 	.word	0x08030974
 8013064:	08030990 	.word	0x08030990
 8013068:	080309e4 	.word	0x080309e4
 801306c:	08030a44 	.word	0x08030a44
 8013070:	08030a64 	.word	0x08030a64
    lfs->name_max = lfs->cfg->name_max;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013078:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013082:	2b00      	cmp	r3, #0
 8013084:	d102      	bne.n	801308c <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	22ff      	movs	r2, #255	@ 0xff
 801308a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013092:	2b00      	cmp	r3, #0
 8013094:	da06      	bge.n	80130a4 <lfs_init+0x2ec>
 8013096:	4b71      	ldr	r3, [pc, #452]	@ (801325c <lfs_init+0x4a4>)
 8013098:	4a71      	ldr	r2, [pc, #452]	@ (8013260 <lfs_init+0x4a8>)
 801309a:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801309e:	4871      	ldr	r0, [pc, #452]	@ (8013264 <lfs_init+0x4ac>)
 80130a0:	f00f ff7a 	bl	8022f98 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80130a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d103      	bne.n	80130be <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80130bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80130c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80130c4:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80130c8:	4293      	cmp	r3, r2
 80130ca:	d906      	bls.n	80130da <lfs_init+0x322>
 80130cc:	4b66      	ldr	r3, [pc, #408]	@ (8013268 <lfs_init+0x4b0>)
 80130ce:	4a64      	ldr	r2, [pc, #400]	@ (8013260 <lfs_init+0x4a8>)
 80130d0:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 80130d4:	4863      	ldr	r0, [pc, #396]	@ (8013264 <lfs_init+0x4ac>)
 80130d6:	f00f ff5f 	bl	8022f98 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80130de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d103      	bne.n	80130f4 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80130f2:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80130f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80130fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013100:	429a      	cmp	r2, r3
 8013102:	d906      	bls.n	8013112 <lfs_init+0x35a>
 8013104:	4b59      	ldr	r3, [pc, #356]	@ (801326c <lfs_init+0x4b4>)
 8013106:	4a56      	ldr	r2, [pc, #344]	@ (8013260 <lfs_init+0x4a8>)
 8013108:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801310c:	4855      	ldr	r0, [pc, #340]	@ (8013264 <lfs_init+0x4ac>)
 801310e:	f00f ff43 	bl	8022f98 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013118:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801311c:	d00e      	beq.n	801313c <lfs_init+0x384>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013122:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801312a:	429a      	cmp	r2, r3
 801312c:	d906      	bls.n	801313c <lfs_init+0x384>
 801312e:	4b50      	ldr	r3, [pc, #320]	@ (8013270 <lfs_init+0x4b8>)
 8013130:	4a4b      	ldr	r2, [pc, #300]	@ (8013260 <lfs_init+0x4a8>)
 8013132:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8013136:	484b      	ldr	r0, [pc, #300]	@ (8013264 <lfs_init+0x4ac>)
 8013138:	f00f ff2e 	bl	8022f98 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013142:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013146:	d00d      	beq.n	8013164 <lfs_init+0x3ac>
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801314c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013152:	429a      	cmp	r2, r3
 8013154:	d906      	bls.n	8013164 <lfs_init+0x3ac>
 8013156:	4b47      	ldr	r3, [pc, #284]	@ (8013274 <lfs_init+0x4bc>)
 8013158:	4a41      	ldr	r2, [pc, #260]	@ (8013260 <lfs_init+0x4a8>)
 801315a:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801315e:	4841      	ldr	r0, [pc, #260]	@ (8013264 <lfs_init+0x4ac>)
 8013160:	f00f ff1a 	bl	8022f98 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801316a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801316e:	d019      	beq.n	80131a4 <lfs_init+0x3ec>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013174:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801317a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801317c:	2b00      	cmp	r3, #0
 801317e:	d004      	beq.n	801318a <lfs_init+0x3d2>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013186:	08db      	lsrs	r3, r3, #3
 8013188:	e003      	b.n	8013192 <lfs_init+0x3da>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013190:	08db      	lsrs	r3, r3, #3
 8013192:	4293      	cmp	r3, r2
 8013194:	d206      	bcs.n	80131a4 <lfs_init+0x3ec>
 8013196:	4b38      	ldr	r3, [pc, #224]	@ (8013278 <lfs_init+0x4c0>)
 8013198:	4a31      	ldr	r2, [pc, #196]	@ (8013260 <lfs_init+0x4a8>)
 801319a:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801319e:	4831      	ldr	r0, [pc, #196]	@ (8013264 <lfs_init+0x4ac>)
 80131a0:	f00f fefa 	bl	8022f98 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80131b6:	d103      	bne.n	80131c0 <lfs_init+0x408>
        lfs->inline_max = 0;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2200      	movs	r2, #0
 80131bc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80131be:	e022      	b.n	8013206 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d11e      	bne.n	8013206 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131cc:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d004      	beq.n	80131e6 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 80131e2:	08db      	lsrs	r3, r3, #3
 80131e4:	e003      	b.n	80131ee <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 80131ec:	08db      	lsrs	r3, r3, #3
 80131ee:	4619      	mov	r1, r3
 80131f0:	4610      	mov	r0, r2
 80131f2:	f7f9 fd20 	bl	800cc36 <lfs_min>
 80131f6:	4603      	mov	r3, r0
 80131f8:	4619      	mov	r1, r3
 80131fa:	4620      	mov	r0, r4
 80131fc:	f7f9 fd1b 	bl	800cc36 <lfs_min>
 8013200:	4602      	mov	r2, r0
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801320c:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013214:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2200      	movs	r2, #0
 801321a:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2200      	movs	r2, #0
 8013220:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	333c      	adds	r3, #60	@ 0x3c
 8013226:	2200      	movs	r2, #0
 8013228:	601a      	str	r2, [r3, #0]
 801322a:	605a      	str	r2, [r3, #4]
 801322c:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	3330      	adds	r3, #48	@ 0x30
 8013232:	2200      	movs	r2, #0
 8013234:	601a      	str	r2, [r3, #0]
 8013236:	605a      	str	r2, [r3, #4]
 8013238:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	3348      	adds	r3, #72	@ 0x48
 801323e:	2200      	movs	r2, #0
 8013240:	601a      	str	r2, [r3, #0]
 8013242:	605a      	str	r2, [r3, #4]
 8013244:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8013246:	2300      	movs	r3, #0
 8013248:	e003      	b.n	8013252 <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 801324a:	6878      	ldr	r0, [r7, #4]
 801324c:	f000 f816 	bl	801327c <lfs_deinit>
    return err;
 8013250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8013252:	4618      	mov	r0, r3
 8013254:	3734      	adds	r7, #52	@ 0x34
 8013256:	46bd      	mov	sp, r7
 8013258:	bd90      	pop	{r4, r7, pc}
 801325a:	bf00      	nop
 801325c:	08030a80 	.word	0x08030a80
 8013260:	08033cc0 	.word	0x08033cc0
 8013264:	08030474 	.word	0x08030474
 8013268:	08030aa4 	.word	0x08030aa4
 801326c:	08030ac0 	.word	0x08030ac0
 8013270:	08030af0 	.word	0x08030af0
 8013274:	08030b48 	.word	0x08030b48
 8013278:	08030b98 	.word	0x08030b98

0801327c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801328a:	2b00      	cmp	r3, #0
 801328c:	d104      	bne.n	8013298 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	68db      	ldr	r3, [r3, #12]
 8013292:	4618      	mov	r0, r3
 8013294:	f7f9 fd7a 	bl	800cd8c <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d104      	bne.n	80132ac <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	69db      	ldr	r3, [r3, #28]
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7f9 fd70 	bl	800cd8c <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80132b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d104      	bne.n	80132c0 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7f9 fd66 	bl	800cd8c <lfs_free>
    }

    return 0;
 80132c0:	2300      	movs	r3, #0
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3708      	adds	r7, #8
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
	...

080132cc <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b0a0      	sub	sp, #128	@ 0x80
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	6039      	str	r1, [r7, #0]
    int err = 0;
 80132d6:	2300      	movs	r3, #0
 80132d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 80132da:	6839      	ldr	r1, [r7, #0]
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f7ff fd6b 	bl	8012db8 <lfs_init>
 80132e2:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80132e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d001      	beq.n	80132ee <lfs_format_+0x22>
            return err;
 80132ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80132ec:	e08d      	b.n	801340a <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d106      	bne.n	8013304 <lfs_format_+0x38>
 80132f6:	4b47      	ldr	r3, [pc, #284]	@ (8013414 <lfs_format_+0x148>)
 80132f8:	4a47      	ldr	r2, [pc, #284]	@ (8013418 <lfs_format_+0x14c>)
 80132fa:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 80132fe:	4847      	ldr	r0, [pc, #284]	@ (801341c <lfs_format_+0x150>)
 8013300:	f00f fe4a 	bl	8022f98 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801330e:	461a      	mov	r2, r3
 8013310:	2100      	movs	r1, #0
 8013312:	f012 fe21 	bl	8025f58 <memset>
        lfs->lookahead.start = 0;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	2200      	movs	r2, #0
 801331a:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013322:	00da      	lsls	r2, r3, #3
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013328:	4619      	mov	r1, r3
 801332a:	4610      	mov	r0, r2
 801332c:	f7f9 fc83 	bl	800cc36 <lfs_min>
 8013330:	4602      	mov	r2, r0
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2200      	movs	r2, #0
 801333a:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801333c:	6878      	ldr	r0, [r7, #4]
 801333e:	f7fa fc54 	bl	800dbea <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8013342:	f107 030c 	add.w	r3, r7, #12
 8013346:	4619      	mov	r1, r3
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f7fc fb9b 	bl	800fa84 <lfs_dir_alloc>
 801334e:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8013350:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013352:	2b00      	cmp	r3, #0
 8013354:	d150      	bne.n	80133f8 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7fa fc1e 	bl	800db98 <lfs_fs_disk_version>
 801335c:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 801335e:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 8013366:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801336c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 8013372:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 8013378:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801337e:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8013380:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013384:	4618      	mov	r0, r3
 8013386:	f7fa fb7d 	bl	800da84 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801338a:	4b25      	ldr	r3, [pc, #148]	@ (8013420 <lfs_format_+0x154>)
 801338c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801338e:	2300      	movs	r3, #0
 8013390:	653b      	str	r3, [r7, #80]	@ 0x50
 8013392:	4b24      	ldr	r3, [pc, #144]	@ (8013424 <lfs_format_+0x158>)
 8013394:	657b      	str	r3, [r7, #84]	@ 0x54
 8013396:	4b24      	ldr	r3, [pc, #144]	@ (8013428 <lfs_format_+0x15c>)
 8013398:	65bb      	str	r3, [r7, #88]	@ 0x58
 801339a:	4b24      	ldr	r3, [pc, #144]	@ (801342c <lfs_format_+0x160>)
 801339c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801339e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80133a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80133a4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80133a8:	f107 010c 	add.w	r1, r7, #12
 80133ac:	2303      	movs	r3, #3
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7fd fd90 	bl	8010ed4 <lfs_dir_commit>
 80133b4:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80133b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d11f      	bne.n	80133fc <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80133bc:	2300      	movs	r3, #0
 80133be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80133c2:	f107 010c 	add.w	r1, r7, #12
 80133c6:	2300      	movs	r3, #0
 80133c8:	2200      	movs	r2, #0
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f7fd fd82 	bl	8010ed4 <lfs_dir_commit>
 80133d0:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80133d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d113      	bne.n	8013400 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80133d8:	2300      	movs	r3, #0
 80133da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80133dc:	2301      	movs	r3, #1
 80133de:	633b      	str	r3, [r7, #48]	@ 0x30
 80133e0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80133e4:	f107 030c 	add.w	r3, r7, #12
 80133e8:	4619      	mov	r1, r3
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f7fb ff18 	bl	800f220 <lfs_dir_fetch>
 80133f0:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80133f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	e004      	b.n	8013402 <lfs_format_+0x136>
            goto cleanup;
 80133f8:	bf00      	nop
 80133fa:	e002      	b.n	8013402 <lfs_format_+0x136>
            goto cleanup;
 80133fc:	bf00      	nop
 80133fe:	e000      	b.n	8013402 <lfs_format_+0x136>
            goto cleanup;
 8013400:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8013402:	6878      	ldr	r0, [r7, #4]
 8013404:	f7ff ff3a 	bl	801327c <lfs_deinit>
    return err;
 8013408:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 801340a:	4618      	mov	r0, r3
 801340c:	3780      	adds	r7, #128	@ 0x80
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	08030c28 	.word	0x08030c28
 8013418:	08033ccc 	.word	0x08033ccc
 801341c:	08030474 	.word	0x08030474
 8013420:	40100000 	.word	0x40100000
 8013424:	0ff00008 	.word	0x0ff00008
 8013428:	08030c40 	.word	0x08030c40
 801342c:	20100018 	.word	0x20100018

08013430 <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8013430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013432:	b0a1      	sub	sp, #132	@ 0x84
 8013434:	af04      	add	r7, sp, #16
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 801343a:	6839      	ldr	r1, [r7, #0]
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	f7ff fcbb 	bl	8012db8 <lfs_init>
 8013442:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 8013444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013446:	2b00      	cmp	r3, #0
 8013448:	d001      	beq.n	801344e <lfs_mount_+0x1e>
        return err;
 801344a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801344c:	e202      	b.n	8013854 <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 801344e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013452:	2220      	movs	r2, #32
 8013454:	2100      	movs	r1, #0
 8013456:	4618      	mov	r0, r3
 8013458:	f012 fd7e 	bl	8025f58 <memset>
 801345c:	2301      	movs	r3, #1
 801345e:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8013460:	4a9a      	ldr	r2, [pc, #616]	@ (80136cc <lfs_mount_+0x29c>)
 8013462:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013466:	e892 0003 	ldmia.w	r2, {r0, r1}
 801346a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 801346e:	2301      	movs	r3, #1
 8013470:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 8013472:	2301      	movs	r3, #1
 8013474:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 8013476:	e199      	b.n	80137ac <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8013478:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801347c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013480:	3318      	adds	r3, #24
 8013482:	4611      	mov	r1, r2
 8013484:	4618      	mov	r0, r3
 8013486:	f7fa f87d 	bl	800d584 <lfs_pair_issync>
 801348a:	4603      	mov	r3, r0
 801348c:	2b00      	cmp	r3, #0
 801348e:	d00a      	beq.n	80134a6 <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 8013490:	4b8f      	ldr	r3, [pc, #572]	@ (80136d0 <lfs_mount_+0x2a0>)
 8013492:	f241 123d 	movw	r2, #4413	@ 0x113d
 8013496:	498f      	ldr	r1, [pc, #572]	@ (80136d4 <lfs_mount_+0x2a4>)
 8013498:	488f      	ldr	r0, [pc, #572]	@ (80136d8 <lfs_mount_+0x2a8>)
 801349a:	f010 f831 	bl	8023500 <printf>
            err = LFS_ERR_CORRUPT;
 801349e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80134a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 80134a4:	e1d2      	b.n	801384c <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 80134a6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80134a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d108      	bne.n	80134c0 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 80134ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80134b0:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 80134b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134b4:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 80134b6:	2300      	movs	r3, #0
 80134b8:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 80134ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80134bc:	005b      	lsls	r3, r3, #1
 80134be:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 80134c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80134c2:	3301      	adds	r3, #1
 80134c4:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80134ca:	4b84      	ldr	r3, [pc, #528]	@ (80136dc <lfs_mount_+0x2ac>)
 80134cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80134ce:	2308      	movs	r3, #8
 80134d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80134d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80134d6:	f103 0218 	add.w	r2, r3, #24
 80134da:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80134de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80134e2:	9303      	str	r3, [sp, #12]
 80134e4:	4b7e      	ldr	r3, [pc, #504]	@ (80136e0 <lfs_mount_+0x2b0>)
 80134e6:	9302      	str	r3, [sp, #8]
 80134e8:	2300      	movs	r3, #0
 80134ea:	9301      	str	r3, [sp, #4]
 80134ec:	4b7d      	ldr	r3, [pc, #500]	@ (80136e4 <lfs_mount_+0x2b4>)
 80134ee:	9300      	str	r3, [sp, #0]
 80134f0:	4b7d      	ldr	r3, [pc, #500]	@ (80136e8 <lfs_mount_+0x2b8>)
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f7fb fac4 	bl	800ea80 <lfs_dir_fetchmatch>
 80134f8:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80134fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	da02      	bge.n	8013506 <lfs_mount_+0xd6>
            err = tag;
 8013500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013502:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8013504:	e1a2      	b.n	801384c <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8013506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013508:	2b00      	cmp	r3, #0
 801350a:	f000 8142 	beq.w	8013792 <lfs_mount_+0x362>
 801350e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013510:	4618      	mov	r0, r3
 8013512:	f7fa f8a6 	bl	800d662 <lfs_tag_isdelete>
 8013516:	4603      	mov	r3, r0
 8013518:	f083 0301 	eor.w	r3, r3, #1
 801351c:	b2db      	uxtb	r3, r3
 801351e:	2b00      	cmp	r3, #0
 8013520:	f000 8137 	beq.w	8013792 <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 8013524:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 801352a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8013530:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8013534:	f107 030c 	add.w	r3, r7, #12
 8013538:	9300      	str	r3, [sp, #0]
 801353a:	4b6c      	ldr	r3, [pc, #432]	@ (80136ec <lfs_mount_+0x2bc>)
 801353c:	4a6a      	ldr	r2, [pc, #424]	@ (80136e8 <lfs_mount_+0x2b8>)
 801353e:	6878      	ldr	r0, [r7, #4]
 8013540:	f7fa fd68 	bl	800e014 <lfs_dir_get>
 8013544:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8013546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013548:	2b00      	cmp	r3, #0
 801354a:	da02      	bge.n	8013552 <lfs_mount_+0x122>
                err = tag;
 801354c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801354e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8013550:	e17c      	b.n	801384c <lfs_mount_+0x41c>
            }
            lfs_superblock_fromle32(&superblock);
 8013552:	f107 030c 	add.w	r3, r7, #12
 8013556:	4618      	mov	r0, r3
 8013558:	f7fa fa5c 	bl	800da14 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	0c1b      	lsrs	r3, r3, #16
 8013560:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 801356a:	6878      	ldr	r0, [r7, #4]
 801356c:	f7fa fb22 	bl	800dbb4 <lfs_fs_disk_version_major>
 8013570:	4603      	mov	r3, r0
 8013572:	461a      	mov	r2, r3
 8013574:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8013578:	4293      	cmp	r3, r2
 801357a:	d108      	bne.n	801358e <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f7fa fb27 	bl	800dbd0 <lfs_fs_disk_version_minor>
 8013582:	4603      	mov	r3, r0
 8013584:	461a      	mov	r2, r3
 8013586:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801358a:	4293      	cmp	r3, r2
 801358c:	d91d      	bls.n	80135ca <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 801358e:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 8013592:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f7fa fb0c 	bl	800dbb4 <lfs_fs_disk_version_major>
 801359c:	4603      	mov	r3, r0
 801359e:	461e      	mov	r6, r3
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f7fa fb15 	bl	800dbd0 <lfs_fs_disk_version_minor>
 80135a6:	4603      	mov	r3, r0
 80135a8:	461a      	mov	r2, r3
 80135aa:	4b49      	ldr	r3, [pc, #292]	@ (80136d0 <lfs_mount_+0x2a0>)
 80135ac:	9303      	str	r3, [sp, #12]
 80135ae:	9202      	str	r2, [sp, #8]
 80135b0:	9601      	str	r6, [sp, #4]
 80135b2:	9400      	str	r4, [sp, #0]
 80135b4:	462b      	mov	r3, r5
 80135b6:	f241 126b 	movw	r2, #4459	@ 0x116b
 80135ba:	4946      	ldr	r1, [pc, #280]	@ (80136d4 <lfs_mount_+0x2a4>)
 80135bc:	484c      	ldr	r0, [pc, #304]	@ (80136f0 <lfs_mount_+0x2c0>)
 80135be:	f00f ff9f 	bl	8023500 <printf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80135c2:	f06f 0315 	mvn.w	r3, #21
 80135c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80135c8:	e0e2      	b.n	8013790 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 80135ca:	2300      	movs	r3, #0
 80135cc:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f7fa fafd 	bl	800dbd0 <lfs_fs_disk_version_minor>
 80135d6:	4603      	mov	r3, r0
 80135d8:	461a      	mov	r2, r3
 80135da:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80135de:	4293      	cmp	r3, r2
 80135e0:	d21c      	bcs.n	801361c <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 80135e2:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 80135e6:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f7fa fae2 	bl	800dbb4 <lfs_fs_disk_version_major>
 80135f0:	4603      	mov	r3, r0
 80135f2:	461e      	mov	r6, r3
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f7fa faeb 	bl	800dbd0 <lfs_fs_disk_version_minor>
 80135fa:	4603      	mov	r3, r0
 80135fc:	461a      	mov	r2, r3
 80135fe:	4b34      	ldr	r3, [pc, #208]	@ (80136d0 <lfs_mount_+0x2a0>)
 8013600:	9303      	str	r3, [sp, #12]
 8013602:	9202      	str	r2, [sp, #8]
 8013604:	9601      	str	r6, [sp, #4]
 8013606:	9400      	str	r4, [sp, #0]
 8013608:	462b      	mov	r3, r5
 801360a:	f241 127a 	movw	r2, #4474	@ 0x117a
 801360e:	4931      	ldr	r1, [pc, #196]	@ (80136d4 <lfs_mount_+0x2a4>)
 8013610:	4838      	ldr	r0, [pc, #224]	@ (80136f4 <lfs_mount_+0x2c4>)
 8013612:	f00f ff75 	bl	8023500 <printf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 8013616:	2301      	movs	r3, #1
 8013618:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801361c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8013620:	4619      	mov	r1, r3
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f000 fbb4 	bl	8013d90 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8013628:	69bb      	ldr	r3, [r7, #24]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d018      	beq.n	8013660 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 801362e:	69ba      	ldr	r2, [r7, #24]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013634:	429a      	cmp	r2, r3
 8013636:	d910      	bls.n	801365a <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8013638:	69ba      	ldr	r2, [r7, #24]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801363e:	4924      	ldr	r1, [pc, #144]	@ (80136d0 <lfs_mount_+0x2a0>)
 8013640:	9101      	str	r1, [sp, #4]
 8013642:	9300      	str	r3, [sp, #0]
 8013644:	4613      	mov	r3, r2
 8013646:	f241 1289 	movw	r2, #4489	@ 0x1189
 801364a:	4922      	ldr	r1, [pc, #136]	@ (80136d4 <lfs_mount_+0x2a4>)
 801364c:	482a      	ldr	r0, [pc, #168]	@ (80136f8 <lfs_mount_+0x2c8>)
 801364e:	f00f ff57 	bl	8023500 <printf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8013652:	f06f 0315 	mvn.w	r3, #21
 8013656:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8013658:	e09a      	b.n	8013790 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 801365a:	69ba      	ldr	r2, [r7, #24]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 8013660:	69fb      	ldr	r3, [r7, #28]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d018      	beq.n	8013698 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 8013666:	69fa      	ldr	r2, [r7, #28]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801366c:	429a      	cmp	r2, r3
 801366e:	d910      	bls.n	8013692 <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8013670:	69fa      	ldr	r2, [r7, #28]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013676:	4916      	ldr	r1, [pc, #88]	@ (80136d0 <lfs_mount_+0x2a0>)
 8013678:	9101      	str	r1, [sp, #4]
 801367a:	9300      	str	r3, [sp, #0]
 801367c:	4613      	mov	r3, r2
 801367e:	f241 1294 	movw	r2, #4500	@ 0x1194
 8013682:	4914      	ldr	r1, [pc, #80]	@ (80136d4 <lfs_mount_+0x2a4>)
 8013684:	481d      	ldr	r0, [pc, #116]	@ (80136fc <lfs_mount_+0x2cc>)
 8013686:	f00f ff3b 	bl	8023500 <printf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 801368a:	f06f 0315 	mvn.w	r3, #21
 801368e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8013690:	e07e      	b.n	8013790 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 8013692:	69fa      	ldr	r2, [r7, #28]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 8013698:	6a3b      	ldr	r3, [r7, #32]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d040      	beq.n	8013720 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 801369e:	6a3a      	ldr	r2, [r7, #32]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d92d      	bls.n	8013704 <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80136a8:	6a3a      	ldr	r2, [r7, #32]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80136ae:	4908      	ldr	r1, [pc, #32]	@ (80136d0 <lfs_mount_+0x2a0>)
 80136b0:	9101      	str	r1, [sp, #4]
 80136b2:	9300      	str	r3, [sp, #0]
 80136b4:	4613      	mov	r3, r2
 80136b6:	f241 129f 	movw	r2, #4511	@ 0x119f
 80136ba:	4906      	ldr	r1, [pc, #24]	@ (80136d4 <lfs_mount_+0x2a4>)
 80136bc:	4810      	ldr	r0, [pc, #64]	@ (8013700 <lfs_mount_+0x2d0>)
 80136be:	f00f ff1f 	bl	8023500 <printf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80136c2:	f06f 0315 	mvn.w	r3, #21
 80136c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80136c8:	e062      	b.n	8013790 <lfs_mount_+0x360>
 80136ca:	bf00      	nop
 80136cc:	080305e0 	.word	0x080305e0
 80136d0:	0803059c 	.word	0x0803059c
 80136d4:	08030474 	.word	0x08030474
 80136d8:	08030c4c 	.word	0x08030c4c
 80136dc:	08030c40 	.word	0x08030c40
 80136e0:	0800f3b1 	.word	0x0800f3b1
 80136e4:	0ff00008 	.word	0x0ff00008
 80136e8:	7ffffc00 	.word	0x7ffffc00
 80136ec:	20100018 	.word	0x20100018
 80136f0:	08030c78 	.word	0x08030c78
 80136f4:	08030cb0 	.word	0x08030cb0
 80136f8:	08030cf0 	.word	0x08030cf0
 80136fc:	08030d24 	.word	0x08030d24
 8013700:	08030d58 	.word	0x08030d58
                }

                lfs->attr_max = superblock.attr_max;
 8013704:	6a3a      	ldr	r2, [r7, #32]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013712:	4619      	mov	r1, r3
 8013714:	4610      	mov	r0, r2
 8013716:	f7f9 fa8e 	bl	800cc36 <lfs_min>
 801371a:	4602      	mov	r2, r0
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013726:	2b00      	cmp	r3, #0
 8013728:	d017      	beq.n	801375a <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 801372a:	697a      	ldr	r2, [r7, #20]
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013732:	429a      	cmp	r2, r3
 8013734:	d011      	beq.n	801375a <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8013736:	697a      	ldr	r2, [r7, #20]
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801373c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801373e:	4947      	ldr	r1, [pc, #284]	@ (801385c <lfs_mount_+0x42c>)
 8013740:	9101      	str	r1, [sp, #4]
 8013742:	9300      	str	r3, [sp, #0]
 8013744:	4613      	mov	r3, r2
 8013746:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801374a:	4945      	ldr	r1, [pc, #276]	@ (8013860 <lfs_mount_+0x430>)
 801374c:	4845      	ldr	r0, [pc, #276]	@ (8013864 <lfs_mount_+0x434>)
 801374e:	f00f fed7 	bl	8023500 <printf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8013752:	f06f 0315 	mvn.w	r3, #21
 8013756:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8013758:	e01a      	b.n	8013790 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 801375a:	697a      	ldr	r2, [r7, #20]
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8013760:	693a      	ldr	r2, [r7, #16]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013768:	429a      	cmp	r2, r3
 801376a:	d012      	beq.n	8013792 <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801376c:	693a      	ldr	r2, [r7, #16]
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013774:	4939      	ldr	r1, [pc, #228]	@ (801385c <lfs_mount_+0x42c>)
 8013776:	9101      	str	r1, [sp, #4]
 8013778:	9300      	str	r3, [sp, #0]
 801377a:	4613      	mov	r3, r2
 801377c:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 8013780:	4937      	ldr	r1, [pc, #220]	@ (8013860 <lfs_mount_+0x430>)
 8013782:	4839      	ldr	r0, [pc, #228]	@ (8013868 <lfs_mount_+0x438>)
 8013784:	f00f febc 	bl	8023500 <printf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8013788:	f06f 0315 	mvn.w	r3, #21
 801378c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 801378e:	bf00      	nop
            goto cleanup;
 8013790:	e05c      	b.n	801384c <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013798:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801379c:	4619      	mov	r1, r3
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f7fb fd5a 	bl	800f258 <lfs_dir_getgstate>
 80137a4:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 80137a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d14e      	bne.n	801384a <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 80137ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80137b0:	3318      	adds	r3, #24
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7f9 fea1 	bl	800d4fa <lfs_pair_isnull>
 80137b8:	4603      	mov	r3, r0
 80137ba:	f083 0301 	eor.w	r3, r3, #1
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	f47f ae59 	bne.w	8013478 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	3330      	adds	r3, #48	@ 0x30
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7f9 fffc 	bl	800d7c8 <lfs_gstate_iszero>
 80137d0:	4603      	mov	r3, r0
 80137d2:	f083 0301 	eor.w	r3, r3, #1
 80137d6:	b2db      	uxtb	r3, r3
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d010      	beq.n	80137fe <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80137e4:	687a      	ldr	r2, [r7, #4]
 80137e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80137e8:	481c      	ldr	r0, [pc, #112]	@ (801385c <lfs_mount_+0x42c>)
 80137ea:	9002      	str	r0, [sp, #8]
 80137ec:	9201      	str	r2, [sp, #4]
 80137ee:	9300      	str	r3, [sp, #0]
 80137f0:	460b      	mov	r3, r1
 80137f2:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 80137f6:	491a      	ldr	r1, [pc, #104]	@ (8013860 <lfs_mount_+0x430>)
 80137f8:	481c      	ldr	r0, [pc, #112]	@ (801386c <lfs_mount_+0x43c>)
 80137fa:	f00f fe81 	bl	8023500 <printf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013802:	4618      	mov	r0, r3
 8013804:	f7f9 ff1f 	bl	800d646 <lfs_tag_isvalid>
 8013808:	4603      	mov	r3, r0
 801380a:	f083 0301 	eor.w	r3, r3, #1
 801380e:	b2db      	uxtb	r3, r3
 8013810:	461a      	mov	r2, r3
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013816:	441a      	add	r2, r3
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	333c      	adds	r3, #60	@ 0x3c
 8013822:	3230      	adds	r2, #48	@ 0x30
 8013824:	ca07      	ldmia	r2, {r0, r1, r2}
 8013826:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801382e:	687a      	ldr	r2, [r7, #4]
 8013830:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8013832:	fbb3 f1f2 	udiv	r1, r3, r2
 8013836:	fb01 f202 	mul.w	r2, r1, r2
 801383a:	1a9a      	subs	r2, r3, r2
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f7fa f9e0 	bl	800dc06 <lfs_alloc_drop>

    return 0;
 8013846:	2300      	movs	r3, #0
 8013848:	e004      	b.n	8013854 <lfs_mount_+0x424>
            goto cleanup;
 801384a:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f000 f80f 	bl	8013870 <lfs_unmount_>
    return err;
 8013852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8013854:	4618      	mov	r0, r3
 8013856:	3774      	adds	r7, #116	@ 0x74
 8013858:	46bd      	mov	sp, r7
 801385a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801385c:	0803059c 	.word	0x0803059c
 8013860:	08030474 	.word	0x08030474
 8013864:	08030d8c 	.word	0x08030d8c
 8013868:	08030dc0 	.word	0x08030dc0
 801386c:	08030df0 	.word	0x08030df0

08013870 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8013870:	b580      	push	{r7, lr}
 8013872:	b082      	sub	sp, #8
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f7ff fcff 	bl	801327c <lfs_deinit>
 801387e:	4603      	mov	r3, r0
}
 8013880:	4618      	mov	r0, r3
 8013882:	3708      	adds	r7, #8
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}

08013888 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8013888:	b590      	push	{r4, r7, lr}
 801388a:	b0a1      	sub	sp, #132	@ 0x84
 801388c:	af04      	add	r7, sp, #16
 801388e:	60f8      	str	r0, [r7, #12]
 8013890:	60b9      	str	r1, [r7, #8]
 8013892:	607a      	str	r2, [r7, #4]
 8013894:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8013896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801389a:	2220      	movs	r2, #32
 801389c:	2100      	movs	r1, #0
 801389e:	4618      	mov	r0, r3
 80138a0:	f012 fb5a 	bl	8025f58 <memset>
 80138a4:	2301      	movs	r3, #1
 80138a6:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80138a8:	4a9a      	ldr	r2, [pc, #616]	@ (8013b14 <lfs_fs_traverse_+0x28c>)
 80138aa:	f107 031c 	add.w	r3, r7, #28
 80138ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80138b2:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80138b6:	2301      	movs	r3, #1
 80138b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 80138ba:	2301      	movs	r3, #1
 80138bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 80138be:	e0c0      	b.n	8013a42 <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80138c0:	f107 021c 	add.w	r2, r7, #28
 80138c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80138c8:	3318      	adds	r3, #24
 80138ca:	4611      	mov	r1, r2
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7f9 fe59 	bl	800d584 <lfs_pair_issync>
 80138d2:	4603      	mov	r3, r0
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d009      	beq.n	80138ec <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 80138d8:	4b8f      	ldr	r3, [pc, #572]	@ (8013b18 <lfs_fs_traverse_+0x290>)
 80138da:	f241 2222 	movw	r2, #4642	@ 0x1222
 80138de:	498f      	ldr	r1, [pc, #572]	@ (8013b1c <lfs_fs_traverse_+0x294>)
 80138e0:	488f      	ldr	r0, [pc, #572]	@ (8013b20 <lfs_fs_traverse_+0x298>)
 80138e2:	f00f fe0d 	bl	8023500 <printf>
            return LFS_ERR_CORRUPT;
 80138e6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80138ea:	e10f      	b.n	8013b0c <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 80138ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80138ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d108      	bne.n	8013906 <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 80138f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138f6:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 80138f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138fa:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80138fc:	2300      	movs	r3, #0
 80138fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 8013900:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013902:	005b      	lsls	r3, r3, #1
 8013904:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 8013906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013908:	3301      	adds	r3, #1
 801390a:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 801390c:	2300      	movs	r3, #0
 801390e:	667b      	str	r3, [r7, #100]	@ 0x64
 8013910:	e013      	b.n	801393a <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 8013912:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013914:	3306      	adds	r3, #6
 8013916:	009b      	lsls	r3, r3, #2
 8013918:	3370      	adds	r3, #112	@ 0x70
 801391a:	443b      	add	r3, r7
 801391c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	4611      	mov	r1, r2
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	4798      	blx	r3
 8013928:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 801392a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801392c:	2b00      	cmp	r3, #0
 801392e:	d001      	beq.n	8013934 <lfs_fs_traverse_+0xac>
                return err;
 8013930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013932:	e0eb      	b.n	8013b0c <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8013934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013936:	3301      	adds	r3, #1
 8013938:	667b      	str	r3, [r7, #100]	@ 0x64
 801393a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801393c:	2b01      	cmp	r3, #1
 801393e:	dde8      	ble.n	8013912 <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8013940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013944:	f103 0218 	add.w	r2, r3, #24
 8013948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801394c:	4619      	mov	r1, r3
 801394e:	68f8      	ldr	r0, [r7, #12]
 8013950:	f7fb fc66 	bl	800f220 <lfs_dir_fetch>
 8013954:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 8013956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013958:	2b00      	cmp	r3, #0
 801395a:	d001      	beq.n	8013960 <lfs_fs_traverse_+0xd8>
            return err;
 801395c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801395e:	e0d5      	b.n	8013b0c <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8013960:	2300      	movs	r3, #0
 8013962:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8013966:	e067      	b.n	8013a38 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8013968:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801396c:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801396e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013972:	f043 0308 	orr.w	r3, r3, #8
 8013976:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 801397a:	f107 0214 	add.w	r2, r7, #20
 801397e:	9200      	str	r2, [sp, #0]
 8013980:	4a68      	ldr	r2, [pc, #416]	@ (8013b24 <lfs_fs_traverse_+0x29c>)
 8013982:	68f8      	ldr	r0, [r7, #12]
 8013984:	f7fa fb46 	bl	800e014 <lfs_dir_get>
 8013988:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 801398a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801398c:	2b00      	cmp	r3, #0
 801398e:	da05      	bge.n	801399c <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 8013990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013992:	f113 0f02 	cmn.w	r3, #2
 8013996:	d049      	beq.n	8013a2c <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 8013998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801399a:	e0b7      	b.n	8013b0c <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 801399c:	f107 0314 	add.w	r3, r7, #20
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7fa f807 	bl	800d9b4 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80139a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7f9 fe8d 	bl	800d6c8 <lfs_tag_type3>
 80139ae:	4603      	mov	r3, r0
 80139b0:	461a      	mov	r2, r3
 80139b2:	f240 2302 	movw	r3, #514	@ 0x202
 80139b6:	429a      	cmp	r2, r3
 80139b8:	d113      	bne.n	80139e2 <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80139ba:	68f9      	ldr	r1, [r7, #12]
 80139bc:	6978      	ldr	r0, [r7, #20]
 80139be:	69bb      	ldr	r3, [r7, #24]
 80139c0:	687a      	ldr	r2, [r7, #4]
 80139c2:	9202      	str	r2, [sp, #8]
 80139c4:	68ba      	ldr	r2, [r7, #8]
 80139c6:	9201      	str	r2, [sp, #4]
 80139c8:	9300      	str	r3, [sp, #0]
 80139ca:	4603      	mov	r3, r0
 80139cc:	460a      	mov	r2, r1
 80139ce:	2100      	movs	r1, #0
 80139d0:	68f8      	ldr	r0, [r7, #12]
 80139d2:	f7fd fe9d 	bl	8011710 <lfs_ctz_traverse>
 80139d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80139d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d027      	beq.n	8013a2e <lfs_fs_traverse_+0x1a6>
                    return err;
 80139de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139e0:	e094      	b.n	8013b0c <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 80139e2:	78fb      	ldrb	r3, [r7, #3]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d022      	beq.n	8013a2e <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80139e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7f9 fe6c 	bl	800d6c8 <lfs_tag_type3>
 80139f0:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80139f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80139f6:	d11a      	bne.n	8013a2e <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 80139f8:	2300      	movs	r3, #0
 80139fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80139fc:	e012      	b.n	8013a24 <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 80139fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	f107 0214 	add.w	r2, r7, #20
 8013a06:	4413      	add	r3, r2
 8013a08:	681a      	ldr	r2, [r3, #0]
 8013a0a:	68bb      	ldr	r3, [r7, #8]
 8013a0c:	4611      	mov	r1, r2
 8013a0e:	6878      	ldr	r0, [r7, #4]
 8013a10:	4798      	blx	r3
 8013a12:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 8013a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d001      	beq.n	8013a1e <lfs_fs_traverse_+0x196>
                        return err;
 8013a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a1c:	e076      	b.n	8013b0c <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 8013a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a20:	3301      	adds	r3, #1
 8013a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a26:	2b01      	cmp	r3, #1
 8013a28:	dde9      	ble.n	80139fe <lfs_fs_traverse_+0x176>
 8013a2a:	e000      	b.n	8013a2e <lfs_fs_traverse_+0x1a6>
                    continue;
 8013a2c:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8013a2e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8013a32:	3301      	adds	r3, #1
 8013a34:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8013a38:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8013a3a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d392      	bcc.n	8013968 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 8013a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013a46:	3318      	adds	r3, #24
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f7f9 fd56 	bl	800d4fa <lfs_pair_isnull>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	f083 0301 	eor.w	r3, r3, #1
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	f47f af32 	bne.w	80138c0 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013a62:	e04f      	b.n	8013b04 <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8013a64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a66:	799b      	ldrb	r3, [r3, #6]
 8013a68:	2b01      	cmp	r3, #1
 8013a6a:	d147      	bne.n	8013afc <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8013a6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d01d      	beq.n	8013ab4 <lfs_fs_traverse_+0x22c>
 8013a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d117      	bne.n	8013ab4 <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8013a84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a86:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8013a8a:	68f8      	ldr	r0, [r7, #12]
 8013a8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a8e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8013a90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a94:	687a      	ldr	r2, [r7, #4]
 8013a96:	9202      	str	r2, [sp, #8]
 8013a98:	68ba      	ldr	r2, [r7, #8]
 8013a9a:	9201      	str	r2, [sp, #4]
 8013a9c:	9300      	str	r3, [sp, #0]
 8013a9e:	4623      	mov	r3, r4
 8013aa0:	4602      	mov	r2, r0
 8013aa2:	68f8      	ldr	r0, [r7, #12]
 8013aa4:	f7fd fe34 	bl	8011710 <lfs_ctz_traverse>
 8013aa8:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8013aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d001      	beq.n	8013ab4 <lfs_fs_traverse_+0x22c>
                return err;
 8013ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ab2:	e02b      	b.n	8013b0c <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8013ab4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d01e      	beq.n	8013afe <lfs_fs_traverse_+0x276>
 8013ac0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ac4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d118      	bne.n	8013afe <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8013acc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ace:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8013ad2:	68f8      	ldr	r0, [r7, #12]
 8013ad4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ad6:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8013ad8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013adc:	687a      	ldr	r2, [r7, #4]
 8013ade:	9202      	str	r2, [sp, #8]
 8013ae0:	68ba      	ldr	r2, [r7, #8]
 8013ae2:	9201      	str	r2, [sp, #4]
 8013ae4:	9300      	str	r3, [sp, #0]
 8013ae6:	4623      	mov	r3, r4
 8013ae8:	4602      	mov	r2, r0
 8013aea:	68f8      	ldr	r0, [r7, #12]
 8013aec:	f7fd fe10 	bl	8011710 <lfs_ctz_traverse>
 8013af0:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8013af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d002      	beq.n	8013afe <lfs_fs_traverse_+0x276>
                return err;
 8013af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013afa:	e007      	b.n	8013b0c <lfs_fs_traverse_+0x284>
            continue;
 8013afc:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8013afe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013b04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d1ac      	bne.n	8013a64 <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 8013b0a:	2300      	movs	r3, #0
}
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	3774      	adds	r7, #116	@ 0x74
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd90      	pop	{r4, r7, pc}
 8013b14:	080305e0 	.word	0x080305e0
 8013b18:	0803059c 	.word	0x0803059c
 8013b1c:	08030474 	.word	0x08030474
 8013b20:	08030c4c 	.word	0x08030c4c
 8013b24:	700ffc00 	.word	0x700ffc00

08013b28 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b08a      	sub	sp, #40	@ 0x28
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	60f8      	str	r0, [r7, #12]
 8013b30:	60b9      	str	r1, [r7, #8]
 8013b32:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2200      	movs	r2, #0
 8013b38:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2201      	movs	r2, #1
 8013b3e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8013b40:	4a2d      	ldr	r2, [pc, #180]	@ (8013bf8 <lfs_fs_pred+0xd0>)
 8013b42:	f107 0314 	add.w	r3, r7, #20
 8013b46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b4a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8013b4e:	2301      	movs	r3, #1
 8013b50:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 8013b52:	2301      	movs	r3, #1
 8013b54:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8013b56:	e03e      	b.n	8013bd6 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	3318      	adds	r3, #24
 8013b5c:	f107 0214 	add.w	r2, r7, #20
 8013b60:	4611      	mov	r1, r2
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7f9 fd0e 	bl	800d584 <lfs_pair_issync>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d009      	beq.n	8013b82 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8013b6e:	4b23      	ldr	r3, [pc, #140]	@ (8013bfc <lfs_fs_pred+0xd4>)
 8013b70:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8013b74:	4922      	ldr	r1, [pc, #136]	@ (8013c00 <lfs_fs_pred+0xd8>)
 8013b76:	4823      	ldr	r0, [pc, #140]	@ (8013c04 <lfs_fs_pred+0xdc>)
 8013b78:	f00f fcc2 	bl	8023500 <printf>
            return LFS_ERR_CORRUPT;
 8013b7c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8013b80:	e036      	b.n	8013bf0 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8013b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b84:	6a3b      	ldr	r3, [r7, #32]
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d10a      	bne.n	8013ba0 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	699b      	ldr	r3, [r3, #24]
 8013b8e:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	69db      	ldr	r3, [r3, #28]
 8013b94:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8013b96:	2300      	movs	r3, #0
 8013b98:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 8013b9a:	6a3b      	ldr	r3, [r7, #32]
 8013b9c:	005b      	lsls	r3, r3, #1
 8013b9e:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8013ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ba2:	3301      	adds	r3, #1
 8013ba4:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	3318      	adds	r3, #24
 8013baa:	68b9      	ldr	r1, [r7, #8]
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7f9 fcbf 	bl	800d530 <lfs_pair_cmp>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d101      	bne.n	8013bbc <lfs_fs_pred+0x94>
            return 0;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	e019      	b.n	8013bf0 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	3318      	adds	r3, #24
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	6879      	ldr	r1, [r7, #4]
 8013bc4:	68f8      	ldr	r0, [r7, #12]
 8013bc6:	f7fb fb2b 	bl	800f220 <lfs_dir_fetch>
 8013bca:	61f8      	str	r0, [r7, #28]
        if (err) {
 8013bcc:	69fb      	ldr	r3, [r7, #28]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d001      	beq.n	8013bd6 <lfs_fs_pred+0xae>
            return err;
 8013bd2:	69fb      	ldr	r3, [r7, #28]
 8013bd4:	e00c      	b.n	8013bf0 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	3318      	adds	r3, #24
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7f9 fc8d 	bl	800d4fa <lfs_pair_isnull>
 8013be0:	4603      	mov	r3, r0
 8013be2:	f083 0301 	eor.w	r3, r3, #1
 8013be6:	b2db      	uxtb	r3, r3
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d1b5      	bne.n	8013b58 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8013bec:	f06f 0301 	mvn.w	r3, #1
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3728      	adds	r7, #40	@ 0x28
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	080305e0 	.word	0x080305e0
 8013bfc:	0803059c 	.word	0x0803059c
 8013c00:	08030474 	.word	0x08030474
 8013c04:	08030c4c 	.word	0x08030c4c

08013c08 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8013c08:	b5b0      	push	{r4, r5, r7, lr}
 8013c0a:	b08e      	sub	sp, #56	@ 0x38
 8013c0c:	af04      	add	r7, sp, #16
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	60b9      	str	r1, [r7, #8]
 8013c12:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8013c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8013c22:	6a3b      	ldr	r3, [r7, #32]
 8013c24:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8013c28:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8013c2a:	6a3b      	ldr	r3, [r7, #32]
 8013c2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013c2e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 8013c30:	69fb      	ldr	r3, [r7, #28]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	69fa      	ldr	r2, [r7, #28]
 8013c36:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8013c38:	2108      	movs	r1, #8
 8013c3a:	9103      	str	r1, [sp, #12]
 8013c3c:	f107 0110 	add.w	r1, r7, #16
 8013c40:	9102      	str	r1, [sp, #8]
 8013c42:	9201      	str	r2, [sp, #4]
 8013c44:	9300      	str	r3, [sp, #0]
 8013c46:	462b      	mov	r3, r5
 8013c48:	4622      	mov	r2, r4
 8013c4a:	4601      	mov	r1, r0
 8013c4c:	6a38      	ldr	r0, [r7, #32]
 8013c4e:	f7f9 f8cd 	bl	800cdec <lfs_bd_read>
 8013c52:	61b8      	str	r0, [r7, #24]
    if (err) {
 8013c54:	69bb      	ldr	r3, [r7, #24]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d001      	beq.n	8013c5e <lfs_fs_parent_match+0x56>
        return err;
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	e012      	b.n	8013c84 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8013c5e:	f107 0310 	add.w	r3, r7, #16
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7f9 fcbb 	bl	800d5de <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8013c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c6a:	1d1a      	adds	r2, r3, #4
 8013c6c:	f107 0310 	add.w	r3, r7, #16
 8013c70:	4611      	mov	r1, r2
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7f9 fc5c 	bl	800d530 <lfs_pair_cmp>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	bf14      	ite	ne
 8013c7e:	2301      	movne	r3, #1
 8013c80:	2300      	moveq	r3, #0
 8013c82:	b2db      	uxtb	r3, r3
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3728      	adds	r7, #40	@ 0x28
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bdb0      	pop	{r4, r5, r7, pc}

08013c8c <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b090      	sub	sp, #64	@ 0x40
 8013c90:	af04      	add	r7, sp, #16
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2201      	movs	r2, #1
 8013ca2:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8013ca4:	4a33      	ldr	r2, [pc, #204]	@ (8013d74 <lfs_fs_parent+0xe8>)
 8013ca6:	f107 031c 	add.w	r3, r7, #28
 8013caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013cae:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8013cba:	e04a      	b.n	8013d52 <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	3318      	adds	r3, #24
 8013cc0:	f107 021c 	add.w	r2, r7, #28
 8013cc4:	4611      	mov	r1, r2
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7f9 fc5c 	bl	800d584 <lfs_pair_issync>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d009      	beq.n	8013ce6 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8013cd2:	4b29      	ldr	r3, [pc, #164]	@ (8013d78 <lfs_fs_parent+0xec>)
 8013cd4:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 8013cd8:	4928      	ldr	r1, [pc, #160]	@ (8013d7c <lfs_fs_parent+0xf0>)
 8013cda:	4829      	ldr	r0, [pc, #164]	@ (8013d80 <lfs_fs_parent+0xf4>)
 8013cdc:	f00f fc10 	bl	8023500 <printf>
            return LFS_ERR_CORRUPT;
 8013ce0:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8013ce4:	e042      	b.n	8013d6c <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8013ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cea:	429a      	cmp	r2, r3
 8013cec:	d10a      	bne.n	8013d04 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	699b      	ldr	r3, [r3, #24]
 8013cf2:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	69db      	ldr	r3, [r3, #28]
 8013cf8:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 8013cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d00:	005b      	lsls	r3, r3, #1
 8013d02:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 8013d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d06:	3301      	adds	r3, #1
 8013d08:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8013d18:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	3304      	adds	r3, #4
 8013d1e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8013d20:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8013d22:	f107 0310 	add.w	r3, r7, #16
 8013d26:	9303      	str	r3, [sp, #12]
 8013d28:	4b16      	ldr	r3, [pc, #88]	@ (8013d84 <lfs_fs_parent+0xf8>)
 8013d2a:	9302      	str	r3, [sp, #8]
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	9301      	str	r3, [sp, #4]
 8013d30:	4b15      	ldr	r3, [pc, #84]	@ (8013d88 <lfs_fs_parent+0xfc>)
 8013d32:	9300      	str	r3, [sp, #0]
 8013d34:	4b15      	ldr	r3, [pc, #84]	@ (8013d8c <lfs_fs_parent+0x100>)
 8013d36:	6879      	ldr	r1, [r7, #4]
 8013d38:	68f8      	ldr	r0, [r7, #12]
 8013d3a:	f7fa fea1 	bl	800ea80 <lfs_dir_fetchmatch>
 8013d3e:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8013d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d005      	beq.n	8013d52 <lfs_fs_parent+0xc6>
 8013d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d48:	f113 0f02 	cmn.w	r3, #2
 8013d4c:	d001      	beq.n	8013d52 <lfs_fs_parent+0xc6>
            return tag;
 8013d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d50:	e00c      	b.n	8013d6c <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	3318      	adds	r3, #24
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7f9 fbcf 	bl	800d4fa <lfs_pair_isnull>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	f083 0301 	eor.w	r3, r3, #1
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d1a9      	bne.n	8013cbc <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8013d68:	f06f 0301 	mvn.w	r3, #1
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3730      	adds	r7, #48	@ 0x30
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}
 8013d74:	080305e0 	.word	0x080305e0
 8013d78:	0803059c 	.word	0x0803059c
 8013d7c:	08030474 	.word	0x08030474
 8013d80:	08030c4c 	.word	0x08030c4c
 8013d84:	08013c09 	.word	0x08013c09
 8013d88:	20000008 	.word	0x20000008
 8013d8c:	7ff003ff 	.word	0x7ff003ff

08013d90 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8013d90:	b480      	push	{r7}
 8013d92:	b083      	sub	sp, #12
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	460b      	mov	r3, r1
 8013d9a:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013da0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8013da4:	78fb      	ldrb	r3, [r7, #3]
 8013da6:	025b      	lsls	r3, r3, #9
 8013da8:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8013dae:	bf00      	nop
 8013db0:	370c      	adds	r7, #12
 8013db2:	46bd      	mov	sp, r7
 8013db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db8:	4770      	bx	lr
	...

08013dbc <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8013dbc:	b590      	push	{r4, r7, lr}
 8013dbe:	b083      	sub	sp, #12
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7f9 fcb5 	bl	800d73c <lfs_tag_size>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d10a      	bne.n	8013dee <lfs_fs_preporphans+0x32>
 8013dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	da06      	bge.n	8013dee <lfs_fs_preporphans+0x32>
 8013de0:	4b1a      	ldr	r3, [pc, #104]	@ (8013e4c <lfs_fs_preporphans+0x90>)
 8013de2:	4a1b      	ldr	r2, [pc, #108]	@ (8013e50 <lfs_fs_preporphans+0x94>)
 8013de4:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 8013de8:	481a      	ldr	r0, [pc, #104]	@ (8013e54 <lfs_fs_preporphans+0x98>)
 8013dea:	f00f f8d5 	bl	8022f98 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7f9 fca2 	bl	800d73c <lfs_tag_size>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8013dfe:	d90a      	bls.n	8013e16 <lfs_fs_preporphans+0x5a>
 8013e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	dd06      	ble.n	8013e16 <lfs_fs_preporphans+0x5a>
 8013e08:	4b13      	ldr	r3, [pc, #76]	@ (8013e58 <lfs_fs_preporphans+0x9c>)
 8013e0a:	4a11      	ldr	r2, [pc, #68]	@ (8013e50 <lfs_fs_preporphans+0x94>)
 8013e0c:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 8013e10:	4810      	ldr	r0, [pc, #64]	@ (8013e54 <lfs_fs_preporphans+0x98>)
 8013e12:	f00f f8c1 	bl	8022f98 <__assert_func>
    lfs->gstate.tag += orphans;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e1e:	441a      	add	r2, r3
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e28:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	3330      	adds	r3, #48	@ 0x30
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7f9 fce6 	bl	800d802 <lfs_gstate_hasorphans>
 8013e36:	4603      	mov	r3, r0
 8013e38:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8013e3a:	ea44 0203 	orr.w	r2, r4, r3
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8013e42:	2300      	movs	r3, #0
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	370c      	adds	r7, #12
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd90      	pop	{r4, r7, pc}
 8013e4c:	08030e28 	.word	0x08030e28
 8013e50:	08033cd8 	.word	0x08033cd8
 8013e54:	08030474 	.word	0x08030474
 8013e58:	08030e60 	.word	0x08030e60

08013e5c <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8013e5c:	b480      	push	{r7}
 8013e5e:	b085      	sub	sp, #20
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	460b      	mov	r3, r1
 8013e66:	607a      	str	r2, [r7, #4]
 8013e68:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e6e:	4a17      	ldr	r2, [pc, #92]	@ (8013ecc <lfs_fs_prepmove+0x70>)
 8013e70:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8013e72:	897b      	ldrh	r3, [r7, #10]
 8013e74:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8013e78:	428b      	cmp	r3, r1
 8013e7a:	d006      	beq.n	8013e8a <lfs_fs_prepmove+0x2e>
 8013e7c:	897b      	ldrh	r3, [r7, #10]
 8013e7e:	029b      	lsls	r3, r3, #10
 8013e80:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8013e84:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8013e88:	e000      	b.n	8013e8c <lfs_fs_prepmove+0x30>
 8013e8a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8013e8c:	431a      	orrs	r2, r3
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8013e92:	897b      	ldrh	r3, [r7, #10]
 8013e94:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	d002      	beq.n	8013ea2 <lfs_fs_prepmove+0x46>
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	e000      	b.n	8013ea4 <lfs_fs_prepmove+0x48>
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	68fa      	ldr	r2, [r7, #12]
 8013ea6:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8013ea8:	897b      	ldrh	r3, [r7, #10]
 8013eaa:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8013eae:	4293      	cmp	r3, r2
 8013eb0:	d003      	beq.n	8013eba <lfs_fs_prepmove+0x5e>
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	3304      	adds	r3, #4
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	e000      	b.n	8013ebc <lfs_fs_prepmove+0x60>
 8013eba:	2300      	movs	r3, #0
 8013ebc:	68fa      	ldr	r2, [r7, #12]
 8013ebe:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8013ec0:	bf00      	nop
 8013ec2:	3714      	adds	r7, #20
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eca:	4770      	bx	lr
 8013ecc:	800003ff 	.word	0x800003ff

08013ed0 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b098      	sub	sp, #96	@ 0x60
 8013ed4:	af02      	add	r7, sp, #8
 8013ed6:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	3330      	adds	r3, #48	@ 0x30
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7f9 fcc5 	bl	800d86c <lfs_gstate_needssuperblock>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	f083 0301 	eor.w	r3, r3, #1
 8013ee8:	b2db      	uxtb	r3, r3
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d001      	beq.n	8013ef2 <lfs_fs_desuperblock+0x22>
        return 0;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	e04e      	b.n	8013f90 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6a1a      	ldr	r2, [r3, #32]
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013efa:	4927      	ldr	r1, [pc, #156]	@ (8013f98 <lfs_fs_desuperblock+0xc8>)
 8013efc:	9101      	str	r1, [sp, #4]
 8013efe:	9300      	str	r3, [sp, #0]
 8013f00:	4613      	mov	r3, r2
 8013f02:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 8013f06:	4925      	ldr	r1, [pc, #148]	@ (8013f9c <lfs_fs_desuperblock+0xcc>)
 8013f08:	4825      	ldr	r0, [pc, #148]	@ (8013fa0 <lfs_fs_desuperblock+0xd0>)
 8013f0a:	f00f faf9 	bl	8023500 <printf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f103 0220 	add.w	r2, r3, #32
 8013f14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013f18:	4619      	mov	r1, r3
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f7fb f980 	bl	800f220 <lfs_dir_fetch>
 8013f20:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 8013f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d001      	beq.n	8013f2c <lfs_fs_desuperblock+0x5c>
        return err;
 8013f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f2a:	e031      	b.n	8013f90 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f7f9 fe33 	bl	800db98 <lfs_fs_disk_version>
 8013f32:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8013f34:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 8013f3c:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8013f42:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8013f48:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8013f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8013f54:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8013f56:	f107 031c 	add.w	r3, r7, #28
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7f9 fd92 	bl	800da84 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8013f60:	4b10      	ldr	r3, [pc, #64]	@ (8013fa4 <lfs_fs_desuperblock+0xd4>)
 8013f62:	617b      	str	r3, [r7, #20]
 8013f64:	f107 031c 	add.w	r3, r7, #28
 8013f68:	61bb      	str	r3, [r7, #24]
 8013f6a:	f107 0214 	add.w	r2, r7, #20
 8013f6e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8013f72:	2301      	movs	r3, #1
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f7fc ffad 	bl	8010ed4 <lfs_dir_commit>
 8013f7a:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8013f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d001      	beq.n	8013f86 <lfs_fs_desuperblock+0xb6>
        return err;
 8013f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f84:	e004      	b.n	8013f90 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8013f86:	2100      	movs	r1, #0
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f7ff ff01 	bl	8013d90 <lfs_fs_prepsuperblock>
    return 0;
 8013f8e:	2300      	movs	r3, #0
}
 8013f90:	4618      	mov	r0, r3
 8013f92:	3758      	adds	r7, #88	@ 0x58
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}
 8013f98:	0803059c 	.word	0x0803059c
 8013f9c:	08030474 	.word	0x08030474
 8013fa0:	08030e98 	.word	0x08030e98
 8013fa4:	20100018 	.word	0x20100018

08013fa8 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8013fa8:	b5b0      	push	{r4, r5, r7, lr}
 8013faa:	b094      	sub	sp, #80	@ 0x50
 8013fac:	af04      	add	r7, sp, #16
 8013fae:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	333c      	adds	r3, #60	@ 0x3c
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7f9 fc46 	bl	800d846 <lfs_gstate_hasmove>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	f083 0301 	eor.w	r3, r3, #1
 8013fc0:	b2db      	uxtb	r3, r3
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d001      	beq.n	8013fca <lfs_fs_demove+0x22>
        return 0;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	e05b      	b.n	8014082 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7f9 fba0 	bl	800d71c <lfs_tag_id>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	461a      	mov	r2, r3
 8013fe0:	4b2a      	ldr	r3, [pc, #168]	@ (801408c <lfs_fs_demove+0xe4>)
 8013fe2:	9302      	str	r3, [sp, #8]
 8013fe4:	9201      	str	r2, [sp, #4]
 8013fe6:	9400      	str	r4, [sp, #0]
 8013fe8:	462b      	mov	r3, r5
 8013fea:	f241 3224 	movw	r2, #4900	@ 0x1324
 8013fee:	4928      	ldr	r1, [pc, #160]	@ (8014090 <lfs_fs_demove+0xe8>)
 8013ff0:	4828      	ldr	r0, [pc, #160]	@ (8014094 <lfs_fs_demove+0xec>)
 8013ff2:	f00f fa85 	bl	8023500 <printf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f7f9 fb64 	bl	800d6c8 <lfs_tag_type3>
 8014000:	4603      	mov	r3, r0
 8014002:	461a      	mov	r2, r3
 8014004:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8014008:	429a      	cmp	r2, r3
 801400a:	d006      	beq.n	801401a <lfs_fs_demove+0x72>
 801400c:	4b22      	ldr	r3, [pc, #136]	@ (8014098 <lfs_fs_demove+0xf0>)
 801400e:	4a23      	ldr	r2, [pc, #140]	@ (801409c <lfs_fs_demove+0xf4>)
 8014010:	f241 312b 	movw	r1, #4907	@ 0x132b
 8014014:	481e      	ldr	r0, [pc, #120]	@ (8014090 <lfs_fs_demove+0xe8>)
 8014016:	f00e ffbf 	bl	8022f98 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8014020:	f107 0318 	add.w	r3, r7, #24
 8014024:	4619      	mov	r1, r3
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f7fb f8fa 	bl	800f220 <lfs_dir_fetch>
 801402c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 801402e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014030:	2b00      	cmp	r3, #0
 8014032:	d001      	beq.n	8014038 <lfs_fs_demove+0x90>
        return err;
 8014034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014036:	e024      	b.n	8014082 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801403c:	4618      	mov	r0, r3
 801403e:	f7f9 fb6d 	bl	800d71c <lfs_tag_id>
 8014042:	4603      	mov	r3, r0
 8014044:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8014046:	2200      	movs	r2, #0
 8014048:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f7ff ff05 	bl	8013e5c <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8014052:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014054:	029b      	lsls	r3, r3, #10
 8014056:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801405a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801405e:	613b      	str	r3, [r7, #16]
 8014060:	2300      	movs	r3, #0
 8014062:	617b      	str	r3, [r7, #20]
 8014064:	f107 0210 	add.w	r2, r7, #16
 8014068:	f107 0118 	add.w	r1, r7, #24
 801406c:	2301      	movs	r3, #1
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	f7fc ff30 	bl	8010ed4 <lfs_dir_commit>
 8014074:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8014076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014078:	2b00      	cmp	r3, #0
 801407a:	d001      	beq.n	8014080 <lfs_fs_demove+0xd8>
        return err;
 801407c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801407e:	e000      	b.n	8014082 <lfs_fs_demove+0xda>
    }

    return 0;
 8014080:	2300      	movs	r3, #0
}
 8014082:	4618      	mov	r0, r3
 8014084:	3740      	adds	r7, #64	@ 0x40
 8014086:	46bd      	mov	sp, r7
 8014088:	bdb0      	pop	{r4, r5, r7, pc}
 801408a:	bf00      	nop
 801408c:	0803059c 	.word	0x0803059c
 8014090:	08030474 	.word	0x08030474
 8014094:	08030ecc 	.word	0x08030ecc
 8014098:	08030f00 	.word	0x08030f00
 801409c:	08033cec 	.word	0x08033cec

080140a0 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80140a0:	b5b0      	push	{r4, r5, r7, lr}
 80140a2:	b0b2      	sub	sp, #200	@ 0xc8
 80140a4:	af04      	add	r7, sp, #16
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	460b      	mov	r3, r1
 80140aa:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	3330      	adds	r3, #48	@ 0x30
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7f9 fba6 	bl	800d802 <lfs_gstate_hasorphans>
 80140b6:	4603      	mov	r3, r0
 80140b8:	f083 0301 	eor.w	r3, r3, #1
 80140bc:	b2db      	uxtb	r3, r3
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d001      	beq.n	80140c6 <lfs_fs_deorphan+0x26>
        return 0;
 80140c2:	2300      	movs	r3, #0
 80140c4:	e187      	b.n	80143d6 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 80140c6:	2300      	movs	r3, #0
 80140c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80140cc:	e170      	b.n	80143b0 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80140ce:	f107 0308 	add.w	r3, r7, #8
 80140d2:	2220      	movs	r2, #32
 80140d4:	2100      	movs	r1, #0
 80140d6:	4618      	mov	r0, r3
 80140d8:	f011 ff3e 	bl	8025f58 <memset>
 80140dc:	2301      	movs	r3, #1
 80140de:	77fb      	strb	r3, [r7, #31]
 80140e0:	2301      	movs	r3, #1
 80140e2:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 80140e4:	2300      	movs	r3, #0
 80140e6:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 80140ea:	e149      	b.n	8014380 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80140ec:	f107 0308 	add.w	r3, r7, #8
 80140f0:	f103 0218 	add.w	r2, r3, #24
 80140f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80140f8:	4619      	mov	r1, r3
 80140fa:	6878      	ldr	r0, [r7, #4]
 80140fc:	f7fb f890 	bl	800f220 <lfs_dir_fetch>
 8014100:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 8014104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014108:	2b00      	cmp	r3, #0
 801410a:	d002      	beq.n	8014112 <lfs_fs_deorphan+0x72>
                return err;
 801410c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014110:	e161      	b.n	80143d6 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8014112:	7ffb      	ldrb	r3, [r7, #31]
 8014114:	f083 0301 	eor.w	r3, r3, #1
 8014118:	b2db      	uxtb	r3, r3
 801411a:	2b00      	cmp	r3, #0
 801411c:	f000 8124 	beq.w	8014368 <lfs_fs_deorphan+0x2c8>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8014120:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8014124:	f107 0308 	add.w	r3, r7, #8
 8014128:	3318      	adds	r3, #24
 801412a:	4619      	mov	r1, r3
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f7ff fdad 	bl	8013c8c <lfs_fs_parent>
 8014132:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8014136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801413a:	2b00      	cmp	r3, #0
 801413c:	da07      	bge.n	801414e <lfs_fs_deorphan+0xae>
 801413e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014142:	f113 0f02 	cmn.w	r3, #2
 8014146:	d002      	beq.n	801414e <lfs_fs_deorphan+0xae>
                    return tag;
 8014148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801414c:	e143      	b.n	80143d6 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801414e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014152:	2b00      	cmp	r3, #0
 8014154:	f040 80ac 	bne.w	80142b0 <lfs_fs_deorphan+0x210>
 8014158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801415c:	f113 0f02 	cmn.w	r3, #2
 8014160:	f000 80a6 	beq.w	80142b0 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8014164:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8014168:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801416c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8014170:	9300      	str	r3, [sp, #0]
 8014172:	4613      	mov	r3, r2
 8014174:	4a9a      	ldr	r2, [pc, #616]	@ (80143e0 <lfs_fs_deorphan+0x340>)
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f7f9 ff4c 	bl	800e014 <lfs_dir_get>
 801417c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8014180:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014184:	2b00      	cmp	r3, #0
 8014186:	da02      	bge.n	801418e <lfs_fs_deorphan+0xee>
                        return state;
 8014188:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801418c:	e0eb      	b.n	8014366 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 801418e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8014192:	4618      	mov	r0, r3
 8014194:	f7f9 fa23 	bl	800d5de <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8014198:	f107 0308 	add.w	r3, r7, #8
 801419c:	f103 0218 	add.w	r2, r3, #24
 80141a0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80141a4:	4611      	mov	r1, r2
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7f9 f9ec 	bl	800d584 <lfs_pair_issync>
 80141ac:	4603      	mov	r3, r0
 80141ae:	f083 0301 	eor.w	r3, r3, #1
 80141b2:	b2db      	uxtb	r3, r3
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d07b      	beq.n	80142b0 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80141b8:	6a38      	ldr	r0, [r7, #32]
 80141ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80141c0:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80141c4:	4c87      	ldr	r4, [pc, #540]	@ (80143e4 <lfs_fs_deorphan+0x344>)
 80141c6:	9403      	str	r4, [sp, #12]
 80141c8:	9102      	str	r1, [sp, #8]
 80141ca:	9201      	str	r2, [sp, #4]
 80141cc:	9300      	str	r3, [sp, #0]
 80141ce:	4603      	mov	r3, r0
 80141d0:	f241 3271 	movw	r2, #4977	@ 0x1371
 80141d4:	4984      	ldr	r1, [pc, #528]	@ (80143e8 <lfs_fs_deorphan+0x348>)
 80141d6:	4885      	ldr	r0, [pc, #532]	@ (80143ec <lfs_fs_deorphan+0x34c>)
 80141d8:	f00f f992 	bl	8023500 <printf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 80141dc:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80141e0:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	3330      	adds	r3, #48	@ 0x30
 80141e8:	f107 0208 	add.w	r2, r7, #8
 80141ec:	4611      	mov	r1, r2
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7f9 fb50 	bl	800d894 <lfs_gstate_hasmovehere>
 80141f4:	4603      	mov	r3, r0
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d01c      	beq.n	8014234 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141fe:	4618      	mov	r0, r3
 8014200:	f7f9 fa8c 	bl	800d71c <lfs_tag_id>
 8014204:	4603      	mov	r3, r0
 8014206:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 801420a:	68b9      	ldr	r1, [r7, #8]
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8014212:	4874      	ldr	r0, [pc, #464]	@ (80143e4 <lfs_fs_deorphan+0x344>)
 8014214:	9002      	str	r0, [sp, #8]
 8014216:	9201      	str	r2, [sp, #4]
 8014218:	9300      	str	r3, [sp, #0]
 801421a:	460b      	mov	r3, r1
 801421c:	f241 327c 	movw	r2, #4988	@ 0x137c
 8014220:	4971      	ldr	r1, [pc, #452]	@ (80143e8 <lfs_fs_deorphan+0x348>)
 8014222:	4873      	ldr	r0, [pc, #460]	@ (80143f0 <lfs_fs_deorphan+0x350>)
 8014224:	f00f f96c 	bl	8023500 <printf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8014228:	2200      	movs	r2, #0
 801422a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f7ff fe14 	bl	8013e5c <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8014234:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8014238:	4618      	mov	r0, r3
 801423a:	f7f9 f9ea 	bl	800d612 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801423e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8014242:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8014246:	4293      	cmp	r3, r2
 8014248:	d007      	beq.n	801425a <lfs_fs_deorphan+0x1ba>
 801424a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 801424e:	029b      	lsls	r3, r3, #10
 8014250:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8014254:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8014258:	e000      	b.n	801425c <lfs_fs_deorphan+0x1bc>
 801425a:	2300      	movs	r3, #0
 801425c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014260:	2300      	movs	r3, #0
 8014262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014266:	4b63      	ldr	r3, [pc, #396]	@ (80143f4 <lfs_fs_deorphan+0x354>)
 8014268:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801426c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8014270:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014274:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8014278:	f107 0108 	add.w	r1, r7, #8
 801427c:	2302      	movs	r3, #2
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f7fc fb2e 	bl	80108e0 <lfs_dir_orphaningcommit>
 8014284:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8014288:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801428c:	4618      	mov	r0, r3
 801428e:	f7f9 f9a6 	bl	800d5de <lfs_pair_fromle32>
                        if (state < 0) {
 8014292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014296:	2b00      	cmp	r3, #0
 8014298:	da02      	bge.n	80142a0 <lfs_fs_deorphan+0x200>
                            return state;
 801429a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 801429e:	e062      	b.n	8014366 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80142a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80142a4:	2b03      	cmp	r3, #3
 80142a6:	d16b      	bne.n	8014380 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 80142a8:	2301      	movs	r3, #1
 80142aa:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80142ae:	e067      	b.n	8014380 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80142b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d157      	bne.n	8014368 <lfs_fs_deorphan+0x2c8>
 80142b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80142bc:	f113 0f02 	cmn.w	r3, #2
 80142c0:	d152      	bne.n	8014368 <lfs_fs_deorphan+0x2c8>
 80142c2:	78fb      	ldrb	r3, [r7, #3]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d04f      	beq.n	8014368 <lfs_fs_deorphan+0x2c8>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80142c8:	6a3a      	ldr	r2, [r7, #32]
 80142ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142cc:	4945      	ldr	r1, [pc, #276]	@ (80143e4 <lfs_fs_deorphan+0x344>)
 80142ce:	9101      	str	r1, [sp, #4]
 80142d0:	9300      	str	r3, [sp, #0]
 80142d2:	4613      	mov	r3, r2
 80142d4:	f241 329c 	movw	r2, #5020	@ 0x139c
 80142d8:	4943      	ldr	r1, [pc, #268]	@ (80143e8 <lfs_fs_deorphan+0x348>)
 80142da:	4847      	ldr	r0, [pc, #284]	@ (80143f8 <lfs_fs_deorphan+0x358>)
 80142dc:	f00f f910 	bl	8023500 <printf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80142e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80142ea:	4619      	mov	r1, r3
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f7fa ffb3 	bl	800f258 <lfs_dir_getgstate>
 80142f2:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 80142f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d002      	beq.n	8014304 <lfs_fs_deorphan+0x264>
                        return err;
 80142fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014302:	e030      	b.n	8014366 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8014304:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014308:	3318      	adds	r3, #24
 801430a:	4618      	mov	r0, r3
 801430c:	f7f9 f981 	bl	800d612 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8014310:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014314:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8014318:	051a      	lsls	r2, r3, #20
 801431a:	4b38      	ldr	r3, [pc, #224]	@ (80143fc <lfs_fs_deorphan+0x35c>)
 801431c:	4313      	orrs	r3, r2
 801431e:	673b      	str	r3, [r7, #112]	@ 0x70
 8014320:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014324:	3318      	adds	r3, #24
 8014326:	677b      	str	r3, [r7, #116]	@ 0x74
 8014328:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801432c:	f107 0108 	add.w	r1, r7, #8
 8014330:	2301      	movs	r3, #1
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f7fc fad4 	bl	80108e0 <lfs_dir_orphaningcommit>
 8014338:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 801433c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014340:	3318      	adds	r3, #24
 8014342:	4618      	mov	r0, r3
 8014344:	f7f9 f94b 	bl	800d5de <lfs_pair_fromle32>
                    if (state < 0) {
 8014348:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801434c:	2b00      	cmp	r3, #0
 801434e:	da02      	bge.n	8014356 <lfs_fs_deorphan+0x2b6>
                        return state;
 8014350:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
                    return tag;
 8014354:	e03f      	b.n	80143d6 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8014356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801435a:	2b03      	cmp	r3, #3
 801435c:	d10f      	bne.n	801437e <lfs_fs_deorphan+0x2de>
                        moreorphans = true;
 801435e:	2301      	movs	r3, #1
 8014360:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8014364:	e00c      	b.n	8014380 <lfs_fs_deorphan+0x2e0>
                return err;
 8014366:	e036      	b.n	80143d6 <lfs_fs_deorphan+0x336>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 8014368:	f107 0408 	add.w	r4, r7, #8
 801436c:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8014370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014374:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801437c:	e000      	b.n	8014380 <lfs_fs_deorphan+0x2e0>
                    continue;
 801437e:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 8014380:	f107 0308 	add.w	r3, r7, #8
 8014384:	3318      	adds	r3, #24
 8014386:	4618      	mov	r0, r3
 8014388:	f7f9 f8b7 	bl	800d4fa <lfs_pair_isnull>
 801438c:	4603      	mov	r3, r0
 801438e:	f083 0301 	eor.w	r3, r3, #1
 8014392:	b2db      	uxtb	r3, r3
 8014394:	2b00      	cmp	r3, #0
 8014396:	f47f aea9 	bne.w	80140ec <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 801439a:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d001      	beq.n	80143a6 <lfs_fs_deorphan+0x306>
 80143a2:	2300      	movs	r3, #0
 80143a4:	e002      	b.n	80143ac <lfs_fs_deorphan+0x30c>
 80143a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80143aa:	3301      	adds	r3, #1
 80143ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80143b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80143b4:	2b01      	cmp	r3, #1
 80143b6:	f77f ae8a 	ble.w	80140ce <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	3330      	adds	r3, #48	@ 0x30
 80143be:	4618      	mov	r0, r3
 80143c0:	f7f9 fa32 	bl	800d828 <lfs_gstate_getorphans>
 80143c4:	4603      	mov	r3, r0
 80143c6:	425b      	negs	r3, r3
 80143c8:	b2db      	uxtb	r3, r3
 80143ca:	b25b      	sxtb	r3, r3
 80143cc:	4619      	mov	r1, r3
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f7ff fcf4 	bl	8013dbc <lfs_fs_preporphans>
 80143d4:	4603      	mov	r3, r0
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	37b8      	adds	r7, #184	@ 0xb8
 80143da:	46bd      	mov	sp, r7
 80143dc:	bdb0      	pop	{r4, r5, r7, pc}
 80143de:	bf00      	nop
 80143e0:	7ffffc00 	.word	0x7ffffc00
 80143e4:	0803059c 	.word	0x0803059c
 80143e8:	08030474 	.word	0x08030474
 80143ec:	08030f34 	.word	0x08030f34
 80143f0:	08030f78 	.word	0x08030f78
 80143f4:	600ffc08 	.word	0x600ffc08
 80143f8:	08030fc0 	.word	0x08030fc0
 80143fc:	000ffc08 	.word	0x000ffc08

08014400 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8014400:	b580      	push	{r7, lr}
 8014402:	b084      	sub	sp, #16
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f7ff fd61 	bl	8013ed0 <lfs_fs_desuperblock>
 801440e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d001      	beq.n	801441a <lfs_fs_forceconsistency+0x1a>
        return err;
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	e013      	b.n	8014442 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f7ff fdc4 	bl	8013fa8 <lfs_fs_demove>
 8014420:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d001      	beq.n	801442c <lfs_fs_forceconsistency+0x2c>
        return err;
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	e00a      	b.n	8014442 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 801442c:	2101      	movs	r1, #1
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f7ff fe36 	bl	80140a0 <lfs_fs_deorphan>
 8014434:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d001      	beq.n	8014440 <lfs_fs_forceconsistency+0x40>
        return err;
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	e000      	b.n	8014442 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8014440:	2300      	movs	r3, #0
}
 8014442:	4618      	mov	r0, r3
 8014444:	3710      	adds	r7, #16
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}

0801444a <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 801444a:	b480      	push	{r7}
 801444c:	b085      	sub	sp, #20
 801444e:	af00      	add	r7, sp, #0
 8014450:	6078      	str	r0, [r7, #4]
 8014452:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	1c5a      	adds	r2, r3, #1
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	601a      	str	r2, [r3, #0]
    return 0;
 8014462:	2300      	movs	r3, #0
}
 8014464:	4618      	mov	r0, r3
 8014466:	3714      	adds	r7, #20
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr

08014470 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8014470:	b580      	push	{r7, lr}
 8014472:	b084      	sub	sp, #16
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8014478:	2300      	movs	r3, #0
 801447a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801447c:	f107 0208 	add.w	r2, r7, #8
 8014480:	2300      	movs	r3, #0
 8014482:	4907      	ldr	r1, [pc, #28]	@ (80144a0 <lfs_fs_size_+0x30>)
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7ff f9ff 	bl	8013888 <lfs_fs_traverse_>
 801448a:	60f8      	str	r0, [r7, #12]
    if (err) {
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d001      	beq.n	8014496 <lfs_fs_size_+0x26>
        return err;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	e000      	b.n	8014498 <lfs_fs_size_+0x28>
    }

    return size;
 8014496:	68bb      	ldr	r3, [r7, #8]
}
 8014498:	4618      	mov	r0, r3
 801449a:	3710      	adds	r7, #16
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	0801444b 	.word	0x0801444b

080144a4 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	695b      	ldr	r3, [r3, #20]
 80144b2:	6838      	ldr	r0, [r7, #0]
 80144b4:	4798      	blx	r3
 80144b6:	60f8      	str	r0, [r7, #12]
    if (err) {
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d001      	beq.n	80144c2 <lfs_format+0x1e>
        return err;
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	e009      	b.n	80144d6 <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 80144c2:	6839      	ldr	r1, [r7, #0]
 80144c4:	6878      	ldr	r0, [r7, #4]
 80144c6:	f7fe ff01 	bl	80132cc <lfs_format_>
 80144ca:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	699b      	ldr	r3, [r3, #24]
 80144d0:	6838      	ldr	r0, [r7, #0]
 80144d2:	4798      	blx	r3
    return err;
 80144d4:	68fb      	ldr	r3, [r7, #12]
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	3710      	adds	r7, #16
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}

080144de <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80144de:	b580      	push	{r7, lr}
 80144e0:	b084      	sub	sp, #16
 80144e2:	af00      	add	r7, sp, #0
 80144e4:	6078      	str	r0, [r7, #4]
 80144e6:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	695b      	ldr	r3, [r3, #20]
 80144ec:	6838      	ldr	r0, [r7, #0]
 80144ee:	4798      	blx	r3
 80144f0:	60f8      	str	r0, [r7, #12]
    if (err) {
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d001      	beq.n	80144fc <lfs_mount+0x1e>
        return err;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	e009      	b.n	8014510 <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 80144fc:	6839      	ldr	r1, [r7, #0]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f7fe ff96 	bl	8013430 <lfs_mount_>
 8014504:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	699b      	ldr	r3, [r3, #24]
 801450a:	6838      	ldr	r0, [r7, #0]
 801450c:	4798      	blx	r3
    return err;
 801450e:	68fb      	ldr	r3, [r7, #12]
}
 8014510:	4618      	mov	r0, r3
 8014512:	3710      	adds	r7, #16
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014526:	695b      	ldr	r3, [r3, #20]
 8014528:	687a      	ldr	r2, [r7, #4]
 801452a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801452c:	4610      	mov	r0, r2
 801452e:	4798      	blx	r3
 8014530:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d001      	beq.n	801453c <lfs_remove+0x24>
        return err;
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	e00c      	b.n	8014556 <lfs_remove+0x3e>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_remove_(lfs, path);
 801453c:	6839      	ldr	r1, [r7, #0]
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f7fe f94a 	bl	80127d8 <lfs_remove_>
 8014544:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801454a:	699b      	ldr	r3, [r3, #24]
 801454c:	687a      	ldr	r2, [r7, #4]
 801454e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014550:	4610      	mov	r0, r2
 8014552:	4798      	blx	r3
    return err;
 8014554:	68fb      	ldr	r3, [r7, #12]
}
 8014556:	4618      	mov	r0, r3
 8014558:	3710      	adds	r7, #16
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}

0801455e <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801455e:	b580      	push	{r7, lr}
 8014560:	b086      	sub	sp, #24
 8014562:	af00      	add	r7, sp, #0
 8014564:	60f8      	str	r0, [r7, #12]
 8014566:	60b9      	str	r1, [r7, #8]
 8014568:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801456e:	695b      	ldr	r3, [r3, #20]
 8014570:	68fa      	ldr	r2, [r7, #12]
 8014572:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014574:	4610      	mov	r0, r2
 8014576:	4798      	blx	r3
 8014578:	6178      	str	r0, [r7, #20]
    if (err) {
 801457a:	697b      	ldr	r3, [r7, #20]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d001      	beq.n	8014584 <lfs_rename+0x26>
        return err;
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	e00d      	b.n	80145a0 <lfs_rename+0x42>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rename_(lfs, oldpath, newpath);
 8014584:	687a      	ldr	r2, [r7, #4]
 8014586:	68b9      	ldr	r1, [r7, #8]
 8014588:	68f8      	ldr	r0, [r7, #12]
 801458a:	f7fe f9f7 	bl	801297c <lfs_rename_>
 801458e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014594:	699b      	ldr	r3, [r3, #24]
 8014596:	68fa      	ldr	r2, [r7, #12]
 8014598:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801459a:	4610      	mov	r0, r2
 801459c:	4798      	blx	r3
    return err;
 801459e:	697b      	ldr	r3, [r7, #20]
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3718      	adds	r7, #24
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}

080145a8 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b086      	sub	sp, #24
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	60f8      	str	r0, [r7, #12]
 80145b0:	60b9      	str	r1, [r7, #8]
 80145b2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80145b8:	695b      	ldr	r3, [r3, #20]
 80145ba:	68fa      	ldr	r2, [r7, #12]
 80145bc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80145be:	4610      	mov	r0, r2
 80145c0:	4798      	blx	r3
 80145c2:	6178      	str	r0, [r7, #20]
    if (err) {
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d001      	beq.n	80145ce <lfs_stat+0x26>
        return err;
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	e00d      	b.n	80145ea <lfs_stat+0x42>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_stat_(lfs, path, info);
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	68b9      	ldr	r1, [r7, #8]
 80145d2:	68f8      	ldr	r0, [r7, #12]
 80145d4:	f7fe f8db 	bl	801278e <lfs_stat_>
 80145d8:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80145de:	699b      	ldr	r3, [r3, #24]
 80145e0:	68fa      	ldr	r2, [r7, #12]
 80145e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80145e4:	4610      	mov	r0, r2
 80145e6:	4798      	blx	r3
    return err;
 80145e8:	697b      	ldr	r3, [r7, #20]
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3718      	adds	r7, #24
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}
	...

080145f4 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b086      	sub	sp, #24
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	60f8      	str	r0, [r7, #12]
 80145fc:	60b9      	str	r1, [r7, #8]
 80145fe:	607a      	str	r2, [r7, #4]
 8014600:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014606:	695b      	ldr	r3, [r3, #20]
 8014608:	68fa      	ldr	r2, [r7, #12]
 801460a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801460c:	4610      	mov	r0, r2
 801460e:	4798      	blx	r3
 8014610:	6178      	str	r0, [r7, #20]
    if (err) {
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d001      	beq.n	801461c <lfs_file_open+0x28>
        return err;
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	e021      	b.n	8014660 <lfs_file_open+0x6c>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014620:	68b9      	ldr	r1, [r7, #8]
 8014622:	4618      	mov	r0, r3
 8014624:	f7f9 fa66 	bl	800daf4 <lfs_mlist_isopen>
 8014628:	4603      	mov	r3, r0
 801462a:	f083 0301 	eor.w	r3, r3, #1
 801462e:	b2db      	uxtb	r3, r3
 8014630:	2b00      	cmp	r3, #0
 8014632:	d106      	bne.n	8014642 <lfs_file_open+0x4e>
 8014634:	4b0c      	ldr	r3, [pc, #48]	@ (8014668 <lfs_file_open+0x74>)
 8014636:	4a0d      	ldr	r2, [pc, #52]	@ (801466c <lfs_file_open+0x78>)
 8014638:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801463c:	480c      	ldr	r0, [pc, #48]	@ (8014670 <lfs_file_open+0x7c>)
 801463e:	f00e fcab 	bl	8022f98 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	687a      	ldr	r2, [r7, #4]
 8014646:	68b9      	ldr	r1, [r7, #8]
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f7fd faad 	bl	8011ba8 <lfs_file_open_>
 801464e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014654:	699b      	ldr	r3, [r3, #24]
 8014656:	68fa      	ldr	r2, [r7, #12]
 8014658:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801465a:	4610      	mov	r0, r2
 801465c:	4798      	blx	r3
    return err;
 801465e:	697b      	ldr	r3, [r7, #20]
}
 8014660:	4618      	mov	r0, r3
 8014662:	3718      	adds	r7, #24
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}
 8014668:	08031010 	.word	0x08031010
 801466c:	08033cfc 	.word	0x08033cfc
 8014670:	08030474 	.word	0x08030474

08014674 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8014674:	b580      	push	{r7, lr}
 8014676:	b084      	sub	sp, #16
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014682:	695b      	ldr	r3, [r3, #20]
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014688:	4610      	mov	r0, r2
 801468a:	4798      	blx	r3
 801468c:	60f8      	str	r0, [r7, #12]
    if (err) {
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d001      	beq.n	8014698 <lfs_file_close+0x24>
        return err;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	e01c      	b.n	80146d2 <lfs_file_close+0x5e>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801469c:	6839      	ldr	r1, [r7, #0]
 801469e:	4618      	mov	r0, r3
 80146a0:	f7f9 fa28 	bl	800daf4 <lfs_mlist_isopen>
 80146a4:	4603      	mov	r3, r0
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d106      	bne.n	80146b8 <lfs_file_close+0x44>
 80146aa:	4b0c      	ldr	r3, [pc, #48]	@ (80146dc <lfs_file_close+0x68>)
 80146ac:	4a0c      	ldr	r2, [pc, #48]	@ (80146e0 <lfs_file_close+0x6c>)
 80146ae:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 80146b2:	480c      	ldr	r0, [pc, #48]	@ (80146e4 <lfs_file_close+0x70>)
 80146b4:	f00e fc70 	bl	8022f98 <__assert_func>

    err = lfs_file_close_(lfs, file);
 80146b8:	6839      	ldr	r1, [r7, #0]
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f7fd fa8c 	bl	8011bd8 <lfs_file_close_>
 80146c0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80146c6:	699b      	ldr	r3, [r3, #24]
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80146cc:	4610      	mov	r0, r2
 80146ce:	4798      	blx	r3
    return err;
 80146d0:	68fb      	ldr	r3, [r7, #12]
}
 80146d2:	4618      	mov	r0, r3
 80146d4:	3710      	adds	r7, #16
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}
 80146da:	bf00      	nop
 80146dc:	08031048 	.word	0x08031048
 80146e0:	08033d0c 	.word	0x08033d0c
 80146e4:	08030474 	.word	0x08030474

080146e8 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b086      	sub	sp, #24
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	60f8      	str	r0, [r7, #12]
 80146f0:	60b9      	str	r1, [r7, #8]
 80146f2:	607a      	str	r2, [r7, #4]
 80146f4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80146fa:	695b      	ldr	r3, [r3, #20]
 80146fc:	68fa      	ldr	r2, [r7, #12]
 80146fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014700:	4610      	mov	r0, r2
 8014702:	4798      	blx	r3
 8014704:	6178      	str	r0, [r7, #20]
    if (err) {
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d001      	beq.n	8014710 <lfs_file_read+0x28>
        return err;
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	e01e      	b.n	801474e <lfs_file_read+0x66>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014714:	68b9      	ldr	r1, [r7, #8]
 8014716:	4618      	mov	r0, r3
 8014718:	f7f9 f9ec 	bl	800daf4 <lfs_mlist_isopen>
 801471c:	4603      	mov	r3, r0
 801471e:	2b00      	cmp	r3, #0
 8014720:	d106      	bne.n	8014730 <lfs_file_read+0x48>
 8014722:	4b0d      	ldr	r3, [pc, #52]	@ (8014758 <lfs_file_read+0x70>)
 8014724:	4a0d      	ldr	r2, [pc, #52]	@ (801475c <lfs_file_read+0x74>)
 8014726:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801472a:	480d      	ldr	r0, [pc, #52]	@ (8014760 <lfs_file_read+0x78>)
 801472c:	f00e fc34 	bl	8022f98 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	687a      	ldr	r2, [r7, #4]
 8014734:	68b9      	ldr	r1, [r7, #8]
 8014736:	68f8      	ldr	r0, [r7, #12]
 8014738:	f7fd fdae 	bl	8012298 <lfs_file_read_>
 801473c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014742:	699b      	ldr	r3, [r3, #24]
 8014744:	68fa      	ldr	r2, [r7, #12]
 8014746:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014748:	4610      	mov	r0, r2
 801474a:	4798      	blx	r3
    return res;
 801474c:	693b      	ldr	r3, [r7, #16]
}
 801474e:	4618      	mov	r0, r3
 8014750:	3718      	adds	r7, #24
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}
 8014756:	bf00      	nop
 8014758:	08031048 	.word	0x08031048
 801475c:	08033d1c 	.word	0x08033d1c
 8014760:	08030474 	.word	0x08030474

08014764 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8014764:	b580      	push	{r7, lr}
 8014766:	b086      	sub	sp, #24
 8014768:	af00      	add	r7, sp, #0
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	60b9      	str	r1, [r7, #8]
 801476e:	607a      	str	r2, [r7, #4]
 8014770:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014776:	695b      	ldr	r3, [r3, #20]
 8014778:	68fa      	ldr	r2, [r7, #12]
 801477a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801477c:	4610      	mov	r0, r2
 801477e:	4798      	blx	r3
 8014780:	6178      	str	r0, [r7, #20]
    if (err) {
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d001      	beq.n	801478c <lfs_file_write+0x28>
        return err;
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	e01e      	b.n	80147ca <lfs_file_write+0x66>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014790:	68b9      	ldr	r1, [r7, #8]
 8014792:	4618      	mov	r0, r3
 8014794:	f7f9 f9ae 	bl	800daf4 <lfs_mlist_isopen>
 8014798:	4603      	mov	r3, r0
 801479a:	2b00      	cmp	r3, #0
 801479c:	d106      	bne.n	80147ac <lfs_file_write+0x48>
 801479e:	4b0d      	ldr	r3, [pc, #52]	@ (80147d4 <lfs_file_write+0x70>)
 80147a0:	4a0d      	ldr	r2, [pc, #52]	@ (80147d8 <lfs_file_write+0x74>)
 80147a2:	f641 0105 	movw	r1, #6149	@ 0x1805
 80147a6:	480d      	ldr	r0, [pc, #52]	@ (80147dc <lfs_file_write+0x78>)
 80147a8:	f00e fbf6 	bl	8022f98 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	687a      	ldr	r2, [r7, #4]
 80147b0:	68b9      	ldr	r1, [r7, #8]
 80147b2:	68f8      	ldr	r0, [r7, #12]
 80147b4:	f7fd feb6 	bl	8012524 <lfs_file_write_>
 80147b8:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80147be:	699b      	ldr	r3, [r3, #24]
 80147c0:	68fa      	ldr	r2, [r7, #12]
 80147c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80147c4:	4610      	mov	r0, r2
 80147c6:	4798      	blx	r3
    return res;
 80147c8:	693b      	ldr	r3, [r7, #16]
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3718      	adds	r7, #24
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}
 80147d2:	bf00      	nop
 80147d4:	08031048 	.word	0x08031048
 80147d8:	08033d2c 	.word	0x08033d2c
 80147dc:	08030474 	.word	0x08030474

080147e0 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b086      	sub	sp, #24
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	60f8      	str	r0, [r7, #12]
 80147e8:	60b9      	str	r1, [r7, #8]
 80147ea:	607a      	str	r2, [r7, #4]
 80147ec:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80147f2:	695b      	ldr	r3, [r3, #20]
 80147f4:	68fa      	ldr	r2, [r7, #12]
 80147f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80147f8:	4610      	mov	r0, r2
 80147fa:	4798      	blx	r3
 80147fc:	6178      	str	r0, [r7, #20]
    if (err) {
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d001      	beq.n	8014808 <lfs_file_seek+0x28>
        return err;
 8014804:	697b      	ldr	r3, [r7, #20]
 8014806:	e01e      	b.n	8014846 <lfs_file_seek+0x66>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801480c:	68b9      	ldr	r1, [r7, #8]
 801480e:	4618      	mov	r0, r3
 8014810:	f7f9 f970 	bl	800daf4 <lfs_mlist_isopen>
 8014814:	4603      	mov	r3, r0
 8014816:	2b00      	cmp	r3, #0
 8014818:	d106      	bne.n	8014828 <lfs_file_seek+0x48>
 801481a:	4b0d      	ldr	r3, [pc, #52]	@ (8014850 <lfs_file_seek+0x70>)
 801481c:	4a0d      	ldr	r2, [pc, #52]	@ (8014854 <lfs_file_seek+0x74>)
 801481e:	f641 0117 	movw	r1, #6167	@ 0x1817
 8014822:	480d      	ldr	r0, [pc, #52]	@ (8014858 <lfs_file_seek+0x78>)
 8014824:	f00e fbb8 	bl	8022f98 <__assert_func>

    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	687a      	ldr	r2, [r7, #4]
 801482c:	68b9      	ldr	r1, [r7, #8]
 801482e:	68f8      	ldr	r0, [r7, #12]
 8014830:	f7fd fefc 	bl	801262c <lfs_file_seek_>
 8014834:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801483a:	699b      	ldr	r3, [r3, #24]
 801483c:	68fa      	ldr	r2, [r7, #12]
 801483e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014840:	4610      	mov	r0, r2
 8014842:	4798      	blx	r3
    return res;
 8014844:	693b      	ldr	r3, [r7, #16]
}
 8014846:	4618      	mov	r0, r3
 8014848:	3718      	adds	r7, #24
 801484a:	46bd      	mov	sp, r7
 801484c:	bd80      	pop	{r7, pc}
 801484e:	bf00      	nop
 8014850:	08031048 	.word	0x08031048
 8014854:	08033d3c 	.word	0x08033d3c
 8014858:	08030474 	.word	0x08030474

0801485c <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801486a:	695b      	ldr	r3, [r3, #20]
 801486c:	687a      	ldr	r2, [r7, #4]
 801486e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014870:	4610      	mov	r0, r2
 8014872:	4798      	blx	r3
 8014874:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d001      	beq.n	8014880 <lfs_file_tell+0x24>
        return err;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	e01c      	b.n	80148ba <lfs_file_tell+0x5e>
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014884:	6839      	ldr	r1, [r7, #0]
 8014886:	4618      	mov	r0, r3
 8014888:	f7f9 f934 	bl	800daf4 <lfs_mlist_isopen>
 801488c:	4603      	mov	r3, r0
 801488e:	2b00      	cmp	r3, #0
 8014890:	d106      	bne.n	80148a0 <lfs_file_tell+0x44>
 8014892:	4b0c      	ldr	r3, [pc, #48]	@ (80148c4 <lfs_file_tell+0x68>)
 8014894:	4a0c      	ldr	r2, [pc, #48]	@ (80148c8 <lfs_file_tell+0x6c>)
 8014896:	f641 0138 	movw	r1, #6200	@ 0x1838
 801489a:	480c      	ldr	r0, [pc, #48]	@ (80148cc <lfs_file_tell+0x70>)
 801489c:	f00e fb7c 	bl	8022f98 <__assert_func>

    lfs_soff_t res = lfs_file_tell_(lfs, file);
 80148a0:	6839      	ldr	r1, [r7, #0]
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f7fd ff4b 	bl	801273e <lfs_file_tell_>
 80148a8:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80148ae:	699b      	ldr	r3, [r3, #24]
 80148b0:	687a      	ldr	r2, [r7, #4]
 80148b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80148b4:	4610      	mov	r0, r2
 80148b6:	4798      	blx	r3
    return res;
 80148b8:	68bb      	ldr	r3, [r7, #8]
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	3710      	adds	r7, #16
 80148be:	46bd      	mov	sp, r7
 80148c0:	bd80      	pop	{r7, pc}
 80148c2:	bf00      	nop
 80148c4:	08031048 	.word	0x08031048
 80148c8:	08033d4c 	.word	0x08033d4c
 80148cc:	08030474 	.word	0x08030474

080148d0 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80148de:	695b      	ldr	r3, [r3, #20]
 80148e0:	687a      	ldr	r2, [r7, #4]
 80148e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80148e4:	4610      	mov	r0, r2
 80148e6:	4798      	blx	r3
 80148e8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d001      	beq.n	80148f4 <lfs_mkdir+0x24>
        return err;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	e00c      	b.n	801490e <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_mkdir_(lfs, path);
 80148f4:	6839      	ldr	r1, [r7, #0]
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f7fc fb12 	bl	8010f20 <lfs_mkdir_>
 80148fc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014902:	699b      	ldr	r3, [r3, #24]
 8014904:	687a      	ldr	r2, [r7, #4]
 8014906:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014908:	4610      	mov	r0, r2
 801490a:	4798      	blx	r3
    return err;
 801490c:	68fb      	ldr	r3, [r7, #12]
}
 801490e:	4618      	mov	r0, r3
 8014910:	3710      	adds	r7, #16
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
	...

08014918 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8014918:	b580      	push	{r7, lr}
 801491a:	b086      	sub	sp, #24
 801491c:	af00      	add	r7, sp, #0
 801491e:	60f8      	str	r0, [r7, #12]
 8014920:	60b9      	str	r1, [r7, #8]
 8014922:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014928:	695b      	ldr	r3, [r3, #20]
 801492a:	68fa      	ldr	r2, [r7, #12]
 801492c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801492e:	4610      	mov	r0, r2
 8014930:	4798      	blx	r3
 8014932:	6178      	str	r0, [r7, #20]
    if (err) {
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d001      	beq.n	801493e <lfs_dir_open+0x26>
        return err;
 801493a:	697b      	ldr	r3, [r7, #20]
 801493c:	e020      	b.n	8014980 <lfs_dir_open+0x68>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014942:	68b9      	ldr	r1, [r7, #8]
 8014944:	4618      	mov	r0, r3
 8014946:	f7f9 f8d5 	bl	800daf4 <lfs_mlist_isopen>
 801494a:	4603      	mov	r3, r0
 801494c:	f083 0301 	eor.w	r3, r3, #1
 8014950:	b2db      	uxtb	r3, r3
 8014952:	2b00      	cmp	r3, #0
 8014954:	d106      	bne.n	8014964 <lfs_dir_open+0x4c>
 8014956:	4b0c      	ldr	r3, [pc, #48]	@ (8014988 <lfs_dir_open+0x70>)
 8014958:	4a0c      	ldr	r2, [pc, #48]	@ (801498c <lfs_dir_open+0x74>)
 801495a:	f641 0174 	movw	r1, #6260	@ 0x1874
 801495e:	480c      	ldr	r0, [pc, #48]	@ (8014990 <lfs_dir_open+0x78>)
 8014960:	f00e fb1a 	bl	8022f98 <__assert_func>

    err = lfs_dir_open_(lfs, dir, path);
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	68b9      	ldr	r1, [r7, #8]
 8014968:	68f8      	ldr	r0, [r7, #12]
 801496a:	f7fc fc19 	bl	80111a0 <lfs_dir_open_>
 801496e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014974:	699b      	ldr	r3, [r3, #24]
 8014976:	68fa      	ldr	r2, [r7, #12]
 8014978:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801497a:	4610      	mov	r0, r2
 801497c:	4798      	blx	r3
    return err;
 801497e:	697b      	ldr	r3, [r7, #20]
}
 8014980:	4618      	mov	r0, r3
 8014982:	3718      	adds	r7, #24
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}
 8014988:	08031080 	.word	0x08031080
 801498c:	08033d5c 	.word	0x08033d5c
 8014990:	08030474 	.word	0x08030474

08014994 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 8014994:	b580      	push	{r7, lr}
 8014996:	b084      	sub	sp, #16
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
 801499c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80149a2:	695b      	ldr	r3, [r3, #20]
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80149a8:	4610      	mov	r0, r2
 80149aa:	4798      	blx	r3
 80149ac:	60f8      	str	r0, [r7, #12]
    if (err) {
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d001      	beq.n	80149b8 <lfs_dir_close+0x24>
        return err;
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	e00c      	b.n	80149d2 <lfs_dir_close+0x3e>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_close_(lfs, dir);
 80149b8:	6839      	ldr	r1, [r7, #0]
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f7fc fc6a 	bl	8011294 <lfs_dir_close_>
 80149c0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80149c6:	699b      	ldr	r3, [r3, #24]
 80149c8:	687a      	ldr	r2, [r7, #4]
 80149ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80149cc:	4610      	mov	r0, r2
 80149ce:	4798      	blx	r3
    return err;
 80149d0:	68fb      	ldr	r3, [r7, #12]
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	3710      	adds	r7, #16
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}

080149da <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80149da:	b580      	push	{r7, lr}
 80149dc:	b086      	sub	sp, #24
 80149de:	af00      	add	r7, sp, #0
 80149e0:	60f8      	str	r0, [r7, #12]
 80149e2:	60b9      	str	r1, [r7, #8]
 80149e4:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80149ea:	695b      	ldr	r3, [r3, #20]
 80149ec:	68fa      	ldr	r2, [r7, #12]
 80149ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80149f0:	4610      	mov	r0, r2
 80149f2:	4798      	blx	r3
 80149f4:	6178      	str	r0, [r7, #20]
    if (err) {
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d001      	beq.n	8014a00 <lfs_dir_read+0x26>
        return err;
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	e00d      	b.n	8014a1c <lfs_dir_read+0x42>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_read_(lfs, dir, info);
 8014a00:	687a      	ldr	r2, [r7, #4]
 8014a02:	68b9      	ldr	r1, [r7, #8]
 8014a04:	68f8      	ldr	r0, [r7, #12]
 8014a06:	f7fc fc53 	bl	80112b0 <lfs_dir_read_>
 8014a0a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014a10:	699b      	ldr	r3, [r3, #24]
 8014a12:	68fa      	ldr	r2, [r7, #12]
 8014a14:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014a16:	4610      	mov	r0, r2
 8014a18:	4798      	blx	r3
    return err;
 8014a1a:	697b      	ldr	r3, [r7, #20]
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3718      	adds	r7, #24
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}

08014a24 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8014a24:	b480      	push	{r7}
 8014a26:	b087      	sub	sp, #28
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	60f8      	str	r0, [r7, #12]
 8014a2c:	60b9      	str	r1, [r7, #8]
 8014a2e:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8014a34:	2300      	movs	r3, #0
 8014a36:	617b      	str	r3, [r7, #20]
 8014a38:	e024      	b.n	8014a84 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	091a      	lsrs	r2, r3, #4
 8014a3e:	6939      	ldr	r1, [r7, #16]
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	440b      	add	r3, r1
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	4619      	mov	r1, r3
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	404b      	eors	r3, r1
 8014a4c:	f003 030f 	and.w	r3, r3, #15
 8014a50:	4912      	ldr	r1, [pc, #72]	@ (8014a9c <lfs_crc+0x78>)
 8014a52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014a56:	4053      	eors	r3, r2
 8014a58:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	091a      	lsrs	r2, r3, #4
 8014a5e:	6939      	ldr	r1, [r7, #16]
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	440b      	add	r3, r1
 8014a64:	781b      	ldrb	r3, [r3, #0]
 8014a66:	091b      	lsrs	r3, r3, #4
 8014a68:	b2db      	uxtb	r3, r3
 8014a6a:	4619      	mov	r1, r3
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	404b      	eors	r3, r1
 8014a70:	f003 030f 	and.w	r3, r3, #15
 8014a74:	4909      	ldr	r1, [pc, #36]	@ (8014a9c <lfs_crc+0x78>)
 8014a76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014a7a:	4053      	eors	r3, r2
 8014a7c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	3301      	adds	r3, #1
 8014a82:	617b      	str	r3, [r7, #20]
 8014a84:	697a      	ldr	r2, [r7, #20]
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d3d6      	bcc.n	8014a3a <lfs_crc+0x16>
    }

    return crc;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	371c      	adds	r7, #28
 8014a92:	46bd      	mov	sp, r7
 8014a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a98:	4770      	bx	lr
 8014a9a:	bf00      	nop
 8014a9c:	08033d6c 	.word	0x08033d6c

08014aa0 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
 8014aa8:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	683a      	ldr	r2, [r7, #0]
 8014aae:	fb02 f303 	mul.w	r3, r2, r3
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7f7 fbb2 	bl	800c21c <pvPortMalloc>
 8014ab8:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d008      	beq.n	8014ad2 <mg_calloc+0x32>
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	fb02 f303 	mul.w	r3, r2, r3
 8014ac8:	461a      	mov	r2, r3
 8014aca:	2100      	movs	r1, #0
 8014acc:	68f8      	ldr	r0, [r7, #12]
 8014ace:	f011 fa43 	bl	8025f58 <memset>
  return p;
 8014ad2:	68fb      	ldr	r3, [r7, #12]
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3710      	adds	r7, #16
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}

08014adc <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b084      	sub	sp, #16
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	60fb      	str	r3, [r7, #12]
 8014aea:	e002      	b.n	8014af2 <mg_dns_free+0x16>
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	60fb      	str	r3, [r7, #12]
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	683a      	ldr	r2, [r7, #0]
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d1f7      	bne.n	8014aec <mg_dns_free+0x10>
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	681a      	ldr	r2, [r3, #0]
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	601a      	str	r2, [r3, #0]
  free(d);
 8014b04:	6838      	ldr	r0, [r7, #0]
 8014b06:	f7f7 fc57 	bl	800c3b8 <vPortFree>
}
 8014b0a:	bf00      	nop
 8014b0c:	3710      	adds	r7, #16
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}

08014b12 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8014b12:	b580      	push	{r7, lr}
 8014b14:	b086      	sub	sp, #24
 8014b16:	af00      	add	r7, sp, #0
 8014b18:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	685b      	ldr	r3, [r3, #4]
 8014b1e:	3330      	adds	r3, #48	@ 0x30
 8014b20:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8014b22:	693b      	ldr	r3, [r7, #16]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	617b      	str	r3, [r7, #20]
 8014b28:	e00d      	b.n	8014b46 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8014b30:	697b      	ldr	r3, [r7, #20]
 8014b32:	685b      	ldr	r3, [r3, #4]
 8014b34:	687a      	ldr	r2, [r7, #4]
 8014b36:	429a      	cmp	r2, r3
 8014b38:	d103      	bne.n	8014b42 <mg_resolve_cancel+0x30>
 8014b3a:	6979      	ldr	r1, [r7, #20]
 8014b3c:	6938      	ldr	r0, [r7, #16]
 8014b3e:	f7ff ffcd 	bl	8014adc <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	617b      	str	r3, [r7, #20]
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d1ee      	bne.n	8014b2a <mg_resolve_cancel+0x18>
  }
}
 8014b4c:	bf00      	nop
 8014b4e:	bf00      	nop
 8014b50:	3718      	adds	r7, #24
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}

08014b56 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8014b56:	b580      	push	{r7, lr}
 8014b58:	b08c      	sub	sp, #48	@ 0x30
 8014b5a:	af04      	add	r7, sp, #16
 8014b5c:	60f8      	str	r0, [r7, #12]
 8014b5e:	60b9      	str	r1, [r7, #8]
 8014b60:	607a      	str	r2, [r7, #4]
 8014b62:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8014b64:	2300      	movs	r3, #0
 8014b66:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8014b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d005      	beq.n	8014b7a <mg_dns_parse_name_depth+0x24>
 8014b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d102      	bne.n	8014b7a <mg_dns_parse_name_depth+0x24>
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	2200      	movs	r2, #0
 8014b78:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8014b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b7c:	2b05      	cmp	r3, #5
 8014b7e:	f340 8084 	ble.w	8014c8a <mg_dns_parse_name_depth+0x134>
 8014b82:	2300      	movs	r3, #0
 8014b84:	e093      	b.n	8014cae <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8014b86:	687a      	ldr	r2, [r7, #4]
 8014b88:	69fb      	ldr	r3, [r7, #28]
 8014b8a:	4413      	add	r3, r2
 8014b8c:	68fa      	ldr	r2, [r7, #12]
 8014b8e:	4413      	add	r3, r2
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8014b94:	69bb      	ldr	r3, [r7, #24]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d103      	bne.n	8014ba2 <mg_dns_parse_name_depth+0x4c>
      i++;
 8014b9a:	69fb      	ldr	r3, [r7, #28]
 8014b9c:	3301      	adds	r3, #1
 8014b9e:	61fb      	str	r3, [r7, #28]
      break;
 8014ba0:	e07b      	b.n	8014c9a <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8014ba2:	69bb      	ldr	r3, [r7, #24]
 8014ba4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d02f      	beq.n	8014c0c <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8014bac:	69bb      	ldr	r3, [r7, #24]
 8014bae:	021b      	lsls	r3, r3, #8
 8014bb0:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8014bb4:	6879      	ldr	r1, [r7, #4]
 8014bb6:	69fa      	ldr	r2, [r7, #28]
 8014bb8:	440a      	add	r2, r1
 8014bba:	3201      	adds	r2, #1
 8014bbc:	68f9      	ldr	r1, [r7, #12]
 8014bbe:	440a      	add	r2, r1
 8014bc0:	7812      	ldrb	r2, [r2, #0]
 8014bc2:	4313      	orrs	r3, r2
 8014bc4:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	3301      	adds	r3, #1
 8014bca:	68ba      	ldr	r2, [r7, #8]
 8014bcc:	429a      	cmp	r2, r3
 8014bce:	d919      	bls.n	8014c04 <mg_dns_parse_name_depth+0xae>
 8014bd0:	68fa      	ldr	r2, [r7, #12]
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	4413      	add	r3, r2
 8014bd6:	781b      	ldrb	r3, [r3, #0]
 8014bd8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d111      	bne.n	8014c04 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8014be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be2:	3301      	adds	r3, #1
 8014be4:	9302      	str	r3, [sp, #8]
 8014be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014be8:	9301      	str	r3, [sp, #4]
 8014bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	697a      	ldr	r2, [r7, #20]
 8014bf2:	68b9      	ldr	r1, [r7, #8]
 8014bf4:	68f8      	ldr	r0, [r7, #12]
 8014bf6:	f7ff ffae 	bl	8014b56 <mg_dns_parse_name_depth>
 8014bfa:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d101      	bne.n	8014c04 <mg_dns_parse_name_depth+0xae>
        return 0;
 8014c00:	2300      	movs	r3, #0
 8014c02:	e054      	b.n	8014cae <mg_dns_parse_name_depth+0x158>
      i += 2;
 8014c04:	69fb      	ldr	r3, [r7, #28]
 8014c06:	3302      	adds	r3, #2
 8014c08:	61fb      	str	r3, [r7, #28]
      break;
 8014c0a:	e046      	b.n	8014c9a <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8014c0c:	687a      	ldr	r2, [r7, #4]
 8014c0e:	69fb      	ldr	r3, [r7, #28]
 8014c10:	441a      	add	r2, r3
 8014c12:	69bb      	ldr	r3, [r7, #24]
 8014c14:	4413      	add	r3, r2
 8014c16:	3301      	adds	r3, #1
 8014c18:	68ba      	ldr	r2, [r7, #8]
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	d801      	bhi.n	8014c22 <mg_dns_parse_name_depth+0xcc>
 8014c1e:	2300      	movs	r3, #0
 8014c20:	e045      	b.n	8014cae <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8014c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d00b      	beq.n	8014c40 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8014c28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d204      	bcs.n	8014c3a <mg_dns_parse_name_depth+0xe4>
 8014c30:	683a      	ldr	r2, [r7, #0]
 8014c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c34:	4413      	add	r3, r2
 8014c36:	222e      	movs	r2, #46	@ 0x2e
 8014c38:	701a      	strb	r2, [r3, #0]
      j++;
 8014c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c3c:	3301      	adds	r3, #1
 8014c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8014c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c42:	69bb      	ldr	r3, [r7, #24]
 8014c44:	4413      	add	r3, r2
 8014c46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d90c      	bls.n	8014c66 <mg_dns_parse_name_depth+0x110>
 8014c4c:	683a      	ldr	r2, [r7, #0]
 8014c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c50:	18d0      	adds	r0, r2, r3
 8014c52:	687a      	ldr	r2, [r7, #4]
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	4413      	add	r3, r2
 8014c58:	3301      	adds	r3, #1
 8014c5a:	68fa      	ldr	r2, [r7, #12]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	69ba      	ldr	r2, [r7, #24]
 8014c60:	4619      	mov	r1, r3
 8014c62:	f012 fbd1 	bl	8027408 <memcpy>
    j += n;
 8014c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c68:	69bb      	ldr	r3, [r7, #24]
 8014c6a:	4413      	add	r3, r2
 8014c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 8014c6e:	69ba      	ldr	r2, [r7, #24]
 8014c70:	69fb      	ldr	r3, [r7, #28]
 8014c72:	4413      	add	r3, r2
 8014c74:	3301      	adds	r3, #1
 8014c76:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8014c78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d204      	bcs.n	8014c8a <mg_dns_parse_name_depth+0x134>
 8014c80:	683a      	ldr	r2, [r7, #0]
 8014c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c84:	4413      	add	r3, r2
 8014c86:	2200      	movs	r2, #0
 8014c88:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 8014c8a:	687a      	ldr	r2, [r7, #4]
 8014c8c:	69fb      	ldr	r3, [r7, #28]
 8014c8e:	4413      	add	r3, r2
 8014c90:	3301      	adds	r3, #1
 8014c92:	68ba      	ldr	r2, [r7, #8]
 8014c94:	429a      	cmp	r2, r3
 8014c96:	f63f af76 	bhi.w	8014b86 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8014c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d005      	beq.n	8014cac <mg_dns_parse_name_depth+0x156>
 8014ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ca2:	3b01      	subs	r3, #1
 8014ca4:	683a      	ldr	r2, [r7, #0]
 8014ca6:	4413      	add	r3, r2
 8014ca8:	2200      	movs	r2, #0
 8014caa:	701a      	strb	r2, [r3, #0]
  return i;
 8014cac:	69fb      	ldr	r3, [r7, #28]
}
 8014cae:	4618      	mov	r0, r3
 8014cb0:	3720      	adds	r7, #32
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd80      	pop	{r7, pc}

08014cb6 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8014cb6:	b580      	push	{r7, lr}
 8014cb8:	b088      	sub	sp, #32
 8014cba:	af04      	add	r7, sp, #16
 8014cbc:	60f8      	str	r0, [r7, #12]
 8014cbe:	60b9      	str	r1, [r7, #8]
 8014cc0:	607a      	str	r2, [r7, #4]
 8014cc2:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	9302      	str	r3, [sp, #8]
 8014cc8:	2300      	movs	r3, #0
 8014cca:	9301      	str	r3, [sp, #4]
 8014ccc:	69bb      	ldr	r3, [r7, #24]
 8014cce:	9300      	str	r3, [sp, #0]
 8014cd0:	683b      	ldr	r3, [r7, #0]
 8014cd2:	687a      	ldr	r2, [r7, #4]
 8014cd4:	68b9      	ldr	r1, [r7, #8]
 8014cd6:	68f8      	ldr	r0, [r7, #12]
 8014cd8:	f7ff ff3d 	bl	8014b56 <mg_dns_parse_name_depth>
 8014cdc:	4603      	mov	r3, r0
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3710      	adds	r7, #16
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}

08014ce6 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8014ce6:	b580      	push	{r7, lr}
 8014ce8:	b088      	sub	sp, #32
 8014cea:	af02      	add	r7, sp, #8
 8014cec:	60f8      	str	r0, [r7, #12]
 8014cee:	60b9      	str	r1, [r7, #8]
 8014cf0:	607a      	str	r2, [r7, #4]
 8014cf2:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8014cf4:	68fa      	ldr	r2, [r7, #12]
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	4413      	add	r3, r2
 8014cfa:	617b      	str	r3, [r7, #20]
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	4413      	add	r3, r2
 8014d02:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8014d04:	2208      	movs	r2, #8
 8014d06:	2100      	movs	r1, #0
 8014d08:	6a38      	ldr	r0, [r7, #32]
 8014d0a:	f011 f925 	bl	8025f58 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	2b0b      	cmp	r3, #11
 8014d12:	d801      	bhi.n	8014d18 <mg_dns_parse_rr+0x32>
 8014d14:	2300      	movs	r3, #0
 8014d16:	e074      	b.n	8014e02 <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d1e:	d901      	bls.n	8014d24 <mg_dns_parse_rr+0x3e>
 8014d20:	2300      	movs	r3, #0
 8014d22:	e06e      	b.n	8014e02 <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 8014d24:	697a      	ldr	r2, [r7, #20]
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d301      	bcc.n	8014d30 <mg_dns_parse_rr+0x4a>
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	e068      	b.n	8014e02 <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8014d30:	2300      	movs	r3, #0
 8014d32:	9300      	str	r3, [sp, #0]
 8014d34:	2300      	movs	r3, #0
 8014d36:	687a      	ldr	r2, [r7, #4]
 8014d38:	68b9      	ldr	r1, [r7, #8]
 8014d3a:	68f8      	ldr	r0, [r7, #12]
 8014d3c:	f7ff ffbb 	bl	8014cb6 <mg_dns_parse_name>
 8014d40:	4603      	mov	r3, r0
 8014d42:	b29a      	uxth	r2, r3
 8014d44:	6a3b      	ldr	r3, [r7, #32]
 8014d46:	801a      	strh	r2, [r3, #0]
 8014d48:	6a3b      	ldr	r3, [r7, #32]
 8014d4a:	881b      	ldrh	r3, [r3, #0]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d101      	bne.n	8014d54 <mg_dns_parse_rr+0x6e>
    return 0;
 8014d50:	2300      	movs	r3, #0
 8014d52:	e056      	b.n	8014e02 <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8014d54:	6a3b      	ldr	r3, [r7, #32]
 8014d56:	881b      	ldrh	r3, [r3, #0]
 8014d58:	3304      	adds	r3, #4
 8014d5a:	697a      	ldr	r2, [r7, #20]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8014d60:	697a      	ldr	r2, [r7, #20]
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d901      	bls.n	8014d6c <mg_dns_parse_rr+0x86>
 8014d68:	2300      	movs	r3, #0
 8014d6a:	e04a      	b.n	8014e02 <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8014d6c:	697b      	ldr	r3, [r7, #20]
 8014d6e:	3b04      	subs	r3, #4
 8014d70:	781b      	ldrb	r3, [r3, #0]
 8014d72:	021b      	lsls	r3, r3, #8
 8014d74:	b21a      	sxth	r2, r3
 8014d76:	697b      	ldr	r3, [r7, #20]
 8014d78:	3b03      	subs	r3, #3
 8014d7a:	781b      	ldrb	r3, [r3, #0]
 8014d7c:	b21b      	sxth	r3, r3
 8014d7e:	4313      	orrs	r3, r2
 8014d80:	b21b      	sxth	r3, r3
 8014d82:	b29a      	uxth	r2, r3
 8014d84:	6a3b      	ldr	r3, [r7, #32]
 8014d86:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	3b02      	subs	r3, #2
 8014d8c:	781b      	ldrb	r3, [r3, #0]
 8014d8e:	021b      	lsls	r3, r3, #8
 8014d90:	b21a      	sxth	r2, r3
 8014d92:	697b      	ldr	r3, [r7, #20]
 8014d94:	3b01      	subs	r3, #1
 8014d96:	781b      	ldrb	r3, [r3, #0]
 8014d98:	b21b      	sxth	r3, r3
 8014d9a:	4313      	orrs	r3, r2
 8014d9c:	b21b      	sxth	r3, r3
 8014d9e:	b29a      	uxth	r2, r3
 8014da0:	6a3b      	ldr	r3, [r7, #32]
 8014da2:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8014da4:	78fb      	ldrb	r3, [r7, #3]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d003      	beq.n	8014db2 <mg_dns_parse_rr+0xcc>
 8014daa:	6a3b      	ldr	r3, [r7, #32]
 8014dac:	881b      	ldrh	r3, [r3, #0]
 8014dae:	3304      	adds	r3, #4
 8014db0:	e027      	b.n	8014e02 <mg_dns_parse_rr+0x11c>

  s += 6;
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	3306      	adds	r3, #6
 8014db6:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8014db8:	697a      	ldr	r2, [r7, #20]
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d901      	bls.n	8014dc4 <mg_dns_parse_rr+0xde>
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	e01e      	b.n	8014e02 <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	3b02      	subs	r3, #2
 8014dc8:	781b      	ldrb	r3, [r3, #0]
 8014dca:	021b      	lsls	r3, r3, #8
 8014dcc:	b21a      	sxth	r2, r3
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	781b      	ldrb	r3, [r3, #0]
 8014dd4:	b21b      	sxth	r3, r3
 8014dd6:	4313      	orrs	r3, r2
 8014dd8:	b21b      	sxth	r3, r3
 8014dda:	b29a      	uxth	r2, r3
 8014ddc:	6a3b      	ldr	r3, [r7, #32]
 8014dde:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 8014de0:	6a3b      	ldr	r3, [r7, #32]
 8014de2:	88db      	ldrh	r3, [r3, #6]
 8014de4:	461a      	mov	r2, r3
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	4413      	add	r3, r2
 8014dea:	693a      	ldr	r2, [r7, #16]
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d201      	bcs.n	8014df4 <mg_dns_parse_rr+0x10e>
 8014df0:	2300      	movs	r3, #0
 8014df2:	e006      	b.n	8014e02 <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 8014df4:	6a3b      	ldr	r3, [r7, #32]
 8014df6:	881b      	ldrh	r3, [r3, #0]
 8014df8:	461a      	mov	r2, r3
 8014dfa:	6a3b      	ldr	r3, [r7, #32]
 8014dfc:	88db      	ldrh	r3, [r3, #6]
 8014dfe:	4413      	add	r3, r2
 8014e00:	330a      	adds	r3, #10
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3718      	adds	r7, #24
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}
	...

08014e0c <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b08e      	sub	sp, #56	@ 0x38
 8014e10:	af02      	add	r7, sp, #8
 8014e12:	60f8      	str	r0, [r7, #12]
 8014e14:	60b9      	str	r1, [r7, #8]
 8014e16:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 8014e1c:	230c      	movs	r3, #12
 8014e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 8014e20:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8014e24:	2100      	movs	r1, #0
 8014e26:	6878      	ldr	r0, [r7, #4]
 8014e28:	f011 f896 	bl	8025f58 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8014e2c:	68bb      	ldr	r3, [r7, #8]
 8014e2e:	2b0b      	cmp	r3, #11
 8014e30:	d801      	bhi.n	8014e36 <mg_dns_parse+0x2a>
 8014e32:	2300      	movs	r3, #0
 8014e34:	e0aa      	b.n	8014f8c <mg_dns_parse+0x180>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8014e36:	6a3b      	ldr	r3, [r7, #32]
 8014e38:	889b      	ldrh	r3, [r3, #4]
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f00d fc9d 	bl	802277a <mg_ntohs>
 8014e40:	4603      	mov	r3, r0
 8014e42:	2b01      	cmp	r3, #1
 8014e44:	d901      	bls.n	8014e4a <mg_dns_parse+0x3e>
 8014e46:	2300      	movs	r3, #0
 8014e48:	e0a0      	b.n	8014f8c <mg_dns_parse+0x180>
  num_answers = mg_ntohs(h->num_answers);
 8014e4a:	6a3b      	ldr	r3, [r7, #32]
 8014e4c:	88db      	ldrh	r3, [r3, #6]
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f00d fc93 	bl	802277a <mg_ntohs>
 8014e54:	4603      	mov	r3, r0
 8014e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8014e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e5a:	2b0a      	cmp	r3, #10
 8014e5c:	d910      	bls.n	8014e80 <mg_dns_parse+0x74>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8014e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8014f94 <mg_dns_parse+0x188>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	2b02      	cmp	r3, #2
 8014e64:	dd0a      	ble.n	8014e7c <mg_dns_parse+0x70>
 8014e66:	4b4c      	ldr	r3, [pc, #304]	@ (8014f98 <mg_dns_parse+0x18c>)
 8014e68:	f240 4293 	movw	r2, #1171	@ 0x493
 8014e6c:	494b      	ldr	r1, [pc, #300]	@ (8014f9c <mg_dns_parse+0x190>)
 8014e6e:	2003      	movs	r0, #3
 8014e70:	f005 ffdc 	bl	801ae2c <mg_log_prefix>
 8014e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014e76:	484a      	ldr	r0, [pc, #296]	@ (8014fa0 <mg_dns_parse+0x194>)
 8014e78:	f006 f828 	bl	801aecc <mg_log>
    num_answers = 10;  // Sanity cap
 8014e7c:	230a      	movs	r3, #10
 8014e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8014e80:	6a3b      	ldr	r3, [r7, #32]
 8014e82:	881b      	ldrh	r3, [r3, #0]
 8014e84:	4618      	mov	r0, r3
 8014e86:	f00d fc78 	bl	802277a <mg_ntohs>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	461a      	mov	r2, r3
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8014e92:	2300      	movs	r3, #0
 8014e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014e96:	e015      	b.n	8014ec4 <mg_dns_parse+0xb8>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8014e98:	f107 0314 	add.w	r3, r7, #20
 8014e9c:	9300      	str	r3, [sp, #0]
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ea2:	68b9      	ldr	r1, [r7, #8]
 8014ea4:	68f8      	ldr	r0, [r7, #12]
 8014ea6:	f7ff ff1e 	bl	8014ce6 <mg_dns_parse_rr>
 8014eaa:	61f8      	str	r0, [r7, #28]
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d101      	bne.n	8014eb6 <mg_dns_parse+0xaa>
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	e06a      	b.n	8014f8c <mg_dns_parse+0x180>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8014eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014eb8:	69fb      	ldr	r3, [r7, #28]
 8014eba:	4413      	add	r3, r2
 8014ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8014ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014ec4:	6a3b      	ldr	r3, [r7, #32]
 8014ec6:	889b      	ldrh	r3, [r3, #4]
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f00d fc56 	bl	802277a <mg_ntohs>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ed4:	4293      	cmp	r3, r2
 8014ed6:	d3df      	bcc.n	8014e98 <mg_dns_parse+0x8c>
  }
  for (i = 0; i < num_answers; i++) {
 8014ed8:	2300      	movs	r3, #0
 8014eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014edc:	e051      	b.n	8014f82 <mg_dns_parse+0x176>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8014ede:	f107 0314 	add.w	r3, r7, #20
 8014ee2:	9300      	str	r3, [sp, #0]
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ee8:	68b9      	ldr	r1, [r7, #8]
 8014eea:	68f8      	ldr	r0, [r7, #12]
 8014eec:	f7ff fefb 	bl	8014ce6 <mg_dns_parse_rr>
 8014ef0:	61f8      	str	r0, [r7, #28]
 8014ef2:	69fb      	ldr	r3, [r7, #28]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d101      	bne.n	8014efc <mg_dns_parse+0xf0>
 8014ef8:	2300      	movs	r3, #0
 8014efa:	e047      	b.n	8014f8c <mg_dns_parse+0x180>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	3318      	adds	r3, #24
 8014f00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014f04:	9200      	str	r2, [sp, #0]
 8014f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f08:	68b9      	ldr	r1, [r7, #8]
 8014f0a:	68f8      	ldr	r0, [r7, #12]
 8014f0c:	f7ff fed3 	bl	8014cb6 <mg_dns_parse_name>
    ofs += n;
 8014f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f12:	69fb      	ldr	r3, [r7, #28]
 8014f14:	4413      	add	r3, r2
 8014f16:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8014f18:	8b7b      	ldrh	r3, [r7, #26]
 8014f1a:	2b04      	cmp	r3, #4
 8014f1c:	d114      	bne.n	8014f48 <mg_dns_parse+0x13c>
 8014f1e:	8afb      	ldrh	r3, [r7, #22]
 8014f20:	2b01      	cmp	r3, #1
 8014f22:	d111      	bne.n	8014f48 <mg_dns_parse+0x13c>
 8014f24:	8b3b      	ldrh	r3, [r7, #24]
 8014f26:	2b01      	cmp	r3, #1
 8014f28:	d10e      	bne.n	8014f48 <mg_dns_parse+0x13c>
      dm->addr.is_ip6 = false;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	3304      	adds	r3, #4
 8014f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f36:	3a04      	subs	r2, #4
 8014f38:	68f9      	ldr	r1, [r7, #12]
 8014f3a:	440a      	add	r2, r1
 8014f3c:	6812      	ldr	r2, [r2, #0]
 8014f3e:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2201      	movs	r2, #1
 8014f44:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8014f46:	e020      	b.n	8014f8a <mg_dns_parse+0x17e>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8014f48:	8b7b      	ldrh	r3, [r7, #26]
 8014f4a:	2b10      	cmp	r3, #16
 8014f4c:	d116      	bne.n	8014f7c <mg_dns_parse+0x170>
 8014f4e:	8afb      	ldrh	r3, [r7, #22]
 8014f50:	2b1c      	cmp	r3, #28
 8014f52:	d113      	bne.n	8014f7c <mg_dns_parse+0x170>
 8014f54:	8b3b      	ldrh	r3, [r7, #24]
 8014f56:	2b01      	cmp	r3, #1
 8014f58:	d110      	bne.n	8014f7c <mg_dns_parse+0x170>
      dm->addr.is_ip6 = true;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2201      	movs	r2, #1
 8014f5e:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	1d18      	adds	r0, r3, #4
 8014f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f66:	3b10      	subs	r3, #16
 8014f68:	68fa      	ldr	r2, [r7, #12]
 8014f6a:	4413      	add	r3, r2
 8014f6c:	2210      	movs	r2, #16
 8014f6e:	4619      	mov	r1, r3
 8014f70:	f012 fa4a 	bl	8027408 <memcpy>
      dm->resolved = true;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2201      	movs	r2, #1
 8014f78:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8014f7a:	e006      	b.n	8014f8a <mg_dns_parse+0x17e>
  for (i = 0; i < num_answers; i++) {
 8014f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f7e:	3301      	adds	r3, #1
 8014f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d3a9      	bcc.n	8014ede <mg_dns_parse+0xd2>
    }
  }
  return true;
 8014f8a:	2301      	movs	r3, #1
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	3730      	adds	r7, #48	@ 0x30
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}
 8014f94:	20000298 	.word	0x20000298
 8014f98:	08033dec 	.word	0x08033dec
 8014f9c:	080310b8 	.word	0x080310b8
 8014fa0:	080310e8 	.word	0x080310e8

08014fa4 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8014fa4:	b5b0      	push	{r4, r5, r7, lr}
 8014fa6:	b0d2      	sub	sp, #328	@ 0x148
 8014fa8:	af02      	add	r7, sp, #8
 8014faa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014fae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014fb2:	6018      	str	r0, [r3, #0]
 8014fb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014fb8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014fbc:	6019      	str	r1, [r3, #0]
 8014fbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014fc2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014fc6:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8014fc8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014fcc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	3330      	adds	r3, #48	@ 0x30
 8014fd6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 8014fda:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014fde:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	2b02      	cmp	r3, #2
 8014fe6:	d12d      	bne.n	8015044 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8014fe8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014fec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 8014ffa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015004:	e019      	b.n	801503a <dns_cb+0x96>
      tmp = d->next;
 8015006:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8015010:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015014:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8015018:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 801501c:	4290      	cmp	r0, r2
 801501e:	eb71 0303 	sbcs.w	r3, r1, r3
 8015022:	d206      	bcs.n	8015032 <dns_cb+0x8e>
 8015024:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	4992      	ldr	r1, [pc, #584]	@ (8015274 <dns_cb+0x2d0>)
 801502c:	4618      	mov	r0, r3
 801502e:	f000 fb37 	bl	80156a0 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 8015032:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015036:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801503a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801503e:	2b00      	cmp	r3, #0
 8015040:	d1e1      	bne.n	8015006 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 8015042:	e112      	b.n	801526a <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 8015044:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015048:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	2b07      	cmp	r3, #7
 8015050:	f040 80e4 	bne.w	801521c <dns_cb+0x278>
    int resolved = 0;
 8015054:	2300      	movs	r3, #0
 8015056:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 801505a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801505e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015066:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801506a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015072:	f107 0210 	add.w	r2, r7, #16
 8015076:	4619      	mov	r1, r3
 8015078:	f7ff fec8 	bl	8014e0c <mg_dns_parse>
 801507c:	4603      	mov	r3, r0
 801507e:	f083 0301 	eor.w	r3, r3, #1
 8015082:	b2db      	uxtb	r3, r3
 8015084:	2b00      	cmp	r3, #0
 8015086:	d01e      	beq.n	80150c6 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8015088:	4b7b      	ldr	r3, [pc, #492]	@ (8015278 <dns_cb+0x2d4>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	2b00      	cmp	r3, #0
 801508e:	dd09      	ble.n	80150a4 <dns_cb+0x100>
 8015090:	4b7a      	ldr	r3, [pc, #488]	@ (801527c <dns_cb+0x2d8>)
 8015092:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8015096:	497a      	ldr	r1, [pc, #488]	@ (8015280 <dns_cb+0x2dc>)
 8015098:	2001      	movs	r0, #1
 801509a:	f005 fec7 	bl	801ae2c <mg_log_prefix>
 801509e:	4879      	ldr	r0, [pc, #484]	@ (8015284 <dns_cb+0x2e0>)
 80150a0:	f005 ff14 	bl	801aecc <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 80150a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80150a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80150b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80150b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150bc:	4619      	mov	r1, r3
 80150be:	4610      	mov	r0, r2
 80150c0:	f005 ff3a 	bl	801af38 <mg_hexdump>
 80150c4:	e090      	b.n	80151e8 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 80150c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80150d0:	e085      	b.n	80151de <dns_cb+0x23a>
        tmp = d->next;
 80150d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 80150dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80150e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80150e4:	881a      	ldrh	r2, [r3, #0]
 80150e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80150ea:	8a1b      	ldrh	r3, [r3, #16]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d171      	bne.n	80151d4 <dns_cb+0x230>
        if (d->c->is_resolving) {
 80150f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80150f4:	685b      	ldr	r3, [r3, #4]
 80150f6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80150fa:	f003 0308 	and.w	r3, r3, #8
 80150fe:	b2db      	uxtb	r3, r3
 8015100:	2b00      	cmp	r3, #0
 8015102:	d04a      	beq.n	801519a <dns_cb+0x1f6>
          if (dm.resolved) {
 8015104:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015108:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801510c:	789b      	ldrb	r3, [r3, #2]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d038      	beq.n	8015184 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 8015112:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801511a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801511e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015122:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8015124:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015128:	685a      	ldr	r2, [r3, #4]
 801512a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801512e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015132:	f102 041c 	add.w	r4, r2, #28
 8015136:	1d1d      	adds	r5, r3, #4
 8015138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801513a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801513c:	682b      	ldr	r3, [r5, #0]
 801513e:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 8015140:	4b4d      	ldr	r3, [pc, #308]	@ (8015278 <dns_cb+0x2d4>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	2b02      	cmp	r3, #2
 8015146:	dd16      	ble.n	8015176 <dns_cb+0x1d2>
 8015148:	4b4c      	ldr	r3, [pc, #304]	@ (801527c <dns_cb+0x2d8>)
 801514a:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 801514e:	494c      	ldr	r1, [pc, #304]	@ (8015280 <dns_cb+0x2dc>)
 8015150:	2003      	movs	r0, #3
 8015152:	f005 fe6b 	bl	801ae2c <mg_log_prefix>
 8015156:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801515e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015162:	685b      	ldr	r3, [r3, #4]
 8015164:	331c      	adds	r3, #28
 8015166:	f107 0210 	add.w	r2, r7, #16
 801516a:	3218      	adds	r2, #24
 801516c:	9300      	str	r3, [sp, #0]
 801516e:	4b46      	ldr	r3, [pc, #280]	@ (8015288 <dns_cb+0x2e4>)
 8015170:	4846      	ldr	r0, [pc, #280]	@ (801528c <dns_cb+0x2e8>)
 8015172:	f005 feab 	bl	801aecc <mg_log>
            mg_connect_resolved(d->c);
 8015176:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801517a:	685b      	ldr	r3, [r3, #4]
 801517c:	4618      	mov	r0, r3
 801517e:	f00b faad 	bl	80206dc <mg_connect_resolved>
 8015182:	e01d      	b.n	80151c0 <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8015184:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015188:	6858      	ldr	r0, [r3, #4]
 801518a:	f107 0310 	add.w	r3, r7, #16
 801518e:	3318      	adds	r3, #24
 8015190:	461a      	mov	r2, r3
 8015192:	493f      	ldr	r1, [pc, #252]	@ (8015290 <dns_cb+0x2ec>)
 8015194:	f000 fa84 	bl	80156a0 <mg_error>
 8015198:	e012      	b.n	80151c0 <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 801519a:	4b37      	ldr	r3, [pc, #220]	@ (8015278 <dns_cb+0x2d4>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	dd0e      	ble.n	80151c0 <dns_cb+0x21c>
 80151a2:	4b36      	ldr	r3, [pc, #216]	@ (801527c <dns_cb+0x2d8>)
 80151a4:	f240 42da 	movw	r2, #1242	@ 0x4da
 80151a8:	4935      	ldr	r1, [pc, #212]	@ (8015280 <dns_cb+0x2dc>)
 80151aa:	2001      	movs	r0, #1
 80151ac:	f005 fe3e 	bl	801ae2c <mg_log_prefix>
 80151b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80151b4:	685b      	ldr	r3, [r3, #4]
 80151b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80151b8:	4619      	mov	r1, r3
 80151ba:	4836      	ldr	r0, [pc, #216]	@ (8015294 <dns_cb+0x2f0>)
 80151bc:	f005 fe86 	bl	801aecc <mg_log>
        mg_dns_free(head, d);
 80151c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80151c4:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80151c8:	f7ff fc88 	bl	8014adc <mg_dns_free>
        resolved = 1;
 80151cc:	2301      	movs	r3, #1
 80151ce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80151d2:	e000      	b.n	80151d6 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 80151d4:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 80151d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80151da:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80151de:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	f47f af75 	bne.w	80150d2 <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80151e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d10d      	bne.n	801520c <dns_cb+0x268>
 80151f0:	4b21      	ldr	r3, [pc, #132]	@ (8015278 <dns_cb+0x2d4>)
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	dd09      	ble.n	801520c <dns_cb+0x268>
 80151f8:	4b20      	ldr	r3, [pc, #128]	@ (801527c <dns_cb+0x2d8>)
 80151fa:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 80151fe:	4920      	ldr	r1, [pc, #128]	@ (8015280 <dns_cb+0x2dc>)
 8015200:	2001      	movs	r0, #1
 8015202:	f005 fe13 	bl	801ae2c <mg_log_prefix>
 8015206:	4824      	ldr	r0, [pc, #144]	@ (8015298 <dns_cb+0x2f4>)
 8015208:	f005 fe60 	bl	801aecc <mg_log>
    c->recv.len = 0;
 801520c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015210:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	2200      	movs	r2, #0
 8015218:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801521a:	e026      	b.n	801526a <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 801521c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015220:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	2b09      	cmp	r3, #9
 8015228:	d11f      	bne.n	801526a <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 801522a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015234:	e015      	b.n	8015262 <dns_cb+0x2be>
      tmp = d->next;
 8015236:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 8015240:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015244:	685b      	ldr	r3, [r3, #4]
 8015246:	4915      	ldr	r1, [pc, #84]	@ (801529c <dns_cb+0x2f8>)
 8015248:	4618      	mov	r0, r3
 801524a:	f000 fa29 	bl	80156a0 <mg_error>
      mg_dns_free(head, d);
 801524e:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8015252:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8015256:	f7ff fc41 	bl	8014adc <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 801525a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801525e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015262:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015266:	2b00      	cmp	r3, #0
 8015268:	d1e5      	bne.n	8015236 <dns_cb+0x292>
}
 801526a:	bf00      	nop
 801526c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8015270:	46bd      	mov	sp, r7
 8015272:	bdb0      	pop	{r4, r5, r7, pc}
 8015274:	08031114 	.word	0x08031114
 8015278:	20000298 	.word	0x20000298
 801527c:	08033dfc 	.word	0x08033dfc
 8015280:	080310b8 	.word	0x080310b8
 8015284:	08031120 	.word	0x08031120
 8015288:	0802104b 	.word	0x0802104b
 801528c:	0803113c 	.word	0x0803113c
 8015290:	0803114c 	.word	0x0803114c
 8015294:	08031164 	.word	0x08031164
 8015298:	0803117c 	.word	0x0803117c
 801529c:	0803118c 	.word	0x0803118c

080152a0 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 80152a0:	b590      	push	{r4, r7, lr}
 80152a2:	b0cb      	sub	sp, #300	@ 0x12c
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80152aa:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80152ae:	6020      	str	r0, [r4, #0]
 80152b0:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80152b4:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 80152b8:	6001      	str	r1, [r0, #0]
 80152ba:	4619      	mov	r1, r3
 80152bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80152c0:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80152c4:	801a      	strh	r2, [r3, #0]
 80152c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80152ca:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80152ce:	460a      	mov	r2, r1
 80152d0:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 80152d2:	f107 0314 	add.w	r3, r7, #20
 80152d6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80152da:	2100      	movs	r1, #0
 80152dc:	4618      	mov	r0, r3
 80152de:	f010 fe3b 	bl	8025f58 <memset>
  pkt.header.txnid = mg_htons(txnid);
 80152e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80152e6:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80152ea:	881b      	ldrh	r3, [r3, #0]
 80152ec:	4618      	mov	r0, r3
 80152ee:	f00d fa44 	bl	802277a <mg_ntohs>
 80152f2:	4603      	mov	r3, r0
 80152f4:	461a      	mov	r2, r3
 80152f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80152fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80152fe:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8015300:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8015304:	f00d fa39 	bl	802277a <mg_ntohs>
 8015308:	4603      	mov	r3, r0
 801530a:	461a      	mov	r2, r3
 801530c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015310:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8015314:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8015316:	2001      	movs	r0, #1
 8015318:	f00d fa2f 	bl	802277a <mg_ntohs>
 801531c:	4603      	mov	r3, r0
 801531e:	461a      	mov	r2, r3
 8015320:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015324:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8015328:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 801532a:	2300      	movs	r3, #0
 801532c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8015330:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015334:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8015338:	e054      	b.n	80153e4 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 801533a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801533e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	681a      	ldr	r2, [r3, #0]
 8015346:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801534a:	4413      	add	r3, r2
 801534c:	781b      	ldrb	r3, [r3, #0]
 801534e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015350:	d009      	beq.n	8015366 <mg_dns_send+0xc6>
 8015352:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015356:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8015362:	429a      	cmp	r2, r3
 8015364:	d32f      	bcc.n	80153c6 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8015366:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801536a:	b2da      	uxtb	r2, r3
 801536c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015370:	b2db      	uxtb	r3, r3
 8015372:	1ad3      	subs	r3, r2, r3
 8015374:	b2d9      	uxtb	r1, r3
 8015376:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801537a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 801537e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015382:	4413      	add	r3, r2
 8015384:	330c      	adds	r3, #12
 8015386:	460a      	mov	r2, r1
 8015388:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 801538a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801538e:	3301      	adds	r3, #1
 8015390:	f107 0214 	add.w	r2, r7, #20
 8015394:	3308      	adds	r3, #8
 8015396:	4413      	add	r3, r2
 8015398:	1d18      	adds	r0, r3, #4
 801539a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801539e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	681a      	ldr	r2, [r3, #0]
 80153a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80153aa:	18d1      	adds	r1, r2, r3
 80153ac:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80153b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80153b4:	1ad3      	subs	r3, r2, r3
 80153b6:	461a      	mov	r2, r3
 80153b8:	f012 f826 	bl	8027408 <memcpy>
      n = i + 1;
 80153bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80153c0:	3301      	adds	r3, #1
 80153c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 80153c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80153ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80153d6:	429a      	cmp	r2, r3
 80153d8:	d209      	bcs.n	80153ee <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80153da:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80153de:	3301      	adds	r3, #1
 80153e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80153e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80153e8:	2bfa      	cmp	r3, #250	@ 0xfa
 80153ea:	d9a6      	bls.n	801533a <mg_dns_send+0x9a>
 80153ec:	e000      	b.n	80153f0 <mg_dns_send+0x150>
    if (i >= name->len) break;
 80153ee:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 80153f0:	f107 0214 	add.w	r2, r7, #20
 80153f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80153f8:	3308      	adds	r3, #8
 80153fa:	4413      	add	r3, r2
 80153fc:	3304      	adds	r3, #4
 80153fe:	2205      	movs	r2, #5
 8015400:	4916      	ldr	r1, [pc, #88]	@ (801545c <mg_dns_send+0x1bc>)
 8015402:	4618      	mov	r0, r3
 8015404:	f012 f800 	bl	8027408 <memcpy>
  n += 5;
 8015408:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801540c:	3305      	adds	r3, #5
 801540e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8015412:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015416:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 801541a:	781b      	ldrb	r3, [r3, #0]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d009      	beq.n	8015434 <mg_dns_send+0x194>
 8015420:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015424:	3b03      	subs	r3, #3
 8015426:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801542a:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801542e:	4413      	add	r3, r2
 8015430:	221c      	movs	r2, #28
 8015432:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8015434:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015438:	f103 020c 	add.w	r2, r3, #12
 801543c:	f107 0114 	add.w	r1, r7, #20
 8015440:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015444:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015448:	6818      	ldr	r0, [r3, #0]
 801544a:	f00b fc1d 	bl	8020c88 <mg_send>
 801544e:	4603      	mov	r3, r0
}
 8015450:	4618      	mov	r0, r3
 8015452:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8015456:	46bd      	mov	sp, r7
 8015458:	bd90      	pop	{r4, r7, pc}
 801545a:	bf00      	nop
 801545c:	08031198 	.word	0x08031198

08015460 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8015460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015464:	b088      	sub	sp, #32
 8015466:	af02      	add	r7, sp, #8
 8015468:	60f8      	str	r0, [r7, #12]
 801546a:	60b9      	str	r1, [r7, #8]
 801546c:	607a      	str	r2, [r7, #4]
 801546e:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8015470:	2300      	movs	r3, #0
 8015472:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d104      	bne.n	8015486 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 801547c:	494d      	ldr	r1, [pc, #308]	@ (80155b4 <mg_sendnsreq+0x154>)
 801547e:	68f8      	ldr	r0, [r7, #12]
 8015480:	f000 f90e 	bl	80156a0 <mg_error>
 8015484:	e017      	b.n	80154b6 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	685b      	ldr	r3, [r3, #4]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d113      	bne.n	80154b6 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	6858      	ldr	r0, [r3, #4]
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	6819      	ldr	r1, [r3, #0]
 8015496:	2300      	movs	r3, #0
 8015498:	2200      	movs	r2, #0
 801549a:	f008 f931 	bl	801d700 <mg_connect>
 801549e:	4602      	mov	r2, r0
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	685b      	ldr	r3, [r3, #4]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d004      	beq.n	80154b6 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	685b      	ldr	r3, [r3, #4]
 80154b0:	4a41      	ldr	r2, [pc, #260]	@ (80155b8 <mg_sendnsreq+0x158>)
 80154b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 80154b6:	683b      	ldr	r3, [r7, #0]
 80154b8:	685b      	ldr	r3, [r3, #4]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d104      	bne.n	80154c8 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 80154be:	493f      	ldr	r1, [pc, #252]	@ (80155bc <mg_sendnsreq+0x15c>)
 80154c0:	68f8      	ldr	r0, [r7, #12]
 80154c2:	f000 f8ed 	bl	80156a0 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 80154c6:	e06f      	b.n	80155a8 <mg_sendnsreq+0x148>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 80154c8:	2118      	movs	r1, #24
 80154ca:	2001      	movs	r0, #1
 80154cc:	f7ff fae8 	bl	8014aa0 <mg_calloc>
 80154d0:	6178      	str	r0, [r7, #20]
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d104      	bne.n	80154e2 <mg_sendnsreq+0x82>
    mg_error(c, "resolve OOM");
 80154d8:	4939      	ldr	r1, [pc, #228]	@ (80155c0 <mg_sendnsreq+0x160>)
 80154da:	68f8      	ldr	r0, [r7, #12]
 80154dc:	f000 f8e0 	bl	80156a0 <mg_error>
}
 80154e0:	e062      	b.n	80155a8 <mg_sendnsreq+0x148>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	685b      	ldr	r3, [r3, #4]
 80154e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80154e8:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80154ea:	693b      	ldr	r3, [r7, #16]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d004      	beq.n	80154fa <mg_sendnsreq+0x9a>
 80154f0:	693b      	ldr	r3, [r7, #16]
 80154f2:	8a1b      	ldrh	r3, [r3, #16]
 80154f4:	3301      	adds	r3, #1
 80154f6:	b29a      	uxth	r2, r3
 80154f8:	e000      	b.n	80154fc <mg_sendnsreq+0x9c>
 80154fa:	2201      	movs	r2, #1
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	685b      	ldr	r3, [r3, #4]
 8015504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015506:	697b      	ldr	r3, [r7, #20]
 8015508:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	685b      	ldr	r3, [r3, #4]
 801550e:	697a      	ldr	r2, [r7, #20]
 8015510:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8015512:	f00d f9c3 	bl	802289c <mg_millis>
 8015516:	4602      	mov	r2, r0
 8015518:	460b      	mov	r3, r1
 801551a:	6879      	ldr	r1, [r7, #4]
 801551c:	17c8      	asrs	r0, r1, #31
 801551e:	460c      	mov	r4, r1
 8015520:	4605      	mov	r5, r0
 8015522:	eb12 0804 	adds.w	r8, r2, r4
 8015526:	eb43 0905 	adc.w	r9, r3, r5
 801552a:	697b      	ldr	r3, [r7, #20]
 801552c:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	68fa      	ldr	r2, [r7, #12]
 8015534:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8015536:	68fa      	ldr	r2, [r7, #12]
 8015538:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801553c:	f043 0308 	orr.w	r3, r3, #8
 8015540:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8015544:	4b1f      	ldr	r3, [pc, #124]	@ (80155c4 <mg_sendnsreq+0x164>)
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	2b03      	cmp	r3, #3
 801554a:	dd18      	ble.n	801557e <mg_sendnsreq+0x11e>
 801554c:	4b1e      	ldr	r3, [pc, #120]	@ (80155c8 <mg_sendnsreq+0x168>)
 801554e:	f240 521e 	movw	r2, #1310	@ 0x51e
 8015552:	491e      	ldr	r1, [pc, #120]	@ (80155cc <mg_sendnsreq+0x16c>)
 8015554:	2004      	movs	r0, #4
 8015556:	f005 fc69 	bl	801ae2c <mg_log_prefix>
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	461c      	mov	r4, r3
 8015564:	68bb      	ldr	r3, [r7, #8]
 8015566:	6818      	ldr	r0, [r3, #0]
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	697a      	ldr	r2, [r7, #20]
 801556e:	8a12      	ldrh	r2, [r2, #16]
 8015570:	9201      	str	r2, [sp, #4]
 8015572:	9300      	str	r3, [sp, #0]
 8015574:	4603      	mov	r3, r0
 8015576:	4622      	mov	r2, r4
 8015578:	4815      	ldr	r0, [pc, #84]	@ (80155d0 <mg_sendnsreq+0x170>)
 801557a:	f005 fca7 	bl	801aecc <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 801557e:	683b      	ldr	r3, [r7, #0]
 8015580:	6858      	ldr	r0, [r3, #4]
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	8a1a      	ldrh	r2, [r3, #16]
 8015586:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801558a:	68b9      	ldr	r1, [r7, #8]
 801558c:	f7ff fe88 	bl	80152a0 <mg_dns_send>
 8015590:	4603      	mov	r3, r0
 8015592:	f083 0301 	eor.w	r3, r3, #1
 8015596:	b2db      	uxtb	r3, r3
 8015598:	2b00      	cmp	r3, #0
 801559a:	d005      	beq.n	80155a8 <mg_sendnsreq+0x148>
      mg_error(dnsc->c, "DNS send");
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	685b      	ldr	r3, [r3, #4]
 80155a0:	490c      	ldr	r1, [pc, #48]	@ (80155d4 <mg_sendnsreq+0x174>)
 80155a2:	4618      	mov	r0, r3
 80155a4:	f000 f87c 	bl	80156a0 <mg_error>
}
 80155a8:	bf00      	nop
 80155aa:	3718      	adds	r7, #24
 80155ac:	46bd      	mov	sp, r7
 80155ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80155b2:	bf00      	nop
 80155b4:	080311a0 	.word	0x080311a0
 80155b8:	08014fa5 	.word	0x08014fa5
 80155bc:	080311cc 	.word	0x080311cc
 80155c0:	080311d8 	.word	0x080311d8
 80155c4:	20000298 	.word	0x20000298
 80155c8:	08033e04 	.word	0x08033e04
 80155cc:	080310b8 	.word	0x080310b8
 80155d0:	080311e4 	.word	0x080311e4
 80155d4:	08031208 	.word	0x08031208

080155d8 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 80155d8:	b580      	push	{r7, lr}
 80155da:	b088      	sub	sp, #32
 80155dc:	af02      	add	r7, sp, #8
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 80155e2:	f107 030c 	add.w	r3, r7, #12
 80155e6:	6839      	ldr	r1, [r7, #0]
 80155e8:	4618      	mov	r0, r3
 80155ea:	f00c ff96 	bl	802251a <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 80155ee:	6838      	ldr	r0, [r7, #0]
 80155f0:	f00c ffc6 	bl	8022580 <mg_url_port>
 80155f4:	4603      	mov	r3, r0
 80155f6:	4618      	mov	r0, r3
 80155f8:	f00d f8bf 	bl	802277a <mg_ntohs>
 80155fc:	4603      	mov	r3, r0
 80155fe:	461a      	mov	r2, r3
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	331c      	adds	r3, #28
 8015608:	461a      	mov	r2, r3
 801560a:	f107 030c 	add.w	r3, r7, #12
 801560e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015612:	f007 ffa6 	bl	801d562 <mg_aton>
 8015616:	4603      	mov	r3, r0
 8015618:	2b00      	cmp	r3, #0
 801561a:	d003      	beq.n	8015624 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	f00b f85d 	bl	80206dc <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8015622:	e019      	b.n	8015658 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	685b      	ldr	r3, [r3, #4]
 8015628:	7e1b      	ldrb	r3, [r3, #24]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d003      	beq.n	8015636 <mg_resolve+0x5e>
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	685b      	ldr	r3, [r3, #4]
 8015632:	330c      	adds	r3, #12
 8015634:	e002      	b.n	801563c <mg_resolve+0x64>
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	3304      	adds	r3, #4
 801563c:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	695a      	ldr	r2, [r3, #20]
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	685b      	ldr	r3, [r3, #4]
 8015648:	7e1b      	ldrb	r3, [r3, #24]
 801564a:	f107 010c 	add.w	r1, r7, #12
 801564e:	9300      	str	r3, [sp, #0]
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	6878      	ldr	r0, [r7, #4]
 8015654:	f7ff ff04 	bl	8015460 <mg_sendnsreq>
}
 8015658:	bf00      	nop
 801565a:	3718      	adds	r7, #24
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8015660:	b580      	push	{r7, lr}
 8015662:	b084      	sub	sp, #16
 8015664:	af00      	add	r7, sp, #0
 8015666:	60f8      	str	r0, [r7, #12]
 8015668:	60b9      	str	r1, [r7, #8]
 801566a:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015672:	2b00      	cmp	r3, #0
 8015674:	d006      	beq.n	8015684 <mg_call+0x24>
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801567c:	687a      	ldr	r2, [r7, #4]
 801567e:	68b9      	ldr	r1, [r7, #8]
 8015680:	68f8      	ldr	r0, [r7, #12]
 8015682:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015688:	2b00      	cmp	r3, #0
 801568a:	d005      	beq.n	8015698 <mg_call+0x38>
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015690:	687a      	ldr	r2, [r7, #4]
 8015692:	68b9      	ldr	r1, [r7, #8]
 8015694:	68f8      	ldr	r0, [r7, #12]
 8015696:	4798      	blx	r3
}
 8015698:	bf00      	nop
 801569a:	3710      	adds	r7, #16
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}

080156a0 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80156a0:	b40e      	push	{r1, r2, r3}
 80156a2:	b580      	push	{r7, lr}
 80156a4:	b095      	sub	sp, #84	@ 0x54
 80156a6:	af00      	add	r7, sp, #0
 80156a8:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 80156aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80156ae:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80156b0:	f107 030c 	add.w	r3, r7, #12
 80156b4:	f107 0010 	add.w	r0, r7, #16
 80156b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80156ba:	2140      	movs	r1, #64	@ 0x40
 80156bc:	f00b fbaa 	bl	8020e14 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80156c0:	4b14      	ldr	r3, [pc, #80]	@ (8015714 <mg_error+0x74>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	dd0f      	ble.n	80156e8 <mg_error+0x48>
 80156c8:	4b13      	ldr	r3, [pc, #76]	@ (8015718 <mg_error+0x78>)
 80156ca:	f240 5253 	movw	r2, #1363	@ 0x553
 80156ce:	4913      	ldr	r1, [pc, #76]	@ (801571c <mg_error+0x7c>)
 80156d0:	2001      	movs	r0, #1
 80156d2:	f005 fbab 	bl	801ae2c <mg_log_prefix>
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80156de:	f107 0310 	add.w	r3, r7, #16
 80156e2:	480f      	ldr	r0, [pc, #60]	@ (8015720 <mg_error+0x80>)
 80156e4:	f005 fbf2 	bl	801aecc <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80156e8:	687a      	ldr	r2, [r7, #4]
 80156ea:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80156ee:	f043 0320 	orr.w	r3, r3, #32
 80156f2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 80156f6:	f107 0310 	add.w	r3, r7, #16
 80156fa:	461a      	mov	r2, r3
 80156fc:	2100      	movs	r1, #0
 80156fe:	6878      	ldr	r0, [r7, #4]
 8015700:	f7ff ffae 	bl	8015660 <mg_call>
}
 8015704:	bf00      	nop
 8015706:	3754      	adds	r7, #84	@ 0x54
 8015708:	46bd      	mov	sp, r7
 801570a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801570e:	b003      	add	sp, #12
 8015710:	4770      	bx	lr
 8015712:	bf00      	nop
 8015714:	20000298 	.word	0x20000298
 8015718:	08033e14 	.word	0x08033e14
 801571c:	080310b8 	.word	0x080310b8
 8015720:	08031214 	.word	0x08031214

08015724 <is_digit>:
#endif




static bool is_digit(int c) {
 8015724:	b480      	push	{r7}
 8015726:	b083      	sub	sp, #12
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	2b2f      	cmp	r3, #47	@ 0x2f
 8015730:	dd04      	ble.n	801573c <is_digit+0x18>
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2b39      	cmp	r3, #57	@ 0x39
 8015736:	dc01      	bgt.n	801573c <is_digit+0x18>
 8015738:	2301      	movs	r3, #1
 801573a:	e000      	b.n	801573e <is_digit+0x1a>
 801573c:	2300      	movs	r3, #0
 801573e:	f003 0301 	and.w	r3, r3, #1
 8015742:	b2db      	uxtb	r3, r3
}
 8015744:	4618      	mov	r0, r3
 8015746:	370c      	adds	r7, #12
 8015748:	46bd      	mov	sp, r7
 801574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574e:	4770      	bx	lr

08015750 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8015750:	b480      	push	{r7}
 8015752:	b087      	sub	sp, #28
 8015754:	af00      	add	r7, sp, #0
 8015756:	60f8      	str	r0, [r7, #12]
 8015758:	60b9      	str	r1, [r7, #8]
 801575a:	607a      	str	r2, [r7, #4]
  int n = 0;
 801575c:	2300      	movs	r3, #0
 801575e:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	1c5a      	adds	r2, r3, #1
 8015764:	617a      	str	r2, [r7, #20]
 8015766:	461a      	mov	r2, r3
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	4413      	add	r3, r2
 801576c:	2265      	movs	r2, #101	@ 0x65
 801576e:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8015770:	697b      	ldr	r3, [r7, #20]
 8015772:	1c5a      	adds	r2, r3, #1
 8015774:	617a      	str	r2, [r7, #20]
 8015776:	461a      	mov	r2, r3
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	4413      	add	r3, r2
 801577c:	687a      	ldr	r2, [r7, #4]
 801577e:	b2d2      	uxtb	r2, r2
 8015780:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8015788:	dd01      	ble.n	801578e <addexp+0x3e>
 801578a:	2300      	movs	r3, #0
 801578c:	e057      	b.n	801583e <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	2b09      	cmp	r3, #9
 8015792:	dc07      	bgt.n	80157a4 <addexp+0x54>
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	1c5a      	adds	r2, r3, #1
 8015798:	617a      	str	r2, [r7, #20]
 801579a:	461a      	mov	r2, r3
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	4413      	add	r3, r2
 80157a0:	2230      	movs	r2, #48	@ 0x30
 80157a2:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	2b63      	cmp	r3, #99	@ 0x63
 80157a8:	dd1c      	ble.n	80157e4 <addexp+0x94>
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	4a27      	ldr	r2, [pc, #156]	@ (801584c <addexp+0xfc>)
 80157ae:	fb82 1203 	smull	r1, r2, r2, r3
 80157b2:	1152      	asrs	r2, r2, #5
 80157b4:	17db      	asrs	r3, r3, #31
 80157b6:	1ad3      	subs	r3, r2, r3
 80157b8:	b2da      	uxtb	r2, r3
 80157ba:	697b      	ldr	r3, [r7, #20]
 80157bc:	1c59      	adds	r1, r3, #1
 80157be:	6179      	str	r1, [r7, #20]
 80157c0:	4619      	mov	r1, r3
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	440b      	add	r3, r1
 80157c6:	3230      	adds	r2, #48	@ 0x30
 80157c8:	b2d2      	uxtb	r2, r2
 80157ca:	701a      	strb	r2, [r3, #0]
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	4a1f      	ldr	r2, [pc, #124]	@ (801584c <addexp+0xfc>)
 80157d0:	fb82 1203 	smull	r1, r2, r2, r3
 80157d4:	1151      	asrs	r1, r2, #5
 80157d6:	17da      	asrs	r2, r3, #31
 80157d8:	1a8a      	subs	r2, r1, r2
 80157da:	2164      	movs	r1, #100	@ 0x64
 80157dc:	fb01 f202 	mul.w	r2, r1, r2
 80157e0:	1a9b      	subs	r3, r3, r2
 80157e2:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	2b09      	cmp	r3, #9
 80157e8:	dd1d      	ble.n	8015826 <addexp+0xd6>
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	4a18      	ldr	r2, [pc, #96]	@ (8015850 <addexp+0x100>)
 80157ee:	fb82 1203 	smull	r1, r2, r2, r3
 80157f2:	1092      	asrs	r2, r2, #2
 80157f4:	17db      	asrs	r3, r3, #31
 80157f6:	1ad3      	subs	r3, r2, r3
 80157f8:	b2da      	uxtb	r2, r3
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	1c59      	adds	r1, r3, #1
 80157fe:	6179      	str	r1, [r7, #20]
 8015800:	4619      	mov	r1, r3
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	440b      	add	r3, r1
 8015806:	3230      	adds	r2, #48	@ 0x30
 8015808:	b2d2      	uxtb	r2, r2
 801580a:	701a      	strb	r2, [r3, #0]
 801580c:	68ba      	ldr	r2, [r7, #8]
 801580e:	4b10      	ldr	r3, [pc, #64]	@ (8015850 <addexp+0x100>)
 8015810:	fb83 1302 	smull	r1, r3, r3, r2
 8015814:	1099      	asrs	r1, r3, #2
 8015816:	17d3      	asrs	r3, r2, #31
 8015818:	1ac9      	subs	r1, r1, r3
 801581a:	460b      	mov	r3, r1
 801581c:	009b      	lsls	r3, r3, #2
 801581e:	440b      	add	r3, r1
 8015820:	005b      	lsls	r3, r3, #1
 8015822:	1ad3      	subs	r3, r2, r3
 8015824:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	b2da      	uxtb	r2, r3
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	1c59      	adds	r1, r3, #1
 801582e:	6179      	str	r1, [r7, #20]
 8015830:	4619      	mov	r1, r3
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	440b      	add	r3, r1
 8015836:	3230      	adds	r2, #48	@ 0x30
 8015838:	b2d2      	uxtb	r2, r2
 801583a:	701a      	strb	r2, [r3, #0]
  return n;
 801583c:	697b      	ldr	r3, [r7, #20]
}
 801583e:	4618      	mov	r0, r3
 8015840:	371c      	adds	r7, #28
 8015842:	46bd      	mov	sp, r7
 8015844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015848:	4770      	bx	lr
 801584a:	bf00      	nop
 801584c:	51eb851f 	.word	0x51eb851f
 8015850:	66666667 	.word	0x66666667

08015854 <xisinf>:

static int xisinf(double x) {
 8015854:	b480      	push	{r7}
 8015856:	b085      	sub	sp, #20
 8015858:	af00      	add	r7, sp, #0
 801585a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 801585e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015862:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8015866:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801586a:	f04f 0200 	mov.w	r2, #0
 801586e:	f04f 0300 	mov.w	r3, #0
 8015872:	000a      	movs	r2, r1
 8015874:	2300      	movs	r3, #0
 8015876:	4613      	mov	r3, r2
 8015878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801587c:	4a08      	ldr	r2, [pc, #32]	@ (80158a0 <xisinf+0x4c>)
 801587e:	4293      	cmp	r3, r2
 8015880:	d106      	bne.n	8015890 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8015882:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015886:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8015888:	2b00      	cmp	r3, #0
 801588a:	d101      	bne.n	8015890 <xisinf+0x3c>
 801588c:	2301      	movs	r3, #1
 801588e:	e000      	b.n	8015892 <xisinf+0x3e>
 8015890:	2300      	movs	r3, #0
}
 8015892:	4618      	mov	r0, r3
 8015894:	3714      	adds	r7, #20
 8015896:	46bd      	mov	sp, r7
 8015898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801589c:	4770      	bx	lr
 801589e:	bf00      	nop
 80158a0:	7ff00000 	.word	0x7ff00000

080158a4 <xisnan>:

static int xisnan(double x) {
 80158a4:	b480      	push	{r7}
 80158a6:	b085      	sub	sp, #20
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80158ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80158b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80158b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80158ba:	f04f 0200 	mov.w	r2, #0
 80158be:	f04f 0300 	mov.w	r3, #0
 80158c2:	000a      	movs	r2, r1
 80158c4:	2300      	movs	r3, #0
 80158c6:	4613      	mov	r3, r2
 80158c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 80158cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80158d0:	4613      	mov	r3, r2
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	bf14      	ite	ne
 80158d6:	2301      	movne	r3, #1
 80158d8:	2300      	moveq	r3, #0
 80158da:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80158dc:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 80158de:	4a06      	ldr	r2, [pc, #24]	@ (80158f8 <xisnan+0x54>)
 80158e0:	4293      	cmp	r3, r2
 80158e2:	bf8c      	ite	hi
 80158e4:	2301      	movhi	r3, #1
 80158e6:	2300      	movls	r3, #0
 80158e8:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3714      	adds	r7, #20
 80158ee:	46bd      	mov	sp, r7
 80158f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f4:	4770      	bx	lr
 80158f6:	bf00      	nop
 80158f8:	7ff00000 	.word	0x7ff00000
 80158fc:	00000000 	.word	0x00000000

08015900 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8015900:	b5b0      	push	{r4, r5, r7, lr}
 8015902:	b09e      	sub	sp, #120	@ 0x78
 8015904:	af02      	add	r7, sp, #8
 8015906:	6178      	str	r0, [r7, #20]
 8015908:	6139      	str	r1, [r7, #16]
 801590a:	ed87 0b02 	vstr	d0, [r7, #8]
 801590e:	607a      	str	r2, [r7, #4]
 8015910:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8015912:	2300      	movs	r3, #0
 8015914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015916:	2300      	movs	r3, #0
 8015918:	667b      	str	r3, [r7, #100]	@ 0x64
 801591a:	2300      	movs	r3, #0
 801591c:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 801591e:	f04f 0200 	mov.w	r2, #0
 8015922:	f04f 0300 	mov.w	r3, #0
 8015926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801592a:	f7eb f8e5 	bl	8000af8 <__aeabi_dcmpeq>
 801592e:	4603      	mov	r3, r0
 8015930:	2b00      	cmp	r3, #0
 8015932:	d007      	beq.n	8015944 <mg_dtoa+0x44>
 8015934:	4b7f      	ldr	r3, [pc, #508]	@ (8015b34 <mg_dtoa+0x234>)
 8015936:	4a80      	ldr	r2, [pc, #512]	@ (8015b38 <mg_dtoa+0x238>)
 8015938:	6939      	ldr	r1, [r7, #16]
 801593a:	6978      	ldr	r0, [r7, #20]
 801593c:	f00b fa92 	bl	8020e64 <mg_snprintf>
 8015940:	4603      	mov	r3, r0
 8015942:	e2c9      	b.n	8015ed8 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8015944:	ed97 0b02 	vldr	d0, [r7, #8]
 8015948:	f7ff ff84 	bl	8015854 <xisinf>
 801594c:	4603      	mov	r3, r0
 801594e:	2b00      	cmp	r3, #0
 8015950:	d014      	beq.n	801597c <mg_dtoa+0x7c>
 8015952:	f04f 0200 	mov.w	r2, #0
 8015956:	f04f 0300 	mov.w	r3, #0
 801595a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801595e:	f7eb f8f3 	bl	8000b48 <__aeabi_dcmpgt>
 8015962:	4603      	mov	r3, r0
 8015964:	2b00      	cmp	r3, #0
 8015966:	d001      	beq.n	801596c <mg_dtoa+0x6c>
 8015968:	4b74      	ldr	r3, [pc, #464]	@ (8015b3c <mg_dtoa+0x23c>)
 801596a:	e000      	b.n	801596e <mg_dtoa+0x6e>
 801596c:	4b74      	ldr	r3, [pc, #464]	@ (8015b40 <mg_dtoa+0x240>)
 801596e:	4a72      	ldr	r2, [pc, #456]	@ (8015b38 <mg_dtoa+0x238>)
 8015970:	6939      	ldr	r1, [r7, #16]
 8015972:	6978      	ldr	r0, [r7, #20]
 8015974:	f00b fa76 	bl	8020e64 <mg_snprintf>
 8015978:	4603      	mov	r3, r0
 801597a:	e2ad      	b.n	8015ed8 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 801597c:	ed97 0b02 	vldr	d0, [r7, #8]
 8015980:	f7ff ff90 	bl	80158a4 <xisnan>
 8015984:	4603      	mov	r3, r0
 8015986:	2b00      	cmp	r3, #0
 8015988:	d007      	beq.n	801599a <mg_dtoa+0x9a>
 801598a:	4b6e      	ldr	r3, [pc, #440]	@ (8015b44 <mg_dtoa+0x244>)
 801598c:	4a6a      	ldr	r2, [pc, #424]	@ (8015b38 <mg_dtoa+0x238>)
 801598e:	6939      	ldr	r1, [r7, #16]
 8015990:	6978      	ldr	r0, [r7, #20]
 8015992:	f00b fa67 	bl	8020e64 <mg_snprintf>
 8015996:	4603      	mov	r3, r0
 8015998:	e29e      	b.n	8015ed8 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 801599a:	f04f 0200 	mov.w	r2, #0
 801599e:	f04f 0300 	mov.w	r3, #0
 80159a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80159a6:	f7eb f8b1 	bl	8000b0c <__aeabi_dcmplt>
 80159aa:	4603      	mov	r3, r0
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d00d      	beq.n	80159cc <mg_dtoa+0xcc>
 80159b0:	68bc      	ldr	r4, [r7, #8]
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80159b8:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80159bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80159be:	1c5a      	adds	r2, r3, #1
 80159c0:	66ba      	str	r2, [r7, #104]	@ 0x68
 80159c2:	3370      	adds	r3, #112	@ 0x70
 80159c4:	443b      	add	r3, r7
 80159c6:	222d      	movs	r2, #45	@ 0x2d
 80159c8:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 80159cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80159d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 80159d4:	f04f 0200 	mov.w	r2, #0
 80159d8:	4b5b      	ldr	r3, [pc, #364]	@ (8015b48 <mg_dtoa+0x248>)
 80159da:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80159de:	e00a      	b.n	80159f6 <mg_dtoa+0xf6>
 80159e0:	f04f 0200 	mov.w	r2, #0
 80159e4:	4b59      	ldr	r3, [pc, #356]	@ (8015b4c <mg_dtoa+0x24c>)
 80159e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80159ea:	f7ea fe1d 	bl	8000628 <__aeabi_dmul>
 80159ee:	4602      	mov	r2, r0
 80159f0:	460b      	mov	r3, r1
 80159f2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80159f6:	f04f 0200 	mov.w	r2, #0
 80159fa:	4b54      	ldr	r3, [pc, #336]	@ (8015b4c <mg_dtoa+0x24c>)
 80159fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015a00:	f7eb f898 	bl	8000b34 <__aeabi_dcmpge>
 8015a04:	4603      	mov	r3, r0
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d011      	beq.n	8015a2e <mg_dtoa+0x12e>
 8015a0a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015a0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015a12:	f7ea ff33 	bl	800087c <__aeabi_ddiv>
 8015a16:	4602      	mov	r2, r0
 8015a18:	460b      	mov	r3, r1
 8015a1a:	4610      	mov	r0, r2
 8015a1c:	4619      	mov	r1, r3
 8015a1e:	f04f 0200 	mov.w	r2, #0
 8015a22:	4b4a      	ldr	r3, [pc, #296]	@ (8015b4c <mg_dtoa+0x24c>)
 8015a24:	f7eb f886 	bl	8000b34 <__aeabi_dcmpge>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d1d8      	bne.n	80159e0 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8015a2e:	e00a      	b.n	8015a46 <mg_dtoa+0x146>
 8015a30:	f04f 0200 	mov.w	r2, #0
 8015a34:	4b45      	ldr	r3, [pc, #276]	@ (8015b4c <mg_dtoa+0x24c>)
 8015a36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015a3a:	f7ea ff1f 	bl	800087c <__aeabi_ddiv>
 8015a3e:	4602      	mov	r2, r0
 8015a40:	460b      	mov	r3, r1
 8015a42:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8015a46:	f04f 0200 	mov.w	r2, #0
 8015a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8015b48 <mg_dtoa+0x248>)
 8015a4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015a50:	f7eb f866 	bl	8000b20 <__aeabi_dcmple>
 8015a54:	4603      	mov	r3, r0
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d011      	beq.n	8015a7e <mg_dtoa+0x17e>
 8015a5a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015a62:	f7ea ff0b 	bl	800087c <__aeabi_ddiv>
 8015a66:	4602      	mov	r2, r0
 8015a68:	460b      	mov	r3, r1
 8015a6a:	4610      	mov	r0, r2
 8015a6c:	4619      	mov	r1, r3
 8015a6e:	f04f 0200 	mov.w	r2, #0
 8015a72:	4b35      	ldr	r3, [pc, #212]	@ (8015b48 <mg_dtoa+0x248>)
 8015a74:	f7eb f854 	bl	8000b20 <__aeabi_dcmple>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d1d8      	bne.n	8015a30 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015a82:	f04f 0200 	mov.w	r2, #0
 8015a86:	4b32      	ldr	r3, [pc, #200]	@ (8015b50 <mg_dtoa+0x250>)
 8015a88:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015a8c:	f7ea fdcc 	bl	8000628 <__aeabi_dmul>
 8015a90:	4602      	mov	r2, r0
 8015a92:	460b      	mov	r3, r1
 8015a94:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015a98:	e00d      	b.n	8015ab6 <mg_dtoa+0x1b6>
 8015a9a:	f04f 0200 	mov.w	r2, #0
 8015a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8015b4c <mg_dtoa+0x24c>)
 8015aa0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015aa4:	f7ea feea 	bl	800087c <__aeabi_ddiv>
 8015aa8:	4602      	mov	r2, r0
 8015aaa:	460b      	mov	r3, r1
 8015aac:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015ab6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	429a      	cmp	r2, r3
 8015abc:	dbed      	blt.n	8015a9a <mg_dtoa+0x19a>
  d += t;
 8015abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015ac2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015ac6:	f7ea fbf9 	bl	80002bc <__adddf3>
 8015aca:	4602      	mov	r2, r0
 8015acc:	460b      	mov	r3, r1
 8015ace:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8015ad2:	f04f 0200 	mov.w	r2, #0
 8015ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8015b48 <mg_dtoa+0x248>)
 8015ad8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8015adc:	e00d      	b.n	8015afa <mg_dtoa+0x1fa>
 8015ade:	f04f 0200 	mov.w	r2, #0
 8015ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8015b4c <mg_dtoa+0x24c>)
 8015ae4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015ae8:	f7ea fd9e 	bl	8000628 <__aeabi_dmul>
 8015aec:	4602      	mov	r2, r0
 8015aee:	460b      	mov	r3, r1
 8015af0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8015af4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015af6:	3301      	adds	r3, #1
 8015af8:	663b      	str	r3, [r7, #96]	@ 0x60
 8015afa:	f04f 0200 	mov.w	r2, #0
 8015afe:	4b13      	ldr	r3, [pc, #76]	@ (8015b4c <mg_dtoa+0x24c>)
 8015b00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015b04:	f7eb f816 	bl	8000b34 <__aeabi_dcmpge>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d011      	beq.n	8015b32 <mg_dtoa+0x232>
 8015b0e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015b12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015b16:	f7ea feb1 	bl	800087c <__aeabi_ddiv>
 8015b1a:	4602      	mov	r2, r0
 8015b1c:	460b      	mov	r3, r1
 8015b1e:	4610      	mov	r0, r2
 8015b20:	4619      	mov	r1, r3
 8015b22:	f04f 0200 	mov.w	r2, #0
 8015b26:	4b09      	ldr	r3, [pc, #36]	@ (8015b4c <mg_dtoa+0x24c>)
 8015b28:	f7eb f804 	bl	8000b34 <__aeabi_dcmpge>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d1d5      	bne.n	8015ade <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8015b32:	e01d      	b.n	8015b70 <mg_dtoa+0x270>
 8015b34:	08031220 	.word	0x08031220
 8015b38:	08031224 	.word	0x08031224
 8015b3c:	08031228 	.word	0x08031228
 8015b40:	0803122c 	.word	0x0803122c
 8015b44:	08031234 	.word	0x08031234
 8015b48:	3ff00000 	.word	0x3ff00000
 8015b4c:	40240000 	.word	0x40240000
 8015b50:	40140000 	.word	0x40140000
 8015b54:	f04f 0200 	mov.w	r2, #0
 8015b58:	4b9d      	ldr	r3, [pc, #628]	@ (8015dd0 <mg_dtoa+0x4d0>)
 8015b5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015b5e:	f7ea fe8d 	bl	800087c <__aeabi_ddiv>
 8015b62:	4602      	mov	r2, r0
 8015b64:	460b      	mov	r3, r1
 8015b66:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8015b6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015b6c:	3b01      	subs	r3, #1
 8015b6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8015b70:	f04f 0200 	mov.w	r2, #0
 8015b74:	4b97      	ldr	r3, [pc, #604]	@ (8015dd4 <mg_dtoa+0x4d4>)
 8015b76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015b7a:	f7ea ffc7 	bl	8000b0c <__aeabi_dcmplt>
 8015b7e:	4603      	mov	r3, r0
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d011      	beq.n	8015ba8 <mg_dtoa+0x2a8>
 8015b84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015b88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015b8c:	f7ea fe76 	bl	800087c <__aeabi_ddiv>
 8015b90:	4602      	mov	r2, r0
 8015b92:	460b      	mov	r3, r1
 8015b94:	4610      	mov	r0, r2
 8015b96:	4619      	mov	r1, r3
 8015b98:	f04f 0200 	mov.w	r2, #0
 8015b9c:	4b8d      	ldr	r3, [pc, #564]	@ (8015dd4 <mg_dtoa+0x4d4>)
 8015b9e:	f7ea ffb5 	bl	8000b0c <__aeabi_dcmplt>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d1d5      	bne.n	8015b54 <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8015ba8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	429a      	cmp	r2, r3
 8015bae:	db33      	blt.n	8015c18 <mg_dtoa+0x318>
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2b01      	cmp	r3, #1
 8015bb4:	dd30      	ble.n	8015c18 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8015bb6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015bba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8015bbe:	f7ea fe5d 	bl	800087c <__aeabi_ddiv>
 8015bc2:	4602      	mov	r2, r0
 8015bc4:	460b      	mov	r3, r1
 8015bc6:	ec43 2b17 	vmov	d7, r2, r3
 8015bca:	78fb      	ldrb	r3, [r7, #3]
 8015bcc:	f107 0018 	add.w	r0, r7, #24
 8015bd0:	687a      	ldr	r2, [r7, #4]
 8015bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8015bd6:	eef0 0a67 	vmov.f32	s1, s15
 8015bda:	2128      	movs	r1, #40	@ 0x28
 8015bdc:	f7ff fe90 	bl	8015900 <mg_dtoa>
 8015be0:	4603      	mov	r3, r0
 8015be2:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8015be4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015be6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015be8:	4413      	add	r3, r2
 8015bea:	f107 0218 	add.w	r2, r7, #24
 8015bee:	4413      	add	r3, r2
 8015bf0:	222b      	movs	r2, #43	@ 0x2b
 8015bf2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f7ff fdab 	bl	8015750 <addexp>
 8015bfa:	4602      	mov	r2, r0
 8015bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015bfe:	4413      	add	r3, r2
 8015c00:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8015c02:	f107 0318 	add.w	r3, r7, #24
 8015c06:	9300      	str	r3, [sp, #0]
 8015c08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015c0a:	4a73      	ldr	r2, [pc, #460]	@ (8015dd8 <mg_dtoa+0x4d8>)
 8015c0c:	6939      	ldr	r1, [r7, #16]
 8015c0e:	6978      	ldr	r0, [r7, #20]
 8015c10:	f00b f928 	bl	8020e64 <mg_snprintf>
 8015c14:	4603      	mov	r3, r0
 8015c16:	e15f      	b.n	8015ed8 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	425b      	negs	r3, r3
 8015c1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	dc34      	bgt.n	8015c8c <mg_dtoa+0x38c>
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	2b01      	cmp	r3, #1
 8015c26:	dd31      	ble.n	8015c8c <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8015c28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015c2c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8015c30:	f7ea fe24 	bl	800087c <__aeabi_ddiv>
 8015c34:	4602      	mov	r2, r0
 8015c36:	460b      	mov	r3, r1
 8015c38:	ec43 2b17 	vmov	d7, r2, r3
 8015c3c:	78fb      	ldrb	r3, [r7, #3]
 8015c3e:	f107 0018 	add.w	r0, r7, #24
 8015c42:	687a      	ldr	r2, [r7, #4]
 8015c44:	eeb0 0a47 	vmov.f32	s0, s14
 8015c48:	eef0 0a67 	vmov.f32	s1, s15
 8015c4c:	2128      	movs	r1, #40	@ 0x28
 8015c4e:	f7ff fe57 	bl	8015900 <mg_dtoa>
 8015c52:	4603      	mov	r3, r0
 8015c54:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8015c56:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015c5a:	4413      	add	r3, r2
 8015c5c:	f107 0218 	add.w	r2, r7, #24
 8015c60:	18d0      	adds	r0, r2, r3
 8015c62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015c64:	425b      	negs	r3, r3
 8015c66:	222d      	movs	r2, #45	@ 0x2d
 8015c68:	4619      	mov	r1, r3
 8015c6a:	f7ff fd71 	bl	8015750 <addexp>
 8015c6e:	4602      	mov	r2, r0
 8015c70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015c72:	4413      	add	r3, r2
 8015c74:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8015c76:	f107 0318 	add.w	r3, r7, #24
 8015c7a:	9300      	str	r3, [sp, #0]
 8015c7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015c7e:	4a56      	ldr	r2, [pc, #344]	@ (8015dd8 <mg_dtoa+0x4d8>)
 8015c80:	6939      	ldr	r1, [r7, #16]
 8015c82:	6978      	ldr	r0, [r7, #20]
 8015c84:	f00b f8ee 	bl	8020e64 <mg_snprintf>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	e125      	b.n	8015ed8 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015c94:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015c98:	e03f      	b.n	8015d1a <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 8015c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015c9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015ca2:	f7ea fdeb 	bl	800087c <__aeabi_ddiv>
 8015ca6:	4602      	mov	r2, r0
 8015ca8:	460b      	mov	r3, r1
 8015caa:	4610      	mov	r0, r2
 8015cac:	4619      	mov	r1, r3
 8015cae:	f7ea ff6b 	bl	8000b88 <__aeabi_d2iz>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8015cb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	dc02      	bgt.n	8015cc2 <mg_dtoa+0x3c2>
 8015cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	dd0c      	ble.n	8015cdc <mg_dtoa+0x3dc>
 8015cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015cc4:	b2da      	uxtb	r2, r3
 8015cc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015cc8:	1c59      	adds	r1, r3, #1
 8015cca:	6679      	str	r1, [r7, #100]	@ 0x64
 8015ccc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8015cce:	440b      	add	r3, r1
 8015cd0:	3230      	adds	r2, #48	@ 0x30
 8015cd2:	b2d2      	uxtb	r2, r2
 8015cd4:	3370      	adds	r3, #112	@ 0x70
 8015cd6:	443b      	add	r3, r7
 8015cd8:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8015cdc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015cde:	f7ea fc39 	bl	8000554 <__aeabi_i2d>
 8015ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015ce6:	f7ea fc9f 	bl	8000628 <__aeabi_dmul>
 8015cea:	4602      	mov	r2, r0
 8015cec:	460b      	mov	r3, r1
 8015cee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015cf2:	f7ea fae1 	bl	80002b8 <__aeabi_dsub>
 8015cf6:	4602      	mov	r2, r0
 8015cf8:	460b      	mov	r3, r1
 8015cfa:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8015cfe:	f04f 0200 	mov.w	r2, #0
 8015d02:	4b33      	ldr	r3, [pc, #204]	@ (8015dd0 <mg_dtoa+0x4d0>)
 8015d04:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015d08:	f7ea fdb8 	bl	800087c <__aeabi_ddiv>
 8015d0c:	4602      	mov	r2, r0
 8015d0e:	460b      	mov	r3, r1
 8015d10:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8015d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015d16:	3301      	adds	r3, #1
 8015d18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015d1a:	f04f 0200 	mov.w	r2, #0
 8015d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8015dd4 <mg_dtoa+0x4d4>)
 8015d20:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015d24:	f7ea ff06 	bl	8000b34 <__aeabi_dcmpge>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d004      	beq.n	8015d38 <mg_dtoa+0x438>
 8015d2e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015d30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015d32:	4413      	add	r3, r2
 8015d34:	2b27      	cmp	r3, #39	@ 0x27
 8015d36:	ddb0      	ble.n	8015c9a <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8015d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d11b      	bne.n	8015d76 <mg_dtoa+0x476>
 8015d3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015d40:	1c5a      	adds	r2, r3, #1
 8015d42:	66ba      	str	r2, [r7, #104]	@ 0x68
 8015d44:	3370      	adds	r3, #112	@ 0x70
 8015d46:	443b      	add	r3, r7
 8015d48:	2230      	movs	r2, #48	@ 0x30
 8015d4a:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8015d4e:	e012      	b.n	8015d76 <mg_dtoa+0x476>
 8015d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015d52:	1c5a      	adds	r2, r3, #1
 8015d54:	667a      	str	r2, [r7, #100]	@ 0x64
 8015d56:	3370      	adds	r3, #112	@ 0x70
 8015d58:	443b      	add	r3, r7
 8015d5a:	2230      	movs	r2, #48	@ 0x30
 8015d5c:	f803 2c58 	strb.w	r2, [r3, #-88]
 8015d60:	f04f 0200 	mov.w	r2, #0
 8015d64:	4b1a      	ldr	r3, [pc, #104]	@ (8015dd0 <mg_dtoa+0x4d0>)
 8015d66:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015d6a:	f7ea fd87 	bl	800087c <__aeabi_ddiv>
 8015d6e:	4602      	mov	r2, r0
 8015d70:	460b      	mov	r3, r1
 8015d72:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015d76:	f04f 0200 	mov.w	r2, #0
 8015d7a:	4b16      	ldr	r3, [pc, #88]	@ (8015dd4 <mg_dtoa+0x4d4>)
 8015d7c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015d80:	f7ea fed8 	bl	8000b34 <__aeabi_dcmpge>
 8015d84:	4603      	mov	r3, r0
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d004      	beq.n	8015d94 <mg_dtoa+0x494>
 8015d8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015d8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015d8e:	4413      	add	r3, r2
 8015d90:	2b27      	cmp	r3, #39	@ 0x27
 8015d92:	dddd      	ble.n	8015d50 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8015d94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015d96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015d98:	4413      	add	r3, r2
 8015d9a:	2b27      	cmp	r3, #39	@ 0x27
 8015d9c:	dc09      	bgt.n	8015db2 <mg_dtoa+0x4b2>
 8015d9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015da0:	1c5a      	adds	r2, r3, #1
 8015da2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8015da4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015da6:	4413      	add	r3, r2
 8015da8:	3370      	adds	r3, #112	@ 0x70
 8015daa:	443b      	add	r3, r7
 8015dac:	222e      	movs	r2, #46	@ 0x2e
 8015dae:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8015db2:	2300      	movs	r3, #0
 8015db4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015db6:	a304      	add	r3, pc, #16	@ (adr r3, 8015dc8 <mg_dtoa+0x4c8>)
 8015db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dbc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015dc0:	e046      	b.n	8015e50 <mg_dtoa+0x550>
 8015dc2:	bf00      	nop
 8015dc4:	f3af 8000 	nop.w
 8015dc8:	9999999a 	.word	0x9999999a
 8015dcc:	3fb99999 	.word	0x3fb99999
 8015dd0:	40240000 	.word	0x40240000
 8015dd4:	3ff00000 	.word	0x3ff00000
 8015dd8:	08031238 	.word	0x08031238
      int ch = (int) (d / t);
 8015ddc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015de0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015de4:	f7ea fd4a 	bl	800087c <__aeabi_ddiv>
 8015de8:	4602      	mov	r2, r0
 8015dea:	460b      	mov	r3, r1
 8015dec:	4610      	mov	r0, r2
 8015dee:	4619      	mov	r1, r3
 8015df0:	f7ea feca 	bl	8000b88 <__aeabi_d2iz>
 8015df4:	4603      	mov	r3, r0
 8015df6:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8015df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015dfa:	b2da      	uxtb	r2, r3
 8015dfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015dfe:	1c59      	adds	r1, r3, #1
 8015e00:	6679      	str	r1, [r7, #100]	@ 0x64
 8015e02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8015e04:	440b      	add	r3, r1
 8015e06:	3230      	adds	r2, #48	@ 0x30
 8015e08:	b2d2      	uxtb	r2, r2
 8015e0a:	3370      	adds	r3, #112	@ 0x70
 8015e0c:	443b      	add	r3, r7
 8015e0e:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8015e12:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015e14:	f7ea fb9e 	bl	8000554 <__aeabi_i2d>
 8015e18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015e1c:	f7ea fc04 	bl	8000628 <__aeabi_dmul>
 8015e20:	4602      	mov	r2, r0
 8015e22:	460b      	mov	r3, r1
 8015e24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015e28:	f7ea fa46 	bl	80002b8 <__aeabi_dsub>
 8015e2c:	4602      	mov	r2, r0
 8015e2e:	460b      	mov	r3, r1
 8015e30:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8015e34:	f04f 0200 	mov.w	r2, #0
 8015e38:	4b29      	ldr	r3, [pc, #164]	@ (8015ee0 <mg_dtoa+0x5e0>)
 8015e3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015e3e:	f7ea fd1d 	bl	800087c <__aeabi_ddiv>
 8015e42:	4602      	mov	r2, r0
 8015e44:	460b      	mov	r3, r1
 8015e46:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8015e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015e4c:	3301      	adds	r3, #1
 8015e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015e50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015e52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e54:	4413      	add	r3, r2
 8015e56:	2b27      	cmp	r3, #39	@ 0x27
 8015e58:	dc07      	bgt.n	8015e6a <mg_dtoa+0x56a>
 8015e5a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	dbbc      	blt.n	8015ddc <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8015e62:	e002      	b.n	8015e6a <mg_dtoa+0x56a>
 8015e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e66:	3b01      	subs	r3, #1
 8015e68:	667b      	str	r3, [r7, #100]	@ 0x64
 8015e6a:	78fb      	ldrb	r3, [r7, #3]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d00c      	beq.n	8015e8a <mg_dtoa+0x58a>
 8015e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	dd09      	ble.n	8015e8a <mg_dtoa+0x58a>
 8015e76:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015e78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e7a:	4413      	add	r3, r2
 8015e7c:	3b01      	subs	r3, #1
 8015e7e:	3370      	adds	r3, #112	@ 0x70
 8015e80:	443b      	add	r3, r7
 8015e82:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8015e86:	2b30      	cmp	r3, #48	@ 0x30
 8015e88:	d0ec      	beq.n	8015e64 <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8015e8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	dd0c      	ble.n	8015eaa <mg_dtoa+0x5aa>
 8015e90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015e92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e94:	4413      	add	r3, r2
 8015e96:	3b01      	subs	r3, #1
 8015e98:	3370      	adds	r3, #112	@ 0x70
 8015e9a:	443b      	add	r3, r7
 8015e9c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8015ea0:	2b2e      	cmp	r3, #46	@ 0x2e
 8015ea2:	d102      	bne.n	8015eaa <mg_dtoa+0x5aa>
 8015ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015ea6:	3b01      	subs	r3, #1
 8015ea8:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 8015eaa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015eac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015eae:	4413      	add	r3, r2
 8015eb0:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8015eb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015eb4:	2b27      	cmp	r3, #39	@ 0x27
 8015eb6:	dd01      	ble.n	8015ebc <mg_dtoa+0x5bc>
 8015eb8:	2327      	movs	r3, #39	@ 0x27
 8015eba:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 8015ebc:	f107 0218 	add.w	r2, r7, #24
 8015ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015ec2:	4413      	add	r3, r2
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8015ec8:	f107 0318 	add.w	r3, r7, #24
 8015ecc:	4a05      	ldr	r2, [pc, #20]	@ (8015ee4 <mg_dtoa+0x5e4>)
 8015ece:	6939      	ldr	r1, [r7, #16]
 8015ed0:	6978      	ldr	r0, [r7, #20]
 8015ed2:	f00a ffc7 	bl	8020e64 <mg_snprintf>
 8015ed6:	4603      	mov	r3, r0
}
 8015ed8:	4618      	mov	r0, r3
 8015eda:	3770      	adds	r7, #112	@ 0x70
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bdb0      	pop	{r4, r5, r7, pc}
 8015ee0:	40240000 	.word	0x40240000
 8015ee4:	08031224 	.word	0x08031224

08015ee8 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8015ee8:	b5b0      	push	{r4, r5, r7, lr}
 8015eea:	b08c      	sub	sp, #48	@ 0x30
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	60f8      	str	r0, [r7, #12]
 8015ef0:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8015ef4:	4b53      	ldr	r3, [pc, #332]	@ (8016044 <mg_lld+0x15c>)
 8015ef6:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8015ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015efc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 8015f00:	2300      	movs	r3, #0
 8015f02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8015f04:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d012      	beq.n	8015f32 <mg_lld+0x4a>
 8015f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	da0e      	bge.n	8015f32 <mg_lld+0x4a>
 8015f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f16:	1c5a      	adds	r2, r3, #1
 8015f18:	627a      	str	r2, [r7, #36]	@ 0x24
 8015f1a:	68fa      	ldr	r2, [r7, #12]
 8015f1c:	4413      	add	r3, r2
 8015f1e:	222d      	movs	r2, #45	@ 0x2d
 8015f20:	701a      	strb	r2, [r3, #0]
 8015f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f26:	2100      	movs	r1, #0
 8015f28:	4254      	negs	r4, r2
 8015f2a:	eb61 0503 	sbc.w	r5, r1, r3
 8015f2e:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8015f32:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d021      	beq.n	8015f7e <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	623b      	str	r3, [r7, #32]
 8015f3e:	e019      	b.n	8015f74 <mg_lld+0x8c>
 8015f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f42:	f003 030f 	and.w	r3, r3, #15
 8015f46:	69ba      	ldr	r2, [r7, #24]
 8015f48:	441a      	add	r2, r3
 8015f4a:	6a3b      	ldr	r3, [r7, #32]
 8015f4c:	1c59      	adds	r1, r3, #1
 8015f4e:	6239      	str	r1, [r7, #32]
 8015f50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015f52:	440b      	add	r3, r1
 8015f54:	68f9      	ldr	r1, [r7, #12]
 8015f56:	440b      	add	r3, r1
 8015f58:	7812      	ldrb	r2, [r2, #0]
 8015f5a:	701a      	strb	r2, [r3, #0]
 8015f5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8015f60:	f04f 0200 	mov.w	r2, #0
 8015f64:	f04f 0300 	mov.w	r3, #0
 8015f68:	0902      	lsrs	r2, r0, #4
 8015f6a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8015f6e:	090b      	lsrs	r3, r1, #4
 8015f70:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8015f74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8015f78:	4313      	orrs	r3, r2
 8015f7a:	d1e1      	bne.n	8015f40 <mg_lld+0x58>
 8015f7c:	e025      	b.n	8015fca <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8015f7e:	2300      	movs	r3, #0
 8015f80:	623b      	str	r3, [r7, #32]
 8015f82:	e01e      	b.n	8015fc2 <mg_lld+0xda>
 8015f84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8015f88:	f04f 020a 	mov.w	r2, #10
 8015f8c:	f04f 0300 	mov.w	r3, #0
 8015f90:	f7ea fee2 	bl	8000d58 <__aeabi_uldivmod>
 8015f94:	69bb      	ldr	r3, [r7, #24]
 8015f96:	441a      	add	r2, r3
 8015f98:	6a3b      	ldr	r3, [r7, #32]
 8015f9a:	1c59      	adds	r1, r3, #1
 8015f9c:	6239      	str	r1, [r7, #32]
 8015f9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015fa0:	440b      	add	r3, r1
 8015fa2:	68f9      	ldr	r1, [r7, #12]
 8015fa4:	440b      	add	r3, r1
 8015fa6:	7812      	ldrb	r2, [r2, #0]
 8015fa8:	701a      	strb	r2, [r3, #0]
 8015faa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8015fae:	f04f 020a 	mov.w	r2, #10
 8015fb2:	f04f 0300 	mov.w	r3, #0
 8015fb6:	f7ea fecf 	bl	8000d58 <__aeabi_uldivmod>
 8015fba:	4602      	mov	r2, r0
 8015fbc:	460b      	mov	r3, r1
 8015fbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8015fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8015fc6:	4313      	orrs	r3, r2
 8015fc8:	d1dc      	bne.n	8015f84 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8015fca:	2300      	movs	r3, #0
 8015fcc:	61fb      	str	r3, [r7, #28]
 8015fce:	e022      	b.n	8016016 <mg_lld+0x12e>
    char t = buf[s + i];
 8015fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015fd2:	69fb      	ldr	r3, [r7, #28]
 8015fd4:	4413      	add	r3, r2
 8015fd6:	68fa      	ldr	r2, [r7, #12]
 8015fd8:	4413      	add	r3, r2
 8015fda:	781b      	ldrb	r3, [r3, #0]
 8015fdc:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8015fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015fe0:	6a3b      	ldr	r3, [r7, #32]
 8015fe2:	441a      	add	r2, r3
 8015fe4:	69fb      	ldr	r3, [r7, #28]
 8015fe6:	1ad3      	subs	r3, r2, r3
 8015fe8:	3b01      	subs	r3, #1
 8015fea:	68fa      	ldr	r2, [r7, #12]
 8015fec:	441a      	add	r2, r3
 8015fee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015ff0:	69fb      	ldr	r3, [r7, #28]
 8015ff2:	440b      	add	r3, r1
 8015ff4:	68f9      	ldr	r1, [r7, #12]
 8015ff6:	440b      	add	r3, r1
 8015ff8:	7812      	ldrb	r2, [r2, #0]
 8015ffa:	701a      	strb	r2, [r3, #0]
 8015ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ffe:	6a3b      	ldr	r3, [r7, #32]
 8016000:	441a      	add	r2, r3
 8016002:	69fb      	ldr	r3, [r7, #28]
 8016004:	1ad3      	subs	r3, r2, r3
 8016006:	3b01      	subs	r3, #1
 8016008:	68fa      	ldr	r2, [r7, #12]
 801600a:	4413      	add	r3, r2
 801600c:	7dfa      	ldrb	r2, [r7, #23]
 801600e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8016010:	69fb      	ldr	r3, [r7, #28]
 8016012:	3301      	adds	r3, #1
 8016014:	61fb      	str	r3, [r7, #28]
 8016016:	6a3b      	ldr	r3, [r7, #32]
 8016018:	085b      	lsrs	r3, r3, #1
 801601a:	69fa      	ldr	r2, [r7, #28]
 801601c:	429a      	cmp	r2, r3
 801601e:	d3d7      	bcc.n	8015fd0 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8016020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016024:	4313      	orrs	r3, r2
 8016026:	d106      	bne.n	8016036 <mg_lld+0x14e>
 8016028:	6a3b      	ldr	r3, [r7, #32]
 801602a:	1c5a      	adds	r2, r3, #1
 801602c:	623a      	str	r2, [r7, #32]
 801602e:	68fa      	ldr	r2, [r7, #12]
 8016030:	4413      	add	r3, r2
 8016032:	2230      	movs	r2, #48	@ 0x30
 8016034:	701a      	strb	r2, [r3, #0]
  return n + s;
 8016036:	6a3a      	ldr	r2, [r7, #32]
 8016038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801603a:	4413      	add	r3, r2
}
 801603c:	4618      	mov	r0, r3
 801603e:	3730      	adds	r7, #48	@ 0x30
 8016040:	46bd      	mov	sp, r7
 8016042:	bdb0      	pop	{r4, r5, r7, pc}
 8016044:	08031240 	.word	0x08031240

08016048 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8016048:	b580      	push	{r7, lr}
 801604a:	b086      	sub	sp, #24
 801604c:	af00      	add	r7, sp, #0
 801604e:	60f8      	str	r0, [r7, #12]
 8016050:	60b9      	str	r1, [r7, #8]
 8016052:	607a      	str	r2, [r7, #4]
 8016054:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8016056:	2300      	movs	r3, #0
 8016058:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801605a:	e009      	b.n	8016070 <scpy+0x28>
 801605c:	697b      	ldr	r3, [r7, #20]
 801605e:	1c5a      	adds	r2, r3, #1
 8016060:	617a      	str	r2, [r7, #20]
 8016062:	687a      	ldr	r2, [r7, #4]
 8016064:	4413      	add	r3, r2
 8016066:	781a      	ldrb	r2, [r3, #0]
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	68b9      	ldr	r1, [r7, #8]
 801606c:	4610      	mov	r0, r2
 801606e:	4798      	blx	r3
 8016070:	697a      	ldr	r2, [r7, #20]
 8016072:	683b      	ldr	r3, [r7, #0]
 8016074:	429a      	cmp	r2, r3
 8016076:	d205      	bcs.n	8016084 <scpy+0x3c>
 8016078:	687a      	ldr	r2, [r7, #4]
 801607a:	697b      	ldr	r3, [r7, #20]
 801607c:	4413      	add	r3, r2
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d1eb      	bne.n	801605c <scpy+0x14>
  return i;
 8016084:	697b      	ldr	r3, [r7, #20]
}
 8016086:	4618      	mov	r0, r3
 8016088:	3718      	adds	r7, #24
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 801608e:	b40c      	push	{r2, r3}
 8016090:	b580      	push	{r7, lr}
 8016092:	b084      	sub	sp, #16
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 801609a:	2300      	movs	r3, #0
 801609c:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 801609e:	f107 031c 	add.w	r3, r7, #28
 80160a2:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80160a4:	f107 0308 	add.w	r3, r7, #8
 80160a8:	69ba      	ldr	r2, [r7, #24]
 80160aa:	6839      	ldr	r1, [r7, #0]
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f000 f809 	bl	80160c4 <mg_vxprintf>
 80160b2:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80160b4:	68fb      	ldr	r3, [r7, #12]
}
 80160b6:	4618      	mov	r0, r3
 80160b8:	3710      	adds	r7, #16
 80160ba:	46bd      	mov	sp, r7
 80160bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80160c0:	b002      	add	sp, #8
 80160c2:	4770      	bx	lr

080160c4 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 80160c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80160c8:	b0a6      	sub	sp, #152	@ 0x98
 80160ca:	af02      	add	r7, sp, #8
 80160cc:	60f8      	str	r0, [r7, #12]
 80160ce:	60b9      	str	r1, [r7, #8]
 80160d0:	607a      	str	r2, [r7, #4]
 80160d2:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 80160d4:	2300      	movs	r3, #0
 80160d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80160da:	2300      	movs	r3, #0
 80160dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 80160e0:	e383      	b.n	80167ea <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 80160e2:	687a      	ldr	r2, [r7, #4]
 80160e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80160e8:	4413      	add	r3, r2
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	2b25      	cmp	r3, #37	@ 0x25
 80160ee:	f040 8369 	bne.w	80167c4 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80160f2:	2300      	movs	r3, #0
 80160f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80160f6:	2300      	movs	r3, #0
 80160f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80160fa:	2300      	movs	r3, #0
 80160fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80160fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016102:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8016104:	2320      	movs	r3, #32
 8016106:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801610a:	2300      	movs	r3, #0
 801610c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8016110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016114:	3301      	adds	r3, #1
 8016116:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801611a:	687a      	ldr	r2, [r7, #4]
 801611c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016120:	4413      	add	r3, r2
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 8016128:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801612c:	2b23      	cmp	r3, #35	@ 0x23
 801612e:	d10e      	bne.n	801614e <mg_vxprintf+0x8a>
 8016130:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016132:	3301      	adds	r3, #1
 8016134:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801613a:	3301      	adds	r3, #1
 801613c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016140:	687a      	ldr	r2, [r7, #4]
 8016142:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016146:	4413      	add	r3, r2
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 801614e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016152:	2b2d      	cmp	r3, #45	@ 0x2d
 8016154:	d110      	bne.n	8016178 <mg_vxprintf+0xb4>
 8016156:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801615a:	3301      	adds	r3, #1
 801615c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8016160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016164:	3301      	adds	r3, #1
 8016166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801616a:	687a      	ldr	r2, [r7, #4]
 801616c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016170:	4413      	add	r3, r2
 8016172:	781b      	ldrb	r3, [r3, #0]
 8016174:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8016178:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801617c:	2b30      	cmp	r3, #48	@ 0x30
 801617e:	d127      	bne.n	80161d0 <mg_vxprintf+0x10c>
 8016180:	2330      	movs	r3, #48	@ 0x30
 8016182:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8016186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801618a:	3301      	adds	r3, #1
 801618c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016190:	687a      	ldr	r2, [r7, #4]
 8016192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016196:	4413      	add	r3, r2
 8016198:	781b      	ldrb	r3, [r3, #0]
 801619a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 801619e:	e017      	b.n	80161d0 <mg_vxprintf+0x10c>
 80161a0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80161a2:	4613      	mov	r3, r2
 80161a4:	009b      	lsls	r3, r3, #2
 80161a6:	4413      	add	r3, r2
 80161a8:	005b      	lsls	r3, r3, #1
 80161aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80161ac:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80161b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80161b2:	4413      	add	r3, r2
 80161b4:	3b30      	subs	r3, #48	@ 0x30
 80161b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80161b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80161bc:	3301      	adds	r3, #1
 80161be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80161c2:	687a      	ldr	r2, [r7, #4]
 80161c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80161c8:	4413      	add	r3, r2
 80161ca:	781b      	ldrb	r3, [r3, #0]
 80161cc:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80161d0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80161d4:	4618      	mov	r0, r3
 80161d6:	f7ff faa5 	bl	8015724 <is_digit>
 80161da:	4603      	mov	r3, r0
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d1df      	bne.n	80161a0 <mg_vxprintf+0xdc>
      if (c == '.') {
 80161e0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80161e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80161e6:	d153      	bne.n	8016290 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 80161e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80161ec:	3301      	adds	r3, #1
 80161ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80161f2:	687a      	ldr	r2, [r7, #4]
 80161f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80161f8:	4413      	add	r3, r2
 80161fa:	781b      	ldrb	r3, [r3, #0]
 80161fc:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8016200:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016204:	2b2a      	cmp	r3, #42	@ 0x2a
 8016206:	d113      	bne.n	8016230 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8016208:	683b      	ldr	r3, [r7, #0]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	1d19      	adds	r1, r3, #4
 801620e:	683a      	ldr	r2, [r7, #0]
 8016210:	6011      	str	r1, [r2, #0]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 8016216:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801621a:	3301      	adds	r3, #1
 801621c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016220:	687a      	ldr	r2, [r7, #4]
 8016222:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016226:	4413      	add	r3, r2
 8016228:	781b      	ldrb	r3, [r3, #0]
 801622a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 801622e:	e02f      	b.n	8016290 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8016230:	2300      	movs	r3, #0
 8016232:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8016234:	e017      	b.n	8016266 <mg_vxprintf+0x1a2>
 8016236:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016238:	4613      	mov	r3, r2
 801623a:	009b      	lsls	r3, r3, #2
 801623c:	4413      	add	r3, r2
 801623e:	005b      	lsls	r3, r3, #1
 8016240:	673b      	str	r3, [r7, #112]	@ 0x70
 8016242:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8016246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016248:	4413      	add	r3, r2
 801624a:	3b30      	subs	r3, #48	@ 0x30
 801624c:	673b      	str	r3, [r7, #112]	@ 0x70
 801624e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016252:	3301      	adds	r3, #1
 8016254:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016258:	687a      	ldr	r2, [r7, #4]
 801625a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801625e:	4413      	add	r3, r2
 8016260:	781b      	ldrb	r3, [r3, #0]
 8016262:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8016266:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801626a:	4618      	mov	r0, r3
 801626c:	f7ff fa5a 	bl	8015724 <is_digit>
 8016270:	4603      	mov	r3, r0
 8016272:	2b00      	cmp	r3, #0
 8016274:	d1df      	bne.n	8016236 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8016276:	e00b      	b.n	8016290 <mg_vxprintf+0x1cc>
 8016278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801627c:	3301      	adds	r3, #1
 801627e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016282:	687a      	ldr	r2, [r7, #4]
 8016284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016288:	4413      	add	r3, r2
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8016290:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016294:	2b68      	cmp	r3, #104	@ 0x68
 8016296:	d0ef      	beq.n	8016278 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8016298:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801629c:	2b6c      	cmp	r3, #108	@ 0x6c
 801629e:	d121      	bne.n	80162e4 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 80162a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80162a2:	3301      	adds	r3, #1
 80162a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80162a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162aa:	3301      	adds	r3, #1
 80162ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80162b0:	687a      	ldr	r2, [r7, #4]
 80162b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162b6:	4413      	add	r3, r2
 80162b8:	781b      	ldrb	r3, [r3, #0]
 80162ba:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 80162be:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80162c2:	2b6c      	cmp	r3, #108	@ 0x6c
 80162c4:	d10e      	bne.n	80162e4 <mg_vxprintf+0x220>
 80162c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80162c8:	3301      	adds	r3, #1
 80162ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80162cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162d0:	3301      	adds	r3, #1
 80162d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80162d6:	687a      	ldr	r2, [r7, #4]
 80162d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162dc:	4413      	add	r3, r2
 80162de:	781b      	ldrb	r3, [r3, #0]
 80162e0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 80162e4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80162e8:	2b70      	cmp	r3, #112	@ 0x70
 80162ea:	d103      	bne.n	80162f4 <mg_vxprintf+0x230>
 80162ec:	2301      	movs	r3, #1
 80162ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80162f0:	2301      	movs	r3, #1
 80162f2:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 80162f4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80162f8:	2b64      	cmp	r3, #100	@ 0x64
 80162fa:	d018      	beq.n	801632e <mg_vxprintf+0x26a>
 80162fc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016300:	2b75      	cmp	r3, #117	@ 0x75
 8016302:	d014      	beq.n	801632e <mg_vxprintf+0x26a>
 8016304:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016308:	2b78      	cmp	r3, #120	@ 0x78
 801630a:	d010      	beq.n	801632e <mg_vxprintf+0x26a>
 801630c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016310:	2b58      	cmp	r3, #88	@ 0x58
 8016312:	d00c      	beq.n	801632e <mg_vxprintf+0x26a>
 8016314:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016318:	2b70      	cmp	r3, #112	@ 0x70
 801631a:	d008      	beq.n	801632e <mg_vxprintf+0x26a>
 801631c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016320:	2b67      	cmp	r3, #103	@ 0x67
 8016322:	d004      	beq.n	801632e <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8016324:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016328:	2b66      	cmp	r3, #102	@ 0x66
 801632a:	f040 816c 	bne.w	8016606 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 801632e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016332:	2b64      	cmp	r3, #100	@ 0x64
 8016334:	bf0c      	ite	eq
 8016336:	2301      	moveq	r3, #1
 8016338:	2300      	movne	r3, #0
 801633a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801633e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016342:	2b78      	cmp	r3, #120	@ 0x78
 8016344:	d007      	beq.n	8016356 <mg_vxprintf+0x292>
 8016346:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801634a:	2b58      	cmp	r3, #88	@ 0x58
 801634c:	d003      	beq.n	8016356 <mg_vxprintf+0x292>
 801634e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016352:	2b70      	cmp	r3, #112	@ 0x70
 8016354:	d101      	bne.n	801635a <mg_vxprintf+0x296>
 8016356:	2301      	movs	r3, #1
 8016358:	e000      	b.n	801635c <mg_vxprintf+0x298>
 801635a:	2300      	movs	r3, #0
 801635c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8016360:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8016364:	f003 0301 	and.w	r3, r3, #1
 8016368:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 801636c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801636e:	2b00      	cmp	r3, #0
 8016370:	d001      	beq.n	8016376 <mg_vxprintf+0x2b2>
 8016372:	2302      	movs	r3, #2
 8016374:	e000      	b.n	8016378 <mg_vxprintf+0x2b4>
 8016376:	2300      	movs	r3, #0
 8016378:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 801637a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801637e:	2b67      	cmp	r3, #103	@ 0x67
 8016380:	d003      	beq.n	801638a <mg_vxprintf+0x2c6>
 8016382:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016386:	2b66      	cmp	r3, #102	@ 0x66
 8016388:	d124      	bne.n	80163d4 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 801638a:	683b      	ldr	r3, [r7, #0]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	3307      	adds	r3, #7
 8016390:	f023 0307 	bic.w	r3, r3, #7
 8016394:	f103 0108 	add.w	r1, r3, #8
 8016398:	683a      	ldr	r2, [r7, #0]
 801639a:	6011      	str	r1, [r2, #0]
 801639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 80163a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80163a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80163aa:	d101      	bne.n	80163b0 <mg_vxprintf+0x2ec>
 80163ac:	2306      	movs	r3, #6
 80163ae:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80163b0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80163b2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80163b6:	2b67      	cmp	r3, #103	@ 0x67
 80163b8:	bf0c      	ite	eq
 80163ba:	2301      	moveq	r3, #1
 80163bc:	2300      	movne	r3, #0
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	f107 0014 	add.w	r0, r7, #20
 80163c4:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80163c8:	2128      	movs	r1, #40	@ 0x28
 80163ca:	f7ff fa99 	bl	8015900 <mg_dtoa>
 80163ce:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 80163d2:	e069      	b.n	80164a8 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 80163d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80163d6:	2b02      	cmp	r3, #2
 80163d8:	d11c      	bne.n	8016414 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	3307      	adds	r3, #7
 80163e0:	f023 0307 	bic.w	r3, r3, #7
 80163e4:	f103 0108 	add.w	r1, r3, #8
 80163e8:	683a      	ldr	r2, [r7, #0]
 80163ea:	6011      	str	r1, [r2, #0]
 80163ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 80163f4:	f107 0114 	add.w	r1, r7, #20
 80163f8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80163fc:	9301      	str	r3, [sp, #4]
 80163fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016402:	9300      	str	r3, [sp, #0]
 8016404:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8016408:	4608      	mov	r0, r1
 801640a:	f7ff fd6d 	bl	8015ee8 <mg_lld>
 801640e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8016412:	e049      	b.n	80164a8 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8016414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016416:	2b01      	cmp	r3, #1
 8016418:	d123      	bne.n	8016462 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	1d19      	adds	r1, r3, #4
 8016420:	683a      	ldr	r2, [r7, #0]
 8016422:	6011      	str	r1, [r2, #0]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8016428:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801642c:	2b00      	cmp	r3, #0
 801642e:	d004      	beq.n	801643a <mg_vxprintf+0x376>
 8016430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016432:	17da      	asrs	r2, r3, #31
 8016434:	461c      	mov	r4, r3
 8016436:	4615      	mov	r5, r2
 8016438:	e003      	b.n	8016442 <mg_vxprintf+0x37e>
 801643a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801643c:	2200      	movs	r2, #0
 801643e:	461c      	mov	r4, r3
 8016440:	4615      	mov	r5, r2
 8016442:	f107 0114 	add.w	r1, r7, #20
 8016446:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801644a:	9301      	str	r3, [sp, #4]
 801644c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016450:	9300      	str	r3, [sp, #0]
 8016452:	4622      	mov	r2, r4
 8016454:	462b      	mov	r3, r5
 8016456:	4608      	mov	r0, r1
 8016458:	f7ff fd46 	bl	8015ee8 <mg_lld>
 801645c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8016460:	e022      	b.n	80164a8 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8016462:	683b      	ldr	r3, [r7, #0]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	1d19      	adds	r1, r3, #4
 8016468:	683a      	ldr	r2, [r7, #0]
 801646a:	6011      	str	r1, [r2, #0]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8016470:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016474:	2b00      	cmp	r3, #0
 8016476:	d004      	beq.n	8016482 <mg_vxprintf+0x3be>
 8016478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801647a:	17da      	asrs	r2, r3, #31
 801647c:	4698      	mov	r8, r3
 801647e:	4691      	mov	r9, r2
 8016480:	e003      	b.n	801648a <mg_vxprintf+0x3c6>
 8016482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016484:	2200      	movs	r2, #0
 8016486:	4698      	mov	r8, r3
 8016488:	4691      	mov	r9, r2
 801648a:	f107 0114 	add.w	r1, r7, #20
 801648e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8016492:	9301      	str	r3, [sp, #4]
 8016494:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016498:	9300      	str	r3, [sp, #0]
 801649a:	4642      	mov	r2, r8
 801649c:	464b      	mov	r3, r9
 801649e:	4608      	mov	r0, r1
 80164a0:	f7ff fd22 	bl	8015ee8 <mg_lld>
 80164a4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 80164a8:	2300      	movs	r3, #0
 80164aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80164ae:	e007      	b.n	80164c0 <mg_vxprintf+0x3fc>
 80164b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80164b2:	3b01      	subs	r3, #1
 80164b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80164b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80164ba:	3301      	adds	r3, #1
 80164bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80164c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80164c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80164c6:	429a      	cmp	r2, r3
 80164c8:	d202      	bcs.n	80164d0 <mg_vxprintf+0x40c>
 80164ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d1ef      	bne.n	80164b0 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80164d0:	2300      	movs	r3, #0
 80164d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80164d6:	e011      	b.n	80164fc <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 80164d8:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80164dc:	2301      	movs	r3, #1
 80164de:	68b9      	ldr	r1, [r7, #8]
 80164e0:	68f8      	ldr	r0, [r7, #12]
 80164e2:	f7ff fdb1 	bl	8016048 <scpy>
 80164e6:	4602      	mov	r2, r0
 80164e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80164ec:	4413      	add	r3, r2
 80164ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80164f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80164f6:	3301      	adds	r3, #1
 80164f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80164fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016500:	2b20      	cmp	r3, #32
 8016502:	d110      	bne.n	8016526 <mg_vxprintf+0x462>
 8016504:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8016508:	2b00      	cmp	r3, #0
 801650a:	d10c      	bne.n	8016526 <mg_vxprintf+0x462>
 801650c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016510:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016512:	429a      	cmp	r2, r3
 8016514:	d207      	bcs.n	8016526 <mg_vxprintf+0x462>
 8016516:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801651a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801651e:	4413      	add	r3, r2
 8016520:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016522:	429a      	cmp	r2, r3
 8016524:	d8d8      	bhi.n	80164d8 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8016526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016528:	4ab7      	ldr	r2, [pc, #732]	@ (8016808 <mg_vxprintf+0x744>)
 801652a:	68b9      	ldr	r1, [r7, #8]
 801652c:	68f8      	ldr	r0, [r7, #12]
 801652e:	f7ff fd8b 	bl	8016048 <scpy>
 8016532:	4602      	mov	r2, r0
 8016534:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016538:	4413      	add	r3, r2
 801653a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 801653e:	2300      	movs	r3, #0
 8016540:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016544:	e011      	b.n	801656a <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8016546:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 801654a:	2301      	movs	r3, #1
 801654c:	68b9      	ldr	r1, [r7, #8]
 801654e:	68f8      	ldr	r0, [r7, #12]
 8016550:	f7ff fd7a 	bl	8016048 <scpy>
 8016554:	4602      	mov	r2, r0
 8016556:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801655a:	4413      	add	r3, r2
 801655c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8016560:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016564:	3301      	adds	r3, #1
 8016566:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801656a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801656e:	2b30      	cmp	r3, #48	@ 0x30
 8016570:	d10c      	bne.n	801658c <mg_vxprintf+0x4c8>
 8016572:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016578:	429a      	cmp	r2, r3
 801657a:	d207      	bcs.n	801658c <mg_vxprintf+0x4c8>
 801657c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016580:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016584:	4413      	add	r3, r2
 8016586:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016588:	429a      	cmp	r2, r3
 801658a:	d8dc      	bhi.n	8016546 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 801658c:	f107 0214 	add.w	r2, r7, #20
 8016590:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016594:	68b9      	ldr	r1, [r7, #8]
 8016596:	68f8      	ldr	r0, [r7, #12]
 8016598:	f7ff fd56 	bl	8016048 <scpy>
 801659c:	4602      	mov	r2, r0
 801659e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80165a2:	4413      	add	r3, r2
 80165a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80165a8:	2300      	movs	r3, #0
 80165aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80165ae:	e011      	b.n	80165d4 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 80165b0:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80165b4:	2301      	movs	r3, #1
 80165b6:	68b9      	ldr	r1, [r7, #8]
 80165b8:	68f8      	ldr	r0, [r7, #12]
 80165ba:	f7ff fd45 	bl	8016048 <scpy>
 80165be:	4602      	mov	r2, r0
 80165c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80165c4:	4413      	add	r3, r2
 80165c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80165ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80165ce:	3301      	adds	r3, #1
 80165d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80165d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80165d8:	2b20      	cmp	r3, #32
 80165da:	f040 80ea 	bne.w	80167b2 <mg_vxprintf+0x6ee>
 80165de:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	f000 80e5 	beq.w	80167b2 <mg_vxprintf+0x6ee>
 80165e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80165ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80165ee:	429a      	cmp	r2, r3
 80165f0:	f080 80df 	bcs.w	80167b2 <mg_vxprintf+0x6ee>
 80165f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80165f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80165fc:	4413      	add	r3, r2
 80165fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016600:	429a      	cmp	r2, r3
 8016602:	d8d5      	bhi.n	80165b0 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8016604:	e0d5      	b.n	80167b2 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8016606:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801660a:	2b6d      	cmp	r3, #109	@ 0x6d
 801660c:	d003      	beq.n	8016616 <mg_vxprintf+0x552>
 801660e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016612:	2b4d      	cmp	r3, #77	@ 0x4d
 8016614:	d128      	bne.n	8016668 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8016616:	683b      	ldr	r3, [r7, #0]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	1d19      	adds	r1, r3, #4
 801661c:	683a      	ldr	r2, [r7, #0]
 801661e:	6011      	str	r1, [r2, #0]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8016624:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016628:	2b6d      	cmp	r3, #109	@ 0x6d
 801662a:	d103      	bne.n	8016634 <mg_vxprintf+0x570>
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	68b9      	ldr	r1, [r7, #8]
 8016630:	2022      	movs	r0, #34	@ 0x22
 8016632:	4798      	blx	r3
        n += f(out, param, ap);
 8016634:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016636:	683a      	ldr	r2, [r7, #0]
 8016638:	68b9      	ldr	r1, [r7, #8]
 801663a:	68f8      	ldr	r0, [r7, #12]
 801663c:	4798      	blx	r3
 801663e:	4602      	mov	r2, r0
 8016640:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016644:	4413      	add	r3, r2
 8016646:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 801664a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801664e:	2b6d      	cmp	r3, #109	@ 0x6d
 8016650:	f040 80b1 	bne.w	80167b6 <mg_vxprintf+0x6f2>
 8016654:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016658:	3302      	adds	r3, #2
 801665a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	68b9      	ldr	r1, [r7, #8]
 8016662:	2022      	movs	r0, #34	@ 0x22
 8016664:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8016666:	e0a6      	b.n	80167b6 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8016668:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801666c:	2b63      	cmp	r3, #99	@ 0x63
 801666e:	d112      	bne.n	8016696 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	1d19      	adds	r1, r3, #4
 8016676:	683a      	ldr	r2, [r7, #0]
 8016678:	6011      	str	r1, [r2, #0]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 801667e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016680:	b2da      	uxtb	r2, r3
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	68b9      	ldr	r1, [r7, #8]
 8016686:	4610      	mov	r0, r2
 8016688:	4798      	blx	r3
        n++;
 801668a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801668e:	3301      	adds	r3, #1
 8016690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8016694:	e090      	b.n	80167b8 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8016696:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801669a:	2b73      	cmp	r3, #115	@ 0x73
 801669c:	d16b      	bne.n	8016776 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	1d19      	adds	r1, r3, #4
 80166a4:	683a      	ldr	r2, [r7, #0]
 80166a6:	6011      	str	r1, [r2, #0]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80166ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80166ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80166b2:	d109      	bne.n	80166c8 <mg_vxprintf+0x604>
 80166b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d004      	beq.n	80166c4 <mg_vxprintf+0x600>
 80166ba:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80166bc:	f7e9 fdf0 	bl	80002a0 <strlen>
 80166c0:	4603      	mov	r3, r0
 80166c2:	e000      	b.n	80166c6 <mg_vxprintf+0x602>
 80166c4:	2300      	movs	r3, #0
 80166c6:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80166c8:	2300      	movs	r3, #0
 80166ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80166ce:	e011      	b.n	80166f4 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 80166d0:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80166d4:	2301      	movs	r3, #1
 80166d6:	68b9      	ldr	r1, [r7, #8]
 80166d8:	68f8      	ldr	r0, [r7, #12]
 80166da:	f7ff fcb5 	bl	8016048 <scpy>
 80166de:	4602      	mov	r2, r0
 80166e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80166e4:	4413      	add	r3, r2
 80166e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80166ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80166ee:	3301      	adds	r3, #1
 80166f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80166f4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d10a      	bne.n	8016712 <mg_vxprintf+0x64e>
 80166fc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80166fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016700:	429a      	cmp	r2, r3
 8016702:	d206      	bcs.n	8016712 <mg_vxprintf+0x64e>
 8016704:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016708:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801670a:	4413      	add	r3, r2
 801670c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801670e:	429a      	cmp	r2, r3
 8016710:	d8de      	bhi.n	80166d0 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8016712:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016714:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016716:	68b9      	ldr	r1, [r7, #8]
 8016718:	68f8      	ldr	r0, [r7, #12]
 801671a:	f7ff fc95 	bl	8016048 <scpy>
 801671e:	4602      	mov	r2, r0
 8016720:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016724:	4413      	add	r3, r2
 8016726:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 801672a:	2300      	movs	r3, #0
 801672c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016730:	e011      	b.n	8016756 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8016732:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8016736:	2301      	movs	r3, #1
 8016738:	68b9      	ldr	r1, [r7, #8]
 801673a:	68f8      	ldr	r0, [r7, #12]
 801673c:	f7ff fc84 	bl	8016048 <scpy>
 8016740:	4602      	mov	r2, r0
 8016742:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016746:	4413      	add	r3, r2
 8016748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 801674c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016750:	3301      	adds	r3, #1
 8016752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016756:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801675a:	2b00      	cmp	r3, #0
 801675c:	d02c      	beq.n	80167b8 <mg_vxprintf+0x6f4>
 801675e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016760:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016762:	429a      	cmp	r2, r3
 8016764:	d228      	bcs.n	80167b8 <mg_vxprintf+0x6f4>
 8016766:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801676a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801676c:	4413      	add	r3, r2
 801676e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016770:	429a      	cmp	r2, r3
 8016772:	d8de      	bhi.n	8016732 <mg_vxprintf+0x66e>
 8016774:	e020      	b.n	80167b8 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8016776:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801677a:	2b25      	cmp	r3, #37	@ 0x25
 801677c:	d109      	bne.n	8016792 <mg_vxprintf+0x6ce>
        out('%', param);
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	68b9      	ldr	r1, [r7, #8]
 8016782:	2025      	movs	r0, #37	@ 0x25
 8016784:	4798      	blx	r3
        n++;
 8016786:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801678a:	3301      	adds	r3, #1
 801678c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8016790:	e012      	b.n	80167b8 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	68b9      	ldr	r1, [r7, #8]
 8016796:	2025      	movs	r0, #37	@ 0x25
 8016798:	4798      	blx	r3
        out(c, param);
 801679a:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	68b9      	ldr	r1, [r7, #8]
 80167a2:	4610      	mov	r0, r2
 80167a4:	4798      	blx	r3
        n += 2;
 80167a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80167aa:	3302      	adds	r3, #2
 80167ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80167b0:	e002      	b.n	80167b8 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 80167b2:	bf00      	nop
 80167b4:	e000      	b.n	80167b8 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 80167b6:	bf00      	nop
      }
      i++;
 80167b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80167bc:	3301      	adds	r3, #1
 80167be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80167c2:	e012      	b.n	80167ea <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 80167c4:	687a      	ldr	r2, [r7, #4]
 80167c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80167ca:	4413      	add	r3, r2
 80167cc:	781a      	ldrb	r2, [r3, #0]
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	68b9      	ldr	r1, [r7, #8]
 80167d2:	4610      	mov	r0, r2
 80167d4:	4798      	blx	r3
 80167d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80167da:	3301      	adds	r3, #1
 80167dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80167e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80167e4:	3301      	adds	r3, #1
 80167e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 80167ea:	687a      	ldr	r2, [r7, #4]
 80167ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80167f0:	4413      	add	r3, r2
 80167f2:	781b      	ldrb	r3, [r3, #0]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	f47f ac74 	bne.w	80160e2 <mg_vxprintf+0x1e>
    }
  }
  return n;
 80167fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 80167fe:	4618      	mov	r0, r3
 8016800:	3790      	adds	r7, #144	@ 0x90
 8016802:	46bd      	mov	sp, r7
 8016804:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8016808:	08031254 	.word	0x08031254

0801680c <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 801680c:	b580      	push	{r7, lr}
 801680e:	b086      	sub	sp, #24
 8016810:	af00      	add	r7, sp, #0
 8016812:	60f8      	str	r0, [r7, #12]
 8016814:	60b9      	str	r1, [r7, #8]
 8016816:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8016818:	2108      	movs	r1, #8
 801681a:	2001      	movs	r0, #1
 801681c:	f7fe f940 	bl	8014aa0 <mg_calloc>
 8016820:	6178      	str	r0, [r7, #20]
  if (fd != NULL) {
 8016822:	697b      	ldr	r3, [r7, #20]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d013      	beq.n	8016850 <mg_fs_open+0x44>
    fd->fd = fs->op(path, flags);
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	689b      	ldr	r3, [r3, #8]
 801682c:	6879      	ldr	r1, [r7, #4]
 801682e:	68b8      	ldr	r0, [r7, #8]
 8016830:	4798      	blx	r3
 8016832:	4602      	mov	r2, r0
 8016834:	697b      	ldr	r3, [r7, #20]
 8016836:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8016838:	697b      	ldr	r3, [r7, #20]
 801683a:	68fa      	ldr	r2, [r7, #12]
 801683c:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 801683e:	697b      	ldr	r3, [r7, #20]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d104      	bne.n	8016850 <mg_fs_open+0x44>
      free(fd);
 8016846:	6978      	ldr	r0, [r7, #20]
 8016848:	f7f5 fdb6 	bl	800c3b8 <vPortFree>
      fd = NULL;
 801684c:	2300      	movs	r3, #0
 801684e:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8016850:	697b      	ldr	r3, [r7, #20]
}
 8016852:	4618      	mov	r0, r3
 8016854:	3718      	adds	r7, #24
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}

0801685a <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 801685a:	b580      	push	{r7, lr}
 801685c:	b082      	sub	sp, #8
 801685e:	af00      	add	r7, sp, #0
 8016860:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d009      	beq.n	801687c <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	685b      	ldr	r3, [r3, #4]
 801686c:	68db      	ldr	r3, [r3, #12]
 801686e:	687a      	ldr	r2, [r7, #4]
 8016870:	6812      	ldr	r2, [r2, #0]
 8016872:	4610      	mov	r0, r2
 8016874:	4798      	blx	r3
    free(fd);
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	f7f5 fd9e 	bl	800c3b8 <vPortFree>
  }
}
 801687c:	bf00      	nop
 801687e:	3708      	adds	r7, #8
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}

08016884 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8016884:	b480      	push	{r7}
 8016886:	b085      	sub	sp, #20
 8016888:	af00      	add	r7, sp, #0
 801688a:	60f8      	str	r0, [r7, #12]
 801688c:	60b9      	str	r1, [r7, #8]
 801688e:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8016890:	2300      	movs	r3, #0
}
 8016892:	4618      	mov	r0, r3
 8016894:	3714      	adds	r7, #20
 8016896:	46bd      	mov	sp, r7
 8016898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689c:	4770      	bx	lr

0801689e <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 801689e:	b480      	push	{r7}
 80168a0:	b085      	sub	sp, #20
 80168a2:	af00      	add	r7, sp, #0
 80168a4:	60f8      	str	r0, [r7, #12]
 80168a6:	60b9      	str	r1, [r7, #8]
 80168a8:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 80168aa:	bf00      	nop
 80168ac:	3714      	adds	r7, #20
 80168ae:	46bd      	mov	sp, r7
 80168b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b4:	4770      	bx	lr

080168b6 <p_open>:
static void *p_open(const char *path, int flags) {
 80168b6:	b480      	push	{r7}
 80168b8:	b083      	sub	sp, #12
 80168ba:	af00      	add	r7, sp, #0
 80168bc:	6078      	str	r0, [r7, #4]
 80168be:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 80168c0:	2300      	movs	r3, #0
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	370c      	adds	r7, #12
 80168c6:	46bd      	mov	sp, r7
 80168c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168cc:	4770      	bx	lr

080168ce <p_close>:
static void p_close(void *fp) {
 80168ce:	b480      	push	{r7}
 80168d0:	b083      	sub	sp, #12
 80168d2:	af00      	add	r7, sp, #0
 80168d4:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 80168d6:	bf00      	nop
 80168d8:	370c      	adds	r7, #12
 80168da:	46bd      	mov	sp, r7
 80168dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e0:	4770      	bx	lr

080168e2 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 80168e2:	b480      	push	{r7}
 80168e4:	b085      	sub	sp, #20
 80168e6:	af00      	add	r7, sp, #0
 80168e8:	60f8      	str	r0, [r7, #12]
 80168ea:	60b9      	str	r1, [r7, #8]
 80168ec:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 80168ee:	2300      	movs	r3, #0
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	3714      	adds	r7, #20
 80168f4:	46bd      	mov	sp, r7
 80168f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fa:	4770      	bx	lr

080168fc <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 80168fc:	b480      	push	{r7}
 80168fe:	b085      	sub	sp, #20
 8016900:	af00      	add	r7, sp, #0
 8016902:	60f8      	str	r0, [r7, #12]
 8016904:	60b9      	str	r1, [r7, #8]
 8016906:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8016908:	2300      	movs	r3, #0
}
 801690a:	4618      	mov	r0, r3
 801690c:	3714      	adds	r7, #20
 801690e:	46bd      	mov	sp, r7
 8016910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016914:	4770      	bx	lr

08016916 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8016916:	b480      	push	{r7}
 8016918:	b083      	sub	sp, #12
 801691a:	af00      	add	r7, sp, #0
 801691c:	6078      	str	r0, [r7, #4]
 801691e:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8016920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8016924:	4618      	mov	r0, r3
 8016926:	370c      	adds	r7, #12
 8016928:	46bd      	mov	sp, r7
 801692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692e:	4770      	bx	lr

08016930 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8016930:	b480      	push	{r7}
 8016932:	b083      	sub	sp, #12
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
 8016938:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 801693a:	2300      	movs	r3, #0
}
 801693c:	4618      	mov	r0, r3
 801693e:	370c      	adds	r7, #12
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr

08016948 <p_remove>:
static bool p_remove(const char *path) {
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8016950:	2300      	movs	r3, #0
}
 8016952:	4618      	mov	r0, r3
 8016954:	370c      	adds	r7, #12
 8016956:	46bd      	mov	sp, r7
 8016958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695c:	4770      	bx	lr

0801695e <p_mkdir>:
static bool p_mkdir(const char *path) {
 801695e:	b480      	push	{r7}
 8016960:	b083      	sub	sp, #12
 8016962:	af00      	add	r7, sp, #0
 8016964:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8016966:	2300      	movs	r3, #0
}
 8016968:	4618      	mov	r0, r3
 801696a:	370c      	adds	r7, #12
 801696c:	46bd      	mov	sp, r7
 801696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016972:	4770      	bx	lr

08016974 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8016974:	b480      	push	{r7}
 8016976:	b089      	sub	sp, #36	@ 0x24
 8016978:	af00      	add	r7, sp, #0
 801697a:	60f8      	str	r0, [r7, #12]
 801697c:	60b9      	str	r1, [r7, #8]
 801697e:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8016980:	2300      	movs	r3, #0
 8016982:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d02d      	beq.n	80169e6 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	1c5a      	adds	r2, r3, #1
 801698e:	60fa      	str	r2, [r7, #12]
 8016990:	781b      	ldrb	r3, [r3, #0]
 8016992:	61bb      	str	r3, [r7, #24]
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	1c5a      	adds	r2, r3, #1
 8016998:	60ba      	str	r2, [r7, #8]
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 801699e:	69bb      	ldr	r3, [r7, #24]
 80169a0:	2b40      	cmp	r3, #64	@ 0x40
 80169a2:	dd05      	ble.n	80169b0 <mg_ncasecmp+0x3c>
 80169a4:	69bb      	ldr	r3, [r7, #24]
 80169a6:	2b5a      	cmp	r3, #90	@ 0x5a
 80169a8:	dc02      	bgt.n	80169b0 <mg_ncasecmp+0x3c>
 80169aa:	69bb      	ldr	r3, [r7, #24]
 80169ac:	3320      	adds	r3, #32
 80169ae:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 80169b0:	697b      	ldr	r3, [r7, #20]
 80169b2:	2b40      	cmp	r3, #64	@ 0x40
 80169b4:	dd05      	ble.n	80169c2 <mg_ncasecmp+0x4e>
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	2b5a      	cmp	r3, #90	@ 0x5a
 80169ba:	dc02      	bgt.n	80169c2 <mg_ncasecmp+0x4e>
 80169bc:	697b      	ldr	r3, [r7, #20]
 80169be:	3320      	adds	r3, #32
 80169c0:	617b      	str	r3, [r7, #20]
      diff = c - d;
 80169c2:	69ba      	ldr	r2, [r7, #24]
 80169c4:	697b      	ldr	r3, [r7, #20]
 80169c6:	1ad3      	subs	r3, r2, r3
 80169c8:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 80169ca:	69fb      	ldr	r3, [r7, #28]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d10a      	bne.n	80169e6 <mg_ncasecmp+0x72>
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	3b01      	subs	r3, #1
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d005      	beq.n	80169e6 <mg_ncasecmp+0x72>
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	3b01      	subs	r3, #1
 80169de:	607b      	str	r3, [r7, #4]
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d1d1      	bne.n	801698a <mg_ncasecmp+0x16>
  return diff;
 80169e6:	69fb      	ldr	r3, [r7, #28]
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	3724      	adds	r7, #36	@ 0x24
 80169ec:	46bd      	mov	sp, r7
 80169ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f2:	4770      	bx	lr

080169f4 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 80169f4:	b480      	push	{r7}
 80169f6:	b08b      	sub	sp, #44	@ 0x2c
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	f107 0308 	add.w	r3, r7, #8
 80169fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8016a02:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8016a04:	2300      	movs	r3, #0
 8016a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8016a08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016a0c:	61bb      	str	r3, [r7, #24]
 8016a0e:	69bb      	ldr	r3, [r7, #24]
 8016a10:	4a42      	ldr	r2, [pc, #264]	@ (8016b1c <mg_to_size_t+0x128>)
 8016a12:	fba2 2303 	umull	r2, r3, r2, r3
 8016a16:	08db      	lsrs	r3, r3, #3
 8016a18:	617b      	str	r3, [r7, #20]
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	623b      	str	r3, [r7, #32]
 8016a1e:	2300      	movs	r3, #0
 8016a20:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8016a22:	e002      	b.n	8016a2a <mg_to_size_t+0x36>
 8016a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a26:	3301      	adds	r3, #1
 8016a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	d20b      	bcs.n	8016a4a <mg_to_size_t+0x56>
 8016a32:	68ba      	ldr	r2, [r7, #8]
 8016a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a36:	4413      	add	r3, r2
 8016a38:	781b      	ldrb	r3, [r3, #0]
 8016a3a:	2b20      	cmp	r3, #32
 8016a3c:	d0f2      	beq.n	8016a24 <mg_to_size_t+0x30>
 8016a3e:	68ba      	ldr	r2, [r7, #8]
 8016a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a42:	4413      	add	r3, r2
 8016a44:	781b      	ldrb	r3, [r3, #0]
 8016a46:	2b09      	cmp	r3, #9
 8016a48:	d0ec      	beq.n	8016a24 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	d22b      	bcs.n	8016aaa <mg_to_size_t+0xb6>
 8016a52:	68ba      	ldr	r2, [r7, #8]
 8016a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a56:	4413      	add	r3, r2
 8016a58:	781b      	ldrb	r3, [r3, #0]
 8016a5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8016a5c:	d125      	bne.n	8016aaa <mg_to_size_t+0xb6>
 8016a5e:	2300      	movs	r3, #0
 8016a60:	e056      	b.n	8016b10 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a66:	4413      	add	r3, r2
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	3b30      	subs	r3, #48	@ 0x30
 8016a6c:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 8016a6e:	6a3a      	ldr	r2, [r7, #32]
 8016a70:	697b      	ldr	r3, [r7, #20]
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d901      	bls.n	8016a7a <mg_to_size_t+0x86>
 8016a76:	2300      	movs	r3, #0
 8016a78:	e04a      	b.n	8016b10 <mg_to_size_t+0x11c>
    result *= 10;
 8016a7a:	6a3a      	ldr	r2, [r7, #32]
 8016a7c:	4613      	mov	r3, r2
 8016a7e:	009b      	lsls	r3, r3, #2
 8016a80:	4413      	add	r3, r2
 8016a82:	005b      	lsls	r3, r3, #1
 8016a84:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8016a86:	69ba      	ldr	r2, [r7, #24]
 8016a88:	693b      	ldr	r3, [r7, #16]
 8016a8a:	1ad3      	subs	r3, r2, r3
 8016a8c:	6a3a      	ldr	r2, [r7, #32]
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d901      	bls.n	8016a96 <mg_to_size_t+0xa2>
 8016a92:	2300      	movs	r3, #0
 8016a94:	e03c      	b.n	8016b10 <mg_to_size_t+0x11c>
    result += digit;
 8016a96:	6a3a      	ldr	r2, [r7, #32]
 8016a98:	693b      	ldr	r3, [r7, #16]
 8016a9a:	4413      	add	r3, r2
 8016a9c:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 8016a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa0:	3301      	adds	r3, #1
 8016aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8016aa4:	69fb      	ldr	r3, [r7, #28]
 8016aa6:	3301      	adds	r3, #1
 8016aa8:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016aae:	429a      	cmp	r2, r3
 8016ab0:	d20f      	bcs.n	8016ad2 <mg_to_size_t+0xde>
 8016ab2:	68ba      	ldr	r2, [r7, #8]
 8016ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ab6:	4413      	add	r3, r2
 8016ab8:	781b      	ldrb	r3, [r3, #0]
 8016aba:	2b2f      	cmp	r3, #47	@ 0x2f
 8016abc:	d909      	bls.n	8016ad2 <mg_to_size_t+0xde>
 8016abe:	68ba      	ldr	r2, [r7, #8]
 8016ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac2:	4413      	add	r3, r2
 8016ac4:	781b      	ldrb	r3, [r3, #0]
 8016ac6:	2b39      	cmp	r3, #57	@ 0x39
 8016ac8:	d9cb      	bls.n	8016a62 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8016aca:	e002      	b.n	8016ad2 <mg_to_size_t+0xde>
 8016acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ace:	3301      	adds	r3, #1
 8016ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ad6:	429a      	cmp	r2, r3
 8016ad8:	d20b      	bcs.n	8016af2 <mg_to_size_t+0xfe>
 8016ada:	68ba      	ldr	r2, [r7, #8]
 8016adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ade:	4413      	add	r3, r2
 8016ae0:	781b      	ldrb	r3, [r3, #0]
 8016ae2:	2b20      	cmp	r3, #32
 8016ae4:	d0f2      	beq.n	8016acc <mg_to_size_t+0xd8>
 8016ae6:	68ba      	ldr	r2, [r7, #8]
 8016ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aea:	4413      	add	r3, r2
 8016aec:	781b      	ldrb	r3, [r3, #0]
 8016aee:	2b09      	cmp	r3, #9
 8016af0:	d0ec      	beq.n	8016acc <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8016af2:	69fb      	ldr	r3, [r7, #28]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d101      	bne.n	8016afc <mg_to_size_t+0x108>
 8016af8:	2300      	movs	r3, #0
 8016afa:	e009      	b.n	8016b10 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b00:	429a      	cmp	r2, r3
 8016b02:	d001      	beq.n	8016b08 <mg_to_size_t+0x114>
 8016b04:	2300      	movs	r3, #0
 8016b06:	e003      	b.n	8016b10 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	6a3a      	ldr	r2, [r7, #32]
 8016b0c:	601a      	str	r2, [r3, #0]
  return true;
 8016b0e:	2301      	movs	r3, #1
}
 8016b10:	4618      	mov	r0, r3
 8016b12:	372c      	adds	r7, #44	@ 0x2c
 8016b14:	46bd      	mov	sp, r7
 8016b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1a:	4770      	bx	lr
 8016b1c:	cccccccd 	.word	0xcccccccd

08016b20 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8016b20:	b082      	sub	sp, #8
 8016b22:	b580      	push	{r7, lr}
 8016b24:	b08e      	sub	sp, #56	@ 0x38
 8016b26:	af02      	add	r7, sp, #8
 8016b28:	60f8      	str	r0, [r7, #12]
 8016b2a:	1d38      	adds	r0, r7, #4
 8016b2c:	e880 0006 	stmia.w	r0, {r1, r2}
 8016b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8016b32:	f107 0310 	add.w	r3, r7, #16
 8016b36:	2200      	movs	r2, #0
 8016b38:	2100      	movs	r1, #0
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f00a fe97 	bl	802186e <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8016b40:	e023      	b.n	8016b8a <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8016b42:	f107 0318 	add.w	r3, r7, #24
 8016b46:	f107 0220 	add.w	r2, r7, #32
 8016b4a:	213d      	movs	r1, #61	@ 0x3d
 8016b4c:	9100      	str	r1, [sp, #0]
 8016b4e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8016b52:	c903      	ldmia	r1, {r0, r1}
 8016b54:	f00b f835 	bl	8021bc2 <mg_span>
 8016b58:	4603      	mov	r3, r0
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d015      	beq.n	8016b8a <mg_http_var+0x6a>
 8016b5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b62:	429a      	cmp	r2, r3
 8016b64:	d111      	bne.n	8016b8a <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8016b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016b68:	6a39      	ldr	r1, [r7, #32]
 8016b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7ff ff01 	bl	8016974 <mg_ncasecmp>
 8016b72:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d108      	bne.n	8016b8a <mg_http_var+0x6a>
      result = v;
 8016b78:	f107 0310 	add.w	r3, r7, #16
 8016b7c:	f107 0218 	add.w	r2, r7, #24
 8016b80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b84:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8016b88:	e00b      	b.n	8016ba2 <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 8016b8a:	1d3b      	adds	r3, r7, #4
 8016b8c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8016b90:	2126      	movs	r1, #38	@ 0x26
 8016b92:	9100      	str	r1, [sp, #0]
 8016b94:	1d39      	adds	r1, r7, #4
 8016b96:	c903      	ldmia	r1, {r0, r1}
 8016b98:	f00b f813 	bl	8021bc2 <mg_span>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d1cf      	bne.n	8016b42 <mg_http_var+0x22>
    }
  }
  return result;
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	461a      	mov	r2, r3
 8016ba6:	f107 0310 	add.w	r3, r7, #16
 8016baa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016bae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8016bb2:	68f8      	ldr	r0, [r7, #12]
 8016bb4:	3730      	adds	r7, #48	@ 0x30
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016bbc:	b002      	add	sp, #8
 8016bbe:	4770      	bx	lr

08016bc0 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b08c      	sub	sp, #48	@ 0x30
 8016bc4:	af02      	add	r7, sp, #8
 8016bc6:	60f8      	str	r0, [r7, #12]
 8016bc8:	60b9      	str	r1, [r7, #8]
 8016bca:	607a      	str	r2, [r7, #4]
 8016bcc:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d005      	beq.n	8016be0 <mg_http_get_var+0x20>
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d002      	beq.n	8016be0 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	2200      	movs	r2, #0
 8016bde:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d002      	beq.n	8016bec <mg_http_get_var+0x2c>
 8016be6:	683b      	ldr	r3, [r7, #0]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d103      	bne.n	8016bf4 <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 8016bec:	f06f 0301 	mvn.w	r3, #1
 8016bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8016bf2:	e033      	b.n	8016c5c <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d006      	beq.n	8016c0a <mg_http_get_var+0x4a>
 8016bfc:	68bb      	ldr	r3, [r7, #8]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d003      	beq.n	8016c0a <mg_http_get_var+0x4a>
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	685b      	ldr	r3, [r3, #4]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d103      	bne.n	8016c12 <mg_http_get_var+0x52>
    len = -1;  // Bad source
 8016c0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016c10:	e024      	b.n	8016c5c <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8016c12:	f107 031c 	add.w	r3, r7, #28
 8016c16:	68b9      	ldr	r1, [r7, #8]
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f00a fe0b 	bl	8021834 <mg_str_s>
 8016c1e:	f107 0014 	add.w	r0, r7, #20
 8016c22:	68fa      	ldr	r2, [r7, #12]
 8016c24:	6a3b      	ldr	r3, [r7, #32]
 8016c26:	9300      	str	r3, [sp, #0]
 8016c28:	69fb      	ldr	r3, [r7, #28]
 8016c2a:	ca06      	ldmia	r2, {r1, r2}
 8016c2c:	f7ff ff78 	bl	8016b20 <mg_http_var>
    if (v.buf == NULL) {
 8016c30:	697b      	ldr	r3, [r7, #20]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d103      	bne.n	8016c3e <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 8016c36:	f06f 0303 	mvn.w	r3, #3
 8016c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8016c3c:	e00e      	b.n	8016c5c <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8016c3e:	6978      	ldr	r0, [r7, #20]
 8016c40:	69b9      	ldr	r1, [r7, #24]
 8016c42:	2301      	movs	r3, #1
 8016c44:	9300      	str	r3, [sp, #0]
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	687a      	ldr	r2, [r7, #4]
 8016c4a:	f000 f82e 	bl	8016caa <mg_url_decode>
 8016c4e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8016c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	da02      	bge.n	8016c5c <mg_http_get_var+0x9c>
 8016c56:	f06f 0302 	mvn.w	r3, #2
 8016c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 8016c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3728      	adds	r7, #40	@ 0x28
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd80      	pop	{r7, pc}

08016c66 <isx>:

static bool isx(int c) {
 8016c66:	b480      	push	{r7}
 8016c68:	b083      	sub	sp, #12
 8016c6a:	af00      	add	r7, sp, #0
 8016c6c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c72:	dd02      	ble.n	8016c7a <isx+0x14>
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	2b39      	cmp	r3, #57	@ 0x39
 8016c78:	dd0b      	ble.n	8016c92 <isx+0x2c>
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	2b60      	cmp	r3, #96	@ 0x60
 8016c7e:	dd02      	ble.n	8016c86 <isx+0x20>
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	2b66      	cmp	r3, #102	@ 0x66
 8016c84:	dd05      	ble.n	8016c92 <isx+0x2c>
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	2b40      	cmp	r3, #64	@ 0x40
 8016c8a:	dd04      	ble.n	8016c96 <isx+0x30>
         (c >= 'A' && c <= 'F');
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	2b46      	cmp	r3, #70	@ 0x46
 8016c90:	dc01      	bgt.n	8016c96 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8016c92:	2301      	movs	r3, #1
 8016c94:	e000      	b.n	8016c98 <isx+0x32>
 8016c96:	2300      	movs	r3, #0
 8016c98:	f003 0301 	and.w	r3, r3, #1
 8016c9c:	b2db      	uxtb	r3, r3
}
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	370c      	adds	r7, #12
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca8:	4770      	bx	lr

08016caa <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8016caa:	b580      	push	{r7, lr}
 8016cac:	b08a      	sub	sp, #40	@ 0x28
 8016cae:	af02      	add	r7, sp, #8
 8016cb0:	60f8      	str	r0, [r7, #12]
 8016cb2:	60b9      	str	r1, [r7, #8]
 8016cb4:	607a      	str	r2, [r7, #4]
 8016cb6:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8016cb8:	2300      	movs	r3, #0
 8016cba:	61bb      	str	r3, [r7, #24]
 8016cbc:	69bb      	ldr	r3, [r7, #24]
 8016cbe:	61fb      	str	r3, [r7, #28]
 8016cc0:	e059      	b.n	8016d76 <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8016cc2:	68fa      	ldr	r2, [r7, #12]
 8016cc4:	69fb      	ldr	r3, [r7, #28]
 8016cc6:	4413      	add	r3, r2
 8016cc8:	781b      	ldrb	r3, [r3, #0]
 8016cca:	2b25      	cmp	r3, #37	@ 0x25
 8016ccc:	d136      	bne.n	8016d3c <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8016cce:	69fb      	ldr	r3, [r7, #28]
 8016cd0:	3302      	adds	r3, #2
 8016cd2:	68ba      	ldr	r2, [r7, #8]
 8016cd4:	429a      	cmp	r2, r3
 8016cd6:	d92e      	bls.n	8016d36 <mg_url_decode+0x8c>
 8016cd8:	69fb      	ldr	r3, [r7, #28]
 8016cda:	3301      	adds	r3, #1
 8016cdc:	68fa      	ldr	r2, [r7, #12]
 8016cde:	4413      	add	r3, r2
 8016ce0:	781b      	ldrb	r3, [r3, #0]
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f7ff ffbf 	bl	8016c66 <isx>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d023      	beq.n	8016d36 <mg_url_decode+0x8c>
 8016cee:	69fb      	ldr	r3, [r7, #28]
 8016cf0:	3302      	adds	r3, #2
 8016cf2:	68fa      	ldr	r2, [r7, #12]
 8016cf4:	4413      	add	r3, r2
 8016cf6:	781b      	ldrb	r3, [r3, #0]
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f7ff ffb4 	bl	8016c66 <isx>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d018      	beq.n	8016d36 <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8016d04:	69fb      	ldr	r3, [r7, #28]
 8016d06:	3301      	adds	r3, #1
 8016d08:	68fa      	ldr	r2, [r7, #12]
 8016d0a:	18d1      	adds	r1, r2, r3
 8016d0c:	f107 0310 	add.w	r3, r7, #16
 8016d10:	2202      	movs	r2, #2
 8016d12:	4618      	mov	r0, r3
 8016d14:	f00a fdab 	bl	802186e <mg_str_n>
 8016d18:	687a      	ldr	r2, [r7, #4]
 8016d1a:	69bb      	ldr	r3, [r7, #24]
 8016d1c:	4413      	add	r3, r2
 8016d1e:	2201      	movs	r2, #1
 8016d20:	9200      	str	r2, [sp, #0]
 8016d22:	2210      	movs	r2, #16
 8016d24:	f107 0110 	add.w	r1, r7, #16
 8016d28:	c903      	ldmia	r1, {r0, r1}
 8016d2a:	f00a ffa7 	bl	8021c7c <mg_str_to_num>
        i += 2;
 8016d2e:	69fb      	ldr	r3, [r7, #28]
 8016d30:	3302      	adds	r3, #2
 8016d32:	61fb      	str	r3, [r7, #28]
 8016d34:	e019      	b.n	8016d6a <mg_url_decode+0xc0>
      } else {
        return -1;
 8016d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016d3a:	e03a      	b.n	8016db2 <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8016d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d00b      	beq.n	8016d5a <mg_url_decode+0xb0>
 8016d42:	68fa      	ldr	r2, [r7, #12]
 8016d44:	69fb      	ldr	r3, [r7, #28]
 8016d46:	4413      	add	r3, r2
 8016d48:	781b      	ldrb	r3, [r3, #0]
 8016d4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8016d4c:	d105      	bne.n	8016d5a <mg_url_decode+0xb0>
      dst[j] = ' ';
 8016d4e:	687a      	ldr	r2, [r7, #4]
 8016d50:	69bb      	ldr	r3, [r7, #24]
 8016d52:	4413      	add	r3, r2
 8016d54:	2220      	movs	r2, #32
 8016d56:	701a      	strb	r2, [r3, #0]
 8016d58:	e007      	b.n	8016d6a <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 8016d5a:	68fa      	ldr	r2, [r7, #12]
 8016d5c:	69fb      	ldr	r3, [r7, #28]
 8016d5e:	441a      	add	r2, r3
 8016d60:	6879      	ldr	r1, [r7, #4]
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	440b      	add	r3, r1
 8016d66:	7812      	ldrb	r2, [r2, #0]
 8016d68:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8016d6a:	69fb      	ldr	r3, [r7, #28]
 8016d6c:	3301      	adds	r3, #1
 8016d6e:	61fb      	str	r3, [r7, #28]
 8016d70:	69bb      	ldr	r3, [r7, #24]
 8016d72:	3301      	adds	r3, #1
 8016d74:	61bb      	str	r3, [r7, #24]
 8016d76:	69fa      	ldr	r2, [r7, #28]
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	d204      	bcs.n	8016d88 <mg_url_decode+0xde>
 8016d7e:	69bb      	ldr	r3, [r7, #24]
 8016d80:	3301      	adds	r3, #1
 8016d82:	683a      	ldr	r2, [r7, #0]
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d89c      	bhi.n	8016cc2 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8016d88:	69ba      	ldr	r2, [r7, #24]
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	429a      	cmp	r2, r3
 8016d8e:	d204      	bcs.n	8016d9a <mg_url_decode+0xf0>
 8016d90:	687a      	ldr	r2, [r7, #4]
 8016d92:	69bb      	ldr	r3, [r7, #24]
 8016d94:	4413      	add	r3, r2
 8016d96:	2200      	movs	r2, #0
 8016d98:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8016d9a:	69fa      	ldr	r2, [r7, #28]
 8016d9c:	68bb      	ldr	r3, [r7, #8]
 8016d9e:	429a      	cmp	r2, r3
 8016da0:	d305      	bcc.n	8016dae <mg_url_decode+0x104>
 8016da2:	69ba      	ldr	r2, [r7, #24]
 8016da4:	683b      	ldr	r3, [r7, #0]
 8016da6:	429a      	cmp	r2, r3
 8016da8:	d201      	bcs.n	8016dae <mg_url_decode+0x104>
 8016daa:	69bb      	ldr	r3, [r7, #24]
 8016dac:	e001      	b.n	8016db2 <mg_url_decode+0x108>
 8016dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3720      	adds	r7, #32
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}

08016dba <isok>:

static bool isok(uint8_t c) {
 8016dba:	b480      	push	{r7}
 8016dbc:	b083      	sub	sp, #12
 8016dbe:	af00      	add	r7, sp, #0
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 8016dc4:	79fb      	ldrb	r3, [r7, #7]
 8016dc6:	2b0a      	cmp	r3, #10
 8016dc8:	d008      	beq.n	8016ddc <isok+0x22>
 8016dca:	79fb      	ldrb	r3, [r7, #7]
 8016dcc:	2b0d      	cmp	r3, #13
 8016dce:	d005      	beq.n	8016ddc <isok+0x22>
 8016dd0:	79fb      	ldrb	r3, [r7, #7]
 8016dd2:	2b09      	cmp	r3, #9
 8016dd4:	d002      	beq.n	8016ddc <isok+0x22>
 8016dd6:	79fb      	ldrb	r3, [r7, #7]
 8016dd8:	2b1f      	cmp	r3, #31
 8016dda:	d901      	bls.n	8016de0 <isok+0x26>
 8016ddc:	2301      	movs	r3, #1
 8016dde:	e000      	b.n	8016de2 <isok+0x28>
 8016de0:	2300      	movs	r3, #0
 8016de2:	f003 0301 	and.w	r3, r3, #1
 8016de6:	b2db      	uxtb	r3, r3
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	370c      	adds	r7, #12
 8016dec:	46bd      	mov	sp, r7
 8016dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df2:	4770      	bx	lr

08016df4 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b084      	sub	sp, #16
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]
 8016dfc:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 8016dfe:	2300      	movs	r3, #0
 8016e00:	60fb      	str	r3, [r7, #12]
 8016e02:	e03c      	b.n	8016e7e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 8016e04:	687a      	ldr	r2, [r7, #4]
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	4413      	add	r3, r2
 8016e0a:	781b      	ldrb	r3, [r3, #0]
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7ff ffd4 	bl	8016dba <isok>
 8016e12:	4603      	mov	r3, r0
 8016e14:	f083 0301 	eor.w	r3, r3, #1
 8016e18:	b2db      	uxtb	r3, r3
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d002      	beq.n	8016e24 <mg_http_get_request_len+0x30>
 8016e1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016e22:	e031      	b.n	8016e88 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d00c      	beq.n	8016e44 <mg_http_get_request_len+0x50>
 8016e2a:	687a      	ldr	r2, [r7, #4]
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	4413      	add	r3, r2
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	2b0a      	cmp	r3, #10
 8016e34:	d106      	bne.n	8016e44 <mg_http_get_request_len+0x50>
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	3b01      	subs	r3, #1
 8016e3a:	687a      	ldr	r2, [r7, #4]
 8016e3c:	4413      	add	r3, r2
 8016e3e:	781b      	ldrb	r3, [r3, #0]
 8016e40:	2b0a      	cmp	r3, #10
 8016e42:	d016      	beq.n	8016e72 <mg_http_get_request_len+0x7e>
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	2b03      	cmp	r3, #3
 8016e48:	d916      	bls.n	8016e78 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8016e4a:	687a      	ldr	r2, [r7, #4]
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	4413      	add	r3, r2
 8016e50:	781b      	ldrb	r3, [r3, #0]
 8016e52:	2b0a      	cmp	r3, #10
 8016e54:	d110      	bne.n	8016e78 <mg_http_get_request_len+0x84>
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	3b01      	subs	r3, #1
 8016e5a:	687a      	ldr	r2, [r7, #4]
 8016e5c:	4413      	add	r3, r2
 8016e5e:	781b      	ldrb	r3, [r3, #0]
 8016e60:	2b0d      	cmp	r3, #13
 8016e62:	d109      	bne.n	8016e78 <mg_http_get_request_len+0x84>
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	3b02      	subs	r3, #2
 8016e68:	687a      	ldr	r2, [r7, #4]
 8016e6a:	4413      	add	r3, r2
 8016e6c:	781b      	ldrb	r3, [r3, #0]
 8016e6e:	2b0a      	cmp	r3, #10
 8016e70:	d102      	bne.n	8016e78 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	3301      	adds	r3, #1
 8016e76:	e007      	b.n	8016e88 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	3301      	adds	r3, #1
 8016e7c:	60fb      	str	r3, [r7, #12]
 8016e7e:	68fa      	ldr	r2, [r7, #12]
 8016e80:	683b      	ldr	r3, [r7, #0]
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d3be      	bcc.n	8016e04 <mg_http_get_request_len+0x10>
  }
  return 0;
 8016e86:	2300      	movs	r3, #0
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3710      	adds	r7, #16
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}

08016e90 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b088      	sub	sp, #32
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
 8016e98:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8016e9a:	6838      	ldr	r0, [r7, #0]
 8016e9c:	f7e9 fa00 	bl	80002a0 <strlen>
 8016ea0:	61b8      	str	r0, [r7, #24]
 8016ea2:	231e      	movs	r3, #30
 8016ea4:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	61fb      	str	r3, [r7, #28]
 8016eaa:	e01f      	b.n	8016eec <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8016eac:	69fb      	ldr	r3, [r7, #28]
 8016eae:	3302      	adds	r3, #2
 8016eb0:	011b      	lsls	r3, r3, #4
 8016eb2:	687a      	ldr	r2, [r7, #4]
 8016eb4:	4413      	add	r3, r2
 8016eb6:	613b      	str	r3, [r7, #16]
 8016eb8:	69fb      	ldr	r3, [r7, #28]
 8016eba:	011b      	lsls	r3, r3, #4
 8016ebc:	3328      	adds	r3, #40	@ 0x28
 8016ebe:	687a      	ldr	r2, [r7, #4]
 8016ec0:	4413      	add	r3, r2
 8016ec2:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8016ec4:	693b      	ldr	r3, [r7, #16]
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	69ba      	ldr	r2, [r7, #24]
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	d10b      	bne.n	8016ee6 <mg_http_get_header+0x56>
 8016ece:	693b      	ldr	r3, [r7, #16]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	69ba      	ldr	r2, [r7, #24]
 8016ed4:	6839      	ldr	r1, [r7, #0]
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7ff fd4c 	bl	8016974 <mg_ncasecmp>
 8016edc:	4603      	mov	r3, r0
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d101      	bne.n	8016ee6 <mg_http_get_header+0x56>
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	e010      	b.n	8016f08 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8016ee6:	69fb      	ldr	r3, [r7, #28]
 8016ee8:	3301      	adds	r3, #1
 8016eea:	61fb      	str	r3, [r7, #28]
 8016eec:	69fa      	ldr	r2, [r7, #28]
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	429a      	cmp	r2, r3
 8016ef2:	d208      	bcs.n	8016f06 <mg_http_get_header+0x76>
 8016ef4:	687a      	ldr	r2, [r7, #4]
 8016ef6:	69fb      	ldr	r3, [r7, #28]
 8016ef8:	3302      	adds	r3, #2
 8016efa:	011b      	lsls	r3, r3, #4
 8016efc:	4413      	add	r3, r2
 8016efe:	3304      	adds	r3, #4
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d1d2      	bne.n	8016eac <mg_http_get_header+0x1c>
  }
  return NULL;
 8016f06:	2300      	movs	r3, #0
}
 8016f08:	4618      	mov	r0, r3
 8016f0a:	3720      	adds	r7, #32
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	bd80      	pop	{r7, pc}

08016f10 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 8016f10:	b480      	push	{r7}
 8016f12:	b083      	sub	sp, #12
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	4603      	mov	r3, r0
 8016f18:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 8016f1a:	79fb      	ldrb	r3, [r7, #7]
 8016f1c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8016f20:	2b80      	cmp	r3, #128	@ 0x80
 8016f22:	bf0c      	ite	eq
 8016f24:	2301      	moveq	r3, #1
 8016f26:	2300      	movne	r3, #0
 8016f28:	b2db      	uxtb	r3, r3
}
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	370c      	adds	r7, #12
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f34:	4770      	bx	lr

08016f36 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 8016f36:	b580      	push	{r7, lr}
 8016f38:	b086      	sub	sp, #24
 8016f3a:	af00      	add	r7, sp, #0
 8016f3c:	6078      	str	r0, [r7, #4]
 8016f3e:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	617b      	str	r3, [r7, #20]
 8016f44:	697b      	ldr	r3, [r7, #20]
 8016f46:	781b      	ldrb	r3, [r3, #0]
 8016f48:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 8016f4a:	683a      	ldr	r2, [r7, #0]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	1ad3      	subs	r3, r2, r3
 8016f50:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8016f52:	7cfb      	ldrb	r3, [r7, #19]
 8016f54:	2b20      	cmp	r3, #32
 8016f56:	d904      	bls.n	8016f62 <clen+0x2c>
 8016f58:	7cfb      	ldrb	r3, [r7, #19]
 8016f5a:	2b7d      	cmp	r3, #125	@ 0x7d
 8016f5c:	d801      	bhi.n	8016f62 <clen+0x2c>
 8016f5e:	2301      	movs	r3, #1
 8016f60:	e054      	b.n	801700c <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8016f62:	7cfb      	ldrb	r3, [r7, #19]
 8016f64:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8016f68:	2bc0      	cmp	r3, #192	@ 0xc0
 8016f6a:	d10d      	bne.n	8016f88 <clen+0x52>
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	2b01      	cmp	r3, #1
 8016f70:	dd0a      	ble.n	8016f88 <clen+0x52>
 8016f72:	697b      	ldr	r3, [r7, #20]
 8016f74:	3301      	adds	r3, #1
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f7ff ffc9 	bl	8016f10 <vcb>
 8016f7e:	4603      	mov	r3, r0
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d001      	beq.n	8016f88 <clen+0x52>
 8016f84:	2302      	movs	r3, #2
 8016f86:	e041      	b.n	801700c <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8016f88:	7cfb      	ldrb	r3, [r7, #19]
 8016f8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016f8e:	2be0      	cmp	r3, #224	@ 0xe0
 8016f90:	d116      	bne.n	8016fc0 <clen+0x8a>
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	2b02      	cmp	r3, #2
 8016f96:	dd13      	ble.n	8016fc0 <clen+0x8a>
 8016f98:	697b      	ldr	r3, [r7, #20]
 8016f9a:	3301      	adds	r3, #1
 8016f9c:	781b      	ldrb	r3, [r3, #0]
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f7ff ffb6 	bl	8016f10 <vcb>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d00a      	beq.n	8016fc0 <clen+0x8a>
 8016faa:	697b      	ldr	r3, [r7, #20]
 8016fac:	3302      	adds	r3, #2
 8016fae:	781b      	ldrb	r3, [r3, #0]
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f7ff ffad 	bl	8016f10 <vcb>
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d001      	beq.n	8016fc0 <clen+0x8a>
 8016fbc:	2303      	movs	r3, #3
 8016fbe:	e025      	b.n	801700c <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8016fc0:	7cfb      	ldrb	r3, [r7, #19]
 8016fc2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8016fc6:	2bf0      	cmp	r3, #240	@ 0xf0
 8016fc8:	d11f      	bne.n	801700a <clen+0xd4>
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	2b03      	cmp	r3, #3
 8016fce:	dd1c      	ble.n	801700a <clen+0xd4>
 8016fd0:	697b      	ldr	r3, [r7, #20]
 8016fd2:	3301      	adds	r3, #1
 8016fd4:	781b      	ldrb	r3, [r3, #0]
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f7ff ff9a 	bl	8016f10 <vcb>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d013      	beq.n	801700a <clen+0xd4>
 8016fe2:	697b      	ldr	r3, [r7, #20]
 8016fe4:	3302      	adds	r3, #2
 8016fe6:	781b      	ldrb	r3, [r3, #0]
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f7ff ff91 	bl	8016f10 <vcb>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d00a      	beq.n	801700a <clen+0xd4>
 8016ff4:	697b      	ldr	r3, [r7, #20]
 8016ff6:	3303      	adds	r3, #3
 8016ff8:	781b      	ldrb	r3, [r3, #0]
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f7ff ff88 	bl	8016f10 <vcb>
 8017000:	4603      	mov	r3, r0
 8017002:	2b00      	cmp	r3, #0
 8017004:	d001      	beq.n	801700a <clen+0xd4>
    return 4;
 8017006:	2304      	movs	r3, #4
 8017008:	e000      	b.n	801700c <clen+0xd6>
  return 0;
 801700a:	2300      	movs	r3, #0
}
 801700c:	4618      	mov	r0, r3
 801700e:	3718      	adds	r7, #24
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}

08017014 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8017014:	b480      	push	{r7}
 8017016:	b085      	sub	sp, #20
 8017018:	af00      	add	r7, sp, #0
 801701a:	60f8      	str	r0, [r7, #12]
 801701c:	60b9      	str	r1, [r7, #8]
 801701e:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	68fa      	ldr	r2, [r7, #12]
 8017024:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8017026:	e007      	b.n	8017038 <skiptorn+0x24>
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	3301      	adds	r3, #1
 801702c:	60fb      	str	r3, [r7, #12]
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	685b      	ldr	r3, [r3, #4]
 8017032:	1c5a      	adds	r2, r3, #1
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	605a      	str	r2, [r3, #4]
 8017038:	68fa      	ldr	r2, [r7, #12]
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	429a      	cmp	r2, r3
 801703e:	d207      	bcs.n	8017050 <skiptorn+0x3c>
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	781b      	ldrb	r3, [r3, #0]
 8017044:	2b0a      	cmp	r3, #10
 8017046:	d003      	beq.n	8017050 <skiptorn+0x3c>
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	781b      	ldrb	r3, [r3, #0]
 801704c:	2b0d      	cmp	r3, #13
 801704e:	d1eb      	bne.n	8017028 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8017050:	68fa      	ldr	r2, [r7, #12]
 8017052:	68bb      	ldr	r3, [r7, #8]
 8017054:	429a      	cmp	r2, r3
 8017056:	d208      	bcs.n	801706a <skiptorn+0x56>
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	2b0d      	cmp	r3, #13
 801705e:	d106      	bne.n	801706e <skiptorn+0x5a>
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	3301      	adds	r3, #1
 8017064:	781b      	ldrb	r3, [r3, #0]
 8017066:	2b0a      	cmp	r3, #10
 8017068:	d001      	beq.n	801706e <skiptorn+0x5a>
 801706a:	2300      	movs	r3, #0
 801706c:	e017      	b.n	801709e <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801706e:	68fa      	ldr	r2, [r7, #12]
 8017070:	68bb      	ldr	r3, [r7, #8]
 8017072:	429a      	cmp	r2, r3
 8017074:	d206      	bcs.n	8017084 <skiptorn+0x70>
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	781b      	ldrb	r3, [r3, #0]
 801707a:	2b0d      	cmp	r3, #13
 801707c:	d102      	bne.n	8017084 <skiptorn+0x70>
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	3301      	adds	r3, #1
 8017082:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8017084:	68fa      	ldr	r2, [r7, #12]
 8017086:	68bb      	ldr	r3, [r7, #8]
 8017088:	429a      	cmp	r2, r3
 801708a:	d205      	bcs.n	8017098 <skiptorn+0x84>
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	1c5a      	adds	r2, r3, #1
 8017090:	60fa      	str	r2, [r7, #12]
 8017092:	781b      	ldrb	r3, [r3, #0]
 8017094:	2b0a      	cmp	r3, #10
 8017096:	d001      	beq.n	801709c <skiptorn+0x88>
 8017098:	2300      	movs	r3, #0
 801709a:	e000      	b.n	801709e <skiptorn+0x8a>
  return s;
 801709c:	68fb      	ldr	r3, [r7, #12]
}
 801709e:	4618      	mov	r0, r3
 80170a0:	3714      	adds	r7, #20
 80170a2:	46bd      	mov	sp, r7
 80170a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a8:	4770      	bx	lr

080170aa <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 80170aa:	b580      	push	{r7, lr}
 80170ac:	b08a      	sub	sp, #40	@ 0x28
 80170ae:	af00      	add	r7, sp, #0
 80170b0:	60f8      	str	r0, [r7, #12]
 80170b2:	60b9      	str	r1, [r7, #8]
 80170b4:	607a      	str	r2, [r7, #4]
 80170b6:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 80170b8:	2300      	movs	r3, #0
 80170ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80170bc:	e09a      	b.n	80171f4 <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 80170be:	2300      	movs	r3, #0
 80170c0:	61bb      	str	r3, [r7, #24]
 80170c2:	2300      	movs	r3, #0
 80170c4:	61fb      	str	r3, [r7, #28]
 80170c6:	2300      	movs	r3, #0
 80170c8:	613b      	str	r3, [r7, #16]
 80170ca:	2300      	movs	r3, #0
 80170cc:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 80170ce:	68fa      	ldr	r2, [r7, #12]
 80170d0:	68bb      	ldr	r3, [r7, #8]
 80170d2:	429a      	cmp	r2, r3
 80170d4:	d301      	bcc.n	80170da <mg_http_parse_headers+0x30>
 80170d6:	2300      	movs	r3, #0
 80170d8:	e092      	b.n	8017200 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	781b      	ldrb	r3, [r3, #0]
 80170de:	2b0a      	cmp	r3, #10
 80170e0:	f000 808d 	beq.w	80171fe <mg_http_parse_headers+0x154>
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	781b      	ldrb	r3, [r3, #0]
 80170e8:	2b0d      	cmp	r3, #13
 80170ea:	d105      	bne.n	80170f8 <mg_http_parse_headers+0x4e>
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	3301      	adds	r3, #1
 80170f0:	781b      	ldrb	r3, [r3, #0]
 80170f2:	2b0a      	cmp	r3, #10
 80170f4:	f000 8083 	beq.w	80171fe <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 80170fc:	e007      	b.n	801710e <mg_http_parse_headers+0x64>
 80170fe:	68fa      	ldr	r2, [r7, #12]
 8017100:	6a3b      	ldr	r3, [r7, #32]
 8017102:	4413      	add	r3, r2
 8017104:	60fb      	str	r3, [r7, #12]
 8017106:	69fa      	ldr	r2, [r7, #28]
 8017108:	6a3b      	ldr	r3, [r7, #32]
 801710a:	4413      	add	r3, r2
 801710c:	61fb      	str	r3, [r7, #28]
 801710e:	68fa      	ldr	r2, [r7, #12]
 8017110:	68bb      	ldr	r3, [r7, #8]
 8017112:	429a      	cmp	r2, r3
 8017114:	d20b      	bcs.n	801712e <mg_http_parse_headers+0x84>
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	781b      	ldrb	r3, [r3, #0]
 801711a:	2b3a      	cmp	r3, #58	@ 0x3a
 801711c:	d007      	beq.n	801712e <mg_http_parse_headers+0x84>
 801711e:	68b9      	ldr	r1, [r7, #8]
 8017120:	68f8      	ldr	r0, [r7, #12]
 8017122:	f7ff ff08 	bl	8016f36 <clen>
 8017126:	6238      	str	r0, [r7, #32]
 8017128:	6a3b      	ldr	r3, [r7, #32]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d1e7      	bne.n	80170fe <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 801712e:	69fb      	ldr	r3, [r7, #28]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d101      	bne.n	8017138 <mg_http_parse_headers+0x8e>
 8017134:	2300      	movs	r3, #0
 8017136:	e063      	b.n	8017200 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8017138:	68fa      	ldr	r2, [r7, #12]
 801713a:	68bb      	ldr	r3, [r7, #8]
 801713c:	429a      	cmp	r2, r3
 801713e:	d206      	bcs.n	801714e <mg_http_parse_headers+0xa4>
 8017140:	68b9      	ldr	r1, [r7, #8]
 8017142:	68f8      	ldr	r0, [r7, #12]
 8017144:	f7ff fef7 	bl	8016f36 <clen>
 8017148:	4603      	mov	r3, r0
 801714a:	2b00      	cmp	r3, #0
 801714c:	d101      	bne.n	8017152 <mg_http_parse_headers+0xa8>
 801714e:	2300      	movs	r3, #0
 8017150:	e056      	b.n	8017200 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	1c5a      	adds	r2, r3, #1
 8017156:	60fa      	str	r2, [r7, #12]
 8017158:	781b      	ldrb	r3, [r3, #0]
 801715a:	2b3a      	cmp	r3, #58	@ 0x3a
 801715c:	d004      	beq.n	8017168 <mg_http_parse_headers+0xbe>
 801715e:	2300      	movs	r3, #0
 8017160:	e04e      	b.n	8017200 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	3301      	adds	r3, #1
 8017166:	60fb      	str	r3, [r7, #12]
 8017168:	68fa      	ldr	r2, [r7, #12]
 801716a:	68bb      	ldr	r3, [r7, #8]
 801716c:	429a      	cmp	r2, r3
 801716e:	d207      	bcs.n	8017180 <mg_http_parse_headers+0xd6>
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	2b20      	cmp	r3, #32
 8017176:	d0f4      	beq.n	8017162 <mg_http_parse_headers+0xb8>
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	781b      	ldrb	r3, [r3, #0]
 801717c:	2b09      	cmp	r3, #9
 801717e:	d0f0      	beq.n	8017162 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8017180:	f107 0310 	add.w	r3, r7, #16
 8017184:	461a      	mov	r2, r3
 8017186:	68b9      	ldr	r1, [r7, #8]
 8017188:	68f8      	ldr	r0, [r7, #12]
 801718a:	f7ff ff43 	bl	8017014 <skiptorn>
 801718e:	60f8      	str	r0, [r7, #12]
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d104      	bne.n	80171a0 <mg_http_parse_headers+0xf6>
 8017196:	2300      	movs	r3, #0
 8017198:	e032      	b.n	8017200 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 801719a:	697b      	ldr	r3, [r7, #20]
 801719c:	3b01      	subs	r3, #1
 801719e:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 80171a0:	697b      	ldr	r3, [r7, #20]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d00d      	beq.n	80171c2 <mg_http_parse_headers+0x118>
 80171a6:	693a      	ldr	r2, [r7, #16]
 80171a8:	697b      	ldr	r3, [r7, #20]
 80171aa:	3b01      	subs	r3, #1
 80171ac:	4413      	add	r3, r2
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	2b20      	cmp	r3, #32
 80171b2:	d0f2      	beq.n	801719a <mg_http_parse_headers+0xf0>
 80171b4:	693a      	ldr	r2, [r7, #16]
 80171b6:	697b      	ldr	r3, [r7, #20]
 80171b8:	3b01      	subs	r3, #1
 80171ba:	4413      	add	r3, r2
 80171bc:	781b      	ldrb	r3, [r3, #0]
 80171be:	2b09      	cmp	r3, #9
 80171c0:	d0eb      	beq.n	801719a <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 80171c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171c4:	011b      	lsls	r3, r3, #4
 80171c6:	687a      	ldr	r2, [r7, #4]
 80171c8:	4413      	add	r3, r2
 80171ca:	461a      	mov	r2, r3
 80171cc:	f107 0318 	add.w	r3, r7, #24
 80171d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80171d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80171d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171da:	011b      	lsls	r3, r3, #4
 80171dc:	687a      	ldr	r2, [r7, #4]
 80171de:	4413      	add	r3, r2
 80171e0:	3308      	adds	r3, #8
 80171e2:	f107 0210 	add.w	r2, r7, #16
 80171e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171ea:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 80171ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171f0:	3301      	adds	r3, #1
 80171f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80171f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80171f6:	683b      	ldr	r3, [r7, #0]
 80171f8:	429a      	cmp	r2, r3
 80171fa:	f4ff af60 	bcc.w	80170be <mg_http_parse_headers+0x14>
  }
  return true;
 80171fe:	2301      	movs	r3, #1
}
 8017200:	4618      	mov	r0, r3
 8017202:	3728      	adds	r7, #40	@ 0x28
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}

08017208 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8017208:	b580      	push	{r7, lr}
 801720a:	b090      	sub	sp, #64	@ 0x40
 801720c:	af00      	add	r7, sp, #0
 801720e:	60f8      	str	r0, [r7, #12]
 8017210:	60b9      	str	r1, [r7, #8]
 8017212:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8017214:	68b9      	ldr	r1, [r7, #8]
 8017216:	68f8      	ldr	r0, [r7, #12]
 8017218:	f7ff fdec 	bl	8016df4 <mg_http_get_request_len>
 801721c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d003      	beq.n	801722c <mg_http_parse+0x24>
 8017224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017226:	68fa      	ldr	r2, [r7, #12]
 8017228:	4413      	add	r3, r2
 801722a:	e000      	b.n	801722e <mg_http_parse+0x26>
 801722c:	2300      	movs	r3, #0
 801722e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 8017230:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017234:	2100      	movs	r1, #0
 8017236:	6878      	ldr	r0, [r7, #4]
 8017238:	f00e fe8e 	bl	8025f58 <memset>
  if (req_len <= 0) return req_len;
 801723c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801723e:	2b00      	cmp	r3, #0
 8017240:	dc01      	bgt.n	8017246 <mg_http_parse+0x3e>
 8017242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017244:	e13f      	b.n	80174c6 <mg_http_parse+0x2be>

  hm->message.buf = hm->head.buf = (char *) s;
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	68fa      	ldr	r2, [r7, #12]
 801724a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801725e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8017262:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017270:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	68fa      	ldr	r2, [r7, #12]
 8017284:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8017286:	e009      	b.n	801729c <mg_http_parse+0x94>
 8017288:	68fa      	ldr	r2, [r7, #12]
 801728a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801728c:	4413      	add	r3, r2
 801728e:	60fb      	str	r3, [r7, #12]
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	685a      	ldr	r2, [r3, #4]
 8017294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017296:	441a      	add	r2, r3
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	605a      	str	r2, [r3, #4]
 801729c:	68fa      	ldr	r2, [r7, #12]
 801729e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d20b      	bcs.n	80172bc <mg_http_parse+0xb4>
 80172a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80172a6:	68f8      	ldr	r0, [r7, #12]
 80172a8:	f7ff fe45 	bl	8016f36 <clen>
 80172ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80172ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d1e9      	bne.n	8017288 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80172b4:	e002      	b.n	80172bc <mg_http_parse+0xb4>
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	3301      	adds	r3, #1
 80172ba:	60fb      	str	r3, [r7, #12]
 80172bc:	68fa      	ldr	r2, [r7, #12]
 80172be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172c0:	429a      	cmp	r2, r3
 80172c2:	d203      	bcs.n	80172cc <mg_http_parse+0xc4>
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	2b20      	cmp	r3, #32
 80172ca:	d0f4      	beq.n	80172b6 <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	68fa      	ldr	r2, [r7, #12]
 80172d0:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 80172d2:	e009      	b.n	80172e8 <mg_http_parse+0xe0>
 80172d4:	68fa      	ldr	r2, [r7, #12]
 80172d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172d8:	4413      	add	r3, r2
 80172da:	60fb      	str	r3, [r7, #12]
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	68da      	ldr	r2, [r3, #12]
 80172e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172e2:	441a      	add	r2, r3
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	60da      	str	r2, [r3, #12]
 80172e8:	68fa      	ldr	r2, [r7, #12]
 80172ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172ec:	429a      	cmp	r2, r3
 80172ee:	d20b      	bcs.n	8017308 <mg_http_parse+0x100>
 80172f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80172f2:	68f8      	ldr	r0, [r7, #12]
 80172f4:	f7ff fe1f 	bl	8016f36 <clen>
 80172f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80172fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d1e9      	bne.n	80172d4 <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8017300:	e002      	b.n	8017308 <mg_http_parse+0x100>
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	3301      	adds	r3, #1
 8017306:	60fb      	str	r3, [r7, #12]
 8017308:	68fa      	ldr	r2, [r7, #12]
 801730a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801730c:	429a      	cmp	r2, r3
 801730e:	d203      	bcs.n	8017318 <mg_http_parse+0x110>
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	2b20      	cmp	r3, #32
 8017316:	d0f4      	beq.n	8017302 <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	3318      	adds	r3, #24
 801731c:	461a      	mov	r2, r3
 801731e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017320:	68f8      	ldr	r0, [r7, #12]
 8017322:	f7ff fe77 	bl	8017014 <skiptorn>
 8017326:	60f8      	str	r0, [r7, #12]
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d101      	bne.n	8017332 <mg_http_parse+0x12a>
 801732e:	2300      	movs	r3, #0
 8017330:	e0c9      	b.n	80174c6 <mg_http_parse+0x2be>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	6898      	ldr	r0, [r3, #8]
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	68db      	ldr	r3, [r3, #12]
 801733a:	461a      	mov	r2, r3
 801733c:	213f      	movs	r1, #63	@ 0x3f
 801733e:	f7e8 ff5f 	bl	8000200 <memchr>
 8017342:	6338      	str	r0, [r7, #48]	@ 0x30
 8017344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017346:	2b00      	cmp	r3, #0
 8017348:	d015      	beq.n	8017376 <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 801734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801734c:	1c5a      	adds	r2, r3, #1
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	689a      	ldr	r2, [r3, #8]
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	68db      	ldr	r3, [r3, #12]
 801735a:	441a      	add	r2, r3
 801735c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801735e:	3301      	adds	r3, #1
 8017360:	1ad3      	subs	r3, r2, r3
 8017362:	461a      	mov	r2, r3
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	689b      	ldr	r3, [r3, #8]
 801736c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801736e:	1ad3      	subs	r3, r2, r3
 8017370:	461a      	mov	r2, r3
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	685b      	ldr	r3, [r3, #4]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d003      	beq.n	8017386 <mg_http_parse+0x17e>
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	68db      	ldr	r3, [r3, #12]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d102      	bne.n	801738c <mg_http_parse+0x184>
 8017386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801738a:	e09c      	b.n	80174c6 <mg_http_parse+0x2be>

  if (!mg_http_parse_headers(s, end, hm->headers,
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f103 0220 	add.w	r2, r3, #32
 8017392:	231e      	movs	r3, #30
 8017394:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017396:	68f8      	ldr	r0, [r7, #12]
 8017398:	f7ff fe87 	bl	80170aa <mg_http_parse_headers>
 801739c:	4603      	mov	r3, r0
 801739e:	f083 0301 	eor.w	r3, r3, #1
 80173a2:	b2db      	uxtb	r3, r3
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d002      	beq.n	80173ae <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 80173a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80173ac:	e08b      	b.n	80174c6 <mg_http_parse+0x2be>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80173ae:	4948      	ldr	r1, [pc, #288]	@ (80174d0 <mg_http_parse+0x2c8>)
 80173b0:	6878      	ldr	r0, [r7, #4]
 80173b2:	f7ff fd6d 	bl	8016e90 <mg_http_get_header>
 80173b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80173b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d018      	beq.n	80173f0 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 80173c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80173ca:	f7ff fb13 	bl	80169f4 <mg_to_size_t>
 80173ce:	4603      	mov	r3, r0
 80173d0:	f083 0301 	eor.w	r3, r3, #1
 80173d4:	b2db      	uxtb	r3, r3
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d002      	beq.n	80173e0 <mg_http_parse+0x1d8>
 80173da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80173de:	e072      	b.n	80174c6 <mg_http_parse+0x2be>
    hm->message.len = (size_t) req_len + hm->body.len;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80173e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173e8:	441a      	add	r2, r3
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	2205      	movs	r2, #5
 80173f6:	4937      	ldr	r1, [pc, #220]	@ (80174d4 <mg_http_parse+0x2cc>)
 80173f8:	4618      	mov	r0, r3
 80173fa:	f7ff fabb 	bl	8016974 <mg_ncasecmp>
 80173fe:	4603      	mov	r3, r0
 8017400:	2b00      	cmp	r3, #0
 8017402:	bf0c      	ite	eq
 8017404:	2301      	moveq	r3, #1
 8017406:	2300      	movne	r3, #0
 8017408:	b2db      	uxtb	r3, r3
 801740a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (hm->body.len == (size_t) ~0 && !is_response &&
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017412:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017416:	d12a      	bne.n	801746e <mg_http_parse+0x266>
 8017418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801741a:	2b00      	cmp	r3, #0
 801741c:	d127      	bne.n	801746e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 801741e:	f107 0310 	add.w	r3, r7, #16
 8017422:	492d      	ldr	r1, [pc, #180]	@ (80174d8 <mg_http_parse+0x2d0>)
 8017424:	4618      	mov	r0, r3
 8017426:	f00a fa05 	bl	8021834 <mg_str_s>
 801742a:	6879      	ldr	r1, [r7, #4]
 801742c:	f107 0310 	add.w	r3, r7, #16
 8017430:	cb0c      	ldmia	r3, {r2, r3}
 8017432:	c903      	ldmia	r1, {r0, r1}
 8017434:	f00a fa8a 	bl	802194c <mg_strcasecmp>
 8017438:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 801743a:	2b00      	cmp	r3, #0
 801743c:	d017      	beq.n	801746e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 801743e:	f107 0318 	add.w	r3, r7, #24
 8017442:	4926      	ldr	r1, [pc, #152]	@ (80174dc <mg_http_parse+0x2d4>)
 8017444:	4618      	mov	r0, r3
 8017446:	f00a f9f5 	bl	8021834 <mg_str_s>
 801744a:	6879      	ldr	r1, [r7, #4]
 801744c:	f107 0318 	add.w	r3, r7, #24
 8017450:	cb0c      	ldmia	r3, {r2, r3}
 8017452:	c903      	ldmia	r1, {r0, r1}
 8017454:	f00a fa7a 	bl	802194c <mg_strcasecmp>
 8017458:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 801745a:	2b00      	cmp	r3, #0
 801745c:	d007      	beq.n	801746e <mg_http_parse+0x266>
    hm->body.len = 0;
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	2200      	movs	r2, #0
 8017462:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8017466:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017478:	d11b      	bne.n	80174b2 <mg_http_parse+0x2aa>
 801747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801747c:	2b00      	cmp	r3, #0
 801747e:	d018      	beq.n	80174b2 <mg_http_parse+0x2aa>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8017480:	f107 0320 	add.w	r3, r7, #32
 8017484:	4916      	ldr	r1, [pc, #88]	@ (80174e0 <mg_http_parse+0x2d8>)
 8017486:	4618      	mov	r0, r3
 8017488:	f00a f9d4 	bl	8021834 <mg_str_s>
 801748c:	6879      	ldr	r1, [r7, #4]
 801748e:	f107 0320 	add.w	r3, r7, #32
 8017492:	cb0c      	ldmia	r3, {r2, r3}
 8017494:	3108      	adds	r1, #8
 8017496:	c903      	ldmia	r1, {r0, r1}
 8017498:	f00a fa58 	bl	802194c <mg_strcasecmp>
 801749c:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d107      	bne.n	80174b2 <mg_http_parse+0x2aa>
    hm->body.len = 0;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	2200      	movs	r2, #0
 80174a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80174aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80174b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174ba:	429a      	cmp	r2, r3
 80174bc:	d202      	bcs.n	80174c4 <mg_http_parse+0x2bc>
 80174be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80174c2:	e000      	b.n	80174c6 <mg_http_parse+0x2be>

  return req_len;
 80174c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3740      	adds	r7, #64	@ 0x40
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}
 80174ce:	bf00      	nop
 80174d0:	080312b4 	.word	0x080312b4
 80174d4:	080312c4 	.word	0x080312c4
 80174d8:	080312cc 	.word	0x080312cc
 80174dc:	080312d0 	.word	0x080312d0
 80174e0:	080312d8 	.word	0x080312d8

080174e4 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 80174e4:	b480      	push	{r7}
 80174e6:	b083      	sub	sp, #12
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	3b64      	subs	r3, #100	@ 0x64
 80174f0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80174f4:	4293      	cmp	r3, r2
 80174f6:	f200 8469 	bhi.w	8017dcc <mg_http_status_code_str+0x8e8>
 80174fa:	a101      	add	r1, pc, #4	@ (adr r1, 8017500 <mg_http_status_code_str+0x1c>)
 80174fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017500:	08017cd1 	.word	0x08017cd1
 8017504:	08017cd5 	.word	0x08017cd5
 8017508:	08017cd9 	.word	0x08017cd9
 801750c:	08017dcd 	.word	0x08017dcd
 8017510:	08017dcd 	.word	0x08017dcd
 8017514:	08017dcd 	.word	0x08017dcd
 8017518:	08017dcd 	.word	0x08017dcd
 801751c:	08017dcd 	.word	0x08017dcd
 8017520:	08017dcd 	.word	0x08017dcd
 8017524:	08017dcd 	.word	0x08017dcd
 8017528:	08017dcd 	.word	0x08017dcd
 801752c:	08017dcd 	.word	0x08017dcd
 8017530:	08017dcd 	.word	0x08017dcd
 8017534:	08017dcd 	.word	0x08017dcd
 8017538:	08017dcd 	.word	0x08017dcd
 801753c:	08017dcd 	.word	0x08017dcd
 8017540:	08017dcd 	.word	0x08017dcd
 8017544:	08017dcd 	.word	0x08017dcd
 8017548:	08017dcd 	.word	0x08017dcd
 801754c:	08017dcd 	.word	0x08017dcd
 8017550:	08017dcd 	.word	0x08017dcd
 8017554:	08017dcd 	.word	0x08017dcd
 8017558:	08017dcd 	.word	0x08017dcd
 801755c:	08017dcd 	.word	0x08017dcd
 8017560:	08017dcd 	.word	0x08017dcd
 8017564:	08017dcd 	.word	0x08017dcd
 8017568:	08017dcd 	.word	0x08017dcd
 801756c:	08017dcd 	.word	0x08017dcd
 8017570:	08017dcd 	.word	0x08017dcd
 8017574:	08017dcd 	.word	0x08017dcd
 8017578:	08017dcd 	.word	0x08017dcd
 801757c:	08017dcd 	.word	0x08017dcd
 8017580:	08017dcd 	.word	0x08017dcd
 8017584:	08017dcd 	.word	0x08017dcd
 8017588:	08017dcd 	.word	0x08017dcd
 801758c:	08017dcd 	.word	0x08017dcd
 8017590:	08017dcd 	.word	0x08017dcd
 8017594:	08017dcd 	.word	0x08017dcd
 8017598:	08017dcd 	.word	0x08017dcd
 801759c:	08017dcd 	.word	0x08017dcd
 80175a0:	08017dcd 	.word	0x08017dcd
 80175a4:	08017dcd 	.word	0x08017dcd
 80175a8:	08017dcd 	.word	0x08017dcd
 80175ac:	08017dcd 	.word	0x08017dcd
 80175b0:	08017dcd 	.word	0x08017dcd
 80175b4:	08017dcd 	.word	0x08017dcd
 80175b8:	08017dcd 	.word	0x08017dcd
 80175bc:	08017dcd 	.word	0x08017dcd
 80175c0:	08017dcd 	.word	0x08017dcd
 80175c4:	08017dcd 	.word	0x08017dcd
 80175c8:	08017dcd 	.word	0x08017dcd
 80175cc:	08017dcd 	.word	0x08017dcd
 80175d0:	08017dcd 	.word	0x08017dcd
 80175d4:	08017dcd 	.word	0x08017dcd
 80175d8:	08017dcd 	.word	0x08017dcd
 80175dc:	08017dcd 	.word	0x08017dcd
 80175e0:	08017dcd 	.word	0x08017dcd
 80175e4:	08017dcd 	.word	0x08017dcd
 80175e8:	08017dcd 	.word	0x08017dcd
 80175ec:	08017dcd 	.word	0x08017dcd
 80175f0:	08017dcd 	.word	0x08017dcd
 80175f4:	08017dcd 	.word	0x08017dcd
 80175f8:	08017dcd 	.word	0x08017dcd
 80175fc:	08017dcd 	.word	0x08017dcd
 8017600:	08017dcd 	.word	0x08017dcd
 8017604:	08017dcd 	.word	0x08017dcd
 8017608:	08017dcd 	.word	0x08017dcd
 801760c:	08017dcd 	.word	0x08017dcd
 8017610:	08017dcd 	.word	0x08017dcd
 8017614:	08017dcd 	.word	0x08017dcd
 8017618:	08017dcd 	.word	0x08017dcd
 801761c:	08017dcd 	.word	0x08017dcd
 8017620:	08017dcd 	.word	0x08017dcd
 8017624:	08017dcd 	.word	0x08017dcd
 8017628:	08017dcd 	.word	0x08017dcd
 801762c:	08017dcd 	.word	0x08017dcd
 8017630:	08017dcd 	.word	0x08017dcd
 8017634:	08017dcd 	.word	0x08017dcd
 8017638:	08017dcd 	.word	0x08017dcd
 801763c:	08017dcd 	.word	0x08017dcd
 8017640:	08017dcd 	.word	0x08017dcd
 8017644:	08017dcd 	.word	0x08017dcd
 8017648:	08017dcd 	.word	0x08017dcd
 801764c:	08017dcd 	.word	0x08017dcd
 8017650:	08017dcd 	.word	0x08017dcd
 8017654:	08017dcd 	.word	0x08017dcd
 8017658:	08017dcd 	.word	0x08017dcd
 801765c:	08017dcd 	.word	0x08017dcd
 8017660:	08017dcd 	.word	0x08017dcd
 8017664:	08017dcd 	.word	0x08017dcd
 8017668:	08017dcd 	.word	0x08017dcd
 801766c:	08017dcd 	.word	0x08017dcd
 8017670:	08017dcd 	.word	0x08017dcd
 8017674:	08017dcd 	.word	0x08017dcd
 8017678:	08017dcd 	.word	0x08017dcd
 801767c:	08017dcd 	.word	0x08017dcd
 8017680:	08017dcd 	.word	0x08017dcd
 8017684:	08017dcd 	.word	0x08017dcd
 8017688:	08017dcd 	.word	0x08017dcd
 801768c:	08017dcd 	.word	0x08017dcd
 8017690:	08017cdd 	.word	0x08017cdd
 8017694:	08017ce1 	.word	0x08017ce1
 8017698:	08017ce5 	.word	0x08017ce5
 801769c:	08017ce9 	.word	0x08017ce9
 80176a0:	08017ced 	.word	0x08017ced
 80176a4:	08017cf1 	.word	0x08017cf1
 80176a8:	08017cf5 	.word	0x08017cf5
 80176ac:	08017cf9 	.word	0x08017cf9
 80176b0:	08017cfd 	.word	0x08017cfd
 80176b4:	08017dcd 	.word	0x08017dcd
 80176b8:	08017dcd 	.word	0x08017dcd
 80176bc:	08017dcd 	.word	0x08017dcd
 80176c0:	08017dcd 	.word	0x08017dcd
 80176c4:	08017dcd 	.word	0x08017dcd
 80176c8:	08017dcd 	.word	0x08017dcd
 80176cc:	08017dcd 	.word	0x08017dcd
 80176d0:	08017dcd 	.word	0x08017dcd
 80176d4:	08017dcd 	.word	0x08017dcd
 80176d8:	08017dcd 	.word	0x08017dcd
 80176dc:	08017dcd 	.word	0x08017dcd
 80176e0:	08017dcd 	.word	0x08017dcd
 80176e4:	08017dcd 	.word	0x08017dcd
 80176e8:	08017dcd 	.word	0x08017dcd
 80176ec:	08017dcd 	.word	0x08017dcd
 80176f0:	08017dcd 	.word	0x08017dcd
 80176f4:	08017dcd 	.word	0x08017dcd
 80176f8:	08017d01 	.word	0x08017d01
 80176fc:	08017dcd 	.word	0x08017dcd
 8017700:	08017dcd 	.word	0x08017dcd
 8017704:	08017dcd 	.word	0x08017dcd
 8017708:	08017dcd 	.word	0x08017dcd
 801770c:	08017dcd 	.word	0x08017dcd
 8017710:	08017dcd 	.word	0x08017dcd
 8017714:	08017dcd 	.word	0x08017dcd
 8017718:	08017dcd 	.word	0x08017dcd
 801771c:	08017dcd 	.word	0x08017dcd
 8017720:	08017dcd 	.word	0x08017dcd
 8017724:	08017dcd 	.word	0x08017dcd
 8017728:	08017dcd 	.word	0x08017dcd
 801772c:	08017dcd 	.word	0x08017dcd
 8017730:	08017dcd 	.word	0x08017dcd
 8017734:	08017dcd 	.word	0x08017dcd
 8017738:	08017dcd 	.word	0x08017dcd
 801773c:	08017dcd 	.word	0x08017dcd
 8017740:	08017dcd 	.word	0x08017dcd
 8017744:	08017dcd 	.word	0x08017dcd
 8017748:	08017dcd 	.word	0x08017dcd
 801774c:	08017dcd 	.word	0x08017dcd
 8017750:	08017dcd 	.word	0x08017dcd
 8017754:	08017dcd 	.word	0x08017dcd
 8017758:	08017dcd 	.word	0x08017dcd
 801775c:	08017dcd 	.word	0x08017dcd
 8017760:	08017dcd 	.word	0x08017dcd
 8017764:	08017dcd 	.word	0x08017dcd
 8017768:	08017dcd 	.word	0x08017dcd
 801776c:	08017dcd 	.word	0x08017dcd
 8017770:	08017dcd 	.word	0x08017dcd
 8017774:	08017dcd 	.word	0x08017dcd
 8017778:	08017dcd 	.word	0x08017dcd
 801777c:	08017dcd 	.word	0x08017dcd
 8017780:	08017dcd 	.word	0x08017dcd
 8017784:	08017dcd 	.word	0x08017dcd
 8017788:	08017dcd 	.word	0x08017dcd
 801778c:	08017dcd 	.word	0x08017dcd
 8017790:	08017dcd 	.word	0x08017dcd
 8017794:	08017dcd 	.word	0x08017dcd
 8017798:	08017dcd 	.word	0x08017dcd
 801779c:	08017dcd 	.word	0x08017dcd
 80177a0:	08017dcd 	.word	0x08017dcd
 80177a4:	08017dcd 	.word	0x08017dcd
 80177a8:	08017dcd 	.word	0x08017dcd
 80177ac:	08017dcd 	.word	0x08017dcd
 80177b0:	08017dcd 	.word	0x08017dcd
 80177b4:	08017dcd 	.word	0x08017dcd
 80177b8:	08017dcd 	.word	0x08017dcd
 80177bc:	08017dcd 	.word	0x08017dcd
 80177c0:	08017dcd 	.word	0x08017dcd
 80177c4:	08017dcd 	.word	0x08017dcd
 80177c8:	08017dcd 	.word	0x08017dcd
 80177cc:	08017dcd 	.word	0x08017dcd
 80177d0:	08017dcd 	.word	0x08017dcd
 80177d4:	08017dcd 	.word	0x08017dcd
 80177d8:	08017dcd 	.word	0x08017dcd
 80177dc:	08017dcd 	.word	0x08017dcd
 80177e0:	08017dcd 	.word	0x08017dcd
 80177e4:	08017dcd 	.word	0x08017dcd
 80177e8:	08017dcd 	.word	0x08017dcd
 80177ec:	08017dcd 	.word	0x08017dcd
 80177f0:	08017dcd 	.word	0x08017dcd
 80177f4:	08017dcd 	.word	0x08017dcd
 80177f8:	08017dcd 	.word	0x08017dcd
 80177fc:	08017dcd 	.word	0x08017dcd
 8017800:	08017dcd 	.word	0x08017dcd
 8017804:	08017dcd 	.word	0x08017dcd
 8017808:	08017dcd 	.word	0x08017dcd
 801780c:	08017dcd 	.word	0x08017dcd
 8017810:	08017dcd 	.word	0x08017dcd
 8017814:	08017dcd 	.word	0x08017dcd
 8017818:	08017dcd 	.word	0x08017dcd
 801781c:	08017dcd 	.word	0x08017dcd
 8017820:	08017d05 	.word	0x08017d05
 8017824:	08017d09 	.word	0x08017d09
 8017828:	08017d0d 	.word	0x08017d0d
 801782c:	08017d11 	.word	0x08017d11
 8017830:	08017d15 	.word	0x08017d15
 8017834:	08017d19 	.word	0x08017d19
 8017838:	08017dcd 	.word	0x08017dcd
 801783c:	08017d1d 	.word	0x08017d1d
 8017840:	08017d21 	.word	0x08017d21
 8017844:	08017dcd 	.word	0x08017dcd
 8017848:	08017dcd 	.word	0x08017dcd
 801784c:	08017dcd 	.word	0x08017dcd
 8017850:	08017dcd 	.word	0x08017dcd
 8017854:	08017dcd 	.word	0x08017dcd
 8017858:	08017dcd 	.word	0x08017dcd
 801785c:	08017dcd 	.word	0x08017dcd
 8017860:	08017dcd 	.word	0x08017dcd
 8017864:	08017dcd 	.word	0x08017dcd
 8017868:	08017dcd 	.word	0x08017dcd
 801786c:	08017dcd 	.word	0x08017dcd
 8017870:	08017dcd 	.word	0x08017dcd
 8017874:	08017dcd 	.word	0x08017dcd
 8017878:	08017dcd 	.word	0x08017dcd
 801787c:	08017dcd 	.word	0x08017dcd
 8017880:	08017dcd 	.word	0x08017dcd
 8017884:	08017dcd 	.word	0x08017dcd
 8017888:	08017dcd 	.word	0x08017dcd
 801788c:	08017dcd 	.word	0x08017dcd
 8017890:	08017dcd 	.word	0x08017dcd
 8017894:	08017dcd 	.word	0x08017dcd
 8017898:	08017dcd 	.word	0x08017dcd
 801789c:	08017dcd 	.word	0x08017dcd
 80178a0:	08017dcd 	.word	0x08017dcd
 80178a4:	08017dcd 	.word	0x08017dcd
 80178a8:	08017dcd 	.word	0x08017dcd
 80178ac:	08017dcd 	.word	0x08017dcd
 80178b0:	08017dcd 	.word	0x08017dcd
 80178b4:	08017dcd 	.word	0x08017dcd
 80178b8:	08017dcd 	.word	0x08017dcd
 80178bc:	08017dcd 	.word	0x08017dcd
 80178c0:	08017dcd 	.word	0x08017dcd
 80178c4:	08017dcd 	.word	0x08017dcd
 80178c8:	08017dcd 	.word	0x08017dcd
 80178cc:	08017dcd 	.word	0x08017dcd
 80178d0:	08017dcd 	.word	0x08017dcd
 80178d4:	08017dcd 	.word	0x08017dcd
 80178d8:	08017dcd 	.word	0x08017dcd
 80178dc:	08017dcd 	.word	0x08017dcd
 80178e0:	08017dcd 	.word	0x08017dcd
 80178e4:	08017dcd 	.word	0x08017dcd
 80178e8:	08017dcd 	.word	0x08017dcd
 80178ec:	08017dcd 	.word	0x08017dcd
 80178f0:	08017dcd 	.word	0x08017dcd
 80178f4:	08017dcd 	.word	0x08017dcd
 80178f8:	08017dcd 	.word	0x08017dcd
 80178fc:	08017dcd 	.word	0x08017dcd
 8017900:	08017dcd 	.word	0x08017dcd
 8017904:	08017dcd 	.word	0x08017dcd
 8017908:	08017dcd 	.word	0x08017dcd
 801790c:	08017dcd 	.word	0x08017dcd
 8017910:	08017dcd 	.word	0x08017dcd
 8017914:	08017dcd 	.word	0x08017dcd
 8017918:	08017dcd 	.word	0x08017dcd
 801791c:	08017dcd 	.word	0x08017dcd
 8017920:	08017dcd 	.word	0x08017dcd
 8017924:	08017dcd 	.word	0x08017dcd
 8017928:	08017dcd 	.word	0x08017dcd
 801792c:	08017dcd 	.word	0x08017dcd
 8017930:	08017dcd 	.word	0x08017dcd
 8017934:	08017dcd 	.word	0x08017dcd
 8017938:	08017dcd 	.word	0x08017dcd
 801793c:	08017dcd 	.word	0x08017dcd
 8017940:	08017dcd 	.word	0x08017dcd
 8017944:	08017dcd 	.word	0x08017dcd
 8017948:	08017dcd 	.word	0x08017dcd
 801794c:	08017dcd 	.word	0x08017dcd
 8017950:	08017dcd 	.word	0x08017dcd
 8017954:	08017dcd 	.word	0x08017dcd
 8017958:	08017dcd 	.word	0x08017dcd
 801795c:	08017dcd 	.word	0x08017dcd
 8017960:	08017dcd 	.word	0x08017dcd
 8017964:	08017dcd 	.word	0x08017dcd
 8017968:	08017dcd 	.word	0x08017dcd
 801796c:	08017dcd 	.word	0x08017dcd
 8017970:	08017dcd 	.word	0x08017dcd
 8017974:	08017dcd 	.word	0x08017dcd
 8017978:	08017dcd 	.word	0x08017dcd
 801797c:	08017dcd 	.word	0x08017dcd
 8017980:	08017dcd 	.word	0x08017dcd
 8017984:	08017dcd 	.word	0x08017dcd
 8017988:	08017dcd 	.word	0x08017dcd
 801798c:	08017dcd 	.word	0x08017dcd
 8017990:	08017dcd 	.word	0x08017dcd
 8017994:	08017dcd 	.word	0x08017dcd
 8017998:	08017dcd 	.word	0x08017dcd
 801799c:	08017dcd 	.word	0x08017dcd
 80179a0:	08017dcd 	.word	0x08017dcd
 80179a4:	08017dcd 	.word	0x08017dcd
 80179a8:	08017dcd 	.word	0x08017dcd
 80179ac:	08017dcd 	.word	0x08017dcd
 80179b0:	08017d25 	.word	0x08017d25
 80179b4:	08017d29 	.word	0x08017d29
 80179b8:	08017d2d 	.word	0x08017d2d
 80179bc:	08017d31 	.word	0x08017d31
 80179c0:	08017d35 	.word	0x08017d35
 80179c4:	08017d39 	.word	0x08017d39
 80179c8:	08017d3d 	.word	0x08017d3d
 80179cc:	08017d41 	.word	0x08017d41
 80179d0:	08017d45 	.word	0x08017d45
 80179d4:	08017d49 	.word	0x08017d49
 80179d8:	08017d4d 	.word	0x08017d4d
 80179dc:	08017d51 	.word	0x08017d51
 80179e0:	08017d55 	.word	0x08017d55
 80179e4:	08017d59 	.word	0x08017d59
 80179e8:	08017d5d 	.word	0x08017d5d
 80179ec:	08017d61 	.word	0x08017d61
 80179f0:	08017d65 	.word	0x08017d65
 80179f4:	08017d69 	.word	0x08017d69
 80179f8:	08017d6d 	.word	0x08017d6d
 80179fc:	08017dcd 	.word	0x08017dcd
 8017a00:	08017dcd 	.word	0x08017dcd
 8017a04:	08017d71 	.word	0x08017d71
 8017a08:	08017d75 	.word	0x08017d75
 8017a0c:	08017d79 	.word	0x08017d79
 8017a10:	08017d7d 	.word	0x08017d7d
 8017a14:	08017dcd 	.word	0x08017dcd
 8017a18:	08017d81 	.word	0x08017d81
 8017a1c:	08017dcd 	.word	0x08017dcd
 8017a20:	08017d85 	.word	0x08017d85
 8017a24:	08017d89 	.word	0x08017d89
 8017a28:	08017dcd 	.word	0x08017dcd
 8017a2c:	08017d8d 	.word	0x08017d8d
 8017a30:	08017dcd 	.word	0x08017dcd
 8017a34:	08017dcd 	.word	0x08017dcd
 8017a38:	08017dcd 	.word	0x08017dcd
 8017a3c:	08017dcd 	.word	0x08017dcd
 8017a40:	08017dcd 	.word	0x08017dcd
 8017a44:	08017dcd 	.word	0x08017dcd
 8017a48:	08017dcd 	.word	0x08017dcd
 8017a4c:	08017dcd 	.word	0x08017dcd
 8017a50:	08017dcd 	.word	0x08017dcd
 8017a54:	08017dcd 	.word	0x08017dcd
 8017a58:	08017dcd 	.word	0x08017dcd
 8017a5c:	08017dcd 	.word	0x08017dcd
 8017a60:	08017d91 	.word	0x08017d91
 8017a64:	08017dcd 	.word	0x08017dcd
 8017a68:	08017dcd 	.word	0x08017dcd
 8017a6c:	08017dcd 	.word	0x08017dcd
 8017a70:	08017dcd 	.word	0x08017dcd
 8017a74:	08017dcd 	.word	0x08017dcd
 8017a78:	08017dcd 	.word	0x08017dcd
 8017a7c:	08017d95 	.word	0x08017d95
 8017a80:	08017dcd 	.word	0x08017dcd
 8017a84:	08017dcd 	.word	0x08017dcd
 8017a88:	08017dcd 	.word	0x08017dcd
 8017a8c:	08017dcd 	.word	0x08017dcd
 8017a90:	08017dcd 	.word	0x08017dcd
 8017a94:	08017dcd 	.word	0x08017dcd
 8017a98:	08017dcd 	.word	0x08017dcd
 8017a9c:	08017dcd 	.word	0x08017dcd
 8017aa0:	08017dcd 	.word	0x08017dcd
 8017aa4:	08017dcd 	.word	0x08017dcd
 8017aa8:	08017dcd 	.word	0x08017dcd
 8017aac:	08017dcd 	.word	0x08017dcd
 8017ab0:	08017dcd 	.word	0x08017dcd
 8017ab4:	08017dcd 	.word	0x08017dcd
 8017ab8:	08017dcd 	.word	0x08017dcd
 8017abc:	08017dcd 	.word	0x08017dcd
 8017ac0:	08017dcd 	.word	0x08017dcd
 8017ac4:	08017dcd 	.word	0x08017dcd
 8017ac8:	08017dcd 	.word	0x08017dcd
 8017acc:	08017dcd 	.word	0x08017dcd
 8017ad0:	08017dcd 	.word	0x08017dcd
 8017ad4:	08017dcd 	.word	0x08017dcd
 8017ad8:	08017dcd 	.word	0x08017dcd
 8017adc:	08017dcd 	.word	0x08017dcd
 8017ae0:	08017dcd 	.word	0x08017dcd
 8017ae4:	08017dcd 	.word	0x08017dcd
 8017ae8:	08017dcd 	.word	0x08017dcd
 8017aec:	08017dcd 	.word	0x08017dcd
 8017af0:	08017dcd 	.word	0x08017dcd
 8017af4:	08017dcd 	.word	0x08017dcd
 8017af8:	08017dcd 	.word	0x08017dcd
 8017afc:	08017dcd 	.word	0x08017dcd
 8017b00:	08017dcd 	.word	0x08017dcd
 8017b04:	08017dcd 	.word	0x08017dcd
 8017b08:	08017dcd 	.word	0x08017dcd
 8017b0c:	08017dcd 	.word	0x08017dcd
 8017b10:	08017dcd 	.word	0x08017dcd
 8017b14:	08017dcd 	.word	0x08017dcd
 8017b18:	08017dcd 	.word	0x08017dcd
 8017b1c:	08017dcd 	.word	0x08017dcd
 8017b20:	08017dcd 	.word	0x08017dcd
 8017b24:	08017dcd 	.word	0x08017dcd
 8017b28:	08017dcd 	.word	0x08017dcd
 8017b2c:	08017dcd 	.word	0x08017dcd
 8017b30:	08017dcd 	.word	0x08017dcd
 8017b34:	08017dcd 	.word	0x08017dcd
 8017b38:	08017dcd 	.word	0x08017dcd
 8017b3c:	08017d99 	.word	0x08017d99
 8017b40:	08017d9d 	.word	0x08017d9d
 8017b44:	08017da1 	.word	0x08017da1
 8017b48:	08017da5 	.word	0x08017da5
 8017b4c:	08017da9 	.word	0x08017da9
 8017b50:	08017dad 	.word	0x08017dad
 8017b54:	08017db1 	.word	0x08017db1
 8017b58:	08017db5 	.word	0x08017db5
 8017b5c:	08017db9 	.word	0x08017db9
 8017b60:	08017dbd 	.word	0x08017dbd
 8017b64:	08017dcd 	.word	0x08017dcd
 8017b68:	08017dc1 	.word	0x08017dc1
 8017b6c:	08017dc5 	.word	0x08017dc5
 8017b70:	08017dcd 	.word	0x08017dcd
 8017b74:	08017dcd 	.word	0x08017dcd
 8017b78:	08017dcd 	.word	0x08017dcd
 8017b7c:	08017dcd 	.word	0x08017dcd
 8017b80:	08017dcd 	.word	0x08017dcd
 8017b84:	08017dcd 	.word	0x08017dcd
 8017b88:	08017dcd 	.word	0x08017dcd
 8017b8c:	08017dcd 	.word	0x08017dcd
 8017b90:	08017dcd 	.word	0x08017dcd
 8017b94:	08017dcd 	.word	0x08017dcd
 8017b98:	08017dcd 	.word	0x08017dcd
 8017b9c:	08017dcd 	.word	0x08017dcd
 8017ba0:	08017dcd 	.word	0x08017dcd
 8017ba4:	08017dcd 	.word	0x08017dcd
 8017ba8:	08017dcd 	.word	0x08017dcd
 8017bac:	08017dcd 	.word	0x08017dcd
 8017bb0:	08017dcd 	.word	0x08017dcd
 8017bb4:	08017dcd 	.word	0x08017dcd
 8017bb8:	08017dcd 	.word	0x08017dcd
 8017bbc:	08017dcd 	.word	0x08017dcd
 8017bc0:	08017dcd 	.word	0x08017dcd
 8017bc4:	08017dcd 	.word	0x08017dcd
 8017bc8:	08017dcd 	.word	0x08017dcd
 8017bcc:	08017dcd 	.word	0x08017dcd
 8017bd0:	08017dcd 	.word	0x08017dcd
 8017bd4:	08017dcd 	.word	0x08017dcd
 8017bd8:	08017dcd 	.word	0x08017dcd
 8017bdc:	08017dcd 	.word	0x08017dcd
 8017be0:	08017dcd 	.word	0x08017dcd
 8017be4:	08017dcd 	.word	0x08017dcd
 8017be8:	08017dcd 	.word	0x08017dcd
 8017bec:	08017dcd 	.word	0x08017dcd
 8017bf0:	08017dcd 	.word	0x08017dcd
 8017bf4:	08017dcd 	.word	0x08017dcd
 8017bf8:	08017dcd 	.word	0x08017dcd
 8017bfc:	08017dcd 	.word	0x08017dcd
 8017c00:	08017dcd 	.word	0x08017dcd
 8017c04:	08017dcd 	.word	0x08017dcd
 8017c08:	08017dcd 	.word	0x08017dcd
 8017c0c:	08017dcd 	.word	0x08017dcd
 8017c10:	08017dcd 	.word	0x08017dcd
 8017c14:	08017dcd 	.word	0x08017dcd
 8017c18:	08017dcd 	.word	0x08017dcd
 8017c1c:	08017dcd 	.word	0x08017dcd
 8017c20:	08017dcd 	.word	0x08017dcd
 8017c24:	08017dcd 	.word	0x08017dcd
 8017c28:	08017dcd 	.word	0x08017dcd
 8017c2c:	08017dcd 	.word	0x08017dcd
 8017c30:	08017dcd 	.word	0x08017dcd
 8017c34:	08017dcd 	.word	0x08017dcd
 8017c38:	08017dcd 	.word	0x08017dcd
 8017c3c:	08017dcd 	.word	0x08017dcd
 8017c40:	08017dcd 	.word	0x08017dcd
 8017c44:	08017dcd 	.word	0x08017dcd
 8017c48:	08017dcd 	.word	0x08017dcd
 8017c4c:	08017dcd 	.word	0x08017dcd
 8017c50:	08017dcd 	.word	0x08017dcd
 8017c54:	08017dcd 	.word	0x08017dcd
 8017c58:	08017dcd 	.word	0x08017dcd
 8017c5c:	08017dcd 	.word	0x08017dcd
 8017c60:	08017dcd 	.word	0x08017dcd
 8017c64:	08017dcd 	.word	0x08017dcd
 8017c68:	08017dcd 	.word	0x08017dcd
 8017c6c:	08017dcd 	.word	0x08017dcd
 8017c70:	08017dcd 	.word	0x08017dcd
 8017c74:	08017dcd 	.word	0x08017dcd
 8017c78:	08017dcd 	.word	0x08017dcd
 8017c7c:	08017dcd 	.word	0x08017dcd
 8017c80:	08017dcd 	.word	0x08017dcd
 8017c84:	08017dcd 	.word	0x08017dcd
 8017c88:	08017dcd 	.word	0x08017dcd
 8017c8c:	08017dcd 	.word	0x08017dcd
 8017c90:	08017dcd 	.word	0x08017dcd
 8017c94:	08017dcd 	.word	0x08017dcd
 8017c98:	08017dcd 	.word	0x08017dcd
 8017c9c:	08017dcd 	.word	0x08017dcd
 8017ca0:	08017dcd 	.word	0x08017dcd
 8017ca4:	08017dcd 	.word	0x08017dcd
 8017ca8:	08017dcd 	.word	0x08017dcd
 8017cac:	08017dcd 	.word	0x08017dcd
 8017cb0:	08017dcd 	.word	0x08017dcd
 8017cb4:	08017dcd 	.word	0x08017dcd
 8017cb8:	08017dcd 	.word	0x08017dcd
 8017cbc:	08017dcd 	.word	0x08017dcd
 8017cc0:	08017dcd 	.word	0x08017dcd
 8017cc4:	08017dcd 	.word	0x08017dcd
 8017cc8:	08017dcd 	.word	0x08017dcd
 8017ccc:	08017dc9 	.word	0x08017dc9
    case 100: return "Continue";
 8017cd0:	4b42      	ldr	r3, [pc, #264]	@ (8017ddc <mg_http_status_code_str+0x8f8>)
 8017cd2:	e07c      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8017cd4:	4b42      	ldr	r3, [pc, #264]	@ (8017de0 <mg_http_status_code_str+0x8fc>)
 8017cd6:	e07a      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8017cd8:	4b42      	ldr	r3, [pc, #264]	@ (8017de4 <mg_http_status_code_str+0x900>)
 8017cda:	e078      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8017cdc:	4b42      	ldr	r3, [pc, #264]	@ (8017de8 <mg_http_status_code_str+0x904>)
 8017cde:	e076      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8017ce0:	4b42      	ldr	r3, [pc, #264]	@ (8017dec <mg_http_status_code_str+0x908>)
 8017ce2:	e074      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8017ce4:	4b42      	ldr	r3, [pc, #264]	@ (8017df0 <mg_http_status_code_str+0x90c>)
 8017ce6:	e072      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8017ce8:	4b42      	ldr	r3, [pc, #264]	@ (8017df4 <mg_http_status_code_str+0x910>)
 8017cea:	e070      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8017cec:	4b42      	ldr	r3, [pc, #264]	@ (8017df8 <mg_http_status_code_str+0x914>)
 8017cee:	e06e      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8017cf0:	4b42      	ldr	r3, [pc, #264]	@ (8017dfc <mg_http_status_code_str+0x918>)
 8017cf2:	e06c      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8017cf4:	4b42      	ldr	r3, [pc, #264]	@ (8017e00 <mg_http_status_code_str+0x91c>)
 8017cf6:	e06a      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8017cf8:	4b42      	ldr	r3, [pc, #264]	@ (8017e04 <mg_http_status_code_str+0x920>)
 8017cfa:	e068      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8017cfc:	4b42      	ldr	r3, [pc, #264]	@ (8017e08 <mg_http_status_code_str+0x924>)
 8017cfe:	e066      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8017d00:	4b42      	ldr	r3, [pc, #264]	@ (8017e0c <mg_http_status_code_str+0x928>)
 8017d02:	e064      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8017d04:	4b42      	ldr	r3, [pc, #264]	@ (8017e10 <mg_http_status_code_str+0x92c>)
 8017d06:	e062      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8017d08:	4b42      	ldr	r3, [pc, #264]	@ (8017e14 <mg_http_status_code_str+0x930>)
 8017d0a:	e060      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8017d0c:	4b42      	ldr	r3, [pc, #264]	@ (8017e18 <mg_http_status_code_str+0x934>)
 8017d0e:	e05e      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8017d10:	4b42      	ldr	r3, [pc, #264]	@ (8017e1c <mg_http_status_code_str+0x938>)
 8017d12:	e05c      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8017d14:	4b42      	ldr	r3, [pc, #264]	@ (8017e20 <mg_http_status_code_str+0x93c>)
 8017d16:	e05a      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8017d18:	4b42      	ldr	r3, [pc, #264]	@ (8017e24 <mg_http_status_code_str+0x940>)
 8017d1a:	e058      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8017d1c:	4b42      	ldr	r3, [pc, #264]	@ (8017e28 <mg_http_status_code_str+0x944>)
 8017d1e:	e056      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8017d20:	4b42      	ldr	r3, [pc, #264]	@ (8017e2c <mg_http_status_code_str+0x948>)
 8017d22:	e054      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8017d24:	4b42      	ldr	r3, [pc, #264]	@ (8017e30 <mg_http_status_code_str+0x94c>)
 8017d26:	e052      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8017d28:	4b42      	ldr	r3, [pc, #264]	@ (8017e34 <mg_http_status_code_str+0x950>)
 8017d2a:	e050      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8017d2c:	4b42      	ldr	r3, [pc, #264]	@ (8017e38 <mg_http_status_code_str+0x954>)
 8017d2e:	e04e      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8017d30:	4b42      	ldr	r3, [pc, #264]	@ (8017e3c <mg_http_status_code_str+0x958>)
 8017d32:	e04c      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8017d34:	4b42      	ldr	r3, [pc, #264]	@ (8017e40 <mg_http_status_code_str+0x95c>)
 8017d36:	e04a      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8017d38:	4b42      	ldr	r3, [pc, #264]	@ (8017e44 <mg_http_status_code_str+0x960>)
 8017d3a:	e048      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8017d3c:	4b42      	ldr	r3, [pc, #264]	@ (8017e48 <mg_http_status_code_str+0x964>)
 8017d3e:	e046      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8017d40:	4b42      	ldr	r3, [pc, #264]	@ (8017e4c <mg_http_status_code_str+0x968>)
 8017d42:	e044      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8017d44:	4b42      	ldr	r3, [pc, #264]	@ (8017e50 <mg_http_status_code_str+0x96c>)
 8017d46:	e042      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8017d48:	4b42      	ldr	r3, [pc, #264]	@ (8017e54 <mg_http_status_code_str+0x970>)
 8017d4a:	e040      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8017d4c:	4b42      	ldr	r3, [pc, #264]	@ (8017e58 <mg_http_status_code_str+0x974>)
 8017d4e:	e03e      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8017d50:	4b42      	ldr	r3, [pc, #264]	@ (8017e5c <mg_http_status_code_str+0x978>)
 8017d52:	e03c      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8017d54:	4b42      	ldr	r3, [pc, #264]	@ (8017e60 <mg_http_status_code_str+0x97c>)
 8017d56:	e03a      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8017d58:	4b42      	ldr	r3, [pc, #264]	@ (8017e64 <mg_http_status_code_str+0x980>)
 8017d5a:	e038      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8017d5c:	4b42      	ldr	r3, [pc, #264]	@ (8017e68 <mg_http_status_code_str+0x984>)
 8017d5e:	e036      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8017d60:	4b42      	ldr	r3, [pc, #264]	@ (8017e6c <mg_http_status_code_str+0x988>)
 8017d62:	e034      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8017d64:	4b42      	ldr	r3, [pc, #264]	@ (8017e70 <mg_http_status_code_str+0x98c>)
 8017d66:	e032      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8017d68:	4b42      	ldr	r3, [pc, #264]	@ (8017e74 <mg_http_status_code_str+0x990>)
 8017d6a:	e030      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8017d6c:	4b42      	ldr	r3, [pc, #264]	@ (8017e78 <mg_http_status_code_str+0x994>)
 8017d6e:	e02e      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8017d70:	4b42      	ldr	r3, [pc, #264]	@ (8017e7c <mg_http_status_code_str+0x998>)
 8017d72:	e02c      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8017d74:	4b42      	ldr	r3, [pc, #264]	@ (8017e80 <mg_http_status_code_str+0x99c>)
 8017d76:	e02a      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8017d78:	4b42      	ldr	r3, [pc, #264]	@ (8017e84 <mg_http_status_code_str+0x9a0>)
 8017d7a:	e028      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8017d7c:	4b42      	ldr	r3, [pc, #264]	@ (8017e88 <mg_http_status_code_str+0x9a4>)
 8017d7e:	e026      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8017d80:	4b42      	ldr	r3, [pc, #264]	@ (8017e8c <mg_http_status_code_str+0x9a8>)
 8017d82:	e024      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8017d84:	4b42      	ldr	r3, [pc, #264]	@ (8017e90 <mg_http_status_code_str+0x9ac>)
 8017d86:	e022      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8017d88:	4b42      	ldr	r3, [pc, #264]	@ (8017e94 <mg_http_status_code_str+0x9b0>)
 8017d8a:	e020      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8017d8c:	4b42      	ldr	r3, [pc, #264]	@ (8017e98 <mg_http_status_code_str+0x9b4>)
 8017d8e:	e01e      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8017d90:	4b42      	ldr	r3, [pc, #264]	@ (8017e9c <mg_http_status_code_str+0x9b8>)
 8017d92:	e01c      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 8017d94:	4b42      	ldr	r3, [pc, #264]	@ (8017ea0 <mg_http_status_code_str+0x9bc>)
 8017d96:	e01a      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8017d98:	4b42      	ldr	r3, [pc, #264]	@ (8017ea4 <mg_http_status_code_str+0x9c0>)
 8017d9a:	e018      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8017d9c:	4b42      	ldr	r3, [pc, #264]	@ (8017ea8 <mg_http_status_code_str+0x9c4>)
 8017d9e:	e016      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8017da0:	4b42      	ldr	r3, [pc, #264]	@ (8017eac <mg_http_status_code_str+0x9c8>)
 8017da2:	e014      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8017da4:	4b42      	ldr	r3, [pc, #264]	@ (8017eb0 <mg_http_status_code_str+0x9cc>)
 8017da6:	e012      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8017da8:	4b42      	ldr	r3, [pc, #264]	@ (8017eb4 <mg_http_status_code_str+0x9d0>)
 8017daa:	e010      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8017dac:	4b42      	ldr	r3, [pc, #264]	@ (8017eb8 <mg_http_status_code_str+0x9d4>)
 8017dae:	e00e      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8017db0:	4b42      	ldr	r3, [pc, #264]	@ (8017ebc <mg_http_status_code_str+0x9d8>)
 8017db2:	e00c      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8017db4:	4b42      	ldr	r3, [pc, #264]	@ (8017ec0 <mg_http_status_code_str+0x9dc>)
 8017db6:	e00a      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8017db8:	4b42      	ldr	r3, [pc, #264]	@ (8017ec4 <mg_http_status_code_str+0x9e0>)
 8017dba:	e008      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8017dbc:	4b42      	ldr	r3, [pc, #264]	@ (8017ec8 <mg_http_status_code_str+0x9e4>)
 8017dbe:	e006      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8017dc0:	4b42      	ldr	r3, [pc, #264]	@ (8017ecc <mg_http_status_code_str+0x9e8>)
 8017dc2:	e004      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8017dc4:	4b42      	ldr	r3, [pc, #264]	@ (8017ed0 <mg_http_status_code_str+0x9ec>)
 8017dc6:	e002      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8017dc8:	4b42      	ldr	r3, [pc, #264]	@ (8017ed4 <mg_http_status_code_str+0x9f0>)
 8017dca:	e000      	b.n	8017dce <mg_http_status_code_str+0x8ea>
    default: return "";
 8017dcc:	4b42      	ldr	r3, [pc, #264]	@ (8017ed8 <mg_http_status_code_str+0x9f4>)
  }
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	370c      	adds	r7, #12
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd8:	4770      	bx	lr
 8017dda:	bf00      	nop
 8017ddc:	080312f8 	.word	0x080312f8
 8017de0:	08031304 	.word	0x08031304
 8017de4:	08031318 	.word	0x08031318
 8017de8:	08031324 	.word	0x08031324
 8017dec:	08031328 	.word	0x08031328
 8017df0:	08031330 	.word	0x08031330
 8017df4:	0803133c 	.word	0x0803133c
 8017df8:	0803135c 	.word	0x0803135c
 8017dfc:	08031368 	.word	0x08031368
 8017e00:	08031378 	.word	0x08031378
 8017e04:	08031388 	.word	0x08031388
 8017e08:	08031398 	.word	0x08031398
 8017e0c:	080313ac 	.word	0x080313ac
 8017e10:	080313b4 	.word	0x080313b4
 8017e14:	080313c8 	.word	0x080313c8
 8017e18:	080313dc 	.word	0x080313dc
 8017e1c:	080313e4 	.word	0x080313e4
 8017e20:	080313f0 	.word	0x080313f0
 8017e24:	08031400 	.word	0x08031400
 8017e28:	0803140c 	.word	0x0803140c
 8017e2c:	08031420 	.word	0x08031420
 8017e30:	08031434 	.word	0x08031434
 8017e34:	08031440 	.word	0x08031440
 8017e38:	08031450 	.word	0x08031450
 8017e3c:	08031464 	.word	0x08031464
 8017e40:	08031470 	.word	0x08031470
 8017e44:	0803147c 	.word	0x0803147c
 8017e48:	08031490 	.word	0x08031490
 8017e4c:	080314a0 	.word	0x080314a0
 8017e50:	080314c0 	.word	0x080314c0
 8017e54:	080314d0 	.word	0x080314d0
 8017e58:	080314dc 	.word	0x080314dc
 8017e5c:	080314e4 	.word	0x080314e4
 8017e60:	080314f4 	.word	0x080314f4
 8017e64:	08031508 	.word	0x08031508
 8017e68:	0803151c 	.word	0x0803151c
 8017e6c:	08031534 	.word	0x08031534
 8017e70:	0803154c 	.word	0x0803154c
 8017e74:	0803156c 	.word	0x0803156c
 8017e78:	08031580 	.word	0x08031580
 8017e7c:	08031590 	.word	0x08031590
 8017e80:	080315a4 	.word	0x080315a4
 8017e84:	080315bc 	.word	0x080315bc
 8017e88:	080315c4 	.word	0x080315c4
 8017e8c:	080315d8 	.word	0x080315d8
 8017e90:	080315ec 	.word	0x080315ec
 8017e94:	08031604 	.word	0x08031604
 8017e98:	08031618 	.word	0x08031618
 8017e9c:	08031638 	.word	0x08031638
 8017ea0:	0803165c 	.word	0x0803165c
 8017ea4:	0803167c 	.word	0x0803167c
 8017ea8:	08031694 	.word	0x08031694
 8017eac:	080316ac 	.word	0x080316ac
 8017eb0:	080316bc 	.word	0x080316bc
 8017eb4:	080316c8 	.word	0x080316c8
 8017eb8:	080316dc 	.word	0x080316dc
 8017ebc:	080316ec 	.word	0x080316ec
 8017ec0:	08031708 	.word	0x08031708
 8017ec4:	08031720 	.word	0x08031720
 8017ec8:	08031738 	.word	0x08031738
 8017ecc:	08031748 	.word	0x08031748
 8017ed0:	08031758 	.word	0x08031758
 8017ed4:	08031778 	.word	0x08031778
 8017ed8:	08031798 	.word	0x08031798

08017edc <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8017edc:	b408      	push	{r3}
 8017ede:	b580      	push	{r7, lr}
 8017ee0:	b08b      	sub	sp, #44	@ 0x2c
 8017ee2:	af02      	add	r7, sp, #8
 8017ee4:	60f8      	str	r0, [r7, #12]
 8017ee6:	60b9      	str	r1, [r7, #8]
 8017ee8:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8017eea:	68b8      	ldr	r0, [r7, #8]
 8017eec:	f7ff fafa 	bl	80174e4 <mg_http_status_code_str>
 8017ef0:	4602      	mov	r2, r0
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d001      	beq.n	8017efc <mg_http_reply+0x20>
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	e000      	b.n	8017efe <mg_http_reply+0x22>
 8017efc:	4b1f      	ldr	r3, [pc, #124]	@ (8017f7c <mg_http_reply+0xa0>)
 8017efe:	9300      	str	r3, [sp, #0]
 8017f00:	4613      	mov	r3, r2
 8017f02:	68ba      	ldr	r2, [r7, #8]
 8017f04:	491e      	ldr	r1, [pc, #120]	@ (8017f80 <mg_http_reply+0xa4>)
 8017f06:	68f8      	ldr	r0, [r7, #12]
 8017f08:	f005 f8d8 	bl	801d0bc <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f10:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 8017f12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017f16:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8017f1e:	f107 0314 	add.w	r3, r7, #20
 8017f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017f24:	4817      	ldr	r0, [pc, #92]	@ (8017f84 <mg_http_reply+0xa8>)
 8017f26:	f7fe f8cd 	bl	80160c4 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f2e:	2b10      	cmp	r3, #16
 8017f30:	d916      	bls.n	8017f60 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017f36:	69fb      	ldr	r3, [r7, #28]
 8017f38:	3b0f      	subs	r3, #15
 8017f3a:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017f40:	69fb      	ldr	r3, [r7, #28]
 8017f42:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8017f44:	4a10      	ldr	r2, [pc, #64]	@ (8017f88 <mg_http_reply+0xac>)
 8017f46:	210b      	movs	r1, #11
 8017f48:	f008 ff8c 	bl	8020e64 <mg_snprintf>
 8017f4c:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017f52:	69f9      	ldr	r1, [r7, #28]
 8017f54:	69bb      	ldr	r3, [r7, #24]
 8017f56:	440b      	add	r3, r1
 8017f58:	3b0f      	subs	r3, #15
 8017f5a:	4413      	add	r3, r2
 8017f5c:	2220      	movs	r2, #32
 8017f5e:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8017f60:	68fa      	ldr	r2, [r7, #12]
 8017f62:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8017f66:	f36f 13c7 	bfc	r3, #7, #1
 8017f6a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8017f6e:	bf00      	nop
 8017f70:	3724      	adds	r7, #36	@ 0x24
 8017f72:	46bd      	mov	sp, r7
 8017f74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017f78:	b001      	add	sp, #4
 8017f7a:	4770      	bx	lr
 8017f7c:	08031798 	.word	0x08031798
 8017f80:	0803179c 	.word	0x0803179c
 8017f84:	08020df5 	.word	0x08020df5
 8017f88:	080317d0 	.word	0x080317d0

08017f8c <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b082      	sub	sp, #8
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f7fe fc5d 	bl	801685a <mg_fs_close>
  c->pfn_data = NULL;
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	4a07      	ldr	r2, [pc, #28]	@ (8017fc8 <restore_http_cb+0x3c>)
 8017fac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 8017fb0:	687a      	ldr	r2, [r7, #4]
 8017fb2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8017fb6:	f36f 13c7 	bfc	r3, #7, #1
 8017fba:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8017fbe:	bf00      	nop
 8017fc0:	3708      	adds	r7, #8
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	bd80      	pop	{r7, pc}
 8017fc6:	bf00      	nop
 8017fc8:	08019749 	.word	0x08019749

08017fcc <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8017fcc:	b5b0      	push	{r4, r5, r7, lr}
 8017fce:	b088      	sub	sp, #32
 8017fd0:	af04      	add	r7, sp, #16
 8017fd2:	60f8      	str	r0, [r7, #12]
 8017fd4:	60b9      	str	r1, [r7, #8]
 8017fd6:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	2200      	movs	r2, #0
 8017fdc:	461c      	mov	r4, r3
 8017fde:	4615      	mov	r5, r2
 8017fe0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8017fe4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017fe8:	e9cd 2300 	strd	r2, r3, [sp]
 8017fec:	4a04      	ldr	r2, [pc, #16]	@ (8018000 <mg_http_etag+0x34>)
 8017fee:	68b9      	ldr	r1, [r7, #8]
 8017ff0:	68f8      	ldr	r0, [r7, #12]
 8017ff2:	f008 ff37 	bl	8020e64 <mg_snprintf>
  return buf;
 8017ff6:	68fb      	ldr	r3, [r7, #12]
}
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	3710      	adds	r7, #16
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8018000:	080317d8 	.word	0x080317d8

08018004 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8018004:	b580      	push	{r7, lr}
 8018006:	b08a      	sub	sp, #40	@ 0x28
 8018008:	af00      	add	r7, sp, #0
 801800a:	60f8      	str	r0, [r7, #12]
 801800c:	60b9      	str	r1, [r7, #8]
 801800e:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	2b08      	cmp	r3, #8
 8018014:	d002      	beq.n	801801c <static_cb+0x18>
 8018016:	68bb      	ldr	r3, [r7, #8]
 8018018:	2b02      	cmp	r3, #2
 801801a:	d148      	bne.n	80180ae <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018022:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8018024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018028:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	33a4      	adds	r3, #164	@ 0xa4
 801802e:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018034:	69fa      	ldr	r2, [r7, #28]
 8018036:	429a      	cmp	r2, r3
 8018038:	d905      	bls.n	8018046 <static_cb+0x42>
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	3348      	adds	r3, #72	@ 0x48
 801803e:	69f9      	ldr	r1, [r7, #28]
 8018040:	4618      	mov	r0, r3
 8018042:	f001 ff03 	bl	8019e4c <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801804e:	429a      	cmp	r2, r3
 8018050:	d234      	bcs.n	80180bc <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801805a:	1ad3      	subs	r3, r2, r3
 801805c:	627b      	str	r3, [r7, #36]	@ 0x24
 801805e:	69bb      	ldr	r3, [r7, #24]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018064:	429a      	cmp	r2, r3
 8018066:	d902      	bls.n	801806e <static_cb+0x6a>
 8018068:	69bb      	ldr	r3, [r7, #24]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 801806e:	6a3b      	ldr	r3, [r7, #32]
 8018070:	685b      	ldr	r3, [r3, #4]
 8018072:	691b      	ldr	r3, [r3, #16]
 8018074:	6a3a      	ldr	r2, [r7, #32]
 8018076:	6810      	ldr	r0, [r2, #0]
 8018078:	68fa      	ldr	r2, [r7, #12]
 801807a:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 801807c:	68fa      	ldr	r2, [r7, #12]
 801807e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8018080:	4411      	add	r1, r2
 8018082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018084:	4798      	blx	r3
 8018086:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801808c:	697b      	ldr	r3, [r7, #20]
 801808e:	441a      	add	r2, r3
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 8018094:	69bb      	ldr	r3, [r7, #24]
 8018096:	681a      	ldr	r2, [r3, #0]
 8018098:	697b      	ldr	r3, [r7, #20]
 801809a:	1ad2      	subs	r2, r2, r3
 801809c:	69bb      	ldr	r3, [r7, #24]
 801809e:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 80180a0:	697b      	ldr	r3, [r7, #20]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d10c      	bne.n	80180c0 <static_cb+0xbc>
 80180a6:	68f8      	ldr	r0, [r7, #12]
 80180a8:	f7ff ff70 	bl	8017f8c <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80180ac:	e008      	b.n	80180c0 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 80180ae:	68bb      	ldr	r3, [r7, #8]
 80180b0:	2b09      	cmp	r3, #9
 80180b2:	d106      	bne.n	80180c2 <static_cb+0xbe>
    restore_http_cb(c);
 80180b4:	68f8      	ldr	r0, [r7, #12]
 80180b6:	f7ff ff69 	bl	8017f8c <restore_http_cb>
 80180ba:	e002      	b.n	80180c2 <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80180bc:	bf00      	nop
 80180be:	e000      	b.n	80180c2 <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80180c0:	bf00      	nop
  }
  (void) ev_data;
}
 80180c2:	3728      	adds	r7, #40	@ 0x28
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}

080180c8 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 80180c8:	b590      	push	{r4, r7, lr}
 80180ca:	b091      	sub	sp, #68	@ 0x44
 80180cc:	af02      	add	r7, sp, #8
 80180ce:	60f8      	str	r0, [r7, #12]
 80180d0:	1d38      	adds	r0, r7, #4
 80180d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80180d6:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra);
 80180d8:	f107 0314 	add.w	r3, r7, #20
 80180dc:	6839      	ldr	r1, [r7, #0]
 80180de:	4618      	mov	r0, r3
 80180e0:	f009 fba8 	bl	8021834 <mg_str_s>
  size_t i = 0;
 80180e4:	2300      	movs	r3, #0
 80180e6:	637b      	str	r3, [r7, #52]	@ 0x34

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 80180e8:	e002      	b.n	80180f0 <guess_content_type+0x28>
 80180ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180ec:	3301      	adds	r3, #1
 80180ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80180f0:	68bb      	ldr	r3, [r7, #8]
 80180f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80180f4:	429a      	cmp	r2, r3
 80180f6:	d208      	bcs.n	801810a <guess_content_type+0x42>
 80180f8:	687a      	ldr	r2, [r7, #4]
 80180fa:	68b9      	ldr	r1, [r7, #8]
 80180fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180fe:	1acb      	subs	r3, r1, r3
 8018100:	3b01      	subs	r3, #1
 8018102:	4413      	add	r3, r2
 8018104:	781b      	ldrb	r3, [r3, #0]
 8018106:	2b2e      	cmp	r3, #46	@ 0x2e
 8018108:	d1ef      	bne.n	80180ea <guess_content_type+0x22>
  path.buf += path.len - i;
 801810a:	687a      	ldr	r2, [r7, #4]
 801810c:	68b9      	ldr	r1, [r7, #8]
 801810e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018110:	1acb      	subs	r3, r1, r3
 8018112:	4413      	add	r3, r2
 8018114:	607b      	str	r3, [r7, #4]
  path.len = i;
 8018116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018118:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 801811a:	e020      	b.n	801815e <guess_content_type+0x96>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 801811c:	f107 031c 	add.w	r3, r7, #28
 8018120:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018124:	213d      	movs	r1, #61	@ 0x3d
 8018126:	9100      	str	r1, [sp, #0]
 8018128:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801812c:	c903      	ldmia	r1, {r0, r1}
 801812e:	f009 fd48 	bl	8021bc2 <mg_span>
 8018132:	4603      	mov	r3, r0
 8018134:	2b00      	cmp	r3, #0
 8018136:	d012      	beq.n	801815e <guess_content_type+0x96>
 8018138:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801813c:	cb0c      	ldmia	r3, {r2, r3}
 801813e:	1d39      	adds	r1, r7, #4
 8018140:	c903      	ldmia	r1, {r0, r1}
 8018142:	f009 fbc1 	bl	80218c8 <mg_strcmp>
 8018146:	4603      	mov	r3, r0
 8018148:	2b00      	cmp	r3, #0
 801814a:	d108      	bne.n	801815e <guess_content_type+0x96>
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	461a      	mov	r2, r3
 8018150:	f107 031c 	add.w	r3, r7, #28
 8018154:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018158:	e882 0003 	stmia.w	r2, {r0, r1}
 801815c:	e036      	b.n	80181cc <guess_content_type+0x104>
  while (mg_span(s, &entry, &s, ',')) {
 801815e:	f107 0314 	add.w	r3, r7, #20
 8018162:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8018166:	212c      	movs	r1, #44	@ 0x2c
 8018168:	9100      	str	r1, [sp, #0]
 801816a:	f107 0114 	add.w	r1, r7, #20
 801816e:	c903      	ldmia	r1, {r0, r1}
 8018170:	f009 fd27 	bl	8021bc2 <mg_span>
 8018174:	4603      	mov	r3, r0
 8018176:	2b00      	cmp	r3, #0
 8018178:	d1d0      	bne.n	801811c <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 801817a:	2300      	movs	r3, #0
 801817c:	637b      	str	r3, [r7, #52]	@ 0x34
 801817e:	e01a      	b.n	80181b6 <guess_content_type+0xee>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8018180:	4a14      	ldr	r2, [pc, #80]	@ (80181d4 <guess_content_type+0x10c>)
 8018182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018184:	00db      	lsls	r3, r3, #3
 8018186:	4413      	add	r3, r2
 8018188:	cb0c      	ldmia	r3, {r2, r3}
 801818a:	1d39      	adds	r1, r7, #4
 801818c:	c903      	ldmia	r1, {r0, r1}
 801818e:	f009 fb9b 	bl	80218c8 <mg_strcmp>
 8018192:	4603      	mov	r3, r0
 8018194:	2b00      	cmp	r3, #0
 8018196:	d10b      	bne.n	80181b0 <guess_content_type+0xe8>
 8018198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801819a:	3301      	adds	r3, #1
 801819c:	68f9      	ldr	r1, [r7, #12]
 801819e:	4a0d      	ldr	r2, [pc, #52]	@ (80181d4 <guess_content_type+0x10c>)
 80181a0:	460c      	mov	r4, r1
 80181a2:	00db      	lsls	r3, r3, #3
 80181a4:	4413      	add	r3, r2
 80181a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80181aa:	e884 0003 	stmia.w	r4, {r0, r1}
 80181ae:	e00d      	b.n	80181cc <guess_content_type+0x104>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80181b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181b2:	3302      	adds	r3, #2
 80181b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80181b6:	4a07      	ldr	r2, [pc, #28]	@ (80181d4 <guess_content_type+0x10c>)
 80181b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d1de      	bne.n	8018180 <guess_content_type+0xb8>
  }

  return mg_str("text/plain; charset=utf-8");
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	4904      	ldr	r1, [pc, #16]	@ (80181d8 <guess_content_type+0x110>)
 80181c6:	4618      	mov	r0, r3
 80181c8:	f009 fb34 	bl	8021834 <mg_str_s>
}
 80181cc:	68f8      	ldr	r0, [r7, #12]
 80181ce:	373c      	adds	r7, #60	@ 0x3c
 80181d0:	46bd      	mov	sp, r7
 80181d2:	bd90      	pop	{r4, r7, pc}
 80181d4:	200000b0 	.word	0x200000b0
 80181d8:	080318c0 	.word	0x080318c0

080181dc <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 80181dc:	b580      	push	{r7, lr}
 80181de:	b08c      	sub	sp, #48	@ 0x30
 80181e0:	af02      	add	r7, sp, #8
 80181e2:	60f8      	str	r0, [r7, #12]
 80181e4:	60b9      	str	r1, [r7, #8]
 80181e6:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 80181e8:	2300      	movs	r3, #0
 80181ea:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 80181ec:	2300      	movs	r3, #0
 80181ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80181f0:	e058      	b.n	80182a4 <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	681a      	ldr	r2, [r3, #0]
 80181f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181f8:	3306      	adds	r3, #6
 80181fa:	18d1      	adds	r1, r2, r3
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	685a      	ldr	r2, [r3, #4]
 8018200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018202:	1ad3      	subs	r3, r2, r3
 8018204:	1f9a      	subs	r2, r3, #6
 8018206:	f107 0310 	add.w	r3, r7, #16
 801820a:	4618      	mov	r0, r3
 801820c:	f009 fb2f 	bl	802186e <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	681a      	ldr	r2, [r3, #0]
 8018214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018216:	4413      	add	r3, r2
 8018218:	2206      	movs	r2, #6
 801821a:	4929      	ldr	r1, [pc, #164]	@ (80182c0 <getrange+0xe4>)
 801821c:	4618      	mov	r0, r3
 801821e:	f00d fe07 	bl	8025e30 <memcmp>
 8018222:	4603      	mov	r3, r0
 8018224:	2b00      	cmp	r3, #0
 8018226:	d003      	beq.n	8018230 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 8018228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801822a:	3301      	adds	r3, #1
 801822c:	627b      	str	r3, [r7, #36]	@ 0x24
 801822e:	e039      	b.n	80182a4 <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 8018230:	f107 0310 	add.w	r3, r7, #16
 8018234:	f107 0218 	add.w	r2, r7, #24
 8018238:	212d      	movs	r1, #45	@ 0x2d
 801823a:	9100      	str	r1, [sp, #0]
 801823c:	f107 0110 	add.w	r1, r7, #16
 8018240:	c903      	ldmia	r1, {r0, r1}
 8018242:	f009 fcbe 	bl	8021bc2 <mg_span>
 8018246:	4603      	mov	r3, r0
 8018248:	2b00      	cmp	r3, #0
 801824a:	d01d      	beq.n	8018288 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 801824c:	68ba      	ldr	r2, [r7, #8]
 801824e:	f107 0318 	add.w	r3, r7, #24
 8018252:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018256:	f7fe fbcd 	bl	80169f4 <mg_to_size_t>
 801825a:	4603      	mov	r3, r0
 801825c:	2b00      	cmp	r3, #0
 801825e:	d002      	beq.n	8018266 <getrange+0x8a>
 8018260:	6a3b      	ldr	r3, [r7, #32]
 8018262:	3301      	adds	r3, #1
 8018264:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8018266:	697b      	ldr	r3, [r7, #20]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d022      	beq.n	80182b2 <getrange+0xd6>
 801826c:	687a      	ldr	r2, [r7, #4]
 801826e:	f107 0310 	add.w	r3, r7, #16
 8018272:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018276:	f7fe fbbd 	bl	80169f4 <mg_to_size_t>
 801827a:	4603      	mov	r3, r0
 801827c:	2b00      	cmp	r3, #0
 801827e:	d018      	beq.n	80182b2 <getrange+0xd6>
 8018280:	6a3b      	ldr	r3, [r7, #32]
 8018282:	3301      	adds	r3, #1
 8018284:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 8018286:	e014      	b.n	80182b2 <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 8018288:	68ba      	ldr	r2, [r7, #8]
 801828a:	f107 0310 	add.w	r3, r7, #16
 801828e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018292:	f7fe fbaf 	bl	80169f4 <mg_to_size_t>
 8018296:	4603      	mov	r3, r0
 8018298:	2b00      	cmp	r3, #0
 801829a:	d00a      	beq.n	80182b2 <getrange+0xd6>
 801829c:	6a3b      	ldr	r3, [r7, #32]
 801829e:	3301      	adds	r3, #1
 80182a0:	623b      	str	r3, [r7, #32]
 80182a2:	e007      	b.n	80182b4 <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 80182a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182a6:	1d9a      	adds	r2, r3, #6
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	685b      	ldr	r3, [r3, #4]
 80182ac:	429a      	cmp	r2, r3
 80182ae:	d3a0      	bcc.n	80181f2 <getrange+0x16>
 80182b0:	e000      	b.n	80182b4 <getrange+0xd8>
    break;
 80182b2:	bf00      	nop
  }
  return (int) numparsed;
 80182b4:	6a3b      	ldr	r3, [r7, #32]
}
 80182b6:	4618      	mov	r0, r3
 80182b8:	3728      	adds	r7, #40	@ 0x28
 80182ba:	46bd      	mov	sp, r7
 80182bc:	bd80      	pop	{r7, pc}
 80182be:	bf00      	nop
 80182c0:	08031a44 	.word	0x08031a44

080182c4 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 80182c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182c8:	b0f9      	sub	sp, #484	@ 0x1e4
 80182ca:	af0a      	add	r7, sp, #40	@ 0x28
 80182cc:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 80182d0:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 80182d4:	6020      	str	r0, [r4, #0]
 80182d6:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 80182da:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 80182de:	6001      	str	r1, [r0, #0]
 80182e0:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 80182e4:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80182e8:	600a      	str	r2, [r1, #0]
 80182ea:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80182ee:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80182f2:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80182f4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80182f8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	695b      	ldr	r3, [r3, #20]
 8018300:	2b00      	cmp	r3, #0
 8018302:	d006      	beq.n	8018312 <mg_http_serve_file+0x4e>
 8018304:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018308:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	695b      	ldr	r3, [r3, #20]
 8018310:	e000      	b.n	8018314 <mg_http_serve_file+0x50>
 8018312:	4ba7      	ldr	r3, [pc, #668]	@ (80185b0 <mg_http_serve_file+0x2ec>)
 8018314:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  struct mg_fd *fd = NULL;
 8018318:	2300      	movs	r3, #0
 801831a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  size_t size = 0;
 801831e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018322:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018326:	2200      	movs	r2, #0
 8018328:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 801832a:	f04f 0200 	mov.w	r2, #0
 801832e:	f04f 0300 	mov.w	r3, #0
 8018332:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 8018336:	2300      	movs	r3, #0
 8018338:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 801833c:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8018340:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018344:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8018348:	6819      	ldr	r1, [r3, #0]
 801834a:	4610      	mov	r0, r2
 801834c:	f009 fa72 	bl	8021834 <mg_str_s>
 8018350:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018354:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	68db      	ldr	r3, [r3, #12]
 801835c:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8018360:	f5a2 7090 	sub.w	r0, r2, #288	@ 0x120
 8018364:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8018368:	ca06      	ldmia	r2, {r1, r2}
 801836a:	f7ff fead 	bl	80180c8 <guess_content_type>
  bool gzip = false;
 801836e:	2300      	movs	r3, #0
 8018370:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3

  if (path != NULL) {
 8018374:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018378:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d05c      	beq.n	801843c <mg_http_serve_file+0x178>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8018382:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018386:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 801838a:	498a      	ldr	r1, [pc, #552]	@ (80185b4 <mg_http_serve_file+0x2f0>)
 801838c:	6818      	ldr	r0, [r3, #0]
 801838e:	f7fe fd7f 	bl	8016e90 <mg_http_get_header>
 8018392:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    if (ae != NULL) {
 8018396:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 801839a:	2b00      	cmp	r3, #0
 801839c:	d03e      	beq.n	801841c <mg_http_serve_file+0x158>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 801839e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80183a2:	6859      	ldr	r1, [r3, #4]
 80183a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	461a      	mov	r2, r3
 80183ac:	4882      	ldr	r0, [pc, #520]	@ (80185b8 <mg_http_serve_file+0x2f4>)
 80183ae:	f008 fd8f 	bl	8020ed0 <mg_mprintf>
 80183b2:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 80183b6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d02a      	beq.n	8018414 <mg_http_serve_file+0x150>
 80183be:	497f      	ldr	r1, [pc, #508]	@ (80185bc <mg_http_serve_file+0x2f8>)
 80183c0:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80183c4:	f00d fe48 	bl	8026058 <strstr>
 80183c8:	4603      	mov	r3, r0
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d022      	beq.n	8018414 <mg_http_serve_file+0x150>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 80183ce:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80183d2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80183d6:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	4a78      	ldr	r2, [pc, #480]	@ (80185c0 <mg_http_serve_file+0x2fc>)
 80183de:	2180      	movs	r1, #128	@ 0x80
 80183e0:	f008 fd40 	bl	8020e64 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 80183e4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80183e8:	2201      	movs	r2, #1
 80183ea:	4619      	mov	r1, r3
 80183ec:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 80183f0:	f7fe fa0c 	bl	801680c <mg_fs_open>
 80183f4:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
        if (fd != NULL) gzip = true, path = tmp;
 80183f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d009      	beq.n	8018414 <mg_http_serve_file+0x150>
 8018400:	2301      	movs	r3, #1
 8018402:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
 8018406:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801840a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 801840e:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8018412:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 8018414:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8018418:	f7f3 ffce 	bl	800c3b8 <vPortFree>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 801841c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8018420:	2b00      	cmp	r3, #0
 8018422:	d10b      	bne.n	801843c <mg_http_serve_file+0x178>
 8018424:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018428:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 801842c:	2201      	movs	r2, #1
 801842e:	6819      	ldr	r1, [r3, #0]
 8018430:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8018434:	f7fe f9ea 	bl	801680c <mg_fs_open>
 8018438:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 801843c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8018440:	2b00      	cmp	r3, #0
 8018442:	d144      	bne.n	80184ce <mg_http_serve_file+0x20a>
 8018444:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018448:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	691b      	ldr	r3, [r3, #16]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d03c      	beq.n	80184ce <mg_http_serve_file+0x20a>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8018454:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018458:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	691b      	ldr	r3, [r3, #16]
 8018460:	2201      	movs	r2, #1
 8018462:	4619      	mov	r1, r3
 8018464:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8018468:	f7fe f9d0 	bl	801680c <mg_fs_open>
 801846c:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
    path = opts->page404;
 8018470:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018474:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8018478:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 801847c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8018480:	6812      	ldr	r2, [r2, #0]
 8018482:	6912      	ldr	r2, [r2, #16]
 8018484:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8018486:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 801848a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801848e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8018492:	6819      	ldr	r1, [r3, #0]
 8018494:	4610      	mov	r0, r2
 8018496:	f009 f9cd 	bl	8021834 <mg_str_s>
 801849a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801849e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	68db      	ldr	r3, [r3, #12]
 80184a6:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80184aa:	f5a2 7490 	sub.w	r4, r2, #288	@ 0x120
 80184ae:	f107 0010 	add.w	r0, r7, #16
 80184b2:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 80184b6:	ca06      	ldmia	r2, {r1, r2}
 80184b8:	f7ff fe06 	bl	80180c8 <guess_content_type>
 80184bc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80184c0:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 80184c4:	4623      	mov	r3, r4
 80184c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80184ca:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 80184ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d00f      	beq.n	80184f6 <mg_http_serve_file+0x232>
 80184d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80184da:	681c      	ldr	r4, [r3, #0]
 80184dc:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80184e0:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80184e4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80184e8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80184ec:	6818      	ldr	r0, [r3, #0]
 80184ee:	47a0      	blx	r4
 80184f0:	4603      	mov	r3, r0
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d114      	bne.n	8018520 <mg_http_serve_file+0x25c>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 80184f6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80184fa:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	689a      	ldr	r2, [r3, #8]
 8018502:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018506:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 801850a:	4b2e      	ldr	r3, [pc, #184]	@ (80185c4 <mg_http_serve_file+0x300>)
 801850c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8018510:	6800      	ldr	r0, [r0, #0]
 8018512:	f7ff fce3 	bl	8017edc <mg_http_reply>
    mg_fs_close(fd);
 8018516:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 801851a:	f7fe f99e 	bl	801685a <mg_fs_close>
 801851e:	e19d      	b.n	801885c <mg_http_serve_file+0x598>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8018520:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018524:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018528:	6819      	ldr	r1, [r3, #0]
 801852a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 801852e:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8018532:	e9cd 2300 	strd	r2, r3, [sp]
 8018536:	460a      	mov	r2, r1
 8018538:	2140      	movs	r1, #64	@ 0x40
 801853a:	f7ff fd47 	bl	8017fcc <mg_http_etag>
 801853e:	4603      	mov	r3, r0
 8018540:	2b00      	cmp	r3, #0
 8018542:	d045      	beq.n	80185d0 <mg_http_serve_file+0x30c>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8018544:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018548:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 801854c:	491e      	ldr	r1, [pc, #120]	@ (80185c8 <mg_http_serve_file+0x304>)
 801854e:	6818      	ldr	r0, [r3, #0]
 8018550:	f7fe fc9e 	bl	8016e90 <mg_http_get_header>
 8018554:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8018558:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801855c:	2b00      	cmp	r3, #0
 801855e:	d037      	beq.n	80185d0 <mg_http_serve_file+0x30c>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8018560:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8018564:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8018568:	4611      	mov	r1, r2
 801856a:	4618      	mov	r0, r3
 801856c:	f009 f962 	bl	8021834 <mg_str_s>
 8018570:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8018574:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8018578:	cb0c      	ldmia	r3, {r2, r3}
 801857a:	c903      	ldmia	r1, {r0, r1}
 801857c:	f009 f9e6 	bl	802194c <mg_strcasecmp>
 8018580:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8018582:	2b00      	cmp	r3, #0
 8018584:	d124      	bne.n	80185d0 <mg_http_serve_file+0x30c>
    mg_fs_close(fd);
 8018586:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 801858a:	f7fe f966 	bl	801685a <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 801858e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018592:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	689a      	ldr	r2, [r3, #8]
 801859a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801859e:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 80185a2:	4b0a      	ldr	r3, [pc, #40]	@ (80185cc <mg_http_serve_file+0x308>)
 80185a4:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80185a8:	6800      	ldr	r0, [r0, #0]
 80185aa:	f7ff fc97 	bl	8017edc <mg_http_reply>
 80185ae:	e155      	b.n	801885c <mg_http_serve_file+0x598>
 80185b0:	20000088 	.word	0x20000088
 80185b4:	08031a4c 	.word	0x08031a4c
 80185b8:	08031238 	.word	0x08031238
 80185bc:	08031a5c 	.word	0x08031a5c
 80185c0:	08031a64 	.word	0x08031a64
 80185c4:	08031a6c 	.word	0x08031a6c
 80185c8:	08031a78 	.word	0x08031a78
 80185cc:	08031798 	.word	0x08031798
  } else {
    int n, status = 200;
 80185d0:	23c8      	movs	r3, #200	@ 0xc8
 80185d2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 80185d6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80185da:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80185de:	2200      	movs	r2, #0
 80185e0:	601a      	str	r2, [r3, #0]
 80185e2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80185e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80185ea:	2200      	movs	r2, #0
 80185ec:	601a      	str	r2, [r3, #0]
 80185ee:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80185f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 80185fc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018600:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8018604:	4998      	ldr	r1, [pc, #608]	@ (8018868 <mg_http_serve_file+0x5a4>)
 8018606:	6818      	ldr	r0, [r3, #0]
 8018608:	f7fe fc42 	bl	8016e90 <mg_http_get_header>
 801860c:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    range[0] = '\0';
 8018610:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018614:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018618:	2200      	movs	r2, #0
 801861a:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 801861c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8018620:	2b00      	cmp	r3, #0
 8018622:	f000 8095 	beq.w	8018750 <mg_http_serve_file+0x48c>
 8018626:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801862a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801862e:	4619      	mov	r1, r3
 8018630:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8018634:	f7ff fdd2 	bl	80181dc <getrange>
 8018638:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 801863c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8018640:	2b00      	cmp	r3, #0
 8018642:	f340 8085 	ble.w	8018750 <mg_http_serve_file+0x48c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8018646:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 801864a:	2b01      	cmp	r3, #1
 801864c:	d107      	bne.n	801865e <mg_http_serve_file+0x39a>
 801864e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8018652:	1e5a      	subs	r2, r3, #1
 8018654:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018658:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801865c:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 801865e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018662:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018666:	681a      	ldr	r2, [r3, #0]
 8018668:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801866c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	429a      	cmp	r2, r3
 8018674:	d808      	bhi.n	8018688 <mg_http_serve_file+0x3c4>
 8018676:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801867a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8018684:	429a      	cmp	r2, r3
 8018686:	d81a      	bhi.n	80186be <mg_http_serve_file+0x3fa>
        status = 416;
 8018688:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 801868c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = 0;
 8018690:	2300      	movs	r3, #0
 8018692:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8018696:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801869a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	2200      	movs	r2, #0
 80186a2:	60bb      	str	r3, [r7, #8]
 80186a4:	60fa      	str	r2, [r7, #12]
 80186a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80186aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80186ae:	e9cd 1200 	strd	r1, r2, [sp]
 80186b2:	4a6e      	ldr	r2, [pc, #440]	@ (801886c <mg_http_serve_file+0x5a8>)
 80186b4:	2164      	movs	r1, #100	@ 0x64
 80186b6:	4618      	mov	r0, r3
 80186b8:	f008 fbd4 	bl	8020e64 <mg_snprintf>
 80186bc:	e048      	b.n	8018750 <mg_http_serve_file+0x48c>
                    (int64_t) size);
      } else {
        status = 206;
 80186be:	23ce      	movs	r3, #206	@ 0xce
 80186c0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = r2 - r1 + 1;
 80186c4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80186c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80186cc:	681a      	ldr	r2, [r3, #0]
 80186ce:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80186d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	1ad3      	subs	r3, r2, r3
 80186da:	3301      	adds	r3, #1
 80186dc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range),
 80186e0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80186e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	2200      	movs	r2, #0
 80186ec:	469a      	mov	sl, r3
 80186ee:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 80186f0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80186f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80186f8:	681a      	ldr	r2, [r3, #0]
 80186fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80186fe:	4413      	add	r3, r2
 8018700:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8018702:	2200      	movs	r2, #0
 8018704:	461d      	mov	r5, r3
 8018706:	4616      	mov	r6, r2
 8018708:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801870c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	2200      	movs	r2, #0
 8018714:	603b      	str	r3, [r7, #0]
 8018716:	607a      	str	r2, [r7, #4]
 8018718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801871c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8018720:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018724:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8018728:	e9cd ab00 	strd	sl, fp, [sp]
 801872c:	4a50      	ldr	r2, [pc, #320]	@ (8018870 <mg_http_serve_file+0x5ac>)
 801872e:	2164      	movs	r1, #100	@ 0x64
 8018730:	4618      	mov	r0, r3
 8018732:	f008 fb97 	bl	8020e64 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8018736:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801873a:	699b      	ldr	r3, [r3, #24]
 801873c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8018740:	6810      	ldr	r0, [r2, #0]
 8018742:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8018746:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 801874a:	6812      	ldr	r2, [r2, #0]
 801874c:	4611      	mov	r1, r2
 801874e:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8018750:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 8018754:	f7fe fec6 	bl	80174e4 <mg_http_status_code_str>
 8018758:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 801875a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801875e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8018762:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8018764:	461d      	mov	r5, r3
 8018766:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801876a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801876e:	681a      	ldr	r2, [r3, #0]
 8018770:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8018774:	2100      	movs	r1, #0
 8018776:	4698      	mov	r8, r3
 8018778:	4689      	mov	r9, r1
 801877a:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 801877e:	2b00      	cmp	r3, #0
 8018780:	d001      	beq.n	8018786 <mg_http_serve_file+0x4c2>
 8018782:	493c      	ldr	r1, [pc, #240]	@ (8018874 <mg_http_serve_file+0x5b0>)
 8018784:	e000      	b.n	8018788 <mg_http_serve_file+0x4c4>
 8018786:	493c      	ldr	r1, [pc, #240]	@ (8018878 <mg_http_serve_file+0x5b4>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8018788:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801878c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8018794:	2b00      	cmp	r3, #0
 8018796:	d006      	beq.n	80187a6 <mg_http_serve_file+0x4e2>
 8018798:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801879c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	689b      	ldr	r3, [r3, #8]
 80187a4:	e000      	b.n	80187a8 <mg_http_serve_file+0x4e4>
 80187a6:	4b34      	ldr	r3, [pc, #208]	@ (8018878 <mg_http_serve_file+0x5b4>)
 80187a8:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 80187ac:	f5a0 70ca 	sub.w	r0, r0, #404	@ 0x194
 80187b0:	9308      	str	r3, [sp, #32]
 80187b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80187b6:	9307      	str	r3, [sp, #28]
 80187b8:	9106      	str	r1, [sp, #24]
 80187ba:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80187be:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80187c2:	9302      	str	r3, [sp, #8]
 80187c4:	9201      	str	r2, [sp, #4]
 80187c6:	9500      	str	r5, [sp, #0]
 80187c8:	4623      	mov	r3, r4
 80187ca:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80187ce:	492b      	ldr	r1, [pc, #172]	@ (801887c <mg_http_serve_file+0x5b8>)
 80187d0:	6800      	ldr	r0, [r0, #0]
 80187d2:	f004 fc73 	bl	801d0bc <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 80187d6:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80187da:	4929      	ldr	r1, [pc, #164]	@ (8018880 <mg_http_serve_file+0x5bc>)
 80187dc:	4618      	mov	r0, r3
 80187de:	f009 f829 	bl	8021834 <mg_str_s>
 80187e2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80187e6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80187ea:	6819      	ldr	r1, [r3, #0]
 80187ec:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80187f0:	cb0c      	ldmia	r3, {r2, r3}
 80187f2:	c903      	ldmia	r1, {r0, r1}
 80187f4:	f009 f8aa 	bl	802194c <mg_strcasecmp>
 80187f8:	4603      	mov	r3, r0
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d10f      	bne.n	801881e <mg_http_serve_file+0x55a>
      c->is_resp = 0;
 80187fe:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018802:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018806:	681a      	ldr	r2, [r3, #0]
 8018808:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801880c:	f36f 13c7 	bfc	r3, #7, #1
 8018810:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 8018814:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8018818:	f7fe f81f 	bl	801685a <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 801881c:	e01e      	b.n	801885c <mg_http_serve_file+0x598>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 801881e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018822:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	33a4      	adds	r3, #164	@ 0xa4
 801882a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
      c->pfn = static_cb;
 801882e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018832:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	4a12      	ldr	r2, [pc, #72]	@ (8018884 <mg_http_serve_file+0x5c0>)
 801883a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 801883e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018842:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801884c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8018850:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018854:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8018858:	601a      	str	r2, [r3, #0]
}
 801885a:	e7ff      	b.n	801885c <mg_http_serve_file+0x598>
 801885c:	bf00      	nop
 801885e:	f507 77de 	add.w	r7, r7, #444	@ 0x1bc
 8018862:	46bd      	mov	sp, r7
 8018864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018868:	08031a88 	.word	0x08031a88
 801886c:	08031a90 	.word	0x08031a90
 8018870:	08031ab0 	.word	0x08031ab0
 8018874:	08031ad8 	.word	0x08031ad8
 8018878:	08031798 	.word	0x08031798
 801887c:	08031af4 	.word	0x08031af4
 8018880:	08031b44 	.word	0x08031b44
 8018884:	08018005 	.word	0x08018005

08018888 <printdirentry>:
  const struct mg_http_serve_opts *opts;
  const char *dir;
};

#if MG_ENABLE_DIRLIST
static void printdirentry(const char *name, void *userdata) {
 8018888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801888c:	b0c8      	sub	sp, #288	@ 0x120
 801888e:	af0a      	add	r7, sp, #40	@ 0x28
 8018890:	6078      	str	r0, [r7, #4]
 8018892:	6039      	str	r1, [r7, #0]
  struct printdirentrydata *d = (struct printdirentrydata *) userdata;
 8018894:	683b      	ldr	r3, [r7, #0]
 8018896:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 801889a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801889e:	689b      	ldr	r3, [r3, #8]
 80188a0:	695b      	ldr	r3, [r3, #20]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d004      	beq.n	80188b0 <printdirentry+0x28>
 80188a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80188aa:	689b      	ldr	r3, [r3, #8]
 80188ac:	695b      	ldr	r3, [r3, #20]
 80188ae:	e000      	b.n	80188b2 <printdirentry+0x2a>
 80188b0:	4b66      	ldr	r3, [pc, #408]	@ (8018a4c <printdirentry+0x1c4>)
 80188b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  size_t size = 0;
 80188b6:	2300      	movs	r3, #0
 80188b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  time_t t = 0;
 80188bc:	f04f 0200 	mov.w	r2, #0
 80188c0:	f04f 0300 	mov.w	r3, #0
 80188c4:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  char path[MG_PATH_MAX], sz[40], mod[40];
  int flags, n = 0;
 80188c8:	2300      	movs	r3, #0
 80188ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  // MG_DEBUG(("[%s] [%s]", d->dir, name));
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 80188ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80188d2:	68da      	ldr	r2, [r3, #12]
 80188d4:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	9301      	str	r3, [sp, #4]
 80188dc:	232f      	movs	r3, #47	@ 0x2f
 80188de:	9300      	str	r3, [sp, #0]
 80188e0:	4613      	mov	r3, r2
 80188e2:	4a5b      	ldr	r2, [pc, #364]	@ (8018a50 <printdirentry+0x1c8>)
 80188e4:	2180      	movs	r1, #128	@ 0x80
 80188e6:	f008 fabd 	bl	8020e64 <mg_snprintf>
 80188ea:	4603      	mov	r3, r0
 80188ec:	2b80      	cmp	r3, #128	@ 0x80
 80188ee:	d910      	bls.n	8018912 <printdirentry+0x8a>
      sizeof(path)) {
    MG_ERROR(("%s truncated", name));
 80188f0:	4b58      	ldr	r3, [pc, #352]	@ (8018a54 <printdirentry+0x1cc>)
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	f340 80a3 	ble.w	8018a40 <printdirentry+0x1b8>
 80188fa:	4b57      	ldr	r3, [pc, #348]	@ (8018a58 <printdirentry+0x1d0>)
 80188fc:	f640 3248 	movw	r2, #2888	@ 0xb48
 8018900:	4956      	ldr	r1, [pc, #344]	@ (8018a5c <printdirentry+0x1d4>)
 8018902:	2001      	movs	r0, #1
 8018904:	f002 fa92 	bl	801ae2c <mg_log_prefix>
 8018908:	6879      	ldr	r1, [r7, #4]
 801890a:	4855      	ldr	r0, [pc, #340]	@ (8018a60 <printdirentry+0x1d8>)
 801890c:	f002 fade 	bl	801aecc <mg_log>
              "  <tr><td><a href=\"%.*s%s\">%s%s</a></td>"
              "<td name=%lu>%s</td><td name=%lld>%s</td></tr>\n",
              n, path, slash, name, slash, (unsigned long) t, mod,
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
  }
}
 8018910:	e096      	b.n	8018a40 <printdirentry+0x1b8>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8018912:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 801891c:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8018920:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8018924:	4798      	blx	r3
 8018926:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 801892a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801892e:	2b00      	cmp	r3, #0
 8018930:	d11a      	bne.n	8018968 <printdirentry+0xe0>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8018932:	4b48      	ldr	r3, [pc, #288]	@ (8018a54 <printdirentry+0x1cc>)
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	2b00      	cmp	r3, #0
 8018938:	f340 8082 	ble.w	8018a40 <printdirentry+0x1b8>
 801893c:	4b46      	ldr	r3, [pc, #280]	@ (8018a58 <printdirentry+0x1d0>)
 801893e:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8018942:	4946      	ldr	r1, [pc, #280]	@ (8018a5c <printdirentry+0x1d4>)
 8018944:	2001      	movs	r0, #1
 8018946:	f002 fa71 	bl	801ae2c <mg_log_prefix>
 801894a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8018952:	f00e fd15 	bl	8027380 <__errno>
 8018956:	4603      	mov	r3, r0
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801895e:	4621      	mov	r1, r4
 8018960:	4840      	ldr	r0, [pc, #256]	@ (8018a64 <printdirentry+0x1dc>)
 8018962:	f002 fab3 	bl	801aecc <mg_log>
}
 8018966:	e06b      	b.n	8018a40 <printdirentry+0x1b8>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8018968:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801896c:	f003 0304 	and.w	r3, r3, #4
 8018970:	2b00      	cmp	r3, #0
 8018972:	d001      	beq.n	8018978 <printdirentry+0xf0>
 8018974:	4b3c      	ldr	r3, [pc, #240]	@ (8018a68 <printdirentry+0x1e0>)
 8018976:	e000      	b.n	801897a <printdirentry+0xf2>
 8018978:	4b3c      	ldr	r3, [pc, #240]	@ (8018a6c <printdirentry+0x1e4>)
 801897a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (flags & MG_FS_DIR) {
 801897e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8018982:	f003 0304 	and.w	r3, r3, #4
 8018986:	2b00      	cmp	r3, #0
 8018988:	d007      	beq.n	801899a <printdirentry+0x112>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 801898a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801898e:	4b38      	ldr	r3, [pc, #224]	@ (8018a70 <printdirentry+0x1e8>)
 8018990:	4a38      	ldr	r2, [pc, #224]	@ (8018a74 <printdirentry+0x1ec>)
 8018992:	2128      	movs	r1, #40	@ 0x28
 8018994:	f008 fa66 	bl	8020e64 <mg_snprintf>
 8018998:	e00d      	b.n	80189b6 <printdirentry+0x12e>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 801899a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801899e:	2200      	movs	r2, #0
 80189a0:	4698      	mov	r8, r3
 80189a2:	4691      	mov	r9, r2
 80189a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80189a8:	e9cd 8900 	strd	r8, r9, [sp]
 80189ac:	4a32      	ldr	r2, [pc, #200]	@ (8018a78 <printdirentry+0x1f0>)
 80189ae:	2128      	movs	r1, #40	@ 0x28
 80189b0:	4618      	mov	r0, r3
 80189b2:	f008 fa57 	bl	8020e64 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 80189b6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80189ba:	4613      	mov	r3, r2
 80189bc:	f107 0008 	add.w	r0, r7, #8
 80189c0:	4a2e      	ldr	r2, [pc, #184]	@ (8018a7c <printdirentry+0x1f4>)
 80189c2:	2128      	movs	r1, #40	@ 0x28
 80189c4:	f008 fa4e 	bl	8020e64 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 80189c8:	6878      	ldr	r0, [r7, #4]
 80189ca:	f7e7 fc69 	bl	80002a0 <strlen>
 80189ce:	4601      	mov	r1, r0
 80189d0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80189d4:	2380      	movs	r3, #128	@ 0x80
 80189d6:	6878      	ldr	r0, [r7, #4]
 80189d8:	f000 fbdc 	bl	8019194 <mg_url_encode>
 80189dc:	4603      	mov	r3, r0
 80189de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_printf(d->c,
 80189e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80189e6:	6818      	ldr	r0, [r3, #0]
 80189e8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80189ec:	4611      	mov	r1, r2
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 80189ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80189f2:	f003 0304 	and.w	r3, r3, #4
    mg_printf(d->c,
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d105      	bne.n	8018a06 <printdirentry+0x17e>
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 80189fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    mg_printf(d->c,
 80189fe:	2200      	movs	r2, #0
 8018a00:	461c      	mov	r4, r3
 8018a02:	4615      	mov	r5, r2
 8018a04:	e003      	b.n	8018a0e <printdirentry+0x186>
 8018a06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018a0a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8018a0e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8018a12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018a16:	9308      	str	r3, [sp, #32]
 8018a18:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018a1c:	f107 0308 	add.w	r3, r7, #8
 8018a20:	9304      	str	r3, [sp, #16]
 8018a22:	9103      	str	r1, [sp, #12]
 8018a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018a28:	9302      	str	r3, [sp, #8]
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	9301      	str	r3, [sp, #4]
 8018a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018a32:	9300      	str	r3, [sp, #0]
 8018a34:	4613      	mov	r3, r2
 8018a36:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8018a3a:	4911      	ldr	r1, [pc, #68]	@ (8018a80 <printdirentry+0x1f8>)
 8018a3c:	f004 fb3e 	bl	801d0bc <mg_printf>
}
 8018a40:	bf00      	nop
 8018a42:	37f8      	adds	r7, #248	@ 0xf8
 8018a44:	46bd      	mov	sp, r7
 8018a46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018a4a:	bf00      	nop
 8018a4c:	20000088 	.word	0x20000088
 8018a50:	08031b4c 	.word	0x08031b4c
 8018a54:	20000298 	.word	0x20000298
 8018a58:	08033e20 	.word	0x08033e20
 8018a5c:	080310b8 	.word	0x080310b8
 8018a60:	08031b54 	.word	0x08031b54
 8018a64:	08031b64 	.word	0x08031b64
 8018a68:	08031b78 	.word	0x08031b78
 8018a6c:	08031798 	.word	0x08031798
 8018a70:	08031b7c 	.word	0x08031b7c
 8018a74:	08031224 	.word	0x08031224
 8018a78:	08031b84 	.word	0x08031b84
 8018a7c:	08031b8c 	.word	0x08031b8c
 8018a80:	08031b90 	.word	0x08031b90

08018a84 <listdir>:

static void listdir(struct mg_connection *c, struct mg_http_message *hm,
                    const struct mg_http_serve_opts *opts, char *dir) {
 8018a84:	b580      	push	{r7, lr}
 8018a86:	b0b8      	sub	sp, #224	@ 0xe0
 8018a88:	af04      	add	r7, sp, #16
 8018a8a:	60f8      	str	r0, [r7, #12]
 8018a8c:	60b9      	str	r1, [r7, #8]
 8018a8e:	607a      	str	r2, [r7, #4]
 8018a90:	603b      	str	r3, [r7, #0]
  const char *sort_js_code =
 8018a92:	4b51      	ldr	r3, [pc, #324]	@ (8018bd8 <listdir+0x154>)
 8018a94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      "t1 = a.cells[2].getAttribute('name'), "
      "t2 = b.cells[2].getAttribute('name'); "
      "return so * (t1 < 0 && t2 >= 0 ? -1 : t2 < 0 && t1 >= 0 ? 1 : "
      "n1 ? parseInt(n2) - parseInt(n1) : "
      "c1.textContent.trim().localeCompare(c2.textContent.trim())); });";
  const char *sort_js_code2 =
 8018a98:	4b50      	ldr	r3, [pc, #320]	@ (8018bdc <listdir+0x158>)
 8018a9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      "var c = ev.target.rel; if (c) {if (c == sc) so *= -1; srt(tb, c, so); "
      "sc = c; ev.preventDefault();}};"
      "srt(tb, sc, so, true);"
      "}"
      "</script>";
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	695b      	ldr	r3, [r3, #20]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d002      	beq.n	8018aac <listdir+0x28>
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	695b      	ldr	r3, [r3, #20]
 8018aaa:	e000      	b.n	8018aae <listdir+0x2a>
 8018aac:	4b4c      	ldr	r3, [pc, #304]	@ (8018be0 <listdir+0x15c>)
 8018aae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  struct printdirentrydata d = {c, hm, opts, dir};
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8018ab8:	68bb      	ldr	r3, [r7, #8]
 8018aba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8018ac4:	683b      	ldr	r3, [r7, #0]
 8018ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  char tmp[10], buf[MG_PATH_MAX];
  size_t off, n;
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8018aca:	68bb      	ldr	r3, [r7, #8]
 8018acc:	6898      	ldr	r0, [r3, #8]
 8018ace:	68bb      	ldr	r3, [r7, #8]
 8018ad0:	68d9      	ldr	r1, [r3, #12]
 8018ad2:	f107 021c 	add.w	r2, r7, #28
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	9300      	str	r3, [sp, #0]
 8018ada:	2380      	movs	r3, #128	@ 0x80
 8018adc:	f7fe f8e5 	bl	8016caa <mg_url_decode>
 8018ae0:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8018ae4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	dd09      	ble.n	8018b00 <listdir+0x7c>
 8018aec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8018af0:	f107 0314 	add.w	r3, r7, #20
 8018af4:	f107 011c 	add.w	r1, r7, #28
 8018af8:	4618      	mov	r0, r3
 8018afa:	f008 feb8 	bl	802186e <mg_str_n>
 8018afe:	e007      	b.n	8018b10 <listdir+0x8c>
 8018b00:	68ba      	ldr	r2, [r7, #8]
 8018b02:	f107 0314 	add.w	r3, r7, #20
 8018b06:	3208      	adds	r2, #8
 8018b08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b0c:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_printf(c,
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html; charset=utf-8\r\n"
            "%s"
            "Content-Length:         \r\n\r\n",
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	689b      	ldr	r3, [r3, #8]
  mg_printf(c,
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d002      	beq.n	8018b1e <listdir+0x9a>
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	689b      	ldr	r3, [r3, #8]
 8018b1c:	e000      	b.n	8018b20 <listdir+0x9c>
 8018b1e:	4b31      	ldr	r3, [pc, #196]	@ (8018be4 <listdir+0x160>)
 8018b20:	461a      	mov	r2, r3
 8018b22:	4931      	ldr	r1, [pc, #196]	@ (8018be8 <listdir+0x164>)
 8018b24:	68f8      	ldr	r0, [r7, #12]
 8018b26:	f004 fac9 	bl	801d0bc <mg_printf>
  off = c->send.len;  // Start of body
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018b2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            "<a href=\"#\" rel=\"1\">Modified</a></th>"
            "<th><a href=\"#\" rel=\"2\">Size</a></th></tr>"
            "<tr><td colspan=\"3\"><hr></td></tr>"
            "</thead>"
            "<tbody id=\"tb\">\n",
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8018b32:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 8018b34:	4618      	mov	r0, r3
 8018b36:	697a      	ldr	r2, [r7, #20]
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8018b38:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 8018b3a:	4619      	mov	r1, r3
 8018b3c:	697b      	ldr	r3, [r7, #20]
 8018b3e:	9303      	str	r3, [sp, #12]
 8018b40:	9102      	str	r1, [sp, #8]
 8018b42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018b46:	9301      	str	r3, [sp, #4]
 8018b48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8018b4c:	9300      	str	r3, [sp, #0]
 8018b4e:	4613      	mov	r3, r2
 8018b50:	4602      	mov	r2, r0
 8018b52:	4926      	ldr	r1, [pc, #152]	@ (8018bec <listdir+0x168>)
 8018b54:	68f8      	ldr	r0, [r7, #12]
 8018b56:	f004 fab1 	bl	801d0bc <mg_printf>
            uri.buf);
  mg_printf(c, "%s",
 8018b5a:	4a25      	ldr	r2, [pc, #148]	@ (8018bf0 <listdir+0x16c>)
 8018b5c:	4925      	ldr	r1, [pc, #148]	@ (8018bf4 <listdir+0x170>)
 8018b5e:	68f8      	ldr	r0, [r7, #12]
 8018b60:	f004 faac 	bl	801d0bc <mg_printf>
            "  <tr><td><a href=\"..\">..</a></td>"
            "<td name=-1></td><td name=-1>[DIR]</td></tr>\n");

  fs->ls(dir, printdirentry, &d);
 8018b64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8018b68:	685b      	ldr	r3, [r3, #4]
 8018b6a:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8018b6e:	4922      	ldr	r1, [pc, #136]	@ (8018bf8 <listdir+0x174>)
 8018b70:	6838      	ldr	r0, [r7, #0]
 8018b72:	4798      	blx	r3
  mg_printf(c,
 8018b74:	4a21      	ldr	r2, [pc, #132]	@ (8018bfc <listdir+0x178>)
 8018b76:	4922      	ldr	r1, [pc, #136]	@ (8018c00 <listdir+0x17c>)
 8018b78:	68f8      	ldr	r0, [r7, #12]
 8018b7a:	f004 fa9f 	bl	801d0bc <mg_printf>
            "</tbody><tfoot><tr><td colspan=\"3\"><hr></td></tr></tfoot>"
            "</table><address>Mongoose v.%s</address></body></html>\n",
            MG_VERSION);
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018b82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018b86:	1ad3      	subs	r3, r2, r3
 8018b88:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8018b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8018c04 <listdir+0x180>)
 8018b8e:	210a      	movs	r1, #10
 8018b90:	f008 f968 	bl	8020e64 <mg_snprintf>
 8018b94:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  if (n > sizeof(tmp)) n = 0;
 8018b98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8018b9c:	2b0a      	cmp	r3, #10
 8018b9e:	d902      	bls.n	8018ba6 <listdir+0x122>
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018bae:	3b0c      	subs	r3, #12
 8018bb0:	4413      	add	r3, r2
 8018bb2:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8018bb6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8018bba:	4618      	mov	r0, r3
 8018bbc:	f00e fc24 	bl	8027408 <memcpy>
  c->is_resp = 0;                          // Mark response end
 8018bc0:	68fa      	ldr	r2, [r7, #12]
 8018bc2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8018bc6:	f36f 13c7 	bfc	r3, #7, #1
 8018bca:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8018bce:	bf00      	nop
 8018bd0:	37d0      	adds	r7, #208	@ 0xd0
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd80      	pop	{r7, pc}
 8018bd6:	bf00      	nop
 8018bd8:	08031be8 	.word	0x08031be8
 8018bdc:	08031db0 	.word	0x08031db0
 8018be0:	20000088 	.word	0x20000088
 8018be4:	08031798 	.word	0x08031798
 8018be8:	08031f74 	.word	0x08031f74
 8018bec:	08031fcc 	.word	0x08031fcc
 8018bf0:	08032154 	.word	0x08032154
 8018bf4:	08031224 	.word	0x08031224
 8018bf8:	08018889 	.word	0x08018889
 8018bfc:	080321a4 	.word	0x080321a4
 8018c00:	080321ac 	.word	0x080321ac
 8018c04:	08031b8c 	.word	0x08031b8c

08018c08 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8018c08:	b082      	sub	sp, #8
 8018c0a:	b590      	push	{r4, r7, lr}
 8018c0c:	b08f      	sub	sp, #60	@ 0x3c
 8018c0e:	af02      	add	r7, sp, #8
 8018c10:	60f8      	str	r0, [r7, #12]
 8018c12:	60b9      	str	r1, [r7, #8]
 8018c14:	607a      	str	r2, [r7, #4]
 8018c16:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8018c18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018c1a:	461a      	mov	r2, r3
 8018c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c1e:	9300      	str	r3, [sp, #0]
 8018c20:	4613      	mov	r3, r2
 8018c22:	4a9c      	ldr	r2, [pc, #624]	@ (8018e94 <uri_to_path2+0x28c>)
 8018c24:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8018c26:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018c28:	f008 f91c 	bl	8020e64 <mg_snprintf>
 8018c2c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 8018c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c30:	3302      	adds	r3, #2
 8018c32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018c34:	429a      	cmp	r2, r3
 8018c36:	d809      	bhi.n	8018c4c <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8018c38:	4b97      	ldr	r3, [pc, #604]	@ (8018e98 <uri_to_path2+0x290>)
 8018c3a:	4a98      	ldr	r2, [pc, #608]	@ (8018e9c <uri_to_path2+0x294>)
 8018c3c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018c40:	68f8      	ldr	r0, [r7, #12]
 8018c42:	f7ff f94b 	bl	8017edc <mg_http_reply>
    return -1;
 8018c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018c4a:	e143      	b.n	8018ed4 <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 8018c4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018c4e:	3b01      	subs	r3, #1
 8018c50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018c52:	4413      	add	r3, r2
 8018c54:	2200      	movs	r2, #0
 8018c56:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8018c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d012      	beq.n	8018c84 <uri_to_path2+0x7c>
 8018c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c60:	3b01      	subs	r3, #1
 8018c62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018c64:	4413      	add	r3, r2
 8018c66:	781b      	ldrb	r3, [r3, #0]
 8018c68:	2b2f      	cmp	r3, #47	@ 0x2f
 8018c6a:	d00b      	beq.n	8018c84 <uri_to_path2+0x7c>
 8018c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c6e:	1c5a      	adds	r2, r3, #1
 8018c70:	627a      	str	r2, [r7, #36]	@ 0x24
 8018c72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018c74:	4413      	add	r3, r2
 8018c76:	222f      	movs	r2, #47	@ 0x2f
 8018c78:	701a      	strb	r2, [r3, #0]
 8018c7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c7e:	4413      	add	r3, r2
 8018c80:	2200      	movs	r2, #0
 8018c82:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 8018c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018c86:	68bb      	ldr	r3, [r7, #8]
 8018c88:	68db      	ldr	r3, [r3, #12]
 8018c8a:	429a      	cmp	r2, r3
 8018c8c:	d212      	bcs.n	8018cb4 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8018c8e:	68bb      	ldr	r3, [r7, #8]
 8018c90:	689a      	ldr	r2, [r3, #8]
 8018c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018c94:	18d0      	adds	r0, r2, r3
 8018c96:	68bb      	ldr	r3, [r7, #8]
 8018c98:	68da      	ldr	r2, [r3, #12]
 8018c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018c9c:	1ad1      	subs	r1, r2, r3
 8018c9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ca2:	18d4      	adds	r4, r2, r3
 8018ca4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ca8:	1ad3      	subs	r3, r2, r3
 8018caa:	2200      	movs	r2, #0
 8018cac:	9200      	str	r2, [sp, #0]
 8018cae:	4622      	mov	r2, r4
 8018cb0:	f7fd fffb 	bl	8016caa <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 8018cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018cb6:	3b01      	subs	r3, #1
 8018cb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018cba:	4413      	add	r3, r2
 8018cbc:	2200      	movs	r2, #0
 8018cbe:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8018cc0:	f107 0314 	add.w	r3, r7, #20
 8018cc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018cc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018cc8:	4618      	mov	r0, r3
 8018cca:	f008 fdd0 	bl	802186e <mg_str_n>
 8018cce:	f107 0314 	add.w	r3, r7, #20
 8018cd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018cd6:	f009 fda1 	bl	802281c <mg_path_is_sane>
 8018cda:	4603      	mov	r3, r0
 8018cdc:	f083 0301 	eor.w	r3, r3, #1
 8018ce0:	b2db      	uxtb	r3, r3
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d009      	beq.n	8018cfa <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 8018ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8018ea0 <uri_to_path2+0x298>)
 8018ce8:	4a6c      	ldr	r2, [pc, #432]	@ (8018e9c <uri_to_path2+0x294>)
 8018cea:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018cee:	68f8      	ldr	r0, [r7, #12]
 8018cf0:	f7ff f8f4 	bl	8017edc <mg_http_reply>
    return -1;
 8018cf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018cf8:	e0ec      	b.n	8018ed4 <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 8018cfa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018cfc:	f7e7 fad0 	bl	80002a0 <strlen>
 8018d00:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8018d02:	e007      	b.n	8018d14 <uri_to_path2+0x10c>
 8018d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d06:	3b01      	subs	r3, #1
 8018d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8018d0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d0e:	4413      	add	r3, r2
 8018d10:	2200      	movs	r2, #0
 8018d12:	701a      	strb	r2, [r3, #0]
 8018d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d16:	2b01      	cmp	r3, #1
 8018d18:	d906      	bls.n	8018d28 <uri_to_path2+0x120>
 8018d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d1c:	3b01      	subs	r3, #1
 8018d1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018d20:	4413      	add	r3, r2
 8018d22:	781b      	ldrb	r3, [r3, #0]
 8018d24:	2b2f      	cmp	r3, #47	@ 0x2f
 8018d26:	d0ed      	beq.n	8018d04 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8018d28:	f107 031c 	add.w	r3, r7, #28
 8018d2c:	495d      	ldr	r1, [pc, #372]	@ (8018ea4 <uri_to_path2+0x29c>)
 8018d2e:	4618      	mov	r0, r3
 8018d30:	f008 fd80 	bl	8021834 <mg_str_s>
 8018d34:	68b9      	ldr	r1, [r7, #8]
 8018d36:	f107 031c 	add.w	r3, r7, #28
 8018d3a:	cb0c      	ldmia	r3, {r2, r3}
 8018d3c:	3108      	adds	r1, #8
 8018d3e:	c903      	ldmia	r1, {r0, r1}
 8018d40:	f008 fdc2 	bl	80218c8 <mg_strcmp>
 8018d44:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d007      	beq.n	8018d5a <uri_to_path2+0x152>
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	2200      	movs	r2, #0
 8018d50:	2100      	movs	r1, #0
 8018d52:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018d54:	4798      	blx	r3
 8018d56:	4603      	mov	r3, r0
 8018d58:	e000      	b.n	8018d5c <uri_to_path2+0x154>
 8018d5a:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8018d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8018d5e:	4b52      	ldr	r3, [pc, #328]	@ (8018ea8 <uri_to_path2+0x2a0>)
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	2b03      	cmp	r3, #3
 8018d64:	dd16      	ble.n	8018d94 <uri_to_path2+0x18c>
 8018d66:	4b51      	ldr	r3, [pc, #324]	@ (8018eac <uri_to_path2+0x2a4>)
 8018d68:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8018d6c:	4950      	ldr	r1, [pc, #320]	@ (8018eb0 <uri_to_path2+0x2a8>)
 8018d6e:	2004      	movs	r0, #4
 8018d70:	f002 f85c 	bl	801ae2c <mg_log_prefix>
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8018d78:	68bb      	ldr	r3, [r7, #8]
 8018d7a:	68db      	ldr	r3, [r3, #12]
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	68bb      	ldr	r3, [r7, #8]
 8018d80:	689a      	ldr	r2, [r3, #8]
 8018d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d84:	9301      	str	r3, [sp, #4]
 8018d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d88:	9300      	str	r3, [sp, #0]
 8018d8a:	4613      	mov	r3, r2
 8018d8c:	4602      	mov	r2, r0
 8018d8e:	4849      	ldr	r0, [pc, #292]	@ (8018eb4 <uri_to_path2+0x2ac>)
 8018d90:	f002 f89c 	bl	801aecc <mg_log>
              flags));
  if (flags == 0) {
 8018d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	f000 809b 	beq.w	8018ed2 <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8018d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d9e:	f003 0304 	and.w	r3, r3, #4
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d020      	beq.n	8018de8 <uri_to_path2+0x1e0>
 8018da6:	68bb      	ldr	r3, [r7, #8]
 8018da8:	68db      	ldr	r3, [r3, #12]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d01c      	beq.n	8018de8 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8018dae:	68bb      	ldr	r3, [r7, #8]
 8018db0:	689a      	ldr	r2, [r3, #8]
 8018db2:	68bb      	ldr	r3, [r7, #8]
 8018db4:	68db      	ldr	r3, [r3, #12]
 8018db6:	3b01      	subs	r3, #1
 8018db8:	4413      	add	r3, r2
 8018dba:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8018dbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8018dbe:	d013      	beq.n	8018de8 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 8018dc0:	68bb      	ldr	r3, [r7, #8]
 8018dc2:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8018dc4:	461a      	mov	r2, r3
 8018dc6:	68bb      	ldr	r3, [r7, #8]
 8018dc8:	689b      	ldr	r3, [r3, #8]
 8018dca:	493b      	ldr	r1, [pc, #236]	@ (8018eb8 <uri_to_path2+0x2b0>)
 8018dcc:	68f8      	ldr	r0, [r7, #12]
 8018dce:	f004 f975 	bl	801d0bc <mg_printf>
    c->is_resp = 0;
 8018dd2:	68fa      	ldr	r2, [r7, #12]
 8018dd4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8018dd8:	f36f 13c7 	bfc	r3, #7, #1
 8018ddc:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 8018de0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018de6:	e074      	b.n	8018ed2 <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 8018de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dea:	f003 0304 	and.w	r3, r3, #4
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d06f      	beq.n	8018ed2 <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8018df2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018df6:	18d0      	adds	r0, r2, r3
 8018df8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dfc:	1ad3      	subs	r3, r2, r3
 8018dfe:	4a2f      	ldr	r2, [pc, #188]	@ (8018ebc <uri_to_path2+0x2b4>)
 8018e00:	4619      	mov	r1, r3
 8018e02:	f008 f82f 	bl	8020e64 <mg_snprintf>
 8018e06:	4603      	mov	r3, r0
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d009      	beq.n	8018e20 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	2200      	movs	r2, #0
 8018e12:	2100      	movs	r1, #0
 8018e14:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018e16:	4798      	blx	r3
 8018e18:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8018e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d116      	bne.n	8018e4e <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8018e20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e24:	18d0      	adds	r0, r2, r3
 8018e26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e2a:	1ad3      	subs	r3, r2, r3
 8018e2c:	4a24      	ldr	r2, [pc, #144]	@ (8018ec0 <uri_to_path2+0x2b8>)
 8018e2e:	4619      	mov	r1, r3
 8018e30:	f008 f818 	bl	8020e64 <mg_snprintf>
 8018e34:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d00c      	beq.n	8018e54 <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	2200      	movs	r2, #0
 8018e40:	2100      	movs	r1, #0
 8018e42:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018e44:	4798      	blx	r3
 8018e46:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8018e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d002      	beq.n	8018e54 <uri_to_path2+0x24c>
      flags = tmp;
 8018e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018e52:	e03e      	b.n	8018ed2 <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8018e54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e58:	18d0      	adds	r0, r2, r3
 8018e5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e5e:	1ad3      	subs	r3, r2, r3
 8018e60:	4a18      	ldr	r2, [pc, #96]	@ (8018ec4 <uri_to_path2+0x2bc>)
 8018e62:	4619      	mov	r1, r3
 8018e64:	f007 fffe 	bl	8020e64 <mg_snprintf>
 8018e68:	4603      	mov	r3, r0
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d02c      	beq.n	8018ec8 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	2200      	movs	r2, #0
 8018e74:	2100      	movs	r1, #0
 8018e76:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018e78:	4798      	blx	r3
 8018e7a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 8018e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d022      	beq.n	8018ec8 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 8018e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8018e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e88:	330b      	adds	r3, #11
 8018e8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018e8c:	4413      	add	r3, r2
 8018e8e:	2200      	movs	r2, #0
 8018e90:	701a      	strb	r2, [r3, #0]
 8018e92:	e01e      	b.n	8018ed2 <uri_to_path2+0x2ca>
 8018e94:	08031238 	.word	0x08031238
 8018e98:	08032220 	.word	0x08032220
 8018e9c:	08031798 	.word	0x08031798
 8018ea0:	08032234 	.word	0x08032234
 8018ea4:	08031b78 	.word	0x08031b78
 8018ea8:	20000298 	.word	0x20000298
 8018eac:	08033e30 	.word	0x08033e30
 8018eb0:	080310b8 	.word	0x080310b8
 8018eb4:	08032244 	.word	0x08032244
 8018eb8:	08032258 	.word	0x08032258
 8018ebc:	08032294 	.word	0x08032294
 8018ec0:	080322a0 	.word	0x080322a0
 8018ec4:	080322b0 	.word	0x080322b0
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8018ec8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ecc:	4413      	add	r3, r2
 8018ece:	2200      	movs	r2, #0
 8018ed0:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8018ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	3734      	adds	r7, #52	@ 0x34
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8018ede:	b002      	add	sp, #8
 8018ee0:	4770      	bx	lr
 8018ee2:	bf00      	nop

08018ee4 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b09c      	sub	sp, #112	@ 0x70
 8018ee8:	af06      	add	r7, sp, #24
 8018eea:	6178      	str	r0, [r7, #20]
 8018eec:	6139      	str	r1, [r7, #16]
 8018eee:	60fa      	str	r2, [r7, #12]
 8018ef0:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	695b      	ldr	r3, [r3, #20]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d002      	beq.n	8018f00 <uri_to_path+0x1c>
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	695b      	ldr	r3, [r3, #20]
 8018efe:	e000      	b.n	8018f02 <uri_to_path+0x1e>
 8018f00:	4b5b      	ldr	r3, [pc, #364]	@ (8019070 <uri_to_path+0x18c>)
 8018f02:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	681a      	ldr	r2, [r3, #0]
 8018f08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018f0c:	4611      	mov	r1, r2
 8018f0e:	4618      	mov	r0, r3
 8018f10:	f008 fc90 	bl	8021834 <mg_str_s>
 8018f14:	2300      	movs	r3, #0
 8018f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8018f18:	2300      	movs	r3, #0
 8018f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018f1c:	f107 031c 	add.w	r3, r7, #28
 8018f20:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018f24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f28:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8018f2c:	e078      	b.n	8019020 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8018f2e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018f32:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8018f36:	213d      	movs	r1, #61	@ 0x3d
 8018f38:	9100      	str	r1, [sp, #0]
 8018f3a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8018f3e:	c903      	ldmia	r1, {r0, r1}
 8018f40:	f008 fe3f 	bl	8021bc2 <mg_span>
 8018f44:	4603      	mov	r3, r0
 8018f46:	f083 0301 	eor.w	r3, r3, #1
 8018f4a:	b2db      	uxtb	r3, r3
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d014      	beq.n	8018f7a <uri_to_path+0x96>
 8018f50:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8018f54:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8018f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018f60:	463b      	mov	r3, r7
 8018f62:	2200      	movs	r2, #0
 8018f64:	2100      	movs	r1, #0
 8018f66:	4618      	mov	r0, r3
 8018f68:	f008 fc81 	bl	802186e <mg_str_n>
 8018f6c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018f70:	463a      	mov	r2, r7
 8018f72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f76:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8018f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d123      	bne.n	8018fc8 <uri_to_path+0xe4>
 8018f80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018f84:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8018f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018f90:	463b      	mov	r3, r7
 8018f92:	4938      	ldr	r1, [pc, #224]	@ (8019074 <uri_to_path+0x190>)
 8018f94:	4618      	mov	r0, r3
 8018f96:	f008 fc4d 	bl	8021834 <mg_str_s>
 8018f9a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8018f9e:	463a      	mov	r2, r7
 8018fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018fa4:	e883 0003 	stmia.w	r3, {r0, r1}
 8018fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018fac:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8018fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018fb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8018fb8:	f107 031c 	add.w	r3, r7, #28
 8018fbc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8018fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018fc4:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8018fc8:	693b      	ldr	r3, [r7, #16]
 8018fca:	68da      	ldr	r2, [r3, #12]
 8018fcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018fce:	429a      	cmp	r2, r3
 8018fd0:	d323      	bcc.n	801901a <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8018fd2:	693b      	ldr	r3, [r7, #16]
 8018fd4:	6899      	ldr	r1, [r3, #8]
 8018fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018fd8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018fdc:	4618      	mov	r0, r3
 8018fde:	f008 fc46 	bl	802186e <mg_str_n>
 8018fe2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018fe6:	cb0c      	ldmia	r3, {r2, r3}
 8018fe8:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8018fec:	c903      	ldmia	r1, {r0, r1}
 8018fee:	f008 fc6b 	bl	80218c8 <mg_strcmp>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d112      	bne.n	801901e <uri_to_path+0x13a>
    u = k, p = v;
 8018ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018ffc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8019000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019004:	e883 0003 	stmia.w	r3, {r0, r1}
 8019008:	f107 031c 	add.w	r3, r7, #28
 801900c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8019010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019014:	e883 0003 	stmia.w	r3, {r0, r1}
 8019018:	e002      	b.n	8019020 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 801901a:	bf00      	nop
 801901c:	e000      	b.n	8019020 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 801901e:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 8019020:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019024:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8019028:	212c      	movs	r1, #44	@ 0x2c
 801902a:	9100      	str	r1, [sp, #0]
 801902c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8019030:	c903      	ldmia	r1, {r0, r1}
 8019032:	f008 fdc6 	bl	8021bc2 <mg_span>
 8019036:	4603      	mov	r3, r0
 8019038:	2b00      	cmp	r3, #0
 801903a:	f47f af78 	bne.w	8018f2e <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 801903e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019040:	9304      	str	r3, [sp, #16]
 8019042:	68bb      	ldr	r3, [r7, #8]
 8019044:	9303      	str	r3, [sp, #12]
 8019046:	aa01      	add	r2, sp, #4
 8019048:	f107 031c 	add.w	r3, r7, #28
 801904c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019050:	e882 0003 	stmia.w	r2, {r0, r1}
 8019054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019056:	9300      	str	r3, [sp, #0]
 8019058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801905a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801905c:	6939      	ldr	r1, [r7, #16]
 801905e:	6978      	ldr	r0, [r7, #20]
 8019060:	f7ff fdd2 	bl	8018c08 <uri_to_path2>
 8019064:	4603      	mov	r3, r0
}
 8019066:	4618      	mov	r0, r3
 8019068:	3758      	adds	r7, #88	@ 0x58
 801906a:	46bd      	mov	sp, r7
 801906c:	bd80      	pop	{r7, pc}
 801906e:	bf00      	nop
 8019070:	20000088 	.word	0x20000088
 8019074:	08031b78 	.word	0x08031b78

08019078 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8019078:	b580      	push	{r7, lr}
 801907a:	b0ac      	sub	sp, #176	@ 0xb0
 801907c:	af02      	add	r7, sp, #8
 801907e:	60f8      	str	r0, [r7, #12]
 8019080:	60b9      	str	r1, [r7, #8]
 8019082:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	685b      	ldr	r3, [r3, #4]
 8019088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 801908c:	f107 0310 	add.w	r3, r7, #16
 8019090:	2280      	movs	r2, #128	@ 0x80
 8019092:	9200      	str	r2, [sp, #0]
 8019094:	687a      	ldr	r2, [r7, #4]
 8019096:	68b9      	ldr	r1, [r7, #8]
 8019098:	68f8      	ldr	r0, [r7, #12]
 801909a:	f7ff ff23 	bl	8018ee4 <uri_to_path>
 801909e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  if (flags < 0) {
 80190a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	db41      	blt.n	801912e <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 80190aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80190ae:	f003 0304 	and.w	r3, r3, #4
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d007      	beq.n	80190c6 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
 80190b6:	f107 0310 	add.w	r3, r7, #16
 80190ba:	687a      	ldr	r2, [r7, #4]
 80190bc:	68b9      	ldr	r1, [r7, #8]
 80190be:	68f8      	ldr	r0, [r7, #12]
 80190c0:	f7ff fce0 	bl	8018a84 <listdir>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 80190c4:	e033      	b.n	801912e <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 80190c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d028      	beq.n	8019120 <mg_http_serve_dir+0xa8>
 80190ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d024      	beq.n	8019120 <mg_http_serve_dir+0xa8>
 80190d6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80190da:	f107 0210 	add.w	r2, r7, #16
 80190de:	4611      	mov	r1, r2
 80190e0:	4618      	mov	r0, r3
 80190e2:	f008 fba7 	bl	8021834 <mg_str_s>
 80190e6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80190ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80190ee:	4618      	mov	r0, r3
 80190f0:	f008 fba0 	bl	8021834 <mg_str_s>
 80190f4:	2300      	movs	r3, #0
 80190f6:	9300      	str	r3, [sp, #0]
 80190f8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80190fc:	cb0c      	ldmia	r3, {r2, r3}
 80190fe:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8019102:	c903      	ldmia	r1, {r0, r1}
 8019104:	f008 fc69 	bl	80219da <mg_match>
 8019108:	4603      	mov	r3, r0
 801910a:	2b00      	cmp	r3, #0
 801910c:	d008      	beq.n	8019120 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	f107 0210 	add.w	r2, r7, #16
 8019116:	4619      	mov	r1, r3
 8019118:	68f8      	ldr	r0, [r7, #12]
 801911a:	f008 fb77 	bl	802180c <mg_http_serve_ssi>
}
 801911e:	e006      	b.n	801912e <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 8019120:	f107 0210 	add.w	r2, r7, #16
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	68b9      	ldr	r1, [r7, #8]
 8019128:	68f8      	ldr	r0, [r7, #12]
 801912a:	f7ff f8cb 	bl	80182c4 <mg_http_serve_file>
}
 801912e:	bf00      	nop
 8019130:	37a8      	adds	r7, #168	@ 0xa8
 8019132:	46bd      	mov	sp, r7
 8019134:	bd80      	pop	{r7, pc}

08019136 <mg_is_url_safe>:

static bool mg_is_url_safe(int c) {
 8019136:	b480      	push	{r7}
 8019138:	b083      	sub	sp, #12
 801913a:	af00      	add	r7, sp, #0
 801913c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	2b2f      	cmp	r3, #47	@ 0x2f
 8019142:	dd02      	ble.n	801914a <mg_is_url_safe+0x14>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	2b39      	cmp	r3, #57	@ 0x39
 8019148:	dd17      	ble.n	801917a <mg_is_url_safe+0x44>
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	2b60      	cmp	r3, #96	@ 0x60
 801914e:	dd02      	ble.n	8019156 <mg_is_url_safe+0x20>
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	2b7a      	cmp	r3, #122	@ 0x7a
 8019154:	dd11      	ble.n	801917a <mg_is_url_safe+0x44>
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	2b40      	cmp	r3, #64	@ 0x40
 801915a:	dd02      	ble.n	8019162 <mg_is_url_safe+0x2c>
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	2b5a      	cmp	r3, #90	@ 0x5a
 8019160:	dd0b      	ble.n	801917a <mg_is_url_safe+0x44>
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	2b2e      	cmp	r3, #46	@ 0x2e
 8019166:	d008      	beq.n	801917a <mg_is_url_safe+0x44>
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	2b5f      	cmp	r3, #95	@ 0x5f
 801916c:	d005      	beq.n	801917a <mg_is_url_safe+0x44>
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	2b2d      	cmp	r3, #45	@ 0x2d
 8019172:	d002      	beq.n	801917a <mg_is_url_safe+0x44>
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	2b7e      	cmp	r3, #126	@ 0x7e
 8019178:	d101      	bne.n	801917e <mg_is_url_safe+0x48>
 801917a:	2301      	movs	r3, #1
 801917c:	e000      	b.n	8019180 <mg_is_url_safe+0x4a>
 801917e:	2300      	movs	r3, #0
 8019180:	f003 0301 	and.w	r3, r3, #1
 8019184:	b2db      	uxtb	r3, r3
}
 8019186:	4618      	mov	r0, r3
 8019188:	370c      	adds	r7, #12
 801918a:	46bd      	mov	sp, r7
 801918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019190:	4770      	bx	lr
	...

08019194 <mg_url_encode>:

size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8019194:	b580      	push	{r7, lr}
 8019196:	b08a      	sub	sp, #40	@ 0x28
 8019198:	af02      	add	r7, sp, #8
 801919a:	60f8      	str	r0, [r7, #12]
 801919c:	60b9      	str	r1, [r7, #8]
 801919e:	607a      	str	r2, [r7, #4]
 80191a0:	603b      	str	r3, [r7, #0]
  size_t i, n = 0;
 80191a2:	2300      	movs	r3, #0
 80191a4:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 80191a6:	2300      	movs	r3, #0
 80191a8:	61fb      	str	r3, [r7, #28]
 80191aa:	e030      	b.n	801920e <mg_url_encode+0x7a>
    int c = *(unsigned char *) &s[i];
 80191ac:	68fa      	ldr	r2, [r7, #12]
 80191ae:	69fb      	ldr	r3, [r7, #28]
 80191b0:	4413      	add	r3, r2
 80191b2:	781b      	ldrb	r3, [r3, #0]
 80191b4:	617b      	str	r3, [r7, #20]
    if (n + 4 >= len) return 0;
 80191b6:	69bb      	ldr	r3, [r7, #24]
 80191b8:	3304      	adds	r3, #4
 80191ba:	683a      	ldr	r2, [r7, #0]
 80191bc:	429a      	cmp	r2, r3
 80191be:	d801      	bhi.n	80191c4 <mg_url_encode+0x30>
 80191c0:	2300      	movs	r3, #0
 80191c2:	e03f      	b.n	8019244 <mg_url_encode+0xb0>
    if (mg_is_url_safe(c)) {
 80191c4:	6978      	ldr	r0, [r7, #20]
 80191c6:	f7ff ffb6 	bl	8019136 <mg_is_url_safe>
 80191ca:	4603      	mov	r3, r0
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d00a      	beq.n	80191e6 <mg_url_encode+0x52>
      buf[n++] = s[i];
 80191d0:	68fa      	ldr	r2, [r7, #12]
 80191d2:	69fb      	ldr	r3, [r7, #28]
 80191d4:	441a      	add	r2, r3
 80191d6:	69bb      	ldr	r3, [r7, #24]
 80191d8:	1c59      	adds	r1, r3, #1
 80191da:	61b9      	str	r1, [r7, #24]
 80191dc:	6879      	ldr	r1, [r7, #4]
 80191de:	440b      	add	r3, r1
 80191e0:	7812      	ldrb	r2, [r2, #0]
 80191e2:	701a      	strb	r2, [r3, #0]
 80191e4:	e010      	b.n	8019208 <mg_url_encode+0x74>
    } else {
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 80191e6:	687a      	ldr	r2, [r7, #4]
 80191e8:	69bb      	ldr	r3, [r7, #24]
 80191ea:	18d0      	adds	r0, r2, r3
 80191ec:	68fa      	ldr	r2, [r7, #12]
 80191ee:	69fb      	ldr	r3, [r7, #28]
 80191f0:	4413      	add	r3, r2
 80191f2:	9301      	str	r3, [sp, #4]
 80191f4:	2301      	movs	r3, #1
 80191f6:	9300      	str	r3, [sp, #0]
 80191f8:	4b14      	ldr	r3, [pc, #80]	@ (801924c <mg_url_encode+0xb8>)
 80191fa:	4a15      	ldr	r2, [pc, #84]	@ (8019250 <mg_url_encode+0xbc>)
 80191fc:	2104      	movs	r1, #4
 80191fe:	f007 fe31 	bl	8020e64 <mg_snprintf>
      n += 3;
 8019202:	69bb      	ldr	r3, [r7, #24]
 8019204:	3303      	adds	r3, #3
 8019206:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 8019208:	69fb      	ldr	r3, [r7, #28]
 801920a:	3301      	adds	r3, #1
 801920c:	61fb      	str	r3, [r7, #28]
 801920e:	69fa      	ldr	r2, [r7, #28]
 8019210:	68bb      	ldr	r3, [r7, #8]
 8019212:	429a      	cmp	r2, r3
 8019214:	d3ca      	bcc.n	80191ac <mg_url_encode+0x18>
    }
  }
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 8019216:	683b      	ldr	r3, [r7, #0]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d009      	beq.n	8019230 <mg_url_encode+0x9c>
 801921c:	683b      	ldr	r3, [r7, #0]
 801921e:	3b01      	subs	r3, #1
 8019220:	69ba      	ldr	r2, [r7, #24]
 8019222:	429a      	cmp	r2, r3
 8019224:	d204      	bcs.n	8019230 <mg_url_encode+0x9c>
 8019226:	687a      	ldr	r2, [r7, #4]
 8019228:	69bb      	ldr	r3, [r7, #24]
 801922a:	4413      	add	r3, r2
 801922c:	2200      	movs	r2, #0
 801922e:	701a      	strb	r2, [r3, #0]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8019230:	683b      	ldr	r3, [r7, #0]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d005      	beq.n	8019242 <mg_url_encode+0xae>
 8019236:	683b      	ldr	r3, [r7, #0]
 8019238:	3b01      	subs	r3, #1
 801923a:	687a      	ldr	r2, [r7, #4]
 801923c:	4413      	add	r3, r2
 801923e:	2200      	movs	r2, #0
 8019240:	701a      	strb	r2, [r3, #0]
  return n;
 8019242:	69bb      	ldr	r3, [r7, #24]
}
 8019244:	4618      	mov	r0, r3
 8019246:	3720      	adds	r7, #32
 8019248:	46bd      	mov	sp, r7
 801924a:	bd80      	pop	{r7, pc}
 801924c:	0802114d 	.word	0x0802114d
 8019250:	080322c0 	.word	0x080322c0

08019254 <mg_http_upload>:
#define headers_tmp     "Content-Type: application/json\r\n" "Access-Control-Allow-Origin: *\r\n" "Access-Control-Allow-Headers: Content-Type\r\n"



long mg_http_upload(struct mg_connection *c, struct mg_http_message *hm,
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8019254:	b590      	push	{r4, r7, lr}
 8019256:	b0d3      	sub	sp, #332	@ 0x14c
 8019258:	af02      	add	r7, sp, #8
 801925a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 801925e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8019262:	6020      	str	r0, [r4, #0]
 8019264:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8019268:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 801926c:	6001      	str	r1, [r0, #0]
 801926e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8019272:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8019276:	600a      	str	r2, [r1, #0]
 8019278:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801927c:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8019280:	6013      	str	r3, [r2, #0]
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8019282:	2330      	movs	r3, #48	@ 0x30
 8019284:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8019288:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 801928c:	2200      	movs	r2, #0
 801928e:	601a      	str	r2, [r3, #0]
 8019290:	605a      	str	r2, [r3, #4]
 8019292:	609a      	str	r2, [r3, #8]
 8019294:	60da      	str	r2, [r3, #12]
  long res = 0, offset;
 8019296:	2300      	movs	r3, #0
 8019298:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 801929c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80192a0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	f103 0010 	add.w	r0, r3, #16
 80192aa:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80192ae:	2314      	movs	r3, #20
 80192b0:	49b5      	ldr	r1, [pc, #724]	@ (8019588 <mg_http_upload+0x334>)
 80192b2:	f7fd fc85 	bl	8016bc0 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80192b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80192ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	f103 0010 	add.w	r0, r3, #16
 80192c4:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80192c8:	2380      	movs	r3, #128	@ 0x80
 80192ca:	49b0      	ldr	r1, [pc, #704]	@ (801958c <mg_http_upload+0x338>)
 80192cc:	f7fd fc78 	bl	8016bc0 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 80192d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80192d4:	2200      	movs	r2, #0
 80192d6:	2100      	movs	r1, #0
 80192d8:	4618      	mov	r0, r3
 80192da:	f00c f9c3 	bl	8025664 <strtol>
 80192de:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 80192e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80192e6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80192ea:	f107 0018 	add.w	r0, r7, #24
 80192ee:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80192f2:	9201      	str	r2, [sp, #4]
 80192f4:	222f      	movs	r2, #47	@ 0x2f
 80192f6:	9200      	str	r2, [sp, #0]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	4aa5      	ldr	r2, [pc, #660]	@ (8019590 <mg_http_upload+0x33c>)
 80192fc:	2180      	movs	r1, #128	@ 0x80
 80192fe:	f007 fdb1 	bl	8020e64 <mg_snprintf>
  if (hm->body.len == 0) {
 8019302:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019306:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019310:	2b00      	cmp	r3, #0
 8019312:	d10d      	bne.n	8019330 <mg_http_upload+0xdc>
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8019314:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019318:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 801931c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019320:	9300      	str	r3, [sp, #0]
 8019322:	4b9c      	ldr	r3, [pc, #624]	@ (8019594 <mg_http_upload+0x340>)
 8019324:	4a9c      	ldr	r2, [pc, #624]	@ (8019598 <mg_http_upload+0x344>)
 8019326:	21c8      	movs	r1, #200	@ 0xc8
 8019328:	6800      	ldr	r0, [r0, #0]
 801932a:	f7fe fdd7 	bl	8017edc <mg_http_reply>
 801932e:	e123      	b.n	8019578 <mg_http_upload+0x324>
  } else if (file[0] == '\0') {
 8019330:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8019334:	2b00      	cmp	r3, #0
 8019336:	d10f      	bne.n	8019358 <mg_http_upload+0x104>
    mg_http_reply(c, 400, "", "file required");
 8019338:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801933c:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8019340:	4b96      	ldr	r3, [pc, #600]	@ (801959c <mg_http_upload+0x348>)
 8019342:	4a97      	ldr	r2, [pc, #604]	@ (80195a0 <mg_http_upload+0x34c>)
 8019344:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019348:	6800      	ldr	r0, [r0, #0]
 801934a:	f7fe fdc7 	bl	8017edc <mg_http_reply>
    res = -1;
 801934e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019352:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8019356:	e10f      	b.n	8019578 <mg_http_upload+0x324>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8019358:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801935c:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8019360:	4611      	mov	r1, r2
 8019362:	4618      	mov	r0, r3
 8019364:	f008 fa66 	bl	8021834 <mg_str_s>
 8019368:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801936c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019370:	f009 fa54 	bl	802281c <mg_path_is_sane>
 8019374:	4603      	mov	r3, r0
 8019376:	f083 0301 	eor.w	r3, r3, #1
 801937a:	b2db      	uxtb	r3, r3
 801937c:	2b00      	cmp	r3, #0
 801937e:	d012      	beq.n	80193a6 <mg_http_upload+0x152>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8019380:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019384:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8019388:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801938c:	9300      	str	r3, [sp, #0]
 801938e:	4b85      	ldr	r3, [pc, #532]	@ (80195a4 <mg_http_upload+0x350>)
 8019390:	4a83      	ldr	r2, [pc, #524]	@ (80195a0 <mg_http_upload+0x34c>)
 8019392:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019396:	6800      	ldr	r0, [r0, #0]
 8019398:	f7fe fda0 	bl	8017edc <mg_http_reply>
    res = -2;
 801939c:	f06f 0301 	mvn.w	r3, #1
 80193a0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80193a4:	e0e8      	b.n	8019578 <mg_http_upload+0x324>
  } else if (offset < 0) {
 80193a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	da0f      	bge.n	80193ce <mg_http_upload+0x17a>
    mg_http_reply(c, 400, "", "offset required");
 80193ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80193b2:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80193b6:	4b7c      	ldr	r3, [pc, #496]	@ (80195a8 <mg_http_upload+0x354>)
 80193b8:	4a79      	ldr	r2, [pc, #484]	@ (80195a0 <mg_http_upload+0x34c>)
 80193ba:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80193be:	6800      	ldr	r0, [r0, #0]
 80193c0:	f7fe fd8c 	bl	8017edc <mg_http_reply>
    res = -3;
 80193c4:	f06f 0302 	mvn.w	r3, #2
 80193c8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80193cc:	e0d4      	b.n	8019578 <mg_http_upload+0x324>
  } else if ((size_t) offset + hm->body.len > max_size) {
 80193ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80193d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80193dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80193e0:	4413      	add	r3, r2
 80193e2:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80193e6:	429a      	cmp	r2, r3
 80193e8:	d215      	bcs.n	8019416 <mg_http_upload+0x1c2>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 80193ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80193ee:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80193f2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80193f6:	9301      	str	r3, [sp, #4]
 80193f8:	f107 0318 	add.w	r3, r7, #24
 80193fc:	9300      	str	r3, [sp, #0]
 80193fe:	4b6b      	ldr	r3, [pc, #428]	@ (80195ac <mg_http_upload+0x358>)
 8019400:	4a67      	ldr	r2, [pc, #412]	@ (80195a0 <mg_http_upload+0x34c>)
 8019402:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019406:	6800      	ldr	r0, [r0, #0]
 8019408:	f7fe fd68 	bl	8017edc <mg_http_reply>
                  (unsigned long) max_size);
    res = -4;
 801940c:	f06f 0303 	mvn.w	r3, #3
 8019410:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8019414:	e0b0      	b.n	8019578 <mg_http_upload+0x324>
  } else {
    struct mg_fd *fd;
    size_t current_size = 0;
 8019416:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801941a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801941e:	2200      	movs	r2, #0
 8019420:	601a      	str	r2, [r3, #0]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8019422:	4b63      	ldr	r3, [pc, #396]	@ (80195b0 <mg_http_upload+0x35c>)
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	2b02      	cmp	r3, #2
 8019428:	dd14      	ble.n	8019454 <mg_http_upload+0x200>
 801942a:	4b62      	ldr	r3, [pc, #392]	@ (80195b4 <mg_http_upload+0x360>)
 801942c:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8019430:	4961      	ldr	r1, [pc, #388]	@ (80195b8 <mg_http_upload+0x364>)
 8019432:	2003      	movs	r0, #3
 8019434:	f001 fcfa 	bl	801ae2c <mg_log_prefix>
 8019438:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801943c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019446:	f107 0118 	add.w	r1, r7, #24
 801944a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801944e:	485b      	ldr	r0, [pc, #364]	@ (80195bc <mg_http_upload+0x368>)
 8019450:	f001 fd3c 	bl	801aecc <mg_log>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8019454:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019458:	2b00      	cmp	r3, #0
 801945a:	d109      	bne.n	8019470 <mg_http_upload+0x21c>
 801945c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019460:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	6a1b      	ldr	r3, [r3, #32]
 8019468:	f107 0218 	add.w	r2, r7, #24
 801946c:	4610      	mov	r0, r2
 801946e:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8019470:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019474:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	f107 0114 	add.w	r1, r7, #20
 8019480:	f107 0018 	add.w	r0, r7, #24
 8019484:	2200      	movs	r2, #0
 8019486:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8019488:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801948c:	2b00      	cmp	r3, #0
 801948e:	dd1b      	ble.n	80194c8 <mg_http_upload+0x274>
 8019490:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019494:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019498:	681a      	ldr	r2, [r3, #0]
 801949a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801949e:	429a      	cmp	r2, r3
 80194a0:	d012      	beq.n	80194c8 <mg_http_upload+0x274>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 80194a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80194a6:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80194aa:	f107 0318 	add.w	r3, r7, #24
 80194ae:	9300      	str	r3, [sp, #0]
 80194b0:	4b43      	ldr	r3, [pc, #268]	@ (80195c0 <mg_http_upload+0x36c>)
 80194b2:	4a3b      	ldr	r2, [pc, #236]	@ (80195a0 <mg_http_upload+0x34c>)
 80194b4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80194b8:	6800      	ldr	r0, [r0, #0]
 80194ba:	f7fe fd0f 	bl	8017edc <mg_http_reply>
      res = -5;
 80194be:	f06f 0304 	mvn.w	r3, #4
 80194c2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80194c6:	e057      	b.n	8019578 <mg_http_upload+0x324>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 80194c8:	f107 0118 	add.w	r1, r7, #24
 80194cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80194d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80194d4:	2202      	movs	r2, #2
 80194d6:	6818      	ldr	r0, [r3, #0]
 80194d8:	f7fd f998 	bl	801680c <mg_fs_open>
 80194dc:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
 80194e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d117      	bne.n	8019518 <mg_http_upload+0x2c4>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 80194e8:	f00d ff4a 	bl	8027380 <__errno>
 80194ec:	4603      	mov	r3, r0
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80194f4:	f5a2 709a 	sub.w	r0, r2, #308	@ 0x134
 80194f8:	9301      	str	r3, [sp, #4]
 80194fa:	f107 0318 	add.w	r3, r7, #24
 80194fe:	9300      	str	r3, [sp, #0]
 8019500:	4b30      	ldr	r3, [pc, #192]	@ (80195c4 <mg_http_upload+0x370>)
 8019502:	4a27      	ldr	r2, [pc, #156]	@ (80195a0 <mg_http_upload+0x34c>)
 8019504:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019508:	6800      	ldr	r0, [r0, #0]
 801950a:	f7fe fce7 	bl	8017edc <mg_http_reply>
      res = -6;
 801950e:	f06f 0305 	mvn.w	r3, #5
 8019512:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8019516:	e02f      	b.n	8019578 <mg_http_upload+0x324>
    } else {
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8019518:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801951c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	695b      	ldr	r3, [r3, #20]
 8019524:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019528:	6810      	ldr	r0, [r2, #0]
 801952a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801952e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8019532:	6812      	ldr	r2, [r2, #0]
 8019534:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8019538:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801953c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8019540:	6812      	ldr	r2, [r2, #0]
 8019542:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8019546:	4798      	blx	r3
 8019548:	4603      	mov	r3, r0
 801954a:	461a      	mov	r2, r3
 801954c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019550:	4413      	add	r3, r2
 8019552:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      mg_fs_close(fd);
 8019556:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 801955a:	f7fd f97e 	bl	801685a <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 801955e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019562:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8019566:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801956a:	9300      	str	r3, [sp, #0]
 801956c:	4b09      	ldr	r3, [pc, #36]	@ (8019594 <mg_http_upload+0x340>)
 801956e:	4a0a      	ldr	r2, [pc, #40]	@ (8019598 <mg_http_upload+0x344>)
 8019570:	21c8      	movs	r1, #200	@ 0xc8
 8019572:	6800      	ldr	r0, [r0, #0]
 8019574:	f7fe fcb2 	bl	8017edc <mg_http_reply>
    }
  }
  return res;
 8019578:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
}
 801957c:	4618      	mov	r0, r3
 801957e:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8019582:	46bd      	mov	sp, r7
 8019584:	bd90      	pop	{r4, r7, pc}
 8019586:	bf00      	nop
 8019588:	08032300 	.word	0x08032300
 801958c:	08032308 	.word	0x08032308
 8019590:	08031b4c 	.word	0x08031b4c
 8019594:	08032310 	.word	0x08032310
 8019598:	08032314 	.word	0x08032314
 801959c:	08032384 	.word	0x08032384
 80195a0:	08031798 	.word	0x08031798
 80195a4:	08032394 	.word	0x08032394
 80195a8:	080323a8 	.word	0x080323a8
 80195ac:	080323b8 	.word	0x080323b8
 80195b0:	20000298 	.word	0x20000298
 80195b4:	08033e40 	.word	0x08033e40
 80195b8:	080310b8 	.word	0x080310b8
 80195bc:	080323d4 	.word	0x080323d4
 80195c0:	080323ec 	.word	0x080323ec
 80195c4:	08032400 	.word	0x08032400

080195c8 <mg_http_status>:

int mg_http_status(const struct mg_http_message *hm) {
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b082      	sub	sp, #8
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	689b      	ldr	r3, [r3, #8]
 80195d4:	4618      	mov	r0, r3
 80195d6:	f009 fcfd 	bl	8022fd4 <atoi>
 80195da:	4603      	mov	r3, r0
}
 80195dc:	4618      	mov	r0, r3
 80195de:	3708      	adds	r7, #8
 80195e0:	46bd      	mov	sp, r7
 80195e2:	bd80      	pop	{r7, pc}

080195e4 <is_hex_digit>:

static bool is_hex_digit(int c) {
 80195e4:	b480      	push	{r7}
 80195e6:	b083      	sub	sp, #12
 80195e8:	af00      	add	r7, sp, #0
 80195ea:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80195f0:	dd02      	ble.n	80195f8 <is_hex_digit+0x14>
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	2b39      	cmp	r3, #57	@ 0x39
 80195f6:	dd0b      	ble.n	8019610 <is_hex_digit+0x2c>
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	2b60      	cmp	r3, #96	@ 0x60
 80195fc:	dd02      	ble.n	8019604 <is_hex_digit+0x20>
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	2b66      	cmp	r3, #102	@ 0x66
 8019602:	dd05      	ble.n	8019610 <is_hex_digit+0x2c>
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	2b40      	cmp	r3, #64	@ 0x40
 8019608:	dd04      	ble.n	8019614 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	2b46      	cmp	r3, #70	@ 0x46
 801960e:	dc01      	bgt.n	8019614 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8019610:	2301      	movs	r3, #1
 8019612:	e000      	b.n	8019616 <is_hex_digit+0x32>
 8019614:	2300      	movs	r3, #0
 8019616:	f003 0301 	and.w	r3, r3, #1
 801961a:	b2db      	uxtb	r3, r3
}
 801961c:	4618      	mov	r0, r3
 801961e:	370c      	adds	r7, #12
 8019620:	46bd      	mov	sp, r7
 8019622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019626:	4770      	bx	lr

08019628 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8019628:	b580      	push	{r7, lr}
 801962a:	b08a      	sub	sp, #40	@ 0x28
 801962c:	af02      	add	r7, sp, #8
 801962e:	60f8      	str	r0, [r7, #12]
 8019630:	60b9      	str	r1, [r7, #8]
 8019632:	607a      	str	r2, [r7, #4]
 8019634:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 8019636:	2300      	movs	r3, #0
 8019638:	61fb      	str	r3, [r7, #28]
 801963a:	2300      	movs	r3, #0
 801963c:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 801963e:	68bb      	ldr	r3, [r7, #8]
 8019640:	2b02      	cmp	r3, #2
 8019642:	dc04      	bgt.n	801964e <skip_chunk+0x26>
 8019644:	2300      	movs	r3, #0
 8019646:	e07a      	b.n	801973e <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 8019648:	69fb      	ldr	r3, [r7, #28]
 801964a:	3301      	adds	r3, #1
 801964c:	61fb      	str	r3, [r7, #28]
 801964e:	69fa      	ldr	r2, [r7, #28]
 8019650:	68bb      	ldr	r3, [r7, #8]
 8019652:	429a      	cmp	r2, r3
 8019654:	da09      	bge.n	801966a <skip_chunk+0x42>
 8019656:	69fb      	ldr	r3, [r7, #28]
 8019658:	68fa      	ldr	r2, [r7, #12]
 801965a:	4413      	add	r3, r2
 801965c:	781b      	ldrb	r3, [r3, #0]
 801965e:	4618      	mov	r0, r3
 8019660:	f7ff ffc0 	bl	80195e4 <is_hex_digit>
 8019664:	4603      	mov	r3, r0
 8019666:	2b00      	cmp	r3, #0
 8019668:	d1ee      	bne.n	8019648 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 801966a:	69fb      	ldr	r3, [r7, #28]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d102      	bne.n	8019676 <skip_chunk+0x4e>
 8019670:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019674:	e063      	b.n	801973e <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8019676:	69fb      	ldr	r3, [r7, #28]
 8019678:	2b08      	cmp	r3, #8
 801967a:	dd02      	ble.n	8019682 <skip_chunk+0x5a>
 801967c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019680:	e05d      	b.n	801973e <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8019682:	69fa      	ldr	r2, [r7, #28]
 8019684:	68bb      	ldr	r3, [r7, #8]
 8019686:	429a      	cmp	r2, r3
 8019688:	da0c      	bge.n	80196a4 <skip_chunk+0x7c>
 801968a:	69fb      	ldr	r3, [r7, #28]
 801968c:	68fa      	ldr	r2, [r7, #12]
 801968e:	4413      	add	r3, r2
 8019690:	781b      	ldrb	r3, [r3, #0]
 8019692:	2b0d      	cmp	r3, #13
 8019694:	d106      	bne.n	80196a4 <skip_chunk+0x7c>
 8019696:	69fb      	ldr	r3, [r7, #28]
 8019698:	3301      	adds	r3, #1
 801969a:	68fa      	ldr	r2, [r7, #12]
 801969c:	4413      	add	r3, r2
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	2b0a      	cmp	r3, #10
 80196a2:	d002      	beq.n	80196aa <skip_chunk+0x82>
 80196a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80196a8:	e049      	b.n	801973e <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80196aa:	69fa      	ldr	r2, [r7, #28]
 80196ac:	f107 0314 	add.w	r3, r7, #20
 80196b0:	68f9      	ldr	r1, [r7, #12]
 80196b2:	4618      	mov	r0, r3
 80196b4:	f008 f8db 	bl	802186e <mg_str_n>
 80196b8:	f107 0310 	add.w	r3, r7, #16
 80196bc:	2204      	movs	r2, #4
 80196be:	9200      	str	r2, [sp, #0]
 80196c0:	2210      	movs	r2, #16
 80196c2:	f107 0114 	add.w	r1, r7, #20
 80196c6:	c903      	ldmia	r1, {r0, r1}
 80196c8:	f008 fad8 	bl	8021c7c <mg_str_to_num>
 80196cc:	4603      	mov	r3, r0
 80196ce:	f083 0301 	eor.w	r3, r3, #1
 80196d2:	b2db      	uxtb	r3, r3
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d002      	beq.n	80196de <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 80196d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80196dc:	e02f      	b.n	801973e <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80196de:	693b      	ldr	r3, [r7, #16]
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	da02      	bge.n	80196ea <skip_chunk+0xc2>
 80196e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80196e8:	e029      	b.n	801973e <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80196ea:	68ba      	ldr	r2, [r7, #8]
 80196ec:	69fb      	ldr	r3, [r7, #28]
 80196ee:	1ad3      	subs	r3, r2, r3
 80196f0:	1eda      	subs	r2, r3, #3
 80196f2:	693b      	ldr	r3, [r7, #16]
 80196f4:	429a      	cmp	r2, r3
 80196f6:	dc01      	bgt.n	80196fc <skip_chunk+0xd4>
 80196f8:	2300      	movs	r3, #0
 80196fa:	e020      	b.n	801973e <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 80196fc:	693a      	ldr	r2, [r7, #16]
 80196fe:	69fb      	ldr	r3, [r7, #28]
 8019700:	4413      	add	r3, r2
 8019702:	3302      	adds	r3, #2
 8019704:	68fa      	ldr	r2, [r7, #12]
 8019706:	4413      	add	r3, r2
 8019708:	781b      	ldrb	r3, [r3, #0]
 801970a:	2b0d      	cmp	r3, #13
 801970c:	d108      	bne.n	8019720 <skip_chunk+0xf8>
 801970e:	693a      	ldr	r2, [r7, #16]
 8019710:	69fb      	ldr	r3, [r7, #28]
 8019712:	4413      	add	r3, r2
 8019714:	3303      	adds	r3, #3
 8019716:	68fa      	ldr	r2, [r7, #12]
 8019718:	4413      	add	r3, r2
 801971a:	781b      	ldrb	r3, [r3, #0]
 801971c:	2b0a      	cmp	r3, #10
 801971e:	d002      	beq.n	8019726 <skip_chunk+0xfe>
 8019720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019724:	e00b      	b.n	801973e <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 8019726:	69fb      	ldr	r3, [r7, #28]
 8019728:	1c9a      	adds	r2, r3, #2
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	601a      	str	r2, [r3, #0]
 801972e:	693a      	ldr	r2, [r7, #16]
 8019730:	683b      	ldr	r3, [r7, #0]
 8019732:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 8019734:	69fb      	ldr	r3, [r7, #28]
 8019736:	1c9a      	adds	r2, r3, #2
 8019738:	693b      	ldr	r3, [r7, #16]
 801973a:	4413      	add	r3, r2
 801973c:	3302      	adds	r3, #2
}
 801973e:	4618      	mov	r0, r3
 8019740:	3720      	adds	r7, #32
 8019742:	46bd      	mov	sp, r7
 8019744:	bd80      	pop	{r7, pc}
	...

08019748 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8019748:	b580      	push	{r7, lr}
 801974a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801974e:	af00      	add	r7, sp, #0
 8019750:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019754:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019758:	6018      	str	r0, [r3, #0]
 801975a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801975e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019762:	6019      	str	r1, [r3, #0]
 8019764:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019768:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 801976c:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 801976e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019772:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	2b07      	cmp	r3, #7
 801977a:	d031      	beq.n	80197e0 <http_cb+0x98>
 801977c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019780:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	2b09      	cmp	r3, #9
 8019788:	d02a      	beq.n	80197e0 <http_cb+0x98>
 801978a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801978e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	2b02      	cmp	r3, #2
 8019796:	f040 831a 	bne.w	8019dce <http_cb+0x686>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 801979a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801979e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80197a8:	f003 0304 	and.w	r3, r3, #4
 80197ac:	b2db      	uxtb	r3, r3
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	f000 830d 	beq.w	8019dce <http_cb+0x686>
 80197b4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80197b8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80197c2:	f003 0310 	and.w	r3, r3, #16
 80197c6:	b2db      	uxtb	r3, r3
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	f040 8300 	bne.w	8019dce <http_cb+0x686>
       c->recv.len > 0)) {  // see #2796
 80197ce:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80197d2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80197da:	2b00      	cmp	r3, #0
 80197dc:	f000 82f7 	beq.w	8019dce <http_cb+0x686>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 80197e0:	2300      	movs	r3, #0
 80197e2:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 80197e6:	e2c5      	b.n	8019d74 <http_cb+0x62c>
      const char *buf = (char *) c->recv.buf + ofs;
 80197e8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80197ec:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80197f4:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80197f8:	4413      	add	r3, r2
 80197fa:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 80197fe:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019802:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801980a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 801980e:	1ad3      	subs	r3, r2, r3
 8019810:	f107 0214 	add.w	r2, r7, #20
 8019814:	4619      	mov	r1, r3
 8019816:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 801981a:	f7fd fcf5 	bl	8017208 <mg_http_parse>
 801981e:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 8019822:	2300      	movs	r3, #0
 8019824:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      if (n < 0) {
 8019828:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801982c:	2b00      	cmp	r3, #0
 801982e:	da38      	bge.n	80198a2 <http_cb+0x15a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8019830:	4bc8      	ldr	r3, [pc, #800]	@ (8019b54 <http_cb+0x40c>)
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	2b00      	cmp	r3, #0
 8019836:	dd10      	ble.n	801985a <http_cb+0x112>
 8019838:	4bc7      	ldr	r3, [pc, #796]	@ (8019b58 <http_cb+0x410>)
 801983a:	f640 42a3 	movw	r2, #3235	@ 0xca3
 801983e:	49c7      	ldr	r1, [pc, #796]	@ (8019b5c <http_cb+0x414>)
 8019840:	2001      	movs	r0, #1
 8019842:	f001 faf3 	bl	801ae2c <mg_log_prefix>
 8019846:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801984a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019852:	4619      	mov	r1, r3
 8019854:	48c2      	ldr	r0, [pc, #776]	@ (8019b60 <http_cb+0x418>)
 8019856:	f001 fb39 	bl	801aecc <mg_log>
        c->is_draining = 1;
 801985a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801985e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019862:	681a      	ldr	r2, [r3, #0]
 8019864:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019868:	f043 0310 	orr.w	r3, r3, #16
 801986c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8019870:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019874:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801987c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019880:	1ad3      	subs	r3, r2, r3
 8019882:	2b10      	cmp	r3, #16
 8019884:	bf28      	it	cs
 8019886:	2310      	movcs	r3, #16
 8019888:	4619      	mov	r1, r3
 801988a:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 801988e:	f001 fb53 	bl	801af38 <mg_hexdump>
        c->recv.len = 0;
 8019892:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019896:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	2200      	movs	r2, #0
 801989e:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 80198a0:	e295      	b.n	8019dce <http_cb+0x686>
      }
      if (n == 0) break;                 // Request is not buffered yet
 80198a2:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	f000 827c 	beq.w	8019da4 <http_cb+0x65c>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 80198ac:	f107 0214 	add.w	r2, r7, #20
 80198b0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80198b4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80198b8:	210a      	movs	r1, #10
 80198ba:	6818      	ldr	r0, [r3, #0]
 80198bc:	f7fb fed0 	bl	8015660 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 80198c0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80198c4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	2b09      	cmp	r3, #9
 80198cc:	d128      	bne.n	8019920 <http_cb+0x1d8>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 80198ce:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80198d2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80198da:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80198de:	1ad2      	subs	r2, r2, r3
 80198e0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80198e4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80198e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 80198ec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80198f0:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80198f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80198f8:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 80198fc:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8019900:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8019904:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8019908:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 801990c:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 8019910:	1a8a      	subs	r2, r1, r2
 8019912:	1a9a      	subs	r2, r3, r2
 8019914:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019918:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 801991c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8019920:	f107 0314 	add.w	r3, r7, #20
 8019924:	498f      	ldr	r1, [pc, #572]	@ (8019b64 <http_cb+0x41c>)
 8019926:	4618      	mov	r0, r3
 8019928:	f7fd fab2 	bl	8016e90 <mg_http_get_header>
 801992c:	f8c7 0270 	str.w	r0, [r7, #624]	@ 0x270
 8019930:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8019934:	2b00      	cmp	r3, #0
 8019936:	d01d      	beq.n	8019974 <http_cb+0x22c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8019938:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 801993c:	498a      	ldr	r1, [pc, #552]	@ (8019b68 <http_cb+0x420>)
 801993e:	4618      	mov	r0, r3
 8019940:	f007 ff78 	bl	8021834 <mg_str_s>
 8019944:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8019948:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 801994c:	cb0c      	ldmia	r3, {r2, r3}
 801994e:	c903      	ldmia	r1, {r0, r1}
 8019950:	f007 fffc 	bl	802194c <mg_strcasecmp>
 8019954:	4603      	mov	r3, r0
 8019956:	2b00      	cmp	r3, #0
 8019958:	d103      	bne.n	8019962 <http_cb+0x21a>
          is_chunked = true;
 801995a:	2301      	movs	r3, #1
 801995c:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 8019960:	e09f      	b.n	8019aa2 <http_cb+0x35a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8019962:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019966:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801996a:	4980      	ldr	r1, [pc, #512]	@ (8019b6c <http_cb+0x424>)
 801996c:	6818      	ldr	r0, [r3, #0]
 801996e:	f7fb fe97 	bl	80156a0 <mg_error>
          return;
 8019972:	e22c      	b.n	8019dce <http_cb+0x686>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8019974:	f107 0314 	add.w	r3, r7, #20
 8019978:	497d      	ldr	r1, [pc, #500]	@ (8019b70 <http_cb+0x428>)
 801997a:	4618      	mov	r0, r3
 801997c:	f7fd fa88 	bl	8016e90 <mg_http_get_header>
 8019980:	4603      	mov	r3, r0
 8019982:	2b00      	cmp	r3, #0
 8019984:	f040 808d 	bne.w	8019aa2 <http_cb+0x35a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8019988:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801998c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	2205      	movs	r2, #5
 8019994:	4977      	ldr	r1, [pc, #476]	@ (8019b74 <http_cb+0x42c>)
 8019996:	4618      	mov	r0, r3
 8019998:	f7fc ffec 	bl	8016974 <mg_ncasecmp>
 801999c:	4603      	mov	r3, r0
 801999e:	2b00      	cmp	r3, #0
 80199a0:	bf0c      	ite	eq
 80199a2:	2301      	moveq	r3, #1
 80199a4:	2300      	movne	r3, #0
 80199a6:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
        bool require_content_len = false;
 80199aa:	2300      	movs	r3, #0
 80199ac:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80199b0:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80199b4:	f083 0301 	eor.w	r3, r3, #1
 80199b8:	b2db      	uxtb	r3, r3
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d030      	beq.n	8019a20 <http_cb+0x2d8>
 80199be:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 80199c2:	496d      	ldr	r1, [pc, #436]	@ (8019b78 <http_cb+0x430>)
 80199c4:	4618      	mov	r0, r3
 80199c6:	f007 ff35 	bl	8021834 <mg_str_s>
 80199ca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80199ce:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 80199d2:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 80199d6:	cb0c      	ldmia	r3, {r2, r3}
 80199d8:	c903      	ldmia	r1, {r0, r1}
 80199da:	f007 ffb7 	bl	802194c <mg_strcasecmp>
 80199de:	4603      	mov	r3, r0
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d012      	beq.n	8019a0a <http_cb+0x2c2>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 80199e4:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80199e8:	4964      	ldr	r1, [pc, #400]	@ (8019b7c <http_cb+0x434>)
 80199ea:	4618      	mov	r0, r3
 80199ec:	f007 ff22 	bl	8021834 <mg_str_s>
 80199f0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80199f4:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 80199f8:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80199fc:	cb0c      	ldmia	r3, {r2, r3}
 80199fe:	c903      	ldmia	r1, {r0, r1}
 8019a00:	f007 ffa4 	bl	802194c <mg_strcasecmp>
 8019a04:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d10a      	bne.n	8019a20 <http_cb+0x2d8>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 8019a0a:	2301      	movs	r3, #1
 8019a0c:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 8019a10:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019a14:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019a18:	4413      	add	r3, r2
 8019a1a:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8019a1e:	e022      	b.n	8019a66 <http_cb+0x31e>
        } else if (is_response) {
 8019a20:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d01e      	beq.n	8019a66 <http_cb+0x31e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 8019a28:	f107 0314 	add.w	r3, r7, #20
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	f7ff fdcb 	bl	80195c8 <mg_http_status>
 8019a32:	f8c7 0268 	str.w	r0, [r7, #616]	@ 0x268
          require_content_len = status >= 200 && status != 204 && status != 304;
 8019a36:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8019a3a:	2bc7      	cmp	r3, #199	@ 0xc7
 8019a3c:	dd0a      	ble.n	8019a54 <http_cb+0x30c>
 8019a3e:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8019a42:	2bcc      	cmp	r3, #204	@ 0xcc
 8019a44:	d006      	beq.n	8019a54 <http_cb+0x30c>
 8019a46:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8019a4a:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8019a4e:	d001      	beq.n	8019a54 <http_cb+0x30c>
 8019a50:	2301      	movs	r3, #1
 8019a52:	e000      	b.n	8019a56 <http_cb+0x30e>
 8019a54:	2300      	movs	r3, #0
 8019a56:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 8019a5a:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8019a5e:	f003 0301 	and.w	r3, r3, #1
 8019a62:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 8019a66:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d019      	beq.n	8019aa2 <http_cb+0x35a>
          mg_http_reply(c, 411, "", "");
 8019a6e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019a72:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 8019a76:	4b42      	ldr	r3, [pc, #264]	@ (8019b80 <http_cb+0x438>)
 8019a78:	4a41      	ldr	r2, [pc, #260]	@ (8019b80 <http_cb+0x438>)
 8019a7a:	f240 119b 	movw	r1, #411	@ 0x19b
 8019a7e:	6800      	ldr	r0, [r0, #0]
 8019a80:	f7fe fa2c 	bl	8017edc <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8019a84:	4b33      	ldr	r3, [pc, #204]	@ (8019b54 <http_cb+0x40c>)
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	dd0a      	ble.n	8019aa2 <http_cb+0x35a>
 8019a8c:	4b32      	ldr	r3, [pc, #200]	@ (8019b58 <http_cb+0x410>)
 8019a8e:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8019a92:	4932      	ldr	r1, [pc, #200]	@ (8019b5c <http_cb+0x414>)
 8019a94:	2001      	movs	r0, #1
 8019a96:	f001 f9c9 	bl	801ae2c <mg_log_prefix>
 8019a9a:	493a      	ldr	r1, [pc, #232]	@ (8019b84 <http_cb+0x43c>)
 8019a9c:	483a      	ldr	r0, [pc, #232]	@ (8019b88 <http_cb+0x440>)
 8019a9e:	f001 fa15 	bl	801aecc <mg_log>
        }
      }

      if (is_chunked) {
 8019aa2:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	f000 80e8 	beq.w	8019c7c <http_cb+0x534>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 8019aac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019ab0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019ab8:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 8019abc:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019ac0:	440b      	add	r3, r1
 8019ac2:	4413      	add	r3, r2
 8019ac4:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8019ac8:	2300      	movs	r3, #0
 8019aca:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019ace:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019ad2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019ada:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019ade:	1ad2      	subs	r2, r2, r3
 8019ae0:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019ae4:	1ad3      	subs	r3, r2, r3
 8019ae6:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8019aea:	e006      	b.n	8019afa <http_cb+0x3b2>
 8019aec:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8019af0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019af4:	4413      	add	r3, r2
 8019af6:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019afa:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019afe:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019b02:	18d0      	adds	r0, r2, r3
 8019b04:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8019b08:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019b0c:	1ad1      	subs	r1, r2, r3
 8019b0e:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8019b12:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8019b16:	f7ff fd87 	bl	8019628 <skip_chunk>
 8019b1a:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 8019b1e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	dd03      	ble.n	8019b2e <http_cb+0x3e6>
 8019b26:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d1de      	bne.n	8019aec <http_cb+0x3a4>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8019b2e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	f000 8138 	beq.w	8019da8 <http_cb+0x660>
        if (cl < 0) {
 8019b38:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	da27      	bge.n	8019b90 <http_cb+0x448>
          mg_error(c, "Invalid chunk");
 8019b40:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019b44:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019b48:	4910      	ldr	r1, [pc, #64]	@ (8019b8c <http_cb+0x444>)
 8019b4a:	6818      	ldr	r0, [r3, #0]
 8019b4c:	f7fb fda8 	bl	80156a0 <mg_error>
          break;
 8019b50:	e12d      	b.n	8019dae <http_cb+0x666>
 8019b52:	bf00      	nop
 8019b54:	20000298 	.word	0x20000298
 8019b58:	08033e50 	.word	0x08033e50
 8019b5c:	080310b8 	.word	0x080310b8
 8019b60:	08032410 	.word	0x08032410
 8019b64:	08032428 	.word	0x08032428
 8019b68:	0803243c 	.word	0x0803243c
 8019b6c:	08032444 	.word	0x08032444
 8019b70:	08032460 	.word	0x08032460
 8019b74:	080312c4 	.word	0x080312c4
 8019b78:	080312d0 	.word	0x080312d0
 8019b7c:	080312cc 	.word	0x080312cc
 8019b80:	08031798 	.word	0x08031798
 8019b84:	08032470 	.word	0x08032470
 8019b88:	08031224 	.word	0x08031224
 8019b8c:	08032494 	.word	0x08032494
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8019b90:	2300      	movs	r3, #0
 8019b92:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019b96:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019b9a:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019b9e:	2200      	movs	r2, #0
 8019ba0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8019ba4:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8019ba8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019bac:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019bb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8019bb4:	e03e      	b.n	8019c34 <http_cb+0x4ec>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8019bb6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019bba:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019bbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019bc2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019bc6:	18d0      	adds	r0, r2, r3
 8019bc8:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019bcc:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8019bd0:	4413      	add	r3, r2
 8019bd2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019bd6:	4413      	add	r3, r2
 8019bd8:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019bdc:	4619      	mov	r1, r3
 8019bde:	f00c f9a1 	bl	8025f24 <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8019be2:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8019be6:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019bea:	4413      	add	r3, r2
 8019bec:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019bf0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019bf4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019bf8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019bfc:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019c00:	441a      	add	r2, r3
 8019c02:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c06:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019c0a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8019c0e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c12:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019c16:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019c1a:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019c1e:	441a      	add	r2, r3
 8019c20:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c24:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019c28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 8019c2c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d016      	beq.n	8019c62 <http_cb+0x51a>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8019c34:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019c38:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019c3c:	18d0      	adds	r0, r2, r3
 8019c3e:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8019c42:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019c46:	1ad1      	subs	r1, r2, r3
 8019c48:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8019c4c:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8019c50:	f7ff fcea 	bl	8019628 <skip_chunk>
 8019c54:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 8019c58:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	dcaa      	bgt.n	8019bb6 <http_cb+0x46e>
 8019c60:	e000      	b.n	8019c64 <http_cb+0x51c>
          if (dl == 0) break;
 8019c62:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 8019c64:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8019c68:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019c6c:	4413      	add	r3, r2
 8019c6e:	461a      	mov	r2, r3
 8019c70:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019c74:	4413      	add	r3, r2
 8019c76:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8019c7a:	e025      	b.n	8019cc8 <http_cb+0x580>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 8019c7c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c80:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019c88:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019c8c:	1ad2      	subs	r2, r2, r3
 8019c8e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019c92:	1ad3      	subs	r3, r2, r3
 8019c94:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
        if (hm.body.len > len) break;  // Buffer more data
 8019c98:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c9c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019ca0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019ca4:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8019ca8:	429a      	cmp	r2, r3
 8019caa:	d37f      	bcc.n	8019dac <http_cb+0x664>
        ofs += (size_t) n + hm.body.len;
 8019cac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019cb0:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019cb8:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019cbc:	4413      	add	r3, r2
 8019cbe:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019cc2:	4413      	add	r3, r2
 8019cc4:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8019cc8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019ccc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8019cd6:	f003 0304 	and.w	r3, r3, #4
 8019cda:	b2db      	uxtb	r3, r3
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d00a      	beq.n	8019cf6 <http_cb+0x5ae>
 8019ce0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019ce4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019ce8:	681a      	ldr	r2, [r3, #0]
 8019cea:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019cf2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8019cf6:	f107 0214 	add.w	r2, r7, #20
 8019cfa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019cfe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019d02:	210b      	movs	r1, #11
 8019d04:	6818      	ldr	r0, [r3, #0]
 8019d06:	f7fb fcab 	bl	8015660 <mg_call>
      if (c->is_accepted) {
 8019d0a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019d0e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8019d18:	f003 0304 	and.w	r3, r3, #4
 8019d1c:	b2db      	uxtb	r3, r3
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d028      	beq.n	8019d74 <http_cb+0x62c>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8019d22:	f107 0314 	add.w	r3, r7, #20
 8019d26:	492c      	ldr	r1, [pc, #176]	@ (8019dd8 <http_cb+0x690>)
 8019d28:	4618      	mov	r0, r3
 8019d2a:	f7fd f8b1 	bl	8016e90 <mg_http_get_header>
 8019d2e:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8019d32:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d01c      	beq.n	8019d74 <http_cb+0x62c>
 8019d3a:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8019d3e:	4927      	ldr	r1, [pc, #156]	@ (8019ddc <http_cb+0x694>)
 8019d40:	4618      	mov	r0, r3
 8019d42:	f007 fd77 	bl	8021834 <mg_str_s>
 8019d46:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8019d4a:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8019d4e:	cb0c      	ldmia	r3, {r2, r3}
 8019d50:	c903      	ldmia	r1, {r0, r1}
 8019d52:	f007 fdfb 	bl	802194c <mg_strcasecmp>
 8019d56:	4603      	mov	r3, r0
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d10b      	bne.n	8019d74 <http_cb+0x62c>
          c->is_draining = 1;  // honor "Connection: close"
 8019d5c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019d60:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019d64:	681a      	ldr	r2, [r3, #0]
 8019d66:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019d6a:	f043 0310 	orr.w	r3, r3, #16
 8019d6e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 8019d72:	e01c      	b.n	8019dae <http_cb+0x666>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8019d74:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019d78:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8019d82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8019d86:	b2db      	uxtb	r3, r3
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d110      	bne.n	8019dae <http_cb+0x666>
 8019d8c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019d90:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019d98:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019d9c:	429a      	cmp	r2, r3
 8019d9e:	f4ff ad23 	bcc.w	80197e8 <http_cb+0xa0>
 8019da2:	e004      	b.n	8019dae <http_cb+0x666>
      if (n == 0) break;                 // Request is not buffered yet
 8019da4:	bf00      	nop
 8019da6:	e002      	b.n	8019dae <http_cb+0x666>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8019da8:	bf00      	nop
 8019daa:	e000      	b.n	8019dae <http_cb+0x666>
        if (hm.body.len > len) break;  // Buffer more data
 8019dac:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8019dae:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d00b      	beq.n	8019dce <http_cb+0x686>
 8019db6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019dba:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	3338      	adds	r3, #56	@ 0x38
 8019dc2:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019dc6:	2100      	movs	r1, #0
 8019dc8:	4618      	mov	r0, r3
 8019dca:	f000 f91d 	bl	801a008 <mg_iobuf_del>
  }
  (void) ev_data;
}
 8019dce:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	bd80      	pop	{r7, pc}
 8019dd6:	bf00      	nop
 8019dd8:	080324a4 	.word	0x080324a4
 8019ddc:	080324b0 	.word	0x080324b0

08019de0 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b086      	sub	sp, #24
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	60f8      	str	r0, [r7, #12]
 8019de8:	60b9      	str	r1, [r7, #8]
 8019dea:	607a      	str	r2, [r7, #4]
 8019dec:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8019dee:	683b      	ldr	r3, [r7, #0]
 8019df0:	687a      	ldr	r2, [r7, #4]
 8019df2:	68b9      	ldr	r1, [r7, #8]
 8019df4:	68f8      	ldr	r0, [r7, #12]
 8019df6:	f003 fd11 	bl	801d81c <mg_listen>
 8019dfa:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8019dfc:	697b      	ldr	r3, [r7, #20]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d003      	beq.n	8019e0a <mg_http_listen+0x2a>
 8019e02:	697b      	ldr	r3, [r7, #20]
 8019e04:	4a03      	ldr	r2, [pc, #12]	@ (8019e14 <mg_http_listen+0x34>)
 8019e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 8019e0a:	697b      	ldr	r3, [r7, #20]
}
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	3718      	adds	r7, #24
 8019e10:	46bd      	mov	sp, r7
 8019e12:	bd80      	pop	{r7, pc}
 8019e14:	08019749 	.word	0x08019749

08019e18 <roundup>:





static size_t roundup(size_t size, size_t align) {
 8019e18:	b480      	push	{r7}
 8019e1a:	b083      	sub	sp, #12
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	6078      	str	r0, [r7, #4]
 8019e20:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8019e22:	683b      	ldr	r3, [r7, #0]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d00a      	beq.n	8019e3e <roundup+0x26>
 8019e28:	687a      	ldr	r2, [r7, #4]
 8019e2a:	683b      	ldr	r3, [r7, #0]
 8019e2c:	4413      	add	r3, r2
 8019e2e:	1e5a      	subs	r2, r3, #1
 8019e30:	683b      	ldr	r3, [r7, #0]
 8019e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e36:	683a      	ldr	r2, [r7, #0]
 8019e38:	fb02 f303 	mul.w	r3, r2, r3
 8019e3c:	e000      	b.n	8019e40 <roundup+0x28>
 8019e3e:	687b      	ldr	r3, [r7, #4]
}
 8019e40:	4618      	mov	r0, r3
 8019e42:	370c      	adds	r7, #12
 8019e44:	46bd      	mov	sp, r7
 8019e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e4a:	4770      	bx	lr

08019e4c <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8019e4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019e50:	b088      	sub	sp, #32
 8019e52:	af02      	add	r7, sp, #8
 8019e54:	6078      	str	r0, [r7, #4]
 8019e56:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8019e58:	2301      	movs	r3, #1
 8019e5a:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	68db      	ldr	r3, [r3, #12]
 8019e60:	4619      	mov	r1, r3
 8019e62:	6838      	ldr	r0, [r7, #0]
 8019e64:	f7ff ffd8 	bl	8019e18 <roundup>
 8019e68:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 8019e6a:	683b      	ldr	r3, [r7, #0]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d117      	bne.n	8019ea0 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	681a      	ldr	r2, [r3, #0]
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	685b      	ldr	r3, [r3, #4]
 8019e78:	4619      	mov	r1, r3
 8019e7a:	4610      	mov	r0, r2
 8019e7c:	f008 fbe4 	bl	8022648 <mg_bzero>
    free(io->buf);
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	4618      	mov	r0, r3
 8019e86:	f7f2 fa97 	bl	800c3b8 <vPortFree>
    io->buf = NULL;
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	2200      	movs	r2, #0
 8019e8e:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	2200      	movs	r2, #0
 8019e94:	605a      	str	r2, [r3, #4]
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	685a      	ldr	r2, [r3, #4]
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	609a      	str	r2, [r3, #8]
 8019e9e:	e052      	b.n	8019f46 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	685b      	ldr	r3, [r3, #4]
 8019ea4:	683a      	ldr	r2, [r7, #0]
 8019ea6:	429a      	cmp	r2, r3
 8019ea8:	d04d      	beq.n	8019f46 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 8019eaa:	6839      	ldr	r1, [r7, #0]
 8019eac:	2001      	movs	r0, #1
 8019eae:	f7fa fdf7 	bl	8014aa0 <mg_calloc>
 8019eb2:	6138      	str	r0, [r7, #16]
    if (p != NULL) {
 8019eb4:	693b      	ldr	r3, [r7, #16]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d028      	beq.n	8019f0c <mg_iobuf_resize+0xc0>
      size_t len = new_size < io->len ? new_size : io->len;
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	689b      	ldr	r3, [r3, #8]
 8019ebe:	683a      	ldr	r2, [r7, #0]
 8019ec0:	4293      	cmp	r3, r2
 8019ec2:	bf28      	it	cs
 8019ec4:	4613      	movcs	r3, r2
 8019ec6:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d00a      	beq.n	8019ee4 <mg_iobuf_resize+0x98>
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d006      	beq.n	8019ee4 <mg_iobuf_resize+0x98>
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	68fa      	ldr	r2, [r7, #12]
 8019edc:	4619      	mov	r1, r3
 8019ede:	6938      	ldr	r0, [r7, #16]
 8019ee0:	f00c f820 	bl	8025f24 <memmove>
      mg_bzero(io->buf, io->size);
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	681a      	ldr	r2, [r3, #0]
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	4619      	mov	r1, r3
 8019eee:	4610      	mov	r0, r2
 8019ef0:	f008 fbaa 	bl	8022648 <mg_bzero>
      free(io->buf);
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	4618      	mov	r0, r3
 8019efa:	f7f2 fa5d 	bl	800c3b8 <vPortFree>
      io->buf = (unsigned char *) p;
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	693a      	ldr	r2, [r7, #16]
 8019f02:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	683a      	ldr	r2, [r7, #0]
 8019f08:	605a      	str	r2, [r3, #4]
 8019f0a:	e01c      	b.n	8019f46 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8019f10:	4b10      	ldr	r3, [pc, #64]	@ (8019f54 <mg_iobuf_resize+0x108>)
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	dd16      	ble.n	8019f46 <mg_iobuf_resize+0xfa>
 8019f18:	4b0f      	ldr	r3, [pc, #60]	@ (8019f58 <mg_iobuf_resize+0x10c>)
 8019f1a:	f640 5244 	movw	r2, #3396	@ 0xd44
 8019f1e:	490f      	ldr	r1, [pc, #60]	@ (8019f5c <mg_iobuf_resize+0x110>)
 8019f20:	2001      	movs	r0, #1
 8019f22:	f000 ff83 	bl	801ae2c <mg_log_prefix>
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	685b      	ldr	r3, [r3, #4]
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	4698      	mov	r8, r3
 8019f2e:	4691      	mov	r9, r2
 8019f30:	683b      	ldr	r3, [r7, #0]
 8019f32:	2200      	movs	r2, #0
 8019f34:	461c      	mov	r4, r3
 8019f36:	4615      	mov	r5, r2
 8019f38:	e9cd 4500 	strd	r4, r5, [sp]
 8019f3c:	4642      	mov	r2, r8
 8019f3e:	464b      	mov	r3, r9
 8019f40:	4807      	ldr	r0, [pc, #28]	@ (8019f60 <mg_iobuf_resize+0x114>)
 8019f42:	f000 ffc3 	bl	801aecc <mg_log>
    }
  }
  return ok;
 8019f46:	697b      	ldr	r3, [r7, #20]
}
 8019f48:	4618      	mov	r0, r3
 8019f4a:	3718      	adds	r7, #24
 8019f4c:	46bd      	mov	sp, r7
 8019f4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019f52:	bf00      	nop
 8019f54:	20000298 	.word	0x20000298
 8019f58:	08033e58 	.word	0x08033e58
 8019f5c:	080310b8 	.word	0x080310b8
 8019f60:	080324f0 	.word	0x080324f0

08019f64 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b086      	sub	sp, #24
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	60f8      	str	r0, [r7, #12]
 8019f6c:	60b9      	str	r1, [r7, #8]
 8019f6e:	607a      	str	r2, [r7, #4]
 8019f70:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	689a      	ldr	r2, [r3, #8]
 8019f76:	683b      	ldr	r3, [r7, #0]
 8019f78:	441a      	add	r2, r3
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	68db      	ldr	r3, [r3, #12]
 8019f7e:	4619      	mov	r1, r3
 8019f80:	4610      	mov	r0, r2
 8019f82:	f7ff ff49 	bl	8019e18 <roundup>
 8019f86:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8019f88:	6979      	ldr	r1, [r7, #20]
 8019f8a:	68f8      	ldr	r0, [r7, #12]
 8019f8c:	f7ff ff5e 	bl	8019e4c <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	685b      	ldr	r3, [r3, #4]
 8019f94:	697a      	ldr	r2, [r7, #20]
 8019f96:	429a      	cmp	r2, r3
 8019f98:	d001      	beq.n	8019f9e <mg_iobuf_add+0x3a>
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	689b      	ldr	r3, [r3, #8]
 8019fa2:	68ba      	ldr	r2, [r7, #8]
 8019fa4:	429a      	cmp	r2, r3
 8019fa6:	d210      	bcs.n	8019fca <mg_iobuf_add+0x66>
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	681a      	ldr	r2, [r3, #0]
 8019fac:	68b9      	ldr	r1, [r7, #8]
 8019fae:	683b      	ldr	r3, [r7, #0]
 8019fb0:	440b      	add	r3, r1
 8019fb2:	18d0      	adds	r0, r2, r3
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	681a      	ldr	r2, [r3, #0]
 8019fb8:	68bb      	ldr	r3, [r7, #8]
 8019fba:	18d1      	adds	r1, r2, r3
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	689a      	ldr	r2, [r3, #8]
 8019fc0:	68bb      	ldr	r3, [r7, #8]
 8019fc2:	1ad3      	subs	r3, r2, r3
 8019fc4:	461a      	mov	r2, r3
 8019fc6:	f00b ffad 	bl	8025f24 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d008      	beq.n	8019fe2 <mg_iobuf_add+0x7e>
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	681a      	ldr	r2, [r3, #0]
 8019fd4:	68bb      	ldr	r3, [r7, #8]
 8019fd6:	4413      	add	r3, r2
 8019fd8:	683a      	ldr	r2, [r7, #0]
 8019fda:	6879      	ldr	r1, [r7, #4]
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f00b ffa1 	bl	8025f24 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	689b      	ldr	r3, [r3, #8]
 8019fe6:	68ba      	ldr	r2, [r7, #8]
 8019fe8:	429a      	cmp	r2, r3
 8019fea:	d902      	bls.n	8019ff2 <mg_iobuf_add+0x8e>
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	68ba      	ldr	r2, [r7, #8]
 8019ff0:	609a      	str	r2, [r3, #8]
  io->len += len;
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	689a      	ldr	r2, [r3, #8]
 8019ff6:	683b      	ldr	r3, [r7, #0]
 8019ff8:	441a      	add	r2, r3
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	609a      	str	r2, [r3, #8]
  return len;
 8019ffe:	683b      	ldr	r3, [r7, #0]
}
 801a000:	4618      	mov	r0, r3
 801a002:	3718      	adds	r7, #24
 801a004:	46bd      	mov	sp, r7
 801a006:	bd80      	pop	{r7, pc}

0801a008 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 801a008:	b580      	push	{r7, lr}
 801a00a:	b084      	sub	sp, #16
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	60f8      	str	r0, [r7, #12]
 801a010:	60b9      	str	r1, [r7, #8]
 801a012:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	689b      	ldr	r3, [r3, #8]
 801a018:	68ba      	ldr	r2, [r7, #8]
 801a01a:	429a      	cmp	r2, r3
 801a01c:	d902      	bls.n	801a024 <mg_iobuf_del+0x1c>
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	689b      	ldr	r3, [r3, #8]
 801a022:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 801a024:	68ba      	ldr	r2, [r7, #8]
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	441a      	add	r2, r3
 801a02a:	68fb      	ldr	r3, [r7, #12]
 801a02c:	689b      	ldr	r3, [r3, #8]
 801a02e:	429a      	cmp	r2, r3
 801a030:	d904      	bls.n	801a03c <mg_iobuf_del+0x34>
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	689a      	ldr	r2, [r3, #8]
 801a036:	68bb      	ldr	r3, [r7, #8]
 801a038:	1ad3      	subs	r3, r2, r3
 801a03a:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	2b00      	cmp	r3, #0
 801a042:	d012      	beq.n	801a06a <mg_iobuf_del+0x62>
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	681a      	ldr	r2, [r3, #0]
 801a048:	68bb      	ldr	r3, [r7, #8]
 801a04a:	18d0      	adds	r0, r2, r3
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	681a      	ldr	r2, [r3, #0]
 801a050:	68b9      	ldr	r1, [r7, #8]
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	440b      	add	r3, r1
 801a056:	18d1      	adds	r1, r2, r3
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	689a      	ldr	r2, [r3, #8]
 801a05c:	68bb      	ldr	r3, [r7, #8]
 801a05e:	1ad2      	subs	r2, r2, r3
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	1ad3      	subs	r3, r2, r3
 801a064:	461a      	mov	r2, r3
 801a066:	f00b ff5d 	bl	8025f24 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d00a      	beq.n	801a088 <mg_iobuf_del+0x80>
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	681a      	ldr	r2, [r3, #0]
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	6899      	ldr	r1, [r3, #8]
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	1acb      	subs	r3, r1, r3
 801a07e:	4413      	add	r3, r2
 801a080:	6879      	ldr	r1, [r7, #4]
 801a082:	4618      	mov	r0, r3
 801a084:	f008 fae0 	bl	8022648 <mg_bzero>
  io->len -= len;
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	689a      	ldr	r2, [r3, #8]
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	1ad2      	subs	r2, r2, r3
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	609a      	str	r2, [r3, #8]
  return len;
 801a094:	687b      	ldr	r3, [r7, #4]
}
 801a096:	4618      	mov	r0, r3
 801a098:	3710      	adds	r7, #16
 801a09a:	46bd      	mov	sp, r7
 801a09c:	bd80      	pop	{r7, pc}

0801a09e <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 801a09e:	b580      	push	{r7, lr}
 801a0a0:	b082      	sub	sp, #8
 801a0a2:	af00      	add	r7, sp, #0
 801a0a4:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 801a0a6:	2100      	movs	r1, #0
 801a0a8:	6878      	ldr	r0, [r7, #4]
 801a0aa:	f7ff fecf 	bl	8019e4c <mg_iobuf_resize>
}
 801a0ae:	bf00      	nop
 801a0b0:	3708      	adds	r7, #8
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bd80      	pop	{r7, pc}
	...

0801a0b8 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 801a0b8:	b480      	push	{r7}
 801a0ba:	b083      	sub	sp, #12
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d001      	beq.n	801a0ca <escapeseq+0x12>
 801a0c6:	4b04      	ldr	r3, [pc, #16]	@ (801a0d8 <escapeseq+0x20>)
 801a0c8:	e000      	b.n	801a0cc <escapeseq+0x14>
 801a0ca:	4b04      	ldr	r3, [pc, #16]	@ (801a0dc <escapeseq+0x24>)
}
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	370c      	adds	r7, #12
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d6:	4770      	bx	lr
 801a0d8:	080324fc 	.word	0x080324fc
 801a0dc:	08032504 	.word	0x08032504

0801a0e0 <json_esc>:

static char json_esc(int c, int esc) {
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b086      	sub	sp, #24
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
 801a0e8:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 801a0ea:	6838      	ldr	r0, [r7, #0]
 801a0ec:	f7ff ffe4 	bl	801a0b8 <escapeseq>
 801a0f0:	6138      	str	r0, [r7, #16]
 801a0f2:	683b      	ldr	r3, [r7, #0]
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	bf0c      	ite	eq
 801a0f8:	2301      	moveq	r3, #1
 801a0fa:	2300      	movne	r3, #0
 801a0fc:	b2db      	uxtb	r3, r3
 801a0fe:	4618      	mov	r0, r3
 801a100:	f7ff ffda 	bl	801a0b8 <escapeseq>
 801a104:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 801a106:	693b      	ldr	r3, [r7, #16]
 801a108:	617b      	str	r3, [r7, #20]
 801a10a:	e010      	b.n	801a12e <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 801a10c:	697b      	ldr	r3, [r7, #20]
 801a10e:	781b      	ldrb	r3, [r3, #0]
 801a110:	461a      	mov	r2, r3
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	4293      	cmp	r3, r2
 801a116:	d107      	bne.n	801a128 <json_esc+0x48>
 801a118:	697a      	ldr	r2, [r7, #20]
 801a11a:	693b      	ldr	r3, [r7, #16]
 801a11c:	1ad3      	subs	r3, r2, r3
 801a11e:	461a      	mov	r2, r3
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	4413      	add	r3, r2
 801a124:	781b      	ldrb	r3, [r3, #0]
 801a126:	e007      	b.n	801a138 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 801a128:	697b      	ldr	r3, [r7, #20]
 801a12a:	3301      	adds	r3, #1
 801a12c:	617b      	str	r3, [r7, #20]
 801a12e:	697b      	ldr	r3, [r7, #20]
 801a130:	781b      	ldrb	r3, [r3, #0]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d1ea      	bne.n	801a10c <json_esc+0x2c>
  }
  return 0;
 801a136:	2300      	movs	r3, #0
}
 801a138:	4618      	mov	r0, r3
 801a13a:	3718      	adds	r7, #24
 801a13c:	46bd      	mov	sp, r7
 801a13e:	bd80      	pop	{r7, pc}

0801a140 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 801a140:	b580      	push	{r7, lr}
 801a142:	b084      	sub	sp, #16
 801a144:	af00      	add	r7, sp, #0
 801a146:	6078      	str	r0, [r7, #4]
 801a148:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 801a14a:	2300      	movs	r3, #0
 801a14c:	60fb      	str	r3, [r7, #12]
 801a14e:	e02e      	b.n	801a1ae <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	687a      	ldr	r2, [r7, #4]
 801a154:	4413      	add	r3, r2
 801a156:	781b      	ldrb	r3, [r3, #0]
 801a158:	2b5c      	cmp	r3, #92	@ 0x5c
 801a15a:	d114      	bne.n	801a186 <mg_pass_string+0x46>
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	3301      	adds	r3, #1
 801a160:	683a      	ldr	r2, [r7, #0]
 801a162:	429a      	cmp	r2, r3
 801a164:	dd0f      	ble.n	801a186 <mg_pass_string+0x46>
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	3301      	adds	r3, #1
 801a16a:	687a      	ldr	r2, [r7, #4]
 801a16c:	4413      	add	r3, r2
 801a16e:	781b      	ldrb	r3, [r3, #0]
 801a170:	2101      	movs	r1, #1
 801a172:	4618      	mov	r0, r3
 801a174:	f7ff ffb4 	bl	801a0e0 <json_esc>
 801a178:	4603      	mov	r3, r0
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d003      	beq.n	801a186 <mg_pass_string+0x46>
      i++;
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	3301      	adds	r3, #1
 801a182:	60fb      	str	r3, [r7, #12]
 801a184:	e010      	b.n	801a1a8 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	687a      	ldr	r2, [r7, #4]
 801a18a:	4413      	add	r3, r2
 801a18c:	781b      	ldrb	r3, [r3, #0]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d102      	bne.n	801a198 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 801a192:	f06f 0301 	mvn.w	r3, #1
 801a196:	e010      	b.n	801a1ba <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	687a      	ldr	r2, [r7, #4]
 801a19c:	4413      	add	r3, r2
 801a19e:	781b      	ldrb	r3, [r3, #0]
 801a1a0:	2b22      	cmp	r3, #34	@ 0x22
 801a1a2:	d101      	bne.n	801a1a8 <mg_pass_string+0x68>
      return i;
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	e008      	b.n	801a1ba <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	3301      	adds	r3, #1
 801a1ac:	60fb      	str	r3, [r7, #12]
 801a1ae:	68fa      	ldr	r2, [r7, #12]
 801a1b0:	683b      	ldr	r3, [r7, #0]
 801a1b2:	429a      	cmp	r2, r3
 801a1b4:	dbcc      	blt.n	801a150 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 801a1b6:	f06f 0301 	mvn.w	r3, #1
}
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	3710      	adds	r7, #16
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	bd80      	pop	{r7, pc}
 801a1c2:	0000      	movs	r0, r0
 801a1c4:	0000      	movs	r0, r0
	...

0801a1c8 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 801a1c8:	b580      	push	{r7, lr}
 801a1ca:	b090      	sub	sp, #64	@ 0x40
 801a1cc:	af00      	add	r7, sp, #0
 801a1ce:	60f8      	str	r0, [r7, #12]
 801a1d0:	60b9      	str	r1, [r7, #8]
 801a1d2:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 801a1d4:	f04f 0200 	mov.w	r2, #0
 801a1d8:	f04f 0300 	mov.w	r3, #0
 801a1dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	637b      	str	r3, [r7, #52]	@ 0x34
 801a1e4:	2301      	movs	r3, #1
 801a1e6:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 801a1e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a1ea:	68bb      	ldr	r3, [r7, #8]
 801a1ec:	429a      	cmp	r2, r3
 801a1ee:	da0a      	bge.n	801a206 <mg_atod+0x3e>
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	781b      	ldrb	r3, [r3, #0]
 801a1f4:	2b2d      	cmp	r3, #45	@ 0x2d
 801a1f6:	d106      	bne.n	801a206 <mg_atod+0x3e>
    sign = -1, i++;
 801a1f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a1fc:	633b      	str	r3, [r7, #48]	@ 0x30
 801a1fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a200:	3301      	adds	r3, #1
 801a202:	637b      	str	r3, [r7, #52]	@ 0x34
 801a204:	e00a      	b.n	801a21c <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 801a206:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a208:	68bb      	ldr	r3, [r7, #8]
 801a20a:	429a      	cmp	r2, r3
 801a20c:	da27      	bge.n	801a25e <mg_atod+0x96>
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	781b      	ldrb	r3, [r3, #0]
 801a212:	2b2b      	cmp	r3, #43	@ 0x2b
 801a214:	d123      	bne.n	801a25e <mg_atod+0x96>
    i++;
 801a216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a218:	3301      	adds	r3, #1
 801a21a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a21c:	e01f      	b.n	801a25e <mg_atod+0x96>
    d *= 10.0;
 801a21e:	f04f 0200 	mov.w	r2, #0
 801a222:	4b9d      	ldr	r3, [pc, #628]	@ (801a498 <mg_atod+0x2d0>)
 801a224:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a228:	f7e6 f9fe 	bl	8000628 <__aeabi_dmul>
 801a22c:	4602      	mov	r2, r0
 801a22e:	460b      	mov	r3, r1
 801a230:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    d += p[i] - '0';
 801a234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a236:	68fa      	ldr	r2, [r7, #12]
 801a238:	4413      	add	r3, r2
 801a23a:	781b      	ldrb	r3, [r3, #0]
 801a23c:	3b30      	subs	r3, #48	@ 0x30
 801a23e:	4618      	mov	r0, r3
 801a240:	f7e6 f988 	bl	8000554 <__aeabi_i2d>
 801a244:	4602      	mov	r2, r0
 801a246:	460b      	mov	r3, r1
 801a248:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a24c:	f7e6 f836 	bl	80002bc <__adddf3>
 801a250:	4602      	mov	r2, r0
 801a252:	460b      	mov	r3, r1
 801a254:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a25a:	3301      	adds	r3, #1
 801a25c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a25e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a260:	68bb      	ldr	r3, [r7, #8]
 801a262:	429a      	cmp	r2, r3
 801a264:	da0b      	bge.n	801a27e <mg_atod+0xb6>
 801a266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a268:	68fa      	ldr	r2, [r7, #12]
 801a26a:	4413      	add	r3, r2
 801a26c:	781b      	ldrb	r3, [r3, #0]
 801a26e:	2b2f      	cmp	r3, #47	@ 0x2f
 801a270:	d905      	bls.n	801a27e <mg_atod+0xb6>
 801a272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a274:	68fa      	ldr	r2, [r7, #12]
 801a276:	4413      	add	r3, r2
 801a278:	781b      	ldrb	r3, [r3, #0]
 801a27a:	2b39      	cmp	r3, #57	@ 0x39
 801a27c:	d9cf      	bls.n	801a21e <mg_atod+0x56>
  }
  d *= sign;
 801a27e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a280:	f7e6 f968 	bl	8000554 <__aeabi_i2d>
 801a284:	4602      	mov	r2, r0
 801a286:	460b      	mov	r3, r1
 801a288:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a28c:	f7e6 f9cc 	bl	8000628 <__aeabi_dmul>
 801a290:	4602      	mov	r2, r0
 801a292:	460b      	mov	r3, r1
 801a294:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 801a298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a29a:	68bb      	ldr	r3, [r7, #8]
 801a29c:	429a      	cmp	r2, r3
 801a29e:	da59      	bge.n	801a354 <mg_atod+0x18c>
 801a2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2a2:	68fa      	ldr	r2, [r7, #12]
 801a2a4:	4413      	add	r3, r2
 801a2a6:	781b      	ldrb	r3, [r3, #0]
 801a2a8:	2b2e      	cmp	r3, #46	@ 0x2e
 801a2aa:	d153      	bne.n	801a354 <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 801a2ac:	f04f 0200 	mov.w	r2, #0
 801a2b0:	f04f 0300 	mov.w	r3, #0
 801a2b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 801a2b8:	a375      	add	r3, pc, #468	@ (adr r3, 801a490 <mg_atod+0x2c8>)
 801a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 801a2c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2c4:	3301      	adds	r3, #1
 801a2c6:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a2c8:	e023      	b.n	801a312 <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 801a2ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2cc:	68fa      	ldr	r2, [r7, #12]
 801a2ce:	4413      	add	r3, r2
 801a2d0:	781b      	ldrb	r3, [r3, #0]
 801a2d2:	3b30      	subs	r3, #48	@ 0x30
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f7e6 f93d 	bl	8000554 <__aeabi_i2d>
 801a2da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801a2de:	f7e6 f9a3 	bl	8000628 <__aeabi_dmul>
 801a2e2:	4602      	mov	r2, r0
 801a2e4:	460b      	mov	r3, r1
 801a2e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 801a2ea:	f7e5 ffe7 	bl	80002bc <__adddf3>
 801a2ee:	4602      	mov	r2, r0
 801a2f0:	460b      	mov	r3, r1
 801a2f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      base /= 10.0;
 801a2f6:	f04f 0200 	mov.w	r2, #0
 801a2fa:	4b67      	ldr	r3, [pc, #412]	@ (801a498 <mg_atod+0x2d0>)
 801a2fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a300:	f7e6 fabc 	bl	800087c <__aeabi_ddiv>
 801a304:	4602      	mov	r2, r0
 801a306:	460b      	mov	r3, r1
 801a308:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a30e:	3301      	adds	r3, #1
 801a310:	637b      	str	r3, [r7, #52]	@ 0x34
 801a312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a314:	68bb      	ldr	r3, [r7, #8]
 801a316:	429a      	cmp	r2, r3
 801a318:	da0b      	bge.n	801a332 <mg_atod+0x16a>
 801a31a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a31c:	68fa      	ldr	r2, [r7, #12]
 801a31e:	4413      	add	r3, r2
 801a320:	781b      	ldrb	r3, [r3, #0]
 801a322:	2b2f      	cmp	r3, #47	@ 0x2f
 801a324:	d905      	bls.n	801a332 <mg_atod+0x16a>
 801a326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a328:	68fa      	ldr	r2, [r7, #12]
 801a32a:	4413      	add	r3, r2
 801a32c:	781b      	ldrb	r3, [r3, #0]
 801a32e:	2b39      	cmp	r3, #57	@ 0x39
 801a330:	d9cb      	bls.n	801a2ca <mg_atod+0x102>
    }
    d += frac * sign;
 801a332:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a334:	f7e6 f90e 	bl	8000554 <__aeabi_i2d>
 801a338:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801a33c:	f7e6 f974 	bl	8000628 <__aeabi_dmul>
 801a340:	4602      	mov	r2, r0
 801a342:	460b      	mov	r3, r1
 801a344:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a348:	f7e5 ffb8 	bl	80002bc <__adddf3>
 801a34c:	4602      	mov	r2, r0
 801a34e:	460b      	mov	r3, r1
 801a350:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 801a354:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a356:	68bb      	ldr	r3, [r7, #8]
 801a358:	429a      	cmp	r2, r3
 801a35a:	f280 8085 	bge.w	801a468 <mg_atod+0x2a0>
 801a35e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a360:	68fa      	ldr	r2, [r7, #12]
 801a362:	4413      	add	r3, r2
 801a364:	781b      	ldrb	r3, [r3, #0]
 801a366:	2b65      	cmp	r3, #101	@ 0x65
 801a368:	d005      	beq.n	801a376 <mg_atod+0x1ae>
 801a36a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a36c:	68fa      	ldr	r2, [r7, #12]
 801a36e:	4413      	add	r3, r2
 801a370:	781b      	ldrb	r3, [r3, #0]
 801a372:	2b45      	cmp	r3, #69	@ 0x45
 801a374:	d178      	bne.n	801a468 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 801a376:	2300      	movs	r3, #0
 801a378:	61bb      	str	r3, [r7, #24]
 801a37a:	2300      	movs	r3, #0
 801a37c:	617b      	str	r3, [r7, #20]
    i++;
 801a37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a380:	3301      	adds	r3, #1
 801a382:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 801a384:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a386:	68bb      	ldr	r3, [r7, #8]
 801a388:	429a      	cmp	r2, r3
 801a38a:	da0a      	bge.n	801a3a2 <mg_atod+0x1da>
 801a38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a38e:	68fa      	ldr	r2, [r7, #12]
 801a390:	4413      	add	r3, r2
 801a392:	781b      	ldrb	r3, [r3, #0]
 801a394:	2b2d      	cmp	r3, #45	@ 0x2d
 801a396:	d104      	bne.n	801a3a2 <mg_atod+0x1da>
 801a398:	2301      	movs	r3, #1
 801a39a:	617b      	str	r3, [r7, #20]
 801a39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a39e:	3301      	adds	r3, #1
 801a3a0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 801a3a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a3a4:	68bb      	ldr	r3, [r7, #8]
 801a3a6:	429a      	cmp	r2, r3
 801a3a8:	da19      	bge.n	801a3de <mg_atod+0x216>
 801a3aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3ac:	68fa      	ldr	r2, [r7, #12]
 801a3ae:	4413      	add	r3, r2
 801a3b0:	781b      	ldrb	r3, [r3, #0]
 801a3b2:	2b2b      	cmp	r3, #43	@ 0x2b
 801a3b4:	d113      	bne.n	801a3de <mg_atod+0x216>
 801a3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3b8:	3301      	adds	r3, #1
 801a3ba:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 801a3bc:	e00f      	b.n	801a3de <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 801a3be:	69ba      	ldr	r2, [r7, #24]
 801a3c0:	4613      	mov	r3, r2
 801a3c2:	009b      	lsls	r3, r3, #2
 801a3c4:	4413      	add	r3, r2
 801a3c6:	005b      	lsls	r3, r3, #1
 801a3c8:	4619      	mov	r1, r3
 801a3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3cc:	1c5a      	adds	r2, r3, #1
 801a3ce:	637a      	str	r2, [r7, #52]	@ 0x34
 801a3d0:	461a      	mov	r2, r3
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	4413      	add	r3, r2
 801a3d6:	781b      	ldrb	r3, [r3, #0]
 801a3d8:	3b30      	subs	r3, #48	@ 0x30
 801a3da:	440b      	add	r3, r1
 801a3dc:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 801a3de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a3e0:	68bb      	ldr	r3, [r7, #8]
 801a3e2:	429a      	cmp	r2, r3
 801a3e4:	da0f      	bge.n	801a406 <mg_atod+0x23e>
 801a3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3e8:	68fa      	ldr	r2, [r7, #12]
 801a3ea:	4413      	add	r3, r2
 801a3ec:	781b      	ldrb	r3, [r3, #0]
 801a3ee:	2b2f      	cmp	r3, #47	@ 0x2f
 801a3f0:	d909      	bls.n	801a406 <mg_atod+0x23e>
 801a3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3f4:	68fa      	ldr	r2, [r7, #12]
 801a3f6:	4413      	add	r3, r2
 801a3f8:	781b      	ldrb	r3, [r3, #0]
 801a3fa:	2b39      	cmp	r3, #57	@ 0x39
 801a3fc:	d803      	bhi.n	801a406 <mg_atod+0x23e>
 801a3fe:	69bb      	ldr	r3, [r7, #24]
 801a400:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801a404:	dbdb      	blt.n	801a3be <mg_atod+0x1f6>
    if (minus) exp = -exp;
 801a406:	697b      	ldr	r3, [r7, #20]
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d002      	beq.n	801a412 <mg_atod+0x24a>
 801a40c:	69bb      	ldr	r3, [r7, #24]
 801a40e:	425b      	negs	r3, r3
 801a410:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 801a412:	2300      	movs	r3, #0
 801a414:	61fb      	str	r3, [r7, #28]
 801a416:	e00d      	b.n	801a434 <mg_atod+0x26c>
 801a418:	f04f 0200 	mov.w	r2, #0
 801a41c:	4b1e      	ldr	r3, [pc, #120]	@ (801a498 <mg_atod+0x2d0>)
 801a41e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a422:	f7e6 f901 	bl	8000628 <__aeabi_dmul>
 801a426:	4602      	mov	r2, r0
 801a428:	460b      	mov	r3, r1
 801a42a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 801a42e:	69fb      	ldr	r3, [r7, #28]
 801a430:	3301      	adds	r3, #1
 801a432:	61fb      	str	r3, [r7, #28]
 801a434:	69fa      	ldr	r2, [r7, #28]
 801a436:	69bb      	ldr	r3, [r7, #24]
 801a438:	429a      	cmp	r2, r3
 801a43a:	dbed      	blt.n	801a418 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 801a43c:	2300      	movs	r3, #0
 801a43e:	61fb      	str	r3, [r7, #28]
 801a440:	e00d      	b.n	801a45e <mg_atod+0x296>
 801a442:	f04f 0200 	mov.w	r2, #0
 801a446:	4b14      	ldr	r3, [pc, #80]	@ (801a498 <mg_atod+0x2d0>)
 801a448:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a44c:	f7e6 fa16 	bl	800087c <__aeabi_ddiv>
 801a450:	4602      	mov	r2, r0
 801a452:	460b      	mov	r3, r1
 801a454:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 801a458:	69fb      	ldr	r3, [r7, #28]
 801a45a:	3301      	adds	r3, #1
 801a45c:	61fb      	str	r3, [r7, #28]
 801a45e:	69bb      	ldr	r3, [r7, #24]
 801a460:	425b      	negs	r3, r3
 801a462:	69fa      	ldr	r2, [r7, #28]
 801a464:	429a      	cmp	r2, r3
 801a466:	dbec      	blt.n	801a442 <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d002      	beq.n	801a474 <mg_atod+0x2ac>
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a472:	601a      	str	r2, [r3, #0]
  return d;
 801a474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801a478:	ec43 2b17 	vmov	d7, r2, r3
}
 801a47c:	eeb0 0a47 	vmov.f32	s0, s14
 801a480:	eef0 0a67 	vmov.f32	s1, s15
 801a484:	3740      	adds	r7, #64	@ 0x40
 801a486:	46bd      	mov	sp, r7
 801a488:	bd80      	pop	{r7, pc}
 801a48a:	bf00      	nop
 801a48c:	f3af 8000 	nop.w
 801a490:	9999999a 	.word	0x9999999a
 801a494:	3fb99999 	.word	0x3fb99999
 801a498:	40240000 	.word	0x40240000

0801a49c <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 801a49c:	b590      	push	{r4, r7, lr}
 801a49e:	b09b      	sub	sp, #108	@ 0x6c
 801a4a0:	af00      	add	r7, sp, #0
 801a4a2:	f107 0408 	add.w	r4, r7, #8
 801a4a6:	e884 0003 	stmia.w	r4, {r0, r1}
 801a4aa:	607a      	str	r2, [r7, #4]
 801a4ac:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 801a4ae:	68bb      	ldr	r3, [r7, #8]
 801a4b0:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 801a4b2:	68fb      	ldr	r3, [r7, #12]
 801a4b4:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 801a4bc:	2300      	movs	r3, #0
 801a4be:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 801a4c0:	2300      	movs	r3, #0
 801a4c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 801a4cc:	2301      	movs	r3, #1
 801a4ce:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 801a4d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a4d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a4d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a4da:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 801a4dc:	683b      	ldr	r3, [r7, #0]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d002      	beq.n	801a4e8 <mg_json_get+0x4c>
 801a4e2:	683b      	ldr	r3, [r7, #0]
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	781b      	ldrb	r3, [r3, #0]
 801a4ec:	2b24      	cmp	r3, #36	@ 0x24
 801a4ee:	d002      	beq.n	801a4f6 <mg_json_get+0x5a>
 801a4f0:	f06f 0301 	mvn.w	r3, #1
 801a4f4:	e308      	b.n	801ab08 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 801a4f6:	2300      	movs	r3, #0
 801a4f8:	663b      	str	r3, [r7, #96]	@ 0x60
 801a4fa:	e2fe      	b.n	801aafa <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 801a4fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a4fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a500:	4413      	add	r3, r2
 801a502:	781b      	ldrb	r3, [r3, #0]
 801a504:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 801a508:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a50c:	2b20      	cmp	r3, #32
 801a50e:	f000 82ee 	beq.w	801aaee <mg_json_get+0x652>
 801a512:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a516:	2b09      	cmp	r3, #9
 801a518:	f000 82e9 	beq.w	801aaee <mg_json_get+0x652>
 801a51c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a520:	2b0a      	cmp	r3, #10
 801a522:	f000 82e4 	beq.w	801aaee <mg_json_get+0x652>
 801a526:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a52a:	2b0d      	cmp	r3, #13
 801a52c:	f000 82df 	beq.w	801aaee <mg_json_get+0x652>
    switch (expecting) {
 801a530:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801a534:	2b03      	cmp	r3, #3
 801a536:	f200 82dd 	bhi.w	801aaf4 <mg_json_get+0x658>
 801a53a:	a201      	add	r2, pc, #4	@ (adr r2, 801a540 <mg_json_get+0xa4>)
 801a53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a540:	0801a551 	.word	0x0801a551
 801a544:	0801a839 	.word	0x0801a839
 801a548:	0801a9c7 	.word	0x0801a9c7
 801a54c:	0801a9dd 	.word	0x0801a9dd
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 801a550:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a554:	429a      	cmp	r2, r3
 801a556:	d101      	bne.n	801a55c <mg_json_get+0xc0>
 801a558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a55a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 801a55c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a560:	2b7b      	cmp	r3, #123	@ 0x7b
 801a562:	d12b      	bne.n	801a5bc <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 801a564:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a566:	2b1d      	cmp	r3, #29
 801a568:	dd02      	ble.n	801a570 <mg_json_get+0xd4>
 801a56a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a56e:	e2cb      	b.n	801ab08 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 801a570:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a574:	429a      	cmp	r2, r3
 801a576:	d114      	bne.n	801a5a2 <mg_json_get+0x106>
 801a578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a57a:	687a      	ldr	r2, [r7, #4]
 801a57c:	4413      	add	r3, r2
 801a57e:	781b      	ldrb	r3, [r3, #0]
 801a580:	2b2e      	cmp	r3, #46	@ 0x2e
 801a582:	d10e      	bne.n	801a5a2 <mg_json_get+0x106>
 801a584:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a588:	429a      	cmp	r2, r3
 801a58a:	d10a      	bne.n	801a5a2 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 801a58c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a58e:	3301      	adds	r3, #1
 801a590:	657b      	str	r3, [r7, #84]	@ 0x54
 801a592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a594:	3301      	adds	r3, #1
 801a596:	653b      	str	r3, [r7, #80]	@ 0x50
 801a598:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a59c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a59e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a5a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 801a5a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a5a4:	1c5a      	adds	r2, r3, #1
 801a5a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 801a5a8:	3368      	adds	r3, #104	@ 0x68
 801a5aa:	443b      	add	r3, r7
 801a5ac:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a5b0:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 801a5b4:	2301      	movs	r3, #1
 801a5b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 801a5ba:	e29b      	b.n	801aaf4 <mg_json_get+0x658>
        } else if (c == '[') {
 801a5bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a5c0:	2b5b      	cmp	r3, #91	@ 0x5b
 801a5c2:	d14e      	bne.n	801a662 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 801a5c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a5c6:	2b1d      	cmp	r3, #29
 801a5c8:	dd02      	ble.n	801a5d0 <mg_json_get+0x134>
 801a5ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a5ce:	e29b      	b.n	801ab08 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 801a5d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a5d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	d13a      	bne.n	801a64e <mg_json_get+0x1b2>
 801a5d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5da:	687a      	ldr	r2, [r7, #4]
 801a5dc:	4413      	add	r3, r2
 801a5de:	781b      	ldrb	r3, [r3, #0]
 801a5e0:	2b5b      	cmp	r3, #91	@ 0x5b
 801a5e2:	d134      	bne.n	801a64e <mg_json_get+0x1b2>
 801a5e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a5e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a5e8:	429a      	cmp	r2, r3
 801a5ea:	d130      	bne.n	801a64e <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 801a5ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5ee:	3301      	adds	r3, #1
 801a5f0:	657b      	str	r3, [r7, #84]	@ 0x54
 801a5f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5f4:	3301      	adds	r3, #1
 801a5f6:	653b      	str	r3, [r7, #80]	@ 0x50
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a600:	e010      	b.n	801a624 <mg_json_get+0x188>
              ei *= 10;
 801a602:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a604:	4613      	mov	r3, r2
 801a606:	009b      	lsls	r3, r3, #2
 801a608:	4413      	add	r3, r2
 801a60a:	005b      	lsls	r3, r3, #1
 801a60c:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 801a60e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a610:	687a      	ldr	r2, [r7, #4]
 801a612:	4413      	add	r3, r2
 801a614:	781b      	ldrb	r3, [r3, #0]
 801a616:	3b30      	subs	r3, #48	@ 0x30
 801a618:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a61a:	4413      	add	r3, r2
 801a61c:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 801a61e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a620:	3301      	adds	r3, #1
 801a622:	653b      	str	r3, [r7, #80]	@ 0x50
 801a624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a626:	687a      	ldr	r2, [r7, #4]
 801a628:	4413      	add	r3, r2
 801a62a:	781b      	ldrb	r3, [r3, #0]
 801a62c:	2b5d      	cmp	r3, #93	@ 0x5d
 801a62e:	d005      	beq.n	801a63c <mg_json_get+0x1a0>
 801a630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a632:	687a      	ldr	r2, [r7, #4]
 801a634:	4413      	add	r3, r2
 801a636:	781b      	ldrb	r3, [r3, #0]
 801a638:	2b00      	cmp	r3, #0
 801a63a:	d1e2      	bne.n	801a602 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 801a63c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a63e:	687a      	ldr	r2, [r7, #4]
 801a640:	4413      	add	r3, r2
 801a642:	781b      	ldrb	r3, [r3, #0]
 801a644:	2b00      	cmp	r3, #0
 801a646:	d002      	beq.n	801a64e <mg_json_get+0x1b2>
 801a648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a64a:	3301      	adds	r3, #1
 801a64c:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 801a64e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a650:	1c5a      	adds	r2, r3, #1
 801a652:	65ba      	str	r2, [r7, #88]	@ 0x58
 801a654:	3368      	adds	r3, #104	@ 0x68
 801a656:	443b      	add	r3, r7
 801a658:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a65c:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 801a660:	e248      	b.n	801aaf4 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 801a662:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a666:	2b5d      	cmp	r3, #93	@ 0x5d
 801a668:	d13a      	bne.n	801a6e0 <mg_json_get+0x244>
 801a66a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	dd37      	ble.n	801a6e0 <mg_json_get+0x244>
          MG_EOO(']');
 801a670:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a674:	429a      	cmp	r2, r3
 801a676:	d106      	bne.n	801a686 <mg_json_get+0x1ea>
 801a678:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a67a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a67c:	429a      	cmp	r2, r3
 801a67e:	d002      	beq.n	801a686 <mg_json_get+0x1ea>
 801a680:	f06f 0302 	mvn.w	r3, #2
 801a684:	e240      	b.n	801ab08 <mg_json_get+0x66c>
 801a686:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a68a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a68c:	3b01      	subs	r3, #1
 801a68e:	3368      	adds	r3, #104	@ 0x68
 801a690:	443b      	add	r3, r7
 801a692:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801a696:	3302      	adds	r3, #2
 801a698:	429a      	cmp	r2, r3
 801a69a:	d002      	beq.n	801a6a2 <mg_json_get+0x206>
 801a69c:	f06f 0301 	mvn.w	r3, #1
 801a6a0:	e232      	b.n	801ab08 <mg_json_get+0x66c>
 801a6a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a6a4:	3b01      	subs	r3, #1
 801a6a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a6a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a6aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6ac:	429a      	cmp	r2, r3
 801a6ae:	f040 809c 	bne.w	801a7ea <mg_json_get+0x34e>
 801a6b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a6b4:	687a      	ldr	r2, [r7, #4]
 801a6b6:	4413      	add	r3, r2
 801a6b8:	781b      	ldrb	r3, [r3, #0]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	f040 8095 	bne.w	801a7ea <mg_json_get+0x34e>
 801a6c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a6c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a6c4:	429a      	cmp	r2, r3
 801a6c6:	f040 8090 	bne.w	801a7ea <mg_json_get+0x34e>
 801a6ca:	683b      	ldr	r3, [r7, #0]
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d005      	beq.n	801a6dc <mg_json_get+0x240>
 801a6d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a6d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a6d4:	1ad3      	subs	r3, r2, r3
 801a6d6:	1c5a      	adds	r2, r3, #1
 801a6d8:	683b      	ldr	r3, [r7, #0]
 801a6da:	601a      	str	r2, [r3, #0]
 801a6dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a6de:	e213      	b.n	801ab08 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 801a6e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a6e4:	2b74      	cmp	r3, #116	@ 0x74
 801a6e6:	d113      	bne.n	801a710 <mg_json_get+0x274>
 801a6e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a6ea:	3303      	adds	r3, #3
 801a6ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a6ee:	429a      	cmp	r2, r3
 801a6f0:	dd0e      	ble.n	801a710 <mg_json_get+0x274>
 801a6f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a6f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a6f6:	4413      	add	r3, r2
 801a6f8:	2204      	movs	r2, #4
 801a6fa:	4998      	ldr	r1, [pc, #608]	@ (801a95c <mg_json_get+0x4c0>)
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	f00b fb97 	bl	8025e30 <memcmp>
 801a702:	4603      	mov	r3, r0
 801a704:	2b00      	cmp	r3, #0
 801a706:	d103      	bne.n	801a710 <mg_json_get+0x274>
          i += 3;
 801a708:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a70a:	3303      	adds	r3, #3
 801a70c:	663b      	str	r3, [r7, #96]	@ 0x60
 801a70e:	e06c      	b.n	801a7ea <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 801a710:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a714:	2b6e      	cmp	r3, #110	@ 0x6e
 801a716:	d113      	bne.n	801a740 <mg_json_get+0x2a4>
 801a718:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a71a:	3303      	adds	r3, #3
 801a71c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a71e:	429a      	cmp	r2, r3
 801a720:	dd0e      	ble.n	801a740 <mg_json_get+0x2a4>
 801a722:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a724:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a726:	4413      	add	r3, r2
 801a728:	2204      	movs	r2, #4
 801a72a:	498d      	ldr	r1, [pc, #564]	@ (801a960 <mg_json_get+0x4c4>)
 801a72c:	4618      	mov	r0, r3
 801a72e:	f00b fb7f 	bl	8025e30 <memcmp>
 801a732:	4603      	mov	r3, r0
 801a734:	2b00      	cmp	r3, #0
 801a736:	d103      	bne.n	801a740 <mg_json_get+0x2a4>
          i += 3;
 801a738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a73a:	3303      	adds	r3, #3
 801a73c:	663b      	str	r3, [r7, #96]	@ 0x60
 801a73e:	e054      	b.n	801a7ea <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 801a740:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a744:	2b66      	cmp	r3, #102	@ 0x66
 801a746:	d113      	bne.n	801a770 <mg_json_get+0x2d4>
 801a748:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a74a:	3304      	adds	r3, #4
 801a74c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a74e:	429a      	cmp	r2, r3
 801a750:	dd0e      	ble.n	801a770 <mg_json_get+0x2d4>
 801a752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a754:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a756:	4413      	add	r3, r2
 801a758:	2205      	movs	r2, #5
 801a75a:	4982      	ldr	r1, [pc, #520]	@ (801a964 <mg_json_get+0x4c8>)
 801a75c:	4618      	mov	r0, r3
 801a75e:	f00b fb67 	bl	8025e30 <memcmp>
 801a762:	4603      	mov	r3, r0
 801a764:	2b00      	cmp	r3, #0
 801a766:	d103      	bne.n	801a770 <mg_json_get+0x2d4>
          i += 4;
 801a768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a76a:	3304      	adds	r3, #4
 801a76c:	663b      	str	r3, [r7, #96]	@ 0x60
 801a76e:	e03c      	b.n	801a7ea <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 801a770:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a774:	2b2d      	cmp	r3, #45	@ 0x2d
 801a776:	d007      	beq.n	801a788 <mg_json_get+0x2ec>
 801a778:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a77c:	2b2f      	cmp	r3, #47	@ 0x2f
 801a77e:	d916      	bls.n	801a7ae <mg_json_get+0x312>
 801a780:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a784:	2b39      	cmp	r3, #57	@ 0x39
 801a786:	d812      	bhi.n	801a7ae <mg_json_get+0x312>
          int numlen = 0;
 801a788:	2300      	movs	r3, #0
 801a78a:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 801a78c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a78e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a790:	18d0      	adds	r0, r2, r3
 801a792:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a794:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a796:	1ad3      	subs	r3, r2, r3
 801a798:	f107 0210 	add.w	r2, r7, #16
 801a79c:	4619      	mov	r1, r3
 801a79e:	f7ff fd13 	bl	801a1c8 <mg_atod>
          i += numlen - 1;
 801a7a2:	693b      	ldr	r3, [r7, #16]
 801a7a4:	3b01      	subs	r3, #1
 801a7a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a7a8:	4413      	add	r3, r2
 801a7aa:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 801a7ac:	e01d      	b.n	801a7ea <mg_json_get+0x34e>
        } else if (c == '"') {
 801a7ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a7b2:	2b22      	cmp	r3, #34	@ 0x22
 801a7b4:	d116      	bne.n	801a7e4 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 801a7b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a7b8:	3301      	adds	r3, #1
 801a7ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a7bc:	18d0      	adds	r0, r2, r3
 801a7be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a7c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a7c2:	1ad3      	subs	r3, r2, r3
 801a7c4:	3b01      	subs	r3, #1
 801a7c6:	4619      	mov	r1, r3
 801a7c8:	f7ff fcba 	bl	801a140 <mg_pass_string>
 801a7cc:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 801a7ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	da01      	bge.n	801a7d8 <mg_json_get+0x33c>
 801a7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7d6:	e197      	b.n	801ab08 <mg_json_get+0x66c>
          i += n + 1;
 801a7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7da:	3301      	adds	r3, #1
 801a7dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a7de:	4413      	add	r3, r2
 801a7e0:	663b      	str	r3, [r7, #96]	@ 0x60
 801a7e2:	e002      	b.n	801a7ea <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 801a7e4:	f06f 0301 	mvn.w	r3, #1
 801a7e8:	e18e      	b.n	801ab08 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 801a7ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a7ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a7ee:	429a      	cmp	r2, r3
 801a7f0:	d114      	bne.n	801a81c <mg_json_get+0x380>
 801a7f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a7f4:	687a      	ldr	r2, [r7, #4]
 801a7f6:	4413      	add	r3, r2
 801a7f8:	781b      	ldrb	r3, [r3, #0]
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d10e      	bne.n	801a81c <mg_json_get+0x380>
 801a7fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a802:	429a      	cmp	r2, r3
 801a804:	d10a      	bne.n	801a81c <mg_json_get+0x380>
 801a806:	683b      	ldr	r3, [r7, #0]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d005      	beq.n	801a818 <mg_json_get+0x37c>
 801a80c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a80e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a810:	1ad3      	subs	r3, r2, r3
 801a812:	1c5a      	adds	r2, r3, #1
 801a814:	683b      	ldr	r3, [r7, #0]
 801a816:	601a      	str	r2, [r3, #0]
 801a818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a81a:	e175      	b.n	801ab08 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 801a81c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a81e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a820:	429a      	cmp	r2, r3
 801a822:	d105      	bne.n	801a830 <mg_json_get+0x394>
 801a824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a826:	2b00      	cmp	r3, #0
 801a828:	db02      	blt.n	801a830 <mg_json_get+0x394>
 801a82a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a82c:	3301      	adds	r3, #1
 801a82e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 801a830:	2303      	movs	r3, #3
 801a832:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 801a836:	e15d      	b.n	801aaf4 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 801a838:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a83c:	2b22      	cmp	r3, #34	@ 0x22
 801a83e:	d170      	bne.n	801a922 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 801a840:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a842:	3301      	adds	r3, #1
 801a844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a846:	18d0      	adds	r0, r2, r3
 801a848:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a84a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a84c:	1ad3      	subs	r3, r2, r3
 801a84e:	3b01      	subs	r3, #1
 801a850:	4619      	mov	r1, r3
 801a852:	f7ff fc75 	bl	801a140 <mg_pass_string>
 801a856:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 801a858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	da01      	bge.n	801a862 <mg_json_get+0x3c6>
 801a85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a860:	e152      	b.n	801ab08 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 801a862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a864:	1c5a      	adds	r2, r3, #1
 801a866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a868:	4413      	add	r3, r2
 801a86a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a86c:	429a      	cmp	r2, r3
 801a86e:	dc02      	bgt.n	801a876 <mg_json_get+0x3da>
 801a870:	f06f 0302 	mvn.w	r3, #2
 801a874:	e148      	b.n	801ab08 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 801a876:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a87a:	429a      	cmp	r2, r3
 801a87c:	da02      	bge.n	801a884 <mg_json_get+0x3e8>
 801a87e:	f06f 0302 	mvn.w	r3, #2
 801a882:	e141      	b.n	801ab08 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 801a884:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a888:	429a      	cmp	r2, r3
 801a88a:	d109      	bne.n	801a8a0 <mg_json_get+0x404>
 801a88c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a88e:	3b01      	subs	r3, #1
 801a890:	687a      	ldr	r2, [r7, #4]
 801a892:	4413      	add	r3, r2
 801a894:	781b      	ldrb	r3, [r3, #0]
 801a896:	2b2e      	cmp	r3, #46	@ 0x2e
 801a898:	d002      	beq.n	801a8a0 <mg_json_get+0x404>
 801a89a:	f06f 0302 	mvn.w	r3, #2
 801a89e:	e133      	b.n	801ab08 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 801a8a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a8a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a8a4:	429a      	cmp	r2, r3
 801a8a6:	d133      	bne.n	801a910 <mg_json_get+0x474>
 801a8a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a8aa:	3b01      	subs	r3, #1
 801a8ac:	687a      	ldr	r2, [r7, #4]
 801a8ae:	4413      	add	r3, r2
 801a8b0:	781b      	ldrb	r3, [r3, #0]
 801a8b2:	2b2e      	cmp	r3, #46	@ 0x2e
 801a8b4:	d12c      	bne.n	801a910 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 801a8b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a8b8:	3301      	adds	r3, #1
 801a8ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a8bc:	18d0      	adds	r0, r2, r3
 801a8be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a8c0:	687a      	ldr	r2, [r7, #4]
 801a8c2:	4413      	add	r3, r2
 801a8c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a8c6:	4619      	mov	r1, r3
 801a8c8:	f00b fb7b 	bl	8025fc2 <strncmp>
 801a8cc:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d11e      	bne.n	801a910 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801a8d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a8d6:	4413      	add	r3, r2
 801a8d8:	461a      	mov	r2, r3
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	4413      	add	r3, r2
 801a8de:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d011      	beq.n	801a908 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801a8e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a8e8:	4413      	add	r3, r2
 801a8ea:	461a      	mov	r2, r3
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	4413      	add	r3, r2
 801a8f0:	781b      	ldrb	r3, [r3, #0]
 801a8f2:	2b2e      	cmp	r3, #46	@ 0x2e
 801a8f4:	d008      	beq.n	801a908 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 801a8f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a8fa:	4413      	add	r3, r2
 801a8fc:	461a      	mov	r2, r3
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	4413      	add	r3, r2
 801a902:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801a904:	2b5b      	cmp	r3, #91	@ 0x5b
 801a906:	d103      	bne.n	801a910 <mg_json_get+0x474>
            pos += n;
 801a908:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a90c:	4413      	add	r3, r2
 801a90e:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 801a910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a912:	3301      	adds	r3, #1
 801a914:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a916:	4413      	add	r3, r2
 801a918:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 801a91a:	2302      	movs	r3, #2
 801a91c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801a920:	e0e7      	b.n	801aaf2 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 801a922:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a926:	2b7d      	cmp	r3, #125	@ 0x7d
 801a928:	d14a      	bne.n	801a9c0 <mg_json_get+0x524>
          MG_EOO('}');
 801a92a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a92c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a92e:	429a      	cmp	r2, r3
 801a930:	d106      	bne.n	801a940 <mg_json_get+0x4a4>
 801a932:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a936:	429a      	cmp	r2, r3
 801a938:	d002      	beq.n	801a940 <mg_json_get+0x4a4>
 801a93a:	f06f 0302 	mvn.w	r3, #2
 801a93e:	e0e3      	b.n	801ab08 <mg_json_get+0x66c>
 801a940:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a946:	3b01      	subs	r3, #1
 801a948:	3368      	adds	r3, #104	@ 0x68
 801a94a:	443b      	add	r3, r7
 801a94c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801a950:	3302      	adds	r3, #2
 801a952:	429a      	cmp	r2, r3
 801a954:	d008      	beq.n	801a968 <mg_json_get+0x4cc>
 801a956:	f06f 0301 	mvn.w	r3, #1
 801a95a:	e0d5      	b.n	801ab08 <mg_json_get+0x66c>
 801a95c:	08032510 	.word	0x08032510
 801a960:	08032518 	.word	0x08032518
 801a964:	08032520 	.word	0x08032520
 801a968:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a96a:	3b01      	subs	r3, #1
 801a96c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a96e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a972:	429a      	cmp	r2, r3
 801a974:	d114      	bne.n	801a9a0 <mg_json_get+0x504>
 801a976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a978:	687a      	ldr	r2, [r7, #4]
 801a97a:	4413      	add	r3, r2
 801a97c:	781b      	ldrb	r3, [r3, #0]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d10e      	bne.n	801a9a0 <mg_json_get+0x504>
 801a982:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a986:	429a      	cmp	r2, r3
 801a988:	d10a      	bne.n	801a9a0 <mg_json_get+0x504>
 801a98a:	683b      	ldr	r3, [r7, #0]
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d005      	beq.n	801a99c <mg_json_get+0x500>
 801a990:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a994:	1ad3      	subs	r3, r2, r3
 801a996:	1c5a      	adds	r2, r3, #1
 801a998:	683b      	ldr	r3, [r7, #0]
 801a99a:	601a      	str	r2, [r3, #0]
 801a99c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a99e:	e0b3      	b.n	801ab08 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 801a9a0:	2303      	movs	r3, #3
 801a9a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 801a9a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a9a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a9aa:	429a      	cmp	r2, r3
 801a9ac:	f040 80a1 	bne.w	801aaf2 <mg_json_get+0x656>
 801a9b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	f2c0 809d 	blt.w	801aaf2 <mg_json_get+0x656>
 801a9b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a9ba:	3301      	adds	r3, #1
 801a9bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 801a9be:	e098      	b.n	801aaf2 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 801a9c0:	f06f 0301 	mvn.w	r3, #1
 801a9c4:	e0a0      	b.n	801ab08 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 801a9c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a9ca:	2b3a      	cmp	r3, #58	@ 0x3a
 801a9cc:	d103      	bne.n	801a9d6 <mg_json_get+0x53a>
          expecting = S_VALUE;
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801a9d4:	e08e      	b.n	801aaf4 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 801a9d6:	f06f 0301 	mvn.w	r3, #1
 801a9da:	e095      	b.n	801ab08 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 801a9dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	dc02      	bgt.n	801a9e8 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 801a9e2:	f06f 0301 	mvn.w	r3, #1
 801a9e6:	e08f      	b.n	801ab08 <mg_json_get+0x66c>
        } else if (c == ',') {
 801a9e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a9ec:	2b2c      	cmp	r3, #44	@ 0x2c
 801a9ee:	d10d      	bne.n	801aa0c <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 801a9f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a9f2:	3b01      	subs	r3, #1
 801a9f4:	3368      	adds	r3, #104	@ 0x68
 801a9f6:	443b      	add	r3, r7
 801a9f8:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801a9fc:	2b7b      	cmp	r3, #123	@ 0x7b
 801a9fe:	bf0c      	ite	eq
 801aa00:	2301      	moveq	r3, #1
 801aa02:	2300      	movne	r3, #0
 801aa04:	b2db      	uxtb	r3, r3
 801aa06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801aa0a:	e073      	b.n	801aaf4 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 801aa0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa10:	2b5d      	cmp	r3, #93	@ 0x5d
 801aa12:	d003      	beq.n	801aa1c <mg_json_get+0x580>
 801aa14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa18:	2b7d      	cmp	r3, #125	@ 0x7d
 801aa1a:	d163      	bne.n	801aae4 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 801aa1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa20:	429a      	cmp	r2, r3
 801aa22:	d10d      	bne.n	801aa40 <mg_json_get+0x5a4>
 801aa24:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa28:	2b7d      	cmp	r3, #125	@ 0x7d
 801aa2a:	d109      	bne.n	801aa40 <mg_json_get+0x5a4>
 801aa2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa2e:	3b01      	subs	r3, #1
 801aa30:	687a      	ldr	r2, [r7, #4]
 801aa32:	4413      	add	r3, r2
 801aa34:	781b      	ldrb	r3, [r3, #0]
 801aa36:	2b2e      	cmp	r3, #46	@ 0x2e
 801aa38:	d102      	bne.n	801aa40 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 801aa3a:	f06f 0302 	mvn.w	r3, #2
 801aa3e:	e063      	b.n	801ab08 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 801aa40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa44:	429a      	cmp	r2, r3
 801aa46:	d10d      	bne.n	801aa64 <mg_json_get+0x5c8>
 801aa48:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa4c:	2b5d      	cmp	r3, #93	@ 0x5d
 801aa4e:	d109      	bne.n	801aa64 <mg_json_get+0x5c8>
 801aa50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa52:	3b01      	subs	r3, #1
 801aa54:	687a      	ldr	r2, [r7, #4]
 801aa56:	4413      	add	r3, r2
 801aa58:	781b      	ldrb	r3, [r3, #0]
 801aa5a:	2b2c      	cmp	r3, #44	@ 0x2c
 801aa5c:	d102      	bne.n	801aa64 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 801aa5e:	f06f 0302 	mvn.w	r3, #2
 801aa62:	e051      	b.n	801ab08 <mg_json_get+0x66c>
          MG_EOO('O');
 801aa64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa68:	429a      	cmp	r2, r3
 801aa6a:	d106      	bne.n	801aa7a <mg_json_get+0x5de>
 801aa6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801aa6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa70:	429a      	cmp	r2, r3
 801aa72:	d002      	beq.n	801aa7a <mg_json_get+0x5de>
 801aa74:	f06f 0302 	mvn.w	r3, #2
 801aa78:	e046      	b.n	801ab08 <mg_json_get+0x66c>
 801aa7a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801aa7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aa80:	3b01      	subs	r3, #1
 801aa82:	3368      	adds	r3, #104	@ 0x68
 801aa84:	443b      	add	r3, r7
 801aa86:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801aa8a:	3302      	adds	r3, #2
 801aa8c:	429a      	cmp	r2, r3
 801aa8e:	d002      	beq.n	801aa96 <mg_json_get+0x5fa>
 801aa90:	f06f 0301 	mvn.w	r3, #1
 801aa94:	e038      	b.n	801ab08 <mg_json_get+0x66c>
 801aa96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aa98:	3b01      	subs	r3, #1
 801aa9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801aa9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aaa0:	429a      	cmp	r2, r3
 801aaa2:	d114      	bne.n	801aace <mg_json_get+0x632>
 801aaa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aaa6:	687a      	ldr	r2, [r7, #4]
 801aaa8:	4413      	add	r3, r2
 801aaaa:	781b      	ldrb	r3, [r3, #0]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d10e      	bne.n	801aace <mg_json_get+0x632>
 801aab0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801aab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aab4:	429a      	cmp	r2, r3
 801aab6:	d10a      	bne.n	801aace <mg_json_get+0x632>
 801aab8:	683b      	ldr	r3, [r7, #0]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d005      	beq.n	801aaca <mg_json_get+0x62e>
 801aabe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801aac0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aac2:	1ad3      	subs	r3, r2, r3
 801aac4:	1c5a      	adds	r2, r3, #1
 801aac6:	683b      	ldr	r3, [r7, #0]
 801aac8:	601a      	str	r2, [r3, #0]
 801aaca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aacc:	e01c      	b.n	801ab08 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 801aace:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aad2:	429a      	cmp	r2, r3
 801aad4:	d109      	bne.n	801aaea <mg_json_get+0x64e>
 801aad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aad8:	2b00      	cmp	r3, #0
 801aada:	db06      	blt.n	801aaea <mg_json_get+0x64e>
 801aadc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aade:	3301      	adds	r3, #1
 801aae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801aae2:	e002      	b.n	801aaea <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 801aae4:	f06f 0301 	mvn.w	r3, #1
 801aae8:	e00e      	b.n	801ab08 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 801aaea:	bf00      	nop
        break;
 801aaec:	e002      	b.n	801aaf4 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 801aaee:	bf00      	nop
 801aaf0:	e000      	b.n	801aaf4 <mg_json_get+0x658>
        break;
 801aaf2:	bf00      	nop
  for (i = 0; i < len; i++) {
 801aaf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aaf6:	3301      	adds	r3, #1
 801aaf8:	663b      	str	r3, [r7, #96]	@ 0x60
 801aafa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801aafc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aafe:	429a      	cmp	r2, r3
 801ab00:	f6ff acfc 	blt.w	801a4fc <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 801ab04:	f06f 0302 	mvn.w	r3, #2
}
 801ab08:	4618      	mov	r0, r3
 801ab0a:	376c      	adds	r7, #108	@ 0x6c
 801ab0c:	46bd      	mov	sp, r7
 801ab0e:	bd90      	pop	{r4, r7, pc}

0801ab10 <mg_json_get_num>:
  int len = 0, ofs = mg_json_get(json, path, &len);
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
                  (size_t) (len < 0 ? 0 : len));
}

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 801ab10:	b590      	push	{r4, r7, lr}
 801ab12:	b089      	sub	sp, #36	@ 0x24
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	f107 0408 	add.w	r4, r7, #8
 801ab1a:	e884 0003 	stmia.w	r4, {r0, r1}
 801ab1e:	607a      	str	r2, [r7, #4]
 801ab20:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 801ab22:	2300      	movs	r3, #0
 801ab24:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 801ab26:	f107 0314 	add.w	r3, r7, #20
 801ab2a:	687a      	ldr	r2, [r7, #4]
 801ab2c:	f107 0108 	add.w	r1, r7, #8
 801ab30:	c903      	ldmia	r1, {r0, r1}
 801ab32:	f7ff fcb3 	bl	801a49c <mg_json_get>
 801ab36:	61b8      	str	r0, [r7, #24]
 801ab38:	69bb      	ldr	r3, [r7, #24]
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	db25      	blt.n	801ab8a <mg_json_get_num+0x7a>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 801ab3e:	68ba      	ldr	r2, [r7, #8]
 801ab40:	69bb      	ldr	r3, [r7, #24]
 801ab42:	4413      	add	r3, r2
 801ab44:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 801ab46:	2b2d      	cmp	r3, #45	@ 0x2d
 801ab48:	d00b      	beq.n	801ab62 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 801ab4a:	68ba      	ldr	r2, [r7, #8]
 801ab4c:	69bb      	ldr	r3, [r7, #24]
 801ab4e:	4413      	add	r3, r2
 801ab50:	781b      	ldrb	r3, [r3, #0]
 801ab52:	2b2f      	cmp	r3, #47	@ 0x2f
 801ab54:	d919      	bls.n	801ab8a <mg_json_get_num+0x7a>
 801ab56:	68ba      	ldr	r2, [r7, #8]
 801ab58:	69bb      	ldr	r3, [r7, #24]
 801ab5a:	4413      	add	r3, r2
 801ab5c:	781b      	ldrb	r3, [r3, #0]
 801ab5e:	2b39      	cmp	r3, #57	@ 0x39
 801ab60:	d813      	bhi.n	801ab8a <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 801ab62:	683b      	ldr	r3, [r7, #0]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d00e      	beq.n	801ab86 <mg_json_get_num+0x76>
 801ab68:	68ba      	ldr	r2, [r7, #8]
 801ab6a:	69bb      	ldr	r3, [r7, #24]
 801ab6c:	4413      	add	r3, r2
 801ab6e:	6979      	ldr	r1, [r7, #20]
 801ab70:	2200      	movs	r2, #0
 801ab72:	4618      	mov	r0, r3
 801ab74:	f7ff fb28 	bl	801a1c8 <mg_atod>
 801ab78:	eeb0 7a40 	vmov.f32	s14, s0
 801ab7c:	eef0 7a60 	vmov.f32	s15, s1
 801ab80:	683b      	ldr	r3, [r7, #0]
 801ab82:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 801ab86:	2301      	movs	r3, #1
 801ab88:	61fb      	str	r3, [r7, #28]
  }
  return found;
 801ab8a:	69fb      	ldr	r3, [r7, #28]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	bf14      	ite	ne
 801ab90:	2301      	movne	r3, #1
 801ab92:	2300      	moveq	r3, #0
 801ab94:	b2db      	uxtb	r3, r3
}
 801ab96:	4618      	mov	r0, r3
 801ab98:	3724      	adds	r7, #36	@ 0x24
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	bd90      	pop	{r4, r7, pc}

0801ab9e <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 801ab9e:	b590      	push	{r4, r7, lr}
 801aba0:	b087      	sub	sp, #28
 801aba2:	af00      	add	r7, sp, #0
 801aba4:	f107 0408 	add.w	r4, r7, #8
 801aba8:	e884 0003 	stmia.w	r4, {r0, r1}
 801abac:	607a      	str	r2, [r7, #4]
 801abae:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 801abb0:	2300      	movs	r3, #0
 801abb2:	617b      	str	r3, [r7, #20]
 801abb4:	2300      	movs	r3, #0
 801abb6:	687a      	ldr	r2, [r7, #4]
 801abb8:	f107 0108 	add.w	r1, r7, #8
 801abbc:	c903      	ldmia	r1, {r0, r1}
 801abbe:	f7ff fc6d 	bl	801a49c <mg_json_get>
 801abc2:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 801abc4:	693b      	ldr	r3, [r7, #16]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	db1b      	blt.n	801ac02 <mg_json_get_bool+0x64>
 801abca:	68ba      	ldr	r2, [r7, #8]
 801abcc:	693b      	ldr	r3, [r7, #16]
 801abce:	4413      	add	r3, r2
 801abd0:	781b      	ldrb	r3, [r3, #0]
 801abd2:	2b74      	cmp	r3, #116	@ 0x74
 801abd4:	d005      	beq.n	801abe2 <mg_json_get_bool+0x44>
 801abd6:	68ba      	ldr	r2, [r7, #8]
 801abd8:	693b      	ldr	r3, [r7, #16]
 801abda:	4413      	add	r3, r2
 801abdc:	781b      	ldrb	r3, [r3, #0]
 801abde:	2b66      	cmp	r3, #102	@ 0x66
 801abe0:	d10f      	bne.n	801ac02 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 801abe2:	683b      	ldr	r3, [r7, #0]
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d00a      	beq.n	801abfe <mg_json_get_bool+0x60>
 801abe8:	68ba      	ldr	r2, [r7, #8]
 801abea:	693b      	ldr	r3, [r7, #16]
 801abec:	4413      	add	r3, r2
 801abee:	781b      	ldrb	r3, [r3, #0]
 801abf0:	2b74      	cmp	r3, #116	@ 0x74
 801abf2:	bf0c      	ite	eq
 801abf4:	2301      	moveq	r3, #1
 801abf6:	2300      	movne	r3, #0
 801abf8:	b2da      	uxtb	r2, r3
 801abfa:	683b      	ldr	r3, [r7, #0]
 801abfc:	701a      	strb	r2, [r3, #0]
    found = 1;
 801abfe:	2301      	movs	r3, #1
 801ac00:	617b      	str	r3, [r7, #20]
  }
  return found;
 801ac02:	697b      	ldr	r3, [r7, #20]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	bf14      	ite	ne
 801ac08:	2301      	movne	r3, #1
 801ac0a:	2300      	moveq	r3, #0
 801ac0c:	b2db      	uxtb	r3, r3
}
 801ac0e:	4618      	mov	r0, r3
 801ac10:	371c      	adds	r7, #28
 801ac12:	46bd      	mov	sp, r7
 801ac14:	bd90      	pop	{r4, r7, pc}

0801ac16 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 801ac16:	b590      	push	{r4, r7, lr}
 801ac18:	b08d      	sub	sp, #52	@ 0x34
 801ac1a:	af02      	add	r7, sp, #8
 801ac1c:	f107 0408 	add.w	r4, r7, #8
 801ac20:	e884 0003 	stmia.w	r4, {r0, r1}
 801ac24:	607a      	str	r2, [r7, #4]
 801ac26:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 801ac28:	2300      	movs	r3, #0
 801ac2a:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	623b      	str	r3, [r7, #32]
 801ac30:	e064      	b.n	801acfc <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 801ac32:	68ba      	ldr	r2, [r7, #8]
 801ac34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac36:	4413      	add	r3, r2
 801ac38:	781b      	ldrb	r3, [r3, #0]
 801ac3a:	2b5c      	cmp	r3, #92	@ 0x5c
 801ac3c:	d12c      	bne.n	801ac98 <mg_json_unescape+0x82>
 801ac3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac40:	1d5a      	adds	r2, r3, #5
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	429a      	cmp	r2, r3
 801ac46:	d227      	bcs.n	801ac98 <mg_json_unescape+0x82>
 801ac48:	68ba      	ldr	r2, [r7, #8]
 801ac4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac4c:	3301      	adds	r3, #1
 801ac4e:	4413      	add	r3, r2
 801ac50:	781b      	ldrb	r3, [r3, #0]
 801ac52:	2b75      	cmp	r3, #117	@ 0x75
 801ac54:	d120      	bne.n	801ac98 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 801ac56:	68ba      	ldr	r2, [r7, #8]
 801ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac5a:	3302      	adds	r3, #2
 801ac5c:	18d1      	adds	r1, r2, r3
 801ac5e:	f107 0314 	add.w	r3, r7, #20
 801ac62:	2204      	movs	r2, #4
 801ac64:	4618      	mov	r0, r3
 801ac66:	f006 fe02 	bl	802186e <mg_str_n>
 801ac6a:	687a      	ldr	r2, [r7, #4]
 801ac6c:	6a3b      	ldr	r3, [r7, #32]
 801ac6e:	4413      	add	r3, r2
 801ac70:	2201      	movs	r2, #1
 801ac72:	9200      	str	r2, [sp, #0]
 801ac74:	2210      	movs	r2, #16
 801ac76:	f107 0114 	add.w	r1, r7, #20
 801ac7a:	c903      	ldmia	r1, {r0, r1}
 801ac7c:	f006 fffe 	bl	8021c7c <mg_str_to_num>
 801ac80:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 801ac82:	f083 0301 	eor.w	r3, r3, #1
 801ac86:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d001      	beq.n	801ac90 <mg_json_unescape+0x7a>
        return false;
 801ac8c:	2300      	movs	r3, #0
 801ac8e:	e04c      	b.n	801ad2a <mg_json_unescape+0x114>
      i += 5;
 801ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac92:	3305      	adds	r3, #5
 801ac94:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac96:	e02b      	b.n	801acf0 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 801ac98:	68ba      	ldr	r2, [r7, #8]
 801ac9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac9c:	4413      	add	r3, r2
 801ac9e:	781b      	ldrb	r3, [r3, #0]
 801aca0:	2b5c      	cmp	r3, #92	@ 0x5c
 801aca2:	d11d      	bne.n	801ace0 <mg_json_unescape+0xca>
 801aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aca6:	1c5a      	adds	r2, r3, #1
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	429a      	cmp	r2, r3
 801acac:	d218      	bcs.n	801ace0 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 801acae:	68ba      	ldr	r2, [r7, #8]
 801acb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acb2:	3301      	adds	r3, #1
 801acb4:	4413      	add	r3, r2
 801acb6:	781b      	ldrb	r3, [r3, #0]
 801acb8:	2100      	movs	r1, #0
 801acba:	4618      	mov	r0, r3
 801acbc:	f7ff fa10 	bl	801a0e0 <json_esc>
 801acc0:	4603      	mov	r3, r0
 801acc2:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 801acc4:	7ffb      	ldrb	r3, [r7, #31]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d101      	bne.n	801acce <mg_json_unescape+0xb8>
 801acca:	2300      	movs	r3, #0
 801accc:	e02d      	b.n	801ad2a <mg_json_unescape+0x114>
      to[j] = c;
 801acce:	687a      	ldr	r2, [r7, #4]
 801acd0:	6a3b      	ldr	r3, [r7, #32]
 801acd2:	4413      	add	r3, r2
 801acd4:	7ffa      	ldrb	r2, [r7, #31]
 801acd6:	701a      	strb	r2, [r3, #0]
      i++;
 801acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acda:	3301      	adds	r3, #1
 801acdc:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 801acde:	e007      	b.n	801acf0 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 801ace0:	68ba      	ldr	r2, [r7, #8]
 801ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ace4:	441a      	add	r2, r3
 801ace6:	6879      	ldr	r1, [r7, #4]
 801ace8:	6a3b      	ldr	r3, [r7, #32]
 801acea:	440b      	add	r3, r1
 801acec:	7812      	ldrb	r2, [r2, #0]
 801acee:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 801acf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acf2:	3301      	adds	r3, #1
 801acf4:	627b      	str	r3, [r7, #36]	@ 0x24
 801acf6:	6a3b      	ldr	r3, [r7, #32]
 801acf8:	3301      	adds	r3, #1
 801acfa:	623b      	str	r3, [r7, #32]
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ad00:	429a      	cmp	r2, r3
 801ad02:	d203      	bcs.n	801ad0c <mg_json_unescape+0xf6>
 801ad04:	6a3a      	ldr	r2, [r7, #32]
 801ad06:	683b      	ldr	r3, [r7, #0]
 801ad08:	429a      	cmp	r2, r3
 801ad0a:	d392      	bcc.n	801ac32 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 801ad0c:	6a3a      	ldr	r2, [r7, #32]
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	429a      	cmp	r2, r3
 801ad12:	d301      	bcc.n	801ad18 <mg_json_unescape+0x102>
 801ad14:	2300      	movs	r3, #0
 801ad16:	e008      	b.n	801ad2a <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 801ad18:	683b      	ldr	r3, [r7, #0]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d004      	beq.n	801ad28 <mg_json_unescape+0x112>
 801ad1e:	687a      	ldr	r2, [r7, #4]
 801ad20:	6a3b      	ldr	r3, [r7, #32]
 801ad22:	4413      	add	r3, r2
 801ad24:	2200      	movs	r2, #0
 801ad26:	701a      	strb	r2, [r3, #0]
  return true;
 801ad28:	2301      	movs	r3, #1
}
 801ad2a:	4618      	mov	r0, r3
 801ad2c:	372c      	adds	r7, #44	@ 0x2c
 801ad2e:	46bd      	mov	sp, r7
 801ad30:	bd90      	pop	{r4, r7, pc}

0801ad32 <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 801ad32:	b580      	push	{r7, lr}
 801ad34:	b08a      	sub	sp, #40	@ 0x28
 801ad36:	af00      	add	r7, sp, #0
 801ad38:	f107 0308 	add.w	r3, r7, #8
 801ad3c:	e883 0003 	stmia.w	r3, {r0, r1}
 801ad40:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 801ad42:	2300      	movs	r3, #0
 801ad44:	627b      	str	r3, [r7, #36]	@ 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 801ad46:	2300      	movs	r3, #0
 801ad48:	617b      	str	r3, [r7, #20]
 801ad4a:	f107 0314 	add.w	r3, r7, #20
 801ad4e:	687a      	ldr	r2, [r7, #4]
 801ad50:	f107 0108 	add.w	r1, r7, #8
 801ad54:	c903      	ldmia	r1, {r0, r1}
 801ad56:	f7ff fba1 	bl	801a49c <mg_json_get>
 801ad5a:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 801ad5c:	6a3b      	ldr	r3, [r7, #32]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	db2f      	blt.n	801adc2 <mg_json_get_str+0x90>
 801ad62:	697b      	ldr	r3, [r7, #20]
 801ad64:	2b01      	cmp	r3, #1
 801ad66:	dd2c      	ble.n	801adc2 <mg_json_get_str+0x90>
 801ad68:	68ba      	ldr	r2, [r7, #8]
 801ad6a:	6a3b      	ldr	r3, [r7, #32]
 801ad6c:	4413      	add	r3, r2
 801ad6e:	781b      	ldrb	r3, [r3, #0]
 801ad70:	2b22      	cmp	r3, #34	@ 0x22
 801ad72:	d126      	bne.n	801adc2 <mg_json_get_str+0x90>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 801ad74:	697b      	ldr	r3, [r7, #20]
 801ad76:	4619      	mov	r1, r3
 801ad78:	2001      	movs	r0, #1
 801ad7a:	f7f9 fe91 	bl	8014aa0 <mg_calloc>
 801ad7e:	6278      	str	r0, [r7, #36]	@ 0x24
 801ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d01d      	beq.n	801adc2 <mg_json_get_str+0x90>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 801ad86:	68ba      	ldr	r2, [r7, #8]
 801ad88:	6a3b      	ldr	r3, [r7, #32]
 801ad8a:	3301      	adds	r3, #1
 801ad8c:	18d1      	adds	r1, r2, r3
 801ad8e:	697b      	ldr	r3, [r7, #20]
 801ad90:	3b02      	subs	r3, #2
 801ad92:	461a      	mov	r2, r3
 801ad94:	f107 0318 	add.w	r3, r7, #24
 801ad98:	4618      	mov	r0, r3
 801ad9a:	f006 fd68 	bl	802186e <mg_str_n>
 801ad9e:	697b      	ldr	r3, [r7, #20]
 801ada0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ada2:	f107 0118 	add.w	r1, r7, #24
 801ada6:	c903      	ldmia	r1, {r0, r1}
 801ada8:	f7ff ff35 	bl	801ac16 <mg_json_unescape>
 801adac:	4603      	mov	r3, r0
 801adae:	f083 0301 	eor.w	r3, r3, #1
 801adb2:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d004      	beq.n	801adc2 <mg_json_get_str+0x90>
                          result, (size_t) len)) {
      free(result);
 801adb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801adba:	f7f1 fafd 	bl	800c3b8 <vPortFree>
      result = NULL;
 801adbe:	2300      	movs	r3, #0
 801adc0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return result;
 801adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801adc4:	4618      	mov	r0, r3
 801adc6:	3728      	adds	r7, #40	@ 0x28
 801adc8:	46bd      	mov	sp, r7
 801adca:	bd80      	pop	{r7, pc}

0801adcc <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 801adcc:	b580      	push	{r7, lr}
 801adce:	b082      	sub	sp, #8
 801add0:	af00      	add	r7, sp, #0
 801add2:	4603      	mov	r3, r0
 801add4:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 801add6:	4b05      	ldr	r3, [pc, #20]	@ (801adec <logc+0x20>)
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	4a05      	ldr	r2, [pc, #20]	@ (801adf0 <logc+0x24>)
 801addc:	6811      	ldr	r1, [r2, #0]
 801adde:	79fa      	ldrb	r2, [r7, #7]
 801ade0:	4610      	mov	r0, r2
 801ade2:	4798      	blx	r3
}
 801ade4:	bf00      	nop
 801ade6:	3708      	adds	r7, #8
 801ade8:	46bd      	mov	sp, r7
 801adea:	bd80      	pop	{r7, pc}
 801adec:	2000029c 	.word	0x2000029c
 801adf0:	20018150 	.word	0x20018150

0801adf4 <logs>:

static void logs(const char *buf, size_t len) {
 801adf4:	b580      	push	{r7, lr}
 801adf6:	b084      	sub	sp, #16
 801adf8:	af00      	add	r7, sp, #0
 801adfa:	6078      	str	r0, [r7, #4]
 801adfc:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 801adfe:	2300      	movs	r3, #0
 801ae00:	60fb      	str	r3, [r7, #12]
 801ae02:	e009      	b.n	801ae18 <logs+0x24>
 801ae04:	687a      	ldr	r2, [r7, #4]
 801ae06:	68fb      	ldr	r3, [r7, #12]
 801ae08:	4413      	add	r3, r2
 801ae0a:	781b      	ldrb	r3, [r3, #0]
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	f7ff ffdd 	bl	801adcc <logc>
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	3301      	adds	r3, #1
 801ae16:	60fb      	str	r3, [r7, #12]
 801ae18:	68fa      	ldr	r2, [r7, #12]
 801ae1a:	683b      	ldr	r3, [r7, #0]
 801ae1c:	429a      	cmp	r2, r3
 801ae1e:	d3f1      	bcc.n	801ae04 <logs+0x10>
}
 801ae20:	bf00      	nop
 801ae22:	bf00      	nop
 801ae24:	3710      	adds	r7, #16
 801ae26:	46bd      	mov	sp, r7
 801ae28:	bd80      	pop	{r7, pc}
	...

0801ae2c <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 801ae2c:	b590      	push	{r4, r7, lr}
 801ae2e:	b099      	sub	sp, #100	@ 0x64
 801ae30:	af06      	add	r7, sp, #24
 801ae32:	60f8      	str	r0, [r7, #12]
 801ae34:	60b9      	str	r1, [r7, #8]
 801ae36:	607a      	str	r2, [r7, #4]
 801ae38:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 801ae3a:	212f      	movs	r1, #47	@ 0x2f
 801ae3c:	68b8      	ldr	r0, [r7, #8]
 801ae3e:	f00b f8e5 	bl	802600c <strrchr>
 801ae42:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 801ae44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d104      	bne.n	801ae54 <mg_log_prefix+0x28>
 801ae4a:	215c      	movs	r1, #92	@ 0x5c
 801ae4c:	68b8      	ldr	r0, [r7, #8]
 801ae4e:	f00b f8dd 	bl	802600c <strrchr>
 801ae52:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 801ae54:	f007 fd22 	bl	802289c <mg_millis>
 801ae58:	4602      	mov	r2, r0
 801ae5a:	460b      	mov	r3, r1
 801ae5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801ae5e:	2900      	cmp	r1, #0
 801ae60:	d002      	beq.n	801ae68 <mg_log_prefix+0x3c>
 801ae62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801ae64:	3101      	adds	r1, #1
 801ae66:	e000      	b.n	801ae6a <mg_log_prefix+0x3e>
 801ae68:	68b9      	ldr	r1, [r7, #8]
 801ae6a:	f107 0414 	add.w	r4, r7, #20
 801ae6e:	6838      	ldr	r0, [r7, #0]
 801ae70:	9005      	str	r0, [sp, #20]
 801ae72:	6878      	ldr	r0, [r7, #4]
 801ae74:	9004      	str	r0, [sp, #16]
 801ae76:	9103      	str	r1, [sp, #12]
 801ae78:	68f9      	ldr	r1, [r7, #12]
 801ae7a:	9102      	str	r1, [sp, #8]
 801ae7c:	e9cd 2300 	strd	r2, r3, [sp]
 801ae80:	4a11      	ldr	r2, [pc, #68]	@ (801aec8 <mg_log_prefix+0x9c>)
 801ae82:	2129      	movs	r1, #41	@ 0x29
 801ae84:	4620      	mov	r0, r4
 801ae86:	f005 ffed 	bl	8020e64 <mg_snprintf>
 801ae8a:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 801ae8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ae8e:	2b27      	cmp	r3, #39	@ 0x27
 801ae90:	d90a      	bls.n	801aea8 <mg_log_prefix+0x7c>
 801ae92:	2327      	movs	r3, #39	@ 0x27
 801ae94:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 801ae96:	e007      	b.n	801aea8 <mg_log_prefix+0x7c>
 801ae98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ae9a:	1c5a      	adds	r2, r3, #1
 801ae9c:	643a      	str	r2, [r7, #64]	@ 0x40
 801ae9e:	3348      	adds	r3, #72	@ 0x48
 801aea0:	443b      	add	r3, r7
 801aea2:	2220      	movs	r2, #32
 801aea4:	f803 2c34 	strb.w	r2, [r3, #-52]
 801aea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aeaa:	2b28      	cmp	r3, #40	@ 0x28
 801aeac:	d9f4      	bls.n	801ae98 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 801aeae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aeb0:	1e5a      	subs	r2, r3, #1
 801aeb2:	f107 0314 	add.w	r3, r7, #20
 801aeb6:	4611      	mov	r1, r2
 801aeb8:	4618      	mov	r0, r3
 801aeba:	f7ff ff9b 	bl	801adf4 <logs>
}
 801aebe:	bf00      	nop
 801aec0:	374c      	adds	r7, #76	@ 0x4c
 801aec2:	46bd      	mov	sp, r7
 801aec4:	bd90      	pop	{r4, r7, pc}
 801aec6:	bf00      	nop
 801aec8:	08032528 	.word	0x08032528

0801aecc <mg_log>:

void mg_log(const char *fmt, ...) {
 801aecc:	b40f      	push	{r0, r1, r2, r3}
 801aece:	b580      	push	{r7, lr}
 801aed0:	b082      	sub	sp, #8
 801aed2:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 801aed4:	f107 0314 	add.w	r3, r7, #20
 801aed8:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 801aeda:	4b09      	ldr	r3, [pc, #36]	@ (801af00 <mg_log+0x34>)
 801aedc:	6818      	ldr	r0, [r3, #0]
 801aede:	4b09      	ldr	r3, [pc, #36]	@ (801af04 <mg_log+0x38>)
 801aee0:	6819      	ldr	r1, [r3, #0]
 801aee2:	1d3b      	adds	r3, r7, #4
 801aee4:	693a      	ldr	r2, [r7, #16]
 801aee6:	f7fb f8ed 	bl	80160c4 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 801aeea:	2102      	movs	r1, #2
 801aeec:	4806      	ldr	r0, [pc, #24]	@ (801af08 <mg_log+0x3c>)
 801aeee:	f7ff ff81 	bl	801adf4 <logs>
}
 801aef2:	bf00      	nop
 801aef4:	3708      	adds	r7, #8
 801aef6:	46bd      	mov	sp, r7
 801aef8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801aefc:	b004      	add	sp, #16
 801aefe:	4770      	bx	lr
 801af00:	2000029c 	.word	0x2000029c
 801af04:	20018150 	.word	0x20018150
 801af08:	080312a0 	.word	0x080312a0

0801af0c <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 801af0c:	b480      	push	{r7}
 801af0e:	b083      	sub	sp, #12
 801af10:	af00      	add	r7, sp, #0
 801af12:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	2b09      	cmp	r3, #9
 801af18:	d804      	bhi.n	801af24 <nibble+0x18>
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	b2db      	uxtb	r3, r3
 801af1e:	3330      	adds	r3, #48	@ 0x30
 801af20:	b2db      	uxtb	r3, r3
 801af22:	e003      	b.n	801af2c <nibble+0x20>
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	b2db      	uxtb	r3, r3
 801af28:	3357      	adds	r3, #87	@ 0x57
 801af2a:	b2db      	uxtb	r3, r3
}
 801af2c:	4618      	mov	r0, r3
 801af2e:	370c      	adds	r7, #12
 801af30:	46bd      	mov	sp, r7
 801af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af36:	4770      	bx	lr

0801af38 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 801af38:	b580      	push	{r7, lr}
 801af3a:	b08a      	sub	sp, #40	@ 0x28
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
 801af40:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 801af46:	2300      	movs	r3, #0
 801af48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 801af4c:	2300      	movs	r3, #0
 801af4e:	623b      	str	r3, [r7, #32]
 801af50:	e07a      	b.n	801b048 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 801af52:	6a3b      	ldr	r3, [r7, #32]
 801af54:	f003 030f 	and.w	r3, r3, #15
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d13a      	bne.n	801afd2 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 801af5c:	6a3b      	ldr	r3, [r7, #32]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d00f      	beq.n	801af82 <mg_hexdump+0x4a>
 801af62:	2102      	movs	r1, #2
 801af64:	484c      	ldr	r0, [pc, #304]	@ (801b098 <mg_hexdump+0x160>)
 801af66:	f7ff ff45 	bl	801adf4 <logs>
 801af6a:	f107 030c 	add.w	r3, r7, #12
 801af6e:	2110      	movs	r1, #16
 801af70:	4618      	mov	r0, r3
 801af72:	f7ff ff3f 	bl	801adf4 <logs>
 801af76:	200a      	movs	r0, #10
 801af78:	f7ff ff28 	bl	801adcc <logc>
 801af7c:	2300      	movs	r3, #0
 801af7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 801af82:	6a3b      	ldr	r3, [r7, #32]
 801af84:	0b1b      	lsrs	r3, r3, #12
 801af86:	f003 030f 	and.w	r3, r3, #15
 801af8a:	4618      	mov	r0, r3
 801af8c:	f7ff ffbe 	bl	801af0c <nibble>
 801af90:	4603      	mov	r3, r0
 801af92:	4618      	mov	r0, r3
 801af94:	f7ff ff1a 	bl	801adcc <logc>
 801af98:	6a3b      	ldr	r3, [r7, #32]
 801af9a:	0a1b      	lsrs	r3, r3, #8
 801af9c:	f003 030f 	and.w	r3, r3, #15
 801afa0:	4618      	mov	r0, r3
 801afa2:	f7ff ffb3 	bl	801af0c <nibble>
 801afa6:	4603      	mov	r3, r0
 801afa8:	4618      	mov	r0, r3
 801afaa:	f7ff ff0f 	bl	801adcc <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 801afae:	6a3b      	ldr	r3, [r7, #32]
 801afb0:	091b      	lsrs	r3, r3, #4
 801afb2:	f003 030f 	and.w	r3, r3, #15
 801afb6:	4618      	mov	r0, r3
 801afb8:	f7ff ffa8 	bl	801af0c <nibble>
 801afbc:	4603      	mov	r3, r0
 801afbe:	4618      	mov	r0, r3
 801afc0:	f7ff ff04 	bl	801adcc <logc>
 801afc4:	2030      	movs	r0, #48	@ 0x30
 801afc6:	f7ff ff01 	bl	801adcc <logc>
 801afca:	2103      	movs	r1, #3
 801afcc:	4833      	ldr	r0, [pc, #204]	@ (801b09c <mg_hexdump+0x164>)
 801afce:	f7ff ff11 	bl	801adf4 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 801afd2:	69fa      	ldr	r2, [r7, #28]
 801afd4:	6a3b      	ldr	r3, [r7, #32]
 801afd6:	4413      	add	r3, r2
 801afd8:	781b      	ldrb	r3, [r3, #0]
 801afda:	091b      	lsrs	r3, r3, #4
 801afdc:	b2db      	uxtb	r3, r3
 801afde:	4618      	mov	r0, r3
 801afe0:	f7ff ff94 	bl	801af0c <nibble>
 801afe4:	4603      	mov	r3, r0
 801afe6:	4618      	mov	r0, r3
 801afe8:	f7ff fef0 	bl	801adcc <logc>
 801afec:	69fa      	ldr	r2, [r7, #28]
 801afee:	6a3b      	ldr	r3, [r7, #32]
 801aff0:	4413      	add	r3, r2
 801aff2:	781b      	ldrb	r3, [r3, #0]
 801aff4:	f003 030f 	and.w	r3, r3, #15
 801aff8:	4618      	mov	r0, r3
 801affa:	f7ff ff87 	bl	801af0c <nibble>
 801affe:	4603      	mov	r3, r0
 801b000:	4618      	mov	r0, r3
 801b002:	f7ff fee3 	bl	801adcc <logc>
    logc(' ');                                         // Space after hex number
 801b006:	2020      	movs	r0, #32
 801b008:	f7ff fee0 	bl	801adcc <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 801b00c:	69fa      	ldr	r2, [r7, #28]
 801b00e:	6a3b      	ldr	r3, [r7, #32]
 801b010:	4413      	add	r3, r2
 801b012:	781b      	ldrb	r3, [r3, #0]
 801b014:	2b1f      	cmp	r3, #31
 801b016:	d90a      	bls.n	801b02e <mg_hexdump+0xf6>
 801b018:	69fa      	ldr	r2, [r7, #28]
 801b01a:	6a3b      	ldr	r3, [r7, #32]
 801b01c:	4413      	add	r3, r2
 801b01e:	781b      	ldrb	r3, [r3, #0]
 801b020:	2b7e      	cmp	r3, #126	@ 0x7e
 801b022:	d804      	bhi.n	801b02e <mg_hexdump+0xf6>
 801b024:	69fa      	ldr	r2, [r7, #28]
 801b026:	6a3b      	ldr	r3, [r7, #32]
 801b028:	4413      	add	r3, r2
 801b02a:	781a      	ldrb	r2, [r3, #0]
 801b02c:	e000      	b.n	801b030 <mg_hexdump+0xf8>
 801b02e:	222e      	movs	r2, #46	@ 0x2e
 801b030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b034:	1c59      	adds	r1, r3, #1
 801b036:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 801b03a:	3328      	adds	r3, #40	@ 0x28
 801b03c:	443b      	add	r3, r7
 801b03e:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 801b042:	6a3b      	ldr	r3, [r7, #32]
 801b044:	3301      	adds	r3, #1
 801b046:	623b      	str	r3, [r7, #32]
 801b048:	6a3a      	ldr	r2, [r7, #32]
 801b04a:	683b      	ldr	r3, [r7, #0]
 801b04c:	429a      	cmp	r2, r3
 801b04e:	d380      	bcc.n	801af52 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 801b050:	e00d      	b.n	801b06e <mg_hexdump+0x136>
 801b052:	2103      	movs	r1, #3
 801b054:	4811      	ldr	r0, [pc, #68]	@ (801b09c <mg_hexdump+0x164>)
 801b056:	f7ff fecd 	bl	801adf4 <logs>
 801b05a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b05e:	1c5a      	adds	r2, r3, #1
 801b060:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 801b064:	3328      	adds	r3, #40	@ 0x28
 801b066:	443b      	add	r3, r7
 801b068:	2220      	movs	r2, #32
 801b06a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 801b06e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b072:	2b0f      	cmp	r3, #15
 801b074:	d9ed      	bls.n	801b052 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 801b076:	2102      	movs	r1, #2
 801b078:	4807      	ldr	r0, [pc, #28]	@ (801b098 <mg_hexdump+0x160>)
 801b07a:	f7ff febb 	bl	801adf4 <logs>
 801b07e:	f107 030c 	add.w	r3, r7, #12
 801b082:	2110      	movs	r1, #16
 801b084:	4618      	mov	r0, r3
 801b086:	f7ff feb5 	bl	801adf4 <logs>
 801b08a:	200a      	movs	r0, #10
 801b08c:	f7ff fe9e 	bl	801adcc <logc>
}
 801b090:	bf00      	nop
 801b092:	3728      	adds	r7, #40	@ 0x28
 801b094:	46bd      	mov	sp, r7
 801b096:	bd80      	pop	{r7, pc}
 801b098:	0803253c 	.word	0x0803253c
 801b09c:	08032540 	.word	0x08032540

0801b0a0 <mg_byte_reverse>:
//  needed on buffers full of bytes, and then call MD5Final, which
//  will fill a supplied 16-byte array with the digest.

#if defined(MG_ENABLE_MD5) && MG_ENABLE_MD5

static void mg_byte_reverse(unsigned char *buf, unsigned longs) {
 801b0a0:	b480      	push	{r7}
 801b0a2:	b085      	sub	sp, #20
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	6078      	str	r0, [r7, #4]
 801b0a8:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 801b0aa:	4b14      	ldr	r3, [pc, #80]	@ (801b0fc <mg_byte_reverse+0x5c>)
 801b0ac:	881b      	ldrh	r3, [r3, #0]
 801b0ae:	2bff      	cmp	r3, #255	@ 0xff
 801b0b0:	d81d      	bhi.n	801b0ee <mg_byte_reverse+0x4e>
    do {
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	3303      	adds	r3, #3
 801b0b6:	781b      	ldrb	r3, [r3, #0]
 801b0b8:	021b      	lsls	r3, r3, #8
 801b0ba:	687a      	ldr	r2, [r7, #4]
 801b0bc:	3202      	adds	r2, #2
 801b0be:	7812      	ldrb	r2, [r2, #0]
 801b0c0:	4313      	orrs	r3, r2
 801b0c2:	041a      	lsls	r2, r3, #16
                   ((unsigned) buf[1] << 8 | buf[0]);
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	3301      	adds	r3, #1
 801b0c8:	781b      	ldrb	r3, [r3, #0]
 801b0ca:	021b      	lsls	r3, r3, #8
 801b0cc:	6879      	ldr	r1, [r7, #4]
 801b0ce:	7809      	ldrb	r1, [r1, #0]
 801b0d0:	430b      	orrs	r3, r1
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 801b0d2:	4313      	orrs	r3, r2
 801b0d4:	60fb      	str	r3, [r7, #12]
      *(uint32_t *) buf = t;
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	68fa      	ldr	r2, [r7, #12]
 801b0da:	601a      	str	r2, [r3, #0]
      buf += 4;
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	3304      	adds	r3, #4
 801b0e0:	607b      	str	r3, [r7, #4]
    } while (--longs);
 801b0e2:	683b      	ldr	r3, [r7, #0]
 801b0e4:	3b01      	subs	r3, #1
 801b0e6:	603b      	str	r3, [r7, #0]
 801b0e8:	683b      	ldr	r3, [r7, #0]
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d1e1      	bne.n	801b0b2 <mg_byte_reverse+0x12>
  } else {
    (void) buf, (void) longs;  // Little endian. Do nothing
  }
}
 801b0ee:	bf00      	nop
 801b0f0:	3714      	adds	r7, #20
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0f8:	4770      	bx	lr
 801b0fa:	bf00      	nop
 801b0fc:	08032544 	.word	0x08032544

0801b100 <mg_md5_init>:

/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */
void mg_md5_init(mg_md5_ctx *ctx) {
 801b100:	b480      	push	{r7}
 801b102:	b083      	sub	sp, #12
 801b104:	af00      	add	r7, sp, #0
 801b106:	6078      	str	r0, [r7, #4]
  ctx->buf[0] = 0x67452301;
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	4a0b      	ldr	r2, [pc, #44]	@ (801b138 <mg_md5_init+0x38>)
 801b10c:	601a      	str	r2, [r3, #0]
  ctx->buf[1] = 0xefcdab89;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	4a0a      	ldr	r2, [pc, #40]	@ (801b13c <mg_md5_init+0x3c>)
 801b112:	605a      	str	r2, [r3, #4]
  ctx->buf[2] = 0x98badcfe;
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	4a0a      	ldr	r2, [pc, #40]	@ (801b140 <mg_md5_init+0x40>)
 801b118:	609a      	str	r2, [r3, #8]
  ctx->buf[3] = 0x10325476;
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	4a09      	ldr	r2, [pc, #36]	@ (801b144 <mg_md5_init+0x44>)
 801b11e:	60da      	str	r2, [r3, #12]

  ctx->bits[0] = 0;
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	2200      	movs	r2, #0
 801b124:	611a      	str	r2, [r3, #16]
  ctx->bits[1] = 0;
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	2200      	movs	r2, #0
 801b12a:	615a      	str	r2, [r3, #20]
}
 801b12c:	bf00      	nop
 801b12e:	370c      	adds	r7, #12
 801b130:	46bd      	mov	sp, r7
 801b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b136:	4770      	bx	lr
 801b138:	67452301 	.word	0x67452301
 801b13c:	efcdab89 	.word	0xefcdab89
 801b140:	98badcfe 	.word	0x98badcfe
 801b144:	10325476 	.word	0x10325476

0801b148 <mg_md5_transform>:

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 801b148:	b480      	push	{r7}
 801b14a:	b087      	sub	sp, #28
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	6078      	str	r0, [r7, #4]
 801b150:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d;

  a = buf[0];
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	617b      	str	r3, [r7, #20]
  b = buf[1];
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	685b      	ldr	r3, [r3, #4]
 801b15c:	613b      	str	r3, [r7, #16]
  c = buf[2];
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	689b      	ldr	r3, [r3, #8]
 801b162:	60fb      	str	r3, [r7, #12]
  d = buf[3];
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	68db      	ldr	r3, [r3, #12]
 801b168:	60bb      	str	r3, [r7, #8]

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 801b16a:	68fa      	ldr	r2, [r7, #12]
 801b16c:	68bb      	ldr	r3, [r7, #8]
 801b16e:	405a      	eors	r2, r3
 801b170:	693b      	ldr	r3, [r7, #16]
 801b172:	401a      	ands	r2, r3
 801b174:	68bb      	ldr	r3, [r7, #8]
 801b176:	405a      	eors	r2, r3
 801b178:	683b      	ldr	r3, [r7, #0]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	441a      	add	r2, r3
 801b17e:	697b      	ldr	r3, [r7, #20]
 801b180:	441a      	add	r2, r3
 801b182:	4ba1      	ldr	r3, [pc, #644]	@ (801b408 <mg_md5_transform+0x2c0>)
 801b184:	4413      	add	r3, r2
 801b186:	617b      	str	r3, [r7, #20]
 801b188:	697b      	ldr	r3, [r7, #20]
 801b18a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b18e:	617b      	str	r3, [r7, #20]
 801b190:	697a      	ldr	r2, [r7, #20]
 801b192:	693b      	ldr	r3, [r7, #16]
 801b194:	4413      	add	r3, r2
 801b196:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 801b198:	693a      	ldr	r2, [r7, #16]
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	405a      	eors	r2, r3
 801b19e:	697b      	ldr	r3, [r7, #20]
 801b1a0:	401a      	ands	r2, r3
 801b1a2:	68fb      	ldr	r3, [r7, #12]
 801b1a4:	405a      	eors	r2, r3
 801b1a6:	683b      	ldr	r3, [r7, #0]
 801b1a8:	3304      	adds	r3, #4
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	441a      	add	r2, r3
 801b1ae:	68bb      	ldr	r3, [r7, #8]
 801b1b0:	441a      	add	r2, r3
 801b1b2:	4b96      	ldr	r3, [pc, #600]	@ (801b40c <mg_md5_transform+0x2c4>)
 801b1b4:	4413      	add	r3, r2
 801b1b6:	60bb      	str	r3, [r7, #8]
 801b1b8:	68bb      	ldr	r3, [r7, #8]
 801b1ba:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b1be:	60bb      	str	r3, [r7, #8]
 801b1c0:	68ba      	ldr	r2, [r7, #8]
 801b1c2:	697b      	ldr	r3, [r7, #20]
 801b1c4:	4413      	add	r3, r2
 801b1c6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 801b1c8:	697a      	ldr	r2, [r7, #20]
 801b1ca:	693b      	ldr	r3, [r7, #16]
 801b1cc:	405a      	eors	r2, r3
 801b1ce:	68bb      	ldr	r3, [r7, #8]
 801b1d0:	401a      	ands	r2, r3
 801b1d2:	693b      	ldr	r3, [r7, #16]
 801b1d4:	405a      	eors	r2, r3
 801b1d6:	683b      	ldr	r3, [r7, #0]
 801b1d8:	3308      	adds	r3, #8
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	441a      	add	r2, r3
 801b1de:	68fb      	ldr	r3, [r7, #12]
 801b1e0:	441a      	add	r2, r3
 801b1e2:	4b8b      	ldr	r3, [pc, #556]	@ (801b410 <mg_md5_transform+0x2c8>)
 801b1e4:	4413      	add	r3, r2
 801b1e6:	60fb      	str	r3, [r7, #12]
 801b1e8:	68fb      	ldr	r3, [r7, #12]
 801b1ea:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b1ee:	60fb      	str	r3, [r7, #12]
 801b1f0:	68fa      	ldr	r2, [r7, #12]
 801b1f2:	68bb      	ldr	r3, [r7, #8]
 801b1f4:	4413      	add	r3, r2
 801b1f6:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 801b1f8:	68ba      	ldr	r2, [r7, #8]
 801b1fa:	697b      	ldr	r3, [r7, #20]
 801b1fc:	405a      	eors	r2, r3
 801b1fe:	68fb      	ldr	r3, [r7, #12]
 801b200:	401a      	ands	r2, r3
 801b202:	697b      	ldr	r3, [r7, #20]
 801b204:	405a      	eors	r2, r3
 801b206:	683b      	ldr	r3, [r7, #0]
 801b208:	330c      	adds	r3, #12
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	441a      	add	r2, r3
 801b20e:	693b      	ldr	r3, [r7, #16]
 801b210:	441a      	add	r2, r3
 801b212:	4b80      	ldr	r3, [pc, #512]	@ (801b414 <mg_md5_transform+0x2cc>)
 801b214:	4413      	add	r3, r2
 801b216:	613b      	str	r3, [r7, #16]
 801b218:	693b      	ldr	r3, [r7, #16]
 801b21a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b21e:	613b      	str	r3, [r7, #16]
 801b220:	693a      	ldr	r2, [r7, #16]
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	4413      	add	r3, r2
 801b226:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 801b228:	68fa      	ldr	r2, [r7, #12]
 801b22a:	68bb      	ldr	r3, [r7, #8]
 801b22c:	405a      	eors	r2, r3
 801b22e:	693b      	ldr	r3, [r7, #16]
 801b230:	401a      	ands	r2, r3
 801b232:	68bb      	ldr	r3, [r7, #8]
 801b234:	405a      	eors	r2, r3
 801b236:	683b      	ldr	r3, [r7, #0]
 801b238:	3310      	adds	r3, #16
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	441a      	add	r2, r3
 801b23e:	697b      	ldr	r3, [r7, #20]
 801b240:	441a      	add	r2, r3
 801b242:	4b75      	ldr	r3, [pc, #468]	@ (801b418 <mg_md5_transform+0x2d0>)
 801b244:	4413      	add	r3, r2
 801b246:	617b      	str	r3, [r7, #20]
 801b248:	697b      	ldr	r3, [r7, #20]
 801b24a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b24e:	617b      	str	r3, [r7, #20]
 801b250:	697a      	ldr	r2, [r7, #20]
 801b252:	693b      	ldr	r3, [r7, #16]
 801b254:	4413      	add	r3, r2
 801b256:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 801b258:	693a      	ldr	r2, [r7, #16]
 801b25a:	68fb      	ldr	r3, [r7, #12]
 801b25c:	405a      	eors	r2, r3
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	401a      	ands	r2, r3
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	405a      	eors	r2, r3
 801b266:	683b      	ldr	r3, [r7, #0]
 801b268:	3314      	adds	r3, #20
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	441a      	add	r2, r3
 801b26e:	68bb      	ldr	r3, [r7, #8]
 801b270:	441a      	add	r2, r3
 801b272:	4b6a      	ldr	r3, [pc, #424]	@ (801b41c <mg_md5_transform+0x2d4>)
 801b274:	4413      	add	r3, r2
 801b276:	60bb      	str	r3, [r7, #8]
 801b278:	68bb      	ldr	r3, [r7, #8]
 801b27a:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b27e:	60bb      	str	r3, [r7, #8]
 801b280:	68ba      	ldr	r2, [r7, #8]
 801b282:	697b      	ldr	r3, [r7, #20]
 801b284:	4413      	add	r3, r2
 801b286:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 801b288:	697a      	ldr	r2, [r7, #20]
 801b28a:	693b      	ldr	r3, [r7, #16]
 801b28c:	405a      	eors	r2, r3
 801b28e:	68bb      	ldr	r3, [r7, #8]
 801b290:	401a      	ands	r2, r3
 801b292:	693b      	ldr	r3, [r7, #16]
 801b294:	405a      	eors	r2, r3
 801b296:	683b      	ldr	r3, [r7, #0]
 801b298:	3318      	adds	r3, #24
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	441a      	add	r2, r3
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	441a      	add	r2, r3
 801b2a2:	4b5f      	ldr	r3, [pc, #380]	@ (801b420 <mg_md5_transform+0x2d8>)
 801b2a4:	4413      	add	r3, r2
 801b2a6:	60fb      	str	r3, [r7, #12]
 801b2a8:	68fb      	ldr	r3, [r7, #12]
 801b2aa:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b2ae:	60fb      	str	r3, [r7, #12]
 801b2b0:	68fa      	ldr	r2, [r7, #12]
 801b2b2:	68bb      	ldr	r3, [r7, #8]
 801b2b4:	4413      	add	r3, r2
 801b2b6:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 801b2b8:	68ba      	ldr	r2, [r7, #8]
 801b2ba:	697b      	ldr	r3, [r7, #20]
 801b2bc:	405a      	eors	r2, r3
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	401a      	ands	r2, r3
 801b2c2:	697b      	ldr	r3, [r7, #20]
 801b2c4:	405a      	eors	r2, r3
 801b2c6:	683b      	ldr	r3, [r7, #0]
 801b2c8:	331c      	adds	r3, #28
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	441a      	add	r2, r3
 801b2ce:	693b      	ldr	r3, [r7, #16]
 801b2d0:	441a      	add	r2, r3
 801b2d2:	4b54      	ldr	r3, [pc, #336]	@ (801b424 <mg_md5_transform+0x2dc>)
 801b2d4:	4413      	add	r3, r2
 801b2d6:	613b      	str	r3, [r7, #16]
 801b2d8:	693b      	ldr	r3, [r7, #16]
 801b2da:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b2de:	613b      	str	r3, [r7, #16]
 801b2e0:	693a      	ldr	r2, [r7, #16]
 801b2e2:	68fb      	ldr	r3, [r7, #12]
 801b2e4:	4413      	add	r3, r2
 801b2e6:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 801b2e8:	68fa      	ldr	r2, [r7, #12]
 801b2ea:	68bb      	ldr	r3, [r7, #8]
 801b2ec:	405a      	eors	r2, r3
 801b2ee:	693b      	ldr	r3, [r7, #16]
 801b2f0:	401a      	ands	r2, r3
 801b2f2:	68bb      	ldr	r3, [r7, #8]
 801b2f4:	405a      	eors	r2, r3
 801b2f6:	683b      	ldr	r3, [r7, #0]
 801b2f8:	3320      	adds	r3, #32
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	441a      	add	r2, r3
 801b2fe:	697b      	ldr	r3, [r7, #20]
 801b300:	441a      	add	r2, r3
 801b302:	4b49      	ldr	r3, [pc, #292]	@ (801b428 <mg_md5_transform+0x2e0>)
 801b304:	4413      	add	r3, r2
 801b306:	617b      	str	r3, [r7, #20]
 801b308:	697b      	ldr	r3, [r7, #20]
 801b30a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b30e:	617b      	str	r3, [r7, #20]
 801b310:	697a      	ldr	r2, [r7, #20]
 801b312:	693b      	ldr	r3, [r7, #16]
 801b314:	4413      	add	r3, r2
 801b316:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 801b318:	693a      	ldr	r2, [r7, #16]
 801b31a:	68fb      	ldr	r3, [r7, #12]
 801b31c:	405a      	eors	r2, r3
 801b31e:	697b      	ldr	r3, [r7, #20]
 801b320:	401a      	ands	r2, r3
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	405a      	eors	r2, r3
 801b326:	683b      	ldr	r3, [r7, #0]
 801b328:	3324      	adds	r3, #36	@ 0x24
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	441a      	add	r2, r3
 801b32e:	68bb      	ldr	r3, [r7, #8]
 801b330:	441a      	add	r2, r3
 801b332:	4b3e      	ldr	r3, [pc, #248]	@ (801b42c <mg_md5_transform+0x2e4>)
 801b334:	4413      	add	r3, r2
 801b336:	60bb      	str	r3, [r7, #8]
 801b338:	68bb      	ldr	r3, [r7, #8]
 801b33a:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b33e:	60bb      	str	r3, [r7, #8]
 801b340:	68ba      	ldr	r2, [r7, #8]
 801b342:	697b      	ldr	r3, [r7, #20]
 801b344:	4413      	add	r3, r2
 801b346:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 801b348:	697a      	ldr	r2, [r7, #20]
 801b34a:	693b      	ldr	r3, [r7, #16]
 801b34c:	405a      	eors	r2, r3
 801b34e:	68bb      	ldr	r3, [r7, #8]
 801b350:	401a      	ands	r2, r3
 801b352:	693b      	ldr	r3, [r7, #16]
 801b354:	405a      	eors	r2, r3
 801b356:	683b      	ldr	r3, [r7, #0]
 801b358:	3328      	adds	r3, #40	@ 0x28
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	441a      	add	r2, r3
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	4413      	add	r3, r2
 801b362:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 801b366:	3b4f      	subs	r3, #79	@ 0x4f
 801b368:	60fb      	str	r3, [r7, #12]
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b370:	60fb      	str	r3, [r7, #12]
 801b372:	68fa      	ldr	r2, [r7, #12]
 801b374:	68bb      	ldr	r3, [r7, #8]
 801b376:	4413      	add	r3, r2
 801b378:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 801b37a:	68ba      	ldr	r2, [r7, #8]
 801b37c:	697b      	ldr	r3, [r7, #20]
 801b37e:	405a      	eors	r2, r3
 801b380:	68fb      	ldr	r3, [r7, #12]
 801b382:	401a      	ands	r2, r3
 801b384:	697b      	ldr	r3, [r7, #20]
 801b386:	405a      	eors	r2, r3
 801b388:	683b      	ldr	r3, [r7, #0]
 801b38a:	332c      	adds	r3, #44	@ 0x2c
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	441a      	add	r2, r3
 801b390:	693b      	ldr	r3, [r7, #16]
 801b392:	441a      	add	r2, r3
 801b394:	4b26      	ldr	r3, [pc, #152]	@ (801b430 <mg_md5_transform+0x2e8>)
 801b396:	4413      	add	r3, r2
 801b398:	613b      	str	r3, [r7, #16]
 801b39a:	693b      	ldr	r3, [r7, #16]
 801b39c:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b3a0:	613b      	str	r3, [r7, #16]
 801b3a2:	693a      	ldr	r2, [r7, #16]
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	4413      	add	r3, r2
 801b3a8:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 801b3aa:	68fa      	ldr	r2, [r7, #12]
 801b3ac:	68bb      	ldr	r3, [r7, #8]
 801b3ae:	405a      	eors	r2, r3
 801b3b0:	693b      	ldr	r3, [r7, #16]
 801b3b2:	401a      	ands	r2, r3
 801b3b4:	68bb      	ldr	r3, [r7, #8]
 801b3b6:	405a      	eors	r2, r3
 801b3b8:	683b      	ldr	r3, [r7, #0]
 801b3ba:	3330      	adds	r3, #48	@ 0x30
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	441a      	add	r2, r3
 801b3c0:	697b      	ldr	r3, [r7, #20]
 801b3c2:	441a      	add	r2, r3
 801b3c4:	4b1b      	ldr	r3, [pc, #108]	@ (801b434 <mg_md5_transform+0x2ec>)
 801b3c6:	4413      	add	r3, r2
 801b3c8:	617b      	str	r3, [r7, #20]
 801b3ca:	697b      	ldr	r3, [r7, #20]
 801b3cc:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b3d0:	617b      	str	r3, [r7, #20]
 801b3d2:	697a      	ldr	r2, [r7, #20]
 801b3d4:	693b      	ldr	r3, [r7, #16]
 801b3d6:	4413      	add	r3, r2
 801b3d8:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 801b3da:	693a      	ldr	r2, [r7, #16]
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	405a      	eors	r2, r3
 801b3e0:	697b      	ldr	r3, [r7, #20]
 801b3e2:	401a      	ands	r2, r3
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	405a      	eors	r2, r3
 801b3e8:	683b      	ldr	r3, [r7, #0]
 801b3ea:	3334      	adds	r3, #52	@ 0x34
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	441a      	add	r2, r3
 801b3f0:	68bb      	ldr	r3, [r7, #8]
 801b3f2:	441a      	add	r2, r3
 801b3f4:	4b10      	ldr	r3, [pc, #64]	@ (801b438 <mg_md5_transform+0x2f0>)
 801b3f6:	4413      	add	r3, r2
 801b3f8:	60bb      	str	r3, [r7, #8]
 801b3fa:	68bb      	ldr	r3, [r7, #8]
 801b3fc:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b400:	60bb      	str	r3, [r7, #8]
 801b402:	68ba      	ldr	r2, [r7, #8]
 801b404:	e01a      	b.n	801b43c <mg_md5_transform+0x2f4>
 801b406:	bf00      	nop
 801b408:	d76aa478 	.word	0xd76aa478
 801b40c:	e8c7b756 	.word	0xe8c7b756
 801b410:	242070db 	.word	0x242070db
 801b414:	c1bdceee 	.word	0xc1bdceee
 801b418:	f57c0faf 	.word	0xf57c0faf
 801b41c:	4787c62a 	.word	0x4787c62a
 801b420:	a8304613 	.word	0xa8304613
 801b424:	fd469501 	.word	0xfd469501
 801b428:	698098d8 	.word	0x698098d8
 801b42c:	8b44f7af 	.word	0x8b44f7af
 801b430:	895cd7be 	.word	0x895cd7be
 801b434:	6b901122 	.word	0x6b901122
 801b438:	fd987193 	.word	0xfd987193
 801b43c:	697b      	ldr	r3, [r7, #20]
 801b43e:	4413      	add	r3, r2
 801b440:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 801b442:	697a      	ldr	r2, [r7, #20]
 801b444:	693b      	ldr	r3, [r7, #16]
 801b446:	405a      	eors	r2, r3
 801b448:	68bb      	ldr	r3, [r7, #8]
 801b44a:	401a      	ands	r2, r3
 801b44c:	693b      	ldr	r3, [r7, #16]
 801b44e:	405a      	eors	r2, r3
 801b450:	683b      	ldr	r3, [r7, #0]
 801b452:	3338      	adds	r3, #56	@ 0x38
 801b454:	681b      	ldr	r3, [r3, #0]
 801b456:	441a      	add	r2, r3
 801b458:	68fb      	ldr	r3, [r7, #12]
 801b45a:	441a      	add	r2, r3
 801b45c:	4ba0      	ldr	r3, [pc, #640]	@ (801b6e0 <mg_md5_transform+0x598>)
 801b45e:	4413      	add	r3, r2
 801b460:	60fb      	str	r3, [r7, #12]
 801b462:	68fb      	ldr	r3, [r7, #12]
 801b464:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b468:	60fb      	str	r3, [r7, #12]
 801b46a:	68fa      	ldr	r2, [r7, #12]
 801b46c:	68bb      	ldr	r3, [r7, #8]
 801b46e:	4413      	add	r3, r2
 801b470:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 801b472:	68ba      	ldr	r2, [r7, #8]
 801b474:	697b      	ldr	r3, [r7, #20]
 801b476:	405a      	eors	r2, r3
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	401a      	ands	r2, r3
 801b47c:	697b      	ldr	r3, [r7, #20]
 801b47e:	405a      	eors	r2, r3
 801b480:	683b      	ldr	r3, [r7, #0]
 801b482:	333c      	adds	r3, #60	@ 0x3c
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	441a      	add	r2, r3
 801b488:	693b      	ldr	r3, [r7, #16]
 801b48a:	441a      	add	r2, r3
 801b48c:	4b95      	ldr	r3, [pc, #596]	@ (801b6e4 <mg_md5_transform+0x59c>)
 801b48e:	4413      	add	r3, r2
 801b490:	613b      	str	r3, [r7, #16]
 801b492:	693b      	ldr	r3, [r7, #16]
 801b494:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b498:	613b      	str	r3, [r7, #16]
 801b49a:	693a      	ldr	r2, [r7, #16]
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	4413      	add	r3, r2
 801b4a0:	613b      	str	r3, [r7, #16]

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 801b4a2:	693a      	ldr	r2, [r7, #16]
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	405a      	eors	r2, r3
 801b4a8:	68bb      	ldr	r3, [r7, #8]
 801b4aa:	401a      	ands	r2, r3
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	405a      	eors	r2, r3
 801b4b0:	683b      	ldr	r3, [r7, #0]
 801b4b2:	3304      	adds	r3, #4
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	441a      	add	r2, r3
 801b4b8:	697b      	ldr	r3, [r7, #20]
 801b4ba:	441a      	add	r2, r3
 801b4bc:	4b8a      	ldr	r3, [pc, #552]	@ (801b6e8 <mg_md5_transform+0x5a0>)
 801b4be:	4413      	add	r3, r2
 801b4c0:	617b      	str	r3, [r7, #20]
 801b4c2:	697b      	ldr	r3, [r7, #20]
 801b4c4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b4c8:	617b      	str	r3, [r7, #20]
 801b4ca:	697a      	ldr	r2, [r7, #20]
 801b4cc:	693b      	ldr	r3, [r7, #16]
 801b4ce:	4413      	add	r3, r2
 801b4d0:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 801b4d2:	697a      	ldr	r2, [r7, #20]
 801b4d4:	693b      	ldr	r3, [r7, #16]
 801b4d6:	405a      	eors	r2, r3
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	401a      	ands	r2, r3
 801b4dc:	693b      	ldr	r3, [r7, #16]
 801b4de:	405a      	eors	r2, r3
 801b4e0:	683b      	ldr	r3, [r7, #0]
 801b4e2:	3318      	adds	r3, #24
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	441a      	add	r2, r3
 801b4e8:	68bb      	ldr	r3, [r7, #8]
 801b4ea:	441a      	add	r2, r3
 801b4ec:	4b7f      	ldr	r3, [pc, #508]	@ (801b6ec <mg_md5_transform+0x5a4>)
 801b4ee:	4413      	add	r3, r2
 801b4f0:	60bb      	str	r3, [r7, #8]
 801b4f2:	68bb      	ldr	r3, [r7, #8]
 801b4f4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b4f8:	60bb      	str	r3, [r7, #8]
 801b4fa:	68ba      	ldr	r2, [r7, #8]
 801b4fc:	697b      	ldr	r3, [r7, #20]
 801b4fe:	4413      	add	r3, r2
 801b500:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 801b502:	68ba      	ldr	r2, [r7, #8]
 801b504:	697b      	ldr	r3, [r7, #20]
 801b506:	405a      	eors	r2, r3
 801b508:	693b      	ldr	r3, [r7, #16]
 801b50a:	401a      	ands	r2, r3
 801b50c:	697b      	ldr	r3, [r7, #20]
 801b50e:	405a      	eors	r2, r3
 801b510:	683b      	ldr	r3, [r7, #0]
 801b512:	332c      	adds	r3, #44	@ 0x2c
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	441a      	add	r2, r3
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	441a      	add	r2, r3
 801b51c:	4b74      	ldr	r3, [pc, #464]	@ (801b6f0 <mg_md5_transform+0x5a8>)
 801b51e:	4413      	add	r3, r2
 801b520:	60fb      	str	r3, [r7, #12]
 801b522:	68fb      	ldr	r3, [r7, #12]
 801b524:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b528:	60fb      	str	r3, [r7, #12]
 801b52a:	68fa      	ldr	r2, [r7, #12]
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	4413      	add	r3, r2
 801b530:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 801b532:	68fa      	ldr	r2, [r7, #12]
 801b534:	68bb      	ldr	r3, [r7, #8]
 801b536:	405a      	eors	r2, r3
 801b538:	697b      	ldr	r3, [r7, #20]
 801b53a:	401a      	ands	r2, r3
 801b53c:	68bb      	ldr	r3, [r7, #8]
 801b53e:	405a      	eors	r2, r3
 801b540:	683b      	ldr	r3, [r7, #0]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	441a      	add	r2, r3
 801b546:	693b      	ldr	r3, [r7, #16]
 801b548:	441a      	add	r2, r3
 801b54a:	4b6a      	ldr	r3, [pc, #424]	@ (801b6f4 <mg_md5_transform+0x5ac>)
 801b54c:	4413      	add	r3, r2
 801b54e:	613b      	str	r3, [r7, #16]
 801b550:	693b      	ldr	r3, [r7, #16]
 801b552:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b556:	613b      	str	r3, [r7, #16]
 801b558:	693a      	ldr	r2, [r7, #16]
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	4413      	add	r3, r2
 801b55e:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 801b560:	693a      	ldr	r2, [r7, #16]
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	405a      	eors	r2, r3
 801b566:	68bb      	ldr	r3, [r7, #8]
 801b568:	401a      	ands	r2, r3
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	405a      	eors	r2, r3
 801b56e:	683b      	ldr	r3, [r7, #0]
 801b570:	3314      	adds	r3, #20
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	441a      	add	r2, r3
 801b576:	697b      	ldr	r3, [r7, #20]
 801b578:	441a      	add	r2, r3
 801b57a:	4b5f      	ldr	r3, [pc, #380]	@ (801b6f8 <mg_md5_transform+0x5b0>)
 801b57c:	4413      	add	r3, r2
 801b57e:	617b      	str	r3, [r7, #20]
 801b580:	697b      	ldr	r3, [r7, #20]
 801b582:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b586:	617b      	str	r3, [r7, #20]
 801b588:	697a      	ldr	r2, [r7, #20]
 801b58a:	693b      	ldr	r3, [r7, #16]
 801b58c:	4413      	add	r3, r2
 801b58e:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 801b590:	697a      	ldr	r2, [r7, #20]
 801b592:	693b      	ldr	r3, [r7, #16]
 801b594:	405a      	eors	r2, r3
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	401a      	ands	r2, r3
 801b59a:	693b      	ldr	r3, [r7, #16]
 801b59c:	405a      	eors	r2, r3
 801b59e:	683b      	ldr	r3, [r7, #0]
 801b5a0:	3328      	adds	r3, #40	@ 0x28
 801b5a2:	681b      	ldr	r3, [r3, #0]
 801b5a4:	441a      	add	r2, r3
 801b5a6:	68bb      	ldr	r3, [r7, #8]
 801b5a8:	441a      	add	r2, r3
 801b5aa:	4b54      	ldr	r3, [pc, #336]	@ (801b6fc <mg_md5_transform+0x5b4>)
 801b5ac:	4413      	add	r3, r2
 801b5ae:	60bb      	str	r3, [r7, #8]
 801b5b0:	68bb      	ldr	r3, [r7, #8]
 801b5b2:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b5b6:	60bb      	str	r3, [r7, #8]
 801b5b8:	68ba      	ldr	r2, [r7, #8]
 801b5ba:	697b      	ldr	r3, [r7, #20]
 801b5bc:	4413      	add	r3, r2
 801b5be:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 801b5c0:	68ba      	ldr	r2, [r7, #8]
 801b5c2:	697b      	ldr	r3, [r7, #20]
 801b5c4:	405a      	eors	r2, r3
 801b5c6:	693b      	ldr	r3, [r7, #16]
 801b5c8:	401a      	ands	r2, r3
 801b5ca:	697b      	ldr	r3, [r7, #20]
 801b5cc:	405a      	eors	r2, r3
 801b5ce:	683b      	ldr	r3, [r7, #0]
 801b5d0:	333c      	adds	r3, #60	@ 0x3c
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	441a      	add	r2, r3
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	441a      	add	r2, r3
 801b5da:	4b49      	ldr	r3, [pc, #292]	@ (801b700 <mg_md5_transform+0x5b8>)
 801b5dc:	4413      	add	r3, r2
 801b5de:	60fb      	str	r3, [r7, #12]
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b5e6:	60fb      	str	r3, [r7, #12]
 801b5e8:	68fa      	ldr	r2, [r7, #12]
 801b5ea:	68bb      	ldr	r3, [r7, #8]
 801b5ec:	4413      	add	r3, r2
 801b5ee:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 801b5f0:	68fa      	ldr	r2, [r7, #12]
 801b5f2:	68bb      	ldr	r3, [r7, #8]
 801b5f4:	405a      	eors	r2, r3
 801b5f6:	697b      	ldr	r3, [r7, #20]
 801b5f8:	401a      	ands	r2, r3
 801b5fa:	68bb      	ldr	r3, [r7, #8]
 801b5fc:	405a      	eors	r2, r3
 801b5fe:	683b      	ldr	r3, [r7, #0]
 801b600:	3310      	adds	r3, #16
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	441a      	add	r2, r3
 801b606:	693b      	ldr	r3, [r7, #16]
 801b608:	441a      	add	r2, r3
 801b60a:	4b3e      	ldr	r3, [pc, #248]	@ (801b704 <mg_md5_transform+0x5bc>)
 801b60c:	4413      	add	r3, r2
 801b60e:	613b      	str	r3, [r7, #16]
 801b610:	693b      	ldr	r3, [r7, #16]
 801b612:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b616:	613b      	str	r3, [r7, #16]
 801b618:	693a      	ldr	r2, [r7, #16]
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	4413      	add	r3, r2
 801b61e:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 801b620:	693a      	ldr	r2, [r7, #16]
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	405a      	eors	r2, r3
 801b626:	68bb      	ldr	r3, [r7, #8]
 801b628:	401a      	ands	r2, r3
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	405a      	eors	r2, r3
 801b62e:	683b      	ldr	r3, [r7, #0]
 801b630:	3324      	adds	r3, #36	@ 0x24
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	441a      	add	r2, r3
 801b636:	697b      	ldr	r3, [r7, #20]
 801b638:	441a      	add	r2, r3
 801b63a:	4b33      	ldr	r3, [pc, #204]	@ (801b708 <mg_md5_transform+0x5c0>)
 801b63c:	4413      	add	r3, r2
 801b63e:	617b      	str	r3, [r7, #20]
 801b640:	697b      	ldr	r3, [r7, #20]
 801b642:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b646:	617b      	str	r3, [r7, #20]
 801b648:	697a      	ldr	r2, [r7, #20]
 801b64a:	693b      	ldr	r3, [r7, #16]
 801b64c:	4413      	add	r3, r2
 801b64e:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 801b650:	697a      	ldr	r2, [r7, #20]
 801b652:	693b      	ldr	r3, [r7, #16]
 801b654:	405a      	eors	r2, r3
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	401a      	ands	r2, r3
 801b65a:	693b      	ldr	r3, [r7, #16]
 801b65c:	405a      	eors	r2, r3
 801b65e:	683b      	ldr	r3, [r7, #0]
 801b660:	3338      	adds	r3, #56	@ 0x38
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	441a      	add	r2, r3
 801b666:	68bb      	ldr	r3, [r7, #8]
 801b668:	441a      	add	r2, r3
 801b66a:	4b28      	ldr	r3, [pc, #160]	@ (801b70c <mg_md5_transform+0x5c4>)
 801b66c:	4413      	add	r3, r2
 801b66e:	60bb      	str	r3, [r7, #8]
 801b670:	68bb      	ldr	r3, [r7, #8]
 801b672:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b676:	60bb      	str	r3, [r7, #8]
 801b678:	68ba      	ldr	r2, [r7, #8]
 801b67a:	697b      	ldr	r3, [r7, #20]
 801b67c:	4413      	add	r3, r2
 801b67e:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 801b680:	68ba      	ldr	r2, [r7, #8]
 801b682:	697b      	ldr	r3, [r7, #20]
 801b684:	405a      	eors	r2, r3
 801b686:	693b      	ldr	r3, [r7, #16]
 801b688:	401a      	ands	r2, r3
 801b68a:	697b      	ldr	r3, [r7, #20]
 801b68c:	405a      	eors	r2, r3
 801b68e:	683b      	ldr	r3, [r7, #0]
 801b690:	330c      	adds	r3, #12
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	441a      	add	r2, r3
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	441a      	add	r2, r3
 801b69a:	4b1d      	ldr	r3, [pc, #116]	@ (801b710 <mg_md5_transform+0x5c8>)
 801b69c:	4413      	add	r3, r2
 801b69e:	60fb      	str	r3, [r7, #12]
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b6a6:	60fb      	str	r3, [r7, #12]
 801b6a8:	68fa      	ldr	r2, [r7, #12]
 801b6aa:	68bb      	ldr	r3, [r7, #8]
 801b6ac:	4413      	add	r3, r2
 801b6ae:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 801b6b0:	68fa      	ldr	r2, [r7, #12]
 801b6b2:	68bb      	ldr	r3, [r7, #8]
 801b6b4:	405a      	eors	r2, r3
 801b6b6:	697b      	ldr	r3, [r7, #20]
 801b6b8:	401a      	ands	r2, r3
 801b6ba:	68bb      	ldr	r3, [r7, #8]
 801b6bc:	405a      	eors	r2, r3
 801b6be:	683b      	ldr	r3, [r7, #0]
 801b6c0:	3320      	adds	r3, #32
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	441a      	add	r2, r3
 801b6c6:	693b      	ldr	r3, [r7, #16]
 801b6c8:	441a      	add	r2, r3
 801b6ca:	4b12      	ldr	r3, [pc, #72]	@ (801b714 <mg_md5_transform+0x5cc>)
 801b6cc:	4413      	add	r3, r2
 801b6ce:	613b      	str	r3, [r7, #16]
 801b6d0:	693b      	ldr	r3, [r7, #16]
 801b6d2:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b6d6:	613b      	str	r3, [r7, #16]
 801b6d8:	693a      	ldr	r2, [r7, #16]
 801b6da:	68fb      	ldr	r3, [r7, #12]
 801b6dc:	e01c      	b.n	801b718 <mg_md5_transform+0x5d0>
 801b6de:	bf00      	nop
 801b6e0:	a679438e 	.word	0xa679438e
 801b6e4:	49b40821 	.word	0x49b40821
 801b6e8:	f61e2562 	.word	0xf61e2562
 801b6ec:	c040b340 	.word	0xc040b340
 801b6f0:	265e5a51 	.word	0x265e5a51
 801b6f4:	e9b6c7aa 	.word	0xe9b6c7aa
 801b6f8:	d62f105d 	.word	0xd62f105d
 801b6fc:	02441453 	.word	0x02441453
 801b700:	d8a1e681 	.word	0xd8a1e681
 801b704:	e7d3fbc8 	.word	0xe7d3fbc8
 801b708:	21e1cde6 	.word	0x21e1cde6
 801b70c:	c33707d6 	.word	0xc33707d6
 801b710:	f4d50d87 	.word	0xf4d50d87
 801b714:	455a14ed 	.word	0x455a14ed
 801b718:	4413      	add	r3, r2
 801b71a:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 801b71c:	693a      	ldr	r2, [r7, #16]
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	405a      	eors	r2, r3
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	401a      	ands	r2, r3
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	405a      	eors	r2, r3
 801b72a:	683b      	ldr	r3, [r7, #0]
 801b72c:	3334      	adds	r3, #52	@ 0x34
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	441a      	add	r2, r3
 801b732:	697b      	ldr	r3, [r7, #20]
 801b734:	441a      	add	r2, r3
 801b736:	4ba1      	ldr	r3, [pc, #644]	@ (801b9bc <mg_md5_transform+0x874>)
 801b738:	4413      	add	r3, r2
 801b73a:	617b      	str	r3, [r7, #20]
 801b73c:	697b      	ldr	r3, [r7, #20]
 801b73e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b742:	617b      	str	r3, [r7, #20]
 801b744:	697a      	ldr	r2, [r7, #20]
 801b746:	693b      	ldr	r3, [r7, #16]
 801b748:	4413      	add	r3, r2
 801b74a:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 801b74c:	697a      	ldr	r2, [r7, #20]
 801b74e:	693b      	ldr	r3, [r7, #16]
 801b750:	405a      	eors	r2, r3
 801b752:	68fb      	ldr	r3, [r7, #12]
 801b754:	401a      	ands	r2, r3
 801b756:	693b      	ldr	r3, [r7, #16]
 801b758:	405a      	eors	r2, r3
 801b75a:	683b      	ldr	r3, [r7, #0]
 801b75c:	3308      	adds	r3, #8
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	441a      	add	r2, r3
 801b762:	68bb      	ldr	r3, [r7, #8]
 801b764:	441a      	add	r2, r3
 801b766:	4b96      	ldr	r3, [pc, #600]	@ (801b9c0 <mg_md5_transform+0x878>)
 801b768:	4413      	add	r3, r2
 801b76a:	60bb      	str	r3, [r7, #8]
 801b76c:	68bb      	ldr	r3, [r7, #8]
 801b76e:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b772:	60bb      	str	r3, [r7, #8]
 801b774:	68ba      	ldr	r2, [r7, #8]
 801b776:	697b      	ldr	r3, [r7, #20]
 801b778:	4413      	add	r3, r2
 801b77a:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 801b77c:	68ba      	ldr	r2, [r7, #8]
 801b77e:	697b      	ldr	r3, [r7, #20]
 801b780:	405a      	eors	r2, r3
 801b782:	693b      	ldr	r3, [r7, #16]
 801b784:	401a      	ands	r2, r3
 801b786:	697b      	ldr	r3, [r7, #20]
 801b788:	405a      	eors	r2, r3
 801b78a:	683b      	ldr	r3, [r7, #0]
 801b78c:	331c      	adds	r3, #28
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	441a      	add	r2, r3
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	441a      	add	r2, r3
 801b796:	4b8b      	ldr	r3, [pc, #556]	@ (801b9c4 <mg_md5_transform+0x87c>)
 801b798:	4413      	add	r3, r2
 801b79a:	60fb      	str	r3, [r7, #12]
 801b79c:	68fb      	ldr	r3, [r7, #12]
 801b79e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b7a2:	60fb      	str	r3, [r7, #12]
 801b7a4:	68fa      	ldr	r2, [r7, #12]
 801b7a6:	68bb      	ldr	r3, [r7, #8]
 801b7a8:	4413      	add	r3, r2
 801b7aa:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 801b7ac:	68fa      	ldr	r2, [r7, #12]
 801b7ae:	68bb      	ldr	r3, [r7, #8]
 801b7b0:	405a      	eors	r2, r3
 801b7b2:	697b      	ldr	r3, [r7, #20]
 801b7b4:	401a      	ands	r2, r3
 801b7b6:	68bb      	ldr	r3, [r7, #8]
 801b7b8:	405a      	eors	r2, r3
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	3330      	adds	r3, #48	@ 0x30
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	441a      	add	r2, r3
 801b7c2:	693b      	ldr	r3, [r7, #16]
 801b7c4:	441a      	add	r2, r3
 801b7c6:	4b80      	ldr	r3, [pc, #512]	@ (801b9c8 <mg_md5_transform+0x880>)
 801b7c8:	4413      	add	r3, r2
 801b7ca:	613b      	str	r3, [r7, #16]
 801b7cc:	693b      	ldr	r3, [r7, #16]
 801b7ce:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b7d2:	613b      	str	r3, [r7, #16]
 801b7d4:	693a      	ldr	r2, [r7, #16]
 801b7d6:	68fb      	ldr	r3, [r7, #12]
 801b7d8:	4413      	add	r3, r2
 801b7da:	613b      	str	r3, [r7, #16]

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 801b7dc:	693a      	ldr	r2, [r7, #16]
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	405a      	eors	r2, r3
 801b7e2:	68bb      	ldr	r3, [r7, #8]
 801b7e4:	405a      	eors	r2, r3
 801b7e6:	683b      	ldr	r3, [r7, #0]
 801b7e8:	3314      	adds	r3, #20
 801b7ea:	681b      	ldr	r3, [r3, #0]
 801b7ec:	441a      	add	r2, r3
 801b7ee:	697b      	ldr	r3, [r7, #20]
 801b7f0:	4413      	add	r3, r2
 801b7f2:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 801b7f6:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 801b7fa:	617b      	str	r3, [r7, #20]
 801b7fc:	697b      	ldr	r3, [r7, #20]
 801b7fe:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b802:	617b      	str	r3, [r7, #20]
 801b804:	697a      	ldr	r2, [r7, #20]
 801b806:	693b      	ldr	r3, [r7, #16]
 801b808:	4413      	add	r3, r2
 801b80a:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 801b80c:	697a      	ldr	r2, [r7, #20]
 801b80e:	693b      	ldr	r3, [r7, #16]
 801b810:	405a      	eors	r2, r3
 801b812:	68fb      	ldr	r3, [r7, #12]
 801b814:	405a      	eors	r2, r3
 801b816:	683b      	ldr	r3, [r7, #0]
 801b818:	3320      	adds	r3, #32
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	441a      	add	r2, r3
 801b81e:	68bb      	ldr	r3, [r7, #8]
 801b820:	441a      	add	r2, r3
 801b822:	4b6a      	ldr	r3, [pc, #424]	@ (801b9cc <mg_md5_transform+0x884>)
 801b824:	4413      	add	r3, r2
 801b826:	60bb      	str	r3, [r7, #8]
 801b828:	68bb      	ldr	r3, [r7, #8]
 801b82a:	ea4f 5373 	mov.w	r3, r3, ror #21
 801b82e:	60bb      	str	r3, [r7, #8]
 801b830:	68ba      	ldr	r2, [r7, #8]
 801b832:	697b      	ldr	r3, [r7, #20]
 801b834:	4413      	add	r3, r2
 801b836:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 801b838:	68ba      	ldr	r2, [r7, #8]
 801b83a:	697b      	ldr	r3, [r7, #20]
 801b83c:	405a      	eors	r2, r3
 801b83e:	693b      	ldr	r3, [r7, #16]
 801b840:	405a      	eors	r2, r3
 801b842:	683b      	ldr	r3, [r7, #0]
 801b844:	332c      	adds	r3, #44	@ 0x2c
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	441a      	add	r2, r3
 801b84a:	68fb      	ldr	r3, [r7, #12]
 801b84c:	441a      	add	r2, r3
 801b84e:	4b60      	ldr	r3, [pc, #384]	@ (801b9d0 <mg_md5_transform+0x888>)
 801b850:	4413      	add	r3, r2
 801b852:	60fb      	str	r3, [r7, #12]
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b85a:	60fb      	str	r3, [r7, #12]
 801b85c:	68fa      	ldr	r2, [r7, #12]
 801b85e:	68bb      	ldr	r3, [r7, #8]
 801b860:	4413      	add	r3, r2
 801b862:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 801b864:	68fa      	ldr	r2, [r7, #12]
 801b866:	68bb      	ldr	r3, [r7, #8]
 801b868:	405a      	eors	r2, r3
 801b86a:	697b      	ldr	r3, [r7, #20]
 801b86c:	405a      	eors	r2, r3
 801b86e:	683b      	ldr	r3, [r7, #0]
 801b870:	3338      	adds	r3, #56	@ 0x38
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	441a      	add	r2, r3
 801b876:	693b      	ldr	r3, [r7, #16]
 801b878:	441a      	add	r2, r3
 801b87a:	4b56      	ldr	r3, [pc, #344]	@ (801b9d4 <mg_md5_transform+0x88c>)
 801b87c:	4413      	add	r3, r2
 801b87e:	613b      	str	r3, [r7, #16]
 801b880:	693b      	ldr	r3, [r7, #16]
 801b882:	ea4f 2373 	mov.w	r3, r3, ror #9
 801b886:	613b      	str	r3, [r7, #16]
 801b888:	693a      	ldr	r2, [r7, #16]
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	4413      	add	r3, r2
 801b88e:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 801b890:	693a      	ldr	r2, [r7, #16]
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	405a      	eors	r2, r3
 801b896:	68bb      	ldr	r3, [r7, #8]
 801b898:	405a      	eors	r2, r3
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	3304      	adds	r3, #4
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	441a      	add	r2, r3
 801b8a2:	697b      	ldr	r3, [r7, #20]
 801b8a4:	441a      	add	r2, r3
 801b8a6:	4b4c      	ldr	r3, [pc, #304]	@ (801b9d8 <mg_md5_transform+0x890>)
 801b8a8:	4413      	add	r3, r2
 801b8aa:	617b      	str	r3, [r7, #20]
 801b8ac:	697b      	ldr	r3, [r7, #20]
 801b8ae:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b8b2:	617b      	str	r3, [r7, #20]
 801b8b4:	697a      	ldr	r2, [r7, #20]
 801b8b6:	693b      	ldr	r3, [r7, #16]
 801b8b8:	4413      	add	r3, r2
 801b8ba:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 801b8bc:	697a      	ldr	r2, [r7, #20]
 801b8be:	693b      	ldr	r3, [r7, #16]
 801b8c0:	405a      	eors	r2, r3
 801b8c2:	68fb      	ldr	r3, [r7, #12]
 801b8c4:	405a      	eors	r2, r3
 801b8c6:	683b      	ldr	r3, [r7, #0]
 801b8c8:	3310      	adds	r3, #16
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	441a      	add	r2, r3
 801b8ce:	68bb      	ldr	r3, [r7, #8]
 801b8d0:	441a      	add	r2, r3
 801b8d2:	4b42      	ldr	r3, [pc, #264]	@ (801b9dc <mg_md5_transform+0x894>)
 801b8d4:	4413      	add	r3, r2
 801b8d6:	60bb      	str	r3, [r7, #8]
 801b8d8:	68bb      	ldr	r3, [r7, #8]
 801b8da:	ea4f 5373 	mov.w	r3, r3, ror #21
 801b8de:	60bb      	str	r3, [r7, #8]
 801b8e0:	68ba      	ldr	r2, [r7, #8]
 801b8e2:	697b      	ldr	r3, [r7, #20]
 801b8e4:	4413      	add	r3, r2
 801b8e6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 801b8e8:	68ba      	ldr	r2, [r7, #8]
 801b8ea:	697b      	ldr	r3, [r7, #20]
 801b8ec:	405a      	eors	r2, r3
 801b8ee:	693b      	ldr	r3, [r7, #16]
 801b8f0:	405a      	eors	r2, r3
 801b8f2:	683b      	ldr	r3, [r7, #0]
 801b8f4:	331c      	adds	r3, #28
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	441a      	add	r2, r3
 801b8fa:	68fb      	ldr	r3, [r7, #12]
 801b8fc:	441a      	add	r2, r3
 801b8fe:	4b38      	ldr	r3, [pc, #224]	@ (801b9e0 <mg_md5_transform+0x898>)
 801b900:	4413      	add	r3, r2
 801b902:	60fb      	str	r3, [r7, #12]
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b90a:	60fb      	str	r3, [r7, #12]
 801b90c:	68fa      	ldr	r2, [r7, #12]
 801b90e:	68bb      	ldr	r3, [r7, #8]
 801b910:	4413      	add	r3, r2
 801b912:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 801b914:	68fa      	ldr	r2, [r7, #12]
 801b916:	68bb      	ldr	r3, [r7, #8]
 801b918:	405a      	eors	r2, r3
 801b91a:	697b      	ldr	r3, [r7, #20]
 801b91c:	405a      	eors	r2, r3
 801b91e:	683b      	ldr	r3, [r7, #0]
 801b920:	3328      	adds	r3, #40	@ 0x28
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	441a      	add	r2, r3
 801b926:	693b      	ldr	r3, [r7, #16]
 801b928:	441a      	add	r2, r3
 801b92a:	4b2e      	ldr	r3, [pc, #184]	@ (801b9e4 <mg_md5_transform+0x89c>)
 801b92c:	4413      	add	r3, r2
 801b92e:	613b      	str	r3, [r7, #16]
 801b930:	693b      	ldr	r3, [r7, #16]
 801b932:	ea4f 2373 	mov.w	r3, r3, ror #9
 801b936:	613b      	str	r3, [r7, #16]
 801b938:	693a      	ldr	r2, [r7, #16]
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	4413      	add	r3, r2
 801b93e:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 801b940:	693a      	ldr	r2, [r7, #16]
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	405a      	eors	r2, r3
 801b946:	68bb      	ldr	r3, [r7, #8]
 801b948:	405a      	eors	r2, r3
 801b94a:	683b      	ldr	r3, [r7, #0]
 801b94c:	3334      	adds	r3, #52	@ 0x34
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	441a      	add	r2, r3
 801b952:	697b      	ldr	r3, [r7, #20]
 801b954:	441a      	add	r2, r3
 801b956:	4b24      	ldr	r3, [pc, #144]	@ (801b9e8 <mg_md5_transform+0x8a0>)
 801b958:	4413      	add	r3, r2
 801b95a:	617b      	str	r3, [r7, #20]
 801b95c:	697b      	ldr	r3, [r7, #20]
 801b95e:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b962:	617b      	str	r3, [r7, #20]
 801b964:	697a      	ldr	r2, [r7, #20]
 801b966:	693b      	ldr	r3, [r7, #16]
 801b968:	4413      	add	r3, r2
 801b96a:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 801b96c:	697a      	ldr	r2, [r7, #20]
 801b96e:	693b      	ldr	r3, [r7, #16]
 801b970:	405a      	eors	r2, r3
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	405a      	eors	r2, r3
 801b976:	683b      	ldr	r3, [r7, #0]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	441a      	add	r2, r3
 801b97c:	68bb      	ldr	r3, [r7, #8]
 801b97e:	441a      	add	r2, r3
 801b980:	4b1a      	ldr	r3, [pc, #104]	@ (801b9ec <mg_md5_transform+0x8a4>)
 801b982:	4413      	add	r3, r2
 801b984:	60bb      	str	r3, [r7, #8]
 801b986:	68bb      	ldr	r3, [r7, #8]
 801b988:	ea4f 5373 	mov.w	r3, r3, ror #21
 801b98c:	60bb      	str	r3, [r7, #8]
 801b98e:	68ba      	ldr	r2, [r7, #8]
 801b990:	697b      	ldr	r3, [r7, #20]
 801b992:	4413      	add	r3, r2
 801b994:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 801b996:	68ba      	ldr	r2, [r7, #8]
 801b998:	697b      	ldr	r3, [r7, #20]
 801b99a:	405a      	eors	r2, r3
 801b99c:	693b      	ldr	r3, [r7, #16]
 801b99e:	405a      	eors	r2, r3
 801b9a0:	683b      	ldr	r3, [r7, #0]
 801b9a2:	330c      	adds	r3, #12
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	441a      	add	r2, r3
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	441a      	add	r2, r3
 801b9ac:	4b10      	ldr	r3, [pc, #64]	@ (801b9f0 <mg_md5_transform+0x8a8>)
 801b9ae:	4413      	add	r3, r2
 801b9b0:	60fb      	str	r3, [r7, #12]
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b9b8:	e01c      	b.n	801b9f4 <mg_md5_transform+0x8ac>
 801b9ba:	bf00      	nop
 801b9bc:	a9e3e905 	.word	0xa9e3e905
 801b9c0:	fcefa3f8 	.word	0xfcefa3f8
 801b9c4:	676f02d9 	.word	0x676f02d9
 801b9c8:	8d2a4c8a 	.word	0x8d2a4c8a
 801b9cc:	8771f681 	.word	0x8771f681
 801b9d0:	6d9d6122 	.word	0x6d9d6122
 801b9d4:	fde5380c 	.word	0xfde5380c
 801b9d8:	a4beea44 	.word	0xa4beea44
 801b9dc:	4bdecfa9 	.word	0x4bdecfa9
 801b9e0:	f6bb4b60 	.word	0xf6bb4b60
 801b9e4:	bebfbc70 	.word	0xbebfbc70
 801b9e8:	289b7ec6 	.word	0x289b7ec6
 801b9ec:	eaa127fa 	.word	0xeaa127fa
 801b9f0:	d4ef3085 	.word	0xd4ef3085
 801b9f4:	60fb      	str	r3, [r7, #12]
 801b9f6:	68fa      	ldr	r2, [r7, #12]
 801b9f8:	68bb      	ldr	r3, [r7, #8]
 801b9fa:	4413      	add	r3, r2
 801b9fc:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 801b9fe:	68fa      	ldr	r2, [r7, #12]
 801ba00:	68bb      	ldr	r3, [r7, #8]
 801ba02:	405a      	eors	r2, r3
 801ba04:	697b      	ldr	r3, [r7, #20]
 801ba06:	405a      	eors	r2, r3
 801ba08:	683b      	ldr	r3, [r7, #0]
 801ba0a:	3318      	adds	r3, #24
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	441a      	add	r2, r3
 801ba10:	693b      	ldr	r3, [r7, #16]
 801ba12:	441a      	add	r2, r3
 801ba14:	4ba1      	ldr	r3, [pc, #644]	@ (801bc9c <mg_md5_transform+0xb54>)
 801ba16:	4413      	add	r3, r2
 801ba18:	613b      	str	r3, [r7, #16]
 801ba1a:	693b      	ldr	r3, [r7, #16]
 801ba1c:	ea4f 2373 	mov.w	r3, r3, ror #9
 801ba20:	613b      	str	r3, [r7, #16]
 801ba22:	693a      	ldr	r2, [r7, #16]
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	4413      	add	r3, r2
 801ba28:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 801ba2a:	693a      	ldr	r2, [r7, #16]
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	405a      	eors	r2, r3
 801ba30:	68bb      	ldr	r3, [r7, #8]
 801ba32:	405a      	eors	r2, r3
 801ba34:	683b      	ldr	r3, [r7, #0]
 801ba36:	3324      	adds	r3, #36	@ 0x24
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	441a      	add	r2, r3
 801ba3c:	697b      	ldr	r3, [r7, #20]
 801ba3e:	441a      	add	r2, r3
 801ba40:	4b97      	ldr	r3, [pc, #604]	@ (801bca0 <mg_md5_transform+0xb58>)
 801ba42:	4413      	add	r3, r2
 801ba44:	617b      	str	r3, [r7, #20]
 801ba46:	697b      	ldr	r3, [r7, #20]
 801ba48:	ea4f 7333 	mov.w	r3, r3, ror #28
 801ba4c:	617b      	str	r3, [r7, #20]
 801ba4e:	697a      	ldr	r2, [r7, #20]
 801ba50:	693b      	ldr	r3, [r7, #16]
 801ba52:	4413      	add	r3, r2
 801ba54:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 801ba56:	697a      	ldr	r2, [r7, #20]
 801ba58:	693b      	ldr	r3, [r7, #16]
 801ba5a:	405a      	eors	r2, r3
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	405a      	eors	r2, r3
 801ba60:	683b      	ldr	r3, [r7, #0]
 801ba62:	3330      	adds	r3, #48	@ 0x30
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	441a      	add	r2, r3
 801ba68:	68bb      	ldr	r3, [r7, #8]
 801ba6a:	441a      	add	r2, r3
 801ba6c:	4b8d      	ldr	r3, [pc, #564]	@ (801bca4 <mg_md5_transform+0xb5c>)
 801ba6e:	4413      	add	r3, r2
 801ba70:	60bb      	str	r3, [r7, #8]
 801ba72:	68bb      	ldr	r3, [r7, #8]
 801ba74:	ea4f 5373 	mov.w	r3, r3, ror #21
 801ba78:	60bb      	str	r3, [r7, #8]
 801ba7a:	68ba      	ldr	r2, [r7, #8]
 801ba7c:	697b      	ldr	r3, [r7, #20]
 801ba7e:	4413      	add	r3, r2
 801ba80:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 801ba82:	68ba      	ldr	r2, [r7, #8]
 801ba84:	697b      	ldr	r3, [r7, #20]
 801ba86:	405a      	eors	r2, r3
 801ba88:	693b      	ldr	r3, [r7, #16]
 801ba8a:	405a      	eors	r2, r3
 801ba8c:	683b      	ldr	r3, [r7, #0]
 801ba8e:	333c      	adds	r3, #60	@ 0x3c
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	441a      	add	r2, r3
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	441a      	add	r2, r3
 801ba98:	4b83      	ldr	r3, [pc, #524]	@ (801bca8 <mg_md5_transform+0xb60>)
 801ba9a:	4413      	add	r3, r2
 801ba9c:	60fb      	str	r3, [r7, #12]
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	ea4f 4333 	mov.w	r3, r3, ror #16
 801baa4:	60fb      	str	r3, [r7, #12]
 801baa6:	68fa      	ldr	r2, [r7, #12]
 801baa8:	68bb      	ldr	r3, [r7, #8]
 801baaa:	4413      	add	r3, r2
 801baac:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 801baae:	68fa      	ldr	r2, [r7, #12]
 801bab0:	68bb      	ldr	r3, [r7, #8]
 801bab2:	405a      	eors	r2, r3
 801bab4:	697b      	ldr	r3, [r7, #20]
 801bab6:	405a      	eors	r2, r3
 801bab8:	683b      	ldr	r3, [r7, #0]
 801baba:	3308      	adds	r3, #8
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	441a      	add	r2, r3
 801bac0:	693b      	ldr	r3, [r7, #16]
 801bac2:	441a      	add	r2, r3
 801bac4:	4b79      	ldr	r3, [pc, #484]	@ (801bcac <mg_md5_transform+0xb64>)
 801bac6:	4413      	add	r3, r2
 801bac8:	613b      	str	r3, [r7, #16]
 801baca:	693b      	ldr	r3, [r7, #16]
 801bacc:	ea4f 2373 	mov.w	r3, r3, ror #9
 801bad0:	613b      	str	r3, [r7, #16]
 801bad2:	693a      	ldr	r2, [r7, #16]
 801bad4:	68fb      	ldr	r3, [r7, #12]
 801bad6:	4413      	add	r3, r2
 801bad8:	613b      	str	r3, [r7, #16]

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 801bada:	68bb      	ldr	r3, [r7, #8]
 801badc:	43da      	mvns	r2, r3
 801bade:	693b      	ldr	r3, [r7, #16]
 801bae0:	431a      	orrs	r2, r3
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	405a      	eors	r2, r3
 801bae6:	683b      	ldr	r3, [r7, #0]
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	441a      	add	r2, r3
 801baec:	697b      	ldr	r3, [r7, #20]
 801baee:	441a      	add	r2, r3
 801baf0:	4b6f      	ldr	r3, [pc, #444]	@ (801bcb0 <mg_md5_transform+0xb68>)
 801baf2:	4413      	add	r3, r2
 801baf4:	617b      	str	r3, [r7, #20]
 801baf6:	697b      	ldr	r3, [r7, #20]
 801baf8:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bafc:	617b      	str	r3, [r7, #20]
 801bafe:	697a      	ldr	r2, [r7, #20]
 801bb00:	693b      	ldr	r3, [r7, #16]
 801bb02:	4413      	add	r3, r2
 801bb04:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	43da      	mvns	r2, r3
 801bb0a:	697b      	ldr	r3, [r7, #20]
 801bb0c:	431a      	orrs	r2, r3
 801bb0e:	693b      	ldr	r3, [r7, #16]
 801bb10:	405a      	eors	r2, r3
 801bb12:	683b      	ldr	r3, [r7, #0]
 801bb14:	331c      	adds	r3, #28
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	441a      	add	r2, r3
 801bb1a:	68bb      	ldr	r3, [r7, #8]
 801bb1c:	441a      	add	r2, r3
 801bb1e:	4b65      	ldr	r3, [pc, #404]	@ (801bcb4 <mg_md5_transform+0xb6c>)
 801bb20:	4413      	add	r3, r2
 801bb22:	60bb      	str	r3, [r7, #8]
 801bb24:	68bb      	ldr	r3, [r7, #8]
 801bb26:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bb2a:	60bb      	str	r3, [r7, #8]
 801bb2c:	68ba      	ldr	r2, [r7, #8]
 801bb2e:	697b      	ldr	r3, [r7, #20]
 801bb30:	4413      	add	r3, r2
 801bb32:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 801bb34:	693b      	ldr	r3, [r7, #16]
 801bb36:	43da      	mvns	r2, r3
 801bb38:	68bb      	ldr	r3, [r7, #8]
 801bb3a:	431a      	orrs	r2, r3
 801bb3c:	697b      	ldr	r3, [r7, #20]
 801bb3e:	405a      	eors	r2, r3
 801bb40:	683b      	ldr	r3, [r7, #0]
 801bb42:	3338      	adds	r3, #56	@ 0x38
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	441a      	add	r2, r3
 801bb48:	68fb      	ldr	r3, [r7, #12]
 801bb4a:	441a      	add	r2, r3
 801bb4c:	4b5a      	ldr	r3, [pc, #360]	@ (801bcb8 <mg_md5_transform+0xb70>)
 801bb4e:	4413      	add	r3, r2
 801bb50:	60fb      	str	r3, [r7, #12]
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bb58:	60fb      	str	r3, [r7, #12]
 801bb5a:	68fa      	ldr	r2, [r7, #12]
 801bb5c:	68bb      	ldr	r3, [r7, #8]
 801bb5e:	4413      	add	r3, r2
 801bb60:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 801bb62:	697b      	ldr	r3, [r7, #20]
 801bb64:	43da      	mvns	r2, r3
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	431a      	orrs	r2, r3
 801bb6a:	68bb      	ldr	r3, [r7, #8]
 801bb6c:	405a      	eors	r2, r3
 801bb6e:	683b      	ldr	r3, [r7, #0]
 801bb70:	3314      	adds	r3, #20
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	441a      	add	r2, r3
 801bb76:	693b      	ldr	r3, [r7, #16]
 801bb78:	441a      	add	r2, r3
 801bb7a:	4b50      	ldr	r3, [pc, #320]	@ (801bcbc <mg_md5_transform+0xb74>)
 801bb7c:	4413      	add	r3, r2
 801bb7e:	613b      	str	r3, [r7, #16]
 801bb80:	693b      	ldr	r3, [r7, #16]
 801bb82:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801bb86:	613b      	str	r3, [r7, #16]
 801bb88:	693a      	ldr	r2, [r7, #16]
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	4413      	add	r3, r2
 801bb8e:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 801bb90:	68bb      	ldr	r3, [r7, #8]
 801bb92:	43da      	mvns	r2, r3
 801bb94:	693b      	ldr	r3, [r7, #16]
 801bb96:	431a      	orrs	r2, r3
 801bb98:	68fb      	ldr	r3, [r7, #12]
 801bb9a:	405a      	eors	r2, r3
 801bb9c:	683b      	ldr	r3, [r7, #0]
 801bb9e:	3330      	adds	r3, #48	@ 0x30
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	441a      	add	r2, r3
 801bba4:	697b      	ldr	r3, [r7, #20]
 801bba6:	441a      	add	r2, r3
 801bba8:	4b45      	ldr	r3, [pc, #276]	@ (801bcc0 <mg_md5_transform+0xb78>)
 801bbaa:	4413      	add	r3, r2
 801bbac:	617b      	str	r3, [r7, #20]
 801bbae:	697b      	ldr	r3, [r7, #20]
 801bbb0:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bbb4:	617b      	str	r3, [r7, #20]
 801bbb6:	697a      	ldr	r2, [r7, #20]
 801bbb8:	693b      	ldr	r3, [r7, #16]
 801bbba:	4413      	add	r3, r2
 801bbbc:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	43da      	mvns	r2, r3
 801bbc2:	697b      	ldr	r3, [r7, #20]
 801bbc4:	431a      	orrs	r2, r3
 801bbc6:	693b      	ldr	r3, [r7, #16]
 801bbc8:	405a      	eors	r2, r3
 801bbca:	683b      	ldr	r3, [r7, #0]
 801bbcc:	330c      	adds	r3, #12
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	441a      	add	r2, r3
 801bbd2:	68bb      	ldr	r3, [r7, #8]
 801bbd4:	441a      	add	r2, r3
 801bbd6:	4b3b      	ldr	r3, [pc, #236]	@ (801bcc4 <mg_md5_transform+0xb7c>)
 801bbd8:	4413      	add	r3, r2
 801bbda:	60bb      	str	r3, [r7, #8]
 801bbdc:	68bb      	ldr	r3, [r7, #8]
 801bbde:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bbe2:	60bb      	str	r3, [r7, #8]
 801bbe4:	68ba      	ldr	r2, [r7, #8]
 801bbe6:	697b      	ldr	r3, [r7, #20]
 801bbe8:	4413      	add	r3, r2
 801bbea:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 801bbec:	693b      	ldr	r3, [r7, #16]
 801bbee:	43da      	mvns	r2, r3
 801bbf0:	68bb      	ldr	r3, [r7, #8]
 801bbf2:	431a      	orrs	r2, r3
 801bbf4:	697b      	ldr	r3, [r7, #20]
 801bbf6:	405a      	eors	r2, r3
 801bbf8:	683b      	ldr	r3, [r7, #0]
 801bbfa:	3328      	adds	r3, #40	@ 0x28
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	441a      	add	r2, r3
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	4413      	add	r3, r2
 801bc04:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801bc08:	f6a3 3383 	subw	r3, r3, #2947	@ 0xb83
 801bc0c:	60fb      	str	r3, [r7, #12]
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bc14:	60fb      	str	r3, [r7, #12]
 801bc16:	68fa      	ldr	r2, [r7, #12]
 801bc18:	68bb      	ldr	r3, [r7, #8]
 801bc1a:	4413      	add	r3, r2
 801bc1c:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 801bc1e:	697b      	ldr	r3, [r7, #20]
 801bc20:	43da      	mvns	r2, r3
 801bc22:	68fb      	ldr	r3, [r7, #12]
 801bc24:	431a      	orrs	r2, r3
 801bc26:	68bb      	ldr	r3, [r7, #8]
 801bc28:	405a      	eors	r2, r3
 801bc2a:	683b      	ldr	r3, [r7, #0]
 801bc2c:	3304      	adds	r3, #4
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	441a      	add	r2, r3
 801bc32:	693b      	ldr	r3, [r7, #16]
 801bc34:	441a      	add	r2, r3
 801bc36:	4b24      	ldr	r3, [pc, #144]	@ (801bcc8 <mg_md5_transform+0xb80>)
 801bc38:	4413      	add	r3, r2
 801bc3a:	613b      	str	r3, [r7, #16]
 801bc3c:	693b      	ldr	r3, [r7, #16]
 801bc3e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801bc42:	613b      	str	r3, [r7, #16]
 801bc44:	693a      	ldr	r2, [r7, #16]
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	4413      	add	r3, r2
 801bc4a:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 801bc4c:	68bb      	ldr	r3, [r7, #8]
 801bc4e:	43da      	mvns	r2, r3
 801bc50:	693b      	ldr	r3, [r7, #16]
 801bc52:	431a      	orrs	r2, r3
 801bc54:	68fb      	ldr	r3, [r7, #12]
 801bc56:	405a      	eors	r2, r3
 801bc58:	683b      	ldr	r3, [r7, #0]
 801bc5a:	3320      	adds	r3, #32
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	441a      	add	r2, r3
 801bc60:	697b      	ldr	r3, [r7, #20]
 801bc62:	441a      	add	r2, r3
 801bc64:	4b19      	ldr	r3, [pc, #100]	@ (801bccc <mg_md5_transform+0xb84>)
 801bc66:	4413      	add	r3, r2
 801bc68:	617b      	str	r3, [r7, #20]
 801bc6a:	697b      	ldr	r3, [r7, #20]
 801bc6c:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bc70:	617b      	str	r3, [r7, #20]
 801bc72:	697a      	ldr	r2, [r7, #20]
 801bc74:	693b      	ldr	r3, [r7, #16]
 801bc76:	4413      	add	r3, r2
 801bc78:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	43da      	mvns	r2, r3
 801bc7e:	697b      	ldr	r3, [r7, #20]
 801bc80:	431a      	orrs	r2, r3
 801bc82:	693b      	ldr	r3, [r7, #16]
 801bc84:	405a      	eors	r2, r3
 801bc86:	683b      	ldr	r3, [r7, #0]
 801bc88:	333c      	adds	r3, #60	@ 0x3c
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	441a      	add	r2, r3
 801bc8e:	68bb      	ldr	r3, [r7, #8]
 801bc90:	441a      	add	r2, r3
 801bc92:	4b0f      	ldr	r3, [pc, #60]	@ (801bcd0 <mg_md5_transform+0xb88>)
 801bc94:	4413      	add	r3, r2
 801bc96:	60bb      	str	r3, [r7, #8]
 801bc98:	68bb      	ldr	r3, [r7, #8]
 801bc9a:	e01b      	b.n	801bcd4 <mg_md5_transform+0xb8c>
 801bc9c:	04881d05 	.word	0x04881d05
 801bca0:	d9d4d039 	.word	0xd9d4d039
 801bca4:	e6db99e5 	.word	0xe6db99e5
 801bca8:	1fa27cf8 	.word	0x1fa27cf8
 801bcac:	c4ac5665 	.word	0xc4ac5665
 801bcb0:	f4292244 	.word	0xf4292244
 801bcb4:	432aff97 	.word	0x432aff97
 801bcb8:	ab9423a7 	.word	0xab9423a7
 801bcbc:	fc93a039 	.word	0xfc93a039
 801bcc0:	655b59c3 	.word	0x655b59c3
 801bcc4:	8f0ccc92 	.word	0x8f0ccc92
 801bcc8:	85845dd1 	.word	0x85845dd1
 801bccc:	6fa87e4f 	.word	0x6fa87e4f
 801bcd0:	fe2ce6e0 	.word	0xfe2ce6e0
 801bcd4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bcd8:	60bb      	str	r3, [r7, #8]
 801bcda:	68ba      	ldr	r2, [r7, #8]
 801bcdc:	697b      	ldr	r3, [r7, #20]
 801bcde:	4413      	add	r3, r2
 801bce0:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 801bce2:	693b      	ldr	r3, [r7, #16]
 801bce4:	43da      	mvns	r2, r3
 801bce6:	68bb      	ldr	r3, [r7, #8]
 801bce8:	431a      	orrs	r2, r3
 801bcea:	697b      	ldr	r3, [r7, #20]
 801bcec:	405a      	eors	r2, r3
 801bcee:	683b      	ldr	r3, [r7, #0]
 801bcf0:	3318      	adds	r3, #24
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	441a      	add	r2, r3
 801bcf6:	68fb      	ldr	r3, [r7, #12]
 801bcf8:	441a      	add	r2, r3
 801bcfa:	4b51      	ldr	r3, [pc, #324]	@ (801be40 <mg_md5_transform+0xcf8>)
 801bcfc:	4413      	add	r3, r2
 801bcfe:	60fb      	str	r3, [r7, #12]
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bd06:	60fb      	str	r3, [r7, #12]
 801bd08:	68fa      	ldr	r2, [r7, #12]
 801bd0a:	68bb      	ldr	r3, [r7, #8]
 801bd0c:	4413      	add	r3, r2
 801bd0e:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 801bd10:	697b      	ldr	r3, [r7, #20]
 801bd12:	43da      	mvns	r2, r3
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	431a      	orrs	r2, r3
 801bd18:	68bb      	ldr	r3, [r7, #8]
 801bd1a:	405a      	eors	r2, r3
 801bd1c:	683b      	ldr	r3, [r7, #0]
 801bd1e:	3334      	adds	r3, #52	@ 0x34
 801bd20:	681b      	ldr	r3, [r3, #0]
 801bd22:	441a      	add	r2, r3
 801bd24:	693b      	ldr	r3, [r7, #16]
 801bd26:	441a      	add	r2, r3
 801bd28:	4b46      	ldr	r3, [pc, #280]	@ (801be44 <mg_md5_transform+0xcfc>)
 801bd2a:	4413      	add	r3, r2
 801bd2c:	613b      	str	r3, [r7, #16]
 801bd2e:	693b      	ldr	r3, [r7, #16]
 801bd30:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801bd34:	613b      	str	r3, [r7, #16]
 801bd36:	693a      	ldr	r2, [r7, #16]
 801bd38:	68fb      	ldr	r3, [r7, #12]
 801bd3a:	4413      	add	r3, r2
 801bd3c:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 801bd3e:	68bb      	ldr	r3, [r7, #8]
 801bd40:	43da      	mvns	r2, r3
 801bd42:	693b      	ldr	r3, [r7, #16]
 801bd44:	431a      	orrs	r2, r3
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	405a      	eors	r2, r3
 801bd4a:	683b      	ldr	r3, [r7, #0]
 801bd4c:	3310      	adds	r3, #16
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	441a      	add	r2, r3
 801bd52:	697b      	ldr	r3, [r7, #20]
 801bd54:	441a      	add	r2, r3
 801bd56:	4b3c      	ldr	r3, [pc, #240]	@ (801be48 <mg_md5_transform+0xd00>)
 801bd58:	4413      	add	r3, r2
 801bd5a:	617b      	str	r3, [r7, #20]
 801bd5c:	697b      	ldr	r3, [r7, #20]
 801bd5e:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bd62:	617b      	str	r3, [r7, #20]
 801bd64:	697a      	ldr	r2, [r7, #20]
 801bd66:	693b      	ldr	r3, [r7, #16]
 801bd68:	4413      	add	r3, r2
 801bd6a:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	43da      	mvns	r2, r3
 801bd70:	697b      	ldr	r3, [r7, #20]
 801bd72:	431a      	orrs	r2, r3
 801bd74:	693b      	ldr	r3, [r7, #16]
 801bd76:	405a      	eors	r2, r3
 801bd78:	683b      	ldr	r3, [r7, #0]
 801bd7a:	332c      	adds	r3, #44	@ 0x2c
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	441a      	add	r2, r3
 801bd80:	68bb      	ldr	r3, [r7, #8]
 801bd82:	441a      	add	r2, r3
 801bd84:	4b31      	ldr	r3, [pc, #196]	@ (801be4c <mg_md5_transform+0xd04>)
 801bd86:	4413      	add	r3, r2
 801bd88:	60bb      	str	r3, [r7, #8]
 801bd8a:	68bb      	ldr	r3, [r7, #8]
 801bd8c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bd90:	60bb      	str	r3, [r7, #8]
 801bd92:	68ba      	ldr	r2, [r7, #8]
 801bd94:	697b      	ldr	r3, [r7, #20]
 801bd96:	4413      	add	r3, r2
 801bd98:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 801bd9a:	693b      	ldr	r3, [r7, #16]
 801bd9c:	43da      	mvns	r2, r3
 801bd9e:	68bb      	ldr	r3, [r7, #8]
 801bda0:	431a      	orrs	r2, r3
 801bda2:	697b      	ldr	r3, [r7, #20]
 801bda4:	405a      	eors	r2, r3
 801bda6:	683b      	ldr	r3, [r7, #0]
 801bda8:	3308      	adds	r3, #8
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	441a      	add	r2, r3
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	441a      	add	r2, r3
 801bdb2:	4b27      	ldr	r3, [pc, #156]	@ (801be50 <mg_md5_transform+0xd08>)
 801bdb4:	4413      	add	r3, r2
 801bdb6:	60fb      	str	r3, [r7, #12]
 801bdb8:	68fb      	ldr	r3, [r7, #12]
 801bdba:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bdbe:	60fb      	str	r3, [r7, #12]
 801bdc0:	68fa      	ldr	r2, [r7, #12]
 801bdc2:	68bb      	ldr	r3, [r7, #8]
 801bdc4:	4413      	add	r3, r2
 801bdc6:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 801bdc8:	697b      	ldr	r3, [r7, #20]
 801bdca:	43da      	mvns	r2, r3
 801bdcc:	68fb      	ldr	r3, [r7, #12]
 801bdce:	431a      	orrs	r2, r3
 801bdd0:	68bb      	ldr	r3, [r7, #8]
 801bdd2:	405a      	eors	r2, r3
 801bdd4:	683b      	ldr	r3, [r7, #0]
 801bdd6:	3324      	adds	r3, #36	@ 0x24
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	441a      	add	r2, r3
 801bddc:	693b      	ldr	r3, [r7, #16]
 801bdde:	441a      	add	r2, r3
 801bde0:	4b1c      	ldr	r3, [pc, #112]	@ (801be54 <mg_md5_transform+0xd0c>)
 801bde2:	4413      	add	r3, r2
 801bde4:	613b      	str	r3, [r7, #16]
 801bde6:	693b      	ldr	r3, [r7, #16]
 801bde8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801bdec:	613b      	str	r3, [r7, #16]
 801bdee:	693a      	ldr	r2, [r7, #16]
 801bdf0:	68fb      	ldr	r3, [r7, #12]
 801bdf2:	4413      	add	r3, r2
 801bdf4:	613b      	str	r3, [r7, #16]

  buf[0] += a;
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	681a      	ldr	r2, [r3, #0]
 801bdfa:	697b      	ldr	r3, [r7, #20]
 801bdfc:	441a      	add	r2, r3
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	601a      	str	r2, [r3, #0]
  buf[1] += b;
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	3304      	adds	r3, #4
 801be06:	6819      	ldr	r1, [r3, #0]
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	3304      	adds	r3, #4
 801be0c:	693a      	ldr	r2, [r7, #16]
 801be0e:	440a      	add	r2, r1
 801be10:	601a      	str	r2, [r3, #0]
  buf[2] += c;
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	3308      	adds	r3, #8
 801be16:	6819      	ldr	r1, [r3, #0]
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	3308      	adds	r3, #8
 801be1c:	68fa      	ldr	r2, [r7, #12]
 801be1e:	440a      	add	r2, r1
 801be20:	601a      	str	r2, [r3, #0]
  buf[3] += d;
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	330c      	adds	r3, #12
 801be26:	6819      	ldr	r1, [r3, #0]
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	330c      	adds	r3, #12
 801be2c:	68ba      	ldr	r2, [r7, #8]
 801be2e:	440a      	add	r2, r1
 801be30:	601a      	str	r2, [r3, #0]
}
 801be32:	bf00      	nop
 801be34:	371c      	adds	r7, #28
 801be36:	46bd      	mov	sp, r7
 801be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be3c:	4770      	bx	lr
 801be3e:	bf00      	nop
 801be40:	a3014314 	.word	0xa3014314
 801be44:	4e0811a1 	.word	0x4e0811a1
 801be48:	f7537e82 	.word	0xf7537e82
 801be4c:	bd3af235 	.word	0xbd3af235
 801be50:	2ad7d2bb 	.word	0x2ad7d2bb
 801be54:	eb86d391 	.word	0xeb86d391

0801be58 <mg_md5_update>:

void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 801be58:	b580      	push	{r7, lr}
 801be5a:	b086      	sub	sp, #24
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	60f8      	str	r0, [r7, #12]
 801be60:	60b9      	str	r1, [r7, #8]
 801be62:	607a      	str	r2, [r7, #4]
  uint32_t t;

  t = ctx->bits[0];
 801be64:	68fb      	ldr	r3, [r7, #12]
 801be66:	691b      	ldr	r3, [r3, #16]
 801be68:	617b      	str	r3, [r7, #20]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	00da      	lsls	r2, r3, #3
 801be6e:	697b      	ldr	r3, [r7, #20]
 801be70:	441a      	add	r2, r3
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	611a      	str	r2, [r3, #16]
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	691b      	ldr	r3, [r3, #16]
 801be7a:	697a      	ldr	r2, [r7, #20]
 801be7c:	429a      	cmp	r2, r3
 801be7e:	d904      	bls.n	801be8a <mg_md5_update+0x32>
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	695b      	ldr	r3, [r3, #20]
 801be84:	1c5a      	adds	r2, r3, #1
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	615a      	str	r2, [r3, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	695a      	ldr	r2, [r3, #20]
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	0f5b      	lsrs	r3, r3, #29
 801be92:	441a      	add	r2, r3
 801be94:	68fb      	ldr	r3, [r7, #12]
 801be96:	615a      	str	r2, [r3, #20]

  t = (t >> 3) & 0x3f;
 801be98:	697b      	ldr	r3, [r7, #20]
 801be9a:	08db      	lsrs	r3, r3, #3
 801be9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bea0:	617b      	str	r3, [r7, #20]

  if (t) {
 801bea2:	697b      	ldr	r3, [r7, #20]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d048      	beq.n	801bf3a <mg_md5_update+0xe2>
    unsigned char *p = (unsigned char *) ctx->in + t;
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	f103 0218 	add.w	r2, r3, #24
 801beae:	697b      	ldr	r3, [r7, #20]
 801beb0:	4413      	add	r3, r2
 801beb2:	613b      	str	r3, [r7, #16]

    t = 64 - t;
 801beb4:	697b      	ldr	r3, [r7, #20]
 801beb6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 801beba:	617b      	str	r3, [r7, #20]
    if (len < t) {
 801bebc:	687a      	ldr	r2, [r7, #4]
 801bebe:	697b      	ldr	r3, [r7, #20]
 801bec0:	429a      	cmp	r2, r3
 801bec2:	d205      	bcs.n	801bed0 <mg_md5_update+0x78>
      memcpy(p, buf, len);
 801bec4:	687a      	ldr	r2, [r7, #4]
 801bec6:	68b9      	ldr	r1, [r7, #8]
 801bec8:	6938      	ldr	r0, [r7, #16]
 801beca:	f00b fa9d 	bl	8027408 <memcpy>
      return;
 801bece:	e03e      	b.n	801bf4e <mg_md5_update+0xf6>
    }
    memcpy(p, buf, t);
 801bed0:	697a      	ldr	r2, [r7, #20]
 801bed2:	68b9      	ldr	r1, [r7, #8]
 801bed4:	6938      	ldr	r0, [r7, #16]
 801bed6:	f00b fa97 	bl	8027408 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	3318      	adds	r3, #24
 801bede:	2110      	movs	r1, #16
 801bee0:	4618      	mov	r0, r3
 801bee2:	f7ff f8dd 	bl	801b0a0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801bee6:	68fa      	ldr	r2, [r7, #12]
 801bee8:	68fb      	ldr	r3, [r7, #12]
 801beea:	3318      	adds	r3, #24
 801beec:	4619      	mov	r1, r3
 801beee:	4610      	mov	r0, r2
 801bef0:	f7ff f92a 	bl	801b148 <mg_md5_transform>
    buf += t;
 801bef4:	68ba      	ldr	r2, [r7, #8]
 801bef6:	697b      	ldr	r3, [r7, #20]
 801bef8:	4413      	add	r3, r2
 801befa:	60bb      	str	r3, [r7, #8]
    len -= t;
 801befc:	687a      	ldr	r2, [r7, #4]
 801befe:	697b      	ldr	r3, [r7, #20]
 801bf00:	1ad3      	subs	r3, r2, r3
 801bf02:	607b      	str	r3, [r7, #4]
  }

  while (len >= 64) {
 801bf04:	e019      	b.n	801bf3a <mg_md5_update+0xe2>
    memcpy(ctx->in, buf, 64);
 801bf06:	68fb      	ldr	r3, [r7, #12]
 801bf08:	3318      	adds	r3, #24
 801bf0a:	2240      	movs	r2, #64	@ 0x40
 801bf0c:	68b9      	ldr	r1, [r7, #8]
 801bf0e:	4618      	mov	r0, r3
 801bf10:	f00b fa7a 	bl	8027408 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	3318      	adds	r3, #24
 801bf18:	2110      	movs	r1, #16
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	f7ff f8c0 	bl	801b0a0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801bf20:	68fa      	ldr	r2, [r7, #12]
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	3318      	adds	r3, #24
 801bf26:	4619      	mov	r1, r3
 801bf28:	4610      	mov	r0, r2
 801bf2a:	f7ff f90d 	bl	801b148 <mg_md5_transform>
    buf += 64;
 801bf2e:	68bb      	ldr	r3, [r7, #8]
 801bf30:	3340      	adds	r3, #64	@ 0x40
 801bf32:	60bb      	str	r3, [r7, #8]
    len -= 64;
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	3b40      	subs	r3, #64	@ 0x40
 801bf38:	607b      	str	r3, [r7, #4]
  while (len >= 64) {
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	2b3f      	cmp	r3, #63	@ 0x3f
 801bf3e:	d8e2      	bhi.n	801bf06 <mg_md5_update+0xae>
  }

  memcpy(ctx->in, buf, len);
 801bf40:	68fb      	ldr	r3, [r7, #12]
 801bf42:	3318      	adds	r3, #24
 801bf44:	687a      	ldr	r2, [r7, #4]
 801bf46:	68b9      	ldr	r1, [r7, #8]
 801bf48:	4618      	mov	r0, r3
 801bf4a:	f00b fa5d 	bl	8027408 <memcpy>
}
 801bf4e:	3718      	adds	r7, #24
 801bf50:	46bd      	mov	sp, r7
 801bf52:	bd80      	pop	{r7, pc}

0801bf54 <mg_md5_final>:

void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 801bf54:	b580      	push	{r7, lr}
 801bf56:	b086      	sub	sp, #24
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	6078      	str	r0, [r7, #4]
 801bf5c:	6039      	str	r1, [r7, #0]
  unsigned count;
  unsigned char *p;
  uint32_t *a;

  count = (ctx->bits[0] >> 3) & 0x3F;
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	691b      	ldr	r3, [r3, #16]
 801bf62:	08db      	lsrs	r3, r3, #3
 801bf64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bf68:	617b      	str	r3, [r7, #20]

  p = ctx->in + count;
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	f103 0218 	add.w	r2, r3, #24
 801bf70:	697b      	ldr	r3, [r7, #20]
 801bf72:	4413      	add	r3, r2
 801bf74:	613b      	str	r3, [r7, #16]
  *p++ = 0x80;
 801bf76:	693b      	ldr	r3, [r7, #16]
 801bf78:	1c5a      	adds	r2, r3, #1
 801bf7a:	613a      	str	r2, [r7, #16]
 801bf7c:	2280      	movs	r2, #128	@ 0x80
 801bf7e:	701a      	strb	r2, [r3, #0]
  count = 64 - 1 - count;
 801bf80:	697b      	ldr	r3, [r7, #20]
 801bf82:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 801bf86:	617b      	str	r3, [r7, #20]
  if (count < 8) {
 801bf88:	697b      	ldr	r3, [r7, #20]
 801bf8a:	2b07      	cmp	r3, #7
 801bf8c:	d819      	bhi.n	801bfc2 <mg_md5_final+0x6e>
    memset(p, 0, count);
 801bf8e:	697a      	ldr	r2, [r7, #20]
 801bf90:	2100      	movs	r1, #0
 801bf92:	6938      	ldr	r0, [r7, #16]
 801bf94:	f009 ffe0 	bl	8025f58 <memset>
    mg_byte_reverse(ctx->in, 16);
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	3318      	adds	r3, #24
 801bf9c:	2110      	movs	r1, #16
 801bf9e:	4618      	mov	r0, r3
 801bfa0:	f7ff f87e 	bl	801b0a0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801bfa4:	687a      	ldr	r2, [r7, #4]
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	3318      	adds	r3, #24
 801bfaa:	4619      	mov	r1, r3
 801bfac:	4610      	mov	r0, r2
 801bfae:	f7ff f8cb 	bl	801b148 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	3318      	adds	r3, #24
 801bfb6:	2238      	movs	r2, #56	@ 0x38
 801bfb8:	2100      	movs	r1, #0
 801bfba:	4618      	mov	r0, r3
 801bfbc:	f009 ffcc 	bl	8025f58 <memset>
 801bfc0:	e006      	b.n	801bfd0 <mg_md5_final+0x7c>
  } else {
    memset(p, 0, count - 8);
 801bfc2:	697b      	ldr	r3, [r7, #20]
 801bfc4:	3b08      	subs	r3, #8
 801bfc6:	461a      	mov	r2, r3
 801bfc8:	2100      	movs	r1, #0
 801bfca:	6938      	ldr	r0, [r7, #16]
 801bfcc:	f009 ffc4 	bl	8025f58 <memset>
  }
  mg_byte_reverse(ctx->in, 14);
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	3318      	adds	r3, #24
 801bfd4:	210e      	movs	r1, #14
 801bfd6:	4618      	mov	r0, r3
 801bfd8:	f7ff f862 	bl	801b0a0 <mg_byte_reverse>

  a = (uint32_t *) ctx->in;
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	3318      	adds	r3, #24
 801bfe0:	60fb      	str	r3, [r7, #12]
  a[14] = ctx->bits[0];
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	3338      	adds	r3, #56	@ 0x38
 801bfe6:	687a      	ldr	r2, [r7, #4]
 801bfe8:	6912      	ldr	r2, [r2, #16]
 801bfea:	601a      	str	r2, [r3, #0]
  a[15] = ctx->bits[1];
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	333c      	adds	r3, #60	@ 0x3c
 801bff0:	687a      	ldr	r2, [r7, #4]
 801bff2:	6952      	ldr	r2, [r2, #20]
 801bff4:	601a      	str	r2, [r3, #0]

  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801bff6:	687a      	ldr	r2, [r7, #4]
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	3318      	adds	r3, #24
 801bffc:	4619      	mov	r1, r3
 801bffe:	4610      	mov	r0, r2
 801c000:	f7ff f8a2 	bl	801b148 <mg_md5_transform>
  mg_byte_reverse((unsigned char *) ctx->buf, 4);
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	2104      	movs	r1, #4
 801c008:	4618      	mov	r0, r3
 801c00a:	f7ff f849 	bl	801b0a0 <mg_byte_reverse>
  memcpy(digest, ctx->buf, 16);
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	2210      	movs	r2, #16
 801c012:	4619      	mov	r1, r3
 801c014:	6838      	ldr	r0, [r7, #0]
 801c016:	f00b f9f7 	bl	8027408 <memcpy>
  memset((char *) ctx, 0, sizeof(*ctx));
 801c01a:	2258      	movs	r2, #88	@ 0x58
 801c01c:	2100      	movs	r1, #0
 801c01e:	6878      	ldr	r0, [r7, #4]
 801c020:	f009 ff9a 	bl	8025f58 <memset>
}
 801c024:	bf00      	nop
 801c026:	3718      	adds	r7, #24
 801c028:	46bd      	mov	sp, r7
 801c02a:	bd80      	pop	{r7, pc}

0801c02c <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 801c02c:	b580      	push	{r7, lr}
 801c02e:	b088      	sub	sp, #32
 801c030:	af00      	add	r7, sp, #0
 801c032:	60f8      	str	r0, [r7, #12]
 801c034:	607b      	str	r3, [r7, #4]
 801c036:	460b      	mov	r3, r1
 801c038:	72fb      	strb	r3, [r7, #11]
 801c03a:	4613      	mov	r3, r2
 801c03c:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 801c03e:	f107 0314 	add.w	r3, r7, #20
 801c042:	3301      	adds	r3, #1
 801c044:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 801c046:	7afb      	ldrb	r3, [r7, #11]
 801c048:	011b      	lsls	r3, r3, #4
 801c04a:	b25a      	sxtb	r2, r3
 801c04c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801c050:	4313      	orrs	r3, r2
 801c052:	b25b      	sxtb	r3, r3
 801c054:	b2db      	uxtb	r3, r3
 801c056:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	b2db      	uxtb	r3, r3
 801c05c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c060:	b2da      	uxtb	r2, r3
 801c062:	69fb      	ldr	r3, [r7, #28]
 801c064:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	09db      	lsrs	r3, r3, #7
 801c06a:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d006      	beq.n	801c080 <mg_mqtt_send_header+0x54>
 801c072:	69fb      	ldr	r3, [r7, #28]
 801c074:	781b      	ldrb	r3, [r3, #0]
 801c076:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c07a:	b2da      	uxtb	r2, r3
 801c07c:	69fb      	ldr	r3, [r7, #28]
 801c07e:	701a      	strb	r2, [r3, #0]
    vlen++;
 801c080:	69fb      	ldr	r3, [r7, #28]
 801c082:	3301      	adds	r3, #1
 801c084:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d005      	beq.n	801c098 <mg_mqtt_send_header+0x6c>
 801c08c:	f107 0314 	add.w	r3, r7, #20
 801c090:	3305      	adds	r3, #5
 801c092:	69fa      	ldr	r2, [r7, #28]
 801c094:	429a      	cmp	r2, r3
 801c096:	d3df      	bcc.n	801c058 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 801c098:	f107 0314 	add.w	r3, r7, #20
 801c09c:	69fa      	ldr	r2, [r7, #28]
 801c09e:	1ad3      	subs	r3, r2, r3
 801c0a0:	461a      	mov	r2, r3
 801c0a2:	f107 0314 	add.w	r3, r7, #20
 801c0a6:	4619      	mov	r1, r3
 801c0a8:	68f8      	ldr	r0, [r7, #12]
 801c0aa:	f004 fded 	bl	8020c88 <mg_send>
}
 801c0ae:	bf00      	nop
 801c0b0:	3720      	adds	r7, #32
 801c0b2:	46bd      	mov	sp, r7
 801c0b4:	bd80      	pop	{r7, pc}

0801c0b6 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 801c0b6:	b580      	push	{r7, lr}
 801c0b8:	b082      	sub	sp, #8
 801c0ba:	af00      	add	r7, sp, #0
 801c0bc:	6078      	str	r0, [r7, #4]
 801c0be:	460b      	mov	r3, r1
 801c0c0:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 801c0c2:	1cbb      	adds	r3, r7, #2
 801c0c4:	2202      	movs	r2, #2
 801c0c6:	4619      	mov	r1, r3
 801c0c8:	6878      	ldr	r0, [r7, #4]
 801c0ca:	f004 fddd 	bl	8020c88 <mg_send>
}
 801c0ce:	bf00      	nop
 801c0d0:	3708      	adds	r7, #8
 801c0d2:	46bd      	mov	sp, r7
 801c0d4:	bd80      	pop	{r7, pc}

0801c0d6 <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 801c0d6:	b580      	push	{r7, lr}
 801c0d8:	b082      	sub	sp, #8
 801c0da:	af00      	add	r7, sp, #0
 801c0dc:	6078      	str	r0, [r7, #4]
 801c0de:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 801c0e0:	463b      	mov	r3, r7
 801c0e2:	2204      	movs	r2, #4
 801c0e4:	4619      	mov	r1, r3
 801c0e6:	6878      	ldr	r0, [r7, #4]
 801c0e8:	f004 fdce 	bl	8020c88 <mg_send>
}
 801c0ec:	bf00      	nop
 801c0ee:	3708      	adds	r7, #8
 801c0f0:	46bd      	mov	sp, r7
 801c0f2:	bd80      	pop	{r7, pc}

0801c0f4 <varint_size>:

static uint8_t varint_size(size_t length) {
 801c0f4:	b480      	push	{r7}
 801c0f6:	b085      	sub	sp, #20
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 801c100:	7bfb      	ldrb	r3, [r7, #15]
 801c102:	3301      	adds	r3, #1
 801c104:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	09db      	lsrs	r3, r3, #7
 801c10a:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d1f6      	bne.n	801c100 <varint_size+0xc>
  return bytes_needed;
 801c112:	7bfb      	ldrb	r3, [r7, #15]
}
 801c114:	4618      	mov	r0, r3
 801c116:	3714      	adds	r7, #20
 801c118:	46bd      	mov	sp, r7
 801c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c11e:	4770      	bx	lr

0801c120 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 801c120:	b480      	push	{r7}
 801c122:	b085      	sub	sp, #20
 801c124:	af00      	add	r7, sp, #0
 801c126:	6078      	str	r0, [r7, #4]
 801c128:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 801c12a:	2300      	movs	r3, #0
 801c12c:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 801c12e:	683b      	ldr	r3, [r7, #0]
 801c130:	b2db      	uxtb	r3, r3
 801c132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c136:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 801c138:	683b      	ldr	r3, [r7, #0]
 801c13a:	09db      	lsrs	r3, r3, #7
 801c13c:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 801c13e:	683b      	ldr	r3, [r7, #0]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d003      	beq.n	801c14c <encode_varint+0x2c>
 801c144:	7afb      	ldrb	r3, [r7, #11]
 801c146:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c14a:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	1c5a      	adds	r2, r3, #1
 801c150:	60fa      	str	r2, [r7, #12]
 801c152:	687a      	ldr	r2, [r7, #4]
 801c154:	4413      	add	r3, r2
 801c156:	7afa      	ldrb	r2, [r7, #11]
 801c158:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 801c15a:	683b      	ldr	r3, [r7, #0]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d1e6      	bne.n	801c12e <encode_varint+0xe>

  return len;
 801c160:	68fb      	ldr	r3, [r7, #12]
}
 801c162:	4618      	mov	r0, r3
 801c164:	3714      	adds	r7, #20
 801c166:	46bd      	mov	sp, r7
 801c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c16c:	4770      	bx	lr

0801c16e <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 801c16e:	b480      	push	{r7}
 801c170:	b089      	sub	sp, #36	@ 0x24
 801c172:	af00      	add	r7, sp, #0
 801c174:	60f8      	str	r0, [r7, #12]
 801c176:	60b9      	str	r1, [r7, #8]
 801c178:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 801c17a:	2301      	movs	r3, #1
 801c17c:	61fb      	str	r3, [r7, #28]
  *value = 0;
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	2200      	movs	r2, #0
 801c182:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 801c184:	2300      	movs	r3, #0
 801c186:	61bb      	str	r3, [r7, #24]
 801c188:	e01c      	b.n	801c1c4 <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 801c18a:	68fa      	ldr	r2, [r7, #12]
 801c18c:	69bb      	ldr	r3, [r7, #24]
 801c18e:	4413      	add	r3, r2
 801c190:	781b      	ldrb	r3, [r3, #0]
 801c192:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	681a      	ldr	r2, [r3, #0]
 801c198:	7dfb      	ldrb	r3, [r7, #23]
 801c19a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c19e:	69f9      	ldr	r1, [r7, #28]
 801c1a0:	fb01 f303 	mul.w	r3, r1, r3
 801c1a4:	441a      	add	r2, r3
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 801c1aa:	69fb      	ldr	r3, [r7, #28]
 801c1ac:	01db      	lsls	r3, r3, #7
 801c1ae:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 801c1b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	db02      	blt.n	801c1be <decode_varint+0x50>
 801c1b8:	69bb      	ldr	r3, [r7, #24]
 801c1ba:	3301      	adds	r3, #1
 801c1bc:	e00a      	b.n	801c1d4 <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 801c1be:	69bb      	ldr	r3, [r7, #24]
 801c1c0:	3301      	adds	r3, #1
 801c1c2:	61bb      	str	r3, [r7, #24]
 801c1c4:	69bb      	ldr	r3, [r7, #24]
 801c1c6:	2b03      	cmp	r3, #3
 801c1c8:	d803      	bhi.n	801c1d2 <decode_varint+0x64>
 801c1ca:	69ba      	ldr	r2, [r7, #24]
 801c1cc:	68bb      	ldr	r3, [r7, #8]
 801c1ce:	429a      	cmp	r2, r3
 801c1d0:	d3db      	bcc.n	801c18a <decode_varint+0x1c>
  }

  return 0;
 801c1d2:	2300      	movs	r3, #0
}
 801c1d4:	4618      	mov	r0, r3
 801c1d6:	3724      	adds	r7, #36	@ 0x24
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1de:	4770      	bx	lr

0801c1e0 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 801c1e0:	b480      	push	{r7}
 801c1e2:	b085      	sub	sp, #20
 801c1e4:	af00      	add	r7, sp, #0
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 801c1ea:	231b      	movs	r3, #27
 801c1ec:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 801c1ee:	2300      	movs	r3, #0
 801c1f0:	60fb      	str	r3, [r7, #12]
 801c1f2:	e00f      	b.n	801c214 <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 801c1f4:	4a0d      	ldr	r2, [pc, #52]	@ (801c22c <mqtt_prop_type_by_id+0x4c>)
 801c1f6:	68fb      	ldr	r3, [r7, #12]
 801c1f8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 801c1fc:	79fa      	ldrb	r2, [r7, #7]
 801c1fe:	429a      	cmp	r2, r3
 801c200:	d105      	bne.n	801c20e <mqtt_prop_type_by_id+0x2e>
 801c202:	4a0a      	ldr	r2, [pc, #40]	@ (801c22c <mqtt_prop_type_by_id+0x4c>)
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	005b      	lsls	r3, r3, #1
 801c208:	4413      	add	r3, r2
 801c20a:	785b      	ldrb	r3, [r3, #1]
 801c20c:	e008      	b.n	801c220 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	3301      	adds	r3, #1
 801c212:	60fb      	str	r3, [r7, #12]
 801c214:	68fa      	ldr	r2, [r7, #12]
 801c216:	68bb      	ldr	r3, [r7, #8]
 801c218:	429a      	cmp	r2, r3
 801c21a:	d3eb      	bcc.n	801c1f4 <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 801c21c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801c220:	4618      	mov	r0, r3
 801c222:	3714      	adds	r7, #20
 801c224:	46bd      	mov	sp, r7
 801c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c22a:	4770      	bx	lr
 801c22c:	08033dac 	.word	0x08033dac

0801c230 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 801c230:	b580      	push	{r7, lr}
 801c232:	b084      	sub	sp, #16
 801c234:	af00      	add	r7, sp, #0
 801c236:	6078      	str	r0, [r7, #4]
 801c238:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 801c23a:	2300      	movs	r3, #0
 801c23c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 801c23e:	2300      	movs	r3, #0
 801c240:	60fb      	str	r3, [r7, #12]
 801c242:	e07a      	b.n	801c33a <get_properties_length+0x10a>
    size++;  // identifier
 801c244:	68bb      	ldr	r3, [r7, #8]
 801c246:	3301      	adds	r3, #1
 801c248:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801c24a:	68fa      	ldr	r2, [r7, #12]
 801c24c:	4613      	mov	r3, r2
 801c24e:	005b      	lsls	r3, r3, #1
 801c250:	4413      	add	r3, r2
 801c252:	00db      	lsls	r3, r3, #3
 801c254:	461a      	mov	r2, r3
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	4413      	add	r3, r2
 801c25a:	781b      	ldrb	r3, [r3, #0]
 801c25c:	4618      	mov	r0, r3
 801c25e:	f7ff ffbf 	bl	801c1e0 <mqtt_prop_type_by_id>
 801c262:	4603      	mov	r3, r0
 801c264:	2b06      	cmp	r3, #6
 801c266:	d863      	bhi.n	801c330 <get_properties_length+0x100>
 801c268:	a201      	add	r2, pc, #4	@ (adr r2, 801c270 <get_properties_length+0x40>)
 801c26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c26e:	bf00      	nop
 801c270:	0801c329 	.word	0x0801c329
 801c274:	0801c2bd 	.word	0x0801c2bd
 801c278:	0801c28d 	.word	0x0801c28d
 801c27c:	0801c2d9 	.word	0x0801c2d9
 801c280:	0801c2f5 	.word	0x0801c2f5
 801c284:	0801c319 	.word	0x0801c319
 801c288:	0801c321 	.word	0x0801c321
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 801c28c:	68fa      	ldr	r2, [r7, #12]
 801c28e:	4613      	mov	r3, r2
 801c290:	005b      	lsls	r3, r3, #1
 801c292:	4413      	add	r3, r2
 801c294:	00db      	lsls	r3, r3, #3
 801c296:	461a      	mov	r2, r3
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	4413      	add	r3, r2
 801c29c:	6959      	ldr	r1, [r3, #20]
 801c29e:	68fa      	ldr	r2, [r7, #12]
 801c2a0:	4613      	mov	r3, r2
 801c2a2:	005b      	lsls	r3, r3, #1
 801c2a4:	4413      	add	r3, r2
 801c2a6:	00db      	lsls	r3, r3, #3
 801c2a8:	461a      	mov	r2, r3
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	4413      	add	r3, r2
 801c2ae:	68db      	ldr	r3, [r3, #12]
 801c2b0:	18ca      	adds	r2, r1, r3
 801c2b2:	68bb      	ldr	r3, [r7, #8]
 801c2b4:	4413      	add	r3, r2
 801c2b6:	3304      	adds	r3, #4
 801c2b8:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 801c2ba:	e03b      	b.n	801c334 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801c2bc:	68fa      	ldr	r2, [r7, #12]
 801c2be:	4613      	mov	r3, r2
 801c2c0:	005b      	lsls	r3, r3, #1
 801c2c2:	4413      	add	r3, r2
 801c2c4:	00db      	lsls	r3, r3, #3
 801c2c6:	461a      	mov	r2, r3
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	4413      	add	r3, r2
 801c2cc:	695a      	ldr	r2, [r3, #20]
 801c2ce:	68bb      	ldr	r3, [r7, #8]
 801c2d0:	4413      	add	r3, r2
 801c2d2:	3302      	adds	r3, #2
 801c2d4:	60bb      	str	r3, [r7, #8]
        break;
 801c2d6:	e02d      	b.n	801c334 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801c2d8:	68fa      	ldr	r2, [r7, #12]
 801c2da:	4613      	mov	r3, r2
 801c2dc:	005b      	lsls	r3, r3, #1
 801c2de:	4413      	add	r3, r2
 801c2e0:	00db      	lsls	r3, r3, #3
 801c2e2:	461a      	mov	r2, r3
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	4413      	add	r3, r2
 801c2e8:	695a      	ldr	r2, [r3, #20]
 801c2ea:	68bb      	ldr	r3, [r7, #8]
 801c2ec:	4413      	add	r3, r2
 801c2ee:	3302      	adds	r3, #2
 801c2f0:	60bb      	str	r3, [r7, #8]
        break;
 801c2f2:	e01f      	b.n	801c334 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 801c2f4:	68fa      	ldr	r2, [r7, #12]
 801c2f6:	4613      	mov	r3, r2
 801c2f8:	005b      	lsls	r3, r3, #1
 801c2fa:	4413      	add	r3, r2
 801c2fc:	00db      	lsls	r3, r3, #3
 801c2fe:	461a      	mov	r2, r3
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	4413      	add	r3, r2
 801c304:	685b      	ldr	r3, [r3, #4]
 801c306:	4618      	mov	r0, r3
 801c308:	f7ff fef4 	bl	801c0f4 <varint_size>
 801c30c:	4603      	mov	r3, r0
 801c30e:	461a      	mov	r2, r3
 801c310:	68bb      	ldr	r3, [r7, #8]
 801c312:	4413      	add	r3, r2
 801c314:	60bb      	str	r3, [r7, #8]
        break;
 801c316:	e00d      	b.n	801c334 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 801c318:	68bb      	ldr	r3, [r7, #8]
 801c31a:	3304      	adds	r3, #4
 801c31c:	60bb      	str	r3, [r7, #8]
        break;
 801c31e:	e009      	b.n	801c334 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 801c320:	68bb      	ldr	r3, [r7, #8]
 801c322:	3302      	adds	r3, #2
 801c324:	60bb      	str	r3, [r7, #8]
        break;
 801c326:	e005      	b.n	801c334 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 801c328:	68bb      	ldr	r3, [r7, #8]
 801c32a:	3301      	adds	r3, #1
 801c32c:	60bb      	str	r3, [r7, #8]
        break;
 801c32e:	e001      	b.n	801c334 <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 801c330:	68bb      	ldr	r3, [r7, #8]
 801c332:	e007      	b.n	801c344 <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	3301      	adds	r3, #1
 801c338:	60fb      	str	r3, [r7, #12]
 801c33a:	68fa      	ldr	r2, [r7, #12]
 801c33c:	683b      	ldr	r3, [r7, #0]
 801c33e:	429a      	cmp	r2, r3
 801c340:	d380      	bcc.n	801c244 <get_properties_length+0x14>
    }
  }

  return size;
 801c342:	68bb      	ldr	r3, [r7, #8]
}
 801c344:	4618      	mov	r0, r3
 801c346:	3710      	adds	r7, #16
 801c348:	46bd      	mov	sp, r7
 801c34a:	bd80      	pop	{r7, pc}

0801c34c <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 801c34c:	b580      	push	{r7, lr}
 801c34e:	b084      	sub	sp, #16
 801c350:	af00      	add	r7, sp, #0
 801c352:	6078      	str	r0, [r7, #4]
 801c354:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 801c356:	6839      	ldr	r1, [r7, #0]
 801c358:	6878      	ldr	r0, [r7, #4]
 801c35a:	f7ff ff69 	bl	801c230 <get_properties_length>
 801c35e:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 801c360:	68f8      	ldr	r0, [r7, #12]
 801c362:	f7ff fec7 	bl	801c0f4 <varint_size>
 801c366:	4603      	mov	r3, r0
 801c368:	461a      	mov	r2, r3
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	4413      	add	r3, r2
 801c36e:	60fb      	str	r3, [r7, #12]
  return size;
 801c370:	68fb      	ldr	r3, [r7, #12]
}
 801c372:	4618      	mov	r0, r3
 801c374:	3710      	adds	r7, #16
 801c376:	46bd      	mov	sp, r7
 801c378:	bd80      	pop	{r7, pc}
	...

0801c37c <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 801c37c:	b580      	push	{r7, lr}
 801c37e:	b08a      	sub	sp, #40	@ 0x28
 801c380:	af00      	add	r7, sp, #0
 801c382:	60f8      	str	r0, [r7, #12]
 801c384:	60b9      	str	r1, [r7, #8]
 801c386:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 801c388:	6879      	ldr	r1, [r7, #4]
 801c38a:	68b8      	ldr	r0, [r7, #8]
 801c38c:	f7ff ff50 	bl	801c230 <get_properties_length>
 801c390:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 801c392:	2300      	movs	r3, #0
 801c394:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 801c396:	2300      	movs	r3, #0
 801c398:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 801c39a:	f107 0314 	add.w	r3, r7, #20
 801c39e:	6a39      	ldr	r1, [r7, #32]
 801c3a0:	4618      	mov	r0, r3
 801c3a2:	f7ff febd 	bl	801c120 <encode_varint>
 801c3a6:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 801c3a8:	f107 0314 	add.w	r3, r7, #20
 801c3ac:	69fa      	ldr	r2, [r7, #28]
 801c3ae:	4619      	mov	r1, r3
 801c3b0:	68f8      	ldr	r0, [r7, #12]
 801c3b2:	f004 fc69 	bl	8020c88 <mg_send>
  for (i = 0; i < nprops; i++) {
 801c3b6:	2300      	movs	r3, #0
 801c3b8:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3ba:	e11f      	b.n	801c5fc <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 801c3bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c3be:	4613      	mov	r3, r2
 801c3c0:	005b      	lsls	r3, r3, #1
 801c3c2:	4413      	add	r3, r2
 801c3c4:	00db      	lsls	r3, r3, #3
 801c3c6:	461a      	mov	r2, r3
 801c3c8:	68bb      	ldr	r3, [r7, #8]
 801c3ca:	4413      	add	r3, r2
 801c3cc:	2201      	movs	r2, #1
 801c3ce:	4619      	mov	r1, r3
 801c3d0:	68f8      	ldr	r0, [r7, #12]
 801c3d2:	f004 fc59 	bl	8020c88 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801c3d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c3d8:	4613      	mov	r3, r2
 801c3da:	005b      	lsls	r3, r3, #1
 801c3dc:	4413      	add	r3, r2
 801c3de:	00db      	lsls	r3, r3, #3
 801c3e0:	461a      	mov	r2, r3
 801c3e2:	68bb      	ldr	r3, [r7, #8]
 801c3e4:	4413      	add	r3, r2
 801c3e6:	781b      	ldrb	r3, [r3, #0]
 801c3e8:	4618      	mov	r0, r3
 801c3ea:	f7ff fef9 	bl	801c1e0 <mqtt_prop_type_by_id>
 801c3ee:	4603      	mov	r3, r0
 801c3f0:	2b06      	cmp	r3, #6
 801c3f2:	f200 8100 	bhi.w	801c5f6 <mg_send_mqtt_properties+0x27a>
 801c3f6:	a201      	add	r2, pc, #4	@ (adr r2, 801c3fc <mg_send_mqtt_properties+0x80>)
 801c3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c3fc:	0801c4bb 	.word	0x0801c4bb
 801c400:	0801c523 	.word	0x0801c523
 801c404:	0801c419 	.word	0x0801c419
 801c408:	0801c575 	.word	0x0801c575
 801c40c:	0801c5c7 	.word	0x0801c5c7
 801c410:	0801c4ff 	.word	0x0801c4ff
 801c414:	0801c4d9 	.word	0x0801c4d9
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 801c418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c41a:	4613      	mov	r3, r2
 801c41c:	005b      	lsls	r3, r3, #1
 801c41e:	4413      	add	r3, r2
 801c420:	00db      	lsls	r3, r3, #3
 801c422:	461a      	mov	r2, r3
 801c424:	68bb      	ldr	r3, [r7, #8]
 801c426:	4413      	add	r3, r2
 801c428:	68db      	ldr	r3, [r3, #12]
 801c42a:	b29b      	uxth	r3, r3
 801c42c:	4618      	mov	r0, r3
 801c42e:	f006 f9a4 	bl	802277a <mg_ntohs>
 801c432:	4603      	mov	r3, r0
 801c434:	4619      	mov	r1, r3
 801c436:	68f8      	ldr	r0, [r7, #12]
 801c438:	f7ff fe3d 	bl	801c0b6 <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 801c43c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c43e:	4613      	mov	r3, r2
 801c440:	005b      	lsls	r3, r3, #1
 801c442:	4413      	add	r3, r2
 801c444:	00db      	lsls	r3, r3, #3
 801c446:	461a      	mov	r2, r3
 801c448:	68bb      	ldr	r3, [r7, #8]
 801c44a:	4413      	add	r3, r2
 801c44c:	6899      	ldr	r1, [r3, #8]
 801c44e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c450:	4613      	mov	r3, r2
 801c452:	005b      	lsls	r3, r3, #1
 801c454:	4413      	add	r3, r2
 801c456:	00db      	lsls	r3, r3, #3
 801c458:	461a      	mov	r2, r3
 801c45a:	68bb      	ldr	r3, [r7, #8]
 801c45c:	4413      	add	r3, r2
 801c45e:	68db      	ldr	r3, [r3, #12]
 801c460:	461a      	mov	r2, r3
 801c462:	68f8      	ldr	r0, [r7, #12]
 801c464:	f004 fc10 	bl	8020c88 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801c468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c46a:	4613      	mov	r3, r2
 801c46c:	005b      	lsls	r3, r3, #1
 801c46e:	4413      	add	r3, r2
 801c470:	00db      	lsls	r3, r3, #3
 801c472:	461a      	mov	r2, r3
 801c474:	68bb      	ldr	r3, [r7, #8]
 801c476:	4413      	add	r3, r2
 801c478:	695b      	ldr	r3, [r3, #20]
 801c47a:	b29b      	uxth	r3, r3
 801c47c:	4618      	mov	r0, r3
 801c47e:	f006 f97c 	bl	802277a <mg_ntohs>
 801c482:	4603      	mov	r3, r0
 801c484:	4619      	mov	r1, r3
 801c486:	68f8      	ldr	r0, [r7, #12]
 801c488:	f7ff fe15 	bl	801c0b6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801c48c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c48e:	4613      	mov	r3, r2
 801c490:	005b      	lsls	r3, r3, #1
 801c492:	4413      	add	r3, r2
 801c494:	00db      	lsls	r3, r3, #3
 801c496:	461a      	mov	r2, r3
 801c498:	68bb      	ldr	r3, [r7, #8]
 801c49a:	4413      	add	r3, r2
 801c49c:	6919      	ldr	r1, [r3, #16]
 801c49e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c4a0:	4613      	mov	r3, r2
 801c4a2:	005b      	lsls	r3, r3, #1
 801c4a4:	4413      	add	r3, r2
 801c4a6:	00db      	lsls	r3, r3, #3
 801c4a8:	461a      	mov	r2, r3
 801c4aa:	68bb      	ldr	r3, [r7, #8]
 801c4ac:	4413      	add	r3, r2
 801c4ae:	695b      	ldr	r3, [r3, #20]
 801c4b0:	461a      	mov	r2, r3
 801c4b2:	68f8      	ldr	r0, [r7, #12]
 801c4b4:	f004 fbe8 	bl	8020c88 <mg_send>
        break;
 801c4b8:	e09d      	b.n	801c5f6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 801c4ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c4bc:	4613      	mov	r3, r2
 801c4be:	005b      	lsls	r3, r3, #1
 801c4c0:	4413      	add	r3, r2
 801c4c2:	00db      	lsls	r3, r3, #3
 801c4c4:	461a      	mov	r2, r3
 801c4c6:	68bb      	ldr	r3, [r7, #8]
 801c4c8:	4413      	add	r3, r2
 801c4ca:	3304      	adds	r3, #4
 801c4cc:	2201      	movs	r2, #1
 801c4ce:	4619      	mov	r1, r3
 801c4d0:	68f8      	ldr	r0, [r7, #12]
 801c4d2:	f004 fbd9 	bl	8020c88 <mg_send>
        break;
 801c4d6:	e08e      	b.n	801c5f6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 801c4d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c4da:	4613      	mov	r3, r2
 801c4dc:	005b      	lsls	r3, r3, #1
 801c4de:	4413      	add	r3, r2
 801c4e0:	00db      	lsls	r3, r3, #3
 801c4e2:	461a      	mov	r2, r3
 801c4e4:	68bb      	ldr	r3, [r7, #8]
 801c4e6:	4413      	add	r3, r2
 801c4e8:	685b      	ldr	r3, [r3, #4]
 801c4ea:	b29b      	uxth	r3, r3
 801c4ec:	4618      	mov	r0, r3
 801c4ee:	f006 f944 	bl	802277a <mg_ntohs>
 801c4f2:	4603      	mov	r3, r0
 801c4f4:	4619      	mov	r1, r3
 801c4f6:	68f8      	ldr	r0, [r7, #12]
 801c4f8:	f7ff fddd 	bl	801c0b6 <mg_send_u16>
        break;
 801c4fc:	e07b      	b.n	801c5f6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 801c4fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c500:	4613      	mov	r3, r2
 801c502:	005b      	lsls	r3, r3, #1
 801c504:	4413      	add	r3, r2
 801c506:	00db      	lsls	r3, r3, #3
 801c508:	461a      	mov	r2, r3
 801c50a:	68bb      	ldr	r3, [r7, #8]
 801c50c:	4413      	add	r3, r2
 801c50e:	685b      	ldr	r3, [r3, #4]
 801c510:	4618      	mov	r0, r3
 801c512:	f006 f919 	bl	8022748 <mg_ntohl>
 801c516:	4603      	mov	r3, r0
 801c518:	4619      	mov	r1, r3
 801c51a:	68f8      	ldr	r0, [r7, #12]
 801c51c:	f7ff fddb 	bl	801c0d6 <mg_send_u32>
        break;
 801c520:	e069      	b.n	801c5f6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801c522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c524:	4613      	mov	r3, r2
 801c526:	005b      	lsls	r3, r3, #1
 801c528:	4413      	add	r3, r2
 801c52a:	00db      	lsls	r3, r3, #3
 801c52c:	461a      	mov	r2, r3
 801c52e:	68bb      	ldr	r3, [r7, #8]
 801c530:	4413      	add	r3, r2
 801c532:	695b      	ldr	r3, [r3, #20]
 801c534:	b29b      	uxth	r3, r3
 801c536:	4618      	mov	r0, r3
 801c538:	f006 f91f 	bl	802277a <mg_ntohs>
 801c53c:	4603      	mov	r3, r0
 801c53e:	4619      	mov	r1, r3
 801c540:	68f8      	ldr	r0, [r7, #12]
 801c542:	f7ff fdb8 	bl	801c0b6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801c546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c548:	4613      	mov	r3, r2
 801c54a:	005b      	lsls	r3, r3, #1
 801c54c:	4413      	add	r3, r2
 801c54e:	00db      	lsls	r3, r3, #3
 801c550:	461a      	mov	r2, r3
 801c552:	68bb      	ldr	r3, [r7, #8]
 801c554:	4413      	add	r3, r2
 801c556:	6919      	ldr	r1, [r3, #16]
 801c558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c55a:	4613      	mov	r3, r2
 801c55c:	005b      	lsls	r3, r3, #1
 801c55e:	4413      	add	r3, r2
 801c560:	00db      	lsls	r3, r3, #3
 801c562:	461a      	mov	r2, r3
 801c564:	68bb      	ldr	r3, [r7, #8]
 801c566:	4413      	add	r3, r2
 801c568:	695b      	ldr	r3, [r3, #20]
 801c56a:	461a      	mov	r2, r3
 801c56c:	68f8      	ldr	r0, [r7, #12]
 801c56e:	f004 fb8b 	bl	8020c88 <mg_send>
        break;
 801c572:	e040      	b.n	801c5f6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801c574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c576:	4613      	mov	r3, r2
 801c578:	005b      	lsls	r3, r3, #1
 801c57a:	4413      	add	r3, r2
 801c57c:	00db      	lsls	r3, r3, #3
 801c57e:	461a      	mov	r2, r3
 801c580:	68bb      	ldr	r3, [r7, #8]
 801c582:	4413      	add	r3, r2
 801c584:	695b      	ldr	r3, [r3, #20]
 801c586:	b29b      	uxth	r3, r3
 801c588:	4618      	mov	r0, r3
 801c58a:	f006 f8f6 	bl	802277a <mg_ntohs>
 801c58e:	4603      	mov	r3, r0
 801c590:	4619      	mov	r1, r3
 801c592:	68f8      	ldr	r0, [r7, #12]
 801c594:	f7ff fd8f 	bl	801c0b6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801c598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c59a:	4613      	mov	r3, r2
 801c59c:	005b      	lsls	r3, r3, #1
 801c59e:	4413      	add	r3, r2
 801c5a0:	00db      	lsls	r3, r3, #3
 801c5a2:	461a      	mov	r2, r3
 801c5a4:	68bb      	ldr	r3, [r7, #8]
 801c5a6:	4413      	add	r3, r2
 801c5a8:	6919      	ldr	r1, [r3, #16]
 801c5aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c5ac:	4613      	mov	r3, r2
 801c5ae:	005b      	lsls	r3, r3, #1
 801c5b0:	4413      	add	r3, r2
 801c5b2:	00db      	lsls	r3, r3, #3
 801c5b4:	461a      	mov	r2, r3
 801c5b6:	68bb      	ldr	r3, [r7, #8]
 801c5b8:	4413      	add	r3, r2
 801c5ba:	695b      	ldr	r3, [r3, #20]
 801c5bc:	461a      	mov	r2, r3
 801c5be:	68f8      	ldr	r0, [r7, #12]
 801c5c0:	f004 fb62 	bl	8020c88 <mg_send>
        break;
 801c5c4:	e017      	b.n	801c5f6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 801c5c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c5c8:	4613      	mov	r3, r2
 801c5ca:	005b      	lsls	r3, r3, #1
 801c5cc:	4413      	add	r3, r2
 801c5ce:	00db      	lsls	r3, r3, #3
 801c5d0:	461a      	mov	r2, r3
 801c5d2:	68bb      	ldr	r3, [r7, #8]
 801c5d4:	4413      	add	r3, r2
 801c5d6:	685a      	ldr	r2, [r3, #4]
 801c5d8:	f107 0318 	add.w	r3, r7, #24
 801c5dc:	4611      	mov	r1, r2
 801c5de:	4618      	mov	r0, r3
 801c5e0:	f7ff fd9e 	bl	801c120 <encode_varint>
 801c5e4:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 801c5e6:	f107 0318 	add.w	r3, r7, #24
 801c5ea:	69fa      	ldr	r2, [r7, #28]
 801c5ec:	4619      	mov	r1, r3
 801c5ee:	68f8      	ldr	r0, [r7, #12]
 801c5f0:	f004 fb4a 	bl	8020c88 <mg_send>
        break;
 801c5f4:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 801c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5f8:	3301      	adds	r3, #1
 801c5fa:	627b      	str	r3, [r7, #36]	@ 0x24
 801c5fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	429a      	cmp	r2, r3
 801c602:	f4ff aedb 	bcc.w	801c3bc <mg_send_mqtt_properties+0x40>
    }
  }
}
 801c606:	bf00      	nop
 801c608:	bf00      	nop
 801c60a:	3728      	adds	r7, #40	@ 0x28
 801c60c:	46bd      	mov	sp, r7
 801c60e:	bd80      	pop	{r7, pc}

0801c610 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801c610:	b580      	push	{r7, lr}
 801c612:	b08e      	sub	sp, #56	@ 0x38
 801c614:	af00      	add	r7, sp, #0
 801c616:	6078      	str	r0, [r7, #4]
 801c618:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 801c61a:	683a      	ldr	r2, [r7, #0]
 801c61c:	f107 0314 	add.w	r3, r7, #20
 801c620:	3210      	adds	r2, #16
 801c622:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c626:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 801c62a:	230c      	movs	r3, #12
 801c62c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 801c62e:	2300      	movs	r3, #0
 801c630:	733b      	strb	r3, [r7, #12]
 801c632:	2304      	movs	r3, #4
 801c634:	737b      	strb	r3, [r7, #13]
 801c636:	234d      	movs	r3, #77	@ 0x4d
 801c638:	73bb      	strb	r3, [r7, #14]
 801c63a:	2351      	movs	r3, #81	@ 0x51
 801c63c:	73fb      	strb	r3, [r7, #15]
 801c63e:	2354      	movs	r3, #84	@ 0x54
 801c640:	743b      	strb	r3, [r7, #16]
 801c642:	2354      	movs	r3, #84	@ 0x54
 801c644:	747b      	strb	r3, [r7, #17]
 801c646:	683b      	ldr	r3, [r7, #0]
 801c648:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801c64c:	74bb      	strb	r3, [r7, #18]
 801c64e:	2300      	movs	r3, #0
 801c650:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 801c652:	69bb      	ldr	r3, [r7, #24]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d110      	bne.n	801c67a <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 801c658:	f107 031c 	add.w	r3, r7, #28
 801c65c:	2114      	movs	r1, #20
 801c65e:	4618      	mov	r0, r3
 801c660:	f006 f82c 	bl	80226bc <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 801c664:	2300      	movs	r3, #0
 801c666:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 801c66a:	f107 0314 	add.w	r3, r7, #20
 801c66e:	f107 021c 	add.w	r2, r7, #28
 801c672:	4611      	mov	r1, r2
 801c674:	4618      	mov	r0, r3
 801c676:	f005 f8dd 	bl	8021834 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 801c67a:	7cbb      	ldrb	r3, [r7, #18]
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d101      	bne.n	801c684 <mg_mqtt_login+0x74>
 801c680:	2304      	movs	r3, #4
 801c682:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 801c684:	7cbb      	ldrb	r3, [r7, #18]
 801c686:	2b05      	cmp	r3, #5
 801c688:	bf0c      	ite	eq
 801c68a:	2301      	moveq	r3, #1
 801c68c:	2300      	movne	r3, #0
 801c68e:	b2d9      	uxtb	r1, r3
 801c690:	687a      	ldr	r2, [r7, #4]
 801c692:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801c696:	f361 0382 	bfi	r3, r1, #2, #1
 801c69a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 801c69e:	683b      	ldr	r3, [r7, #0]
 801c6a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c6a4:	00db      	lsls	r3, r3, #3
 801c6a6:	b2db      	uxtb	r3, r3
 801c6a8:	f003 0318 	and.w	r3, r3, #24
 801c6ac:	b2db      	uxtb	r3, r3
 801c6ae:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 801c6b0:	683b      	ldr	r3, [r7, #0]
 801c6b2:	685b      	ldr	r3, [r3, #4]
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d00a      	beq.n	801c6ce <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 801c6b8:	683b      	ldr	r3, [r7, #0]
 801c6ba:	685a      	ldr	r2, [r3, #4]
 801c6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c6be:	4413      	add	r3, r2
 801c6c0:	3302      	adds	r3, #2
 801c6c2:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 801c6c4:	7cfb      	ldrb	r3, [r7, #19]
 801c6c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c6ca:	b2db      	uxtb	r3, r3
 801c6cc:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 801c6ce:	683b      	ldr	r3, [r7, #0]
 801c6d0:	68db      	ldr	r3, [r3, #12]
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d00a      	beq.n	801c6ec <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 801c6d6:	683b      	ldr	r3, [r7, #0]
 801c6d8:	68da      	ldr	r2, [r3, #12]
 801c6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c6dc:	4413      	add	r3, r2
 801c6de:	3302      	adds	r3, #2
 801c6e0:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 801c6e2:	7cfb      	ldrb	r3, [r7, #19]
 801c6e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c6e8:	b2db      	uxtb	r3, r3
 801c6ea:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 801c6ec:	683b      	ldr	r3, [r7, #0]
 801c6ee:	69db      	ldr	r3, [r3, #28]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d00d      	beq.n	801c710 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 801c6f4:	683b      	ldr	r3, [r7, #0]
 801c6f6:	69da      	ldr	r2, [r3, #28]
 801c6f8:	683b      	ldr	r3, [r7, #0]
 801c6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c6fc:	441a      	add	r2, r3
 801c6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c700:	4413      	add	r3, r2
 801c702:	3304      	adds	r3, #4
 801c704:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 801c706:	7cfb      	ldrb	r3, [r7, #19]
 801c708:	f043 0304 	orr.w	r3, r3, #4
 801c70c:	b2db      	uxtb	r3, r3
 801c70e:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 801c710:	683b      	ldr	r3, [r7, #0]
 801c712:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c716:	2b00      	cmp	r3, #0
 801c718:	d102      	bne.n	801c720 <mg_mqtt_login+0x110>
 801c71a:	69bb      	ldr	r3, [r7, #24]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d104      	bne.n	801c72a <mg_mqtt_login+0x11a>
 801c720:	7cfb      	ldrb	r3, [r7, #19]
 801c722:	f043 0302 	orr.w	r3, r3, #2
 801c726:	b2db      	uxtb	r3, r3
 801c728:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 801c72a:	683b      	ldr	r3, [r7, #0]
 801c72c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801c730:	2b00      	cmp	r3, #0
 801c732:	d004      	beq.n	801c73e <mg_mqtt_login+0x12e>
 801c734:	7cfb      	ldrb	r3, [r7, #19]
 801c736:	f043 0320 	orr.w	r3, r3, #32
 801c73a:	b2db      	uxtb	r3, r3
 801c73c:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 801c73e:	69bb      	ldr	r3, [r7, #24]
 801c740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c742:	4413      	add	r3, r2
 801c744:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c74c:	f003 0304 	and.w	r3, r3, #4
 801c750:	b2db      	uxtb	r3, r3
 801c752:	2b00      	cmp	r3, #0
 801c754:	d01c      	beq.n	801c790 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 801c756:	683b      	ldr	r3, [r7, #0]
 801c758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c75a:	683b      	ldr	r3, [r7, #0]
 801c75c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c75e:	4619      	mov	r1, r3
 801c760:	4610      	mov	r0, r2
 801c762:	f7ff fdf3 	bl	801c34c <get_props_size>
 801c766:	4602      	mov	r2, r0
 801c768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c76a:	4413      	add	r3, r2
 801c76c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 801c76e:	7cfb      	ldrb	r3, [r7, #19]
 801c770:	f003 0304 	and.w	r3, r3, #4
 801c774:	2b00      	cmp	r3, #0
 801c776:	d00b      	beq.n	801c790 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 801c778:	683b      	ldr	r3, [r7, #0]
 801c77a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c77c:	683b      	ldr	r3, [r7, #0]
 801c77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c780:	4619      	mov	r1, r3
 801c782:	4610      	mov	r0, r2
 801c784:	f7ff fde2 	bl	801c34c <get_props_size>
 801c788:	4602      	mov	r2, r0
 801c78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c78c:	4413      	add	r3, r2
 801c78e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 801c790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c792:	2200      	movs	r2, #0
 801c794:	2101      	movs	r1, #1
 801c796:	6878      	ldr	r0, [r7, #4]
 801c798:	f7ff fc48 	bl	801c02c <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 801c79c:	f107 030c 	add.w	r3, r7, #12
 801c7a0:	2208      	movs	r2, #8
 801c7a2:	4619      	mov	r1, r3
 801c7a4:	6878      	ldr	r0, [r7, #4]
 801c7a6:	f004 fa6f 	bl	8020c88 <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 801c7aa:	683b      	ldr	r3, [r7, #0]
 801c7ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801c7ae:	4618      	mov	r0, r3
 801c7b0:	f005 ffe3 	bl	802277a <mg_ntohs>
 801c7b4:	4603      	mov	r3, r0
 801c7b6:	4619      	mov	r1, r3
 801c7b8:	6878      	ldr	r0, [r7, #4]
 801c7ba:	f7ff fc7c 	bl	801c0b6 <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c7c4:	f003 0304 	and.w	r3, r3, #4
 801c7c8:	b2db      	uxtb	r3, r3
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d007      	beq.n	801c7de <mg_mqtt_login+0x1ce>
 801c7ce:	683b      	ldr	r3, [r7, #0]
 801c7d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801c7d2:	683b      	ldr	r3, [r7, #0]
 801c7d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c7d6:	461a      	mov	r2, r3
 801c7d8:	6878      	ldr	r0, [r7, #4]
 801c7da:	f7ff fdcf 	bl	801c37c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 801c7de:	69bb      	ldr	r3, [r7, #24]
 801c7e0:	b29b      	uxth	r3, r3
 801c7e2:	4618      	mov	r0, r3
 801c7e4:	f005 ffc9 	bl	802277a <mg_ntohs>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	4619      	mov	r1, r3
 801c7ec:	6878      	ldr	r0, [r7, #4]
 801c7ee:	f7ff fc62 	bl	801c0b6 <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 801c7f2:	697b      	ldr	r3, [r7, #20]
 801c7f4:	69ba      	ldr	r2, [r7, #24]
 801c7f6:	4619      	mov	r1, r3
 801c7f8:	6878      	ldr	r0, [r7, #4]
 801c7fa:	f004 fa45 	bl	8020c88 <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 801c7fe:	7cfb      	ldrb	r3, [r7, #19]
 801c800:	f003 0304 	and.w	r3, r3, #4
 801c804:	2b00      	cmp	r3, #0
 801c806:	d035      	beq.n	801c874 <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c80e:	f003 0304 	and.w	r3, r3, #4
 801c812:	b2db      	uxtb	r3, r3
 801c814:	2b00      	cmp	r3, #0
 801c816:	d007      	beq.n	801c828 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 801c818:	683b      	ldr	r3, [r7, #0]
 801c81a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801c81c:	683b      	ldr	r3, [r7, #0]
 801c81e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c820:	461a      	mov	r2, r3
 801c822:	6878      	ldr	r0, [r7, #4]
 801c824:	f7ff fdaa 	bl	801c37c <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801c828:	683b      	ldr	r3, [r7, #0]
 801c82a:	69db      	ldr	r3, [r3, #28]
 801c82c:	b29b      	uxth	r3, r3
 801c82e:	4618      	mov	r0, r3
 801c830:	f005 ffa3 	bl	802277a <mg_ntohs>
 801c834:	4603      	mov	r3, r0
 801c836:	4619      	mov	r1, r3
 801c838:	6878      	ldr	r0, [r7, #4]
 801c83a:	f7ff fc3c 	bl	801c0b6 <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 801c83e:	683b      	ldr	r3, [r7, #0]
 801c840:	6999      	ldr	r1, [r3, #24]
 801c842:	683b      	ldr	r3, [r7, #0]
 801c844:	69db      	ldr	r3, [r3, #28]
 801c846:	461a      	mov	r2, r3
 801c848:	6878      	ldr	r0, [r7, #4]
 801c84a:	f004 fa1d 	bl	8020c88 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 801c84e:	683b      	ldr	r3, [r7, #0]
 801c850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c852:	b29b      	uxth	r3, r3
 801c854:	4618      	mov	r0, r3
 801c856:	f005 ff90 	bl	802277a <mg_ntohs>
 801c85a:	4603      	mov	r3, r0
 801c85c:	4619      	mov	r1, r3
 801c85e:	6878      	ldr	r0, [r7, #4]
 801c860:	f7ff fc29 	bl	801c0b6 <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 801c864:	683b      	ldr	r3, [r7, #0]
 801c866:	6a19      	ldr	r1, [r3, #32]
 801c868:	683b      	ldr	r3, [r7, #0]
 801c86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c86c:	461a      	mov	r2, r3
 801c86e:	6878      	ldr	r0, [r7, #4]
 801c870:	f004 fa0a 	bl	8020c88 <mg_send>
  }
  if (opts->user.len > 0) {
 801c874:	683b      	ldr	r3, [r7, #0]
 801c876:	685b      	ldr	r3, [r3, #4]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d012      	beq.n	801c8a2 <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 801c87c:	683b      	ldr	r3, [r7, #0]
 801c87e:	685b      	ldr	r3, [r3, #4]
 801c880:	b29b      	uxth	r3, r3
 801c882:	4618      	mov	r0, r3
 801c884:	f005 ff79 	bl	802277a <mg_ntohs>
 801c888:	4603      	mov	r3, r0
 801c88a:	4619      	mov	r1, r3
 801c88c:	6878      	ldr	r0, [r7, #4]
 801c88e:	f7ff fc12 	bl	801c0b6 <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 801c892:	683b      	ldr	r3, [r7, #0]
 801c894:	6819      	ldr	r1, [r3, #0]
 801c896:	683b      	ldr	r3, [r7, #0]
 801c898:	685b      	ldr	r3, [r3, #4]
 801c89a:	461a      	mov	r2, r3
 801c89c:	6878      	ldr	r0, [r7, #4]
 801c89e:	f004 f9f3 	bl	8020c88 <mg_send>
  }
  if (opts->pass.len > 0) {
 801c8a2:	683b      	ldr	r3, [r7, #0]
 801c8a4:	68db      	ldr	r3, [r3, #12]
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d012      	beq.n	801c8d0 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 801c8aa:	683b      	ldr	r3, [r7, #0]
 801c8ac:	68db      	ldr	r3, [r3, #12]
 801c8ae:	b29b      	uxth	r3, r3
 801c8b0:	4618      	mov	r0, r3
 801c8b2:	f005 ff62 	bl	802277a <mg_ntohs>
 801c8b6:	4603      	mov	r3, r0
 801c8b8:	4619      	mov	r1, r3
 801c8ba:	6878      	ldr	r0, [r7, #4]
 801c8bc:	f7ff fbfb 	bl	801c0b6 <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 801c8c0:	683b      	ldr	r3, [r7, #0]
 801c8c2:	6899      	ldr	r1, [r3, #8]
 801c8c4:	683b      	ldr	r3, [r7, #0]
 801c8c6:	68db      	ldr	r3, [r3, #12]
 801c8c8:	461a      	mov	r2, r3
 801c8ca:	6878      	ldr	r0, [r7, #4]
 801c8cc:	f004 f9dc 	bl	8020c88 <mg_send>
  }
}
 801c8d0:	bf00      	nop
 801c8d2:	3738      	adds	r7, #56	@ 0x38
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	bd80      	pop	{r7, pc}

0801c8d8 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801c8d8:	b590      	push	{r4, r7, lr}
 801c8da:	b087      	sub	sp, #28
 801c8dc:	af02      	add	r7, sp, #8
 801c8de:	6078      	str	r0, [r7, #4]
 801c8e0:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 801c8e2:	683b      	ldr	r3, [r7, #0]
 801c8e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c8e6:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 801c8e8:	683b      	ldr	r3, [r7, #0]
 801c8ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c8ee:	005b      	lsls	r3, r3, #1
 801c8f0:	b25b      	sxtb	r3, r3
 801c8f2:	f003 0306 	and.w	r3, r3, #6
 801c8f6:	b25b      	sxtb	r3, r3
 801c8f8:	683a      	ldr	r2, [r7, #0]
 801c8fa:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 801c8fe:	2a00      	cmp	r2, #0
 801c900:	d001      	beq.n	801c906 <mg_mqtt_pub+0x2e>
 801c902:	2201      	movs	r2, #1
 801c904:	e000      	b.n	801c908 <mg_mqtt_pub+0x30>
 801c906:	2200      	movs	r2, #0
 801c908:	4313      	orrs	r3, r2
 801c90a:	b25b      	sxtb	r3, r3
 801c90c:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 801c90e:	683b      	ldr	r3, [r7, #0]
 801c910:	69da      	ldr	r2, [r3, #28]
 801c912:	683b      	ldr	r3, [r7, #0]
 801c914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c916:	4413      	add	r3, r2
 801c918:	3302      	adds	r3, #2
 801c91a:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 801c91c:	4b51      	ldr	r3, [pc, #324]	@ (801ca64 <mg_mqtt_pub+0x18c>)
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	2b02      	cmp	r3, #2
 801c922:	dd19      	ble.n	801c958 <mg_mqtt_pub+0x80>
 801c924:	4b50      	ldr	r3, [pc, #320]	@ (801ca68 <mg_mqtt_pub+0x190>)
 801c926:	f241 123c 	movw	r2, #4412	@ 0x113c
 801c92a:	4950      	ldr	r1, [pc, #320]	@ (801ca6c <mg_mqtt_pub+0x194>)
 801c92c:	2003      	movs	r0, #3
 801c92e:	f7fe fa7d 	bl	801ae2c <mg_log_prefix>
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801c936:	683b      	ldr	r3, [r7, #0]
 801c938:	69db      	ldr	r3, [r3, #28]
 801c93a:	461c      	mov	r4, r3
 801c93c:	683b      	ldr	r3, [r7, #0]
 801c93e:	699a      	ldr	r2, [r3, #24]
 801c940:	683b      	ldr	r3, [r7, #0]
 801c942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c944:	4618      	mov	r0, r3
 801c946:	683b      	ldr	r3, [r7, #0]
 801c948:	6a1b      	ldr	r3, [r3, #32]
 801c94a:	9301      	str	r3, [sp, #4]
 801c94c:	9000      	str	r0, [sp, #0]
 801c94e:	4613      	mov	r3, r2
 801c950:	4622      	mov	r2, r4
 801c952:	4847      	ldr	r0, [pc, #284]	@ (801ca70 <mg_mqtt_pub+0x198>)
 801c954:	f7fe faba 	bl	801aecc <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 801c958:	683b      	ldr	r3, [r7, #0]
 801c95a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d002      	beq.n	801c968 <mg_mqtt_pub+0x90>
 801c962:	68bb      	ldr	r3, [r7, #8]
 801c964:	3302      	adds	r3, #2
 801c966:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c96e:	f003 0304 	and.w	r3, r3, #4
 801c972:	b2db      	uxtb	r3, r3
 801c974:	2b00      	cmp	r3, #0
 801c976:	d00b      	beq.n	801c990 <mg_mqtt_pub+0xb8>
 801c978:	683b      	ldr	r3, [r7, #0]
 801c97a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c97c:	683b      	ldr	r3, [r7, #0]
 801c97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c980:	4619      	mov	r1, r3
 801c982:	4610      	mov	r0, r2
 801c984:	f7ff fce2 	bl	801c34c <get_props_size>
 801c988:	4602      	mov	r2, r0
 801c98a:	68bb      	ldr	r3, [r7, #8]
 801c98c:	4413      	add	r3, r2
 801c98e:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 801c990:	683b      	ldr	r3, [r7, #0]
 801c992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c996:	2b00      	cmp	r3, #0
 801c998:	d006      	beq.n	801c9a8 <mg_mqtt_pub+0xd0>
 801c99a:	89fb      	ldrh	r3, [r7, #14]
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d003      	beq.n	801c9a8 <mg_mqtt_pub+0xd0>
 801c9a0:	7b7b      	ldrb	r3, [r7, #13]
 801c9a2:	f043 0308 	orr.w	r3, r3, #8
 801c9a6:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 801c9a8:	7b7a      	ldrb	r2, [r7, #13]
 801c9aa:	68bb      	ldr	r3, [r7, #8]
 801c9ac:	2103      	movs	r1, #3
 801c9ae:	6878      	ldr	r0, [r7, #4]
 801c9b0:	f7ff fb3c 	bl	801c02c <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801c9b4:	683b      	ldr	r3, [r7, #0]
 801c9b6:	69db      	ldr	r3, [r3, #28]
 801c9b8:	b29b      	uxth	r3, r3
 801c9ba:	4618      	mov	r0, r3
 801c9bc:	f005 fedd 	bl	802277a <mg_ntohs>
 801c9c0:	4603      	mov	r3, r0
 801c9c2:	4619      	mov	r1, r3
 801c9c4:	6878      	ldr	r0, [r7, #4]
 801c9c6:	f7ff fb76 	bl	801c0b6 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 801c9ca:	683b      	ldr	r3, [r7, #0]
 801c9cc:	6999      	ldr	r1, [r3, #24]
 801c9ce:	683b      	ldr	r3, [r7, #0]
 801c9d0:	69db      	ldr	r3, [r3, #28]
 801c9d2:	461a      	mov	r2, r3
 801c9d4:	6878      	ldr	r0, [r7, #4]
 801c9d6:	f004 f957 	bl	8020c88 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 801c9da:	683b      	ldr	r3, [r7, #0]
 801c9dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d01e      	beq.n	801ca22 <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 801c9e4:	89fb      	ldrh	r3, [r7, #14]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d112      	bne.n	801ca10 <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	685b      	ldr	r3, [r3, #4]
 801c9ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801c9f0:	3201      	adds	r2, #1
 801c9f2:	b292      	uxth	r2, r2
 801c9f4:	859a      	strh	r2, [r3, #44]	@ 0x2c
 801c9f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d105      	bne.n	801ca08 <mg_mqtt_pub+0x130>
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	685b      	ldr	r3, [r3, #4]
 801ca00:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801ca02:	3201      	adds	r2, #1
 801ca04:	b292      	uxth	r2, r2
 801ca06:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	685b      	ldr	r3, [r3, #4]
 801ca0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801ca0e:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 801ca10:	89fb      	ldrh	r3, [r7, #14]
 801ca12:	4618      	mov	r0, r3
 801ca14:	f005 feb1 	bl	802277a <mg_ntohs>
 801ca18:	4603      	mov	r3, r0
 801ca1a:	4619      	mov	r1, r3
 801ca1c:	6878      	ldr	r0, [r7, #4]
 801ca1e:	f7ff fb4a 	bl	801c0b6 <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ca28:	f003 0304 	and.w	r3, r3, #4
 801ca2c:	b2db      	uxtb	r3, r3
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d007      	beq.n	801ca42 <mg_mqtt_pub+0x16a>
 801ca32:	683b      	ldr	r3, [r7, #0]
 801ca34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801ca36:	683b      	ldr	r3, [r7, #0]
 801ca38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ca3a:	461a      	mov	r2, r3
 801ca3c:	6878      	ldr	r0, [r7, #4]
 801ca3e:	f7ff fc9d 	bl	801c37c <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 801ca42:	683b      	ldr	r3, [r7, #0]
 801ca44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d007      	beq.n	801ca5a <mg_mqtt_pub+0x182>
 801ca4a:	683b      	ldr	r3, [r7, #0]
 801ca4c:	6a19      	ldr	r1, [r3, #32]
 801ca4e:	683b      	ldr	r3, [r7, #0]
 801ca50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca52:	461a      	mov	r2, r3
 801ca54:	6878      	ldr	r0, [r7, #4]
 801ca56:	f004 f917 	bl	8020c88 <mg_send>
  return id;
 801ca5a:	89fb      	ldrh	r3, [r7, #14]
}
 801ca5c:	4618      	mov	r0, r3
 801ca5e:	3714      	adds	r7, #20
 801ca60:	46bd      	mov	sp, r7
 801ca62:	bd90      	pop	{r4, r7, pc}
 801ca64:	20000298 	.word	0x20000298
 801ca68:	08033e68 	.word	0x08033e68
 801ca6c:	080310b8 	.word	0x080310b8
 801ca70:	08032548 	.word	0x08032548

0801ca74 <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b086      	sub	sp, #24
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	6078      	str	r0, [r7, #4]
 801ca7c:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 801ca7e:	683b      	ldr	r3, [r7, #0]
 801ca80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801ca84:	f003 0303 	and.w	r3, r3, #3
 801ca88:	b2db      	uxtb	r3, r3
 801ca8a:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ca92:	f003 0304 	and.w	r3, r3, #4
 801ca96:	b2db      	uxtb	r3, r3
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d009      	beq.n	801cab0 <mg_mqtt_sub+0x3c>
 801ca9c:	683b      	ldr	r3, [r7, #0]
 801ca9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801caa0:	683b      	ldr	r3, [r7, #0]
 801caa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801caa4:	4619      	mov	r1, r3
 801caa6:	4610      	mov	r0, r2
 801caa8:	f7ff fc50 	bl	801c34c <get_props_size>
 801caac:	4603      	mov	r3, r0
 801caae:	e000      	b.n	801cab2 <mg_mqtt_sub+0x3e>
 801cab0:	2300      	movs	r3, #0
 801cab2:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 801cab4:	683b      	ldr	r3, [r7, #0]
 801cab6:	69da      	ldr	r2, [r3, #28]
 801cab8:	697b      	ldr	r3, [r7, #20]
 801caba:	4413      	add	r3, r2
 801cabc:	3305      	adds	r3, #5
 801cabe:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 801cac0:	693b      	ldr	r3, [r7, #16]
 801cac2:	2202      	movs	r2, #2
 801cac4:	2108      	movs	r1, #8
 801cac6:	6878      	ldr	r0, [r7, #4]
 801cac8:	f7ff fab0 	bl	801c02c <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	685b      	ldr	r3, [r3, #4]
 801cad0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801cad2:	3201      	adds	r2, #1
 801cad4:	b292      	uxth	r2, r2
 801cad6:	859a      	strh	r2, [r3, #44]	@ 0x2c
 801cad8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d105      	bne.n	801caea <mg_mqtt_sub+0x76>
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	685b      	ldr	r3, [r3, #4]
 801cae2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801cae4:	3201      	adds	r2, #1
 801cae6:	b292      	uxth	r2, r2
 801cae8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	685b      	ldr	r3, [r3, #4]
 801caee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801caf0:	4618      	mov	r0, r3
 801caf2:	f005 fe42 	bl	802277a <mg_ntohs>
 801caf6:	4603      	mov	r3, r0
 801caf8:	4619      	mov	r1, r3
 801cafa:	6878      	ldr	r0, [r7, #4]
 801cafc:	f7ff fadb 	bl	801c0b6 <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cb06:	f003 0304 	and.w	r3, r3, #4
 801cb0a:	b2db      	uxtb	r3, r3
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d007      	beq.n	801cb20 <mg_mqtt_sub+0xac>
 801cb10:	683b      	ldr	r3, [r7, #0]
 801cb12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801cb14:	683b      	ldr	r3, [r7, #0]
 801cb16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cb18:	461a      	mov	r2, r3
 801cb1a:	6878      	ldr	r0, [r7, #4]
 801cb1c:	f7ff fc2e 	bl	801c37c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801cb20:	683b      	ldr	r3, [r7, #0]
 801cb22:	69db      	ldr	r3, [r3, #28]
 801cb24:	b29b      	uxth	r3, r3
 801cb26:	4618      	mov	r0, r3
 801cb28:	f005 fe27 	bl	802277a <mg_ntohs>
 801cb2c:	4603      	mov	r3, r0
 801cb2e:	4619      	mov	r1, r3
 801cb30:	6878      	ldr	r0, [r7, #4]
 801cb32:	f7ff fac0 	bl	801c0b6 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 801cb36:	683b      	ldr	r3, [r7, #0]
 801cb38:	6999      	ldr	r1, [r3, #24]
 801cb3a:	683b      	ldr	r3, [r7, #0]
 801cb3c:	69db      	ldr	r3, [r3, #28]
 801cb3e:	461a      	mov	r2, r3
 801cb40:	6878      	ldr	r0, [r7, #4]
 801cb42:	f004 f8a1 	bl	8020c88 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 801cb46:	f107 030f 	add.w	r3, r7, #15
 801cb4a:	2201      	movs	r2, #1
 801cb4c:	4619      	mov	r1, r3
 801cb4e:	6878      	ldr	r0, [r7, #4]
 801cb50:	f004 f89a 	bl	8020c88 <mg_send>
}
 801cb54:	bf00      	nop
 801cb56:	3718      	adds	r7, #24
 801cb58:	46bd      	mov	sp, r7
 801cb5a:	bd80      	pop	{r7, pc}

0801cb5c <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 801cb5c:	b580      	push	{r7, lr}
 801cb5e:	b08a      	sub	sp, #40	@ 0x28
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	60f8      	str	r0, [r7, #12]
 801cb64:	60b9      	str	r1, [r7, #8]
 801cb66:	603b      	str	r3, [r7, #0]
 801cb68:	4613      	mov	r3, r2
 801cb6a:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 801cb6c:	2300      	movs	r3, #0
 801cb6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 801cb72:	2300      	movs	r3, #0
 801cb74:	61fb      	str	r3, [r7, #28]
 801cb76:	2300      	movs	r3, #0
 801cb78:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 801cb7a:	2228      	movs	r2, #40	@ 0x28
 801cb7c:	2100      	movs	r1, #0
 801cb7e:	6838      	ldr	r0, [r7, #0]
 801cb80:	f009 f9ea 	bl	8025f58 <memset>
  m->dgram.buf = (char *) buf;
 801cb84:	683b      	ldr	r3, [r7, #0]
 801cb86:	68fa      	ldr	r2, [r7, #12]
 801cb88:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 801cb8a:	68bb      	ldr	r3, [r7, #8]
 801cb8c:	2b01      	cmp	r3, #1
 801cb8e:	d801      	bhi.n	801cb94 <mg_mqtt_parse+0x38>
 801cb90:	2301      	movs	r3, #1
 801cb92:	e104      	b.n	801cd9e <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	781b      	ldrb	r3, [r3, #0]
 801cb98:	091b      	lsrs	r3, r3, #4
 801cb9a:	b2da      	uxtb	r2, r3
 801cb9c:	683b      	ldr	r3, [r7, #0]
 801cb9e:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 801cba0:	68fb      	ldr	r3, [r7, #12]
 801cba2:	781b      	ldrb	r3, [r3, #0]
 801cba4:	085b      	lsrs	r3, r3, #1
 801cba6:	b2db      	uxtb	r3, r3
 801cba8:	f003 0303 	and.w	r3, r3, #3
 801cbac:	b2da      	uxtb	r2, r3
 801cbae:	683b      	ldr	r3, [r7, #0]
 801cbb0:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 801cbb2:	2300      	movs	r3, #0
 801cbb4:	61bb      	str	r3, [r7, #24]
 801cbb6:	69bb      	ldr	r3, [r7, #24]
 801cbb8:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 801cbba:	68fb      	ldr	r3, [r7, #12]
 801cbbc:	3301      	adds	r3, #1
 801cbbe:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 801cbc0:	e01f      	b.n	801cc02 <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 801cbc2:	6a3b      	ldr	r3, [r7, #32]
 801cbc4:	1c5a      	adds	r2, r3, #1
 801cbc6:	623a      	str	r2, [r7, #32]
 801cbc8:	781b      	ldrb	r3, [r3, #0]
 801cbca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 801cbce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbd2:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 801cbd6:	69ba      	ldr	r2, [r7, #24]
 801cbd8:	4613      	mov	r3, r2
 801cbda:	00db      	lsls	r3, r3, #3
 801cbdc:	1a9b      	subs	r3, r3, r2
 801cbde:	fa01 f303 	lsl.w	r3, r1, r3
 801cbe2:	461a      	mov	r2, r3
 801cbe4:	69fb      	ldr	r3, [r7, #28]
 801cbe6:	4413      	add	r3, r2
 801cbe8:	61fb      	str	r3, [r7, #28]
    len_len++;
 801cbea:	69bb      	ldr	r3, [r7, #24]
 801cbec:	3301      	adds	r3, #1
 801cbee:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 801cbf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	da0c      	bge.n	801cc12 <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 801cbf8:	69bb      	ldr	r3, [r7, #24]
 801cbfa:	2b03      	cmp	r3, #3
 801cbfc:	d901      	bls.n	801cc02 <mg_mqtt_parse+0xa6>
 801cbfe:	2302      	movs	r3, #2
 801cc00:	e0cd      	b.n	801cd9e <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 801cc02:	6a3a      	ldr	r2, [r7, #32]
 801cc04:	68fb      	ldr	r3, [r7, #12]
 801cc06:	1ad3      	subs	r3, r2, r3
 801cc08:	461a      	mov	r2, r3
 801cc0a:	68bb      	ldr	r3, [r7, #8]
 801cc0c:	4293      	cmp	r3, r2
 801cc0e:	d8d8      	bhi.n	801cbc2 <mg_mqtt_parse+0x66>
 801cc10:	e000      	b.n	801cc14 <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 801cc12:	bf00      	nop
  }
  end = p + n;
 801cc14:	6a3a      	ldr	r2, [r7, #32]
 801cc16:	69fb      	ldr	r3, [r7, #28]
 801cc18:	4413      	add	r3, r2
 801cc1a:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 801cc1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	db05      	blt.n	801cc30 <mg_mqtt_parse+0xd4>
 801cc24:	68fa      	ldr	r2, [r7, #12]
 801cc26:	68bb      	ldr	r3, [r7, #8]
 801cc28:	4413      	add	r3, r2
 801cc2a:	697a      	ldr	r2, [r7, #20]
 801cc2c:	429a      	cmp	r2, r3
 801cc2e:	d901      	bls.n	801cc34 <mg_mqtt_parse+0xd8>
 801cc30:	2301      	movs	r3, #1
 801cc32:	e0b4      	b.n	801cd9e <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 801cc34:	697a      	ldr	r2, [r7, #20]
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	1ad3      	subs	r3, r2, r3
 801cc3a:	461a      	mov	r2, r3
 801cc3c:	683b      	ldr	r3, [r7, #0]
 801cc3e:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 801cc40:	683b      	ldr	r3, [r7, #0]
 801cc42:	7e9b      	ldrb	r3, [r3, #26]
 801cc44:	2b0b      	cmp	r3, #11
 801cc46:	f300 80a8 	bgt.w	801cd9a <mg_mqtt_parse+0x23e>
 801cc4a:	2b04      	cmp	r3, #4
 801cc4c:	da10      	bge.n	801cc70 <mg_mqtt_parse+0x114>
 801cc4e:	2b02      	cmp	r3, #2
 801cc50:	d002      	beq.n	801cc58 <mg_mqtt_parse+0xfc>
 801cc52:	2b03      	cmp	r3, #3
 801cc54:	d024      	beq.n	801cca0 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 801cc56:	e0a0      	b.n	801cd9a <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 801cc58:	697a      	ldr	r2, [r7, #20]
 801cc5a:	6a3b      	ldr	r3, [r7, #32]
 801cc5c:	1ad3      	subs	r3, r2, r3
 801cc5e:	2b01      	cmp	r3, #1
 801cc60:	dc01      	bgt.n	801cc66 <mg_mqtt_parse+0x10a>
 801cc62:	2302      	movs	r3, #2
 801cc64:	e09b      	b.n	801cd9e <mg_mqtt_parse+0x242>
      m->ack = p[1];
 801cc66:	6a3b      	ldr	r3, [r7, #32]
 801cc68:	785a      	ldrb	r2, [r3, #1]
 801cc6a:	683b      	ldr	r3, [r7, #0]
 801cc6c:	771a      	strb	r2, [r3, #28]
      break;
 801cc6e:	e095      	b.n	801cd9c <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 801cc70:	6a3b      	ldr	r3, [r7, #32]
 801cc72:	3302      	adds	r3, #2
 801cc74:	697a      	ldr	r2, [r7, #20]
 801cc76:	429a      	cmp	r2, r3
 801cc78:	d201      	bcs.n	801cc7e <mg_mqtt_parse+0x122>
 801cc7a:	2302      	movs	r3, #2
 801cc7c:	e08f      	b.n	801cd9e <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801cc7e:	6a3b      	ldr	r3, [r7, #32]
 801cc80:	781b      	ldrb	r3, [r3, #0]
 801cc82:	021b      	lsls	r3, r3, #8
 801cc84:	b21a      	sxth	r2, r3
 801cc86:	6a3b      	ldr	r3, [r7, #32]
 801cc88:	3301      	adds	r3, #1
 801cc8a:	781b      	ldrb	r3, [r3, #0]
 801cc8c:	b21b      	sxth	r3, r3
 801cc8e:	4313      	orrs	r3, r2
 801cc90:	b21b      	sxth	r3, r3
 801cc92:	b29a      	uxth	r2, r3
 801cc94:	683b      	ldr	r3, [r7, #0]
 801cc96:	831a      	strh	r2, [r3, #24]
      p += 2;
 801cc98:	6a3b      	ldr	r3, [r7, #32]
 801cc9a:	3302      	adds	r3, #2
 801cc9c:	623b      	str	r3, [r7, #32]
      break;
 801cc9e:	e07d      	b.n	801cd9c <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 801cca0:	6a3b      	ldr	r3, [r7, #32]
 801cca2:	3302      	adds	r3, #2
 801cca4:	697a      	ldr	r2, [r7, #20]
 801cca6:	429a      	cmp	r2, r3
 801cca8:	d201      	bcs.n	801ccae <mg_mqtt_parse+0x152>
 801ccaa:	2302      	movs	r3, #2
 801ccac:	e077      	b.n	801cd9e <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801ccae:	6a3b      	ldr	r3, [r7, #32]
 801ccb0:	781b      	ldrb	r3, [r3, #0]
 801ccb2:	021b      	lsls	r3, r3, #8
 801ccb4:	b21a      	sxth	r2, r3
 801ccb6:	6a3b      	ldr	r3, [r7, #32]
 801ccb8:	3301      	adds	r3, #1
 801ccba:	781b      	ldrb	r3, [r3, #0]
 801ccbc:	b21b      	sxth	r3, r3
 801ccbe:	4313      	orrs	r3, r2
 801ccc0:	b21b      	sxth	r3, r3
 801ccc2:	b29b      	uxth	r3, r3
 801ccc4:	461a      	mov	r2, r3
 801ccc6:	683b      	ldr	r3, [r7, #0]
 801ccc8:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 801ccca:	6a3b      	ldr	r3, [r7, #32]
 801cccc:	1c9a      	adds	r2, r3, #2
 801ccce:	683b      	ldr	r3, [r7, #0]
 801ccd0:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 801ccd2:	683b      	ldr	r3, [r7, #0]
 801ccd4:	685b      	ldr	r3, [r3, #4]
 801ccd6:	3302      	adds	r3, #2
 801ccd8:	6a3a      	ldr	r2, [r7, #32]
 801ccda:	4413      	add	r3, r2
 801ccdc:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801ccde:	6a3a      	ldr	r2, [r7, #32]
 801cce0:	697b      	ldr	r3, [r7, #20]
 801cce2:	429a      	cmp	r2, r3
 801cce4:	d901      	bls.n	801ccea <mg_mqtt_parse+0x18e>
 801cce6:	2302      	movs	r3, #2
 801cce8:	e059      	b.n	801cd9e <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 801ccea:	683b      	ldr	r3, [r7, #0]
 801ccec:	7edb      	ldrb	r3, [r3, #27]
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d016      	beq.n	801cd20 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 801ccf2:	6a3b      	ldr	r3, [r7, #32]
 801ccf4:	3302      	adds	r3, #2
 801ccf6:	697a      	ldr	r2, [r7, #20]
 801ccf8:	429a      	cmp	r2, r3
 801ccfa:	d201      	bcs.n	801cd00 <mg_mqtt_parse+0x1a4>
 801ccfc:	2302      	movs	r3, #2
 801ccfe:	e04e      	b.n	801cd9e <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801cd00:	6a3b      	ldr	r3, [r7, #32]
 801cd02:	781b      	ldrb	r3, [r3, #0]
 801cd04:	021b      	lsls	r3, r3, #8
 801cd06:	b21a      	sxth	r2, r3
 801cd08:	6a3b      	ldr	r3, [r7, #32]
 801cd0a:	3301      	adds	r3, #1
 801cd0c:	781b      	ldrb	r3, [r3, #0]
 801cd0e:	b21b      	sxth	r3, r3
 801cd10:	4313      	orrs	r3, r2
 801cd12:	b21b      	sxth	r3, r3
 801cd14:	b29a      	uxth	r2, r3
 801cd16:	683b      	ldr	r3, [r7, #0]
 801cd18:	831a      	strh	r2, [r3, #24]
        p += 2;
 801cd1a:	6a3b      	ldr	r3, [r7, #32]
 801cd1c:	3302      	adds	r3, #2
 801cd1e:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801cd20:	6a3a      	ldr	r2, [r7, #32]
 801cd22:	697b      	ldr	r3, [r7, #20]
 801cd24:	429a      	cmp	r2, r3
 801cd26:	d901      	bls.n	801cd2c <mg_mqtt_parse+0x1d0>
 801cd28:	2302      	movs	r3, #2
 801cd2a:	e038      	b.n	801cd9e <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 801cd2c:	79fb      	ldrb	r3, [r7, #7]
 801cd2e:	2b05      	cmp	r3, #5
 801cd30:	d123      	bne.n	801cd7a <mg_mqtt_parse+0x21e>
 801cd32:	6a3b      	ldr	r3, [r7, #32]
 801cd34:	3302      	adds	r3, #2
 801cd36:	697a      	ldr	r2, [r7, #20]
 801cd38:	429a      	cmp	r2, r3
 801cd3a:	d91e      	bls.n	801cd7a <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 801cd3c:	697a      	ldr	r2, [r7, #20]
 801cd3e:	6a3b      	ldr	r3, [r7, #32]
 801cd40:	1ad3      	subs	r3, r2, r3
 801cd42:	4619      	mov	r1, r3
 801cd44:	683b      	ldr	r3, [r7, #0]
 801cd46:	3324      	adds	r3, #36	@ 0x24
 801cd48:	461a      	mov	r2, r3
 801cd4a:	6a38      	ldr	r0, [r7, #32]
 801cd4c:	f7ff fa0f 	bl	801c16e <decode_varint>
 801cd50:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 801cd52:	69bb      	ldr	r3, [r7, #24]
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d101      	bne.n	801cd5c <mg_mqtt_parse+0x200>
 801cd58:	2302      	movs	r3, #2
 801cd5a:	e020      	b.n	801cd9e <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 801cd5c:	6a3a      	ldr	r2, [r7, #32]
 801cd5e:	69bb      	ldr	r3, [r7, #24]
 801cd60:	441a      	add	r2, r3
 801cd62:	68fb      	ldr	r3, [r7, #12]
 801cd64:	1ad3      	subs	r3, r2, r3
 801cd66:	461a      	mov	r2, r3
 801cd68:	683b      	ldr	r3, [r7, #0]
 801cd6a:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 801cd6c:	683b      	ldr	r3, [r7, #0]
 801cd6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cd70:	69bb      	ldr	r3, [r7, #24]
 801cd72:	4413      	add	r3, r2
 801cd74:	6a3a      	ldr	r2, [r7, #32]
 801cd76:	4413      	add	r3, r2
 801cd78:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801cd7a:	6a3a      	ldr	r2, [r7, #32]
 801cd7c:	697b      	ldr	r3, [r7, #20]
 801cd7e:	429a      	cmp	r2, r3
 801cd80:	d901      	bls.n	801cd86 <mg_mqtt_parse+0x22a>
 801cd82:	2302      	movs	r3, #2
 801cd84:	e00b      	b.n	801cd9e <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 801cd86:	683b      	ldr	r3, [r7, #0]
 801cd88:	6a3a      	ldr	r2, [r7, #32]
 801cd8a:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 801cd8c:	697a      	ldr	r2, [r7, #20]
 801cd8e:	6a3b      	ldr	r3, [r7, #32]
 801cd90:	1ad3      	subs	r3, r2, r3
 801cd92:	461a      	mov	r2, r3
 801cd94:	683b      	ldr	r3, [r7, #0]
 801cd96:	60da      	str	r2, [r3, #12]
      break;
 801cd98:	e000      	b.n	801cd9c <mg_mqtt_parse+0x240>
      break;
 801cd9a:	bf00      	nop
  }
  return MQTT_OK;
 801cd9c:	2300      	movs	r3, #0
}
 801cd9e:	4618      	mov	r0, r3
 801cda0:	3728      	adds	r7, #40	@ 0x28
 801cda2:	46bd      	mov	sp, r7
 801cda4:	bd80      	pop	{r7, pc}
	...

0801cda8 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 801cda8:	b590      	push	{r4, r7, lr}
 801cdaa:	b099      	sub	sp, #100	@ 0x64
 801cdac:	af02      	add	r7, sp, #8
 801cdae:	60f8      	str	r0, [r7, #12]
 801cdb0:	60b9      	str	r1, [r7, #8]
 801cdb2:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 801cdb4:	68bb      	ldr	r3, [r7, #8]
 801cdb6:	2b07      	cmp	r3, #7
 801cdb8:	f040 8124 	bne.w	801d004 <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 801cdbc:	68fb      	ldr	r3, [r7, #12]
 801cdbe:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cdc2:	f003 0304 	and.w	r3, r3, #4
 801cdc6:	b2db      	uxtb	r3, r3
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d001      	beq.n	801cdd0 <mqtt_cb+0x28>
 801cdcc:	2305      	movs	r3, #5
 801cdce:	e000      	b.n	801cdd2 <mqtt_cb+0x2a>
 801cdd0:	2304      	movs	r3, #4
 801cdd2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 801cdd6:	68fb      	ldr	r3, [r7, #12]
 801cdd8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801cdda:	68fb      	ldr	r3, [r7, #12]
 801cddc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801cdde:	f107 0314 	add.w	r3, r7, #20
 801cde2:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801cde6:	f7ff feb9 	bl	801cb5c <mg_mqtt_parse>
 801cdea:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 801cdec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cdee:	2b02      	cmp	r3, #2
 801cdf0:	d118      	bne.n	801ce24 <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 801cdf2:	4b86      	ldr	r3, [pc, #536]	@ (801d00c <mqtt_cb+0x264>)
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	dd0c      	ble.n	801ce14 <mqtt_cb+0x6c>
 801cdfa:	4b85      	ldr	r3, [pc, #532]	@ (801d010 <mqtt_cb+0x268>)
 801cdfc:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 801ce00:	4984      	ldr	r1, [pc, #528]	@ (801d014 <mqtt_cb+0x26c>)
 801ce02:	2001      	movs	r0, #1
 801ce04:	f7fe f812 	bl	801ae2c <mg_log_prefix>
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ce0c:	4619      	mov	r1, r3
 801ce0e:	4882      	ldr	r0, [pc, #520]	@ (801d018 <mqtt_cb+0x270>)
 801ce10:	f7fe f85c 	bl	801aecc <mg_log>
        c->is_closing = 1;
 801ce14:	68fa      	ldr	r2, [r7, #12]
 801ce16:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801ce1a:	f043 0320 	orr.w	r3, r3, #32
 801ce1e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 801ce22:	e0ef      	b.n	801d004 <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 801ce24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	f040 80eb 	bne.w	801d002 <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 801ce2c:	4b77      	ldr	r3, [pc, #476]	@ (801d00c <mqtt_cb+0x264>)
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	2b03      	cmp	r3, #3
 801ce32:	dd17      	ble.n	801ce64 <mqtt_cb+0xbc>
 801ce34:	4b76      	ldr	r3, [pc, #472]	@ (801d010 <mqtt_cb+0x268>)
 801ce36:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 801ce3a:	4976      	ldr	r1, [pc, #472]	@ (801d014 <mqtt_cb+0x26c>)
 801ce3c:	2004      	movs	r0, #4
 801ce3e:	f7fd fff5 	bl	801ae2c <mg_log_prefix>
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801ce46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801ce4a:	4618      	mov	r0, r3
 801ce4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce4e:	461c      	mov	r4, r3
 801ce50:	6a3b      	ldr	r3, [r7, #32]
 801ce52:	461a      	mov	r2, r3
 801ce54:	69fb      	ldr	r3, [r7, #28]
 801ce56:	9301      	str	r3, [sp, #4]
 801ce58:	9200      	str	r2, [sp, #0]
 801ce5a:	4623      	mov	r3, r4
 801ce5c:	4602      	mov	r2, r0
 801ce5e:	486f      	ldr	r0, [pc, #444]	@ (801d01c <mqtt_cb+0x274>)
 801ce60:	f7fe f834 	bl	801aecc <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 801ce64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801ce68:	3b02      	subs	r3, #2
 801ce6a:	2b04      	cmp	r3, #4
 801ce6c:	f200 80ba 	bhi.w	801cfe4 <mqtt_cb+0x23c>
 801ce70:	a201      	add	r2, pc, #4	@ (adr r2, 801ce78 <mqtt_cb+0xd0>)
 801ce72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce76:	bf00      	nop
 801ce78:	0801ce8d 	.word	0x0801ce8d
 801ce7c:	0801cf01 	.word	0x0801cf01
 801ce80:	0801cfe5 	.word	0x0801cfe5
 801ce84:	0801cf8b 	.word	0x0801cf8b
 801ce88:	0801cfb7 	.word	0x0801cfb7
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 801ce8c:	f107 0314 	add.w	r3, r7, #20
 801ce90:	331c      	adds	r3, #28
 801ce92:	461a      	mov	r2, r3
 801ce94:	2111      	movs	r1, #17
 801ce96:	68f8      	ldr	r0, [r7, #12]
 801ce98:	f7f8 fbe2 	bl	8015660 <mg_call>
            if (mm.ack == 0) {
 801ce9c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d112      	bne.n	801ceca <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 801cea4:	4b59      	ldr	r3, [pc, #356]	@ (801d00c <mqtt_cb+0x264>)
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	2b02      	cmp	r3, #2
 801ceaa:	f340 809a 	ble.w	801cfe2 <mqtt_cb+0x23a>
 801ceae:	4b58      	ldr	r3, [pc, #352]	@ (801d010 <mqtt_cb+0x268>)
 801ceb0:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 801ceb4:	4957      	ldr	r1, [pc, #348]	@ (801d014 <mqtt_cb+0x26c>)
 801ceb6:	2003      	movs	r0, #3
 801ceb8:	f7fd ffb8 	bl	801ae2c <mg_log_prefix>
 801cebc:	68fb      	ldr	r3, [r7, #12]
 801cebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cec0:	4619      	mov	r1, r3
 801cec2:	4857      	ldr	r0, [pc, #348]	@ (801d020 <mqtt_cb+0x278>)
 801cec4:	f7fe f802 	bl	801aecc <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 801cec8:	e08b      	b.n	801cfe2 <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 801ceca:	4b50      	ldr	r3, [pc, #320]	@ (801d00c <mqtt_cb+0x264>)
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	2b00      	cmp	r3, #0
 801ced0:	dd0e      	ble.n	801cef0 <mqtt_cb+0x148>
 801ced2:	4b4f      	ldr	r3, [pc, #316]	@ (801d010 <mqtt_cb+0x268>)
 801ced4:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 801ced8:	494e      	ldr	r1, [pc, #312]	@ (801d014 <mqtt_cb+0x26c>)
 801ceda:	2001      	movs	r0, #1
 801cedc:	f7fd ffa6 	bl	801ae2c <mg_log_prefix>
 801cee0:	68fb      	ldr	r3, [r7, #12]
 801cee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cee4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801cee8:	4619      	mov	r1, r3
 801ceea:	484e      	ldr	r0, [pc, #312]	@ (801d024 <mqtt_cb+0x27c>)
 801ceec:	f7fd ffee 	bl	801aecc <mg_log>
              c->is_closing = 1;
 801cef0:	68fa      	ldr	r2, [r7, #12]
 801cef2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801cef6:	f043 0320 	orr.w	r3, r3, #32
 801cefa:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 801cefe:	e070      	b.n	801cfe2 <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 801cf00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	d038      	beq.n	801cf7a <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 801cf08:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801cf0a:	4618      	mov	r0, r3
 801cf0c:	f005 fc35 	bl	802277a <mg_ntohs>
 801cf10:	4603      	mov	r3, r0
 801cf12:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 801cf16:	2302      	movs	r3, #2
 801cf18:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 801cf1a:	68fb      	ldr	r3, [r7, #12]
 801cf1c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cf20:	f003 0304 	and.w	r3, r3, #4
 801cf24:	b2db      	uxtb	r3, r3
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d002      	beq.n	801cf30 <mqtt_cb+0x188>
 801cf2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cf2c:	3302      	adds	r3, #2
 801cf2e:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 801cf30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 801cf34:	2b02      	cmp	r3, #2
 801cf36:	d101      	bne.n	801cf3c <mqtt_cb+0x194>
 801cf38:	2105      	movs	r1, #5
 801cf3a:	e000      	b.n	801cf3e <mqtt_cb+0x196>
 801cf3c:	2104      	movs	r1, #4
 801cf3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cf40:	2200      	movs	r2, #0
 801cf42:	68f8      	ldr	r0, [r7, #12]
 801cf44:	f7ff f872 	bl	801c02c <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 801cf48:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 801cf4c:	2202      	movs	r2, #2
 801cf4e:	4619      	mov	r1, r3
 801cf50:	68f8      	ldr	r0, [r7, #12]
 801cf52:	f003 fe99 	bl	8020c88 <mg_send>

              if (c->is_mqtt5) {
 801cf56:	68fb      	ldr	r3, [r7, #12]
 801cf58:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cf5c:	f003 0304 	and.w	r3, r3, #4
 801cf60:	b2db      	uxtb	r3, r3
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d009      	beq.n	801cf7a <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 801cf66:	2300      	movs	r3, #0
 801cf68:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 801cf6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801cf70:	2202      	movs	r2, #2
 801cf72:	4619      	mov	r1, r3
 801cf74:	68f8      	ldr	r0, [r7, #12]
 801cf76:	f003 fe87 	bl	8020c88 <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 801cf7a:	f107 0314 	add.w	r3, r7, #20
 801cf7e:	461a      	mov	r2, r3
 801cf80:	2110      	movs	r1, #16
 801cf82:	68f8      	ldr	r0, [r7, #12]
 801cf84:	f7f8 fb6c 	bl	8015660 <mg_call>
            break;
 801cf88:	e02c      	b.n	801cfe4 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 801cf8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801cf8c:	4618      	mov	r0, r3
 801cf8e:	f005 fbf4 	bl	802277a <mg_ntohs>
 801cf92:	4603      	mov	r3, r0
 801cf94:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 801cf96:	2302      	movs	r3, #2
 801cf98:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 801cf9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cf9c:	2202      	movs	r2, #2
 801cf9e:	2106      	movs	r1, #6
 801cfa0:	68f8      	ldr	r0, [r7, #12]
 801cfa2:	f7ff f843 	bl	801c02c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 801cfa6:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 801cfaa:	2202      	movs	r2, #2
 801cfac:	4619      	mov	r1, r3
 801cfae:	68f8      	ldr	r0, [r7, #12]
 801cfb0:	f003 fe6a 	bl	8020c88 <mg_send>
            break;
 801cfb4:	e016      	b.n	801cfe4 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 801cfb6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801cfb8:	4618      	mov	r0, r3
 801cfba:	f005 fbde 	bl	802277a <mg_ntohs>
 801cfbe:	4603      	mov	r3, r0
 801cfc0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 801cfc2:	2302      	movs	r3, #2
 801cfc4:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 801cfc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cfc8:	2200      	movs	r2, #0
 801cfca:	2107      	movs	r1, #7
 801cfcc:	68f8      	ldr	r0, [r7, #12]
 801cfce:	f7ff f82d 	bl	801c02c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 801cfd2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801cfd6:	2202      	movs	r2, #2
 801cfd8:	4619      	mov	r1, r3
 801cfda:	68f8      	ldr	r0, [r7, #12]
 801cfdc:	f003 fe54 	bl	8020c88 <mg_send>
            break;
 801cfe0:	e000      	b.n	801cfe4 <mqtt_cb+0x23c>
            break;
 801cfe2:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 801cfe4:	f107 0314 	add.w	r3, r7, #20
 801cfe8:	461a      	mov	r2, r3
 801cfea:	210f      	movs	r1, #15
 801cfec:	68f8      	ldr	r0, [r7, #12]
 801cfee:	f7f8 fb37 	bl	8015660 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	3338      	adds	r3, #56	@ 0x38
 801cff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cff8:	2100      	movs	r1, #0
 801cffa:	4618      	mov	r0, r3
 801cffc:	f7fd f804 	bl	801a008 <mg_iobuf_del>
    for (;;) {
 801d000:	e6dc      	b.n	801cdbc <mqtt_cb+0x14>
      } else {
        break;
 801d002:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 801d004:	bf00      	nop
 801d006:	375c      	adds	r7, #92	@ 0x5c
 801d008:	46bd      	mov	sp, r7
 801d00a:	bd90      	pop	{r4, r7, pc}
 801d00c:	20000298 	.word	0x20000298
 801d010:	08033e74 	.word	0x08033e74
 801d014:	080310b8 	.word	0x080310b8
 801d018:	08032560 	.word	0x08032560
 801d01c:	0803257c 	.word	0x0803257c
 801d020:	0803259c 	.word	0x0803259c
 801d024:	080325ac 	.word	0x080325ac

0801d028 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 801d028:	b580      	push	{r7, lr}
 801d02a:	b096      	sub	sp, #88	@ 0x58
 801d02c:	af00      	add	r7, sp, #0
 801d02e:	60f8      	str	r0, [r7, #12]
 801d030:	60b9      	str	r1, [r7, #8]
 801d032:	607a      	str	r2, [r7, #4]
 801d034:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 801d036:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d038:	683a      	ldr	r2, [r7, #0]
 801d03a:	68b9      	ldr	r1, [r7, #8]
 801d03c:	68f8      	ldr	r0, [r7, #12]
 801d03e:	f000 fb5f 	bl	801d700 <mg_connect>
 801d042:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 801d044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d046:	2b00      	cmp	r3, #0
 801d048:	d015      	beq.n	801d076 <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 801d04a:	f107 0314 	add.w	r3, r7, #20
 801d04e:	2240      	movs	r2, #64	@ 0x40
 801d050:	2100      	movs	r1, #0
 801d052:	4618      	mov	r0, r3
 801d054:	f008 ff80 	bl	8025f58 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	d102      	bne.n	801d064 <mg_mqtt_connect+0x3c>
 801d05e:	f107 0314 	add.w	r3, r7, #20
 801d062:	e000      	b.n	801d066 <mg_mqtt_connect+0x3e>
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	4619      	mov	r1, r3
 801d068:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801d06a:	f7ff fad1 	bl	801c610 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 801d06e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d070:	4a03      	ldr	r2, [pc, #12]	@ (801d080 <mg_mqtt_connect+0x58>)
 801d072:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 801d076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 801d078:	4618      	mov	r0, r3
 801d07a:	3758      	adds	r7, #88	@ 0x58
 801d07c:	46bd      	mov	sp, r7
 801d07e:	bd80      	pop	{r7, pc}
 801d080:	0801cda9 	.word	0x0801cda9

0801d084 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 801d084:	b580      	push	{r7, lr}
 801d086:	b086      	sub	sp, #24
 801d088:	af00      	add	r7, sp, #0
 801d08a:	60f8      	str	r0, [r7, #12]
 801d08c:	60b9      	str	r1, [r7, #8]
 801d08e:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d094:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 801d096:	68fb      	ldr	r3, [r7, #12]
 801d098:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	68ba      	ldr	r2, [r7, #8]
 801d0a0:	4805      	ldr	r0, [pc, #20]	@ (801d0b8 <mg_vprintf+0x34>)
 801d0a2:	f7f9 f80f 	bl	80160c4 <mg_vxprintf>
  return c->send.len - old;
 801d0a6:	68fb      	ldr	r3, [r7, #12]
 801d0a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d0aa:	697b      	ldr	r3, [r7, #20]
 801d0ac:	1ad3      	subs	r3, r2, r3
}
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	3718      	adds	r7, #24
 801d0b2:	46bd      	mov	sp, r7
 801d0b4:	bd80      	pop	{r7, pc}
 801d0b6:	bf00      	nop
 801d0b8:	08020df5 	.word	0x08020df5

0801d0bc <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 801d0bc:	b40e      	push	{r1, r2, r3}
 801d0be:	b580      	push	{r7, lr}
 801d0c0:	b085      	sub	sp, #20
 801d0c2:	af00      	add	r7, sp, #0
 801d0c4:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 801d0c6:	2300      	movs	r3, #0
 801d0c8:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 801d0ca:	f107 0320 	add.w	r3, r7, #32
 801d0ce:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 801d0d0:	f107 0308 	add.w	r3, r7, #8
 801d0d4:	461a      	mov	r2, r3
 801d0d6:	69f9      	ldr	r1, [r7, #28]
 801d0d8:	6878      	ldr	r0, [r7, #4]
 801d0da:	f7ff ffd3 	bl	801d084 <mg_vprintf>
 801d0de:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 801d0e0:	68fb      	ldr	r3, [r7, #12]
}
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	3714      	adds	r7, #20
 801d0e6:	46bd      	mov	sp, r7
 801d0e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d0ec:	b003      	add	sp, #12
 801d0ee:	4770      	bx	lr

0801d0f0 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b088      	sub	sp, #32
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	f107 0308 	add.w	r3, r7, #8
 801d0fa:	e883 0003 	stmia.w	r3, {r0, r1}
 801d0fe:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 801d100:	4811      	ldr	r0, [pc, #68]	@ (801d148 <mg_atonl+0x58>)
 801d102:	f005 fb21 	bl	8022748 <mg_ntohl>
 801d106:	4603      	mov	r3, r0
 801d108:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 801d10a:	f107 0318 	add.w	r3, r7, #24
 801d10e:	490f      	ldr	r1, [pc, #60]	@ (801d14c <mg_atonl+0x5c>)
 801d110:	4618      	mov	r0, r3
 801d112:	f004 fb8f 	bl	8021834 <mg_str_s>
 801d116:	f107 0318 	add.w	r3, r7, #24
 801d11a:	cb0c      	ldmia	r3, {r2, r3}
 801d11c:	f107 0108 	add.w	r1, r7, #8
 801d120:	c903      	ldmia	r1, {r0, r1}
 801d122:	f004 fc13 	bl	802194c <mg_strcasecmp>
 801d126:	4603      	mov	r3, r0
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d001      	beq.n	801d130 <mg_atonl+0x40>
 801d12c:	2300      	movs	r3, #0
 801d12e:	e006      	b.n	801d13e <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	697a      	ldr	r2, [r7, #20]
 801d134:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	2200      	movs	r2, #0
 801d13a:	74da      	strb	r2, [r3, #19]
  return true;
 801d13c:	2301      	movs	r3, #1
}
 801d13e:	4618      	mov	r0, r3
 801d140:	3720      	adds	r7, #32
 801d142:	46bd      	mov	sp, r7
 801d144:	bd80      	pop	{r7, pc}
 801d146:	bf00      	nop
 801d148:	7f000001 	.word	0x7f000001
 801d14c:	080325cc 	.word	0x080325cc

0801d150 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 801d150:	b580      	push	{r7, lr}
 801d152:	b084      	sub	sp, #16
 801d154:	af00      	add	r7, sp, #0
 801d156:	f107 0308 	add.w	r3, r7, #8
 801d15a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d15e:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 801d160:	68fb      	ldr	r3, [r7, #12]
 801d162:	2b00      	cmp	r3, #0
 801d164:	d001      	beq.n	801d16a <mg_atone+0x1a>
 801d166:	2300      	movs	r3, #0
 801d168:	e009      	b.n	801d17e <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	2210      	movs	r2, #16
 801d16e:	2100      	movs	r1, #0
 801d170:	4618      	mov	r0, r3
 801d172:	f008 fef1 	bl	8025f58 <memset>
  addr->is_ip6 = false;
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	2200      	movs	r2, #0
 801d17a:	74da      	strb	r2, [r3, #19]
  return true;
 801d17c:	2301      	movs	r3, #1
}
 801d17e:	4618      	mov	r0, r3
 801d180:	3710      	adds	r7, #16
 801d182:	46bd      	mov	sp, r7
 801d184:	bd80      	pop	{r7, pc}

0801d186 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 801d186:	b480      	push	{r7}
 801d188:	b089      	sub	sp, #36	@ 0x24
 801d18a:	af00      	add	r7, sp, #0
 801d18c:	f107 0308 	add.w	r3, r7, #8
 801d190:	e883 0003 	stmia.w	r3, {r0, r1}
 801d194:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 801d196:	2300      	movs	r3, #0
 801d198:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 801d19a:	2300      	movs	r3, #0
 801d19c:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 801d19e:	2300      	movs	r3, #0
 801d1a0:	61fb      	str	r3, [r7, #28]
 801d1a2:	e049      	b.n	801d238 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801d1a4:	68ba      	ldr	r2, [r7, #8]
 801d1a6:	69fb      	ldr	r3, [r7, #28]
 801d1a8:	4413      	add	r3, r2
 801d1aa:	781b      	ldrb	r3, [r3, #0]
 801d1ac:	2b2f      	cmp	r3, #47	@ 0x2f
 801d1ae:	d925      	bls.n	801d1fc <mg_aton4+0x76>
 801d1b0:	68ba      	ldr	r2, [r7, #8]
 801d1b2:	69fb      	ldr	r3, [r7, #28]
 801d1b4:	4413      	add	r3, r2
 801d1b6:	781b      	ldrb	r3, [r3, #0]
 801d1b8:	2b39      	cmp	r3, #57	@ 0x39
 801d1ba:	d81f      	bhi.n	801d1fc <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 801d1bc:	f107 0210 	add.w	r2, r7, #16
 801d1c0:	69bb      	ldr	r3, [r7, #24]
 801d1c2:	4413      	add	r3, r2
 801d1c4:	781b      	ldrb	r3, [r3, #0]
 801d1c6:	461a      	mov	r2, r3
 801d1c8:	4613      	mov	r3, r2
 801d1ca:	009b      	lsls	r3, r3, #2
 801d1cc:	4413      	add	r3, r2
 801d1ce:	005b      	lsls	r3, r3, #1
 801d1d0:	4619      	mov	r1, r3
 801d1d2:	68ba      	ldr	r2, [r7, #8]
 801d1d4:	69fb      	ldr	r3, [r7, #28]
 801d1d6:	4413      	add	r3, r2
 801d1d8:	781b      	ldrb	r3, [r3, #0]
 801d1da:	3b30      	subs	r3, #48	@ 0x30
 801d1dc:	440b      	add	r3, r1
 801d1de:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 801d1e0:	697b      	ldr	r3, [r7, #20]
 801d1e2:	2bff      	cmp	r3, #255	@ 0xff
 801d1e4:	dd01      	ble.n	801d1ea <mg_aton4+0x64>
 801d1e6:	2300      	movs	r3, #0
 801d1e8:	e03d      	b.n	801d266 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 801d1ea:	697b      	ldr	r3, [r7, #20]
 801d1ec:	b2d9      	uxtb	r1, r3
 801d1ee:	f107 0210 	add.w	r2, r7, #16
 801d1f2:	69bb      	ldr	r3, [r7, #24]
 801d1f4:	4413      	add	r3, r2
 801d1f6:	460a      	mov	r2, r1
 801d1f8:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801d1fa:	e01a      	b.n	801d232 <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 801d1fc:	68ba      	ldr	r2, [r7, #8]
 801d1fe:	69fb      	ldr	r3, [r7, #28]
 801d200:	4413      	add	r3, r2
 801d202:	781b      	ldrb	r3, [r3, #0]
 801d204:	2b2e      	cmp	r3, #46	@ 0x2e
 801d206:	d112      	bne.n	801d22e <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 801d208:	69bb      	ldr	r3, [r7, #24]
 801d20a:	2b02      	cmp	r3, #2
 801d20c:	d809      	bhi.n	801d222 <mg_aton4+0x9c>
 801d20e:	69fb      	ldr	r3, [r7, #28]
 801d210:	2b00      	cmp	r3, #0
 801d212:	d006      	beq.n	801d222 <mg_aton4+0x9c>
 801d214:	68ba      	ldr	r2, [r7, #8]
 801d216:	69fb      	ldr	r3, [r7, #28]
 801d218:	3b01      	subs	r3, #1
 801d21a:	4413      	add	r3, r2
 801d21c:	781b      	ldrb	r3, [r3, #0]
 801d21e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d220:	d101      	bne.n	801d226 <mg_aton4+0xa0>
 801d222:	2300      	movs	r3, #0
 801d224:	e01f      	b.n	801d266 <mg_aton4+0xe0>
      num_dots++;
 801d226:	69bb      	ldr	r3, [r7, #24]
 801d228:	3301      	adds	r3, #1
 801d22a:	61bb      	str	r3, [r7, #24]
 801d22c:	e001      	b.n	801d232 <mg_aton4+0xac>
    } else {
      return false;
 801d22e:	2300      	movs	r3, #0
 801d230:	e019      	b.n	801d266 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 801d232:	69fb      	ldr	r3, [r7, #28]
 801d234:	3301      	adds	r3, #1
 801d236:	61fb      	str	r3, [r7, #28]
 801d238:	68fb      	ldr	r3, [r7, #12]
 801d23a:	69fa      	ldr	r2, [r7, #28]
 801d23c:	429a      	cmp	r2, r3
 801d23e:	d3b1      	bcc.n	801d1a4 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 801d240:	69bb      	ldr	r3, [r7, #24]
 801d242:	2b03      	cmp	r3, #3
 801d244:	d106      	bne.n	801d254 <mg_aton4+0xce>
 801d246:	68ba      	ldr	r2, [r7, #8]
 801d248:	69fb      	ldr	r3, [r7, #28]
 801d24a:	3b01      	subs	r3, #1
 801d24c:	4413      	add	r3, r2
 801d24e:	781b      	ldrb	r3, [r3, #0]
 801d250:	2b2e      	cmp	r3, #46	@ 0x2e
 801d252:	d101      	bne.n	801d258 <mg_aton4+0xd2>
 801d254:	2300      	movs	r3, #0
 801d256:	e006      	b.n	801d266 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	693a      	ldr	r2, [r7, #16]
 801d25c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	2200      	movs	r2, #0
 801d262:	74da      	strb	r2, [r3, #19]
  return true;
 801d264:	2301      	movs	r3, #1
}
 801d266:	4618      	mov	r0, r3
 801d268:	3724      	adds	r7, #36	@ 0x24
 801d26a:	46bd      	mov	sp, r7
 801d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d270:	4770      	bx	lr

0801d272 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 801d272:	b580      	push	{r7, lr}
 801d274:	b088      	sub	sp, #32
 801d276:	af00      	add	r7, sp, #0
 801d278:	f107 0308 	add.w	r3, r7, #8
 801d27c:	e883 0003 	stmia.w	r3, {r0, r1}
 801d280:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	2b0d      	cmp	r3, #13
 801d286:	d801      	bhi.n	801d28c <mg_v4mapped+0x1a>
 801d288:	2300      	movs	r3, #0
 801d28a:	e056      	b.n	801d33a <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 801d28c:	68bb      	ldr	r3, [r7, #8]
 801d28e:	781b      	ldrb	r3, [r3, #0]
 801d290:	2b3a      	cmp	r3, #58	@ 0x3a
 801d292:	d109      	bne.n	801d2a8 <mg_v4mapped+0x36>
 801d294:	68bb      	ldr	r3, [r7, #8]
 801d296:	3301      	adds	r3, #1
 801d298:	781b      	ldrb	r3, [r3, #0]
 801d29a:	2b3a      	cmp	r3, #58	@ 0x3a
 801d29c:	d104      	bne.n	801d2a8 <mg_v4mapped+0x36>
 801d29e:	68bb      	ldr	r3, [r7, #8]
 801d2a0:	3306      	adds	r3, #6
 801d2a2:	781b      	ldrb	r3, [r3, #0]
 801d2a4:	2b3a      	cmp	r3, #58	@ 0x3a
 801d2a6:	d001      	beq.n	801d2ac <mg_v4mapped+0x3a>
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	e046      	b.n	801d33a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 801d2ac:	2302      	movs	r3, #2
 801d2ae:	61fb      	str	r3, [r7, #28]
 801d2b0:	e010      	b.n	801d2d4 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 801d2b2:	68ba      	ldr	r2, [r7, #8]
 801d2b4:	69fb      	ldr	r3, [r7, #28]
 801d2b6:	4413      	add	r3, r2
 801d2b8:	781b      	ldrb	r3, [r3, #0]
 801d2ba:	2b66      	cmp	r3, #102	@ 0x66
 801d2bc:	d007      	beq.n	801d2ce <mg_v4mapped+0x5c>
 801d2be:	68ba      	ldr	r2, [r7, #8]
 801d2c0:	69fb      	ldr	r3, [r7, #28]
 801d2c2:	4413      	add	r3, r2
 801d2c4:	781b      	ldrb	r3, [r3, #0]
 801d2c6:	2b46      	cmp	r3, #70	@ 0x46
 801d2c8:	d001      	beq.n	801d2ce <mg_v4mapped+0x5c>
 801d2ca:	2300      	movs	r3, #0
 801d2cc:	e035      	b.n	801d33a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 801d2ce:	69fb      	ldr	r3, [r7, #28]
 801d2d0:	3301      	adds	r3, #1
 801d2d2:	61fb      	str	r3, [r7, #28]
 801d2d4:	69fb      	ldr	r3, [r7, #28]
 801d2d6:	2b05      	cmp	r3, #5
 801d2d8:	ddeb      	ble.n	801d2b2 <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 801d2da:	68bb      	ldr	r3, [r7, #8]
 801d2dc:	1dd9      	adds	r1, r3, #7
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	1fda      	subs	r2, r3, #7
 801d2e2:	f107 0314 	add.w	r3, r7, #20
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	f004 fac1 	bl	802186e <mg_str_n>
 801d2ec:	687a      	ldr	r2, [r7, #4]
 801d2ee:	f107 0314 	add.w	r3, r7, #20
 801d2f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d2f6:	f7ff ff46 	bl	801d186 <mg_aton4>
 801d2fa:	4603      	mov	r3, r0
 801d2fc:	f083 0301 	eor.w	r3, r3, #1
 801d300:	b2db      	uxtb	r3, r3
 801d302:	2b00      	cmp	r3, #0
 801d304:	d001      	beq.n	801d30a <mg_v4mapped+0x98>
 801d306:	2300      	movs	r3, #0
 801d308:	e017      	b.n	801d33a <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	681b      	ldr	r3, [r3, #0]
 801d30e:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	2210      	movs	r2, #16
 801d314:	2100      	movs	r1, #0
 801d316:	4618      	mov	r0, r3
 801d318:	f008 fe1e 	bl	8025f58 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	22ff      	movs	r2, #255	@ 0xff
 801d320:	72da      	strb	r2, [r3, #11]
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	7ada      	ldrb	r2, [r3, #11]
 801d326:	687b      	ldr	r3, [r7, #4]
 801d328:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	330c      	adds	r3, #12
 801d32e:	693a      	ldr	r2, [r7, #16]
 801d330:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	2201      	movs	r2, #1
 801d336:	74da      	strb	r2, [r3, #19]
  return true;
 801d338:	2301      	movs	r3, #1
}
 801d33a:	4618      	mov	r0, r3
 801d33c:	3720      	adds	r7, #32
 801d33e:	46bd      	mov	sp, r7
 801d340:	bd80      	pop	{r7, pc}

0801d342 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 801d342:	b580      	push	{r7, lr}
 801d344:	b090      	sub	sp, #64	@ 0x40
 801d346:	af02      	add	r7, sp, #8
 801d348:	f107 0308 	add.w	r3, r7, #8
 801d34c:	e883 0003 	stmia.w	r3, {r0, r1}
 801d350:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 801d352:	2300      	movs	r3, #0
 801d354:	633b      	str	r3, [r7, #48]	@ 0x30
 801d356:	2300      	movs	r3, #0
 801d358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d35a:	232a      	movs	r3, #42	@ 0x2a
 801d35c:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	2200      	movs	r2, #0
 801d362:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	2b02      	cmp	r3, #2
 801d368:	d909      	bls.n	801d37e <mg_aton6+0x3c>
 801d36a:	68bb      	ldr	r3, [r7, #8]
 801d36c:	781b      	ldrb	r3, [r3, #0]
 801d36e:	2b5b      	cmp	r3, #91	@ 0x5b
 801d370:	d105      	bne.n	801d37e <mg_aton6+0x3c>
 801d372:	68bb      	ldr	r3, [r7, #8]
 801d374:	3301      	adds	r3, #1
 801d376:	60bb      	str	r3, [r7, #8]
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	3b02      	subs	r3, #2
 801d37c:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 801d37e:	687a      	ldr	r2, [r7, #4]
 801d380:	f107 0308 	add.w	r3, r7, #8
 801d384:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d388:	f7ff ff73 	bl	801d272 <mg_v4mapped>
 801d38c:	4603      	mov	r3, r0
 801d38e:	2b00      	cmp	r3, #0
 801d390:	d001      	beq.n	801d396 <mg_aton6+0x54>
 801d392:	2301      	movs	r3, #1
 801d394:	e0e1      	b.n	801d55a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 801d396:	2300      	movs	r3, #0
 801d398:	637b      	str	r3, [r7, #52]	@ 0x34
 801d39a:	e0b0      	b.n	801d4fe <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 801d39c:	68ba      	ldr	r2, [r7, #8]
 801d39e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3a0:	4413      	add	r3, r2
 801d3a2:	781b      	ldrb	r3, [r3, #0]
 801d3a4:	2b2f      	cmp	r3, #47	@ 0x2f
 801d3a6:	d905      	bls.n	801d3b4 <mg_aton6+0x72>
 801d3a8:	68ba      	ldr	r2, [r7, #8]
 801d3aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3ac:	4413      	add	r3, r2
 801d3ae:	781b      	ldrb	r3, [r3, #0]
 801d3b0:	2b39      	cmp	r3, #57	@ 0x39
 801d3b2:	d917      	bls.n	801d3e4 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801d3b4:	68ba      	ldr	r2, [r7, #8]
 801d3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3b8:	4413      	add	r3, r2
 801d3ba:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 801d3bc:	2b60      	cmp	r3, #96	@ 0x60
 801d3be:	d905      	bls.n	801d3cc <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801d3c0:	68ba      	ldr	r2, [r7, #8]
 801d3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3c4:	4413      	add	r3, r2
 801d3c6:	781b      	ldrb	r3, [r3, #0]
 801d3c8:	2b66      	cmp	r3, #102	@ 0x66
 801d3ca:	d90b      	bls.n	801d3e4 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801d3cc:	68ba      	ldr	r2, [r7, #8]
 801d3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3d0:	4413      	add	r3, r2
 801d3d2:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801d3d4:	2b40      	cmp	r3, #64	@ 0x40
 801d3d6:	d933      	bls.n	801d440 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801d3d8:	68ba      	ldr	r2, [r7, #8]
 801d3da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3dc:	4413      	add	r3, r2
 801d3de:	781b      	ldrb	r3, [r3, #0]
 801d3e0:	2b46      	cmp	r3, #70	@ 0x46
 801d3e2:	d82d      	bhi.n	801d440 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 801d3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d3ea:	3303      	adds	r3, #3
 801d3ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d3ee:	429a      	cmp	r2, r3
 801d3f0:	d901      	bls.n	801d3f6 <mg_aton6+0xb4>
 801d3f2:	2300      	movs	r3, #0
 801d3f4:	e0b1      	b.n	801d55a <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 801d3f6:	68ba      	ldr	r2, [r7, #8]
 801d3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d3fa:	18d1      	adds	r1, r2, r3
 801d3fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d400:	1ad3      	subs	r3, r2, r3
 801d402:	1c5a      	adds	r2, r3, #1
 801d404:	f107 0318 	add.w	r3, r7, #24
 801d408:	4618      	mov	r0, r3
 801d40a:	f004 fa30 	bl	802186e <mg_str_n>
 801d40e:	f107 0314 	add.w	r3, r7, #20
 801d412:	2204      	movs	r2, #4
 801d414:	9200      	str	r2, [sp, #0]
 801d416:	2210      	movs	r2, #16
 801d418:	f107 0118 	add.w	r1, r7, #24
 801d41c:	c903      	ldmia	r1, {r0, r1}
 801d41e:	f004 fc2d 	bl	8021c7c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 801d422:	697b      	ldr	r3, [r7, #20]
 801d424:	0a1b      	lsrs	r3, r3, #8
 801d426:	b2d9      	uxtb	r1, r3
 801d428:	687a      	ldr	r2, [r7, #4]
 801d42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d42c:	4413      	add	r3, r2
 801d42e:	460a      	mov	r2, r1
 801d430:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 801d432:	697a      	ldr	r2, [r7, #20]
 801d434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d436:	3301      	adds	r3, #1
 801d438:	b2d1      	uxtb	r1, r2
 801d43a:	687a      	ldr	r2, [r7, #4]
 801d43c:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801d43e:	e05b      	b.n	801d4f8 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 801d440:	68ba      	ldr	r2, [r7, #8]
 801d442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d444:	4413      	add	r3, r2
 801d446:	781b      	ldrb	r3, [r3, #0]
 801d448:	2b3a      	cmp	r3, #58	@ 0x3a
 801d44a:	d134      	bne.n	801d4b6 <mg_aton6+0x174>
      j = i + 1;
 801d44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d44e:	3301      	adds	r3, #1
 801d450:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 801d452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d454:	2b00      	cmp	r3, #0
 801d456:	d014      	beq.n	801d482 <mg_aton6+0x140>
 801d458:	68ba      	ldr	r2, [r7, #8]
 801d45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d45c:	3b01      	subs	r3, #1
 801d45e:	4413      	add	r3, r2
 801d460:	781b      	ldrb	r3, [r3, #0]
 801d462:	2b3a      	cmp	r3, #58	@ 0x3a
 801d464:	d10d      	bne.n	801d482 <mg_aton6+0x140>
        dc = n;  // Double colon
 801d466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d468:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 801d46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d46c:	2b01      	cmp	r3, #1
 801d46e:	d90f      	bls.n	801d490 <mg_aton6+0x14e>
 801d470:	68ba      	ldr	r2, [r7, #8]
 801d472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d474:	3b02      	subs	r3, #2
 801d476:	4413      	add	r3, r2
 801d478:	781b      	ldrb	r3, [r3, #0]
 801d47a:	2b3a      	cmp	r3, #58	@ 0x3a
 801d47c:	d108      	bne.n	801d490 <mg_aton6+0x14e>
 801d47e:	2300      	movs	r3, #0
 801d480:	e06b      	b.n	801d55a <mg_aton6+0x218>
      } else if (i > 0) {
 801d482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d484:	2b00      	cmp	r3, #0
 801d486:	d004      	beq.n	801d492 <mg_aton6+0x150>
        n += 2;
 801d488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d48a:	3302      	adds	r3, #2
 801d48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d48e:	e000      	b.n	801d492 <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 801d490:	bf00      	nop
      }
      if (n > 14) return false;
 801d492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d494:	2b0e      	cmp	r3, #14
 801d496:	d901      	bls.n	801d49c <mg_aton6+0x15a>
 801d498:	2300      	movs	r3, #0
 801d49a:	e05e      	b.n	801d55a <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 801d49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d49e:	3301      	adds	r3, #1
 801d4a0:	687a      	ldr	r2, [r7, #4]
 801d4a2:	2100      	movs	r1, #0
 801d4a4:	54d1      	strb	r1, [r2, r3]
 801d4a6:	687a      	ldr	r2, [r7, #4]
 801d4a8:	5cd1      	ldrb	r1, [r2, r3]
 801d4aa:	687a      	ldr	r2, [r7, #4]
 801d4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d4ae:	4413      	add	r3, r2
 801d4b0:	460a      	mov	r2, r1
 801d4b2:	701a      	strb	r2, [r3, #0]
 801d4b4:	e020      	b.n	801d4f8 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 801d4b6:	68ba      	ldr	r2, [r7, #8]
 801d4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d4ba:	4413      	add	r3, r2
 801d4bc:	781b      	ldrb	r3, [r3, #0]
 801d4be:	2b25      	cmp	r3, #37	@ 0x25
 801d4c0:	d118      	bne.n	801d4f4 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 801d4c2:	68ba      	ldr	r2, [r7, #8]
 801d4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d4c6:	3301      	adds	r3, #1
 801d4c8:	18d1      	adds	r1, r2, r3
 801d4ca:	68fa      	ldr	r2, [r7, #12]
 801d4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d4ce:	1ad3      	subs	r3, r2, r3
 801d4d0:	1e5a      	subs	r2, r3, #1
 801d4d2:	f107 0320 	add.w	r3, r7, #32
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	f004 f9c9 	bl	802186e <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 801d4e0:	2201      	movs	r2, #1
 801d4e2:	9200      	str	r2, [sp, #0]
 801d4e4:	220a      	movs	r2, #10
 801d4e6:	f107 0120 	add.w	r1, r7, #32
 801d4ea:	c903      	ldmia	r1, {r0, r1}
 801d4ec:	f004 fbc6 	bl	8021c7c <mg_str_to_num>
 801d4f0:	4603      	mov	r3, r0
 801d4f2:	e032      	b.n	801d55a <mg_aton6+0x218>
    } else {
      return false;
 801d4f4:	2300      	movs	r3, #0
 801d4f6:	e030      	b.n	801d55a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 801d4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d4fa:	3301      	adds	r3, #1
 801d4fc:	637b      	str	r3, [r7, #52]	@ 0x34
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d502:	429a      	cmp	r2, r3
 801d504:	f4ff af4a 	bcc.w	801d39c <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 801d508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d50a:	2b0d      	cmp	r3, #13
 801d50c:	d804      	bhi.n	801d518 <mg_aton6+0x1d6>
 801d50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d510:	2b2a      	cmp	r3, #42	@ 0x2a
 801d512:	d101      	bne.n	801d518 <mg_aton6+0x1d6>
 801d514:	2300      	movs	r3, #0
 801d516:	e020      	b.n	801d55a <mg_aton6+0x218>
  if (n < 14) {
 801d518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d51a:	2b0d      	cmp	r3, #13
 801d51c:	d819      	bhi.n	801d552 <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 801d51e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d522:	1ad3      	subs	r3, r2, r3
 801d524:	330e      	adds	r3, #14
 801d526:	687a      	ldr	r2, [r7, #4]
 801d528:	18d0      	adds	r0, r2, r3
 801d52a:	687a      	ldr	r2, [r7, #4]
 801d52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d52e:	18d1      	adds	r1, r2, r3
 801d530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d534:	1ad3      	subs	r3, r2, r3
 801d536:	3302      	adds	r3, #2
 801d538:	461a      	mov	r2, r3
 801d53a:	f008 fcf3 	bl	8025f24 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 801d53e:	687a      	ldr	r2, [r7, #4]
 801d540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d542:	18d0      	adds	r0, r2, r3
 801d544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d546:	f1c3 030e 	rsb	r3, r3, #14
 801d54a:	461a      	mov	r2, r3
 801d54c:	2100      	movs	r1, #0
 801d54e:	f008 fd03 	bl	8025f58 <memset>
  }

  addr->is_ip6 = true;
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	2201      	movs	r2, #1
 801d556:	74da      	strb	r2, [r3, #19]
  return true;
 801d558:	2301      	movs	r3, #1
}
 801d55a:	4618      	mov	r0, r3
 801d55c:	3738      	adds	r7, #56	@ 0x38
 801d55e:	46bd      	mov	sp, r7
 801d560:	bd80      	pop	{r7, pc}

0801d562 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 801d562:	b580      	push	{r7, lr}
 801d564:	b084      	sub	sp, #16
 801d566:	af00      	add	r7, sp, #0
 801d568:	f107 0308 	add.w	r3, r7, #8
 801d56c:	e883 0003 	stmia.w	r3, {r0, r1}
 801d570:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 801d572:	687a      	ldr	r2, [r7, #4]
 801d574:	f107 0308 	add.w	r3, r7, #8
 801d578:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d57c:	f7ff fde8 	bl	801d150 <mg_atone>
 801d580:	4603      	mov	r3, r0
 801d582:	2b00      	cmp	r3, #0
 801d584:	d11d      	bne.n	801d5c2 <mg_aton+0x60>
 801d586:	687a      	ldr	r2, [r7, #4]
 801d588:	f107 0308 	add.w	r3, r7, #8
 801d58c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d590:	f7ff fdae 	bl	801d0f0 <mg_atonl>
 801d594:	4603      	mov	r3, r0
 801d596:	2b00      	cmp	r3, #0
 801d598:	d113      	bne.n	801d5c2 <mg_aton+0x60>
 801d59a:	687a      	ldr	r2, [r7, #4]
 801d59c:	f107 0308 	add.w	r3, r7, #8
 801d5a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d5a4:	f7ff fdef 	bl	801d186 <mg_aton4>
 801d5a8:	4603      	mov	r3, r0
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d109      	bne.n	801d5c2 <mg_aton+0x60>
         mg_aton6(str, addr);
 801d5ae:	687a      	ldr	r2, [r7, #4]
 801d5b0:	f107 0308 	add.w	r3, r7, #8
 801d5b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d5b8:	f7ff fec3 	bl	801d342 <mg_aton6>
 801d5bc:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d001      	beq.n	801d5c6 <mg_aton+0x64>
 801d5c2:	2301      	movs	r3, #1
 801d5c4:	e000      	b.n	801d5c8 <mg_aton+0x66>
 801d5c6:	2300      	movs	r3, #0
 801d5c8:	f003 0301 	and.w	r3, r3, #1
 801d5cc:	b2db      	uxtb	r3, r3
}
 801d5ce:	4618      	mov	r0, r3
 801d5d0:	3710      	adds	r7, #16
 801d5d2:	46bd      	mov	sp, r7
 801d5d4:	bd80      	pop	{r7, pc}

0801d5d6 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 801d5d6:	b580      	push	{r7, lr}
 801d5d8:	b084      	sub	sp, #16
 801d5da:	af00      	add	r7, sp, #0
 801d5dc:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d5e2:	33b0      	adds	r3, #176	@ 0xb0
 801d5e4:	4619      	mov	r1, r3
 801d5e6:	2001      	movs	r0, #1
 801d5e8:	f7f7 fa5a 	bl	8014aa0 <mg_calloc>
 801d5ec:	60f8      	str	r0, [r7, #12]
  if (c != NULL) {
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d017      	beq.n	801d624 <mg_alloc_conn+0x4e>
    c->mgr = mgr;
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	687a      	ldr	r2, [r7, #4]
 801d5f8:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 801d5fa:	68fb      	ldr	r3, [r7, #12]
 801d5fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d600:	675a      	str	r2, [r3, #116]	@ 0x74
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	645a      	str	r2, [r3, #68]	@ 0x44
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	69db      	ldr	r3, [r3, #28]
 801d616:	1c5a      	adds	r2, r3, #1
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	61da      	str	r2, [r3, #28]
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	69da      	ldr	r2, [r3, #28]
 801d620:	68fb      	ldr	r3, [r7, #12]
 801d622:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 801d624:	68fb      	ldr	r3, [r7, #12]
}
 801d626:	4618      	mov	r0, r3
 801d628:	3710      	adds	r7, #16
 801d62a:	46bd      	mov	sp, r7
 801d62c:	bd80      	pop	{r7, pc}
	...

0801d630 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 801d630:	b580      	push	{r7, lr}
 801d632:	b084      	sub	sp, #16
 801d634:	af00      	add	r7, sp, #0
 801d636:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 801d638:	6878      	ldr	r0, [r7, #4]
 801d63a:	f7f7 fa6a 	bl	8014b12 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	685b      	ldr	r3, [r3, #4]
 801d642:	60fb      	str	r3, [r7, #12]
 801d644:	e002      	b.n	801d64c <mg_close_conn+0x1c>
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	60fb      	str	r3, [r7, #12]
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	681b      	ldr	r3, [r3, #0]
 801d650:	687a      	ldr	r2, [r7, #4]
 801d652:	429a      	cmp	r2, r3
 801d654:	d1f7      	bne.n	801d646 <mg_close_conn+0x16>
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	681a      	ldr	r2, [r3, #0]
 801d65a:	68fb      	ldr	r3, [r7, #12]
 801d65c:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	685b      	ldr	r3, [r3, #4]
 801d662:	689b      	ldr	r3, [r3, #8]
 801d664:	687a      	ldr	r2, [r7, #4]
 801d666:	429a      	cmp	r2, r3
 801d668:	d103      	bne.n	801d672 <mg_close_conn+0x42>
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	685b      	ldr	r3, [r3, #4]
 801d66e:	2200      	movs	r2, #0
 801d670:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	685b      	ldr	r3, [r3, #4]
 801d676:	691b      	ldr	r3, [r3, #16]
 801d678:	687a      	ldr	r2, [r7, #4]
 801d67a:	429a      	cmp	r2, r3
 801d67c:	d103      	bne.n	801d686 <mg_close_conn+0x56>
 801d67e:	687b      	ldr	r3, [r7, #4]
 801d680:	685b      	ldr	r3, [r3, #4]
 801d682:	2200      	movs	r2, #0
 801d684:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 801d686:	2200      	movs	r2, #0
 801d688:	2109      	movs	r1, #9
 801d68a:	6878      	ldr	r0, [r7, #4]
 801d68c:	f7f7 ffe8 	bl	8015660 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 801d690:	4b17      	ldr	r3, [pc, #92]	@ (801d6f0 <mg_close_conn+0xc0>)
 801d692:	681b      	ldr	r3, [r3, #0]
 801d694:	2b02      	cmp	r3, #2
 801d696:	dd0e      	ble.n	801d6b6 <mg_close_conn+0x86>
 801d698:	4b16      	ldr	r3, [pc, #88]	@ (801d6f4 <mg_close_conn+0xc4>)
 801d69a:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 801d69e:	4916      	ldr	r1, [pc, #88]	@ (801d6f8 <mg_close_conn+0xc8>)
 801d6a0:	2003      	movs	r0, #3
 801d6a2:	f7fd fbc3 	bl	801ae2c <mg_log_prefix>
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d6ae:	461a      	mov	r2, r3
 801d6b0:	4812      	ldr	r0, [pc, #72]	@ (801d6fc <mg_close_conn+0xcc>)
 801d6b2:	f7fd fc0b 	bl	801aecc <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 801d6b6:	6878      	ldr	r0, [r7, #4]
 801d6b8:	f004 fe14 	bl	80222e4 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	3338      	adds	r3, #56	@ 0x38
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f7fc fcec 	bl	801a09e <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	3348      	adds	r3, #72	@ 0x48
 801d6ca:	4618      	mov	r0, r3
 801d6cc:	f7fc fce7 	bl	801a09e <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	3368      	adds	r3, #104	@ 0x68
 801d6d4:	4618      	mov	r0, r3
 801d6d6:	f7fc fce2 	bl	801a09e <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 801d6da:	21b0      	movs	r1, #176	@ 0xb0
 801d6dc:	6878      	ldr	r0, [r7, #4]
 801d6de:	f004 ffb3 	bl	8022648 <mg_bzero>
  free(c);
 801d6e2:	6878      	ldr	r0, [r7, #4]
 801d6e4:	f7ee fe68 	bl	800c3b8 <vPortFree>
}
 801d6e8:	bf00      	nop
 801d6ea:	3710      	adds	r7, #16
 801d6ec:	46bd      	mov	sp, r7
 801d6ee:	bd80      	pop	{r7, pc}
 801d6f0:	20000298 	.word	0x20000298
 801d6f4:	08033e7c 	.word	0x08033e7c
 801d6f8:	080310b8 	.word	0x080310b8
 801d6fc:	080325d8 	.word	0x080325d8

0801d700 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 801d700:	b580      	push	{r7, lr}
 801d702:	b086      	sub	sp, #24
 801d704:	af00      	add	r7, sp, #0
 801d706:	60f8      	str	r0, [r7, #12]
 801d708:	60b9      	str	r1, [r7, #8]
 801d70a:	607a      	str	r2, [r7, #4]
 801d70c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801d70e:	2300      	movs	r3, #0
 801d710:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 801d712:	68bb      	ldr	r3, [r7, #8]
 801d714:	2b00      	cmp	r3, #0
 801d716:	d003      	beq.n	801d720 <mg_connect+0x20>
 801d718:	68bb      	ldr	r3, [r7, #8]
 801d71a:	781b      	ldrb	r3, [r3, #0]
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d10e      	bne.n	801d73e <mg_connect+0x3e>
    MG_ERROR(("null url"));
 801d720:	4b37      	ldr	r3, [pc, #220]	@ (801d800 <mg_connect+0x100>)
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	2b00      	cmp	r3, #0
 801d726:	dd66      	ble.n	801d7f6 <mg_connect+0xf6>
 801d728:	4b36      	ldr	r3, [pc, #216]	@ (801d804 <mg_connect+0x104>)
 801d72a:	f241 22be 	movw	r2, #4798	@ 0x12be
 801d72e:	4936      	ldr	r1, [pc, #216]	@ (801d808 <mg_connect+0x108>)
 801d730:	2001      	movs	r0, #1
 801d732:	f7fd fb7b 	bl	801ae2c <mg_log_prefix>
 801d736:	4835      	ldr	r0, [pc, #212]	@ (801d80c <mg_connect+0x10c>)
 801d738:	f7fd fbc8 	bl	801aecc <mg_log>
 801d73c:	e05b      	b.n	801d7f6 <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 801d73e:	68f8      	ldr	r0, [r7, #12]
 801d740:	f7ff ff49 	bl	801d5d6 <mg_alloc_conn>
 801d744:	6178      	str	r0, [r7, #20]
 801d746:	697b      	ldr	r3, [r7, #20]
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d10e      	bne.n	801d76a <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 801d74c:	4b2c      	ldr	r3, [pc, #176]	@ (801d800 <mg_connect+0x100>)
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	2b00      	cmp	r3, #0
 801d752:	dd50      	ble.n	801d7f6 <mg_connect+0xf6>
 801d754:	4b2b      	ldr	r3, [pc, #172]	@ (801d804 <mg_connect+0x104>)
 801d756:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 801d75a:	492b      	ldr	r1, [pc, #172]	@ (801d808 <mg_connect+0x108>)
 801d75c:	2001      	movs	r0, #1
 801d75e:	f7fd fb65 	bl	801ae2c <mg_log_prefix>
 801d762:	482b      	ldr	r0, [pc, #172]	@ (801d810 <mg_connect+0x110>)
 801d764:	f7fd fbb2 	bl	801aecc <mg_log>
 801d768:	e045      	b.n	801d7f6 <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 801d76a:	68fb      	ldr	r3, [r7, #12]
 801d76c:	681a      	ldr	r2, [r3, #0]
 801d76e:	697b      	ldr	r3, [r7, #20]
 801d770:	601a      	str	r2, [r3, #0]
 801d772:	68fb      	ldr	r3, [r7, #12]
 801d774:	697a      	ldr	r2, [r7, #20]
 801d776:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 801d778:	2204      	movs	r2, #4
 801d77a:	4926      	ldr	r1, [pc, #152]	@ (801d814 <mg_connect+0x114>)
 801d77c:	68b8      	ldr	r0, [r7, #8]
 801d77e:	f008 fc20 	bl	8025fc2 <strncmp>
 801d782:	4603      	mov	r3, r0
 801d784:	2b00      	cmp	r3, #0
 801d786:	bf0c      	ite	eq
 801d788:	2301      	moveq	r3, #1
 801d78a:	2300      	movne	r3, #0
 801d78c:	b2d9      	uxtb	r1, r3
 801d78e:	697a      	ldr	r2, [r7, #20]
 801d790:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d794:	f361 0300 	bfi	r3, r1, #0, #1
 801d798:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 801d79c:	697b      	ldr	r3, [r7, #20]
 801d79e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d7a2:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 801d7a4:	697b      	ldr	r3, [r7, #20]
 801d7a6:	687a      	ldr	r2, [r7, #4]
 801d7a8:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 801d7aa:	697a      	ldr	r2, [r7, #20]
 801d7ac:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801d7b0:	f043 0302 	orr.w	r3, r3, #2
 801d7b4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 801d7b8:	697b      	ldr	r3, [r7, #20]
 801d7ba:	683a      	ldr	r2, [r7, #0]
 801d7bc:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 801d7be:	4b10      	ldr	r3, [pc, #64]	@ (801d800 <mg_connect+0x100>)
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	2b02      	cmp	r3, #2
 801d7c4:	dd0e      	ble.n	801d7e4 <mg_connect+0xe4>
 801d7c6:	4b0f      	ldr	r3, [pc, #60]	@ (801d804 <mg_connect+0x104>)
 801d7c8:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 801d7cc:	490e      	ldr	r1, [pc, #56]	@ (801d808 <mg_connect+0x108>)
 801d7ce:	2003      	movs	r0, #3
 801d7d0:	f7fd fb2c 	bl	801ae2c <mg_log_prefix>
 801d7d4:	697b      	ldr	r3, [r7, #20]
 801d7d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d7d8:	697b      	ldr	r3, [r7, #20]
 801d7da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d7dc:	68bb      	ldr	r3, [r7, #8]
 801d7de:	480e      	ldr	r0, [pc, #56]	@ (801d818 <mg_connect+0x118>)
 801d7e0:	f7fd fb74 	bl	801aecc <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 801d7e4:	68ba      	ldr	r2, [r7, #8]
 801d7e6:	2101      	movs	r1, #1
 801d7e8:	6978      	ldr	r0, [r7, #20]
 801d7ea:	f7f7 ff39 	bl	8015660 <mg_call>
    mg_resolve(c, url);
 801d7ee:	68b9      	ldr	r1, [r7, #8]
 801d7f0:	6978      	ldr	r0, [r7, #20]
 801d7f2:	f7f7 fef1 	bl	80155d8 <mg_resolve>
  }
  return c;
 801d7f6:	697b      	ldr	r3, [r7, #20]
}
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	3718      	adds	r7, #24
 801d7fc:	46bd      	mov	sp, r7
 801d7fe:	bd80      	pop	{r7, pc}
 801d800:	20000298 	.word	0x20000298
 801d804:	08033e8c 	.word	0x08033e8c
 801d808:	080310b8 	.word	0x080310b8
 801d80c:	080325e8 	.word	0x080325e8
 801d810:	080325f4 	.word	0x080325f4
 801d814:	080325f8 	.word	0x080325f8
 801d818:	08031214 	.word	0x08031214

0801d81c <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 801d81c:	b580      	push	{r7, lr}
 801d81e:	b086      	sub	sp, #24
 801d820:	af00      	add	r7, sp, #0
 801d822:	60f8      	str	r0, [r7, #12]
 801d824:	60b9      	str	r1, [r7, #8]
 801d826:	607a      	str	r2, [r7, #4]
 801d828:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801d82a:	2300      	movs	r3, #0
 801d82c:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 801d82e:	68f8      	ldr	r0, [r7, #12]
 801d830:	f7ff fed1 	bl	801d5d6 <mg_alloc_conn>
 801d834:	6178      	str	r0, [r7, #20]
 801d836:	697b      	ldr	r3, [r7, #20]
 801d838:	2b00      	cmp	r3, #0
 801d83a:	d10f      	bne.n	801d85c <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 801d83c:	4b41      	ldr	r3, [pc, #260]	@ (801d944 <mg_listen+0x128>)
 801d83e:	681b      	ldr	r3, [r3, #0]
 801d840:	2b00      	cmp	r3, #0
 801d842:	dd7a      	ble.n	801d93a <mg_listen+0x11e>
 801d844:	4b40      	ldr	r3, [pc, #256]	@ (801d948 <mg_listen+0x12c>)
 801d846:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 801d84a:	4940      	ldr	r1, [pc, #256]	@ (801d94c <mg_listen+0x130>)
 801d84c:	2001      	movs	r0, #1
 801d84e:	f7fd faed 	bl	801ae2c <mg_log_prefix>
 801d852:	68b9      	ldr	r1, [r7, #8]
 801d854:	483e      	ldr	r0, [pc, #248]	@ (801d950 <mg_listen+0x134>)
 801d856:	f7fd fb39 	bl	801aecc <mg_log>
 801d85a:	e06e      	b.n	801d93a <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 801d85c:	68b9      	ldr	r1, [r7, #8]
 801d85e:	6978      	ldr	r0, [r7, #20]
 801d860:	f003 f852 	bl	8020908 <mg_open_listener>
 801d864:	4603      	mov	r3, r0
 801d866:	f083 0301 	eor.w	r3, r3, #1
 801d86a:	b2db      	uxtb	r3, r3
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d019      	beq.n	801d8a4 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 801d870:	4b34      	ldr	r3, [pc, #208]	@ (801d944 <mg_listen+0x128>)
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	2b00      	cmp	r3, #0
 801d876:	dd0f      	ble.n	801d898 <mg_listen+0x7c>
 801d878:	4b33      	ldr	r3, [pc, #204]	@ (801d948 <mg_listen+0x12c>)
 801d87a:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 801d87e:	4933      	ldr	r1, [pc, #204]	@ (801d94c <mg_listen+0x130>)
 801d880:	2001      	movs	r0, #1
 801d882:	f7fd fad3 	bl	801ae2c <mg_log_prefix>
 801d886:	f009 fd7b 	bl	8027380 <__errno>
 801d88a:	4603      	mov	r3, r0
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	461a      	mov	r2, r3
 801d890:	68b9      	ldr	r1, [r7, #8]
 801d892:	4830      	ldr	r0, [pc, #192]	@ (801d954 <mg_listen+0x138>)
 801d894:	f7fd fb1a 	bl	801aecc <mg_log>
    MG_PROF_FREE(c);
    free(c);
 801d898:	6978      	ldr	r0, [r7, #20]
 801d89a:	f7ee fd8d 	bl	800c3b8 <vPortFree>
    c = NULL;
 801d89e:	2300      	movs	r3, #0
 801d8a0:	617b      	str	r3, [r7, #20]
 801d8a2:	e04a      	b.n	801d93a <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 801d8a4:	697a      	ldr	r2, [r7, #20]
 801d8a6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801d8aa:	f043 0301 	orr.w	r3, r3, #1
 801d8ae:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 801d8b2:	2204      	movs	r2, #4
 801d8b4:	4928      	ldr	r1, [pc, #160]	@ (801d958 <mg_listen+0x13c>)
 801d8b6:	68b8      	ldr	r0, [r7, #8]
 801d8b8:	f008 fb83 	bl	8025fc2 <strncmp>
 801d8bc:	4603      	mov	r3, r0
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	bf0c      	ite	eq
 801d8c2:	2301      	moveq	r3, #1
 801d8c4:	2300      	movne	r3, #0
 801d8c6:	b2d9      	uxtb	r1, r3
 801d8c8:	697a      	ldr	r2, [r7, #20]
 801d8ca:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d8ce:	f361 0300 	bfi	r3, r1, #0, #1
 801d8d2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 801d8d6:	68fb      	ldr	r3, [r7, #12]
 801d8d8:	681a      	ldr	r2, [r3, #0]
 801d8da:	697b      	ldr	r3, [r7, #20]
 801d8dc:	601a      	str	r2, [r3, #0]
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	697a      	ldr	r2, [r7, #20]
 801d8e2:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 801d8e4:	697b      	ldr	r3, [r7, #20]
 801d8e6:	687a      	ldr	r2, [r7, #4]
 801d8e8:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 801d8ea:	697b      	ldr	r3, [r7, #20]
 801d8ec:	683a      	ldr	r2, [r7, #0]
 801d8ee:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 801d8f0:	2200      	movs	r2, #0
 801d8f2:	2101      	movs	r1, #1
 801d8f4:	6978      	ldr	r0, [r7, #20]
 801d8f6:	f7f7 feb3 	bl	8015660 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 801d8fa:	68b8      	ldr	r0, [r7, #8]
 801d8fc:	f004 fd44 	bl	8022388 <mg_url_is_ssl>
 801d900:	4603      	mov	r3, r0
 801d902:	2b00      	cmp	r3, #0
 801d904:	d006      	beq.n	801d914 <mg_listen+0xf8>
 801d906:	697a      	ldr	r2, [r7, #20]
 801d908:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801d90c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d910:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 801d914:	4b0b      	ldr	r3, [pc, #44]	@ (801d944 <mg_listen+0x128>)
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	2b02      	cmp	r3, #2
 801d91a:	dd0e      	ble.n	801d93a <mg_listen+0x11e>
 801d91c:	4b0a      	ldr	r3, [pc, #40]	@ (801d948 <mg_listen+0x12c>)
 801d91e:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 801d922:	490a      	ldr	r1, [pc, #40]	@ (801d94c <mg_listen+0x130>)
 801d924:	2003      	movs	r0, #3
 801d926:	f7fd fa81 	bl	801ae2c <mg_log_prefix>
 801d92a:	697b      	ldr	r3, [r7, #20]
 801d92c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d92e:	697b      	ldr	r3, [r7, #20]
 801d930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d932:	68bb      	ldr	r3, [r7, #8]
 801d934:	4809      	ldr	r0, [pc, #36]	@ (801d95c <mg_listen+0x140>)
 801d936:	f7fd fac9 	bl	801aecc <mg_log>
  }
  return c;
 801d93a:	697b      	ldr	r3, [r7, #20]
}
 801d93c:	4618      	mov	r0, r3
 801d93e:	3718      	adds	r7, #24
 801d940:	46bd      	mov	sp, r7
 801d942:	bd80      	pop	{r7, pc}
 801d944:	20000298 	.word	0x20000298
 801d948:	08033e98 	.word	0x08033e98
 801d94c:	080310b8 	.word	0x080310b8
 801d950:	08032600 	.word	0x08032600
 801d954:	08032608 	.word	0x08032608
 801d958:	080325f8 	.word	0x080325f8
 801d95c:	08031214 	.word	0x08031214

0801d960 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 801d960:	b580      	push	{r7, lr}
 801d962:	b08a      	sub	sp, #40	@ 0x28
 801d964:	af04      	add	r7, sp, #16
 801d966:	60f8      	str	r0, [r7, #12]
 801d968:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 801d96c:	2128      	movs	r1, #40	@ 0x28
 801d96e:	2001      	movs	r0, #1
 801d970:	f7f7 f896 	bl	8014aa0 <mg_calloc>
 801d974:	6178      	str	r0, [r7, #20]
  if (t != NULL) {
 801d976:	697b      	ldr	r3, [r7, #20]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	d014      	beq.n	801d9a6 <mg_timer_add+0x46>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 801d97c:	68fb      	ldr	r3, [r7, #12]
 801d97e:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 801d982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d984:	9302      	str	r3, [sp, #8]
 801d986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d988:	9301      	str	r3, [sp, #4]
 801d98a:	6a3b      	ldr	r3, [r7, #32]
 801d98c:	9300      	str	r3, [sp, #0]
 801d98e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d992:	6979      	ldr	r1, [r7, #20]
 801d994:	f004 fba5 	bl	80220e2 <mg_timer_init>
    t->id = mgr->timerid++;
 801d998:	68fb      	ldr	r3, [r7, #12]
 801d99a:	6a1b      	ldr	r3, [r3, #32]
 801d99c:	1c59      	adds	r1, r3, #1
 801d99e:	68fa      	ldr	r2, [r7, #12]
 801d9a0:	6211      	str	r1, [r2, #32]
 801d9a2:	697a      	ldr	r2, [r7, #20]
 801d9a4:	6013      	str	r3, [r2, #0]
  }
  return t;
 801d9a6:	697b      	ldr	r3, [r7, #20]
}
 801d9a8:	4618      	mov	r0, r3
 801d9aa:	3718      	adds	r7, #24
 801d9ac:	46bd      	mov	sp, r7
 801d9ae:	bd80      	pop	{r7, pc}

0801d9b0 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 801d9b0:	b580      	push	{r7, lr}
 801d9b2:	b082      	sub	sp, #8
 801d9b4:	af00      	add	r7, sp, #0
 801d9b6:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 801d9b8:	2248      	movs	r2, #72	@ 0x48
 801d9ba:	2100      	movs	r1, #0
 801d9bc:	6878      	ldr	r0, [r7, #4]
 801d9be:	f008 facb 	bl	8025f58 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d9c8:	639a      	str	r2, [r3, #56]	@ 0x38
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d9d0:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801d9d8:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	4a05      	ldr	r2, [pc, #20]	@ (801d9f4 <mg_mgr_init+0x44>)
 801d9de:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	4a05      	ldr	r2, [pc, #20]	@ (801d9f8 <mg_mgr_init+0x48>)
 801d9e4:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 801d9e6:	6878      	ldr	r0, [r7, #4]
 801d9e8:	f004 fcc3 	bl	8022372 <mg_tls_ctx_init>
}
 801d9ec:	bf00      	nop
 801d9ee:	3708      	adds	r7, #8
 801d9f0:	46bd      	mov	sp, r7
 801d9f2:	bd80      	pop	{r7, pc}
 801d9f4:	08032638 	.word	0x08032638
 801d9f8:	0803264c 	.word	0x0803264c

0801d9fc <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 801d9fc:	b580      	push	{r7, lr}
 801d9fe:	b084      	sub	sp, #16
 801da00:	af00      	add	r7, sp, #0
 801da02:	60f8      	str	r0, [r7, #12]
 801da04:	60b9      	str	r1, [r7, #8]
 801da06:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 801da08:	68fb      	ldr	r3, [r7, #12]
 801da0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d005      	beq.n	801da1c <mg_tcpip_call+0x20>
 801da10:	68fb      	ldr	r3, [r7, #12]
 801da12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da14:	687a      	ldr	r2, [r7, #4]
 801da16:	68b9      	ldr	r1, [r7, #8]
 801da18:	68f8      	ldr	r0, [r7, #12]
 801da1a:	4798      	blx	r3
}
 801da1c:	bf00      	nop
 801da1e:	3710      	adds	r7, #16
 801da20:	46bd      	mov	sp, r7
 801da22:	bd80      	pop	{r7, pc}

0801da24 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 801da24:	b590      	push	{r4, r7, lr}
 801da26:	b085      	sub	sp, #20
 801da28:	af00      	add	r7, sp, #0
 801da2a:	60f8      	str	r0, [r7, #12]
 801da2c:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	681a      	ldr	r2, [r3, #0]
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	685b      	ldr	r3, [r3, #4]
 801da36:	441a      	add	r2, r3
 801da38:	68bb      	ldr	r3, [r7, #8]
 801da3a:	1ad3      	subs	r3, r2, r3
 801da3c:	461a      	mov	r2, r3
 801da3e:	68fc      	ldr	r4, [r7, #12]
 801da40:	463b      	mov	r3, r7
 801da42:	68b9      	ldr	r1, [r7, #8]
 801da44:	4618      	mov	r0, r3
 801da46:	f003 ff12 	bl	802186e <mg_str_n>
 801da4a:	f104 0308 	add.w	r3, r4, #8
 801da4e:	463a      	mov	r2, r7
 801da50:	e892 0003 	ldmia.w	r2, {r0, r1}
 801da54:	e883 0003 	stmia.w	r3, {r0, r1}
}
 801da58:	bf00      	nop
 801da5a:	3714      	adds	r7, #20
 801da5c:	46bd      	mov	sp, r7
 801da5e:	bd90      	pop	{r4, r7, pc}

0801da60 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 801da60:	b480      	push	{r7}
 801da62:	b087      	sub	sp, #28
 801da64:	af00      	add	r7, sp, #0
 801da66:	60f8      	str	r0, [r7, #12]
 801da68:	60b9      	str	r1, [r7, #8]
 801da6a:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 801da6c:	68bb      	ldr	r3, [r7, #8]
 801da6e:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 801da70:	2300      	movs	r3, #0
 801da72:	617b      	str	r3, [r7, #20]
 801da74:	e014      	b.n	801daa0 <csumup+0x40>
 801da76:	697b      	ldr	r3, [r7, #20]
 801da78:	f003 0301 	and.w	r3, r3, #1
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	d004      	beq.n	801da8a <csumup+0x2a>
 801da80:	693a      	ldr	r2, [r7, #16]
 801da82:	697b      	ldr	r3, [r7, #20]
 801da84:	4413      	add	r3, r2
 801da86:	781b      	ldrb	r3, [r3, #0]
 801da88:	e004      	b.n	801da94 <csumup+0x34>
 801da8a:	693a      	ldr	r2, [r7, #16]
 801da8c:	697b      	ldr	r3, [r7, #20]
 801da8e:	4413      	add	r3, r2
 801da90:	781b      	ldrb	r3, [r3, #0]
 801da92:	021b      	lsls	r3, r3, #8
 801da94:	68fa      	ldr	r2, [r7, #12]
 801da96:	4413      	add	r3, r2
 801da98:	60fb      	str	r3, [r7, #12]
 801da9a:	697b      	ldr	r3, [r7, #20]
 801da9c:	3301      	adds	r3, #1
 801da9e:	617b      	str	r3, [r7, #20]
 801daa0:	697a      	ldr	r2, [r7, #20]
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	429a      	cmp	r2, r3
 801daa6:	d3e6      	bcc.n	801da76 <csumup+0x16>
  return sum;
 801daa8:	68fb      	ldr	r3, [r7, #12]
}
 801daaa:	4618      	mov	r0, r3
 801daac:	371c      	adds	r7, #28
 801daae:	46bd      	mov	sp, r7
 801dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dab4:	4770      	bx	lr

0801dab6 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 801dab6:	b580      	push	{r7, lr}
 801dab8:	b082      	sub	sp, #8
 801daba:	af00      	add	r7, sp, #0
 801dabc:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 801dabe:	e005      	b.n	801dacc <csumfin+0x16>
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	b29a      	uxth	r2, r3
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	0c1b      	lsrs	r3, r3, #16
 801dac8:	4413      	add	r3, r2
 801daca:	607b      	str	r3, [r7, #4]
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	0c1b      	lsrs	r3, r3, #16
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d1f5      	bne.n	801dac0 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	b29b      	uxth	r3, r3
 801dad8:	43db      	mvns	r3, r3
 801dada:	b29b      	uxth	r3, r3
 801dadc:	4618      	mov	r0, r3
 801dade:	f004 fe4c 	bl	802277a <mg_ntohs>
 801dae2:	4603      	mov	r3, r0
}
 801dae4:	4618      	mov	r0, r3
 801dae6:	3708      	adds	r7, #8
 801dae8:	46bd      	mov	sp, r7
 801daea:	bd80      	pop	{r7, pc}

0801daec <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 801daec:	b580      	push	{r7, lr}
 801daee:	b084      	sub	sp, #16
 801daf0:	af00      	add	r7, sp, #0
 801daf2:	6078      	str	r0, [r7, #4]
 801daf4:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 801daf6:	683a      	ldr	r2, [r7, #0]
 801daf8:	6879      	ldr	r1, [r7, #4]
 801dafa:	2000      	movs	r0, #0
 801dafc:	f7ff ffb0 	bl	801da60 <csumup>
 801db00:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 801db02:	68f8      	ldr	r0, [r7, #12]
 801db04:	f7ff ffd7 	bl	801dab6 <csumfin>
 801db08:	4603      	mov	r3, r0
}
 801db0a:	4618      	mov	r0, r3
 801db0c:	3710      	adds	r7, #16
 801db0e:	46bd      	mov	sp, r7
 801db10:	bd80      	pop	{r7, pc}
	...

0801db14 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 801db14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801db18:	b088      	sub	sp, #32
 801db1a:	af02      	add	r7, sp, #8
 801db1c:	6078      	str	r0, [r7, #4]
 801db1e:	460b      	mov	r3, r1
 801db20:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	685b      	ldr	r3, [r3, #4]
 801db26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801db28:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	33b0      	adds	r3, #176	@ 0xb0
 801db2e:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 801db30:	78fb      	ldrb	r3, [r7, #3]
 801db32:	2b01      	cmp	r3, #1
 801db34:	d013      	beq.n	801db5e <settmout+0x4a>
 801db36:	78fb      	ldrb	r3, [r7, #3]
 801db38:	2b02      	cmp	r3, #2
 801db3a:	d00e      	beq.n	801db5a <settmout+0x46>
 801db3c:	78fb      	ldrb	r3, [r7, #3]
 801db3e:	2b03      	cmp	r3, #3
 801db40:	d008      	beq.n	801db54 <settmout+0x40>
 801db42:	78fb      	ldrb	r3, [r7, #3]
 801db44:	2b04      	cmp	r3, #4
 801db46:	d102      	bne.n	801db4e <settmout+0x3a>
 801db48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801db4c:	e008      	b.n	801db60 <settmout+0x4c>
 801db4e:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 801db52:	e005      	b.n	801db60 <settmout+0x4c>
 801db54:	f643 2398 	movw	r3, #15000	@ 0x3a98
 801db58:	e002      	b.n	801db60 <settmout+0x4c>
 801db5a:	2364      	movs	r3, #100	@ 0x64
 801db5c:	e000      	b.n	801db60 <settmout+0x4c>
 801db5e:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 801db60:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 801db62:	697b      	ldr	r3, [r7, #20]
 801db64:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801db68:	68f9      	ldr	r1, [r7, #12]
 801db6a:	2000      	movs	r0, #0
 801db6c:	460c      	mov	r4, r1
 801db6e:	4605      	mov	r5, r0
 801db70:	eb12 0804 	adds.w	r8, r2, r4
 801db74:	eb43 0905 	adc.w	r9, r3, r5
 801db78:	693b      	ldr	r3, [r7, #16]
 801db7a:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 801db7e:	693b      	ldr	r3, [r7, #16]
 801db80:	78fa      	ldrb	r2, [r7, #3]
 801db82:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 801db84:	4b0d      	ldr	r3, [pc, #52]	@ (801dbbc <settmout+0xa8>)
 801db86:	681b      	ldr	r3, [r3, #0]
 801db88:	2b03      	cmp	r3, #3
 801db8a:	dd12      	ble.n	801dbb2 <settmout+0x9e>
 801db8c:	4b0c      	ldr	r3, [pc, #48]	@ (801dbc0 <settmout+0xac>)
 801db8e:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 801db92:	490c      	ldr	r1, [pc, #48]	@ (801dbc4 <settmout+0xb0>)
 801db94:	2004      	movs	r0, #4
 801db96:	f7fd f949 	bl	801ae2c <mg_log_prefix>
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801db9e:	78f8      	ldrb	r0, [r7, #3]
 801dba0:	693b      	ldr	r3, [r7, #16]
 801dba2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801dba6:	e9cd 2300 	strd	r2, r3, [sp]
 801dbaa:	4602      	mov	r2, r0
 801dbac:	4806      	ldr	r0, [pc, #24]	@ (801dbc8 <settmout+0xb4>)
 801dbae:	f7fd f98d 	bl	801aecc <mg_log>
}
 801dbb2:	bf00      	nop
 801dbb4:	3718      	adds	r7, #24
 801dbb6:	46bd      	mov	sp, r7
 801dbb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801dbbc:	20000298 	.word	0x20000298
 801dbc0:	08033ea4 	.word	0x08033ea4
 801dbc4:	080310b8 	.word	0x080310b8
 801dbc8:	0803266c 	.word	0x0803266c

0801dbcc <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 801dbcc:	b580      	push	{r7, lr}
 801dbce:	b084      	sub	sp, #16
 801dbd0:	af00      	add	r7, sp, #0
 801dbd2:	6078      	str	r0, [r7, #4]
 801dbd4:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dbda:	685b      	ldr	r3, [r3, #4]
 801dbdc:	687a      	ldr	r2, [r7, #4]
 801dbde:	6950      	ldr	r0, [r2, #20]
 801dbe0:	687a      	ldr	r2, [r7, #4]
 801dbe2:	6839      	ldr	r1, [r7, #0]
 801dbe4:	4798      	blx	r3
 801dbe6:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 801dbe8:	68fa      	ldr	r2, [r7, #12]
 801dbea:	683b      	ldr	r3, [r7, #0]
 801dbec:	429a      	cmp	r2, r3
 801dbee:	d104      	bne.n	801dbfa <ether_output+0x2e>
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dbf4:	1c5a      	adds	r2, r3, #1
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 801dbfa:	68fb      	ldr	r3, [r7, #12]
}
 801dbfc:	4618      	mov	r0, r3
 801dbfe:	3710      	adds	r7, #16
 801dc00:	46bd      	mov	sp, r7
 801dc02:	bd80      	pop	{r7, pc}

0801dc04 <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b084      	sub	sp, #16
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	6078      	str	r0, [r7, #4]
 801dc0c:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	695b      	ldr	r3, [r3, #20]
 801dc12:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 801dc14:	68fb      	ldr	r3, [r7, #12]
 801dc16:	330e      	adds	r3, #14
 801dc18:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	2206      	movs	r2, #6
 801dc1e:	21ff      	movs	r1, #255	@ 0xff
 801dc20:	4618      	mov	r0, r3
 801dc22:	f008 f999 	bl	8025f58 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 801dc26:	68fb      	ldr	r3, [r7, #12]
 801dc28:	3306      	adds	r3, #6
 801dc2a:	6879      	ldr	r1, [r7, #4]
 801dc2c:	2206      	movs	r2, #6
 801dc2e:	4618      	mov	r0, r3
 801dc30:	f009 fbea 	bl	8027408 <memcpy>
  eth->type = mg_htons(0x806);
 801dc34:	f640 0006 	movw	r0, #2054	@ 0x806
 801dc38:	f004 fd9f 	bl	802277a <mg_ntohs>
 801dc3c:	4603      	mov	r3, r0
 801dc3e:	461a      	mov	r2, r3
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 801dc44:	221c      	movs	r2, #28
 801dc46:	2100      	movs	r1, #0
 801dc48:	68b8      	ldr	r0, [r7, #8]
 801dc4a:	f008 f985 	bl	8025f58 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 801dc4e:	2001      	movs	r0, #1
 801dc50:	f004 fd93 	bl	802277a <mg_ntohs>
 801dc54:	4603      	mov	r3, r0
 801dc56:	461a      	mov	r2, r3
 801dc58:	68bb      	ldr	r3, [r7, #8]
 801dc5a:	801a      	strh	r2, [r3, #0]
 801dc5c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801dc60:	f004 fd8b 	bl	802277a <mg_ntohs>
 801dc64:	4603      	mov	r3, r0
 801dc66:	461a      	mov	r2, r3
 801dc68:	68bb      	ldr	r3, [r7, #8]
 801dc6a:	805a      	strh	r2, [r3, #2]
 801dc6c:	68bb      	ldr	r3, [r7, #8]
 801dc6e:	2206      	movs	r2, #6
 801dc70:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 801dc72:	68bb      	ldr	r3, [r7, #8]
 801dc74:	2204      	movs	r2, #4
 801dc76:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 801dc78:	2001      	movs	r0, #1
 801dc7a:	f004 fd7e 	bl	802277a <mg_ntohs>
 801dc7e:	4603      	mov	r3, r0
 801dc80:	461a      	mov	r2, r3
 801dc82:	68bb      	ldr	r3, [r7, #8]
 801dc84:	80da      	strh	r2, [r3, #6]
 801dc86:	68bb      	ldr	r3, [r7, #8]
 801dc88:	683a      	ldr	r2, [r7, #0]
 801dc8a:	619a      	str	r2, [r3, #24]
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	689a      	ldr	r2, [r3, #8]
 801dc90:	68bb      	ldr	r3, [r7, #8]
 801dc92:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 801dc96:	68bb      	ldr	r3, [r7, #8]
 801dc98:	3308      	adds	r3, #8
 801dc9a:	6879      	ldr	r1, [r7, #4]
 801dc9c:	2206      	movs	r2, #6
 801dc9e:	4618      	mov	r0, r3
 801dca0:	f009 fbb2 	bl	8027408 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 801dca4:	68bb      	ldr	r3, [r7, #8]
 801dca6:	f103 021c 	add.w	r2, r3, #28
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	1ad3      	subs	r3, r2, r3
 801dcae:	4619      	mov	r1, r3
 801dcb0:	6878      	ldr	r0, [r7, #4]
 801dcb2:	f7ff ff8b 	bl	801dbcc <ether_output>
}
 801dcb6:	bf00      	nop
 801dcb8:	3710      	adds	r7, #16
 801dcba:	46bd      	mov	sp, r7
 801dcbc:	bd80      	pop	{r7, pc}
	...

0801dcc0 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 801dcc0:	b580      	push	{r7, lr}
 801dcc2:	b082      	sub	sp, #8
 801dcc4:	af00      	add	r7, sp, #0
 801dcc6:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801dcce:	2b03      	cmp	r3, #3
 801dcd0:	d13b      	bne.n	801dd4a <onstatechange+0x8a>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 801dcd2:	4b3b      	ldr	r3, [pc, #236]	@ (801ddc0 <onstatechange+0x100>)
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	2b01      	cmp	r3, #1
 801dcd8:	dd0d      	ble.n	801dcf6 <onstatechange+0x36>
 801dcda:	4b3a      	ldr	r3, [pc, #232]	@ (801ddc4 <onstatechange+0x104>)
 801dcdc:	f241 4201 	movw	r2, #5121	@ 0x1401
 801dce0:	4939      	ldr	r1, [pc, #228]	@ (801ddc8 <onstatechange+0x108>)
 801dce2:	2002      	movs	r0, #2
 801dce4:	f7fd f8a2 	bl	801ae2c <mg_log_prefix>
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	3308      	adds	r3, #8
 801dcec:	461a      	mov	r2, r3
 801dcee:	4937      	ldr	r1, [pc, #220]	@ (801ddcc <onstatechange+0x10c>)
 801dcf0:	4837      	ldr	r0, [pc, #220]	@ (801ddd0 <onstatechange+0x110>)
 801dcf2:	f7fd f8eb 	bl	801aecc <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 801dcf6:	4b32      	ldr	r3, [pc, #200]	@ (801ddc0 <onstatechange+0x100>)
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	2b01      	cmp	r3, #1
 801dcfc:	dd0d      	ble.n	801dd1a <onstatechange+0x5a>
 801dcfe:	4b31      	ldr	r3, [pc, #196]	@ (801ddc4 <onstatechange+0x104>)
 801dd00:	f241 4202 	movw	r2, #5122	@ 0x1402
 801dd04:	4930      	ldr	r1, [pc, #192]	@ (801ddc8 <onstatechange+0x108>)
 801dd06:	2002      	movs	r0, #2
 801dd08:	f7fd f890 	bl	801ae2c <mg_log_prefix>
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	3310      	adds	r3, #16
 801dd10:	461a      	mov	r2, r3
 801dd12:	492e      	ldr	r1, [pc, #184]	@ (801ddcc <onstatechange+0x10c>)
 801dd14:	482f      	ldr	r0, [pc, #188]	@ (801ddd4 <onstatechange+0x114>)
 801dd16:	f7fd f8d9 	bl	801aecc <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 801dd1a:	4b29      	ldr	r3, [pc, #164]	@ (801ddc0 <onstatechange+0x100>)
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	2b01      	cmp	r3, #1
 801dd20:	dd0c      	ble.n	801dd3c <onstatechange+0x7c>
 801dd22:	4b28      	ldr	r3, [pc, #160]	@ (801ddc4 <onstatechange+0x104>)
 801dd24:	f241 4203 	movw	r2, #5123	@ 0x1403
 801dd28:	4927      	ldr	r1, [pc, #156]	@ (801ddc8 <onstatechange+0x108>)
 801dd2a:	2002      	movs	r0, #2
 801dd2c:	f7fd f87e 	bl	801ae2c <mg_log_prefix>
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	461a      	mov	r2, r3
 801dd34:	4928      	ldr	r1, [pc, #160]	@ (801ddd8 <onstatechange+0x118>)
 801dd36:	4829      	ldr	r0, [pc, #164]	@ (801dddc <onstatechange+0x11c>)
 801dd38:	f7fd f8c8 	bl	801aecc <mg_log>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	691b      	ldr	r3, [r3, #16]
 801dd40:	4619      	mov	r1, r3
 801dd42:	6878      	ldr	r0, [r7, #4]
 801dd44:	f7ff ff5e 	bl	801dc04 <arp_ask>
 801dd48:	e02e      	b.n	801dda8 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801dd50:	2b01      	cmp	r3, #1
 801dd52:	d116      	bne.n	801dd82 <onstatechange+0xc2>
    MG_ERROR(("Link up"));
 801dd54:	4b1a      	ldr	r3, [pc, #104]	@ (801ddc0 <onstatechange+0x100>)
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	dd09      	ble.n	801dd70 <onstatechange+0xb0>
 801dd5c:	4b19      	ldr	r3, [pc, #100]	@ (801ddc4 <onstatechange+0x104>)
 801dd5e:	f241 4206 	movw	r2, #5126	@ 0x1406
 801dd62:	4919      	ldr	r1, [pc, #100]	@ (801ddc8 <onstatechange+0x108>)
 801dd64:	2001      	movs	r0, #1
 801dd66:	f7fd f861 	bl	801ae2c <mg_log_prefix>
 801dd6a:	481d      	ldr	r0, [pc, #116]	@ (801dde0 <onstatechange+0x120>)
 801dd6c:	f7fd f8ae 	bl	801aecc <mg_log>
    srand((unsigned int) mg_millis());
 801dd70:	f004 fd94 	bl	802289c <mg_millis>
 801dd74:	4602      	mov	r2, r0
 801dd76:	460b      	mov	r3, r1
 801dd78:	4613      	mov	r3, r2
 801dd7a:	4618      	mov	r0, r3
 801dd7c:	f007 fb9c 	bl	80254b8 <srand>
 801dd80:	e012      	b.n	801dda8 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d10d      	bne.n	801dda8 <onstatechange+0xe8>
    MG_ERROR(("Link down"));
 801dd8c:	4b0c      	ldr	r3, [pc, #48]	@ (801ddc0 <onstatechange+0x100>)
 801dd8e:	681b      	ldr	r3, [r3, #0]
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	dd09      	ble.n	801dda8 <onstatechange+0xe8>
 801dd94:	4b0b      	ldr	r3, [pc, #44]	@ (801ddc4 <onstatechange+0x104>)
 801dd96:	f241 4209 	movw	r2, #5129	@ 0x1409
 801dd9a:	490b      	ldr	r1, [pc, #44]	@ (801ddc8 <onstatechange+0x108>)
 801dd9c:	2001      	movs	r0, #1
 801dd9e:	f7fd f845 	bl	801ae2c <mg_log_prefix>
 801dda2:	4810      	ldr	r0, [pc, #64]	@ (801dde4 <onstatechange+0x124>)
 801dda4:	f7fd f892 	bl	801aecc <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	337c      	adds	r3, #124	@ 0x7c
 801ddac:	461a      	mov	r2, r3
 801ddae:	2100      	movs	r1, #0
 801ddb0:	6878      	ldr	r0, [r7, #4]
 801ddb2:	f7ff fe23 	bl	801d9fc <mg_tcpip_call>
}
 801ddb6:	bf00      	nop
 801ddb8:	3708      	adds	r7, #8
 801ddba:	46bd      	mov	sp, r7
 801ddbc:	bd80      	pop	{r7, pc}
 801ddbe:	bf00      	nop
 801ddc0:	20000298 	.word	0x20000298
 801ddc4:	08033eb0 	.word	0x08033eb0
 801ddc8:	080310b8 	.word	0x080310b8
 801ddcc:	0802101d 	.word	0x0802101d
 801ddd0:	0803267c 	.word	0x0803267c
 801ddd4:	0803268c 	.word	0x0803268c
 801ddd8:	080210e1 	.word	0x080210e1
 801dddc:	0803269c 	.word	0x0803269c
 801dde0:	080326ac 	.word	0x080326ac
 801dde4:	080326b4 	.word	0x080326b4

0801dde8 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 801dde8:	b580      	push	{r7, lr}
 801ddea:	b086      	sub	sp, #24
 801ddec:	af00      	add	r7, sp, #0
 801ddee:	60f8      	str	r0, [r7, #12]
 801ddf0:	60b9      	str	r1, [r7, #8]
 801ddf2:	603b      	str	r3, [r7, #0]
 801ddf4:	4613      	mov	r3, r2
 801ddf6:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	695b      	ldr	r3, [r3, #20]
 801ddfc:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 801ddfe:	697b      	ldr	r3, [r7, #20]
 801de00:	330e      	adds	r3, #14
 801de02:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 801de04:	697b      	ldr	r3, [r7, #20]
 801de06:	2206      	movs	r2, #6
 801de08:	68b9      	ldr	r1, [r7, #8]
 801de0a:	4618      	mov	r0, r3
 801de0c:	f009 fafc 	bl	8027408 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 801de10:	697b      	ldr	r3, [r7, #20]
 801de12:	3306      	adds	r3, #6
 801de14:	68f9      	ldr	r1, [r7, #12]
 801de16:	2206      	movs	r2, #6
 801de18:	4618      	mov	r0, r3
 801de1a:	f009 faf5 	bl	8027408 <memcpy>
  eth->type = mg_htons(0x800);
 801de1e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801de22:	f004 fcaa 	bl	802277a <mg_ntohs>
 801de26:	4603      	mov	r3, r0
 801de28:	461a      	mov	r2, r3
 801de2a:	697b      	ldr	r3, [r7, #20]
 801de2c:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 801de2e:	2214      	movs	r2, #20
 801de30:	2100      	movs	r1, #0
 801de32:	6938      	ldr	r0, [r7, #16]
 801de34:	f008 f890 	bl	8025f58 <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 801de38:	693b      	ldr	r3, [r7, #16]
 801de3a:	2245      	movs	r2, #69	@ 0x45
 801de3c:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 801de3e:	693b      	ldr	r3, [r7, #16]
 801de40:	2200      	movs	r2, #0
 801de42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801de46:	719a      	strb	r2, [r3, #6]
 801de48:	2200      	movs	r2, #0
 801de4a:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 801de4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de4e:	b29b      	uxth	r3, r3
 801de50:	3314      	adds	r3, #20
 801de52:	b29b      	uxth	r3, r3
 801de54:	4618      	mov	r0, r3
 801de56:	f004 fc90 	bl	802277a <mg_ntohs>
 801de5a:	4603      	mov	r3, r0
 801de5c:	461a      	mov	r2, r3
 801de5e:	693b      	ldr	r3, [r7, #16]
 801de60:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 801de62:	693b      	ldr	r3, [r7, #16]
 801de64:	2240      	movs	r2, #64	@ 0x40
 801de66:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 801de68:	693b      	ldr	r3, [r7, #16]
 801de6a:	79fa      	ldrb	r2, [r7, #7]
 801de6c:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 801de6e:	693b      	ldr	r3, [r7, #16]
 801de70:	683a      	ldr	r2, [r7, #0]
 801de72:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 801de74:	693b      	ldr	r3, [r7, #16]
 801de76:	6a3a      	ldr	r2, [r7, #32]
 801de78:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 801de7a:	2114      	movs	r1, #20
 801de7c:	6938      	ldr	r0, [r7, #16]
 801de7e:	f7ff fe35 	bl	801daec <ipcsum>
 801de82:	4603      	mov	r3, r0
 801de84:	461a      	mov	r2, r3
 801de86:	693b      	ldr	r3, [r7, #16]
 801de88:	815a      	strh	r2, [r3, #10]
  return ip;
 801de8a:	693b      	ldr	r3, [r7, #16]
}
 801de8c:	4618      	mov	r0, r3
 801de8e:	3718      	adds	r7, #24
 801de90:	46bd      	mov	sp, r7
 801de92:	bd80      	pop	{r7, pc}

0801de94 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 801de94:	b580      	push	{r7, lr}
 801de96:	b08a      	sub	sp, #40	@ 0x28
 801de98:	af02      	add	r7, sp, #8
 801de9a:	60f8      	str	r0, [r7, #12]
 801de9c:	60b9      	str	r1, [r7, #8]
 801de9e:	607a      	str	r2, [r7, #4]
 801dea0:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 801dea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dea4:	3308      	adds	r3, #8
 801dea6:	9301      	str	r3, [sp, #4]
 801dea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801deaa:	9300      	str	r3, [sp, #0]
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	2211      	movs	r2, #17
 801deb0:	68b9      	ldr	r1, [r7, #8]
 801deb2:	68f8      	ldr	r0, [r7, #12]
 801deb4:	f7ff ff98 	bl	801dde8 <tx_ip>
 801deb8:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 801deba:	69fb      	ldr	r3, [r7, #28]
 801debc:	3314      	adds	r3, #20
 801debe:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 801dec0:	69bb      	ldr	r3, [r7, #24]
 801dec2:	887a      	ldrh	r2, [r7, #2]
 801dec4:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 801dec6:	69bb      	ldr	r3, [r7, #24]
 801dec8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801deca:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 801decc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dece:	b29b      	uxth	r3, r3
 801ded0:	3308      	adds	r3, #8
 801ded2:	b29b      	uxth	r3, r3
 801ded4:	4618      	mov	r0, r3
 801ded6:	f004 fc50 	bl	802277a <mg_ntohs>
 801deda:	4603      	mov	r3, r0
 801dedc:	461a      	mov	r2, r3
 801dede:	69bb      	ldr	r3, [r7, #24]
 801dee0:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 801dee2:	69bb      	ldr	r3, [r7, #24]
 801dee4:	2200      	movs	r2, #0
 801dee6:	719a      	strb	r2, [r3, #6]
 801dee8:	2200      	movs	r2, #0
 801deea:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 801deec:	2208      	movs	r2, #8
 801deee:	69b9      	ldr	r1, [r7, #24]
 801def0:	2000      	movs	r0, #0
 801def2:	f7ff fdb5 	bl	801da60 <csumup>
 801def6:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 801def8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801defa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801defc:	6978      	ldr	r0, [r7, #20]
 801defe:	f7ff fdaf 	bl	801da60 <csumup>
 801df02:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 801df04:	69fb      	ldr	r3, [r7, #28]
 801df06:	330c      	adds	r3, #12
 801df08:	2204      	movs	r2, #4
 801df0a:	4619      	mov	r1, r3
 801df0c:	6978      	ldr	r0, [r7, #20]
 801df0e:	f7ff fda7 	bl	801da60 <csumup>
 801df12:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 801df14:	69fb      	ldr	r3, [r7, #28]
 801df16:	3310      	adds	r3, #16
 801df18:	2204      	movs	r2, #4
 801df1a:	4619      	mov	r1, r3
 801df1c:	6978      	ldr	r0, [r7, #20]
 801df1e:	f7ff fd9f 	bl	801da60 <csumup>
 801df22:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 801df24:	69fb      	ldr	r3, [r7, #28]
 801df26:	7a5b      	ldrb	r3, [r3, #9]
 801df28:	461a      	mov	r2, r3
 801df2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801df2c:	441a      	add	r2, r3
 801df2e:	697b      	ldr	r3, [r7, #20]
 801df30:	4413      	add	r3, r2
 801df32:	3308      	adds	r3, #8
 801df34:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 801df36:	6978      	ldr	r0, [r7, #20]
 801df38:	f7ff fdbd 	bl	801dab6 <csumfin>
 801df3c:	4603      	mov	r3, r0
 801df3e:	461a      	mov	r2, r3
 801df40:	69bb      	ldr	r3, [r7, #24]
 801df42:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 801df44:	69bb      	ldr	r3, [r7, #24]
 801df46:	3308      	adds	r3, #8
 801df48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801df4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801df4c:	4618      	mov	r0, r3
 801df4e:	f007 ffe9 	bl	8025f24 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 801df52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801df54:	332a      	adds	r3, #42	@ 0x2a
 801df56:	4619      	mov	r1, r3
 801df58:	68f8      	ldr	r0, [r7, #12]
 801df5a:	f7ff fe37 	bl	801dbcc <ether_output>
}
 801df5e:	bf00      	nop
 801df60:	3720      	adds	r7, #32
 801df62:	46bd      	mov	sp, r7
 801df64:	bd80      	pop	{r7, pc}
	...

0801df68 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 801df68:	b5b0      	push	{r4, r5, r7, lr}
 801df6a:	b0cc      	sub	sp, #304	@ 0x130
 801df6c:	af04      	add	r7, sp, #16
 801df6e:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 801df72:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 801df76:	6020      	str	r0, [r4, #0]
 801df78:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801df7c:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 801df80:	6001      	str	r1, [r0, #0]
 801df82:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801df86:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801df8a:	600a      	str	r2, [r1, #0]
 801df8c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801df90:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 801df94:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 801df96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801df9a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801df9e:	4a38      	ldr	r2, [pc, #224]	@ (801e080 <tx_dhcp+0x118>)
 801dfa0:	4618      	mov	r0, r3
 801dfa2:	4611      	mov	r1, r2
 801dfa4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801dfa8:	461a      	mov	r2, r3
 801dfaa:	f009 fa2d 	bl	8027408 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 801dfae:	4835      	ldr	r0, [pc, #212]	@ (801e084 <tx_dhcp+0x11c>)
 801dfb0:	f004 fbca 	bl	8022748 <mg_ntohl>
 801dfb4:	4602      	mov	r2, r0
 801dfb6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801dfba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801dfbe:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 801dfc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801dfc6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801dfca:	6819      	ldr	r1, [r3, #0]
 801dfcc:	f107 0310 	add.w	r3, r7, #16
 801dfd0:	331c      	adds	r3, #28
 801dfd2:	2206      	movs	r2, #6
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	f009 fa17 	bl	8027408 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 801dfda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801dfde:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801dfe2:	681b      	ldr	r3, [r3, #0]
 801dfe4:	3302      	adds	r3, #2
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	461a      	mov	r2, r3
 801dfea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801dfee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801dff2:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 801dff4:	f107 0310 	add.w	r3, r7, #16
 801dff8:	33f0      	adds	r3, #240	@ 0xf0
 801dffa:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801dffe:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 801e002:	4618      	mov	r0, r3
 801e004:	f009 fa00 	bl	8027408 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 801e008:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	d009      	beq.n	801e024 <tx_dhcp+0xbc>
 801e010:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e014:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e018:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801e01c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 801e020:	6812      	ldr	r2, [r2, #0]
 801e022:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 801e024:	2044      	movs	r0, #68	@ 0x44
 801e026:	f004 fba8 	bl	802277a <mg_ntohs>
 801e02a:	4603      	mov	r3, r0
 801e02c:	461d      	mov	r5, r3
 801e02e:	2043      	movs	r0, #67	@ 0x43
 801e030:	f004 fba3 	bl	802277a <mg_ntohs>
 801e034:	4603      	mov	r3, r0
 801e036:	461c      	mov	r4, r3
 801e038:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e03c:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 801e040:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e044:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 801e048:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e04c:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 801e050:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801e054:	9303      	str	r3, [sp, #12]
 801e056:	f107 0310 	add.w	r3, r7, #16
 801e05a:	9302      	str	r3, [sp, #8]
 801e05c:	9401      	str	r4, [sp, #4]
 801e05e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e062:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	9300      	str	r3, [sp, #0]
 801e06a:	462b      	mov	r3, r5
 801e06c:	6812      	ldr	r2, [r2, #0]
 801e06e:	6809      	ldr	r1, [r1, #0]
 801e070:	6800      	ldr	r0, [r0, #0]
 801e072:	f7ff ff0f 	bl	801de94 <tx_udp>
         sizeof(dhcp));
}
 801e076:	bf00      	nop
 801e078:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 801e07c:	46bd      	mov	sp, r7
 801e07e:	bdb0      	pop	{r4, r5, r7, pc}
 801e080:	080326c0 	.word	0x080326c0
 801e084:	63825363 	.word	0x63825363

0801e088 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 801e088:	b5b0      	push	{r4, r5, r7, lr}
 801e08a:	b090      	sub	sp, #64	@ 0x40
 801e08c:	af04      	add	r7, sp, #16
 801e08e:	60f8      	str	r0, [r7, #12]
 801e090:	60b9      	str	r1, [r7, #8]
 801e092:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 801e094:	4b31      	ldr	r3, [pc, #196]	@ (801e15c <tx_dhcp_request_sel+0xd4>)
 801e096:	f107 0414 	add.w	r4, r7, #20
 801e09a:	461d      	mov	r5, r3
 801e09c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e09e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e0a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e0a4:	c403      	stmia	r4!, {r0, r1}
 801e0a6:	8022      	strh	r2, [r4, #0]
 801e0a8:	3402      	adds	r4, #2
 801e0aa:	0c13      	lsrs	r3, r2, #16
 801e0ac:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 801e0ae:	2300      	movs	r3, #0
 801e0b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 801e0b4:	f107 0314 	add.w	r3, r7, #20
 801e0b8:	330a      	adds	r3, #10
 801e0ba:	687a      	ldr	r2, [r7, #4]
 801e0bc:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 801e0be:	f107 0314 	add.w	r3, r7, #20
 801e0c2:	3310      	adds	r3, #16
 801e0c4:	68ba      	ldr	r2, [r7, #8]
 801e0c6:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	7fdb      	ldrb	r3, [r3, #31]
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	d00a      	beq.n	801e0e6 <tx_dhcp_request_sel+0x5e>
 801e0d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e0d4:	1c5a      	adds	r2, r3, #1
 801e0d6:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 801e0da:	3318      	adds	r3, #24
 801e0dc:	3330      	adds	r3, #48	@ 0x30
 801e0de:	443b      	add	r3, r7
 801e0e0:	2206      	movs	r2, #6
 801e0e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 801e0e6:	68fb      	ldr	r3, [r7, #12]
 801e0e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d00a      	beq.n	801e106 <tx_dhcp_request_sel+0x7e>
 801e0f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e0f4:	1c5a      	adds	r2, r3, #1
 801e0f6:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 801e0fa:	3318      	adds	r3, #24
 801e0fc:	3330      	adds	r3, #48	@ 0x30
 801e0fe:	443b      	add	r3, r7
 801e100:	222a      	movs	r2, #42	@ 0x2a
 801e102:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 801e106:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 801e10a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e10e:	4413      	add	r3, r2
 801e110:	b2db      	uxtb	r3, r3
 801e112:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 801e116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e11a:	3319      	adds	r3, #25
 801e11c:	2200      	movs	r2, #0
 801e11e:	9202      	str	r2, [sp, #8]
 801e120:	9301      	str	r3, [sp, #4]
 801e122:	f107 0314 	add.w	r3, r7, #20
 801e126:	9300      	str	r3, [sp, #0]
 801e128:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e12c:	2200      	movs	r2, #0
 801e12e:	490c      	ldr	r1, [pc, #48]	@ (801e160 <tx_dhcp_request_sel+0xd8>)
 801e130:	68f8      	ldr	r0, [r7, #12]
 801e132:	f7ff ff19 	bl	801df68 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 801e136:	4b0b      	ldr	r3, [pc, #44]	@ (801e164 <tx_dhcp_request_sel+0xdc>)
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	2b02      	cmp	r3, #2
 801e13c:	dd09      	ble.n	801e152 <tx_dhcp_request_sel+0xca>
 801e13e:	4b0a      	ldr	r3, [pc, #40]	@ (801e168 <tx_dhcp_request_sel+0xe0>)
 801e140:	f241 425b 	movw	r2, #5211	@ 0x145b
 801e144:	4909      	ldr	r1, [pc, #36]	@ (801e16c <tx_dhcp_request_sel+0xe4>)
 801e146:	2003      	movs	r0, #3
 801e148:	f7fc fe70 	bl	801ae2c <mg_log_prefix>
 801e14c:	4808      	ldr	r0, [pc, #32]	@ (801e170 <tx_dhcp_request_sel+0xe8>)
 801e14e:	f7fc febd 	bl	801aecc <mg_log>
}
 801e152:	bf00      	nop
 801e154:	3730      	adds	r7, #48	@ 0x30
 801e156:	46bd      	mov	sp, r7
 801e158:	bdb0      	pop	{r4, r5, r7, pc}
 801e15a:	bf00      	nop
 801e15c:	080327e0 	.word	0x080327e0
 801e160:	08033de4 	.word	0x08033de4
 801e164:	20000298 	.word	0x20000298
 801e168:	08033ec0 	.word	0x08033ec0
 801e16c:	080310b8 	.word	0x080310b8
 801e170:	080327d0 	.word	0x080327d0

0801e174 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 801e174:	b580      	push	{r7, lr}
 801e176:	b08a      	sub	sp, #40	@ 0x28
 801e178:	af04      	add	r7, sp, #16
 801e17a:	60f8      	str	r0, [r7, #12]
 801e17c:	60b9      	str	r1, [r7, #8]
 801e17e:	607a      	str	r2, [r7, #4]
 801e180:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 801e182:	4b10      	ldr	r3, [pc, #64]	@ (801e1c4 <tx_dhcp_request_re+0x50>)
 801e184:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 801e186:	2301      	movs	r3, #1
 801e188:	9302      	str	r3, [sp, #8]
 801e18a:	2304      	movs	r3, #4
 801e18c:	9301      	str	r3, [sp, #4]
 801e18e:	f107 0314 	add.w	r3, r7, #20
 801e192:	9300      	str	r3, [sp, #0]
 801e194:	683b      	ldr	r3, [r7, #0]
 801e196:	687a      	ldr	r2, [r7, #4]
 801e198:	68b9      	ldr	r1, [r7, #8]
 801e19a:	68f8      	ldr	r0, [r7, #12]
 801e19c:	f7ff fee4 	bl	801df68 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 801e1a0:	4b09      	ldr	r3, [pc, #36]	@ (801e1c8 <tx_dhcp_request_re+0x54>)
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	2b02      	cmp	r3, #2
 801e1a6:	dd09      	ble.n	801e1bc <tx_dhcp_request_re+0x48>
 801e1a8:	4b08      	ldr	r3, [pc, #32]	@ (801e1cc <tx_dhcp_request_re+0x58>)
 801e1aa:	f241 4266 	movw	r2, #5222	@ 0x1466
 801e1ae:	4908      	ldr	r1, [pc, #32]	@ (801e1d0 <tx_dhcp_request_re+0x5c>)
 801e1b0:	2003      	movs	r0, #3
 801e1b2:	f7fc fe3b 	bl	801ae2c <mg_log_prefix>
 801e1b6:	4807      	ldr	r0, [pc, #28]	@ (801e1d4 <tx_dhcp_request_re+0x60>)
 801e1b8:	f7fc fe88 	bl	801aecc <mg_log>
}
 801e1bc:	bf00      	nop
 801e1be:	3718      	adds	r7, #24
 801e1c0:	46bd      	mov	sp, r7
 801e1c2:	bd80      	pop	{r7, pc}
 801e1c4:	ff030135 	.word	0xff030135
 801e1c8:	20000298 	.word	0x20000298
 801e1cc:	08033ed4 	.word	0x08033ed4
 801e1d0:	080310b8 	.word	0x080310b8
 801e1d4:	080327d0 	.word	0x080327d0

0801e1d8 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 801e1d8:	b580      	push	{r7, lr}
 801e1da:	b088      	sub	sp, #32
 801e1dc:	af04      	add	r7, sp, #16
 801e1de:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 801e1e0:	4a14      	ldr	r2, [pc, #80]	@ (801e234 <tx_dhcp_discover+0x5c>)
 801e1e2:	f107 0308 	add.w	r3, r7, #8
 801e1e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e1ea:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 801e1ee:	2300      	movs	r3, #0
 801e1f0:	9302      	str	r3, [sp, #8]
 801e1f2:	2308      	movs	r3, #8
 801e1f4:	9301      	str	r3, [sp, #4]
 801e1f6:	f107 0308 	add.w	r3, r7, #8
 801e1fa:	9300      	str	r3, [sp, #0]
 801e1fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e200:	2200      	movs	r2, #0
 801e202:	490d      	ldr	r1, [pc, #52]	@ (801e238 <tx_dhcp_discover+0x60>)
 801e204:	6878      	ldr	r0, [r7, #4]
 801e206:	f7ff feaf 	bl	801df68 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 801e20a:	4b0c      	ldr	r3, [pc, #48]	@ (801e23c <tx_dhcp_discover+0x64>)
 801e20c:	681b      	ldr	r3, [r3, #0]
 801e20e:	2b02      	cmp	r3, #2
 801e210:	dd0c      	ble.n	801e22c <tx_dhcp_discover+0x54>
 801e212:	4b0b      	ldr	r3, [pc, #44]	@ (801e240 <tx_dhcp_discover+0x68>)
 801e214:	f241 4270 	movw	r2, #5232	@ 0x1470
 801e218:	490a      	ldr	r1, [pc, #40]	@ (801e244 <tx_dhcp_discover+0x6c>)
 801e21a:	2003      	movs	r0, #3
 801e21c:	f7fc fe06 	bl	801ae2c <mg_log_prefix>
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	461a      	mov	r2, r3
 801e224:	4908      	ldr	r1, [pc, #32]	@ (801e248 <tx_dhcp_discover+0x70>)
 801e226:	4809      	ldr	r0, [pc, #36]	@ (801e24c <tx_dhcp_discover+0x74>)
 801e228:	f7fc fe50 	bl	801aecc <mg_log>
}
 801e22c:	bf00      	nop
 801e22e:	3710      	adds	r7, #16
 801e230:	46bd      	mov	sp, r7
 801e232:	bd80      	pop	{r7, pc}
 801e234:	0803281c 	.word	0x0803281c
 801e238:	08033de4 	.word	0x08033de4
 801e23c:	20000298 	.word	0x20000298
 801e240:	08033ee8 	.word	0x08033ee8
 801e244:	080310b8 	.word	0x080310b8
 801e248:	080210e1 	.word	0x080210e1
 801e24c:	080327fc 	.word	0x080327fc

0801e250 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 801e250:	b580      	push	{r7, lr}
 801e252:	b086      	sub	sp, #24
 801e254:	af00      	add	r7, sp, #0
 801e256:	60f8      	str	r0, [r7, #12]
 801e258:	60b9      	str	r1, [r7, #8]
 801e25a:	4613      	mov	r3, r2
 801e25c:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 801e25e:	2300      	movs	r3, #0
 801e260:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 801e262:	68fb      	ldr	r3, [r7, #12]
 801e264:	681b      	ldr	r3, [r3, #0]
 801e266:	617b      	str	r3, [r7, #20]
 801e268:	e057      	b.n	801e31a <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 801e26a:	697b      	ldr	r3, [r7, #20]
 801e26c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e270:	f003 0310 	and.w	r3, r3, #16
 801e274:	b2db      	uxtb	r3, r3
 801e276:	2b00      	cmp	r3, #0
 801e278:	d010      	beq.n	801e29c <getpeer+0x4c>
 801e27a:	68bb      	ldr	r3, [r7, #8]
 801e27c:	699b      	ldr	r3, [r3, #24]
 801e27e:	2b00      	cmp	r3, #0
 801e280:	d00c      	beq.n	801e29c <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 801e282:	68bb      	ldr	r3, [r7, #8]
 801e284:	699b      	ldr	r3, [r3, #24]
 801e286:	f103 000e 	add.w	r0, r3, #14
 801e28a:	697b      	ldr	r3, [r7, #20]
 801e28c:	331c      	adds	r3, #28
 801e28e:	2204      	movs	r2, #4
 801e290:	4619      	mov	r1, r3
 801e292:	f007 fdcd 	bl	8025e30 <memcmp>
 801e296:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 801e298:	2b00      	cmp	r3, #0
 801e29a:	d042      	beq.n	801e322 <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801e29c:	697b      	ldr	r3, [r7, #20]
 801e29e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801e2a2:	f003 0301 	and.w	r3, r3, #1
 801e2a6:	b2db      	uxtb	r3, r3
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d00b      	beq.n	801e2c4 <getpeer+0x74>
 801e2ac:	68bb      	ldr	r3, [r7, #8]
 801e2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d007      	beq.n	801e2c4 <getpeer+0x74>
 801e2b4:	697b      	ldr	r3, [r7, #20]
 801e2b6:	8b1a      	ldrh	r2, [r3, #24]
 801e2b8:	68bb      	ldr	r3, [r7, #8]
 801e2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e2bc:	885b      	ldrh	r3, [r3, #2]
 801e2be:	b29b      	uxth	r3, r3
 801e2c0:	429a      	cmp	r2, r3
 801e2c2:	d030      	beq.n	801e326 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801e2c4:	697b      	ldr	r3, [r7, #20]
 801e2c6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801e2ca:	f003 0301 	and.w	r3, r3, #1
 801e2ce:	b2db      	uxtb	r3, r3
 801e2d0:	2b00      	cmp	r3, #0
 801e2d2:	d11f      	bne.n	801e314 <getpeer+0xc4>
 801e2d4:	68bb      	ldr	r3, [r7, #8]
 801e2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	d01b      	beq.n	801e314 <getpeer+0xc4>
 801e2dc:	697b      	ldr	r3, [r7, #20]
 801e2de:	8b1a      	ldrh	r2, [r3, #24]
 801e2e0:	68bb      	ldr	r3, [r7, #8]
 801e2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e2e4:	885b      	ldrh	r3, [r3, #2]
 801e2e6:	b29b      	uxth	r3, r3
 801e2e8:	429a      	cmp	r2, r3
 801e2ea:	d113      	bne.n	801e314 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801e2ec:	697b      	ldr	r3, [r7, #20]
 801e2ee:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e2f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801e2f6:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801e2f8:	79fa      	ldrb	r2, [r7, #7]
 801e2fa:	429a      	cmp	r2, r3
 801e2fc:	d10a      	bne.n	801e314 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801e2fe:	79fb      	ldrb	r3, [r7, #7]
 801e300:	2b00      	cmp	r3, #0
 801e302:	d111      	bne.n	801e328 <getpeer+0xd8>
 801e304:	697b      	ldr	r3, [r7, #20]
 801e306:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801e308:	68bb      	ldr	r3, [r7, #8]
 801e30a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e30c:	881b      	ldrh	r3, [r3, #0]
 801e30e:	b29b      	uxth	r3, r3
 801e310:	429a      	cmp	r2, r3
 801e312:	d009      	beq.n	801e328 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 801e314:	697b      	ldr	r3, [r7, #20]
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	617b      	str	r3, [r7, #20]
 801e31a:	697b      	ldr	r3, [r7, #20]
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d1a4      	bne.n	801e26a <getpeer+0x1a>
 801e320:	e002      	b.n	801e328 <getpeer+0xd8>
      break;
 801e322:	bf00      	nop
 801e324:	e000      	b.n	801e328 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801e326:	bf00      	nop
      break;
  }
  return c;
 801e328:	697b      	ldr	r3, [r7, #20]
}
 801e32a:	4618      	mov	r0, r3
 801e32c:	3718      	adds	r7, #24
 801e32e:	46bd      	mov	sp, r7
 801e330:	bd80      	pop	{r7, pc}
	...

0801e334 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e334:	b5b0      	push	{r4, r5, r7, lr}
 801e336:	b088      	sub	sp, #32
 801e338:	af02      	add	r7, sp, #8
 801e33a:	6078      	str	r0, [r7, #4]
 801e33c:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 801e33e:	683b      	ldr	r3, [r7, #0]
 801e340:	699b      	ldr	r3, [r3, #24]
 801e342:	88db      	ldrh	r3, [r3, #6]
 801e344:	b29c      	uxth	r4, r3
 801e346:	2001      	movs	r0, #1
 801e348:	f004 fa17 	bl	802277a <mg_ntohs>
 801e34c:	4603      	mov	r3, r0
 801e34e:	429c      	cmp	r4, r3
 801e350:	d176      	bne.n	801e440 <rx_arp+0x10c>
 801e352:	683b      	ldr	r3, [r7, #0]
 801e354:	699b      	ldr	r3, [r3, #24]
 801e356:	699a      	ldr	r2, [r3, #24]
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	689b      	ldr	r3, [r3, #8]
 801e35c:	429a      	cmp	r2, r3
 801e35e:	d16f      	bne.n	801e440 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	695b      	ldr	r3, [r3, #20]
 801e364:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 801e366:	697b      	ldr	r3, [r7, #20]
 801e368:	330e      	adds	r3, #14
 801e36a:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 801e36c:	6978      	ldr	r0, [r7, #20]
 801e36e:	683b      	ldr	r3, [r7, #0]
 801e370:	691b      	ldr	r3, [r3, #16]
 801e372:	3306      	adds	r3, #6
 801e374:	2206      	movs	r2, #6
 801e376:	4619      	mov	r1, r3
 801e378:	f009 f846 	bl	8027408 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 801e37c:	697b      	ldr	r3, [r7, #20]
 801e37e:	3306      	adds	r3, #6
 801e380:	6879      	ldr	r1, [r7, #4]
 801e382:	2206      	movs	r2, #6
 801e384:	4618      	mov	r0, r3
 801e386:	f009 f83f 	bl	8027408 <memcpy>
    eth->type = mg_htons(0x806);
 801e38a:	f640 0006 	movw	r0, #2054	@ 0x806
 801e38e:	f004 f9f4 	bl	802277a <mg_ntohs>
 801e392:	4603      	mov	r3, r0
 801e394:	461a      	mov	r2, r3
 801e396:	697b      	ldr	r3, [r7, #20]
 801e398:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 801e39a:	683b      	ldr	r3, [r7, #0]
 801e39c:	699a      	ldr	r2, [r3, #24]
 801e39e:	693b      	ldr	r3, [r7, #16]
 801e3a0:	6814      	ldr	r4, [r2, #0]
 801e3a2:	6850      	ldr	r0, [r2, #4]
 801e3a4:	6891      	ldr	r1, [r2, #8]
 801e3a6:	68d5      	ldr	r5, [r2, #12]
 801e3a8:	601c      	str	r4, [r3, #0]
 801e3aa:	6058      	str	r0, [r3, #4]
 801e3ac:	6099      	str	r1, [r3, #8]
 801e3ae:	60dd      	str	r5, [r3, #12]
 801e3b0:	6914      	ldr	r4, [r2, #16]
 801e3b2:	6950      	ldr	r0, [r2, #20]
 801e3b4:	6991      	ldr	r1, [r2, #24]
 801e3b6:	611c      	str	r4, [r3, #16]
 801e3b8:	6158      	str	r0, [r3, #20]
 801e3ba:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 801e3bc:	2002      	movs	r0, #2
 801e3be:	f004 f9dc 	bl	802277a <mg_ntohs>
 801e3c2:	4603      	mov	r3, r0
 801e3c4:	461a      	mov	r2, r3
 801e3c6:	693b      	ldr	r3, [r7, #16]
 801e3c8:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 801e3ca:	693b      	ldr	r3, [r7, #16]
 801e3cc:	f103 0012 	add.w	r0, r3, #18
 801e3d0:	683b      	ldr	r3, [r7, #0]
 801e3d2:	699b      	ldr	r3, [r3, #24]
 801e3d4:	3308      	adds	r3, #8
 801e3d6:	2206      	movs	r2, #6
 801e3d8:	4619      	mov	r1, r3
 801e3da:	f009 f815 	bl	8027408 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 801e3de:	693b      	ldr	r3, [r7, #16]
 801e3e0:	3308      	adds	r3, #8
 801e3e2:	6879      	ldr	r1, [r7, #4]
 801e3e4:	2206      	movs	r2, #6
 801e3e6:	4618      	mov	r0, r3
 801e3e8:	f009 f80e 	bl	8027408 <memcpy>
    arp->tpa = pkt->arp->spa;
 801e3ec:	683b      	ldr	r3, [r7, #0]
 801e3ee:	699b      	ldr	r3, [r3, #24]
 801e3f0:	f8d3 200e 	ldr.w	r2, [r3, #14]
 801e3f4:	693b      	ldr	r3, [r7, #16]
 801e3f6:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	689a      	ldr	r2, [r3, #8]
 801e3fc:	693b      	ldr	r3, [r7, #16]
 801e3fe:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 801e402:	4b4a      	ldr	r3, [pc, #296]	@ (801e52c <rx_arp+0x1f8>)
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	2b02      	cmp	r3, #2
 801e408:	dd10      	ble.n	801e42c <rx_arp+0xf8>
 801e40a:	4b49      	ldr	r3, [pc, #292]	@ (801e530 <rx_arp+0x1fc>)
 801e40c:	f241 4292 	movw	r2, #5266	@ 0x1492
 801e410:	4948      	ldr	r1, [pc, #288]	@ (801e534 <rx_arp+0x200>)
 801e412:	2003      	movs	r0, #3
 801e414:	f7fc fd0a 	bl	801ae2c <mg_log_prefix>
 801e418:	693b      	ldr	r3, [r7, #16]
 801e41a:	f103 0218 	add.w	r2, r3, #24
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	9300      	str	r3, [sp, #0]
 801e422:	4b45      	ldr	r3, [pc, #276]	@ (801e538 <rx_arp+0x204>)
 801e424:	4945      	ldr	r1, [pc, #276]	@ (801e53c <rx_arp+0x208>)
 801e426:	4846      	ldr	r0, [pc, #280]	@ (801e540 <rx_arp+0x20c>)
 801e428:	f7fc fd50 	bl	801aecc <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 801e42c:	693b      	ldr	r3, [r7, #16]
 801e42e:	f103 021c 	add.w	r2, r3, #28
 801e432:	697b      	ldr	r3, [r7, #20]
 801e434:	1ad3      	subs	r3, r2, r3
 801e436:	4619      	mov	r1, r3
 801e438:	6878      	ldr	r0, [r7, #4]
 801e43a:	f7ff fbc7 	bl	801dbcc <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 801e43e:	e071      	b.n	801e524 <rx_arp+0x1f0>
  } else if (pkt->arp->op == mg_htons(2)) {
 801e440:	683b      	ldr	r3, [r7, #0]
 801e442:	699b      	ldr	r3, [r3, #24]
 801e444:	88db      	ldrh	r3, [r3, #6]
 801e446:	b29c      	uxth	r4, r3
 801e448:	2002      	movs	r0, #2
 801e44a:	f004 f996 	bl	802277a <mg_ntohs>
 801e44e:	4603      	mov	r3, r0
 801e450:	429c      	cmp	r4, r3
 801e452:	d167      	bne.n	801e524 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801e454:	683b      	ldr	r3, [r7, #0]
 801e456:	699b      	ldr	r3, [r3, #24]
 801e458:	3312      	adds	r3, #18
 801e45a:	6879      	ldr	r1, [r7, #4]
 801e45c:	2206      	movs	r2, #6
 801e45e:	4618      	mov	r0, r3
 801e460:	f007 fce6 	bl	8025e30 <memcmp>
 801e464:	4603      	mov	r3, r0
 801e466:	2b00      	cmp	r3, #0
 801e468:	d15b      	bne.n	801e522 <rx_arp+0x1ee>
    if (pkt->arp->spa == ifp->gw) {
 801e46a:	683b      	ldr	r3, [r7, #0]
 801e46c:	699b      	ldr	r3, [r3, #24]
 801e46e:	f8d3 200e 	ldr.w	r2, [r3, #14]
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	691b      	ldr	r3, [r3, #16]
 801e476:	429a      	cmp	r2, r3
 801e478:	d10a      	bne.n	801e490 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801e480:	683b      	ldr	r3, [r7, #0]
 801e482:	699b      	ldr	r3, [r3, #24]
 801e484:	3308      	adds	r3, #8
 801e486:	2206      	movs	r2, #6
 801e488:	4619      	mov	r1, r3
 801e48a:	f008 ffbd 	bl	8027408 <memcpy>
 801e48e:	e049      	b.n	801e524 <rx_arp+0x1f0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e494:	2200      	movs	r2, #0
 801e496:	6839      	ldr	r1, [r7, #0]
 801e498:	4618      	mov	r0, r3
 801e49a:	f7ff fed9 	bl	801e250 <getpeer>
 801e49e:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 801e4a0:	68fb      	ldr	r3, [r7, #12]
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	d03e      	beq.n	801e524 <rx_arp+0x1f0>
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e4ac:	f003 0310 	and.w	r3, r3, #16
 801e4b0:	b2db      	uxtb	r3, r3
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d036      	beq.n	801e524 <rx_arp+0x1f0>
        struct connstate *s = (struct connstate *) (c + 1);
 801e4b6:	68fb      	ldr	r3, [r7, #12]
 801e4b8:	33b0      	adds	r3, #176	@ 0xb0
 801e4ba:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 801e4bc:	68bb      	ldr	r3, [r7, #8]
 801e4be:	f103 0018 	add.w	r0, r3, #24
 801e4c2:	683b      	ldr	r3, [r7, #0]
 801e4c4:	699b      	ldr	r3, [r3, #24]
 801e4c6:	3308      	adds	r3, #8
 801e4c8:	2206      	movs	r2, #6
 801e4ca:	4619      	mov	r1, r3
 801e4cc:	f008 ff9c 	bl	8027408 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 801e4d0:	4b16      	ldr	r3, [pc, #88]	@ (801e52c <rx_arp+0x1f8>)
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	2b02      	cmp	r3, #2
 801e4d6:	dd15      	ble.n	801e504 <rx_arp+0x1d0>
 801e4d8:	4b15      	ldr	r3, [pc, #84]	@ (801e530 <rx_arp+0x1fc>)
 801e4da:	f241 429f 	movw	r2, #5279	@ 0x149f
 801e4de:	4915      	ldr	r1, [pc, #84]	@ (801e534 <rx_arp+0x200>)
 801e4e0:	2003      	movs	r0, #3
 801e4e2:	f7fc fca3 	bl	801ae2c <mg_log_prefix>
 801e4e6:	68fb      	ldr	r3, [r7, #12]
 801e4e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	f103 021c 	add.w	r2, r3, #28
 801e4f0:	68bb      	ldr	r3, [r7, #8]
 801e4f2:	3318      	adds	r3, #24
 801e4f4:	9301      	str	r3, [sp, #4]
 801e4f6:	4b10      	ldr	r3, [pc, #64]	@ (801e538 <rx_arp+0x204>)
 801e4f8:	9300      	str	r3, [sp, #0]
 801e4fa:	4613      	mov	r3, r2
 801e4fc:	4a0f      	ldr	r2, [pc, #60]	@ (801e53c <rx_arp+0x208>)
 801e4fe:	4811      	ldr	r0, [pc, #68]	@ (801e544 <rx_arp+0x210>)
 801e500:	f7fc fce4 	bl	801aecc <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 801e504:	68fa      	ldr	r2, [r7, #12]
 801e506:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801e50a:	f36f 1304 	bfc	r3, #4, #1
 801e50e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        send_syn(c);
 801e512:	68f8      	ldr	r0, [r7, #12]
 801e514:	f002 f8ac 	bl	8020670 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 801e518:	2103      	movs	r1, #3
 801e51a:	68f8      	ldr	r0, [r7, #12]
 801e51c:	f7ff fafa 	bl	801db14 <settmout>
 801e520:	e000      	b.n	801e524 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801e522:	bf00      	nop
      }
    }
  }
}
 801e524:	3718      	adds	r7, #24
 801e526:	46bd      	mov	sp, r7
 801e528:	bdb0      	pop	{r4, r5, r7, pc}
 801e52a:	bf00      	nop
 801e52c:	20000298 	.word	0x20000298
 801e530:	08033efc 	.word	0x08033efc
 801e534:	080310b8 	.word	0x080310b8
 801e538:	080210e1 	.word	0x080210e1
 801e53c:	0802101d 	.word	0x0802101d
 801e540:	08032824 	.word	0x08032824
 801e544:	0803283c 	.word	0x0803283c

0801e548 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e548:	b580      	push	{r7, lr}
 801e54a:	b08a      	sub	sp, #40	@ 0x28
 801e54c:	af02      	add	r7, sp, #8
 801e54e:	6078      	str	r0, [r7, #4]
 801e550:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 801e552:	683b      	ldr	r3, [r7, #0]
 801e554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e556:	781b      	ldrb	r3, [r3, #0]
 801e558:	2b08      	cmp	r3, #8
 801e55a:	d14d      	bne.n	801e5f8 <rx_icmp+0xb0>
 801e55c:	683b      	ldr	r3, [r7, #0]
 801e55e:	69db      	ldr	r3, [r3, #28]
 801e560:	2b00      	cmp	r3, #0
 801e562:	d049      	beq.n	801e5f8 <rx_icmp+0xb0>
 801e564:	683b      	ldr	r3, [r7, #0]
 801e566:	69db      	ldr	r3, [r3, #28]
 801e568:	691a      	ldr	r2, [r3, #16]
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	689b      	ldr	r3, [r3, #8]
 801e56e:	429a      	cmp	r2, r3
 801e570:	d142      	bne.n	801e5f8 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 801e572:	2326      	movs	r3, #38	@ 0x26
 801e574:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	699a      	ldr	r2, [r3, #24]
 801e57a:	69bb      	ldr	r3, [r7, #24]
 801e57c:	1ad3      	subs	r3, r2, r3
 801e57e:	617b      	str	r3, [r7, #20]
 801e580:	683b      	ldr	r3, [r7, #0]
 801e582:	68db      	ldr	r3, [r3, #12]
 801e584:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 801e586:	69fa      	ldr	r2, [r7, #28]
 801e588:	697b      	ldr	r3, [r7, #20]
 801e58a:	429a      	cmp	r2, r3
 801e58c:	d901      	bls.n	801e592 <rx_icmp+0x4a>
 801e58e:	697b      	ldr	r3, [r7, #20]
 801e590:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 801e592:	683b      	ldr	r3, [r7, #0]
 801e594:	691b      	ldr	r3, [r3, #16]
 801e596:	1d99      	adds	r1, r3, #6
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	6898      	ldr	r0, [r3, #8]
 801e59c:	683b      	ldr	r3, [r7, #0]
 801e59e:	69db      	ldr	r3, [r3, #28]
 801e5a0:	68db      	ldr	r3, [r3, #12]
 801e5a2:	69fa      	ldr	r2, [r7, #28]
 801e5a4:	3204      	adds	r2, #4
 801e5a6:	9201      	str	r2, [sp, #4]
 801e5a8:	9300      	str	r3, [sp, #0]
 801e5aa:	4603      	mov	r3, r0
 801e5ac:	2201      	movs	r2, #1
 801e5ae:	6878      	ldr	r0, [r7, #4]
 801e5b0:	f7ff fc1a 	bl	801dde8 <tx_ip>
 801e5b4:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 801e5b6:	693b      	ldr	r3, [r7, #16]
 801e5b8:	3314      	adds	r3, #20
 801e5ba:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 801e5bc:	2204      	movs	r2, #4
 801e5be:	2100      	movs	r1, #0
 801e5c0:	68f8      	ldr	r0, [r7, #12]
 801e5c2:	f007 fcc9 	bl	8025f58 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 801e5c6:	68fb      	ldr	r3, [r7, #12]
 801e5c8:	1d18      	adds	r0, r3, #4
 801e5ca:	683b      	ldr	r3, [r7, #0]
 801e5cc:	689b      	ldr	r3, [r3, #8]
 801e5ce:	69fa      	ldr	r2, [r7, #28]
 801e5d0:	4619      	mov	r1, r3
 801e5d2:	f008 ff19 	bl	8027408 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 801e5d6:	69fb      	ldr	r3, [r7, #28]
 801e5d8:	3304      	adds	r3, #4
 801e5da:	4619      	mov	r1, r3
 801e5dc:	68f8      	ldr	r0, [r7, #12]
 801e5de:	f7ff fa85 	bl	801daec <ipcsum>
 801e5e2:	4603      	mov	r3, r0
 801e5e4:	461a      	mov	r2, r3
 801e5e6:	68fb      	ldr	r3, [r7, #12]
 801e5e8:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 801e5ea:	69ba      	ldr	r2, [r7, #24]
 801e5ec:	69fb      	ldr	r3, [r7, #28]
 801e5ee:	4413      	add	r3, r2
 801e5f0:	4619      	mov	r1, r3
 801e5f2:	6878      	ldr	r0, [r7, #4]
 801e5f4:	f7ff faea 	bl	801dbcc <ether_output>
  }
}
 801e5f8:	bf00      	nop
 801e5fa:	3720      	adds	r7, #32
 801e5fc:	46bd      	mov	sp, r7
 801e5fe:	bd80      	pop	{r7, pc}

0801e600 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e604:	b090      	sub	sp, #64	@ 0x40
 801e606:	af00      	add	r7, sp, #0
 801e608:	60f8      	str	r0, [r7, #12]
 801e60a:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 801e60c:	2300      	movs	r3, #0
 801e60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e610:	2300      	movs	r3, #0
 801e612:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e614:	2300      	movs	r3, #0
 801e616:	627b      	str	r3, [r7, #36]	@ 0x24
 801e618:	2300      	movs	r3, #0
 801e61a:	623b      	str	r3, [r7, #32]
 801e61c:	2300      	movs	r3, #0
 801e61e:	61fb      	str	r3, [r7, #28]
 801e620:	2300      	movs	r3, #0
 801e622:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 801e624:	2300      	movs	r3, #0
 801e626:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 801e62a:	68fb      	ldr	r3, [r7, #12]
 801e62c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e630:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 801e634:	68bb      	ldr	r3, [r7, #8]
 801e636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e638:	33f0      	adds	r3, #240	@ 0xf0
 801e63a:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 801e63c:	68bb      	ldr	r3, [r7, #8]
 801e63e:	681a      	ldr	r2, [r3, #0]
 801e640:	68bb      	ldr	r3, [r7, #8]
 801e642:	685b      	ldr	r3, [r3, #4]
 801e644:	4413      	add	r3, r2
 801e646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801e648:	68bb      	ldr	r3, [r7, #8]
 801e64a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e64c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801e650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e652:	429a      	cmp	r2, r3
 801e654:	f0c0 81ac 	bcc.w	801e9b0 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801e658:	68bb      	ldr	r3, [r7, #8]
 801e65a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e65c:	1d18      	adds	r0, r3, #4
 801e65e:	68fb      	ldr	r3, [r7, #12]
 801e660:	3302      	adds	r3, #2
 801e662:	2204      	movs	r2, #4
 801e664:	4619      	mov	r1, r3
 801e666:	f007 fbe3 	bl	8025e30 <memcmp>
 801e66a:	4603      	mov	r3, r0
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	f040 81a1 	bne.w	801e9b4 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801e672:	e08a      	b.n	801e78a <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 801e674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e676:	781b      	ldrb	r3, [r3, #0]
 801e678:	2b01      	cmp	r3, #1
 801e67a:	d10e      	bne.n	801e69a <rx_dhcp_client+0x9a>
 801e67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e67e:	3301      	adds	r3, #1
 801e680:	781b      	ldrb	r3, [r3, #0]
 801e682:	2b04      	cmp	r3, #4
 801e684:	d109      	bne.n	801e69a <rx_dhcp_client+0x9a>
 801e686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e688:	3306      	adds	r3, #6
 801e68a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e68c:	429a      	cmp	r2, r3
 801e68e:	d904      	bls.n	801e69a <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 801e690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e692:	3302      	adds	r3, #2
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	627b      	str	r3, [r7, #36]	@ 0x24
 801e698:	e070      	b.n	801e77c <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 801e69a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e69c:	781b      	ldrb	r3, [r3, #0]
 801e69e:	2b03      	cmp	r3, #3
 801e6a0:	d112      	bne.n	801e6c8 <rx_dhcp_client+0xc8>
 801e6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6a4:	3301      	adds	r3, #1
 801e6a6:	781b      	ldrb	r3, [r3, #0]
 801e6a8:	2b04      	cmp	r3, #4
 801e6aa:	d10d      	bne.n	801e6c8 <rx_dhcp_client+0xc8>
 801e6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6ae:	3306      	adds	r3, #6
 801e6b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e6b2:	429a      	cmp	r2, r3
 801e6b4:	d908      	bls.n	801e6c8 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 801e6b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6b8:	3302      	adds	r3, #2
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 801e6be:	68bb      	ldr	r3, [r7, #8]
 801e6c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e6c2:	691b      	ldr	r3, [r3, #16]
 801e6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e6c6:	e059      	b.n	801e77c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 801e6c8:	68fb      	ldr	r3, [r7, #12]
 801e6ca:	7fdb      	ldrb	r3, [r3, #31]
 801e6cc:	2b00      	cmp	r3, #0
 801e6ce:	d012      	beq.n	801e6f6 <rx_dhcp_client+0xf6>
 801e6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6d2:	781b      	ldrb	r3, [r3, #0]
 801e6d4:	2b06      	cmp	r3, #6
 801e6d6:	d10e      	bne.n	801e6f6 <rx_dhcp_client+0xf6>
 801e6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6da:	3301      	adds	r3, #1
 801e6dc:	781b      	ldrb	r3, [r3, #0]
 801e6de:	2b04      	cmp	r3, #4
 801e6e0:	d109      	bne.n	801e6f6 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 801e6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6e4:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 801e6e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e6e8:	429a      	cmp	r2, r3
 801e6ea:	d904      	bls.n	801e6f6 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 801e6ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6ee:	3302      	adds	r3, #2
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	61fb      	str	r3, [r7, #28]
 801e6f4:	e042      	b.n	801e77c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801e6f6:	68fb      	ldr	r3, [r7, #12]
 801e6f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d012      	beq.n	801e726 <rx_dhcp_client+0x126>
 801e700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e702:	781b      	ldrb	r3, [r3, #0]
 801e704:	2b2a      	cmp	r3, #42	@ 0x2a
 801e706:	d10e      	bne.n	801e726 <rx_dhcp_client+0x126>
 801e708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e70a:	3301      	adds	r3, #1
 801e70c:	781b      	ldrb	r3, [r3, #0]
 801e70e:	2b04      	cmp	r3, #4
 801e710:	d109      	bne.n	801e726 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 801e712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e714:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801e716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e718:	429a      	cmp	r2, r3
 801e71a:	d904      	bls.n	801e726 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 801e71c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e71e:	3302      	adds	r3, #2
 801e720:	681b      	ldr	r3, [r3, #0]
 801e722:	61bb      	str	r3, [r7, #24]
 801e724:	e02a      	b.n	801e77c <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 801e726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e728:	781b      	ldrb	r3, [r3, #0]
 801e72a:	2b33      	cmp	r3, #51	@ 0x33
 801e72c:	d114      	bne.n	801e758 <rx_dhcp_client+0x158>
 801e72e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e730:	3301      	adds	r3, #1
 801e732:	781b      	ldrb	r3, [r3, #0]
 801e734:	2b04      	cmp	r3, #4
 801e736:	d10f      	bne.n	801e758 <rx_dhcp_client+0x158>
 801e738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e73a:	3306      	adds	r3, #6
 801e73c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e73e:	429a      	cmp	r2, r3
 801e740:	d90a      	bls.n	801e758 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 801e742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e744:	3302      	adds	r3, #2
 801e746:	681b      	ldr	r3, [r3, #0]
 801e748:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 801e74a:	6a3b      	ldr	r3, [r7, #32]
 801e74c:	4618      	mov	r0, r3
 801e74e:	f003 fffb 	bl	8022748 <mg_ntohl>
 801e752:	4603      	mov	r3, r0
 801e754:	623b      	str	r3, [r7, #32]
 801e756:	e011      	b.n	801e77c <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 801e758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e75a:	781b      	ldrb	r3, [r3, #0]
 801e75c:	2b35      	cmp	r3, #53	@ 0x35
 801e75e:	d10d      	bne.n	801e77c <rx_dhcp_client+0x17c>
 801e760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e762:	3301      	adds	r3, #1
 801e764:	781b      	ldrb	r3, [r3, #0]
 801e766:	2b01      	cmp	r3, #1
 801e768:	d108      	bne.n	801e77c <rx_dhcp_client+0x17c>
 801e76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e76c:	3306      	adds	r3, #6
 801e76e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e770:	429a      	cmp	r2, r3
 801e772:	d903      	bls.n	801e77c <rx_dhcp_client+0x17c>
      msgtype = p[2];
 801e774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e776:	789b      	ldrb	r3, [r3, #2]
 801e778:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 801e77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e77e:	3301      	adds	r3, #1
 801e780:	781b      	ldrb	r3, [r3, #0]
 801e782:	3302      	adds	r3, #2
 801e784:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e786:	4413      	add	r3, r2
 801e788:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801e78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e78c:	3301      	adds	r3, #1
 801e78e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e790:	429a      	cmp	r2, r3
 801e792:	d904      	bls.n	801e79e <rx_dhcp_client+0x19e>
 801e794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e796:	781b      	ldrb	r3, [r3, #0]
 801e798:	2bff      	cmp	r3, #255	@ 0xff
 801e79a:	f47f af6b 	bne.w	801e674 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 801e79e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801e7a2:	2b06      	cmp	r3, #6
 801e7a4:	d10c      	bne.n	801e7c0 <rx_dhcp_client+0x1c0>
 801e7a6:	68fb      	ldr	r3, [r7, #12]
 801e7a8:	689b      	ldr	r3, [r3, #8]
 801e7aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e7ac:	429a      	cmp	r2, r3
 801e7ae:	d107      	bne.n	801e7c0 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 801e7b0:	68fb      	ldr	r3, [r7, #12]
 801e7b2:	2201      	movs	r2, #1
 801e7b4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801e7b8:	68fb      	ldr	r3, [r7, #12]
 801e7ba:	2200      	movs	r2, #0
 801e7bc:	609a      	str	r2, [r3, #8]
 801e7be:	e0ec      	b.n	801e99a <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 801e7c0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801e7c4:	2b02      	cmp	r3, #2
 801e7c6:	d123      	bne.n	801e810 <rx_dhcp_client+0x210>
 801e7c8:	68fb      	ldr	r3, [r7, #12]
 801e7ca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e7ce:	2b01      	cmp	r3, #1
 801e7d0:	d11e      	bne.n	801e810 <rx_dhcp_client+0x210>
 801e7d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	d01b      	beq.n	801e810 <rx_dhcp_client+0x210>
 801e7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d018      	beq.n	801e810 <rx_dhcp_client+0x210>
 801e7de:	6a3b      	ldr	r3, [r7, #32]
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	d015      	beq.n	801e810 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801e7e4:	68bb      	ldr	r3, [r7, #8]
 801e7e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e7e8:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	d003      	beq.n	801e7f6 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801e7ee:	68bb      	ldr	r3, [r7, #8]
 801e7f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 801e7f2:	695b      	ldr	r3, [r3, #20]
 801e7f4:	e002      	b.n	801e7fc <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801e7f6:	68bb      	ldr	r3, [r7, #8]
 801e7f8:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 801e7fa:	68db      	ldr	r3, [r3, #12]
 801e7fc:	461a      	mov	r2, r3
 801e7fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e800:	68f8      	ldr	r0, [r7, #12]
 801e802:	f7ff fc41 	bl	801e088 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 801e806:	68fb      	ldr	r3, [r7, #12]
 801e808:	2202      	movs	r2, #2
 801e80a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801e80e:	e0c4      	b.n	801e99a <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 801e810:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801e814:	2b05      	cmp	r3, #5
 801e816:	f040 80c0 	bne.w	801e99a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801e81a:	68fb      	ldr	r3, [r7, #12]
 801e81c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e820:	2b02      	cmp	r3, #2
 801e822:	f040 8081 	bne.w	801e928 <rx_dhcp_client+0x328>
 801e826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d07d      	beq.n	801e928 <rx_dhcp_client+0x328>
 801e82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d07a      	beq.n	801e928 <rx_dhcp_client+0x328>
 801e832:	6a3b      	ldr	r3, [r7, #32]
 801e834:	2b00      	cmp	r3, #0
 801e836:	d077      	beq.n	801e928 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 801e838:	68fb      	ldr	r3, [r7, #12]
 801e83a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801e83e:	6a39      	ldr	r1, [r7, #32]
 801e840:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801e844:	fb00 f101 	mul.w	r1, r0, r1
 801e848:	2000      	movs	r0, #0
 801e84a:	4688      	mov	r8, r1
 801e84c:	4681      	mov	r9, r0
 801e84e:	eb12 0108 	adds.w	r1, r2, r8
 801e852:	6039      	str	r1, [r7, #0]
 801e854:	eb43 0309 	adc.w	r3, r3, r9
 801e858:	607b      	str	r3, [r7, #4]
 801e85a:	68fb      	ldr	r3, [r7, #12]
 801e85c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801e860:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 801e864:	4b56      	ldr	r3, [pc, #344]	@ (801e9c0 <rx_dhcp_client+0x3c0>)
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	2b01      	cmp	r3, #1
 801e86a:	dd16      	ble.n	801e89a <rx_dhcp_client+0x29a>
 801e86c:	4b55      	ldr	r3, [pc, #340]	@ (801e9c4 <rx_dhcp_client+0x3c4>)
 801e86e:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 801e872:	4955      	ldr	r1, [pc, #340]	@ (801e9c8 <rx_dhcp_client+0x3c8>)
 801e874:	2002      	movs	r0, #2
 801e876:	f7fc fad9 	bl	801ae2c <mg_log_prefix>
 801e87a:	6a3c      	ldr	r4, [r7, #32]
 801e87c:	68fb      	ldr	r3, [r7, #12]
 801e87e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 801e882:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e886:	f04f 0300 	mov.w	r3, #0
 801e88a:	f7e2 fa65 	bl	8000d58 <__aeabi_uldivmod>
 801e88e:	4602      	mov	r2, r0
 801e890:	460b      	mov	r3, r1
 801e892:	4621      	mov	r1, r4
 801e894:	484d      	ldr	r0, [pc, #308]	@ (801e9cc <rx_dhcp_client+0x3cc>)
 801e896:	f7fc fb19 	bl	801aecc <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 801e89a:	68fb      	ldr	r3, [r7, #12]
 801e89c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801e8a0:	68bb      	ldr	r3, [r7, #8]
 801e8a2:	691b      	ldr	r3, [r3, #16]
 801e8a4:	3306      	adds	r3, #6
 801e8a6:	2206      	movs	r2, #6
 801e8a8:	4619      	mov	r1, r3
 801e8aa:	f008 fdad 	bl	8027408 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 801e8ae:	68fb      	ldr	r3, [r7, #12]
 801e8b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e8b2:	609a      	str	r2, [r3, #8]
 801e8b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	611a      	str	r2, [r3, #16]
 801e8ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e8bc:	68fb      	ldr	r3, [r7, #12]
 801e8be:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 801e8c0:	68fb      	ldr	r3, [r7, #12]
 801e8c2:	2203      	movs	r2, #3
 801e8c4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 801e8c8:	f107 0310 	add.w	r3, r7, #16
 801e8cc:	2108      	movs	r1, #8
 801e8ce:	4618      	mov	r0, r3
 801e8d0:	f003 fed3 	bl	802267a <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 801e8d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e8d8:	4614      	mov	r4, r2
 801e8da:	f003 ffdf 	bl	802289c <mg_millis>
 801e8de:	4602      	mov	r2, r0
 801e8e0:	460b      	mov	r3, r1
 801e8e2:	4613      	mov	r3, r2
 801e8e4:	4423      	add	r3, r4
 801e8e6:	4618      	mov	r0, r3
 801e8e8:	f006 fde6 	bl	80254b8 <srand>
      if (ifp->enable_req_dns && dns != 0)
 801e8ec:	68fb      	ldr	r3, [r7, #12]
 801e8ee:	7fdb      	ldrb	r3, [r3, #31]
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d009      	beq.n	801e908 <rx_dhcp_client+0x308>
 801e8f4:	69fb      	ldr	r3, [r7, #28]
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	d006      	beq.n	801e908 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 801e8fa:	f107 031c 	add.w	r3, r7, #28
 801e8fe:	461a      	mov	r2, r3
 801e900:	2101      	movs	r1, #1
 801e902:	68f8      	ldr	r0, [r7, #12]
 801e904:	f7ff f87a 	bl	801d9fc <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801e90e:	2b00      	cmp	r3, #0
 801e910:	d042      	beq.n	801e998 <rx_dhcp_client+0x398>
 801e912:	69bb      	ldr	r3, [r7, #24]
 801e914:	2b00      	cmp	r3, #0
 801e916:	d03f      	beq.n	801e998 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 801e918:	f107 0318 	add.w	r3, r7, #24
 801e91c:	461a      	mov	r2, r3
 801e91e:	2102      	movs	r1, #2
 801e920:	68f8      	ldr	r0, [r7, #12]
 801e922:	f7ff f86b 	bl	801d9fc <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801e926:	e037      	b.n	801e998 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 801e928:	68fb      	ldr	r3, [r7, #12]
 801e92a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e92e:	2b03      	cmp	r3, #3
 801e930:	d133      	bne.n	801e99a <rx_dhcp_client+0x39a>
 801e932:	68fb      	ldr	r3, [r7, #12]
 801e934:	689b      	ldr	r3, [r3, #8]
 801e936:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e938:	429a      	cmp	r2, r3
 801e93a:	d12e      	bne.n	801e99a <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 801e93c:	68fb      	ldr	r3, [r7, #12]
 801e93e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801e942:	6a39      	ldr	r1, [r7, #32]
 801e944:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801e948:	fb00 f101 	mul.w	r1, r0, r1
 801e94c:	2000      	movs	r0, #0
 801e94e:	460c      	mov	r4, r1
 801e950:	4605      	mov	r5, r0
 801e952:	eb12 0a04 	adds.w	sl, r2, r4
 801e956:	eb43 0b05 	adc.w	fp, r3, r5
 801e95a:	68fb      	ldr	r3, [r7, #12]
 801e95c:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 801e960:	4b17      	ldr	r3, [pc, #92]	@ (801e9c0 <rx_dhcp_client+0x3c0>)
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	2b01      	cmp	r3, #1
 801e966:	dd18      	ble.n	801e99a <rx_dhcp_client+0x39a>
 801e968:	4b16      	ldr	r3, [pc, #88]	@ (801e9c4 <rx_dhcp_client+0x3c4>)
 801e96a:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 801e96e:	4916      	ldr	r1, [pc, #88]	@ (801e9c8 <rx_dhcp_client+0x3c8>)
 801e970:	2002      	movs	r0, #2
 801e972:	f7fc fa5b 	bl	801ae2c <mg_log_prefix>
 801e976:	6a3c      	ldr	r4, [r7, #32]
 801e978:	68fb      	ldr	r3, [r7, #12]
 801e97a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 801e97e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e982:	f04f 0300 	mov.w	r3, #0
 801e986:	f7e2 f9e7 	bl	8000d58 <__aeabi_uldivmod>
 801e98a:	4602      	mov	r2, r0
 801e98c:	460b      	mov	r3, r1
 801e98e:	4621      	mov	r1, r4
 801e990:	480e      	ldr	r0, [pc, #56]	@ (801e9cc <rx_dhcp_client+0x3cc>)
 801e992:	f7fc fa9b 	bl	801aecc <mg_log>
 801e996:	e000      	b.n	801e99a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801e998:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 801e99a:	68fb      	ldr	r3, [r7, #12]
 801e99c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e9a0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801e9a4:	429a      	cmp	r2, r3
 801e9a6:	d006      	beq.n	801e9b6 <rx_dhcp_client+0x3b6>
 801e9a8:	68f8      	ldr	r0, [r7, #12]
 801e9aa:	f7ff f989 	bl	801dcc0 <onstatechange>
 801e9ae:	e002      	b.n	801e9b6 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801e9b0:	bf00      	nop
 801e9b2:	e000      	b.n	801e9b6 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801e9b4:	bf00      	nop
}
 801e9b6:	3740      	adds	r7, #64	@ 0x40
 801e9b8:	46bd      	mov	sp, r7
 801e9ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e9be:	bf00      	nop
 801e9c0:	20000298 	.word	0x20000298
 801e9c4:	08033f04 	.word	0x08033f04
 801e9c8:	080310b8 	.word	0x080310b8
 801e9cc:	08032858 	.word	0x08032858

0801e9d0 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9d4:	b0d6      	sub	sp, #344	@ 0x158
 801e9d6:	af04      	add	r7, sp, #16
 801e9d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e9dc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801e9e0:	6018      	str	r0, [r3, #0]
 801e9e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e9e6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e9ea:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 801e9ec:	2300      	movs	r3, #0
 801e9ee:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 801e9f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e9f6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e9fa:	681b      	ldr	r3, [r3, #0]
 801e9fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e9fe:	33f0      	adds	r3, #240	@ 0xf0
 801ea00:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 801ea04:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea08:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ea0c:	681b      	ldr	r3, [r3, #0]
 801ea0e:	681a      	ldr	r2, [r3, #0]
 801ea10:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea14:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ea18:	681b      	ldr	r3, [r3, #0]
 801ea1a:	685b      	ldr	r3, [r3, #4]
 801ea1c:	4413      	add	r3, r2
 801ea1e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801ea22:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea26:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ea2a:	681b      	ldr	r3, [r3, #0]
 801ea2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ea2e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801ea32:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801ea36:	429a      	cmp	r2, r3
 801ea38:	f0c0 81b0 	bcc.w	801ed9c <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 801ea3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea40:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ea44:	4ad8      	ldr	r2, [pc, #864]	@ (801eda8 <rx_dhcp_server+0x3d8>)
 801ea46:	4618      	mov	r0, r3
 801ea48:	4611      	mov	r1, r2
 801ea4a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801ea4e:	461a      	mov	r2, r3
 801ea50:	f008 fcda 	bl	8027408 <memcpy>
  res.yiaddr = ifp->ip;
 801ea54:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea58:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ea5c:	681b      	ldr	r3, [r3, #0]
 801ea5e:	689a      	ldr	r2, [r3, #8]
 801ea60:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea64:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ea68:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 801ea6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ea6e:	3310      	adds	r3, #16
 801ea70:	3303      	adds	r3, #3
 801ea72:	781a      	ldrb	r2, [r3, #0]
 801ea74:	3201      	adds	r2, #1
 801ea76:	b2d2      	uxtb	r2, r2
 801ea78:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801ea7a:	e020      	b.n	801eabe <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 801ea7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801ea80:	781b      	ldrb	r3, [r3, #0]
 801ea82:	2b35      	cmp	r3, #53	@ 0x35
 801ea84:	d111      	bne.n	801eaaa <rx_dhcp_server+0xda>
 801ea86:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801ea8a:	3301      	adds	r3, #1
 801ea8c:	781b      	ldrb	r3, [r3, #0]
 801ea8e:	2b01      	cmp	r3, #1
 801ea90:	d10b      	bne.n	801eaaa <rx_dhcp_server+0xda>
 801ea92:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801ea96:	3302      	adds	r3, #2
 801ea98:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801ea9c:	429a      	cmp	r2, r3
 801ea9e:	d904      	bls.n	801eaaa <rx_dhcp_server+0xda>
      op = p[2];
 801eaa0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801eaa4:	789b      	ldrb	r3, [r3, #2]
 801eaa6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 801eaaa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801eaae:	3301      	adds	r3, #1
 801eab0:	781b      	ldrb	r3, [r3, #0]
 801eab2:	3302      	adds	r3, #2
 801eab4:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801eab8:	4413      	add	r3, r2
 801eaba:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801eabe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801eac2:	3301      	adds	r3, #1
 801eac4:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801eac8:	429a      	cmp	r2, r3
 801eaca:	d904      	bls.n	801ead6 <rx_dhcp_server+0x106>
 801eacc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801ead0:	781b      	ldrb	r3, [r3, #0]
 801ead2:	2bff      	cmp	r3, #255	@ 0xff
 801ead4:	d1d2      	bne.n	801ea7c <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 801ead6:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801eada:	2b01      	cmp	r3, #1
 801eadc:	d004      	beq.n	801eae8 <rx_dhcp_server+0x118>
 801eade:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801eae2:	2b03      	cmp	r3, #3
 801eae4:	f040 815b 	bne.w	801ed9e <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 801eae8:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801eaec:	2b01      	cmp	r3, #1
 801eaee:	d101      	bne.n	801eaf4 <rx_dhcp_server+0x124>
 801eaf0:	2302      	movs	r3, #2
 801eaf2:	e000      	b.n	801eaf6 <rx_dhcp_server+0x126>
 801eaf4:	2305      	movs	r3, #5
 801eaf6:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 801eafa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eafe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb02:	2235      	movs	r2, #53	@ 0x35
 801eb04:	701a      	strb	r2, [r3, #0]
 801eb06:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb0a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb0e:	2201      	movs	r2, #1
 801eb10:	705a      	strb	r2, [r3, #1]
 801eb12:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb1a:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 801eb1e:	709a      	strb	r2, [r3, #2]
 801eb20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb28:	2201      	movs	r2, #1
 801eb2a:	70da      	strb	r2, [r3, #3]
 801eb2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb34:	2204      	movs	r2, #4
 801eb36:	711a      	strb	r2, [r3, #4]
 801eb38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb40:	2200      	movs	r2, #0
 801eb42:	715a      	strb	r2, [r3, #5]
 801eb44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb4c:	2200      	movs	r2, #0
 801eb4e:	719a      	strb	r2, [r3, #6]
 801eb50:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb58:	2200      	movs	r2, #0
 801eb5a:	71da      	strb	r2, [r3, #7]
 801eb5c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb64:	2200      	movs	r2, #0
 801eb66:	721a      	strb	r2, [r3, #8]
 801eb68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb6c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb70:	2236      	movs	r2, #54	@ 0x36
 801eb72:	725a      	strb	r2, [r3, #9]
 801eb74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb7c:	2204      	movs	r2, #4
 801eb7e:	729a      	strb	r2, [r3, #10]
 801eb80:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb84:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb88:	2200      	movs	r2, #0
 801eb8a:	72da      	strb	r2, [r3, #11]
 801eb8c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb94:	2200      	movs	r2, #0
 801eb96:	731a      	strb	r2, [r3, #12]
 801eb98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb9c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eba0:	2200      	movs	r2, #0
 801eba2:	735a      	strb	r2, [r3, #13]
 801eba4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eba8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebac:	2200      	movs	r2, #0
 801ebae:	739a      	strb	r2, [r3, #14]
 801ebb0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebb8:	220c      	movs	r2, #12
 801ebba:	73da      	strb	r2, [r3, #15]
 801ebbc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebc0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebc4:	2203      	movs	r2, #3
 801ebc6:	741a      	strb	r2, [r3, #16]
 801ebc8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebcc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebd0:	226d      	movs	r2, #109	@ 0x6d
 801ebd2:	745a      	strb	r2, [r3, #17]
 801ebd4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebd8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebdc:	2269      	movs	r2, #105	@ 0x69
 801ebde:	749a      	strb	r2, [r3, #18]
 801ebe0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebe4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebe8:	2270      	movs	r2, #112	@ 0x70
 801ebea:	74da      	strb	r2, [r3, #19]
 801ebec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebf0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebf4:	2233      	movs	r2, #51	@ 0x33
 801ebf6:	751a      	strb	r2, [r3, #20]
 801ebf8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec00:	2204      	movs	r2, #4
 801ec02:	755a      	strb	r2, [r3, #21]
 801ec04:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec0c:	22ff      	movs	r2, #255	@ 0xff
 801ec0e:	759a      	strb	r2, [r3, #22]
 801ec10:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec14:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec18:	22ff      	movs	r2, #255	@ 0xff
 801ec1a:	75da      	strb	r2, [r3, #23]
 801ec1c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec24:	22ff      	movs	r2, #255	@ 0xff
 801ec26:	761a      	strb	r2, [r3, #24]
 801ec28:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec2c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec30:	22ff      	movs	r2, #255	@ 0xff
 801ec32:	765a      	strb	r2, [r3, #25]
 801ec34:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec3c:	22ff      	movs	r2, #255	@ 0xff
 801ec3e:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 801ec40:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec44:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ec48:	681b      	ldr	r3, [r3, #0]
 801ec4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ec4c:	f103 011c 	add.w	r1, r3, #28
 801ec50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ec54:	331c      	adds	r3, #28
 801ec56:	2206      	movs	r2, #6
 801ec58:	4618      	mov	r0, r3
 801ec5a:	f008 fbd5 	bl	8027408 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 801ec5e:	f107 030c 	add.w	r3, r7, #12
 801ec62:	3305      	adds	r3, #5
 801ec64:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801ec68:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 801ec6c:	6812      	ldr	r2, [r2, #0]
 801ec6e:	320c      	adds	r2, #12
 801ec70:	6812      	ldr	r2, [r2, #0]
 801ec72:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 801ec74:	f107 030c 	add.w	r3, r7, #12
 801ec78:	330b      	adds	r3, #11
 801ec7a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801ec7e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 801ec82:	6812      	ldr	r2, [r2, #0]
 801ec84:	3208      	adds	r2, #8
 801ec86:	6812      	ldr	r2, [r2, #0]
 801ec88:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 801ec8a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec8e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ec92:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801ec96:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 801ec9a:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 801ec9e:	4615      	mov	r5, r2
 801eca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801eca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801eca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801eca8:	c403      	stmia	r4!, {r0, r1}
 801ecaa:	8022      	strh	r2, [r4, #0]
 801ecac:	3402      	adds	r4, #2
 801ecae:	0c13      	lsrs	r3, r2, #16
 801ecb0:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 801ecb2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ecb6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ecba:	681b      	ldr	r3, [r3, #0]
 801ecbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ecbe:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 801ecc2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ecc6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ecca:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 801ecce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ecd2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ecd6:	681b      	ldr	r3, [r3, #0]
 801ecd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ecda:	685a      	ldr	r2, [r3, #4]
 801ecdc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ece0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ece4:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 801ece6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ecea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ecee:	681b      	ldr	r3, [r3, #0]
 801ecf0:	7f9b      	ldrb	r3, [r3, #30]
 801ecf2:	2b00      	cmp	r3, #0
 801ecf4:	d01c      	beq.n	801ed30 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;
 801ecf6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ecfa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ecfe:	691a      	ldr	r2, [r3, #16]
 801ed00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed04:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ed08:	681b      	ldr	r3, [r3, #0]
 801ed0a:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 801ed0c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed10:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ed14:	681b      	ldr	r3, [r3, #0]
 801ed16:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801ed1a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed1e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	691b      	ldr	r3, [r3, #16]
 801ed26:	3306      	adds	r3, #6
 801ed28:	2206      	movs	r2, #6
 801ed2a:	4619      	mov	r1, r3
 801ed2c:	f008 fb6c 	bl	8027408 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 801ed30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed34:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	691b      	ldr	r3, [r3, #16]
 801ed3c:	1d9d      	adds	r5, r3, #6
 801ed3e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed42:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	689e      	ldr	r6, [r3, #8]
 801ed4a:	2043      	movs	r0, #67	@ 0x43
 801ed4c:	f003 fd15 	bl	802277a <mg_ntohs>
 801ed50:	4603      	mov	r3, r0
 801ed52:	4698      	mov	r8, r3
 801ed54:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801ed58:	2b01      	cmp	r3, #1
 801ed5a:	d005      	beq.n	801ed68 <rx_dhcp_server+0x398>
 801ed5c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed60:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ed64:	691c      	ldr	r4, [r3, #16]
 801ed66:	e001      	b.n	801ed6c <rx_dhcp_server+0x39c>
 801ed68:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801ed6c:	2044      	movs	r0, #68	@ 0x44
 801ed6e:	f003 fd04 	bl	802277a <mg_ntohs>
 801ed72:	4603      	mov	r3, r0
 801ed74:	461a      	mov	r2, r3
 801ed76:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed7a:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 801ed7e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801ed82:	9303      	str	r3, [sp, #12]
 801ed84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ed88:	9302      	str	r3, [sp, #8]
 801ed8a:	9201      	str	r2, [sp, #4]
 801ed8c:	9400      	str	r4, [sp, #0]
 801ed8e:	4643      	mov	r3, r8
 801ed90:	4632      	mov	r2, r6
 801ed92:	4629      	mov	r1, r5
 801ed94:	6800      	ldr	r0, [r0, #0]
 801ed96:	f7ff f87d 	bl	801de94 <tx_udp>
 801ed9a:	e000      	b.n	801ed9e <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801ed9c:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 801ed9e:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 801eda2:	46bd      	mov	sp, r7
 801eda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eda8:	08032870 	.word	0x08032870

0801edac <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801edac:	b580      	push	{r7, lr}
 801edae:	b084      	sub	sp, #16
 801edb0:	af00      	add	r7, sp, #0
 801edb2:	6078      	str	r0, [r7, #4]
 801edb4:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 801edb6:	687b      	ldr	r3, [r7, #4]
 801edb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801edba:	2201      	movs	r2, #1
 801edbc:	6839      	ldr	r1, [r7, #0]
 801edbe:	4618      	mov	r0, r3
 801edc0:	f7ff fa46 	bl	801e250 <getpeer>
 801edc4:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 801edc6:	68fb      	ldr	r3, [r7, #12]
 801edc8:	2b00      	cmp	r3, #0
 801edca:	d059      	beq.n	801ee80 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 801edcc:	683b      	ldr	r3, [r7, #0]
 801edce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801edd0:	881b      	ldrh	r3, [r3, #0]
 801edd2:	b29a      	uxth	r2, r3
 801edd4:	68fb      	ldr	r3, [r7, #12]
 801edd6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 801edd8:	68fb      	ldr	r3, [r7, #12]
 801edda:	331c      	adds	r3, #28
 801eddc:	683a      	ldr	r2, [r7, #0]
 801edde:	69d2      	ldr	r2, [r2, #28]
 801ede0:	320c      	adds	r2, #12
 801ede2:	6812      	ldr	r2, [r2, #0]
 801ede4:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 801ede6:	68fb      	ldr	r3, [r7, #12]
 801ede8:	33b0      	adds	r3, #176	@ 0xb0
 801edea:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 801edec:	68bb      	ldr	r3, [r7, #8]
 801edee:	f103 0018 	add.w	r0, r3, #24
 801edf2:	683b      	ldr	r3, [r7, #0]
 801edf4:	691b      	ldr	r3, [r3, #16]
 801edf6:	3306      	adds	r3, #6
 801edf8:	2206      	movs	r2, #6
 801edfa:	4619      	mov	r1, r3
 801edfc:	f008 fb04 	bl	8027408 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 801ee00:	68fb      	ldr	r3, [r7, #12]
 801ee02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801ee08:	d304      	bcc.n	801ee14 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 801ee0a:	491f      	ldr	r1, [pc, #124]	@ (801ee88 <rx_udp+0xdc>)
 801ee0c:	68f8      	ldr	r0, [r7, #12]
 801ee0e:	f7f6 fc47 	bl	80156a0 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 801ee12:	e035      	b.n	801ee80 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 801ee14:	68fb      	ldr	r3, [r7, #12]
 801ee16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ee18:	68fb      	ldr	r3, [r7, #12]
 801ee1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee1c:	1ad2      	subs	r2, r2, r3
 801ee1e:	683b      	ldr	r3, [r7, #0]
 801ee20:	68db      	ldr	r3, [r3, #12]
 801ee22:	429a      	cmp	r2, r3
 801ee24:	d212      	bcs.n	801ee4c <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 801ee26:	68fb      	ldr	r3, [r7, #12]
 801ee28:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801ee2c:	68fb      	ldr	r3, [r7, #12]
 801ee2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ee30:	683b      	ldr	r3, [r7, #0]
 801ee32:	68db      	ldr	r3, [r3, #12]
 801ee34:	4413      	add	r3, r2
 801ee36:	4619      	mov	r1, r3
 801ee38:	f7fb f808 	bl	8019e4c <mg_iobuf_resize>
 801ee3c:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d104      	bne.n	801ee4c <rx_udp+0xa0>
      mg_error(c, "oom");
 801ee42:	4912      	ldr	r1, [pc, #72]	@ (801ee8c <rx_udp+0xe0>)
 801ee44:	68f8      	ldr	r0, [r7, #12]
 801ee46:	f7f6 fc2b 	bl	80156a0 <mg_error>
}
 801ee4a:	e019      	b.n	801ee80 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 801ee4c:	68fb      	ldr	r3, [r7, #12]
 801ee4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee54:	18d0      	adds	r0, r2, r3
 801ee56:	683b      	ldr	r3, [r7, #0]
 801ee58:	6899      	ldr	r1, [r3, #8]
 801ee5a:	683b      	ldr	r3, [r7, #0]
 801ee5c:	68db      	ldr	r3, [r3, #12]
 801ee5e:	461a      	mov	r2, r3
 801ee60:	f008 fad2 	bl	8027408 <memcpy>
      c->recv.len += pkt->pay.len;
 801ee64:	68fb      	ldr	r3, [r7, #12]
 801ee66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ee68:	683b      	ldr	r3, [r7, #0]
 801ee6a:	68db      	ldr	r3, [r3, #12]
 801ee6c:	441a      	add	r2, r3
 801ee6e:	68fb      	ldr	r3, [r7, #12]
 801ee70:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 801ee72:	683b      	ldr	r3, [r7, #0]
 801ee74:	330c      	adds	r3, #12
 801ee76:	461a      	mov	r2, r3
 801ee78:	2107      	movs	r1, #7
 801ee7a:	68f8      	ldr	r0, [r7, #12]
 801ee7c:	f7f6 fbf0 	bl	8015660 <mg_call>
}
 801ee80:	bf00      	nop
 801ee82:	3710      	adds	r7, #16
 801ee84:	46bd      	mov	sp, r7
 801ee86:	bd80      	pop	{r7, pc}
 801ee88:	08032980 	.word	0x08032980
 801ee8c:	0803299c 	.word	0x0803299c

0801ee90 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 801ee90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee92:	b091      	sub	sp, #68	@ 0x44
 801ee94:	af06      	add	r7, sp, #24
 801ee96:	60f8      	str	r0, [r7, #12]
 801ee98:	60b9      	str	r1, [r7, #8]
 801ee9a:	607a      	str	r2, [r7, #4]
 801ee9c:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 801ee9e:	68fb      	ldr	r3, [r7, #12]
 801eea0:	689a      	ldr	r2, [r3, #8]
 801eea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801eea4:	3314      	adds	r3, #20
 801eea6:	9301      	str	r3, [sp, #4]
 801eea8:	687b      	ldr	r3, [r7, #4]
 801eeaa:	9300      	str	r3, [sp, #0]
 801eeac:	4613      	mov	r3, r2
 801eeae:	2206      	movs	r2, #6
 801eeb0:	68b9      	ldr	r1, [r7, #8]
 801eeb2:	68f8      	ldr	r0, [r7, #12]
 801eeb4:	f7fe ff98 	bl	801dde8 <tx_ip>
 801eeb8:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 801eeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eebc:	3314      	adds	r3, #20
 801eebe:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 801eec0:	2214      	movs	r2, #20
 801eec2:	2100      	movs	r1, #0
 801eec4:	6a38      	ldr	r0, [r7, #32]
 801eec6:	f007 f847 	bl	8025f58 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 801eeca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d009      	beq.n	801eee4 <tx_tcp+0x54>
 801eed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801eed2:	2b00      	cmp	r3, #0
 801eed4:	d006      	beq.n	801eee4 <tx_tcp+0x54>
 801eed6:	6a3b      	ldr	r3, [r7, #32]
 801eed8:	3314      	adds	r3, #20
 801eeda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801eedc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801eede:	4618      	mov	r0, r3
 801eee0:	f007 f820 	bl	8025f24 <memmove>
  tcp->sport = sport;
 801eee4:	6a3b      	ldr	r3, [r7, #32]
 801eee6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801eeea:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 801eeec:	6a3b      	ldr	r3, [r7, #32]
 801eeee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801eef2:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 801eef4:	6a3b      	ldr	r3, [r7, #32]
 801eef6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801eef8:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 801eefa:	6a3b      	ldr	r3, [r7, #32]
 801eefc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801eefe:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 801ef00:	6a3b      	ldr	r3, [r7, #32]
 801ef02:	78fa      	ldrb	r2, [r7, #3]
 801ef04:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 801ef06:	f241 7070 	movw	r0, #6000	@ 0x1770
 801ef0a:	f003 fc36 	bl	802277a <mg_ntohs>
 801ef0e:	4603      	mov	r3, r0
 801ef10:	461a      	mov	r2, r3
 801ef12:	6a3b      	ldr	r3, [r7, #32]
 801ef14:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 801ef16:	6a3b      	ldr	r3, [r7, #32]
 801ef18:	2250      	movs	r2, #80	@ 0x50
 801ef1a:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 801ef1c:	2300      	movs	r3, #0
 801ef1e:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 801ef20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ef22:	b29b      	uxth	r3, r3
 801ef24:	3314      	adds	r3, #20
 801ef26:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 801ef28:	2300      	movs	r3, #0
 801ef2a:	753b      	strb	r3, [r7, #20]
 801ef2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef2e:	7a5b      	ldrb	r3, [r3, #9]
 801ef30:	757b      	strb	r3, [r7, #21]
 801ef32:	8b7b      	ldrh	r3, [r7, #26]
 801ef34:	0a1b      	lsrs	r3, r3, #8
 801ef36:	b29b      	uxth	r3, r3
 801ef38:	b2db      	uxtb	r3, r3
 801ef3a:	75bb      	strb	r3, [r7, #22]
 801ef3c:	8b7b      	ldrh	r3, [r7, #26]
 801ef3e:	b2db      	uxtb	r3, r3
 801ef40:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 801ef42:	8b7b      	ldrh	r3, [r7, #26]
 801ef44:	461a      	mov	r2, r3
 801ef46:	6a39      	ldr	r1, [r7, #32]
 801ef48:	69f8      	ldr	r0, [r7, #28]
 801ef4a:	f7fe fd89 	bl	801da60 <csumup>
 801ef4e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 801ef50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef52:	330c      	adds	r3, #12
 801ef54:	2204      	movs	r2, #4
 801ef56:	4619      	mov	r1, r3
 801ef58:	69f8      	ldr	r0, [r7, #28]
 801ef5a:	f7fe fd81 	bl	801da60 <csumup>
 801ef5e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 801ef60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef62:	3310      	adds	r3, #16
 801ef64:	2204      	movs	r2, #4
 801ef66:	4619      	mov	r1, r3
 801ef68:	69f8      	ldr	r0, [r7, #28]
 801ef6a:	f7fe fd79 	bl	801da60 <csumup>
 801ef6e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 801ef70:	f107 0314 	add.w	r3, r7, #20
 801ef74:	2204      	movs	r2, #4
 801ef76:	4619      	mov	r1, r3
 801ef78:	69f8      	ldr	r0, [r7, #28]
 801ef7a:	f7fe fd71 	bl	801da60 <csumup>
 801ef7e:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 801ef80:	69f8      	ldr	r0, [r7, #28]
 801ef82:	f7fe fd98 	bl	801dab6 <csumfin>
 801ef86:	4603      	mov	r3, r0
 801ef88:	461a      	mov	r2, r3
 801ef8a:	6a3b      	ldr	r3, [r7, #32]
 801ef8c:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 801ef8e:	4b21      	ldr	r3, [pc, #132]	@ (801f014 <tx_tcp+0x184>)
 801ef90:	681b      	ldr	r3, [r3, #0]
 801ef92:	2b03      	cmp	r3, #3
 801ef94:	dd2c      	ble.n	801eff0 <tx_tcp+0x160>
 801ef96:	4b20      	ldr	r3, [pc, #128]	@ (801f018 <tx_tcp+0x188>)
 801ef98:	f241 5254 	movw	r2, #5460	@ 0x1554
 801ef9c:	491f      	ldr	r1, [pc, #124]	@ (801f01c <tx_tcp+0x18c>)
 801ef9e:	2004      	movs	r0, #4
 801efa0:	f7fb ff44 	bl	801ae2c <mg_log_prefix>
 801efa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efa6:	f103 050c 	add.w	r5, r3, #12
 801efaa:	6a3b      	ldr	r3, [r7, #32]
 801efac:	881b      	ldrh	r3, [r3, #0]
 801efae:	b29b      	uxth	r3, r3
 801efb0:	4618      	mov	r0, r3
 801efb2:	f003 fbe2 	bl	802277a <mg_ntohs>
 801efb6:	4603      	mov	r3, r0
 801efb8:	461e      	mov	r6, r3
 801efba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efbc:	f103 0410 	add.w	r4, r3, #16
 801efc0:	6a3b      	ldr	r3, [r7, #32]
 801efc2:	885b      	ldrh	r3, [r3, #2]
 801efc4:	b29b      	uxth	r3, r3
 801efc6:	4618      	mov	r0, r3
 801efc8:	f003 fbd7 	bl	802277a <mg_ntohs>
 801efcc:	4603      	mov	r3, r0
 801efce:	461a      	mov	r2, r3
 801efd0:	6a3b      	ldr	r3, [r7, #32]
 801efd2:	7b5b      	ldrb	r3, [r3, #13]
 801efd4:	4619      	mov	r1, r3
 801efd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801efd8:	9304      	str	r3, [sp, #16]
 801efda:	9103      	str	r1, [sp, #12]
 801efdc:	9202      	str	r2, [sp, #8]
 801efde:	9401      	str	r4, [sp, #4]
 801efe0:	4b0f      	ldr	r3, [pc, #60]	@ (801f020 <tx_tcp+0x190>)
 801efe2:	9300      	str	r3, [sp, #0]
 801efe4:	4633      	mov	r3, r6
 801efe6:	462a      	mov	r2, r5
 801efe8:	490d      	ldr	r1, [pc, #52]	@ (801f020 <tx_tcp+0x190>)
 801efea:	480e      	ldr	r0, [pc, #56]	@ (801f024 <tx_tcp+0x194>)
 801efec:	f7fb ff6e 	bl	801aecc <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 801eff0:	6a3b      	ldr	r3, [r7, #32]
 801eff2:	f103 0214 	add.w	r2, r3, #20
 801eff6:	68fb      	ldr	r3, [r7, #12]
 801eff8:	695b      	ldr	r3, [r3, #20]
 801effa:	1ad3      	subs	r3, r2, r3
 801effc:	461a      	mov	r2, r3
 801effe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f000:	4413      	add	r3, r2
 801f002:	4619      	mov	r1, r3
 801f004:	68f8      	ldr	r0, [r7, #12]
 801f006:	f7fe fde1 	bl	801dbcc <ether_output>
 801f00a:	4603      	mov	r3, r0
}
 801f00c:	4618      	mov	r0, r3
 801f00e:	372c      	adds	r7, #44	@ 0x2c
 801f010:	46bd      	mov	sp, r7
 801f012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f014:	20000298 	.word	0x20000298
 801f018:	08033f14 	.word	0x08033f14
 801f01c:	080310b8 	.word	0x080310b8
 801f020:	0802101d 	.word	0x0802101d
 801f024:	080329a0 	.word	0x080329a0

0801f028 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 801f028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f02c:	b08c      	sub	sp, #48	@ 0x30
 801f02e:	af06      	add	r7, sp, #24
 801f030:	60f8      	str	r0, [r7, #12]
 801f032:	60b9      	str	r1, [r7, #8]
 801f034:	603b      	str	r3, [r7, #0]
 801f036:	4613      	mov	r3, r2
 801f038:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 801f03a:	68bb      	ldr	r3, [r7, #8]
 801f03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f03e:	7b5b      	ldrb	r3, [r3, #13]
 801f040:	f003 0303 	and.w	r3, r3, #3
 801f044:	2b00      	cmp	r3, #0
 801f046:	bf14      	ite	ne
 801f048:	2301      	movne	r3, #1
 801f04a:	2300      	moveq	r3, #0
 801f04c:	b2db      	uxtb	r3, r3
 801f04e:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801f050:	68bb      	ldr	r3, [r7, #8]
 801f052:	691b      	ldr	r3, [r3, #16]
 801f054:	1d9e      	adds	r6, r3, #6
 801f056:	68bb      	ldr	r3, [r7, #8]
 801f058:	69db      	ldr	r3, [r3, #28]
 801f05a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801f05e:	68bb      	ldr	r3, [r7, #8]
 801f060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f062:	885b      	ldrh	r3, [r3, #2]
 801f064:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 801f066:	68bb      	ldr	r3, [r7, #8]
 801f068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801f06a:	881b      	ldrh	r3, [r3, #0]
 801f06c:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 801f06e:	68bb      	ldr	r3, [r7, #8]
 801f070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f072:	685b      	ldr	r3, [r3, #4]
 801f074:	4618      	mov	r0, r3
 801f076:	f003 fb67 	bl	8022748 <mg_ntohl>
 801f07a:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801f07c:	697b      	ldr	r3, [r7, #20]
 801f07e:	4413      	add	r3, r2
 801f080:	4618      	mov	r0, r3
 801f082:	f003 fb61 	bl	8022748 <mg_ntohl>
 801f086:	4601      	mov	r1, r0
 801f088:	79fa      	ldrb	r2, [r7, #7]
 801f08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f08c:	9305      	str	r3, [sp, #20]
 801f08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f090:	9304      	str	r3, [sp, #16]
 801f092:	9103      	str	r1, [sp, #12]
 801f094:	683b      	ldr	r3, [r7, #0]
 801f096:	9302      	str	r3, [sp, #8]
 801f098:	9501      	str	r5, [sp, #4]
 801f09a:	9400      	str	r4, [sp, #0]
 801f09c:	4613      	mov	r3, r2
 801f09e:	4642      	mov	r2, r8
 801f0a0:	4631      	mov	r1, r6
 801f0a2:	68f8      	ldr	r0, [r7, #12]
 801f0a4:	f7ff fef4 	bl	801ee90 <tx_tcp>
 801f0a8:	4603      	mov	r3, r0
                buf, len);
}
 801f0aa:	4618      	mov	r0, r3
 801f0ac:	3718      	adds	r7, #24
 801f0ae:	46bd      	mov	sp, r7
 801f0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f0b4 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 801f0b4:	b5b0      	push	{r4, r5, r7, lr}
 801f0b6:	b084      	sub	sp, #16
 801f0b8:	af00      	add	r7, sp, #0
 801f0ba:	6078      	str	r0, [r7, #4]
 801f0bc:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	685b      	ldr	r3, [r3, #4]
 801f0c2:	4618      	mov	r0, r3
 801f0c4:	f7fe fa87 	bl	801d5d6 <mg_alloc_conn>
 801f0c8:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 801f0ca:	68fb      	ldr	r3, [r7, #12]
 801f0cc:	2b00      	cmp	r3, #0
 801f0ce:	d10f      	bne.n	801f0f0 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 801f0d0:	4b4e      	ldr	r3, [pc, #312]	@ (801f20c <accept_conn+0x158>)
 801f0d2:	681b      	ldr	r3, [r3, #0]
 801f0d4:	2b00      	cmp	r3, #0
 801f0d6:	dd09      	ble.n	801f0ec <accept_conn+0x38>
 801f0d8:	4b4d      	ldr	r3, [pc, #308]	@ (801f210 <accept_conn+0x15c>)
 801f0da:	f241 5268 	movw	r2, #5480	@ 0x1568
 801f0de:	494d      	ldr	r1, [pc, #308]	@ (801f214 <accept_conn+0x160>)
 801f0e0:	2001      	movs	r0, #1
 801f0e2:	f7fb fea3 	bl	801ae2c <mg_log_prefix>
 801f0e6:	484c      	ldr	r0, [pc, #304]	@ (801f218 <accept_conn+0x164>)
 801f0e8:	f7fb fef0 	bl	801aecc <mg_log>
    return NULL;
 801f0ec:	2300      	movs	r3, #0
 801f0ee:	e088      	b.n	801f202 <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 801f0f0:	68fb      	ldr	r3, [r7, #12]
 801f0f2:	33b0      	adds	r3, #176	@ 0xb0
 801f0f4:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 801f0f6:	683b      	ldr	r3, [r7, #0]
 801f0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f0fa:	689b      	ldr	r3, [r3, #8]
 801f0fc:	4618      	mov	r0, r3
 801f0fe:	f003 fb23 	bl	8022748 <mg_ntohl>
 801f102:	4602      	mov	r2, r0
 801f104:	68bb      	ldr	r3, [r7, #8]
 801f106:	601a      	str	r2, [r3, #0]
 801f108:	683b      	ldr	r3, [r7, #0]
 801f10a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f10c:	685b      	ldr	r3, [r3, #4]
 801f10e:	4618      	mov	r0, r3
 801f110:	f003 fb1a 	bl	8022748 <mg_ntohl>
 801f114:	4602      	mov	r2, r0
 801f116:	68bb      	ldr	r3, [r7, #8]
 801f118:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 801f11a:	68bb      	ldr	r3, [r7, #8]
 801f11c:	f103 0018 	add.w	r0, r3, #24
 801f120:	683b      	ldr	r3, [r7, #0]
 801f122:	691b      	ldr	r3, [r3, #16]
 801f124:	3306      	adds	r3, #6
 801f126:	2206      	movs	r2, #6
 801f128:	4619      	mov	r1, r3
 801f12a:	f008 f96d 	bl	8027408 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 801f12e:	2100      	movs	r1, #0
 801f130:	68f8      	ldr	r0, [r7, #12]
 801f132:	f7fe fcef 	bl	801db14 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 801f136:	68fb      	ldr	r3, [r7, #12]
 801f138:	331c      	adds	r3, #28
 801f13a:	683a      	ldr	r2, [r7, #0]
 801f13c:	69d2      	ldr	r2, [r2, #28]
 801f13e:	320c      	adds	r2, #12
 801f140:	6812      	ldr	r2, [r2, #0]
 801f142:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 801f144:	683b      	ldr	r3, [r7, #0]
 801f146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f148:	881b      	ldrh	r3, [r3, #0]
 801f14a:	b29a      	uxth	r2, r3
 801f14c:	68fb      	ldr	r3, [r7, #12]
 801f14e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 801f150:	4b2e      	ldr	r3, [pc, #184]	@ (801f20c <accept_conn+0x158>)
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	2b02      	cmp	r3, #2
 801f156:	dd0e      	ble.n	801f176 <accept_conn+0xc2>
 801f158:	4b2d      	ldr	r3, [pc, #180]	@ (801f210 <accept_conn+0x15c>)
 801f15a:	f241 5271 	movw	r2, #5489	@ 0x1571
 801f15e:	492d      	ldr	r1, [pc, #180]	@ (801f214 <accept_conn+0x160>)
 801f160:	2003      	movs	r0, #3
 801f162:	f7fb fe63 	bl	801ae2c <mg_log_prefix>
 801f166:	68fb      	ldr	r3, [r7, #12]
 801f168:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801f16a:	68fb      	ldr	r3, [r7, #12]
 801f16c:	331c      	adds	r3, #28
 801f16e:	4a2b      	ldr	r2, [pc, #172]	@ (801f21c <accept_conn+0x168>)
 801f170:	482b      	ldr	r0, [pc, #172]	@ (801f220 <accept_conn+0x16c>)
 801f172:	f7fb feab 	bl	801aecc <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	685b      	ldr	r3, [r3, #4]
 801f17a:	681a      	ldr	r2, [r3, #0]
 801f17c:	68fb      	ldr	r3, [r7, #12]
 801f17e:	601a      	str	r2, [r3, #0]
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	685b      	ldr	r3, [r3, #4]
 801f184:	68fa      	ldr	r2, [r7, #12]
 801f186:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 801f188:	68fa      	ldr	r2, [r7, #12]
 801f18a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801f18e:	f043 0304 	orr.w	r3, r3, #4
 801f192:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f19c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801f1a0:	b2d9      	uxtb	r1, r3
 801f1a2:	68fa      	ldr	r2, [r7, #12]
 801f1a4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801f1a8:	f361 03c3 	bfi	r3, r1, #3, #1
 801f1ac:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 801f1b6:	68fb      	ldr	r3, [r7, #12]
 801f1b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 801f1bc:	68fa      	ldr	r2, [r7, #12]
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	f102 0408 	add.w	r4, r2, #8
 801f1c4:	f103 0508 	add.w	r5, r3, #8
 801f1c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f1ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f1cc:	682b      	ldr	r3, [r5, #0]
 801f1ce:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801f1d6:	68fb      	ldr	r3, [r7, #12]
 801f1d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801f1e0:	68fb      	ldr	r3, [r7, #12]
 801f1e2:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 801f1e4:	687b      	ldr	r3, [r7, #4]
 801f1e6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 801f1ec:	2200      	movs	r2, #0
 801f1ee:	2101      	movs	r1, #1
 801f1f0:	68f8      	ldr	r0, [r7, #12]
 801f1f2:	f7f6 fa35 	bl	8015660 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 801f1f6:	2200      	movs	r2, #0
 801f1f8:	2105      	movs	r1, #5
 801f1fa:	68f8      	ldr	r0, [r7, #12]
 801f1fc:	f7f6 fa30 	bl	8015660 <mg_call>
  return c;
 801f200:	68fb      	ldr	r3, [r7, #12]
}
 801f202:	4618      	mov	r0, r3
 801f204:	3710      	adds	r7, #16
 801f206:	46bd      	mov	sp, r7
 801f208:	bdb0      	pop	{r4, r5, r7, pc}
 801f20a:	bf00      	nop
 801f20c:	20000298 	.word	0x20000298
 801f210:	08033f1c 	.word	0x08033f1c
 801f214:	080310b8 	.word	0x080310b8
 801f218:	080325f4 	.word	0x080325f4
 801f21c:	08021095 	.word	0x08021095
 801f220:	080329c4 	.word	0x080329c4

0801f224 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 801f224:	b580      	push	{r7, lr}
 801f226:	b08a      	sub	sp, #40	@ 0x28
 801f228:	af00      	add	r7, sp, #0
 801f22a:	6078      	str	r0, [r7, #4]
 801f22c:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	685b      	ldr	r3, [r3, #4]
 801f232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f234:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 801f236:	230e      	movs	r3, #14
 801f238:	623b      	str	r3, [r7, #32]
 801f23a:	2318      	movs	r3, #24
 801f23c:	61fb      	str	r3, [r7, #28]
 801f23e:	233c      	movs	r3, #60	@ 0x3c
 801f240:	61bb      	str	r3, [r7, #24]
 801f242:	2308      	movs	r3, #8
 801f244:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 801f246:	6a3a      	ldr	r2, [r7, #32]
 801f248:	69fb      	ldr	r3, [r7, #28]
 801f24a:	441a      	add	r2, r3
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f252:	f003 0301 	and.w	r3, r3, #1
 801f256:	b2db      	uxtb	r3, r3
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d001      	beq.n	801f260 <trim_len+0x3c>
 801f25c:	697b      	ldr	r3, [r7, #20]
 801f25e:	e000      	b.n	801f262 <trim_len+0x3e>
 801f260:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 801f262:	4413      	add	r3, r2
 801f264:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 801f266:	687b      	ldr	r3, [r7, #4]
 801f268:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f26c:	f003 0301 	and.w	r3, r3, #1
 801f270:	b2db      	uxtb	r3, r3
 801f272:	2b00      	cmp	r3, #0
 801f274:	d103      	bne.n	801f27e <trim_len+0x5a>
 801f276:	693a      	ldr	r2, [r7, #16]
 801f278:	6a3b      	ldr	r3, [r7, #32]
 801f27a:	1ad3      	subs	r3, r2, r3
 801f27c:	e000      	b.n	801f280 <trim_len+0x5c>
 801f27e:	2344      	movs	r3, #68	@ 0x44
 801f280:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 801f282:	683a      	ldr	r2, [r7, #0]
 801f284:	693b      	ldr	r3, [r7, #16]
 801f286:	441a      	add	r2, r3
 801f288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f28a:	699b      	ldr	r3, [r3, #24]
 801f28c:	429a      	cmp	r2, r3
 801f28e:	d904      	bls.n	801f29a <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 801f290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f292:	699a      	ldr	r2, [r3, #24]
 801f294:	693b      	ldr	r3, [r7, #16]
 801f296:	1ad3      	subs	r3, r2, r3
 801f298:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 801f29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f29c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801f2a0:	461a      	mov	r2, r3
 801f2a2:	68fb      	ldr	r3, [r7, #12]
 801f2a4:	4293      	cmp	r3, r2
 801f2a6:	d913      	bls.n	801f2d0 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 801f2a8:	4b20      	ldr	r3, [pc, #128]	@ (801f32c <trim_len+0x108>)
 801f2aa:	681b      	ldr	r3, [r3, #0]
 801f2ac:	2b00      	cmp	r3, #0
 801f2ae:	dd0a      	ble.n	801f2c6 <trim_len+0xa2>
 801f2b0:	4b1f      	ldr	r3, [pc, #124]	@ (801f330 <trim_len+0x10c>)
 801f2b2:	f241 528c 	movw	r2, #5516	@ 0x158c
 801f2b6:	491f      	ldr	r1, [pc, #124]	@ (801f334 <trim_len+0x110>)
 801f2b8:	2001      	movs	r0, #1
 801f2ba:	f7fb fdb7 	bl	801ae2c <mg_log_prefix>
 801f2be:	68f9      	ldr	r1, [r7, #12]
 801f2c0:	481d      	ldr	r0, [pc, #116]	@ (801f338 <trim_len+0x114>)
 801f2c2:	f7fb fe03 	bl	801aecc <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 801f2c6:	68fb      	ldr	r3, [r7, #12]
 801f2c8:	b29a      	uxth	r2, r3
 801f2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 801f2d0:	683a      	ldr	r2, [r7, #0]
 801f2d2:	693b      	ldr	r3, [r7, #16]
 801f2d4:	441a      	add	r2, r3
 801f2d6:	6a3b      	ldr	r3, [r7, #32]
 801f2d8:	1ad3      	subs	r3, r2, r3
 801f2da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f2dc:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 801f2e0:	4293      	cmp	r3, r2
 801f2e2:	d91e      	bls.n	801f322 <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 801f2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801f2ea:	461a      	mov	r2, r3
 801f2ec:	693b      	ldr	r3, [r7, #16]
 801f2ee:	1ad3      	subs	r3, r2, r3
 801f2f0:	6a3a      	ldr	r2, [r7, #32]
 801f2f2:	4413      	add	r3, r2
 801f2f4:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 801f2f6:	687b      	ldr	r3, [r7, #4]
 801f2f8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f2fc:	f003 0301 	and.w	r3, r3, #1
 801f300:	b2db      	uxtb	r3, r3
 801f302:	2b00      	cmp	r3, #0
 801f304:	d00d      	beq.n	801f322 <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 801f306:	4b09      	ldr	r3, [pc, #36]	@ (801f32c <trim_len+0x108>)
 801f308:	681b      	ldr	r3, [r3, #0]
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	dd09      	ble.n	801f322 <trim_len+0xfe>
 801f30e:	4b08      	ldr	r3, [pc, #32]	@ (801f330 <trim_len+0x10c>)
 801f310:	f241 5293 	movw	r2, #5523	@ 0x1593
 801f314:	4907      	ldr	r1, [pc, #28]	@ (801f334 <trim_len+0x110>)
 801f316:	2001      	movs	r0, #1
 801f318:	f7fb fd88 	bl	801ae2c <mg_log_prefix>
 801f31c:	4807      	ldr	r0, [pc, #28]	@ (801f33c <trim_len+0x118>)
 801f31e:	f7fb fdd5 	bl	801aecc <mg_log>
    }
  }

  return len;
 801f322:	683b      	ldr	r3, [r7, #0]
}
 801f324:	4618      	mov	r0, r3
 801f326:	3728      	adds	r7, #40	@ 0x28
 801f328:	46bd      	mov	sp, r7
 801f32a:	bd80      	pop	{r7, pc}
 801f32c:	20000298 	.word	0x20000298
 801f330:	08033f28 	.word	0x08033f28
 801f334:	080310b8 	.word	0x080310b8
 801f338:	080329d4 	.word	0x080329d4
 801f33c:	08032a00 	.word	0x08032a00

0801f340 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 801f340:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f342:	b08f      	sub	sp, #60	@ 0x3c
 801f344:	af06      	add	r7, sp, #24
 801f346:	60f8      	str	r0, [r7, #12]
 801f348:	60b9      	str	r1, [r7, #8]
 801f34a:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801f34c:	68fb      	ldr	r3, [r7, #12]
 801f34e:	685b      	ldr	r3, [r3, #4]
 801f350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f352:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 801f354:	68fb      	ldr	r3, [r7, #12]
 801f356:	33b0      	adds	r3, #176	@ 0xb0
 801f358:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 801f35a:	68fb      	ldr	r3, [r7, #12]
 801f35c:	331c      	adds	r3, #28
 801f35e:	681b      	ldr	r3, [r3, #0]
 801f360:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 801f362:	6879      	ldr	r1, [r7, #4]
 801f364:	68f8      	ldr	r0, [r7, #12]
 801f366:	f7ff ff5d 	bl	801f224 <trim_len>
 801f36a:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f372:	f003 0301 	and.w	r3, r3, #1
 801f376:	b2db      	uxtb	r3, r3
 801f378:	2b00      	cmp	r3, #0
 801f37a:	d015      	beq.n	801f3a8 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 801f37c:	69bb      	ldr	r3, [r7, #24]
 801f37e:	f103 0118 	add.w	r1, r3, #24
 801f382:	69fb      	ldr	r3, [r7, #28]
 801f384:	6898      	ldr	r0, [r3, #8]
 801f386:	68fb      	ldr	r3, [r7, #12]
 801f388:	8b1c      	ldrh	r4, [r3, #24]
 801f38a:	68fb      	ldr	r3, [r7, #12]
 801f38c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801f38e:	687a      	ldr	r2, [r7, #4]
 801f390:	9203      	str	r2, [sp, #12]
 801f392:	68ba      	ldr	r2, [r7, #8]
 801f394:	9202      	str	r2, [sp, #8]
 801f396:	9301      	str	r3, [sp, #4]
 801f398:	697b      	ldr	r3, [r7, #20]
 801f39a:	9300      	str	r3, [sp, #0]
 801f39c:	4623      	mov	r3, r4
 801f39e:	4602      	mov	r2, r0
 801f3a0:	69f8      	ldr	r0, [r7, #28]
 801f3a2:	f7fe fd77 	bl	801de94 <tx_udp>
 801f3a6:	e03d      	b.n	801f424 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 801f3a8:	69bb      	ldr	r3, [r7, #24]
 801f3aa:	f103 0618 	add.w	r6, r3, #24
 801f3ae:	68fb      	ldr	r3, [r7, #12]
 801f3b0:	8b1c      	ldrh	r4, [r3, #24]
 801f3b2:	68fb      	ldr	r3, [r7, #12]
 801f3b4:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f3b6:	69bb      	ldr	r3, [r7, #24]
 801f3b8:	681b      	ldr	r3, [r3, #0]
 801f3ba:	4618      	mov	r0, r3
 801f3bc:	f003 f9c4 	bl	8022748 <mg_ntohl>
 801f3c0:	6038      	str	r0, [r7, #0]
 801f3c2:	69bb      	ldr	r3, [r7, #24]
 801f3c4:	685b      	ldr	r3, [r3, #4]
 801f3c6:	4618      	mov	r0, r3
 801f3c8:	f003 f9be 	bl	8022748 <mg_ntohl>
 801f3cc:	4602      	mov	r2, r0
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	9305      	str	r3, [sp, #20]
 801f3d2:	68bb      	ldr	r3, [r7, #8]
 801f3d4:	9304      	str	r3, [sp, #16]
 801f3d6:	9203      	str	r2, [sp, #12]
 801f3d8:	683b      	ldr	r3, [r7, #0]
 801f3da:	9302      	str	r3, [sp, #8]
 801f3dc:	9501      	str	r5, [sp, #4]
 801f3de:	9400      	str	r4, [sp, #0]
 801f3e0:	2318      	movs	r3, #24
 801f3e2:	697a      	ldr	r2, [r7, #20]
 801f3e4:	4631      	mov	r1, r6
 801f3e6:	69f8      	ldr	r0, [r7, #28]
 801f3e8:	f7ff fd52 	bl	801ee90 <tx_tcp>
 801f3ec:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 801f3ee:	693b      	ldr	r3, [r7, #16]
 801f3f0:	2b00      	cmp	r3, #0
 801f3f2:	d102      	bne.n	801f3fa <mg_io_send+0xba>
      return MG_IO_WAIT;
 801f3f4:	f06f 0301 	mvn.w	r3, #1
 801f3f8:	e015      	b.n	801f426 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 801f3fa:	693b      	ldr	r3, [r7, #16]
 801f3fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f400:	d102      	bne.n	801f408 <mg_io_send+0xc8>
      return MG_IO_ERR;
 801f402:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f406:	e00e      	b.n	801f426 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 801f408:	69bb      	ldr	r3, [r7, #24]
 801f40a:	681a      	ldr	r2, [r3, #0]
 801f40c:	687b      	ldr	r3, [r7, #4]
 801f40e:	441a      	add	r2, r3
 801f410:	69bb      	ldr	r3, [r7, #24]
 801f412:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 801f414:	69bb      	ldr	r3, [r7, #24]
 801f416:	7f9b      	ldrb	r3, [r3, #30]
 801f418:	2b01      	cmp	r3, #1
 801f41a:	d103      	bne.n	801f424 <mg_io_send+0xe4>
 801f41c:	2100      	movs	r1, #0
 801f41e:	68f8      	ldr	r0, [r7, #12]
 801f420:	f7fe fb78 	bl	801db14 <settmout>
    }
  }
  return (long) len;
 801f424:	687b      	ldr	r3, [r7, #4]
}
 801f426:	4618      	mov	r0, r3
 801f428:	3724      	adds	r7, #36	@ 0x24
 801f42a:	46bd      	mov	sp, r7
 801f42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801f430 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 801f430:	b580      	push	{r7, lr}
 801f432:	b084      	sub	sp, #16
 801f434:	af00      	add	r7, sp, #0
 801f436:	6078      	str	r0, [r7, #4]
 801f438:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 801f43a:	683b      	ldr	r3, [r7, #0]
 801f43c:	681a      	ldr	r2, [r3, #0]
 801f43e:	683b      	ldr	r3, [r7, #0]
 801f440:	689b      	ldr	r3, [r3, #8]
 801f442:	18d1      	adds	r1, r2, r3
 801f444:	683b      	ldr	r3, [r7, #0]
 801f446:	685a      	ldr	r2, [r3, #4]
 801f448:	683b      	ldr	r3, [r7, #0]
 801f44a:	689b      	ldr	r3, [r3, #8]
 801f44c:	1ad3      	subs	r3, r2, r3
 801f44e:	461a      	mov	r2, r3
 801f450:	6878      	ldr	r0, [r7, #4]
 801f452:	f002 ff51 	bl	80222f8 <mg_tls_recv>
 801f456:	4603      	mov	r3, r0
 801f458:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 801f45a:	68fb      	ldr	r3, [r7, #12]
 801f45c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f460:	d104      	bne.n	801f46c <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 801f462:	490c      	ldr	r1, [pc, #48]	@ (801f494 <handle_tls_recv+0x64>)
 801f464:	6878      	ldr	r0, [r7, #4]
 801f466:	f7f6 f91b 	bl	80156a0 <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 801f46a:	e00f      	b.n	801f48c <handle_tls_recv+0x5c>
  } else if (n > 0) {
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	dd0c      	ble.n	801f48c <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 801f472:	683b      	ldr	r3, [r7, #0]
 801f474:	689b      	ldr	r3, [r3, #8]
 801f476:	68fa      	ldr	r2, [r7, #12]
 801f478:	441a      	add	r2, r3
 801f47a:	683b      	ldr	r3, [r7, #0]
 801f47c:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 801f47e:	f107 030c 	add.w	r3, r7, #12
 801f482:	461a      	mov	r2, r3
 801f484:	2107      	movs	r1, #7
 801f486:	6878      	ldr	r0, [r7, #4]
 801f488:	f7f6 f8ea 	bl	8015660 <mg_call>
}
 801f48c:	bf00      	nop
 801f48e:	3710      	adds	r7, #16
 801f490:	46bd      	mov	sp, r7
 801f492:	bd80      	pop	{r7, pc}
 801f494:	08032a2c 	.word	0x08032a2c

0801f498 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 801f498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f49c:	b090      	sub	sp, #64	@ 0x40
 801f49e:	af06      	add	r7, sp, #24
 801f4a0:	60f8      	str	r0, [r7, #12]
 801f4a2:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 801f4a4:	68fb      	ldr	r3, [r7, #12]
 801f4a6:	33b0      	adds	r3, #176	@ 0xb0
 801f4a8:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 801f4aa:	68fb      	ldr	r3, [r7, #12]
 801f4ac:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f4b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f4b4:	b2db      	uxtb	r3, r3
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	d002      	beq.n	801f4c0 <read_conn+0x28>
 801f4ba:	68fb      	ldr	r3, [r7, #12]
 801f4bc:	3368      	adds	r3, #104	@ 0x68
 801f4be:	e001      	b.n	801f4c4 <read_conn+0x2c>
 801f4c0:	68fb      	ldr	r3, [r7, #12]
 801f4c2:	3338      	adds	r3, #56	@ 0x38
 801f4c4:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 801f4c6:	68bb      	ldr	r3, [r7, #8]
 801f4c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4ca:	685b      	ldr	r3, [r3, #4]
 801f4cc:	4618      	mov	r0, r3
 801f4ce:	f003 f93b 	bl	8022748 <mg_ntohl>
 801f4d2:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801f4d4:	68fb      	ldr	r3, [r7, #12]
 801f4d6:	331c      	adds	r3, #28
 801f4d8:	681b      	ldr	r3, [r3, #0]
 801f4da:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 801f4dc:	68bb      	ldr	r3, [r7, #8]
 801f4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4e0:	7b5b      	ldrb	r3, [r3, #13]
 801f4e2:	f003 0301 	and.w	r3, r3, #1
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	d070      	beq.n	801f5cc <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 801f4ea:	2310      	movs	r3, #16
 801f4ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 801f4f0:	68bb      	ldr	r3, [r7, #8]
 801f4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4f4:	685b      	ldr	r3, [r3, #4]
 801f4f6:	4618      	mov	r0, r3
 801f4f8:	f003 f926 	bl	8022748 <mg_ntohl>
 801f4fc:	4602      	mov	r2, r0
 801f4fe:	68bb      	ldr	r3, [r7, #8]
 801f500:	68db      	ldr	r3, [r3, #12]
 801f502:	4413      	add	r3, r2
 801f504:	1c5a      	adds	r2, r3, #1
 801f506:	6a3b      	ldr	r3, [r7, #32]
 801f508:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 801f50a:	68fb      	ldr	r3, [r7, #12]
 801f50c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f510:	f003 0310 	and.w	r3, r3, #16
 801f514:	b2db      	uxtb	r3, r3
 801f516:	2b00      	cmp	r3, #0
 801f518:	d01e      	beq.n	801f558 <read_conn+0xc0>
 801f51a:	6a3b      	ldr	r3, [r7, #32]
 801f51c:	7f9b      	ldrb	r3, [r3, #30]
 801f51e:	2b04      	cmp	r3, #4
 801f520:	d11a      	bne.n	801f558 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801f522:	6a3b      	ldr	r3, [r7, #32]
 801f524:	681c      	ldr	r4, [r3, #0]
 801f526:	68bb      	ldr	r3, [r7, #8]
 801f528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f52a:	689b      	ldr	r3, [r3, #8]
 801f52c:	4618      	mov	r0, r3
 801f52e:	f003 f90b 	bl	8022748 <mg_ntohl>
 801f532:	4603      	mov	r3, r0
 801f534:	429c      	cmp	r4, r3
 801f536:	d105      	bne.n	801f544 <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 801f538:	6a3b      	ldr	r3, [r7, #32]
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	1c5a      	adds	r2, r3, #1
 801f53e:	6a3b      	ldr	r3, [r7, #32]
 801f540:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801f542:	e01a      	b.n	801f57a <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 801f544:	68bb      	ldr	r3, [r7, #8]
 801f546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f548:	689b      	ldr	r3, [r3, #8]
 801f54a:	4618      	mov	r0, r3
 801f54c:	f003 f8fc 	bl	8022748 <mg_ntohl>
 801f550:	4602      	mov	r2, r0
 801f552:	6a3b      	ldr	r3, [r7, #32]
 801f554:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801f556:	e010      	b.n	801f57a <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 801f558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801f55c:	f043 0301 	orr.w	r3, r3, #1
 801f560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 801f564:	68fa      	ldr	r2, [r7, #12]
 801f566:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801f56a:	f043 0310 	orr.w	r3, r3, #16
 801f56e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 801f572:	2104      	movs	r1, #4
 801f574:	68f8      	ldr	r0, [r7, #12]
 801f576:	f7fe facd 	bl	801db14 <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 801f57a:	68fb      	ldr	r3, [r7, #12]
 801f57c:	685b      	ldr	r3, [r3, #4]
 801f57e:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801f580:	6a3b      	ldr	r3, [r7, #32]
 801f582:	f103 0818 	add.w	r8, r3, #24
 801f586:	693b      	ldr	r3, [r7, #16]
 801f588:	607b      	str	r3, [r7, #4]
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	8b1c      	ldrh	r4, [r3, #24]
 801f58e:	68fb      	ldr	r3, [r7, #12]
 801f590:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f592:	6a3b      	ldr	r3, [r7, #32]
 801f594:	681b      	ldr	r3, [r3, #0]
 801f596:	4618      	mov	r0, r3
 801f598:	f003 f8d6 	bl	8022748 <mg_ntohl>
 801f59c:	6038      	str	r0, [r7, #0]
 801f59e:	6a3b      	ldr	r3, [r7, #32]
 801f5a0:	685b      	ldr	r3, [r3, #4]
 801f5a2:	4618      	mov	r0, r3
 801f5a4:	f003 f8d0 	bl	8022748 <mg_ntohl>
 801f5a8:	4602      	mov	r2, r0
 801f5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801f5ae:	2100      	movs	r1, #0
 801f5b0:	9105      	str	r1, [sp, #20]
 801f5b2:	4990      	ldr	r1, [pc, #576]	@ (801f7f4 <read_conn+0x35c>)
 801f5b4:	9104      	str	r1, [sp, #16]
 801f5b6:	9203      	str	r2, [sp, #12]
 801f5b8:	6839      	ldr	r1, [r7, #0]
 801f5ba:	9102      	str	r1, [sp, #8]
 801f5bc:	9501      	str	r5, [sp, #4]
 801f5be:	9400      	str	r4, [sp, #0]
 801f5c0:	687a      	ldr	r2, [r7, #4]
 801f5c2:	4641      	mov	r1, r8
 801f5c4:	4630      	mov	r0, r6
 801f5c6:	f7ff fc63 	bl	801ee90 <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 801f5ca:	e173      	b.n	801f8b4 <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 801f5cc:	68bb      	ldr	r3, [r7, #8]
 801f5ce:	68db      	ldr	r3, [r3, #12]
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	f000 816f 	beq.w	801f8b4 <read_conn+0x41c>
  } else if (seq != s->ack) {
 801f5d6:	6a3b      	ldr	r3, [r7, #32]
 801f5d8:	685b      	ldr	r3, [r3, #4]
 801f5da:	69ba      	ldr	r2, [r7, #24]
 801f5dc:	429a      	cmp	r2, r3
 801f5de:	d059      	beq.n	801f694 <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 801f5e0:	68bb      	ldr	r3, [r7, #8]
 801f5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f5e4:	685b      	ldr	r3, [r3, #4]
 801f5e6:	4618      	mov	r0, r3
 801f5e8:	f003 f8ae 	bl	8022748 <mg_ntohl>
 801f5ec:	4602      	mov	r2, r0
 801f5ee:	68bb      	ldr	r3, [r7, #8]
 801f5f0:	68db      	ldr	r3, [r3, #12]
 801f5f2:	4413      	add	r3, r2
 801f5f4:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 801f5f6:	6a3b      	ldr	r3, [r7, #32]
 801f5f8:	685b      	ldr	r3, [r3, #4]
 801f5fa:	697a      	ldr	r2, [r7, #20]
 801f5fc:	429a      	cmp	r2, r3
 801f5fe:	d10f      	bne.n	801f620 <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 801f600:	4b7d      	ldr	r3, [pc, #500]	@ (801f7f8 <read_conn+0x360>)
 801f602:	681b      	ldr	r3, [r3, #0]
 801f604:	2b03      	cmp	r3, #3
 801f606:	f340 8155 	ble.w	801f8b4 <read_conn+0x41c>
 801f60a:	4b7c      	ldr	r3, [pc, #496]	@ (801f7fc <read_conn+0x364>)
 801f60c:	f241 52da 	movw	r2, #5594	@ 0x15da
 801f610:	497b      	ldr	r1, [pc, #492]	@ (801f800 <read_conn+0x368>)
 801f612:	2004      	movs	r0, #4
 801f614:	f7fb fc0a 	bl	801ae2c <mg_log_prefix>
 801f618:	487a      	ldr	r0, [pc, #488]	@ (801f804 <read_conn+0x36c>)
 801f61a:	f7fb fc57 	bl	801aecc <mg_log>
}
 801f61e:	e149      	b.n	801f8b4 <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 801f620:	4b75      	ldr	r3, [pc, #468]	@ (801f7f8 <read_conn+0x360>)
 801f622:	681b      	ldr	r3, [r3, #0]
 801f624:	2b03      	cmp	r3, #3
 801f626:	dd0d      	ble.n	801f644 <read_conn+0x1ac>
 801f628:	4b74      	ldr	r3, [pc, #464]	@ (801f7fc <read_conn+0x364>)
 801f62a:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 801f62e:	4974      	ldr	r1, [pc, #464]	@ (801f800 <read_conn+0x368>)
 801f630:	2004      	movs	r0, #4
 801f632:	f7fb fbfb 	bl	801ae2c <mg_log_prefix>
 801f636:	6a3b      	ldr	r3, [r7, #32]
 801f638:	685a      	ldr	r2, [r3, #4]
 801f63a:	697b      	ldr	r3, [r7, #20]
 801f63c:	69b9      	ldr	r1, [r7, #24]
 801f63e:	4872      	ldr	r0, [pc, #456]	@ (801f808 <read_conn+0x370>)
 801f640:	f7fb fc44 	bl	801aecc <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 801f644:	68fb      	ldr	r3, [r7, #12]
 801f646:	685b      	ldr	r3, [r3, #4]
 801f648:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801f64a:	6a3b      	ldr	r3, [r7, #32]
 801f64c:	f103 0818 	add.w	r8, r3, #24
 801f650:	693b      	ldr	r3, [r7, #16]
 801f652:	607b      	str	r3, [r7, #4]
 801f654:	68fb      	ldr	r3, [r7, #12]
 801f656:	8b1c      	ldrh	r4, [r3, #24]
 801f658:	68fb      	ldr	r3, [r7, #12]
 801f65a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f65c:	6a3b      	ldr	r3, [r7, #32]
 801f65e:	681b      	ldr	r3, [r3, #0]
 801f660:	4618      	mov	r0, r3
 801f662:	f003 f871 	bl	8022748 <mg_ntohl>
 801f666:	6038      	str	r0, [r7, #0]
 801f668:	6a3b      	ldr	r3, [r7, #32]
 801f66a:	685b      	ldr	r3, [r3, #4]
 801f66c:	4618      	mov	r0, r3
 801f66e:	f003 f86b 	bl	8022748 <mg_ntohl>
 801f672:	4603      	mov	r3, r0
 801f674:	2200      	movs	r2, #0
 801f676:	9205      	str	r2, [sp, #20]
 801f678:	4a5e      	ldr	r2, [pc, #376]	@ (801f7f4 <read_conn+0x35c>)
 801f67a:	9204      	str	r2, [sp, #16]
 801f67c:	9303      	str	r3, [sp, #12]
 801f67e:	6839      	ldr	r1, [r7, #0]
 801f680:	9102      	str	r1, [sp, #8]
 801f682:	9501      	str	r5, [sp, #4]
 801f684:	9400      	str	r4, [sp, #0]
 801f686:	2310      	movs	r3, #16
 801f688:	687a      	ldr	r2, [r7, #4]
 801f68a:	4641      	mov	r1, r8
 801f68c:	4630      	mov	r0, r6
 801f68e:	f7ff fbff 	bl	801ee90 <tx_tcp>
}
 801f692:	e10f      	b.n	801f8b4 <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 801f694:	69fb      	ldr	r3, [r7, #28]
 801f696:	685a      	ldr	r2, [r3, #4]
 801f698:	69fb      	ldr	r3, [r7, #28]
 801f69a:	689b      	ldr	r3, [r3, #8]
 801f69c:	1ad2      	subs	r2, r2, r3
 801f69e:	68bb      	ldr	r3, [r7, #8]
 801f6a0:	68db      	ldr	r3, [r3, #12]
 801f6a2:	429a      	cmp	r2, r3
 801f6a4:	d210      	bcs.n	801f6c8 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801f6a6:	69fb      	ldr	r3, [r7, #28]
 801f6a8:	689a      	ldr	r2, [r3, #8]
 801f6aa:	68bb      	ldr	r3, [r7, #8]
 801f6ac:	68db      	ldr	r3, [r3, #12]
 801f6ae:	4413      	add	r3, r2
 801f6b0:	4619      	mov	r1, r3
 801f6b2:	69f8      	ldr	r0, [r7, #28]
 801f6b4:	f7fa fbca 	bl	8019e4c <mg_iobuf_resize>
 801f6b8:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	d104      	bne.n	801f6c8 <read_conn+0x230>
    mg_error(c, "oom");
 801f6be:	4953      	ldr	r1, [pc, #332]	@ (801f80c <read_conn+0x374>)
 801f6c0:	68f8      	ldr	r0, [r7, #12]
 801f6c2:	f7f5 ffed 	bl	80156a0 <mg_error>
 801f6c6:	e0f5      	b.n	801f8b4 <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 801f6c8:	69fb      	ldr	r3, [r7, #28]
 801f6ca:	681a      	ldr	r2, [r3, #0]
 801f6cc:	69fb      	ldr	r3, [r7, #28]
 801f6ce:	689b      	ldr	r3, [r3, #8]
 801f6d0:	18d0      	adds	r0, r2, r3
 801f6d2:	68bb      	ldr	r3, [r7, #8]
 801f6d4:	6899      	ldr	r1, [r3, #8]
 801f6d6:	68bb      	ldr	r3, [r7, #8]
 801f6d8:	68db      	ldr	r3, [r3, #12]
 801f6da:	461a      	mov	r2, r3
 801f6dc:	f007 fe94 	bl	8027408 <memcpy>
    io->len += pkt->pay.len;
 801f6e0:	69fb      	ldr	r3, [r7, #28]
 801f6e2:	689a      	ldr	r2, [r3, #8]
 801f6e4:	68bb      	ldr	r3, [r7, #8]
 801f6e6:	68db      	ldr	r3, [r3, #12]
 801f6e8:	441a      	add	r2, r3
 801f6ea:	69fb      	ldr	r3, [r7, #28]
 801f6ec:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 801f6ee:	4b42      	ldr	r3, [pc, #264]	@ (801f7f8 <read_conn+0x360>)
 801f6f0:	681b      	ldr	r3, [r3, #0]
 801f6f2:	2b03      	cmp	r3, #3
 801f6f4:	dd15      	ble.n	801f722 <read_conn+0x28a>
 801f6f6:	4b41      	ldr	r3, [pc, #260]	@ (801f7fc <read_conn+0x364>)
 801f6f8:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 801f6fc:	4940      	ldr	r1, [pc, #256]	@ (801f800 <read_conn+0x368>)
 801f6fe:	2004      	movs	r0, #4
 801f700:	f7fb fb94 	bl	801ae2c <mg_log_prefix>
 801f704:	68fb      	ldr	r3, [r7, #12]
 801f706:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801f708:	68bb      	ldr	r3, [r7, #8]
 801f70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f70c:	685b      	ldr	r3, [r3, #4]
 801f70e:	4618      	mov	r0, r3
 801f710:	f003 f81a 	bl	8022748 <mg_ntohl>
 801f714:	4602      	mov	r2, r0
 801f716:	6a3b      	ldr	r3, [r7, #32]
 801f718:	685b      	ldr	r3, [r3, #4]
 801f71a:	4621      	mov	r1, r4
 801f71c:	483c      	ldr	r0, [pc, #240]	@ (801f810 <read_conn+0x378>)
 801f71e:	f7fb fbd5 	bl	801aecc <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 801f722:	68bb      	ldr	r3, [r7, #8]
 801f724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f726:	685b      	ldr	r3, [r3, #4]
 801f728:	4618      	mov	r0, r3
 801f72a:	f003 f80d 	bl	8022748 <mg_ntohl>
 801f72e:	4602      	mov	r2, r0
 801f730:	68bb      	ldr	r3, [r7, #8]
 801f732:	68db      	ldr	r3, [r3, #12]
 801f734:	441a      	add	r2, r3
 801f736:	6a3b      	ldr	r3, [r7, #32]
 801f738:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 801f73a:	6a3b      	ldr	r3, [r7, #32]
 801f73c:	695a      	ldr	r2, [r3, #20]
 801f73e:	68bb      	ldr	r3, [r7, #8]
 801f740:	68db      	ldr	r3, [r3, #12]
 801f742:	441a      	add	r2, r3
 801f744:	6a3b      	ldr	r3, [r7, #32]
 801f746:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 801f748:	6a3b      	ldr	r3, [r7, #32]
 801f74a:	695b      	ldr	r3, [r3, #20]
 801f74c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801f750:	4293      	cmp	r3, r2
 801f752:	d961      	bls.n	801f818 <read_conn+0x380>
 801f754:	6a3b      	ldr	r3, [r7, #32]
 801f756:	691a      	ldr	r2, [r3, #16]
 801f758:	6a3b      	ldr	r3, [r7, #32]
 801f75a:	685b      	ldr	r3, [r3, #4]
 801f75c:	429a      	cmp	r2, r3
 801f75e:	d05b      	beq.n	801f818 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 801f760:	4b25      	ldr	r3, [pc, #148]	@ (801f7f8 <read_conn+0x360>)
 801f762:	681b      	ldr	r3, [r3, #0]
 801f764:	2b03      	cmp	r3, #3
 801f766:	dd0e      	ble.n	801f786 <read_conn+0x2ee>
 801f768:	4b24      	ldr	r3, [pc, #144]	@ (801f7fc <read_conn+0x364>)
 801f76a:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 801f76e:	4924      	ldr	r1, [pc, #144]	@ (801f800 <read_conn+0x368>)
 801f770:	2004      	movs	r0, #4
 801f772:	f7fb fb5b 	bl	801ae2c <mg_log_prefix>
 801f776:	68fb      	ldr	r3, [r7, #12]
 801f778:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801f77a:	6a3b      	ldr	r3, [r7, #32]
 801f77c:	691b      	ldr	r3, [r3, #16]
 801f77e:	461a      	mov	r2, r3
 801f780:	4824      	ldr	r0, [pc, #144]	@ (801f814 <read_conn+0x37c>)
 801f782:	f7fb fba3 	bl	801aecc <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 801f786:	68fb      	ldr	r3, [r7, #12]
 801f788:	685b      	ldr	r3, [r3, #4]
 801f78a:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801f78c:	6a3b      	ldr	r3, [r7, #32]
 801f78e:	f103 0818 	add.w	r8, r3, #24
 801f792:	693b      	ldr	r3, [r7, #16]
 801f794:	607b      	str	r3, [r7, #4]
 801f796:	68fb      	ldr	r3, [r7, #12]
 801f798:	8b1c      	ldrh	r4, [r3, #24]
 801f79a:	68fb      	ldr	r3, [r7, #12]
 801f79c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f79e:	6a3b      	ldr	r3, [r7, #32]
 801f7a0:	681b      	ldr	r3, [r3, #0]
 801f7a2:	4618      	mov	r0, r3
 801f7a4:	f002 ffd0 	bl	8022748 <mg_ntohl>
 801f7a8:	6038      	str	r0, [r7, #0]
 801f7aa:	6a3b      	ldr	r3, [r7, #32]
 801f7ac:	685b      	ldr	r3, [r3, #4]
 801f7ae:	4618      	mov	r0, r3
 801f7b0:	f002 ffca 	bl	8022748 <mg_ntohl>
 801f7b4:	4603      	mov	r3, r0
 801f7b6:	2200      	movs	r2, #0
 801f7b8:	9205      	str	r2, [sp, #20]
 801f7ba:	2200      	movs	r2, #0
 801f7bc:	9204      	str	r2, [sp, #16]
 801f7be:	9303      	str	r3, [sp, #12]
 801f7c0:	6839      	ldr	r1, [r7, #0]
 801f7c2:	9102      	str	r1, [sp, #8]
 801f7c4:	9501      	str	r5, [sp, #4]
 801f7c6:	9400      	str	r4, [sp, #0]
 801f7c8:	2310      	movs	r3, #16
 801f7ca:	687a      	ldr	r2, [r7, #4]
 801f7cc:	4641      	mov	r1, r8
 801f7ce:	4630      	mov	r0, r6
 801f7d0:	f7ff fb5e 	bl	801ee90 <tx_tcp>
      s->unacked = 0;
 801f7d4:	6a3b      	ldr	r3, [r7, #32]
 801f7d6:	2200      	movs	r2, #0
 801f7d8:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 801f7da:	6a3b      	ldr	r3, [r7, #32]
 801f7dc:	685a      	ldr	r2, [r3, #4]
 801f7de:	6a3b      	ldr	r3, [r7, #32]
 801f7e0:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 801f7e2:	6a3b      	ldr	r3, [r7, #32]
 801f7e4:	7f9b      	ldrb	r3, [r3, #30]
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d01e      	beq.n	801f828 <read_conn+0x390>
 801f7ea:	2100      	movs	r1, #0
 801f7ec:	68f8      	ldr	r0, [r7, #12]
 801f7ee:	f7fe f991 	bl	801db14 <settmout>
 801f7f2:	e019      	b.n	801f828 <read_conn+0x390>
 801f7f4:	08031798 	.word	0x08031798
 801f7f8:	20000298 	.word	0x20000298
 801f7fc:	08033f34 	.word	0x08033f34
 801f800:	080310b8 	.word	0x080310b8
 801f804:	08032a3c 	.word	0x08032a3c
 801f808:	08032a54 	.word	0x08032a54
 801f80c:	0803299c 	.word	0x0803299c
 801f810:	08032a6c 	.word	0x08032a6c
 801f814:	08032a80 	.word	0x08032a80
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 801f818:	6a3b      	ldr	r3, [r7, #32]
 801f81a:	7f9b      	ldrb	r3, [r3, #30]
 801f81c:	2b01      	cmp	r3, #1
 801f81e:	d003      	beq.n	801f828 <read_conn+0x390>
 801f820:	2101      	movs	r1, #1
 801f822:	68f8      	ldr	r0, [r7, #12]
 801f824:	f7fe f976 	bl	801db14 <settmout>
    if (c->is_tls && c->is_tls_hs) {
 801f828:	68fb      	ldr	r3, [r7, #12]
 801f82a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f82e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f832:	b2db      	uxtb	r3, r3
 801f834:	2b00      	cmp	r3, #0
 801f836:	d00b      	beq.n	801f850 <read_conn+0x3b8>
 801f838:	68fb      	ldr	r3, [r7, #12]
 801f83a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f83e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801f842:	b2db      	uxtb	r3, r3
 801f844:	2b00      	cmp	r3, #0
 801f846:	d003      	beq.n	801f850 <read_conn+0x3b8>
      mg_tls_handshake(c);
 801f848:	68f8      	ldr	r0, [r7, #12]
 801f84a:	f002 fd41 	bl	80222d0 <mg_tls_handshake>
 801f84e:	e031      	b.n	801f8b4 <read_conn+0x41c>
    } else if (c->is_tls) {
 801f850:	68fb      	ldr	r3, [r7, #12]
 801f852:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f85a:	b2db      	uxtb	r3, r3
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d021      	beq.n	801f8a4 <read_conn+0x40c>
      io = &c->recv;
 801f860:	68fb      	ldr	r3, [r7, #12]
 801f862:	3338      	adds	r3, #56	@ 0x38
 801f864:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 801f866:	69fb      	ldr	r3, [r7, #28]
 801f868:	685a      	ldr	r2, [r3, #4]
 801f86a:	69fb      	ldr	r3, [r7, #28]
 801f86c:	689b      	ldr	r3, [r3, #8]
 801f86e:	1ad2      	subs	r2, r2, r3
 801f870:	68bb      	ldr	r3, [r7, #8]
 801f872:	68db      	ldr	r3, [r3, #12]
 801f874:	429a      	cmp	r2, r3
 801f876:	d210      	bcs.n	801f89a <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801f878:	69fb      	ldr	r3, [r7, #28]
 801f87a:	689a      	ldr	r2, [r3, #8]
 801f87c:	68bb      	ldr	r3, [r7, #8]
 801f87e:	68db      	ldr	r3, [r3, #12]
 801f880:	4413      	add	r3, r2
 801f882:	4619      	mov	r1, r3
 801f884:	69f8      	ldr	r0, [r7, #28]
 801f886:	f7fa fae1 	bl	8019e4c <mg_iobuf_resize>
 801f88a:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d104      	bne.n	801f89a <read_conn+0x402>
        mg_error(c, "oom");
 801f890:	490b      	ldr	r1, [pc, #44]	@ (801f8c0 <read_conn+0x428>)
 801f892:	68f8      	ldr	r0, [r7, #12]
 801f894:	f7f5 ff04 	bl	80156a0 <mg_error>
 801f898:	e00c      	b.n	801f8b4 <read_conn+0x41c>
        handle_tls_recv(c, io);
 801f89a:	69f9      	ldr	r1, [r7, #28]
 801f89c:	68f8      	ldr	r0, [r7, #12]
 801f89e:	f7ff fdc7 	bl	801f430 <handle_tls_recv>
}
 801f8a2:	e007      	b.n	801f8b4 <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 801f8a4:	68bb      	ldr	r3, [r7, #8]
 801f8a6:	330c      	adds	r3, #12
 801f8a8:	461a      	mov	r2, r3
 801f8aa:	2107      	movs	r1, #7
 801f8ac:	68f8      	ldr	r0, [r7, #12]
 801f8ae:	f7f5 fed7 	bl	8015660 <mg_call>
}
 801f8b2:	e7ff      	b.n	801f8b4 <read_conn+0x41c>
 801f8b4:	bf00      	nop
 801f8b6:	3728      	adds	r7, #40	@ 0x28
 801f8b8:	46bd      	mov	sp, r7
 801f8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8be:	bf00      	nop
 801f8c0:	0803299c 	.word	0x0803299c

0801f8c4 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801f8c4:	b590      	push	{r4, r7, lr}
 801f8c6:	b089      	sub	sp, #36	@ 0x24
 801f8c8:	af02      	add	r7, sp, #8
 801f8ca:	6078      	str	r0, [r7, #4]
 801f8cc:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f8d2:	2200      	movs	r2, #0
 801f8d4:	6839      	ldr	r1, [r7, #0]
 801f8d6:	4618      	mov	r0, r3
 801f8d8:	f7fe fcba 	bl	801e250 <getpeer>
 801f8dc:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 801f8de:	697b      	ldr	r3, [r7, #20]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	d002      	beq.n	801f8ea <rx_tcp+0x26>
 801f8e4:	697b      	ldr	r3, [r7, #20]
 801f8e6:	33b0      	adds	r3, #176	@ 0xb0
 801f8e8:	e000      	b.n	801f8ec <rx_tcp+0x28>
 801f8ea:	2300      	movs	r3, #0
 801f8ec:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 801f8ee:	697b      	ldr	r3, [r7, #20]
 801f8f0:	2b00      	cmp	r3, #0
 801f8f2:	d048      	beq.n	801f986 <rx_tcp+0xc2>
 801f8f4:	697b      	ldr	r3, [r7, #20]
 801f8f6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f8fa:	f003 0320 	and.w	r3, r3, #32
 801f8fe:	b2db      	uxtb	r3, r3
 801f900:	2b00      	cmp	r3, #0
 801f902:	d040      	beq.n	801f986 <rx_tcp+0xc2>
 801f904:	683b      	ldr	r3, [r7, #0]
 801f906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f908:	7b5b      	ldrb	r3, [r3, #13]
 801f90a:	2b12      	cmp	r3, #18
 801f90c:	d13b      	bne.n	801f986 <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 801f90e:	683b      	ldr	r3, [r7, #0]
 801f910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f912:	689b      	ldr	r3, [r3, #8]
 801f914:	4618      	mov	r0, r3
 801f916:	f002 ff17 	bl	8022748 <mg_ntohl>
 801f91a:	4602      	mov	r2, r0
 801f91c:	693b      	ldr	r3, [r7, #16]
 801f91e:	601a      	str	r2, [r3, #0]
 801f920:	683b      	ldr	r3, [r7, #0]
 801f922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f924:	685b      	ldr	r3, [r3, #4]
 801f926:	4618      	mov	r0, r3
 801f928:	f002 ff0e 	bl	8022748 <mg_ntohl>
 801f92c:	4603      	mov	r3, r0
 801f92e:	1c5a      	adds	r2, r3, #1
 801f930:	693b      	ldr	r3, [r7, #16]
 801f932:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 801f934:	683b      	ldr	r3, [r7, #0]
 801f936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f938:	689b      	ldr	r3, [r3, #8]
 801f93a:	2200      	movs	r2, #0
 801f93c:	9201      	str	r2, [sp, #4]
 801f93e:	2200      	movs	r2, #0
 801f940:	9200      	str	r2, [sp, #0]
 801f942:	2210      	movs	r2, #16
 801f944:	6839      	ldr	r1, [r7, #0]
 801f946:	6878      	ldr	r0, [r7, #4]
 801f948:	f7ff fb6e 	bl	801f028 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 801f94c:	697a      	ldr	r2, [r7, #20]
 801f94e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801f952:	f36f 1345 	bfc	r3, #5, #1
 801f956:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 801f95a:	2100      	movs	r1, #0
 801f95c:	6978      	ldr	r0, [r7, #20]
 801f95e:	f7fe f8d9 	bl	801db14 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 801f962:	2200      	movs	r2, #0
 801f964:	2104      	movs	r1, #4
 801f966:	6978      	ldr	r0, [r7, #20]
 801f968:	f7f5 fe7a 	bl	8015660 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 801f96c:	697b      	ldr	r3, [r7, #20]
 801f96e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f972:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801f976:	b2db      	uxtb	r3, r3
 801f978:	2b00      	cmp	r3, #0
 801f97a:	f000 80cd 	beq.w	801fb18 <rx_tcp+0x254>
 801f97e:	6978      	ldr	r0, [r7, #20]
 801f980:	f002 fca6 	bl	80222d0 <mg_tls_handshake>
 801f984:	e0c8      	b.n	801fb18 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 801f986:	697b      	ldr	r3, [r7, #20]
 801f988:	2b00      	cmp	r3, #0
 801f98a:	d019      	beq.n	801f9c0 <rx_tcp+0xfc>
 801f98c:	697b      	ldr	r3, [r7, #20]
 801f98e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f992:	f003 0320 	and.w	r3, r3, #32
 801f996:	b2db      	uxtb	r3, r3
 801f998:	2b00      	cmp	r3, #0
 801f99a:	d011      	beq.n	801f9c0 <rx_tcp+0xfc>
 801f99c:	683b      	ldr	r3, [r7, #0]
 801f99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f9a0:	7b5b      	ldrb	r3, [r3, #13]
 801f9a2:	2b10      	cmp	r3, #16
 801f9a4:	d00c      	beq.n	801f9c0 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801f9a6:	683b      	ldr	r3, [r7, #0]
 801f9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f9aa:	689b      	ldr	r3, [r3, #8]
 801f9ac:	2200      	movs	r2, #0
 801f9ae:	9201      	str	r2, [sp, #4]
 801f9b0:	2200      	movs	r2, #0
 801f9b2:	9200      	str	r2, [sp, #0]
 801f9b4:	2214      	movs	r2, #20
 801f9b6:	6839      	ldr	r1, [r7, #0]
 801f9b8:	6878      	ldr	r0, [r7, #4]
 801f9ba:	f7ff fb35 	bl	801f028 <tx_tcp_pkt>
 801f9be:	e0ab      	b.n	801fb18 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 801f9c0:	697b      	ldr	r3, [r7, #20]
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	d00b      	beq.n	801f9de <rx_tcp+0x11a>
 801f9c6:	683b      	ldr	r3, [r7, #0]
 801f9c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f9ca:	7b5b      	ldrb	r3, [r3, #13]
 801f9cc:	f003 0304 	and.w	r3, r3, #4
 801f9d0:	2b00      	cmp	r3, #0
 801f9d2:	d004      	beq.n	801f9de <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801f9d4:	4952      	ldr	r1, [pc, #328]	@ (801fb20 <rx_tcp+0x25c>)
 801f9d6:	6978      	ldr	r0, [r7, #20]
 801f9d8:	f7f5 fe62 	bl	80156a0 <mg_error>
 801f9dc:	e09c      	b.n	801fb18 <rx_tcp+0x254>
  } else if (c != NULL) {
 801f9de:	697b      	ldr	r3, [r7, #20]
 801f9e0:	2b00      	cmp	r3, #0
 801f9e2:	d00f      	beq.n	801fa04 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 801f9e4:	693b      	ldr	r3, [r7, #16]
 801f9e6:	2200      	movs	r2, #0
 801f9e8:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 801f9ea:	693b      	ldr	r3, [r7, #16]
 801f9ec:	7f9b      	ldrb	r3, [r3, #30]
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	d103      	bne.n	801f9fa <rx_tcp+0x136>
      settmout(c,
 801f9f2:	2100      	movs	r1, #0
 801f9f4:	6978      	ldr	r0, [r7, #20]
 801f9f6:	f7fe f88d 	bl	801db14 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 801f9fa:	6839      	ldr	r1, [r7, #0]
 801f9fc:	6978      	ldr	r0, [r7, #20]
 801f9fe:	f7ff fd4b 	bl	801f498 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 801fa02:	e089      	b.n	801fb18 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 801fa04:	687b      	ldr	r3, [r7, #4]
 801fa06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fa08:	2201      	movs	r2, #1
 801fa0a:	6839      	ldr	r1, [r7, #0]
 801fa0c:	4618      	mov	r0, r3
 801fa0e:	f7fe fc1f 	bl	801e250 <getpeer>
 801fa12:	6178      	str	r0, [r7, #20]
 801fa14:	697b      	ldr	r3, [r7, #20]
 801fa16:	2b00      	cmp	r3, #0
 801fa18:	d10c      	bne.n	801fa34 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801fa1a:	683b      	ldr	r3, [r7, #0]
 801fa1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa1e:	689b      	ldr	r3, [r3, #8]
 801fa20:	2200      	movs	r2, #0
 801fa22:	9201      	str	r2, [sp, #4]
 801fa24:	2200      	movs	r2, #0
 801fa26:	9200      	str	r2, [sp, #0]
 801fa28:	2214      	movs	r2, #20
 801fa2a:	6839      	ldr	r1, [r7, #0]
 801fa2c:	6878      	ldr	r0, [r7, #4]
 801fa2e:	f7ff fafb 	bl	801f028 <tx_tcp_pkt>
}
 801fa32:	e071      	b.n	801fb18 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 801fa34:	683b      	ldr	r3, [r7, #0]
 801fa36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa38:	7b5b      	ldrb	r3, [r3, #13]
 801fa3a:	f003 0304 	and.w	r3, r3, #4
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	d00c      	beq.n	801fa5c <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801fa42:	697b      	ldr	r3, [r7, #20]
 801fa44:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fa48:	f003 0304 	and.w	r3, r3, #4
 801fa4c:	b2db      	uxtb	r3, r3
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d062      	beq.n	801fb18 <rx_tcp+0x254>
 801fa52:	4933      	ldr	r1, [pc, #204]	@ (801fb20 <rx_tcp+0x25c>)
 801fa54:	6978      	ldr	r0, [r7, #20]
 801fa56:	f7f5 fe23 	bl	80156a0 <mg_error>
}
 801fa5a:	e05d      	b.n	801fb18 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 801fa5c:	683b      	ldr	r3, [r7, #0]
 801fa5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa60:	7b5b      	ldrb	r3, [r3, #13]
 801fa62:	f003 0302 	and.w	r3, r3, #2
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	d016      	beq.n	801fa98 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 801fa6a:	683b      	ldr	r3, [r7, #0]
 801fa6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa6e:	881b      	ldrh	r3, [r3, #0]
 801fa70:	b29b      	uxth	r3, r3
 801fa72:	4618      	mov	r0, r3
 801fa74:	f002 fe81 	bl	802277a <mg_ntohs>
 801fa78:	4603      	mov	r3, r0
 801fa7a:	4618      	mov	r0, r3
 801fa7c:	f002 fe64 	bl	8022748 <mg_ntohl>
 801fa80:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 801fa82:	2300      	movs	r3, #0
 801fa84:	9301      	str	r3, [sp, #4]
 801fa86:	2300      	movs	r3, #0
 801fa88:	9300      	str	r3, [sp, #0]
 801fa8a:	68fb      	ldr	r3, [r7, #12]
 801fa8c:	2212      	movs	r2, #18
 801fa8e:	6839      	ldr	r1, [r7, #0]
 801fa90:	6878      	ldr	r0, [r7, #4]
 801fa92:	f7ff fac9 	bl	801f028 <tx_tcp_pkt>
}
 801fa96:	e03f      	b.n	801fb18 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 801fa98:	683b      	ldr	r3, [r7, #0]
 801fa9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa9c:	7b5b      	ldrb	r3, [r3, #13]
 801fa9e:	f003 0301 	and.w	r3, r3, #1
 801faa2:	2b00      	cmp	r3, #0
 801faa4:	d00c      	beq.n	801fac0 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 801faa6:	683b      	ldr	r3, [r7, #0]
 801faa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801faaa:	689b      	ldr	r3, [r3, #8]
 801faac:	2200      	movs	r2, #0
 801faae:	9201      	str	r2, [sp, #4]
 801fab0:	2200      	movs	r2, #0
 801fab2:	9200      	str	r2, [sp, #0]
 801fab4:	2211      	movs	r2, #17
 801fab6:	6839      	ldr	r1, [r7, #0]
 801fab8:	6878      	ldr	r0, [r7, #4]
 801faba:	f7ff fab5 	bl	801f028 <tx_tcp_pkt>
}
 801fabe:	e02b      	b.n	801fb18 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 801fac0:	683b      	ldr	r3, [r7, #0]
 801fac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fac4:	689b      	ldr	r3, [r3, #8]
 801fac6:	4618      	mov	r0, r3
 801fac8:	f002 fe3e 	bl	8022748 <mg_ntohl>
 801facc:	4604      	mov	r4, r0
 801face:	683b      	ldr	r3, [r7, #0]
 801fad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fad2:	881b      	ldrh	r3, [r3, #0]
 801fad4:	b29b      	uxth	r3, r3
 801fad6:	4618      	mov	r0, r3
 801fad8:	f002 fe4f 	bl	802277a <mg_ntohs>
 801fadc:	4603      	mov	r3, r0
 801fade:	3301      	adds	r3, #1
 801fae0:	429c      	cmp	r4, r3
 801fae2:	d104      	bne.n	801faee <rx_tcp+0x22a>
    accept_conn(c, pkt);
 801fae4:	6839      	ldr	r1, [r7, #0]
 801fae6:	6978      	ldr	r0, [r7, #20]
 801fae8:	f7ff fae4 	bl	801f0b4 <accept_conn>
}
 801faec:	e014      	b.n	801fb18 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 801faee:	697b      	ldr	r3, [r7, #20]
 801faf0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801faf4:	f003 0304 	and.w	r3, r3, #4
 801faf8:	b2db      	uxtb	r3, r3
 801fafa:	2b00      	cmp	r3, #0
 801fafc:	d10c      	bne.n	801fb18 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801fafe:	683b      	ldr	r3, [r7, #0]
 801fb00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fb02:	689b      	ldr	r3, [r3, #8]
 801fb04:	2200      	movs	r2, #0
 801fb06:	9201      	str	r2, [sp, #4]
 801fb08:	2200      	movs	r2, #0
 801fb0a:	9200      	str	r2, [sp, #0]
 801fb0c:	2214      	movs	r2, #20
 801fb0e:	6839      	ldr	r1, [r7, #0]
 801fb10:	6878      	ldr	r0, [r7, #4]
 801fb12:	f7ff fa89 	bl	801f028 <tx_tcp_pkt>
}
 801fb16:	e7ff      	b.n	801fb18 <rx_tcp+0x254>
 801fb18:	bf00      	nop
 801fb1a:	371c      	adds	r7, #28
 801fb1c:	46bd      	mov	sp, r7
 801fb1e:	bd90      	pop	{r4, r7, pc}
 801fb20:	08032a90 	.word	0x08032a90

0801fb24 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801fb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fb26:	b089      	sub	sp, #36	@ 0x24
 801fb28:	af04      	add	r7, sp, #16
 801fb2a:	6078      	str	r0, [r7, #4]
 801fb2c:	6039      	str	r1, [r7, #0]
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801fb2e:	683b      	ldr	r3, [r7, #0]
 801fb30:	69db      	ldr	r3, [r3, #28]
 801fb32:	88db      	ldrh	r3, [r3, #6]
 801fb34:	b29b      	uxth	r3, r3
 801fb36:	f003 0320 	and.w	r3, r3, #32
 801fb3a:	2b00      	cmp	r3, #0
 801fb3c:	d109      	bne.n	801fb52 <rx_ip+0x2e>
 801fb3e:	683b      	ldr	r3, [r7, #0]
 801fb40:	69db      	ldr	r3, [r3, #28]
 801fb42:	88db      	ldrh	r3, [r3, #6]
 801fb44:	b29b      	uxth	r3, r3
 801fb46:	461a      	mov	r2, r3
 801fb48:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 801fb4c:	4013      	ands	r3, r2
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	d026      	beq.n	801fba0 <rx_ip+0x7c>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 801fb52:	683b      	ldr	r3, [r7, #0]
 801fb54:	69db      	ldr	r3, [r3, #28]
 801fb56:	7a5b      	ldrb	r3, [r3, #9]
 801fb58:	2b11      	cmp	r3, #17
 801fb5a:	d105      	bne.n	801fb68 <rx_ip+0x44>
 801fb5c:	683b      	ldr	r3, [r7, #0]
 801fb5e:	69db      	ldr	r3, [r3, #28]
 801fb60:	f103 0214 	add.w	r2, r3, #20
 801fb64:	683b      	ldr	r3, [r7, #0]
 801fb66:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 801fb68:	683b      	ldr	r3, [r7, #0]
 801fb6a:	69db      	ldr	r3, [r3, #28]
 801fb6c:	7a5b      	ldrb	r3, [r3, #9]
 801fb6e:	2b06      	cmp	r3, #6
 801fb70:	d105      	bne.n	801fb7e <rx_ip+0x5a>
 801fb72:	683b      	ldr	r3, [r7, #0]
 801fb74:	69db      	ldr	r3, [r3, #28]
 801fb76:	f103 0214 	add.w	r2, r3, #20
 801fb7a:	683b      	ldr	r3, [r7, #0]
 801fb7c:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801fb7e:	687b      	ldr	r3, [r7, #4]
 801fb80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fb82:	2200      	movs	r2, #0
 801fb84:	6839      	ldr	r1, [r7, #0]
 801fb86:	4618      	mov	r0, r3
 801fb88:	f7fe fb62 	bl	801e250 <getpeer>
 801fb8c:	60b8      	str	r0, [r7, #8]
    if (c) mg_error(c, "Received fragmented packet");
 801fb8e:	68bb      	ldr	r3, [r7, #8]
 801fb90:	2b00      	cmp	r3, #0
 801fb92:	f000 811b 	beq.w	801fdcc <rx_ip+0x2a8>
 801fb96:	4992      	ldr	r1, [pc, #584]	@ (801fde0 <rx_ip+0x2bc>)
 801fb98:	68b8      	ldr	r0, [r7, #8]
 801fb9a:	f7f5 fd81 	bl	80156a0 <mg_error>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801fb9e:	e115      	b.n	801fdcc <rx_ip+0x2a8>
  } else if (pkt->ip->proto == 1) {
 801fba0:	683b      	ldr	r3, [r7, #0]
 801fba2:	69db      	ldr	r3, [r3, #28]
 801fba4:	7a5b      	ldrb	r3, [r3, #9]
 801fba6:	2b01      	cmp	r3, #1
 801fba8:	d116      	bne.n	801fbd8 <rx_ip+0xb4>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 801fbaa:	683b      	ldr	r3, [r7, #0]
 801fbac:	69db      	ldr	r3, [r3, #28]
 801fbae:	f103 0214 	add.w	r2, r3, #20
 801fbb2:	683b      	ldr	r3, [r7, #0]
 801fbb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801fbb6:	683b      	ldr	r3, [r7, #0]
 801fbb8:	68db      	ldr	r3, [r3, #12]
 801fbba:	2b03      	cmp	r3, #3
 801fbbc:	f240 8108 	bls.w	801fdd0 <rx_ip+0x2ac>
    mkpay(pkt, pkt->icmp + 1);
 801fbc0:	683b      	ldr	r3, [r7, #0]
 801fbc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fbc4:	3304      	adds	r3, #4
 801fbc6:	4619      	mov	r1, r3
 801fbc8:	6838      	ldr	r0, [r7, #0]
 801fbca:	f7fd ff2b 	bl	801da24 <mkpay>
    rx_icmp(ifp, pkt);
 801fbce:	6839      	ldr	r1, [r7, #0]
 801fbd0:	6878      	ldr	r0, [r7, #4]
 801fbd2:	f7fe fcb9 	bl	801e548 <rx_icmp>
 801fbd6:	e100      	b.n	801fdda <rx_ip+0x2b6>
  } else if (pkt->ip->proto == 17) {
 801fbd8:	683b      	ldr	r3, [r7, #0]
 801fbda:	69db      	ldr	r3, [r3, #28]
 801fbdc:	7a5b      	ldrb	r3, [r3, #9]
 801fbde:	2b11      	cmp	r3, #17
 801fbe0:	f040 808b 	bne.w	801fcfa <rx_ip+0x1d6>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 801fbe4:	683b      	ldr	r3, [r7, #0]
 801fbe6:	69db      	ldr	r3, [r3, #28]
 801fbe8:	f103 0214 	add.w	r2, r3, #20
 801fbec:	683b      	ldr	r3, [r7, #0]
 801fbee:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801fbf0:	683b      	ldr	r3, [r7, #0]
 801fbf2:	68db      	ldr	r3, [r3, #12]
 801fbf4:	2b07      	cmp	r3, #7
 801fbf6:	f240 80ed 	bls.w	801fdd4 <rx_ip+0x2b0>
    mkpay(pkt, pkt->udp + 1);
 801fbfa:	683b      	ldr	r3, [r7, #0]
 801fbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fbfe:	3308      	adds	r3, #8
 801fc00:	4619      	mov	r1, r3
 801fc02:	6838      	ldr	r0, [r7, #0]
 801fc04:	f7fd ff0e 	bl	801da24 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 801fc08:	4b76      	ldr	r3, [pc, #472]	@ (801fde4 <rx_ip+0x2c0>)
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	2b03      	cmp	r3, #3
 801fc0e:	dd2d      	ble.n	801fc6c <rx_ip+0x148>
 801fc10:	4b75      	ldr	r3, [pc, #468]	@ (801fde8 <rx_ip+0x2c4>)
 801fc12:	f241 6255 	movw	r2, #5717	@ 0x1655
 801fc16:	4975      	ldr	r1, [pc, #468]	@ (801fdec <rx_ip+0x2c8>)
 801fc18:	2004      	movs	r0, #4
 801fc1a:	f7fb f907 	bl	801ae2c <mg_log_prefix>
 801fc1e:	683b      	ldr	r3, [r7, #0]
 801fc20:	69db      	ldr	r3, [r3, #28]
 801fc22:	f103 050c 	add.w	r5, r3, #12
 801fc26:	683b      	ldr	r3, [r7, #0]
 801fc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc2a:	881b      	ldrh	r3, [r3, #0]
 801fc2c:	b29b      	uxth	r3, r3
 801fc2e:	4618      	mov	r0, r3
 801fc30:	f002 fda3 	bl	802277a <mg_ntohs>
 801fc34:	4603      	mov	r3, r0
 801fc36:	461e      	mov	r6, r3
 801fc38:	683b      	ldr	r3, [r7, #0]
 801fc3a:	69db      	ldr	r3, [r3, #28]
 801fc3c:	f103 0410 	add.w	r4, r3, #16
 801fc40:	683b      	ldr	r3, [r7, #0]
 801fc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc44:	885b      	ldrh	r3, [r3, #2]
 801fc46:	b29b      	uxth	r3, r3
 801fc48:	4618      	mov	r0, r3
 801fc4a:	f002 fd96 	bl	802277a <mg_ntohs>
 801fc4e:	4603      	mov	r3, r0
 801fc50:	461a      	mov	r2, r3
 801fc52:	683b      	ldr	r3, [r7, #0]
 801fc54:	68db      	ldr	r3, [r3, #12]
 801fc56:	9303      	str	r3, [sp, #12]
 801fc58:	9202      	str	r2, [sp, #8]
 801fc5a:	9401      	str	r4, [sp, #4]
 801fc5c:	4b64      	ldr	r3, [pc, #400]	@ (801fdf0 <rx_ip+0x2cc>)
 801fc5e:	9300      	str	r3, [sp, #0]
 801fc60:	4633      	mov	r3, r6
 801fc62:	462a      	mov	r2, r5
 801fc64:	4962      	ldr	r1, [pc, #392]	@ (801fdf0 <rx_ip+0x2cc>)
 801fc66:	4863      	ldr	r0, [pc, #396]	@ (801fdf4 <rx_ip+0x2d0>)
 801fc68:	f7fb f930 	bl	801aecc <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 801fc6c:	687b      	ldr	r3, [r7, #4]
 801fc6e:	7f1b      	ldrb	r3, [r3, #28]
 801fc70:	2b00      	cmp	r3, #0
 801fc72:	d01c      	beq.n	801fcae <rx_ip+0x18a>
 801fc74:	683b      	ldr	r3, [r7, #0]
 801fc76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc78:	885b      	ldrh	r3, [r3, #2]
 801fc7a:	b29c      	uxth	r4, r3
 801fc7c:	2044      	movs	r0, #68	@ 0x44
 801fc7e:	f002 fd7c 	bl	802277a <mg_ntohs>
 801fc82:	4603      	mov	r3, r0
 801fc84:	429c      	cmp	r4, r3
 801fc86:	d112      	bne.n	801fcae <rx_ip+0x18a>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 801fc88:	683b      	ldr	r3, [r7, #0]
 801fc8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc8c:	f103 0208 	add.w	r2, r3, #8
 801fc90:	683b      	ldr	r3, [r7, #0]
 801fc92:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 801fc94:	683b      	ldr	r3, [r7, #0]
 801fc96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fc98:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801fc9c:	4619      	mov	r1, r3
 801fc9e:	6838      	ldr	r0, [r7, #0]
 801fca0:	f7fd fec0 	bl	801da24 <mkpay>
      rx_dhcp_client(ifp, pkt);
 801fca4:	6839      	ldr	r1, [r7, #0]
 801fca6:	6878      	ldr	r0, [r7, #4]
 801fca8:	f7fe fcaa 	bl	801e600 <rx_dhcp_client>
 801fcac:	e095      	b.n	801fdda <rx_ip+0x2b6>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	7f5b      	ldrb	r3, [r3, #29]
 801fcb2:	2b00      	cmp	r3, #0
 801fcb4:	d01c      	beq.n	801fcf0 <rx_ip+0x1cc>
 801fcb6:	683b      	ldr	r3, [r7, #0]
 801fcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fcba:	885b      	ldrh	r3, [r3, #2]
 801fcbc:	b29c      	uxth	r4, r3
 801fcbe:	2043      	movs	r0, #67	@ 0x43
 801fcc0:	f002 fd5b 	bl	802277a <mg_ntohs>
 801fcc4:	4603      	mov	r3, r0
 801fcc6:	429c      	cmp	r4, r3
 801fcc8:	d112      	bne.n	801fcf0 <rx_ip+0x1cc>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 801fcca:	683b      	ldr	r3, [r7, #0]
 801fccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fcce:	f103 0208 	add.w	r2, r3, #8
 801fcd2:	683b      	ldr	r3, [r7, #0]
 801fcd4:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 801fcd6:	683b      	ldr	r3, [r7, #0]
 801fcd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fcda:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801fcde:	4619      	mov	r1, r3
 801fce0:	6838      	ldr	r0, [r7, #0]
 801fce2:	f7fd fe9f 	bl	801da24 <mkpay>
      rx_dhcp_server(ifp, pkt);
 801fce6:	6839      	ldr	r1, [r7, #0]
 801fce8:	6878      	ldr	r0, [r7, #4]
 801fcea:	f7fe fe71 	bl	801e9d0 <rx_dhcp_server>
 801fcee:	e074      	b.n	801fdda <rx_ip+0x2b6>
    } else {
      rx_udp(ifp, pkt);
 801fcf0:	6839      	ldr	r1, [r7, #0]
 801fcf2:	6878      	ldr	r0, [r7, #4]
 801fcf4:	f7ff f85a 	bl	801edac <rx_udp>
 801fcf8:	e06f      	b.n	801fdda <rx_ip+0x2b6>
    }
  } else if (pkt->ip->proto == 6) {
 801fcfa:	683b      	ldr	r3, [r7, #0]
 801fcfc:	69db      	ldr	r3, [r3, #28]
 801fcfe:	7a5b      	ldrb	r3, [r3, #9]
 801fd00:	2b06      	cmp	r3, #6
 801fd02:	d16a      	bne.n	801fdda <rx_ip+0x2b6>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 801fd04:	683b      	ldr	r3, [r7, #0]
 801fd06:	69db      	ldr	r3, [r3, #28]
 801fd08:	f103 0214 	add.w	r2, r3, #20
 801fd0c:	683b      	ldr	r3, [r7, #0]
 801fd0e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 801fd10:	683b      	ldr	r3, [r7, #0]
 801fd12:	68db      	ldr	r3, [r3, #12]
 801fd14:	2b13      	cmp	r3, #19
 801fd16:	d95f      	bls.n	801fdd8 <rx_ip+0x2b4>
    mkpay(pkt, pkt->tcp + 1);
 801fd18:	683b      	ldr	r3, [r7, #0]
 801fd1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd1c:	3314      	adds	r3, #20
 801fd1e:	4619      	mov	r1, r3
 801fd20:	6838      	ldr	r0, [r7, #0]
 801fd22:	f7fd fe7f 	bl	801da24 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 801fd26:	683b      	ldr	r3, [r7, #0]
 801fd28:	69db      	ldr	r3, [r3, #28]
 801fd2a:	885b      	ldrh	r3, [r3, #2]
 801fd2c:	b29b      	uxth	r3, r3
 801fd2e:	4618      	mov	r0, r3
 801fd30:	f002 fd23 	bl	802277a <mg_ntohs>
 801fd34:	4603      	mov	r3, r0
 801fd36:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 801fd38:	683b      	ldr	r3, [r7, #0]
 801fd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd3c:	7b1b      	ldrb	r3, [r3, #12]
 801fd3e:	091b      	lsrs	r3, r3, #4
 801fd40:	b2db      	uxtb	r3, r3
 801fd42:	3305      	adds	r3, #5
 801fd44:	b29b      	uxth	r3, r3
 801fd46:	009b      	lsls	r3, r3, #2
 801fd48:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 801fd4a:	89fa      	ldrh	r2, [r7, #14]
 801fd4c:	89bb      	ldrh	r3, [r7, #12]
 801fd4e:	429a      	cmp	r2, r3
 801fd50:	d305      	bcc.n	801fd5e <rx_ip+0x23a>
 801fd52:	89fa      	ldrh	r2, [r7, #14]
 801fd54:	89bb      	ldrh	r3, [r7, #12]
 801fd56:	1ad3      	subs	r3, r2, r3
 801fd58:	461a      	mov	r2, r3
 801fd5a:	683b      	ldr	r3, [r7, #0]
 801fd5c:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 801fd5e:	4b21      	ldr	r3, [pc, #132]	@ (801fde4 <rx_ip+0x2c0>)
 801fd60:	681b      	ldr	r3, [r3, #0]
 801fd62:	2b03      	cmp	r3, #3
 801fd64:	dd2d      	ble.n	801fdc2 <rx_ip+0x29e>
 801fd66:	4b20      	ldr	r3, [pc, #128]	@ (801fde8 <rx_ip+0x2c4>)
 801fd68:	f241 626a 	movw	r2, #5738	@ 0x166a
 801fd6c:	491f      	ldr	r1, [pc, #124]	@ (801fdec <rx_ip+0x2c8>)
 801fd6e:	2004      	movs	r0, #4
 801fd70:	f7fb f85c 	bl	801ae2c <mg_log_prefix>
 801fd74:	683b      	ldr	r3, [r7, #0]
 801fd76:	69db      	ldr	r3, [r3, #28]
 801fd78:	f103 050c 	add.w	r5, r3, #12
 801fd7c:	683b      	ldr	r3, [r7, #0]
 801fd7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd80:	881b      	ldrh	r3, [r3, #0]
 801fd82:	b29b      	uxth	r3, r3
 801fd84:	4618      	mov	r0, r3
 801fd86:	f002 fcf8 	bl	802277a <mg_ntohs>
 801fd8a:	4603      	mov	r3, r0
 801fd8c:	461e      	mov	r6, r3
 801fd8e:	683b      	ldr	r3, [r7, #0]
 801fd90:	69db      	ldr	r3, [r3, #28]
 801fd92:	f103 0410 	add.w	r4, r3, #16
 801fd96:	683b      	ldr	r3, [r7, #0]
 801fd98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd9a:	885b      	ldrh	r3, [r3, #2]
 801fd9c:	b29b      	uxth	r3, r3
 801fd9e:	4618      	mov	r0, r3
 801fda0:	f002 fceb 	bl	802277a <mg_ntohs>
 801fda4:	4603      	mov	r3, r0
 801fda6:	461a      	mov	r2, r3
 801fda8:	683b      	ldr	r3, [r7, #0]
 801fdaa:	68db      	ldr	r3, [r3, #12]
 801fdac:	9303      	str	r3, [sp, #12]
 801fdae:	9202      	str	r2, [sp, #8]
 801fdb0:	9401      	str	r4, [sp, #4]
 801fdb2:	4b0f      	ldr	r3, [pc, #60]	@ (801fdf0 <rx_ip+0x2cc>)
 801fdb4:	9300      	str	r3, [sp, #0]
 801fdb6:	4633      	mov	r3, r6
 801fdb8:	462a      	mov	r2, r5
 801fdba:	490d      	ldr	r1, [pc, #52]	@ (801fdf0 <rx_ip+0x2cc>)
 801fdbc:	480e      	ldr	r0, [pc, #56]	@ (801fdf8 <rx_ip+0x2d4>)
 801fdbe:	f7fb f885 	bl	801aecc <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 801fdc2:	6839      	ldr	r1, [r7, #0]
 801fdc4:	6878      	ldr	r0, [r7, #4]
 801fdc6:	f7ff fd7d 	bl	801f8c4 <rx_tcp>
 801fdca:	e006      	b.n	801fdda <rx_ip+0x2b6>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801fdcc:	bf00      	nop
 801fdce:	e004      	b.n	801fdda <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801fdd0:	bf00      	nop
 801fdd2:	e002      	b.n	801fdda <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801fdd4:	bf00      	nop
 801fdd6:	e000      	b.n	801fdda <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 801fdd8:	bf00      	nop
  }
}
 801fdda:	3714      	adds	r7, #20
 801fddc:	46bd      	mov	sp, r7
 801fdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fde0:	08032a9c 	.word	0x08032a9c
 801fde4:	20000298 	.word	0x20000298
 801fde8:	08033f40 	.word	0x08033f40
 801fdec:	080310b8 	.word	0x080310b8
 801fdf0:	0802101d 	.word	0x0802101d
 801fdf4:	08032ab8 	.word	0x08032ab8
 801fdf8:	08032ad4 	.word	0x08032ad4

0801fdfc <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801fdfc:	b580      	push	{r7, lr}
 801fdfe:	b082      	sub	sp, #8
 801fe00:	af00      	add	r7, sp, #0
 801fe02:	6078      	str	r0, [r7, #4]
 801fe04:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 801fe06:	683b      	ldr	r3, [r7, #0]
 801fe08:	6a1b      	ldr	r3, [r3, #32]
 801fe0a:	799b      	ldrb	r3, [r3, #6]
 801fe0c:	2b01      	cmp	r3, #1
 801fe0e:	d004      	beq.n	801fe1a <rx_ip6+0x1e>
 801fe10:	683b      	ldr	r3, [r7, #0]
 801fe12:	6a1b      	ldr	r3, [r3, #32]
 801fe14:	799b      	ldrb	r3, [r3, #6]
 801fe16:	2b3a      	cmp	r3, #58	@ 0x3a
 801fe18:	d115      	bne.n	801fe46 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 801fe1a:	683b      	ldr	r3, [r7, #0]
 801fe1c:	6a1b      	ldr	r3, [r3, #32]
 801fe1e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801fe22:	683b      	ldr	r3, [r7, #0]
 801fe24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801fe26:	683b      	ldr	r3, [r7, #0]
 801fe28:	68db      	ldr	r3, [r3, #12]
 801fe2a:	2b03      	cmp	r3, #3
 801fe2c:	d922      	bls.n	801fe74 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 801fe2e:	683b      	ldr	r3, [r7, #0]
 801fe30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fe32:	3304      	adds	r3, #4
 801fe34:	4619      	mov	r1, r3
 801fe36:	6838      	ldr	r0, [r7, #0]
 801fe38:	f7fd fdf4 	bl	801da24 <mkpay>
    rx_icmp(ifp, pkt);
 801fe3c:	6839      	ldr	r1, [r7, #0]
 801fe3e:	6878      	ldr	r0, [r7, #4]
 801fe40:	f7fe fb82 	bl	801e548 <rx_icmp>
 801fe44:	e019      	b.n	801fe7a <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 801fe46:	683b      	ldr	r3, [r7, #0]
 801fe48:	6a1b      	ldr	r3, [r3, #32]
 801fe4a:	799b      	ldrb	r3, [r3, #6]
 801fe4c:	2b11      	cmp	r3, #17
 801fe4e:	d114      	bne.n	801fe7a <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 801fe50:	683b      	ldr	r3, [r7, #0]
 801fe52:	6a1b      	ldr	r3, [r3, #32]
 801fe54:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801fe58:	683b      	ldr	r3, [r7, #0]
 801fe5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801fe5c:	683b      	ldr	r3, [r7, #0]
 801fe5e:	68db      	ldr	r3, [r3, #12]
 801fe60:	2b07      	cmp	r3, #7
 801fe62:	d909      	bls.n	801fe78 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 801fe64:	683b      	ldr	r3, [r7, #0]
 801fe66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fe68:	3308      	adds	r3, #8
 801fe6a:	4619      	mov	r1, r3
 801fe6c:	6838      	ldr	r0, [r7, #0]
 801fe6e:	f7fd fdd9 	bl	801da24 <mkpay>
 801fe72:	e002      	b.n	801fe7a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801fe74:	bf00      	nop
 801fe76:	e000      	b.n	801fe7a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801fe78:	bf00      	nop
  }
}
 801fe7a:	3708      	adds	r7, #8
 801fe7c:	46bd      	mov	sp, r7
 801fe7e:	bd80      	pop	{r7, pc}

0801fe80 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 801fe80:	b590      	push	{r4, r7, lr}
 801fe82:	b093      	sub	sp, #76	@ 0x4c
 801fe84:	af00      	add	r7, sp, #0
 801fe86:	60f8      	str	r0, [r7, #12]
 801fe88:	60b9      	str	r1, [r7, #8]
 801fe8a:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 801fe8c:	f107 0314 	add.w	r3, r7, #20
 801fe90:	2234      	movs	r2, #52	@ 0x34
 801fe92:	2100      	movs	r1, #0
 801fe94:	4618      	mov	r0, r3
 801fe96:	f006 f85f 	bl	8025f58 <memset>
  pkt.raw.buf = (char *) buf;
 801fe9a:	68bb      	ldr	r3, [r7, #8]
 801fe9c:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 801fea2:	68bb      	ldr	r3, [r7, #8]
 801fea4:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 801fea6:	69bb      	ldr	r3, [r7, #24]
 801fea8:	2b0d      	cmp	r3, #13
 801feaa:	f240 80d8 	bls.w	802005e <mg_tcpip_rx+0x1de>
  if (ifp->enable_mac_check &&
 801feae:	68fb      	ldr	r3, [r7, #12]
 801feb0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801feb4:	2b00      	cmp	r3, #0
 801feb6:	d013      	beq.n	801fee0 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 801feb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801feba:	4618      	mov	r0, r3
 801febc:	68fb      	ldr	r3, [r7, #12]
 801febe:	2206      	movs	r2, #6
 801fec0:	4619      	mov	r1, r3
 801fec2:	f005 ffb5 	bl	8025e30 <memcmp>
 801fec6:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 801fec8:	2b00      	cmp	r3, #0
 801feca:	d009      	beq.n	801fee0 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 801fecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fece:	2206      	movs	r2, #6
 801fed0:	496d      	ldr	r1, [pc, #436]	@ (8020088 <mg_tcpip_rx+0x208>)
 801fed2:	4618      	mov	r0, r3
 801fed4:	f005 ffac 	bl	8025e30 <memcmp>
 801fed8:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 801feda:	2b00      	cmp	r3, #0
 801fedc:	f040 80c1 	bne.w	8020062 <mg_tcpip_rx+0x1e2>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 801fee0:	68fb      	ldr	r3, [r7, #12]
 801fee2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801fee6:	2b00      	cmp	r3, #0
 801fee8:	d01a      	beq.n	801ff20 <mg_tcpip_rx+0xa0>
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	2b04      	cmp	r3, #4
 801feee:	d917      	bls.n	801ff20 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	3b04      	subs	r3, #4
 801fef4:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 801fef6:	687a      	ldr	r2, [r7, #4]
 801fef8:	68b9      	ldr	r1, [r7, #8]
 801fefa:	2000      	movs	r0, #0
 801fefc:	f002 fc54 	bl	80227a8 <mg_crc32>
 801ff00:	4603      	mov	r3, r0
 801ff02:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 801ff04:	68ba      	ldr	r2, [r7, #8]
 801ff06:	687b      	ldr	r3, [r7, #4]
 801ff08:	4413      	add	r3, r2
 801ff0a:	4618      	mov	r0, r3
 801ff0c:	f107 0310 	add.w	r3, r7, #16
 801ff10:	2204      	movs	r2, #4
 801ff12:	4619      	mov	r1, r3
 801ff14:	f005 ff8c 	bl	8025e30 <memcmp>
 801ff18:	4603      	mov	r3, r0
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	f040 80a3 	bne.w	8020066 <mg_tcpip_rx+0x1e6>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 801ff20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff22:	899b      	ldrh	r3, [r3, #12]
 801ff24:	b29c      	uxth	r4, r3
 801ff26:	f640 0006 	movw	r0, #2054	@ 0x806
 801ff2a:	f002 fc26 	bl	802277a <mg_ntohs>
 801ff2e:	4603      	mov	r3, r0
 801ff30:	429c      	cmp	r4, r3
 801ff32:	d10d      	bne.n	801ff50 <mg_tcpip_rx+0xd0>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 801ff34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff36:	330e      	adds	r3, #14
 801ff38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 801ff3a:	69bb      	ldr	r3, [r7, #24]
 801ff3c:	2b29      	cmp	r3, #41	@ 0x29
 801ff3e:	f240 8094 	bls.w	802006a <mg_tcpip_rx+0x1ea>
    rx_arp(ifp, &pkt);
 801ff42:	f107 0314 	add.w	r3, r7, #20
 801ff46:	4619      	mov	r1, r3
 801ff48:	68f8      	ldr	r0, [r7, #12]
 801ff4a:	f7fe f9f3 	bl	801e334 <rx_arp>
 801ff4e:	e097      	b.n	8020080 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 801ff50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff52:	899b      	ldrh	r3, [r3, #12]
 801ff54:	b29c      	uxth	r4, r3
 801ff56:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 801ff5a:	f002 fc0e 	bl	802277a <mg_ntohs>
 801ff5e:	4603      	mov	r3, r0
 801ff60:	429c      	cmp	r4, r3
 801ff62:	d11b      	bne.n	801ff9c <mg_tcpip_rx+0x11c>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 801ff64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff66:	330e      	adds	r3, #14
 801ff68:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 801ff6a:	69bb      	ldr	r3, [r7, #24]
 801ff6c:	2b35      	cmp	r3, #53	@ 0x35
 801ff6e:	d97e      	bls.n	802006e <mg_tcpip_rx+0x1ee>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 801ff70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ff72:	781b      	ldrb	r3, [r3, #0]
 801ff74:	091b      	lsrs	r3, r3, #4
 801ff76:	b2db      	uxtb	r3, r3
 801ff78:	2b06      	cmp	r3, #6
 801ff7a:	d17a      	bne.n	8020072 <mg_tcpip_rx+0x1f2>
    mkpay(&pkt, pkt.ip6 + 1);
 801ff7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ff7e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801ff82:	f107 0314 	add.w	r3, r7, #20
 801ff86:	4611      	mov	r1, r2
 801ff88:	4618      	mov	r0, r3
 801ff8a:	f7fd fd4b 	bl	801da24 <mkpay>
    rx_ip6(ifp, &pkt);
 801ff8e:	f107 0314 	add.w	r3, r7, #20
 801ff92:	4619      	mov	r1, r3
 801ff94:	68f8      	ldr	r0, [r7, #12]
 801ff96:	f7ff ff31 	bl	801fdfc <rx_ip6>
 801ff9a:	e071      	b.n	8020080 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 801ff9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff9e:	899b      	ldrh	r3, [r3, #12]
 801ffa0:	b29c      	uxth	r4, r3
 801ffa2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801ffa6:	f002 fbe8 	bl	802277a <mg_ntohs>
 801ffaa:	4603      	mov	r3, r0
 801ffac:	429c      	cmp	r4, r3
 801ffae:	d133      	bne.n	8020018 <mg_tcpip_rx+0x198>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 801ffb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffb2:	330e      	adds	r3, #14
 801ffb4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801ffb6:	69bb      	ldr	r3, [r7, #24]
 801ffb8:	2b21      	cmp	r3, #33	@ 0x21
 801ffba:	d95c      	bls.n	8020076 <mg_tcpip_rx+0x1f6>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 801ffbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ffbe:	885b      	ldrh	r3, [r3, #2]
 801ffc0:	b29b      	uxth	r3, r3
 801ffc2:	4618      	mov	r0, r3
 801ffc4:	f002 fbd9 	bl	802277a <mg_ntohs>
 801ffc8:	4603      	mov	r3, r0
 801ffca:	f103 020e 	add.w	r2, r3, #14
 801ffce:	69bb      	ldr	r3, [r7, #24]
 801ffd0:	429a      	cmp	r2, r3
 801ffd2:	d208      	bcs.n	801ffe6 <mg_tcpip_rx+0x166>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 801ffd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ffd6:	885b      	ldrh	r3, [r3, #2]
 801ffd8:	b29b      	uxth	r3, r3
 801ffda:	4618      	mov	r0, r3
 801ffdc:	f002 fbcd 	bl	802277a <mg_ntohs>
 801ffe0:	4603      	mov	r3, r0
 801ffe2:	330e      	adds	r3, #14
 801ffe4:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801ffe6:	69bb      	ldr	r3, [r7, #24]
 801ffe8:	2b21      	cmp	r3, #33	@ 0x21
 801ffea:	d946      	bls.n	802007a <mg_tcpip_rx+0x1fa>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 801ffec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ffee:	781b      	ldrb	r3, [r3, #0]
 801fff0:	091b      	lsrs	r3, r3, #4
 801fff2:	b2db      	uxtb	r3, r3
 801fff4:	2b04      	cmp	r3, #4
 801fff6:	d142      	bne.n	802007e <mg_tcpip_rx+0x1fe>
    mkpay(&pkt, pkt.ip + 1);
 801fff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fffa:	f103 0214 	add.w	r2, r3, #20
 801fffe:	f107 0314 	add.w	r3, r7, #20
 8020002:	4611      	mov	r1, r2
 8020004:	4618      	mov	r0, r3
 8020006:	f7fd fd0d 	bl	801da24 <mkpay>
    rx_ip(ifp, &pkt);
 802000a:	f107 0314 	add.w	r3, r7, #20
 802000e:	4619      	mov	r1, r3
 8020010:	68f8      	ldr	r0, [r7, #12]
 8020012:	f7ff fd87 	bl	801fb24 <rx_ip>
 8020016:	e033      	b.n	8020080 <mg_tcpip_rx+0x200>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8020018:	4b1c      	ldr	r3, [pc, #112]	@ (802008c <mg_tcpip_rx+0x20c>)
 802001a:	681b      	ldr	r3, [r3, #0]
 802001c:	2b02      	cmp	r3, #2
 802001e:	dd11      	ble.n	8020044 <mg_tcpip_rx+0x1c4>
 8020020:	4b1b      	ldr	r3, [pc, #108]	@ (8020090 <mg_tcpip_rx+0x210>)
 8020022:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 8020026:	491b      	ldr	r1, [pc, #108]	@ (8020094 <mg_tcpip_rx+0x214>)
 8020028:	2003      	movs	r0, #3
 802002a:	f7fa feff 	bl	801ae2c <mg_log_prefix>
 802002e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020030:	899b      	ldrh	r3, [r3, #12]
 8020032:	b29b      	uxth	r3, r3
 8020034:	4618      	mov	r0, r3
 8020036:	f002 fba0 	bl	802277a <mg_ntohs>
 802003a:	4603      	mov	r3, r0
 802003c:	4619      	mov	r1, r3
 802003e:	4816      	ldr	r0, [pc, #88]	@ (8020098 <mg_tcpip_rx+0x218>)
 8020040:	f7fa ff44 	bl	801aecc <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8020044:	4b11      	ldr	r3, [pc, #68]	@ (802008c <mg_tcpip_rx+0x20c>)
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	2b03      	cmp	r3, #3
 802004a:	dd19      	ble.n	8020080 <mg_tcpip_rx+0x200>
 802004c:	687b      	ldr	r3, [r7, #4]
 802004e:	2b20      	cmp	r3, #32
 8020050:	bf28      	it	cs
 8020052:	2320      	movcs	r3, #32
 8020054:	4619      	mov	r1, r3
 8020056:	68b8      	ldr	r0, [r7, #8]
 8020058:	f7fa ff6e 	bl	801af38 <mg_hexdump>
 802005c:	e010      	b.n	8020080 <mg_tcpip_rx+0x200>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 802005e:	bf00      	nop
 8020060:	e00e      	b.n	8020080 <mg_tcpip_rx+0x200>
    return;
 8020062:	bf00      	nop
 8020064:	e00c      	b.n	8020080 <mg_tcpip_rx+0x200>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8020066:	bf00      	nop
 8020068:	e00a      	b.n	8020080 <mg_tcpip_rx+0x200>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802006a:	bf00      	nop
 802006c:	e008      	b.n	8020080 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802006e:	bf00      	nop
 8020070:	e006      	b.n	8020080 <mg_tcpip_rx+0x200>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8020072:	bf00      	nop
 8020074:	e004      	b.n	8020080 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8020076:	bf00      	nop
 8020078:	e002      	b.n	8020080 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 802007a:	bf00      	nop
 802007c:	e000      	b.n	8020080 <mg_tcpip_rx+0x200>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 802007e:	bf00      	nop
  }
}
 8020080:	374c      	adds	r7, #76	@ 0x4c
 8020082:	46bd      	mov	sp, r7
 8020084:	bd90      	pop	{r4, r7, pc}
 8020086:	bf00      	nop
 8020088:	08033de4 	.word	0x08033de4
 802008c:	20000298 	.word	0x20000298
 8020090:	08033f48 	.word	0x08033f48
 8020094:	080310b8 	.word	0x080310b8
 8020098:	08032af0 	.word	0x08032af0

0802009c <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 802009c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802009e:	b095      	sub	sp, #84	@ 0x54
 80200a0:	af06      	add	r7, sp, #24
 80200a2:	6178      	str	r0, [r7, #20]
 80200a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 80200a8:	697b      	ldr	r3, [r7, #20]
 80200aa:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80200ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80200b2:	e9cd 2300 	strd	r2, r3, [sp]
 80200b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80200ba:	f04f 0300 	mov.w	r3, #0
 80200be:	4608      	mov	r0, r1
 80200c0:	f002 f83b 	bl	802213a <mg_timer_expired>
 80200c4:	4603      	mov	r3, r0
 80200c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 80200ca:	6979      	ldr	r1, [r7, #20]
 80200cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80200d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 80200d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80200d8:	2b00      	cmp	r3, #0
 80200da:	d052      	beq.n	8020182 <mg_tcpip_poll+0xe6>
 80200dc:	697b      	ldr	r3, [r7, #20]
 80200de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80200e0:	68db      	ldr	r3, [r3, #12]
 80200e2:	2b00      	cmp	r3, #0
 80200e4:	d04d      	beq.n	8020182 <mg_tcpip_poll+0xe6>
    bool up = ifp->driver->up(ifp);
 80200e6:	697b      	ldr	r3, [r7, #20]
 80200e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80200ea:	68db      	ldr	r3, [r3, #12]
 80200ec:	6978      	ldr	r0, [r7, #20]
 80200ee:	4798      	blx	r3
 80200f0:	4603      	mov	r3, r0
 80200f2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 80200f6:	697b      	ldr	r3, [r7, #20]
 80200f8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80200fc:	2b00      	cmp	r3, #0
 80200fe:	bf14      	ite	ne
 8020100:	2301      	movne	r3, #1
 8020102:	2300      	moveq	r3, #0
 8020104:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (up != current) {
 8020108:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 802010c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8020110:	429a      	cmp	r2, r3
 8020112:	d023      	beq.n	802015c <mg_tcpip_poll+0xc0>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8020114:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8020118:	f083 0301 	eor.w	r3, r3, #1
 802011c:	b2db      	uxtb	r3, r3
 802011e:	2b00      	cmp	r3, #0
 8020120:	d001      	beq.n	8020126 <mg_tcpip_poll+0x8a>
 8020122:	2300      	movs	r3, #0
 8020124:	e006      	b.n	8020134 <mg_tcpip_poll+0x98>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 8020126:	697b      	ldr	r3, [r7, #20]
 8020128:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802012a:	2b00      	cmp	r3, #0
 802012c:	d001      	beq.n	8020132 <mg_tcpip_poll+0x96>
 802012e:	2301      	movs	r3, #1
 8020130:	e000      	b.n	8020134 <mg_tcpip_poll+0x98>
 8020132:	2303      	movs	r3, #3
 8020134:	697a      	ldr	r2, [r7, #20]
 8020136:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 802013a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 802013e:	f083 0301 	eor.w	r3, r3, #1
 8020142:	b2db      	uxtb	r3, r3
 8020144:	2b00      	cmp	r3, #0
 8020146:	d006      	beq.n	8020156 <mg_tcpip_poll+0xba>
 8020148:	697b      	ldr	r3, [r7, #20]
 802014a:	7f1b      	ldrb	r3, [r3, #28]
 802014c:	2b00      	cmp	r3, #0
 802014e:	d002      	beq.n	8020156 <mg_tcpip_poll+0xba>
 8020150:	697b      	ldr	r3, [r7, #20]
 8020152:	2200      	movs	r2, #0
 8020154:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 8020156:	6978      	ldr	r0, [r7, #20]
 8020158:	f7fd fdb2 	bl	801dcc0 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802015c:	697b      	ldr	r3, [r7, #20]
 802015e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020162:	2b00      	cmp	r3, #0
 8020164:	d10d      	bne.n	8020182 <mg_tcpip_poll+0xe6>
 8020166:	4ba4      	ldr	r3, [pc, #656]	@ (80203f8 <mg_tcpip_poll+0x35c>)
 8020168:	681b      	ldr	r3, [r3, #0]
 802016a:	2b00      	cmp	r3, #0
 802016c:	dd09      	ble.n	8020182 <mg_tcpip_poll+0xe6>
 802016e:	4ba3      	ldr	r3, [pc, #652]	@ (80203fc <mg_tcpip_poll+0x360>)
 8020170:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8020174:	49a2      	ldr	r1, [pc, #648]	@ (8020400 <mg_tcpip_poll+0x364>)
 8020176:	2001      	movs	r0, #1
 8020178:	f7fa fe58 	bl	801ae2c <mg_log_prefix>
 802017c:	48a1      	ldr	r0, [pc, #644]	@ (8020404 <mg_tcpip_poll+0x368>)
 802017e:	f7fa fea5 	bl	801aecc <mg_log>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8020182:	697b      	ldr	r3, [r7, #20]
 8020184:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020188:	2b00      	cmp	r3, #0
 802018a:	f000 818d 	beq.w	80204a8 <mg_tcpip_poll+0x40c>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 802018e:	697b      	ldr	r3, [r7, #20]
 8020190:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020194:	2b01      	cmp	r3, #1
 8020196:	d107      	bne.n	80201a8 <mg_tcpip_poll+0x10c>
 8020198:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 802019c:	2b00      	cmp	r3, #0
 802019e:	d003      	beq.n	80201a8 <mg_tcpip_poll+0x10c>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 80201a0:	6978      	ldr	r0, [r7, #20]
 80201a2:	f7fe f819 	bl	801e1d8 <tx_dhcp_discover>
 80201a6:	e04c      	b.n	8020242 <mg_tcpip_poll+0x1a6>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 80201a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	d048      	beq.n	8020242 <mg_tcpip_poll+0x1a6>
 80201b0:	697b      	ldr	r3, [r7, #20]
 80201b2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80201b6:	2b03      	cmp	r3, #3
 80201b8:	d143      	bne.n	8020242 <mg_tcpip_poll+0x1a6>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 80201ba:	697b      	ldr	r3, [r7, #20]
 80201bc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 80201c0:	4313      	orrs	r3, r2
 80201c2:	d03e      	beq.n	8020242 <mg_tcpip_poll+0x1a6>
    if (ifp->now >= ifp->lease_expire) {
 80201c4:	697b      	ldr	r3, [r7, #20]
 80201c6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80201ca:	697b      	ldr	r3, [r7, #20]
 80201cc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80201d0:	4290      	cmp	r0, r2
 80201d2:	eb71 0303 	sbcs.w	r3, r1, r3
 80201d6:	d30a      	bcc.n	80201ee <mg_tcpip_poll+0x152>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 80201d8:	697b      	ldr	r3, [r7, #20]
 80201da:	2201      	movs	r2, #1
 80201dc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80201e0:	697b      	ldr	r3, [r7, #20]
 80201e2:	2200      	movs	r2, #0
 80201e4:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 80201e6:	6978      	ldr	r0, [r7, #20]
 80201e8:	f7fd fd6a 	bl	801dcc0 <onstatechange>
 80201ec:	e029      	b.n	8020242 <mg_tcpip_poll+0x1a6>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80201ee:	697b      	ldr	r3, [r7, #20]
 80201f0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80201f4:	4984      	ldr	r1, [pc, #528]	@ (8020408 <mg_tcpip_poll+0x36c>)
 80201f6:	1854      	adds	r4, r2, r1
 80201f8:	f143 0500 	adc.w	r5, r3, #0
 80201fc:	697b      	ldr	r3, [r7, #20]
 80201fe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8020202:	42a2      	cmp	r2, r4
 8020204:	41ab      	sbcs	r3, r5
 8020206:	d21c      	bcs.n	8020242 <mg_tcpip_poll+0x1a6>
               ((ifp->now / 1000) % 60) == 0) {
 8020208:	697b      	ldr	r3, [r7, #20]
 802020a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 802020e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020212:	f04f 0300 	mov.w	r3, #0
 8020216:	f7e0 fd9f 	bl	8000d58 <__aeabi_uldivmod>
 802021a:	4602      	mov	r2, r0
 802021c:	460b      	mov	r3, r1
 802021e:	4610      	mov	r0, r2
 8020220:	4619      	mov	r1, r3
 8020222:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8020226:	f04f 0300 	mov.w	r3, #0
 802022a:	f7e0 fd95 	bl	8000d58 <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 802022e:	4313      	orrs	r3, r2
 8020230:	d107      	bne.n	8020242 <mg_tcpip_poll+0x1a6>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8020232:	697b      	ldr	r3, [r7, #20]
 8020234:	689a      	ldr	r2, [r3, #8]
 8020236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802023a:	4974      	ldr	r1, [pc, #464]	@ (802040c <mg_tcpip_poll+0x370>)
 802023c:	6978      	ldr	r0, [r7, #20]
 802023e:	f7fd ff99 	bl	801e174 <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 8020242:	697b      	ldr	r3, [r7, #20]
 8020244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020246:	689b      	ldr	r3, [r3, #8]
 8020248:	2b00      	cmp	r3, #0
 802024a:	d019      	beq.n	8020280 <mg_tcpip_poll+0x1e4>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 802024c:	697b      	ldr	r3, [r7, #20]
 802024e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020250:	689b      	ldr	r3, [r3, #8]
 8020252:	697a      	ldr	r2, [r7, #20]
 8020254:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8020256:	697a      	ldr	r2, [r7, #20]
 8020258:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 802025a:	697a      	ldr	r2, [r7, #20]
 802025c:	4798      	blx	r3
 802025e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 8020260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020262:	2b00      	cmp	r3, #0
 8020264:	d024      	beq.n	80202b0 <mg_tcpip_poll+0x214>
      ifp->nrecv++;
 8020266:	697b      	ldr	r3, [r7, #20]
 8020268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802026a:	1c5a      	adds	r2, r3, #1
 802026c:	697b      	ldr	r3, [r7, #20]
 802026e:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8020270:	697b      	ldr	r3, [r7, #20]
 8020272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020276:	4619      	mov	r1, r3
 8020278:	6978      	ldr	r0, [r7, #20]
 802027a:	f7ff fe01 	bl	801fe80 <mg_tcpip_rx>
 802027e:	e017      	b.n	80202b0 <mg_tcpip_poll+0x214>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8020280:	697b      	ldr	r3, [r7, #20]
 8020282:	3334      	adds	r3, #52	@ 0x34
 8020284:	f107 0220 	add.w	r2, r7, #32
 8020288:	4611      	mov	r1, r2
 802028a:	4618      	mov	r0, r3
 802028c:	f000 ffb8 	bl	8021200 <mg_queue_next>
 8020290:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 8020292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020294:	2b00      	cmp	r3, #0
 8020296:	d00b      	beq.n	80202b0 <mg_tcpip_poll+0x214>
      mg_tcpip_rx(ifp, buf, len);
 8020298:	6a3b      	ldr	r3, [r7, #32]
 802029a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802029c:	4619      	mov	r1, r3
 802029e:	6978      	ldr	r0, [r7, #20]
 80202a0:	f7ff fdee 	bl	801fe80 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 80202a4:	697b      	ldr	r3, [r7, #20]
 80202a6:	3334      	adds	r3, #52	@ 0x34
 80202a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80202aa:	4618      	mov	r0, r3
 80202ac:	f000 ffd9 	bl	8021262 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80202b0:	697b      	ldr	r3, [r7, #20]
 80202b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80202b4:	681b      	ldr	r3, [r3, #0]
 80202b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80202b8:	e0f1      	b.n	802049e <mg_tcpip_poll+0x402>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 80202ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80202bc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80202c0:	f003 0301 	and.w	r3, r3, #1
 80202c4:	b2db      	uxtb	r3, r3
 80202c6:	2b00      	cmp	r3, #0
 80202c8:	f040 80e5 	bne.w	8020496 <mg_tcpip_poll+0x3fa>
 80202cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80202ce:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80202d2:	f003 0301 	and.w	r3, r3, #1
 80202d6:	b2db      	uxtb	r3, r3
 80202d8:	2b00      	cmp	r3, #0
 80202da:	f040 80dc 	bne.w	8020496 <mg_tcpip_poll+0x3fa>
 80202de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80202e0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80202e4:	f003 0308 	and.w	r3, r3, #8
 80202e8:	b2db      	uxtb	r3, r3
 80202ea:	2b00      	cmp	r3, #0
 80202ec:	f040 80d3 	bne.w	8020496 <mg_tcpip_poll+0x3fa>
    struct connstate *s = (struct connstate *) (c + 1);
 80202f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80202f2:	33b0      	adds	r3, #176	@ 0xb0
 80202f4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80202f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80202f8:	331c      	adds	r3, #28
 80202fa:	681b      	ldr	r3, [r3, #0]
 80202fc:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 80202fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020300:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8020304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020308:	4290      	cmp	r0, r2
 802030a:	eb71 0303 	sbcs.w	r3, r1, r3
 802030e:	f080 80c3 	bcs.w	8020498 <mg_tcpip_poll+0x3fc>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8020312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020314:	7f9b      	ldrb	r3, [r3, #30]
 8020316:	2b01      	cmp	r3, #1
 8020318:	d142      	bne.n	80203a0 <mg_tcpip_poll+0x304>
 802031a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802031c:	691a      	ldr	r2, [r3, #16]
 802031e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020320:	685b      	ldr	r3, [r3, #4]
 8020322:	429a      	cmp	r2, r3
 8020324:	d03c      	beq.n	80203a0 <mg_tcpip_poll+0x304>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8020326:	4b34      	ldr	r3, [pc, #208]	@ (80203f8 <mg_tcpip_poll+0x35c>)
 8020328:	681b      	ldr	r3, [r3, #0]
 802032a:	2b03      	cmp	r3, #3
 802032c:	dd0f      	ble.n	802034e <mg_tcpip_poll+0x2b2>
 802032e:	4b33      	ldr	r3, [pc, #204]	@ (80203fc <mg_tcpip_poll+0x360>)
 8020330:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 8020334:	4932      	ldr	r1, [pc, #200]	@ (8020400 <mg_tcpip_poll+0x364>)
 8020336:	2004      	movs	r0, #4
 8020338:	f7fa fd78 	bl	801ae2c <mg_log_prefix>
 802033c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802033e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8020340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020342:	681a      	ldr	r2, [r3, #0]
 8020344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020346:	685b      	ldr	r3, [r3, #4]
 8020348:	4831      	ldr	r0, [pc, #196]	@ (8020410 <mg_tcpip_poll+0x374>)
 802034a:	f7fa fdbf 	bl	801aecc <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802034e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020350:	f103 0618 	add.w	r6, r3, #24
 8020354:	69fb      	ldr	r3, [r7, #28]
 8020356:	613b      	str	r3, [r7, #16]
 8020358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802035a:	8b1c      	ldrh	r4, [r3, #24]
 802035c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802035e:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8020360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020362:	681b      	ldr	r3, [r3, #0]
 8020364:	4618      	mov	r0, r3
 8020366:	f002 f9ef 	bl	8022748 <mg_ntohl>
 802036a:	6078      	str	r0, [r7, #4]
 802036c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802036e:	685b      	ldr	r3, [r3, #4]
 8020370:	4618      	mov	r0, r3
 8020372:	f002 f9e9 	bl	8022748 <mg_ntohl>
 8020376:	4603      	mov	r3, r0
 8020378:	2200      	movs	r2, #0
 802037a:	9205      	str	r2, [sp, #20]
 802037c:	2200      	movs	r2, #0
 802037e:	9204      	str	r2, [sp, #16]
 8020380:	9303      	str	r3, [sp, #12]
 8020382:	6879      	ldr	r1, [r7, #4]
 8020384:	9102      	str	r1, [sp, #8]
 8020386:	9501      	str	r5, [sp, #4]
 8020388:	9400      	str	r4, [sp, #0]
 802038a:	2310      	movs	r3, #16
 802038c:	693a      	ldr	r2, [r7, #16]
 802038e:	4631      	mov	r1, r6
 8020390:	6978      	ldr	r0, [r7, #20]
 8020392:	f7fe fd7d 	bl	801ee90 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 8020396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020398:	685a      	ldr	r2, [r3, #4]
 802039a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802039c:	611a      	str	r2, [r3, #16]
 802039e:	e075      	b.n	802048c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 80203a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203a2:	7f9b      	ldrb	r3, [r3, #30]
 80203a4:	2b02      	cmp	r3, #2
 80203a6:	d104      	bne.n	80203b2 <mg_tcpip_poll+0x316>
        mg_error(c, "ARP timeout");
 80203a8:	491a      	ldr	r1, [pc, #104]	@ (8020414 <mg_tcpip_poll+0x378>)
 80203aa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80203ac:	f7f5 f978 	bl	80156a0 <mg_error>
 80203b0:	e06c      	b.n	802048c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 80203b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203b4:	7f9b      	ldrb	r3, [r3, #30]
 80203b6:	2b03      	cmp	r3, #3
 80203b8:	d104      	bne.n	80203c4 <mg_tcpip_poll+0x328>
        mg_error(c, "Connection timeout");
 80203ba:	4917      	ldr	r1, [pc, #92]	@ (8020418 <mg_tcpip_poll+0x37c>)
 80203bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80203be:	f7f5 f96f 	bl	80156a0 <mg_error>
 80203c2:	e063      	b.n	802048c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 80203c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203c6:	7f9b      	ldrb	r3, [r3, #30]
 80203c8:	2b04      	cmp	r3, #4
 80203ca:	d107      	bne.n	80203dc <mg_tcpip_poll+0x340>
        c->is_closing = 1;
 80203cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80203ce:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80203d2:	f043 0320 	orr.w	r3, r3, #32
 80203d6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 80203da:	e05d      	b.n	8020498 <mg_tcpip_poll+0x3fc>
      } else {
        if (s->tmiss++ > 2) {
 80203dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203de:	7fdb      	ldrb	r3, [r3, #31]
 80203e0:	1c5a      	adds	r2, r3, #1
 80203e2:	b2d1      	uxtb	r1, r2
 80203e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80203e6:	77d1      	strb	r1, [r2, #31]
 80203e8:	2b02      	cmp	r3, #2
 80203ea:	d919      	bls.n	8020420 <mg_tcpip_poll+0x384>
          mg_error(c, "keepalive");
 80203ec:	490b      	ldr	r1, [pc, #44]	@ (802041c <mg_tcpip_poll+0x380>)
 80203ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80203f0:	f7f5 f956 	bl	80156a0 <mg_error>
 80203f4:	e04a      	b.n	802048c <mg_tcpip_poll+0x3f0>
 80203f6:	bf00      	nop
 80203f8:	20000298 	.word	0x20000298
 80203fc:	08033f54 	.word	0x08033f54
 8020400:	080310b8 	.word	0x080310b8
 8020404:	08032b04 	.word	0x08032b04
 8020408:	001b7740 	.word	0x001b7740
 802040c:	08033de4 	.word	0x08033de4
 8020410:	08032b14 	.word	0x08032b14
 8020414:	08032b24 	.word	0x08032b24
 8020418:	08032b30 	.word	0x08032b30
 802041c:	08032b44 	.word	0x08032b44
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 8020420:	4b23      	ldr	r3, [pc, #140]	@ (80204b0 <mg_tcpip_poll+0x414>)
 8020422:	681b      	ldr	r3, [r3, #0]
 8020424:	2b03      	cmp	r3, #3
 8020426:	dd0c      	ble.n	8020442 <mg_tcpip_poll+0x3a6>
 8020428:	4b22      	ldr	r3, [pc, #136]	@ (80204b4 <mg_tcpip_poll+0x418>)
 802042a:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 802042e:	4922      	ldr	r1, [pc, #136]	@ (80204b8 <mg_tcpip_poll+0x41c>)
 8020430:	2004      	movs	r0, #4
 8020432:	f7fa fcfb 	bl	801ae2c <mg_log_prefix>
 8020436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802043a:	4619      	mov	r1, r3
 802043c:	481f      	ldr	r0, [pc, #124]	@ (80204bc <mg_tcpip_poll+0x420>)
 802043e:	f7fa fd45 	bl	801aecc <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8020442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020444:	f103 0618 	add.w	r6, r3, #24
 8020448:	69fb      	ldr	r3, [r7, #28]
 802044a:	613b      	str	r3, [r7, #16]
 802044c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802044e:	8b1c      	ldrh	r4, [r3, #24]
 8020450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020452:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 8020454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020456:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8020458:	3b01      	subs	r3, #1
 802045a:	4618      	mov	r0, r3
 802045c:	f002 f974 	bl	8022748 <mg_ntohl>
 8020460:	6078      	str	r0, [r7, #4]
 8020462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020464:	685b      	ldr	r3, [r3, #4]
 8020466:	4618      	mov	r0, r3
 8020468:	f002 f96e 	bl	8022748 <mg_ntohl>
 802046c:	4603      	mov	r3, r0
 802046e:	2200      	movs	r2, #0
 8020470:	9205      	str	r2, [sp, #20]
 8020472:	2200      	movs	r2, #0
 8020474:	9204      	str	r2, [sp, #16]
 8020476:	9303      	str	r3, [sp, #12]
 8020478:	6879      	ldr	r1, [r7, #4]
 802047a:	9102      	str	r1, [sp, #8]
 802047c:	9501      	str	r5, [sp, #4]
 802047e:	9400      	str	r4, [sp, #0]
 8020480:	2310      	movs	r3, #16
 8020482:	693a      	ldr	r2, [r7, #16]
 8020484:	4631      	mov	r1, r6
 8020486:	6978      	ldr	r0, [r7, #20]
 8020488:	f7fe fd02 	bl	801ee90 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 802048c:	2100      	movs	r1, #0
 802048e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8020490:	f7fd fb40 	bl	801db14 <settmout>
 8020494:	e000      	b.n	8020498 <mg_tcpip_poll+0x3fc>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 8020496:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8020498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802049a:	681b      	ldr	r3, [r3, #0]
 802049c:	637b      	str	r3, [r7, #52]	@ 0x34
 802049e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80204a0:	2b00      	cmp	r3, #0
 80204a2:	f47f af0a 	bne.w	80202ba <mg_tcpip_poll+0x21e>
 80204a6:	e000      	b.n	80204aa <mg_tcpip_poll+0x40e>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80204a8:	bf00      	nop
    }
  }
}
 80204aa:	373c      	adds	r7, #60	@ 0x3c
 80204ac:	46bd      	mov	sp, r7
 80204ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204b0:	20000298 	.word	0x20000298
 80204b4:	08033f54 	.word	0x08033f54
 80204b8:	080310b8 	.word	0x080310b8
 80204bc:	08032b50 	.word	0x08032b50

080204c0 <mg_tcpip_init>:
  } else {
    ifp->ndrop++;
  }
}

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 80204c0:	b580      	push	{r7, lr}
 80204c2:	b084      	sub	sp, #16
 80204c4:	af00      	add	r7, sp, #0
 80204c6:	6078      	str	r0, [r7, #4]
 80204c8:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80204ca:	683b      	ldr	r3, [r7, #0]
 80204cc:	781b      	ldrb	r3, [r3, #0]
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d12d      	bne.n	802052e <mg_tcpip_init+0x6e>
 80204d2:	683b      	ldr	r3, [r7, #0]
 80204d4:	785b      	ldrb	r3, [r3, #1]
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	d129      	bne.n	802052e <mg_tcpip_init+0x6e>
 80204da:	683b      	ldr	r3, [r7, #0]
 80204dc:	789b      	ldrb	r3, [r3, #2]
 80204de:	2b00      	cmp	r3, #0
 80204e0:	d125      	bne.n	802052e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80204e2:	683b      	ldr	r3, [r7, #0]
 80204e4:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80204e6:	2b00      	cmp	r3, #0
 80204e8:	d121      	bne.n	802052e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80204ea:	683b      	ldr	r3, [r7, #0]
 80204ec:	791b      	ldrb	r3, [r3, #4]
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d11d      	bne.n	802052e <mg_tcpip_init+0x6e>
 80204f2:	683b      	ldr	r3, [r7, #0]
 80204f4:	795b      	ldrb	r3, [r3, #5]
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d119      	bne.n	802052e <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 80204fa:	683b      	ldr	r3, [r7, #0]
 80204fc:	2202      	movs	r2, #2
 80204fe:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8020500:	683b      	ldr	r3, [r7, #0]
 8020502:	3301      	adds	r3, #1
 8020504:	2105      	movs	r1, #5
 8020506:	4618      	mov	r0, r3
 8020508:	f002 f8b7 	bl	802267a <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 802050c:	4b51      	ldr	r3, [pc, #324]	@ (8020654 <mg_tcpip_init+0x194>)
 802050e:	681b      	ldr	r3, [r3, #0]
 8020510:	2b01      	cmp	r3, #1
 8020512:	dd0c      	ble.n	802052e <mg_tcpip_init+0x6e>
 8020514:	4b50      	ldr	r3, [pc, #320]	@ (8020658 <mg_tcpip_init+0x198>)
 8020516:	f241 721f 	movw	r2, #5919	@ 0x171f
 802051a:	4950      	ldr	r1, [pc, #320]	@ (802065c <mg_tcpip_init+0x19c>)
 802051c:	2002      	movs	r0, #2
 802051e:	f7fa fc85 	bl	801ae2c <mg_log_prefix>
 8020522:	683b      	ldr	r3, [r7, #0]
 8020524:	461a      	mov	r2, r3
 8020526:	494e      	ldr	r1, [pc, #312]	@ (8020660 <mg_tcpip_init+0x1a0>)
 8020528:	484e      	ldr	r0, [pc, #312]	@ (8020664 <mg_tcpip_init+0x1a4>)
 802052a:	f7fa fccf 	bl	801aecc <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 802052e:	683b      	ldr	r3, [r7, #0]
 8020530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020532:	681b      	ldr	r3, [r3, #0]
 8020534:	2b00      	cmp	r3, #0
 8020536:	d019      	beq.n	802056c <mg_tcpip_init+0xac>
 8020538:	683b      	ldr	r3, [r7, #0]
 802053a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802053c:	681b      	ldr	r3, [r3, #0]
 802053e:	6838      	ldr	r0, [r7, #0]
 8020540:	4798      	blx	r3
 8020542:	4603      	mov	r3, r0
 8020544:	f083 0301 	eor.w	r3, r3, #1
 8020548:	b2db      	uxtb	r3, r3
 802054a:	2b00      	cmp	r3, #0
 802054c:	d00e      	beq.n	802056c <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 802054e:	4b41      	ldr	r3, [pc, #260]	@ (8020654 <mg_tcpip_init+0x194>)
 8020550:	681b      	ldr	r3, [r3, #0]
 8020552:	2b00      	cmp	r3, #0
 8020554:	dd7a      	ble.n	802064c <mg_tcpip_init+0x18c>
 8020556:	4b40      	ldr	r3, [pc, #256]	@ (8020658 <mg_tcpip_init+0x198>)
 8020558:	f241 7223 	movw	r2, #5923	@ 0x1723
 802055c:	493f      	ldr	r1, [pc, #252]	@ (802065c <mg_tcpip_init+0x19c>)
 802055e:	2001      	movs	r0, #1
 8020560:	f7fa fc64 	bl	801ae2c <mg_log_prefix>
 8020564:	4840      	ldr	r0, [pc, #256]	@ (8020668 <mg_tcpip_init+0x1a8>)
 8020566:	f7fa fcb1 	bl	801aecc <mg_log>
 802056a:	e06f      	b.n	802064c <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 802056c:	f240 6304 	movw	r3, #1540	@ 0x604
 8020570:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8020572:	68f9      	ldr	r1, [r7, #12]
 8020574:	2001      	movs	r0, #1
 8020576:	f7f4 fa93 	bl	8014aa0 <mg_calloc>
 802057a:	4602      	mov	r2, r0
 802057c:	683b      	ldr	r3, [r7, #0]
 802057e:	615a      	str	r2, [r3, #20]
 8020580:	683b      	ldr	r3, [r7, #0]
 8020582:	68fa      	ldr	r2, [r7, #12]
 8020584:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 8020586:	683b      	ldr	r3, [r7, #0]
 8020588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802058a:	2b00      	cmp	r3, #0
 802058c:	d10a      	bne.n	80205a4 <mg_tcpip_init+0xe4>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 802058e:	683b      	ldr	r3, [r7, #0]
 8020590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020592:	689b      	ldr	r3, [r3, #8]
 8020594:	2b00      	cmp	r3, #0
 8020596:	d001      	beq.n	802059c <mg_tcpip_init+0xdc>
 8020598:	68fb      	ldr	r3, [r7, #12]
 802059a:	e001      	b.n	80205a0 <mg_tcpip_init+0xe0>
 802059c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80205a0:	683a      	ldr	r2, [r7, #0]
 80205a2:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 80205a4:	683b      	ldr	r3, [r7, #0]
 80205a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80205a8:	4619      	mov	r1, r3
 80205aa:	2001      	movs	r0, #1
 80205ac:	f7f4 fa78 	bl	8014aa0 <mg_calloc>
 80205b0:	4602      	mov	r2, r0
 80205b2:	683b      	ldr	r3, [r7, #0]
 80205b4:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 80205b6:	f002 f971 	bl	802289c <mg_millis>
 80205ba:	4602      	mov	r2, r0
 80205bc:	460b      	mov	r3, r1
 80205be:	6839      	ldr	r1, [r7, #0]
 80205c0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 80205c4:	687b      	ldr	r3, [r7, #4]
 80205c6:	683a      	ldr	r2, [r7, #0]
 80205c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 80205ca:	683b      	ldr	r3, [r7, #0]
 80205cc:	687a      	ldr	r2, [r7, #4]
 80205ce:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 80205d0:	683b      	ldr	r3, [r7, #0]
 80205d2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80205d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 80205da:	687b      	ldr	r3, [r7, #4]
 80205dc:	2230      	movs	r2, #48	@ 0x30
 80205de:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 80205e0:	683b      	ldr	r3, [r7, #0]
 80205e2:	689b      	ldr	r3, [r3, #8]
 80205e4:	2b00      	cmp	r3, #0
 80205e6:	d102      	bne.n	80205ee <mg_tcpip_init+0x12e>
 80205e8:	683b      	ldr	r3, [r7, #0]
 80205ea:	2201      	movs	r2, #1
 80205ec:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 80205ee:	683b      	ldr	r3, [r7, #0]
 80205f0:	3346      	adds	r3, #70	@ 0x46
 80205f2:	2206      	movs	r2, #6
 80205f4:	21ff      	movs	r1, #255	@ 0xff
 80205f6:	4618      	mov	r0, r3
 80205f8:	f005 fcae 	bl	8025f58 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 80205fc:	683b      	ldr	r3, [r7, #0]
 80205fe:	3368      	adds	r3, #104	@ 0x68
 8020600:	2102      	movs	r1, #2
 8020602:	4618      	mov	r0, r3
 8020604:	f002 f839 	bl	802267a <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8020608:	683b      	ldr	r3, [r7, #0]
 802060a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 802060e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8020612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8020616:	b29a      	uxth	r2, r3
 8020618:	683b      	ldr	r3, [r7, #0]
 802061a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802061e:	683b      	ldr	r3, [r7, #0]
 8020620:	695b      	ldr	r3, [r3, #20]
 8020622:	2b00      	cmp	r3, #0
 8020624:	d003      	beq.n	802062e <mg_tcpip_init+0x16e>
 8020626:	683b      	ldr	r3, [r7, #0]
 8020628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802062a:	2b00      	cmp	r3, #0
 802062c:	d10e      	bne.n	802064c <mg_tcpip_init+0x18c>
 802062e:	4b09      	ldr	r3, [pc, #36]	@ (8020654 <mg_tcpip_init+0x194>)
 8020630:	681b      	ldr	r3, [r3, #0]
 8020632:	2b00      	cmp	r3, #0
 8020634:	dd0a      	ble.n	802064c <mg_tcpip_init+0x18c>
 8020636:	4b08      	ldr	r3, [pc, #32]	@ (8020658 <mg_tcpip_init+0x198>)
 8020638:	f241 7234 	movw	r2, #5940	@ 0x1734
 802063c:	4907      	ldr	r1, [pc, #28]	@ (802065c <mg_tcpip_init+0x19c>)
 802063e:	2001      	movs	r0, #1
 8020640:	f7fa fbf4 	bl	801ae2c <mg_log_prefix>
 8020644:	4809      	ldr	r0, [pc, #36]	@ (802066c <mg_tcpip_init+0x1ac>)
 8020646:	f7fa fc41 	bl	801aecc <mg_log>
  }
}
 802064a:	e7ff      	b.n	802064c <mg_tcpip_init+0x18c>
 802064c:	bf00      	nop
 802064e:	3710      	adds	r7, #16
 8020650:	46bd      	mov	sp, r7
 8020652:	bd80      	pop	{r7, pc}
 8020654:	20000298 	.word	0x20000298
 8020658:	08033f64 	.word	0x08033f64
 802065c:	080310b8 	.word	0x080310b8
 8020660:	080210e1 	.word	0x080210e1
 8020664:	08032b60 	.word	0x08032b60
 8020668:	08032b84 	.word	0x08032b84
 802066c:	080325f4 	.word	0x080325f4

08020670 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 8020670:	b590      	push	{r4, r7, lr}
 8020672:	b08d      	sub	sp, #52	@ 0x34
 8020674:	af06      	add	r7, sp, #24
 8020676:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8020678:	687b      	ldr	r3, [r7, #4]
 802067a:	33b0      	adds	r3, #176	@ 0xb0
 802067c:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 802067e:	687b      	ldr	r3, [r7, #4]
 8020680:	8b1b      	ldrh	r3, [r3, #24]
 8020682:	4618      	mov	r0, r3
 8020684:	f002 f879 	bl	802277a <mg_ntohs>
 8020688:	4603      	mov	r3, r0
 802068a:	4618      	mov	r0, r3
 802068c:	f002 f85c 	bl	8022748 <mg_ntohl>
 8020690:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8020692:	687b      	ldr	r3, [r7, #4]
 8020694:	685b      	ldr	r3, [r3, #4]
 8020696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020698:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802069a:	687b      	ldr	r3, [r7, #4]
 802069c:	331c      	adds	r3, #28
 802069e:	681b      	ldr	r3, [r3, #0]
 80206a0:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 80206a2:	697b      	ldr	r3, [r7, #20]
 80206a4:	f103 0018 	add.w	r0, r3, #24
 80206a8:	68bc      	ldr	r4, [r7, #8]
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	8b1b      	ldrh	r3, [r3, #24]
 80206ae:	687a      	ldr	r2, [r7, #4]
 80206b0:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80206b2:	2100      	movs	r1, #0
 80206b4:	9105      	str	r1, [sp, #20]
 80206b6:	2100      	movs	r1, #0
 80206b8:	9104      	str	r1, [sp, #16]
 80206ba:	2100      	movs	r1, #0
 80206bc:	9103      	str	r1, [sp, #12]
 80206be:	6939      	ldr	r1, [r7, #16]
 80206c0:	9102      	str	r1, [sp, #8]
 80206c2:	9201      	str	r2, [sp, #4]
 80206c4:	9300      	str	r3, [sp, #0]
 80206c6:	2302      	movs	r3, #2
 80206c8:	4622      	mov	r2, r4
 80206ca:	4601      	mov	r1, r0
 80206cc:	68f8      	ldr	r0, [r7, #12]
 80206ce:	f7fe fbdf 	bl	801ee90 <tx_tcp>
         0);
}
 80206d2:	bf00      	nop
 80206d4:	371c      	adds	r7, #28
 80206d6:	46bd      	mov	sp, r7
 80206d8:	bd90      	pop	{r4, r7, pc}
	...

080206dc <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 80206dc:	b580      	push	{r7, lr}
 80206de:	b08a      	sub	sp, #40	@ 0x28
 80206e0:	af02      	add	r7, sp, #8
 80206e2:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	685b      	ldr	r3, [r3, #4]
 80206e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80206ea:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80206ec:	687b      	ldr	r3, [r7, #4]
 80206ee:	331c      	adds	r3, #28
 80206f0:	681b      	ldr	r3, [r3, #0]
 80206f2:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 80206f4:	687a      	ldr	r2, [r7, #4]
 80206f6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80206fa:	f36f 03c3 	bfc	r3, #3, #1
 80206fe:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8020702:	69fb      	ldr	r3, [r7, #28]
 8020704:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8020708:	b21b      	sxth	r3, r3
 802070a:	2b00      	cmp	r3, #0
 802070c:	db04      	blt.n	8020718 <mg_connect_resolved+0x3c>
 802070e:	69fb      	ldr	r3, [r7, #28]
 8020710:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8020714:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8020718:	687b      	ldr	r3, [r7, #4]
 802071a:	3308      	adds	r3, #8
 802071c:	69fa      	ldr	r2, [r7, #28]
 802071e:	3208      	adds	r2, #8
 8020720:	6812      	ldr	r2, [r2, #0]
 8020722:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 8020724:	69fb      	ldr	r3, [r7, #28]
 8020726:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 802072a:	1c5a      	adds	r2, r3, #1
 802072c:	b291      	uxth	r1, r2
 802072e:	69fa      	ldr	r2, [r7, #28]
 8020730:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 8020734:	4618      	mov	r0, r3
 8020736:	f002 f820 	bl	802277a <mg_ntohs>
 802073a:	4603      	mov	r3, r0
 802073c:	461a      	mov	r2, r3
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8020742:	4b6a      	ldr	r3, [pc, #424]	@ (80208ec <mg_connect_resolved+0x210>)
 8020744:	681b      	ldr	r3, [r3, #0]
 8020746:	2b02      	cmp	r3, #2
 8020748:	dd15      	ble.n	8020776 <mg_connect_resolved+0x9a>
 802074a:	4b69      	ldr	r3, [pc, #420]	@ (80208f0 <mg_connect_resolved+0x214>)
 802074c:	f241 724f 	movw	r2, #5967	@ 0x174f
 8020750:	4968      	ldr	r1, [pc, #416]	@ (80208f4 <mg_connect_resolved+0x218>)
 8020752:	2003      	movs	r0, #3
 8020754:	f7fa fb6a 	bl	801ae2c <mg_log_prefix>
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	f103 0208 	add.w	r2, r3, #8
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	331c      	adds	r3, #28
 8020766:	9301      	str	r3, [sp, #4]
 8020768:	4b63      	ldr	r3, [pc, #396]	@ (80208f8 <mg_connect_resolved+0x21c>)
 802076a:	9300      	str	r3, [sp, #0]
 802076c:	4613      	mov	r3, r2
 802076e:	4a62      	ldr	r2, [pc, #392]	@ (80208f8 <mg_connect_resolved+0x21c>)
 8020770:	4862      	ldr	r0, [pc, #392]	@ (80208fc <mg_connect_resolved+0x220>)
 8020772:	f7fa fbab 	bl	801aecc <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 8020776:	2200      	movs	r2, #0
 8020778:	2103      	movs	r1, #3
 802077a:	6878      	ldr	r0, [r7, #4]
 802077c:	f7f4 ff70 	bl	8015660 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020786:	f003 0301 	and.w	r3, r3, #1
 802078a:	b2db      	uxtb	r3, r3
 802078c:	2b00      	cmp	r3, #0
 802078e:	d017      	beq.n	80207c0 <mg_connect_resolved+0xe4>
 8020790:	68fb      	ldr	r3, [r7, #12]
 8020792:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8020796:	d008      	beq.n	80207aa <mg_connect_resolved+0xce>
 8020798:	69fb      	ldr	r3, [r7, #28]
 802079a:	689a      	ldr	r2, [r3, #8]
 802079c:	69fb      	ldr	r3, [r7, #28]
 802079e:	68db      	ldr	r3, [r3, #12]
 80207a0:	43db      	mvns	r3, r3
 80207a2:	431a      	orrs	r2, r3
 80207a4:	68fb      	ldr	r3, [r7, #12]
 80207a6:	429a      	cmp	r2, r3
 80207a8:	d10a      	bne.n	80207c0 <mg_connect_resolved+0xe4>
    struct connstate *s = (struct connstate *) (c + 1);
 80207aa:	687b      	ldr	r3, [r7, #4]
 80207ac:	33b0      	adds	r3, #176	@ 0xb0
 80207ae:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 80207b0:	69bb      	ldr	r3, [r7, #24]
 80207b2:	3318      	adds	r3, #24
 80207b4:	2206      	movs	r2, #6
 80207b6:	21ff      	movs	r1, #255	@ 0xff
 80207b8:	4618      	mov	r0, r3
 80207ba:	f005 fbcd 	bl	8025f58 <memset>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80207be:	e091      	b.n	80208e4 <mg_connect_resolved+0x208>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80207c0:	69fb      	ldr	r3, [r7, #28]
 80207c2:	689b      	ldr	r3, [r3, #8]
 80207c4:	2b00      	cmp	r3, #0
 80207c6:	d036      	beq.n	8020836 <mg_connect_resolved+0x15a>
 80207c8:	69fb      	ldr	r3, [r7, #28]
 80207ca:	689a      	ldr	r2, [r3, #8]
 80207cc:	68fb      	ldr	r3, [r7, #12]
 80207ce:	405a      	eors	r2, r3
 80207d0:	69fb      	ldr	r3, [r7, #28]
 80207d2:	68db      	ldr	r3, [r3, #12]
 80207d4:	4013      	ands	r3, r2
 80207d6:	2b00      	cmp	r3, #0
 80207d8:	d12d      	bne.n	8020836 <mg_connect_resolved+0x15a>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 80207da:	69fb      	ldr	r3, [r7, #28]
 80207dc:	691a      	ldr	r2, [r3, #16]
 80207de:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80207e0:	429a      	cmp	r2, r3
 80207e2:	d028      	beq.n	8020836 <mg_connect_resolved+0x15a>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 80207e4:	4b41      	ldr	r3, [pc, #260]	@ (80208ec <mg_connect_resolved+0x210>)
 80207e6:	681b      	ldr	r3, [r3, #0]
 80207e8:	2b02      	cmp	r3, #2
 80207ea:	dd0c      	ble.n	8020806 <mg_connect_resolved+0x12a>
 80207ec:	4b40      	ldr	r3, [pc, #256]	@ (80208f0 <mg_connect_resolved+0x214>)
 80207ee:	f241 7258 	movw	r2, #5976	@ 0x1758
 80207f2:	4940      	ldr	r1, [pc, #256]	@ (80208f4 <mg_connect_resolved+0x218>)
 80207f4:	2003      	movs	r0, #3
 80207f6:	f7fa fb19 	bl	801ae2c <mg_log_prefix>
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80207fe:	4619      	mov	r1, r3
 8020800:	483f      	ldr	r0, [pc, #252]	@ (8020900 <mg_connect_resolved+0x224>)
 8020802:	f7fa fb63 	bl	801aecc <mg_log>
    arp_ask(ifp, rem_ip);
 8020806:	68fb      	ldr	r3, [r7, #12]
 8020808:	4619      	mov	r1, r3
 802080a:	69f8      	ldr	r0, [r7, #28]
 802080c:	f7fd f9fa 	bl	801dc04 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8020810:	2102      	movs	r1, #2
 8020812:	6878      	ldr	r0, [r7, #4]
 8020814:	f7fd f97e 	bl	801db14 <settmout>
    c->is_arplooking = 1;
 8020818:	687a      	ldr	r2, [r7, #4]
 802081a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802081e:	f043 0310 	orr.w	r3, r3, #16
 8020822:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_connecting = 1;
 8020826:	687a      	ldr	r2, [r7, #4]
 8020828:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802082c:	f043 0320 	orr.w	r3, r3, #32
 8020830:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8020834:	e056      	b.n	80208e4 <mg_connect_resolved+0x208>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8020836:	f107 030c 	add.w	r3, r7, #12
 802083a:	781b      	ldrb	r3, [r3, #0]
 802083c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8020840:	2be0      	cmp	r3, #224	@ 0xe0
 8020842:	d126      	bne.n	8020892 <mg_connect_resolved+0x1b6>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 8020844:	687b      	ldr	r3, [r7, #4]
 8020846:	33b0      	adds	r3, #176	@ 0xb0
 8020848:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 802084a:	4a2e      	ldr	r2, [pc, #184]	@ (8020904 <mg_connect_resolved+0x228>)
 802084c:	f107 0308 	add.w	r3, r7, #8
 8020850:	6812      	ldr	r2, [r2, #0]
 8020852:	4611      	mov	r1, r2
 8020854:	8019      	strh	r1, [r3, #0]
 8020856:	3302      	adds	r3, #2
 8020858:	0c12      	lsrs	r2, r2, #16
 802085a:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 802085c:	693b      	ldr	r3, [r7, #16]
 802085e:	3318      	adds	r3, #24
 8020860:	461a      	mov	r2, r3
 8020862:	f107 0308 	add.w	r3, r7, #8
 8020866:	8819      	ldrh	r1, [r3, #0]
 8020868:	789b      	ldrb	r3, [r3, #2]
 802086a:	8011      	strh	r1, [r2, #0]
 802086c:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 802086e:	693b      	ldr	r3, [r7, #16]
 8020870:	3318      	adds	r3, #24
 8020872:	1cd8      	adds	r0, r3, #3
 8020874:	f107 030c 	add.w	r3, r7, #12
 8020878:	3301      	adds	r3, #1
 802087a:	2203      	movs	r2, #3
 802087c:	4619      	mov	r1, r3
 802087e:	f006 fdc3 	bl	8027408 <memcpy>
    s->mac[3] &= 0x7F;
 8020882:	693b      	ldr	r3, [r7, #16]
 8020884:	7edb      	ldrb	r3, [r3, #27]
 8020886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802088a:	b2da      	uxtb	r2, r3
 802088c:	693b      	ldr	r3, [r7, #16]
 802088e:	76da      	strb	r2, [r3, #27]
      send_syn(c);
      settmout(c, MIP_TTYPE_SYN);
      c->is_connecting = 1;
    }
  }
}
 8020890:	e028      	b.n	80208e4 <mg_connect_resolved+0x208>
    struct connstate *s = (struct connstate *) (c + 1);
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	33b0      	adds	r3, #176	@ 0xb0
 8020896:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8020898:	697b      	ldr	r3, [r7, #20]
 802089a:	f103 0018 	add.w	r0, r3, #24
 802089e:	69fb      	ldr	r3, [r7, #28]
 80208a0:	3346      	adds	r3, #70	@ 0x46
 80208a2:	2206      	movs	r2, #6
 80208a4:	4619      	mov	r1, r3
 80208a6:	f006 fdaf 	bl	8027408 <memcpy>
    if (c->is_udp) {
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80208b0:	f003 0301 	and.w	r3, r3, #1
 80208b4:	b2db      	uxtb	r3, r3
 80208b6:	2b00      	cmp	r3, #0
 80208b8:	d005      	beq.n	80208c6 <mg_connect_resolved+0x1ea>
      mg_call(c, MG_EV_CONNECT, NULL);
 80208ba:	2200      	movs	r2, #0
 80208bc:	2104      	movs	r1, #4
 80208be:	6878      	ldr	r0, [r7, #4]
 80208c0:	f7f4 fece 	bl	8015660 <mg_call>
}
 80208c4:	e00e      	b.n	80208e4 <mg_connect_resolved+0x208>
      send_syn(c);
 80208c6:	6878      	ldr	r0, [r7, #4]
 80208c8:	f7ff fed2 	bl	8020670 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 80208cc:	2103      	movs	r1, #3
 80208ce:	6878      	ldr	r0, [r7, #4]
 80208d0:	f7fd f920 	bl	801db14 <settmout>
      c->is_connecting = 1;
 80208d4:	687a      	ldr	r2, [r7, #4]
 80208d6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80208da:	f043 0320 	orr.w	r3, r3, #32
 80208de:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
}
 80208e2:	e7ff      	b.n	80208e4 <mg_connect_resolved+0x208>
 80208e4:	bf00      	nop
 80208e6:	3720      	adds	r7, #32
 80208e8:	46bd      	mov	sp, r7
 80208ea:	bd80      	pop	{r7, pc}
 80208ec:	20000298 	.word	0x20000298
 80208f0:	08033f74 	.word	0x08033f74
 80208f4:	080310b8 	.word	0x080310b8
 80208f8:	08021095 	.word	0x08021095
 80208fc:	08032b98 	.word	0x08032b98
 8020900:	08032ba8 	.word	0x08032ba8
 8020904:	08032bbc 	.word	0x08032bbc

08020908 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8020908:	b580      	push	{r7, lr}
 802090a:	b082      	sub	sp, #8
 802090c:	af00      	add	r7, sp, #0
 802090e:	6078      	str	r0, [r7, #4]
 8020910:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 8020912:	6838      	ldr	r0, [r7, #0]
 8020914:	f001 fe34 	bl	8022580 <mg_url_port>
 8020918:	4603      	mov	r3, r0
 802091a:	4618      	mov	r0, r3
 802091c:	f001 ff2d 	bl	802277a <mg_ntohs>
 8020920:	4603      	mov	r3, r0
 8020922:	461a      	mov	r2, r3
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	831a      	strh	r2, [r3, #24]
  return true;
 8020928:	2301      	movs	r3, #1
}
 802092a:	4618      	mov	r0, r3
 802092c:	3708      	adds	r7, #8
 802092e:	46bd      	mov	sp, r7
 8020930:	bd80      	pop	{r7, pc}
	...

08020934 <write_conn>:

static void write_conn(struct mg_connection *c) {
 8020934:	b580      	push	{r7, lr}
 8020936:	b084      	sub	sp, #16
 8020938:	af00      	add	r7, sp, #0
 802093a:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020946:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8020948:	2b00      	cmp	r3, #0
 802094a:	d009      	beq.n	8020960 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 802094c:	687b      	ldr	r3, [r7, #4]
 802094e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8020950:	687b      	ldr	r3, [r7, #4]
 8020952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020954:	461a      	mov	r2, r3
 8020956:	6878      	ldr	r0, [r7, #4]
 8020958:	f001 fce7 	bl	802232a <mg_tls_send>
 802095c:	4603      	mov	r3, r0
 802095e:	e008      	b.n	8020972 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8020960:	687b      	ldr	r3, [r7, #4]
 8020962:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020968:	461a      	mov	r2, r3
 802096a:	6878      	ldr	r0, [r7, #4]
 802096c:	f7fe fce8 	bl	801f340 <mg_io_send>
 8020970:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8020972:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8020974:	68fb      	ldr	r3, [r7, #12]
 8020976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802097a:	d104      	bne.n	8020986 <write_conn+0x52>
    mg_error(c, "tx err");
 802097c:	490c      	ldr	r1, [pc, #48]	@ (80209b0 <write_conn+0x7c>)
 802097e:	6878      	ldr	r0, [r7, #4]
 8020980:	f7f4 fe8e 	bl	80156a0 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8020984:	e010      	b.n	80209a8 <write_conn+0x74>
  } else if (len > 0) {
 8020986:	68fb      	ldr	r3, [r7, #12]
 8020988:	2b00      	cmp	r3, #0
 802098a:	dd0d      	ble.n	80209a8 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 802098c:	687b      	ldr	r3, [r7, #4]
 802098e:	3348      	adds	r3, #72	@ 0x48
 8020990:	68fa      	ldr	r2, [r7, #12]
 8020992:	2100      	movs	r1, #0
 8020994:	4618      	mov	r0, r3
 8020996:	f7f9 fb37 	bl	801a008 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 802099a:	f107 030c 	add.w	r3, r7, #12
 802099e:	461a      	mov	r2, r3
 80209a0:	2108      	movs	r1, #8
 80209a2:	6878      	ldr	r0, [r7, #4]
 80209a4:	f7f4 fe5c 	bl	8015660 <mg_call>
}
 80209a8:	bf00      	nop
 80209aa:	3710      	adds	r7, #16
 80209ac:	46bd      	mov	sp, r7
 80209ae:	bd80      	pop	{r7, pc}
 80209b0:	08032bc0 	.word	0x08032bc0

080209b4 <init_closure>:

static void init_closure(struct mg_connection *c) {
 80209b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80209b6:	b08f      	sub	sp, #60	@ 0x3c
 80209b8:	af06      	add	r7, sp, #24
 80209ba:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 80209bc:	68fb      	ldr	r3, [r7, #12]
 80209be:	33b0      	adds	r3, #176	@ 0xb0
 80209c0:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 80209c2:	68fb      	ldr	r3, [r7, #12]
 80209c4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80209c8:	f003 0301 	and.w	r3, r3, #1
 80209cc:	b2db      	uxtb	r3, r3
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	d13f      	bne.n	8020a52 <init_closure+0x9e>
 80209d2:	68fb      	ldr	r3, [r7, #12]
 80209d4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80209d8:	f003 0301 	and.w	r3, r3, #1
 80209dc:	b2db      	uxtb	r3, r3
 80209de:	2b00      	cmp	r3, #0
 80209e0:	d137      	bne.n	8020a52 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 80209e2:	68fb      	ldr	r3, [r7, #12]
 80209e4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80209e8:	f003 0320 	and.w	r3, r3, #32
 80209ec:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 80209ee:	2b00      	cmp	r3, #0
 80209f0:	d12f      	bne.n	8020a52 <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 80209f2:	68fb      	ldr	r3, [r7, #12]
 80209f4:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 80209f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80209f8:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80209fa:	68fb      	ldr	r3, [r7, #12]
 80209fc:	331c      	adds	r3, #28
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8020a02:	69fb      	ldr	r3, [r7, #28]
 8020a04:	f103 0618 	add.w	r6, r3, #24
 8020a08:	697b      	ldr	r3, [r7, #20]
 8020a0a:	60bb      	str	r3, [r7, #8]
 8020a0c:	68fb      	ldr	r3, [r7, #12]
 8020a0e:	8b1c      	ldrh	r4, [r3, #24]
 8020a10:	68fb      	ldr	r3, [r7, #12]
 8020a12:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8020a14:	69fb      	ldr	r3, [r7, #28]
 8020a16:	681b      	ldr	r3, [r3, #0]
 8020a18:	4618      	mov	r0, r3
 8020a1a:	f001 fe95 	bl	8022748 <mg_ntohl>
 8020a1e:	6078      	str	r0, [r7, #4]
 8020a20:	69fb      	ldr	r3, [r7, #28]
 8020a22:	685b      	ldr	r3, [r3, #4]
 8020a24:	4618      	mov	r0, r3
 8020a26:	f001 fe8f 	bl	8022748 <mg_ntohl>
 8020a2a:	4603      	mov	r3, r0
 8020a2c:	2200      	movs	r2, #0
 8020a2e:	9205      	str	r2, [sp, #20]
 8020a30:	2200      	movs	r2, #0
 8020a32:	9204      	str	r2, [sp, #16]
 8020a34:	9303      	str	r3, [sp, #12]
 8020a36:	6879      	ldr	r1, [r7, #4]
 8020a38:	9102      	str	r1, [sp, #8]
 8020a3a:	9501      	str	r5, [sp, #4]
 8020a3c:	9400      	str	r4, [sp, #0]
 8020a3e:	2311      	movs	r3, #17
 8020a40:	68ba      	ldr	r2, [r7, #8]
 8020a42:	4631      	mov	r1, r6
 8020a44:	69b8      	ldr	r0, [r7, #24]
 8020a46:	f7fe fa23 	bl	801ee90 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 8020a4a:	2104      	movs	r1, #4
 8020a4c:	68f8      	ldr	r0, [r7, #12]
 8020a4e:	f7fd f861 	bl	801db14 <settmout>
  }
}
 8020a52:	bf00      	nop
 8020a54:	3724      	adds	r7, #36	@ 0x24
 8020a56:	46bd      	mov	sp, r7
 8020a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020a5a <close_conn>:

static void close_conn(struct mg_connection *c) {
 8020a5a:	b580      	push	{r7, lr}
 8020a5c:	b084      	sub	sp, #16
 8020a5e:	af00      	add	r7, sp, #0
 8020a60:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	33b0      	adds	r3, #176	@ 0xb0
 8020a66:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8020a68:	68fb      	ldr	r3, [r7, #12]
 8020a6a:	3320      	adds	r3, #32
 8020a6c:	4618      	mov	r0, r3
 8020a6e:	f7f9 fb16 	bl	801a09e <mg_iobuf_free>
  mg_close_conn(c);
 8020a72:	6878      	ldr	r0, [r7, #4]
 8020a74:	f7fc fddc 	bl	801d630 <mg_close_conn>
}
 8020a78:	bf00      	nop
 8020a7a:	3710      	adds	r7, #16
 8020a7c:	46bd      	mov	sp, r7
 8020a7e:	bd80      	pop	{r7, pc}

08020a80 <can_write>:

static bool can_write(struct mg_connection *c) {
 8020a80:	b480      	push	{r7}
 8020a82:	b083      	sub	sp, #12
 8020a84:	af00      	add	r7, sp, #0
 8020a86:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020a8e:	f003 0320 	and.w	r3, r3, #32
 8020a92:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	d11d      	bne.n	8020ad4 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020a98:	687b      	ldr	r3, [r7, #4]
 8020a9a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020a9e:	f003 0308 	and.w	r3, r3, #8
 8020aa2:	b2db      	uxtb	r3, r3
 8020aa4:	2b00      	cmp	r3, #0
 8020aa6:	d115      	bne.n	8020ad4 <can_write+0x54>
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	d011      	beq.n	8020ad4 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020ab6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8020aba:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	d109      	bne.n	8020ad4 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020ac0:	687b      	ldr	r3, [r7, #4]
 8020ac2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020ac6:	f003 0310 	and.w	r3, r3, #16
 8020aca:	b2db      	uxtb	r3, r3
 8020acc:	2b00      	cmp	r3, #0
 8020ace:	d101      	bne.n	8020ad4 <can_write+0x54>
 8020ad0:	2301      	movs	r3, #1
 8020ad2:	e000      	b.n	8020ad6 <can_write+0x56>
 8020ad4:	2300      	movs	r3, #0
 8020ad6:	f003 0301 	and.w	r3, r3, #1
 8020ada:	b2db      	uxtb	r3, r3
}
 8020adc:	4618      	mov	r0, r3
 8020ade:	370c      	adds	r7, #12
 8020ae0:	46bd      	mov	sp, r7
 8020ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ae6:	4770      	bx	lr

08020ae8 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8020ae8:	b5b0      	push	{r4, r5, r7, lr}
 8020aea:	b08c      	sub	sp, #48	@ 0x30
 8020aec:	af04      	add	r7, sp, #16
 8020aee:	6078      	str	r0, [r7, #4]
 8020af0:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020af6:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8020af8:	f001 fed0 	bl	802289c <mg_millis>
 8020afc:	4602      	mov	r2, r0
 8020afe:	460b      	mov	r3, r1
 8020b00:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8020b0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020b0e:	4608      	mov	r0, r1
 8020b10:	f001 fb77 	bl	8022202 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8020b14:	69bb      	ldr	r3, [r7, #24]
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	f000 80aa 	beq.w	8020c70 <mg_mgr_poll+0x188>
 8020b1c:	69bb      	ldr	r3, [r7, #24]
 8020b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020b20:	2b00      	cmp	r3, #0
 8020b22:	f000 80a5 	beq.w	8020c70 <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 8020b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020b2a:	69b8      	ldr	r0, [r7, #24]
 8020b2c:	f7ff fab6 	bl	802009c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	681b      	ldr	r3, [r3, #0]
 8020b34:	61fb      	str	r3, [r7, #28]
 8020b36:	e096      	b.n	8020c66 <mg_mgr_poll+0x17e>
    tmp = c->next;
 8020b38:	69fb      	ldr	r3, [r7, #28]
 8020b3a:	681b      	ldr	r3, [r3, #0]
 8020b3c:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 8020b3e:	69fb      	ldr	r3, [r7, #28]
 8020b40:	33b0      	adds	r3, #176	@ 0xb0
 8020b42:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 8020b44:	f107 0308 	add.w	r3, r7, #8
 8020b48:	461a      	mov	r2, r3
 8020b4a:	2102      	movs	r1, #2
 8020b4c:	69f8      	ldr	r0, [r7, #28]
 8020b4e:	f7f4 fd87 	bl	8015660 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8020b52:	4b49      	ldr	r3, [pc, #292]	@ (8020c78 <mg_mgr_poll+0x190>)
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	2b03      	cmp	r3, #3
 8020b58:	dd48      	ble.n	8020bec <mg_mgr_poll+0x104>
 8020b5a:	4b48      	ldr	r3, [pc, #288]	@ (8020c7c <mg_mgr_poll+0x194>)
 8020b5c:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8020b60:	4947      	ldr	r1, [pc, #284]	@ (8020c80 <mg_mgr_poll+0x198>)
 8020b62:	2004      	movs	r0, #4
 8020b64:	f7fa f962 	bl	801ae2c <mg_log_prefix>
 8020b68:	69fb      	ldr	r3, [r7, #28]
 8020b6a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8020b6c:	69fb      	ldr	r3, [r7, #28]
 8020b6e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020b76:	b2db      	uxtb	r3, r3
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	d001      	beq.n	8020b80 <mg_mgr_poll+0x98>
 8020b7c:	2454      	movs	r4, #84	@ 0x54
 8020b7e:	e000      	b.n	8020b82 <mg_mgr_poll+0x9a>
 8020b80:	2474      	movs	r4, #116	@ 0x74
 8020b82:	69fb      	ldr	r3, [r7, #28]
 8020b84:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020b88:	f003 0320 	and.w	r3, r3, #32
 8020b8c:	b2db      	uxtb	r3, r3
 8020b8e:	2b00      	cmp	r3, #0
 8020b90:	d001      	beq.n	8020b96 <mg_mgr_poll+0xae>
 8020b92:	2543      	movs	r5, #67	@ 0x43
 8020b94:	e000      	b.n	8020b98 <mg_mgr_poll+0xb0>
 8020b96:	2563      	movs	r5, #99	@ 0x63
 8020b98:	69fb      	ldr	r3, [r7, #28]
 8020b9a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020b9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8020ba2:	b2db      	uxtb	r3, r3
 8020ba4:	2b00      	cmp	r3, #0
 8020ba6:	d001      	beq.n	8020bac <mg_mgr_poll+0xc4>
 8020ba8:	2348      	movs	r3, #72	@ 0x48
 8020baa:	e000      	b.n	8020bae <mg_mgr_poll+0xc6>
 8020bac:	2368      	movs	r3, #104	@ 0x68
 8020bae:	69fa      	ldr	r2, [r7, #28]
 8020bb0:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 8020bb4:	f002 0208 	and.w	r2, r2, #8
 8020bb8:	b2d2      	uxtb	r2, r2
 8020bba:	2a00      	cmp	r2, #0
 8020bbc:	d001      	beq.n	8020bc2 <mg_mgr_poll+0xda>
 8020bbe:	2252      	movs	r2, #82	@ 0x52
 8020bc0:	e000      	b.n	8020bc4 <mg_mgr_poll+0xdc>
 8020bc2:	2272      	movs	r2, #114	@ 0x72
 8020bc4:	69f9      	ldr	r1, [r7, #28]
 8020bc6:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 8020bca:	f001 0120 	and.w	r1, r1, #32
 8020bce:	b2c9      	uxtb	r1, r1
 8020bd0:	2900      	cmp	r1, #0
 8020bd2:	d001      	beq.n	8020bd8 <mg_mgr_poll+0xf0>
 8020bd4:	2143      	movs	r1, #67	@ 0x43
 8020bd6:	e000      	b.n	8020bda <mg_mgr_poll+0xf2>
 8020bd8:	2163      	movs	r1, #99	@ 0x63
 8020bda:	9102      	str	r1, [sp, #8]
 8020bdc:	9201      	str	r2, [sp, #4]
 8020bde:	9300      	str	r3, [sp, #0]
 8020be0:	462b      	mov	r3, r5
 8020be2:	4622      	mov	r2, r4
 8020be4:	4601      	mov	r1, r0
 8020be6:	4827      	ldr	r0, [pc, #156]	@ (8020c84 <mg_mgr_poll+0x19c>)
 8020be8:	f7fa f970 	bl	801aecc <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 8020bec:	69fb      	ldr	r3, [r7, #28]
 8020bee:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020bf6:	b2db      	uxtb	r3, r3
 8020bf8:	2b00      	cmp	r3, #0
 8020bfa:	d00b      	beq.n	8020c14 <mg_mgr_poll+0x12c>
 8020bfc:	69f8      	ldr	r0, [r7, #28]
 8020bfe:	f001 fbad 	bl	802235c <mg_tls_pending>
 8020c02:	4603      	mov	r3, r0
 8020c04:	2b00      	cmp	r3, #0
 8020c06:	d005      	beq.n	8020c14 <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8020c08:	69fb      	ldr	r3, [r7, #28]
 8020c0a:	3368      	adds	r3, #104	@ 0x68
 8020c0c:	4619      	mov	r1, r3
 8020c0e:	69f8      	ldr	r0, [r7, #28]
 8020c10:	f7fe fc0e 	bl	801f430 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8020c14:	69f8      	ldr	r0, [r7, #28]
 8020c16:	f7ff ff33 	bl	8020a80 <can_write>
 8020c1a:	4603      	mov	r3, r0
 8020c1c:	2b00      	cmp	r3, #0
 8020c1e:	d002      	beq.n	8020c26 <mg_mgr_poll+0x13e>
 8020c20:	69f8      	ldr	r0, [r7, #28]
 8020c22:	f7ff fe87 	bl	8020934 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8020c26:	69fb      	ldr	r3, [r7, #28]
 8020c28:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020c2c:	f003 0310 	and.w	r3, r3, #16
 8020c30:	b2db      	uxtb	r3, r3
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	d00a      	beq.n	8020c4c <mg_mgr_poll+0x164>
 8020c36:	69fb      	ldr	r3, [r7, #28]
 8020c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020c3a:	2b00      	cmp	r3, #0
 8020c3c:	d106      	bne.n	8020c4c <mg_mgr_poll+0x164>
 8020c3e:	693b      	ldr	r3, [r7, #16]
 8020c40:	7f9b      	ldrb	r3, [r3, #30]
 8020c42:	2b04      	cmp	r3, #4
 8020c44:	d002      	beq.n	8020c4c <mg_mgr_poll+0x164>
      init_closure(c);
 8020c46:	69f8      	ldr	r0, [r7, #28]
 8020c48:	f7ff feb4 	bl	80209b4 <init_closure>
    if (c->is_closing) close_conn(c);
 8020c4c:	69fb      	ldr	r3, [r7, #28]
 8020c4e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020c52:	f003 0320 	and.w	r3, r3, #32
 8020c56:	b2db      	uxtb	r3, r3
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	d002      	beq.n	8020c62 <mg_mgr_poll+0x17a>
 8020c5c:	69f8      	ldr	r0, [r7, #28]
 8020c5e:	f7ff fefc 	bl	8020a5a <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8020c62:	697b      	ldr	r3, [r7, #20]
 8020c64:	61fb      	str	r3, [r7, #28]
 8020c66:	69fb      	ldr	r3, [r7, #28]
 8020c68:	2b00      	cmp	r3, #0
 8020c6a:	f47f af65 	bne.w	8020b38 <mg_mgr_poll+0x50>
 8020c6e:	e000      	b.n	8020c72 <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 8020c70:	bf00      	nop
  }
  (void) ms;
}
 8020c72:	3720      	adds	r7, #32
 8020c74:	46bd      	mov	sp, r7
 8020c76:	bdb0      	pop	{r4, r5, r7, pc}
 8020c78:	20000298 	.word	0x20000298
 8020c7c:	08033f88 	.word	0x08033f88
 8020c80:	080310b8 	.word	0x080310b8
 8020c84:	08032bc8 	.word	0x08032bc8

08020c88 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8020c88:	b5b0      	push	{r4, r5, r7, lr}
 8020c8a:	b08c      	sub	sp, #48	@ 0x30
 8020c8c:	af04      	add	r7, sp, #16
 8020c8e:	60f8      	str	r0, [r7, #12]
 8020c90:	60b9      	str	r1, [r7, #8]
 8020c92:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8020c94:	68fb      	ldr	r3, [r7, #12]
 8020c96:	685b      	ldr	r3, [r3, #4]
 8020c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020c9a:	61bb      	str	r3, [r7, #24]
  bool res = false;
 8020c9c:	2300      	movs	r3, #0
 8020c9e:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8020ca0:	68fb      	ldr	r3, [r7, #12]
 8020ca2:	331c      	adds	r3, #28
 8020ca4:	681b      	ldr	r3, [r3, #0]
 8020ca6:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8020ca8:	69bb      	ldr	r3, [r7, #24]
 8020caa:	689b      	ldr	r3, [r3, #8]
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	d004      	beq.n	8020cba <mg_send+0x32>
 8020cb0:	69bb      	ldr	r3, [r7, #24]
 8020cb2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020cb6:	2b03      	cmp	r3, #3
 8020cb8:	d004      	beq.n	8020cc4 <mg_send+0x3c>
    mg_error(c, "net down");
 8020cba:	4921      	ldr	r1, [pc, #132]	@ (8020d40 <mg_send+0xb8>)
 8020cbc:	68f8      	ldr	r0, [r7, #12]
 8020cbe:	f7f4 fcef 	bl	80156a0 <mg_error>
 8020cc2:	e037      	b.n	8020d34 <mg_send+0xac>
  } else if (c->is_udp) {
 8020cc4:	68fb      	ldr	r3, [r7, #12]
 8020cc6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020cca:	f003 0301 	and.w	r3, r3, #1
 8020cce:	b2db      	uxtb	r3, r3
 8020cd0:	2b00      	cmp	r3, #0
 8020cd2:	d020      	beq.n	8020d16 <mg_send+0x8e>
    struct connstate *s = (struct connstate *) (c + 1);
 8020cd4:	68fb      	ldr	r3, [r7, #12]
 8020cd6:	33b0      	adds	r3, #176	@ 0xb0
 8020cd8:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 8020cda:	6879      	ldr	r1, [r7, #4]
 8020cdc:	68f8      	ldr	r0, [r7, #12]
 8020cde:	f7fe faa1 	bl	801f224 <trim_len>
 8020ce2:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8020ce4:	697b      	ldr	r3, [r7, #20]
 8020ce6:	f103 0018 	add.w	r0, r3, #24
 8020cea:	69bb      	ldr	r3, [r7, #24]
 8020cec:	689c      	ldr	r4, [r3, #8]
 8020cee:	68fb      	ldr	r3, [r7, #12]
 8020cf0:	8b1d      	ldrh	r5, [r3, #24]
 8020cf2:	693b      	ldr	r3, [r7, #16]
 8020cf4:	68fa      	ldr	r2, [r7, #12]
 8020cf6:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8020cf8:	6879      	ldr	r1, [r7, #4]
 8020cfa:	9103      	str	r1, [sp, #12]
 8020cfc:	68b9      	ldr	r1, [r7, #8]
 8020cfe:	9102      	str	r1, [sp, #8]
 8020d00:	9201      	str	r2, [sp, #4]
 8020d02:	9300      	str	r3, [sp, #0]
 8020d04:	462b      	mov	r3, r5
 8020d06:	4622      	mov	r2, r4
 8020d08:	4601      	mov	r1, r0
 8020d0a:	69b8      	ldr	r0, [r7, #24]
 8020d0c:	f7fd f8c2 	bl	801de94 <tx_udp>
    res = true;
 8020d10:	2301      	movs	r3, #1
 8020d12:	77fb      	strb	r3, [r7, #31]
 8020d14:	e00e      	b.n	8020d34 <mg_send+0xac>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8020d16:	68fb      	ldr	r3, [r7, #12]
 8020d18:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8020d1c:	68fb      	ldr	r3, [r7, #12]
 8020d1e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8020d20:	687b      	ldr	r3, [r7, #4]
 8020d22:	68ba      	ldr	r2, [r7, #8]
 8020d24:	f7f9 f91e 	bl	8019f64 <mg_iobuf_add>
 8020d28:	4603      	mov	r3, r0
 8020d2a:	2b00      	cmp	r3, #0
 8020d2c:	bf14      	ite	ne
 8020d2e:	2301      	movne	r3, #1
 8020d30:	2300      	moveq	r3, #0
 8020d32:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 8020d34:	7ffb      	ldrb	r3, [r7, #31]
}
 8020d36:	4618      	mov	r0, r3
 8020d38:	3720      	adds	r7, #32
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8020d3e:	bf00      	nop
 8020d40:	08032bdc 	.word	0x08032bdc

08020d44 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b084      	sub	sp, #16
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	4603      	mov	r3, r0
 8020d4c:	6039      	str	r1, [r7, #0]
 8020d4e:	71fb      	strb	r3, [r7, #7]
 8020d50:	4613      	mov	r3, r2
 8020d52:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8020d54:	683b      	ldr	r3, [r7, #0]
 8020d56:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8020d58:	79bb      	ldrb	r3, [r7, #6]
 8020d5a:	2b00      	cmp	r3, #0
 8020d5c:	d00d      	beq.n	8020d7a <mg_pfn_iobuf_private+0x36>
 8020d5e:	68fb      	ldr	r3, [r7, #12]
 8020d60:	689b      	ldr	r3, [r3, #8]
 8020d62:	1c9a      	adds	r2, r3, #2
 8020d64:	68fb      	ldr	r3, [r7, #12]
 8020d66:	685b      	ldr	r3, [r3, #4]
 8020d68:	429a      	cmp	r2, r3
 8020d6a:	d906      	bls.n	8020d7a <mg_pfn_iobuf_private+0x36>
 8020d6c:	68fb      	ldr	r3, [r7, #12]
 8020d6e:	689b      	ldr	r3, [r3, #8]
 8020d70:	3302      	adds	r3, #2
 8020d72:	4619      	mov	r1, r3
 8020d74:	68f8      	ldr	r0, [r7, #12]
 8020d76:	f7f9 f869 	bl	8019e4c <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8020d7a:	68fb      	ldr	r3, [r7, #12]
 8020d7c:	689b      	ldr	r3, [r3, #8]
 8020d7e:	1c9a      	adds	r2, r3, #2
 8020d80:	68fb      	ldr	r3, [r7, #12]
 8020d82:	685b      	ldr	r3, [r3, #4]
 8020d84:	429a      	cmp	r2, r3
 8020d86:	d811      	bhi.n	8020dac <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8020d88:	68fb      	ldr	r3, [r7, #12]
 8020d8a:	681a      	ldr	r2, [r3, #0]
 8020d8c:	68fb      	ldr	r3, [r7, #12]
 8020d8e:	689b      	ldr	r3, [r3, #8]
 8020d90:	1c58      	adds	r0, r3, #1
 8020d92:	68f9      	ldr	r1, [r7, #12]
 8020d94:	6088      	str	r0, [r1, #8]
 8020d96:	4413      	add	r3, r2
 8020d98:	79fa      	ldrb	r2, [r7, #7]
 8020d9a:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8020d9c:	68fb      	ldr	r3, [r7, #12]
 8020d9e:	681a      	ldr	r2, [r3, #0]
 8020da0:	68fb      	ldr	r3, [r7, #12]
 8020da2:	689b      	ldr	r3, [r3, #8]
 8020da4:	4413      	add	r3, r2
 8020da6:	2200      	movs	r2, #0
 8020da8:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8020daa:	e00f      	b.n	8020dcc <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8020dac:	68fb      	ldr	r3, [r7, #12]
 8020dae:	689a      	ldr	r2, [r3, #8]
 8020db0:	68fb      	ldr	r3, [r7, #12]
 8020db2:	685b      	ldr	r3, [r3, #4]
 8020db4:	429a      	cmp	r2, r3
 8020db6:	d209      	bcs.n	8020dcc <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8020db8:	68fb      	ldr	r3, [r7, #12]
 8020dba:	681a      	ldr	r2, [r3, #0]
 8020dbc:	68fb      	ldr	r3, [r7, #12]
 8020dbe:	689b      	ldr	r3, [r3, #8]
 8020dc0:	1c58      	adds	r0, r3, #1
 8020dc2:	68f9      	ldr	r1, [r7, #12]
 8020dc4:	6088      	str	r0, [r1, #8]
 8020dc6:	4413      	add	r3, r2
 8020dc8:	2200      	movs	r2, #0
 8020dca:	701a      	strb	r2, [r3, #0]
}
 8020dcc:	bf00      	nop
 8020dce:	3710      	adds	r7, #16
 8020dd0:	46bd      	mov	sp, r7
 8020dd2:	bd80      	pop	{r7, pc}

08020dd4 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8020dd4:	b580      	push	{r7, lr}
 8020dd6:	b082      	sub	sp, #8
 8020dd8:	af00      	add	r7, sp, #0
 8020dda:	4603      	mov	r3, r0
 8020ddc:	6039      	str	r1, [r7, #0]
 8020dde:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8020de0:	79fb      	ldrb	r3, [r7, #7]
 8020de2:	2200      	movs	r2, #0
 8020de4:	6839      	ldr	r1, [r7, #0]
 8020de6:	4618      	mov	r0, r3
 8020de8:	f7ff ffac 	bl	8020d44 <mg_pfn_iobuf_private>
}
 8020dec:	bf00      	nop
 8020dee:	3708      	adds	r7, #8
 8020df0:	46bd      	mov	sp, r7
 8020df2:	bd80      	pop	{r7, pc}

08020df4 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8020df4:	b580      	push	{r7, lr}
 8020df6:	b082      	sub	sp, #8
 8020df8:	af00      	add	r7, sp, #0
 8020dfa:	4603      	mov	r3, r0
 8020dfc:	6039      	str	r1, [r7, #0]
 8020dfe:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8020e00:	79fb      	ldrb	r3, [r7, #7]
 8020e02:	2201      	movs	r2, #1
 8020e04:	6839      	ldr	r1, [r7, #0]
 8020e06:	4618      	mov	r0, r3
 8020e08:	f7ff ff9c 	bl	8020d44 <mg_pfn_iobuf_private>
}
 8020e0c:	bf00      	nop
 8020e0e:	3708      	adds	r7, #8
 8020e10:	46bd      	mov	sp, r7
 8020e12:	bd80      	pop	{r7, pc}

08020e14 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8020e14:	b580      	push	{r7, lr}
 8020e16:	b08a      	sub	sp, #40	@ 0x28
 8020e18:	af00      	add	r7, sp, #0
 8020e1a:	60f8      	str	r0, [r7, #12]
 8020e1c:	60b9      	str	r1, [r7, #8]
 8020e1e:	607a      	str	r2, [r7, #4]
 8020e20:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8020e22:	68fb      	ldr	r3, [r7, #12]
 8020e24:	617b      	str	r3, [r7, #20]
 8020e26:	68bb      	ldr	r3, [r7, #8]
 8020e28:	61bb      	str	r3, [r7, #24]
 8020e2a:	2300      	movs	r3, #0
 8020e2c:	61fb      	str	r3, [r7, #28]
 8020e2e:	2300      	movs	r3, #0
 8020e30:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8020e32:	f107 0114 	add.w	r1, r7, #20
 8020e36:	683b      	ldr	r3, [r7, #0]
 8020e38:	687a      	ldr	r2, [r7, #4]
 8020e3a:	4809      	ldr	r0, [pc, #36]	@ (8020e60 <mg_vsnprintf+0x4c>)
 8020e3c:	f7f5 f942 	bl	80160c4 <mg_vxprintf>
 8020e40:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 8020e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020e44:	68bb      	ldr	r3, [r7, #8]
 8020e46:	429a      	cmp	r2, r3
 8020e48:	d204      	bcs.n	8020e54 <mg_vsnprintf+0x40>
 8020e4a:	68fa      	ldr	r2, [r7, #12]
 8020e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e4e:	4413      	add	r3, r2
 8020e50:	2200      	movs	r2, #0
 8020e52:	701a      	strb	r2, [r3, #0]
  return n;
 8020e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8020e56:	4618      	mov	r0, r3
 8020e58:	3728      	adds	r7, #40	@ 0x28
 8020e5a:	46bd      	mov	sp, r7
 8020e5c:	bd80      	pop	{r7, pc}
 8020e5e:	bf00      	nop
 8020e60:	08020dd5 	.word	0x08020dd5

08020e64 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8020e64:	b40c      	push	{r2, r3}
 8020e66:	b580      	push	{r7, lr}
 8020e68:	b084      	sub	sp, #16
 8020e6a:	af00      	add	r7, sp, #0
 8020e6c:	6078      	str	r0, [r7, #4]
 8020e6e:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8020e70:	f107 031c 	add.w	r3, r7, #28
 8020e74:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8020e76:	f107 0308 	add.w	r3, r7, #8
 8020e7a:	69ba      	ldr	r2, [r7, #24]
 8020e7c:	6839      	ldr	r1, [r7, #0]
 8020e7e:	6878      	ldr	r0, [r7, #4]
 8020e80:	f7ff ffc8 	bl	8020e14 <mg_vsnprintf>
 8020e84:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8020e86:	68fb      	ldr	r3, [r7, #12]
}
 8020e88:	4618      	mov	r0, r3
 8020e8a:	3710      	adds	r7, #16
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020e92:	b002      	add	sp, #8
 8020e94:	4770      	bx	lr
	...

08020e98 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 8020e98:	b580      	push	{r7, lr}
 8020e9a:	b086      	sub	sp, #24
 8020e9c:	af00      	add	r7, sp, #0
 8020e9e:	6078      	str	r0, [r7, #4]
 8020ea0:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	60bb      	str	r3, [r7, #8]
 8020ea6:	2300      	movs	r3, #0
 8020ea8:	60fb      	str	r3, [r7, #12]
 8020eaa:	2300      	movs	r3, #0
 8020eac:	613b      	str	r3, [r7, #16]
 8020eae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020eb2:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8020eb4:	f107 0108 	add.w	r1, r7, #8
 8020eb8:	683b      	ldr	r3, [r7, #0]
 8020eba:	687a      	ldr	r2, [r7, #4]
 8020ebc:	4803      	ldr	r0, [pc, #12]	@ (8020ecc <mg_vmprintf+0x34>)
 8020ebe:	f7f5 f901 	bl	80160c4 <mg_vxprintf>
  return (char *) io.buf;
 8020ec2:	68bb      	ldr	r3, [r7, #8]
}
 8020ec4:	4618      	mov	r0, r3
 8020ec6:	3718      	adds	r7, #24
 8020ec8:	46bd      	mov	sp, r7
 8020eca:	bd80      	pop	{r7, pc}
 8020ecc:	08020df5 	.word	0x08020df5

08020ed0 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 8020ed0:	b40f      	push	{r0, r1, r2, r3}
 8020ed2:	b580      	push	{r7, lr}
 8020ed4:	b082      	sub	sp, #8
 8020ed6:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 8020ed8:	f107 0314 	add.w	r3, r7, #20
 8020edc:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 8020ede:	463b      	mov	r3, r7
 8020ee0:	4619      	mov	r1, r3
 8020ee2:	6938      	ldr	r0, [r7, #16]
 8020ee4:	f7ff ffd8 	bl	8020e98 <mg_vmprintf>
 8020ee8:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 8020eea:	687b      	ldr	r3, [r7, #4]
}
 8020eec:	4618      	mov	r0, r3
 8020eee:	3708      	adds	r7, #8
 8020ef0:	46bd      	mov	sp, r7
 8020ef2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020ef6:	b004      	add	sp, #16
 8020ef8:	4770      	bx	lr

08020efa <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 8020efa:	b580      	push	{r7, lr}
 8020efc:	b082      	sub	sp, #8
 8020efe:	af00      	add	r7, sp, #0
 8020f00:	4603      	mov	r3, r0
 8020f02:	6039      	str	r1, [r7, #0]
 8020f04:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8020f06:	79fb      	ldrb	r3, [r7, #7]
 8020f08:	4618      	mov	r0, r3
 8020f0a:	f004 fa73 	bl	80253f4 <putchar>
  (void) param;
}
 8020f0e:	bf00      	nop
 8020f10:	3708      	adds	r7, #8
 8020f12:	46bd      	mov	sp, r7
 8020f14:	bd80      	pop	{r7, pc}
	...

08020f18 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8020f18:	b580      	push	{r7, lr}
 8020f1a:	b088      	sub	sp, #32
 8020f1c:	af04      	add	r7, sp, #16
 8020f1e:	60f8      	str	r0, [r7, #12]
 8020f20:	60b9      	str	r1, [r7, #8]
 8020f22:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	781b      	ldrb	r3, [r3, #0]
 8020f28:	4618      	mov	r0, r3
 8020f2a:	687b      	ldr	r3, [r7, #4]
 8020f2c:	3301      	adds	r3, #1
 8020f2e:	781b      	ldrb	r3, [r3, #0]
 8020f30:	461a      	mov	r2, r3
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	3302      	adds	r3, #2
 8020f36:	781b      	ldrb	r3, [r3, #0]
 8020f38:	4619      	mov	r1, r3
 8020f3a:	687b      	ldr	r3, [r7, #4]
 8020f3c:	3303      	adds	r3, #3
 8020f3e:	781b      	ldrb	r3, [r3, #0]
 8020f40:	9302      	str	r3, [sp, #8]
 8020f42:	9101      	str	r1, [sp, #4]
 8020f44:	9200      	str	r2, [sp, #0]
 8020f46:	4603      	mov	r3, r0
 8020f48:	4a04      	ldr	r2, [pc, #16]	@ (8020f5c <print_ip4+0x44>)
 8020f4a:	68b9      	ldr	r1, [r7, #8]
 8020f4c:	68f8      	ldr	r0, [r7, #12]
 8020f4e:	f7f5 f89e 	bl	801608e <mg_xprintf>
 8020f52:	4603      	mov	r3, r0
}
 8020f54:	4618      	mov	r0, r3
 8020f56:	3710      	adds	r7, #16
 8020f58:	46bd      	mov	sp, r7
 8020f5a:	bd80      	pop	{r7, pc}
 8020f5c:	08032be8 	.word	0x08032be8

08020f60 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8020f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f64:	b08e      	sub	sp, #56	@ 0x38
 8020f66:	af08      	add	r7, sp, #32
 8020f68:	6178      	str	r0, [r7, #20]
 8020f6a:	6139      	str	r1, [r7, #16]
 8020f6c:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020f6e:	68fb      	ldr	r3, [r7, #12]
 8020f70:	881b      	ldrh	r3, [r3, #0]
 8020f72:	4618      	mov	r0, r3
 8020f74:	f001 fc01 	bl	802277a <mg_ntohs>
 8020f78:	4603      	mov	r3, r0
 8020f7a:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8020f7c:	68fb      	ldr	r3, [r7, #12]
 8020f7e:	3302      	adds	r3, #2
 8020f80:	881b      	ldrh	r3, [r3, #0]
 8020f82:	4618      	mov	r0, r3
 8020f84:	f001 fbf9 	bl	802277a <mg_ntohs>
 8020f88:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020f8a:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8020f8c:	68fb      	ldr	r3, [r7, #12]
 8020f8e:	3304      	adds	r3, #4
 8020f90:	881b      	ldrh	r3, [r3, #0]
 8020f92:	4618      	mov	r0, r3
 8020f94:	f001 fbf1 	bl	802277a <mg_ntohs>
 8020f98:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020f9a:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8020f9c:	68fb      	ldr	r3, [r7, #12]
 8020f9e:	3306      	adds	r3, #6
 8020fa0:	881b      	ldrh	r3, [r3, #0]
 8020fa2:	4618      	mov	r0, r3
 8020fa4:	f001 fbe9 	bl	802277a <mg_ntohs>
 8020fa8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020faa:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8020fac:	68fb      	ldr	r3, [r7, #12]
 8020fae:	3308      	adds	r3, #8
 8020fb0:	881b      	ldrh	r3, [r3, #0]
 8020fb2:	4618      	mov	r0, r3
 8020fb4:	f001 fbe1 	bl	802277a <mg_ntohs>
 8020fb8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020fba:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8020fbc:	68fb      	ldr	r3, [r7, #12]
 8020fbe:	330a      	adds	r3, #10
 8020fc0:	881b      	ldrh	r3, [r3, #0]
 8020fc2:	4618      	mov	r0, r3
 8020fc4:	f001 fbd9 	bl	802277a <mg_ntohs>
 8020fc8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020fca:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8020fcc:	68fb      	ldr	r3, [r7, #12]
 8020fce:	330c      	adds	r3, #12
 8020fd0:	881b      	ldrh	r3, [r3, #0]
 8020fd2:	4618      	mov	r0, r3
 8020fd4:	f001 fbd1 	bl	802277a <mg_ntohs>
 8020fd8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020fda:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8020fdc:	68fb      	ldr	r3, [r7, #12]
 8020fde:	330e      	adds	r3, #14
 8020fe0:	881b      	ldrh	r3, [r3, #0]
 8020fe2:	4618      	mov	r0, r3
 8020fe4:	f001 fbc9 	bl	802277a <mg_ntohs>
 8020fe8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020fea:	9306      	str	r3, [sp, #24]
 8020fec:	683a      	ldr	r2, [r7, #0]
 8020fee:	9205      	str	r2, [sp, #20]
 8020ff0:	687a      	ldr	r2, [r7, #4]
 8020ff2:	9204      	str	r2, [sp, #16]
 8020ff4:	68bb      	ldr	r3, [r7, #8]
 8020ff6:	9303      	str	r3, [sp, #12]
 8020ff8:	9602      	str	r6, [sp, #8]
 8020ffa:	9501      	str	r5, [sp, #4]
 8020ffc:	9400      	str	r4, [sp, #0]
 8020ffe:	4643      	mov	r3, r8
 8021000:	4a05      	ldr	r2, [pc, #20]	@ (8021018 <print_ip6+0xb8>)
 8021002:	6939      	ldr	r1, [r7, #16]
 8021004:	6978      	ldr	r0, [r7, #20]
 8021006:	f7f5 f842 	bl	801608e <mg_xprintf>
 802100a:	4603      	mov	r3, r0
}
 802100c:	4618      	mov	r0, r3
 802100e:	3718      	adds	r7, #24
 8021010:	46bd      	mov	sp, r7
 8021012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021016:	bf00      	nop
 8021018:	08032bf4 	.word	0x08032bf4

0802101c <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 802101c:	b580      	push	{r7, lr}
 802101e:	b086      	sub	sp, #24
 8021020:	af00      	add	r7, sp, #0
 8021022:	60f8      	str	r0, [r7, #12]
 8021024:	60b9      	str	r1, [r7, #8]
 8021026:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8021028:	687b      	ldr	r3, [r7, #4]
 802102a:	681b      	ldr	r3, [r3, #0]
 802102c:	1d19      	adds	r1, r3, #4
 802102e:	687a      	ldr	r2, [r7, #4]
 8021030:	6011      	str	r1, [r2, #0]
 8021032:	681b      	ldr	r3, [r3, #0]
 8021034:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8021036:	697a      	ldr	r2, [r7, #20]
 8021038:	68b9      	ldr	r1, [r7, #8]
 802103a:	68f8      	ldr	r0, [r7, #12]
 802103c:	f7ff ff6c 	bl	8020f18 <print_ip4>
 8021040:	4603      	mov	r3, r0
}
 8021042:	4618      	mov	r0, r3
 8021044:	3718      	adds	r7, #24
 8021046:	46bd      	mov	sp, r7
 8021048:	bd80      	pop	{r7, pc}

0802104a <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 802104a:	b580      	push	{r7, lr}
 802104c:	b086      	sub	sp, #24
 802104e:	af00      	add	r7, sp, #0
 8021050:	60f8      	str	r0, [r7, #12]
 8021052:	60b9      	str	r1, [r7, #8]
 8021054:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8021056:	687b      	ldr	r3, [r7, #4]
 8021058:	681b      	ldr	r3, [r3, #0]
 802105a:	1d19      	adds	r1, r3, #4
 802105c:	687a      	ldr	r2, [r7, #4]
 802105e:	6011      	str	r1, [r2, #0]
 8021060:	681b      	ldr	r3, [r3, #0]
 8021062:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8021064:	697b      	ldr	r3, [r7, #20]
 8021066:	7cdb      	ldrb	r3, [r3, #19]
 8021068:	2b00      	cmp	r3, #0
 802106a:	d007      	beq.n	802107c <mg_print_ip+0x32>
 802106c:	697b      	ldr	r3, [r7, #20]
 802106e:	461a      	mov	r2, r3
 8021070:	68b9      	ldr	r1, [r7, #8]
 8021072:	68f8      	ldr	r0, [r7, #12]
 8021074:	f7ff ff74 	bl	8020f60 <print_ip6>
 8021078:	4603      	mov	r3, r0
 802107a:	e006      	b.n	802108a <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 802107c:	697b      	ldr	r3, [r7, #20]
 802107e:	461a      	mov	r2, r3
 8021080:	68b9      	ldr	r1, [r7, #8]
 8021082:	68f8      	ldr	r0, [r7, #12]
 8021084:	f7ff ff48 	bl	8020f18 <print_ip4>
 8021088:	4603      	mov	r3, r0
}
 802108a:	4618      	mov	r0, r3
 802108c:	3718      	adds	r7, #24
 802108e:	46bd      	mov	sp, r7
 8021090:	bd80      	pop	{r7, pc}
	...

08021094 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8021094:	b580      	push	{r7, lr}
 8021096:	b088      	sub	sp, #32
 8021098:	af02      	add	r7, sp, #8
 802109a:	60f8      	str	r0, [r7, #12]
 802109c:	60b9      	str	r1, [r7, #8]
 802109e:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	1d19      	adds	r1, r3, #4
 80210a6:	687a      	ldr	r2, [r7, #4]
 80210a8:	6011      	str	r1, [r2, #0]
 80210aa:	681b      	ldr	r3, [r3, #0]
 80210ac:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 80210ae:	697b      	ldr	r3, [r7, #20]
 80210b0:	8a1b      	ldrh	r3, [r3, #16]
 80210b2:	4618      	mov	r0, r3
 80210b4:	f001 fb61 	bl	802277a <mg_ntohs>
 80210b8:	4603      	mov	r3, r0
 80210ba:	9301      	str	r3, [sp, #4]
 80210bc:	697b      	ldr	r3, [r7, #20]
 80210be:	9300      	str	r3, [sp, #0]
 80210c0:	4b05      	ldr	r3, [pc, #20]	@ (80210d8 <mg_print_ip_port+0x44>)
 80210c2:	4a06      	ldr	r2, [pc, #24]	@ (80210dc <mg_print_ip_port+0x48>)
 80210c4:	68b9      	ldr	r1, [r7, #8]
 80210c6:	68f8      	ldr	r0, [r7, #12]
 80210c8:	f7f4 ffe1 	bl	801608e <mg_xprintf>
 80210cc:	4603      	mov	r3, r0
}
 80210ce:	4618      	mov	r0, r3
 80210d0:	3718      	adds	r7, #24
 80210d2:	46bd      	mov	sp, r7
 80210d4:	bd80      	pop	{r7, pc}
 80210d6:	bf00      	nop
 80210d8:	0802104b 	.word	0x0802104b
 80210dc:	08032c10 	.word	0x08032c10

080210e0 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 80210e0:	b5b0      	push	{r4, r5, r7, lr}
 80210e2:	b08c      	sub	sp, #48	@ 0x30
 80210e4:	af06      	add	r7, sp, #24
 80210e6:	60f8      	str	r0, [r7, #12]
 80210e8:	60b9      	str	r1, [r7, #8]
 80210ea:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80210ec:	687b      	ldr	r3, [r7, #4]
 80210ee:	681b      	ldr	r3, [r3, #0]
 80210f0:	1d19      	adds	r1, r3, #4
 80210f2:	687a      	ldr	r2, [r7, #4]
 80210f4:	6011      	str	r1, [r2, #0]
 80210f6:	681b      	ldr	r3, [r3, #0]
 80210f8:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80210fa:	697b      	ldr	r3, [r7, #20]
 80210fc:	781b      	ldrb	r3, [r3, #0]
 80210fe:	461d      	mov	r5, r3
 8021100:	697b      	ldr	r3, [r7, #20]
 8021102:	3301      	adds	r3, #1
 8021104:	781b      	ldrb	r3, [r3, #0]
 8021106:	461a      	mov	r2, r3
 8021108:	697b      	ldr	r3, [r7, #20]
 802110a:	3302      	adds	r3, #2
 802110c:	781b      	ldrb	r3, [r3, #0]
 802110e:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8021110:	697b      	ldr	r3, [r7, #20]
 8021112:	3303      	adds	r3, #3
 8021114:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8021116:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8021118:	697b      	ldr	r3, [r7, #20]
 802111a:	3304      	adds	r3, #4
 802111c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 802111e:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8021120:	697b      	ldr	r3, [r7, #20]
 8021122:	3305      	adds	r3, #5
 8021124:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8021126:	9304      	str	r3, [sp, #16]
 8021128:	9403      	str	r4, [sp, #12]
 802112a:	9002      	str	r0, [sp, #8]
 802112c:	9101      	str	r1, [sp, #4]
 802112e:	9200      	str	r2, [sp, #0]
 8021130:	462b      	mov	r3, r5
 8021132:	4a05      	ldr	r2, [pc, #20]	@ (8021148 <mg_print_mac+0x68>)
 8021134:	68b9      	ldr	r1, [r7, #8]
 8021136:	68f8      	ldr	r0, [r7, #12]
 8021138:	f7f4 ffa9 	bl	801608e <mg_xprintf>
 802113c:	4603      	mov	r3, r0
}
 802113e:	4618      	mov	r0, r3
 8021140:	3718      	adds	r7, #24
 8021142:	46bd      	mov	sp, r7
 8021144:	bdb0      	pop	{r4, r5, r7, pc}
 8021146:	bf00      	nop
 8021148:	08032c18 	.word	0x08032c18

0802114c <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 802114c:	b580      	push	{r7, lr}
 802114e:	b088      	sub	sp, #32
 8021150:	af00      	add	r7, sp, #0
 8021152:	60f8      	str	r0, [r7, #12]
 8021154:	60b9      	str	r1, [r7, #8]
 8021156:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	681b      	ldr	r3, [r3, #0]
 802115c:	1d19      	adds	r1, r3, #4
 802115e:	687a      	ldr	r2, [r7, #4]
 8021160:	6011      	str	r1, [r2, #0]
 8021162:	681b      	ldr	r3, [r3, #0]
 8021164:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8021166:	687b      	ldr	r3, [r7, #4]
 8021168:	681b      	ldr	r3, [r3, #0]
 802116a:	1d19      	adds	r1, r3, #4
 802116c:	687a      	ldr	r2, [r7, #4]
 802116e:	6011      	str	r1, [r2, #0]
 8021170:	681b      	ldr	r3, [r3, #0]
 8021172:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 8021174:	4b16      	ldr	r3, [pc, #88]	@ (80211d0 <mg_print_hex+0x84>)
 8021176:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 8021178:	2300      	movs	r3, #0
 802117a:	61fb      	str	r3, [r7, #28]
 802117c:	e01e      	b.n	80211bc <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 802117e:	697a      	ldr	r2, [r7, #20]
 8021180:	69fb      	ldr	r3, [r7, #28]
 8021182:	4413      	add	r3, r2
 8021184:	781b      	ldrb	r3, [r3, #0]
 8021186:	091b      	lsrs	r3, r3, #4
 8021188:	b2db      	uxtb	r3, r3
 802118a:	f003 030f 	and.w	r3, r3, #15
 802118e:	693a      	ldr	r2, [r7, #16]
 8021190:	4413      	add	r3, r2
 8021192:	781a      	ldrb	r2, [r3, #0]
 8021194:	68fb      	ldr	r3, [r7, #12]
 8021196:	68b9      	ldr	r1, [r7, #8]
 8021198:	4610      	mov	r0, r2
 802119a:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 802119c:	697a      	ldr	r2, [r7, #20]
 802119e:	69fb      	ldr	r3, [r7, #28]
 80211a0:	4413      	add	r3, r2
 80211a2:	781b      	ldrb	r3, [r3, #0]
 80211a4:	f003 030f 	and.w	r3, r3, #15
 80211a8:	693a      	ldr	r2, [r7, #16]
 80211aa:	4413      	add	r3, r2
 80211ac:	781a      	ldrb	r2, [r3, #0]
 80211ae:	68fb      	ldr	r3, [r7, #12]
 80211b0:	68b9      	ldr	r1, [r7, #8]
 80211b2:	4610      	mov	r0, r2
 80211b4:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 80211b6:	69fb      	ldr	r3, [r7, #28]
 80211b8:	3301      	adds	r3, #1
 80211ba:	61fb      	str	r3, [r7, #28]
 80211bc:	69fa      	ldr	r2, [r7, #28]
 80211be:	69bb      	ldr	r3, [r7, #24]
 80211c0:	429a      	cmp	r2, r3
 80211c2:	d3dc      	bcc.n	802117e <mg_print_hex+0x32>
  }
  return 2 * bl;
 80211c4:	69bb      	ldr	r3, [r7, #24]
 80211c6:	005b      	lsls	r3, r3, #1
}
 80211c8:	4618      	mov	r0, r3
 80211ca:	3720      	adds	r7, #32
 80211cc:	46bd      	mov	sp, r7
 80211ce:	bd80      	pop	{r7, pc}
 80211d0:	08031240 	.word	0x08031240

080211d4 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 80211d4:	b480      	push	{r7}
 80211d6:	b085      	sub	sp, #20
 80211d8:	af00      	add	r7, sp, #0
 80211da:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 80211dc:	2300      	movs	r3, #0
 80211de:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 80211e0:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	681a      	ldr	r2, [r3, #0]
 80211e8:	687b      	ldr	r3, [r7, #4]
 80211ea:	689b      	ldr	r3, [r3, #8]
 80211ec:	4413      	add	r3, r2
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
  return n;
 80211f2:	68fb      	ldr	r3, [r7, #12]
}
 80211f4:	4618      	mov	r0, r3
 80211f6:	3714      	adds	r7, #20
 80211f8:	46bd      	mov	sp, r7
 80211fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211fe:	4770      	bx	lr

08021200 <mg_queue_next>:
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
  return space;
}

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8021200:	b580      	push	{r7, lr}
 8021202:	b084      	sub	sp, #16
 8021204:	af00      	add	r7, sp, #0
 8021206:	6078      	str	r0, [r7, #4]
 8021208:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 802120a:	2300      	movs	r3, #0
 802120c:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 802120e:	687b      	ldr	r3, [r7, #4]
 8021210:	689a      	ldr	r2, [r3, #8]
 8021212:	687b      	ldr	r3, [r7, #4]
 8021214:	68db      	ldr	r3, [r3, #12]
 8021216:	429a      	cmp	r2, r3
 8021218:	d013      	beq.n	8021242 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 802121a:	6878      	ldr	r0, [r7, #4]
 802121c:	f7ff ffda 	bl	80211d4 <mg_queue_read_len>
 8021220:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8021222:	68fb      	ldr	r3, [r7, #12]
 8021224:	2b00      	cmp	r3, #0
 8021226:	d10c      	bne.n	8021242 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	2200      	movs	r2, #0
 802122c:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	68da      	ldr	r2, [r3, #12]
 8021232:	687b      	ldr	r3, [r7, #4]
 8021234:	689b      	ldr	r3, [r3, #8]
 8021236:	429a      	cmp	r2, r3
 8021238:	d903      	bls.n	8021242 <mg_queue_next+0x42>
 802123a:	6878      	ldr	r0, [r7, #4]
 802123c:	f7ff ffca 	bl	80211d4 <mg_queue_read_len>
 8021240:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8021242:	683b      	ldr	r3, [r7, #0]
 8021244:	2b00      	cmp	r3, #0
 8021246:	d007      	beq.n	8021258 <mg_queue_next+0x58>
 8021248:	687b      	ldr	r3, [r7, #4]
 802124a:	681a      	ldr	r2, [r3, #0]
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	689b      	ldr	r3, [r3, #8]
 8021250:	3304      	adds	r3, #4
 8021252:	441a      	add	r2, r3
 8021254:	683b      	ldr	r3, [r7, #0]
 8021256:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
  return len;
 8021258:	68fb      	ldr	r3, [r7, #12]
}
 802125a:	4618      	mov	r0, r3
 802125c:	3710      	adds	r7, #16
 802125e:	46bd      	mov	sp, r7
 8021260:	bd80      	pop	{r7, pc}

08021262 <mg_queue_del>:
  mg_queue_write_len(q, len);
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
  q->head += len + sizeof(uint32_t);
}

void mg_queue_del(struct mg_queue *q, size_t len) {
 8021262:	b480      	push	{r7}
 8021264:	b083      	sub	sp, #12
 8021266:	af00      	add	r7, sp, #0
 8021268:	6078      	str	r0, [r7, #4]
 802126a:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	689a      	ldr	r2, [r3, #8]
 8021270:	683b      	ldr	r3, [r7, #0]
 8021272:	4413      	add	r3, r2
 8021274:	1d1a      	adds	r2, r3, #4
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
}
 802127a:	bf00      	nop
 802127c:	370c      	adds	r7, #12
 802127e:	46bd      	mov	sp, r7
 8021280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021284:	4770      	bx	lr
	...

08021288 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 8021288:	b5b0      	push	{r4, r5, r7, lr}
 802128a:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 802128c:	f001 fb06 	bl	802289c <mg_millis>
 8021290:	4b05      	ldr	r3, [pc, #20]	@ (80212a8 <mg_now+0x20>)
 8021292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021296:	1884      	adds	r4, r0, r2
 8021298:	eb41 0503 	adc.w	r5, r1, r3
 802129c:	4622      	mov	r2, r4
 802129e:	462b      	mov	r3, r5
}
 80212a0:	4610      	mov	r0, r2
 80212a2:	4619      	mov	r1, r3
 80212a4:	bdb0      	pop	{r4, r5, r7, pc}
 80212a6:	bf00      	nop
 80212a8:	20018158 	.word	0x20018158
 80212ac:	00000000 	.word	0x00000000

080212b0 <gettimestamp>:

static int64_t gettimestamp(const uint32_t *data) {
 80212b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80212b4:	b086      	sub	sp, #24
 80212b6:	af00      	add	r7, sp, #0
 80212b8:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 80212ba:	68fb      	ldr	r3, [r7, #12]
 80212bc:	681b      	ldr	r3, [r3, #0]
 80212be:	4618      	mov	r0, r3
 80212c0:	f001 fa42 	bl	8022748 <mg_ntohl>
 80212c4:	6178      	str	r0, [r7, #20]
 80212c6:	68fb      	ldr	r3, [r7, #12]
 80212c8:	3304      	adds	r3, #4
 80212ca:	681b      	ldr	r3, [r3, #0]
 80212cc:	4618      	mov	r0, r3
 80212ce:	f001 fa3b 	bl	8022748 <mg_ntohl>
 80212d2:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 80212d4:	697b      	ldr	r3, [r7, #20]
 80212d6:	2b00      	cmp	r3, #0
 80212d8:	d003      	beq.n	80212e2 <gettimestamp+0x32>
 80212da:	697a      	ldr	r2, [r7, #20]
 80212dc:	4b2e      	ldr	r3, [pc, #184]	@ (8021398 <gettimestamp+0xe8>)
 80212de:	4413      	add	r3, r2
 80212e0:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 80212e2:	697b      	ldr	r3, [r7, #20]
 80212e4:	2200      	movs	r2, #0
 80212e6:	4698      	mov	r8, r3
 80212e8:	4691      	mov	r9, r2
 80212ea:	4642      	mov	r2, r8
 80212ec:	464b      	mov	r3, r9
 80212ee:	f04f 0000 	mov.w	r0, #0
 80212f2:	f04f 0100 	mov.w	r1, #0
 80212f6:	0159      	lsls	r1, r3, #5
 80212f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80212fc:	0150      	lsls	r0, r2, #5
 80212fe:	4602      	mov	r2, r0
 8021300:	460b      	mov	r3, r1
 8021302:	ebb2 0408 	subs.w	r4, r2, r8
 8021306:	eb63 0509 	sbc.w	r5, r3, r9
 802130a:	f04f 0200 	mov.w	r2, #0
 802130e:	f04f 0300 	mov.w	r3, #0
 8021312:	00ab      	lsls	r3, r5, #2
 8021314:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8021318:	00a2      	lsls	r2, r4, #2
 802131a:	4614      	mov	r4, r2
 802131c:	461d      	mov	r5, r3
 802131e:	eb14 0a08 	adds.w	sl, r4, r8
 8021322:	eb45 0b09 	adc.w	fp, r5, r9
 8021326:	f04f 0200 	mov.w	r2, #0
 802132a:	f04f 0300 	mov.w	r3, #0
 802132e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8021332:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8021336:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802133a:	4692      	mov	sl, r2
 802133c:	469b      	mov	fp, r3
 802133e:	4654      	mov	r4, sl
 8021340:	465d      	mov	r5, fp
 8021342:	6938      	ldr	r0, [r7, #16]
 8021344:	f7df f8f6 	bl	8000534 <__aeabi_ui2d>
 8021348:	a311      	add	r3, pc, #68	@ (adr r3, 8021390 <gettimestamp+0xe0>)
 802134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802134e:	f7df fa95 	bl	800087c <__aeabi_ddiv>
 8021352:	4602      	mov	r2, r0
 8021354:	460b      	mov	r3, r1
 8021356:	4610      	mov	r0, r2
 8021358:	4619      	mov	r1, r3
 802135a:	f04f 0200 	mov.w	r2, #0
 802135e:	4b0f      	ldr	r3, [pc, #60]	@ (802139c <gettimestamp+0xec>)
 8021360:	f7df f962 	bl	8000628 <__aeabi_dmul>
 8021364:	4602      	mov	r2, r0
 8021366:	460b      	mov	r3, r1
 8021368:	4610      	mov	r0, r2
 802136a:	4619      	mov	r1, r3
 802136c:	f7df fd20 	bl	8000db0 <__aeabi_d2lz>
 8021370:	4602      	mov	r2, r0
 8021372:	460b      	mov	r3, r1
 8021374:	18a1      	adds	r1, r4, r2
 8021376:	6039      	str	r1, [r7, #0]
 8021378:	eb45 0303 	adc.w	r3, r5, r3
 802137c:	607b      	str	r3, [r7, #4]
 802137e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8021382:	4610      	mov	r0, r2
 8021384:	4619      	mov	r1, r3
 8021386:	3718      	adds	r7, #24
 8021388:	46bd      	mov	sp, r7
 802138a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802138e:	bf00      	nop
 8021390:	ffe00000 	.word	0xffe00000
 8021394:	41efffff 	.word	0x41efffff
 8021398:	7c558180 	.word	0x7c558180
 802139c:	408f4000 	.word	0x408f4000

080213a0 <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 80213a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80213a4:	b098      	sub	sp, #96	@ 0x60
 80213a6:	af00      	add	r7, sp, #0
 80213a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80213aa:	6239      	str	r1, [r7, #32]
  int64_t epoch_milliseconds = -1;
 80213ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80213b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80213b4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  int mode = len > 0 ? buf[0] & 7 : 0;
 80213b8:	6a3b      	ldr	r3, [r7, #32]
 80213ba:	2b00      	cmp	r3, #0
 80213bc:	d004      	beq.n	80213c8 <mg_sntp_parse+0x28>
 80213be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213c0:	781b      	ldrb	r3, [r3, #0]
 80213c2:	f003 0307 	and.w	r3, r3, #7
 80213c6:	e000      	b.n	80213ca <mg_sntp_parse+0x2a>
 80213c8:	2300      	movs	r3, #0
 80213ca:	657b      	str	r3, [r7, #84]	@ 0x54
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 80213cc:	6a3b      	ldr	r3, [r7, #32]
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	d006      	beq.n	80213e0 <mg_sntp_parse+0x40>
 80213d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213d4:	781b      	ldrb	r3, [r3, #0]
 80213d6:	08db      	lsrs	r3, r3, #3
 80213d8:	b2db      	uxtb	r3, r3
 80213da:	f003 0307 	and.w	r3, r3, #7
 80213de:	e000      	b.n	80213e2 <mg_sntp_parse+0x42>
 80213e0:	2300      	movs	r3, #0
 80213e2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (len < 48) {
 80213e4:	6a3b      	ldr	r3, [r7, #32]
 80213e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80213e8:	d810      	bhi.n	802140c <mg_sntp_parse+0x6c>
    MG_ERROR(("%s", "corrupt packet"));
 80213ea:	4b60      	ldr	r3, [pc, #384]	@ (802156c <mg_sntp_parse+0x1cc>)
 80213ec:	681b      	ldr	r3, [r3, #0]
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	f340 80b4 	ble.w	802155c <mg_sntp_parse+0x1bc>
 80213f4:	4b5e      	ldr	r3, [pc, #376]	@ (8021570 <mg_sntp_parse+0x1d0>)
 80213f6:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 80213fa:	495e      	ldr	r1, [pc, #376]	@ (8021574 <mg_sntp_parse+0x1d4>)
 80213fc:	2001      	movs	r0, #1
 80213fe:	f7f9 fd15 	bl	801ae2c <mg_log_prefix>
 8021402:	495d      	ldr	r1, [pc, #372]	@ (8021578 <mg_sntp_parse+0x1d8>)
 8021404:	485d      	ldr	r0, [pc, #372]	@ (802157c <mg_sntp_parse+0x1dc>)
 8021406:	f7f9 fd61 	bl	801aecc <mg_log>
 802140a:	e0a7      	b.n	802155c <mg_sntp_parse+0x1bc>
  } else if (mode != 4 && mode != 5) {
 802140c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802140e:	2b04      	cmp	r3, #4
 8021410:	d013      	beq.n	802143a <mg_sntp_parse+0x9a>
 8021412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021414:	2b05      	cmp	r3, #5
 8021416:	d010      	beq.n	802143a <mg_sntp_parse+0x9a>
    MG_ERROR(("%s", "not a server reply"));
 8021418:	4b54      	ldr	r3, [pc, #336]	@ (802156c <mg_sntp_parse+0x1cc>)
 802141a:	681b      	ldr	r3, [r3, #0]
 802141c:	2b00      	cmp	r3, #0
 802141e:	f340 809d 	ble.w	802155c <mg_sntp_parse+0x1bc>
 8021422:	4b53      	ldr	r3, [pc, #332]	@ (8021570 <mg_sntp_parse+0x1d0>)
 8021424:	f641 4210 	movw	r2, #7184	@ 0x1c10
 8021428:	4952      	ldr	r1, [pc, #328]	@ (8021574 <mg_sntp_parse+0x1d4>)
 802142a:	2001      	movs	r0, #1
 802142c:	f7f9 fcfe 	bl	801ae2c <mg_log_prefix>
 8021430:	4953      	ldr	r1, [pc, #332]	@ (8021580 <mg_sntp_parse+0x1e0>)
 8021432:	4852      	ldr	r0, [pc, #328]	@ (802157c <mg_sntp_parse+0x1dc>)
 8021434:	f7f9 fd4a 	bl	801aecc <mg_log>
 8021438:	e090      	b.n	802155c <mg_sntp_parse+0x1bc>
  } else if (buf[1] == 0) {
 802143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802143c:	3301      	adds	r3, #1
 802143e:	781b      	ldrb	r3, [r3, #0]
 8021440:	2b00      	cmp	r3, #0
 8021442:	d110      	bne.n	8021466 <mg_sntp_parse+0xc6>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8021444:	4b49      	ldr	r3, [pc, #292]	@ (802156c <mg_sntp_parse+0x1cc>)
 8021446:	681b      	ldr	r3, [r3, #0]
 8021448:	2b00      	cmp	r3, #0
 802144a:	f340 8087 	ble.w	802155c <mg_sntp_parse+0x1bc>
 802144e:	4b48      	ldr	r3, [pc, #288]	@ (8021570 <mg_sntp_parse+0x1d0>)
 8021450:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8021454:	4947      	ldr	r1, [pc, #284]	@ (8021574 <mg_sntp_parse+0x1d4>)
 8021456:	2001      	movs	r0, #1
 8021458:	f7f9 fce8 	bl	801ae2c <mg_log_prefix>
 802145c:	4949      	ldr	r1, [pc, #292]	@ (8021584 <mg_sntp_parse+0x1e4>)
 802145e:	4847      	ldr	r0, [pc, #284]	@ (802157c <mg_sntp_parse+0x1dc>)
 8021460:	f7f9 fd34 	bl	801aecc <mg_log>
 8021464:	e07a      	b.n	802155c <mg_sntp_parse+0x1bc>
  } else if (version == 4 || version == 3) {
 8021466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021468:	2b04      	cmp	r3, #4
 802146a:	d002      	beq.n	8021472 <mg_sntp_parse+0xd2>
 802146c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802146e:	2b03      	cmp	r3, #3
 8021470:	d165      	bne.n	802153e <mg_sntp_parse+0x19e>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8021472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021474:	3318      	adds	r3, #24
 8021476:	4618      	mov	r0, r3
 8021478:	f7ff ff1a 	bl	80212b0 <gettimestamp>
 802147c:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8021480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021482:	3320      	adds	r3, #32
 8021484:	4618      	mov	r0, r3
 8021486:	f7ff ff13 	bl	80212b0 <gettimestamp>
 802148a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 802148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021490:	3328      	adds	r3, #40	@ 0x28
 8021492:	4618      	mov	r0, r3
 8021494:	f7ff ff0c 	bl	80212b0 <gettimestamp>
 8021498:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    int64_t now = (int64_t) mg_millis();
 802149c:	f001 f9fe 	bl	802289c <mg_millis>
 80214a0:	4602      	mov	r2, r0
 80214a2:	460b      	mov	r3, r1
 80214a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 80214a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80214ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80214b0:	ebb0 0a02 	subs.w	sl, r0, r2
 80214b4:	eb61 0b03 	sbc.w	fp, r1, r3
 80214b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80214bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80214c0:	ebb0 0802 	subs.w	r8, r0, r2
 80214c4:	eb61 0903 	sbc.w	r9, r1, r3
 80214c8:	ebba 0308 	subs.w	r3, sl, r8
 80214cc:	613b      	str	r3, [r7, #16]
 80214ce:	eb6b 0309 	sbc.w	r3, fp, r9
 80214d2:	617b      	str	r3, [r7, #20]
 80214d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80214d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    epoch_milliseconds = transmit_time + latency / 2;
 80214dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80214e0:	0fd9      	lsrs	r1, r3, #31
 80214e2:	2000      	movs	r0, #0
 80214e4:	60b9      	str	r1, [r7, #8]
 80214e6:	60f8      	str	r0, [r7, #12]
 80214e8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80214ec:	4641      	mov	r1, r8
 80214ee:	188c      	adds	r4, r1, r2
 80214f0:	4649      	mov	r1, r9
 80214f2:	eb43 0101 	adc.w	r1, r3, r1
 80214f6:	460d      	mov	r5, r1
 80214f8:	f04f 0200 	mov.w	r2, #0
 80214fc:	f04f 0300 	mov.w	r3, #0
 8021500:	0862      	lsrs	r2, r4, #1
 8021502:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8021506:	106b      	asrs	r3, r5, #1
 8021508:	4610      	mov	r0, r2
 802150a:	4619      	mov	r1, r3
 802150c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8021510:	1814      	adds	r4, r2, r0
 8021512:	603c      	str	r4, [r7, #0]
 8021514:	414b      	adcs	r3, r1
 8021516:	607b      	str	r3, [r7, #4]
 8021518:	e9d7 3400 	ldrd	r3, r4, [r7]
 802151c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8021520:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8021524:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8021528:	1a84      	subs	r4, r0, r2
 802152a:	61bc      	str	r4, [r7, #24]
 802152c:	eb61 0303 	sbc.w	r3, r1, r3
 8021530:	61fb      	str	r3, [r7, #28]
 8021532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021536:	4914      	ldr	r1, [pc, #80]	@ (8021588 <mg_sntp_parse+0x1e8>)
 8021538:	e9c1 2300 	strd	r2, r3, [r1]
  } else if (version == 4 || version == 3) {
 802153c:	e00e      	b.n	802155c <mg_sntp_parse+0x1bc>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 802153e:	4b0b      	ldr	r3, [pc, #44]	@ (802156c <mg_sntp_parse+0x1cc>)
 8021540:	681b      	ldr	r3, [r3, #0]
 8021542:	2b00      	cmp	r3, #0
 8021544:	dd0a      	ble.n	802155c <mg_sntp_parse+0x1bc>
 8021546:	4b0a      	ldr	r3, [pc, #40]	@ (8021570 <mg_sntp_parse+0x1d0>)
 8021548:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 802154c:	4909      	ldr	r1, [pc, #36]	@ (8021574 <mg_sntp_parse+0x1d4>)
 802154e:	2001      	movs	r0, #1
 8021550:	f7f9 fc6c 	bl	801ae2c <mg_log_prefix>
 8021554:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8021556:	480d      	ldr	r0, [pc, #52]	@ (802158c <mg_sntp_parse+0x1ec>)
 8021558:	f7f9 fcb8 	bl	801aecc <mg_log>
  }
  return epoch_milliseconds;
 802155c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
}
 8021560:	4610      	mov	r0, r2
 8021562:	4619      	mov	r1, r3
 8021564:	3760      	adds	r7, #96	@ 0x60
 8021566:	46bd      	mov	sp, r7
 8021568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802156c:	20000298 	.word	0x20000298
 8021570:	08033f94 	.word	0x08033f94
 8021574:	080310b8 	.word	0x080310b8
 8021578:	08032d2c 	.word	0x08032d2c
 802157c:	08031224 	.word	0x08031224
 8021580:	08032d3c 	.word	0x08032d3c
 8021584:	08032d50 	.word	0x08032d50
 8021588:	20018158 	.word	0x20018158
 802158c:	08032d6c 	.word	0x08032d6c

08021590 <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 8021590:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8021594:	b088      	sub	sp, #32
 8021596:	af00      	add	r7, sp, #0
 8021598:	60f8      	str	r0, [r7, #12]
 802159a:	60b9      	str	r1, [r7, #8]
 802159c:	607a      	str	r2, [r7, #4]
  uint64_t *expiration_time = (uint64_t *) c->data;
 802159e:	68fb      	ldr	r3, [r7, #12]
 80215a0:	3388      	adds	r3, #136	@ 0x88
 80215a2:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 80215a4:	68bb      	ldr	r3, [r7, #8]
 80215a6:	2b01      	cmp	r3, #1
 80215a8:	d10c      	bne.n	80215c4 <sntp_cb+0x34>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 80215aa:	f001 f977 	bl	802289c <mg_millis>
 80215ae:	4602      	mov	r2, r0
 80215b0:	460b      	mov	r3, r1
 80215b2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80215b6:	1854      	adds	r4, r2, r1
 80215b8:	f143 0500 	adc.w	r5, r3, #0
 80215bc:	69fb      	ldr	r3, [r7, #28]
 80215be:	e9c3 4500 	strd	r4, r5, [r3]
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) ev_data;
}
 80215c2:	e05d      	b.n	8021680 <sntp_cb+0xf0>
  } else if (ev == MG_EV_CONNECT) {
 80215c4:	68bb      	ldr	r3, [r7, #8]
 80215c6:	2b04      	cmp	r3, #4
 80215c8:	d103      	bne.n	80215d2 <sntp_cb+0x42>
    mg_sntp_request(c);
 80215ca:	68f8      	ldr	r0, [r7, #12]
 80215cc:	f000 f868 	bl	80216a0 <mg_sntp_request>
}
 80215d0:	e056      	b.n	8021680 <sntp_cb+0xf0>
  } else if (ev == MG_EV_READ) {
 80215d2:	68bb      	ldr	r3, [r7, #8]
 80215d4:	2b07      	cmp	r3, #7
 80215d6:	d141      	bne.n	802165c <sntp_cb+0xcc>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 80215d8:	68fb      	ldr	r3, [r7, #12]
 80215da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80215dc:	68fb      	ldr	r3, [r7, #12]
 80215de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80215e0:	4619      	mov	r1, r3
 80215e2:	4610      	mov	r0, r2
 80215e4:	f7ff fedc 	bl	80213a0 <mg_sntp_parse>
 80215e8:	4602      	mov	r2, r0
 80215ea:	460b      	mov	r3, r1
 80215ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 80215f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80215f4:	2a01      	cmp	r2, #1
 80215f6:	f173 0300 	sbcs.w	r3, r3, #0
 80215fa:	db27      	blt.n	802164c <sntp_cb+0xbc>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 80215fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021600:	4614      	mov	r4, r2
 8021602:	461d      	mov	r5, r3
 8021604:	f001 f94a 	bl	802289c <mg_millis>
 8021608:	4602      	mov	r2, r0
 802160a:	460b      	mov	r3, r1
 802160c:	ebb4 0802 	subs.w	r8, r4, r2
 8021610:	eb65 0903 	sbc.w	r9, r5, r3
 8021614:	4b1d      	ldr	r3, [pc, #116]	@ (802168c <sntp_cb+0xfc>)
 8021616:	e9c3 8900 	strd	r8, r9, [r3]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 802161a:	f107 0310 	add.w	r3, r7, #16
 802161e:	461a      	mov	r2, r3
 8021620:	2112      	movs	r1, #18
 8021622:	68f8      	ldr	r0, [r7, #12]
 8021624:	f7f4 f81c 	bl	8015660 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8021628:	4b19      	ldr	r3, [pc, #100]	@ (8021690 <sntp_cb+0x100>)
 802162a:	681b      	ldr	r3, [r3, #0]
 802162c:	2b02      	cmp	r3, #2
 802162e:	dd0d      	ble.n	802164c <sntp_cb+0xbc>
 8021630:	4b18      	ldr	r3, [pc, #96]	@ (8021694 <sntp_cb+0x104>)
 8021632:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8021636:	4918      	ldr	r1, [pc, #96]	@ (8021698 <sntp_cb+0x108>)
 8021638:	2003      	movs	r0, #3
 802163a:	f7f9 fbf7 	bl	801ae2c <mg_log_prefix>
 802163e:	68fb      	ldr	r3, [r7, #12]
 8021640:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8021642:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021646:	4815      	ldr	r0, [pc, #84]	@ (802169c <sntp_cb+0x10c>)
 8021648:	f7f9 fc40 	bl	801aecc <mg_log>
    c->is_closing = 1;
 802164c:	68fa      	ldr	r2, [r7, #12]
 802164e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021652:	f043 0320 	orr.w	r3, r3, #32
 8021656:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 802165a:	e011      	b.n	8021680 <sntp_cb+0xf0>
  } else if (ev == MG_EV_POLL) {
 802165c:	68bb      	ldr	r3, [r7, #8]
 802165e:	2b02      	cmp	r3, #2
 8021660:	d10e      	bne.n	8021680 <sntp_cb+0xf0>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8021662:	f001 f91b 	bl	802289c <mg_millis>
 8021666:	69fb      	ldr	r3, [r7, #28]
 8021668:	e9d3 2300 	ldrd	r2, r3, [r3]
 802166c:	4282      	cmp	r2, r0
 802166e:	418b      	sbcs	r3, r1
 8021670:	d206      	bcs.n	8021680 <sntp_cb+0xf0>
 8021672:	68fa      	ldr	r2, [r7, #12]
 8021674:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021678:	f043 0320 	orr.w	r3, r3, #32
 802167c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8021680:	bf00      	nop
 8021682:	3720      	adds	r7, #32
 8021684:	46bd      	mov	sp, r7
 8021686:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802168a:	bf00      	nop
 802168c:	20018158 	.word	0x20018158
 8021690:	20000298 	.word	0x20000298
 8021694:	08033fa4 	.word	0x08033fa4
 8021698:	080310b8 	.word	0x080310b8
 802169c:	08032d84 	.word	0x08032d84

080216a0 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 80216a0:	b590      	push	{r4, r7, lr}
 80216a2:	b095      	sub	sp, #84	@ 0x54
 80216a4:	af00      	add	r7, sp, #0
 80216a6:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 80216a8:	687b      	ldr	r3, [r7, #4]
 80216aa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80216ae:	f003 0308 	and.w	r3, r3, #8
 80216b2:	b2db      	uxtb	r3, r3
 80216b4:	2b00      	cmp	r3, #0
 80216b6:	d011      	beq.n	80216dc <mg_sntp_request+0x3c>
    MG_ERROR(("%lu wait until resolved", c->id));
 80216b8:	4b39      	ldr	r3, [pc, #228]	@ (80217a0 <mg_sntp_request+0x100>)
 80216ba:	681b      	ldr	r3, [r3, #0]
 80216bc:	2b00      	cmp	r3, #0
 80216be:	dd65      	ble.n	802178c <mg_sntp_request+0xec>
 80216c0:	4b38      	ldr	r3, [pc, #224]	@ (80217a4 <mg_sntp_request+0x104>)
 80216c2:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 80216c6:	4938      	ldr	r1, [pc, #224]	@ (80217a8 <mg_sntp_request+0x108>)
 80216c8:	2001      	movs	r0, #1
 80216ca:	f7f9 fbaf 	bl	801ae2c <mg_log_prefix>
 80216ce:	687b      	ldr	r3, [r7, #4]
 80216d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80216d2:	4619      	mov	r1, r3
 80216d4:	4835      	ldr	r0, [pc, #212]	@ (80217ac <mg_sntp_request+0x10c>)
 80216d6:	f7f9 fbf9 	bl	801aecc <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 80216da:	e057      	b.n	802178c <mg_sntp_request+0xec>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 80216dc:	f001 f8de 	bl	802289c <mg_millis>
 80216e0:	4602      	mov	r2, r0
 80216e2:	460b      	mov	r3, r1
 80216e4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    uint8_t buf[48] = {0};
 80216e8:	2300      	movs	r3, #0
 80216ea:	60bb      	str	r3, [r7, #8]
 80216ec:	f107 030c 	add.w	r3, r7, #12
 80216f0:	222c      	movs	r2, #44	@ 0x2c
 80216f2:	2100      	movs	r1, #0
 80216f4:	4618      	mov	r0, r3
 80216f6:	f004 fc2f 	bl	8025f58 <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 80216fa:	f107 0308 	add.w	r3, r7, #8
 80216fe:	3328      	adds	r3, #40	@ 0x28
 8021700:	647b      	str	r3, [r7, #68]	@ 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8021702:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8021706:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802170a:	f04f 0300 	mov.w	r3, #0
 802170e:	f7df fad3 	bl	8000cb8 <__aeabi_ldivmod>
 8021712:	4610      	mov	r0, r2
 8021714:	4619      	mov	r1, r3
 8021716:	f7de ff59 	bl	80005cc <__aeabi_l2d>
 802171a:	f04f 0200 	mov.w	r2, #0
 802171e:	4b24      	ldr	r3, [pc, #144]	@ (80217b0 <mg_sntp_request+0x110>)
 8021720:	f7df f8ac 	bl	800087c <__aeabi_ddiv>
 8021724:	4602      	mov	r2, r0
 8021726:	460b      	mov	r3, r1
 8021728:	4610      	mov	r0, r2
 802172a:	4619      	mov	r1, r3
 802172c:	a31a      	add	r3, pc, #104	@ (adr r3, 8021798 <mg_sntp_request+0xf8>)
 802172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021732:	f7de ff79 	bl	8000628 <__aeabi_dmul>
 8021736:	4602      	mov	r2, r0
 8021738:	460b      	mov	r3, r1
 802173a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 802173e:	2323      	movs	r3, #35	@ 0x23
 8021740:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8021742:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8021746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802174a:	f04f 0300 	mov.w	r3, #0
 802174e:	f7df fab3 	bl	8000cb8 <__aeabi_ldivmod>
 8021752:	4602      	mov	r2, r0
 8021754:	460b      	mov	r3, r1
 8021756:	4b17      	ldr	r3, [pc, #92]	@ (80217b4 <mg_sntp_request+0x114>)
 8021758:	4413      	add	r3, r2
 802175a:	4618      	mov	r0, r3
 802175c:	f000 fff4 	bl	8022748 <mg_ntohl>
 8021760:	4602      	mov	r2, r0
 8021762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021764:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 8021766:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802176a:	f7df fa35 	bl	8000bd8 <__aeabi_d2uiz>
 802176e:	4602      	mov	r2, r0
 8021770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021772:	1d1c      	adds	r4, r3, #4
 8021774:	4610      	mov	r0, r2
 8021776:	f000 ffe7 	bl	8022748 <mg_ntohl>
 802177a:	4603      	mov	r3, r0
 802177c:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 802177e:	f107 0308 	add.w	r3, r7, #8
 8021782:	2230      	movs	r2, #48	@ 0x30
 8021784:	4619      	mov	r1, r3
 8021786:	6878      	ldr	r0, [r7, #4]
 8021788:	f7ff fa7e 	bl	8020c88 <mg_send>
}
 802178c:	bf00      	nop
 802178e:	3754      	adds	r7, #84	@ 0x54
 8021790:	46bd      	mov	sp, r7
 8021792:	bd90      	pop	{r4, r7, pc}
 8021794:	f3af 8000 	nop.w
 8021798:	ffe00000 	.word	0xffe00000
 802179c:	41efffff 	.word	0x41efffff
 80217a0:	20000298 	.word	0x20000298
 80217a4:	08033fac 	.word	0x08033fac
 80217a8:	080310b8 	.word	0x080310b8
 80217ac:	08032da8 	.word	0x08032da8
 80217b0:	408f4000 	.word	0x408f4000
 80217b4:	83aa7e80 	.word	0x83aa7e80

080217b8 <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 80217b8:	b580      	push	{r7, lr}
 80217ba:	b086      	sub	sp, #24
 80217bc:	af00      	add	r7, sp, #0
 80217be:	60f8      	str	r0, [r7, #12]
 80217c0:	60b9      	str	r1, [r7, #8]
 80217c2:	607a      	str	r2, [r7, #4]
 80217c4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80217c6:	2300      	movs	r3, #0
 80217c8:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 80217ca:	68bb      	ldr	r3, [r7, #8]
 80217cc:	2b00      	cmp	r3, #0
 80217ce:	d101      	bne.n	80217d4 <mg_sntp_connect+0x1c>
 80217d0:	4b0c      	ldr	r3, [pc, #48]	@ (8021804 <mg_sntp_connect+0x4c>)
 80217d2:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 80217d4:	683b      	ldr	r3, [r7, #0]
 80217d6:	687a      	ldr	r2, [r7, #4]
 80217d8:	68b9      	ldr	r1, [r7, #8]
 80217da:	68f8      	ldr	r0, [r7, #12]
 80217dc:	f7fb ff90 	bl	801d700 <mg_connect>
 80217e0:	6178      	str	r0, [r7, #20]
 80217e2:	697b      	ldr	r3, [r7, #20]
 80217e4:	2b00      	cmp	r3, #0
 80217e6:	d008      	beq.n	80217fa <mg_sntp_connect+0x42>
    c->pfn = sntp_cb;
 80217e8:	697b      	ldr	r3, [r7, #20]
 80217ea:	4a07      	ldr	r2, [pc, #28]	@ (8021808 <mg_sntp_connect+0x50>)
 80217ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 80217f0:	68ba      	ldr	r2, [r7, #8]
 80217f2:	2101      	movs	r1, #1
 80217f4:	6978      	ldr	r0, [r7, #20]
 80217f6:	f7ff fecb 	bl	8021590 <sntp_cb>
  }
  return c;
 80217fa:	697b      	ldr	r3, [r7, #20]
}
 80217fc:	4618      	mov	r0, r3
 80217fe:	3718      	adds	r7, #24
 8021800:	46bd      	mov	sp, r7
 8021802:	bd80      	pop	{r7, pc}
 8021804:	08032dc0 	.word	0x08032dc0
 8021808:	08021591 	.word	0x08021591

0802180c <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 802180c:	b580      	push	{r7, lr}
 802180e:	b084      	sub	sp, #16
 8021810:	af00      	add	r7, sp, #0
 8021812:	60f8      	str	r0, [r7, #12]
 8021814:	60b9      	str	r1, [r7, #8]
 8021816:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8021818:	4b05      	ldr	r3, [pc, #20]	@ (8021830 <mg_http_serve_ssi+0x24>)
 802181a:	2200      	movs	r2, #0
 802181c:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8021820:	68f8      	ldr	r0, [r7, #12]
 8021822:	f7f6 fb5b 	bl	8017edc <mg_http_reply>
  (void) root, (void) fullpath;
}
 8021826:	bf00      	nop
 8021828:	3710      	adds	r7, #16
 802182a:	46bd      	mov	sp, r7
 802182c:	bd80      	pop	{r7, pc}
 802182e:	bf00      	nop
 8021830:	08032ddc 	.word	0x08032ddc

08021834 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8021834:	b580      	push	{r7, lr}
 8021836:	b084      	sub	sp, #16
 8021838:	af00      	add	r7, sp, #0
 802183a:	6078      	str	r0, [r7, #4]
 802183c:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 802183e:	683b      	ldr	r3, [r7, #0]
 8021840:	60bb      	str	r3, [r7, #8]
 8021842:	683b      	ldr	r3, [r7, #0]
 8021844:	2b00      	cmp	r3, #0
 8021846:	d004      	beq.n	8021852 <mg_str_s+0x1e>
 8021848:	6838      	ldr	r0, [r7, #0]
 802184a:	f7de fd29 	bl	80002a0 <strlen>
 802184e:	4603      	mov	r3, r0
 8021850:	e000      	b.n	8021854 <mg_str_s+0x20>
 8021852:	2300      	movs	r3, #0
 8021854:	60fb      	str	r3, [r7, #12]
  return str;
 8021856:	687b      	ldr	r3, [r7, #4]
 8021858:	461a      	mov	r2, r3
 802185a:	f107 0308 	add.w	r3, r7, #8
 802185e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021862:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8021866:	6878      	ldr	r0, [r7, #4]
 8021868:	3710      	adds	r7, #16
 802186a:	46bd      	mov	sp, r7
 802186c:	bd80      	pop	{r7, pc}

0802186e <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 802186e:	b480      	push	{r7}
 8021870:	b087      	sub	sp, #28
 8021872:	af00      	add	r7, sp, #0
 8021874:	60f8      	str	r0, [r7, #12]
 8021876:	60b9      	str	r1, [r7, #8]
 8021878:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 802187a:	68bb      	ldr	r3, [r7, #8]
 802187c:	613b      	str	r3, [r7, #16]
 802187e:	687b      	ldr	r3, [r7, #4]
 8021880:	617b      	str	r3, [r7, #20]
  return str;
 8021882:	68fb      	ldr	r3, [r7, #12]
 8021884:	461a      	mov	r2, r3
 8021886:	f107 0310 	add.w	r3, r7, #16
 802188a:	e893 0003 	ldmia.w	r3, {r0, r1}
 802188e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8021892:	68f8      	ldr	r0, [r7, #12]
 8021894:	371c      	adds	r7, #28
 8021896:	46bd      	mov	sp, r7
 8021898:	f85d 7b04 	ldr.w	r7, [sp], #4
 802189c:	4770      	bx	lr

0802189e <mg_tolc>:

static int mg_tolc(char c) {
 802189e:	b480      	push	{r7}
 80218a0:	b083      	sub	sp, #12
 80218a2:	af00      	add	r7, sp, #0
 80218a4:	4603      	mov	r3, r0
 80218a6:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 80218a8:	79fb      	ldrb	r3, [r7, #7]
 80218aa:	2b40      	cmp	r3, #64	@ 0x40
 80218ac:	d905      	bls.n	80218ba <mg_tolc+0x1c>
 80218ae:	79fb      	ldrb	r3, [r7, #7]
 80218b0:	2b5a      	cmp	r3, #90	@ 0x5a
 80218b2:	d802      	bhi.n	80218ba <mg_tolc+0x1c>
 80218b4:	79fb      	ldrb	r3, [r7, #7]
 80218b6:	3320      	adds	r3, #32
 80218b8:	e000      	b.n	80218bc <mg_tolc+0x1e>
 80218ba:	79fb      	ldrb	r3, [r7, #7]
}
 80218bc:	4618      	mov	r0, r3
 80218be:	370c      	adds	r7, #12
 80218c0:	46bd      	mov	sp, r7
 80218c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218c6:	4770      	bx	lr

080218c8 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80218c8:	b490      	push	{r4, r7}
 80218ca:	b088      	sub	sp, #32
 80218cc:	af00      	add	r7, sp, #0
 80218ce:	f107 0408 	add.w	r4, r7, #8
 80218d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80218d6:	4639      	mov	r1, r7
 80218d8:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80218dc:	2300      	movs	r3, #0
 80218de:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80218e0:	e019      	b.n	8021916 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 80218e2:	68ba      	ldr	r2, [r7, #8]
 80218e4:	69fb      	ldr	r3, [r7, #28]
 80218e6:	4413      	add	r3, r2
 80218e8:	781b      	ldrb	r3, [r3, #0]
 80218ea:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 80218ec:	683a      	ldr	r2, [r7, #0]
 80218ee:	69fb      	ldr	r3, [r7, #28]
 80218f0:	4413      	add	r3, r2
 80218f2:	781b      	ldrb	r3, [r3, #0]
 80218f4:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 80218f6:	69ba      	ldr	r2, [r7, #24]
 80218f8:	697b      	ldr	r3, [r7, #20]
 80218fa:	429a      	cmp	r2, r3
 80218fc:	da02      	bge.n	8021904 <mg_strcmp+0x3c>
 80218fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021902:	e01e      	b.n	8021942 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8021904:	69ba      	ldr	r2, [r7, #24]
 8021906:	697b      	ldr	r3, [r7, #20]
 8021908:	429a      	cmp	r2, r3
 802190a:	dd01      	ble.n	8021910 <mg_strcmp+0x48>
 802190c:	2301      	movs	r3, #1
 802190e:	e018      	b.n	8021942 <mg_strcmp+0x7a>
    i++;
 8021910:	69fb      	ldr	r3, [r7, #28]
 8021912:	3301      	adds	r3, #1
 8021914:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8021916:	68fb      	ldr	r3, [r7, #12]
 8021918:	69fa      	ldr	r2, [r7, #28]
 802191a:	429a      	cmp	r2, r3
 802191c:	d203      	bcs.n	8021926 <mg_strcmp+0x5e>
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	69fa      	ldr	r2, [r7, #28]
 8021922:	429a      	cmp	r2, r3
 8021924:	d3dd      	bcc.n	80218e2 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8021926:	68fb      	ldr	r3, [r7, #12]
 8021928:	69fa      	ldr	r2, [r7, #28]
 802192a:	429a      	cmp	r2, r3
 802192c:	d201      	bcs.n	8021932 <mg_strcmp+0x6a>
 802192e:	2301      	movs	r3, #1
 8021930:	e007      	b.n	8021942 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	69fa      	ldr	r2, [r7, #28]
 8021936:	429a      	cmp	r2, r3
 8021938:	d202      	bcs.n	8021940 <mg_strcmp+0x78>
 802193a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802193e:	e000      	b.n	8021942 <mg_strcmp+0x7a>
  return 0;
 8021940:	2300      	movs	r3, #0
}
 8021942:	4618      	mov	r0, r3
 8021944:	3720      	adds	r7, #32
 8021946:	46bd      	mov	sp, r7
 8021948:	bc90      	pop	{r4, r7}
 802194a:	4770      	bx	lr

0802194c <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 802194c:	b590      	push	{r4, r7, lr}
 802194e:	b089      	sub	sp, #36	@ 0x24
 8021950:	af00      	add	r7, sp, #0
 8021952:	f107 0408 	add.w	r4, r7, #8
 8021956:	e884 0003 	stmia.w	r4, {r0, r1}
 802195a:	4639      	mov	r1, r7
 802195c:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8021960:	2300      	movs	r3, #0
 8021962:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8021964:	e01f      	b.n	80219a6 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8021966:	68ba      	ldr	r2, [r7, #8]
 8021968:	69fb      	ldr	r3, [r7, #28]
 802196a:	4413      	add	r3, r2
 802196c:	781b      	ldrb	r3, [r3, #0]
 802196e:	4618      	mov	r0, r3
 8021970:	f7ff ff95 	bl	802189e <mg_tolc>
 8021974:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8021976:	683a      	ldr	r2, [r7, #0]
 8021978:	69fb      	ldr	r3, [r7, #28]
 802197a:	4413      	add	r3, r2
 802197c:	781b      	ldrb	r3, [r3, #0]
 802197e:	4618      	mov	r0, r3
 8021980:	f7ff ff8d 	bl	802189e <mg_tolc>
 8021984:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8021986:	69ba      	ldr	r2, [r7, #24]
 8021988:	697b      	ldr	r3, [r7, #20]
 802198a:	429a      	cmp	r2, r3
 802198c:	da02      	bge.n	8021994 <mg_strcasecmp+0x48>
 802198e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021992:	e01e      	b.n	80219d2 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8021994:	69ba      	ldr	r2, [r7, #24]
 8021996:	697b      	ldr	r3, [r7, #20]
 8021998:	429a      	cmp	r2, r3
 802199a:	dd01      	ble.n	80219a0 <mg_strcasecmp+0x54>
 802199c:	2301      	movs	r3, #1
 802199e:	e018      	b.n	80219d2 <mg_strcasecmp+0x86>
    i++;
 80219a0:	69fb      	ldr	r3, [r7, #28]
 80219a2:	3301      	adds	r3, #1
 80219a4:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80219a6:	68fb      	ldr	r3, [r7, #12]
 80219a8:	69fa      	ldr	r2, [r7, #28]
 80219aa:	429a      	cmp	r2, r3
 80219ac:	d203      	bcs.n	80219b6 <mg_strcasecmp+0x6a>
 80219ae:	687b      	ldr	r3, [r7, #4]
 80219b0:	69fa      	ldr	r2, [r7, #28]
 80219b2:	429a      	cmp	r2, r3
 80219b4:	d3d7      	bcc.n	8021966 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 80219b6:	68fb      	ldr	r3, [r7, #12]
 80219b8:	69fa      	ldr	r2, [r7, #28]
 80219ba:	429a      	cmp	r2, r3
 80219bc:	d201      	bcs.n	80219c2 <mg_strcasecmp+0x76>
 80219be:	2301      	movs	r3, #1
 80219c0:	e007      	b.n	80219d2 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 80219c2:	687b      	ldr	r3, [r7, #4]
 80219c4:	69fa      	ldr	r2, [r7, #28]
 80219c6:	429a      	cmp	r2, r3
 80219c8:	d202      	bcs.n	80219d0 <mg_strcasecmp+0x84>
 80219ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80219ce:	e000      	b.n	80219d2 <mg_strcasecmp+0x86>
  return 0;
 80219d0:	2300      	movs	r3, #0
}
 80219d2:	4618      	mov	r0, r3
 80219d4:	3724      	adds	r7, #36	@ 0x24
 80219d6:	46bd      	mov	sp, r7
 80219d8:	bd90      	pop	{r4, r7, pc}

080219da <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 80219da:	b490      	push	{r4, r7}
 80219dc:	b088      	sub	sp, #32
 80219de:	af00      	add	r7, sp, #0
 80219e0:	f107 0408 	add.w	r4, r7, #8
 80219e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80219e8:	4639      	mov	r1, r7
 80219ea:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 80219ee:	2300      	movs	r3, #0
 80219f0:	61fb      	str	r3, [r7, #28]
 80219f2:	2300      	movs	r3, #0
 80219f4:	61bb      	str	r3, [r7, #24]
 80219f6:	2300      	movs	r3, #0
 80219f8:	617b      	str	r3, [r7, #20]
 80219fa:	2300      	movs	r3, #0
 80219fc:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 80219fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a00:	2b00      	cmp	r3, #0
 8021a02:	f000 80ba 	beq.w	8021b7a <mg_match+0x1a0>
 8021a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a08:	2200      	movs	r2, #0
 8021a0a:	601a      	str	r2, [r3, #0]
 8021a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a0e:	2200      	movs	r2, #0
 8021a10:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8021a12:	e0b2      	b.n	8021b7a <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8021a14:	687b      	ldr	r3, [r7, #4]
 8021a16:	69fa      	ldr	r2, [r7, #28]
 8021a18:	429a      	cmp	r2, r3
 8021a1a:	d25b      	bcs.n	8021ad4 <mg_match+0xfa>
 8021a1c:	68fb      	ldr	r3, [r7, #12]
 8021a1e:	69ba      	ldr	r2, [r7, #24]
 8021a20:	429a      	cmp	r2, r3
 8021a22:	d257      	bcs.n	8021ad4 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 8021a24:	683a      	ldr	r2, [r7, #0]
 8021a26:	69fb      	ldr	r3, [r7, #28]
 8021a28:	4413      	add	r3, r2
 8021a2a:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 8021a2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8021a2e:	d015      	beq.n	8021a5c <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8021a30:	683a      	ldr	r2, [r7, #0]
 8021a32:	69fb      	ldr	r3, [r7, #28]
 8021a34:	4413      	add	r3, r2
 8021a36:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 8021a38:	2b2a      	cmp	r3, #42	@ 0x2a
 8021a3a:	d04b      	beq.n	8021ad4 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8021a3c:	683a      	ldr	r2, [r7, #0]
 8021a3e:	69fb      	ldr	r3, [r7, #28]
 8021a40:	4413      	add	r3, r2
 8021a42:	781b      	ldrb	r3, [r3, #0]
 8021a44:	2b23      	cmp	r3, #35	@ 0x23
 8021a46:	d045      	beq.n	8021ad4 <mg_match+0xfa>
 8021a48:	68ba      	ldr	r2, [r7, #8]
 8021a4a:	69bb      	ldr	r3, [r7, #24]
 8021a4c:	4413      	add	r3, r2
 8021a4e:	781a      	ldrb	r2, [r3, #0]
 8021a50:	6839      	ldr	r1, [r7, #0]
 8021a52:	69fb      	ldr	r3, [r7, #28]
 8021a54:	440b      	add	r3, r1
 8021a56:	781b      	ldrb	r3, [r3, #0]
 8021a58:	429a      	cmp	r2, r3
 8021a5a:	d13b      	bne.n	8021ad4 <mg_match+0xfa>
      if (caps == NULL) {
 8021a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a5e:	2b00      	cmp	r3, #0
 8021a60:	d031      	beq.n	8021ac6 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8021a62:	683a      	ldr	r2, [r7, #0]
 8021a64:	69fb      	ldr	r3, [r7, #28]
 8021a66:	4413      	add	r3, r2
 8021a68:	781b      	ldrb	r3, [r3, #0]
 8021a6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8021a6c:	d111      	bne.n	8021a92 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8021a6e:	68ba      	ldr	r2, [r7, #8]
 8021a70:	69bb      	ldr	r3, [r7, #24]
 8021a72:	441a      	add	r2, r3
 8021a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a76:	601a      	str	r2, [r3, #0]
 8021a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a7a:	2201      	movs	r2, #1
 8021a7c:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8021a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a80:	3308      	adds	r3, #8
 8021a82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a86:	2200      	movs	r2, #0
 8021a88:	601a      	str	r2, [r3, #0]
 8021a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a8c:	2200      	movs	r2, #0
 8021a8e:	605a      	str	r2, [r3, #4]
 8021a90:	e019      	b.n	8021ac6 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8021a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a94:	681b      	ldr	r3, [r3, #0]
 8021a96:	2b00      	cmp	r3, #0
 8021a98:	d015      	beq.n	8021ac6 <mg_match+0xec>
 8021a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a9c:	685b      	ldr	r3, [r3, #4]
 8021a9e:	2b00      	cmp	r3, #0
 8021aa0:	d111      	bne.n	8021ac6 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8021aa2:	68ba      	ldr	r2, [r7, #8]
 8021aa4:	69bb      	ldr	r3, [r7, #24]
 8021aa6:	441a      	add	r2, r3
 8021aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021aaa:	681b      	ldr	r3, [r3, #0]
 8021aac:	1ad3      	subs	r3, r2, r3
 8021aae:	461a      	mov	r2, r3
 8021ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ab2:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8021ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ab6:	3308      	adds	r3, #8
 8021ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021abc:	2200      	movs	r2, #0
 8021abe:	605a      	str	r2, [r3, #4]
 8021ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ac2:	2200      	movs	r2, #0
 8021ac4:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8021ac6:	69fb      	ldr	r3, [r7, #28]
 8021ac8:	3301      	adds	r3, #1
 8021aca:	61fb      	str	r3, [r7, #28]
 8021acc:	69bb      	ldr	r3, [r7, #24]
 8021ace:	3301      	adds	r3, #1
 8021ad0:	61bb      	str	r3, [r7, #24]
 8021ad2:	e052      	b.n	8021b7a <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8021ad4:	687b      	ldr	r3, [r7, #4]
 8021ad6:	69fa      	ldr	r2, [r7, #28]
 8021ad8:	429a      	cmp	r2, r3
 8021ada:	d222      	bcs.n	8021b22 <mg_match+0x148>
 8021adc:	683a      	ldr	r2, [r7, #0]
 8021ade:	69fb      	ldr	r3, [r7, #28]
 8021ae0:	4413      	add	r3, r2
 8021ae2:	781b      	ldrb	r3, [r3, #0]
 8021ae4:	2b2a      	cmp	r3, #42	@ 0x2a
 8021ae6:	d005      	beq.n	8021af4 <mg_match+0x11a>
 8021ae8:	683a      	ldr	r2, [r7, #0]
 8021aea:	69fb      	ldr	r3, [r7, #28]
 8021aec:	4413      	add	r3, r2
 8021aee:	781b      	ldrb	r3, [r3, #0]
 8021af0:	2b23      	cmp	r3, #35	@ 0x23
 8021af2:	d116      	bne.n	8021b22 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8021af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021af6:	2b00      	cmp	r3, #0
 8021af8:	d00b      	beq.n	8021b12 <mg_match+0x138>
 8021afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021afc:	681b      	ldr	r3, [r3, #0]
 8021afe:	2b00      	cmp	r3, #0
 8021b00:	d107      	bne.n	8021b12 <mg_match+0x138>
 8021b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b04:	2200      	movs	r2, #0
 8021b06:	605a      	str	r2, [r3, #4]
 8021b08:	68ba      	ldr	r2, [r7, #8]
 8021b0a:	69bb      	ldr	r3, [r7, #24]
 8021b0c:	441a      	add	r2, r3
 8021b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b10:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8021b12:	69fb      	ldr	r3, [r7, #28]
 8021b14:	1c5a      	adds	r2, r3, #1
 8021b16:	61fa      	str	r2, [r7, #28]
 8021b18:	617b      	str	r3, [r7, #20]
 8021b1a:	69bb      	ldr	r3, [r7, #24]
 8021b1c:	3301      	adds	r3, #1
 8021b1e:	613b      	str	r3, [r7, #16]
 8021b20:	e02b      	b.n	8021b7a <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8021b22:	693b      	ldr	r3, [r7, #16]
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	d025      	beq.n	8021b74 <mg_match+0x19a>
 8021b28:	68fb      	ldr	r3, [r7, #12]
 8021b2a:	693a      	ldr	r2, [r7, #16]
 8021b2c:	429a      	cmp	r2, r3
 8021b2e:	d821      	bhi.n	8021b74 <mg_match+0x19a>
 8021b30:	683a      	ldr	r2, [r7, #0]
 8021b32:	697b      	ldr	r3, [r7, #20]
 8021b34:	4413      	add	r3, r2
 8021b36:	781b      	ldrb	r3, [r3, #0]
 8021b38:	2b23      	cmp	r3, #35	@ 0x23
 8021b3a:	d005      	beq.n	8021b48 <mg_match+0x16e>
 8021b3c:	68ba      	ldr	r2, [r7, #8]
 8021b3e:	69bb      	ldr	r3, [r7, #24]
 8021b40:	4413      	add	r3, r2
 8021b42:	781b      	ldrb	r3, [r3, #0]
 8021b44:	2b2f      	cmp	r3, #47	@ 0x2f
 8021b46:	d015      	beq.n	8021b74 <mg_match+0x19a>
      i = ni, j = nj;
 8021b48:	697b      	ldr	r3, [r7, #20]
 8021b4a:	61fb      	str	r3, [r7, #28]
 8021b4c:	693b      	ldr	r3, [r7, #16]
 8021b4e:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b52:	2b00      	cmp	r3, #0
 8021b54:	d010      	beq.n	8021b78 <mg_match+0x19e>
 8021b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b58:	681b      	ldr	r3, [r3, #0]
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	d10c      	bne.n	8021b78 <mg_match+0x19e>
 8021b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b60:	685b      	ldr	r3, [r3, #4]
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	d108      	bne.n	8021b78 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 8021b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b68:	3b08      	subs	r3, #8
 8021b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b6e:	2200      	movs	r2, #0
 8021b70:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021b72:	e001      	b.n	8021b78 <mg_match+0x19e>
      }
    } else {
      return false;
 8021b74:	2300      	movs	r3, #0
 8021b76:	e01f      	b.n	8021bb8 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021b78:	bf00      	nop
  while (i < p.len || j < s.len) {
 8021b7a:	687b      	ldr	r3, [r7, #4]
 8021b7c:	69fa      	ldr	r2, [r7, #28]
 8021b7e:	429a      	cmp	r2, r3
 8021b80:	f4ff af48 	bcc.w	8021a14 <mg_match+0x3a>
 8021b84:	68fb      	ldr	r3, [r7, #12]
 8021b86:	69ba      	ldr	r2, [r7, #24]
 8021b88:	429a      	cmp	r2, r3
 8021b8a:	f4ff af43 	bcc.w	8021a14 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8021b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b90:	2b00      	cmp	r3, #0
 8021b92:	d010      	beq.n	8021bb6 <mg_match+0x1dc>
 8021b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b96:	681b      	ldr	r3, [r3, #0]
 8021b98:	2b00      	cmp	r3, #0
 8021b9a:	d00c      	beq.n	8021bb6 <mg_match+0x1dc>
 8021b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b9e:	685b      	ldr	r3, [r3, #4]
 8021ba0:	2b00      	cmp	r3, #0
 8021ba2:	d108      	bne.n	8021bb6 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8021ba4:	68ba      	ldr	r2, [r7, #8]
 8021ba6:	69bb      	ldr	r3, [r7, #24]
 8021ba8:	441a      	add	r2, r3
 8021baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021bac:	681b      	ldr	r3, [r3, #0]
 8021bae:	1ad3      	subs	r3, r2, r3
 8021bb0:	461a      	mov	r2, r3
 8021bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021bb4:	605a      	str	r2, [r3, #4]
  }
  return true;
 8021bb6:	2301      	movs	r3, #1
}
 8021bb8:	4618      	mov	r0, r3
 8021bba:	3720      	adds	r7, #32
 8021bbc:	46bd      	mov	sp, r7
 8021bbe:	bc90      	pop	{r4, r7}
 8021bc0:	4770      	bx	lr

08021bc2 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8021bc2:	b590      	push	{r4, r7, lr}
 8021bc4:	b089      	sub	sp, #36	@ 0x24
 8021bc6:	af00      	add	r7, sp, #0
 8021bc8:	f107 0410 	add.w	r4, r7, #16
 8021bcc:	e884 0003 	stmia.w	r4, {r0, r1}
 8021bd0:	60fa      	str	r2, [r7, #12]
 8021bd2:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 8021bd4:	697b      	ldr	r3, [r7, #20]
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	d002      	beq.n	8021be0 <mg_span+0x1e>
 8021bda:	693b      	ldr	r3, [r7, #16]
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	d101      	bne.n	8021be4 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8021be0:	2300      	movs	r3, #0
 8021be2:	e047      	b.n	8021c74 <mg_span+0xb2>
  } else {
    size_t len = 0;
 8021be4:	2300      	movs	r3, #0
 8021be6:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8021be8:	e002      	b.n	8021bf0 <mg_span+0x2e>
 8021bea:	69fb      	ldr	r3, [r7, #28]
 8021bec:	3301      	adds	r3, #1
 8021bee:	61fb      	str	r3, [r7, #28]
 8021bf0:	697b      	ldr	r3, [r7, #20]
 8021bf2:	69fa      	ldr	r2, [r7, #28]
 8021bf4:	429a      	cmp	r2, r3
 8021bf6:	d207      	bcs.n	8021c08 <mg_span+0x46>
 8021bf8:	693a      	ldr	r2, [r7, #16]
 8021bfa:	69fb      	ldr	r3, [r7, #28]
 8021bfc:	4413      	add	r3, r2
 8021bfe:	781b      	ldrb	r3, [r3, #0]
 8021c00:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8021c04:	429a      	cmp	r2, r3
 8021c06:	d1f0      	bne.n	8021bea <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8021c08:	68fb      	ldr	r3, [r7, #12]
 8021c0a:	2b00      	cmp	r3, #0
 8021c0c:	d00c      	beq.n	8021c28 <mg_span+0x66>
 8021c0e:	6939      	ldr	r1, [r7, #16]
 8021c10:	68fc      	ldr	r4, [r7, #12]
 8021c12:	463b      	mov	r3, r7
 8021c14:	69fa      	ldr	r2, [r7, #28]
 8021c16:	4618      	mov	r0, r3
 8021c18:	f7ff fe29 	bl	802186e <mg_str_n>
 8021c1c:	4622      	mov	r2, r4
 8021c1e:	463b      	mov	r3, r7
 8021c20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021c24:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8021c28:	68bb      	ldr	r3, [r7, #8]
 8021c2a:	2b00      	cmp	r3, #0
 8021c2c:	d010      	beq.n	8021c50 <mg_span+0x8e>
 8021c2e:	693a      	ldr	r2, [r7, #16]
 8021c30:	69fb      	ldr	r3, [r7, #28]
 8021c32:	18d1      	adds	r1, r2, r3
 8021c34:	697a      	ldr	r2, [r7, #20]
 8021c36:	69fb      	ldr	r3, [r7, #28]
 8021c38:	1ad2      	subs	r2, r2, r3
 8021c3a:	68bc      	ldr	r4, [r7, #8]
 8021c3c:	463b      	mov	r3, r7
 8021c3e:	4618      	mov	r0, r3
 8021c40:	f7ff fe15 	bl	802186e <mg_str_n>
 8021c44:	4622      	mov	r2, r4
 8021c46:	463b      	mov	r3, r7
 8021c48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021c4c:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8021c50:	68bb      	ldr	r3, [r7, #8]
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d00d      	beq.n	8021c72 <mg_span+0xb0>
 8021c56:	697b      	ldr	r3, [r7, #20]
 8021c58:	69fa      	ldr	r2, [r7, #28]
 8021c5a:	429a      	cmp	r2, r3
 8021c5c:	d209      	bcs.n	8021c72 <mg_span+0xb0>
 8021c5e:	68bb      	ldr	r3, [r7, #8]
 8021c60:	681b      	ldr	r3, [r3, #0]
 8021c62:	1c5a      	adds	r2, r3, #1
 8021c64:	68bb      	ldr	r3, [r7, #8]
 8021c66:	601a      	str	r2, [r3, #0]
 8021c68:	68bb      	ldr	r3, [r7, #8]
 8021c6a:	685b      	ldr	r3, [r3, #4]
 8021c6c:	1e5a      	subs	r2, r3, #1
 8021c6e:	68bb      	ldr	r3, [r7, #8]
 8021c70:	605a      	str	r2, [r3, #4]
    return true;
 8021c72:	2301      	movs	r3, #1
  }
}
 8021c74:	4618      	mov	r0, r3
 8021c76:	3724      	adds	r7, #36	@ 0x24
 8021c78:	46bd      	mov	sp, r7
 8021c7a:	bd90      	pop	{r4, r7, pc}

08021c7c <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8021c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c80:	b0a5      	sub	sp, #148	@ 0x94
 8021c82:	af00      	add	r7, sp, #0
 8021c84:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8021c88:	e884 0003 	stmia.w	r4, {r0, r1}
 8021c8c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8021c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8021c90:	2300      	movs	r3, #0
 8021c92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021c96:	2300      	movs	r3, #0
 8021c98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8021c9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021ca0:	2b01      	cmp	r3, #1
 8021ca2:	d016      	beq.n	8021cd2 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8021ca4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021ca8:	2b02      	cmp	r3, #2
 8021caa:	d00d      	beq.n	8021cc8 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 8021cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021cb0:	2b04      	cmp	r3, #4
 8021cb2:	d104      	bne.n	8021cbe <mg_str_to_num+0x42>
 8021cb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021cb8:	f04f 0300 	mov.w	r3, #0
 8021cbc:	e00d      	b.n	8021cda <mg_str_to_num+0x5e>
 8021cbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021cc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021cc6:	e008      	b.n	8021cda <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8021cc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8021ccc:	f04f 0300 	mov.w	r3, #0
 8021cd0:	e003      	b.n	8021cda <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8021cd2:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8021cd6:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8021cda:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 8021cde:	f04f 0200 	mov.w	r2, #0
 8021ce2:	f04f 0300 	mov.w	r3, #0
 8021ce6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8021cea:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8021cee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8021cf2:	bf08      	it	eq
 8021cf4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8021cf8:	d105      	bne.n	8021d06 <mg_str_to_num+0x8a>
 8021cfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021cfe:	2b08      	cmp	r3, #8
 8021d00:	d001      	beq.n	8021d06 <mg_str_to_num+0x8a>
 8021d02:	2300      	movs	r3, #0
 8021d04:	e1e8      	b.n	80220d8 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 8021d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d08:	2b00      	cmp	r3, #0
 8021d0a:	d12d      	bne.n	8021d68 <mg_str_to_num+0xec>
 8021d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021d0e:	2b01      	cmp	r3, #1
 8021d10:	d92a      	bls.n	8021d68 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8021d12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d18:	4413      	add	r3, r2
 8021d1a:	781b      	ldrb	r3, [r3, #0]
 8021d1c:	2b30      	cmp	r3, #48	@ 0x30
 8021d1e:	d121      	bne.n	8021d64 <mg_str_to_num+0xe8>
      i++;
 8021d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d24:	3301      	adds	r3, #1
 8021d26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8021d2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d30:	4413      	add	r3, r2
 8021d32:	781b      	ldrb	r3, [r3, #0]
 8021d34:	2b62      	cmp	r3, #98	@ 0x62
 8021d36:	d00a      	beq.n	8021d4e <mg_str_to_num+0xd2>
 8021d38:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d3e:	4413      	add	r3, r2
 8021d40:	781b      	ldrb	r3, [r3, #0]
 8021d42:	2b78      	cmp	r3, #120	@ 0x78
 8021d44:	d101      	bne.n	8021d4a <mg_str_to_num+0xce>
 8021d46:	2310      	movs	r3, #16
 8021d48:	e002      	b.n	8021d50 <mg_str_to_num+0xd4>
 8021d4a:	230a      	movs	r3, #10
 8021d4c:	e000      	b.n	8021d50 <mg_str_to_num+0xd4>
 8021d4e:	2302      	movs	r3, #2
 8021d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8021d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d54:	2b0a      	cmp	r3, #10
 8021d56:	d007      	beq.n	8021d68 <mg_str_to_num+0xec>
 8021d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d5c:	3301      	adds	r3, #1
 8021d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021d62:	e001      	b.n	8021d68 <mg_str_to_num+0xec>
    } else {
      base = 10;
 8021d64:	230a      	movs	r3, #10
 8021d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8021d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d6a:	2b10      	cmp	r3, #16
 8021d6c:	f000 8178 	beq.w	8022060 <mg_str_to_num+0x3e4>
 8021d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d72:	2b10      	cmp	r3, #16
 8021d74:	f300 817d 	bgt.w	8022072 <mg_str_to_num+0x3f6>
 8021d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d7a:	2b02      	cmp	r3, #2
 8021d7c:	d052      	beq.n	8021e24 <mg_str_to_num+0x1a8>
 8021d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d80:	2b0a      	cmp	r3, #10
 8021d82:	f000 80cd 	beq.w	8021f20 <mg_str_to_num+0x2a4>
 8021d86:	e174      	b.n	8022072 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8021d88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d8e:	4413      	add	r3, r2
 8021d90:	781b      	ldrb	r3, [r3, #0]
 8021d92:	3b30      	subs	r3, #48	@ 0x30
 8021d94:	17da      	asrs	r2, r3, #31
 8021d96:	633b      	str	r3, [r7, #48]	@ 0x30
 8021d98:	637a      	str	r2, [r7, #52]	@ 0x34
 8021d9a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8021d9e:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 8021da2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021da6:	f04f 0200 	mov.w	r2, #0
 8021daa:	f04f 0300 	mov.w	r3, #0
 8021dae:	0842      	lsrs	r2, r0, #1
 8021db0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8021db4:	084b      	lsrs	r3, r1, #1
 8021db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021dba:	4282      	cmp	r2, r0
 8021dbc:	418b      	sbcs	r3, r1
 8021dbe:	d201      	bcs.n	8021dc4 <mg_str_to_num+0x148>
 8021dc0:	2300      	movs	r3, #0
 8021dc2:	e189      	b.n	80220d8 <mg_str_to_num+0x45c>
        result *= 2;
 8021dc4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8021dc8:	1891      	adds	r1, r2, r2
 8021dca:	62b9      	str	r1, [r7, #40]	@ 0x28
 8021dcc:	415b      	adcs	r3, r3
 8021dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021dd0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8021dd4:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8021dd8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021ddc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8021de0:	1a85      	subs	r5, r0, r2
 8021de2:	eb61 0603 	sbc.w	r6, r1, r3
 8021de6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8021dea:	4295      	cmp	r5, r2
 8021dec:	eb76 0303 	sbcs.w	r3, r6, r3
 8021df0:	d201      	bcs.n	8021df6 <mg_str_to_num+0x17a>
 8021df2:	2300      	movs	r3, #0
 8021df4:	e170      	b.n	80220d8 <mg_str_to_num+0x45c>
        result += digit;
 8021df6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021dfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8021dfe:	1884      	adds	r4, r0, r2
 8021e00:	623c      	str	r4, [r7, #32]
 8021e02:	eb41 0303 	adc.w	r3, r1, r3
 8021e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8021e08:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8021e0c:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8021e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021e14:	3301      	adds	r3, #1
 8021e16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021e1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8021e1e:	3301      	adds	r3, #1
 8021e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8021e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021e26:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8021e2a:	429a      	cmp	r2, r3
 8021e2c:	f080 8123 	bcs.w	8022076 <mg_str_to_num+0x3fa>
 8021e30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021e36:	4413      	add	r3, r2
 8021e38:	781b      	ldrb	r3, [r3, #0]
 8021e3a:	2b30      	cmp	r3, #48	@ 0x30
 8021e3c:	d0a4      	beq.n	8021d88 <mg_str_to_num+0x10c>
 8021e3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021e44:	4413      	add	r3, r2
 8021e46:	781b      	ldrb	r3, [r3, #0]
 8021e48:	2b31      	cmp	r3, #49	@ 0x31
 8021e4a:	d09d      	beq.n	8021d88 <mg_str_to_num+0x10c>
      }
      break;
 8021e4c:	e113      	b.n	8022076 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8021e4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021e54:	4413      	add	r3, r2
 8021e56:	781b      	ldrb	r3, [r3, #0]
 8021e58:	3b30      	subs	r3, #48	@ 0x30
 8021e5a:	17da      	asrs	r2, r3, #31
 8021e5c:	61bb      	str	r3, [r7, #24]
 8021e5e:	61fa      	str	r2, [r7, #28]
 8021e60:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8021e64:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8021e68:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021e6c:	f04f 020a 	mov.w	r2, #10
 8021e70:	f04f 0300 	mov.w	r3, #0
 8021e74:	f7de ff70 	bl	8000d58 <__aeabi_uldivmod>
 8021e78:	4602      	mov	r2, r0
 8021e7a:	460b      	mov	r3, r1
 8021e7c:	4610      	mov	r0, r2
 8021e7e:	4619      	mov	r1, r3
 8021e80:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8021e84:	4290      	cmp	r0, r2
 8021e86:	eb71 0303 	sbcs.w	r3, r1, r3
 8021e8a:	d201      	bcs.n	8021e90 <mg_str_to_num+0x214>
 8021e8c:	2300      	movs	r3, #0
 8021e8e:	e123      	b.n	80220d8 <mg_str_to_num+0x45c>
        result *= 10;
 8021e90:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8021e94:	4622      	mov	r2, r4
 8021e96:	462b      	mov	r3, r5
 8021e98:	f04f 0000 	mov.w	r0, #0
 8021e9c:	f04f 0100 	mov.w	r1, #0
 8021ea0:	0099      	lsls	r1, r3, #2
 8021ea2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8021ea6:	0090      	lsls	r0, r2, #2
 8021ea8:	4602      	mov	r2, r0
 8021eaa:	460b      	mov	r3, r1
 8021eac:	eb12 0804 	adds.w	r8, r2, r4
 8021eb0:	eb43 0905 	adc.w	r9, r3, r5
 8021eb4:	eb18 0308 	adds.w	r3, r8, r8
 8021eb8:	613b      	str	r3, [r7, #16]
 8021eba:	eb49 0309 	adc.w	r3, r9, r9
 8021ebe:	617b      	str	r3, [r7, #20]
 8021ec0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8021ec4:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8021ec8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021ecc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8021ed0:	1a84      	subs	r4, r0, r2
 8021ed2:	63bc      	str	r4, [r7, #56]	@ 0x38
 8021ed4:	eb61 0303 	sbc.w	r3, r1, r3
 8021ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021eda:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8021ede:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8021ee2:	4621      	mov	r1, r4
 8021ee4:	4291      	cmp	r1, r2
 8021ee6:	4629      	mov	r1, r5
 8021ee8:	eb71 0303 	sbcs.w	r3, r1, r3
 8021eec:	d201      	bcs.n	8021ef2 <mg_str_to_num+0x276>
 8021eee:	2300      	movs	r3, #0
 8021ef0:	e0f2      	b.n	80220d8 <mg_str_to_num+0x45c>
        result += digit;
 8021ef2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021ef6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8021efa:	1884      	adds	r4, r0, r2
 8021efc:	60bc      	str	r4, [r7, #8]
 8021efe:	eb41 0303 	adc.w	r3, r1, r3
 8021f02:	60fb      	str	r3, [r7, #12]
 8021f04:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8021f08:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8021f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021f10:	3301      	adds	r3, #1
 8021f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021f16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8021f1a:	3301      	adds	r3, #1
 8021f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8021f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021f22:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8021f26:	429a      	cmp	r2, r3
 8021f28:	f080 80a7 	bcs.w	802207a <mg_str_to_num+0x3fe>
 8021f2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021f32:	4413      	add	r3, r2
 8021f34:	781b      	ldrb	r3, [r3, #0]
 8021f36:	2b2f      	cmp	r3, #47	@ 0x2f
 8021f38:	f240 809f 	bls.w	802207a <mg_str_to_num+0x3fe>
 8021f3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021f42:	4413      	add	r3, r2
 8021f44:	781b      	ldrb	r3, [r3, #0]
 8021f46:	2b39      	cmp	r3, #57	@ 0x39
 8021f48:	d981      	bls.n	8021e4e <mg_str_to_num+0x1d2>
      }
      break;
 8021f4a:	e096      	b.n	802207a <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 8021f4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021f52:	4413      	add	r3, r2
 8021f54:	781b      	ldrb	r3, [r3, #0]
 8021f56:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8021f5a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f5e:	2b2f      	cmp	r3, #47	@ 0x2f
 8021f60:	d90a      	bls.n	8021f78 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8021f62:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f66:	2b39      	cmp	r3, #57	@ 0x39
 8021f68:	d806      	bhi.n	8021f78 <mg_str_to_num+0x2fc>
 8021f6a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f6e:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8021f70:	17da      	asrs	r2, r3, #31
 8021f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8021f74:	647a      	str	r2, [r7, #68]	@ 0x44
 8021f76:	e023      	b.n	8021fc0 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8021f78:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f7c:	2b40      	cmp	r3, #64	@ 0x40
 8021f7e:	d90a      	bls.n	8021f96 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8021f80:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f84:	2b46      	cmp	r3, #70	@ 0x46
 8021f86:	d806      	bhi.n	8021f96 <mg_str_to_num+0x31a>
 8021f88:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f8c:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8021f8e:	17da      	asrs	r2, r3, #31
 8021f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8021f92:	647a      	str	r2, [r7, #68]	@ 0x44
 8021f94:	e014      	b.n	8021fc0 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 8021f96:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f9a:	2b60      	cmp	r3, #96	@ 0x60
 8021f9c:	d90a      	bls.n	8021fb4 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8021f9e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021fa2:	2b66      	cmp	r3, #102	@ 0x66
 8021fa4:	d806      	bhi.n	8021fb4 <mg_str_to_num+0x338>
 8021fa6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021faa:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8021fac:	17da      	asrs	r2, r3, #31
 8021fae:	643b      	str	r3, [r7, #64]	@ 0x40
 8021fb0:	647a      	str	r2, [r7, #68]	@ 0x44
 8021fb2:	e005      	b.n	8021fc0 <mg_str_to_num+0x344>
 8021fb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021fb8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8021fbc:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8021fc0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8021fc4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 8021fc8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8021fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8021fd0:	bf08      	it	eq
 8021fd2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8021fd6:	d04a      	beq.n	802206e <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 8021fd8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021fdc:	f04f 0200 	mov.w	r2, #0
 8021fe0:	f04f 0300 	mov.w	r3, #0
 8021fe4:	0902      	lsrs	r2, r0, #4
 8021fe6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8021fea:	090b      	lsrs	r3, r1, #4
 8021fec:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021ff0:	4282      	cmp	r2, r0
 8021ff2:	418b      	sbcs	r3, r1
 8021ff4:	d201      	bcs.n	8021ffa <mg_str_to_num+0x37e>
 8021ff6:	2300      	movs	r3, #0
 8021ff8:	e06e      	b.n	80220d8 <mg_str_to_num+0x45c>
        result *= 16;
 8021ffa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021ffe:	f04f 0200 	mov.w	r2, #0
 8022002:	f04f 0300 	mov.w	r3, #0
 8022006:	010b      	lsls	r3, r1, #4
 8022008:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 802200c:	0102      	lsls	r2, r0, #4
 802200e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8022012:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8022016:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 802201a:	ebb0 0a02 	subs.w	sl, r0, r2
 802201e:	eb61 0b03 	sbc.w	fp, r1, r3
 8022022:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8022026:	4592      	cmp	sl, r2
 8022028:	eb7b 0303 	sbcs.w	r3, fp, r3
 802202c:	d201      	bcs.n	8022032 <mg_str_to_num+0x3b6>
 802202e:	2300      	movs	r3, #0
 8022030:	e052      	b.n	80220d8 <mg_str_to_num+0x45c>
        result += digit;
 8022032:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8022036:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 802203a:	1884      	adds	r4, r0, r2
 802203c:	603c      	str	r4, [r7, #0]
 802203e:	eb41 0303 	adc.w	r3, r1, r3
 8022042:	607b      	str	r3, [r7, #4]
 8022044:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022048:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 802204c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022050:	3301      	adds	r3, #1
 8022052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8022056:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802205a:	3301      	adds	r3, #1
 802205c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8022060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022062:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8022066:	429a      	cmp	r2, r3
 8022068:	f4ff af70 	bcc.w	8021f4c <mg_str_to_num+0x2d0>
      }
      break;
 802206c:	e006      	b.n	802207c <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 802206e:	bf00      	nop
      break;
 8022070:	e004      	b.n	802207c <mg_str_to_num+0x400>
    default:
      return false;
 8022072:	2300      	movs	r3, #0
 8022074:	e030      	b.n	80220d8 <mg_str_to_num+0x45c>
      break;
 8022076:	bf00      	nop
 8022078:	e000      	b.n	802207c <mg_str_to_num+0x400>
      break;
 802207a:	bf00      	nop
  }
  if (ndigits == 0) return false;
 802207c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8022080:	2b00      	cmp	r3, #0
 8022082:	d101      	bne.n	8022088 <mg_str_to_num+0x40c>
 8022084:	2300      	movs	r3, #0
 8022086:	e027      	b.n	80220d8 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 8022088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802208a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802208e:	429a      	cmp	r2, r3
 8022090:	d001      	beq.n	8022096 <mg_str_to_num+0x41a>
 8022092:	2300      	movs	r3, #0
 8022094:	e020      	b.n	80220d8 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 8022096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802209a:	2b01      	cmp	r3, #1
 802209c:	d104      	bne.n	80220a8 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 802209e:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80220a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80220a4:	701a      	strb	r2, [r3, #0]
 80220a6:	e016      	b.n	80220d6 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 80220a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80220ac:	2b02      	cmp	r3, #2
 80220ae:	d104      	bne.n	80220ba <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 80220b0:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 80220b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80220b6:	801a      	strh	r2, [r3, #0]
 80220b8:	e00d      	b.n	80220d6 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 80220ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80220be:	2b04      	cmp	r3, #4
 80220c0:	d104      	bne.n	80220cc <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 80220c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80220c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80220c8:	601a      	str	r2, [r3, #0]
 80220ca:	e004      	b.n	80220d6 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 80220cc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80220ce:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80220d2:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 80220d6:	2301      	movs	r3, #1
}
 80220d8:	4618      	mov	r0, r3
 80220da:	3794      	adds	r7, #148	@ 0x94
 80220dc:	46bd      	mov	sp, r7
 80220de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080220e2 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 80220e2:	b480      	push	{r7}
 80220e4:	b085      	sub	sp, #20
 80220e6:	af00      	add	r7, sp, #0
 80220e8:	60f8      	str	r0, [r7, #12]
 80220ea:	60b9      	str	r1, [r7, #8]
 80220ec:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 80220f0:	68bb      	ldr	r3, [r7, #8]
 80220f2:	2200      	movs	r2, #0
 80220f4:	601a      	str	r2, [r3, #0]
 80220f6:	68b9      	ldr	r1, [r7, #8]
 80220f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80220fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8022100:	68b9      	ldr	r1, [r7, #8]
 8022102:	f04f 0200 	mov.w	r2, #0
 8022106:	f04f 0300 	mov.w	r3, #0
 802210a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 802210e:	68bb      	ldr	r3, [r7, #8]
 8022110:	69ba      	ldr	r2, [r7, #24]
 8022112:	619a      	str	r2, [r3, #24]
 8022114:	68bb      	ldr	r3, [r7, #8]
 8022116:	69fa      	ldr	r2, [r7, #28]
 8022118:	61da      	str	r2, [r3, #28]
 802211a:	68bb      	ldr	r3, [r7, #8]
 802211c:	6a3a      	ldr	r2, [r7, #32]
 802211e:	621a      	str	r2, [r3, #32]
 8022120:	68fb      	ldr	r3, [r7, #12]
 8022122:	681a      	ldr	r2, [r3, #0]
 8022124:	68bb      	ldr	r3, [r7, #8]
 8022126:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 8022128:	68fb      	ldr	r3, [r7, #12]
 802212a:	68ba      	ldr	r2, [r7, #8]
 802212c:	601a      	str	r2, [r3, #0]
}
 802212e:	bf00      	nop
 8022130:	3714      	adds	r7, #20
 8022132:	46bd      	mov	sp, r7
 8022134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022138:	4770      	bx	lr

0802213a <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 802213a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802213e:	b086      	sub	sp, #24
 8022140:	af00      	add	r7, sp, #0
 8022142:	6178      	str	r0, [r7, #20]
 8022144:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8022148:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802214c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022150:	eb10 0a02 	adds.w	sl, r0, r2
 8022154:	eb41 0b03 	adc.w	fp, r1, r3
 8022158:	697b      	ldr	r3, [r7, #20]
 802215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802215e:	4592      	cmp	sl, r2
 8022160:	eb7b 0303 	sbcs.w	r3, fp, r3
 8022164:	d206      	bcs.n	8022174 <mg_timer_expired+0x3a>
 8022166:	6979      	ldr	r1, [r7, #20]
 8022168:	f04f 0200 	mov.w	r2, #0
 802216c:	f04f 0300 	mov.w	r3, #0
 8022170:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8022174:	697b      	ldr	r3, [r7, #20]
 8022176:	e9d3 2300 	ldrd	r2, r3, [r3]
 802217a:	4313      	orrs	r3, r2
 802217c:	d10d      	bne.n	802219a <mg_timer_expired+0x60>
 802217e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8022182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022186:	1886      	adds	r6, r0, r2
 8022188:	603e      	str	r6, [r7, #0]
 802218a:	eb41 0303 	adc.w	r3, r1, r3
 802218e:	607b      	str	r3, [r7, #4]
 8022190:	697b      	ldr	r3, [r7, #20]
 8022192:	e9d7 1200 	ldrd	r1, r2, [r7]
 8022196:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 802219a:	697b      	ldr	r3, [r7, #20]
 802219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80221a4:	4290      	cmp	r0, r2
 80221a6:	eb71 0303 	sbcs.w	r3, r1, r3
 80221aa:	d201      	bcs.n	80221b0 <mg_timer_expired+0x76>
 80221ac:	2300      	movs	r3, #0
 80221ae:	e022      	b.n	80221f6 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80221b0:	697b      	ldr	r3, [r7, #20]
 80221b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80221ba:	ebb0 0802 	subs.w	r8, r0, r2
 80221be:	eb61 0903 	sbc.w	r9, r1, r3
 80221c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80221c6:	4542      	cmp	r2, r8
 80221c8:	eb73 0309 	sbcs.w	r3, r3, r9
 80221cc:	d207      	bcs.n	80221de <mg_timer_expired+0xa4>
 80221ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80221d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80221d6:	1884      	adds	r4, r0, r2
 80221d8:	eb41 0503 	adc.w	r5, r1, r3
 80221dc:	e007      	b.n	80221ee <mg_timer_expired+0xb4>
 80221de:	697b      	ldr	r3, [r7, #20]
 80221e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80221e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80221e8:	1884      	adds	r4, r0, r2
 80221ea:	eb41 0503 	adc.w	r5, r1, r3
 80221ee:	697b      	ldr	r3, [r7, #20]
 80221f0:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 80221f4:	2301      	movs	r3, #1
}
 80221f6:	4618      	mov	r0, r3
 80221f8:	3718      	adds	r7, #24
 80221fa:	46bd      	mov	sp, r7
 80221fc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8022200:	4770      	bx	lr

08022202 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8022202:	b590      	push	{r4, r7, lr}
 8022204:	b08b      	sub	sp, #44	@ 0x2c
 8022206:	af02      	add	r7, sp, #8
 8022208:	60f8      	str	r0, [r7, #12]
 802220a:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 802220e:	68fb      	ldr	r3, [r7, #12]
 8022210:	681b      	ldr	r3, [r3, #0]
 8022212:	61fb      	str	r3, [r7, #28]
 8022214:	e054      	b.n	80222c0 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8022216:	69fb      	ldr	r3, [r7, #28]
 8022218:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 802221c:	4313      	orrs	r3, r2
 802221e:	d10d      	bne.n	802223c <mg_timer_poll+0x3a>
 8022220:	69fb      	ldr	r3, [r7, #28]
 8022222:	699b      	ldr	r3, [r3, #24]
 8022224:	f003 0302 	and.w	r3, r3, #2
 8022228:	2b00      	cmp	r3, #0
 802222a:	d007      	beq.n	802223c <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 802222c:	69fb      	ldr	r3, [r7, #28]
 802222e:	699b      	ldr	r3, [r3, #24]
 8022230:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8022234:	2b00      	cmp	r3, #0
 8022236:	d101      	bne.n	802223c <mg_timer_poll+0x3a>
 8022238:	2301      	movs	r3, #1
 802223a:	e000      	b.n	802223e <mg_timer_poll+0x3c>
 802223c:	2300      	movs	r3, #0
 802223e:	76fb      	strb	r3, [r7, #27]
 8022240:	7efb      	ldrb	r3, [r7, #27]
 8022242:	f003 0301 	and.w	r3, r3, #1
 8022246:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8022248:	69fb      	ldr	r3, [r7, #28]
 802224a:	f103 0410 	add.w	r4, r3, #16
 802224e:	69fb      	ldr	r3, [r7, #28]
 8022250:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8022254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022258:	e9cd 2300 	strd	r2, r3, [sp]
 802225c:	4602      	mov	r2, r0
 802225e:	460b      	mov	r3, r1
 8022260:	4620      	mov	r0, r4
 8022262:	f7ff ff6a 	bl	802213a <mg_timer_expired>
 8022266:	4603      	mov	r3, r0
 8022268:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 802226a:	69fb      	ldr	r3, [r7, #28]
 802226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802226e:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8022270:	7efb      	ldrb	r3, [r7, #27]
 8022272:	f083 0301 	eor.w	r3, r3, #1
 8022276:	b2db      	uxtb	r3, r3
 8022278:	2b00      	cmp	r3, #0
 802227a:	d005      	beq.n	8022288 <mg_timer_poll+0x86>
 802227c:	7ebb      	ldrb	r3, [r7, #26]
 802227e:	f083 0301 	eor.w	r3, r3, #1
 8022282:	b2db      	uxtb	r3, r3
 8022284:	2b00      	cmp	r3, #0
 8022286:	d118      	bne.n	80222ba <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8022288:	69fb      	ldr	r3, [r7, #28]
 802228a:	699b      	ldr	r3, [r3, #24]
 802228c:	f003 0301 	and.w	r3, r3, #1
 8022290:	2b00      	cmp	r3, #0
 8022292:	d105      	bne.n	80222a0 <mg_timer_poll+0x9e>
 8022294:	69fb      	ldr	r3, [r7, #28]
 8022296:	699b      	ldr	r3, [r3, #24]
 8022298:	f003 0304 	and.w	r3, r3, #4
 802229c:	2b00      	cmp	r3, #0
 802229e:	d105      	bne.n	80222ac <mg_timer_poll+0xaa>
      t->fn(t->arg);
 80222a0:	69fb      	ldr	r3, [r7, #28]
 80222a2:	69db      	ldr	r3, [r3, #28]
 80222a4:	69fa      	ldr	r2, [r7, #28]
 80222a6:	6a12      	ldr	r2, [r2, #32]
 80222a8:	4610      	mov	r0, r2
 80222aa:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 80222ac:	69fb      	ldr	r3, [r7, #28]
 80222ae:	699b      	ldr	r3, [r3, #24]
 80222b0:	f043 0204 	orr.w	r2, r3, #4
 80222b4:	69fb      	ldr	r3, [r7, #28]
 80222b6:	619a      	str	r2, [r3, #24]
 80222b8:	e000      	b.n	80222bc <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 80222ba:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 80222bc:	697b      	ldr	r3, [r7, #20]
 80222be:	61fb      	str	r3, [r7, #28]
 80222c0:	69fb      	ldr	r3, [r7, #28]
 80222c2:	2b00      	cmp	r3, #0
 80222c4:	d1a7      	bne.n	8022216 <mg_timer_poll+0x14>
  }
}
 80222c6:	bf00      	nop
 80222c8:	bf00      	nop
 80222ca:	3724      	adds	r7, #36	@ 0x24
 80222cc:	46bd      	mov	sp, r7
 80222ce:	bd90      	pop	{r4, r7, pc}

080222d0 <mg_tls_handshake>:
#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
  (void) opts;
  mg_error(c, "TLS is not enabled");
}
void mg_tls_handshake(struct mg_connection *c) {
 80222d0:	b480      	push	{r7}
 80222d2:	b083      	sub	sp, #12
 80222d4:	af00      	add	r7, sp, #0
 80222d6:	6078      	str	r0, [r7, #4]
  (void) c;
}
 80222d8:	bf00      	nop
 80222da:	370c      	adds	r7, #12
 80222dc:	46bd      	mov	sp, r7
 80222de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222e2:	4770      	bx	lr

080222e4 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 80222e4:	b480      	push	{r7}
 80222e6:	b083      	sub	sp, #12
 80222e8:	af00      	add	r7, sp, #0
 80222ea:	6078      	str	r0, [r7, #4]
  (void) c;
}
 80222ec:	bf00      	nop
 80222ee:	370c      	adds	r7, #12
 80222f0:	46bd      	mov	sp, r7
 80222f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222f6:	4770      	bx	lr

080222f8 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 80222f8:	b480      	push	{r7}
 80222fa:	b085      	sub	sp, #20
 80222fc:	af00      	add	r7, sp, #0
 80222fe:	60f8      	str	r0, [r7, #12]
 8022300:	60b9      	str	r1, [r7, #8]
 8022302:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8022304:	68fb      	ldr	r3, [r7, #12]
 8022306:	2b00      	cmp	r3, #0
 8022308:	d005      	beq.n	8022316 <mg_tls_recv+0x1e>
 802230a:	68bb      	ldr	r3, [r7, #8]
 802230c:	2b00      	cmp	r3, #0
 802230e:	d002      	beq.n	8022316 <mg_tls_recv+0x1e>
 8022310:	687b      	ldr	r3, [r7, #4]
 8022312:	2b00      	cmp	r3, #0
 8022314:	d101      	bne.n	802231a <mg_tls_recv+0x22>
 8022316:	2300      	movs	r3, #0
 8022318:	e001      	b.n	802231e <mg_tls_recv+0x26>
 802231a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 802231e:	4618      	mov	r0, r3
 8022320:	3714      	adds	r7, #20
 8022322:	46bd      	mov	sp, r7
 8022324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022328:	4770      	bx	lr

0802232a <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 802232a:	b480      	push	{r7}
 802232c:	b085      	sub	sp, #20
 802232e:	af00      	add	r7, sp, #0
 8022330:	60f8      	str	r0, [r7, #12]
 8022332:	60b9      	str	r1, [r7, #8]
 8022334:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8022336:	68fb      	ldr	r3, [r7, #12]
 8022338:	2b00      	cmp	r3, #0
 802233a:	d005      	beq.n	8022348 <mg_tls_send+0x1e>
 802233c:	68bb      	ldr	r3, [r7, #8]
 802233e:	2b00      	cmp	r3, #0
 8022340:	d002      	beq.n	8022348 <mg_tls_send+0x1e>
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	2b00      	cmp	r3, #0
 8022346:	d101      	bne.n	802234c <mg_tls_send+0x22>
 8022348:	2300      	movs	r3, #0
 802234a:	e001      	b.n	8022350 <mg_tls_send+0x26>
 802234c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8022350:	4618      	mov	r0, r3
 8022352:	3714      	adds	r7, #20
 8022354:	46bd      	mov	sp, r7
 8022356:	f85d 7b04 	ldr.w	r7, [sp], #4
 802235a:	4770      	bx	lr

0802235c <mg_tls_pending>:
size_t mg_tls_pending(struct mg_connection *c) {
 802235c:	b480      	push	{r7}
 802235e:	b083      	sub	sp, #12
 8022360:	af00      	add	r7, sp, #0
 8022362:	6078      	str	r0, [r7, #4]
  (void) c;
  return 0;
 8022364:	2300      	movs	r3, #0
}
 8022366:	4618      	mov	r0, r3
 8022368:	370c      	adds	r7, #12
 802236a:	46bd      	mov	sp, r7
 802236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022370:	4770      	bx	lr

08022372 <mg_tls_ctx_init>:
void mg_tls_ctx_init(struct mg_mgr *mgr) {
 8022372:	b480      	push	{r7}
 8022374:	b083      	sub	sp, #12
 8022376:	af00      	add	r7, sp, #0
 8022378:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 802237a:	bf00      	nop
 802237c:	370c      	adds	r7, #12
 802237e:	46bd      	mov	sp, r7
 8022380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022384:	4770      	bx	lr
	...

08022388 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8022388:	b580      	push	{r7, lr}
 802238a:	b082      	sub	sp, #8
 802238c:	af00      	add	r7, sp, #0
 802238e:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8022390:	2204      	movs	r2, #4
 8022392:	491b      	ldr	r1, [pc, #108]	@ (8022400 <mg_url_is_ssl+0x78>)
 8022394:	6878      	ldr	r0, [r7, #4]
 8022396:	f003 fe14 	bl	8025fc2 <strncmp>
 802239a:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802239c:	2b00      	cmp	r3, #0
 802239e:	d027      	beq.n	80223f0 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80223a0:	2206      	movs	r2, #6
 80223a2:	4918      	ldr	r1, [pc, #96]	@ (8022404 <mg_url_is_ssl+0x7c>)
 80223a4:	6878      	ldr	r0, [r7, #4]
 80223a6:	f003 fe0c 	bl	8025fc2 <strncmp>
 80223aa:	4603      	mov	r3, r0
 80223ac:	2b00      	cmp	r3, #0
 80223ae:	d01f      	beq.n	80223f0 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80223b0:	2206      	movs	r2, #6
 80223b2:	4915      	ldr	r1, [pc, #84]	@ (8022408 <mg_url_is_ssl+0x80>)
 80223b4:	6878      	ldr	r0, [r7, #4]
 80223b6:	f003 fe04 	bl	8025fc2 <strncmp>
 80223ba:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d017      	beq.n	80223f0 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80223c0:	2204      	movs	r2, #4
 80223c2:	4912      	ldr	r1, [pc, #72]	@ (802240c <mg_url_is_ssl+0x84>)
 80223c4:	6878      	ldr	r0, [r7, #4]
 80223c6:	f003 fdfc 	bl	8025fc2 <strncmp>
 80223ca:	4603      	mov	r3, r0
 80223cc:	2b00      	cmp	r3, #0
 80223ce:	d00f      	beq.n	80223f0 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80223d0:	2204      	movs	r2, #4
 80223d2:	490f      	ldr	r1, [pc, #60]	@ (8022410 <mg_url_is_ssl+0x88>)
 80223d4:	6878      	ldr	r0, [r7, #4]
 80223d6:	f003 fdf4 	bl	8025fc2 <strncmp>
 80223da:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80223dc:	2b00      	cmp	r3, #0
 80223de:	d007      	beq.n	80223f0 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80223e0:	2205      	movs	r2, #5
 80223e2:	490c      	ldr	r1, [pc, #48]	@ (8022414 <mg_url_is_ssl+0x8c>)
 80223e4:	6878      	ldr	r0, [r7, #4]
 80223e6:	f003 fdec 	bl	8025fc2 <strncmp>
 80223ea:	4603      	mov	r3, r0
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	d101      	bne.n	80223f4 <mg_url_is_ssl+0x6c>
 80223f0:	2301      	movs	r3, #1
 80223f2:	e000      	b.n	80223f6 <mg_url_is_ssl+0x6e>
 80223f4:	2300      	movs	r3, #0
}
 80223f6:	4618      	mov	r0, r3
 80223f8:	3708      	adds	r7, #8
 80223fa:	46bd      	mov	sp, r7
 80223fc:	bd80      	pop	{r7, pc}
 80223fe:	bf00      	nop
 8022400:	08032e00 	.word	0x08032e00
 8022404:	08032e08 	.word	0x08032e08
 8022408:	08032e10 	.word	0x08032e10
 802240c:	08032e18 	.word	0x08032e18
 8022410:	08032e20 	.word	0x08032e20
 8022414:	08032e28 	.word	0x08032e28

08022418 <urlparse>:

static struct url urlparse(const char *url) {
 8022418:	b5b0      	push	{r4, r5, r7, lr}
 802241a:	b08a      	sub	sp, #40	@ 0x28
 802241c:	af00      	add	r7, sp, #0
 802241e:	6078      	str	r0, [r7, #4]
 8022420:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8022422:	f107 0308 	add.w	r3, r7, #8
 8022426:	221c      	movs	r2, #28
 8022428:	2100      	movs	r1, #0
 802242a:	4618      	mov	r0, r3
 802242c:	f003 fd94 	bl	8025f58 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8022430:	2300      	movs	r3, #0
 8022432:	627b      	str	r3, [r7, #36]	@ 0x24
 8022434:	e05b      	b.n	80224ee <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8022436:	683a      	ldr	r2, [r7, #0]
 8022438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802243a:	4413      	add	r3, r2
 802243c:	781b      	ldrb	r3, [r3, #0]
 802243e:	2b2f      	cmp	r3, #47	@ 0x2f
 8022440:	d112      	bne.n	8022468 <urlparse+0x50>
 8022442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022444:	2b00      	cmp	r3, #0
 8022446:	d00f      	beq.n	8022468 <urlparse+0x50>
 8022448:	697b      	ldr	r3, [r7, #20]
 802244a:	2b00      	cmp	r3, #0
 802244c:	d10c      	bne.n	8022468 <urlparse+0x50>
 802244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022450:	3b01      	subs	r3, #1
 8022452:	683a      	ldr	r2, [r7, #0]
 8022454:	4413      	add	r3, r2
 8022456:	781b      	ldrb	r3, [r3, #0]
 8022458:	2b2f      	cmp	r3, #47	@ 0x2f
 802245a:	d105      	bne.n	8022468 <urlparse+0x50>
      u.host = i + 1;
 802245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802245e:	3301      	adds	r3, #1
 8022460:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8022462:	2300      	movs	r3, #0
 8022464:	61bb      	str	r3, [r7, #24]
 8022466:	e03f      	b.n	80224e8 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8022468:	683a      	ldr	r2, [r7, #0]
 802246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802246c:	4413      	add	r3, r2
 802246e:	781b      	ldrb	r3, [r3, #0]
 8022470:	2b5d      	cmp	r3, #93	@ 0x5d
 8022472:	d102      	bne.n	802247a <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8022474:	2300      	movs	r3, #0
 8022476:	61bb      	str	r3, [r7, #24]
 8022478:	e036      	b.n	80224e8 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 802247a:	683a      	ldr	r2, [r7, #0]
 802247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802247e:	4413      	add	r3, r2
 8022480:	781b      	ldrb	r3, [r3, #0]
 8022482:	2b3a      	cmp	r3, #58	@ 0x3a
 8022484:	d109      	bne.n	802249a <urlparse+0x82>
 8022486:	69bb      	ldr	r3, [r7, #24]
 8022488:	2b00      	cmp	r3, #0
 802248a:	d106      	bne.n	802249a <urlparse+0x82>
 802248c:	69fb      	ldr	r3, [r7, #28]
 802248e:	2b00      	cmp	r3, #0
 8022490:	d103      	bne.n	802249a <urlparse+0x82>
      u.port = i + 1;
 8022492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022494:	3301      	adds	r3, #1
 8022496:	61bb      	str	r3, [r7, #24]
 8022498:	e026      	b.n	80224e8 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 802249a:	683a      	ldr	r2, [r7, #0]
 802249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802249e:	4413      	add	r3, r2
 80224a0:	781b      	ldrb	r3, [r3, #0]
 80224a2:	2b40      	cmp	r3, #64	@ 0x40
 80224a4:	d112      	bne.n	80224cc <urlparse+0xb4>
 80224a6:	68fb      	ldr	r3, [r7, #12]
 80224a8:	2b00      	cmp	r3, #0
 80224aa:	d10f      	bne.n	80224cc <urlparse+0xb4>
 80224ac:	693b      	ldr	r3, [r7, #16]
 80224ae:	2b00      	cmp	r3, #0
 80224b0:	d10c      	bne.n	80224cc <urlparse+0xb4>
 80224b2:	69fb      	ldr	r3, [r7, #28]
 80224b4:	2b00      	cmp	r3, #0
 80224b6:	d109      	bne.n	80224cc <urlparse+0xb4>
      u.user = u.host;
 80224b8:	697b      	ldr	r3, [r7, #20]
 80224ba:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 80224bc:	69bb      	ldr	r3, [r7, #24]
 80224be:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 80224c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224c2:	3301      	adds	r3, #1
 80224c4:	617b      	str	r3, [r7, #20]
      u.port = 0;
 80224c6:	2300      	movs	r3, #0
 80224c8:	61bb      	str	r3, [r7, #24]
 80224ca:	e00d      	b.n	80224e8 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 80224cc:	683a      	ldr	r2, [r7, #0]
 80224ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224d0:	4413      	add	r3, r2
 80224d2:	781b      	ldrb	r3, [r3, #0]
 80224d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80224d6:	d107      	bne.n	80224e8 <urlparse+0xd0>
 80224d8:	697b      	ldr	r3, [r7, #20]
 80224da:	2b00      	cmp	r3, #0
 80224dc:	d004      	beq.n	80224e8 <urlparse+0xd0>
 80224de:	69fb      	ldr	r3, [r7, #28]
 80224e0:	2b00      	cmp	r3, #0
 80224e2:	d101      	bne.n	80224e8 <urlparse+0xd0>
      u.uri = i;
 80224e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224e6:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 80224e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224ea:	3301      	adds	r3, #1
 80224ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80224ee:	683a      	ldr	r2, [r7, #0]
 80224f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224f2:	4413      	add	r3, r2
 80224f4:	781b      	ldrb	r3, [r3, #0]
 80224f6:	2b00      	cmp	r3, #0
 80224f8:	d19d      	bne.n	8022436 <urlparse+0x1e>
    }
  }
  u.end = i;
 80224fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224fc:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	461d      	mov	r5, r3
 8022502:	f107 0408 	add.w	r4, r7, #8
 8022506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802250a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802250e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8022512:	6878      	ldr	r0, [r7, #4]
 8022514:	3728      	adds	r7, #40	@ 0x28
 8022516:	46bd      	mov	sp, r7
 8022518:	bdb0      	pop	{r4, r5, r7, pc}

0802251a <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 802251a:	b580      	push	{r7, lr}
 802251c:	b08c      	sub	sp, #48	@ 0x30
 802251e:	af00      	add	r7, sp, #0
 8022520:	6078      	str	r0, [r7, #4]
 8022522:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8022524:	f107 0310 	add.w	r3, r7, #16
 8022528:	6839      	ldr	r1, [r7, #0]
 802252a:	4618      	mov	r0, r3
 802252c:	f7ff ff74 	bl	8022418 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8022530:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8022532:	2b00      	cmp	r3, #0
 8022534:	d004      	beq.n	8022540 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8022536:	6a3a      	ldr	r2, [r7, #32]
 8022538:	69fb      	ldr	r3, [r7, #28]
 802253a:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 802253c:	3b01      	subs	r3, #1
 802253e:	e009      	b.n	8022554 <mg_url_host+0x3a>
 8022540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8022542:	2b00      	cmp	r3, #0
 8022544:	d003      	beq.n	802254e <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8022546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022548:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 802254a:	1ad3      	subs	r3, r2, r3
 802254c:	e002      	b.n	8022554 <mg_url_host+0x3a>
 802254e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022550:	69fb      	ldr	r3, [r7, #28]
 8022552:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8022554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8022556:	69fb      	ldr	r3, [r7, #28]
 8022558:	683a      	ldr	r2, [r7, #0]
 802255a:	18d1      	adds	r1, r2, r3
 802255c:	f107 0308 	add.w	r3, r7, #8
 8022560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022562:	4618      	mov	r0, r3
 8022564:	f7ff f983 	bl	802186e <mg_str_n>
  return s;
 8022568:	687b      	ldr	r3, [r7, #4]
 802256a:	461a      	mov	r2, r3
 802256c:	f107 0308 	add.w	r3, r7, #8
 8022570:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022574:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8022578:	6878      	ldr	r0, [r7, #4]
 802257a:	3730      	adds	r7, #48	@ 0x30
 802257c:	46bd      	mov	sp, r7
 802257e:	bd80      	pop	{r7, pc}

08022580 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8022580:	b580      	push	{r7, lr}
 8022582:	b08a      	sub	sp, #40	@ 0x28
 8022584:	af00      	add	r7, sp, #0
 8022586:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8022588:	f107 0308 	add.w	r3, r7, #8
 802258c:	6879      	ldr	r1, [r7, #4]
 802258e:	4618      	mov	r0, r3
 8022590:	f7ff ff42 	bl	8022418 <urlparse>
  unsigned short port = 0;
 8022594:	2300      	movs	r3, #0
 8022596:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8022598:	2205      	movs	r2, #5
 802259a:	4925      	ldr	r1, [pc, #148]	@ (8022630 <mg_url_port+0xb0>)
 802259c:	6878      	ldr	r0, [r7, #4]
 802259e:	f003 fd10 	bl	8025fc2 <strncmp>
 80225a2:	4603      	mov	r3, r0
 80225a4:	2b00      	cmp	r3, #0
 80225a6:	d007      	beq.n	80225b8 <mg_url_port+0x38>
 80225a8:	2203      	movs	r2, #3
 80225aa:	4922      	ldr	r1, [pc, #136]	@ (8022634 <mg_url_port+0xb4>)
 80225ac:	6878      	ldr	r0, [r7, #4]
 80225ae:	f003 fd08 	bl	8025fc2 <strncmp>
 80225b2:	4603      	mov	r3, r0
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d101      	bne.n	80225bc <mg_url_port+0x3c>
 80225b8:	2350      	movs	r3, #80	@ 0x50
 80225ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 80225bc:	2204      	movs	r2, #4
 80225be:	491e      	ldr	r1, [pc, #120]	@ (8022638 <mg_url_port+0xb8>)
 80225c0:	6878      	ldr	r0, [r7, #4]
 80225c2:	f003 fcfe 	bl	8025fc2 <strncmp>
 80225c6:	4603      	mov	r3, r0
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	d007      	beq.n	80225dc <mg_url_port+0x5c>
 80225cc:	2206      	movs	r2, #6
 80225ce:	491b      	ldr	r1, [pc, #108]	@ (802263c <mg_url_port+0xbc>)
 80225d0:	6878      	ldr	r0, [r7, #4]
 80225d2:	f003 fcf6 	bl	8025fc2 <strncmp>
 80225d6:	4603      	mov	r3, r0
 80225d8:	2b00      	cmp	r3, #0
 80225da:	d102      	bne.n	80225e2 <mg_url_port+0x62>
    port = 443;
 80225dc:	f240 13bb 	movw	r3, #443	@ 0x1bb
 80225e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 80225e2:	2205      	movs	r2, #5
 80225e4:	4916      	ldr	r1, [pc, #88]	@ (8022640 <mg_url_port+0xc0>)
 80225e6:	6878      	ldr	r0, [r7, #4]
 80225e8:	f003 fceb 	bl	8025fc2 <strncmp>
 80225ec:	4603      	mov	r3, r0
 80225ee:	2b00      	cmp	r3, #0
 80225f0:	d102      	bne.n	80225f8 <mg_url_port+0x78>
 80225f2:	f240 735b 	movw	r3, #1883	@ 0x75b
 80225f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 80225f8:	2206      	movs	r2, #6
 80225fa:	4912      	ldr	r1, [pc, #72]	@ (8022644 <mg_url_port+0xc4>)
 80225fc:	6878      	ldr	r0, [r7, #4]
 80225fe:	f003 fce0 	bl	8025fc2 <strncmp>
 8022602:	4603      	mov	r3, r0
 8022604:	2b00      	cmp	r3, #0
 8022606:	d102      	bne.n	802260e <mg_url_port+0x8e>
 8022608:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 802260c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 802260e:	69bb      	ldr	r3, [r7, #24]
 8022610:	2b00      	cmp	r3, #0
 8022612:	d007      	beq.n	8022624 <mg_url_port+0xa4>
 8022614:	69bb      	ldr	r3, [r7, #24]
 8022616:	687a      	ldr	r2, [r7, #4]
 8022618:	4413      	add	r3, r2
 802261a:	4618      	mov	r0, r3
 802261c:	f000 fcda 	bl	8022fd4 <atoi>
 8022620:	4603      	mov	r3, r0
 8022622:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8022624:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8022626:	4618      	mov	r0, r3
 8022628:	3728      	adds	r7, #40	@ 0x28
 802262a:	46bd      	mov	sp, r7
 802262c:	bd80      	pop	{r7, pc}
 802262e:	bf00      	nop
 8022630:	08032e30 	.word	0x08032e30
 8022634:	08032e38 	.word	0x08032e38
 8022638:	08032e00 	.word	0x08032e00
 802263c:	08032e08 	.word	0x08032e08
 8022640:	08032e3c 	.word	0x08032e3c
 8022644:	08032e10 	.word	0x08032e10

08022648 <mg_bzero>:
#endif


// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8022648:	b480      	push	{r7}
 802264a:	b083      	sub	sp, #12
 802264c:	af00      	add	r7, sp, #0
 802264e:	6078      	str	r0, [r7, #4]
 8022650:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	2b00      	cmp	r3, #0
 8022656:	d00a      	beq.n	802266e <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8022658:	e004      	b.n	8022664 <mg_bzero+0x1c>
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	1c5a      	adds	r2, r3, #1
 802265e:	607a      	str	r2, [r7, #4]
 8022660:	2200      	movs	r2, #0
 8022662:	701a      	strb	r2, [r3, #0]
 8022664:	683b      	ldr	r3, [r7, #0]
 8022666:	1e5a      	subs	r2, r3, #1
 8022668:	603a      	str	r2, [r7, #0]
 802266a:	2b00      	cmp	r3, #0
 802266c:	d1f5      	bne.n	802265a <mg_bzero+0x12>
  }
}
 802266e:	bf00      	nop
 8022670:	370c      	adds	r7, #12
 8022672:	46bd      	mov	sp, r7
 8022674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022678:	4770      	bx	lr

0802267a <mg_random>:

#if MG_ENABLE_CUSTOM_RANDOM
#else
void mg_random(void *buf, size_t len) {
 802267a:	b580      	push	{r7, lr}
 802267c:	b084      	sub	sp, #16
 802267e:	af00      	add	r7, sp, #0
 8022680:	6078      	str	r0, [r7, #4]
 8022682:	6039      	str	r1, [r7, #0]
  bool done = false;
 8022684:	2300      	movs	r3, #0
 8022686:	72fb      	strb	r3, [r7, #11]
  unsigned char *p = (unsigned char *) buf;
 8022688:	687b      	ldr	r3, [r7, #4]
 802268a:	60fb      	str	r3, [r7, #12]
    if (fread(buf, 1, len, fp) == len) done = true;
    fclose(fp);
  }
#endif
  // If everything above did not work, fallback to a pseudo random generator
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 802268c:	e007      	b.n	802269e <mg_random+0x24>
 802268e:	f002 ff1d 	bl	80254cc <rand>
 8022692:	4601      	mov	r1, r0
 8022694:	68fb      	ldr	r3, [r7, #12]
 8022696:	1c5a      	adds	r2, r3, #1
 8022698:	60fa      	str	r2, [r7, #12]
 802269a:	b2ca      	uxtb	r2, r1
 802269c:	701a      	strb	r2, [r3, #0]
 802269e:	7afb      	ldrb	r3, [r7, #11]
 80226a0:	f083 0301 	eor.w	r3, r3, #1
 80226a4:	b2db      	uxtb	r3, r3
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	d004      	beq.n	80226b4 <mg_random+0x3a>
 80226aa:	683b      	ldr	r3, [r7, #0]
 80226ac:	1e5a      	subs	r2, r3, #1
 80226ae:	603a      	str	r2, [r7, #0]
 80226b0:	2b00      	cmp	r3, #0
 80226b2:	d1ec      	bne.n	802268e <mg_random+0x14>
}
 80226b4:	bf00      	nop
 80226b6:	3710      	adds	r7, #16
 80226b8:	46bd      	mov	sp, r7
 80226ba:	bd80      	pop	{r7, pc}

080226bc <mg_random_str>:
#endif

char *mg_random_str(char *buf, size_t len) {
 80226bc:	b580      	push	{r7, lr}
 80226be:	b084      	sub	sp, #16
 80226c0:	af00      	add	r7, sp, #0
 80226c2:	6078      	str	r0, [r7, #4]
 80226c4:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 80226c6:	6839      	ldr	r1, [r7, #0]
 80226c8:	6878      	ldr	r0, [r7, #4]
 80226ca:	f7ff ffd6 	bl	802267a <mg_random>
  for (i = 0; i < len; i++) {
 80226ce:	2300      	movs	r3, #0
 80226d0:	60fb      	str	r3, [r7, #12]
 80226d2:	e02d      	b.n	8022730 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 80226d4:	687a      	ldr	r2, [r7, #4]
 80226d6:	68fb      	ldr	r3, [r7, #12]
 80226d8:	4413      	add	r3, r2
 80226da:	781a      	ldrb	r2, [r3, #0]
 80226dc:	0853      	lsrs	r3, r2, #1
 80226de:	4919      	ldr	r1, [pc, #100]	@ (8022744 <mg_random_str+0x88>)
 80226e0:	fba1 1303 	umull	r1, r3, r1, r3
 80226e4:	0919      	lsrs	r1, r3, #4
 80226e6:	460b      	mov	r3, r1
 80226e8:	015b      	lsls	r3, r3, #5
 80226ea:	1a5b      	subs	r3, r3, r1
 80226ec:	005b      	lsls	r3, r3, #1
 80226ee:	1ad3      	subs	r3, r2, r3
 80226f0:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 80226f2:	683b      	ldr	r3, [r7, #0]
 80226f4:	3b01      	subs	r3, #1
 80226f6:	68fa      	ldr	r2, [r7, #12]
 80226f8:	429a      	cmp	r2, r3
 80226fa:	d011      	beq.n	8022720 <mg_random_str+0x64>
 80226fc:	7afb      	ldrb	r3, [r7, #11]
 80226fe:	2b19      	cmp	r3, #25
 8022700:	d803      	bhi.n	802270a <mg_random_str+0x4e>
 8022702:	7afb      	ldrb	r3, [r7, #11]
 8022704:	3361      	adds	r3, #97	@ 0x61
 8022706:	b2db      	uxtb	r3, r3
 8022708:	e00b      	b.n	8022722 <mg_random_str+0x66>
 802270a:	7afb      	ldrb	r3, [r7, #11]
 802270c:	2b33      	cmp	r3, #51	@ 0x33
 802270e:	d803      	bhi.n	8022718 <mg_random_str+0x5c>
 8022710:	7afb      	ldrb	r3, [r7, #11]
 8022712:	3327      	adds	r3, #39	@ 0x27
 8022714:	b2db      	uxtb	r3, r3
 8022716:	e004      	b.n	8022722 <mg_random_str+0x66>
 8022718:	7afb      	ldrb	r3, [r7, #11]
 802271a:	3b04      	subs	r3, #4
 802271c:	b2db      	uxtb	r3, r3
 802271e:	e000      	b.n	8022722 <mg_random_str+0x66>
 8022720:	2300      	movs	r3, #0
 8022722:	6879      	ldr	r1, [r7, #4]
 8022724:	68fa      	ldr	r2, [r7, #12]
 8022726:	440a      	add	r2, r1
 8022728:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 802272a:	68fb      	ldr	r3, [r7, #12]
 802272c:	3301      	adds	r3, #1
 802272e:	60fb      	str	r3, [r7, #12]
 8022730:	68fa      	ldr	r2, [r7, #12]
 8022732:	683b      	ldr	r3, [r7, #0]
 8022734:	429a      	cmp	r2, r3
 8022736:	d3cd      	bcc.n	80226d4 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8022738:	687b      	ldr	r3, [r7, #4]
}
 802273a:	4618      	mov	r0, r3
 802273c:	3710      	adds	r7, #16
 802273e:	46bd      	mov	sp, r7
 8022740:	bd80      	pop	{r7, pc}
 8022742:	bf00      	nop
 8022744:	84210843 	.word	0x84210843

08022748 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8022748:	b480      	push	{r7}
 802274a:	b085      	sub	sp, #20
 802274c:	af00      	add	r7, sp, #0
 802274e:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8022750:	2300      	movs	r3, #0
 8022752:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8022754:	687b      	ldr	r3, [r7, #4]
 8022756:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8022758:	7bfb      	ldrb	r3, [r7, #15]
 802275a:	461a      	mov	r2, r3
 802275c:	7bbb      	ldrb	r3, [r7, #14]
 802275e:	021b      	lsls	r3, r3, #8
 8022760:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8022762:	7b7b      	ldrb	r3, [r7, #13]
 8022764:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8022766:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8022768:	7b3b      	ldrb	r3, [r7, #12]
 802276a:	061b      	lsls	r3, r3, #24
 802276c:	4313      	orrs	r3, r2
}
 802276e:	4618      	mov	r0, r3
 8022770:	3714      	adds	r7, #20
 8022772:	46bd      	mov	sp, r7
 8022774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022778:	4770      	bx	lr

0802277a <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 802277a:	b480      	push	{r7}
 802277c:	b085      	sub	sp, #20
 802277e:	af00      	add	r7, sp, #0
 8022780:	4603      	mov	r3, r0
 8022782:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8022784:	2300      	movs	r3, #0
 8022786:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8022788:	88fb      	ldrh	r3, [r7, #6]
 802278a:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 802278c:	7b7b      	ldrb	r3, [r7, #13]
 802278e:	b21a      	sxth	r2, r3
 8022790:	7b3b      	ldrb	r3, [r7, #12]
 8022792:	021b      	lsls	r3, r3, #8
 8022794:	b21b      	sxth	r3, r3
 8022796:	4313      	orrs	r3, r2
 8022798:	b21b      	sxth	r3, r3
 802279a:	b29b      	uxth	r3, r3
}
 802279c:	4618      	mov	r0, r3
 802279e:	3714      	adds	r7, #20
 80227a0:	46bd      	mov	sp, r7
 80227a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227a6:	4770      	bx	lr

080227a8 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 80227a8:	b480      	push	{r7}
 80227aa:	b087      	sub	sp, #28
 80227ac:	af00      	add	r7, sp, #0
 80227ae:	60f8      	str	r0, [r7, #12]
 80227b0:	60b9      	str	r1, [r7, #8]
 80227b2:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 80227b4:	68fb      	ldr	r3, [r7, #12]
 80227b6:	43db      	mvns	r3, r3
 80227b8:	60fb      	str	r3, [r7, #12]
  while (len--) {
 80227ba:	e01f      	b.n	80227fc <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 80227bc:	68bb      	ldr	r3, [r7, #8]
 80227be:	1c5a      	adds	r2, r3, #1
 80227c0:	60ba      	str	r2, [r7, #8]
 80227c2:	781b      	ldrb	r3, [r3, #0]
 80227c4:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 80227c6:	7dfa      	ldrb	r2, [r7, #23]
 80227c8:	68fb      	ldr	r3, [r7, #12]
 80227ca:	4053      	eors	r3, r2
 80227cc:	f003 030f 	and.w	r3, r3, #15
 80227d0:	4a11      	ldr	r2, [pc, #68]	@ (8022818 <mg_crc32+0x70>)
 80227d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80227d6:	68fb      	ldr	r3, [r7, #12]
 80227d8:	091b      	lsrs	r3, r3, #4
 80227da:	4053      	eors	r3, r2
 80227dc:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 80227de:	7dfb      	ldrb	r3, [r7, #23]
 80227e0:	091b      	lsrs	r3, r3, #4
 80227e2:	b2db      	uxtb	r3, r3
 80227e4:	461a      	mov	r2, r3
 80227e6:	68fb      	ldr	r3, [r7, #12]
 80227e8:	4053      	eors	r3, r2
 80227ea:	f003 030f 	and.w	r3, r3, #15
 80227ee:	4a0a      	ldr	r2, [pc, #40]	@ (8022818 <mg_crc32+0x70>)
 80227f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80227f4:	68fb      	ldr	r3, [r7, #12]
 80227f6:	091b      	lsrs	r3, r3, #4
 80227f8:	4053      	eors	r3, r2
 80227fa:	60fb      	str	r3, [r7, #12]
  while (len--) {
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	1e5a      	subs	r2, r3, #1
 8022800:	607a      	str	r2, [r7, #4]
 8022802:	2b00      	cmp	r3, #0
 8022804:	d1da      	bne.n	80227bc <mg_crc32+0x14>
  }
  return ~crc;
 8022806:	68fb      	ldr	r3, [r7, #12]
 8022808:	43db      	mvns	r3, r3
}
 802280a:	4618      	mov	r0, r3
 802280c:	371c      	adds	r7, #28
 802280e:	46bd      	mov	sp, r7
 8022810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022814:	4770      	bx	lr
 8022816:	bf00      	nop
 8022818:	08033fbc 	.word	0x08033fbc

0802281c <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 802281c:	b480      	push	{r7}
 802281e:	b085      	sub	sp, #20
 8022820:	af00      	add	r7, sp, #0
 8022822:	463b      	mov	r3, r7
 8022824:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8022828:	683b      	ldr	r3, [r7, #0]
 802282a:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 802282c:	687b      	ldr	r3, [r7, #4]
 802282e:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8022830:	683b      	ldr	r3, [r7, #0]
 8022832:	781b      	ldrb	r3, [r3, #0]
 8022834:	2b2e      	cmp	r3, #46	@ 0x2e
 8022836:	d123      	bne.n	8022880 <mg_path_is_sane+0x64>
 8022838:	683b      	ldr	r3, [r7, #0]
 802283a:	3301      	adds	r3, #1
 802283c:	781b      	ldrb	r3, [r3, #0]
 802283e:	2b2e      	cmp	r3, #46	@ 0x2e
 8022840:	d11e      	bne.n	8022880 <mg_path_is_sane+0x64>
 8022842:	2300      	movs	r3, #0
 8022844:	e024      	b.n	8022890 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8022846:	68fb      	ldr	r3, [r7, #12]
 8022848:	781b      	ldrb	r3, [r3, #0]
 802284a:	2b2f      	cmp	r3, #47	@ 0x2f
 802284c:	d003      	beq.n	8022856 <mg_path_is_sane+0x3a>
 802284e:	68fb      	ldr	r3, [r7, #12]
 8022850:	781b      	ldrb	r3, [r3, #0]
 8022852:	2b5c      	cmp	r3, #92	@ 0x5c
 8022854:	d10e      	bne.n	8022874 <mg_path_is_sane+0x58>
 8022856:	68bb      	ldr	r3, [r7, #8]
 8022858:	2b01      	cmp	r3, #1
 802285a:	d90b      	bls.n	8022874 <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 802285c:	68fb      	ldr	r3, [r7, #12]
 802285e:	3301      	adds	r3, #1
 8022860:	781b      	ldrb	r3, [r3, #0]
 8022862:	2b2e      	cmp	r3, #46	@ 0x2e
 8022864:	d106      	bne.n	8022874 <mg_path_is_sane+0x58>
 8022866:	68fb      	ldr	r3, [r7, #12]
 8022868:	3302      	adds	r3, #2
 802286a:	781b      	ldrb	r3, [r3, #0]
 802286c:	2b2e      	cmp	r3, #46	@ 0x2e
 802286e:	d101      	bne.n	8022874 <mg_path_is_sane+0x58>
 8022870:	2300      	movs	r3, #0
 8022872:	e00d      	b.n	8022890 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8022874:	68fb      	ldr	r3, [r7, #12]
 8022876:	3301      	adds	r3, #1
 8022878:	60fb      	str	r3, [r7, #12]
 802287a:	68bb      	ldr	r3, [r7, #8]
 802287c:	3b01      	subs	r3, #1
 802287e:	60bb      	str	r3, [r7, #8]
 8022880:	68fb      	ldr	r3, [r7, #12]
 8022882:	781b      	ldrb	r3, [r3, #0]
 8022884:	2b00      	cmp	r3, #0
 8022886:	d002      	beq.n	802288e <mg_path_is_sane+0x72>
 8022888:	68bb      	ldr	r3, [r7, #8]
 802288a:	2b00      	cmp	r3, #0
 802288c:	d1db      	bne.n	8022846 <mg_path_is_sane+0x2a>
    }
  }
  return true;
 802288e:	2301      	movs	r3, #1
}
 8022890:	4618      	mov	r0, r3
 8022892:	3714      	adds	r7, #20
 8022894:	46bd      	mov	sp, r7
 8022896:	f85d 7b04 	ldr.w	r7, [sp], #4
 802289a:	4770      	bx	lr

0802289c <mg_millis>:

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 802289c:	b5b0      	push	{r4, r5, r7, lr}
 802289e:	af00      	add	r7, sp, #0
  return GetTickCount();
#elif MG_ARCH == MG_ARCH_RP2040
  return time_us_64() / 1000;
#elif MG_ARCH == MG_ARCH_ESP8266 || MG_ARCH == MG_ARCH_ESP32 || \
    MG_ARCH == MG_ARCH_FREERTOS
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 80228a0:	f7e8 f9d6 	bl	800ac50 <xTaskGetTickCount>
 80228a4:	4603      	mov	r3, r0
 80228a6:	2200      	movs	r2, #0
 80228a8:	461c      	mov	r4, r3
 80228aa:	4615      	mov	r5, r2
 80228ac:	4622      	mov	r2, r4
 80228ae:	462b      	mov	r3, r5
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 80228b0:	4610      	mov	r0, r2
 80228b2:	4619      	mov	r1, r3
 80228b4:	bdb0      	pop	{r4, r5, r7, pc}

080228b6 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 80228b6:	b580      	push	{r7, lr}
 80228b8:	b086      	sub	sp, #24
 80228ba:	af00      	add	r7, sp, #0
 80228bc:	6078      	str	r0, [r7, #4]
 80228be:	4608      	mov	r0, r1
 80228c0:	4611      	mov	r1, r2
 80228c2:	461a      	mov	r2, r3
 80228c4:	4603      	mov	r3, r0
 80228c6:	70fb      	strb	r3, [r7, #3]
 80228c8:	460b      	mov	r3, r1
 80228ca:	803b      	strh	r3, [r7, #0]
 80228cc:	4613      	mov	r3, r2
 80228ce:	70bb      	strb	r3, [r7, #2]
  size_t i;
  uint8_t *p = (uint8_t *) buf;
 80228d0:	6a3b      	ldr	r3, [r7, #32]
 80228d2:	613b      	str	r3, [r7, #16]
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 80228d4:	883b      	ldrh	r3, [r7, #0]
 80228d6:	0a1b      	lsrs	r3, r3, #8
 80228d8:	b29b      	uxth	r3, r3
 80228da:	b2db      	uxtb	r3, r3
 80228dc:	733b      	strb	r3, [r7, #12]
 80228de:	883b      	ldrh	r3, [r7, #0]
 80228e0:	b2db      	uxtb	r3, r3
 80228e2:	737b      	strb	r3, [r7, #13]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 80228e4:	78fb      	ldrb	r3, [r7, #3]
 80228e6:	00db      	lsls	r3, r3, #3
 80228e8:	b25b      	sxtb	r3, r3
 80228ea:	78ba      	ldrb	r2, [r7, #2]
 80228ec:	2a00      	cmp	r2, #0
 80228ee:	d001      	beq.n	80228f4 <w5500_txn+0x3e>
 80228f0:	2204      	movs	r2, #4
 80228f2:	e000      	b.n	80228f6 <w5500_txn+0x40>
 80228f4:	2200      	movs	r2, #0
 80228f6:	4313      	orrs	r3, r2
 80228f8:	b25b      	sxtb	r3, r3
 80228fa:	b2db      	uxtb	r3, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 80228fc:	73bb      	strb	r3, [r7, #14]
  s->begin(s->spi);
 80228fe:	687b      	ldr	r3, [r7, #4]
 8022900:	685b      	ldr	r3, [r3, #4]
 8022902:	687a      	ldr	r2, [r7, #4]
 8022904:	6812      	ldr	r2, [r2, #0]
 8022906:	4610      	mov	r0, r2
 8022908:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 802290a:	2300      	movs	r3, #0
 802290c:	617b      	str	r3, [r7, #20]
 802290e:	e00d      	b.n	802292c <w5500_txn+0x76>
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	68db      	ldr	r3, [r3, #12]
 8022914:	687a      	ldr	r2, [r7, #4]
 8022916:	6810      	ldr	r0, [r2, #0]
 8022918:	f107 010c 	add.w	r1, r7, #12
 802291c:	697a      	ldr	r2, [r7, #20]
 802291e:	440a      	add	r2, r1
 8022920:	7812      	ldrb	r2, [r2, #0]
 8022922:	4611      	mov	r1, r2
 8022924:	4798      	blx	r3
 8022926:	697b      	ldr	r3, [r7, #20]
 8022928:	3301      	adds	r3, #1
 802292a:	617b      	str	r3, [r7, #20]
 802292c:	697b      	ldr	r3, [r7, #20]
 802292e:	2b02      	cmp	r3, #2
 8022930:	d9ee      	bls.n	8022910 <w5500_txn+0x5a>
  for (i = 0; i < len; i++) {
 8022932:	2300      	movs	r3, #0
 8022934:	617b      	str	r3, [r7, #20]
 8022936:	e019      	b.n	802296c <w5500_txn+0xb6>
    uint8_t r = s->txn(s->spi, p[i]);
 8022938:	687b      	ldr	r3, [r7, #4]
 802293a:	68db      	ldr	r3, [r3, #12]
 802293c:	687a      	ldr	r2, [r7, #4]
 802293e:	6810      	ldr	r0, [r2, #0]
 8022940:	6939      	ldr	r1, [r7, #16]
 8022942:	697a      	ldr	r2, [r7, #20]
 8022944:	440a      	add	r2, r1
 8022946:	7812      	ldrb	r2, [r2, #0]
 8022948:	4611      	mov	r1, r2
 802294a:	4798      	blx	r3
 802294c:	4603      	mov	r3, r0
 802294e:	73fb      	strb	r3, [r7, #15]
    if (!wr) p[i] = r;
 8022950:	78bb      	ldrb	r3, [r7, #2]
 8022952:	f083 0301 	eor.w	r3, r3, #1
 8022956:	b2db      	uxtb	r3, r3
 8022958:	2b00      	cmp	r3, #0
 802295a:	d004      	beq.n	8022966 <w5500_txn+0xb0>
 802295c:	693a      	ldr	r2, [r7, #16]
 802295e:	697b      	ldr	r3, [r7, #20]
 8022960:	4413      	add	r3, r2
 8022962:	7bfa      	ldrb	r2, [r7, #15]
 8022964:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8022966:	697b      	ldr	r3, [r7, #20]
 8022968:	3301      	adds	r3, #1
 802296a:	617b      	str	r3, [r7, #20]
 802296c:	697a      	ldr	r2, [r7, #20]
 802296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022970:	429a      	cmp	r2, r3
 8022972:	d3e1      	bcc.n	8022938 <w5500_txn+0x82>
  }
  s->end(s->spi);
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	689b      	ldr	r3, [r3, #8]
 8022978:	687a      	ldr	r2, [r7, #4]
 802297a:	6812      	ldr	r2, [r2, #0]
 802297c:	4610      	mov	r0, r2
 802297e:	4798      	blx	r3
}
 8022980:	bf00      	nop
 8022982:	3718      	adds	r7, #24
 8022984:	46bd      	mov	sp, r7
 8022986:	bd80      	pop	{r7, pc}

08022988 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8022988:	b580      	push	{r7, lr}
 802298a:	b086      	sub	sp, #24
 802298c:	af02      	add	r7, sp, #8
 802298e:	60f8      	str	r0, [r7, #12]
 8022990:	607b      	str	r3, [r7, #4]
 8022992:	460b      	mov	r3, r1
 8022994:	72fb      	strb	r3, [r7, #11]
 8022996:	4613      	mov	r3, r2
 8022998:	813b      	strh	r3, [r7, #8]
 802299a:	893a      	ldrh	r2, [r7, #8]
 802299c:	7af9      	ldrb	r1, [r7, #11]
 802299e:	69bb      	ldr	r3, [r7, #24]
 80229a0:	9301      	str	r3, [sp, #4]
 80229a2:	687b      	ldr	r3, [r7, #4]
 80229a4:	9300      	str	r3, [sp, #0]
 80229a6:	2301      	movs	r3, #1
 80229a8:	68f8      	ldr	r0, [r7, #12]
 80229aa:	f7ff ff84 	bl	80228b6 <w5500_txn>
 80229ae:	bf00      	nop
 80229b0:	3710      	adds	r7, #16
 80229b2:	46bd      	mov	sp, r7
 80229b4:	bd80      	pop	{r7, pc}

080229b6 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 80229b6:	b580      	push	{r7, lr}
 80229b8:	b084      	sub	sp, #16
 80229ba:	af02      	add	r7, sp, #8
 80229bc:	6078      	str	r0, [r7, #4]
 80229be:	4608      	mov	r0, r1
 80229c0:	4611      	mov	r1, r2
 80229c2:	461a      	mov	r2, r3
 80229c4:	4603      	mov	r3, r0
 80229c6:	70fb      	strb	r3, [r7, #3]
 80229c8:	460b      	mov	r3, r1
 80229ca:	803b      	strh	r3, [r7, #0]
 80229cc:	4613      	mov	r3, r2
 80229ce:	70bb      	strb	r3, [r7, #2]
 80229d0:	1cbb      	adds	r3, r7, #2
 80229d2:	883a      	ldrh	r2, [r7, #0]
 80229d4:	78f9      	ldrb	r1, [r7, #3]
 80229d6:	2001      	movs	r0, #1
 80229d8:	9000      	str	r0, [sp, #0]
 80229da:	6878      	ldr	r0, [r7, #4]
 80229dc:	f7ff ffd4 	bl	8022988 <w5500_wn>
 80229e0:	bf00      	nop
 80229e2:	3708      	adds	r7, #8
 80229e4:	46bd      	mov	sp, r7
 80229e6:	bd80      	pop	{r7, pc}

080229e8 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 80229e8:	b580      	push	{r7, lr}
 80229ea:	b088      	sub	sp, #32
 80229ec:	af02      	add	r7, sp, #8
 80229ee:	60f8      	str	r0, [r7, #12]
 80229f0:	4608      	mov	r0, r1
 80229f2:	4611      	mov	r1, r2
 80229f4:	461a      	mov	r2, r3
 80229f6:	4603      	mov	r3, r0
 80229f8:	72fb      	strb	r3, [r7, #11]
 80229fa:	460b      	mov	r3, r1
 80229fc:	813b      	strh	r3, [r7, #8]
 80229fe:	4613      	mov	r3, r2
 8022a00:	80fb      	strh	r3, [r7, #6]
 8022a02:	88fb      	ldrh	r3, [r7, #6]
 8022a04:	0a1b      	lsrs	r3, r3, #8
 8022a06:	b29b      	uxth	r3, r3
 8022a08:	b2db      	uxtb	r3, r3
 8022a0a:	753b      	strb	r3, [r7, #20]
 8022a0c:	88fb      	ldrh	r3, [r7, #6]
 8022a0e:	b2db      	uxtb	r3, r3
 8022a10:	757b      	strb	r3, [r7, #21]
 8022a12:	f107 0314 	add.w	r3, r7, #20
 8022a16:	893a      	ldrh	r2, [r7, #8]
 8022a18:	7af9      	ldrb	r1, [r7, #11]
 8022a1a:	2002      	movs	r0, #2
 8022a1c:	9000      	str	r0, [sp, #0]
 8022a1e:	68f8      	ldr	r0, [r7, #12]
 8022a20:	f7ff ffb2 	bl	8022988 <w5500_wn>
 8022a24:	bf00      	nop
 8022a26:	3718      	adds	r7, #24
 8022a28:	46bd      	mov	sp, r7
 8022a2a:	bd80      	pop	{r7, pc}

08022a2c <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8022a2c:	b580      	push	{r7, lr}
 8022a2e:	b086      	sub	sp, #24
 8022a30:	af02      	add	r7, sp, #8
 8022a32:	60f8      	str	r0, [r7, #12]
 8022a34:	607b      	str	r3, [r7, #4]
 8022a36:	460b      	mov	r3, r1
 8022a38:	72fb      	strb	r3, [r7, #11]
 8022a3a:	4613      	mov	r3, r2
 8022a3c:	813b      	strh	r3, [r7, #8]
 8022a3e:	893a      	ldrh	r2, [r7, #8]
 8022a40:	7af9      	ldrb	r1, [r7, #11]
 8022a42:	69bb      	ldr	r3, [r7, #24]
 8022a44:	9301      	str	r3, [sp, #4]
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	9300      	str	r3, [sp, #0]
 8022a4a:	2300      	movs	r3, #0
 8022a4c:	68f8      	ldr	r0, [r7, #12]
 8022a4e:	f7ff ff32 	bl	80228b6 <w5500_txn>
 8022a52:	bf00      	nop
 8022a54:	3710      	adds	r7, #16
 8022a56:	46bd      	mov	sp, r7
 8022a58:	bd80      	pop	{r7, pc}

08022a5a <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 8022a5a:	b580      	push	{r7, lr}
 8022a5c:	b086      	sub	sp, #24
 8022a5e:	af02      	add	r7, sp, #8
 8022a60:	6078      	str	r0, [r7, #4]
 8022a62:	460b      	mov	r3, r1
 8022a64:	70fb      	strb	r3, [r7, #3]
 8022a66:	4613      	mov	r3, r2
 8022a68:	803b      	strh	r3, [r7, #0]
 8022a6a:	2300      	movs	r3, #0
 8022a6c:	73fb      	strb	r3, [r7, #15]
 8022a6e:	f107 030f 	add.w	r3, r7, #15
 8022a72:	883a      	ldrh	r2, [r7, #0]
 8022a74:	78f9      	ldrb	r1, [r7, #3]
 8022a76:	2001      	movs	r0, #1
 8022a78:	9000      	str	r0, [sp, #0]
 8022a7a:	6878      	ldr	r0, [r7, #4]
 8022a7c:	f7ff ffd6 	bl	8022a2c <w5500_rn>
 8022a80:	7bfb      	ldrb	r3, [r7, #15]
 8022a82:	4618      	mov	r0, r3
 8022a84:	3710      	adds	r7, #16
 8022a86:	46bd      	mov	sp, r7
 8022a88:	bd80      	pop	{r7, pc}

08022a8a <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 8022a8a:	b580      	push	{r7, lr}
 8022a8c:	b086      	sub	sp, #24
 8022a8e:	af02      	add	r7, sp, #8
 8022a90:	6078      	str	r0, [r7, #4]
 8022a92:	460b      	mov	r3, r1
 8022a94:	70fb      	strb	r3, [r7, #3]
 8022a96:	4613      	mov	r3, r2
 8022a98:	803b      	strh	r3, [r7, #0]
 8022a9a:	2300      	movs	r3, #0
 8022a9c:	81bb      	strh	r3, [r7, #12]
 8022a9e:	f107 030c 	add.w	r3, r7, #12
 8022aa2:	883a      	ldrh	r2, [r7, #0]
 8022aa4:	78f9      	ldrb	r1, [r7, #3]
 8022aa6:	2002      	movs	r0, #2
 8022aa8:	9000      	str	r0, [sp, #0]
 8022aaa:	6878      	ldr	r0, [r7, #4]
 8022aac:	f7ff ffbe 	bl	8022a2c <w5500_rn>
 8022ab0:	7b3b      	ldrb	r3, [r7, #12]
 8022ab2:	021b      	lsls	r3, r3, #8
 8022ab4:	b21a      	sxth	r2, r3
 8022ab6:	7b7b      	ldrb	r3, [r7, #13]
 8022ab8:	b21b      	sxth	r3, r3
 8022aba:	4313      	orrs	r3, r2
 8022abc:	b21b      	sxth	r3, r3
 8022abe:	b29b      	uxth	r3, r3
 8022ac0:	4618      	mov	r0, r3
 8022ac2:	3710      	adds	r7, #16
 8022ac4:	46bd      	mov	sp, r7
 8022ac6:	bd80      	pop	{r7, pc}

08022ac8 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8022ac8:	b580      	push	{r7, lr}
 8022aca:	b08a      	sub	sp, #40	@ 0x28
 8022acc:	af02      	add	r7, sp, #8
 8022ace:	60f8      	str	r0, [r7, #12]
 8022ad0:	60b9      	str	r1, [r7, #8]
 8022ad2:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022ad8:	61bb      	str	r3, [r7, #24]
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8022ada:	2300      	movs	r3, #0
 8022adc:	83fb      	strh	r3, [r7, #30]
 8022ade:	2300      	movs	r3, #0
 8022ae0:	83bb      	strh	r3, [r7, #28]
 8022ae2:	68bb      	ldr	r3, [r7, #8]
 8022ae4:	82fb      	strh	r3, [r7, #22]
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8022ae6:	e001      	b.n	8022aec <w5500_rx+0x24>
 8022ae8:	8abb      	ldrh	r3, [r7, #20]
 8022aea:	83bb      	strh	r3, [r7, #28]
 8022aec:	2226      	movs	r2, #38	@ 0x26
 8022aee:	2101      	movs	r1, #1
 8022af0:	69b8      	ldr	r0, [r7, #24]
 8022af2:	f7ff ffca 	bl	8022a8a <w5500_r2>
 8022af6:	4603      	mov	r3, r0
 8022af8:	82bb      	strh	r3, [r7, #20]
 8022afa:	8aba      	ldrh	r2, [r7, #20]
 8022afc:	8bbb      	ldrh	r3, [r7, #28]
 8022afe:	429a      	cmp	r2, r3
 8022b00:	d8f2      	bhi.n	8022ae8 <w5500_rx+0x20>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8022b02:	8bbb      	ldrh	r3, [r7, #28]
 8022b04:	2b00      	cmp	r3, #0
 8022b06:	d032      	beq.n	8022b6e <w5500_rx+0xa6>
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8022b08:	2228      	movs	r2, #40	@ 0x28
 8022b0a:	2101      	movs	r1, #1
 8022b0c:	69b8      	ldr	r0, [r7, #24]
 8022b0e:	f7ff ffbc 	bl	8022a8a <w5500_r2>
 8022b12:	4603      	mov	r3, r0
 8022b14:	827b      	strh	r3, [r7, #18]
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8022b16:	8a7b      	ldrh	r3, [r7, #18]
 8022b18:	461a      	mov	r2, r3
 8022b1a:	2103      	movs	r1, #3
 8022b1c:	69b8      	ldr	r0, [r7, #24]
 8022b1e:	f7ff ffb4 	bl	8022a8a <w5500_r2>
 8022b22:	4603      	mov	r3, r0
 8022b24:	83bb      	strh	r3, [r7, #28]
    if (n <= len + 2 && n > 1) {
 8022b26:	8bba      	ldrh	r2, [r7, #28]
 8022b28:	8afb      	ldrh	r3, [r7, #22]
 8022b2a:	3302      	adds	r3, #2
 8022b2c:	429a      	cmp	r2, r3
 8022b2e:	dc0f      	bgt.n	8022b50 <w5500_rx+0x88>
 8022b30:	8bbb      	ldrh	r3, [r7, #28]
 8022b32:	2b01      	cmp	r3, #1
 8022b34:	d90c      	bls.n	8022b50 <w5500_rx+0x88>
      r = (uint16_t) (n - 2);
 8022b36:	8bbb      	ldrh	r3, [r7, #28]
 8022b38:	3b02      	subs	r3, #2
 8022b3a:	83fb      	strh	r3, [r7, #30]
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8022b3c:	8a7b      	ldrh	r3, [r7, #18]
 8022b3e:	3302      	adds	r3, #2
 8022b40:	b29a      	uxth	r2, r3
 8022b42:	8bfb      	ldrh	r3, [r7, #30]
 8022b44:	9300      	str	r3, [sp, #0]
 8022b46:	68fb      	ldr	r3, [r7, #12]
 8022b48:	2103      	movs	r1, #3
 8022b4a:	69b8      	ldr	r0, [r7, #24]
 8022b4c:	f7ff ff6e 	bl	8022a2c <w5500_rn>
    }
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8022b50:	8a7a      	ldrh	r2, [r7, #18]
 8022b52:	8bbb      	ldrh	r3, [r7, #28]
 8022b54:	4413      	add	r3, r2
 8022b56:	b29b      	uxth	r3, r3
 8022b58:	2228      	movs	r2, #40	@ 0x28
 8022b5a:	2101      	movs	r1, #1
 8022b5c:	69b8      	ldr	r0, [r7, #24]
 8022b5e:	f7ff ff43 	bl	80229e8 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8022b62:	2340      	movs	r3, #64	@ 0x40
 8022b64:	2201      	movs	r2, #1
 8022b66:	2101      	movs	r1, #1
 8022b68:	69b8      	ldr	r0, [r7, #24]
 8022b6a:	f7ff ff24 	bl	80229b6 <w5500_w1>
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
 8022b6e:	8bfb      	ldrh	r3, [r7, #30]
}
 8022b70:	4618      	mov	r0, r3
 8022b72:	3720      	adds	r7, #32
 8022b74:	46bd      	mov	sp, r7
 8022b76:	bd80      	pop	{r7, pc}

08022b78 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 8022b78:	b580      	push	{r7, lr}
 8022b7a:	b08a      	sub	sp, #40	@ 0x28
 8022b7c:	af02      	add	r7, sp, #8
 8022b7e:	60f8      	str	r0, [r7, #12]
 8022b80:	60b9      	str	r1, [r7, #8]
 8022b82:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022b84:	687b      	ldr	r3, [r7, #4]
 8022b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022b88:	617b      	str	r3, [r7, #20]
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8022b8a:	2300      	movs	r3, #0
 8022b8c:	83bb      	strh	r3, [r7, #28]
 8022b8e:	68bb      	ldr	r3, [r7, #8]
 8022b90:	837b      	strh	r3, [r7, #26]
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 8022b92:	e006      	b.n	8022ba2 <w5500_tx+0x2a>
 8022b94:	2220      	movs	r2, #32
 8022b96:	2101      	movs	r1, #1
 8022b98:	6978      	ldr	r0, [r7, #20]
 8022b9a:	f7ff ff76 	bl	8022a8a <w5500_r2>
 8022b9e:	4603      	mov	r3, r0
 8022ba0:	83bb      	strh	r3, [r7, #28]
 8022ba2:	8bba      	ldrh	r2, [r7, #28]
 8022ba4:	8b7b      	ldrh	r3, [r7, #26]
 8022ba6:	429a      	cmp	r2, r3
 8022ba8:	d3f4      	bcc.n	8022b94 <w5500_tx+0x1c>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 8022baa:	2224      	movs	r2, #36	@ 0x24
 8022bac:	2101      	movs	r1, #1
 8022bae:	6978      	ldr	r0, [r7, #20]
 8022bb0:	f7ff ff6b 	bl	8022a8a <w5500_r2>
 8022bb4:	4603      	mov	r3, r0
 8022bb6:	827b      	strh	r3, [r7, #18]
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8022bb8:	8b7b      	ldrh	r3, [r7, #26]
 8022bba:	8a7a      	ldrh	r2, [r7, #18]
 8022bbc:	9300      	str	r3, [sp, #0]
 8022bbe:	68fb      	ldr	r3, [r7, #12]
 8022bc0:	2102      	movs	r1, #2
 8022bc2:	6978      	ldr	r0, [r7, #20]
 8022bc4:	f7ff fee0 	bl	8022988 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8022bc8:	8a7a      	ldrh	r2, [r7, #18]
 8022bca:	8b7b      	ldrh	r3, [r7, #26]
 8022bcc:	4413      	add	r3, r2
 8022bce:	b29b      	uxth	r3, r3
 8022bd0:	2224      	movs	r2, #36	@ 0x24
 8022bd2:	2101      	movs	r1, #1
 8022bd4:	6978      	ldr	r0, [r7, #20]
 8022bd6:	f7ff ff07 	bl	80229e8 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8022bda:	2320      	movs	r3, #32
 8022bdc:	2201      	movs	r2, #1
 8022bde:	2101      	movs	r1, #1
 8022be0:	6978      	ldr	r0, [r7, #20]
 8022be2:	f7ff fee8 	bl	80229b6 <w5500_w1>
  for (i = 0; i < 40; i++) {
 8022be6:	2300      	movs	r3, #0
 8022be8:	83fb      	strh	r3, [r7, #30]
 8022bea:	e020      	b.n	8022c2e <w5500_tx+0xb6>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8022bec:	2202      	movs	r2, #2
 8022bee:	2101      	movs	r1, #1
 8022bf0:	6978      	ldr	r0, [r7, #20]
 8022bf2:	f7ff ff32 	bl	8022a5a <w5500_r1>
 8022bf6:	4603      	mov	r3, r0
 8022bf8:	747b      	strb	r3, [r7, #17]
    if (ir == 0) continue;
 8022bfa:	7c7b      	ldrb	r3, [r7, #17]
 8022bfc:	2b00      	cmp	r3, #0
 8022bfe:	d012      	beq.n	8022c26 <w5500_tx+0xae>
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8022c00:	7c7b      	ldrb	r3, [r7, #17]
 8022c02:	2202      	movs	r2, #2
 8022c04:	2101      	movs	r1, #1
 8022c06:	6978      	ldr	r0, [r7, #20]
 8022c08:	f7ff fed5 	bl	80229b6 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 8022c0c:	7c7b      	ldrb	r3, [r7, #17]
 8022c0e:	f003 0308 	and.w	r3, r3, #8
 8022c12:	2b00      	cmp	r3, #0
 8022c14:	d001      	beq.n	8022c1a <w5500_tx+0xa2>
 8022c16:	2300      	movs	r3, #0
 8022c18:	837b      	strh	r3, [r7, #26]
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8022c1a:	7c7b      	ldrb	r3, [r7, #17]
 8022c1c:	f003 0318 	and.w	r3, r3, #24
 8022c20:	2b00      	cmp	r3, #0
 8022c22:	d108      	bne.n	8022c36 <w5500_tx+0xbe>
 8022c24:	e000      	b.n	8022c28 <w5500_tx+0xb0>
    if (ir == 0) continue;
 8022c26:	bf00      	nop
  for (i = 0; i < 40; i++) {
 8022c28:	8bfb      	ldrh	r3, [r7, #30]
 8022c2a:	3301      	adds	r3, #1
 8022c2c:	83fb      	strh	r3, [r7, #30]
 8022c2e:	8bfb      	ldrh	r3, [r7, #30]
 8022c30:	2b27      	cmp	r3, #39	@ 0x27
 8022c32:	d9db      	bls.n	8022bec <w5500_tx+0x74>
 8022c34:	e000      	b.n	8022c38 <w5500_tx+0xc0>
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8022c36:	bf00      	nop
  }
  return len;
 8022c38:	8b7b      	ldrh	r3, [r7, #26]
}
 8022c3a:	4618      	mov	r0, r3
 8022c3c:	3720      	adds	r7, #32
 8022c3e:	46bd      	mov	sp, r7
 8022c40:	bd80      	pop	{r7, pc}

08022c42 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8022c42:	b580      	push	{r7, lr}
 8022c44:	b084      	sub	sp, #16
 8022c46:	af00      	add	r7, sp, #0
 8022c48:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022c4e:	60fb      	str	r3, [r7, #12]
  s->end(s->spi);
 8022c50:	68fb      	ldr	r3, [r7, #12]
 8022c52:	689b      	ldr	r3, [r3, #8]
 8022c54:	68fa      	ldr	r2, [r7, #12]
 8022c56:	6812      	ldr	r2, [r2, #0]
 8022c58:	4610      	mov	r0, r2
 8022c5a:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 8022c5c:	2380      	movs	r3, #128	@ 0x80
 8022c5e:	2200      	movs	r2, #0
 8022c60:	2100      	movs	r1, #0
 8022c62:	68f8      	ldr	r0, [r7, #12]
 8022c64:	f7ff fea7 	bl	80229b6 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8022c68:	2300      	movs	r3, #0
 8022c6a:	222e      	movs	r2, #46	@ 0x2e
 8022c6c:	2100      	movs	r1, #0
 8022c6e:	68f8      	ldr	r0, [r7, #12]
 8022c70:	f7ff fea1 	bl	80229b6 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8022c74:	23f8      	movs	r3, #248	@ 0xf8
 8022c76:	222e      	movs	r2, #46	@ 0x2e
 8022c78:	2100      	movs	r1, #0
 8022c7a:	68f8      	ldr	r0, [r7, #12]
 8022c7c:	f7ff fe9b 	bl	80229b6 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 8022c80:	2310      	movs	r3, #16
 8022c82:	221e      	movs	r2, #30
 8022c84:	2101      	movs	r1, #1
 8022c86:	68f8      	ldr	r0, [r7, #12]
 8022c88:	f7ff fe95 	bl	80229b6 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 8022c8c:	2310      	movs	r3, #16
 8022c8e:	221f      	movs	r2, #31
 8022c90:	2101      	movs	r1, #1
 8022c92:	68f8      	ldr	r0, [r7, #12]
 8022c94:	f7ff fe8f 	bl	80229b6 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8022c98:	2304      	movs	r3, #4
 8022c9a:	2200      	movs	r2, #0
 8022c9c:	2101      	movs	r1, #1
 8022c9e:	68f8      	ldr	r0, [r7, #12]
 8022ca0:	f7ff fe89 	bl	80229b6 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8022ca4:	2301      	movs	r3, #1
 8022ca6:	2201      	movs	r2, #1
 8022ca8:	2101      	movs	r1, #1
 8022caa:	68f8      	ldr	r0, [r7, #12]
 8022cac:	f7ff fe83 	bl	80229b6 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 8022cb0:	2203      	movs	r2, #3
 8022cb2:	2101      	movs	r1, #1
 8022cb4:	68f8      	ldr	r0, [r7, #12]
 8022cb6:	f7ff fed0 	bl	8022a5a <w5500_r1>
 8022cba:	4603      	mov	r3, r0
 8022cbc:	2b42      	cmp	r3, #66	@ 0x42
 8022cbe:	bf0c      	ite	eq
 8022cc0:	2301      	moveq	r3, #1
 8022cc2:	2300      	movne	r3, #0
 8022cc4:	b2db      	uxtb	r3, r3
}
 8022cc6:	4618      	mov	r0, r3
 8022cc8:	3710      	adds	r7, #16
 8022cca:	46bd      	mov	sp, r7
 8022ccc:	bd80      	pop	{r7, pc}

08022cce <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8022cce:	b580      	push	{r7, lr}
 8022cd0:	b084      	sub	sp, #16
 8022cd2:	af00      	add	r7, sp, #0
 8022cd4:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022cda:	60fb      	str	r3, [r7, #12]
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 8022cdc:	222e      	movs	r2, #46	@ 0x2e
 8022cde:	2100      	movs	r1, #0
 8022ce0:	68f8      	ldr	r0, [r7, #12]
 8022ce2:	f7ff feba 	bl	8022a5a <w5500_r1>
 8022ce6:	4603      	mov	r3, r0
 8022ce8:	72fb      	strb	r3, [r7, #11]
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
 8022cea:	7afb      	ldrb	r3, [r7, #11]
 8022cec:	f003 0301 	and.w	r3, r3, #1
 8022cf0:	2b00      	cmp	r3, #0
 8022cf2:	bf14      	ite	ne
 8022cf4:	2301      	movne	r3, #1
 8022cf6:	2300      	moveq	r3, #0
 8022cf8:	b2db      	uxtb	r3, r3
}
 8022cfa:	4618      	mov	r0, r3
 8022cfc:	3710      	adds	r7, #16
 8022cfe:	46bd      	mov	sp, r7
 8022d00:	bd80      	pop	{r7, pc}
	...

08022d04 <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 8022d04:	b580      	push	{r7, lr}
 8022d06:	b082      	sub	sp, #8
 8022d08:	af00      	add	r7, sp, #0
 8022d0a:	6078      	str	r0, [r7, #4]
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 8022d0c:	2207      	movs	r2, #7
 8022d0e:	4907      	ldr	r1, [pc, #28]	@ (8022d2c <has_mqtt_prefix+0x28>)
 8022d10:	6878      	ldr	r0, [r7, #4]
 8022d12:	f003 f956 	bl	8025fc2 <strncmp>
 8022d16:	4603      	mov	r3, r0
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	bf0c      	ite	eq
 8022d1c:	2301      	moveq	r3, #1
 8022d1e:	2300      	movne	r3, #0
 8022d20:	b2db      	uxtb	r3, r3
}
 8022d22:	4618      	mov	r0, r3
 8022d24:	3708      	adds	r7, #8
 8022d26:	46bd      	mov	sp, r7
 8022d28:	bd80      	pop	{r7, pc}
 8022d2a:	bf00      	nop
 8022d2c:	08033088 	.word	0x08033088

08022d30 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8022d30:	b580      	push	{r7, lr}
 8022d32:	b08a      	sub	sp, #40	@ 0x28
 8022d34:	af00      	add	r7, sp, #0
 8022d36:	6078      	str	r0, [r7, #4]
    int dot_count = 0;
 8022d38:	2300      	movs	r3, #0
 8022d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_ip_format = 1;
 8022d3c:	2301      	movs	r3, #1
 8022d3e:	623b      	str	r3, [r7, #32]

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8022d40:	2300      	movs	r3, #0
 8022d42:	61fb      	str	r3, [r7, #28]
 8022d44:	e01b      	b.n	8022d7e <is_valid_ip_or_domain+0x4e>
        if (host[i] == '.') {
 8022d46:	69fb      	ldr	r3, [r7, #28]
 8022d48:	687a      	ldr	r2, [r7, #4]
 8022d4a:	4413      	add	r3, r2
 8022d4c:	781b      	ldrb	r3, [r3, #0]
 8022d4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8022d50:	d103      	bne.n	8022d5a <is_valid_ip_or_domain+0x2a>
            dot_count++;
 8022d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022d54:	3301      	adds	r3, #1
 8022d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8022d58:	e00e      	b.n	8022d78 <is_valid_ip_or_domain+0x48>
        } else if (!isdigit(host[i])) {
 8022d5a:	69fb      	ldr	r3, [r7, #28]
 8022d5c:	687a      	ldr	r2, [r7, #4]
 8022d5e:	4413      	add	r3, r2
 8022d60:	781b      	ldrb	r3, [r3, #0]
 8022d62:	3301      	adds	r3, #1
 8022d64:	4a39      	ldr	r2, [pc, #228]	@ (8022e4c <is_valid_ip_or_domain+0x11c>)
 8022d66:	4413      	add	r3, r2
 8022d68:	781b      	ldrb	r3, [r3, #0]
 8022d6a:	f003 0304 	and.w	r3, r3, #4
 8022d6e:	2b00      	cmp	r3, #0
 8022d70:	d102      	bne.n	8022d78 <is_valid_ip_or_domain+0x48>
            is_ip_format = 0;
 8022d72:	2300      	movs	r3, #0
 8022d74:	623b      	str	r3, [r7, #32]
            break;
 8022d76:	e008      	b.n	8022d8a <is_valid_ip_or_domain+0x5a>
    for (int i = 0; host[i] != '\0'; i++) {
 8022d78:	69fb      	ldr	r3, [r7, #28]
 8022d7a:	3301      	adds	r3, #1
 8022d7c:	61fb      	str	r3, [r7, #28]
 8022d7e:	69fb      	ldr	r3, [r7, #28]
 8022d80:	687a      	ldr	r2, [r7, #4]
 8022d82:	4413      	add	r3, r2
 8022d84:	781b      	ldrb	r3, [r3, #0]
 8022d86:	2b00      	cmp	r3, #0
 8022d88:	d1dd      	bne.n	8022d46 <is_valid_ip_or_domain+0x16>
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 8022d8a:	6a3b      	ldr	r3, [r7, #32]
 8022d8c:	2b00      	cmp	r3, #0
 8022d8e:	d026      	beq.n	8022dde <is_valid_ip_or_domain+0xae>
 8022d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022d92:	2b03      	cmp	r3, #3
 8022d94:	d123      	bne.n	8022dde <is_valid_ip_or_domain+0xae>
        int octet;
        const char *ptr = host;
 8022d96:	687b      	ldr	r3, [r7, #4]
 8022d98:	61bb      	str	r3, [r7, #24]

        for (int i = 0; i < 4; i++) {
 8022d9a:	2300      	movs	r3, #0
 8022d9c:	617b      	str	r3, [r7, #20]
 8022d9e:	e019      	b.n	8022dd4 <is_valid_ip_or_domain+0xa4>
            octet = atoi(ptr);
 8022da0:	69b8      	ldr	r0, [r7, #24]
 8022da2:	f000 f917 	bl	8022fd4 <atoi>
 8022da6:	60f8      	str	r0, [r7, #12]
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8022da8:	68fb      	ldr	r3, [r7, #12]
 8022daa:	2b00      	cmp	r3, #0
 8022dac:	db02      	blt.n	8022db4 <is_valid_ip_or_domain+0x84>
 8022dae:	68fb      	ldr	r3, [r7, #12]
 8022db0:	2bff      	cmp	r3, #255	@ 0xff
 8022db2:	dd01      	ble.n	8022db8 <is_valid_ip_or_domain+0x88>
 8022db4:	2300      	movs	r3, #0
 8022db6:	e044      	b.n	8022e42 <is_valid_ip_or_domain+0x112>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 8022db8:	212e      	movs	r1, #46	@ 0x2e
 8022dba:	69b8      	ldr	r0, [r7, #24]
 8022dbc:	f003 f8e3 	bl	8025f86 <strchr>
 8022dc0:	61b8      	str	r0, [r7, #24]
            if (ptr != NULL) ptr++;
 8022dc2:	69bb      	ldr	r3, [r7, #24]
 8022dc4:	2b00      	cmp	r3, #0
 8022dc6:	d002      	beq.n	8022dce <is_valid_ip_or_domain+0x9e>
 8022dc8:	69bb      	ldr	r3, [r7, #24]
 8022dca:	3301      	adds	r3, #1
 8022dcc:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < 4; i++) {
 8022dce:	697b      	ldr	r3, [r7, #20]
 8022dd0:	3301      	adds	r3, #1
 8022dd2:	617b      	str	r3, [r7, #20]
 8022dd4:	697b      	ldr	r3, [r7, #20]
 8022dd6:	2b03      	cmp	r3, #3
 8022dd8:	dde2      	ble.n	8022da0 <is_valid_ip_or_domain+0x70>
        }
        return 1;  // Строка - корректный IP-адрес
 8022dda:	2301      	movs	r3, #1
 8022ddc:	e031      	b.n	8022e42 <is_valid_ip_or_domain+0x112>
    }

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
 8022dde:	2300      	movs	r3, #0
 8022de0:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; host[i] != '\0'; i++) {
 8022de2:	2300      	movs	r3, #0
 8022de4:	613b      	str	r3, [r7, #16]
 8022de6:	e020      	b.n	8022e2a <is_valid_ip_or_domain+0xfa>
        if (host[i] == '.') {
 8022de8:	693b      	ldr	r3, [r7, #16]
 8022dea:	687a      	ldr	r2, [r7, #4]
 8022dec:	4413      	add	r3, r2
 8022dee:	781b      	ldrb	r3, [r3, #0]
 8022df0:	2b2e      	cmp	r3, #46	@ 0x2e
 8022df2:	d103      	bne.n	8022dfc <is_valid_ip_or_domain+0xcc>
            dot_count++;
 8022df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022df6:	3301      	adds	r3, #1
 8022df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8022dfa:	e013      	b.n	8022e24 <is_valid_ip_or_domain+0xf4>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 8022dfc:	693b      	ldr	r3, [r7, #16]
 8022dfe:	687a      	ldr	r2, [r7, #4]
 8022e00:	4413      	add	r3, r2
 8022e02:	781b      	ldrb	r3, [r3, #0]
 8022e04:	3301      	adds	r3, #1
 8022e06:	4a11      	ldr	r2, [pc, #68]	@ (8022e4c <is_valid_ip_or_domain+0x11c>)
 8022e08:	4413      	add	r3, r2
 8022e0a:	781b      	ldrb	r3, [r3, #0]
 8022e0c:	f003 0307 	and.w	r3, r3, #7
 8022e10:	2b00      	cmp	r3, #0
 8022e12:	d107      	bne.n	8022e24 <is_valid_ip_or_domain+0xf4>
 8022e14:	693b      	ldr	r3, [r7, #16]
 8022e16:	687a      	ldr	r2, [r7, #4]
 8022e18:	4413      	add	r3, r2
 8022e1a:	781b      	ldrb	r3, [r3, #0]
 8022e1c:	2b2d      	cmp	r3, #45	@ 0x2d
 8022e1e:	d001      	beq.n	8022e24 <is_valid_ip_or_domain+0xf4>
            return 0;  // Некорректный символ для доменного имени
 8022e20:	2300      	movs	r3, #0
 8022e22:	e00e      	b.n	8022e42 <is_valid_ip_or_domain+0x112>
    for (int i = 0; host[i] != '\0'; i++) {
 8022e24:	693b      	ldr	r3, [r7, #16]
 8022e26:	3301      	adds	r3, #1
 8022e28:	613b      	str	r3, [r7, #16]
 8022e2a:	693b      	ldr	r3, [r7, #16]
 8022e2c:	687a      	ldr	r2, [r7, #4]
 8022e2e:	4413      	add	r3, r2
 8022e30:	781b      	ldrb	r3, [r3, #0]
 8022e32:	2b00      	cmp	r3, #0
 8022e34:	d1d8      	bne.n	8022de8 <is_valid_ip_or_domain+0xb8>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 8022e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e38:	2b00      	cmp	r3, #0
 8022e3a:	bfcc      	ite	gt
 8022e3c:	2301      	movgt	r3, #1
 8022e3e:	2300      	movle	r3, #0
 8022e40:	b2db      	uxtb	r3, r3
}
 8022e42:	4618      	mov	r0, r3
 8022e44:	3728      	adds	r7, #40	@ 0x28
 8022e46:	46bd      	mov	sp, r7
 8022e48:	bd80      	pop	{r7, pc}
 8022e4a:	bf00      	nop
 8022e4c:	080343f4 	.word	0x080343f4

08022e50 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8022e50:	b580      	push	{r7, lr}
 8022e52:	b084      	sub	sp, #16
 8022e54:	af00      	add	r7, sp, #0
 8022e56:	6078      	str	r0, [r7, #4]
    int port = atoi(port_str);
 8022e58:	6878      	ldr	r0, [r7, #4]
 8022e5a:	f000 f8bb 	bl	8022fd4 <atoi>
 8022e5e:	60f8      	str	r0, [r7, #12]
    if (port < 1 || port > MAX_PORT) {
 8022e60:	68fb      	ldr	r3, [r7, #12]
 8022e62:	2b00      	cmp	r3, #0
 8022e64:	dd03      	ble.n	8022e6e <is_valid_port+0x1e>
 8022e66:	68fb      	ldr	r3, [r7, #12]
 8022e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8022e6c:	db10      	blt.n	8022e90 <is_valid_port+0x40>
        return 0; // Порт вне диапазона
 8022e6e:	2300      	movs	r3, #0
 8022e70:	e013      	b.n	8022e9a <is_valid_port+0x4a>
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
        if (!isdigit(*port_str)) {
 8022e72:	687b      	ldr	r3, [r7, #4]
 8022e74:	781b      	ldrb	r3, [r3, #0]
 8022e76:	3301      	adds	r3, #1
 8022e78:	4a0a      	ldr	r2, [pc, #40]	@ (8022ea4 <is_valid_port+0x54>)
 8022e7a:	4413      	add	r3, r2
 8022e7c:	781b      	ldrb	r3, [r3, #0]
 8022e7e:	f003 0304 	and.w	r3, r3, #4
 8022e82:	2b00      	cmp	r3, #0
 8022e84:	d101      	bne.n	8022e8a <is_valid_port+0x3a>
            return 0;
 8022e86:	2300      	movs	r3, #0
 8022e88:	e007      	b.n	8022e9a <is_valid_port+0x4a>
        }
        port_str++;
 8022e8a:	687b      	ldr	r3, [r7, #4]
 8022e8c:	3301      	adds	r3, #1
 8022e8e:	607b      	str	r3, [r7, #4]
    while (*port_str) {
 8022e90:	687b      	ldr	r3, [r7, #4]
 8022e92:	781b      	ldrb	r3, [r3, #0]
 8022e94:	2b00      	cmp	r3, #0
 8022e96:	d1ec      	bne.n	8022e72 <is_valid_port+0x22>
    }
    return 1;
 8022e98:	2301      	movs	r3, #1
}
 8022e9a:	4618      	mov	r0, r3
 8022e9c:	3710      	adds	r7, #16
 8022e9e:	46bd      	mov	sp, r7
 8022ea0:	bd80      	pop	{r7, pc}
 8022ea2:	bf00      	nop
 8022ea4:	080343f4 	.word	0x080343f4

08022ea8 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 8022ea8:	b580      	push	{r7, lr}
 8022eaa:	b0c6      	sub	sp, #280	@ 0x118
 8022eac:	af00      	add	r7, sp, #0
 8022eae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8022eb2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8022eb6:	6018      	str	r0, [r3, #0]
    if (!has_mqtt_prefix(url)) {
 8022eb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8022ebc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8022ec0:	6818      	ldr	r0, [r3, #0]
 8022ec2:	f7ff ff1f 	bl	8022d04 <has_mqtt_prefix>
 8022ec6:	4603      	mov	r3, r0
 8022ec8:	2b00      	cmp	r3, #0
 8022eca:	d105      	bne.n	8022ed8 <is_valid_mqtt_url+0x30>
        printf("Error: URL does not start with 'mqtt://'\n");
 8022ecc:	482e      	ldr	r0, [pc, #184]	@ (8022f88 <is_valid_mqtt_url+0xe0>)
 8022ece:	f002 faeb 	bl	80254a8 <puts>
        return -1;
 8022ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022ed6:	e051      	b.n	8022f7c <is_valid_mqtt_url+0xd4>
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8022ed8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8022edc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8022ee0:	681b      	ldr	r3, [r3, #0]
 8022ee2:	3307      	adds	r3, #7
 8022ee4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    const char *colon = strchr(host_start, ':');
 8022ee8:	213a      	movs	r1, #58	@ 0x3a
 8022eea:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8022eee:	f003 f84a 	bl	8025f86 <strchr>
 8022ef2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    if (!colon) {
 8022ef6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d105      	bne.n	8022f0a <is_valid_mqtt_url+0x62>
        printf("Error: URL does not contain a port separator ':'\n");
 8022efe:	4823      	ldr	r0, [pc, #140]	@ (8022f8c <is_valid_mqtt_url+0xe4>)
 8022f00:	f002 fad2 	bl	80254a8 <puts>
        return -2;
 8022f04:	f06f 0301 	mvn.w	r3, #1
 8022f08:	e038      	b.n	8022f7c <is_valid_mqtt_url+0xd4>
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 8022f0a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8022f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8022f12:	1ad3      	subs	r3, r2, r3
 8022f14:	461a      	mov	r2, r3
 8022f16:	f107 030c 	add.w	r3, r7, #12
 8022f1a:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8022f1e:	4618      	mov	r0, r3
 8022f20:	f003 f861 	bl	8025fe6 <strncpy>
    host[colon - host_start] = '\0';
 8022f24:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8022f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8022f2c:	1ad3      	subs	r3, r2, r3
 8022f2e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8022f32:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8022f36:	2100      	movs	r1, #0
 8022f38:	54d1      	strb	r1, [r2, r3]

    if (!is_valid_ip_or_domain(host)) {
 8022f3a:	f107 030c 	add.w	r3, r7, #12
 8022f3e:	4618      	mov	r0, r3
 8022f40:	f7ff fef6 	bl	8022d30 <is_valid_ip_or_domain>
 8022f44:	4603      	mov	r3, r0
 8022f46:	2b00      	cmp	r3, #0
 8022f48:	d105      	bne.n	8022f56 <is_valid_mqtt_url+0xae>
        printf("Error: Invalid domain or IP address\n");
 8022f4a:	4811      	ldr	r0, [pc, #68]	@ (8022f90 <is_valid_mqtt_url+0xe8>)
 8022f4c:	f002 faac 	bl	80254a8 <puts>
        return -3;
 8022f50:	f06f 0302 	mvn.w	r3, #2
 8022f54:	e012      	b.n	8022f7c <is_valid_mqtt_url+0xd4>
    }

    // Проверить порт
    const char *port_str = colon + 1;
 8022f56:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8022f5a:	3301      	adds	r3, #1
 8022f5c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (!is_valid_port(port_str)) {
 8022f60:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8022f64:	f7ff ff74 	bl	8022e50 <is_valid_port>
 8022f68:	4603      	mov	r3, r0
 8022f6a:	2b00      	cmp	r3, #0
 8022f6c:	d105      	bne.n	8022f7a <is_valid_mqtt_url+0xd2>
        printf("Error: Invalid port number\n");
 8022f6e:	4809      	ldr	r0, [pc, #36]	@ (8022f94 <is_valid_mqtt_url+0xec>)
 8022f70:	f002 fa9a 	bl	80254a8 <puts>
        return -4;
 8022f74:	f06f 0303 	mvn.w	r3, #3
 8022f78:	e000      	b.n	8022f7c <is_valid_mqtt_url+0xd4>
    }

    return 0; // URL прошел все проверки
 8022f7a:	2300      	movs	r3, #0
}
 8022f7c:	4618      	mov	r0, r3
 8022f7e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8022f82:	46bd      	mov	sp, r7
 8022f84:	bd80      	pop	{r7, pc}
 8022f86:	bf00      	nop
 8022f88:	08033090 	.word	0x08033090
 8022f8c:	080330bc 	.word	0x080330bc
 8022f90:	080330f0 	.word	0x080330f0
 8022f94:	08033114 	.word	0x08033114

08022f98 <__assert_func>:
 8022f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022f9a:	4614      	mov	r4, r2
 8022f9c:	461a      	mov	r2, r3
 8022f9e:	4b09      	ldr	r3, [pc, #36]	@ (8022fc4 <__assert_func+0x2c>)
 8022fa0:	681b      	ldr	r3, [r3, #0]
 8022fa2:	4605      	mov	r5, r0
 8022fa4:	68d8      	ldr	r0, [r3, #12]
 8022fa6:	b954      	cbnz	r4, 8022fbe <__assert_func+0x26>
 8022fa8:	4b07      	ldr	r3, [pc, #28]	@ (8022fc8 <__assert_func+0x30>)
 8022faa:	461c      	mov	r4, r3
 8022fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022fb0:	9100      	str	r1, [sp, #0]
 8022fb2:	462b      	mov	r3, r5
 8022fb4:	4905      	ldr	r1, [pc, #20]	@ (8022fcc <__assert_func+0x34>)
 8022fb6:	f000 f847 	bl	8023048 <fiprintf>
 8022fba:	f004 fa89 	bl	80274d0 <abort>
 8022fbe:	4b04      	ldr	r3, [pc, #16]	@ (8022fd0 <__assert_func+0x38>)
 8022fc0:	e7f4      	b.n	8022fac <__assert_func+0x14>
 8022fc2:	bf00      	nop
 8022fc4:	20000840 	.word	0x20000840
 8022fc8:	08034037 	.word	0x08034037
 8022fcc:	08034009 	.word	0x08034009
 8022fd0:	08033ffc 	.word	0x08033ffc

08022fd4 <atoi>:
 8022fd4:	220a      	movs	r2, #10
 8022fd6:	2100      	movs	r1, #0
 8022fd8:	f002 bb44 	b.w	8025664 <strtol>

08022fdc <_calloc_r>:
 8022fdc:	b538      	push	{r3, r4, r5, lr}
 8022fde:	fba1 1502 	umull	r1, r5, r1, r2
 8022fe2:	b935      	cbnz	r5, 8022ff2 <_calloc_r+0x16>
 8022fe4:	f000 f852 	bl	802308c <_malloc_r>
 8022fe8:	4604      	mov	r4, r0
 8022fea:	b938      	cbnz	r0, 8022ffc <_calloc_r+0x20>
 8022fec:	2400      	movs	r4, #0
 8022fee:	4620      	mov	r0, r4
 8022ff0:	bd38      	pop	{r3, r4, r5, pc}
 8022ff2:	f004 f9c5 	bl	8027380 <__errno>
 8022ff6:	230c      	movs	r3, #12
 8022ff8:	6003      	str	r3, [r0, #0]
 8022ffa:	e7f7      	b.n	8022fec <_calloc_r+0x10>
 8022ffc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8023000:	f022 0203 	bic.w	r2, r2, #3
 8023004:	3a04      	subs	r2, #4
 8023006:	2a24      	cmp	r2, #36	@ 0x24
 8023008:	d819      	bhi.n	802303e <_calloc_r+0x62>
 802300a:	2a13      	cmp	r2, #19
 802300c:	d915      	bls.n	802303a <_calloc_r+0x5e>
 802300e:	2a1b      	cmp	r2, #27
 8023010:	e9c0 5500 	strd	r5, r5, [r0]
 8023014:	d806      	bhi.n	8023024 <_calloc_r+0x48>
 8023016:	f100 0308 	add.w	r3, r0, #8
 802301a:	2200      	movs	r2, #0
 802301c:	e9c3 2200 	strd	r2, r2, [r3]
 8023020:	609a      	str	r2, [r3, #8]
 8023022:	e7e4      	b.n	8022fee <_calloc_r+0x12>
 8023024:	2a24      	cmp	r2, #36	@ 0x24
 8023026:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802302a:	bf11      	iteee	ne
 802302c:	f100 0310 	addne.w	r3, r0, #16
 8023030:	6105      	streq	r5, [r0, #16]
 8023032:	f100 0318 	addeq.w	r3, r0, #24
 8023036:	6145      	streq	r5, [r0, #20]
 8023038:	e7ef      	b.n	802301a <_calloc_r+0x3e>
 802303a:	4603      	mov	r3, r0
 802303c:	e7ed      	b.n	802301a <_calloc_r+0x3e>
 802303e:	4629      	mov	r1, r5
 8023040:	f002 ff8a 	bl	8025f58 <memset>
 8023044:	e7d3      	b.n	8022fee <_calloc_r+0x12>
	...

08023048 <fiprintf>:
 8023048:	b40e      	push	{r1, r2, r3}
 802304a:	b503      	push	{r0, r1, lr}
 802304c:	4601      	mov	r1, r0
 802304e:	ab03      	add	r3, sp, #12
 8023050:	4805      	ldr	r0, [pc, #20]	@ (8023068 <fiprintf+0x20>)
 8023052:	f853 2b04 	ldr.w	r2, [r3], #4
 8023056:	6800      	ldr	r0, [r0, #0]
 8023058:	9301      	str	r3, [sp, #4]
 802305a:	f001 fd03 	bl	8024a64 <_vfiprintf_r>
 802305e:	b002      	add	sp, #8
 8023060:	f85d eb04 	ldr.w	lr, [sp], #4
 8023064:	b003      	add	sp, #12
 8023066:	4770      	bx	lr
 8023068:	20000840 	.word	0x20000840

0802306c <malloc>:
 802306c:	4b02      	ldr	r3, [pc, #8]	@ (8023078 <malloc+0xc>)
 802306e:	4601      	mov	r1, r0
 8023070:	6818      	ldr	r0, [r3, #0]
 8023072:	f000 b80b 	b.w	802308c <_malloc_r>
 8023076:	bf00      	nop
 8023078:	20000840 	.word	0x20000840

0802307c <free>:
 802307c:	4b02      	ldr	r3, [pc, #8]	@ (8023088 <free+0xc>)
 802307e:	4601      	mov	r1, r0
 8023080:	6818      	ldr	r0, [r3, #0]
 8023082:	f005 b8c3 	b.w	802820c <_free_r>
 8023086:	bf00      	nop
 8023088:	20000840 	.word	0x20000840

0802308c <_malloc_r>:
 802308c:	f101 030b 	add.w	r3, r1, #11
 8023090:	2b16      	cmp	r3, #22
 8023092:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023096:	4605      	mov	r5, r0
 8023098:	d906      	bls.n	80230a8 <_malloc_r+0x1c>
 802309a:	f033 0707 	bics.w	r7, r3, #7
 802309e:	d504      	bpl.n	80230aa <_malloc_r+0x1e>
 80230a0:	230c      	movs	r3, #12
 80230a2:	602b      	str	r3, [r5, #0]
 80230a4:	2400      	movs	r4, #0
 80230a6:	e1a3      	b.n	80233f0 <_malloc_r+0x364>
 80230a8:	2710      	movs	r7, #16
 80230aa:	42b9      	cmp	r1, r7
 80230ac:	d8f8      	bhi.n	80230a0 <_malloc_r+0x14>
 80230ae:	4628      	mov	r0, r5
 80230b0:	f002 f9a8 	bl	8025404 <__malloc_lock>
 80230b4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 80230b8:	4eaf      	ldr	r6, [pc, #700]	@ (8023378 <_malloc_r+0x2ec>)
 80230ba:	d237      	bcs.n	802312c <_malloc_r+0xa0>
 80230bc:	f107 0208 	add.w	r2, r7, #8
 80230c0:	4432      	add	r2, r6
 80230c2:	f1a2 0108 	sub.w	r1, r2, #8
 80230c6:	6854      	ldr	r4, [r2, #4]
 80230c8:	428c      	cmp	r4, r1
 80230ca:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80230ce:	d102      	bne.n	80230d6 <_malloc_r+0x4a>
 80230d0:	68d4      	ldr	r4, [r2, #12]
 80230d2:	42a2      	cmp	r2, r4
 80230d4:	d010      	beq.n	80230f8 <_malloc_r+0x6c>
 80230d6:	6863      	ldr	r3, [r4, #4]
 80230d8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80230dc:	f023 0303 	bic.w	r3, r3, #3
 80230e0:	60ca      	str	r2, [r1, #12]
 80230e2:	4423      	add	r3, r4
 80230e4:	6091      	str	r1, [r2, #8]
 80230e6:	685a      	ldr	r2, [r3, #4]
 80230e8:	f042 0201 	orr.w	r2, r2, #1
 80230ec:	605a      	str	r2, [r3, #4]
 80230ee:	4628      	mov	r0, r5
 80230f0:	f002 f98e 	bl	8025410 <__malloc_unlock>
 80230f4:	3408      	adds	r4, #8
 80230f6:	e17b      	b.n	80233f0 <_malloc_r+0x364>
 80230f8:	3302      	adds	r3, #2
 80230fa:	6934      	ldr	r4, [r6, #16]
 80230fc:	499f      	ldr	r1, [pc, #636]	@ (802337c <_malloc_r+0x2f0>)
 80230fe:	428c      	cmp	r4, r1
 8023100:	d077      	beq.n	80231f2 <_malloc_r+0x166>
 8023102:	6862      	ldr	r2, [r4, #4]
 8023104:	f022 0c03 	bic.w	ip, r2, #3
 8023108:	ebac 0007 	sub.w	r0, ip, r7
 802310c:	280f      	cmp	r0, #15
 802310e:	dd48      	ble.n	80231a2 <_malloc_r+0x116>
 8023110:	19e2      	adds	r2, r4, r7
 8023112:	f040 0301 	orr.w	r3, r0, #1
 8023116:	f047 0701 	orr.w	r7, r7, #1
 802311a:	6067      	str	r7, [r4, #4]
 802311c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8023120:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8023124:	6053      	str	r3, [r2, #4]
 8023126:	f844 000c 	str.w	r0, [r4, ip]
 802312a:	e7e0      	b.n	80230ee <_malloc_r+0x62>
 802312c:	0a7b      	lsrs	r3, r7, #9
 802312e:	d02a      	beq.n	8023186 <_malloc_r+0xfa>
 8023130:	2b04      	cmp	r3, #4
 8023132:	d812      	bhi.n	802315a <_malloc_r+0xce>
 8023134:	09bb      	lsrs	r3, r7, #6
 8023136:	3338      	adds	r3, #56	@ 0x38
 8023138:	1c5a      	adds	r2, r3, #1
 802313a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802313e:	f1a2 0c08 	sub.w	ip, r2, #8
 8023142:	6854      	ldr	r4, [r2, #4]
 8023144:	4564      	cmp	r4, ip
 8023146:	d006      	beq.n	8023156 <_malloc_r+0xca>
 8023148:	6862      	ldr	r2, [r4, #4]
 802314a:	f022 0203 	bic.w	r2, r2, #3
 802314e:	1bd0      	subs	r0, r2, r7
 8023150:	280f      	cmp	r0, #15
 8023152:	dd1c      	ble.n	802318e <_malloc_r+0x102>
 8023154:	3b01      	subs	r3, #1
 8023156:	3301      	adds	r3, #1
 8023158:	e7cf      	b.n	80230fa <_malloc_r+0x6e>
 802315a:	2b14      	cmp	r3, #20
 802315c:	d801      	bhi.n	8023162 <_malloc_r+0xd6>
 802315e:	335b      	adds	r3, #91	@ 0x5b
 8023160:	e7ea      	b.n	8023138 <_malloc_r+0xac>
 8023162:	2b54      	cmp	r3, #84	@ 0x54
 8023164:	d802      	bhi.n	802316c <_malloc_r+0xe0>
 8023166:	0b3b      	lsrs	r3, r7, #12
 8023168:	336e      	adds	r3, #110	@ 0x6e
 802316a:	e7e5      	b.n	8023138 <_malloc_r+0xac>
 802316c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8023170:	d802      	bhi.n	8023178 <_malloc_r+0xec>
 8023172:	0bfb      	lsrs	r3, r7, #15
 8023174:	3377      	adds	r3, #119	@ 0x77
 8023176:	e7df      	b.n	8023138 <_malloc_r+0xac>
 8023178:	f240 5254 	movw	r2, #1364	@ 0x554
 802317c:	4293      	cmp	r3, r2
 802317e:	d804      	bhi.n	802318a <_malloc_r+0xfe>
 8023180:	0cbb      	lsrs	r3, r7, #18
 8023182:	337c      	adds	r3, #124	@ 0x7c
 8023184:	e7d8      	b.n	8023138 <_malloc_r+0xac>
 8023186:	233f      	movs	r3, #63	@ 0x3f
 8023188:	e7d6      	b.n	8023138 <_malloc_r+0xac>
 802318a:	237e      	movs	r3, #126	@ 0x7e
 802318c:	e7d4      	b.n	8023138 <_malloc_r+0xac>
 802318e:	2800      	cmp	r0, #0
 8023190:	68e1      	ldr	r1, [r4, #12]
 8023192:	db04      	blt.n	802319e <_malloc_r+0x112>
 8023194:	68a3      	ldr	r3, [r4, #8]
 8023196:	60d9      	str	r1, [r3, #12]
 8023198:	608b      	str	r3, [r1, #8]
 802319a:	18a3      	adds	r3, r4, r2
 802319c:	e7a3      	b.n	80230e6 <_malloc_r+0x5a>
 802319e:	460c      	mov	r4, r1
 80231a0:	e7d0      	b.n	8023144 <_malloc_r+0xb8>
 80231a2:	2800      	cmp	r0, #0
 80231a4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80231a8:	db07      	blt.n	80231ba <_malloc_r+0x12e>
 80231aa:	44a4      	add	ip, r4
 80231ac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80231b0:	f043 0301 	orr.w	r3, r3, #1
 80231b4:	f8cc 3004 	str.w	r3, [ip, #4]
 80231b8:	e799      	b.n	80230ee <_malloc_r+0x62>
 80231ba:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80231be:	6870      	ldr	r0, [r6, #4]
 80231c0:	f080 8095 	bcs.w	80232ee <_malloc_r+0x262>
 80231c4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80231c8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80231cc:	f04f 0c01 	mov.w	ip, #1
 80231d0:	3201      	adds	r2, #1
 80231d2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80231d6:	ea4c 0000 	orr.w	r0, ip, r0
 80231da:	6070      	str	r0, [r6, #4]
 80231dc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80231e0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80231e4:	3808      	subs	r0, #8
 80231e6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80231ea:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80231ee:	f8cc 400c 	str.w	r4, [ip, #12]
 80231f2:	1098      	asrs	r0, r3, #2
 80231f4:	2201      	movs	r2, #1
 80231f6:	4082      	lsls	r2, r0
 80231f8:	6870      	ldr	r0, [r6, #4]
 80231fa:	4290      	cmp	r0, r2
 80231fc:	d326      	bcc.n	802324c <_malloc_r+0x1c0>
 80231fe:	4210      	tst	r0, r2
 8023200:	d106      	bne.n	8023210 <_malloc_r+0x184>
 8023202:	f023 0303 	bic.w	r3, r3, #3
 8023206:	0052      	lsls	r2, r2, #1
 8023208:	4210      	tst	r0, r2
 802320a:	f103 0304 	add.w	r3, r3, #4
 802320e:	d0fa      	beq.n	8023206 <_malloc_r+0x17a>
 8023210:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8023214:	46c1      	mov	r9, r8
 8023216:	469e      	mov	lr, r3
 8023218:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802321c:	454c      	cmp	r4, r9
 802321e:	f040 80b9 	bne.w	8023394 <_malloc_r+0x308>
 8023222:	f10e 0e01 	add.w	lr, lr, #1
 8023226:	f01e 0f03 	tst.w	lr, #3
 802322a:	f109 0908 	add.w	r9, r9, #8
 802322e:	d1f3      	bne.n	8023218 <_malloc_r+0x18c>
 8023230:	0798      	lsls	r0, r3, #30
 8023232:	f040 80e3 	bne.w	80233fc <_malloc_r+0x370>
 8023236:	6873      	ldr	r3, [r6, #4]
 8023238:	ea23 0302 	bic.w	r3, r3, r2
 802323c:	6073      	str	r3, [r6, #4]
 802323e:	6870      	ldr	r0, [r6, #4]
 8023240:	0052      	lsls	r2, r2, #1
 8023242:	4290      	cmp	r0, r2
 8023244:	d302      	bcc.n	802324c <_malloc_r+0x1c0>
 8023246:	2a00      	cmp	r2, #0
 8023248:	f040 80e5 	bne.w	8023416 <_malloc_r+0x38a>
 802324c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8023250:	f8da 3004 	ldr.w	r3, [sl, #4]
 8023254:	f023 0903 	bic.w	r9, r3, #3
 8023258:	45b9      	cmp	r9, r7
 802325a:	d304      	bcc.n	8023266 <_malloc_r+0x1da>
 802325c:	eba9 0207 	sub.w	r2, r9, r7
 8023260:	2a0f      	cmp	r2, #15
 8023262:	f300 8141 	bgt.w	80234e8 <_malloc_r+0x45c>
 8023266:	4b46      	ldr	r3, [pc, #280]	@ (8023380 <_malloc_r+0x2f4>)
 8023268:	6819      	ldr	r1, [r3, #0]
 802326a:	3110      	adds	r1, #16
 802326c:	4439      	add	r1, r7
 802326e:	2008      	movs	r0, #8
 8023270:	9101      	str	r1, [sp, #4]
 8023272:	f004 f88b 	bl	802738c <sysconf>
 8023276:	4a43      	ldr	r2, [pc, #268]	@ (8023384 <_malloc_r+0x2f8>)
 8023278:	9901      	ldr	r1, [sp, #4]
 802327a:	6813      	ldr	r3, [r2, #0]
 802327c:	3301      	adds	r3, #1
 802327e:	bf1f      	itttt	ne
 8023280:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8023284:	1809      	addne	r1, r1, r0
 8023286:	4243      	negne	r3, r0
 8023288:	4019      	andne	r1, r3
 802328a:	4680      	mov	r8, r0
 802328c:	4628      	mov	r0, r5
 802328e:	9101      	str	r1, [sp, #4]
 8023290:	f004 f854 	bl	802733c <_sbrk_r>
 8023294:	1c42      	adds	r2, r0, #1
 8023296:	eb0a 0b09 	add.w	fp, sl, r9
 802329a:	4604      	mov	r4, r0
 802329c:	f000 80f7 	beq.w	802348e <_malloc_r+0x402>
 80232a0:	4583      	cmp	fp, r0
 80232a2:	9901      	ldr	r1, [sp, #4]
 80232a4:	4a37      	ldr	r2, [pc, #220]	@ (8023384 <_malloc_r+0x2f8>)
 80232a6:	d902      	bls.n	80232ae <_malloc_r+0x222>
 80232a8:	45b2      	cmp	sl, r6
 80232aa:	f040 80f0 	bne.w	802348e <_malloc_r+0x402>
 80232ae:	4b36      	ldr	r3, [pc, #216]	@ (8023388 <_malloc_r+0x2fc>)
 80232b0:	6818      	ldr	r0, [r3, #0]
 80232b2:	45a3      	cmp	fp, r4
 80232b4:	eb00 0e01 	add.w	lr, r0, r1
 80232b8:	f8c3 e000 	str.w	lr, [r3]
 80232bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80232c0:	f040 80ab 	bne.w	802341a <_malloc_r+0x38e>
 80232c4:	ea1b 0f0c 	tst.w	fp, ip
 80232c8:	f040 80a7 	bne.w	802341a <_malloc_r+0x38e>
 80232cc:	68b2      	ldr	r2, [r6, #8]
 80232ce:	4449      	add	r1, r9
 80232d0:	f041 0101 	orr.w	r1, r1, #1
 80232d4:	6051      	str	r1, [r2, #4]
 80232d6:	4a2d      	ldr	r2, [pc, #180]	@ (802338c <_malloc_r+0x300>)
 80232d8:	681b      	ldr	r3, [r3, #0]
 80232da:	6811      	ldr	r1, [r2, #0]
 80232dc:	428b      	cmp	r3, r1
 80232de:	bf88      	it	hi
 80232e0:	6013      	strhi	r3, [r2, #0]
 80232e2:	4a2b      	ldr	r2, [pc, #172]	@ (8023390 <_malloc_r+0x304>)
 80232e4:	6811      	ldr	r1, [r2, #0]
 80232e6:	428b      	cmp	r3, r1
 80232e8:	bf88      	it	hi
 80232ea:	6013      	strhi	r3, [r2, #0]
 80232ec:	e0cf      	b.n	802348e <_malloc_r+0x402>
 80232ee:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 80232f2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80232f6:	d218      	bcs.n	802332a <_malloc_r+0x29e>
 80232f8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80232fc:	3238      	adds	r2, #56	@ 0x38
 80232fe:	f102 0e01 	add.w	lr, r2, #1
 8023302:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8023306:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802330a:	45f0      	cmp	r8, lr
 802330c:	d12b      	bne.n	8023366 <_malloc_r+0x2da>
 802330e:	1092      	asrs	r2, r2, #2
 8023310:	f04f 0c01 	mov.w	ip, #1
 8023314:	fa0c f202 	lsl.w	r2, ip, r2
 8023318:	4302      	orrs	r2, r0
 802331a:	6072      	str	r2, [r6, #4]
 802331c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8023320:	f8c8 4008 	str.w	r4, [r8, #8]
 8023324:	f8ce 400c 	str.w	r4, [lr, #12]
 8023328:	e763      	b.n	80231f2 <_malloc_r+0x166>
 802332a:	2a14      	cmp	r2, #20
 802332c:	d801      	bhi.n	8023332 <_malloc_r+0x2a6>
 802332e:	325b      	adds	r2, #91	@ 0x5b
 8023330:	e7e5      	b.n	80232fe <_malloc_r+0x272>
 8023332:	2a54      	cmp	r2, #84	@ 0x54
 8023334:	d803      	bhi.n	802333e <_malloc_r+0x2b2>
 8023336:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802333a:	326e      	adds	r2, #110	@ 0x6e
 802333c:	e7df      	b.n	80232fe <_malloc_r+0x272>
 802333e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8023342:	d803      	bhi.n	802334c <_malloc_r+0x2c0>
 8023344:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8023348:	3277      	adds	r2, #119	@ 0x77
 802334a:	e7d8      	b.n	80232fe <_malloc_r+0x272>
 802334c:	f240 5e54 	movw	lr, #1364	@ 0x554
 8023350:	4572      	cmp	r2, lr
 8023352:	bf9a      	itte	ls
 8023354:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8023358:	327c      	addls	r2, #124	@ 0x7c
 802335a:	227e      	movhi	r2, #126	@ 0x7e
 802335c:	e7cf      	b.n	80232fe <_malloc_r+0x272>
 802335e:	f8de e008 	ldr.w	lr, [lr, #8]
 8023362:	45f0      	cmp	r8, lr
 8023364:	d005      	beq.n	8023372 <_malloc_r+0x2e6>
 8023366:	f8de 2004 	ldr.w	r2, [lr, #4]
 802336a:	f022 0203 	bic.w	r2, r2, #3
 802336e:	4562      	cmp	r2, ip
 8023370:	d8f5      	bhi.n	802335e <_malloc_r+0x2d2>
 8023372:	f8de 800c 	ldr.w	r8, [lr, #12]
 8023376:	e7d1      	b.n	802331c <_malloc_r+0x290>
 8023378:	200002b8 	.word	0x200002b8
 802337c:	200002c0 	.word	0x200002c0
 8023380:	20018190 	.word	0x20018190
 8023384:	200002b0 	.word	0x200002b0
 8023388:	20018160 	.word	0x20018160
 802338c:	2001818c 	.word	0x2001818c
 8023390:	20018188 	.word	0x20018188
 8023394:	6860      	ldr	r0, [r4, #4]
 8023396:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802339a:	f020 0003 	bic.w	r0, r0, #3
 802339e:	eba0 0a07 	sub.w	sl, r0, r7
 80233a2:	f1ba 0f0f 	cmp.w	sl, #15
 80233a6:	dd12      	ble.n	80233ce <_malloc_r+0x342>
 80233a8:	68a3      	ldr	r3, [r4, #8]
 80233aa:	19e2      	adds	r2, r4, r7
 80233ac:	f047 0701 	orr.w	r7, r7, #1
 80233b0:	6067      	str	r7, [r4, #4]
 80233b2:	f8c3 c00c 	str.w	ip, [r3, #12]
 80233b6:	f8cc 3008 	str.w	r3, [ip, #8]
 80233ba:	f04a 0301 	orr.w	r3, sl, #1
 80233be:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80233c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80233c6:	6053      	str	r3, [r2, #4]
 80233c8:	f844 a000 	str.w	sl, [r4, r0]
 80233cc:	e68f      	b.n	80230ee <_malloc_r+0x62>
 80233ce:	f1ba 0f00 	cmp.w	sl, #0
 80233d2:	db11      	blt.n	80233f8 <_malloc_r+0x36c>
 80233d4:	4420      	add	r0, r4
 80233d6:	6843      	ldr	r3, [r0, #4]
 80233d8:	f043 0301 	orr.w	r3, r3, #1
 80233dc:	6043      	str	r3, [r0, #4]
 80233de:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80233e2:	4628      	mov	r0, r5
 80233e4:	f8c3 c00c 	str.w	ip, [r3, #12]
 80233e8:	f8cc 3008 	str.w	r3, [ip, #8]
 80233ec:	f002 f810 	bl	8025410 <__malloc_unlock>
 80233f0:	4620      	mov	r0, r4
 80233f2:	b003      	add	sp, #12
 80233f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233f8:	4664      	mov	r4, ip
 80233fa:	e70f      	b.n	802321c <_malloc_r+0x190>
 80233fc:	f858 0908 	ldr.w	r0, [r8], #-8
 8023400:	4540      	cmp	r0, r8
 8023402:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8023406:	f43f af13 	beq.w	8023230 <_malloc_r+0x1a4>
 802340a:	e718      	b.n	802323e <_malloc_r+0x1b2>
 802340c:	3304      	adds	r3, #4
 802340e:	0052      	lsls	r2, r2, #1
 8023410:	4210      	tst	r0, r2
 8023412:	d0fb      	beq.n	802340c <_malloc_r+0x380>
 8023414:	e6fc      	b.n	8023210 <_malloc_r+0x184>
 8023416:	4673      	mov	r3, lr
 8023418:	e7fa      	b.n	8023410 <_malloc_r+0x384>
 802341a:	6810      	ldr	r0, [r2, #0]
 802341c:	3001      	adds	r0, #1
 802341e:	bf1b      	ittet	ne
 8023420:	eba4 0b0b 	subne.w	fp, r4, fp
 8023424:	eb0b 020e 	addne.w	r2, fp, lr
 8023428:	6014      	streq	r4, [r2, #0]
 802342a:	601a      	strne	r2, [r3, #0]
 802342c:	f014 0b07 	ands.w	fp, r4, #7
 8023430:	bf1a      	itte	ne
 8023432:	f1cb 0008 	rsbne	r0, fp, #8
 8023436:	1824      	addne	r4, r4, r0
 8023438:	4658      	moveq	r0, fp
 802343a:	1862      	adds	r2, r4, r1
 802343c:	ea02 010c 	and.w	r1, r2, ip
 8023440:	4480      	add	r8, r0
 8023442:	eba8 0801 	sub.w	r8, r8, r1
 8023446:	ea08 080c 	and.w	r8, r8, ip
 802344a:	4641      	mov	r1, r8
 802344c:	4628      	mov	r0, r5
 802344e:	9201      	str	r2, [sp, #4]
 8023450:	f003 ff74 	bl	802733c <_sbrk_r>
 8023454:	1c43      	adds	r3, r0, #1
 8023456:	9a01      	ldr	r2, [sp, #4]
 8023458:	4b28      	ldr	r3, [pc, #160]	@ (80234fc <_malloc_r+0x470>)
 802345a:	d107      	bne.n	802346c <_malloc_r+0x3e0>
 802345c:	f1bb 0f00 	cmp.w	fp, #0
 8023460:	d023      	beq.n	80234aa <_malloc_r+0x41e>
 8023462:	f1ab 0008 	sub.w	r0, fp, #8
 8023466:	4410      	add	r0, r2
 8023468:	f04f 0800 	mov.w	r8, #0
 802346c:	681a      	ldr	r2, [r3, #0]
 802346e:	60b4      	str	r4, [r6, #8]
 8023470:	1b00      	subs	r0, r0, r4
 8023472:	4440      	add	r0, r8
 8023474:	4442      	add	r2, r8
 8023476:	f040 0001 	orr.w	r0, r0, #1
 802347a:	45b2      	cmp	sl, r6
 802347c:	601a      	str	r2, [r3, #0]
 802347e:	6060      	str	r0, [r4, #4]
 8023480:	f43f af29 	beq.w	80232d6 <_malloc_r+0x24a>
 8023484:	f1b9 0f0f 	cmp.w	r9, #15
 8023488:	d812      	bhi.n	80234b0 <_malloc_r+0x424>
 802348a:	2301      	movs	r3, #1
 802348c:	6063      	str	r3, [r4, #4]
 802348e:	68b3      	ldr	r3, [r6, #8]
 8023490:	685b      	ldr	r3, [r3, #4]
 8023492:	f023 0303 	bic.w	r3, r3, #3
 8023496:	42bb      	cmp	r3, r7
 8023498:	eba3 0207 	sub.w	r2, r3, r7
 802349c:	d301      	bcc.n	80234a2 <_malloc_r+0x416>
 802349e:	2a0f      	cmp	r2, #15
 80234a0:	dc22      	bgt.n	80234e8 <_malloc_r+0x45c>
 80234a2:	4628      	mov	r0, r5
 80234a4:	f001 ffb4 	bl	8025410 <__malloc_unlock>
 80234a8:	e5fc      	b.n	80230a4 <_malloc_r+0x18>
 80234aa:	4610      	mov	r0, r2
 80234ac:	46d8      	mov	r8, fp
 80234ae:	e7dd      	b.n	802346c <_malloc_r+0x3e0>
 80234b0:	f8da 2004 	ldr.w	r2, [sl, #4]
 80234b4:	f1a9 090c 	sub.w	r9, r9, #12
 80234b8:	f029 0907 	bic.w	r9, r9, #7
 80234bc:	f002 0201 	and.w	r2, r2, #1
 80234c0:	ea42 0209 	orr.w	r2, r2, r9
 80234c4:	f8ca 2004 	str.w	r2, [sl, #4]
 80234c8:	2105      	movs	r1, #5
 80234ca:	eb0a 0209 	add.w	r2, sl, r9
 80234ce:	f1b9 0f0f 	cmp.w	r9, #15
 80234d2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80234d6:	f67f aefe 	bls.w	80232d6 <_malloc_r+0x24a>
 80234da:	f10a 0108 	add.w	r1, sl, #8
 80234de:	4628      	mov	r0, r5
 80234e0:	f004 fe94 	bl	802820c <_free_r>
 80234e4:	4b05      	ldr	r3, [pc, #20]	@ (80234fc <_malloc_r+0x470>)
 80234e6:	e6f6      	b.n	80232d6 <_malloc_r+0x24a>
 80234e8:	68b4      	ldr	r4, [r6, #8]
 80234ea:	f047 0301 	orr.w	r3, r7, #1
 80234ee:	4427      	add	r7, r4
 80234f0:	f042 0201 	orr.w	r2, r2, #1
 80234f4:	6063      	str	r3, [r4, #4]
 80234f6:	60b7      	str	r7, [r6, #8]
 80234f8:	607a      	str	r2, [r7, #4]
 80234fa:	e5f8      	b.n	80230ee <_malloc_r+0x62>
 80234fc:	20018160 	.word	0x20018160

08023500 <printf>:
 8023500:	b40f      	push	{r0, r1, r2, r3}
 8023502:	b507      	push	{r0, r1, r2, lr}
 8023504:	4906      	ldr	r1, [pc, #24]	@ (8023520 <printf+0x20>)
 8023506:	ab04      	add	r3, sp, #16
 8023508:	6808      	ldr	r0, [r1, #0]
 802350a:	f853 2b04 	ldr.w	r2, [r3], #4
 802350e:	6881      	ldr	r1, [r0, #8]
 8023510:	9301      	str	r3, [sp, #4]
 8023512:	f000 f809 	bl	8023528 <_vfprintf_r>
 8023516:	b003      	add	sp, #12
 8023518:	f85d eb04 	ldr.w	lr, [sp], #4
 802351c:	b004      	add	sp, #16
 802351e:	4770      	bx	lr
 8023520:	20000840 	.word	0x20000840
 8023524:	00000000 	.word	0x00000000

08023528 <_vfprintf_r>:
 8023528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802352c:	b0d3      	sub	sp, #332	@ 0x14c
 802352e:	468b      	mov	fp, r1
 8023530:	4690      	mov	r8, r2
 8023532:	461c      	mov	r4, r3
 8023534:	461e      	mov	r6, r3
 8023536:	9003      	str	r0, [sp, #12]
 8023538:	f003 fe9c 	bl	8027274 <_localeconv_r>
 802353c:	6803      	ldr	r3, [r0, #0]
 802353e:	9316      	str	r3, [sp, #88]	@ 0x58
 8023540:	4618      	mov	r0, r3
 8023542:	f7dc fead 	bl	80002a0 <strlen>
 8023546:	9b03      	ldr	r3, [sp, #12]
 8023548:	900d      	str	r0, [sp, #52]	@ 0x34
 802354a:	b123      	cbz	r3, 8023556 <_vfprintf_r+0x2e>
 802354c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802354e:	b913      	cbnz	r3, 8023556 <_vfprintf_r+0x2e>
 8023550:	9803      	ldr	r0, [sp, #12]
 8023552:	f002 fa5b 	bl	8025a0c <__sinit>
 8023556:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802355a:	07da      	lsls	r2, r3, #31
 802355c:	d407      	bmi.n	802356e <_vfprintf_r+0x46>
 802355e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8023562:	059b      	lsls	r3, r3, #22
 8023564:	d403      	bmi.n	802356e <_vfprintf_r+0x46>
 8023566:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802356a:	f003 ff4a 	bl	8027402 <__retarget_lock_acquire_recursive>
 802356e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8023572:	049f      	lsls	r7, r3, #18
 8023574:	d409      	bmi.n	802358a <_vfprintf_r+0x62>
 8023576:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802357a:	f8ab 300c 	strh.w	r3, [fp, #12]
 802357e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8023582:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8023586:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802358a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802358e:	071d      	lsls	r5, r3, #28
 8023590:	d502      	bpl.n	8023598 <_vfprintf_r+0x70>
 8023592:	f8db 3010 	ldr.w	r3, [fp, #16]
 8023596:	b9c3      	cbnz	r3, 80235ca <_vfprintf_r+0xa2>
 8023598:	9803      	ldr	r0, [sp, #12]
 802359a:	4659      	mov	r1, fp
 802359c:	f002 fbf2 	bl	8025d84 <__swsetup_r>
 80235a0:	b198      	cbz	r0, 80235ca <_vfprintf_r+0xa2>
 80235a2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80235a6:	07d8      	lsls	r0, r3, #31
 80235a8:	d506      	bpl.n	80235b8 <_vfprintf_r+0x90>
 80235aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80235ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80235b0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80235b2:	b053      	add	sp, #332	@ 0x14c
 80235b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235b8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80235bc:	0599      	lsls	r1, r3, #22
 80235be:	d4f4      	bmi.n	80235aa <_vfprintf_r+0x82>
 80235c0:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80235c4:	f003 ff1f 	bl	8027406 <__retarget_lock_release_recursive>
 80235c8:	e7ef      	b.n	80235aa <_vfprintf_r+0x82>
 80235ca:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80235ce:	f003 021a 	and.w	r2, r3, #26
 80235d2:	2a0a      	cmp	r2, #10
 80235d4:	d116      	bne.n	8023604 <_vfprintf_r+0xdc>
 80235d6:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 80235da:	2a00      	cmp	r2, #0
 80235dc:	db12      	blt.n	8023604 <_vfprintf_r+0xdc>
 80235de:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 80235e2:	07d2      	lsls	r2, r2, #31
 80235e4:	d405      	bmi.n	80235f2 <_vfprintf_r+0xca>
 80235e6:	059b      	lsls	r3, r3, #22
 80235e8:	d403      	bmi.n	80235f2 <_vfprintf_r+0xca>
 80235ea:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80235ee:	f003 ff0a 	bl	8027406 <__retarget_lock_release_recursive>
 80235f2:	9803      	ldr	r0, [sp, #12]
 80235f4:	4623      	mov	r3, r4
 80235f6:	4642      	mov	r2, r8
 80235f8:	4659      	mov	r1, fp
 80235fa:	b053      	add	sp, #332	@ 0x14c
 80235fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023600:	f001 b9be 	b.w	8024980 <__sbprintf>
 8023604:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8023850 <_vfprintf_r+0x328>
 8023608:	2300      	movs	r3, #0
 802360a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802360e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8023612:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8023616:	ac29      	add	r4, sp, #164	@ 0xa4
 8023618:	9426      	str	r4, [sp, #152]	@ 0x98
 802361a:	9304      	str	r3, [sp, #16]
 802361c:	9309      	str	r3, [sp, #36]	@ 0x24
 802361e:	9312      	str	r3, [sp, #72]	@ 0x48
 8023620:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023622:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023624:	4643      	mov	r3, r8
 8023626:	461d      	mov	r5, r3
 8023628:	f813 2b01 	ldrb.w	r2, [r3], #1
 802362c:	b10a      	cbz	r2, 8023632 <_vfprintf_r+0x10a>
 802362e:	2a25      	cmp	r2, #37	@ 0x25
 8023630:	d1f9      	bne.n	8023626 <_vfprintf_r+0xfe>
 8023632:	ebb5 0708 	subs.w	r7, r5, r8
 8023636:	d00d      	beq.n	8023654 <_vfprintf_r+0x12c>
 8023638:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802363a:	443b      	add	r3, r7
 802363c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802363e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023640:	3301      	adds	r3, #1
 8023642:	2b07      	cmp	r3, #7
 8023644:	e9c4 8700 	strd	r8, r7, [r4]
 8023648:	9327      	str	r3, [sp, #156]	@ 0x9c
 802364a:	dc75      	bgt.n	8023738 <_vfprintf_r+0x210>
 802364c:	3408      	adds	r4, #8
 802364e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023650:	443b      	add	r3, r7
 8023652:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023654:	782b      	ldrb	r3, [r5, #0]
 8023656:	2b00      	cmp	r3, #0
 8023658:	f001 814f 	beq.w	80248fa <_vfprintf_r+0x13d2>
 802365c:	2200      	movs	r2, #0
 802365e:	1c6b      	adds	r3, r5, #1
 8023660:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8023664:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8023668:	920e      	str	r2, [sp, #56]	@ 0x38
 802366a:	4615      	mov	r5, r2
 802366c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023670:	9206      	str	r2, [sp, #24]
 8023672:	930c      	str	r3, [sp, #48]	@ 0x30
 8023674:	9b06      	ldr	r3, [sp, #24]
 8023676:	3b20      	subs	r3, #32
 8023678:	2b5a      	cmp	r3, #90	@ 0x5a
 802367a:	f200 85aa 	bhi.w	80241d2 <_vfprintf_r+0xcaa>
 802367e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023682:	009d      	.short	0x009d
 8023684:	05a805a8 	.word	0x05a805a8
 8023688:	05a800a5 	.word	0x05a800a5
 802368c:	05a805a8 	.word	0x05a805a8
 8023690:	05a80085 	.word	0x05a80085
 8023694:	00a805a8 	.word	0x00a805a8
 8023698:	05a800b2 	.word	0x05a800b2
 802369c:	00b400af 	.word	0x00b400af
 80236a0:	00ce05a8 	.word	0x00ce05a8
 80236a4:	00d100d1 	.word	0x00d100d1
 80236a8:	00d100d1 	.word	0x00d100d1
 80236ac:	00d100d1 	.word	0x00d100d1
 80236b0:	00d100d1 	.word	0x00d100d1
 80236b4:	05a800d1 	.word	0x05a800d1
 80236b8:	05a805a8 	.word	0x05a805a8
 80236bc:	05a805a8 	.word	0x05a805a8
 80236c0:	05a805a8 	.word	0x05a805a8
 80236c4:	05a80146 	.word	0x05a80146
 80236c8:	011a0107 	.word	0x011a0107
 80236cc:	01460146 	.word	0x01460146
 80236d0:	05a80146 	.word	0x05a80146
 80236d4:	05a805a8 	.word	0x05a805a8
 80236d8:	00e205a8 	.word	0x00e205a8
 80236dc:	05a805a8 	.word	0x05a805a8
 80236e0:	05a804a3 	.word	0x05a804a3
 80236e4:	05a805a8 	.word	0x05a805a8
 80236e8:	05a804ed 	.word	0x05a804ed
 80236ec:	05a8050e 	.word	0x05a8050e
 80236f0:	053005a8 	.word	0x053005a8
 80236f4:	05a805a8 	.word	0x05a805a8
 80236f8:	05a805a8 	.word	0x05a805a8
 80236fc:	05a805a8 	.word	0x05a805a8
 8023700:	05a805a8 	.word	0x05a805a8
 8023704:	05a80146 	.word	0x05a80146
 8023708:	011c0107 	.word	0x011c0107
 802370c:	01460146 	.word	0x01460146
 8023710:	00ed0146 	.word	0x00ed0146
 8023714:	0101011c 	.word	0x0101011c
 8023718:	00fa05a8 	.word	0x00fa05a8
 802371c:	048705a8 	.word	0x048705a8
 8023720:	04dc04a5 	.word	0x04dc04a5
 8023724:	05a80101 	.word	0x05a80101
 8023728:	009b04ed 	.word	0x009b04ed
 802372c:	05a80510 	.word	0x05a80510
 8023730:	006505a8 	.word	0x006505a8
 8023734:	009b05a8 	.word	0x009b05a8
 8023738:	9803      	ldr	r0, [sp, #12]
 802373a:	aa26      	add	r2, sp, #152	@ 0x98
 802373c:	4659      	mov	r1, fp
 802373e:	f001 f95f 	bl	8024a00 <__sprint_r>
 8023742:	2800      	cmp	r0, #0
 8023744:	f040 814d 	bne.w	80239e2 <_vfprintf_r+0x4ba>
 8023748:	ac29      	add	r4, sp, #164	@ 0xa4
 802374a:	e780      	b.n	802364e <_vfprintf_r+0x126>
 802374c:	4b42      	ldr	r3, [pc, #264]	@ (8023858 <_vfprintf_r+0x330>)
 802374e:	9319      	str	r3, [sp, #100]	@ 0x64
 8023750:	f015 0320 	ands.w	r3, r5, #32
 8023754:	f000 84c8 	beq.w	80240e8 <_vfprintf_r+0xbc0>
 8023758:	3607      	adds	r6, #7
 802375a:	f026 0307 	bic.w	r3, r6, #7
 802375e:	461a      	mov	r2, r3
 8023760:	685f      	ldr	r7, [r3, #4]
 8023762:	f852 6b08 	ldr.w	r6, [r2], #8
 8023766:	9207      	str	r2, [sp, #28]
 8023768:	07eb      	lsls	r3, r5, #31
 802376a:	d50a      	bpl.n	8023782 <_vfprintf_r+0x25a>
 802376c:	ea56 0307 	orrs.w	r3, r6, r7
 8023770:	d007      	beq.n	8023782 <_vfprintf_r+0x25a>
 8023772:	2330      	movs	r3, #48	@ 0x30
 8023774:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8023778:	9b06      	ldr	r3, [sp, #24]
 802377a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802377e:	f045 0502 	orr.w	r5, r5, #2
 8023782:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8023786:	2302      	movs	r3, #2
 8023788:	f000 bc2e 	b.w	8023fe8 <_vfprintf_r+0xac0>
 802378c:	9803      	ldr	r0, [sp, #12]
 802378e:	f003 fd71 	bl	8027274 <_localeconv_r>
 8023792:	6843      	ldr	r3, [r0, #4]
 8023794:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023796:	4618      	mov	r0, r3
 8023798:	f7dc fd82 	bl	80002a0 <strlen>
 802379c:	9012      	str	r0, [sp, #72]	@ 0x48
 802379e:	9803      	ldr	r0, [sp, #12]
 80237a0:	f003 fd68 	bl	8027274 <_localeconv_r>
 80237a4:	6883      	ldr	r3, [r0, #8]
 80237a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80237a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80237aa:	b12b      	cbz	r3, 80237b8 <_vfprintf_r+0x290>
 80237ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237ae:	b11b      	cbz	r3, 80237b8 <_vfprintf_r+0x290>
 80237b0:	781b      	ldrb	r3, [r3, #0]
 80237b2:	b10b      	cbz	r3, 80237b8 <_vfprintf_r+0x290>
 80237b4:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 80237b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80237ba:	e757      	b.n	802366c <_vfprintf_r+0x144>
 80237bc:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80237c0:	2b00      	cmp	r3, #0
 80237c2:	d1f9      	bne.n	80237b8 <_vfprintf_r+0x290>
 80237c4:	2320      	movs	r3, #32
 80237c6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80237ca:	e7f5      	b.n	80237b8 <_vfprintf_r+0x290>
 80237cc:	f045 0501 	orr.w	r5, r5, #1
 80237d0:	e7f2      	b.n	80237b8 <_vfprintf_r+0x290>
 80237d2:	f856 3b04 	ldr.w	r3, [r6], #4
 80237d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80237d8:	2b00      	cmp	r3, #0
 80237da:	daed      	bge.n	80237b8 <_vfprintf_r+0x290>
 80237dc:	425b      	negs	r3, r3
 80237de:	930e      	str	r3, [sp, #56]	@ 0x38
 80237e0:	f045 0504 	orr.w	r5, r5, #4
 80237e4:	e7e8      	b.n	80237b8 <_vfprintf_r+0x290>
 80237e6:	232b      	movs	r3, #43	@ 0x2b
 80237e8:	e7ed      	b.n	80237c6 <_vfprintf_r+0x29e>
 80237ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80237ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80237f0:	9206      	str	r2, [sp, #24]
 80237f2:	2a2a      	cmp	r2, #42	@ 0x2a
 80237f4:	d10f      	bne.n	8023816 <_vfprintf_r+0x2ee>
 80237f6:	f856 2b04 	ldr.w	r2, [r6], #4
 80237fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80237fc:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8023800:	e7da      	b.n	80237b8 <_vfprintf_r+0x290>
 8023802:	fb01 2909 	mla	r9, r1, r9, r2
 8023806:	f813 2b01 	ldrb.w	r2, [r3], #1
 802380a:	9206      	str	r2, [sp, #24]
 802380c:	9a06      	ldr	r2, [sp, #24]
 802380e:	3a30      	subs	r2, #48	@ 0x30
 8023810:	2a09      	cmp	r2, #9
 8023812:	d9f6      	bls.n	8023802 <_vfprintf_r+0x2da>
 8023814:	e72d      	b.n	8023672 <_vfprintf_r+0x14a>
 8023816:	f04f 0900 	mov.w	r9, #0
 802381a:	210a      	movs	r1, #10
 802381c:	e7f6      	b.n	802380c <_vfprintf_r+0x2e4>
 802381e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8023822:	e7c9      	b.n	80237b8 <_vfprintf_r+0x290>
 8023824:	2200      	movs	r2, #0
 8023826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023828:	920e      	str	r2, [sp, #56]	@ 0x38
 802382a:	210a      	movs	r1, #10
 802382c:	9a06      	ldr	r2, [sp, #24]
 802382e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8023830:	3a30      	subs	r2, #48	@ 0x30
 8023832:	fb01 2200 	mla	r2, r1, r0, r2
 8023836:	920e      	str	r2, [sp, #56]	@ 0x38
 8023838:	f813 2b01 	ldrb.w	r2, [r3], #1
 802383c:	9206      	str	r2, [sp, #24]
 802383e:	3a30      	subs	r2, #48	@ 0x30
 8023840:	2a09      	cmp	r2, #9
 8023842:	d9f3      	bls.n	802382c <_vfprintf_r+0x304>
 8023844:	e715      	b.n	8023672 <_vfprintf_r+0x14a>
 8023846:	f045 0508 	orr.w	r5, r5, #8
 802384a:	e7b5      	b.n	80237b8 <_vfprintf_r+0x290>
 802384c:	f3af 8000 	nop.w
	...
 8023858:	08034048 	.word	0x08034048
 802385c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802385e:	781b      	ldrb	r3, [r3, #0]
 8023860:	2b68      	cmp	r3, #104	@ 0x68
 8023862:	bf01      	itttt	eq
 8023864:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8023866:	3301      	addeq	r3, #1
 8023868:	930c      	streq	r3, [sp, #48]	@ 0x30
 802386a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802386e:	bf18      	it	ne
 8023870:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8023874:	e7a0      	b.n	80237b8 <_vfprintf_r+0x290>
 8023876:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023878:	781b      	ldrb	r3, [r3, #0]
 802387a:	2b6c      	cmp	r3, #108	@ 0x6c
 802387c:	d105      	bne.n	802388a <_vfprintf_r+0x362>
 802387e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023880:	3301      	adds	r3, #1
 8023882:	930c      	str	r3, [sp, #48]	@ 0x30
 8023884:	f045 0520 	orr.w	r5, r5, #32
 8023888:	e796      	b.n	80237b8 <_vfprintf_r+0x290>
 802388a:	f045 0510 	orr.w	r5, r5, #16
 802388e:	e793      	b.n	80237b8 <_vfprintf_r+0x290>
 8023890:	4632      	mov	r2, r6
 8023892:	f852 3b04 	ldr.w	r3, [r2], #4
 8023896:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802389a:	2300      	movs	r3, #0
 802389c:	9207      	str	r2, [sp, #28]
 802389e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80238a2:	469a      	mov	sl, r3
 80238a4:	f04f 0901 	mov.w	r9, #1
 80238a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80238aa:	461f      	mov	r7, r3
 80238ac:	9308      	str	r3, [sp, #32]
 80238ae:	461e      	mov	r6, r3
 80238b0:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 80238b4:	e1da      	b.n	8023c6c <_vfprintf_r+0x744>
 80238b6:	f045 0510 	orr.w	r5, r5, #16
 80238ba:	06af      	lsls	r7, r5, #26
 80238bc:	d512      	bpl.n	80238e4 <_vfprintf_r+0x3bc>
 80238be:	3607      	adds	r6, #7
 80238c0:	f026 0307 	bic.w	r3, r6, #7
 80238c4:	461a      	mov	r2, r3
 80238c6:	685f      	ldr	r7, [r3, #4]
 80238c8:	f852 6b08 	ldr.w	r6, [r2], #8
 80238cc:	9207      	str	r2, [sp, #28]
 80238ce:	2f00      	cmp	r7, #0
 80238d0:	da06      	bge.n	80238e0 <_vfprintf_r+0x3b8>
 80238d2:	4276      	negs	r6, r6
 80238d4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80238d8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80238dc:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80238e0:	2301      	movs	r3, #1
 80238e2:	e384      	b.n	8023fee <_vfprintf_r+0xac6>
 80238e4:	4633      	mov	r3, r6
 80238e6:	06ee      	lsls	r6, r5, #27
 80238e8:	f853 7b04 	ldr.w	r7, [r3], #4
 80238ec:	9307      	str	r3, [sp, #28]
 80238ee:	d502      	bpl.n	80238f6 <_vfprintf_r+0x3ce>
 80238f0:	463e      	mov	r6, r7
 80238f2:	17ff      	asrs	r7, r7, #31
 80238f4:	e7eb      	b.n	80238ce <_vfprintf_r+0x3a6>
 80238f6:	0668      	lsls	r0, r5, #25
 80238f8:	d503      	bpl.n	8023902 <_vfprintf_r+0x3da>
 80238fa:	b23e      	sxth	r6, r7
 80238fc:	f347 37c0 	sbfx	r7, r7, #15, #1
 8023900:	e7e5      	b.n	80238ce <_vfprintf_r+0x3a6>
 8023902:	05a9      	lsls	r1, r5, #22
 8023904:	d5f4      	bpl.n	80238f0 <_vfprintf_r+0x3c8>
 8023906:	b27e      	sxtb	r6, r7
 8023908:	f347 17c0 	sbfx	r7, r7, #7, #1
 802390c:	e7df      	b.n	80238ce <_vfprintf_r+0x3a6>
 802390e:	3607      	adds	r6, #7
 8023910:	f026 0307 	bic.w	r3, r6, #7
 8023914:	ecb3 7b02 	vldmia	r3!, {d7}
 8023918:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802391c:	9307      	str	r3, [sp, #28]
 802391e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023920:	931a      	str	r3, [sp, #104]	@ 0x68
 8023922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023924:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8023928:	931b      	str	r3, [sp, #108]	@ 0x6c
 802392a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802392e:	4b85      	ldr	r3, [pc, #532]	@ (8023b44 <_vfprintf_r+0x61c>)
 8023930:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8023934:	f7dd f912 	bl	8000b5c <__aeabi_dcmpun>
 8023938:	bb10      	cbnz	r0, 8023980 <_vfprintf_r+0x458>
 802393a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802393e:	4b81      	ldr	r3, [pc, #516]	@ (8023b44 <_vfprintf_r+0x61c>)
 8023940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8023944:	f7dd f8ec 	bl	8000b20 <__aeabi_dcmple>
 8023948:	b9d0      	cbnz	r0, 8023980 <_vfprintf_r+0x458>
 802394a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802394e:	2200      	movs	r2, #0
 8023950:	2300      	movs	r3, #0
 8023952:	f7dd f8db 	bl	8000b0c <__aeabi_dcmplt>
 8023956:	b110      	cbz	r0, 802395e <_vfprintf_r+0x436>
 8023958:	232d      	movs	r3, #45	@ 0x2d
 802395a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802395e:	4a7a      	ldr	r2, [pc, #488]	@ (8023b48 <_vfprintf_r+0x620>)
 8023960:	4b7a      	ldr	r3, [pc, #488]	@ (8023b4c <_vfprintf_r+0x624>)
 8023962:	9906      	ldr	r1, [sp, #24]
 8023964:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8023968:	2947      	cmp	r1, #71	@ 0x47
 802396a:	bfd4      	ite	le
 802396c:	4690      	movle	r8, r2
 802396e:	4698      	movgt	r8, r3
 8023970:	f04f 0a00 	mov.w	sl, #0
 8023974:	f04f 0903 	mov.w	r9, #3
 8023978:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802397c:	f000 bff8 	b.w	8024970 <_vfprintf_r+0x1448>
 8023980:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8023984:	4610      	mov	r0, r2
 8023986:	4619      	mov	r1, r3
 8023988:	f7dd f8e8 	bl	8000b5c <__aeabi_dcmpun>
 802398c:	4682      	mov	sl, r0
 802398e:	b140      	cbz	r0, 80239a2 <_vfprintf_r+0x47a>
 8023990:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023992:	4a6f      	ldr	r2, [pc, #444]	@ (8023b50 <_vfprintf_r+0x628>)
 8023994:	2b00      	cmp	r3, #0
 8023996:	bfbc      	itt	lt
 8023998:	232d      	movlt	r3, #45	@ 0x2d
 802399a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802399e:	4b6d      	ldr	r3, [pc, #436]	@ (8023b54 <_vfprintf_r+0x62c>)
 80239a0:	e7df      	b.n	8023962 <_vfprintf_r+0x43a>
 80239a2:	9b06      	ldr	r3, [sp, #24]
 80239a4:	2b61      	cmp	r3, #97	@ 0x61
 80239a6:	d02e      	beq.n	8023a06 <_vfprintf_r+0x4de>
 80239a8:	2b41      	cmp	r3, #65	@ 0x41
 80239aa:	d12e      	bne.n	8023a0a <_vfprintf_r+0x4e2>
 80239ac:	2358      	movs	r3, #88	@ 0x58
 80239ae:	2230      	movs	r2, #48	@ 0x30
 80239b0:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 80239b4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80239b8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80239bc:	f045 0502 	orr.w	r5, r5, #2
 80239c0:	f340 80ae 	ble.w	8023b20 <_vfprintf_r+0x5f8>
 80239c4:	9803      	ldr	r0, [sp, #12]
 80239c6:	f109 0101 	add.w	r1, r9, #1
 80239ca:	f7ff fb5f 	bl	802308c <_malloc_r>
 80239ce:	4680      	mov	r8, r0
 80239d0:	2800      	cmp	r0, #0
 80239d2:	f040 80aa 	bne.w	8023b2a <_vfprintf_r+0x602>
 80239d6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80239da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80239de:	f8ab 300c 	strh.w	r3, [fp, #12]
 80239e2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80239e6:	07d9      	lsls	r1, r3, #31
 80239e8:	d407      	bmi.n	80239fa <_vfprintf_r+0x4d2>
 80239ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80239ee:	059a      	lsls	r2, r3, #22
 80239f0:	d403      	bmi.n	80239fa <_vfprintf_r+0x4d2>
 80239f2:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80239f6:	f003 fd06 	bl	8027406 <__retarget_lock_release_recursive>
 80239fa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80239fe:	065b      	lsls	r3, r3, #25
 8023a00:	f57f add6 	bpl.w	80235b0 <_vfprintf_r+0x88>
 8023a04:	e5d1      	b.n	80235aa <_vfprintf_r+0x82>
 8023a06:	2378      	movs	r3, #120	@ 0x78
 8023a08:	e7d1      	b.n	80239ae <_vfprintf_r+0x486>
 8023a0a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8023a0e:	f000 808e 	beq.w	8023b2e <_vfprintf_r+0x606>
 8023a12:	9b06      	ldr	r3, [sp, #24]
 8023a14:	f023 0320 	bic.w	r3, r3, #32
 8023a18:	2b47      	cmp	r3, #71	@ 0x47
 8023a1a:	d105      	bne.n	8023a28 <_vfprintf_r+0x500>
 8023a1c:	f1b9 0f00 	cmp.w	r9, #0
 8023a20:	d102      	bne.n	8023a28 <_vfprintf_r+0x500>
 8023a22:	46ca      	mov	sl, r9
 8023a24:	f04f 0901 	mov.w	r9, #1
 8023a28:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8023a2c:	9311      	str	r3, [sp, #68]	@ 0x44
 8023a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023a30:	2b00      	cmp	r3, #0
 8023a32:	da7f      	bge.n	8023b34 <_vfprintf_r+0x60c>
 8023a34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023a36:	9314      	str	r3, [sp, #80]	@ 0x50
 8023a38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023a3a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8023a3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8023a40:	232d      	movs	r3, #45	@ 0x2d
 8023a42:	931c      	str	r3, [sp, #112]	@ 0x70
 8023a44:	9b06      	ldr	r3, [sp, #24]
 8023a46:	f023 0320 	bic.w	r3, r3, #32
 8023a4a:	2b41      	cmp	r3, #65	@ 0x41
 8023a4c:	9308      	str	r3, [sp, #32]
 8023a4e:	f040 81e7 	bne.w	8023e20 <_vfprintf_r+0x8f8>
 8023a52:	a820      	add	r0, sp, #128	@ 0x80
 8023a54:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8023a58:	f003 fcfa 	bl	8027450 <frexp>
 8023a5c:	2200      	movs	r2, #0
 8023a5e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8023a62:	ec51 0b10 	vmov	r0, r1, d0
 8023a66:	f7dc fddf 	bl	8000628 <__aeabi_dmul>
 8023a6a:	4602      	mov	r2, r0
 8023a6c:	460b      	mov	r3, r1
 8023a6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023a72:	2200      	movs	r2, #0
 8023a74:	2300      	movs	r3, #0
 8023a76:	f7dd f83f 	bl	8000af8 <__aeabi_dcmpeq>
 8023a7a:	b108      	cbz	r0, 8023a80 <_vfprintf_r+0x558>
 8023a7c:	2301      	movs	r3, #1
 8023a7e:	9320      	str	r3, [sp, #128]	@ 0x80
 8023a80:	4a35      	ldr	r2, [pc, #212]	@ (8023b58 <_vfprintf_r+0x630>)
 8023a82:	4b36      	ldr	r3, [pc, #216]	@ (8023b5c <_vfprintf_r+0x634>)
 8023a84:	9906      	ldr	r1, [sp, #24]
 8023a86:	2961      	cmp	r1, #97	@ 0x61
 8023a88:	bf18      	it	ne
 8023a8a:	461a      	movne	r2, r3
 8023a8c:	9210      	str	r2, [sp, #64]	@ 0x40
 8023a8e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 8023a92:	4646      	mov	r6, r8
 8023a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023a98:	4b31      	ldr	r3, [pc, #196]	@ (8023b60 <_vfprintf_r+0x638>)
 8023a9a:	2200      	movs	r2, #0
 8023a9c:	f7dc fdc4 	bl	8000628 <__aeabi_dmul>
 8023aa0:	4602      	mov	r2, r0
 8023aa2:	460b      	mov	r3, r1
 8023aa4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023aa8:	f7dd f86e 	bl	8000b88 <__aeabi_d2iz>
 8023aac:	9013      	str	r0, [sp, #76]	@ 0x4c
 8023aae:	f7dc fd51 	bl	8000554 <__aeabi_i2d>
 8023ab2:	4602      	mov	r2, r0
 8023ab4:	460b      	mov	r3, r1
 8023ab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023aba:	f7dc fbfd 	bl	80002b8 <__aeabi_dsub>
 8023abe:	4602      	mov	r2, r0
 8023ac0:	460b      	mov	r3, r1
 8023ac2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023ac6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023ac8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023aca:	5c9b      	ldrb	r3, [r3, r2]
 8023acc:	f806 3b01 	strb.w	r3, [r6], #1
 8023ad0:	1c7a      	adds	r2, r7, #1
 8023ad2:	d006      	beq.n	8023ae2 <_vfprintf_r+0x5ba>
 8023ad4:	1e7b      	subs	r3, r7, #1
 8023ad6:	931d      	str	r3, [sp, #116]	@ 0x74
 8023ad8:	2200      	movs	r2, #0
 8023ada:	2300      	movs	r3, #0
 8023adc:	f7dd f80c 	bl	8000af8 <__aeabi_dcmpeq>
 8023ae0:	b370      	cbz	r0, 8023b40 <_vfprintf_r+0x618>
 8023ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8023b64 <_vfprintf_r+0x63c>)
 8023ae8:	2200      	movs	r2, #0
 8023aea:	f7dd f82d 	bl	8000b48 <__aeabi_dcmpgt>
 8023aee:	2800      	cmp	r0, #0
 8023af0:	d13a      	bne.n	8023b68 <_vfprintf_r+0x640>
 8023af2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023af6:	4b1b      	ldr	r3, [pc, #108]	@ (8023b64 <_vfprintf_r+0x63c>)
 8023af8:	2200      	movs	r2, #0
 8023afa:	f7dc fffd 	bl	8000af8 <__aeabi_dcmpeq>
 8023afe:	b110      	cbz	r0, 8023b06 <_vfprintf_r+0x5de>
 8023b00:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023b02:	07db      	lsls	r3, r3, #31
 8023b04:	d430      	bmi.n	8023b68 <_vfprintf_r+0x640>
 8023b06:	4633      	mov	r3, r6
 8023b08:	19f1      	adds	r1, r6, r7
 8023b0a:	2030      	movs	r0, #48	@ 0x30
 8023b0c:	1aca      	subs	r2, r1, r3
 8023b0e:	2a00      	cmp	r2, #0
 8023b10:	f280 8183 	bge.w	8023e1a <_vfprintf_r+0x8f2>
 8023b14:	1c7b      	adds	r3, r7, #1
 8023b16:	3701      	adds	r7, #1
 8023b18:	bfb8      	it	lt
 8023b1a:	2300      	movlt	r3, #0
 8023b1c:	441e      	add	r6, r3
 8023b1e:	e037      	b.n	8023b90 <_vfprintf_r+0x668>
 8023b20:	f04f 0a00 	mov.w	sl, #0
 8023b24:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8023b28:	e77e      	b.n	8023a28 <_vfprintf_r+0x500>
 8023b2a:	4682      	mov	sl, r0
 8023b2c:	e77c      	b.n	8023a28 <_vfprintf_r+0x500>
 8023b2e:	f04f 0906 	mov.w	r9, #6
 8023b32:	e779      	b.n	8023a28 <_vfprintf_r+0x500>
 8023b34:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8023b38:	2300      	movs	r3, #0
 8023b3a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8023b3e:	e780      	b.n	8023a42 <_vfprintf_r+0x51a>
 8023b40:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8023b42:	e7a7      	b.n	8023a94 <_vfprintf_r+0x56c>
 8023b44:	7fefffff 	.word	0x7fefffff
 8023b48:	08034038 	.word	0x08034038
 8023b4c:	0803403c 	.word	0x0803403c
 8023b50:	08034040 	.word	0x08034040
 8023b54:	08034044 	.word	0x08034044
 8023b58:	08034048 	.word	0x08034048
 8023b5c:	08034059 	.word	0x08034059
 8023b60:	40300000 	.word	0x40300000
 8023b64:	3fe00000 	.word	0x3fe00000
 8023b68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023b6a:	9624      	str	r6, [sp, #144]	@ 0x90
 8023b6c:	7bd9      	ldrb	r1, [r3, #15]
 8023b6e:	2030      	movs	r0, #48	@ 0x30
 8023b70:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023b72:	1e53      	subs	r3, r2, #1
 8023b74:	9324      	str	r3, [sp, #144]	@ 0x90
 8023b76:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8023b7a:	428b      	cmp	r3, r1
 8023b7c:	f000 814a 	beq.w	8023e14 <_vfprintf_r+0x8ec>
 8023b80:	2b39      	cmp	r3, #57	@ 0x39
 8023b82:	bf0b      	itete	eq
 8023b84:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8023b86:	3301      	addne	r3, #1
 8023b88:	7a9b      	ldrbeq	r3, [r3, #10]
 8023b8a:	b2db      	uxtbne	r3, r3
 8023b8c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023b90:	eba6 0308 	sub.w	r3, r6, r8
 8023b94:	9304      	str	r3, [sp, #16]
 8023b96:	9b08      	ldr	r3, [sp, #32]
 8023b98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023b9a:	2b47      	cmp	r3, #71	@ 0x47
 8023b9c:	f040 8189 	bne.w	8023eb2 <_vfprintf_r+0x98a>
 8023ba0:	1cf1      	adds	r1, r6, #3
 8023ba2:	db02      	blt.n	8023baa <_vfprintf_r+0x682>
 8023ba4:	45b1      	cmp	r9, r6
 8023ba6:	f280 81a7 	bge.w	8023ef8 <_vfprintf_r+0x9d0>
 8023baa:	9b06      	ldr	r3, [sp, #24]
 8023bac:	3b02      	subs	r3, #2
 8023bae:	9306      	str	r3, [sp, #24]
 8023bb0:	9906      	ldr	r1, [sp, #24]
 8023bb2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8023bb6:	f021 0120 	bic.w	r1, r1, #32
 8023bba:	2941      	cmp	r1, #65	@ 0x41
 8023bbc:	bf08      	it	eq
 8023bbe:	320f      	addeq	r2, #15
 8023bc0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8023bc4:	bf06      	itte	eq
 8023bc6:	b2d2      	uxtbeq	r2, r2
 8023bc8:	2101      	moveq	r1, #1
 8023bca:	2100      	movne	r1, #0
 8023bcc:	2b00      	cmp	r3, #0
 8023bce:	9320      	str	r3, [sp, #128]	@ 0x80
 8023bd0:	bfb8      	it	lt
 8023bd2:	f1c6 0301 	rsblt	r3, r6, #1
 8023bd6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8023bda:	bfb4      	ite	lt
 8023bdc:	222d      	movlt	r2, #45	@ 0x2d
 8023bde:	222b      	movge	r2, #43	@ 0x2b
 8023be0:	2b09      	cmp	r3, #9
 8023be2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8023be6:	f340 817a 	ble.w	8023ede <_vfprintf_r+0x9b6>
 8023bea:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8023bee:	270a      	movs	r7, #10
 8023bf0:	4602      	mov	r2, r0
 8023bf2:	fbb3 f6f7 	udiv	r6, r3, r7
 8023bf6:	fb07 3116 	mls	r1, r7, r6, r3
 8023bfa:	3130      	adds	r1, #48	@ 0x30
 8023bfc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8023c00:	4619      	mov	r1, r3
 8023c02:	2963      	cmp	r1, #99	@ 0x63
 8023c04:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8023c08:	4633      	mov	r3, r6
 8023c0a:	dcf1      	bgt.n	8023bf0 <_vfprintf_r+0x6c8>
 8023c0c:	3330      	adds	r3, #48	@ 0x30
 8023c0e:	1e91      	subs	r1, r2, #2
 8023c10:	f800 3c01 	strb.w	r3, [r0, #-1]
 8023c14:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8023c18:	460b      	mov	r3, r1
 8023c1a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8023c1e:	4283      	cmp	r3, r0
 8023c20:	f0c0 8158 	bcc.w	8023ed4 <_vfprintf_r+0x9ac>
 8023c24:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8023c28:	1a9b      	subs	r3, r3, r2
 8023c2a:	4281      	cmp	r1, r0
 8023c2c:	bf88      	it	hi
 8023c2e:	2300      	movhi	r3, #0
 8023c30:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8023c34:	441a      	add	r2, r3
 8023c36:	ab22      	add	r3, sp, #136	@ 0x88
 8023c38:	1ad3      	subs	r3, r2, r3
 8023c3a:	9a04      	ldr	r2, [sp, #16]
 8023c3c:	9318      	str	r3, [sp, #96]	@ 0x60
 8023c3e:	2a01      	cmp	r2, #1
 8023c40:	eb03 0902 	add.w	r9, r3, r2
 8023c44:	dc01      	bgt.n	8023c4a <_vfprintf_r+0x722>
 8023c46:	07ea      	lsls	r2, r5, #31
 8023c48:	d501      	bpl.n	8023c4e <_vfprintf_r+0x726>
 8023c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023c4c:	4499      	add	r9, r3
 8023c4e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8023c52:	2700      	movs	r7, #0
 8023c54:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8023c58:	9311      	str	r3, [sp, #68]	@ 0x44
 8023c5a:	9708      	str	r7, [sp, #32]
 8023c5c:	463e      	mov	r6, r7
 8023c5e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023c60:	2b00      	cmp	r3, #0
 8023c62:	f040 8191 	bne.w	8023f88 <_vfprintf_r+0xa60>
 8023c66:	2300      	movs	r3, #0
 8023c68:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8023c6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8023c6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023c6e:	454b      	cmp	r3, r9
 8023c70:	bfb8      	it	lt
 8023c72:	464b      	movlt	r3, r9
 8023c74:	9311      	str	r3, [sp, #68]	@ 0x44
 8023c76:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8023c7a:	b113      	cbz	r3, 8023c82 <_vfprintf_r+0x75a>
 8023c7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023c7e:	3301      	adds	r3, #1
 8023c80:	9311      	str	r3, [sp, #68]	@ 0x44
 8023c82:	f015 0302 	ands.w	r3, r5, #2
 8023c86:	931c      	str	r3, [sp, #112]	@ 0x70
 8023c88:	bf1e      	ittt	ne
 8023c8a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8023c8c:	3302      	addne	r3, #2
 8023c8e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8023c90:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8023c94:	931d      	str	r3, [sp, #116]	@ 0x74
 8023c96:	d122      	bne.n	8023cde <_vfprintf_r+0x7b6>
 8023c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023c9a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023c9c:	1a9b      	subs	r3, r3, r2
 8023c9e:	2b00      	cmp	r3, #0
 8023ca0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023ca2:	dd1c      	ble.n	8023cde <_vfprintf_r+0x7b6>
 8023ca4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023ca6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8023caa:	2810      	cmp	r0, #16
 8023cac:	489f      	ldr	r0, [pc, #636]	@ (8023f2c <_vfprintf_r+0xa04>)
 8023cae:	6020      	str	r0, [r4, #0]
 8023cb0:	f102 0201 	add.w	r2, r2, #1
 8023cb4:	f104 0108 	add.w	r1, r4, #8
 8023cb8:	f300 8297 	bgt.w	80241ea <_vfprintf_r+0xcc2>
 8023cbc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023cbe:	6060      	str	r0, [r4, #4]
 8023cc0:	4403      	add	r3, r0
 8023cc2:	2a07      	cmp	r2, #7
 8023cc4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8023cc8:	f340 82a4 	ble.w	8024214 <_vfprintf_r+0xcec>
 8023ccc:	9803      	ldr	r0, [sp, #12]
 8023cce:	aa26      	add	r2, sp, #152	@ 0x98
 8023cd0:	4659      	mov	r1, fp
 8023cd2:	f000 fe95 	bl	8024a00 <__sprint_r>
 8023cd6:	2800      	cmp	r0, #0
 8023cd8:	f040 85ed 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8023cdc:	ac29      	add	r4, sp, #164	@ 0xa4
 8023cde:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8023ce2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023ce4:	b16a      	cbz	r2, 8023d02 <_vfprintf_r+0x7da>
 8023ce6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8023cea:	6022      	str	r2, [r4, #0]
 8023cec:	2201      	movs	r2, #1
 8023cee:	4413      	add	r3, r2
 8023cf0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023cf2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023cf4:	6062      	str	r2, [r4, #4]
 8023cf6:	4413      	add	r3, r2
 8023cf8:	2b07      	cmp	r3, #7
 8023cfa:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023cfc:	f300 828c 	bgt.w	8024218 <_vfprintf_r+0xcf0>
 8023d00:	3408      	adds	r4, #8
 8023d02:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8023d04:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023d06:	b162      	cbz	r2, 8023d22 <_vfprintf_r+0x7fa>
 8023d08:	aa1f      	add	r2, sp, #124	@ 0x7c
 8023d0a:	6022      	str	r2, [r4, #0]
 8023d0c:	2202      	movs	r2, #2
 8023d0e:	4413      	add	r3, r2
 8023d10:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023d12:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023d14:	6062      	str	r2, [r4, #4]
 8023d16:	3301      	adds	r3, #1
 8023d18:	2b07      	cmp	r3, #7
 8023d1a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023d1c:	f300 8286 	bgt.w	802422c <_vfprintf_r+0xd04>
 8023d20:	3408      	adds	r4, #8
 8023d22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023d24:	2b80      	cmp	r3, #128	@ 0x80
 8023d26:	d122      	bne.n	8023d6e <_vfprintf_r+0x846>
 8023d28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023d2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023d2c:	1a9b      	subs	r3, r3, r2
 8023d2e:	2b00      	cmp	r3, #0
 8023d30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023d32:	dd1c      	ble.n	8023d6e <_vfprintf_r+0x846>
 8023d34:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023d36:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8023d3a:	2810      	cmp	r0, #16
 8023d3c:	487c      	ldr	r0, [pc, #496]	@ (8023f30 <_vfprintf_r+0xa08>)
 8023d3e:	6020      	str	r0, [r4, #0]
 8023d40:	f102 0201 	add.w	r2, r2, #1
 8023d44:	f104 0108 	add.w	r1, r4, #8
 8023d48:	f300 827a 	bgt.w	8024240 <_vfprintf_r+0xd18>
 8023d4c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023d4e:	6060      	str	r0, [r4, #4]
 8023d50:	4403      	add	r3, r0
 8023d52:	2a07      	cmp	r2, #7
 8023d54:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8023d58:	f340 8287 	ble.w	802426a <_vfprintf_r+0xd42>
 8023d5c:	9803      	ldr	r0, [sp, #12]
 8023d5e:	aa26      	add	r2, sp, #152	@ 0x98
 8023d60:	4659      	mov	r1, fp
 8023d62:	f000 fe4d 	bl	8024a00 <__sprint_r>
 8023d66:	2800      	cmp	r0, #0
 8023d68:	f040 85a5 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8023d6c:	ac29      	add	r4, sp, #164	@ 0xa4
 8023d6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023d70:	eba3 0309 	sub.w	r3, r3, r9
 8023d74:	2b00      	cmp	r3, #0
 8023d76:	9310      	str	r3, [sp, #64]	@ 0x40
 8023d78:	dd1c      	ble.n	8023db4 <_vfprintf_r+0x88c>
 8023d7a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023d7c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8023d80:	2810      	cmp	r0, #16
 8023d82:	486b      	ldr	r0, [pc, #428]	@ (8023f30 <_vfprintf_r+0xa08>)
 8023d84:	6020      	str	r0, [r4, #0]
 8023d86:	f102 0201 	add.w	r2, r2, #1
 8023d8a:	f104 0108 	add.w	r1, r4, #8
 8023d8e:	f300 826e 	bgt.w	802426e <_vfprintf_r+0xd46>
 8023d92:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023d94:	6060      	str	r0, [r4, #4]
 8023d96:	4403      	add	r3, r0
 8023d98:	2a07      	cmp	r2, #7
 8023d9a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8023d9e:	f340 827b 	ble.w	8024298 <_vfprintf_r+0xd70>
 8023da2:	9803      	ldr	r0, [sp, #12]
 8023da4:	aa26      	add	r2, sp, #152	@ 0x98
 8023da6:	4659      	mov	r1, fp
 8023da8:	f000 fe2a 	bl	8024a00 <__sprint_r>
 8023dac:	2800      	cmp	r0, #0
 8023dae:	f040 8582 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8023db2:	ac29      	add	r4, sp, #164	@ 0xa4
 8023db4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023db6:	9310      	str	r3, [sp, #64]	@ 0x40
 8023db8:	05e8      	lsls	r0, r5, #23
 8023dba:	f100 8273 	bmi.w	80242a4 <_vfprintf_r+0xd7c>
 8023dbe:	444b      	add	r3, r9
 8023dc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023dc2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023dc4:	3301      	adds	r3, #1
 8023dc6:	2b07      	cmp	r3, #7
 8023dc8:	e9c4 8900 	strd	r8, r9, [r4]
 8023dcc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023dce:	f300 82af 	bgt.w	8024330 <_vfprintf_r+0xe08>
 8023dd2:	3408      	adds	r4, #8
 8023dd4:	0768      	lsls	r0, r5, #29
 8023dd6:	f100 8550 	bmi.w	802487a <_vfprintf_r+0x1352>
 8023dda:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8023dde:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023de0:	428a      	cmp	r2, r1
 8023de2:	bfac      	ite	ge
 8023de4:	189b      	addge	r3, r3, r2
 8023de6:	185b      	addlt	r3, r3, r1
 8023de8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023dea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023dec:	b13b      	cbz	r3, 8023dfe <_vfprintf_r+0x8d6>
 8023dee:	9803      	ldr	r0, [sp, #12]
 8023df0:	aa26      	add	r2, sp, #152	@ 0x98
 8023df2:	4659      	mov	r1, fp
 8023df4:	f000 fe04 	bl	8024a00 <__sprint_r>
 8023df8:	2800      	cmp	r0, #0
 8023dfa:	f040 855c 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8023dfe:	2300      	movs	r3, #0
 8023e00:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023e02:	f1ba 0f00 	cmp.w	sl, #0
 8023e06:	f040 8572 	bne.w	80248ee <_vfprintf_r+0x13c6>
 8023e0a:	9e07      	ldr	r6, [sp, #28]
 8023e0c:	ac29      	add	r4, sp, #164	@ 0xa4
 8023e0e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8023e12:	e407      	b.n	8023624 <_vfprintf_r+0xfc>
 8023e14:	f802 0c01 	strb.w	r0, [r2, #-1]
 8023e18:	e6aa      	b.n	8023b70 <_vfprintf_r+0x648>
 8023e1a:	f803 0b01 	strb.w	r0, [r3], #1
 8023e1e:	e675      	b.n	8023b0c <_vfprintf_r+0x5e4>
 8023e20:	9b08      	ldr	r3, [sp, #32]
 8023e22:	2b46      	cmp	r3, #70	@ 0x46
 8023e24:	d005      	beq.n	8023e32 <_vfprintf_r+0x90a>
 8023e26:	2b45      	cmp	r3, #69	@ 0x45
 8023e28:	d11a      	bne.n	8023e60 <_vfprintf_r+0x938>
 8023e2a:	f109 0601 	add.w	r6, r9, #1
 8023e2e:	2102      	movs	r1, #2
 8023e30:	e001      	b.n	8023e36 <_vfprintf_r+0x90e>
 8023e32:	464e      	mov	r6, r9
 8023e34:	2103      	movs	r1, #3
 8023e36:	ab24      	add	r3, sp, #144	@ 0x90
 8023e38:	9301      	str	r3, [sp, #4]
 8023e3a:	ab21      	add	r3, sp, #132	@ 0x84
 8023e3c:	9300      	str	r3, [sp, #0]
 8023e3e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8023e42:	ab20      	add	r3, sp, #128	@ 0x80
 8023e44:	9803      	ldr	r0, [sp, #12]
 8023e46:	4632      	mov	r2, r6
 8023e48:	f003 fbde 	bl	8027608 <_dtoa_r>
 8023e4c:	9b08      	ldr	r3, [sp, #32]
 8023e4e:	2b47      	cmp	r3, #71	@ 0x47
 8023e50:	4680      	mov	r8, r0
 8023e52:	d119      	bne.n	8023e88 <_vfprintf_r+0x960>
 8023e54:	07e8      	lsls	r0, r5, #31
 8023e56:	d405      	bmi.n	8023e64 <_vfprintf_r+0x93c>
 8023e58:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023e5a:	eba3 0308 	sub.w	r3, r3, r8
 8023e5e:	e699      	b.n	8023b94 <_vfprintf_r+0x66c>
 8023e60:	464e      	mov	r6, r9
 8023e62:	e7e4      	b.n	8023e2e <_vfprintf_r+0x906>
 8023e64:	eb08 0706 	add.w	r7, r8, r6
 8023e68:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8023e6c:	2200      	movs	r2, #0
 8023e6e:	2300      	movs	r3, #0
 8023e70:	f7dc fe42 	bl	8000af8 <__aeabi_dcmpeq>
 8023e74:	b100      	cbz	r0, 8023e78 <_vfprintf_r+0x950>
 8023e76:	9724      	str	r7, [sp, #144]	@ 0x90
 8023e78:	2230      	movs	r2, #48	@ 0x30
 8023e7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023e7c:	429f      	cmp	r7, r3
 8023e7e:	d9eb      	bls.n	8023e58 <_vfprintf_r+0x930>
 8023e80:	1c59      	adds	r1, r3, #1
 8023e82:	9124      	str	r1, [sp, #144]	@ 0x90
 8023e84:	701a      	strb	r2, [r3, #0]
 8023e86:	e7f8      	b.n	8023e7a <_vfprintf_r+0x952>
 8023e88:	9b08      	ldr	r3, [sp, #32]
 8023e8a:	2b46      	cmp	r3, #70	@ 0x46
 8023e8c:	eb00 0706 	add.w	r7, r0, r6
 8023e90:	d1ea      	bne.n	8023e68 <_vfprintf_r+0x940>
 8023e92:	7803      	ldrb	r3, [r0, #0]
 8023e94:	2b30      	cmp	r3, #48	@ 0x30
 8023e96:	d109      	bne.n	8023eac <_vfprintf_r+0x984>
 8023e98:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8023e9c:	2200      	movs	r2, #0
 8023e9e:	2300      	movs	r3, #0
 8023ea0:	f7dc fe2a 	bl	8000af8 <__aeabi_dcmpeq>
 8023ea4:	b910      	cbnz	r0, 8023eac <_vfprintf_r+0x984>
 8023ea6:	f1c6 0601 	rsb	r6, r6, #1
 8023eaa:	9620      	str	r6, [sp, #128]	@ 0x80
 8023eac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023eae:	441f      	add	r7, r3
 8023eb0:	e7da      	b.n	8023e68 <_vfprintf_r+0x940>
 8023eb2:	9b08      	ldr	r3, [sp, #32]
 8023eb4:	2b46      	cmp	r3, #70	@ 0x46
 8023eb6:	f47f ae7b 	bne.w	8023bb0 <_vfprintf_r+0x688>
 8023eba:	f005 0301 	and.w	r3, r5, #1
 8023ebe:	2e00      	cmp	r6, #0
 8023ec0:	ea43 0309 	orr.w	r3, r3, r9
 8023ec4:	dd25      	ble.n	8023f12 <_vfprintf_r+0x9ea>
 8023ec6:	b37b      	cbz	r3, 8023f28 <_vfprintf_r+0xa00>
 8023ec8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023eca:	18f3      	adds	r3, r6, r3
 8023ecc:	4499      	add	r9, r3
 8023ece:	2366      	movs	r3, #102	@ 0x66
 8023ed0:	9306      	str	r3, [sp, #24]
 8023ed2:	e033      	b.n	8023f3c <_vfprintf_r+0xa14>
 8023ed4:	f813 7b01 	ldrb.w	r7, [r3], #1
 8023ed8:	f806 7f01 	strb.w	r7, [r6, #1]!
 8023edc:	e69f      	b.n	8023c1e <_vfprintf_r+0x6f6>
 8023ede:	b941      	cbnz	r1, 8023ef2 <_vfprintf_r+0x9ca>
 8023ee0:	2230      	movs	r2, #48	@ 0x30
 8023ee2:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8023ee6:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8023eea:	3330      	adds	r3, #48	@ 0x30
 8023eec:	f802 3b01 	strb.w	r3, [r2], #1
 8023ef0:	e6a1      	b.n	8023c36 <_vfprintf_r+0x70e>
 8023ef2:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8023ef6:	e7f8      	b.n	8023eea <_vfprintf_r+0x9c2>
 8023ef8:	9b04      	ldr	r3, [sp, #16]
 8023efa:	42b3      	cmp	r3, r6
 8023efc:	dd0d      	ble.n	8023f1a <_vfprintf_r+0x9f2>
 8023efe:	9b04      	ldr	r3, [sp, #16]
 8023f00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023f02:	2e00      	cmp	r6, #0
 8023f04:	eb03 0902 	add.w	r9, r3, r2
 8023f08:	dc0c      	bgt.n	8023f24 <_vfprintf_r+0x9fc>
 8023f0a:	f1c6 0301 	rsb	r3, r6, #1
 8023f0e:	4499      	add	r9, r3
 8023f10:	e008      	b.n	8023f24 <_vfprintf_r+0x9fc>
 8023f12:	b17b      	cbz	r3, 8023f34 <_vfprintf_r+0xa0c>
 8023f14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023f16:	3301      	adds	r3, #1
 8023f18:	e7d8      	b.n	8023ecc <_vfprintf_r+0x9a4>
 8023f1a:	07eb      	lsls	r3, r5, #31
 8023f1c:	d521      	bpl.n	8023f62 <_vfprintf_r+0xa3a>
 8023f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023f20:	eb06 0903 	add.w	r9, r6, r3
 8023f24:	2367      	movs	r3, #103	@ 0x67
 8023f26:	e7d3      	b.n	8023ed0 <_vfprintf_r+0x9a8>
 8023f28:	46b1      	mov	r9, r6
 8023f2a:	e7d0      	b.n	8023ece <_vfprintf_r+0x9a6>
 8023f2c:	0803407c 	.word	0x0803407c
 8023f30:	0803406c 	.word	0x0803406c
 8023f34:	2366      	movs	r3, #102	@ 0x66
 8023f36:	9306      	str	r3, [sp, #24]
 8023f38:	f04f 0901 	mov.w	r9, #1
 8023f3c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8023f40:	9308      	str	r3, [sp, #32]
 8023f42:	d01f      	beq.n	8023f84 <_vfprintf_r+0xa5c>
 8023f44:	2700      	movs	r7, #0
 8023f46:	2e00      	cmp	r6, #0
 8023f48:	9708      	str	r7, [sp, #32]
 8023f4a:	f77f ae88 	ble.w	8023c5e <_vfprintf_r+0x736>
 8023f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f50:	781b      	ldrb	r3, [r3, #0]
 8023f52:	2bff      	cmp	r3, #255	@ 0xff
 8023f54:	d107      	bne.n	8023f66 <_vfprintf_r+0xa3e>
 8023f56:	9b08      	ldr	r3, [sp, #32]
 8023f58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023f5a:	443b      	add	r3, r7
 8023f5c:	fb02 9903 	mla	r9, r2, r3, r9
 8023f60:	e67d      	b.n	8023c5e <_vfprintf_r+0x736>
 8023f62:	46b1      	mov	r9, r6
 8023f64:	e7de      	b.n	8023f24 <_vfprintf_r+0x9fc>
 8023f66:	42b3      	cmp	r3, r6
 8023f68:	daf5      	bge.n	8023f56 <_vfprintf_r+0xa2e>
 8023f6a:	1af6      	subs	r6, r6, r3
 8023f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f6e:	785b      	ldrb	r3, [r3, #1]
 8023f70:	b133      	cbz	r3, 8023f80 <_vfprintf_r+0xa58>
 8023f72:	9b08      	ldr	r3, [sp, #32]
 8023f74:	3301      	adds	r3, #1
 8023f76:	9308      	str	r3, [sp, #32]
 8023f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f7a:	3301      	adds	r3, #1
 8023f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f7e:	e7e6      	b.n	8023f4e <_vfprintf_r+0xa26>
 8023f80:	3701      	adds	r7, #1
 8023f82:	e7e4      	b.n	8023f4e <_vfprintf_r+0xa26>
 8023f84:	9f08      	ldr	r7, [sp, #32]
 8023f86:	e66a      	b.n	8023c5e <_vfprintf_r+0x736>
 8023f88:	232d      	movs	r3, #45	@ 0x2d
 8023f8a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8023f8e:	e66a      	b.n	8023c66 <_vfprintf_r+0x73e>
 8023f90:	06af      	lsls	r7, r5, #26
 8023f92:	d507      	bpl.n	8023fa4 <_vfprintf_r+0xa7c>
 8023f94:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023f96:	6833      	ldr	r3, [r6, #0]
 8023f98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023f9a:	17d2      	asrs	r2, r2, #31
 8023f9c:	e9c3 1200 	strd	r1, r2, [r3]
 8023fa0:	3604      	adds	r6, #4
 8023fa2:	e734      	b.n	8023e0e <_vfprintf_r+0x8e6>
 8023fa4:	06e8      	lsls	r0, r5, #27
 8023fa6:	d503      	bpl.n	8023fb0 <_vfprintf_r+0xa88>
 8023fa8:	6833      	ldr	r3, [r6, #0]
 8023faa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023fac:	601a      	str	r2, [r3, #0]
 8023fae:	e7f7      	b.n	8023fa0 <_vfprintf_r+0xa78>
 8023fb0:	0669      	lsls	r1, r5, #25
 8023fb2:	d503      	bpl.n	8023fbc <_vfprintf_r+0xa94>
 8023fb4:	6833      	ldr	r3, [r6, #0]
 8023fb6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023fb8:	801a      	strh	r2, [r3, #0]
 8023fba:	e7f1      	b.n	8023fa0 <_vfprintf_r+0xa78>
 8023fbc:	05aa      	lsls	r2, r5, #22
 8023fbe:	d5f3      	bpl.n	8023fa8 <_vfprintf_r+0xa80>
 8023fc0:	6833      	ldr	r3, [r6, #0]
 8023fc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023fc4:	701a      	strb	r2, [r3, #0]
 8023fc6:	e7eb      	b.n	8023fa0 <_vfprintf_r+0xa78>
 8023fc8:	f045 0510 	orr.w	r5, r5, #16
 8023fcc:	f015 0320 	ands.w	r3, r5, #32
 8023fd0:	d020      	beq.n	8024014 <_vfprintf_r+0xaec>
 8023fd2:	3607      	adds	r6, #7
 8023fd4:	f026 0307 	bic.w	r3, r6, #7
 8023fd8:	461a      	mov	r2, r3
 8023fda:	685f      	ldr	r7, [r3, #4]
 8023fdc:	f852 6b08 	ldr.w	r6, [r2], #8
 8023fe0:	9207      	str	r2, [sp, #28]
 8023fe2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8023fe6:	2300      	movs	r3, #0
 8023fe8:	2200      	movs	r2, #0
 8023fea:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8023fee:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8023ff2:	f000 8491 	beq.w	8024918 <_vfprintf_r+0x13f0>
 8023ff6:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8023ffa:	9208      	str	r2, [sp, #32]
 8023ffc:	ea56 0207 	orrs.w	r2, r6, r7
 8024000:	f040 848f 	bne.w	8024922 <_vfprintf_r+0x13fa>
 8024004:	f1b9 0f00 	cmp.w	r9, #0
 8024008:	f000 80db 	beq.w	80241c2 <_vfprintf_r+0xc9a>
 802400c:	2b01      	cmp	r3, #1
 802400e:	f040 848b 	bne.w	8024928 <_vfprintf_r+0x1400>
 8024012:	e083      	b.n	802411c <_vfprintf_r+0xbf4>
 8024014:	4632      	mov	r2, r6
 8024016:	f015 0710 	ands.w	r7, r5, #16
 802401a:	f852 6b04 	ldr.w	r6, [r2], #4
 802401e:	9207      	str	r2, [sp, #28]
 8024020:	d001      	beq.n	8024026 <_vfprintf_r+0xafe>
 8024022:	461f      	mov	r7, r3
 8024024:	e7dd      	b.n	8023fe2 <_vfprintf_r+0xaba>
 8024026:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802402a:	d001      	beq.n	8024030 <_vfprintf_r+0xb08>
 802402c:	b2b6      	uxth	r6, r6
 802402e:	e7d8      	b.n	8023fe2 <_vfprintf_r+0xaba>
 8024030:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8024034:	d0d5      	beq.n	8023fe2 <_vfprintf_r+0xaba>
 8024036:	b2f6      	uxtb	r6, r6
 8024038:	e7f3      	b.n	8024022 <_vfprintf_r+0xafa>
 802403a:	4633      	mov	r3, r6
 802403c:	2278      	movs	r2, #120	@ 0x78
 802403e:	f853 6b04 	ldr.w	r6, [r3], #4
 8024042:	9307      	str	r3, [sp, #28]
 8024044:	f647 0330 	movw	r3, #30768	@ 0x7830
 8024048:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802404c:	4b93      	ldr	r3, [pc, #588]	@ (802429c <_vfprintf_r+0xd74>)
 802404e:	9319      	str	r3, [sp, #100]	@ 0x64
 8024050:	2700      	movs	r7, #0
 8024052:	f045 0502 	orr.w	r5, r5, #2
 8024056:	2302      	movs	r3, #2
 8024058:	9206      	str	r2, [sp, #24]
 802405a:	e7c5      	b.n	8023fe8 <_vfprintf_r+0xac0>
 802405c:	4633      	mov	r3, r6
 802405e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8024062:	f853 8b04 	ldr.w	r8, [r3], #4
 8024066:	9307      	str	r3, [sp, #28]
 8024068:	f04f 0600 	mov.w	r6, #0
 802406c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8024070:	d00f      	beq.n	8024092 <_vfprintf_r+0xb6a>
 8024072:	464a      	mov	r2, r9
 8024074:	4631      	mov	r1, r6
 8024076:	4640      	mov	r0, r8
 8024078:	f7dc f8c2 	bl	8000200 <memchr>
 802407c:	4682      	mov	sl, r0
 802407e:	2800      	cmp	r0, #0
 8024080:	f43f ac7a 	beq.w	8023978 <_vfprintf_r+0x450>
 8024084:	eba0 0908 	sub.w	r9, r0, r8
 8024088:	46b2      	mov	sl, r6
 802408a:	9610      	str	r6, [sp, #64]	@ 0x40
 802408c:	4637      	mov	r7, r6
 802408e:	9608      	str	r6, [sp, #32]
 8024090:	e5ec      	b.n	8023c6c <_vfprintf_r+0x744>
 8024092:	4640      	mov	r0, r8
 8024094:	f7dc f904 	bl	80002a0 <strlen>
 8024098:	46b2      	mov	sl, r6
 802409a:	4681      	mov	r9, r0
 802409c:	e46c      	b.n	8023978 <_vfprintf_r+0x450>
 802409e:	f045 0510 	orr.w	r5, r5, #16
 80240a2:	f015 0320 	ands.w	r3, r5, #32
 80240a6:	d009      	beq.n	80240bc <_vfprintf_r+0xb94>
 80240a8:	3607      	adds	r6, #7
 80240aa:	f026 0307 	bic.w	r3, r6, #7
 80240ae:	461a      	mov	r2, r3
 80240b0:	685f      	ldr	r7, [r3, #4]
 80240b2:	f852 6b08 	ldr.w	r6, [r2], #8
 80240b6:	9207      	str	r2, [sp, #28]
 80240b8:	2301      	movs	r3, #1
 80240ba:	e795      	b.n	8023fe8 <_vfprintf_r+0xac0>
 80240bc:	4632      	mov	r2, r6
 80240be:	f015 0710 	ands.w	r7, r5, #16
 80240c2:	f852 6b04 	ldr.w	r6, [r2], #4
 80240c6:	9207      	str	r2, [sp, #28]
 80240c8:	d001      	beq.n	80240ce <_vfprintf_r+0xba6>
 80240ca:	461f      	mov	r7, r3
 80240cc:	e7f4      	b.n	80240b8 <_vfprintf_r+0xb90>
 80240ce:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80240d2:	d001      	beq.n	80240d8 <_vfprintf_r+0xbb0>
 80240d4:	b2b6      	uxth	r6, r6
 80240d6:	e7ef      	b.n	80240b8 <_vfprintf_r+0xb90>
 80240d8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80240dc:	d0ec      	beq.n	80240b8 <_vfprintf_r+0xb90>
 80240de:	b2f6      	uxtb	r6, r6
 80240e0:	e7f3      	b.n	80240ca <_vfprintf_r+0xba2>
 80240e2:	4b6f      	ldr	r3, [pc, #444]	@ (80242a0 <_vfprintf_r+0xd78>)
 80240e4:	f7ff bb33 	b.w	802374e <_vfprintf_r+0x226>
 80240e8:	4632      	mov	r2, r6
 80240ea:	f015 0710 	ands.w	r7, r5, #16
 80240ee:	f852 6b04 	ldr.w	r6, [r2], #4
 80240f2:	9207      	str	r2, [sp, #28]
 80240f4:	d002      	beq.n	80240fc <_vfprintf_r+0xbd4>
 80240f6:	461f      	mov	r7, r3
 80240f8:	f7ff bb36 	b.w	8023768 <_vfprintf_r+0x240>
 80240fc:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8024100:	d002      	beq.n	8024108 <_vfprintf_r+0xbe0>
 8024102:	b2b6      	uxth	r6, r6
 8024104:	f7ff bb30 	b.w	8023768 <_vfprintf_r+0x240>
 8024108:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802410c:	f43f ab2c 	beq.w	8023768 <_vfprintf_r+0x240>
 8024110:	b2f6      	uxtb	r6, r6
 8024112:	e7f0      	b.n	80240f6 <_vfprintf_r+0xbce>
 8024114:	2e0a      	cmp	r6, #10
 8024116:	f177 0300 	sbcs.w	r3, r7, #0
 802411a:	d207      	bcs.n	802412c <_vfprintf_r+0xc04>
 802411c:	3630      	adds	r6, #48	@ 0x30
 802411e:	b2f6      	uxtb	r6, r6
 8024120:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8024124:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8024128:	f000 bc1a 	b.w	8024960 <_vfprintf_r+0x1438>
 802412c:	2300      	movs	r3, #0
 802412e:	9304      	str	r3, [sp, #16]
 8024130:	9b08      	ldr	r3, [sp, #32]
 8024132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8024136:	ad52      	add	r5, sp, #328	@ 0x148
 8024138:	9310      	str	r3, [sp, #64]	@ 0x40
 802413a:	220a      	movs	r2, #10
 802413c:	2300      	movs	r3, #0
 802413e:	4630      	mov	r0, r6
 8024140:	4639      	mov	r1, r7
 8024142:	f7dc fe09 	bl	8000d58 <__aeabi_uldivmod>
 8024146:	9b04      	ldr	r3, [sp, #16]
 8024148:	9011      	str	r0, [sp, #68]	@ 0x44
 802414a:	3301      	adds	r3, #1
 802414c:	9304      	str	r3, [sp, #16]
 802414e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024150:	3230      	adds	r2, #48	@ 0x30
 8024152:	468a      	mov	sl, r1
 8024154:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8024158:	f805 2c01 	strb.w	r2, [r5, #-1]
 802415c:	b1d3      	cbz	r3, 8024194 <_vfprintf_r+0xc6c>
 802415e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024160:	9a04      	ldr	r2, [sp, #16]
 8024162:	781b      	ldrb	r3, [r3, #0]
 8024164:	429a      	cmp	r2, r3
 8024166:	d115      	bne.n	8024194 <_vfprintf_r+0xc6c>
 8024168:	2aff      	cmp	r2, #255	@ 0xff
 802416a:	d013      	beq.n	8024194 <_vfprintf_r+0xc6c>
 802416c:	2e0a      	cmp	r6, #10
 802416e:	f177 0300 	sbcs.w	r3, r7, #0
 8024172:	d30f      	bcc.n	8024194 <_vfprintf_r+0xc6c>
 8024174:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024176:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024178:	eba8 0803 	sub.w	r8, r8, r3
 802417c:	461a      	mov	r2, r3
 802417e:	4640      	mov	r0, r8
 8024180:	f001 ff31 	bl	8025fe6 <strncpy>
 8024184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024186:	785b      	ldrb	r3, [r3, #1]
 8024188:	b11b      	cbz	r3, 8024192 <_vfprintf_r+0xc6a>
 802418a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802418c:	3301      	adds	r3, #1
 802418e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024190:	2300      	movs	r3, #0
 8024192:	9304      	str	r3, [sp, #16]
 8024194:	2e0a      	cmp	r6, #10
 8024196:	f177 0700 	sbcs.w	r7, r7, #0
 802419a:	f0c0 83e1 	bcc.w	8024960 <_vfprintf_r+0x1438>
 802419e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80241a0:	4657      	mov	r7, sl
 80241a2:	4645      	mov	r5, r8
 80241a4:	e7c9      	b.n	802413a <_vfprintf_r+0xc12>
 80241a6:	f006 030f 	and.w	r3, r6, #15
 80241aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80241ac:	0936      	lsrs	r6, r6, #4
 80241ae:	5cd3      	ldrb	r3, [r2, r3]
 80241b0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80241b4:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 80241b8:	093f      	lsrs	r7, r7, #4
 80241ba:	ea56 0307 	orrs.w	r3, r6, r7
 80241be:	d1f2      	bne.n	80241a6 <_vfprintf_r+0xc7e>
 80241c0:	e3ce      	b.n	8024960 <_vfprintf_r+0x1438>
 80241c2:	b91b      	cbnz	r3, 80241cc <_vfprintf_r+0xca4>
 80241c4:	07ed      	lsls	r5, r5, #31
 80241c6:	d501      	bpl.n	80241cc <_vfprintf_r+0xca4>
 80241c8:	2630      	movs	r6, #48	@ 0x30
 80241ca:	e7a9      	b.n	8024120 <_vfprintf_r+0xbf8>
 80241cc:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 80241d0:	e3c6      	b.n	8024960 <_vfprintf_r+0x1438>
 80241d2:	9b06      	ldr	r3, [sp, #24]
 80241d4:	2b00      	cmp	r3, #0
 80241d6:	f000 8390 	beq.w	80248fa <_vfprintf_r+0x13d2>
 80241da:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80241de:	2300      	movs	r3, #0
 80241e0:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80241e4:	9607      	str	r6, [sp, #28]
 80241e6:	f7ff bb5c 	b.w	80238a2 <_vfprintf_r+0x37a>
 80241ea:	2010      	movs	r0, #16
 80241ec:	4403      	add	r3, r0
 80241ee:	2a07      	cmp	r2, #7
 80241f0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80241f4:	6060      	str	r0, [r4, #4]
 80241f6:	dd08      	ble.n	802420a <_vfprintf_r+0xce2>
 80241f8:	9803      	ldr	r0, [sp, #12]
 80241fa:	aa26      	add	r2, sp, #152	@ 0x98
 80241fc:	4659      	mov	r1, fp
 80241fe:	f000 fbff 	bl	8024a00 <__sprint_r>
 8024202:	2800      	cmp	r0, #0
 8024204:	f040 8357 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8024208:	a929      	add	r1, sp, #164	@ 0xa4
 802420a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802420c:	3b10      	subs	r3, #16
 802420e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024210:	460c      	mov	r4, r1
 8024212:	e547      	b.n	8023ca4 <_vfprintf_r+0x77c>
 8024214:	460c      	mov	r4, r1
 8024216:	e562      	b.n	8023cde <_vfprintf_r+0x7b6>
 8024218:	9803      	ldr	r0, [sp, #12]
 802421a:	aa26      	add	r2, sp, #152	@ 0x98
 802421c:	4659      	mov	r1, fp
 802421e:	f000 fbef 	bl	8024a00 <__sprint_r>
 8024222:	2800      	cmp	r0, #0
 8024224:	f040 8347 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8024228:	ac29      	add	r4, sp, #164	@ 0xa4
 802422a:	e56a      	b.n	8023d02 <_vfprintf_r+0x7da>
 802422c:	9803      	ldr	r0, [sp, #12]
 802422e:	aa26      	add	r2, sp, #152	@ 0x98
 8024230:	4659      	mov	r1, fp
 8024232:	f000 fbe5 	bl	8024a00 <__sprint_r>
 8024236:	2800      	cmp	r0, #0
 8024238:	f040 833d 	bne.w	80248b6 <_vfprintf_r+0x138e>
 802423c:	ac29      	add	r4, sp, #164	@ 0xa4
 802423e:	e570      	b.n	8023d22 <_vfprintf_r+0x7fa>
 8024240:	2010      	movs	r0, #16
 8024242:	4403      	add	r3, r0
 8024244:	2a07      	cmp	r2, #7
 8024246:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802424a:	6060      	str	r0, [r4, #4]
 802424c:	dd08      	ble.n	8024260 <_vfprintf_r+0xd38>
 802424e:	9803      	ldr	r0, [sp, #12]
 8024250:	aa26      	add	r2, sp, #152	@ 0x98
 8024252:	4659      	mov	r1, fp
 8024254:	f000 fbd4 	bl	8024a00 <__sprint_r>
 8024258:	2800      	cmp	r0, #0
 802425a:	f040 832c 	bne.w	80248b6 <_vfprintf_r+0x138e>
 802425e:	a929      	add	r1, sp, #164	@ 0xa4
 8024260:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024262:	3b10      	subs	r3, #16
 8024264:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024266:	460c      	mov	r4, r1
 8024268:	e564      	b.n	8023d34 <_vfprintf_r+0x80c>
 802426a:	460c      	mov	r4, r1
 802426c:	e57f      	b.n	8023d6e <_vfprintf_r+0x846>
 802426e:	2010      	movs	r0, #16
 8024270:	4403      	add	r3, r0
 8024272:	2a07      	cmp	r2, #7
 8024274:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024278:	6060      	str	r0, [r4, #4]
 802427a:	dd08      	ble.n	802428e <_vfprintf_r+0xd66>
 802427c:	9803      	ldr	r0, [sp, #12]
 802427e:	aa26      	add	r2, sp, #152	@ 0x98
 8024280:	4659      	mov	r1, fp
 8024282:	f000 fbbd 	bl	8024a00 <__sprint_r>
 8024286:	2800      	cmp	r0, #0
 8024288:	f040 8315 	bne.w	80248b6 <_vfprintf_r+0x138e>
 802428c:	a929      	add	r1, sp, #164	@ 0xa4
 802428e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024290:	3b10      	subs	r3, #16
 8024292:	9310      	str	r3, [sp, #64]	@ 0x40
 8024294:	460c      	mov	r4, r1
 8024296:	e570      	b.n	8023d7a <_vfprintf_r+0x852>
 8024298:	460c      	mov	r4, r1
 802429a:	e58b      	b.n	8023db4 <_vfprintf_r+0x88c>
 802429c:	08034048 	.word	0x08034048
 80242a0:	08034059 	.word	0x08034059
 80242a4:	9b06      	ldr	r3, [sp, #24]
 80242a6:	2b65      	cmp	r3, #101	@ 0x65
 80242a8:	f340 8245 	ble.w	8024736 <_vfprintf_r+0x120e>
 80242ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80242b0:	2200      	movs	r2, #0
 80242b2:	2300      	movs	r3, #0
 80242b4:	f7dc fc20 	bl	8000af8 <__aeabi_dcmpeq>
 80242b8:	2800      	cmp	r0, #0
 80242ba:	d06a      	beq.n	8024392 <_vfprintf_r+0xe6a>
 80242bc:	4b73      	ldr	r3, [pc, #460]	@ (802448c <_vfprintf_r+0xf64>)
 80242be:	6023      	str	r3, [r4, #0]
 80242c0:	2301      	movs	r3, #1
 80242c2:	6063      	str	r3, [r4, #4]
 80242c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80242c6:	3301      	adds	r3, #1
 80242c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80242ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80242cc:	3301      	adds	r3, #1
 80242ce:	2b07      	cmp	r3, #7
 80242d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80242d2:	dc37      	bgt.n	8024344 <_vfprintf_r+0xe1c>
 80242d4:	3408      	adds	r4, #8
 80242d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80242d8:	9a04      	ldr	r2, [sp, #16]
 80242da:	4293      	cmp	r3, r2
 80242dc:	db02      	blt.n	80242e4 <_vfprintf_r+0xdbc>
 80242de:	07e9      	lsls	r1, r5, #31
 80242e0:	f57f ad78 	bpl.w	8023dd4 <_vfprintf_r+0x8ac>
 80242e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80242e6:	6023      	str	r3, [r4, #0]
 80242e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80242ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80242ec:	6063      	str	r3, [r4, #4]
 80242ee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80242f0:	4413      	add	r3, r2
 80242f2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80242f4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80242f6:	3301      	adds	r3, #1
 80242f8:	2b07      	cmp	r3, #7
 80242fa:	9327      	str	r3, [sp, #156]	@ 0x9c
 80242fc:	dc2c      	bgt.n	8024358 <_vfprintf_r+0xe30>
 80242fe:	3408      	adds	r4, #8
 8024300:	9b04      	ldr	r3, [sp, #16]
 8024302:	1e5e      	subs	r6, r3, #1
 8024304:	2e00      	cmp	r6, #0
 8024306:	f77f ad65 	ble.w	8023dd4 <_vfprintf_r+0x8ac>
 802430a:	4f61      	ldr	r7, [pc, #388]	@ (8024490 <_vfprintf_r+0xf68>)
 802430c:	f04f 0810 	mov.w	r8, #16
 8024310:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8024314:	2e10      	cmp	r6, #16
 8024316:	f103 0301 	add.w	r3, r3, #1
 802431a:	f104 0108 	add.w	r1, r4, #8
 802431e:	6027      	str	r7, [r4, #0]
 8024320:	dc24      	bgt.n	802436c <_vfprintf_r+0xe44>
 8024322:	6066      	str	r6, [r4, #4]
 8024324:	2b07      	cmp	r3, #7
 8024326:	4416      	add	r6, r2
 8024328:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802432c:	f340 82a2 	ble.w	8024874 <_vfprintf_r+0x134c>
 8024330:	9803      	ldr	r0, [sp, #12]
 8024332:	aa26      	add	r2, sp, #152	@ 0x98
 8024334:	4659      	mov	r1, fp
 8024336:	f000 fb63 	bl	8024a00 <__sprint_r>
 802433a:	2800      	cmp	r0, #0
 802433c:	f040 82bb 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8024340:	ac29      	add	r4, sp, #164	@ 0xa4
 8024342:	e547      	b.n	8023dd4 <_vfprintf_r+0x8ac>
 8024344:	9803      	ldr	r0, [sp, #12]
 8024346:	aa26      	add	r2, sp, #152	@ 0x98
 8024348:	4659      	mov	r1, fp
 802434a:	f000 fb59 	bl	8024a00 <__sprint_r>
 802434e:	2800      	cmp	r0, #0
 8024350:	f040 82b1 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8024354:	ac29      	add	r4, sp, #164	@ 0xa4
 8024356:	e7be      	b.n	80242d6 <_vfprintf_r+0xdae>
 8024358:	9803      	ldr	r0, [sp, #12]
 802435a:	aa26      	add	r2, sp, #152	@ 0x98
 802435c:	4659      	mov	r1, fp
 802435e:	f000 fb4f 	bl	8024a00 <__sprint_r>
 8024362:	2800      	cmp	r0, #0
 8024364:	f040 82a7 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8024368:	ac29      	add	r4, sp, #164	@ 0xa4
 802436a:	e7c9      	b.n	8024300 <_vfprintf_r+0xdd8>
 802436c:	3210      	adds	r2, #16
 802436e:	2b07      	cmp	r3, #7
 8024370:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8024374:	f8c4 8004 	str.w	r8, [r4, #4]
 8024378:	dd08      	ble.n	802438c <_vfprintf_r+0xe64>
 802437a:	9803      	ldr	r0, [sp, #12]
 802437c:	aa26      	add	r2, sp, #152	@ 0x98
 802437e:	4659      	mov	r1, fp
 8024380:	f000 fb3e 	bl	8024a00 <__sprint_r>
 8024384:	2800      	cmp	r0, #0
 8024386:	f040 8296 	bne.w	80248b6 <_vfprintf_r+0x138e>
 802438a:	a929      	add	r1, sp, #164	@ 0xa4
 802438c:	3e10      	subs	r6, #16
 802438e:	460c      	mov	r4, r1
 8024390:	e7be      	b.n	8024310 <_vfprintf_r+0xde8>
 8024392:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024394:	2b00      	cmp	r3, #0
 8024396:	dc7d      	bgt.n	8024494 <_vfprintf_r+0xf6c>
 8024398:	4b3c      	ldr	r3, [pc, #240]	@ (802448c <_vfprintf_r+0xf64>)
 802439a:	6023      	str	r3, [r4, #0]
 802439c:	2301      	movs	r3, #1
 802439e:	6063      	str	r3, [r4, #4]
 80243a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80243a2:	3301      	adds	r3, #1
 80243a4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80243a6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80243a8:	3301      	adds	r3, #1
 80243aa:	2b07      	cmp	r3, #7
 80243ac:	9327      	str	r3, [sp, #156]	@ 0x9c
 80243ae:	dc46      	bgt.n	802443e <_vfprintf_r+0xf16>
 80243b0:	3408      	adds	r4, #8
 80243b2:	9904      	ldr	r1, [sp, #16]
 80243b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80243b6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80243b8:	430b      	orrs	r3, r1
 80243ba:	f005 0101 	and.w	r1, r5, #1
 80243be:	430b      	orrs	r3, r1
 80243c0:	f43f ad08 	beq.w	8023dd4 <_vfprintf_r+0x8ac>
 80243c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80243c6:	6023      	str	r3, [r4, #0]
 80243c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80243ca:	6063      	str	r3, [r4, #4]
 80243cc:	441a      	add	r2, r3
 80243ce:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80243d0:	9228      	str	r2, [sp, #160]	@ 0xa0
 80243d2:	3301      	adds	r3, #1
 80243d4:	2b07      	cmp	r3, #7
 80243d6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80243d8:	dc3b      	bgt.n	8024452 <_vfprintf_r+0xf2a>
 80243da:	f104 0308 	add.w	r3, r4, #8
 80243de:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80243e0:	2e00      	cmp	r6, #0
 80243e2:	da1b      	bge.n	802441c <_vfprintf_r+0xef4>
 80243e4:	4f2a      	ldr	r7, [pc, #168]	@ (8024490 <_vfprintf_r+0xf68>)
 80243e6:	4276      	negs	r6, r6
 80243e8:	461a      	mov	r2, r3
 80243ea:	2410      	movs	r4, #16
 80243ec:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 80243f0:	2e10      	cmp	r6, #16
 80243f2:	f101 0101 	add.w	r1, r1, #1
 80243f6:	f103 0308 	add.w	r3, r3, #8
 80243fa:	6017      	str	r7, [r2, #0]
 80243fc:	dc33      	bgt.n	8024466 <_vfprintf_r+0xf3e>
 80243fe:	6056      	str	r6, [r2, #4]
 8024400:	2907      	cmp	r1, #7
 8024402:	4406      	add	r6, r0
 8024404:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8024408:	dd08      	ble.n	802441c <_vfprintf_r+0xef4>
 802440a:	9803      	ldr	r0, [sp, #12]
 802440c:	aa26      	add	r2, sp, #152	@ 0x98
 802440e:	4659      	mov	r1, fp
 8024410:	f000 faf6 	bl	8024a00 <__sprint_r>
 8024414:	2800      	cmp	r0, #0
 8024416:	f040 824e 	bne.w	80248b6 <_vfprintf_r+0x138e>
 802441a:	ab29      	add	r3, sp, #164	@ 0xa4
 802441c:	9a04      	ldr	r2, [sp, #16]
 802441e:	9904      	ldr	r1, [sp, #16]
 8024420:	605a      	str	r2, [r3, #4]
 8024422:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8024424:	f8c3 8000 	str.w	r8, [r3]
 8024428:	440a      	add	r2, r1
 802442a:	9228      	str	r2, [sp, #160]	@ 0xa0
 802442c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802442e:	3201      	adds	r2, #1
 8024430:	2a07      	cmp	r2, #7
 8024432:	9227      	str	r2, [sp, #156]	@ 0x9c
 8024434:	f73f af7c 	bgt.w	8024330 <_vfprintf_r+0xe08>
 8024438:	f103 0408 	add.w	r4, r3, #8
 802443c:	e4ca      	b.n	8023dd4 <_vfprintf_r+0x8ac>
 802443e:	9803      	ldr	r0, [sp, #12]
 8024440:	aa26      	add	r2, sp, #152	@ 0x98
 8024442:	4659      	mov	r1, fp
 8024444:	f000 fadc 	bl	8024a00 <__sprint_r>
 8024448:	2800      	cmp	r0, #0
 802444a:	f040 8234 	bne.w	80248b6 <_vfprintf_r+0x138e>
 802444e:	ac29      	add	r4, sp, #164	@ 0xa4
 8024450:	e7af      	b.n	80243b2 <_vfprintf_r+0xe8a>
 8024452:	9803      	ldr	r0, [sp, #12]
 8024454:	aa26      	add	r2, sp, #152	@ 0x98
 8024456:	4659      	mov	r1, fp
 8024458:	f000 fad2 	bl	8024a00 <__sprint_r>
 802445c:	2800      	cmp	r0, #0
 802445e:	f040 822a 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8024462:	ab29      	add	r3, sp, #164	@ 0xa4
 8024464:	e7bb      	b.n	80243de <_vfprintf_r+0xeb6>
 8024466:	3010      	adds	r0, #16
 8024468:	2907      	cmp	r1, #7
 802446a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802446e:	6054      	str	r4, [r2, #4]
 8024470:	dd08      	ble.n	8024484 <_vfprintf_r+0xf5c>
 8024472:	9803      	ldr	r0, [sp, #12]
 8024474:	aa26      	add	r2, sp, #152	@ 0x98
 8024476:	4659      	mov	r1, fp
 8024478:	f000 fac2 	bl	8024a00 <__sprint_r>
 802447c:	2800      	cmp	r0, #0
 802447e:	f040 821a 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8024482:	ab29      	add	r3, sp, #164	@ 0xa4
 8024484:	3e10      	subs	r6, #16
 8024486:	461a      	mov	r2, r3
 8024488:	e7b0      	b.n	80243ec <_vfprintf_r+0xec4>
 802448a:	bf00      	nop
 802448c:	0803406a 	.word	0x0803406a
 8024490:	0803406c 	.word	0x0803406c
 8024494:	9b04      	ldr	r3, [sp, #16]
 8024496:	4443      	add	r3, r8
 8024498:	9313      	str	r3, [sp, #76]	@ 0x4c
 802449a:	9b04      	ldr	r3, [sp, #16]
 802449c:	42b3      	cmp	r3, r6
 802449e:	bfa8      	it	ge
 80244a0:	4633      	movge	r3, r6
 80244a2:	2b00      	cmp	r3, #0
 80244a4:	4699      	mov	r9, r3
 80244a6:	dd0b      	ble.n	80244c0 <_vfprintf_r+0xf98>
 80244a8:	e9c4 8300 	strd	r8, r3, [r4]
 80244ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80244ae:	444b      	add	r3, r9
 80244b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80244b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80244b4:	3301      	adds	r3, #1
 80244b6:	2b07      	cmp	r3, #7
 80244b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80244ba:	f300 8089 	bgt.w	80245d0 <_vfprintf_r+0x10a8>
 80244be:	3408      	adds	r4, #8
 80244c0:	f1b9 0f00 	cmp.w	r9, #0
 80244c4:	bfac      	ite	ge
 80244c6:	eba6 0309 	subge.w	r3, r6, r9
 80244ca:	4633      	movlt	r3, r6
 80244cc:	2b00      	cmp	r3, #0
 80244ce:	9306      	str	r3, [sp, #24]
 80244d0:	dd1c      	ble.n	802450c <_vfprintf_r+0xfe4>
 80244d2:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 8024838 <_vfprintf_r+0x1310>
 80244d6:	9806      	ldr	r0, [sp, #24]
 80244d8:	f8c4 9000 	str.w	r9, [r4]
 80244dc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80244e0:	2810      	cmp	r0, #16
 80244e2:	f102 0201 	add.w	r2, r2, #1
 80244e6:	f104 0108 	add.w	r1, r4, #8
 80244ea:	dc7b      	bgt.n	80245e4 <_vfprintf_r+0x10bc>
 80244ec:	4403      	add	r3, r0
 80244ee:	2a07      	cmp	r2, #7
 80244f0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80244f4:	6060      	str	r0, [r4, #4]
 80244f6:	f340 808a 	ble.w	802460e <_vfprintf_r+0x10e6>
 80244fa:	9803      	ldr	r0, [sp, #12]
 80244fc:	aa26      	add	r2, sp, #152	@ 0x98
 80244fe:	4659      	mov	r1, fp
 8024500:	f000 fa7e 	bl	8024a00 <__sprint_r>
 8024504:	2800      	cmp	r0, #0
 8024506:	f040 81d6 	bne.w	80248b6 <_vfprintf_r+0x138e>
 802450a:	ac29      	add	r4, sp, #164	@ 0xa4
 802450c:	056a      	lsls	r2, r5, #21
 802450e:	44b0      	add	r8, r6
 8024510:	d508      	bpl.n	8024524 <_vfprintf_r+0xffc>
 8024512:	9b08      	ldr	r3, [sp, #32]
 8024514:	2b00      	cmp	r3, #0
 8024516:	d17c      	bne.n	8024612 <_vfprintf_r+0x10ea>
 8024518:	2f00      	cmp	r7, #0
 802451a:	d17c      	bne.n	8024616 <_vfprintf_r+0x10ee>
 802451c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802451e:	4598      	cmp	r8, r3
 8024520:	bf28      	it	cs
 8024522:	4698      	movcs	r8, r3
 8024524:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024526:	9a04      	ldr	r2, [sp, #16]
 8024528:	4293      	cmp	r3, r2
 802452a:	db01      	blt.n	8024530 <_vfprintf_r+0x1008>
 802452c:	07eb      	lsls	r3, r5, #31
 802452e:	d50e      	bpl.n	802454e <_vfprintf_r+0x1026>
 8024530:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024532:	6023      	str	r3, [r4, #0]
 8024534:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024536:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024538:	6063      	str	r3, [r4, #4]
 802453a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802453c:	4413      	add	r3, r2
 802453e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024540:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024542:	3301      	adds	r3, #1
 8024544:	2b07      	cmp	r3, #7
 8024546:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024548:	f300 80e1 	bgt.w	802470e <_vfprintf_r+0x11e6>
 802454c:	3408      	adds	r4, #8
 802454e:	9b04      	ldr	r3, [sp, #16]
 8024550:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8024552:	1bdf      	subs	r7, r3, r7
 8024554:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024556:	eba3 0308 	sub.w	r3, r3, r8
 802455a:	429f      	cmp	r7, r3
 802455c:	bfa8      	it	ge
 802455e:	461f      	movge	r7, r3
 8024560:	2f00      	cmp	r7, #0
 8024562:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024564:	dd0a      	ble.n	802457c <_vfprintf_r+0x1054>
 8024566:	443b      	add	r3, r7
 8024568:	9328      	str	r3, [sp, #160]	@ 0xa0
 802456a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802456c:	3301      	adds	r3, #1
 802456e:	2b07      	cmp	r3, #7
 8024570:	e9c4 8700 	strd	r8, r7, [r4]
 8024574:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024576:	f300 80d4 	bgt.w	8024722 <_vfprintf_r+0x11fa>
 802457a:	3408      	adds	r4, #8
 802457c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802457e:	9b04      	ldr	r3, [sp, #16]
 8024580:	2f00      	cmp	r7, #0
 8024582:	eba3 0606 	sub.w	r6, r3, r6
 8024586:	bfa8      	it	ge
 8024588:	1bf6      	subge	r6, r6, r7
 802458a:	2e00      	cmp	r6, #0
 802458c:	f77f ac22 	ble.w	8023dd4 <_vfprintf_r+0x8ac>
 8024590:	4fa9      	ldr	r7, [pc, #676]	@ (8024838 <_vfprintf_r+0x1310>)
 8024592:	f04f 0810 	mov.w	r8, #16
 8024596:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802459a:	2e10      	cmp	r6, #16
 802459c:	f103 0301 	add.w	r3, r3, #1
 80245a0:	f104 0108 	add.w	r1, r4, #8
 80245a4:	6027      	str	r7, [r4, #0]
 80245a6:	f77f aebc 	ble.w	8024322 <_vfprintf_r+0xdfa>
 80245aa:	3210      	adds	r2, #16
 80245ac:	2b07      	cmp	r3, #7
 80245ae:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80245b2:	f8c4 8004 	str.w	r8, [r4, #4]
 80245b6:	dd08      	ble.n	80245ca <_vfprintf_r+0x10a2>
 80245b8:	9803      	ldr	r0, [sp, #12]
 80245ba:	aa26      	add	r2, sp, #152	@ 0x98
 80245bc:	4659      	mov	r1, fp
 80245be:	f000 fa1f 	bl	8024a00 <__sprint_r>
 80245c2:	2800      	cmp	r0, #0
 80245c4:	f040 8177 	bne.w	80248b6 <_vfprintf_r+0x138e>
 80245c8:	a929      	add	r1, sp, #164	@ 0xa4
 80245ca:	3e10      	subs	r6, #16
 80245cc:	460c      	mov	r4, r1
 80245ce:	e7e2      	b.n	8024596 <_vfprintf_r+0x106e>
 80245d0:	9803      	ldr	r0, [sp, #12]
 80245d2:	aa26      	add	r2, sp, #152	@ 0x98
 80245d4:	4659      	mov	r1, fp
 80245d6:	f000 fa13 	bl	8024a00 <__sprint_r>
 80245da:	2800      	cmp	r0, #0
 80245dc:	f040 816b 	bne.w	80248b6 <_vfprintf_r+0x138e>
 80245e0:	ac29      	add	r4, sp, #164	@ 0xa4
 80245e2:	e76d      	b.n	80244c0 <_vfprintf_r+0xf98>
 80245e4:	2010      	movs	r0, #16
 80245e6:	4403      	add	r3, r0
 80245e8:	2a07      	cmp	r2, #7
 80245ea:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80245ee:	6060      	str	r0, [r4, #4]
 80245f0:	dd08      	ble.n	8024604 <_vfprintf_r+0x10dc>
 80245f2:	9803      	ldr	r0, [sp, #12]
 80245f4:	aa26      	add	r2, sp, #152	@ 0x98
 80245f6:	4659      	mov	r1, fp
 80245f8:	f000 fa02 	bl	8024a00 <__sprint_r>
 80245fc:	2800      	cmp	r0, #0
 80245fe:	f040 815a 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8024602:	a929      	add	r1, sp, #164	@ 0xa4
 8024604:	9b06      	ldr	r3, [sp, #24]
 8024606:	3b10      	subs	r3, #16
 8024608:	9306      	str	r3, [sp, #24]
 802460a:	460c      	mov	r4, r1
 802460c:	e763      	b.n	80244d6 <_vfprintf_r+0xfae>
 802460e:	460c      	mov	r4, r1
 8024610:	e77c      	b.n	802450c <_vfprintf_r+0xfe4>
 8024612:	2f00      	cmp	r7, #0
 8024614:	d04b      	beq.n	80246ae <_vfprintf_r+0x1186>
 8024616:	3f01      	subs	r7, #1
 8024618:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802461a:	6023      	str	r3, [r4, #0]
 802461c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802461e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024620:	6063      	str	r3, [r4, #4]
 8024622:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024624:	4413      	add	r3, r2
 8024626:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024628:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802462a:	3301      	adds	r3, #1
 802462c:	2b07      	cmp	r3, #7
 802462e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024630:	dc44      	bgt.n	80246bc <_vfprintf_r+0x1194>
 8024632:	3408      	adds	r4, #8
 8024634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024636:	f893 9000 	ldrb.w	r9, [r3]
 802463a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802463c:	eba3 0308 	sub.w	r3, r3, r8
 8024640:	4599      	cmp	r9, r3
 8024642:	bfa8      	it	ge
 8024644:	4699      	movge	r9, r3
 8024646:	f1b9 0f00 	cmp.w	r9, #0
 802464a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802464c:	dd09      	ble.n	8024662 <_vfprintf_r+0x113a>
 802464e:	444b      	add	r3, r9
 8024650:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024652:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024654:	3301      	adds	r3, #1
 8024656:	2b07      	cmp	r3, #7
 8024658:	e9c4 8900 	strd	r8, r9, [r4]
 802465c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802465e:	dc37      	bgt.n	80246d0 <_vfprintf_r+0x11a8>
 8024660:	3408      	adds	r4, #8
 8024662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024664:	781e      	ldrb	r6, [r3, #0]
 8024666:	f1b9 0f00 	cmp.w	r9, #0
 802466a:	bfa8      	it	ge
 802466c:	eba6 0609 	subge.w	r6, r6, r9
 8024670:	2e00      	cmp	r6, #0
 8024672:	dd18      	ble.n	80246a6 <_vfprintf_r+0x117e>
 8024674:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8024678:	486f      	ldr	r0, [pc, #444]	@ (8024838 <_vfprintf_r+0x1310>)
 802467a:	6020      	str	r0, [r4, #0]
 802467c:	2e10      	cmp	r6, #16
 802467e:	f103 0301 	add.w	r3, r3, #1
 8024682:	f104 0108 	add.w	r1, r4, #8
 8024686:	dc2d      	bgt.n	80246e4 <_vfprintf_r+0x11bc>
 8024688:	6066      	str	r6, [r4, #4]
 802468a:	2b07      	cmp	r3, #7
 802468c:	4416      	add	r6, r2
 802468e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8024692:	dd3a      	ble.n	802470a <_vfprintf_r+0x11e2>
 8024694:	9803      	ldr	r0, [sp, #12]
 8024696:	aa26      	add	r2, sp, #152	@ 0x98
 8024698:	4659      	mov	r1, fp
 802469a:	f000 f9b1 	bl	8024a00 <__sprint_r>
 802469e:	2800      	cmp	r0, #0
 80246a0:	f040 8109 	bne.w	80248b6 <_vfprintf_r+0x138e>
 80246a4:	ac29      	add	r4, sp, #164	@ 0xa4
 80246a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80246a8:	781b      	ldrb	r3, [r3, #0]
 80246aa:	4498      	add	r8, r3
 80246ac:	e731      	b.n	8024512 <_vfprintf_r+0xfea>
 80246ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80246b0:	3b01      	subs	r3, #1
 80246b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80246b4:	9b08      	ldr	r3, [sp, #32]
 80246b6:	3b01      	subs	r3, #1
 80246b8:	9308      	str	r3, [sp, #32]
 80246ba:	e7ad      	b.n	8024618 <_vfprintf_r+0x10f0>
 80246bc:	9803      	ldr	r0, [sp, #12]
 80246be:	aa26      	add	r2, sp, #152	@ 0x98
 80246c0:	4659      	mov	r1, fp
 80246c2:	f000 f99d 	bl	8024a00 <__sprint_r>
 80246c6:	2800      	cmp	r0, #0
 80246c8:	f040 80f5 	bne.w	80248b6 <_vfprintf_r+0x138e>
 80246cc:	ac29      	add	r4, sp, #164	@ 0xa4
 80246ce:	e7b1      	b.n	8024634 <_vfprintf_r+0x110c>
 80246d0:	9803      	ldr	r0, [sp, #12]
 80246d2:	aa26      	add	r2, sp, #152	@ 0x98
 80246d4:	4659      	mov	r1, fp
 80246d6:	f000 f993 	bl	8024a00 <__sprint_r>
 80246da:	2800      	cmp	r0, #0
 80246dc:	f040 80eb 	bne.w	80248b6 <_vfprintf_r+0x138e>
 80246e0:	ac29      	add	r4, sp, #164	@ 0xa4
 80246e2:	e7be      	b.n	8024662 <_vfprintf_r+0x113a>
 80246e4:	2010      	movs	r0, #16
 80246e6:	4402      	add	r2, r0
 80246e8:	2b07      	cmp	r3, #7
 80246ea:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80246ee:	6060      	str	r0, [r4, #4]
 80246f0:	dd08      	ble.n	8024704 <_vfprintf_r+0x11dc>
 80246f2:	9803      	ldr	r0, [sp, #12]
 80246f4:	aa26      	add	r2, sp, #152	@ 0x98
 80246f6:	4659      	mov	r1, fp
 80246f8:	f000 f982 	bl	8024a00 <__sprint_r>
 80246fc:	2800      	cmp	r0, #0
 80246fe:	f040 80da 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8024702:	a929      	add	r1, sp, #164	@ 0xa4
 8024704:	3e10      	subs	r6, #16
 8024706:	460c      	mov	r4, r1
 8024708:	e7b4      	b.n	8024674 <_vfprintf_r+0x114c>
 802470a:	460c      	mov	r4, r1
 802470c:	e7cb      	b.n	80246a6 <_vfprintf_r+0x117e>
 802470e:	9803      	ldr	r0, [sp, #12]
 8024710:	aa26      	add	r2, sp, #152	@ 0x98
 8024712:	4659      	mov	r1, fp
 8024714:	f000 f974 	bl	8024a00 <__sprint_r>
 8024718:	2800      	cmp	r0, #0
 802471a:	f040 80cc 	bne.w	80248b6 <_vfprintf_r+0x138e>
 802471e:	ac29      	add	r4, sp, #164	@ 0xa4
 8024720:	e715      	b.n	802454e <_vfprintf_r+0x1026>
 8024722:	9803      	ldr	r0, [sp, #12]
 8024724:	aa26      	add	r2, sp, #152	@ 0x98
 8024726:	4659      	mov	r1, fp
 8024728:	f000 f96a 	bl	8024a00 <__sprint_r>
 802472c:	2800      	cmp	r0, #0
 802472e:	f040 80c2 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8024732:	ac29      	add	r4, sp, #164	@ 0xa4
 8024734:	e722      	b.n	802457c <_vfprintf_r+0x1054>
 8024736:	9904      	ldr	r1, [sp, #16]
 8024738:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802473a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802473c:	2901      	cmp	r1, #1
 802473e:	f103 0301 	add.w	r3, r3, #1
 8024742:	f102 0201 	add.w	r2, r2, #1
 8024746:	f104 0608 	add.w	r6, r4, #8
 802474a:	dc02      	bgt.n	8024752 <_vfprintf_r+0x122a>
 802474c:	07ef      	lsls	r7, r5, #31
 802474e:	f140 8086 	bpl.w	802485e <_vfprintf_r+0x1336>
 8024752:	2101      	movs	r1, #1
 8024754:	2a07      	cmp	r2, #7
 8024756:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802475a:	f8c4 8000 	str.w	r8, [r4]
 802475e:	6061      	str	r1, [r4, #4]
 8024760:	dd08      	ble.n	8024774 <_vfprintf_r+0x124c>
 8024762:	9803      	ldr	r0, [sp, #12]
 8024764:	aa26      	add	r2, sp, #152	@ 0x98
 8024766:	4659      	mov	r1, fp
 8024768:	f000 f94a 	bl	8024a00 <__sprint_r>
 802476c:	2800      	cmp	r0, #0
 802476e:	f040 80a2 	bne.w	80248b6 <_vfprintf_r+0x138e>
 8024772:	ae29      	add	r6, sp, #164	@ 0xa4
 8024774:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024776:	6033      	str	r3, [r6, #0]
 8024778:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802477a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802477c:	6073      	str	r3, [r6, #4]
 802477e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024780:	4413      	add	r3, r2
 8024782:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024784:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024786:	3301      	adds	r3, #1
 8024788:	2b07      	cmp	r3, #7
 802478a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802478c:	dc33      	bgt.n	80247f6 <_vfprintf_r+0x12ce>
 802478e:	3608      	adds	r6, #8
 8024790:	9b04      	ldr	r3, [sp, #16]
 8024792:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8024796:	1e5c      	subs	r4, r3, #1
 8024798:	2200      	movs	r2, #0
 802479a:	2300      	movs	r3, #0
 802479c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 80247a0:	f7dc f9aa 	bl	8000af8 <__aeabi_dcmpeq>
 80247a4:	2800      	cmp	r0, #0
 80247a6:	d12f      	bne.n	8024808 <_vfprintf_r+0x12e0>
 80247a8:	f108 0201 	add.w	r2, r8, #1
 80247ac:	e9c6 2400 	strd	r2, r4, [r6]
 80247b0:	9a04      	ldr	r2, [sp, #16]
 80247b2:	f109 0301 	add.w	r3, r9, #1
 80247b6:	3f01      	subs	r7, #1
 80247b8:	4417      	add	r7, r2
 80247ba:	2b07      	cmp	r3, #7
 80247bc:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 80247c0:	dd56      	ble.n	8024870 <_vfprintf_r+0x1348>
 80247c2:	9803      	ldr	r0, [sp, #12]
 80247c4:	aa26      	add	r2, sp, #152	@ 0x98
 80247c6:	4659      	mov	r1, fp
 80247c8:	f000 f91a 	bl	8024a00 <__sprint_r>
 80247cc:	2800      	cmp	r0, #0
 80247ce:	d172      	bne.n	80248b6 <_vfprintf_r+0x138e>
 80247d0:	ae29      	add	r6, sp, #164	@ 0xa4
 80247d2:	ab22      	add	r3, sp, #136	@ 0x88
 80247d4:	6033      	str	r3, [r6, #0]
 80247d6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80247d8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80247da:	6073      	str	r3, [r6, #4]
 80247dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80247de:	4413      	add	r3, r2
 80247e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80247e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80247e4:	3301      	adds	r3, #1
 80247e6:	2b07      	cmp	r3, #7
 80247e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80247ea:	f73f ada1 	bgt.w	8024330 <_vfprintf_r+0xe08>
 80247ee:	f106 0408 	add.w	r4, r6, #8
 80247f2:	f7ff baef 	b.w	8023dd4 <_vfprintf_r+0x8ac>
 80247f6:	9803      	ldr	r0, [sp, #12]
 80247f8:	aa26      	add	r2, sp, #152	@ 0x98
 80247fa:	4659      	mov	r1, fp
 80247fc:	f000 f900 	bl	8024a00 <__sprint_r>
 8024800:	2800      	cmp	r0, #0
 8024802:	d158      	bne.n	80248b6 <_vfprintf_r+0x138e>
 8024804:	ae29      	add	r6, sp, #164	@ 0xa4
 8024806:	e7c3      	b.n	8024790 <_vfprintf_r+0x1268>
 8024808:	9b04      	ldr	r3, [sp, #16]
 802480a:	2b01      	cmp	r3, #1
 802480c:	dde1      	ble.n	80247d2 <_vfprintf_r+0x12aa>
 802480e:	4f0a      	ldr	r7, [pc, #40]	@ (8024838 <_vfprintf_r+0x1310>)
 8024810:	f04f 0810 	mov.w	r8, #16
 8024814:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8024818:	2c10      	cmp	r4, #16
 802481a:	f103 0301 	add.w	r3, r3, #1
 802481e:	f106 0108 	add.w	r1, r6, #8
 8024822:	6037      	str	r7, [r6, #0]
 8024824:	dc0a      	bgt.n	802483c <_vfprintf_r+0x1314>
 8024826:	6074      	str	r4, [r6, #4]
 8024828:	2b07      	cmp	r3, #7
 802482a:	4414      	add	r4, r2
 802482c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8024830:	dcc7      	bgt.n	80247c2 <_vfprintf_r+0x129a>
 8024832:	460e      	mov	r6, r1
 8024834:	e7cd      	b.n	80247d2 <_vfprintf_r+0x12aa>
 8024836:	bf00      	nop
 8024838:	0803406c 	.word	0x0803406c
 802483c:	3210      	adds	r2, #16
 802483e:	2b07      	cmp	r3, #7
 8024840:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8024844:	f8c6 8004 	str.w	r8, [r6, #4]
 8024848:	dd06      	ble.n	8024858 <_vfprintf_r+0x1330>
 802484a:	9803      	ldr	r0, [sp, #12]
 802484c:	aa26      	add	r2, sp, #152	@ 0x98
 802484e:	4659      	mov	r1, fp
 8024850:	f000 f8d6 	bl	8024a00 <__sprint_r>
 8024854:	bb78      	cbnz	r0, 80248b6 <_vfprintf_r+0x138e>
 8024856:	a929      	add	r1, sp, #164	@ 0xa4
 8024858:	3c10      	subs	r4, #16
 802485a:	460e      	mov	r6, r1
 802485c:	e7da      	b.n	8024814 <_vfprintf_r+0x12ec>
 802485e:	2101      	movs	r1, #1
 8024860:	2a07      	cmp	r2, #7
 8024862:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024866:	f8c4 8000 	str.w	r8, [r4]
 802486a:	6061      	str	r1, [r4, #4]
 802486c:	ddb1      	ble.n	80247d2 <_vfprintf_r+0x12aa>
 802486e:	e7a8      	b.n	80247c2 <_vfprintf_r+0x129a>
 8024870:	3608      	adds	r6, #8
 8024872:	e7ae      	b.n	80247d2 <_vfprintf_r+0x12aa>
 8024874:	460c      	mov	r4, r1
 8024876:	f7ff baad 	b.w	8023dd4 <_vfprintf_r+0x8ac>
 802487a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802487c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802487e:	1a9d      	subs	r5, r3, r2
 8024880:	2d00      	cmp	r5, #0
 8024882:	f77f aaaa 	ble.w	8023dda <_vfprintf_r+0x8b2>
 8024886:	4e3d      	ldr	r6, [pc, #244]	@ (802497c <_vfprintf_r+0x1454>)
 8024888:	2710      	movs	r7, #16
 802488a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802488e:	2d10      	cmp	r5, #16
 8024890:	f103 0301 	add.w	r3, r3, #1
 8024894:	6026      	str	r6, [r4, #0]
 8024896:	dc18      	bgt.n	80248ca <_vfprintf_r+0x13a2>
 8024898:	6065      	str	r5, [r4, #4]
 802489a:	2b07      	cmp	r3, #7
 802489c:	4415      	add	r5, r2
 802489e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 80248a2:	f77f aa9a 	ble.w	8023dda <_vfprintf_r+0x8b2>
 80248a6:	9803      	ldr	r0, [sp, #12]
 80248a8:	aa26      	add	r2, sp, #152	@ 0x98
 80248aa:	4659      	mov	r1, fp
 80248ac:	f000 f8a8 	bl	8024a00 <__sprint_r>
 80248b0:	2800      	cmp	r0, #0
 80248b2:	f43f aa92 	beq.w	8023dda <_vfprintf_r+0x8b2>
 80248b6:	f1ba 0f00 	cmp.w	sl, #0
 80248ba:	f43f a892 	beq.w	80239e2 <_vfprintf_r+0x4ba>
 80248be:	9803      	ldr	r0, [sp, #12]
 80248c0:	4651      	mov	r1, sl
 80248c2:	f003 fca3 	bl	802820c <_free_r>
 80248c6:	f7ff b88c 	b.w	80239e2 <_vfprintf_r+0x4ba>
 80248ca:	3210      	adds	r2, #16
 80248cc:	2b07      	cmp	r3, #7
 80248ce:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80248d2:	6067      	str	r7, [r4, #4]
 80248d4:	dc02      	bgt.n	80248dc <_vfprintf_r+0x13b4>
 80248d6:	3408      	adds	r4, #8
 80248d8:	3d10      	subs	r5, #16
 80248da:	e7d6      	b.n	802488a <_vfprintf_r+0x1362>
 80248dc:	9803      	ldr	r0, [sp, #12]
 80248de:	aa26      	add	r2, sp, #152	@ 0x98
 80248e0:	4659      	mov	r1, fp
 80248e2:	f000 f88d 	bl	8024a00 <__sprint_r>
 80248e6:	2800      	cmp	r0, #0
 80248e8:	d1e5      	bne.n	80248b6 <_vfprintf_r+0x138e>
 80248ea:	ac29      	add	r4, sp, #164	@ 0xa4
 80248ec:	e7f4      	b.n	80248d8 <_vfprintf_r+0x13b0>
 80248ee:	9803      	ldr	r0, [sp, #12]
 80248f0:	4651      	mov	r1, sl
 80248f2:	f003 fc8b 	bl	802820c <_free_r>
 80248f6:	f7ff ba88 	b.w	8023e0a <_vfprintf_r+0x8e2>
 80248fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80248fc:	b91b      	cbnz	r3, 8024906 <_vfprintf_r+0x13de>
 80248fe:	2300      	movs	r3, #0
 8024900:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024902:	f7ff b86e 	b.w	80239e2 <_vfprintf_r+0x4ba>
 8024906:	9803      	ldr	r0, [sp, #12]
 8024908:	aa26      	add	r2, sp, #152	@ 0x98
 802490a:	4659      	mov	r1, fp
 802490c:	f000 f878 	bl	8024a00 <__sprint_r>
 8024910:	2800      	cmp	r0, #0
 8024912:	d0f4      	beq.n	80248fe <_vfprintf_r+0x13d6>
 8024914:	f7ff b865 	b.w	80239e2 <_vfprintf_r+0x4ba>
 8024918:	ea56 0207 	orrs.w	r2, r6, r7
 802491c:	9508      	str	r5, [sp, #32]
 802491e:	f43f ab75 	beq.w	802400c <_vfprintf_r+0xae4>
 8024922:	2b01      	cmp	r3, #1
 8024924:	f43f abf6 	beq.w	8024114 <_vfprintf_r+0xbec>
 8024928:	2b02      	cmp	r3, #2
 802492a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802492e:	f43f ac3a 	beq.w	80241a6 <_vfprintf_r+0xc7e>
 8024932:	f006 0307 	and.w	r3, r6, #7
 8024936:	08f6      	lsrs	r6, r6, #3
 8024938:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802493c:	08ff      	lsrs	r7, r7, #3
 802493e:	3330      	adds	r3, #48	@ 0x30
 8024940:	ea56 0107 	orrs.w	r1, r6, r7
 8024944:	4642      	mov	r2, r8
 8024946:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802494a:	d1f2      	bne.n	8024932 <_vfprintf_r+0x140a>
 802494c:	9908      	ldr	r1, [sp, #32]
 802494e:	07ce      	lsls	r6, r1, #31
 8024950:	d506      	bpl.n	8024960 <_vfprintf_r+0x1438>
 8024952:	2b30      	cmp	r3, #48	@ 0x30
 8024954:	d004      	beq.n	8024960 <_vfprintf_r+0x1438>
 8024956:	2330      	movs	r3, #48	@ 0x30
 8024958:	f808 3c01 	strb.w	r3, [r8, #-1]
 802495c:	f1a2 0802 	sub.w	r8, r2, #2
 8024960:	ab52      	add	r3, sp, #328	@ 0x148
 8024962:	9d08      	ldr	r5, [sp, #32]
 8024964:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8024968:	f04f 0a00 	mov.w	sl, #0
 802496c:	eba3 0908 	sub.w	r9, r3, r8
 8024970:	4657      	mov	r7, sl
 8024972:	f8cd a020 	str.w	sl, [sp, #32]
 8024976:	4656      	mov	r6, sl
 8024978:	f7ff b978 	b.w	8023c6c <_vfprintf_r+0x744>
 802497c:	0803407c 	.word	0x0803407c

08024980 <__sbprintf>:
 8024980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024982:	461f      	mov	r7, r3
 8024984:	898b      	ldrh	r3, [r1, #12]
 8024986:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802498a:	f023 0302 	bic.w	r3, r3, #2
 802498e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8024992:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8024994:	9319      	str	r3, [sp, #100]	@ 0x64
 8024996:	89cb      	ldrh	r3, [r1, #14]
 8024998:	f8ad 300e 	strh.w	r3, [sp, #14]
 802499c:	69cb      	ldr	r3, [r1, #28]
 802499e:	9307      	str	r3, [sp, #28]
 80249a0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80249a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80249a4:	ab1a      	add	r3, sp, #104	@ 0x68
 80249a6:	9300      	str	r3, [sp, #0]
 80249a8:	9304      	str	r3, [sp, #16]
 80249aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80249ae:	4615      	mov	r5, r2
 80249b0:	4606      	mov	r6, r0
 80249b2:	9302      	str	r3, [sp, #8]
 80249b4:	9305      	str	r3, [sp, #20]
 80249b6:	a816      	add	r0, sp, #88	@ 0x58
 80249b8:	2300      	movs	r3, #0
 80249ba:	460c      	mov	r4, r1
 80249bc:	9306      	str	r3, [sp, #24]
 80249be:	f002 fd1d 	bl	80273fc <__retarget_lock_init_recursive>
 80249c2:	462a      	mov	r2, r5
 80249c4:	463b      	mov	r3, r7
 80249c6:	4669      	mov	r1, sp
 80249c8:	4630      	mov	r0, r6
 80249ca:	f7fe fdad 	bl	8023528 <_vfprintf_r>
 80249ce:	1e05      	subs	r5, r0, #0
 80249d0:	db07      	blt.n	80249e2 <__sbprintf+0x62>
 80249d2:	4669      	mov	r1, sp
 80249d4:	4630      	mov	r0, r6
 80249d6:	f000 fed7 	bl	8025788 <_fflush_r>
 80249da:	2800      	cmp	r0, #0
 80249dc:	bf18      	it	ne
 80249de:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 80249e2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80249e6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80249e8:	065b      	lsls	r3, r3, #25
 80249ea:	bf42      	ittt	mi
 80249ec:	89a3      	ldrhmi	r3, [r4, #12]
 80249ee:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80249f2:	81a3      	strhmi	r3, [r4, #12]
 80249f4:	f002 fd03 	bl	80273fe <__retarget_lock_close_recursive>
 80249f8:	4628      	mov	r0, r5
 80249fa:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80249fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024a00 <__sprint_r>:
 8024a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a04:	6893      	ldr	r3, [r2, #8]
 8024a06:	4680      	mov	r8, r0
 8024a08:	460e      	mov	r6, r1
 8024a0a:	4614      	mov	r4, r2
 8024a0c:	b343      	cbz	r3, 8024a60 <__sprint_r+0x60>
 8024a0e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8024a10:	049d      	lsls	r5, r3, #18
 8024a12:	d522      	bpl.n	8024a5a <__sprint_r+0x5a>
 8024a14:	6815      	ldr	r5, [r2, #0]
 8024a16:	68a0      	ldr	r0, [r4, #8]
 8024a18:	3508      	adds	r5, #8
 8024a1a:	b928      	cbnz	r0, 8024a28 <__sprint_r+0x28>
 8024a1c:	2300      	movs	r3, #0
 8024a1e:	60a3      	str	r3, [r4, #8]
 8024a20:	2300      	movs	r3, #0
 8024a22:	6063      	str	r3, [r4, #4]
 8024a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a28:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8024a2c:	f04f 0900 	mov.w	r9, #0
 8024a30:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8024a34:	45ca      	cmp	sl, r9
 8024a36:	dc05      	bgt.n	8024a44 <__sprint_r+0x44>
 8024a38:	68a3      	ldr	r3, [r4, #8]
 8024a3a:	f027 0703 	bic.w	r7, r7, #3
 8024a3e:	1bdb      	subs	r3, r3, r7
 8024a40:	60a3      	str	r3, [r4, #8]
 8024a42:	e7e8      	b.n	8024a16 <__sprint_r+0x16>
 8024a44:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8024a48:	4632      	mov	r2, r6
 8024a4a:	4640      	mov	r0, r8
 8024a4c:	f001 fa41 	bl	8025ed2 <_fputwc_r>
 8024a50:	1c43      	adds	r3, r0, #1
 8024a52:	d0e3      	beq.n	8024a1c <__sprint_r+0x1c>
 8024a54:	f109 0901 	add.w	r9, r9, #1
 8024a58:	e7ec      	b.n	8024a34 <__sprint_r+0x34>
 8024a5a:	f001 f829 	bl	8025ab0 <__sfvwrite_r>
 8024a5e:	e7dd      	b.n	8024a1c <__sprint_r+0x1c>
 8024a60:	4618      	mov	r0, r3
 8024a62:	e7dd      	b.n	8024a20 <__sprint_r+0x20>

08024a64 <_vfiprintf_r>:
 8024a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a68:	b0bb      	sub	sp, #236	@ 0xec
 8024a6a:	460f      	mov	r7, r1
 8024a6c:	4693      	mov	fp, r2
 8024a6e:	461c      	mov	r4, r3
 8024a70:	461d      	mov	r5, r3
 8024a72:	9000      	str	r0, [sp, #0]
 8024a74:	b118      	cbz	r0, 8024a7e <_vfiprintf_r+0x1a>
 8024a76:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8024a78:	b90b      	cbnz	r3, 8024a7e <_vfiprintf_r+0x1a>
 8024a7a:	f000 ffc7 	bl	8025a0c <__sinit>
 8024a7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024a80:	07db      	lsls	r3, r3, #31
 8024a82:	d405      	bmi.n	8024a90 <_vfiprintf_r+0x2c>
 8024a84:	89bb      	ldrh	r3, [r7, #12]
 8024a86:	059e      	lsls	r6, r3, #22
 8024a88:	d402      	bmi.n	8024a90 <_vfiprintf_r+0x2c>
 8024a8a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8024a8c:	f002 fcb9 	bl	8027402 <__retarget_lock_acquire_recursive>
 8024a90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8024a94:	0498      	lsls	r0, r3, #18
 8024a96:	d406      	bmi.n	8024aa6 <_vfiprintf_r+0x42>
 8024a98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8024a9c:	81bb      	strh	r3, [r7, #12]
 8024a9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024aa0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8024aa4:	667b      	str	r3, [r7, #100]	@ 0x64
 8024aa6:	89bb      	ldrh	r3, [r7, #12]
 8024aa8:	0719      	lsls	r1, r3, #28
 8024aaa:	d501      	bpl.n	8024ab0 <_vfiprintf_r+0x4c>
 8024aac:	693b      	ldr	r3, [r7, #16]
 8024aae:	b9ab      	cbnz	r3, 8024adc <_vfiprintf_r+0x78>
 8024ab0:	9800      	ldr	r0, [sp, #0]
 8024ab2:	4639      	mov	r1, r7
 8024ab4:	f001 f966 	bl	8025d84 <__swsetup_r>
 8024ab8:	b180      	cbz	r0, 8024adc <_vfiprintf_r+0x78>
 8024aba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024abc:	07da      	lsls	r2, r3, #31
 8024abe:	d506      	bpl.n	8024ace <_vfiprintf_r+0x6a>
 8024ac0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024ac4:	9303      	str	r3, [sp, #12]
 8024ac6:	9803      	ldr	r0, [sp, #12]
 8024ac8:	b03b      	add	sp, #236	@ 0xec
 8024aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ace:	89bb      	ldrh	r3, [r7, #12]
 8024ad0:	059b      	lsls	r3, r3, #22
 8024ad2:	d4f5      	bmi.n	8024ac0 <_vfiprintf_r+0x5c>
 8024ad4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8024ad6:	f002 fc96 	bl	8027406 <__retarget_lock_release_recursive>
 8024ada:	e7f1      	b.n	8024ac0 <_vfiprintf_r+0x5c>
 8024adc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8024ae0:	f003 021a 	and.w	r2, r3, #26
 8024ae4:	2a0a      	cmp	r2, #10
 8024ae6:	d114      	bne.n	8024b12 <_vfiprintf_r+0xae>
 8024ae8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8024aec:	2a00      	cmp	r2, #0
 8024aee:	db10      	blt.n	8024b12 <_vfiprintf_r+0xae>
 8024af0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8024af2:	07d6      	lsls	r6, r2, #31
 8024af4:	d404      	bmi.n	8024b00 <_vfiprintf_r+0x9c>
 8024af6:	059d      	lsls	r5, r3, #22
 8024af8:	d402      	bmi.n	8024b00 <_vfiprintf_r+0x9c>
 8024afa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8024afc:	f002 fc83 	bl	8027406 <__retarget_lock_release_recursive>
 8024b00:	9800      	ldr	r0, [sp, #0]
 8024b02:	4623      	mov	r3, r4
 8024b04:	465a      	mov	r2, fp
 8024b06:	4639      	mov	r1, r7
 8024b08:	b03b      	add	sp, #236	@ 0xec
 8024b0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b0e:	f000 bc31 	b.w	8025374 <__sbprintf>
 8024b12:	2300      	movs	r3, #0
 8024b14:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8024b18:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8024b1c:	ae11      	add	r6, sp, #68	@ 0x44
 8024b1e:	960e      	str	r6, [sp, #56]	@ 0x38
 8024b20:	9307      	str	r3, [sp, #28]
 8024b22:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b24:	9303      	str	r3, [sp, #12]
 8024b26:	465b      	mov	r3, fp
 8024b28:	461c      	mov	r4, r3
 8024b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024b2e:	b10a      	cbz	r2, 8024b34 <_vfiprintf_r+0xd0>
 8024b30:	2a25      	cmp	r2, #37	@ 0x25
 8024b32:	d1f9      	bne.n	8024b28 <_vfiprintf_r+0xc4>
 8024b34:	ebb4 080b 	subs.w	r8, r4, fp
 8024b38:	d00d      	beq.n	8024b56 <_vfiprintf_r+0xf2>
 8024b3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024b3c:	4443      	add	r3, r8
 8024b3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024b42:	3301      	adds	r3, #1
 8024b44:	2b07      	cmp	r3, #7
 8024b46:	e9c6 b800 	strd	fp, r8, [r6]
 8024b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024b4c:	dc75      	bgt.n	8024c3a <_vfiprintf_r+0x1d6>
 8024b4e:	3608      	adds	r6, #8
 8024b50:	9b03      	ldr	r3, [sp, #12]
 8024b52:	4443      	add	r3, r8
 8024b54:	9303      	str	r3, [sp, #12]
 8024b56:	7823      	ldrb	r3, [r4, #0]
 8024b58:	2b00      	cmp	r3, #0
 8024b5a:	f000 83cd 	beq.w	80252f8 <_vfiprintf_r+0x894>
 8024b5e:	2300      	movs	r3, #0
 8024b60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8024b64:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8024b68:	3401      	adds	r4, #1
 8024b6a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8024b6e:	469a      	mov	sl, r3
 8024b70:	46a3      	mov	fp, r4
 8024b72:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8024b76:	f1a3 0220 	sub.w	r2, r3, #32
 8024b7a:	2a5a      	cmp	r2, #90	@ 0x5a
 8024b7c:	f200 8316 	bhi.w	80251ac <_vfiprintf_r+0x748>
 8024b80:	e8df f012 	tbh	[pc, r2, lsl #1]
 8024b84:	0314009a 	.word	0x0314009a
 8024b88:	00a20314 	.word	0x00a20314
 8024b8c:	03140314 	.word	0x03140314
 8024b90:	00820314 	.word	0x00820314
 8024b94:	03140314 	.word	0x03140314
 8024b98:	00af00a5 	.word	0x00af00a5
 8024b9c:	00ac0314 	.word	0x00ac0314
 8024ba0:	031400b1 	.word	0x031400b1
 8024ba4:	00d000cd 	.word	0x00d000cd
 8024ba8:	00d000d0 	.word	0x00d000d0
 8024bac:	00d000d0 	.word	0x00d000d0
 8024bb0:	00d000d0 	.word	0x00d000d0
 8024bb4:	00d000d0 	.word	0x00d000d0
 8024bb8:	03140314 	.word	0x03140314
 8024bbc:	03140314 	.word	0x03140314
 8024bc0:	03140314 	.word	0x03140314
 8024bc4:	03140314 	.word	0x03140314
 8024bc8:	00f70314 	.word	0x00f70314
 8024bcc:	03140104 	.word	0x03140104
 8024bd0:	03140314 	.word	0x03140314
 8024bd4:	03140314 	.word	0x03140314
 8024bd8:	03140314 	.word	0x03140314
 8024bdc:	03140314 	.word	0x03140314
 8024be0:	01520314 	.word	0x01520314
 8024be4:	03140314 	.word	0x03140314
 8024be8:	019a0314 	.word	0x019a0314
 8024bec:	027a0314 	.word	0x027a0314
 8024bf0:	03140314 	.word	0x03140314
 8024bf4:	0314029a 	.word	0x0314029a
 8024bf8:	03140314 	.word	0x03140314
 8024bfc:	03140314 	.word	0x03140314
 8024c00:	03140314 	.word	0x03140314
 8024c04:	03140314 	.word	0x03140314
 8024c08:	00f70314 	.word	0x00f70314
 8024c0c:	03140106 	.word	0x03140106
 8024c10:	03140314 	.word	0x03140314
 8024c14:	010600e0 	.word	0x010600e0
 8024c18:	031400f1 	.word	0x031400f1
 8024c1c:	031400eb 	.word	0x031400eb
 8024c20:	01540132 	.word	0x01540132
 8024c24:	00f10189 	.word	0x00f10189
 8024c28:	019a0314 	.word	0x019a0314
 8024c2c:	027c0098 	.word	0x027c0098
 8024c30:	03140314 	.word	0x03140314
 8024c34:	03140065 	.word	0x03140065
 8024c38:	0098      	.short	0x0098
 8024c3a:	9800      	ldr	r0, [sp, #0]
 8024c3c:	aa0e      	add	r2, sp, #56	@ 0x38
 8024c3e:	4639      	mov	r1, r7
 8024c40:	f7ff fede 	bl	8024a00 <__sprint_r>
 8024c44:	2800      	cmp	r0, #0
 8024c46:	f040 8336 	bne.w	80252b6 <_vfiprintf_r+0x852>
 8024c4a:	ae11      	add	r6, sp, #68	@ 0x44
 8024c4c:	e780      	b.n	8024b50 <_vfiprintf_r+0xec>
 8024c4e:	4a99      	ldr	r2, [pc, #612]	@ (8024eb4 <_vfiprintf_r+0x450>)
 8024c50:	9205      	str	r2, [sp, #20]
 8024c52:	f01a 0220 	ands.w	r2, sl, #32
 8024c56:	f000 8231 	beq.w	80250bc <_vfiprintf_r+0x658>
 8024c5a:	3507      	adds	r5, #7
 8024c5c:	f025 0507 	bic.w	r5, r5, #7
 8024c60:	46a8      	mov	r8, r5
 8024c62:	686d      	ldr	r5, [r5, #4]
 8024c64:	f858 4b08 	ldr.w	r4, [r8], #8
 8024c68:	f01a 0f01 	tst.w	sl, #1
 8024c6c:	d009      	beq.n	8024c82 <_vfiprintf_r+0x21e>
 8024c6e:	ea54 0205 	orrs.w	r2, r4, r5
 8024c72:	bf1f      	itttt	ne
 8024c74:	2230      	movne	r2, #48	@ 0x30
 8024c76:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8024c7a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8024c7e:	f04a 0a02 	orrne.w	sl, sl, #2
 8024c82:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8024c86:	e112      	b.n	8024eae <_vfiprintf_r+0x44a>
 8024c88:	9800      	ldr	r0, [sp, #0]
 8024c8a:	f002 faf3 	bl	8027274 <_localeconv_r>
 8024c8e:	6843      	ldr	r3, [r0, #4]
 8024c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c92:	4618      	mov	r0, r3
 8024c94:	f7db fb04 	bl	80002a0 <strlen>
 8024c98:	9007      	str	r0, [sp, #28]
 8024c9a:	9800      	ldr	r0, [sp, #0]
 8024c9c:	f002 faea 	bl	8027274 <_localeconv_r>
 8024ca0:	6883      	ldr	r3, [r0, #8]
 8024ca2:	9306      	str	r3, [sp, #24]
 8024ca4:	9b07      	ldr	r3, [sp, #28]
 8024ca6:	b12b      	cbz	r3, 8024cb4 <_vfiprintf_r+0x250>
 8024ca8:	9b06      	ldr	r3, [sp, #24]
 8024caa:	b11b      	cbz	r3, 8024cb4 <_vfiprintf_r+0x250>
 8024cac:	781b      	ldrb	r3, [r3, #0]
 8024cae:	b10b      	cbz	r3, 8024cb4 <_vfiprintf_r+0x250>
 8024cb0:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8024cb4:	465c      	mov	r4, fp
 8024cb6:	e75b      	b.n	8024b70 <_vfiprintf_r+0x10c>
 8024cb8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8024cbc:	2b00      	cmp	r3, #0
 8024cbe:	d1f9      	bne.n	8024cb4 <_vfiprintf_r+0x250>
 8024cc0:	2320      	movs	r3, #32
 8024cc2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8024cc6:	e7f5      	b.n	8024cb4 <_vfiprintf_r+0x250>
 8024cc8:	f04a 0a01 	orr.w	sl, sl, #1
 8024ccc:	e7f2      	b.n	8024cb4 <_vfiprintf_r+0x250>
 8024cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8024cd2:	9302      	str	r3, [sp, #8]
 8024cd4:	2b00      	cmp	r3, #0
 8024cd6:	daed      	bge.n	8024cb4 <_vfiprintf_r+0x250>
 8024cd8:	425b      	negs	r3, r3
 8024cda:	9302      	str	r3, [sp, #8]
 8024cdc:	f04a 0a04 	orr.w	sl, sl, #4
 8024ce0:	e7e8      	b.n	8024cb4 <_vfiprintf_r+0x250>
 8024ce2:	232b      	movs	r3, #43	@ 0x2b
 8024ce4:	e7ed      	b.n	8024cc2 <_vfiprintf_r+0x25e>
 8024ce6:	465a      	mov	r2, fp
 8024ce8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8024cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8024cee:	d112      	bne.n	8024d16 <_vfiprintf_r+0x2b2>
 8024cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8024cf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8024cf8:	9301      	str	r3, [sp, #4]
 8024cfa:	4693      	mov	fp, r2
 8024cfc:	e7da      	b.n	8024cb4 <_vfiprintf_r+0x250>
 8024cfe:	9b01      	ldr	r3, [sp, #4]
 8024d00:	fb00 1303 	mla	r3, r0, r3, r1
 8024d04:	9301      	str	r3, [sp, #4]
 8024d06:	f812 3b01 	ldrb.w	r3, [r2], #1
 8024d0a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8024d0e:	2909      	cmp	r1, #9
 8024d10:	d9f5      	bls.n	8024cfe <_vfiprintf_r+0x29a>
 8024d12:	4693      	mov	fp, r2
 8024d14:	e72f      	b.n	8024b76 <_vfiprintf_r+0x112>
 8024d16:	2100      	movs	r1, #0
 8024d18:	9101      	str	r1, [sp, #4]
 8024d1a:	200a      	movs	r0, #10
 8024d1c:	e7f5      	b.n	8024d0a <_vfiprintf_r+0x2a6>
 8024d1e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8024d22:	e7c7      	b.n	8024cb4 <_vfiprintf_r+0x250>
 8024d24:	2100      	movs	r1, #0
 8024d26:	465a      	mov	r2, fp
 8024d28:	9102      	str	r1, [sp, #8]
 8024d2a:	200a      	movs	r0, #10
 8024d2c:	9902      	ldr	r1, [sp, #8]
 8024d2e:	3b30      	subs	r3, #48	@ 0x30
 8024d30:	fb00 3301 	mla	r3, r0, r1, r3
 8024d34:	9302      	str	r3, [sp, #8]
 8024d36:	f812 3b01 	ldrb.w	r3, [r2], #1
 8024d3a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8024d3e:	2909      	cmp	r1, #9
 8024d40:	d9f4      	bls.n	8024d2c <_vfiprintf_r+0x2c8>
 8024d42:	e7e6      	b.n	8024d12 <_vfiprintf_r+0x2ae>
 8024d44:	f89b 3000 	ldrb.w	r3, [fp]
 8024d48:	2b68      	cmp	r3, #104	@ 0x68
 8024d4a:	bf06      	itte	eq
 8024d4c:	f10b 0b01 	addeq.w	fp, fp, #1
 8024d50:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8024d54:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8024d58:	e7ac      	b.n	8024cb4 <_vfiprintf_r+0x250>
 8024d5a:	f89b 3000 	ldrb.w	r3, [fp]
 8024d5e:	2b6c      	cmp	r3, #108	@ 0x6c
 8024d60:	d104      	bne.n	8024d6c <_vfiprintf_r+0x308>
 8024d62:	f10b 0b01 	add.w	fp, fp, #1
 8024d66:	f04a 0a20 	orr.w	sl, sl, #32
 8024d6a:	e7a3      	b.n	8024cb4 <_vfiprintf_r+0x250>
 8024d6c:	f04a 0a10 	orr.w	sl, sl, #16
 8024d70:	e7a0      	b.n	8024cb4 <_vfiprintf_r+0x250>
 8024d72:	46a8      	mov	r8, r5
 8024d74:	2400      	movs	r4, #0
 8024d76:	f858 3b04 	ldr.w	r3, [r8], #4
 8024d7a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8024d7e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8024d82:	2301      	movs	r3, #1
 8024d84:	9301      	str	r3, [sp, #4]
 8024d86:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8024d8a:	e0ab      	b.n	8024ee4 <_vfiprintf_r+0x480>
 8024d8c:	f04a 0a10 	orr.w	sl, sl, #16
 8024d90:	f01a 0f20 	tst.w	sl, #32
 8024d94:	d011      	beq.n	8024dba <_vfiprintf_r+0x356>
 8024d96:	3507      	adds	r5, #7
 8024d98:	f025 0507 	bic.w	r5, r5, #7
 8024d9c:	46a8      	mov	r8, r5
 8024d9e:	686d      	ldr	r5, [r5, #4]
 8024da0:	f858 4b08 	ldr.w	r4, [r8], #8
 8024da4:	2d00      	cmp	r5, #0
 8024da6:	da06      	bge.n	8024db6 <_vfiprintf_r+0x352>
 8024da8:	4264      	negs	r4, r4
 8024daa:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8024dae:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8024db2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8024db6:	2301      	movs	r3, #1
 8024db8:	e048      	b.n	8024e4c <_vfiprintf_r+0x3e8>
 8024dba:	46a8      	mov	r8, r5
 8024dbc:	f01a 0f10 	tst.w	sl, #16
 8024dc0:	f858 5b04 	ldr.w	r5, [r8], #4
 8024dc4:	d002      	beq.n	8024dcc <_vfiprintf_r+0x368>
 8024dc6:	462c      	mov	r4, r5
 8024dc8:	17ed      	asrs	r5, r5, #31
 8024dca:	e7eb      	b.n	8024da4 <_vfiprintf_r+0x340>
 8024dcc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8024dd0:	d003      	beq.n	8024dda <_vfiprintf_r+0x376>
 8024dd2:	b22c      	sxth	r4, r5
 8024dd4:	f345 35c0 	sbfx	r5, r5, #15, #1
 8024dd8:	e7e4      	b.n	8024da4 <_vfiprintf_r+0x340>
 8024dda:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8024dde:	d0f2      	beq.n	8024dc6 <_vfiprintf_r+0x362>
 8024de0:	b26c      	sxtb	r4, r5
 8024de2:	f345 15c0 	sbfx	r5, r5, #7, #1
 8024de6:	e7dd      	b.n	8024da4 <_vfiprintf_r+0x340>
 8024de8:	f01a 0f20 	tst.w	sl, #32
 8024dec:	d007      	beq.n	8024dfe <_vfiprintf_r+0x39a>
 8024dee:	9a03      	ldr	r2, [sp, #12]
 8024df0:	682b      	ldr	r3, [r5, #0]
 8024df2:	9903      	ldr	r1, [sp, #12]
 8024df4:	17d2      	asrs	r2, r2, #31
 8024df6:	e9c3 1200 	strd	r1, r2, [r3]
 8024dfa:	3504      	adds	r5, #4
 8024dfc:	e693      	b.n	8024b26 <_vfiprintf_r+0xc2>
 8024dfe:	f01a 0f10 	tst.w	sl, #16
 8024e02:	d003      	beq.n	8024e0c <_vfiprintf_r+0x3a8>
 8024e04:	682b      	ldr	r3, [r5, #0]
 8024e06:	9a03      	ldr	r2, [sp, #12]
 8024e08:	601a      	str	r2, [r3, #0]
 8024e0a:	e7f6      	b.n	8024dfa <_vfiprintf_r+0x396>
 8024e0c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8024e10:	d003      	beq.n	8024e1a <_vfiprintf_r+0x3b6>
 8024e12:	682b      	ldr	r3, [r5, #0]
 8024e14:	9a03      	ldr	r2, [sp, #12]
 8024e16:	801a      	strh	r2, [r3, #0]
 8024e18:	e7ef      	b.n	8024dfa <_vfiprintf_r+0x396>
 8024e1a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8024e1e:	d0f1      	beq.n	8024e04 <_vfiprintf_r+0x3a0>
 8024e20:	682b      	ldr	r3, [r5, #0]
 8024e22:	9a03      	ldr	r2, [sp, #12]
 8024e24:	701a      	strb	r2, [r3, #0]
 8024e26:	e7e8      	b.n	8024dfa <_vfiprintf_r+0x396>
 8024e28:	f04a 0a10 	orr.w	sl, sl, #16
 8024e2c:	f01a 0320 	ands.w	r3, sl, #32
 8024e30:	d01f      	beq.n	8024e72 <_vfiprintf_r+0x40e>
 8024e32:	3507      	adds	r5, #7
 8024e34:	f025 0507 	bic.w	r5, r5, #7
 8024e38:	46a8      	mov	r8, r5
 8024e3a:	686d      	ldr	r5, [r5, #4]
 8024e3c:	f858 4b08 	ldr.w	r4, [r8], #8
 8024e40:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8024e44:	2300      	movs	r3, #0
 8024e46:	2200      	movs	r2, #0
 8024e48:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8024e4c:	9a01      	ldr	r2, [sp, #4]
 8024e4e:	3201      	adds	r2, #1
 8024e50:	f000 825f 	beq.w	8025312 <_vfiprintf_r+0x8ae>
 8024e54:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8024e58:	9204      	str	r2, [sp, #16]
 8024e5a:	ea54 0205 	orrs.w	r2, r4, r5
 8024e5e:	f040 825e 	bne.w	802531e <_vfiprintf_r+0x8ba>
 8024e62:	9a01      	ldr	r2, [sp, #4]
 8024e64:	2a00      	cmp	r2, #0
 8024e66:	f000 8198 	beq.w	802519a <_vfiprintf_r+0x736>
 8024e6a:	2b01      	cmp	r3, #1
 8024e6c:	f040 825a 	bne.w	8025324 <_vfiprintf_r+0x8c0>
 8024e70:	e13b      	b.n	80250ea <_vfiprintf_r+0x686>
 8024e72:	46a8      	mov	r8, r5
 8024e74:	f01a 0510 	ands.w	r5, sl, #16
 8024e78:	f858 4b04 	ldr.w	r4, [r8], #4
 8024e7c:	d001      	beq.n	8024e82 <_vfiprintf_r+0x41e>
 8024e7e:	461d      	mov	r5, r3
 8024e80:	e7de      	b.n	8024e40 <_vfiprintf_r+0x3dc>
 8024e82:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8024e86:	d001      	beq.n	8024e8c <_vfiprintf_r+0x428>
 8024e88:	b2a4      	uxth	r4, r4
 8024e8a:	e7d9      	b.n	8024e40 <_vfiprintf_r+0x3dc>
 8024e8c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8024e90:	d0d6      	beq.n	8024e40 <_vfiprintf_r+0x3dc>
 8024e92:	b2e4      	uxtb	r4, r4
 8024e94:	e7f3      	b.n	8024e7e <_vfiprintf_r+0x41a>
 8024e96:	46a8      	mov	r8, r5
 8024e98:	f647 0330 	movw	r3, #30768	@ 0x7830
 8024e9c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8024ea0:	f858 4b04 	ldr.w	r4, [r8], #4
 8024ea4:	4b03      	ldr	r3, [pc, #12]	@ (8024eb4 <_vfiprintf_r+0x450>)
 8024ea6:	9305      	str	r3, [sp, #20]
 8024ea8:	2500      	movs	r5, #0
 8024eaa:	f04a 0a02 	orr.w	sl, sl, #2
 8024eae:	2302      	movs	r3, #2
 8024eb0:	e7c9      	b.n	8024e46 <_vfiprintf_r+0x3e2>
 8024eb2:	bf00      	nop
 8024eb4:	08034048 	.word	0x08034048
 8024eb8:	9b01      	ldr	r3, [sp, #4]
 8024eba:	46a8      	mov	r8, r5
 8024ebc:	1c5c      	adds	r4, r3, #1
 8024ebe:	f04f 0500 	mov.w	r5, #0
 8024ec2:	f858 9b04 	ldr.w	r9, [r8], #4
 8024ec6:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8024eca:	f000 80d0 	beq.w	802506e <_vfiprintf_r+0x60a>
 8024ece:	461a      	mov	r2, r3
 8024ed0:	4629      	mov	r1, r5
 8024ed2:	4648      	mov	r0, r9
 8024ed4:	f7db f994 	bl	8000200 <memchr>
 8024ed8:	4604      	mov	r4, r0
 8024eda:	b118      	cbz	r0, 8024ee4 <_vfiprintf_r+0x480>
 8024edc:	eba0 0309 	sub.w	r3, r0, r9
 8024ee0:	9301      	str	r3, [sp, #4]
 8024ee2:	462c      	mov	r4, r5
 8024ee4:	9b01      	ldr	r3, [sp, #4]
 8024ee6:	42a3      	cmp	r3, r4
 8024ee8:	bfb8      	it	lt
 8024eea:	4623      	movlt	r3, r4
 8024eec:	9304      	str	r3, [sp, #16]
 8024eee:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8024ef2:	b113      	cbz	r3, 8024efa <_vfiprintf_r+0x496>
 8024ef4:	9b04      	ldr	r3, [sp, #16]
 8024ef6:	3301      	adds	r3, #1
 8024ef8:	9304      	str	r3, [sp, #16]
 8024efa:	f01a 0302 	ands.w	r3, sl, #2
 8024efe:	9308      	str	r3, [sp, #32]
 8024f00:	bf1e      	ittt	ne
 8024f02:	9b04      	ldrne	r3, [sp, #16]
 8024f04:	3302      	addne	r3, #2
 8024f06:	9304      	strne	r3, [sp, #16]
 8024f08:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8024f0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8024f0e:	d11f      	bne.n	8024f50 <_vfiprintf_r+0x4ec>
 8024f10:	9b02      	ldr	r3, [sp, #8]
 8024f12:	9a04      	ldr	r2, [sp, #16]
 8024f14:	1a9d      	subs	r5, r3, r2
 8024f16:	2d00      	cmp	r5, #0
 8024f18:	dd1a      	ble.n	8024f50 <_vfiprintf_r+0x4ec>
 8024f1a:	4ba9      	ldr	r3, [pc, #676]	@ (80251c0 <_vfiprintf_r+0x75c>)
 8024f1c:	6033      	str	r3, [r6, #0]
 8024f1e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8024f22:	2d10      	cmp	r5, #16
 8024f24:	f102 0201 	add.w	r2, r2, #1
 8024f28:	f106 0008 	add.w	r0, r6, #8
 8024f2c:	f300 814e 	bgt.w	80251cc <_vfiprintf_r+0x768>
 8024f30:	6075      	str	r5, [r6, #4]
 8024f32:	2a07      	cmp	r2, #7
 8024f34:	4465      	add	r5, ip
 8024f36:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8024f3a:	f340 815a 	ble.w	80251f2 <_vfiprintf_r+0x78e>
 8024f3e:	9800      	ldr	r0, [sp, #0]
 8024f40:	aa0e      	add	r2, sp, #56	@ 0x38
 8024f42:	4639      	mov	r1, r7
 8024f44:	f7ff fd5c 	bl	8024a00 <__sprint_r>
 8024f48:	2800      	cmp	r0, #0
 8024f4a:	f040 81b4 	bne.w	80252b6 <_vfiprintf_r+0x852>
 8024f4e:	ae11      	add	r6, sp, #68	@ 0x44
 8024f50:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8024f54:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8024f58:	b161      	cbz	r1, 8024f74 <_vfiprintf_r+0x510>
 8024f5a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8024f5e:	3301      	adds	r3, #1
 8024f60:	6031      	str	r1, [r6, #0]
 8024f62:	2101      	movs	r1, #1
 8024f64:	440a      	add	r2, r1
 8024f66:	2b07      	cmp	r3, #7
 8024f68:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8024f6c:	6071      	str	r1, [r6, #4]
 8024f6e:	f300 8142 	bgt.w	80251f6 <_vfiprintf_r+0x792>
 8024f72:	3608      	adds	r6, #8
 8024f74:	9908      	ldr	r1, [sp, #32]
 8024f76:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8024f7a:	b159      	cbz	r1, 8024f94 <_vfiprintf_r+0x530>
 8024f7c:	a90d      	add	r1, sp, #52	@ 0x34
 8024f7e:	3301      	adds	r3, #1
 8024f80:	6031      	str	r1, [r6, #0]
 8024f82:	2102      	movs	r1, #2
 8024f84:	440a      	add	r2, r1
 8024f86:	2b07      	cmp	r3, #7
 8024f88:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8024f8c:	6071      	str	r1, [r6, #4]
 8024f8e:	f300 813b 	bgt.w	8025208 <_vfiprintf_r+0x7a4>
 8024f92:	3608      	adds	r6, #8
 8024f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024f96:	2b80      	cmp	r3, #128	@ 0x80
 8024f98:	d11f      	bne.n	8024fda <_vfiprintf_r+0x576>
 8024f9a:	9b02      	ldr	r3, [sp, #8]
 8024f9c:	9a04      	ldr	r2, [sp, #16]
 8024f9e:	1a9d      	subs	r5, r3, r2
 8024fa0:	2d00      	cmp	r5, #0
 8024fa2:	dd1a      	ble.n	8024fda <_vfiprintf_r+0x576>
 8024fa4:	4b87      	ldr	r3, [pc, #540]	@ (80251c4 <_vfiprintf_r+0x760>)
 8024fa6:	6033      	str	r3, [r6, #0]
 8024fa8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8024fac:	2d10      	cmp	r5, #16
 8024fae:	f102 0201 	add.w	r2, r2, #1
 8024fb2:	f106 0008 	add.w	r0, r6, #8
 8024fb6:	f300 8130 	bgt.w	802521a <_vfiprintf_r+0x7b6>
 8024fba:	6075      	str	r5, [r6, #4]
 8024fbc:	2a07      	cmp	r2, #7
 8024fbe:	4465      	add	r5, ip
 8024fc0:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8024fc4:	f340 813c 	ble.w	8025240 <_vfiprintf_r+0x7dc>
 8024fc8:	9800      	ldr	r0, [sp, #0]
 8024fca:	aa0e      	add	r2, sp, #56	@ 0x38
 8024fcc:	4639      	mov	r1, r7
 8024fce:	f7ff fd17 	bl	8024a00 <__sprint_r>
 8024fd2:	2800      	cmp	r0, #0
 8024fd4:	f040 816f 	bne.w	80252b6 <_vfiprintf_r+0x852>
 8024fd8:	ae11      	add	r6, sp, #68	@ 0x44
 8024fda:	9b01      	ldr	r3, [sp, #4]
 8024fdc:	1ae4      	subs	r4, r4, r3
 8024fde:	2c00      	cmp	r4, #0
 8024fe0:	dd1a      	ble.n	8025018 <_vfiprintf_r+0x5b4>
 8024fe2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8024fe6:	4877      	ldr	r0, [pc, #476]	@ (80251c4 <_vfiprintf_r+0x760>)
 8024fe8:	6030      	str	r0, [r6, #0]
 8024fea:	2c10      	cmp	r4, #16
 8024fec:	f103 0301 	add.w	r3, r3, #1
 8024ff0:	f106 0108 	add.w	r1, r6, #8
 8024ff4:	f300 8126 	bgt.w	8025244 <_vfiprintf_r+0x7e0>
 8024ff8:	6074      	str	r4, [r6, #4]
 8024ffa:	2b07      	cmp	r3, #7
 8024ffc:	4414      	add	r4, r2
 8024ffe:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8025002:	f340 8130 	ble.w	8025266 <_vfiprintf_r+0x802>
 8025006:	9800      	ldr	r0, [sp, #0]
 8025008:	aa0e      	add	r2, sp, #56	@ 0x38
 802500a:	4639      	mov	r1, r7
 802500c:	f7ff fcf8 	bl	8024a00 <__sprint_r>
 8025010:	2800      	cmp	r0, #0
 8025012:	f040 8150 	bne.w	80252b6 <_vfiprintf_r+0x852>
 8025016:	ae11      	add	r6, sp, #68	@ 0x44
 8025018:	9b01      	ldr	r3, [sp, #4]
 802501a:	9a01      	ldr	r2, [sp, #4]
 802501c:	6073      	str	r3, [r6, #4]
 802501e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025020:	f8c6 9000 	str.w	r9, [r6]
 8025024:	4413      	add	r3, r2
 8025026:	9310      	str	r3, [sp, #64]	@ 0x40
 8025028:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802502a:	3301      	adds	r3, #1
 802502c:	2b07      	cmp	r3, #7
 802502e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025030:	f300 811b 	bgt.w	802526a <_vfiprintf_r+0x806>
 8025034:	f106 0308 	add.w	r3, r6, #8
 8025038:	f01a 0f04 	tst.w	sl, #4
 802503c:	f040 811d 	bne.w	802527a <_vfiprintf_r+0x816>
 8025040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025044:	9904      	ldr	r1, [sp, #16]
 8025046:	428a      	cmp	r2, r1
 8025048:	bfac      	ite	ge
 802504a:	189b      	addge	r3, r3, r2
 802504c:	185b      	addlt	r3, r3, r1
 802504e:	9303      	str	r3, [sp, #12]
 8025050:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025052:	b13b      	cbz	r3, 8025064 <_vfiprintf_r+0x600>
 8025054:	9800      	ldr	r0, [sp, #0]
 8025056:	aa0e      	add	r2, sp, #56	@ 0x38
 8025058:	4639      	mov	r1, r7
 802505a:	f7ff fcd1 	bl	8024a00 <__sprint_r>
 802505e:	2800      	cmp	r0, #0
 8025060:	f040 8129 	bne.w	80252b6 <_vfiprintf_r+0x852>
 8025064:	2300      	movs	r3, #0
 8025066:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025068:	4645      	mov	r5, r8
 802506a:	ae11      	add	r6, sp, #68	@ 0x44
 802506c:	e55b      	b.n	8024b26 <_vfiprintf_r+0xc2>
 802506e:	4648      	mov	r0, r9
 8025070:	f7db f916 	bl	80002a0 <strlen>
 8025074:	9001      	str	r0, [sp, #4]
 8025076:	e734      	b.n	8024ee2 <_vfiprintf_r+0x47e>
 8025078:	f04a 0a10 	orr.w	sl, sl, #16
 802507c:	f01a 0320 	ands.w	r3, sl, #32
 8025080:	d008      	beq.n	8025094 <_vfiprintf_r+0x630>
 8025082:	3507      	adds	r5, #7
 8025084:	f025 0507 	bic.w	r5, r5, #7
 8025088:	46a8      	mov	r8, r5
 802508a:	686d      	ldr	r5, [r5, #4]
 802508c:	f858 4b08 	ldr.w	r4, [r8], #8
 8025090:	2301      	movs	r3, #1
 8025092:	e6d8      	b.n	8024e46 <_vfiprintf_r+0x3e2>
 8025094:	46a8      	mov	r8, r5
 8025096:	f01a 0510 	ands.w	r5, sl, #16
 802509a:	f858 4b04 	ldr.w	r4, [r8], #4
 802509e:	d001      	beq.n	80250a4 <_vfiprintf_r+0x640>
 80250a0:	461d      	mov	r5, r3
 80250a2:	e7f5      	b.n	8025090 <_vfiprintf_r+0x62c>
 80250a4:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80250a8:	d001      	beq.n	80250ae <_vfiprintf_r+0x64a>
 80250aa:	b2a4      	uxth	r4, r4
 80250ac:	e7f0      	b.n	8025090 <_vfiprintf_r+0x62c>
 80250ae:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80250b2:	d0ed      	beq.n	8025090 <_vfiprintf_r+0x62c>
 80250b4:	b2e4      	uxtb	r4, r4
 80250b6:	e7f3      	b.n	80250a0 <_vfiprintf_r+0x63c>
 80250b8:	4a43      	ldr	r2, [pc, #268]	@ (80251c8 <_vfiprintf_r+0x764>)
 80250ba:	e5c9      	b.n	8024c50 <_vfiprintf_r+0x1ec>
 80250bc:	46a8      	mov	r8, r5
 80250be:	f01a 0510 	ands.w	r5, sl, #16
 80250c2:	f858 4b04 	ldr.w	r4, [r8], #4
 80250c6:	d001      	beq.n	80250cc <_vfiprintf_r+0x668>
 80250c8:	4615      	mov	r5, r2
 80250ca:	e5cd      	b.n	8024c68 <_vfiprintf_r+0x204>
 80250cc:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 80250d0:	d001      	beq.n	80250d6 <_vfiprintf_r+0x672>
 80250d2:	b2a4      	uxth	r4, r4
 80250d4:	e5c8      	b.n	8024c68 <_vfiprintf_r+0x204>
 80250d6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80250da:	f43f adc5 	beq.w	8024c68 <_vfiprintf_r+0x204>
 80250de:	b2e4      	uxtb	r4, r4
 80250e0:	e7f2      	b.n	80250c8 <_vfiprintf_r+0x664>
 80250e2:	2c0a      	cmp	r4, #10
 80250e4:	f175 0300 	sbcs.w	r3, r5, #0
 80250e8:	d206      	bcs.n	80250f8 <_vfiprintf_r+0x694>
 80250ea:	3430      	adds	r4, #48	@ 0x30
 80250ec:	b2e4      	uxtb	r4, r4
 80250ee:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 80250f2:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 80250f6:	e131      	b.n	802535c <_vfiprintf_r+0x8f8>
 80250f8:	ab3a      	add	r3, sp, #232	@ 0xe8
 80250fa:	9308      	str	r3, [sp, #32]
 80250fc:	9b04      	ldr	r3, [sp, #16]
 80250fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8025102:	f04f 0a00 	mov.w	sl, #0
 8025106:	930a      	str	r3, [sp, #40]	@ 0x28
 8025108:	220a      	movs	r2, #10
 802510a:	2300      	movs	r3, #0
 802510c:	4620      	mov	r0, r4
 802510e:	4629      	mov	r1, r5
 8025110:	f7db fe22 	bl	8000d58 <__aeabi_uldivmod>
 8025114:	460b      	mov	r3, r1
 8025116:	9908      	ldr	r1, [sp, #32]
 8025118:	900b      	str	r0, [sp, #44]	@ 0x2c
 802511a:	3230      	adds	r2, #48	@ 0x30
 802511c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8025120:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025122:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8025126:	f10a 0a01 	add.w	sl, sl, #1
 802512a:	b1e2      	cbz	r2, 8025166 <_vfiprintf_r+0x702>
 802512c:	9a06      	ldr	r2, [sp, #24]
 802512e:	7812      	ldrb	r2, [r2, #0]
 8025130:	4552      	cmp	r2, sl
 8025132:	d118      	bne.n	8025166 <_vfiprintf_r+0x702>
 8025134:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8025138:	d015      	beq.n	8025166 <_vfiprintf_r+0x702>
 802513a:	2c0a      	cmp	r4, #10
 802513c:	f175 0200 	sbcs.w	r2, r5, #0
 8025140:	d311      	bcc.n	8025166 <_vfiprintf_r+0x702>
 8025142:	9308      	str	r3, [sp, #32]
 8025144:	9b07      	ldr	r3, [sp, #28]
 8025146:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025148:	eba9 0903 	sub.w	r9, r9, r3
 802514c:	461a      	mov	r2, r3
 802514e:	4648      	mov	r0, r9
 8025150:	f000 ff49 	bl	8025fe6 <strncpy>
 8025154:	9b06      	ldr	r3, [sp, #24]
 8025156:	785a      	ldrb	r2, [r3, #1]
 8025158:	9b08      	ldr	r3, [sp, #32]
 802515a:	b172      	cbz	r2, 802517a <_vfiprintf_r+0x716>
 802515c:	9a06      	ldr	r2, [sp, #24]
 802515e:	3201      	adds	r2, #1
 8025160:	9206      	str	r2, [sp, #24]
 8025162:	f04f 0a00 	mov.w	sl, #0
 8025166:	2c0a      	cmp	r4, #10
 8025168:	f175 0500 	sbcs.w	r5, r5, #0
 802516c:	f0c0 80f6 	bcc.w	802535c <_vfiprintf_r+0x8f8>
 8025170:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025172:	f8cd 9020 	str.w	r9, [sp, #32]
 8025176:	461d      	mov	r5, r3
 8025178:	e7c6      	b.n	8025108 <_vfiprintf_r+0x6a4>
 802517a:	4692      	mov	sl, r2
 802517c:	e7f3      	b.n	8025166 <_vfiprintf_r+0x702>
 802517e:	f004 030f 	and.w	r3, r4, #15
 8025182:	9a05      	ldr	r2, [sp, #20]
 8025184:	0924      	lsrs	r4, r4, #4
 8025186:	5cd3      	ldrb	r3, [r2, r3]
 8025188:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802518c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8025190:	092d      	lsrs	r5, r5, #4
 8025192:	ea54 0305 	orrs.w	r3, r4, r5
 8025196:	d1f2      	bne.n	802517e <_vfiprintf_r+0x71a>
 8025198:	e0e0      	b.n	802535c <_vfiprintf_r+0x8f8>
 802519a:	b923      	cbnz	r3, 80251a6 <_vfiprintf_r+0x742>
 802519c:	f01a 0f01 	tst.w	sl, #1
 80251a0:	d001      	beq.n	80251a6 <_vfiprintf_r+0x742>
 80251a2:	2430      	movs	r4, #48	@ 0x30
 80251a4:	e7a3      	b.n	80250ee <_vfiprintf_r+0x68a>
 80251a6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80251aa:	e0d7      	b.n	802535c <_vfiprintf_r+0x8f8>
 80251ac:	2b00      	cmp	r3, #0
 80251ae:	f000 80a3 	beq.w	80252f8 <_vfiprintf_r+0x894>
 80251b2:	2400      	movs	r4, #0
 80251b4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80251b8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80251bc:	46a8      	mov	r8, r5
 80251be:	e5e0      	b.n	8024d82 <_vfiprintf_r+0x31e>
 80251c0:	0803409c 	.word	0x0803409c
 80251c4:	0803408c 	.word	0x0803408c
 80251c8:	08034059 	.word	0x08034059
 80251cc:	2110      	movs	r1, #16
 80251ce:	6071      	str	r1, [r6, #4]
 80251d0:	2a07      	cmp	r2, #7
 80251d2:	4461      	add	r1, ip
 80251d4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80251d8:	dd08      	ble.n	80251ec <_vfiprintf_r+0x788>
 80251da:	9800      	ldr	r0, [sp, #0]
 80251dc:	aa0e      	add	r2, sp, #56	@ 0x38
 80251de:	4639      	mov	r1, r7
 80251e0:	f7ff fc0e 	bl	8024a00 <__sprint_r>
 80251e4:	2800      	cmp	r0, #0
 80251e6:	d166      	bne.n	80252b6 <_vfiprintf_r+0x852>
 80251e8:	4b60      	ldr	r3, [pc, #384]	@ (802536c <_vfiprintf_r+0x908>)
 80251ea:	a811      	add	r0, sp, #68	@ 0x44
 80251ec:	3d10      	subs	r5, #16
 80251ee:	4606      	mov	r6, r0
 80251f0:	e694      	b.n	8024f1c <_vfiprintf_r+0x4b8>
 80251f2:	4606      	mov	r6, r0
 80251f4:	e6ac      	b.n	8024f50 <_vfiprintf_r+0x4ec>
 80251f6:	9800      	ldr	r0, [sp, #0]
 80251f8:	aa0e      	add	r2, sp, #56	@ 0x38
 80251fa:	4639      	mov	r1, r7
 80251fc:	f7ff fc00 	bl	8024a00 <__sprint_r>
 8025200:	2800      	cmp	r0, #0
 8025202:	d158      	bne.n	80252b6 <_vfiprintf_r+0x852>
 8025204:	ae11      	add	r6, sp, #68	@ 0x44
 8025206:	e6b5      	b.n	8024f74 <_vfiprintf_r+0x510>
 8025208:	9800      	ldr	r0, [sp, #0]
 802520a:	aa0e      	add	r2, sp, #56	@ 0x38
 802520c:	4639      	mov	r1, r7
 802520e:	f7ff fbf7 	bl	8024a00 <__sprint_r>
 8025212:	2800      	cmp	r0, #0
 8025214:	d14f      	bne.n	80252b6 <_vfiprintf_r+0x852>
 8025216:	ae11      	add	r6, sp, #68	@ 0x44
 8025218:	e6bc      	b.n	8024f94 <_vfiprintf_r+0x530>
 802521a:	2110      	movs	r1, #16
 802521c:	6071      	str	r1, [r6, #4]
 802521e:	2a07      	cmp	r2, #7
 8025220:	4461      	add	r1, ip
 8025222:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8025226:	dd08      	ble.n	802523a <_vfiprintf_r+0x7d6>
 8025228:	9800      	ldr	r0, [sp, #0]
 802522a:	aa0e      	add	r2, sp, #56	@ 0x38
 802522c:	4639      	mov	r1, r7
 802522e:	f7ff fbe7 	bl	8024a00 <__sprint_r>
 8025232:	2800      	cmp	r0, #0
 8025234:	d13f      	bne.n	80252b6 <_vfiprintf_r+0x852>
 8025236:	4b4e      	ldr	r3, [pc, #312]	@ (8025370 <_vfiprintf_r+0x90c>)
 8025238:	a811      	add	r0, sp, #68	@ 0x44
 802523a:	3d10      	subs	r5, #16
 802523c:	4606      	mov	r6, r0
 802523e:	e6b2      	b.n	8024fa6 <_vfiprintf_r+0x542>
 8025240:	4606      	mov	r6, r0
 8025242:	e6ca      	b.n	8024fda <_vfiprintf_r+0x576>
 8025244:	2010      	movs	r0, #16
 8025246:	4402      	add	r2, r0
 8025248:	2b07      	cmp	r3, #7
 802524a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802524e:	6070      	str	r0, [r6, #4]
 8025250:	dd06      	ble.n	8025260 <_vfiprintf_r+0x7fc>
 8025252:	9800      	ldr	r0, [sp, #0]
 8025254:	aa0e      	add	r2, sp, #56	@ 0x38
 8025256:	4639      	mov	r1, r7
 8025258:	f7ff fbd2 	bl	8024a00 <__sprint_r>
 802525c:	bb58      	cbnz	r0, 80252b6 <_vfiprintf_r+0x852>
 802525e:	a911      	add	r1, sp, #68	@ 0x44
 8025260:	3c10      	subs	r4, #16
 8025262:	460e      	mov	r6, r1
 8025264:	e6bd      	b.n	8024fe2 <_vfiprintf_r+0x57e>
 8025266:	460e      	mov	r6, r1
 8025268:	e6d6      	b.n	8025018 <_vfiprintf_r+0x5b4>
 802526a:	9800      	ldr	r0, [sp, #0]
 802526c:	aa0e      	add	r2, sp, #56	@ 0x38
 802526e:	4639      	mov	r1, r7
 8025270:	f7ff fbc6 	bl	8024a00 <__sprint_r>
 8025274:	b9f8      	cbnz	r0, 80252b6 <_vfiprintf_r+0x852>
 8025276:	ab11      	add	r3, sp, #68	@ 0x44
 8025278:	e6de      	b.n	8025038 <_vfiprintf_r+0x5d4>
 802527a:	9a02      	ldr	r2, [sp, #8]
 802527c:	9904      	ldr	r1, [sp, #16]
 802527e:	1a54      	subs	r4, r2, r1
 8025280:	2c00      	cmp	r4, #0
 8025282:	f77f aedd 	ble.w	8025040 <_vfiprintf_r+0x5dc>
 8025286:	4d39      	ldr	r5, [pc, #228]	@ (802536c <_vfiprintf_r+0x908>)
 8025288:	2610      	movs	r6, #16
 802528a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802528e:	2c10      	cmp	r4, #16
 8025290:	f102 0201 	add.w	r2, r2, #1
 8025294:	601d      	str	r5, [r3, #0]
 8025296:	dc1d      	bgt.n	80252d4 <_vfiprintf_r+0x870>
 8025298:	605c      	str	r4, [r3, #4]
 802529a:	2a07      	cmp	r2, #7
 802529c:	440c      	add	r4, r1
 802529e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80252a2:	f77f aecd 	ble.w	8025040 <_vfiprintf_r+0x5dc>
 80252a6:	9800      	ldr	r0, [sp, #0]
 80252a8:	aa0e      	add	r2, sp, #56	@ 0x38
 80252aa:	4639      	mov	r1, r7
 80252ac:	f7ff fba8 	bl	8024a00 <__sprint_r>
 80252b0:	2800      	cmp	r0, #0
 80252b2:	f43f aec5 	beq.w	8025040 <_vfiprintf_r+0x5dc>
 80252b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80252b8:	07d9      	lsls	r1, r3, #31
 80252ba:	d405      	bmi.n	80252c8 <_vfiprintf_r+0x864>
 80252bc:	89bb      	ldrh	r3, [r7, #12]
 80252be:	059a      	lsls	r2, r3, #22
 80252c0:	d402      	bmi.n	80252c8 <_vfiprintf_r+0x864>
 80252c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80252c4:	f002 f89f 	bl	8027406 <__retarget_lock_release_recursive>
 80252c8:	89bb      	ldrh	r3, [r7, #12]
 80252ca:	065b      	lsls	r3, r3, #25
 80252cc:	f57f abfb 	bpl.w	8024ac6 <_vfiprintf_r+0x62>
 80252d0:	f7ff bbf6 	b.w	8024ac0 <_vfiprintf_r+0x5c>
 80252d4:	3110      	adds	r1, #16
 80252d6:	2a07      	cmp	r2, #7
 80252d8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80252dc:	605e      	str	r6, [r3, #4]
 80252de:	dc02      	bgt.n	80252e6 <_vfiprintf_r+0x882>
 80252e0:	3308      	adds	r3, #8
 80252e2:	3c10      	subs	r4, #16
 80252e4:	e7d1      	b.n	802528a <_vfiprintf_r+0x826>
 80252e6:	9800      	ldr	r0, [sp, #0]
 80252e8:	aa0e      	add	r2, sp, #56	@ 0x38
 80252ea:	4639      	mov	r1, r7
 80252ec:	f7ff fb88 	bl	8024a00 <__sprint_r>
 80252f0:	2800      	cmp	r0, #0
 80252f2:	d1e0      	bne.n	80252b6 <_vfiprintf_r+0x852>
 80252f4:	ab11      	add	r3, sp, #68	@ 0x44
 80252f6:	e7f4      	b.n	80252e2 <_vfiprintf_r+0x87e>
 80252f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80252fa:	b913      	cbnz	r3, 8025302 <_vfiprintf_r+0x89e>
 80252fc:	2300      	movs	r3, #0
 80252fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025300:	e7d9      	b.n	80252b6 <_vfiprintf_r+0x852>
 8025302:	9800      	ldr	r0, [sp, #0]
 8025304:	aa0e      	add	r2, sp, #56	@ 0x38
 8025306:	4639      	mov	r1, r7
 8025308:	f7ff fb7a 	bl	8024a00 <__sprint_r>
 802530c:	2800      	cmp	r0, #0
 802530e:	d0f5      	beq.n	80252fc <_vfiprintf_r+0x898>
 8025310:	e7d1      	b.n	80252b6 <_vfiprintf_r+0x852>
 8025312:	ea54 0205 	orrs.w	r2, r4, r5
 8025316:	f8cd a010 	str.w	sl, [sp, #16]
 802531a:	f43f ada6 	beq.w	8024e6a <_vfiprintf_r+0x406>
 802531e:	2b01      	cmp	r3, #1
 8025320:	f43f aedf 	beq.w	80250e2 <_vfiprintf_r+0x67e>
 8025324:	2b02      	cmp	r3, #2
 8025326:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802532a:	f43f af28 	beq.w	802517e <_vfiprintf_r+0x71a>
 802532e:	f004 0307 	and.w	r3, r4, #7
 8025332:	08e4      	lsrs	r4, r4, #3
 8025334:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8025338:	08ed      	lsrs	r5, r5, #3
 802533a:	3330      	adds	r3, #48	@ 0x30
 802533c:	ea54 0105 	orrs.w	r1, r4, r5
 8025340:	464a      	mov	r2, r9
 8025342:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8025346:	d1f2      	bne.n	802532e <_vfiprintf_r+0x8ca>
 8025348:	9904      	ldr	r1, [sp, #16]
 802534a:	07c8      	lsls	r0, r1, #31
 802534c:	d506      	bpl.n	802535c <_vfiprintf_r+0x8f8>
 802534e:	2b30      	cmp	r3, #48	@ 0x30
 8025350:	d004      	beq.n	802535c <_vfiprintf_r+0x8f8>
 8025352:	2330      	movs	r3, #48	@ 0x30
 8025354:	f809 3c01 	strb.w	r3, [r9, #-1]
 8025358:	f1a2 0902 	sub.w	r9, r2, #2
 802535c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802535e:	eba3 0309 	sub.w	r3, r3, r9
 8025362:	9c01      	ldr	r4, [sp, #4]
 8025364:	f8dd a010 	ldr.w	sl, [sp, #16]
 8025368:	9301      	str	r3, [sp, #4]
 802536a:	e5bb      	b.n	8024ee4 <_vfiprintf_r+0x480>
 802536c:	0803409c 	.word	0x0803409c
 8025370:	0803408c 	.word	0x0803408c

08025374 <__sbprintf>:
 8025374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025376:	461f      	mov	r7, r3
 8025378:	898b      	ldrh	r3, [r1, #12]
 802537a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802537e:	f023 0302 	bic.w	r3, r3, #2
 8025382:	f8ad 300c 	strh.w	r3, [sp, #12]
 8025386:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8025388:	9319      	str	r3, [sp, #100]	@ 0x64
 802538a:	89cb      	ldrh	r3, [r1, #14]
 802538c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025390:	69cb      	ldr	r3, [r1, #28]
 8025392:	9307      	str	r3, [sp, #28]
 8025394:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8025396:	9309      	str	r3, [sp, #36]	@ 0x24
 8025398:	ab1a      	add	r3, sp, #104	@ 0x68
 802539a:	9300      	str	r3, [sp, #0]
 802539c:	9304      	str	r3, [sp, #16]
 802539e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80253a2:	4615      	mov	r5, r2
 80253a4:	4606      	mov	r6, r0
 80253a6:	9302      	str	r3, [sp, #8]
 80253a8:	9305      	str	r3, [sp, #20]
 80253aa:	a816      	add	r0, sp, #88	@ 0x58
 80253ac:	2300      	movs	r3, #0
 80253ae:	460c      	mov	r4, r1
 80253b0:	9306      	str	r3, [sp, #24]
 80253b2:	f002 f823 	bl	80273fc <__retarget_lock_init_recursive>
 80253b6:	462a      	mov	r2, r5
 80253b8:	463b      	mov	r3, r7
 80253ba:	4669      	mov	r1, sp
 80253bc:	4630      	mov	r0, r6
 80253be:	f7ff fb51 	bl	8024a64 <_vfiprintf_r>
 80253c2:	1e05      	subs	r5, r0, #0
 80253c4:	db07      	blt.n	80253d6 <__sbprintf+0x62>
 80253c6:	4669      	mov	r1, sp
 80253c8:	4630      	mov	r0, r6
 80253ca:	f000 f9dd 	bl	8025788 <_fflush_r>
 80253ce:	2800      	cmp	r0, #0
 80253d0:	bf18      	it	ne
 80253d2:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 80253d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80253da:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80253dc:	065b      	lsls	r3, r3, #25
 80253de:	bf42      	ittt	mi
 80253e0:	89a3      	ldrhmi	r3, [r4, #12]
 80253e2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80253e6:	81a3      	strhmi	r3, [r4, #12]
 80253e8:	f002 f809 	bl	80273fe <__retarget_lock_close_recursive>
 80253ec:	4628      	mov	r0, r5
 80253ee:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80253f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080253f4 <putchar>:
 80253f4:	4b02      	ldr	r3, [pc, #8]	@ (8025400 <putchar+0xc>)
 80253f6:	4601      	mov	r1, r0
 80253f8:	6818      	ldr	r0, [r3, #0]
 80253fa:	6882      	ldr	r2, [r0, #8]
 80253fc:	f007 b8ac 	b.w	802c558 <_putc_r>
 8025400:	20000840 	.word	0x20000840

08025404 <__malloc_lock>:
 8025404:	4801      	ldr	r0, [pc, #4]	@ (802540c <__malloc_lock+0x8>)
 8025406:	f001 bffc 	b.w	8027402 <__retarget_lock_acquire_recursive>
 802540a:	bf00      	nop
 802540c:	200182fa 	.word	0x200182fa

08025410 <__malloc_unlock>:
 8025410:	4801      	ldr	r0, [pc, #4]	@ (8025418 <__malloc_unlock+0x8>)
 8025412:	f001 bff8 	b.w	8027406 <__retarget_lock_release_recursive>
 8025416:	bf00      	nop
 8025418:	200182fa 	.word	0x200182fa

0802541c <_puts_r>:
 802541c:	b530      	push	{r4, r5, lr}
 802541e:	4605      	mov	r5, r0
 8025420:	b089      	sub	sp, #36	@ 0x24
 8025422:	4608      	mov	r0, r1
 8025424:	460c      	mov	r4, r1
 8025426:	f7da ff3b 	bl	80002a0 <strlen>
 802542a:	4b1e      	ldr	r3, [pc, #120]	@ (80254a4 <_puts_r+0x88>)
 802542c:	9306      	str	r3, [sp, #24]
 802542e:	2301      	movs	r3, #1
 8025430:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8025434:	9307      	str	r3, [sp, #28]
 8025436:	4418      	add	r0, r3
 8025438:	ab04      	add	r3, sp, #16
 802543a:	9301      	str	r3, [sp, #4]
 802543c:	2302      	movs	r3, #2
 802543e:	9302      	str	r3, [sp, #8]
 8025440:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8025442:	68ac      	ldr	r4, [r5, #8]
 8025444:	9003      	str	r0, [sp, #12]
 8025446:	b913      	cbnz	r3, 802544e <_puts_r+0x32>
 8025448:	4628      	mov	r0, r5
 802544a:	f000 fadf 	bl	8025a0c <__sinit>
 802544e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025450:	07db      	lsls	r3, r3, #31
 8025452:	d405      	bmi.n	8025460 <_puts_r+0x44>
 8025454:	89a3      	ldrh	r3, [r4, #12]
 8025456:	0598      	lsls	r0, r3, #22
 8025458:	d402      	bmi.n	8025460 <_puts_r+0x44>
 802545a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802545c:	f001 ffd1 	bl	8027402 <__retarget_lock_acquire_recursive>
 8025460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025464:	0499      	lsls	r1, r3, #18
 8025466:	d406      	bmi.n	8025476 <_puts_r+0x5a>
 8025468:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802546c:	81a3      	strh	r3, [r4, #12]
 802546e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025470:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8025474:	6663      	str	r3, [r4, #100]	@ 0x64
 8025476:	4628      	mov	r0, r5
 8025478:	aa01      	add	r2, sp, #4
 802547a:	4621      	mov	r1, r4
 802547c:	f000 fb18 	bl	8025ab0 <__sfvwrite_r>
 8025480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025482:	2800      	cmp	r0, #0
 8025484:	bf0c      	ite	eq
 8025486:	250a      	moveq	r5, #10
 8025488:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802548c:	07da      	lsls	r2, r3, #31
 802548e:	d405      	bmi.n	802549c <_puts_r+0x80>
 8025490:	89a3      	ldrh	r3, [r4, #12]
 8025492:	059b      	lsls	r3, r3, #22
 8025494:	d402      	bmi.n	802549c <_puts_r+0x80>
 8025496:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025498:	f001 ffb5 	bl	8027406 <__retarget_lock_release_recursive>
 802549c:	4628      	mov	r0, r5
 802549e:	b009      	add	sp, #36	@ 0x24
 80254a0:	bd30      	pop	{r4, r5, pc}
 80254a2:	bf00      	nop
 80254a4:	08034036 	.word	0x08034036

080254a8 <puts>:
 80254a8:	4b02      	ldr	r3, [pc, #8]	@ (80254b4 <puts+0xc>)
 80254aa:	4601      	mov	r1, r0
 80254ac:	6818      	ldr	r0, [r3, #0]
 80254ae:	f7ff bfb5 	b.w	802541c <_puts_r>
 80254b2:	bf00      	nop
 80254b4:	20000840 	.word	0x20000840

080254b8 <srand>:
 80254b8:	4b03      	ldr	r3, [pc, #12]	@ (80254c8 <srand+0x10>)
 80254ba:	681b      	ldr	r3, [r3, #0]
 80254bc:	2200      	movs	r2, #0
 80254be:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 80254c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80254c6:	4770      	bx	lr
 80254c8:	20000840 	.word	0x20000840

080254cc <rand>:
 80254cc:	4b0a      	ldr	r3, [pc, #40]	@ (80254f8 <rand+0x2c>)
 80254ce:	480b      	ldr	r0, [pc, #44]	@ (80254fc <rand+0x30>)
 80254d0:	6819      	ldr	r1, [r3, #0]
 80254d2:	4a0b      	ldr	r2, [pc, #44]	@ (8025500 <rand+0x34>)
 80254d4:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 80254d8:	b510      	push	{r4, lr}
 80254da:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 80254de:	4358      	muls	r0, r3
 80254e0:	fb02 0004 	mla	r0, r2, r4, r0
 80254e4:	fba3 3202 	umull	r3, r2, r3, r2
 80254e8:	3301      	adds	r3, #1
 80254ea:	eb40 0002 	adc.w	r0, r0, r2
 80254ee:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 80254f2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80254f6:	bd10      	pop	{r4, pc}
 80254f8:	20000840 	.word	0x20000840
 80254fc:	5851f42d 	.word	0x5851f42d
 8025500:	4c957f2d 	.word	0x4c957f2d

08025504 <snprintf>:
 8025504:	b40c      	push	{r2, r3}
 8025506:	b530      	push	{r4, r5, lr}
 8025508:	4b17      	ldr	r3, [pc, #92]	@ (8025568 <snprintf+0x64>)
 802550a:	1e0c      	subs	r4, r1, #0
 802550c:	681d      	ldr	r5, [r3, #0]
 802550e:	b09d      	sub	sp, #116	@ 0x74
 8025510:	da08      	bge.n	8025524 <snprintf+0x20>
 8025512:	238b      	movs	r3, #139	@ 0x8b
 8025514:	602b      	str	r3, [r5, #0]
 8025516:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802551a:	b01d      	add	sp, #116	@ 0x74
 802551c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025520:	b002      	add	sp, #8
 8025522:	4770      	bx	lr
 8025524:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8025528:	f8ad 3014 	strh.w	r3, [sp, #20]
 802552c:	bf14      	ite	ne
 802552e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8025532:	4623      	moveq	r3, r4
 8025534:	9304      	str	r3, [sp, #16]
 8025536:	9307      	str	r3, [sp, #28]
 8025538:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802553c:	9002      	str	r0, [sp, #8]
 802553e:	9006      	str	r0, [sp, #24]
 8025540:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025544:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025546:	ab21      	add	r3, sp, #132	@ 0x84
 8025548:	a902      	add	r1, sp, #8
 802554a:	4628      	mov	r0, r5
 802554c:	9301      	str	r3, [sp, #4]
 802554e:	f004 fc4f 	bl	8029df0 <_svfprintf_r>
 8025552:	1c43      	adds	r3, r0, #1
 8025554:	bfbc      	itt	lt
 8025556:	238b      	movlt	r3, #139	@ 0x8b
 8025558:	602b      	strlt	r3, [r5, #0]
 802555a:	2c00      	cmp	r4, #0
 802555c:	d0dd      	beq.n	802551a <snprintf+0x16>
 802555e:	9b02      	ldr	r3, [sp, #8]
 8025560:	2200      	movs	r2, #0
 8025562:	701a      	strb	r2, [r3, #0]
 8025564:	e7d9      	b.n	802551a <snprintf+0x16>
 8025566:	bf00      	nop
 8025568:	20000840 	.word	0x20000840

0802556c <_strtol_l.constprop.0>:
 802556c:	2b24      	cmp	r3, #36	@ 0x24
 802556e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025572:	4686      	mov	lr, r0
 8025574:	4690      	mov	r8, r2
 8025576:	d801      	bhi.n	802557c <_strtol_l.constprop.0+0x10>
 8025578:	2b01      	cmp	r3, #1
 802557a:	d106      	bne.n	802558a <_strtol_l.constprop.0+0x1e>
 802557c:	f001 ff00 	bl	8027380 <__errno>
 8025580:	2316      	movs	r3, #22
 8025582:	6003      	str	r3, [r0, #0]
 8025584:	2000      	movs	r0, #0
 8025586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802558a:	4834      	ldr	r0, [pc, #208]	@ (802565c <_strtol_l.constprop.0+0xf0>)
 802558c:	460d      	mov	r5, r1
 802558e:	462a      	mov	r2, r5
 8025590:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025594:	5d06      	ldrb	r6, [r0, r4]
 8025596:	f016 0608 	ands.w	r6, r6, #8
 802559a:	d1f8      	bne.n	802558e <_strtol_l.constprop.0+0x22>
 802559c:	2c2d      	cmp	r4, #45	@ 0x2d
 802559e:	d12d      	bne.n	80255fc <_strtol_l.constprop.0+0x90>
 80255a0:	782c      	ldrb	r4, [r5, #0]
 80255a2:	2601      	movs	r6, #1
 80255a4:	1c95      	adds	r5, r2, #2
 80255a6:	f033 0210 	bics.w	r2, r3, #16
 80255aa:	d109      	bne.n	80255c0 <_strtol_l.constprop.0+0x54>
 80255ac:	2c30      	cmp	r4, #48	@ 0x30
 80255ae:	d12a      	bne.n	8025606 <_strtol_l.constprop.0+0x9a>
 80255b0:	782a      	ldrb	r2, [r5, #0]
 80255b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80255b6:	2a58      	cmp	r2, #88	@ 0x58
 80255b8:	d125      	bne.n	8025606 <_strtol_l.constprop.0+0x9a>
 80255ba:	786c      	ldrb	r4, [r5, #1]
 80255bc:	2310      	movs	r3, #16
 80255be:	3502      	adds	r5, #2
 80255c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80255c4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80255c8:	2200      	movs	r2, #0
 80255ca:	fbbc f9f3 	udiv	r9, ip, r3
 80255ce:	4610      	mov	r0, r2
 80255d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80255d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80255d8:	2f09      	cmp	r7, #9
 80255da:	d81b      	bhi.n	8025614 <_strtol_l.constprop.0+0xa8>
 80255dc:	463c      	mov	r4, r7
 80255de:	42a3      	cmp	r3, r4
 80255e0:	dd27      	ble.n	8025632 <_strtol_l.constprop.0+0xc6>
 80255e2:	1c57      	adds	r7, r2, #1
 80255e4:	d007      	beq.n	80255f6 <_strtol_l.constprop.0+0x8a>
 80255e6:	4581      	cmp	r9, r0
 80255e8:	d320      	bcc.n	802562c <_strtol_l.constprop.0+0xc0>
 80255ea:	d101      	bne.n	80255f0 <_strtol_l.constprop.0+0x84>
 80255ec:	45a2      	cmp	sl, r4
 80255ee:	db1d      	blt.n	802562c <_strtol_l.constprop.0+0xc0>
 80255f0:	fb00 4003 	mla	r0, r0, r3, r4
 80255f4:	2201      	movs	r2, #1
 80255f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80255fa:	e7eb      	b.n	80255d4 <_strtol_l.constprop.0+0x68>
 80255fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80255fe:	bf04      	itt	eq
 8025600:	782c      	ldrbeq	r4, [r5, #0]
 8025602:	1c95      	addeq	r5, r2, #2
 8025604:	e7cf      	b.n	80255a6 <_strtol_l.constprop.0+0x3a>
 8025606:	2b00      	cmp	r3, #0
 8025608:	d1da      	bne.n	80255c0 <_strtol_l.constprop.0+0x54>
 802560a:	2c30      	cmp	r4, #48	@ 0x30
 802560c:	bf0c      	ite	eq
 802560e:	2308      	moveq	r3, #8
 8025610:	230a      	movne	r3, #10
 8025612:	e7d5      	b.n	80255c0 <_strtol_l.constprop.0+0x54>
 8025614:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8025618:	2f19      	cmp	r7, #25
 802561a:	d801      	bhi.n	8025620 <_strtol_l.constprop.0+0xb4>
 802561c:	3c37      	subs	r4, #55	@ 0x37
 802561e:	e7de      	b.n	80255de <_strtol_l.constprop.0+0x72>
 8025620:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8025624:	2f19      	cmp	r7, #25
 8025626:	d804      	bhi.n	8025632 <_strtol_l.constprop.0+0xc6>
 8025628:	3c57      	subs	r4, #87	@ 0x57
 802562a:	e7d8      	b.n	80255de <_strtol_l.constprop.0+0x72>
 802562c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8025630:	e7e1      	b.n	80255f6 <_strtol_l.constprop.0+0x8a>
 8025632:	1c53      	adds	r3, r2, #1
 8025634:	d108      	bne.n	8025648 <_strtol_l.constprop.0+0xdc>
 8025636:	2322      	movs	r3, #34	@ 0x22
 8025638:	f8ce 3000 	str.w	r3, [lr]
 802563c:	4660      	mov	r0, ip
 802563e:	f1b8 0f00 	cmp.w	r8, #0
 8025642:	d0a0      	beq.n	8025586 <_strtol_l.constprop.0+0x1a>
 8025644:	1e69      	subs	r1, r5, #1
 8025646:	e006      	b.n	8025656 <_strtol_l.constprop.0+0xea>
 8025648:	b106      	cbz	r6, 802564c <_strtol_l.constprop.0+0xe0>
 802564a:	4240      	negs	r0, r0
 802564c:	f1b8 0f00 	cmp.w	r8, #0
 8025650:	d099      	beq.n	8025586 <_strtol_l.constprop.0+0x1a>
 8025652:	2a00      	cmp	r2, #0
 8025654:	d1f6      	bne.n	8025644 <_strtol_l.constprop.0+0xd8>
 8025656:	f8c8 1000 	str.w	r1, [r8]
 802565a:	e794      	b.n	8025586 <_strtol_l.constprop.0+0x1a>
 802565c:	080343f5 	.word	0x080343f5

08025660 <_strtol_r>:
 8025660:	f7ff bf84 	b.w	802556c <_strtol_l.constprop.0>

08025664 <strtol>:
 8025664:	4613      	mov	r3, r2
 8025666:	460a      	mov	r2, r1
 8025668:	4601      	mov	r1, r0
 802566a:	4802      	ldr	r0, [pc, #8]	@ (8025674 <strtol+0x10>)
 802566c:	6800      	ldr	r0, [r0, #0]
 802566e:	f7ff bf7d 	b.w	802556c <_strtol_l.constprop.0>
 8025672:	bf00      	nop
 8025674:	20000840 	.word	0x20000840

08025678 <__sflush_r>:
 8025678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802567c:	4605      	mov	r5, r0
 802567e:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8025682:	0706      	lsls	r6, r0, #28
 8025684:	460c      	mov	r4, r1
 8025686:	d457      	bmi.n	8025738 <__sflush_r+0xc0>
 8025688:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802568c:	818b      	strh	r3, [r1, #12]
 802568e:	684b      	ldr	r3, [r1, #4]
 8025690:	2b00      	cmp	r3, #0
 8025692:	dc02      	bgt.n	802569a <__sflush_r+0x22>
 8025694:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8025696:	2b00      	cmp	r3, #0
 8025698:	dd4c      	ble.n	8025734 <__sflush_r+0xbc>
 802569a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802569c:	2e00      	cmp	r6, #0
 802569e:	d049      	beq.n	8025734 <__sflush_r+0xbc>
 80256a0:	2300      	movs	r3, #0
 80256a2:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 80256a6:	682f      	ldr	r7, [r5, #0]
 80256a8:	69e1      	ldr	r1, [r4, #28]
 80256aa:	602b      	str	r3, [r5, #0]
 80256ac:	d034      	beq.n	8025718 <__sflush_r+0xa0>
 80256ae:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80256b0:	89a3      	ldrh	r3, [r4, #12]
 80256b2:	0759      	lsls	r1, r3, #29
 80256b4:	d505      	bpl.n	80256c2 <__sflush_r+0x4a>
 80256b6:	6863      	ldr	r3, [r4, #4]
 80256b8:	1ad2      	subs	r2, r2, r3
 80256ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80256bc:	b10b      	cbz	r3, 80256c2 <__sflush_r+0x4a>
 80256be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80256c0:	1ad2      	subs	r2, r2, r3
 80256c2:	2300      	movs	r3, #0
 80256c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80256c6:	69e1      	ldr	r1, [r4, #28]
 80256c8:	4628      	mov	r0, r5
 80256ca:	47b0      	blx	r6
 80256cc:	1c43      	adds	r3, r0, #1
 80256ce:	d106      	bne.n	80256de <__sflush_r+0x66>
 80256d0:	682a      	ldr	r2, [r5, #0]
 80256d2:	2a1d      	cmp	r2, #29
 80256d4:	d848      	bhi.n	8025768 <__sflush_r+0xf0>
 80256d6:	4b2b      	ldr	r3, [pc, #172]	@ (8025784 <__sflush_r+0x10c>)
 80256d8:	4113      	asrs	r3, r2
 80256da:	07de      	lsls	r6, r3, #31
 80256dc:	d444      	bmi.n	8025768 <__sflush_r+0xf0>
 80256de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256e2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80256e6:	81a2      	strh	r2, [r4, #12]
 80256e8:	2200      	movs	r2, #0
 80256ea:	6062      	str	r2, [r4, #4]
 80256ec:	04d9      	lsls	r1, r3, #19
 80256ee:	6922      	ldr	r2, [r4, #16]
 80256f0:	6022      	str	r2, [r4, #0]
 80256f2:	d504      	bpl.n	80256fe <__sflush_r+0x86>
 80256f4:	1c42      	adds	r2, r0, #1
 80256f6:	d101      	bne.n	80256fc <__sflush_r+0x84>
 80256f8:	682b      	ldr	r3, [r5, #0]
 80256fa:	b903      	cbnz	r3, 80256fe <__sflush_r+0x86>
 80256fc:	6520      	str	r0, [r4, #80]	@ 0x50
 80256fe:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8025700:	602f      	str	r7, [r5, #0]
 8025702:	b1b9      	cbz	r1, 8025734 <__sflush_r+0xbc>
 8025704:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8025708:	4299      	cmp	r1, r3
 802570a:	d002      	beq.n	8025712 <__sflush_r+0x9a>
 802570c:	4628      	mov	r0, r5
 802570e:	f002 fd7d 	bl	802820c <_free_r>
 8025712:	2300      	movs	r3, #0
 8025714:	6323      	str	r3, [r4, #48]	@ 0x30
 8025716:	e00d      	b.n	8025734 <__sflush_r+0xbc>
 8025718:	2301      	movs	r3, #1
 802571a:	4628      	mov	r0, r5
 802571c:	47b0      	blx	r6
 802571e:	4602      	mov	r2, r0
 8025720:	1c50      	adds	r0, r2, #1
 8025722:	d1c5      	bne.n	80256b0 <__sflush_r+0x38>
 8025724:	682b      	ldr	r3, [r5, #0]
 8025726:	2b00      	cmp	r3, #0
 8025728:	d0c2      	beq.n	80256b0 <__sflush_r+0x38>
 802572a:	2b1d      	cmp	r3, #29
 802572c:	d001      	beq.n	8025732 <__sflush_r+0xba>
 802572e:	2b16      	cmp	r3, #22
 8025730:	d11a      	bne.n	8025768 <__sflush_r+0xf0>
 8025732:	602f      	str	r7, [r5, #0]
 8025734:	2000      	movs	r0, #0
 8025736:	e01e      	b.n	8025776 <__sflush_r+0xfe>
 8025738:	690f      	ldr	r7, [r1, #16]
 802573a:	2f00      	cmp	r7, #0
 802573c:	d0fa      	beq.n	8025734 <__sflush_r+0xbc>
 802573e:	0783      	lsls	r3, r0, #30
 8025740:	680e      	ldr	r6, [r1, #0]
 8025742:	bf08      	it	eq
 8025744:	694b      	ldreq	r3, [r1, #20]
 8025746:	600f      	str	r7, [r1, #0]
 8025748:	bf18      	it	ne
 802574a:	2300      	movne	r3, #0
 802574c:	eba6 0807 	sub.w	r8, r6, r7
 8025750:	608b      	str	r3, [r1, #8]
 8025752:	f1b8 0f00 	cmp.w	r8, #0
 8025756:	dded      	ble.n	8025734 <__sflush_r+0xbc>
 8025758:	69e1      	ldr	r1, [r4, #28]
 802575a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802575c:	4643      	mov	r3, r8
 802575e:	463a      	mov	r2, r7
 8025760:	4628      	mov	r0, r5
 8025762:	47b0      	blx	r6
 8025764:	2800      	cmp	r0, #0
 8025766:	dc08      	bgt.n	802577a <__sflush_r+0x102>
 8025768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802576c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025770:	81a3      	strh	r3, [r4, #12]
 8025772:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802577a:	4407      	add	r7, r0
 802577c:	eba8 0800 	sub.w	r8, r8, r0
 8025780:	e7e7      	b.n	8025752 <__sflush_r+0xda>
 8025782:	bf00      	nop
 8025784:	dfbffffe 	.word	0xdfbffffe

08025788 <_fflush_r>:
 8025788:	b538      	push	{r3, r4, r5, lr}
 802578a:	460c      	mov	r4, r1
 802578c:	4605      	mov	r5, r0
 802578e:	b118      	cbz	r0, 8025798 <_fflush_r+0x10>
 8025790:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8025792:	b90b      	cbnz	r3, 8025798 <_fflush_r+0x10>
 8025794:	f000 f93a 	bl	8025a0c <__sinit>
 8025798:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802579c:	b1b8      	cbz	r0, 80257ce <_fflush_r+0x46>
 802579e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80257a0:	07db      	lsls	r3, r3, #31
 80257a2:	d404      	bmi.n	80257ae <_fflush_r+0x26>
 80257a4:	0581      	lsls	r1, r0, #22
 80257a6:	d402      	bmi.n	80257ae <_fflush_r+0x26>
 80257a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80257aa:	f001 fe2a 	bl	8027402 <__retarget_lock_acquire_recursive>
 80257ae:	4628      	mov	r0, r5
 80257b0:	4621      	mov	r1, r4
 80257b2:	f7ff ff61 	bl	8025678 <__sflush_r>
 80257b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80257b8:	07da      	lsls	r2, r3, #31
 80257ba:	4605      	mov	r5, r0
 80257bc:	d405      	bmi.n	80257ca <_fflush_r+0x42>
 80257be:	89a3      	ldrh	r3, [r4, #12]
 80257c0:	059b      	lsls	r3, r3, #22
 80257c2:	d402      	bmi.n	80257ca <_fflush_r+0x42>
 80257c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80257c6:	f001 fe1e 	bl	8027406 <__retarget_lock_release_recursive>
 80257ca:	4628      	mov	r0, r5
 80257cc:	bd38      	pop	{r3, r4, r5, pc}
 80257ce:	4605      	mov	r5, r0
 80257d0:	e7fb      	b.n	80257ca <_fflush_r+0x42>
	...

080257d4 <sprintf>:
 80257d4:	b40e      	push	{r1, r2, r3}
 80257d6:	b500      	push	{lr}
 80257d8:	b09c      	sub	sp, #112	@ 0x70
 80257da:	ab1d      	add	r3, sp, #116	@ 0x74
 80257dc:	9002      	str	r0, [sp, #8]
 80257de:	9006      	str	r0, [sp, #24]
 80257e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80257e4:	4809      	ldr	r0, [pc, #36]	@ (802580c <sprintf+0x38>)
 80257e6:	9107      	str	r1, [sp, #28]
 80257e8:	9104      	str	r1, [sp, #16]
 80257ea:	4909      	ldr	r1, [pc, #36]	@ (8025810 <sprintf+0x3c>)
 80257ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80257f0:	9105      	str	r1, [sp, #20]
 80257f2:	6800      	ldr	r0, [r0, #0]
 80257f4:	9301      	str	r3, [sp, #4]
 80257f6:	a902      	add	r1, sp, #8
 80257f8:	f004 fafa 	bl	8029df0 <_svfprintf_r>
 80257fc:	9b02      	ldr	r3, [sp, #8]
 80257fe:	2200      	movs	r2, #0
 8025800:	701a      	strb	r2, [r3, #0]
 8025802:	b01c      	add	sp, #112	@ 0x70
 8025804:	f85d eb04 	ldr.w	lr, [sp], #4
 8025808:	b003      	add	sp, #12
 802580a:	4770      	bx	lr
 802580c:	20000840 	.word	0x20000840
 8025810:	ffff0208 	.word	0xffff0208

08025814 <sscanf>:
 8025814:	b40e      	push	{r1, r2, r3}
 8025816:	b530      	push	{r4, r5, lr}
 8025818:	b09c      	sub	sp, #112	@ 0x70
 802581a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802581c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8025820:	f854 5b04 	ldr.w	r5, [r4], #4
 8025824:	f8ad 2014 	strh.w	r2, [sp, #20]
 8025828:	9002      	str	r0, [sp, #8]
 802582a:	9006      	str	r0, [sp, #24]
 802582c:	f7da fd38 	bl	80002a0 <strlen>
 8025830:	4b0b      	ldr	r3, [pc, #44]	@ (8025860 <sscanf+0x4c>)
 8025832:	9003      	str	r0, [sp, #12]
 8025834:	9007      	str	r0, [sp, #28]
 8025836:	930a      	str	r3, [sp, #40]	@ 0x28
 8025838:	480a      	ldr	r0, [pc, #40]	@ (8025864 <sscanf+0x50>)
 802583a:	9401      	str	r4, [sp, #4]
 802583c:	2300      	movs	r3, #0
 802583e:	930e      	str	r3, [sp, #56]	@ 0x38
 8025840:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025842:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025846:	f8ad 3016 	strh.w	r3, [sp, #22]
 802584a:	462a      	mov	r2, r5
 802584c:	4623      	mov	r3, r4
 802584e:	a902      	add	r1, sp, #8
 8025850:	6800      	ldr	r0, [r0, #0]
 8025852:	f005 fd0f 	bl	802b274 <__ssvfscanf_r>
 8025856:	b01c      	add	sp, #112	@ 0x70
 8025858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802585c:	b003      	add	sp, #12
 802585e:	4770      	bx	lr
 8025860:	0802588b 	.word	0x0802588b
 8025864:	20000840 	.word	0x20000840

08025868 <__sread>:
 8025868:	b510      	push	{r4, lr}
 802586a:	460c      	mov	r4, r1
 802586c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025870:	f001 fd52 	bl	8027318 <_read_r>
 8025874:	2800      	cmp	r0, #0
 8025876:	bfab      	itete	ge
 8025878:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802587a:	89a3      	ldrhlt	r3, [r4, #12]
 802587c:	181b      	addge	r3, r3, r0
 802587e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8025882:	bfac      	ite	ge
 8025884:	6523      	strge	r3, [r4, #80]	@ 0x50
 8025886:	81a3      	strhlt	r3, [r4, #12]
 8025888:	bd10      	pop	{r4, pc}

0802588a <__seofread>:
 802588a:	2000      	movs	r0, #0
 802588c:	4770      	bx	lr

0802588e <__swrite>:
 802588e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025892:	461f      	mov	r7, r3
 8025894:	898b      	ldrh	r3, [r1, #12]
 8025896:	05db      	lsls	r3, r3, #23
 8025898:	4605      	mov	r5, r0
 802589a:	460c      	mov	r4, r1
 802589c:	4616      	mov	r6, r2
 802589e:	d505      	bpl.n	80258ac <__swrite+0x1e>
 80258a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80258a4:	2302      	movs	r3, #2
 80258a6:	2200      	movs	r2, #0
 80258a8:	f001 fd24 	bl	80272f4 <_lseek_r>
 80258ac:	89a3      	ldrh	r3, [r4, #12]
 80258ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80258b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80258b6:	81a3      	strh	r3, [r4, #12]
 80258b8:	4632      	mov	r2, r6
 80258ba:	463b      	mov	r3, r7
 80258bc:	4628      	mov	r0, r5
 80258be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80258c2:	f001 bd4b 	b.w	802735c <_write_r>

080258c6 <__sseek>:
 80258c6:	b510      	push	{r4, lr}
 80258c8:	460c      	mov	r4, r1
 80258ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80258ce:	f001 fd11 	bl	80272f4 <_lseek_r>
 80258d2:	1c43      	adds	r3, r0, #1
 80258d4:	89a3      	ldrh	r3, [r4, #12]
 80258d6:	bf15      	itete	ne
 80258d8:	6520      	strne	r0, [r4, #80]	@ 0x50
 80258da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80258de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80258e2:	81a3      	strheq	r3, [r4, #12]
 80258e4:	bf18      	it	ne
 80258e6:	81a3      	strhne	r3, [r4, #12]
 80258e8:	bd10      	pop	{r4, pc}

080258ea <__sclose>:
 80258ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80258ee:	f001 bcc5 	b.w	802727c <_close_r>
	...

080258f4 <std>:
 80258f4:	2300      	movs	r3, #0
 80258f6:	b510      	push	{r4, lr}
 80258f8:	4604      	mov	r4, r0
 80258fa:	e9c0 3300 	strd	r3, r3, [r0]
 80258fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025902:	6083      	str	r3, [r0, #8]
 8025904:	8181      	strh	r1, [r0, #12]
 8025906:	6643      	str	r3, [r0, #100]	@ 0x64
 8025908:	81c2      	strh	r2, [r0, #14]
 802590a:	6183      	str	r3, [r0, #24]
 802590c:	4619      	mov	r1, r3
 802590e:	2208      	movs	r2, #8
 8025910:	305c      	adds	r0, #92	@ 0x5c
 8025912:	f000 fb21 	bl	8025f58 <memset>
 8025916:	4b0d      	ldr	r3, [pc, #52]	@ (802594c <std+0x58>)
 8025918:	6223      	str	r3, [r4, #32]
 802591a:	4b0d      	ldr	r3, [pc, #52]	@ (8025950 <std+0x5c>)
 802591c:	6263      	str	r3, [r4, #36]	@ 0x24
 802591e:	4b0d      	ldr	r3, [pc, #52]	@ (8025954 <std+0x60>)
 8025920:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025922:	4b0d      	ldr	r3, [pc, #52]	@ (8025958 <std+0x64>)
 8025924:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025926:	4b0d      	ldr	r3, [pc, #52]	@ (802595c <std+0x68>)
 8025928:	61e4      	str	r4, [r4, #28]
 802592a:	429c      	cmp	r4, r3
 802592c:	d006      	beq.n	802593c <std+0x48>
 802592e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8025932:	4294      	cmp	r4, r2
 8025934:	d002      	beq.n	802593c <std+0x48>
 8025936:	33d0      	adds	r3, #208	@ 0xd0
 8025938:	429c      	cmp	r4, r3
 802593a:	d105      	bne.n	8025948 <std+0x54>
 802593c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8025940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025944:	f001 bd5a 	b.w	80273fc <__retarget_lock_init_recursive>
 8025948:	bd10      	pop	{r4, pc}
 802594a:	bf00      	nop
 802594c:	08025869 	.word	0x08025869
 8025950:	0802588f 	.word	0x0802588f
 8025954:	080258c7 	.word	0x080258c7
 8025958:	080258eb 	.word	0x080258eb
 802595c:	20018194 	.word	0x20018194

08025960 <stdio_exit_handler>:
 8025960:	4a02      	ldr	r2, [pc, #8]	@ (802596c <stdio_exit_handler+0xc>)
 8025962:	4903      	ldr	r1, [pc, #12]	@ (8025970 <stdio_exit_handler+0x10>)
 8025964:	4803      	ldr	r0, [pc, #12]	@ (8025974 <stdio_exit_handler+0x14>)
 8025966:	f000 b9ef 	b.w	8025d48 <_fwalk_sglue>
 802596a:	bf00      	nop
 802596c:	200006c0 	.word	0x200006c0
 8025970:	0802ce99 	.word	0x0802ce99
 8025974:	20000848 	.word	0x20000848

08025978 <cleanup_stdio>:
 8025978:	6841      	ldr	r1, [r0, #4]
 802597a:	4b0c      	ldr	r3, [pc, #48]	@ (80259ac <cleanup_stdio+0x34>)
 802597c:	4299      	cmp	r1, r3
 802597e:	b510      	push	{r4, lr}
 8025980:	4604      	mov	r4, r0
 8025982:	d001      	beq.n	8025988 <cleanup_stdio+0x10>
 8025984:	f007 fa88 	bl	802ce98 <_fclose_r>
 8025988:	68a1      	ldr	r1, [r4, #8]
 802598a:	4b09      	ldr	r3, [pc, #36]	@ (80259b0 <cleanup_stdio+0x38>)
 802598c:	4299      	cmp	r1, r3
 802598e:	d002      	beq.n	8025996 <cleanup_stdio+0x1e>
 8025990:	4620      	mov	r0, r4
 8025992:	f007 fa81 	bl	802ce98 <_fclose_r>
 8025996:	68e1      	ldr	r1, [r4, #12]
 8025998:	4b06      	ldr	r3, [pc, #24]	@ (80259b4 <cleanup_stdio+0x3c>)
 802599a:	4299      	cmp	r1, r3
 802599c:	d004      	beq.n	80259a8 <cleanup_stdio+0x30>
 802599e:	4620      	mov	r0, r4
 80259a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80259a4:	f007 ba78 	b.w	802ce98 <_fclose_r>
 80259a8:	bd10      	pop	{r4, pc}
 80259aa:	bf00      	nop
 80259ac:	20018194 	.word	0x20018194
 80259b0:	200181fc 	.word	0x200181fc
 80259b4:	20018264 	.word	0x20018264

080259b8 <global_stdio_init.part.0>:
 80259b8:	b510      	push	{r4, lr}
 80259ba:	4b0b      	ldr	r3, [pc, #44]	@ (80259e8 <global_stdio_init.part.0+0x30>)
 80259bc:	4c0b      	ldr	r4, [pc, #44]	@ (80259ec <global_stdio_init.part.0+0x34>)
 80259be:	4a0c      	ldr	r2, [pc, #48]	@ (80259f0 <global_stdio_init.part.0+0x38>)
 80259c0:	601a      	str	r2, [r3, #0]
 80259c2:	4620      	mov	r0, r4
 80259c4:	2200      	movs	r2, #0
 80259c6:	2104      	movs	r1, #4
 80259c8:	f7ff ff94 	bl	80258f4 <std>
 80259cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80259d0:	2201      	movs	r2, #1
 80259d2:	2109      	movs	r1, #9
 80259d4:	f7ff ff8e 	bl	80258f4 <std>
 80259d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80259dc:	2202      	movs	r2, #2
 80259de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80259e2:	2112      	movs	r1, #18
 80259e4:	f7ff bf86 	b.w	80258f4 <std>
 80259e8:	200182cc 	.word	0x200182cc
 80259ec:	20018194 	.word	0x20018194
 80259f0:	08025961 	.word	0x08025961

080259f4 <__sfp_lock_acquire>:
 80259f4:	4801      	ldr	r0, [pc, #4]	@ (80259fc <__sfp_lock_acquire+0x8>)
 80259f6:	f001 bd04 	b.w	8027402 <__retarget_lock_acquire_recursive>
 80259fa:	bf00      	nop
 80259fc:	200182fc 	.word	0x200182fc

08025a00 <__sfp_lock_release>:
 8025a00:	4801      	ldr	r0, [pc, #4]	@ (8025a08 <__sfp_lock_release+0x8>)
 8025a02:	f001 bd00 	b.w	8027406 <__retarget_lock_release_recursive>
 8025a06:	bf00      	nop
 8025a08:	200182fc 	.word	0x200182fc

08025a0c <__sinit>:
 8025a0c:	b510      	push	{r4, lr}
 8025a0e:	4604      	mov	r4, r0
 8025a10:	f7ff fff0 	bl	80259f4 <__sfp_lock_acquire>
 8025a14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025a16:	b11b      	cbz	r3, 8025a20 <__sinit+0x14>
 8025a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025a1c:	f7ff bff0 	b.w	8025a00 <__sfp_lock_release>
 8025a20:	4b04      	ldr	r3, [pc, #16]	@ (8025a34 <__sinit+0x28>)
 8025a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8025a24:	4b04      	ldr	r3, [pc, #16]	@ (8025a38 <__sinit+0x2c>)
 8025a26:	681b      	ldr	r3, [r3, #0]
 8025a28:	2b00      	cmp	r3, #0
 8025a2a:	d1f5      	bne.n	8025a18 <__sinit+0xc>
 8025a2c:	f7ff ffc4 	bl	80259b8 <global_stdio_init.part.0>
 8025a30:	e7f2      	b.n	8025a18 <__sinit+0xc>
 8025a32:	bf00      	nop
 8025a34:	08025979 	.word	0x08025979
 8025a38:	200182cc 	.word	0x200182cc

08025a3c <_vsnprintf_r>:
 8025a3c:	b530      	push	{r4, r5, lr}
 8025a3e:	4614      	mov	r4, r2
 8025a40:	2c00      	cmp	r4, #0
 8025a42:	b09b      	sub	sp, #108	@ 0x6c
 8025a44:	4605      	mov	r5, r0
 8025a46:	461a      	mov	r2, r3
 8025a48:	da05      	bge.n	8025a56 <_vsnprintf_r+0x1a>
 8025a4a:	238b      	movs	r3, #139	@ 0x8b
 8025a4c:	6003      	str	r3, [r0, #0]
 8025a4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025a52:	b01b      	add	sp, #108	@ 0x6c
 8025a54:	bd30      	pop	{r4, r5, pc}
 8025a56:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8025a5a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8025a5e:	bf14      	ite	ne
 8025a60:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8025a64:	4623      	moveq	r3, r4
 8025a66:	9302      	str	r3, [sp, #8]
 8025a68:	9305      	str	r3, [sp, #20]
 8025a6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025a6e:	9100      	str	r1, [sp, #0]
 8025a70:	9104      	str	r1, [sp, #16]
 8025a72:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025a76:	4669      	mov	r1, sp
 8025a78:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025a7a:	f004 f9b9 	bl	8029df0 <_svfprintf_r>
 8025a7e:	1c43      	adds	r3, r0, #1
 8025a80:	bfbc      	itt	lt
 8025a82:	238b      	movlt	r3, #139	@ 0x8b
 8025a84:	602b      	strlt	r3, [r5, #0]
 8025a86:	2c00      	cmp	r4, #0
 8025a88:	d0e3      	beq.n	8025a52 <_vsnprintf_r+0x16>
 8025a8a:	9b00      	ldr	r3, [sp, #0]
 8025a8c:	2200      	movs	r2, #0
 8025a8e:	701a      	strb	r2, [r3, #0]
 8025a90:	e7df      	b.n	8025a52 <_vsnprintf_r+0x16>
	...

08025a94 <vsnprintf>:
 8025a94:	b507      	push	{r0, r1, r2, lr}
 8025a96:	9300      	str	r3, [sp, #0]
 8025a98:	4613      	mov	r3, r2
 8025a9a:	460a      	mov	r2, r1
 8025a9c:	4601      	mov	r1, r0
 8025a9e:	4803      	ldr	r0, [pc, #12]	@ (8025aac <vsnprintf+0x18>)
 8025aa0:	6800      	ldr	r0, [r0, #0]
 8025aa2:	f7ff ffcb 	bl	8025a3c <_vsnprintf_r>
 8025aa6:	b003      	add	sp, #12
 8025aa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8025aac:	20000840 	.word	0x20000840

08025ab0 <__sfvwrite_r>:
 8025ab0:	6893      	ldr	r3, [r2, #8]
 8025ab2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ab6:	4606      	mov	r6, r0
 8025ab8:	460c      	mov	r4, r1
 8025aba:	4691      	mov	r9, r2
 8025abc:	b91b      	cbnz	r3, 8025ac6 <__sfvwrite_r+0x16>
 8025abe:	2000      	movs	r0, #0
 8025ac0:	b003      	add	sp, #12
 8025ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ac6:	898b      	ldrh	r3, [r1, #12]
 8025ac8:	0718      	lsls	r0, r3, #28
 8025aca:	d550      	bpl.n	8025b6e <__sfvwrite_r+0xbe>
 8025acc:	690b      	ldr	r3, [r1, #16]
 8025ace:	2b00      	cmp	r3, #0
 8025ad0:	d04d      	beq.n	8025b6e <__sfvwrite_r+0xbe>
 8025ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025ad6:	f8d9 8000 	ldr.w	r8, [r9]
 8025ada:	f013 0702 	ands.w	r7, r3, #2
 8025ade:	d16b      	bne.n	8025bb8 <__sfvwrite_r+0x108>
 8025ae0:	f013 0301 	ands.w	r3, r3, #1
 8025ae4:	f000 809c 	beq.w	8025c20 <__sfvwrite_r+0x170>
 8025ae8:	4638      	mov	r0, r7
 8025aea:	46ba      	mov	sl, r7
 8025aec:	46bb      	mov	fp, r7
 8025aee:	f1bb 0f00 	cmp.w	fp, #0
 8025af2:	f000 8103 	beq.w	8025cfc <__sfvwrite_r+0x24c>
 8025af6:	b950      	cbnz	r0, 8025b0e <__sfvwrite_r+0x5e>
 8025af8:	465a      	mov	r2, fp
 8025afa:	210a      	movs	r1, #10
 8025afc:	4650      	mov	r0, sl
 8025afe:	f7da fb7f 	bl	8000200 <memchr>
 8025b02:	2800      	cmp	r0, #0
 8025b04:	f000 8100 	beq.w	8025d08 <__sfvwrite_r+0x258>
 8025b08:	3001      	adds	r0, #1
 8025b0a:	eba0 070a 	sub.w	r7, r0, sl
 8025b0e:	6820      	ldr	r0, [r4, #0]
 8025b10:	6921      	ldr	r1, [r4, #16]
 8025b12:	68a5      	ldr	r5, [r4, #8]
 8025b14:	6963      	ldr	r3, [r4, #20]
 8025b16:	455f      	cmp	r7, fp
 8025b18:	463a      	mov	r2, r7
 8025b1a:	bf28      	it	cs
 8025b1c:	465a      	movcs	r2, fp
 8025b1e:	4288      	cmp	r0, r1
 8025b20:	f240 80f5 	bls.w	8025d0e <__sfvwrite_r+0x25e>
 8025b24:	441d      	add	r5, r3
 8025b26:	42aa      	cmp	r2, r5
 8025b28:	f340 80f1 	ble.w	8025d0e <__sfvwrite_r+0x25e>
 8025b2c:	4651      	mov	r1, sl
 8025b2e:	462a      	mov	r2, r5
 8025b30:	f000 f9f8 	bl	8025f24 <memmove>
 8025b34:	6823      	ldr	r3, [r4, #0]
 8025b36:	442b      	add	r3, r5
 8025b38:	6023      	str	r3, [r4, #0]
 8025b3a:	4621      	mov	r1, r4
 8025b3c:	4630      	mov	r0, r6
 8025b3e:	f7ff fe23 	bl	8025788 <_fflush_r>
 8025b42:	2800      	cmp	r0, #0
 8025b44:	d167      	bne.n	8025c16 <__sfvwrite_r+0x166>
 8025b46:	1b7f      	subs	r7, r7, r5
 8025b48:	f040 80f9 	bne.w	8025d3e <__sfvwrite_r+0x28e>
 8025b4c:	4621      	mov	r1, r4
 8025b4e:	4630      	mov	r0, r6
 8025b50:	f7ff fe1a 	bl	8025788 <_fflush_r>
 8025b54:	2800      	cmp	r0, #0
 8025b56:	d15e      	bne.n	8025c16 <__sfvwrite_r+0x166>
 8025b58:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8025b5c:	1b5b      	subs	r3, r3, r5
 8025b5e:	44aa      	add	sl, r5
 8025b60:	ebab 0b05 	sub.w	fp, fp, r5
 8025b64:	f8c9 3008 	str.w	r3, [r9, #8]
 8025b68:	2b00      	cmp	r3, #0
 8025b6a:	d1c0      	bne.n	8025aee <__sfvwrite_r+0x3e>
 8025b6c:	e7a7      	b.n	8025abe <__sfvwrite_r+0xe>
 8025b6e:	4621      	mov	r1, r4
 8025b70:	4630      	mov	r0, r6
 8025b72:	f000 f907 	bl	8025d84 <__swsetup_r>
 8025b76:	2800      	cmp	r0, #0
 8025b78:	d0ab      	beq.n	8025ad2 <__sfvwrite_r+0x22>
 8025b7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025b7e:	e79f      	b.n	8025ac0 <__sfvwrite_r+0x10>
 8025b80:	e9d8 a500 	ldrd	sl, r5, [r8]
 8025b84:	f108 0808 	add.w	r8, r8, #8
 8025b88:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8025b8c:	69e1      	ldr	r1, [r4, #28]
 8025b8e:	2d00      	cmp	r5, #0
 8025b90:	d0f6      	beq.n	8025b80 <__sfvwrite_r+0xd0>
 8025b92:	42bd      	cmp	r5, r7
 8025b94:	462b      	mov	r3, r5
 8025b96:	4652      	mov	r2, sl
 8025b98:	bf28      	it	cs
 8025b9a:	463b      	movcs	r3, r7
 8025b9c:	4630      	mov	r0, r6
 8025b9e:	47d8      	blx	fp
 8025ba0:	2800      	cmp	r0, #0
 8025ba2:	dd38      	ble.n	8025c16 <__sfvwrite_r+0x166>
 8025ba4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8025ba8:	1a1b      	subs	r3, r3, r0
 8025baa:	4482      	add	sl, r0
 8025bac:	1a2d      	subs	r5, r5, r0
 8025bae:	f8c9 3008 	str.w	r3, [r9, #8]
 8025bb2:	2b00      	cmp	r3, #0
 8025bb4:	d1e8      	bne.n	8025b88 <__sfvwrite_r+0xd8>
 8025bb6:	e782      	b.n	8025abe <__sfvwrite_r+0xe>
 8025bb8:	f04f 0a00 	mov.w	sl, #0
 8025bbc:	4f61      	ldr	r7, [pc, #388]	@ (8025d44 <__sfvwrite_r+0x294>)
 8025bbe:	4655      	mov	r5, sl
 8025bc0:	e7e2      	b.n	8025b88 <__sfvwrite_r+0xd8>
 8025bc2:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8025bc6:	f108 0808 	add.w	r8, r8, #8
 8025bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025bce:	6820      	ldr	r0, [r4, #0]
 8025bd0:	68a2      	ldr	r2, [r4, #8]
 8025bd2:	f1ba 0f00 	cmp.w	sl, #0
 8025bd6:	d0f4      	beq.n	8025bc2 <__sfvwrite_r+0x112>
 8025bd8:	0599      	lsls	r1, r3, #22
 8025bda:	d563      	bpl.n	8025ca4 <__sfvwrite_r+0x1f4>
 8025bdc:	4552      	cmp	r2, sl
 8025bde:	d836      	bhi.n	8025c4e <__sfvwrite_r+0x19e>
 8025be0:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8025be4:	d033      	beq.n	8025c4e <__sfvwrite_r+0x19e>
 8025be6:	6921      	ldr	r1, [r4, #16]
 8025be8:	6965      	ldr	r5, [r4, #20]
 8025bea:	eba0 0b01 	sub.w	fp, r0, r1
 8025bee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025bf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025bf6:	f10b 0201 	add.w	r2, fp, #1
 8025bfa:	106d      	asrs	r5, r5, #1
 8025bfc:	4452      	add	r2, sl
 8025bfe:	4295      	cmp	r5, r2
 8025c00:	bf38      	it	cc
 8025c02:	4615      	movcc	r5, r2
 8025c04:	055b      	lsls	r3, r3, #21
 8025c06:	d53d      	bpl.n	8025c84 <__sfvwrite_r+0x1d4>
 8025c08:	4629      	mov	r1, r5
 8025c0a:	4630      	mov	r0, r6
 8025c0c:	f7fd fa3e 	bl	802308c <_malloc_r>
 8025c10:	b948      	cbnz	r0, 8025c26 <__sfvwrite_r+0x176>
 8025c12:	230c      	movs	r3, #12
 8025c14:	6033      	str	r3, [r6, #0]
 8025c16:	89a3      	ldrh	r3, [r4, #12]
 8025c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025c1c:	81a3      	strh	r3, [r4, #12]
 8025c1e:	e7ac      	b.n	8025b7a <__sfvwrite_r+0xca>
 8025c20:	461f      	mov	r7, r3
 8025c22:	469a      	mov	sl, r3
 8025c24:	e7d1      	b.n	8025bca <__sfvwrite_r+0x11a>
 8025c26:	465a      	mov	r2, fp
 8025c28:	6921      	ldr	r1, [r4, #16]
 8025c2a:	9001      	str	r0, [sp, #4]
 8025c2c:	f001 fbec 	bl	8027408 <memcpy>
 8025c30:	89a2      	ldrh	r2, [r4, #12]
 8025c32:	9b01      	ldr	r3, [sp, #4]
 8025c34:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8025c38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8025c3c:	81a2      	strh	r2, [r4, #12]
 8025c3e:	6123      	str	r3, [r4, #16]
 8025c40:	6165      	str	r5, [r4, #20]
 8025c42:	445b      	add	r3, fp
 8025c44:	eba5 050b 	sub.w	r5, r5, fp
 8025c48:	6023      	str	r3, [r4, #0]
 8025c4a:	4652      	mov	r2, sl
 8025c4c:	60a5      	str	r5, [r4, #8]
 8025c4e:	4552      	cmp	r2, sl
 8025c50:	bf28      	it	cs
 8025c52:	4652      	movcs	r2, sl
 8025c54:	6820      	ldr	r0, [r4, #0]
 8025c56:	9201      	str	r2, [sp, #4]
 8025c58:	4639      	mov	r1, r7
 8025c5a:	f000 f963 	bl	8025f24 <memmove>
 8025c5e:	68a3      	ldr	r3, [r4, #8]
 8025c60:	9a01      	ldr	r2, [sp, #4]
 8025c62:	1a9b      	subs	r3, r3, r2
 8025c64:	60a3      	str	r3, [r4, #8]
 8025c66:	6823      	ldr	r3, [r4, #0]
 8025c68:	4413      	add	r3, r2
 8025c6a:	4655      	mov	r5, sl
 8025c6c:	6023      	str	r3, [r4, #0]
 8025c6e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8025c72:	1b5b      	subs	r3, r3, r5
 8025c74:	442f      	add	r7, r5
 8025c76:	ebaa 0a05 	sub.w	sl, sl, r5
 8025c7a:	f8c9 3008 	str.w	r3, [r9, #8]
 8025c7e:	2b00      	cmp	r3, #0
 8025c80:	d1a3      	bne.n	8025bca <__sfvwrite_r+0x11a>
 8025c82:	e71c      	b.n	8025abe <__sfvwrite_r+0xe>
 8025c84:	462a      	mov	r2, r5
 8025c86:	4630      	mov	r0, r6
 8025c88:	f007 f994 	bl	802cfb4 <_realloc_r>
 8025c8c:	4603      	mov	r3, r0
 8025c8e:	2800      	cmp	r0, #0
 8025c90:	d1d5      	bne.n	8025c3e <__sfvwrite_r+0x18e>
 8025c92:	6921      	ldr	r1, [r4, #16]
 8025c94:	4630      	mov	r0, r6
 8025c96:	f002 fab9 	bl	802820c <_free_r>
 8025c9a:	89a3      	ldrh	r3, [r4, #12]
 8025c9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8025ca0:	81a3      	strh	r3, [r4, #12]
 8025ca2:	e7b6      	b.n	8025c12 <__sfvwrite_r+0x162>
 8025ca4:	6923      	ldr	r3, [r4, #16]
 8025ca6:	4283      	cmp	r3, r0
 8025ca8:	d302      	bcc.n	8025cb0 <__sfvwrite_r+0x200>
 8025caa:	6961      	ldr	r1, [r4, #20]
 8025cac:	4551      	cmp	r1, sl
 8025cae:	d915      	bls.n	8025cdc <__sfvwrite_r+0x22c>
 8025cb0:	4552      	cmp	r2, sl
 8025cb2:	bf28      	it	cs
 8025cb4:	4652      	movcs	r2, sl
 8025cb6:	4639      	mov	r1, r7
 8025cb8:	4615      	mov	r5, r2
 8025cba:	f000 f933 	bl	8025f24 <memmove>
 8025cbe:	68a3      	ldr	r3, [r4, #8]
 8025cc0:	6822      	ldr	r2, [r4, #0]
 8025cc2:	1b5b      	subs	r3, r3, r5
 8025cc4:	442a      	add	r2, r5
 8025cc6:	60a3      	str	r3, [r4, #8]
 8025cc8:	6022      	str	r2, [r4, #0]
 8025cca:	2b00      	cmp	r3, #0
 8025ccc:	d1cf      	bne.n	8025c6e <__sfvwrite_r+0x1be>
 8025cce:	4621      	mov	r1, r4
 8025cd0:	4630      	mov	r0, r6
 8025cd2:	f7ff fd59 	bl	8025788 <_fflush_r>
 8025cd6:	2800      	cmp	r0, #0
 8025cd8:	d0c9      	beq.n	8025c6e <__sfvwrite_r+0x1be>
 8025cda:	e79c      	b.n	8025c16 <__sfvwrite_r+0x166>
 8025cdc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8025ce0:	4553      	cmp	r3, sl
 8025ce2:	bf28      	it	cs
 8025ce4:	4653      	movcs	r3, sl
 8025ce6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8025ce8:	fb93 f3f1 	sdiv	r3, r3, r1
 8025cec:	463a      	mov	r2, r7
 8025cee:	434b      	muls	r3, r1
 8025cf0:	4630      	mov	r0, r6
 8025cf2:	69e1      	ldr	r1, [r4, #28]
 8025cf4:	47a8      	blx	r5
 8025cf6:	1e05      	subs	r5, r0, #0
 8025cf8:	dcb9      	bgt.n	8025c6e <__sfvwrite_r+0x1be>
 8025cfa:	e78c      	b.n	8025c16 <__sfvwrite_r+0x166>
 8025cfc:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8025d00:	2000      	movs	r0, #0
 8025d02:	f108 0808 	add.w	r8, r8, #8
 8025d06:	e6f2      	b.n	8025aee <__sfvwrite_r+0x3e>
 8025d08:	f10b 0701 	add.w	r7, fp, #1
 8025d0c:	e6ff      	b.n	8025b0e <__sfvwrite_r+0x5e>
 8025d0e:	4293      	cmp	r3, r2
 8025d10:	dc08      	bgt.n	8025d24 <__sfvwrite_r+0x274>
 8025d12:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8025d14:	69e1      	ldr	r1, [r4, #28]
 8025d16:	4652      	mov	r2, sl
 8025d18:	4630      	mov	r0, r6
 8025d1a:	47a8      	blx	r5
 8025d1c:	1e05      	subs	r5, r0, #0
 8025d1e:	f73f af12 	bgt.w	8025b46 <__sfvwrite_r+0x96>
 8025d22:	e778      	b.n	8025c16 <__sfvwrite_r+0x166>
 8025d24:	4651      	mov	r1, sl
 8025d26:	9201      	str	r2, [sp, #4]
 8025d28:	f000 f8fc 	bl	8025f24 <memmove>
 8025d2c:	9a01      	ldr	r2, [sp, #4]
 8025d2e:	68a3      	ldr	r3, [r4, #8]
 8025d30:	1a9b      	subs	r3, r3, r2
 8025d32:	60a3      	str	r3, [r4, #8]
 8025d34:	6823      	ldr	r3, [r4, #0]
 8025d36:	4413      	add	r3, r2
 8025d38:	6023      	str	r3, [r4, #0]
 8025d3a:	4615      	mov	r5, r2
 8025d3c:	e703      	b.n	8025b46 <__sfvwrite_r+0x96>
 8025d3e:	2001      	movs	r0, #1
 8025d40:	e70a      	b.n	8025b58 <__sfvwrite_r+0xa8>
 8025d42:	bf00      	nop
 8025d44:	7ffffc00 	.word	0x7ffffc00

08025d48 <_fwalk_sglue>:
 8025d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025d4c:	4607      	mov	r7, r0
 8025d4e:	4688      	mov	r8, r1
 8025d50:	4614      	mov	r4, r2
 8025d52:	2600      	movs	r6, #0
 8025d54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025d58:	f1b9 0901 	subs.w	r9, r9, #1
 8025d5c:	d505      	bpl.n	8025d6a <_fwalk_sglue+0x22>
 8025d5e:	6824      	ldr	r4, [r4, #0]
 8025d60:	2c00      	cmp	r4, #0
 8025d62:	d1f7      	bne.n	8025d54 <_fwalk_sglue+0xc>
 8025d64:	4630      	mov	r0, r6
 8025d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d6a:	89ab      	ldrh	r3, [r5, #12]
 8025d6c:	2b01      	cmp	r3, #1
 8025d6e:	d907      	bls.n	8025d80 <_fwalk_sglue+0x38>
 8025d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025d74:	3301      	adds	r3, #1
 8025d76:	d003      	beq.n	8025d80 <_fwalk_sglue+0x38>
 8025d78:	4629      	mov	r1, r5
 8025d7a:	4638      	mov	r0, r7
 8025d7c:	47c0      	blx	r8
 8025d7e:	4306      	orrs	r6, r0
 8025d80:	3568      	adds	r5, #104	@ 0x68
 8025d82:	e7e9      	b.n	8025d58 <_fwalk_sglue+0x10>

08025d84 <__swsetup_r>:
 8025d84:	b538      	push	{r3, r4, r5, lr}
 8025d86:	4b29      	ldr	r3, [pc, #164]	@ (8025e2c <__swsetup_r+0xa8>)
 8025d88:	4605      	mov	r5, r0
 8025d8a:	6818      	ldr	r0, [r3, #0]
 8025d8c:	460c      	mov	r4, r1
 8025d8e:	b118      	cbz	r0, 8025d98 <__swsetup_r+0x14>
 8025d90:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8025d92:	b90b      	cbnz	r3, 8025d98 <__swsetup_r+0x14>
 8025d94:	f7ff fe3a 	bl	8025a0c <__sinit>
 8025d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025d9c:	0719      	lsls	r1, r3, #28
 8025d9e:	d422      	bmi.n	8025de6 <__swsetup_r+0x62>
 8025da0:	06da      	lsls	r2, r3, #27
 8025da2:	d407      	bmi.n	8025db4 <__swsetup_r+0x30>
 8025da4:	2209      	movs	r2, #9
 8025da6:	602a      	str	r2, [r5, #0]
 8025da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025dac:	81a3      	strh	r3, [r4, #12]
 8025dae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025db2:	e033      	b.n	8025e1c <__swsetup_r+0x98>
 8025db4:	0758      	lsls	r0, r3, #29
 8025db6:	d512      	bpl.n	8025dde <__swsetup_r+0x5a>
 8025db8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8025dba:	b141      	cbz	r1, 8025dce <__swsetup_r+0x4a>
 8025dbc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8025dc0:	4299      	cmp	r1, r3
 8025dc2:	d002      	beq.n	8025dca <__swsetup_r+0x46>
 8025dc4:	4628      	mov	r0, r5
 8025dc6:	f002 fa21 	bl	802820c <_free_r>
 8025dca:	2300      	movs	r3, #0
 8025dcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8025dce:	89a3      	ldrh	r3, [r4, #12]
 8025dd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8025dd4:	81a3      	strh	r3, [r4, #12]
 8025dd6:	2300      	movs	r3, #0
 8025dd8:	6063      	str	r3, [r4, #4]
 8025dda:	6923      	ldr	r3, [r4, #16]
 8025ddc:	6023      	str	r3, [r4, #0]
 8025dde:	89a3      	ldrh	r3, [r4, #12]
 8025de0:	f043 0308 	orr.w	r3, r3, #8
 8025de4:	81a3      	strh	r3, [r4, #12]
 8025de6:	6923      	ldr	r3, [r4, #16]
 8025de8:	b94b      	cbnz	r3, 8025dfe <__swsetup_r+0x7a>
 8025dea:	89a3      	ldrh	r3, [r4, #12]
 8025dec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8025df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8025df4:	d003      	beq.n	8025dfe <__swsetup_r+0x7a>
 8025df6:	4621      	mov	r1, r4
 8025df8:	4628      	mov	r0, r5
 8025dfa:	f005 f9ff 	bl	802b1fc <__smakebuf_r>
 8025dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025e02:	f013 0201 	ands.w	r2, r3, #1
 8025e06:	d00a      	beq.n	8025e1e <__swsetup_r+0x9a>
 8025e08:	2200      	movs	r2, #0
 8025e0a:	60a2      	str	r2, [r4, #8]
 8025e0c:	6962      	ldr	r2, [r4, #20]
 8025e0e:	4252      	negs	r2, r2
 8025e10:	61a2      	str	r2, [r4, #24]
 8025e12:	6922      	ldr	r2, [r4, #16]
 8025e14:	b942      	cbnz	r2, 8025e28 <__swsetup_r+0xa4>
 8025e16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8025e1a:	d1c5      	bne.n	8025da8 <__swsetup_r+0x24>
 8025e1c:	bd38      	pop	{r3, r4, r5, pc}
 8025e1e:	0799      	lsls	r1, r3, #30
 8025e20:	bf58      	it	pl
 8025e22:	6962      	ldrpl	r2, [r4, #20]
 8025e24:	60a2      	str	r2, [r4, #8]
 8025e26:	e7f4      	b.n	8025e12 <__swsetup_r+0x8e>
 8025e28:	2000      	movs	r0, #0
 8025e2a:	e7f7      	b.n	8025e1c <__swsetup_r+0x98>
 8025e2c:	20000840 	.word	0x20000840

08025e30 <memcmp>:
 8025e30:	b510      	push	{r4, lr}
 8025e32:	3901      	subs	r1, #1
 8025e34:	4402      	add	r2, r0
 8025e36:	4290      	cmp	r0, r2
 8025e38:	d101      	bne.n	8025e3e <memcmp+0xe>
 8025e3a:	2000      	movs	r0, #0
 8025e3c:	e005      	b.n	8025e4a <memcmp+0x1a>
 8025e3e:	7803      	ldrb	r3, [r0, #0]
 8025e40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025e44:	42a3      	cmp	r3, r4
 8025e46:	d001      	beq.n	8025e4c <memcmp+0x1c>
 8025e48:	1b18      	subs	r0, r3, r4
 8025e4a:	bd10      	pop	{r4, pc}
 8025e4c:	3001      	adds	r0, #1
 8025e4e:	e7f2      	b.n	8025e36 <memcmp+0x6>

08025e50 <__fputwc>:
 8025e50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025e54:	4680      	mov	r8, r0
 8025e56:	460f      	mov	r7, r1
 8025e58:	4614      	mov	r4, r2
 8025e5a:	f001 fa05 	bl	8027268 <__locale_mb_cur_max>
 8025e5e:	2801      	cmp	r0, #1
 8025e60:	4605      	mov	r5, r0
 8025e62:	d11b      	bne.n	8025e9c <__fputwc+0x4c>
 8025e64:	1e7b      	subs	r3, r7, #1
 8025e66:	2bfe      	cmp	r3, #254	@ 0xfe
 8025e68:	d818      	bhi.n	8025e9c <__fputwc+0x4c>
 8025e6a:	f88d 7004 	strb.w	r7, [sp, #4]
 8025e6e:	2600      	movs	r6, #0
 8025e70:	f10d 0904 	add.w	r9, sp, #4
 8025e74:	42ae      	cmp	r6, r5
 8025e76:	d021      	beq.n	8025ebc <__fputwc+0x6c>
 8025e78:	68a3      	ldr	r3, [r4, #8]
 8025e7a:	f816 1009 	ldrb.w	r1, [r6, r9]
 8025e7e:	3b01      	subs	r3, #1
 8025e80:	2b00      	cmp	r3, #0
 8025e82:	60a3      	str	r3, [r4, #8]
 8025e84:	da04      	bge.n	8025e90 <__fputwc+0x40>
 8025e86:	69a2      	ldr	r2, [r4, #24]
 8025e88:	4293      	cmp	r3, r2
 8025e8a:	db1b      	blt.n	8025ec4 <__fputwc+0x74>
 8025e8c:	290a      	cmp	r1, #10
 8025e8e:	d019      	beq.n	8025ec4 <__fputwc+0x74>
 8025e90:	6823      	ldr	r3, [r4, #0]
 8025e92:	1c5a      	adds	r2, r3, #1
 8025e94:	6022      	str	r2, [r4, #0]
 8025e96:	7019      	strb	r1, [r3, #0]
 8025e98:	3601      	adds	r6, #1
 8025e9a:	e7eb      	b.n	8025e74 <__fputwc+0x24>
 8025e9c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8025ea0:	463a      	mov	r2, r7
 8025ea2:	a901      	add	r1, sp, #4
 8025ea4:	4640      	mov	r0, r8
 8025ea6:	f001 fabd 	bl	8027424 <_wcrtomb_r>
 8025eaa:	1c43      	adds	r3, r0, #1
 8025eac:	4605      	mov	r5, r0
 8025eae:	d1de      	bne.n	8025e6e <__fputwc+0x1e>
 8025eb0:	89a3      	ldrh	r3, [r4, #12]
 8025eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025eb6:	81a3      	strh	r3, [r4, #12]
 8025eb8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025ebc:	4638      	mov	r0, r7
 8025ebe:	b003      	add	sp, #12
 8025ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025ec4:	4622      	mov	r2, r4
 8025ec6:	4640      	mov	r0, r8
 8025ec8:	f008 f8e5 	bl	802e096 <__swbuf_r>
 8025ecc:	3001      	adds	r0, #1
 8025ece:	d1e3      	bne.n	8025e98 <__fputwc+0x48>
 8025ed0:	e7f2      	b.n	8025eb8 <__fputwc+0x68>

08025ed2 <_fputwc_r>:
 8025ed2:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8025ed4:	07db      	lsls	r3, r3, #31
 8025ed6:	b570      	push	{r4, r5, r6, lr}
 8025ed8:	4605      	mov	r5, r0
 8025eda:	460e      	mov	r6, r1
 8025edc:	4614      	mov	r4, r2
 8025ede:	d405      	bmi.n	8025eec <_fputwc_r+0x1a>
 8025ee0:	8993      	ldrh	r3, [r2, #12]
 8025ee2:	0598      	lsls	r0, r3, #22
 8025ee4:	d402      	bmi.n	8025eec <_fputwc_r+0x1a>
 8025ee6:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8025ee8:	f001 fa8b 	bl	8027402 <__retarget_lock_acquire_recursive>
 8025eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025ef0:	0499      	lsls	r1, r3, #18
 8025ef2:	d406      	bmi.n	8025f02 <_fputwc_r+0x30>
 8025ef4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8025ef8:	81a3      	strh	r3, [r4, #12]
 8025efa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025efc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8025f00:	6663      	str	r3, [r4, #100]	@ 0x64
 8025f02:	4622      	mov	r2, r4
 8025f04:	4628      	mov	r0, r5
 8025f06:	4631      	mov	r1, r6
 8025f08:	f7ff ffa2 	bl	8025e50 <__fputwc>
 8025f0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025f0e:	07da      	lsls	r2, r3, #31
 8025f10:	4605      	mov	r5, r0
 8025f12:	d405      	bmi.n	8025f20 <_fputwc_r+0x4e>
 8025f14:	89a3      	ldrh	r3, [r4, #12]
 8025f16:	059b      	lsls	r3, r3, #22
 8025f18:	d402      	bmi.n	8025f20 <_fputwc_r+0x4e>
 8025f1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025f1c:	f001 fa73 	bl	8027406 <__retarget_lock_release_recursive>
 8025f20:	4628      	mov	r0, r5
 8025f22:	bd70      	pop	{r4, r5, r6, pc}

08025f24 <memmove>:
 8025f24:	4288      	cmp	r0, r1
 8025f26:	b510      	push	{r4, lr}
 8025f28:	eb01 0402 	add.w	r4, r1, r2
 8025f2c:	d902      	bls.n	8025f34 <memmove+0x10>
 8025f2e:	4284      	cmp	r4, r0
 8025f30:	4623      	mov	r3, r4
 8025f32:	d807      	bhi.n	8025f44 <memmove+0x20>
 8025f34:	1e43      	subs	r3, r0, #1
 8025f36:	42a1      	cmp	r1, r4
 8025f38:	d008      	beq.n	8025f4c <memmove+0x28>
 8025f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025f42:	e7f8      	b.n	8025f36 <memmove+0x12>
 8025f44:	4402      	add	r2, r0
 8025f46:	4601      	mov	r1, r0
 8025f48:	428a      	cmp	r2, r1
 8025f4a:	d100      	bne.n	8025f4e <memmove+0x2a>
 8025f4c:	bd10      	pop	{r4, pc}
 8025f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025f56:	e7f7      	b.n	8025f48 <memmove+0x24>

08025f58 <memset>:
 8025f58:	4402      	add	r2, r0
 8025f5a:	4603      	mov	r3, r0
 8025f5c:	4293      	cmp	r3, r2
 8025f5e:	d100      	bne.n	8025f62 <memset+0xa>
 8025f60:	4770      	bx	lr
 8025f62:	f803 1b01 	strb.w	r1, [r3], #1
 8025f66:	e7f9      	b.n	8025f5c <memset+0x4>

08025f68 <strcat>:
 8025f68:	b510      	push	{r4, lr}
 8025f6a:	4602      	mov	r2, r0
 8025f6c:	7814      	ldrb	r4, [r2, #0]
 8025f6e:	4613      	mov	r3, r2
 8025f70:	3201      	adds	r2, #1
 8025f72:	2c00      	cmp	r4, #0
 8025f74:	d1fa      	bne.n	8025f6c <strcat+0x4>
 8025f76:	3b01      	subs	r3, #1
 8025f78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025f7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025f80:	2a00      	cmp	r2, #0
 8025f82:	d1f9      	bne.n	8025f78 <strcat+0x10>
 8025f84:	bd10      	pop	{r4, pc}

08025f86 <strchr>:
 8025f86:	b2c9      	uxtb	r1, r1
 8025f88:	4603      	mov	r3, r0
 8025f8a:	4618      	mov	r0, r3
 8025f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025f90:	b112      	cbz	r2, 8025f98 <strchr+0x12>
 8025f92:	428a      	cmp	r2, r1
 8025f94:	d1f9      	bne.n	8025f8a <strchr+0x4>
 8025f96:	4770      	bx	lr
 8025f98:	2900      	cmp	r1, #0
 8025f9a:	bf18      	it	ne
 8025f9c:	2000      	movne	r0, #0
 8025f9e:	4770      	bx	lr

08025fa0 <strcspn>:
 8025fa0:	b570      	push	{r4, r5, r6, lr}
 8025fa2:	4603      	mov	r3, r0
 8025fa4:	461e      	mov	r6, r3
 8025fa6:	f813 4b01 	ldrb.w	r4, [r3], #1
 8025faa:	b144      	cbz	r4, 8025fbe <strcspn+0x1e>
 8025fac:	1e4a      	subs	r2, r1, #1
 8025fae:	e001      	b.n	8025fb4 <strcspn+0x14>
 8025fb0:	42a5      	cmp	r5, r4
 8025fb2:	d004      	beq.n	8025fbe <strcspn+0x1e>
 8025fb4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8025fb8:	2d00      	cmp	r5, #0
 8025fba:	d1f9      	bne.n	8025fb0 <strcspn+0x10>
 8025fbc:	e7f2      	b.n	8025fa4 <strcspn+0x4>
 8025fbe:	1a30      	subs	r0, r6, r0
 8025fc0:	bd70      	pop	{r4, r5, r6, pc}

08025fc2 <strncmp>:
 8025fc2:	b510      	push	{r4, lr}
 8025fc4:	b16a      	cbz	r2, 8025fe2 <strncmp+0x20>
 8025fc6:	3901      	subs	r1, #1
 8025fc8:	1884      	adds	r4, r0, r2
 8025fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025fce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8025fd2:	429a      	cmp	r2, r3
 8025fd4:	d103      	bne.n	8025fde <strncmp+0x1c>
 8025fd6:	42a0      	cmp	r0, r4
 8025fd8:	d001      	beq.n	8025fde <strncmp+0x1c>
 8025fda:	2a00      	cmp	r2, #0
 8025fdc:	d1f5      	bne.n	8025fca <strncmp+0x8>
 8025fde:	1ad0      	subs	r0, r2, r3
 8025fe0:	bd10      	pop	{r4, pc}
 8025fe2:	4610      	mov	r0, r2
 8025fe4:	e7fc      	b.n	8025fe0 <strncmp+0x1e>

08025fe6 <strncpy>:
 8025fe6:	b510      	push	{r4, lr}
 8025fe8:	3901      	subs	r1, #1
 8025fea:	4603      	mov	r3, r0
 8025fec:	b132      	cbz	r2, 8025ffc <strncpy+0x16>
 8025fee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025ff2:	f803 4b01 	strb.w	r4, [r3], #1
 8025ff6:	3a01      	subs	r2, #1
 8025ff8:	2c00      	cmp	r4, #0
 8025ffa:	d1f7      	bne.n	8025fec <strncpy+0x6>
 8025ffc:	441a      	add	r2, r3
 8025ffe:	2100      	movs	r1, #0
 8026000:	4293      	cmp	r3, r2
 8026002:	d100      	bne.n	8026006 <strncpy+0x20>
 8026004:	bd10      	pop	{r4, pc}
 8026006:	f803 1b01 	strb.w	r1, [r3], #1
 802600a:	e7f9      	b.n	8026000 <strncpy+0x1a>

0802600c <strrchr>:
 802600c:	b538      	push	{r3, r4, r5, lr}
 802600e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8026012:	4603      	mov	r3, r0
 8026014:	d10e      	bne.n	8026034 <strrchr+0x28>
 8026016:	4621      	mov	r1, r4
 8026018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802601c:	f7ff bfb3 	b.w	8025f86 <strchr>
 8026020:	1c43      	adds	r3, r0, #1
 8026022:	4605      	mov	r5, r0
 8026024:	4621      	mov	r1, r4
 8026026:	4618      	mov	r0, r3
 8026028:	f7ff ffad 	bl	8025f86 <strchr>
 802602c:	2800      	cmp	r0, #0
 802602e:	d1f7      	bne.n	8026020 <strrchr+0x14>
 8026030:	4628      	mov	r0, r5
 8026032:	bd38      	pop	{r3, r4, r5, pc}
 8026034:	2500      	movs	r5, #0
 8026036:	e7f5      	b.n	8026024 <strrchr+0x18>

08026038 <strspn>:
 8026038:	b570      	push	{r4, r5, r6, lr}
 802603a:	4603      	mov	r3, r0
 802603c:	461e      	mov	r6, r3
 802603e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8026042:	b13c      	cbz	r4, 8026054 <strspn+0x1c>
 8026044:	1e4a      	subs	r2, r1, #1
 8026046:	e001      	b.n	802604c <strspn+0x14>
 8026048:	42a5      	cmp	r5, r4
 802604a:	d0f7      	beq.n	802603c <strspn+0x4>
 802604c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8026050:	2d00      	cmp	r5, #0
 8026052:	d1f9      	bne.n	8026048 <strspn+0x10>
 8026054:	1a30      	subs	r0, r6, r0
 8026056:	bd70      	pop	{r4, r5, r6, pc}

08026058 <strstr>:
 8026058:	780a      	ldrb	r2, [r1, #0]
 802605a:	b570      	push	{r4, r5, r6, lr}
 802605c:	b96a      	cbnz	r2, 802607a <strstr+0x22>
 802605e:	bd70      	pop	{r4, r5, r6, pc}
 8026060:	429a      	cmp	r2, r3
 8026062:	d109      	bne.n	8026078 <strstr+0x20>
 8026064:	460c      	mov	r4, r1
 8026066:	4605      	mov	r5, r0
 8026068:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802606c:	2b00      	cmp	r3, #0
 802606e:	d0f6      	beq.n	802605e <strstr+0x6>
 8026070:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8026074:	429e      	cmp	r6, r3
 8026076:	d0f7      	beq.n	8026068 <strstr+0x10>
 8026078:	3001      	adds	r0, #1
 802607a:	7803      	ldrb	r3, [r0, #0]
 802607c:	2b00      	cmp	r3, #0
 802607e:	d1ef      	bne.n	8026060 <strstr+0x8>
 8026080:	4618      	mov	r0, r3
 8026082:	e7ec      	b.n	802605e <strstr+0x6>

08026084 <localtime_r>:
 8026084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026088:	460c      	mov	r4, r1
 802608a:	4680      	mov	r8, r0
 802608c:	f008 f87e 	bl	802e18c <__gettzinfo>
 8026090:	4621      	mov	r1, r4
 8026092:	4605      	mov	r5, r0
 8026094:	4640      	mov	r0, r8
 8026096:	f008 f87d 	bl	802e194 <gmtime_r>
 802609a:	6943      	ldr	r3, [r0, #20]
 802609c:	0799      	lsls	r1, r3, #30
 802609e:	4604      	mov	r4, r0
 80260a0:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 80260a4:	d106      	bne.n	80260b4 <localtime_r+0x30>
 80260a6:	2264      	movs	r2, #100	@ 0x64
 80260a8:	fb97 f3f2 	sdiv	r3, r7, r2
 80260ac:	fb02 7313 	mls	r3, r2, r3, r7
 80260b0:	2b00      	cmp	r3, #0
 80260b2:	d170      	bne.n	8026196 <localtime_r+0x112>
 80260b4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80260b8:	fb97 f3f2 	sdiv	r3, r7, r2
 80260bc:	fb02 7313 	mls	r3, r2, r3, r7
 80260c0:	fab3 f383 	clz	r3, r3
 80260c4:	095b      	lsrs	r3, r3, #5
 80260c6:	4e64      	ldr	r6, [pc, #400]	@ (8026258 <localtime_r+0x1d4>)
 80260c8:	2230      	movs	r2, #48	@ 0x30
 80260ca:	fb02 6603 	mla	r6, r2, r3, r6
 80260ce:	f000 fe97 	bl	8026e00 <__tz_lock>
 80260d2:	f000 fea1 	bl	8026e18 <_tzset_unlocked>
 80260d6:	4b61      	ldr	r3, [pc, #388]	@ (802625c <localtime_r+0x1d8>)
 80260d8:	681b      	ldr	r3, [r3, #0]
 80260da:	2b00      	cmp	r3, #0
 80260dc:	d06a      	beq.n	80261b4 <localtime_r+0x130>
 80260de:	686b      	ldr	r3, [r5, #4]
 80260e0:	42bb      	cmp	r3, r7
 80260e2:	d15a      	bne.n	802619a <localtime_r+0x116>
 80260e4:	682f      	ldr	r7, [r5, #0]
 80260e6:	e9d8 2300 	ldrd	r2, r3, [r8]
 80260ea:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80260ee:	2f00      	cmp	r7, #0
 80260f0:	d15b      	bne.n	80261aa <localtime_r+0x126>
 80260f2:	4282      	cmp	r2, r0
 80260f4:	eb73 0101 	sbcs.w	r1, r3, r1
 80260f8:	db5e      	blt.n	80261b8 <localtime_r+0x134>
 80260fa:	2301      	movs	r3, #1
 80260fc:	6223      	str	r3, [r4, #32]
 80260fe:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8026100:	6861      	ldr	r1, [r4, #4]
 8026102:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8026106:	fb93 f0f2 	sdiv	r0, r3, r2
 802610a:	fb02 3310 	mls	r3, r2, r0, r3
 802610e:	223c      	movs	r2, #60	@ 0x3c
 8026110:	fb93 f5f2 	sdiv	r5, r3, r2
 8026114:	fb02 3215 	mls	r2, r2, r5, r3
 8026118:	6823      	ldr	r3, [r4, #0]
 802611a:	1a9b      	subs	r3, r3, r2
 802611c:	68a2      	ldr	r2, [r4, #8]
 802611e:	6023      	str	r3, [r4, #0]
 8026120:	1b49      	subs	r1, r1, r5
 8026122:	1a12      	subs	r2, r2, r0
 8026124:	2b3b      	cmp	r3, #59	@ 0x3b
 8026126:	6061      	str	r1, [r4, #4]
 8026128:	60a2      	str	r2, [r4, #8]
 802612a:	dd51      	ble.n	80261d0 <localtime_r+0x14c>
 802612c:	3101      	adds	r1, #1
 802612e:	6061      	str	r1, [r4, #4]
 8026130:	3b3c      	subs	r3, #60	@ 0x3c
 8026132:	6023      	str	r3, [r4, #0]
 8026134:	6863      	ldr	r3, [r4, #4]
 8026136:	2b3b      	cmp	r3, #59	@ 0x3b
 8026138:	dd50      	ble.n	80261dc <localtime_r+0x158>
 802613a:	3201      	adds	r2, #1
 802613c:	60a2      	str	r2, [r4, #8]
 802613e:	3b3c      	subs	r3, #60	@ 0x3c
 8026140:	6063      	str	r3, [r4, #4]
 8026142:	68a3      	ldr	r3, [r4, #8]
 8026144:	2b17      	cmp	r3, #23
 8026146:	dd4f      	ble.n	80261e8 <localtime_r+0x164>
 8026148:	69e2      	ldr	r2, [r4, #28]
 802614a:	3201      	adds	r2, #1
 802614c:	61e2      	str	r2, [r4, #28]
 802614e:	69a2      	ldr	r2, [r4, #24]
 8026150:	3201      	adds	r2, #1
 8026152:	2a07      	cmp	r2, #7
 8026154:	bfa8      	it	ge
 8026156:	2200      	movge	r2, #0
 8026158:	61a2      	str	r2, [r4, #24]
 802615a:	68e2      	ldr	r2, [r4, #12]
 802615c:	3b18      	subs	r3, #24
 802615e:	3201      	adds	r2, #1
 8026160:	60a3      	str	r3, [r4, #8]
 8026162:	6923      	ldr	r3, [r4, #16]
 8026164:	60e2      	str	r2, [r4, #12]
 8026166:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802616a:	428a      	cmp	r2, r1
 802616c:	dd0e      	ble.n	802618c <localtime_r+0x108>
 802616e:	2b0b      	cmp	r3, #11
 8026170:	eba2 0201 	sub.w	r2, r2, r1
 8026174:	60e2      	str	r2, [r4, #12]
 8026176:	f103 0201 	add.w	r2, r3, #1
 802617a:	bf09      	itett	eq
 802617c:	6963      	ldreq	r3, [r4, #20]
 802617e:	6122      	strne	r2, [r4, #16]
 8026180:	2200      	moveq	r2, #0
 8026182:	3301      	addeq	r3, #1
 8026184:	bf02      	ittt	eq
 8026186:	6122      	streq	r2, [r4, #16]
 8026188:	6163      	streq	r3, [r4, #20]
 802618a:	61e2      	streq	r2, [r4, #28]
 802618c:	f000 fe3e 	bl	8026e0c <__tz_unlock>
 8026190:	4620      	mov	r0, r4
 8026192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026196:	2301      	movs	r3, #1
 8026198:	e795      	b.n	80260c6 <localtime_r+0x42>
 802619a:	4638      	mov	r0, r7
 802619c:	f000 fd86 	bl	8026cac <__tzcalc_limits>
 80261a0:	2800      	cmp	r0, #0
 80261a2:	d19f      	bne.n	80260e4 <localtime_r+0x60>
 80261a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80261a8:	e004      	b.n	80261b4 <localtime_r+0x130>
 80261aa:	4282      	cmp	r2, r0
 80261ac:	eb73 0101 	sbcs.w	r1, r3, r1
 80261b0:	da02      	bge.n	80261b8 <localtime_r+0x134>
 80261b2:	2300      	movs	r3, #0
 80261b4:	6223      	str	r3, [r4, #32]
 80261b6:	e009      	b.n	80261cc <localtime_r+0x148>
 80261b8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80261bc:	4282      	cmp	r2, r0
 80261be:	418b      	sbcs	r3, r1
 80261c0:	bfb4      	ite	lt
 80261c2:	2301      	movlt	r3, #1
 80261c4:	2300      	movge	r3, #0
 80261c6:	6223      	str	r3, [r4, #32]
 80261c8:	2b00      	cmp	r3, #0
 80261ca:	d198      	bne.n	80260fe <localtime_r+0x7a>
 80261cc:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80261ce:	e797      	b.n	8026100 <localtime_r+0x7c>
 80261d0:	2b00      	cmp	r3, #0
 80261d2:	daaf      	bge.n	8026134 <localtime_r+0xb0>
 80261d4:	3901      	subs	r1, #1
 80261d6:	6061      	str	r1, [r4, #4]
 80261d8:	333c      	adds	r3, #60	@ 0x3c
 80261da:	e7aa      	b.n	8026132 <localtime_r+0xae>
 80261dc:	2b00      	cmp	r3, #0
 80261de:	dab0      	bge.n	8026142 <localtime_r+0xbe>
 80261e0:	3a01      	subs	r2, #1
 80261e2:	60a2      	str	r2, [r4, #8]
 80261e4:	333c      	adds	r3, #60	@ 0x3c
 80261e6:	e7ab      	b.n	8026140 <localtime_r+0xbc>
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	dacf      	bge.n	802618c <localtime_r+0x108>
 80261ec:	69e2      	ldr	r2, [r4, #28]
 80261ee:	3a01      	subs	r2, #1
 80261f0:	61e2      	str	r2, [r4, #28]
 80261f2:	69a2      	ldr	r2, [r4, #24]
 80261f4:	3a01      	subs	r2, #1
 80261f6:	bf48      	it	mi
 80261f8:	2206      	movmi	r2, #6
 80261fa:	61a2      	str	r2, [r4, #24]
 80261fc:	68e2      	ldr	r2, [r4, #12]
 80261fe:	3318      	adds	r3, #24
 8026200:	3a01      	subs	r2, #1
 8026202:	60e2      	str	r2, [r4, #12]
 8026204:	60a3      	str	r3, [r4, #8]
 8026206:	2a00      	cmp	r2, #0
 8026208:	d1c0      	bne.n	802618c <localtime_r+0x108>
 802620a:	6923      	ldr	r3, [r4, #16]
 802620c:	3b01      	subs	r3, #1
 802620e:	d405      	bmi.n	802621c <localtime_r+0x198>
 8026210:	6123      	str	r3, [r4, #16]
 8026212:	6923      	ldr	r3, [r4, #16]
 8026214:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026218:	60e3      	str	r3, [r4, #12]
 802621a:	e7b7      	b.n	802618c <localtime_r+0x108>
 802621c:	230b      	movs	r3, #11
 802621e:	6123      	str	r3, [r4, #16]
 8026220:	6963      	ldr	r3, [r4, #20]
 8026222:	1e5a      	subs	r2, r3, #1
 8026224:	6162      	str	r2, [r4, #20]
 8026226:	0792      	lsls	r2, r2, #30
 8026228:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802622c:	d105      	bne.n	802623a <localtime_r+0x1b6>
 802622e:	2164      	movs	r1, #100	@ 0x64
 8026230:	fb93 f2f1 	sdiv	r2, r3, r1
 8026234:	fb01 3212 	mls	r2, r1, r2, r3
 8026238:	b962      	cbnz	r2, 8026254 <localtime_r+0x1d0>
 802623a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802623e:	fb93 f1f2 	sdiv	r1, r3, r2
 8026242:	fb02 3311 	mls	r3, r2, r1, r3
 8026246:	fab3 f383 	clz	r3, r3
 802624a:	095b      	lsrs	r3, r3, #5
 802624c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8026250:	61e3      	str	r3, [r4, #28]
 8026252:	e7de      	b.n	8026212 <localtime_r+0x18e>
 8026254:	2301      	movs	r3, #1
 8026256:	e7f9      	b.n	802624c <localtime_r+0x1c8>
 8026258:	080340ac 	.word	0x080340ac
 802625c:	200182f0 	.word	0x200182f0

08026260 <iso_year_adjust>:
 8026260:	6942      	ldr	r2, [r0, #20]
 8026262:	2a00      	cmp	r2, #0
 8026264:	f240 736c 	movw	r3, #1900	@ 0x76c
 8026268:	bfa8      	it	ge
 802626a:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802626e:	4413      	add	r3, r2
 8026270:	0792      	lsls	r2, r2, #30
 8026272:	d105      	bne.n	8026280 <iso_year_adjust+0x20>
 8026274:	2164      	movs	r1, #100	@ 0x64
 8026276:	fb93 f2f1 	sdiv	r2, r3, r1
 802627a:	fb01 3212 	mls	r2, r1, r2, r3
 802627e:	b9ca      	cbnz	r2, 80262b4 <iso_year_adjust+0x54>
 8026280:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8026284:	fb93 f1f2 	sdiv	r1, r3, r2
 8026288:	fb02 3311 	mls	r3, r2, r1, r3
 802628c:	fab3 f383 	clz	r3, r3
 8026290:	095b      	lsrs	r3, r3, #5
 8026292:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8026296:	0040      	lsls	r0, r0, #1
 8026298:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802629c:	4418      	add	r0, r3
 802629e:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 80262a2:	4298      	cmp	r0, r3
 80262a4:	d027      	beq.n	80262f6 <iso_year_adjust+0x96>
 80262a6:	dc11      	bgt.n	80262cc <iso_year_adjust+0x6c>
 80262a8:	2801      	cmp	r0, #1
 80262aa:	dc0a      	bgt.n	80262c2 <iso_year_adjust+0x62>
 80262ac:	43c0      	mvns	r0, r0
 80262ae:	0fc0      	lsrs	r0, r0, #31
 80262b0:	4240      	negs	r0, r0
 80262b2:	4770      	bx	lr
 80262b4:	2301      	movs	r3, #1
 80262b6:	e7ec      	b.n	8026292 <iso_year_adjust+0x32>
 80262b8:	4b10      	ldr	r3, [pc, #64]	@ (80262fc <iso_year_adjust+0x9c>)
 80262ba:	40c3      	lsrs	r3, r0
 80262bc:	f343 0000 	sbfx	r0, r3, #0, #1
 80262c0:	4770      	bx	lr
 80262c2:	380a      	subs	r0, #10
 80262c4:	2817      	cmp	r0, #23
 80262c6:	d9f7      	bls.n	80262b8 <iso_year_adjust+0x58>
 80262c8:	2000      	movs	r0, #0
 80262ca:	4770      	bx	lr
 80262cc:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 80262d0:	4298      	cmp	r0, r3
 80262d2:	dc06      	bgt.n	80262e2 <iso_year_adjust+0x82>
 80262d4:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 80262d8:	4298      	cmp	r0, r3
 80262da:	bfd4      	ite	le
 80262dc:	2000      	movle	r0, #0
 80262de:	2001      	movgt	r0, #1
 80262e0:	4770      	bx	lr
 80262e2:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 80262e6:	3802      	subs	r0, #2
 80262e8:	2815      	cmp	r0, #21
 80262ea:	d8ed      	bhi.n	80262c8 <iso_year_adjust+0x68>
 80262ec:	4b04      	ldr	r3, [pc, #16]	@ (8026300 <iso_year_adjust+0xa0>)
 80262ee:	40c3      	lsrs	r3, r0
 80262f0:	f003 0001 	and.w	r0, r3, #1
 80262f4:	4770      	bx	lr
 80262f6:	2001      	movs	r0, #1
 80262f8:	4770      	bx	lr
 80262fa:	bf00      	nop
 80262fc:	00cc00cf 	.word	0x00cc00cf
 8026300:	002a001f 	.word	0x002a001f

08026304 <__strftime.isra.0>:
 8026304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026308:	b08f      	sub	sp, #60	@ 0x3c
 802630a:	461e      	mov	r6, r3
 802630c:	2300      	movs	r3, #0
 802630e:	4607      	mov	r7, r0
 8026310:	460d      	mov	r5, r1
 8026312:	9302      	str	r3, [sp, #8]
 8026314:	461c      	mov	r4, r3
 8026316:	7813      	ldrb	r3, [r2, #0]
 8026318:	2b00      	cmp	r3, #0
 802631a:	f000 84ae 	beq.w	8026c7a <__strftime.isra.0+0x976>
 802631e:	2b25      	cmp	r3, #37	@ 0x25
 8026320:	d11f      	bne.n	8026362 <__strftime.isra.0+0x5e>
 8026322:	f892 9001 	ldrb.w	r9, [r2, #1]
 8026326:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802632a:	d024      	beq.n	8026376 <__strftime.isra.0+0x72>
 802632c:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8026330:	d021      	beq.n	8026376 <__strftime.isra.0+0x72>
 8026332:	f102 0801 	add.w	r8, r2, #1
 8026336:	f04f 0900 	mov.w	r9, #0
 802633a:	f898 2000 	ldrb.w	r2, [r8]
 802633e:	3a31      	subs	r2, #49	@ 0x31
 8026340:	2a08      	cmp	r2, #8
 8026342:	d81b      	bhi.n	802637c <__strftime.isra.0+0x78>
 8026344:	220a      	movs	r2, #10
 8026346:	4640      	mov	r0, r8
 8026348:	a906      	add	r1, sp, #24
 802634a:	f007 fe53 	bl	802dff4 <strtoul>
 802634e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8026352:	4602      	mov	r2, r0
 8026354:	f898 1000 	ldrb.w	r1, [r8]
 8026358:	2945      	cmp	r1, #69	@ 0x45
 802635a:	d111      	bne.n	8026380 <__strftime.isra.0+0x7c>
 802635c:	f108 0801 	add.w	r8, r8, #1
 8026360:	e010      	b.n	8026384 <__strftime.isra.0+0x80>
 8026362:	1e69      	subs	r1, r5, #1
 8026364:	42a1      	cmp	r1, r4
 8026366:	f240 815d 	bls.w	8026624 <__strftime.isra.0+0x320>
 802636a:	553b      	strb	r3, [r7, r4]
 802636c:	3201      	adds	r2, #1
 802636e:	f104 0a01 	add.w	sl, r4, #1
 8026372:	4654      	mov	r4, sl
 8026374:	e7cf      	b.n	8026316 <__strftime.isra.0+0x12>
 8026376:	f102 0802 	add.w	r8, r2, #2
 802637a:	e7de      	b.n	802633a <__strftime.isra.0+0x36>
 802637c:	2200      	movs	r2, #0
 802637e:	e7e9      	b.n	8026354 <__strftime.isra.0+0x50>
 8026380:	294f      	cmp	r1, #79	@ 0x4f
 8026382:	d0eb      	beq.n	802635c <__strftime.isra.0+0x58>
 8026384:	f898 0000 	ldrb.w	r0, [r8]
 8026388:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802638c:	2955      	cmp	r1, #85	@ 0x55
 802638e:	f200 8149 	bhi.w	8026624 <__strftime.isra.0+0x320>
 8026392:	e8df f011 	tbh	[pc, r1, lsl #1]
 8026396:	046a      	.short	0x046a
 8026398:	01470147 	.word	0x01470147
 802639c:	01470147 	.word	0x01470147
 80263a0:	01470147 	.word	0x01470147
 80263a4:	01470147 	.word	0x01470147
 80263a8:	01470147 	.word	0x01470147
 80263ac:	01470147 	.word	0x01470147
 80263b0:	01470147 	.word	0x01470147
 80263b4:	01470147 	.word	0x01470147
 80263b8:	01470147 	.word	0x01470147
 80263bc:	01470147 	.word	0x01470147
 80263c0:	01470147 	.word	0x01470147
 80263c4:	01470147 	.word	0x01470147
 80263c8:	01470147 	.word	0x01470147
 80263cc:	00750147 	.word	0x00750147
 80263d0:	00dc00a3 	.word	0x00dc00a3
 80263d4:	01470128 	.word	0x01470128
 80263d8:	01cb0159 	.word	0x01cb0159
 80263dc:	02590252 	.word	0x02590252
 80263e0:	01470147 	.word	0x01470147
 80263e4:	02710147 	.word	0x02710147
 80263e8:	01470147 	.word	0x01470147
 80263ec:	0147027c 	.word	0x0147027c
 80263f0:	033402ac 	.word	0x033402ac
 80263f4:	036a033e 	.word	0x036a033e
 80263f8:	03d80372 	.word	0x03d80372
 80263fc:	03ee00d8 	.word	0x03ee00d8
 8026400:	01470440 	.word	0x01470440
 8026404:	01470147 	.word	0x01470147
 8026408:	01470147 	.word	0x01470147
 802640c:	00560147 	.word	0x00560147
 8026410:	00ba008d 	.word	0x00ba008d
 8026414:	011d011d 	.word	0x011d011d
 8026418:	017e0147 	.word	0x017e0147
 802641c:	0147008d 	.word	0x0147008d
 8026420:	0252026a 	.word	0x0252026a
 8026424:	026e0259 	.word	0x026e0259
 8026428:	01470273 	.word	0x01470273
 802642c:	02a5027c 	.word	0x02a5027c
 8026430:	02b500d0 	.word	0x02b500d0
 8026434:	035d0336 	.word	0x035d0336
 8026438:	03cf03a4 	.word	0x03cf03a4
 802643c:	03e000d4 	.word	0x03e000d4
 8026440:	0403      	.short	0x0403
 8026442:	69b3      	ldr	r3, [r6, #24]
 8026444:	4aad      	ldr	r2, [pc, #692]	@ (80266fc <__strftime.isra.0+0x3f8>)
 8026446:	3318      	adds	r3, #24
 8026448:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802644c:	4658      	mov	r0, fp
 802644e:	f7d9 ff27 	bl	80002a0 <strlen>
 8026452:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8026456:	eb04 0a00 	add.w	sl, r4, r0
 802645a:	1e6b      	subs	r3, r5, #1
 802645c:	45a2      	cmp	sl, r4
 802645e:	d107      	bne.n	8026470 <__strftime.isra.0+0x16c>
 8026460:	f898 3000 	ldrb.w	r3, [r8]
 8026464:	2b00      	cmp	r3, #0
 8026466:	f000 8409 	beq.w	8026c7c <__strftime.isra.0+0x978>
 802646a:	f108 0201 	add.w	r2, r8, #1
 802646e:	e780      	b.n	8026372 <__strftime.isra.0+0x6e>
 8026470:	42a3      	cmp	r3, r4
 8026472:	f240 80d7 	bls.w	8026624 <__strftime.isra.0+0x320>
 8026476:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802647a:	553a      	strb	r2, [r7, r4]
 802647c:	3401      	adds	r4, #1
 802647e:	e7ed      	b.n	802645c <__strftime.isra.0+0x158>
 8026480:	69b2      	ldr	r2, [r6, #24]
 8026482:	4b9e      	ldr	r3, [pc, #632]	@ (80266fc <__strftime.isra.0+0x3f8>)
 8026484:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026488:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802648c:	4658      	mov	r0, fp
 802648e:	f7d9 ff07 	bl	80002a0 <strlen>
 8026492:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8026496:	eb04 0a00 	add.w	sl, r4, r0
 802649a:	1e6b      	subs	r3, r5, #1
 802649c:	4554      	cmp	r4, sl
 802649e:	d0df      	beq.n	8026460 <__strftime.isra.0+0x15c>
 80264a0:	42a3      	cmp	r3, r4
 80264a2:	f240 80bf 	bls.w	8026624 <__strftime.isra.0+0x320>
 80264a6:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 80264aa:	553a      	strb	r2, [r7, r4]
 80264ac:	3401      	adds	r4, #1
 80264ae:	e7f5      	b.n	802649c <__strftime.isra.0+0x198>
 80264b0:	4b92      	ldr	r3, [pc, #584]	@ (80266fc <__strftime.isra.0+0x3f8>)
 80264b2:	6932      	ldr	r2, [r6, #16]
 80264b4:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80264b8:	4658      	mov	r0, fp
 80264ba:	f7d9 fef1 	bl	80002a0 <strlen>
 80264be:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80264c2:	eb04 0a00 	add.w	sl, r4, r0
 80264c6:	1e6b      	subs	r3, r5, #1
 80264c8:	45a2      	cmp	sl, r4
 80264ca:	d0c9      	beq.n	8026460 <__strftime.isra.0+0x15c>
 80264cc:	42a3      	cmp	r3, r4
 80264ce:	f240 80a9 	bls.w	8026624 <__strftime.isra.0+0x320>
 80264d2:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 80264d6:	553a      	strb	r2, [r7, r4]
 80264d8:	3401      	adds	r4, #1
 80264da:	e7f5      	b.n	80264c8 <__strftime.isra.0+0x1c4>
 80264dc:	6933      	ldr	r3, [r6, #16]
 80264de:	4a87      	ldr	r2, [pc, #540]	@ (80266fc <__strftime.isra.0+0x3f8>)
 80264e0:	330c      	adds	r3, #12
 80264e2:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 80264e6:	4658      	mov	r0, fp
 80264e8:	f7d9 feda 	bl	80002a0 <strlen>
 80264ec:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80264f0:	eb04 0a00 	add.w	sl, r4, r0
 80264f4:	1e6b      	subs	r3, r5, #1
 80264f6:	45a2      	cmp	sl, r4
 80264f8:	d0b2      	beq.n	8026460 <__strftime.isra.0+0x15c>
 80264fa:	42a3      	cmp	r3, r4
 80264fc:	f240 8092 	bls.w	8026624 <__strftime.isra.0+0x320>
 8026500:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8026504:	553a      	strb	r2, [r7, r4]
 8026506:	3401      	adds	r4, #1
 8026508:	e7f5      	b.n	80264f6 <__strftime.isra.0+0x1f2>
 802650a:	4b7c      	ldr	r3, [pc, #496]	@ (80266fc <__strftime.isra.0+0x3f8>)
 802650c:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 8026510:	4650      	mov	r0, sl
 8026512:	f7d9 fec5 	bl	80002a0 <strlen>
 8026516:	f89a 3000 	ldrb.w	r3, [sl]
 802651a:	2b00      	cmp	r3, #0
 802651c:	f000 8341 	beq.w	8026ba2 <__strftime.isra.0+0x89e>
 8026520:	4633      	mov	r3, r6
 8026522:	4652      	mov	r2, sl
 8026524:	1b29      	subs	r1, r5, r4
 8026526:	1938      	adds	r0, r7, r4
 8026528:	f7ff feec 	bl	8026304 <__strftime.isra.0>
 802652c:	2800      	cmp	r0, #0
 802652e:	dd79      	ble.n	8026624 <__strftime.isra.0+0x320>
 8026530:	eb04 0a00 	add.w	sl, r4, r0
 8026534:	e794      	b.n	8026460 <__strftime.isra.0+0x15c>
 8026536:	4b71      	ldr	r3, [pc, #452]	@ (80266fc <__strftime.isra.0+0x3f8>)
 8026538:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802653c:	e7e8      	b.n	8026510 <__strftime.isra.0+0x20c>
 802653e:	4b6f      	ldr	r3, [pc, #444]	@ (80266fc <__strftime.isra.0+0x3f8>)
 8026540:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 8026544:	e7e4      	b.n	8026510 <__strftime.isra.0+0x20c>
 8026546:	4b6d      	ldr	r3, [pc, #436]	@ (80266fc <__strftime.isra.0+0x3f8>)
 8026548:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802654c:	e7e0      	b.n	8026510 <__strftime.isra.0+0x20c>
 802654e:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8026552:	496b      	ldr	r1, [pc, #428]	@ (8026700 <__strftime.isra.0+0x3fc>)
 8026554:	458a      	cmp	sl, r1
 8026556:	bfac      	ite	ge
 8026558:	f04f 0b00 	movge.w	fp, #0
 802655c:	f04f 0b01 	movlt.w	fp, #1
 8026560:	f1ba 0f00 	cmp.w	sl, #0
 8026564:	db12      	blt.n	802658c <__strftime.isra.0+0x288>
 8026566:	2064      	movs	r0, #100	@ 0x64
 8026568:	fb9a f0f0 	sdiv	r0, sl, r0
 802656c:	3013      	adds	r0, #19
 802656e:	f1b9 0f00 	cmp.w	r9, #0
 8026572:	d015      	beq.n	80265a0 <__strftime.isra.0+0x29c>
 8026574:	2863      	cmp	r0, #99	@ 0x63
 8026576:	dd28      	ble.n	80265ca <__strftime.isra.0+0x2c6>
 8026578:	4b62      	ldr	r3, [pc, #392]	@ (8026704 <__strftime.isra.0+0x400>)
 802657a:	4963      	ldr	r1, [pc, #396]	@ (8026708 <__strftime.isra.0+0x404>)
 802657c:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8026580:	bf0c      	ite	eq
 8026582:	469c      	moveq	ip, r3
 8026584:	468c      	movne	ip, r1
 8026586:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 8026724 <__strftime.isra.0+0x420>
 802658a:	e00d      	b.n	80265a8 <__strftime.isra.0+0x2a4>
 802658c:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 8026590:	9203      	str	r2, [sp, #12]
 8026592:	f000 ffa4 	bl	80274de <abs>
 8026596:	2164      	movs	r1, #100	@ 0x64
 8026598:	9a03      	ldr	r2, [sp, #12]
 802659a:	fb90 f0f1 	sdiv	r0, r0, r1
 802659e:	e7e6      	b.n	802656e <__strftime.isra.0+0x26a>
 80265a0:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8026708 <__strftime.isra.0+0x404>
 80265a4:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8026728 <__strftime.isra.0+0x424>
 80265a8:	4b58      	ldr	r3, [pc, #352]	@ (802670c <__strftime.isra.0+0x408>)
 80265aa:	9001      	str	r0, [sp, #4]
 80265ac:	2a02      	cmp	r2, #2
 80265ae:	bf2c      	ite	cs
 80265b0:	ebcb 0102 	rsbcs	r1, fp, r2
 80265b4:	f1cb 0102 	rsbcc	r1, fp, #2
 80265b8:	4a51      	ldr	r2, [pc, #324]	@ (8026700 <__strftime.isra.0+0x3fc>)
 80265ba:	9100      	str	r1, [sp, #0]
 80265bc:	4592      	cmp	sl, r2
 80265be:	bfa8      	it	ge
 80265c0:	4663      	movge	r3, ip
 80265c2:	4672      	mov	r2, lr
 80265c4:	1b29      	subs	r1, r5, r4
 80265c6:	1938      	adds	r0, r7, r4
 80265c8:	e023      	b.n	8026612 <__strftime.isra.0+0x30e>
 80265ca:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 8026708 <__strftime.isra.0+0x404>
 80265ce:	e7da      	b.n	8026586 <__strftime.isra.0+0x282>
 80265d0:	494f      	ldr	r1, [pc, #316]	@ (8026710 <__strftime.isra.0+0x40c>)
 80265d2:	4a50      	ldr	r2, [pc, #320]	@ (8026714 <__strftime.isra.0+0x410>)
 80265d4:	68f3      	ldr	r3, [r6, #12]
 80265d6:	2864      	cmp	r0, #100	@ 0x64
 80265d8:	bf18      	it	ne
 80265da:	460a      	movne	r2, r1
 80265dc:	1b29      	subs	r1, r5, r4
 80265de:	1938      	adds	r0, r7, r4
 80265e0:	f001 ff58 	bl	8028494 <sniprintf>
 80265e4:	e017      	b.n	8026616 <__strftime.isra.0+0x312>
 80265e6:	6970      	ldr	r0, [r6, #20]
 80265e8:	6933      	ldr	r3, [r6, #16]
 80265ea:	2800      	cmp	r0, #0
 80265ec:	f103 0a01 	add.w	sl, r3, #1
 80265f0:	eb07 0b04 	add.w	fp, r7, r4
 80265f4:	68f3      	ldr	r3, [r6, #12]
 80265f6:	eba5 0904 	sub.w	r9, r5, r4
 80265fa:	db19      	blt.n	8026630 <__strftime.isra.0+0x32c>
 80265fc:	2264      	movs	r2, #100	@ 0x64
 80265fe:	fb90 fcf2 	sdiv	ip, r0, r2
 8026602:	fb02 001c 	mls	r0, r2, ip, r0
 8026606:	4a44      	ldr	r2, [pc, #272]	@ (8026718 <__strftime.isra.0+0x414>)
 8026608:	e9cd 3000 	strd	r3, r0, [sp]
 802660c:	4649      	mov	r1, r9
 802660e:	4653      	mov	r3, sl
 8026610:	4658      	mov	r0, fp
 8026612:	f001 ff3f 	bl	8028494 <sniprintf>
 8026616:	2800      	cmp	r0, #0
 8026618:	db04      	blt.n	8026624 <__strftime.isra.0+0x320>
 802661a:	eb00 0a04 	add.w	sl, r0, r4
 802661e:	4555      	cmp	r5, sl
 8026620:	f63f af1e 	bhi.w	8026460 <__strftime.isra.0+0x15c>
 8026624:	f04f 0a00 	mov.w	sl, #0
 8026628:	4650      	mov	r0, sl
 802662a:	b00f      	add	sp, #60	@ 0x3c
 802662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026630:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8026634:	9303      	str	r3, [sp, #12]
 8026636:	f000 ff52 	bl	80274de <abs>
 802663a:	2264      	movs	r2, #100	@ 0x64
 802663c:	9b03      	ldr	r3, [sp, #12]
 802663e:	fb90 fcf2 	sdiv	ip, r0, r2
 8026642:	fb0c 0012 	mls	r0, ip, r2, r0
 8026646:	e7de      	b.n	8026606 <__strftime.isra.0+0x302>
 8026648:	2125      	movs	r1, #37	@ 0x25
 802664a:	f88d 1018 	strb.w	r1, [sp, #24]
 802664e:	f1b9 0f00 	cmp.w	r9, #0
 8026652:	d00b      	beq.n	802666c <__strftime.isra.0+0x368>
 8026654:	2a05      	cmp	r2, #5
 8026656:	f88d 9019 	strb.w	r9, [sp, #25]
 802665a:	d817      	bhi.n	802668c <__strftime.isra.0+0x388>
 802665c:	f10d 001a 	add.w	r0, sp, #26
 8026660:	492e      	ldr	r1, [pc, #184]	@ (802671c <__strftime.isra.0+0x418>)
 8026662:	f000 fe9f 	bl	80273a4 <strcpy>
 8026666:	4633      	mov	r3, r6
 8026668:	aa06      	add	r2, sp, #24
 802666a:	e75b      	b.n	8026524 <__strftime.isra.0+0x220>
 802666c:	232b      	movs	r3, #43	@ 0x2b
 802666e:	f88d 3019 	strb.w	r3, [sp, #25]
 8026672:	2304      	movs	r3, #4
 8026674:	4a2a      	ldr	r2, [pc, #168]	@ (8026720 <__strftime.isra.0+0x41c>)
 8026676:	211e      	movs	r1, #30
 8026678:	f10d 001a 	add.w	r0, sp, #26
 802667c:	f001 ff0a 	bl	8028494 <sniprintf>
 8026680:	2800      	cmp	r0, #0
 8026682:	ddeb      	ble.n	802665c <__strftime.isra.0+0x358>
 8026684:	f10d 031a 	add.w	r3, sp, #26
 8026688:	4418      	add	r0, r3
 802668a:	e7e9      	b.n	8026660 <__strftime.isra.0+0x35c>
 802668c:	1f93      	subs	r3, r2, #6
 802668e:	d0e5      	beq.n	802665c <__strftime.isra.0+0x358>
 8026690:	e7f0      	b.n	8026674 <__strftime.isra.0+0x370>
 8026692:	4630      	mov	r0, r6
 8026694:	f7ff fde4 	bl	8026260 <iso_year_adjust>
 8026698:	4682      	mov	sl, r0
 802669a:	6970      	ldr	r0, [r6, #20]
 802669c:	2800      	cmp	r0, #0
 802669e:	db11      	blt.n	80266c4 <__strftime.isra.0+0x3c0>
 80266a0:	2364      	movs	r3, #100	@ 0x64
 80266a2:	fb90 f2f3 	sdiv	r2, r0, r3
 80266a6:	fb03 0012 	mls	r0, r3, r2, r0
 80266aa:	2364      	movs	r3, #100	@ 0x64
 80266ac:	4482      	add	sl, r0
 80266ae:	fb9a f2f3 	sdiv	r2, sl, r3
 80266b2:	fb03 aa12 	mls	sl, r3, r2, sl
 80266b6:	449a      	add	sl, r3
 80266b8:	fbba f2f3 	udiv	r2, sl, r3
 80266bc:	fb03 a312 	mls	r3, r3, r2, sl
 80266c0:	4a14      	ldr	r2, [pc, #80]	@ (8026714 <__strftime.isra.0+0x410>)
 80266c2:	e78b      	b.n	80265dc <__strftime.isra.0+0x2d8>
 80266c4:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80266c8:	f000 ff09 	bl	80274de <abs>
 80266cc:	2364      	movs	r3, #100	@ 0x64
 80266ce:	f1ba 0f00 	cmp.w	sl, #0
 80266d2:	fb90 f2f3 	sdiv	r2, r0, r3
 80266d6:	fb02 0013 	mls	r0, r2, r3, r0
 80266da:	da07      	bge.n	80266ec <__strftime.isra.0+0x3e8>
 80266dc:	6972      	ldr	r2, [r6, #20]
 80266de:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 80266e2:	429a      	cmp	r2, r3
 80266e4:	bfb8      	it	lt
 80266e6:	f04f 0a01 	movlt.w	sl, #1
 80266ea:	e7de      	b.n	80266aa <__strftime.isra.0+0x3a6>
 80266ec:	d0dd      	beq.n	80266aa <__strftime.isra.0+0x3a6>
 80266ee:	6972      	ldr	r2, [r6, #20]
 80266f0:	4b03      	ldr	r3, [pc, #12]	@ (8026700 <__strftime.isra.0+0x3fc>)
 80266f2:	429a      	cmp	r2, r3
 80266f4:	bfb8      	it	lt
 80266f6:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 80266fa:	e7d6      	b.n	80266aa <__strftime.isra.0+0x3a6>
 80266fc:	080342f8 	.word	0x080342f8
 8026700:	fffff894 	.word	0xfffff894
 8026704:	0803411b 	.word	0x0803411b
 8026708:	08034037 	.word	0x08034037
 802670c:	0803411d 	.word	0x0803411d
 8026710:	0803411f 	.word	0x0803411f
 8026714:	0803412d 	.word	0x0803412d
 8026718:	08034123 	.word	0x08034123
 802671c:	08034136 	.word	0x08034136
 8026720:	08034132 	.word	0x08034132
 8026724:	08034113 	.word	0x08034113
 8026728:	0803410c 	.word	0x0803410c
 802672c:	6971      	ldr	r1, [r6, #20]
 802672e:	48bc      	ldr	r0, [pc, #752]	@ (8026a20 <__strftime.isra.0+0x71c>)
 8026730:	9205      	str	r2, [sp, #20]
 8026732:	4281      	cmp	r1, r0
 8026734:	bfac      	ite	ge
 8026736:	2300      	movge	r3, #0
 8026738:	2301      	movlt	r3, #1
 802673a:	4630      	mov	r0, r6
 802673c:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8026740:	f7ff fd8e 	bl	8026260 <iso_year_adjust>
 8026744:	9904      	ldr	r1, [sp, #16]
 8026746:	9a05      	ldr	r2, [sp, #20]
 8026748:	2900      	cmp	r1, #0
 802674a:	4682      	mov	sl, r0
 802674c:	db3a      	blt.n	80267c4 <__strftime.isra.0+0x4c0>
 802674e:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 8026752:	fb91 fbfb 	sdiv	fp, r1, fp
 8026756:	f10b 0b13 	add.w	fp, fp, #19
 802675a:	6970      	ldr	r0, [r6, #20]
 802675c:	2800      	cmp	r0, #0
 802675e:	db3e      	blt.n	80267de <__strftime.isra.0+0x4da>
 8026760:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8026764:	f1ba 0f00 	cmp.w	sl, #0
 8026768:	fb90 fefc 	sdiv	lr, r0, ip
 802676c:	fb0c 001e 	mls	r0, ip, lr, r0
 8026770:	da4f      	bge.n	8026812 <__strftime.isra.0+0x50e>
 8026772:	4482      	add	sl, r0
 8026774:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8026778:	d157      	bne.n	802682a <__strftime.isra.0+0x526>
 802677a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802677e:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 8026782:	9b03      	ldr	r3, [sp, #12]
 8026784:	2164      	movs	r1, #100	@ 0x64
 8026786:	fb01 aa0b 	mla	sl, r1, fp, sl
 802678a:	2b00      	cmp	r3, #0
 802678c:	f040 81f7 	bne.w	8026b7e <__strftime.isra.0+0x87a>
 8026790:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8026794:	d104      	bne.n	80267a0 <__strftime.isra.0+0x49c>
 8026796:	f242 710f 	movw	r1, #9999	@ 0x270f
 802679a:	458a      	cmp	sl, r1
 802679c:	f200 8275 	bhi.w	8026c8a <__strftime.isra.0+0x986>
 80267a0:	a906      	add	r1, sp, #24
 80267a2:	2025      	movs	r0, #37	@ 0x25
 80267a4:	7008      	strb	r0, [r1, #0]
 80267a6:	f1b9 0f00 	cmp.w	r9, #0
 80267aa:	f040 81f3 	bne.w	8026b94 <__strftime.isra.0+0x890>
 80267ae:	1c48      	adds	r0, r1, #1
 80267b0:	499c      	ldr	r1, [pc, #624]	@ (8026a24 <__strftime.isra.0+0x720>)
 80267b2:	9203      	str	r2, [sp, #12]
 80267b4:	f000 fdf6 	bl	80273a4 <strcpy>
 80267b8:	9a03      	ldr	r2, [sp, #12]
 80267ba:	f8cd a000 	str.w	sl, [sp]
 80267be:	4613      	mov	r3, r2
 80267c0:	aa06      	add	r2, sp, #24
 80267c2:	e098      	b.n	80268f6 <__strftime.isra.0+0x5f2>
 80267c4:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 80267c8:	9205      	str	r2, [sp, #20]
 80267ca:	9104      	str	r1, [sp, #16]
 80267cc:	f000 fe87 	bl	80274de <abs>
 80267d0:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80267d4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80267d8:	fb90 fbfc 	sdiv	fp, r0, ip
 80267dc:	e7bd      	b.n	802675a <__strftime.isra.0+0x456>
 80267de:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80267e2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80267e6:	f000 fe7a 	bl	80274de <abs>
 80267ea:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80267ee:	f1ba 0f00 	cmp.w	sl, #0
 80267f2:	fb90 fefc 	sdiv	lr, r0, ip
 80267f6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80267fa:	fb0e 001c 	mls	r0, lr, ip, r0
 80267fe:	da08      	bge.n	8026812 <__strftime.isra.0+0x50e>
 8026800:	6971      	ldr	r1, [r6, #20]
 8026802:	4b89      	ldr	r3, [pc, #548]	@ (8026a28 <__strftime.isra.0+0x724>)
 8026804:	4299      	cmp	r1, r3
 8026806:	dab4      	bge.n	8026772 <__strftime.isra.0+0x46e>
 8026808:	f04f 0a01 	mov.w	sl, #1
 802680c:	f8cd a00c 	str.w	sl, [sp, #12]
 8026810:	e7af      	b.n	8026772 <__strftime.isra.0+0x46e>
 8026812:	f1ba 0f00 	cmp.w	sl, #0
 8026816:	d0ac      	beq.n	8026772 <__strftime.isra.0+0x46e>
 8026818:	4b81      	ldr	r3, [pc, #516]	@ (8026a20 <__strftime.isra.0+0x71c>)
 802681a:	4299      	cmp	r1, r3
 802681c:	9b03      	ldr	r3, [sp, #12]
 802681e:	bfbc      	itt	lt
 8026820:	2301      	movlt	r3, #1
 8026822:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 8026826:	9303      	str	r3, [sp, #12]
 8026828:	e7a3      	b.n	8026772 <__strftime.isra.0+0x46e>
 802682a:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802682e:	bf04      	itt	eq
 8026830:	f10b 0b01 	addeq.w	fp, fp, #1
 8026834:	f04f 0a00 	moveq.w	sl, #0
 8026838:	e7a3      	b.n	8026782 <__strftime.isra.0+0x47e>
 802683a:	497c      	ldr	r1, [pc, #496]	@ (8026a2c <__strftime.isra.0+0x728>)
 802683c:	4a7c      	ldr	r2, [pc, #496]	@ (8026a30 <__strftime.isra.0+0x72c>)
 802683e:	68b3      	ldr	r3, [r6, #8]
 8026840:	286b      	cmp	r0, #107	@ 0x6b
 8026842:	bf18      	it	ne
 8026844:	460a      	movne	r2, r1
 8026846:	e6c9      	b.n	80265dc <__strftime.isra.0+0x2d8>
 8026848:	68b3      	ldr	r3, [r6, #8]
 802684a:	b163      	cbz	r3, 8026866 <__strftime.isra.0+0x562>
 802684c:	2b0c      	cmp	r3, #12
 802684e:	d004      	beq.n	802685a <__strftime.isra.0+0x556>
 8026850:	210c      	movs	r1, #12
 8026852:	fb93 f2f1 	sdiv	r2, r3, r1
 8026856:	fb01 3312 	mls	r3, r1, r2, r3
 802685a:	4975      	ldr	r1, [pc, #468]	@ (8026a30 <__strftime.isra.0+0x72c>)
 802685c:	4a73      	ldr	r2, [pc, #460]	@ (8026a2c <__strftime.isra.0+0x728>)
 802685e:	2849      	cmp	r0, #73	@ 0x49
 8026860:	bf18      	it	ne
 8026862:	460a      	movne	r2, r1
 8026864:	e6ba      	b.n	80265dc <__strftime.isra.0+0x2d8>
 8026866:	230c      	movs	r3, #12
 8026868:	e7f7      	b.n	802685a <__strftime.isra.0+0x556>
 802686a:	69f3      	ldr	r3, [r6, #28]
 802686c:	4a71      	ldr	r2, [pc, #452]	@ (8026a34 <__strftime.isra.0+0x730>)
 802686e:	3301      	adds	r3, #1
 8026870:	e6b4      	b.n	80265dc <__strftime.isra.0+0x2d8>
 8026872:	6933      	ldr	r3, [r6, #16]
 8026874:	3301      	adds	r3, #1
 8026876:	e723      	b.n	80266c0 <__strftime.isra.0+0x3bc>
 8026878:	6873      	ldr	r3, [r6, #4]
 802687a:	e721      	b.n	80266c0 <__strftime.isra.0+0x3bc>
 802687c:	1e6b      	subs	r3, r5, #1
 802687e:	429c      	cmp	r4, r3
 8026880:	f4bf aed0 	bcs.w	8026624 <__strftime.isra.0+0x320>
 8026884:	f104 0a01 	add.w	sl, r4, #1
 8026888:	230a      	movs	r3, #10
 802688a:	553b      	strb	r3, [r7, r4]
 802688c:	e5e8      	b.n	8026460 <__strftime.isra.0+0x15c>
 802688e:	68b3      	ldr	r3, [r6, #8]
 8026890:	2b0b      	cmp	r3, #11
 8026892:	4b69      	ldr	r3, [pc, #420]	@ (8026a38 <__strftime.isra.0+0x734>)
 8026894:	bfd4      	ite	le
 8026896:	2200      	movle	r2, #0
 8026898:	2201      	movgt	r2, #1
 802689a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802689e:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 80268a2:	4658      	mov	r0, fp
 80268a4:	f7d9 fcfc 	bl	80002a0 <strlen>
 80268a8:	eb04 0a00 	add.w	sl, r4, r0
 80268ac:	4863      	ldr	r0, [pc, #396]	@ (8026a3c <__strftime.isra.0+0x738>)
 80268ae:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80268b2:	1e69      	subs	r1, r5, #1
 80268b4:	45a2      	cmp	sl, r4
 80268b6:	f43f add3 	beq.w	8026460 <__strftime.isra.0+0x15c>
 80268ba:	42a1      	cmp	r1, r4
 80268bc:	f67f aeb2 	bls.w	8026624 <__strftime.isra.0+0x320>
 80268c0:	f898 2000 	ldrb.w	r2, [r8]
 80268c4:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 80268c8:	2a50      	cmp	r2, #80	@ 0x50
 80268ca:	d106      	bne.n	80268da <__strftime.isra.0+0x5d6>
 80268cc:	5cc2      	ldrb	r2, [r0, r3]
 80268ce:	f002 0203 	and.w	r2, r2, #3
 80268d2:	2a01      	cmp	r2, #1
 80268d4:	bf08      	it	eq
 80268d6:	3320      	addeq	r3, #32
 80268d8:	b2db      	uxtb	r3, r3
 80268da:	553b      	strb	r3, [r7, r4]
 80268dc:	3401      	adds	r4, #1
 80268de:	e7e9      	b.n	80268b4 <__strftime.isra.0+0x5b0>
 80268e0:	2203      	movs	r2, #3
 80268e2:	6933      	ldr	r3, [r6, #16]
 80268e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80268e8:	4a55      	ldr	r2, [pc, #340]	@ (8026a40 <__strftime.isra.0+0x73c>)
 80268ea:	3301      	adds	r3, #1
 80268ec:	e676      	b.n	80265dc <__strftime.isra.0+0x2d8>
 80268ee:	6873      	ldr	r3, [r6, #4]
 80268f0:	9300      	str	r3, [sp, #0]
 80268f2:	68b3      	ldr	r3, [r6, #8]
 80268f4:	4a53      	ldr	r2, [pc, #332]	@ (8026a44 <__strftime.isra.0+0x740>)
 80268f6:	1b29      	subs	r1, r5, r4
 80268f8:	1938      	adds	r0, r7, r4
 80268fa:	f001 fdcb 	bl	8028494 <sniprintf>
 80268fe:	e68a      	b.n	8026616 <__strftime.isra.0+0x312>
 8026900:	6a33      	ldr	r3, [r6, #32]
 8026902:	2b00      	cmp	r3, #0
 8026904:	db78      	blt.n	80269f8 <__strftime.isra.0+0x6f4>
 8026906:	f000 fa7b 	bl	8026e00 <__tz_lock>
 802690a:	9b02      	ldr	r3, [sp, #8]
 802690c:	b90b      	cbnz	r3, 8026912 <__strftime.isra.0+0x60e>
 802690e:	f000 fa83 	bl	8026e18 <_tzset_unlocked>
 8026912:	f007 fc3b 	bl	802e18c <__gettzinfo>
 8026916:	6a33      	ldr	r3, [r6, #32]
 8026918:	2b00      	cmp	r3, #0
 802691a:	bfd4      	ite	le
 802691c:	2200      	movle	r2, #0
 802691e:	2201      	movgt	r2, #1
 8026920:	2328      	movs	r3, #40	@ 0x28
 8026922:	fb02 3303 	mla	r3, r2, r3, r3
 8026926:	58c3      	ldr	r3, [r0, r3]
 8026928:	f1c3 0a00 	rsb	sl, r3, #0
 802692c:	f000 fa6e 	bl	8026e0c <__tz_unlock>
 8026930:	2301      	movs	r3, #1
 8026932:	9302      	str	r3, [sp, #8]
 8026934:	6972      	ldr	r2, [r6, #20]
 8026936:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802693a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802693e:	f16c 0c00 	sbc.w	ip, ip, #0
 8026942:	f1bc 0f00 	cmp.w	ip, #0
 8026946:	eba5 0104 	sub.w	r1, r5, r4
 802694a:	eb07 0004 	add.w	r0, r7, r4
 802694e:	da02      	bge.n	8026956 <__strftime.isra.0+0x652>
 8026950:	3303      	adds	r3, #3
 8026952:	f14c 0c00 	adc.w	ip, ip, #0
 8026956:	089b      	lsrs	r3, r3, #2
 8026958:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802695c:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 8026960:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 8026964:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8026968:	fb9e fefb 	sdiv	lr, lr, fp
 802696c:	ebb3 030e 	subs.w	r3, r3, lr
 8026970:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8026974:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 8026978:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802697c:	fb9e fefb 	sdiv	lr, lr, fp
 8026980:	eb13 030e 	adds.w	r3, r3, lr
 8026984:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 8026988:	3a46      	subs	r2, #70	@ 0x46
 802698a:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802698e:	fb0e f202 	mul.w	r2, lr, r2
 8026992:	189b      	adds	r3, r3, r2
 8026994:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 8026998:	69f2      	ldr	r2, [r6, #28]
 802699a:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802699e:	189b      	adds	r3, r3, r2
 80269a0:	f04f 0e18 	mov.w	lr, #24
 80269a4:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 80269a8:	fba3 230e 	umull	r2, r3, r3, lr
 80269ac:	fb0e 330c 	mla	r3, lr, ip, r3
 80269b0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80269b4:	eb12 020c 	adds.w	r2, r2, ip
 80269b8:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 80269bc:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 80269c0:	fba2 2e0c 	umull	r2, lr, r2, ip
 80269c4:	fb0c ee03 	mla	lr, ip, r3, lr
 80269c8:	eb12 030b 	adds.w	r3, r2, fp
 80269cc:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 80269d0:	fba3 e30c 	umull	lr, r3, r3, ip
 80269d4:	fb0c 3302 	mla	r3, ip, r2, r3
 80269d8:	f8d6 c000 	ldr.w	ip, [r6]
 80269dc:	eb1e 020c 	adds.w	r2, lr, ip
 80269e0:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 80269e4:	ebb2 020a 	subs.w	r2, r2, sl
 80269e8:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 80269ec:	e9cd 2300 	strd	r2, r3, [sp]
 80269f0:	4a15      	ldr	r2, [pc, #84]	@ (8026a48 <__strftime.isra.0+0x744>)
 80269f2:	f001 fd4f 	bl	8028494 <sniprintf>
 80269f6:	e60e      	b.n	8026616 <__strftime.isra.0+0x312>
 80269f8:	f04f 0a00 	mov.w	sl, #0
 80269fc:	e79a      	b.n	8026934 <__strftime.isra.0+0x630>
 80269fe:	6833      	ldr	r3, [r6, #0]
 8026a00:	e65e      	b.n	80266c0 <__strftime.isra.0+0x3bc>
 8026a02:	1e6b      	subs	r3, r5, #1
 8026a04:	429c      	cmp	r4, r3
 8026a06:	f4bf ae0d 	bcs.w	8026624 <__strftime.isra.0+0x320>
 8026a0a:	f104 0a01 	add.w	sl, r4, #1
 8026a0e:	2309      	movs	r3, #9
 8026a10:	e73b      	b.n	802688a <__strftime.isra.0+0x586>
 8026a12:	6833      	ldr	r3, [r6, #0]
 8026a14:	9301      	str	r3, [sp, #4]
 8026a16:	6873      	ldr	r3, [r6, #4]
 8026a18:	9300      	str	r3, [sp, #0]
 8026a1a:	68b3      	ldr	r3, [r6, #8]
 8026a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8026a4c <__strftime.isra.0+0x748>)
 8026a1e:	e5d1      	b.n	80265c4 <__strftime.isra.0+0x2c0>
 8026a20:	fffff894 	.word	0xfffff894
 8026a24:	0803413e 	.word	0x0803413e
 8026a28:	fffff895 	.word	0xfffff895
 8026a2c:	0803412d 	.word	0x0803412d
 8026a30:	0803411f 	.word	0x0803411f
 8026a34:	08034142 	.word	0x08034142
 8026a38:	080342f8 	.word	0x080342f8
 8026a3c:	080343f5 	.word	0x080343f5
 8026a40:	08034147 	.word	0x08034147
 8026a44:	08034156 	.word	0x08034156
 8026a48:	0803414c 	.word	0x0803414c
 8026a4c:	08034151 	.word	0x08034151
 8026a50:	1e6b      	subs	r3, r5, #1
 8026a52:	429c      	cmp	r4, r3
 8026a54:	f4bf ade6 	bcs.w	8026624 <__strftime.isra.0+0x320>
 8026a58:	69b3      	ldr	r3, [r6, #24]
 8026a5a:	b91b      	cbnz	r3, 8026a64 <__strftime.isra.0+0x760>
 8026a5c:	2337      	movs	r3, #55	@ 0x37
 8026a5e:	f104 0a01 	add.w	sl, r4, #1
 8026a62:	e712      	b.n	802688a <__strftime.isra.0+0x586>
 8026a64:	3330      	adds	r3, #48	@ 0x30
 8026a66:	b2db      	uxtb	r3, r3
 8026a68:	e7f9      	b.n	8026a5e <__strftime.isra.0+0x75a>
 8026a6a:	69f3      	ldr	r3, [r6, #28]
 8026a6c:	69b2      	ldr	r2, [r6, #24]
 8026a6e:	3307      	adds	r3, #7
 8026a70:	1a9b      	subs	r3, r3, r2
 8026a72:	2207      	movs	r2, #7
 8026a74:	fb93 f3f2 	sdiv	r3, r3, r2
 8026a78:	e622      	b.n	80266c0 <__strftime.isra.0+0x3bc>
 8026a7a:	4630      	mov	r0, r6
 8026a7c:	f7ff fbf0 	bl	8026260 <iso_year_adjust>
 8026a80:	69b2      	ldr	r2, [r6, #24]
 8026a82:	b132      	cbz	r2, 8026a92 <__strftime.isra.0+0x78e>
 8026a84:	3a01      	subs	r2, #1
 8026a86:	2800      	cmp	r0, #0
 8026a88:	69f3      	ldr	r3, [r6, #28]
 8026a8a:	dc26      	bgt.n	8026ada <__strftime.isra.0+0x7d6>
 8026a8c:	d103      	bne.n	8026a96 <__strftime.isra.0+0x792>
 8026a8e:	330a      	adds	r3, #10
 8026a90:	e7ee      	b.n	8026a70 <__strftime.isra.0+0x76c>
 8026a92:	2206      	movs	r2, #6
 8026a94:	e7f7      	b.n	8026a86 <__strftime.isra.0+0x782>
 8026a96:	1ad2      	subs	r2, r2, r3
 8026a98:	6973      	ldr	r3, [r6, #20]
 8026a9a:	2b00      	cmp	r3, #0
 8026a9c:	f240 716b 	movw	r1, #1899	@ 0x76b
 8026aa0:	bfa8      	it	ge
 8026aa2:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 8026aa6:	440b      	add	r3, r1
 8026aa8:	0799      	lsls	r1, r3, #30
 8026aaa:	d105      	bne.n	8026ab8 <__strftime.isra.0+0x7b4>
 8026aac:	2064      	movs	r0, #100	@ 0x64
 8026aae:	fb93 f1f0 	sdiv	r1, r3, r0
 8026ab2:	fb00 3111 	mls	r1, r0, r1, r3
 8026ab6:	b971      	cbnz	r1, 8026ad6 <__strftime.isra.0+0x7d2>
 8026ab8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026abc:	fb93 f0f1 	sdiv	r0, r3, r1
 8026ac0:	fb01 3310 	mls	r3, r1, r0, r3
 8026ac4:	fab3 f383 	clz	r3, r3
 8026ac8:	095b      	lsrs	r3, r3, #5
 8026aca:	1ad2      	subs	r2, r2, r3
 8026acc:	2a04      	cmp	r2, #4
 8026ace:	bfcc      	ite	gt
 8026ad0:	2334      	movgt	r3, #52	@ 0x34
 8026ad2:	2335      	movle	r3, #53	@ 0x35
 8026ad4:	e5f4      	b.n	80266c0 <__strftime.isra.0+0x3bc>
 8026ad6:	2301      	movs	r3, #1
 8026ad8:	e7f7      	b.n	8026aca <__strftime.isra.0+0x7c6>
 8026ada:	2301      	movs	r3, #1
 8026adc:	e5f0      	b.n	80266c0 <__strftime.isra.0+0x3bc>
 8026ade:	496c      	ldr	r1, [pc, #432]	@ (8026c90 <__strftime.isra.0+0x98c>)
 8026ae0:	9203      	str	r2, [sp, #12]
 8026ae2:	a806      	add	r0, sp, #24
 8026ae4:	f000 fc5e 	bl	80273a4 <strcpy>
 8026ae8:	a806      	add	r0, sp, #24
 8026aea:	f7d9 fbd9 	bl	80002a0 <strlen>
 8026aee:	ab06      	add	r3, sp, #24
 8026af0:	eb03 0a00 	add.w	sl, r3, r0
 8026af4:	f10a 0a01 	add.w	sl, sl, #1
 8026af8:	46d3      	mov	fp, sl
 8026afa:	f1b9 0f00 	cmp.w	r9, #0
 8026afe:	d009      	beq.n	8026b14 <__strftime.isra.0+0x810>
 8026b00:	9a03      	ldr	r2, [sp, #12]
 8026b02:	f803 9000 	strb.w	r9, [r3, r0]
 8026b06:	2a05      	cmp	r2, #5
 8026b08:	d901      	bls.n	8026b0e <__strftime.isra.0+0x80a>
 8026b0a:	1f93      	subs	r3, r2, #6
 8026b0c:	d106      	bne.n	8026b1c <__strftime.isra.0+0x818>
 8026b0e:	4961      	ldr	r1, [pc, #388]	@ (8026c94 <__strftime.isra.0+0x990>)
 8026b10:	4658      	mov	r0, fp
 8026b12:	e5a6      	b.n	8026662 <__strftime.isra.0+0x35e>
 8026b14:	aa06      	add	r2, sp, #24
 8026b16:	232b      	movs	r3, #43	@ 0x2b
 8026b18:	5413      	strb	r3, [r2, r0]
 8026b1a:	2304      	movs	r3, #4
 8026b1c:	a90e      	add	r1, sp, #56	@ 0x38
 8026b1e:	4a5e      	ldr	r2, [pc, #376]	@ (8026c98 <__strftime.isra.0+0x994>)
 8026b20:	eba1 010a 	sub.w	r1, r1, sl
 8026b24:	4650      	mov	r0, sl
 8026b26:	f001 fcb5 	bl	8028494 <sniprintf>
 8026b2a:	2800      	cmp	r0, #0
 8026b2c:	bfc8      	it	gt
 8026b2e:	eb0a 0b00 	addgt.w	fp, sl, r0
 8026b32:	e7ec      	b.n	8026b0e <__strftime.isra.0+0x80a>
 8026b34:	1e6b      	subs	r3, r5, #1
 8026b36:	429c      	cmp	r4, r3
 8026b38:	f4bf ad74 	bcs.w	8026624 <__strftime.isra.0+0x320>
 8026b3c:	69b3      	ldr	r3, [r6, #24]
 8026b3e:	f104 0a01 	add.w	sl, r4, #1
 8026b42:	3330      	adds	r3, #48	@ 0x30
 8026b44:	e6a1      	b.n	802688a <__strftime.isra.0+0x586>
 8026b46:	69b2      	ldr	r2, [r6, #24]
 8026b48:	b11a      	cbz	r2, 8026b52 <__strftime.isra.0+0x84e>
 8026b4a:	3a01      	subs	r2, #1
 8026b4c:	69f3      	ldr	r3, [r6, #28]
 8026b4e:	3307      	adds	r3, #7
 8026b50:	e78e      	b.n	8026a70 <__strftime.isra.0+0x76c>
 8026b52:	2206      	movs	r2, #6
 8026b54:	e7fa      	b.n	8026b4c <__strftime.isra.0+0x848>
 8026b56:	6970      	ldr	r0, [r6, #20]
 8026b58:	2800      	cmp	r0, #0
 8026b5a:	db05      	blt.n	8026b68 <__strftime.isra.0+0x864>
 8026b5c:	2364      	movs	r3, #100	@ 0x64
 8026b5e:	fb90 f2f3 	sdiv	r2, r0, r3
 8026b62:	fb02 0313 	mls	r3, r2, r3, r0
 8026b66:	e5ab      	b.n	80266c0 <__strftime.isra.0+0x3bc>
 8026b68:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8026b6c:	f000 fcb7 	bl	80274de <abs>
 8026b70:	e7f4      	b.n	8026b5c <__strftime.isra.0+0x858>
 8026b72:	6971      	ldr	r1, [r6, #20]
 8026b74:	4849      	ldr	r0, [pc, #292]	@ (8026c9c <__strftime.isra.0+0x998>)
 8026b76:	4281      	cmp	r1, r0
 8026b78:	da09      	bge.n	8026b8e <__strftime.isra.0+0x88a>
 8026b7a:	eba0 0a01 	sub.w	sl, r0, r1
 8026b7e:	212d      	movs	r1, #45	@ 0x2d
 8026b80:	f88d 1018 	strb.w	r1, [sp, #24]
 8026b84:	b102      	cbz	r2, 8026b88 <__strftime.isra.0+0x884>
 8026b86:	3a01      	subs	r2, #1
 8026b88:	f10d 0119 	add.w	r1, sp, #25
 8026b8c:	e609      	b.n	80267a2 <__strftime.isra.0+0x49e>
 8026b8e:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 8026b92:	e5fd      	b.n	8026790 <__strftime.isra.0+0x48c>
 8026b94:	2330      	movs	r3, #48	@ 0x30
 8026b96:	1c88      	adds	r0, r1, #2
 8026b98:	704b      	strb	r3, [r1, #1]
 8026b9a:	e609      	b.n	80267b0 <__strftime.isra.0+0x4ac>
 8026b9c:	6a33      	ldr	r3, [r6, #32]
 8026b9e:	2b00      	cmp	r3, #0
 8026ba0:	da01      	bge.n	8026ba6 <__strftime.isra.0+0x8a2>
 8026ba2:	46a2      	mov	sl, r4
 8026ba4:	e45c      	b.n	8026460 <__strftime.isra.0+0x15c>
 8026ba6:	f000 f92b 	bl	8026e00 <__tz_lock>
 8026baa:	9b02      	ldr	r3, [sp, #8]
 8026bac:	b90b      	cbnz	r3, 8026bb2 <__strftime.isra.0+0x8ae>
 8026bae:	f000 f933 	bl	8026e18 <_tzset_unlocked>
 8026bb2:	f007 faeb 	bl	802e18c <__gettzinfo>
 8026bb6:	6a33      	ldr	r3, [r6, #32]
 8026bb8:	2b00      	cmp	r3, #0
 8026bba:	bfd4      	ite	le
 8026bbc:	2200      	movle	r2, #0
 8026bbe:	2201      	movgt	r2, #1
 8026bc0:	2328      	movs	r3, #40	@ 0x28
 8026bc2:	fb02 3303 	mla	r3, r2, r3, r3
 8026bc6:	eb07 0a04 	add.w	sl, r7, r4
 8026bca:	58c3      	ldr	r3, [r0, r3]
 8026bcc:	f1c3 0900 	rsb	r9, r3, #0
 8026bd0:	f000 f91c 	bl	8026e0c <__tz_unlock>
 8026bd4:	233c      	movs	r3, #60	@ 0x3c
 8026bd6:	fb99 f0f3 	sdiv	r0, r9, r3
 8026bda:	f001 fc1a 	bl	8028412 <labs>
 8026bde:	233c      	movs	r3, #60	@ 0x3c
 8026be0:	eba5 0b04 	sub.w	fp, r5, r4
 8026be4:	fb90 f2f3 	sdiv	r2, r0, r3
 8026be8:	fb02 0013 	mls	r0, r2, r3, r0
 8026bec:	9000      	str	r0, [sp, #0]
 8026bee:	4a2c      	ldr	r2, [pc, #176]	@ (8026ca0 <__strftime.isra.0+0x99c>)
 8026bf0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8026bf4:	4659      	mov	r1, fp
 8026bf6:	4650      	mov	r0, sl
 8026bf8:	fb99 f3f3 	sdiv	r3, r9, r3
 8026bfc:	f001 fc4a 	bl	8028494 <sniprintf>
 8026c00:	2800      	cmp	r0, #0
 8026c02:	f6ff ad0f 	blt.w	8026624 <__strftime.isra.0+0x320>
 8026c06:	eb00 0a04 	add.w	sl, r0, r4
 8026c0a:	4555      	cmp	r5, sl
 8026c0c:	f67f ad0a 	bls.w	8026624 <__strftime.isra.0+0x320>
 8026c10:	2301      	movs	r3, #1
 8026c12:	9302      	str	r3, [sp, #8]
 8026c14:	e424      	b.n	8026460 <__strftime.isra.0+0x15c>
 8026c16:	6a33      	ldr	r3, [r6, #32]
 8026c18:	2b00      	cmp	r3, #0
 8026c1a:	dbc2      	blt.n	8026ba2 <__strftime.isra.0+0x89e>
 8026c1c:	f000 f8f0 	bl	8026e00 <__tz_lock>
 8026c20:	9b02      	ldr	r3, [sp, #8]
 8026c22:	b90b      	cbnz	r3, 8026c28 <__strftime.isra.0+0x924>
 8026c24:	f000 f8f8 	bl	8026e18 <_tzset_unlocked>
 8026c28:	6a33      	ldr	r3, [r6, #32]
 8026c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8026ca4 <__strftime.isra.0+0x9a0>)
 8026c2c:	2b00      	cmp	r3, #0
 8026c2e:	bfd4      	ite	le
 8026c30:	2300      	movle	r3, #0
 8026c32:	2301      	movgt	r3, #1
 8026c34:	46a2      	mov	sl, r4
 8026c36:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026c3a:	4648      	mov	r0, r9
 8026c3c:	f7d9 fb30 	bl	80002a0 <strlen>
 8026c40:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8026c44:	4420      	add	r0, r4
 8026c46:	1e6b      	subs	r3, r5, #1
 8026c48:	4550      	cmp	r0, sl
 8026c4a:	d102      	bne.n	8026c52 <__strftime.isra.0+0x94e>
 8026c4c:	f000 f8de 	bl	8026e0c <__tz_unlock>
 8026c50:	e7de      	b.n	8026c10 <__strftime.isra.0+0x90c>
 8026c52:	4553      	cmp	r3, sl
 8026c54:	d906      	bls.n	8026c64 <__strftime.isra.0+0x960>
 8026c56:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026c5a:	f807 200a 	strb.w	r2, [r7, sl]
 8026c5e:	f10a 0a01 	add.w	sl, sl, #1
 8026c62:	e7f1      	b.n	8026c48 <__strftime.isra.0+0x944>
 8026c64:	f000 f8d2 	bl	8026e0c <__tz_unlock>
 8026c68:	e4dc      	b.n	8026624 <__strftime.isra.0+0x320>
 8026c6a:	1e6b      	subs	r3, r5, #1
 8026c6c:	429c      	cmp	r4, r3
 8026c6e:	f4bf acd9 	bcs.w	8026624 <__strftime.isra.0+0x320>
 8026c72:	f104 0a01 	add.w	sl, r4, #1
 8026c76:	2325      	movs	r3, #37	@ 0x25
 8026c78:	e607      	b.n	802688a <__strftime.isra.0+0x586>
 8026c7a:	46a2      	mov	sl, r4
 8026c7c:	2d00      	cmp	r5, #0
 8026c7e:	f43f acd3 	beq.w	8026628 <__strftime.isra.0+0x324>
 8026c82:	2300      	movs	r3, #0
 8026c84:	f807 300a 	strb.w	r3, [r7, sl]
 8026c88:	e4ce      	b.n	8026628 <__strftime.isra.0+0x324>
 8026c8a:	4649      	mov	r1, r9
 8026c8c:	e778      	b.n	8026b80 <__strftime.isra.0+0x87c>
 8026c8e:	bf00      	nop
 8026c90:	08034160 	.word	0x08034160
 8026c94:	080342c8 	.word	0x080342c8
 8026c98:	08034132 	.word	0x08034132
 8026c9c:	fffff894 	.word	0xfffff894
 8026ca0:	08034168 	.word	0x08034168
 8026ca4:	200006cc 	.word	0x200006cc

08026ca8 <strftime>:
 8026ca8:	f7ff bb2c 	b.w	8026304 <__strftime.isra.0>

08026cac <__tzcalc_limits>:
 8026cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026cb0:	4604      	mov	r4, r0
 8026cb2:	f007 fa6b 	bl	802e18c <__gettzinfo>
 8026cb6:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8026cba:	429c      	cmp	r4, r3
 8026cbc:	f340 8099 	ble.w	8026df2 <__tzcalc_limits+0x146>
 8026cc0:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8026cc4:	19e5      	adds	r5, r4, r7
 8026cc6:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8026cca:	f240 126d 	movw	r2, #365	@ 0x16d
 8026cce:	10ad      	asrs	r5, r5, #2
 8026cd0:	fb02 5503 	mla	r5, r2, r3, r5
 8026cd4:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8026cd8:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8026cdc:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8026ce0:	4f45      	ldr	r7, [pc, #276]	@ (8026df8 <__tzcalc_limits+0x14c>)
 8026ce2:	fb93 f3f2 	sdiv	r3, r3, r2
 8026ce6:	441d      	add	r5, r3
 8026ce8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8026cec:	eb04 030c 	add.w	r3, r4, ip
 8026cf0:	6044      	str	r4, [r0, #4]
 8026cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8026cf6:	4601      	mov	r1, r0
 8026cf8:	441d      	add	r5, r3
 8026cfa:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8026cfe:	7a0b      	ldrb	r3, [r1, #8]
 8026d00:	694a      	ldr	r2, [r1, #20]
 8026d02:	2b4a      	cmp	r3, #74	@ 0x4a
 8026d04:	d133      	bne.n	8026d6e <__tzcalc_limits+0xc2>
 8026d06:	07a6      	lsls	r6, r4, #30
 8026d08:	eb05 0302 	add.w	r3, r5, r2
 8026d0c:	d106      	bne.n	8026d1c <__tzcalc_limits+0x70>
 8026d0e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8026d12:	fb94 f6fe 	sdiv	r6, r4, lr
 8026d16:	fb0e 4616 	mls	r6, lr, r6, r4
 8026d1a:	b936      	cbnz	r6, 8026d2a <__tzcalc_limits+0x7e>
 8026d1c:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8026d20:	fb94 f6fe 	sdiv	r6, r4, lr
 8026d24:	fb0e 4616 	mls	r6, lr, r6, r4
 8026d28:	b9fe      	cbnz	r6, 8026d6a <__tzcalc_limits+0xbe>
 8026d2a:	2a3b      	cmp	r2, #59	@ 0x3b
 8026d2c:	bfd4      	ite	le
 8026d2e:	2200      	movle	r2, #0
 8026d30:	2201      	movgt	r2, #1
 8026d32:	4413      	add	r3, r2
 8026d34:	3b01      	subs	r3, #1
 8026d36:	698a      	ldr	r2, [r1, #24]
 8026d38:	17d6      	asrs	r6, r2, #31
 8026d3a:	fbc3 2607 	smlal	r2, r6, r3, r7
 8026d3e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8026d40:	18d2      	adds	r2, r2, r3
 8026d42:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8026d46:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8026d4a:	3128      	adds	r1, #40	@ 0x28
 8026d4c:	458c      	cmp	ip, r1
 8026d4e:	d1d6      	bne.n	8026cfe <__tzcalc_limits+0x52>
 8026d50:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8026d54:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8026d58:	428c      	cmp	r4, r1
 8026d5a:	4193      	sbcs	r3, r2
 8026d5c:	bfb4      	ite	lt
 8026d5e:	2301      	movlt	r3, #1
 8026d60:	2300      	movge	r3, #0
 8026d62:	6003      	str	r3, [r0, #0]
 8026d64:	2001      	movs	r0, #1
 8026d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026d6a:	2200      	movs	r2, #0
 8026d6c:	e7e1      	b.n	8026d32 <__tzcalc_limits+0x86>
 8026d6e:	2b44      	cmp	r3, #68	@ 0x44
 8026d70:	d101      	bne.n	8026d76 <__tzcalc_limits+0xca>
 8026d72:	18ab      	adds	r3, r5, r2
 8026d74:	e7df      	b.n	8026d36 <__tzcalc_limits+0x8a>
 8026d76:	07a3      	lsls	r3, r4, #30
 8026d78:	d105      	bne.n	8026d86 <__tzcalc_limits+0xda>
 8026d7a:	2664      	movs	r6, #100	@ 0x64
 8026d7c:	fb94 f3f6 	sdiv	r3, r4, r6
 8026d80:	fb06 4313 	mls	r3, r6, r3, r4
 8026d84:	bb7b      	cbnz	r3, 8026de6 <__tzcalc_limits+0x13a>
 8026d86:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8026d8a:	fb94 f6f3 	sdiv	r6, r4, r3
 8026d8e:	fb03 4616 	mls	r6, r3, r6, r4
 8026d92:	fab6 f686 	clz	r6, r6
 8026d96:	0976      	lsrs	r6, r6, #5
 8026d98:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8026dfc <__tzcalc_limits+0x150>
 8026d9c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8026da0:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8026da4:	462b      	mov	r3, r5
 8026da6:	f04f 0800 	mov.w	r8, #0
 8026daa:	fb0a e606 	mla	r6, sl, r6, lr
 8026dae:	f108 0801 	add.w	r8, r8, #1
 8026db2:	45c1      	cmp	r9, r8
 8026db4:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8026db8:	dc17      	bgt.n	8026dea <__tzcalc_limits+0x13e>
 8026dba:	f103 0804 	add.w	r8, r3, #4
 8026dbe:	2607      	movs	r6, #7
 8026dc0:	fb98 f6f6 	sdiv	r6, r8, r6
 8026dc4:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8026dc8:	eba8 0606 	sub.w	r6, r8, r6
 8026dcc:	1b92      	subs	r2, r2, r6
 8026dce:	690e      	ldr	r6, [r1, #16]
 8026dd0:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 8026dd4:	bf48      	it	mi
 8026dd6:	3207      	addmi	r2, #7
 8026dd8:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8026ddc:	4432      	add	r2, r6
 8026dde:	4572      	cmp	r2, lr
 8026de0:	da05      	bge.n	8026dee <__tzcalc_limits+0x142>
 8026de2:	4413      	add	r3, r2
 8026de4:	e7a7      	b.n	8026d36 <__tzcalc_limits+0x8a>
 8026de6:	2601      	movs	r6, #1
 8026de8:	e7d6      	b.n	8026d98 <__tzcalc_limits+0xec>
 8026dea:	4473      	add	r3, lr
 8026dec:	e7df      	b.n	8026dae <__tzcalc_limits+0x102>
 8026dee:	3a07      	subs	r2, #7
 8026df0:	e7f5      	b.n	8026dde <__tzcalc_limits+0x132>
 8026df2:	2000      	movs	r0, #0
 8026df4:	e7b7      	b.n	8026d66 <__tzcalc_limits+0xba>
 8026df6:	bf00      	nop
 8026df8:	00015180 	.word	0x00015180
 8026dfc:	080340a8 	.word	0x080340a8

08026e00 <__tz_lock>:
 8026e00:	4801      	ldr	r0, [pc, #4]	@ (8026e08 <__tz_lock+0x8>)
 8026e02:	f000 bafd 	b.w	8027400 <__retarget_lock_acquire>
 8026e06:	bf00      	nop
 8026e08:	200182f8 	.word	0x200182f8

08026e0c <__tz_unlock>:
 8026e0c:	4801      	ldr	r0, [pc, #4]	@ (8026e14 <__tz_unlock+0x8>)
 8026e0e:	f000 baf9 	b.w	8027404 <__retarget_lock_release>
 8026e12:	bf00      	nop
 8026e14:	200182f8 	.word	0x200182f8

08026e18 <_tzset_unlocked>:
 8026e18:	4b01      	ldr	r3, [pc, #4]	@ (8026e20 <_tzset_unlocked+0x8>)
 8026e1a:	6818      	ldr	r0, [r3, #0]
 8026e1c:	f000 b802 	b.w	8026e24 <_tzset_unlocked_r>
 8026e20:	20000840 	.word	0x20000840

08026e24 <_tzset_unlocked_r>:
 8026e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e28:	b08d      	sub	sp, #52	@ 0x34
 8026e2a:	4607      	mov	r7, r0
 8026e2c:	f007 f9ae 	bl	802e18c <__gettzinfo>
 8026e30:	49bc      	ldr	r1, [pc, #752]	@ (8027124 <_tzset_unlocked_r+0x300>)
 8026e32:	4dbd      	ldr	r5, [pc, #756]	@ (8027128 <_tzset_unlocked_r+0x304>)
 8026e34:	4604      	mov	r4, r0
 8026e36:	4638      	mov	r0, r7
 8026e38:	f001 fae4 	bl	8028404 <_getenv_r>
 8026e3c:	4606      	mov	r6, r0
 8026e3e:	bb10      	cbnz	r0, 8026e86 <_tzset_unlocked_r+0x62>
 8026e40:	4bba      	ldr	r3, [pc, #744]	@ (802712c <_tzset_unlocked_r+0x308>)
 8026e42:	4abb      	ldr	r2, [pc, #748]	@ (8027130 <_tzset_unlocked_r+0x30c>)
 8026e44:	6018      	str	r0, [r3, #0]
 8026e46:	4bbb      	ldr	r3, [pc, #748]	@ (8027134 <_tzset_unlocked_r+0x310>)
 8026e48:	62a0      	str	r0, [r4, #40]	@ 0x28
 8026e4a:	6018      	str	r0, [r3, #0]
 8026e4c:	4bba      	ldr	r3, [pc, #744]	@ (8027138 <_tzset_unlocked_r+0x314>)
 8026e4e:	6520      	str	r0, [r4, #80]	@ 0x50
 8026e50:	e9c3 2200 	strd	r2, r2, [r3]
 8026e54:	214a      	movs	r1, #74	@ 0x4a
 8026e56:	2200      	movs	r2, #0
 8026e58:	2300      	movs	r3, #0
 8026e5a:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8026e5e:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8026e62:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8026e66:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8026e6a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8026e6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8026e72:	6828      	ldr	r0, [r5, #0]
 8026e74:	7221      	strb	r1, [r4, #8]
 8026e76:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8026e7a:	f7fc f8ff 	bl	802307c <free>
 8026e7e:	602e      	str	r6, [r5, #0]
 8026e80:	b00d      	add	sp, #52	@ 0x34
 8026e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e86:	6829      	ldr	r1, [r5, #0]
 8026e88:	2900      	cmp	r1, #0
 8026e8a:	f040 808e 	bne.w	8026faa <_tzset_unlocked_r+0x186>
 8026e8e:	6828      	ldr	r0, [r5, #0]
 8026e90:	f7fc f8f4 	bl	802307c <free>
 8026e94:	4630      	mov	r0, r6
 8026e96:	f7d9 fa03 	bl	80002a0 <strlen>
 8026e9a:	1c41      	adds	r1, r0, #1
 8026e9c:	4638      	mov	r0, r7
 8026e9e:	f7fc f8f5 	bl	802308c <_malloc_r>
 8026ea2:	6028      	str	r0, [r5, #0]
 8026ea4:	2800      	cmp	r0, #0
 8026ea6:	f040 8086 	bne.w	8026fb6 <_tzset_unlocked_r+0x192>
 8026eaa:	4aa2      	ldr	r2, [pc, #648]	@ (8027134 <_tzset_unlocked_r+0x310>)
 8026eac:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8027138 <_tzset_unlocked_r+0x314>
 8026eb0:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802712c <_tzset_unlocked_r+0x308>
 8026eb4:	2300      	movs	r3, #0
 8026eb6:	6013      	str	r3, [r2, #0]
 8026eb8:	4aa0      	ldr	r2, [pc, #640]	@ (802713c <_tzset_unlocked_r+0x318>)
 8026eba:	f8ca 3000 	str.w	r3, [sl]
 8026ebe:	2000      	movs	r0, #0
 8026ec0:	2100      	movs	r1, #0
 8026ec2:	e9c8 2200 	strd	r2, r2, [r8]
 8026ec6:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8026eca:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8026ece:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8026ed2:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8026ed6:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8026eda:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8026ede:	224a      	movs	r2, #74	@ 0x4a
 8026ee0:	7222      	strb	r2, [r4, #8]
 8026ee2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8026ee4:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8026ee8:	6523      	str	r3, [r4, #80]	@ 0x50
 8026eea:	7833      	ldrb	r3, [r6, #0]
 8026eec:	2b3a      	cmp	r3, #58	@ 0x3a
 8026eee:	bf08      	it	eq
 8026ef0:	3601      	addeq	r6, #1
 8026ef2:	7833      	ldrb	r3, [r6, #0]
 8026ef4:	2b3c      	cmp	r3, #60	@ 0x3c
 8026ef6:	d162      	bne.n	8026fbe <_tzset_unlocked_r+0x19a>
 8026ef8:	1c75      	adds	r5, r6, #1
 8026efa:	4a91      	ldr	r2, [pc, #580]	@ (8027140 <_tzset_unlocked_r+0x31c>)
 8026efc:	4991      	ldr	r1, [pc, #580]	@ (8027144 <_tzset_unlocked_r+0x320>)
 8026efe:	ab0a      	add	r3, sp, #40	@ 0x28
 8026f00:	4628      	mov	r0, r5
 8026f02:	f001 fa9d 	bl	8028440 <siscanf>
 8026f06:	2800      	cmp	r0, #0
 8026f08:	ddba      	ble.n	8026e80 <_tzset_unlocked_r+0x5c>
 8026f0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026f0c:	1eda      	subs	r2, r3, #3
 8026f0e:	2a07      	cmp	r2, #7
 8026f10:	d8b6      	bhi.n	8026e80 <_tzset_unlocked_r+0x5c>
 8026f12:	5ceb      	ldrb	r3, [r5, r3]
 8026f14:	2b3e      	cmp	r3, #62	@ 0x3e
 8026f16:	d1b3      	bne.n	8026e80 <_tzset_unlocked_r+0x5c>
 8026f18:	3602      	adds	r6, #2
 8026f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026f1c:	18f5      	adds	r5, r6, r3
 8026f1e:	5cf3      	ldrb	r3, [r6, r3]
 8026f20:	2b2d      	cmp	r3, #45	@ 0x2d
 8026f22:	d15a      	bne.n	8026fda <_tzset_unlocked_r+0x1b6>
 8026f24:	3501      	adds	r5, #1
 8026f26:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8026f2a:	2300      	movs	r3, #0
 8026f2c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026f30:	f8ad 3020 	strh.w	r3, [sp, #32]
 8026f34:	af08      	add	r7, sp, #32
 8026f36:	ab0a      	add	r3, sp, #40	@ 0x28
 8026f38:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8026f3c:	9303      	str	r3, [sp, #12]
 8026f3e:	f10d 031e 	add.w	r3, sp, #30
 8026f42:	9300      	str	r3, [sp, #0]
 8026f44:	4980      	ldr	r1, [pc, #512]	@ (8027148 <_tzset_unlocked_r+0x324>)
 8026f46:	ab0a      	add	r3, sp, #40	@ 0x28
 8026f48:	aa07      	add	r2, sp, #28
 8026f4a:	4628      	mov	r0, r5
 8026f4c:	f001 fa78 	bl	8028440 <siscanf>
 8026f50:	2800      	cmp	r0, #0
 8026f52:	dd95      	ble.n	8026e80 <_tzset_unlocked_r+0x5c>
 8026f54:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8026f58:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8026f5c:	223c      	movs	r2, #60	@ 0x3c
 8026f5e:	fb02 6603 	mla	r6, r2, r3, r6
 8026f62:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8026f66:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8026f6a:	fb02 6603 	mla	r6, r2, r3, r6
 8026f6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026f70:	fb09 f606 	mul.w	r6, r9, r6
 8026f74:	eb05 0903 	add.w	r9, r5, r3
 8026f78:	5ceb      	ldrb	r3, [r5, r3]
 8026f7a:	2b3c      	cmp	r3, #60	@ 0x3c
 8026f7c:	f040 80ee 	bne.w	802715c <_tzset_unlocked_r+0x338>
 8026f80:	f109 0501 	add.w	r5, r9, #1
 8026f84:	4a71      	ldr	r2, [pc, #452]	@ (802714c <_tzset_unlocked_r+0x328>)
 8026f86:	496f      	ldr	r1, [pc, #444]	@ (8027144 <_tzset_unlocked_r+0x320>)
 8026f88:	ab0a      	add	r3, sp, #40	@ 0x28
 8026f8a:	4628      	mov	r0, r5
 8026f8c:	f001 fa58 	bl	8028440 <siscanf>
 8026f90:	2800      	cmp	r0, #0
 8026f92:	dc28      	bgt.n	8026fe6 <_tzset_unlocked_r+0x1c2>
 8026f94:	f899 3001 	ldrb.w	r3, [r9, #1]
 8026f98:	2b3e      	cmp	r3, #62	@ 0x3e
 8026f9a:	d124      	bne.n	8026fe6 <_tzset_unlocked_r+0x1c2>
 8026f9c:	4b68      	ldr	r3, [pc, #416]	@ (8027140 <_tzset_unlocked_r+0x31c>)
 8026f9e:	62a6      	str	r6, [r4, #40]	@ 0x28
 8026fa0:	e9c8 3300 	strd	r3, r3, [r8]
 8026fa4:	f8ca 6000 	str.w	r6, [sl]
 8026fa8:	e76a      	b.n	8026e80 <_tzset_unlocked_r+0x5c>
 8026faa:	f7d9 f919 	bl	80001e0 <strcmp>
 8026fae:	2800      	cmp	r0, #0
 8026fb0:	f47f af6d 	bne.w	8026e8e <_tzset_unlocked_r+0x6a>
 8026fb4:	e764      	b.n	8026e80 <_tzset_unlocked_r+0x5c>
 8026fb6:	4631      	mov	r1, r6
 8026fb8:	f000 f9f4 	bl	80273a4 <strcpy>
 8026fbc:	e775      	b.n	8026eaa <_tzset_unlocked_r+0x86>
 8026fbe:	4a60      	ldr	r2, [pc, #384]	@ (8027140 <_tzset_unlocked_r+0x31c>)
 8026fc0:	4963      	ldr	r1, [pc, #396]	@ (8027150 <_tzset_unlocked_r+0x32c>)
 8026fc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8026fc4:	4630      	mov	r0, r6
 8026fc6:	f001 fa3b 	bl	8028440 <siscanf>
 8026fca:	2800      	cmp	r0, #0
 8026fcc:	f77f af58 	ble.w	8026e80 <_tzset_unlocked_r+0x5c>
 8026fd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026fd2:	3b03      	subs	r3, #3
 8026fd4:	2b07      	cmp	r3, #7
 8026fd6:	d9a0      	bls.n	8026f1a <_tzset_unlocked_r+0xf6>
 8026fd8:	e752      	b.n	8026e80 <_tzset_unlocked_r+0x5c>
 8026fda:	2b2b      	cmp	r3, #43	@ 0x2b
 8026fdc:	bf08      	it	eq
 8026fde:	3501      	addeq	r5, #1
 8026fe0:	f04f 0901 	mov.w	r9, #1
 8026fe4:	e7a1      	b.n	8026f2a <_tzset_unlocked_r+0x106>
 8026fe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026fe8:	1eda      	subs	r2, r3, #3
 8026fea:	2a07      	cmp	r2, #7
 8026fec:	f63f af48 	bhi.w	8026e80 <_tzset_unlocked_r+0x5c>
 8026ff0:	5ceb      	ldrb	r3, [r5, r3]
 8026ff2:	2b3e      	cmp	r3, #62	@ 0x3e
 8026ff4:	f47f af44 	bne.w	8026e80 <_tzset_unlocked_r+0x5c>
 8026ff8:	f109 0902 	add.w	r9, r9, #2
 8026ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026ffe:	eb09 0503 	add.w	r5, r9, r3
 8027002:	f819 3003 	ldrb.w	r3, [r9, r3]
 8027006:	2b2d      	cmp	r3, #45	@ 0x2d
 8027008:	f040 80b7 	bne.w	802717a <_tzset_unlocked_r+0x356>
 802700c:	3501      	adds	r5, #1
 802700e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8027012:	2300      	movs	r3, #0
 8027014:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027018:	f8ad 301e 	strh.w	r3, [sp, #30]
 802701c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8027020:	930a      	str	r3, [sp, #40]	@ 0x28
 8027022:	ab0a      	add	r3, sp, #40	@ 0x28
 8027024:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8027028:	9301      	str	r3, [sp, #4]
 802702a:	f10d 031e 	add.w	r3, sp, #30
 802702e:	9300      	str	r3, [sp, #0]
 8027030:	4945      	ldr	r1, [pc, #276]	@ (8027148 <_tzset_unlocked_r+0x324>)
 8027032:	ab0a      	add	r3, sp, #40	@ 0x28
 8027034:	aa07      	add	r2, sp, #28
 8027036:	4628      	mov	r0, r5
 8027038:	f001 fa02 	bl	8028440 <siscanf>
 802703c:	2800      	cmp	r0, #0
 802703e:	f300 80a2 	bgt.w	8027186 <_tzset_unlocked_r+0x362>
 8027042:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8027046:	9304      	str	r3, [sp, #16]
 8027048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802704a:	4627      	mov	r7, r4
 802704c:	441d      	add	r5, r3
 802704e:	f04f 0b00 	mov.w	fp, #0
 8027052:	782b      	ldrb	r3, [r5, #0]
 8027054:	2b2c      	cmp	r3, #44	@ 0x2c
 8027056:	bf08      	it	eq
 8027058:	3501      	addeq	r5, #1
 802705a:	f895 9000 	ldrb.w	r9, [r5]
 802705e:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8027062:	f040 80a3 	bne.w	80271ac <_tzset_unlocked_r+0x388>
 8027066:	ab0a      	add	r3, sp, #40	@ 0x28
 8027068:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802706c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8027070:	aa09      	add	r2, sp, #36	@ 0x24
 8027072:	9200      	str	r2, [sp, #0]
 8027074:	4937      	ldr	r1, [pc, #220]	@ (8027154 <_tzset_unlocked_r+0x330>)
 8027076:	9303      	str	r3, [sp, #12]
 8027078:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802707c:	4628      	mov	r0, r5
 802707e:	f001 f9df 	bl	8028440 <siscanf>
 8027082:	2803      	cmp	r0, #3
 8027084:	f47f aefc 	bne.w	8026e80 <_tzset_unlocked_r+0x5c>
 8027088:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802708c:	1e4b      	subs	r3, r1, #1
 802708e:	2b0b      	cmp	r3, #11
 8027090:	f63f aef6 	bhi.w	8026e80 <_tzset_unlocked_r+0x5c>
 8027094:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8027098:	1e53      	subs	r3, r2, #1
 802709a:	2b04      	cmp	r3, #4
 802709c:	f63f aef0 	bhi.w	8026e80 <_tzset_unlocked_r+0x5c>
 80270a0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80270a4:	2b06      	cmp	r3, #6
 80270a6:	f63f aeeb 	bhi.w	8026e80 <_tzset_unlocked_r+0x5c>
 80270aa:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80270ae:	f887 9008 	strb.w	r9, [r7, #8]
 80270b2:	617b      	str	r3, [r7, #20]
 80270b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80270b6:	eb05 0903 	add.w	r9, r5, r3
 80270ba:	2500      	movs	r5, #0
 80270bc:	f04f 0302 	mov.w	r3, #2
 80270c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80270c4:	f8ad 501e 	strh.w	r5, [sp, #30]
 80270c8:	f8ad 5020 	strh.w	r5, [sp, #32]
 80270cc:	950a      	str	r5, [sp, #40]	@ 0x28
 80270ce:	f899 3000 	ldrb.w	r3, [r9]
 80270d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80270d4:	f040 8096 	bne.w	8027204 <_tzset_unlocked_r+0x3e0>
 80270d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80270da:	aa08      	add	r2, sp, #32
 80270dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80270e0:	f10d 021e 	add.w	r2, sp, #30
 80270e4:	9200      	str	r2, [sp, #0]
 80270e6:	491c      	ldr	r1, [pc, #112]	@ (8027158 <_tzset_unlocked_r+0x334>)
 80270e8:	9303      	str	r3, [sp, #12]
 80270ea:	aa07      	add	r2, sp, #28
 80270ec:	4648      	mov	r0, r9
 80270ee:	f001 f9a7 	bl	8028440 <siscanf>
 80270f2:	42a8      	cmp	r0, r5
 80270f4:	f300 8086 	bgt.w	8027204 <_tzset_unlocked_r+0x3e0>
 80270f8:	214a      	movs	r1, #74	@ 0x4a
 80270fa:	2200      	movs	r2, #0
 80270fc:	2300      	movs	r3, #0
 80270fe:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8027102:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8027106:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802710a:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802710e:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8027112:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8027116:	7221      	strb	r1, [r4, #8]
 8027118:	62a5      	str	r5, [r4, #40]	@ 0x28
 802711a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802711e:	6525      	str	r5, [r4, #80]	@ 0x50
 8027120:	e6ae      	b.n	8026e80 <_tzset_unlocked_r+0x5c>
 8027122:	bf00      	nop
 8027124:	08034174 	.word	0x08034174
 8027128:	200182d0 	.word	0x200182d0
 802712c:	200182ec 	.word	0x200182ec
 8027130:	08034177 	.word	0x08034177
 8027134:	200182f0 	.word	0x200182f0
 8027138:	200006cc 	.word	0x200006cc
 802713c:	08034037 	.word	0x08034037
 8027140:	200182e0 	.word	0x200182e0
 8027144:	0803417b 	.word	0x0803417b
 8027148:	080341b0 	.word	0x080341b0
 802714c:	200182d4 	.word	0x200182d4
 8027150:	0803418e 	.word	0x0803418e
 8027154:	0803419c 	.word	0x0803419c
 8027158:	080341af 	.word	0x080341af
 802715c:	4a3e      	ldr	r2, [pc, #248]	@ (8027258 <_tzset_unlocked_r+0x434>)
 802715e:	493f      	ldr	r1, [pc, #252]	@ (802725c <_tzset_unlocked_r+0x438>)
 8027160:	ab0a      	add	r3, sp, #40	@ 0x28
 8027162:	4648      	mov	r0, r9
 8027164:	f001 f96c 	bl	8028440 <siscanf>
 8027168:	2800      	cmp	r0, #0
 802716a:	f77f af17 	ble.w	8026f9c <_tzset_unlocked_r+0x178>
 802716e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027170:	3b03      	subs	r3, #3
 8027172:	2b07      	cmp	r3, #7
 8027174:	f67f af42 	bls.w	8026ffc <_tzset_unlocked_r+0x1d8>
 8027178:	e682      	b.n	8026e80 <_tzset_unlocked_r+0x5c>
 802717a:	2b2b      	cmp	r3, #43	@ 0x2b
 802717c:	bf08      	it	eq
 802717e:	3501      	addeq	r5, #1
 8027180:	f04f 0901 	mov.w	r9, #1
 8027184:	e745      	b.n	8027012 <_tzset_unlocked_r+0x1ee>
 8027186:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802718a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802718e:	213c      	movs	r1, #60	@ 0x3c
 8027190:	fb01 3302 	mla	r3, r1, r2, r3
 8027194:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027198:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802719c:	fb01 3302 	mla	r3, r1, r2, r3
 80271a0:	fb09 f303 	mul.w	r3, r9, r3
 80271a4:	e74f      	b.n	8027046 <_tzset_unlocked_r+0x222>
 80271a6:	f04f 0b01 	mov.w	fp, #1
 80271aa:	e752      	b.n	8027052 <_tzset_unlocked_r+0x22e>
 80271ac:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 80271b0:	bf06      	itte	eq
 80271b2:	3501      	addeq	r5, #1
 80271b4:	464b      	moveq	r3, r9
 80271b6:	2344      	movne	r3, #68	@ 0x44
 80271b8:	220a      	movs	r2, #10
 80271ba:	a90b      	add	r1, sp, #44	@ 0x2c
 80271bc:	4628      	mov	r0, r5
 80271be:	9305      	str	r3, [sp, #20]
 80271c0:	f006 ff18 	bl	802dff4 <strtoul>
 80271c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80271c8:	9b05      	ldr	r3, [sp, #20]
 80271ca:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 80271ce:	45a9      	cmp	r9, r5
 80271d0:	d114      	bne.n	80271fc <_tzset_unlocked_r+0x3d8>
 80271d2:	234d      	movs	r3, #77	@ 0x4d
 80271d4:	f1bb 0f00 	cmp.w	fp, #0
 80271d8:	d107      	bne.n	80271ea <_tzset_unlocked_r+0x3c6>
 80271da:	7223      	strb	r3, [r4, #8]
 80271dc:	2103      	movs	r1, #3
 80271de:	2302      	movs	r3, #2
 80271e0:	e9c4 1303 	strd	r1, r3, [r4, #12]
 80271e4:	f8c4 b014 	str.w	fp, [r4, #20]
 80271e8:	e767      	b.n	80270ba <_tzset_unlocked_r+0x296>
 80271ea:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80271ee:	220b      	movs	r2, #11
 80271f0:	2301      	movs	r3, #1
 80271f2:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 80271f6:	2300      	movs	r3, #0
 80271f8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80271fa:	e75e      	b.n	80270ba <_tzset_unlocked_r+0x296>
 80271fc:	b280      	uxth	r0, r0
 80271fe:	723b      	strb	r3, [r7, #8]
 8027200:	6178      	str	r0, [r7, #20]
 8027202:	e75a      	b.n	80270ba <_tzset_unlocked_r+0x296>
 8027204:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027208:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802720c:	213c      	movs	r1, #60	@ 0x3c
 802720e:	fb01 3302 	mla	r3, r1, r2, r3
 8027212:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027216:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802721a:	fb01 3302 	mla	r3, r1, r2, r3
 802721e:	61bb      	str	r3, [r7, #24]
 8027220:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8027222:	3728      	adds	r7, #40	@ 0x28
 8027224:	444d      	add	r5, r9
 8027226:	f1bb 0f00 	cmp.w	fp, #0
 802722a:	d0bc      	beq.n	80271a6 <_tzset_unlocked_r+0x382>
 802722c:	9b04      	ldr	r3, [sp, #16]
 802722e:	6523      	str	r3, [r4, #80]	@ 0x50
 8027230:	4b0b      	ldr	r3, [pc, #44]	@ (8027260 <_tzset_unlocked_r+0x43c>)
 8027232:	f8c8 3000 	str.w	r3, [r8]
 8027236:	6860      	ldr	r0, [r4, #4]
 8027238:	4b07      	ldr	r3, [pc, #28]	@ (8027258 <_tzset_unlocked_r+0x434>)
 802723a:	62a6      	str	r6, [r4, #40]	@ 0x28
 802723c:	f8c8 3004 	str.w	r3, [r8, #4]
 8027240:	f7ff fd34 	bl	8026cac <__tzcalc_limits>
 8027244:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8027246:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8027248:	f8ca 2000 	str.w	r2, [sl]
 802724c:	1a9b      	subs	r3, r3, r2
 802724e:	4a05      	ldr	r2, [pc, #20]	@ (8027264 <_tzset_unlocked_r+0x440>)
 8027250:	bf18      	it	ne
 8027252:	2301      	movne	r3, #1
 8027254:	6013      	str	r3, [r2, #0]
 8027256:	e613      	b.n	8026e80 <_tzset_unlocked_r+0x5c>
 8027258:	200182d4 	.word	0x200182d4
 802725c:	0803418e 	.word	0x0803418e
 8027260:	200182e0 	.word	0x200182e0
 8027264:	200182f0 	.word	0x200182f0

08027268 <__locale_mb_cur_max>:
 8027268:	4b01      	ldr	r3, [pc, #4]	@ (8027270 <__locale_mb_cur_max+0x8>)
 802726a:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802726e:	4770      	bx	lr
 8027270:	200006d4 	.word	0x200006d4

08027274 <_localeconv_r>:
 8027274:	4800      	ldr	r0, [pc, #0]	@ (8027278 <_localeconv_r+0x4>)
 8027276:	4770      	bx	lr
 8027278:	200007c4 	.word	0x200007c4

0802727c <_close_r>:
 802727c:	b538      	push	{r3, r4, r5, lr}
 802727e:	4d06      	ldr	r5, [pc, #24]	@ (8027298 <_close_r+0x1c>)
 8027280:	2300      	movs	r3, #0
 8027282:	4604      	mov	r4, r0
 8027284:	4608      	mov	r0, r1
 8027286:	602b      	str	r3, [r5, #0]
 8027288:	f7db faa0 	bl	80027cc <_close>
 802728c:	1c43      	adds	r3, r0, #1
 802728e:	d102      	bne.n	8027296 <_close_r+0x1a>
 8027290:	682b      	ldr	r3, [r5, #0]
 8027292:	b103      	cbz	r3, 8027296 <_close_r+0x1a>
 8027294:	6023      	str	r3, [r4, #0]
 8027296:	bd38      	pop	{r3, r4, r5, pc}
 8027298:	200182f4 	.word	0x200182f4

0802729c <_reclaim_reent>:
 802729c:	4b14      	ldr	r3, [pc, #80]	@ (80272f0 <_reclaim_reent+0x54>)
 802729e:	681b      	ldr	r3, [r3, #0]
 80272a0:	4283      	cmp	r3, r0
 80272a2:	b570      	push	{r4, r5, r6, lr}
 80272a4:	4604      	mov	r4, r0
 80272a6:	d022      	beq.n	80272ee <_reclaim_reent+0x52>
 80272a8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80272aa:	b153      	cbz	r3, 80272c2 <_reclaim_reent+0x26>
 80272ac:	2500      	movs	r5, #0
 80272ae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80272b0:	5959      	ldr	r1, [r3, r5]
 80272b2:	b9b1      	cbnz	r1, 80272e2 <_reclaim_reent+0x46>
 80272b4:	3504      	adds	r5, #4
 80272b6:	2d80      	cmp	r5, #128	@ 0x80
 80272b8:	d1f9      	bne.n	80272ae <_reclaim_reent+0x12>
 80272ba:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80272bc:	4620      	mov	r0, r4
 80272be:	f000 ffa5 	bl	802820c <_free_r>
 80272c2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80272c4:	b111      	cbz	r1, 80272cc <_reclaim_reent+0x30>
 80272c6:	4620      	mov	r0, r4
 80272c8:	f000 ffa0 	bl	802820c <_free_r>
 80272cc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80272ce:	b111      	cbz	r1, 80272d6 <_reclaim_reent+0x3a>
 80272d0:	4620      	mov	r0, r4
 80272d2:	f000 ff9b 	bl	802820c <_free_r>
 80272d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80272d8:	b14b      	cbz	r3, 80272ee <_reclaim_reent+0x52>
 80272da:	4620      	mov	r0, r4
 80272dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80272e0:	4718      	bx	r3
 80272e2:	680e      	ldr	r6, [r1, #0]
 80272e4:	4620      	mov	r0, r4
 80272e6:	f000 ff91 	bl	802820c <_free_r>
 80272ea:	4631      	mov	r1, r6
 80272ec:	e7e1      	b.n	80272b2 <_reclaim_reent+0x16>
 80272ee:	bd70      	pop	{r4, r5, r6, pc}
 80272f0:	20000840 	.word	0x20000840

080272f4 <_lseek_r>:
 80272f4:	b538      	push	{r3, r4, r5, lr}
 80272f6:	4d07      	ldr	r5, [pc, #28]	@ (8027314 <_lseek_r+0x20>)
 80272f8:	4604      	mov	r4, r0
 80272fa:	4608      	mov	r0, r1
 80272fc:	4611      	mov	r1, r2
 80272fe:	2200      	movs	r2, #0
 8027300:	602a      	str	r2, [r5, #0]
 8027302:	461a      	mov	r2, r3
 8027304:	f7db fa89 	bl	800281a <_lseek>
 8027308:	1c43      	adds	r3, r0, #1
 802730a:	d102      	bne.n	8027312 <_lseek_r+0x1e>
 802730c:	682b      	ldr	r3, [r5, #0]
 802730e:	b103      	cbz	r3, 8027312 <_lseek_r+0x1e>
 8027310:	6023      	str	r3, [r4, #0]
 8027312:	bd38      	pop	{r3, r4, r5, pc}
 8027314:	200182f4 	.word	0x200182f4

08027318 <_read_r>:
 8027318:	b538      	push	{r3, r4, r5, lr}
 802731a:	4d07      	ldr	r5, [pc, #28]	@ (8027338 <_read_r+0x20>)
 802731c:	4604      	mov	r4, r0
 802731e:	4608      	mov	r0, r1
 8027320:	4611      	mov	r1, r2
 8027322:	2200      	movs	r2, #0
 8027324:	602a      	str	r2, [r5, #0]
 8027326:	461a      	mov	r2, r3
 8027328:	f7db fa17 	bl	800275a <_read>
 802732c:	1c43      	adds	r3, r0, #1
 802732e:	d102      	bne.n	8027336 <_read_r+0x1e>
 8027330:	682b      	ldr	r3, [r5, #0]
 8027332:	b103      	cbz	r3, 8027336 <_read_r+0x1e>
 8027334:	6023      	str	r3, [r4, #0]
 8027336:	bd38      	pop	{r3, r4, r5, pc}
 8027338:	200182f4 	.word	0x200182f4

0802733c <_sbrk_r>:
 802733c:	b538      	push	{r3, r4, r5, lr}
 802733e:	4d06      	ldr	r5, [pc, #24]	@ (8027358 <_sbrk_r+0x1c>)
 8027340:	2300      	movs	r3, #0
 8027342:	4604      	mov	r4, r0
 8027344:	4608      	mov	r0, r1
 8027346:	602b      	str	r3, [r5, #0]
 8027348:	f7db fa74 	bl	8002834 <_sbrk>
 802734c:	1c43      	adds	r3, r0, #1
 802734e:	d102      	bne.n	8027356 <_sbrk_r+0x1a>
 8027350:	682b      	ldr	r3, [r5, #0]
 8027352:	b103      	cbz	r3, 8027356 <_sbrk_r+0x1a>
 8027354:	6023      	str	r3, [r4, #0]
 8027356:	bd38      	pop	{r3, r4, r5, pc}
 8027358:	200182f4 	.word	0x200182f4

0802735c <_write_r>:
 802735c:	b538      	push	{r3, r4, r5, lr}
 802735e:	4d07      	ldr	r5, [pc, #28]	@ (802737c <_write_r+0x20>)
 8027360:	4604      	mov	r4, r0
 8027362:	4608      	mov	r0, r1
 8027364:	4611      	mov	r1, r2
 8027366:	2200      	movs	r2, #0
 8027368:	602a      	str	r2, [r5, #0]
 802736a:	461a      	mov	r2, r3
 802736c:	f7db fa12 	bl	8002794 <_write>
 8027370:	1c43      	adds	r3, r0, #1
 8027372:	d102      	bne.n	802737a <_write_r+0x1e>
 8027374:	682b      	ldr	r3, [r5, #0]
 8027376:	b103      	cbz	r3, 802737a <_write_r+0x1e>
 8027378:	6023      	str	r3, [r4, #0]
 802737a:	bd38      	pop	{r3, r4, r5, pc}
 802737c:	200182f4 	.word	0x200182f4

08027380 <__errno>:
 8027380:	4b01      	ldr	r3, [pc, #4]	@ (8027388 <__errno+0x8>)
 8027382:	6818      	ldr	r0, [r3, #0]
 8027384:	4770      	bx	lr
 8027386:	bf00      	nop
 8027388:	20000840 	.word	0x20000840

0802738c <sysconf>:
 802738c:	2808      	cmp	r0, #8
 802738e:	b508      	push	{r3, lr}
 8027390:	d006      	beq.n	80273a0 <sysconf+0x14>
 8027392:	f7ff fff5 	bl	8027380 <__errno>
 8027396:	2316      	movs	r3, #22
 8027398:	6003      	str	r3, [r0, #0]
 802739a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802739e:	bd08      	pop	{r3, pc}
 80273a0:	2080      	movs	r0, #128	@ 0x80
 80273a2:	e7fc      	b.n	802739e <sysconf+0x12>

080273a4 <strcpy>:
 80273a4:	4603      	mov	r3, r0
 80273a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80273aa:	f803 2b01 	strb.w	r2, [r3], #1
 80273ae:	2a00      	cmp	r2, #0
 80273b0:	d1f9      	bne.n	80273a6 <strcpy+0x2>
 80273b2:	4770      	bx	lr

080273b4 <__libc_init_array>:
 80273b4:	b570      	push	{r4, r5, r6, lr}
 80273b6:	4d0d      	ldr	r5, [pc, #52]	@ (80273ec <__libc_init_array+0x38>)
 80273b8:	4c0d      	ldr	r4, [pc, #52]	@ (80273f0 <__libc_init_array+0x3c>)
 80273ba:	1b64      	subs	r4, r4, r5
 80273bc:	10a4      	asrs	r4, r4, #2
 80273be:	2600      	movs	r6, #0
 80273c0:	42a6      	cmp	r6, r4
 80273c2:	d109      	bne.n	80273d8 <__libc_init_array+0x24>
 80273c4:	4d0b      	ldr	r5, [pc, #44]	@ (80273f4 <__libc_init_array+0x40>)
 80273c6:	4c0c      	ldr	r4, [pc, #48]	@ (80273f8 <__libc_init_array+0x44>)
 80273c8:	f007 fcba 	bl	802ed40 <_init>
 80273cc:	1b64      	subs	r4, r4, r5
 80273ce:	10a4      	asrs	r4, r4, #2
 80273d0:	2600      	movs	r6, #0
 80273d2:	42a6      	cmp	r6, r4
 80273d4:	d105      	bne.n	80273e2 <__libc_init_array+0x2e>
 80273d6:	bd70      	pop	{r4, r5, r6, pc}
 80273d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80273dc:	4798      	blx	r3
 80273de:	3601      	adds	r6, #1
 80273e0:	e7ee      	b.n	80273c0 <__libc_init_array+0xc>
 80273e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80273e6:	4798      	blx	r3
 80273e8:	3601      	adds	r6, #1
 80273ea:	e7f2      	b.n	80273d2 <__libc_init_array+0x1e>
 80273ec:	08034808 	.word	0x08034808
 80273f0:	08034808 	.word	0x08034808
 80273f4:	08034808 	.word	0x08034808
 80273f8:	08034810 	.word	0x08034810

080273fc <__retarget_lock_init_recursive>:
 80273fc:	4770      	bx	lr

080273fe <__retarget_lock_close_recursive>:
 80273fe:	4770      	bx	lr

08027400 <__retarget_lock_acquire>:
 8027400:	4770      	bx	lr

08027402 <__retarget_lock_acquire_recursive>:
 8027402:	4770      	bx	lr

08027404 <__retarget_lock_release>:
 8027404:	4770      	bx	lr

08027406 <__retarget_lock_release_recursive>:
 8027406:	4770      	bx	lr

08027408 <memcpy>:
 8027408:	440a      	add	r2, r1
 802740a:	4291      	cmp	r1, r2
 802740c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8027410:	d100      	bne.n	8027414 <memcpy+0xc>
 8027412:	4770      	bx	lr
 8027414:	b510      	push	{r4, lr}
 8027416:	f811 4b01 	ldrb.w	r4, [r1], #1
 802741a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802741e:	4291      	cmp	r1, r2
 8027420:	d1f9      	bne.n	8027416 <memcpy+0xe>
 8027422:	bd10      	pop	{r4, pc}

08027424 <_wcrtomb_r>:
 8027424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027426:	4c09      	ldr	r4, [pc, #36]	@ (802744c <_wcrtomb_r+0x28>)
 8027428:	b085      	sub	sp, #20
 802742a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802742e:	4605      	mov	r5, r0
 8027430:	461e      	mov	r6, r3
 8027432:	b909      	cbnz	r1, 8027438 <_wcrtomb_r+0x14>
 8027434:	460a      	mov	r2, r1
 8027436:	a901      	add	r1, sp, #4
 8027438:	47b8      	blx	r7
 802743a:	1c43      	adds	r3, r0, #1
 802743c:	bf01      	itttt	eq
 802743e:	2300      	moveq	r3, #0
 8027440:	6033      	streq	r3, [r6, #0]
 8027442:	238a      	moveq	r3, #138	@ 0x8a
 8027444:	602b      	streq	r3, [r5, #0]
 8027446:	b005      	add	sp, #20
 8027448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802744a:	bf00      	nop
 802744c:	200006d4 	.word	0x200006d4

08027450 <frexp>:
 8027450:	b570      	push	{r4, r5, r6, lr}
 8027452:	2100      	movs	r1, #0
 8027454:	ec55 4b10 	vmov	r4, r5, d0
 8027458:	6001      	str	r1, [r0, #0]
 802745a:	4915      	ldr	r1, [pc, #84]	@ (80274b0 <frexp+0x60>)
 802745c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8027460:	428a      	cmp	r2, r1
 8027462:	4606      	mov	r6, r0
 8027464:	462b      	mov	r3, r5
 8027466:	d820      	bhi.n	80274aa <frexp+0x5a>
 8027468:	4621      	mov	r1, r4
 802746a:	4311      	orrs	r1, r2
 802746c:	d01d      	beq.n	80274aa <frexp+0x5a>
 802746e:	4911      	ldr	r1, [pc, #68]	@ (80274b4 <frexp+0x64>)
 8027470:	4029      	ands	r1, r5
 8027472:	b961      	cbnz	r1, 802748e <frexp+0x3e>
 8027474:	4b10      	ldr	r3, [pc, #64]	@ (80274b8 <frexp+0x68>)
 8027476:	2200      	movs	r2, #0
 8027478:	4620      	mov	r0, r4
 802747a:	4629      	mov	r1, r5
 802747c:	f7d9 f8d4 	bl	8000628 <__aeabi_dmul>
 8027480:	460b      	mov	r3, r1
 8027482:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8027486:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802748a:	4604      	mov	r4, r0
 802748c:	6031      	str	r1, [r6, #0]
 802748e:	6831      	ldr	r1, [r6, #0]
 8027490:	1512      	asrs	r2, r2, #20
 8027492:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8027496:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802749a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802749e:	4411      	add	r1, r2
 80274a0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80274a4:	6031      	str	r1, [r6, #0]
 80274a6:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 80274aa:	ec45 4b10 	vmov	d0, r4, r5
 80274ae:	bd70      	pop	{r4, r5, r6, pc}
 80274b0:	7fefffff 	.word	0x7fefffff
 80274b4:	7ff00000 	.word	0x7ff00000
 80274b8:	43500000 	.word	0x43500000

080274bc <register_fini>:
 80274bc:	4b02      	ldr	r3, [pc, #8]	@ (80274c8 <register_fini+0xc>)
 80274be:	b113      	cbz	r3, 80274c6 <register_fini+0xa>
 80274c0:	4802      	ldr	r0, [pc, #8]	@ (80274cc <register_fini+0x10>)
 80274c2:	f000 b810 	b.w	80274e6 <atexit>
 80274c6:	4770      	bx	lr
 80274c8:	00000000 	.word	0x00000000
 80274cc:	0802e46d 	.word	0x0802e46d

080274d0 <abort>:
 80274d0:	b508      	push	{r3, lr}
 80274d2:	2006      	movs	r0, #6
 80274d4:	f006 fe52 	bl	802e17c <raise>
 80274d8:	2001      	movs	r0, #1
 80274da:	f7db f933 	bl	8002744 <_exit>

080274de <abs>:
 80274de:	2800      	cmp	r0, #0
 80274e0:	bfb8      	it	lt
 80274e2:	4240      	neglt	r0, r0
 80274e4:	4770      	bx	lr

080274e6 <atexit>:
 80274e6:	2300      	movs	r3, #0
 80274e8:	4601      	mov	r1, r0
 80274ea:	461a      	mov	r2, r3
 80274ec:	4618      	mov	r0, r3
 80274ee:	f007 b891 	b.w	802e614 <__register_exitproc>

080274f2 <quorem>:
 80274f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274f6:	6903      	ldr	r3, [r0, #16]
 80274f8:	690c      	ldr	r4, [r1, #16]
 80274fa:	42a3      	cmp	r3, r4
 80274fc:	4607      	mov	r7, r0
 80274fe:	db7e      	blt.n	80275fe <quorem+0x10c>
 8027500:	3c01      	subs	r4, #1
 8027502:	f101 0814 	add.w	r8, r1, #20
 8027506:	00a3      	lsls	r3, r4, #2
 8027508:	f100 0514 	add.w	r5, r0, #20
 802750c:	9300      	str	r3, [sp, #0]
 802750e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027512:	9301      	str	r3, [sp, #4]
 8027514:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8027518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802751c:	3301      	adds	r3, #1
 802751e:	429a      	cmp	r2, r3
 8027520:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8027524:	fbb2 f6f3 	udiv	r6, r2, r3
 8027528:	d32e      	bcc.n	8027588 <quorem+0x96>
 802752a:	f04f 0a00 	mov.w	sl, #0
 802752e:	46c4      	mov	ip, r8
 8027530:	46ae      	mov	lr, r5
 8027532:	46d3      	mov	fp, sl
 8027534:	f85c 3b04 	ldr.w	r3, [ip], #4
 8027538:	b298      	uxth	r0, r3
 802753a:	fb06 a000 	mla	r0, r6, r0, sl
 802753e:	0c02      	lsrs	r2, r0, #16
 8027540:	0c1b      	lsrs	r3, r3, #16
 8027542:	fb06 2303 	mla	r3, r6, r3, r2
 8027546:	f8de 2000 	ldr.w	r2, [lr]
 802754a:	b280      	uxth	r0, r0
 802754c:	b292      	uxth	r2, r2
 802754e:	1a12      	subs	r2, r2, r0
 8027550:	445a      	add	r2, fp
 8027552:	f8de 0000 	ldr.w	r0, [lr]
 8027556:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802755a:	b29b      	uxth	r3, r3
 802755c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8027560:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8027564:	b292      	uxth	r2, r2
 8027566:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802756a:	45e1      	cmp	r9, ip
 802756c:	f84e 2b04 	str.w	r2, [lr], #4
 8027570:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8027574:	d2de      	bcs.n	8027534 <quorem+0x42>
 8027576:	9b00      	ldr	r3, [sp, #0]
 8027578:	58eb      	ldr	r3, [r5, r3]
 802757a:	b92b      	cbnz	r3, 8027588 <quorem+0x96>
 802757c:	9b01      	ldr	r3, [sp, #4]
 802757e:	3b04      	subs	r3, #4
 8027580:	429d      	cmp	r5, r3
 8027582:	461a      	mov	r2, r3
 8027584:	d32f      	bcc.n	80275e6 <quorem+0xf4>
 8027586:	613c      	str	r4, [r7, #16]
 8027588:	4638      	mov	r0, r7
 802758a:	f005 fa8f 	bl	802caac <__mcmp>
 802758e:	2800      	cmp	r0, #0
 8027590:	db25      	blt.n	80275de <quorem+0xec>
 8027592:	4629      	mov	r1, r5
 8027594:	2000      	movs	r0, #0
 8027596:	f858 2b04 	ldr.w	r2, [r8], #4
 802759a:	f8d1 c000 	ldr.w	ip, [r1]
 802759e:	fa1f fe82 	uxth.w	lr, r2
 80275a2:	fa1f f38c 	uxth.w	r3, ip
 80275a6:	eba3 030e 	sub.w	r3, r3, lr
 80275aa:	4403      	add	r3, r0
 80275ac:	0c12      	lsrs	r2, r2, #16
 80275ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80275b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80275b6:	b29b      	uxth	r3, r3
 80275b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80275bc:	45c1      	cmp	r9, r8
 80275be:	f841 3b04 	str.w	r3, [r1], #4
 80275c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80275c6:	d2e6      	bcs.n	8027596 <quorem+0xa4>
 80275c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80275cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80275d0:	b922      	cbnz	r2, 80275dc <quorem+0xea>
 80275d2:	3b04      	subs	r3, #4
 80275d4:	429d      	cmp	r5, r3
 80275d6:	461a      	mov	r2, r3
 80275d8:	d30b      	bcc.n	80275f2 <quorem+0x100>
 80275da:	613c      	str	r4, [r7, #16]
 80275dc:	3601      	adds	r6, #1
 80275de:	4630      	mov	r0, r6
 80275e0:	b003      	add	sp, #12
 80275e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275e6:	6812      	ldr	r2, [r2, #0]
 80275e8:	3b04      	subs	r3, #4
 80275ea:	2a00      	cmp	r2, #0
 80275ec:	d1cb      	bne.n	8027586 <quorem+0x94>
 80275ee:	3c01      	subs	r4, #1
 80275f0:	e7c6      	b.n	8027580 <quorem+0x8e>
 80275f2:	6812      	ldr	r2, [r2, #0]
 80275f4:	3b04      	subs	r3, #4
 80275f6:	2a00      	cmp	r2, #0
 80275f8:	d1ef      	bne.n	80275da <quorem+0xe8>
 80275fa:	3c01      	subs	r4, #1
 80275fc:	e7ea      	b.n	80275d4 <quorem+0xe2>
 80275fe:	2000      	movs	r0, #0
 8027600:	e7ee      	b.n	80275e0 <quorem+0xee>
 8027602:	0000      	movs	r0, r0
 8027604:	0000      	movs	r0, r0
	...

08027608 <_dtoa_r>:
 8027608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802760c:	b099      	sub	sp, #100	@ 0x64
 802760e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8027612:	9109      	str	r1, [sp, #36]	@ 0x24
 8027614:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8027616:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8027618:	920e      	str	r2, [sp, #56]	@ 0x38
 802761a:	ec55 4b10 	vmov	r4, r5, d0
 802761e:	4683      	mov	fp, r0
 8027620:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027622:	b149      	cbz	r1, 8027638 <_dtoa_r+0x30>
 8027624:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8027626:	604a      	str	r2, [r1, #4]
 8027628:	2301      	movs	r3, #1
 802762a:	4093      	lsls	r3, r2
 802762c:	608b      	str	r3, [r1, #8]
 802762e:	f004 ffec 	bl	802c60a <_Bfree>
 8027632:	2300      	movs	r3, #0
 8027634:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8027638:	1e2b      	subs	r3, r5, #0
 802763a:	bfb9      	ittee	lt
 802763c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8027640:	9303      	strlt	r3, [sp, #12]
 8027642:	2300      	movge	r3, #0
 8027644:	6033      	strge	r3, [r6, #0]
 8027646:	9f03      	ldr	r7, [sp, #12]
 8027648:	4b97      	ldr	r3, [pc, #604]	@ (80278a8 <_dtoa_r+0x2a0>)
 802764a:	bfbc      	itt	lt
 802764c:	2201      	movlt	r2, #1
 802764e:	6032      	strlt	r2, [r6, #0]
 8027650:	43bb      	bics	r3, r7
 8027652:	d114      	bne.n	802767e <_dtoa_r+0x76>
 8027654:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027656:	f242 730f 	movw	r3, #9999	@ 0x270f
 802765a:	6013      	str	r3, [r2, #0]
 802765c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027660:	4323      	orrs	r3, r4
 8027662:	f000 854c 	beq.w	80280fe <_dtoa_r+0xaf6>
 8027666:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027668:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80278c0 <_dtoa_r+0x2b8>
 802766c:	b11b      	cbz	r3, 8027676 <_dtoa_r+0x6e>
 802766e:	f10a 0303 	add.w	r3, sl, #3
 8027672:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027674:	6013      	str	r3, [r2, #0]
 8027676:	4650      	mov	r0, sl
 8027678:	b019      	add	sp, #100	@ 0x64
 802767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802767e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027682:	2200      	movs	r2, #0
 8027684:	ec51 0b17 	vmov	r0, r1, d7
 8027688:	2300      	movs	r3, #0
 802768a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802768e:	f7d9 fa33 	bl	8000af8 <__aeabi_dcmpeq>
 8027692:	4680      	mov	r8, r0
 8027694:	b150      	cbz	r0, 80276ac <_dtoa_r+0xa4>
 8027696:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027698:	2301      	movs	r3, #1
 802769a:	6013      	str	r3, [r2, #0]
 802769c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802769e:	b113      	cbz	r3, 80276a6 <_dtoa_r+0x9e>
 80276a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80276a2:	4b82      	ldr	r3, [pc, #520]	@ (80278ac <_dtoa_r+0x2a4>)
 80276a4:	6013      	str	r3, [r2, #0]
 80276a6:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80278c4 <_dtoa_r+0x2bc>
 80276aa:	e7e4      	b.n	8027676 <_dtoa_r+0x6e>
 80276ac:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80276b0:	aa16      	add	r2, sp, #88	@ 0x58
 80276b2:	a917      	add	r1, sp, #92	@ 0x5c
 80276b4:	4658      	mov	r0, fp
 80276b6:	f005 fb19 	bl	802ccec <__d2b>
 80276ba:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80276be:	4681      	mov	r9, r0
 80276c0:	2e00      	cmp	r6, #0
 80276c2:	d077      	beq.n	80277b4 <_dtoa_r+0x1ac>
 80276c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80276c6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80276ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80276ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80276d2:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80276d6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80276da:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80276de:	4619      	mov	r1, r3
 80276e0:	2200      	movs	r2, #0
 80276e2:	4b73      	ldr	r3, [pc, #460]	@ (80278b0 <_dtoa_r+0x2a8>)
 80276e4:	f7d8 fde8 	bl	80002b8 <__aeabi_dsub>
 80276e8:	a369      	add	r3, pc, #420	@ (adr r3, 8027890 <_dtoa_r+0x288>)
 80276ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80276ee:	f7d8 ff9b 	bl	8000628 <__aeabi_dmul>
 80276f2:	a369      	add	r3, pc, #420	@ (adr r3, 8027898 <_dtoa_r+0x290>)
 80276f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80276f8:	f7d8 fde0 	bl	80002bc <__adddf3>
 80276fc:	4604      	mov	r4, r0
 80276fe:	4630      	mov	r0, r6
 8027700:	460d      	mov	r5, r1
 8027702:	f7d8 ff27 	bl	8000554 <__aeabi_i2d>
 8027706:	a366      	add	r3, pc, #408	@ (adr r3, 80278a0 <_dtoa_r+0x298>)
 8027708:	e9d3 2300 	ldrd	r2, r3, [r3]
 802770c:	f7d8 ff8c 	bl	8000628 <__aeabi_dmul>
 8027710:	4602      	mov	r2, r0
 8027712:	460b      	mov	r3, r1
 8027714:	4620      	mov	r0, r4
 8027716:	4629      	mov	r1, r5
 8027718:	f7d8 fdd0 	bl	80002bc <__adddf3>
 802771c:	4604      	mov	r4, r0
 802771e:	460d      	mov	r5, r1
 8027720:	f7d9 fa32 	bl	8000b88 <__aeabi_d2iz>
 8027724:	2200      	movs	r2, #0
 8027726:	4607      	mov	r7, r0
 8027728:	2300      	movs	r3, #0
 802772a:	4620      	mov	r0, r4
 802772c:	4629      	mov	r1, r5
 802772e:	f7d9 f9ed 	bl	8000b0c <__aeabi_dcmplt>
 8027732:	b140      	cbz	r0, 8027746 <_dtoa_r+0x13e>
 8027734:	4638      	mov	r0, r7
 8027736:	f7d8 ff0d 	bl	8000554 <__aeabi_i2d>
 802773a:	4622      	mov	r2, r4
 802773c:	462b      	mov	r3, r5
 802773e:	f7d9 f9db 	bl	8000af8 <__aeabi_dcmpeq>
 8027742:	b900      	cbnz	r0, 8027746 <_dtoa_r+0x13e>
 8027744:	3f01      	subs	r7, #1
 8027746:	2f16      	cmp	r7, #22
 8027748:	d851      	bhi.n	80277ee <_dtoa_r+0x1e6>
 802774a:	4b5a      	ldr	r3, [pc, #360]	@ (80278b4 <_dtoa_r+0x2ac>)
 802774c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8027750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8027758:	f7d9 f9d8 	bl	8000b0c <__aeabi_dcmplt>
 802775c:	2800      	cmp	r0, #0
 802775e:	d048      	beq.n	80277f2 <_dtoa_r+0x1ea>
 8027760:	3f01      	subs	r7, #1
 8027762:	2300      	movs	r3, #0
 8027764:	9312      	str	r3, [sp, #72]	@ 0x48
 8027766:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027768:	1b9b      	subs	r3, r3, r6
 802776a:	1e5a      	subs	r2, r3, #1
 802776c:	bf44      	itt	mi
 802776e:	f1c3 0801 	rsbmi	r8, r3, #1
 8027772:	2300      	movmi	r3, #0
 8027774:	9208      	str	r2, [sp, #32]
 8027776:	bf54      	ite	pl
 8027778:	f04f 0800 	movpl.w	r8, #0
 802777c:	9308      	strmi	r3, [sp, #32]
 802777e:	2f00      	cmp	r7, #0
 8027780:	db39      	blt.n	80277f6 <_dtoa_r+0x1ee>
 8027782:	9b08      	ldr	r3, [sp, #32]
 8027784:	970f      	str	r7, [sp, #60]	@ 0x3c
 8027786:	443b      	add	r3, r7
 8027788:	9308      	str	r3, [sp, #32]
 802778a:	2300      	movs	r3, #0
 802778c:	930a      	str	r3, [sp, #40]	@ 0x28
 802778e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027790:	2b09      	cmp	r3, #9
 8027792:	d865      	bhi.n	8027860 <_dtoa_r+0x258>
 8027794:	2b05      	cmp	r3, #5
 8027796:	bfc4      	itt	gt
 8027798:	3b04      	subgt	r3, #4
 802779a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802779c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802779e:	f1a3 0302 	sub.w	r3, r3, #2
 80277a2:	bfcc      	ite	gt
 80277a4:	2400      	movgt	r4, #0
 80277a6:	2401      	movle	r4, #1
 80277a8:	2b03      	cmp	r3, #3
 80277aa:	d864      	bhi.n	8027876 <_dtoa_r+0x26e>
 80277ac:	e8df f003 	tbb	[pc, r3]
 80277b0:	5635372a 	.word	0x5635372a
 80277b4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80277b8:	441e      	add	r6, r3
 80277ba:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80277be:	2b20      	cmp	r3, #32
 80277c0:	bfc1      	itttt	gt
 80277c2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80277c6:	409f      	lslgt	r7, r3
 80277c8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80277cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80277d0:	bfd6      	itet	le
 80277d2:	f1c3 0320 	rsble	r3, r3, #32
 80277d6:	ea47 0003 	orrgt.w	r0, r7, r3
 80277da:	fa04 f003 	lslle.w	r0, r4, r3
 80277de:	f7d8 fea9 	bl	8000534 <__aeabi_ui2d>
 80277e2:	2201      	movs	r2, #1
 80277e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80277e8:	3e01      	subs	r6, #1
 80277ea:	9214      	str	r2, [sp, #80]	@ 0x50
 80277ec:	e777      	b.n	80276de <_dtoa_r+0xd6>
 80277ee:	2301      	movs	r3, #1
 80277f0:	e7b8      	b.n	8027764 <_dtoa_r+0x15c>
 80277f2:	9012      	str	r0, [sp, #72]	@ 0x48
 80277f4:	e7b7      	b.n	8027766 <_dtoa_r+0x15e>
 80277f6:	427b      	negs	r3, r7
 80277f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80277fa:	2300      	movs	r3, #0
 80277fc:	eba8 0807 	sub.w	r8, r8, r7
 8027800:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027802:	e7c4      	b.n	802778e <_dtoa_r+0x186>
 8027804:	2300      	movs	r3, #0
 8027806:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802780a:	2b00      	cmp	r3, #0
 802780c:	dc36      	bgt.n	802787c <_dtoa_r+0x274>
 802780e:	2301      	movs	r3, #1
 8027810:	9300      	str	r3, [sp, #0]
 8027812:	9307      	str	r3, [sp, #28]
 8027814:	461a      	mov	r2, r3
 8027816:	920e      	str	r2, [sp, #56]	@ 0x38
 8027818:	e00b      	b.n	8027832 <_dtoa_r+0x22a>
 802781a:	2301      	movs	r3, #1
 802781c:	e7f3      	b.n	8027806 <_dtoa_r+0x1fe>
 802781e:	2300      	movs	r3, #0
 8027820:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027824:	18fb      	adds	r3, r7, r3
 8027826:	9300      	str	r3, [sp, #0]
 8027828:	3301      	adds	r3, #1
 802782a:	2b01      	cmp	r3, #1
 802782c:	9307      	str	r3, [sp, #28]
 802782e:	bfb8      	it	lt
 8027830:	2301      	movlt	r3, #1
 8027832:	2100      	movs	r1, #0
 8027834:	2204      	movs	r2, #4
 8027836:	f102 0014 	add.w	r0, r2, #20
 802783a:	4298      	cmp	r0, r3
 802783c:	d922      	bls.n	8027884 <_dtoa_r+0x27c>
 802783e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8027842:	4658      	mov	r0, fp
 8027844:	f004 febc 	bl	802c5c0 <_Balloc>
 8027848:	4682      	mov	sl, r0
 802784a:	2800      	cmp	r0, #0
 802784c:	d13c      	bne.n	80278c8 <_dtoa_r+0x2c0>
 802784e:	4b1a      	ldr	r3, [pc, #104]	@ (80278b8 <_dtoa_r+0x2b0>)
 8027850:	4602      	mov	r2, r0
 8027852:	f240 11af 	movw	r1, #431	@ 0x1af
 8027856:	4819      	ldr	r0, [pc, #100]	@ (80278bc <_dtoa_r+0x2b4>)
 8027858:	f7fb fb9e 	bl	8022f98 <__assert_func>
 802785c:	2301      	movs	r3, #1
 802785e:	e7df      	b.n	8027820 <_dtoa_r+0x218>
 8027860:	2401      	movs	r4, #1
 8027862:	2300      	movs	r3, #0
 8027864:	9309      	str	r3, [sp, #36]	@ 0x24
 8027866:	940b      	str	r4, [sp, #44]	@ 0x2c
 8027868:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802786c:	9300      	str	r3, [sp, #0]
 802786e:	9307      	str	r3, [sp, #28]
 8027870:	2200      	movs	r2, #0
 8027872:	2312      	movs	r3, #18
 8027874:	e7cf      	b.n	8027816 <_dtoa_r+0x20e>
 8027876:	2301      	movs	r3, #1
 8027878:	930b      	str	r3, [sp, #44]	@ 0x2c
 802787a:	e7f5      	b.n	8027868 <_dtoa_r+0x260>
 802787c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802787e:	9300      	str	r3, [sp, #0]
 8027880:	9307      	str	r3, [sp, #28]
 8027882:	e7d6      	b.n	8027832 <_dtoa_r+0x22a>
 8027884:	3101      	adds	r1, #1
 8027886:	0052      	lsls	r2, r2, #1
 8027888:	e7d5      	b.n	8027836 <_dtoa_r+0x22e>
 802788a:	bf00      	nop
 802788c:	f3af 8000 	nop.w
 8027890:	636f4361 	.word	0x636f4361
 8027894:	3fd287a7 	.word	0x3fd287a7
 8027898:	8b60c8b3 	.word	0x8b60c8b3
 802789c:	3fc68a28 	.word	0x3fc68a28
 80278a0:	509f79fb 	.word	0x509f79fb
 80278a4:	3fd34413 	.word	0x3fd34413
 80278a8:	7ff00000 	.word	0x7ff00000
 80278ac:	0803406b 	.word	0x0803406b
 80278b0:	3ff80000 	.word	0x3ff80000
 80278b4:	08034688 	.word	0x08034688
 80278b8:	08034502 	.word	0x08034502
 80278bc:	08034513 	.word	0x08034513
 80278c0:	080344fe 	.word	0x080344fe
 80278c4:	0803406a 	.word	0x0803406a
 80278c8:	9b07      	ldr	r3, [sp, #28]
 80278ca:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 80278ce:	2b0e      	cmp	r3, #14
 80278d0:	f200 80a4 	bhi.w	8027a1c <_dtoa_r+0x414>
 80278d4:	2c00      	cmp	r4, #0
 80278d6:	f000 80a1 	beq.w	8027a1c <_dtoa_r+0x414>
 80278da:	2f00      	cmp	r7, #0
 80278dc:	dd33      	ble.n	8027946 <_dtoa_r+0x33e>
 80278de:	4bae      	ldr	r3, [pc, #696]	@ (8027b98 <_dtoa_r+0x590>)
 80278e0:	f007 020f 	and.w	r2, r7, #15
 80278e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80278e8:	ed93 7b00 	vldr	d7, [r3]
 80278ec:	05f8      	lsls	r0, r7, #23
 80278ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80278f2:	ea4f 1427 	mov.w	r4, r7, asr #4
 80278f6:	d516      	bpl.n	8027926 <_dtoa_r+0x31e>
 80278f8:	4ba8      	ldr	r3, [pc, #672]	@ (8027b9c <_dtoa_r+0x594>)
 80278fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80278fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8027902:	f7d8 ffbb 	bl	800087c <__aeabi_ddiv>
 8027906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802790a:	f004 040f 	and.w	r4, r4, #15
 802790e:	2603      	movs	r6, #3
 8027910:	4da2      	ldr	r5, [pc, #648]	@ (8027b9c <_dtoa_r+0x594>)
 8027912:	b954      	cbnz	r4, 802792a <_dtoa_r+0x322>
 8027914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802791c:	f7d8 ffae 	bl	800087c <__aeabi_ddiv>
 8027920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027924:	e028      	b.n	8027978 <_dtoa_r+0x370>
 8027926:	2602      	movs	r6, #2
 8027928:	e7f2      	b.n	8027910 <_dtoa_r+0x308>
 802792a:	07e1      	lsls	r1, r4, #31
 802792c:	d508      	bpl.n	8027940 <_dtoa_r+0x338>
 802792e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027932:	e9d5 2300 	ldrd	r2, r3, [r5]
 8027936:	f7d8 fe77 	bl	8000628 <__aeabi_dmul>
 802793a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802793e:	3601      	adds	r6, #1
 8027940:	1064      	asrs	r4, r4, #1
 8027942:	3508      	adds	r5, #8
 8027944:	e7e5      	b.n	8027912 <_dtoa_r+0x30a>
 8027946:	f000 80d2 	beq.w	8027aee <_dtoa_r+0x4e6>
 802794a:	427c      	negs	r4, r7
 802794c:	4b92      	ldr	r3, [pc, #584]	@ (8027b98 <_dtoa_r+0x590>)
 802794e:	4d93      	ldr	r5, [pc, #588]	@ (8027b9c <_dtoa_r+0x594>)
 8027950:	f004 020f 	and.w	r2, r4, #15
 8027954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027958:	e9d3 2300 	ldrd	r2, r3, [r3]
 802795c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8027960:	f7d8 fe62 	bl	8000628 <__aeabi_dmul>
 8027964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027968:	1124      	asrs	r4, r4, #4
 802796a:	2300      	movs	r3, #0
 802796c:	2602      	movs	r6, #2
 802796e:	2c00      	cmp	r4, #0
 8027970:	f040 80b2 	bne.w	8027ad8 <_dtoa_r+0x4d0>
 8027974:	2b00      	cmp	r3, #0
 8027976:	d1d3      	bne.n	8027920 <_dtoa_r+0x318>
 8027978:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802797a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802797e:	2b00      	cmp	r3, #0
 8027980:	f000 80b7 	beq.w	8027af2 <_dtoa_r+0x4ea>
 8027984:	4b86      	ldr	r3, [pc, #536]	@ (8027ba0 <_dtoa_r+0x598>)
 8027986:	2200      	movs	r2, #0
 8027988:	4620      	mov	r0, r4
 802798a:	4629      	mov	r1, r5
 802798c:	f7d9 f8be 	bl	8000b0c <__aeabi_dcmplt>
 8027990:	2800      	cmp	r0, #0
 8027992:	f000 80ae 	beq.w	8027af2 <_dtoa_r+0x4ea>
 8027996:	9b07      	ldr	r3, [sp, #28]
 8027998:	2b00      	cmp	r3, #0
 802799a:	f000 80aa 	beq.w	8027af2 <_dtoa_r+0x4ea>
 802799e:	9b00      	ldr	r3, [sp, #0]
 80279a0:	2b00      	cmp	r3, #0
 80279a2:	dd37      	ble.n	8027a14 <_dtoa_r+0x40c>
 80279a4:	1e7b      	subs	r3, r7, #1
 80279a6:	9304      	str	r3, [sp, #16]
 80279a8:	4620      	mov	r0, r4
 80279aa:	4b7e      	ldr	r3, [pc, #504]	@ (8027ba4 <_dtoa_r+0x59c>)
 80279ac:	2200      	movs	r2, #0
 80279ae:	4629      	mov	r1, r5
 80279b0:	f7d8 fe3a 	bl	8000628 <__aeabi_dmul>
 80279b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80279b8:	9c00      	ldr	r4, [sp, #0]
 80279ba:	3601      	adds	r6, #1
 80279bc:	4630      	mov	r0, r6
 80279be:	f7d8 fdc9 	bl	8000554 <__aeabi_i2d>
 80279c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80279c6:	f7d8 fe2f 	bl	8000628 <__aeabi_dmul>
 80279ca:	4b77      	ldr	r3, [pc, #476]	@ (8027ba8 <_dtoa_r+0x5a0>)
 80279cc:	2200      	movs	r2, #0
 80279ce:	f7d8 fc75 	bl	80002bc <__adddf3>
 80279d2:	4605      	mov	r5, r0
 80279d4:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80279d8:	2c00      	cmp	r4, #0
 80279da:	f040 808d 	bne.w	8027af8 <_dtoa_r+0x4f0>
 80279de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80279e2:	4b72      	ldr	r3, [pc, #456]	@ (8027bac <_dtoa_r+0x5a4>)
 80279e4:	2200      	movs	r2, #0
 80279e6:	f7d8 fc67 	bl	80002b8 <__aeabi_dsub>
 80279ea:	4602      	mov	r2, r0
 80279ec:	460b      	mov	r3, r1
 80279ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80279f2:	462a      	mov	r2, r5
 80279f4:	4633      	mov	r3, r6
 80279f6:	f7d9 f8a7 	bl	8000b48 <__aeabi_dcmpgt>
 80279fa:	2800      	cmp	r0, #0
 80279fc:	f040 828c 	bne.w	8027f18 <_dtoa_r+0x910>
 8027a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027a04:	462a      	mov	r2, r5
 8027a06:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8027a0a:	f7d9 f87f 	bl	8000b0c <__aeabi_dcmplt>
 8027a0e:	2800      	cmp	r0, #0
 8027a10:	f040 8129 	bne.w	8027c66 <_dtoa_r+0x65e>
 8027a14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8027a18:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8027a1c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027a1e:	2b00      	cmp	r3, #0
 8027a20:	f2c0 815b 	blt.w	8027cda <_dtoa_r+0x6d2>
 8027a24:	2f0e      	cmp	r7, #14
 8027a26:	f300 8158 	bgt.w	8027cda <_dtoa_r+0x6d2>
 8027a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8027b98 <_dtoa_r+0x590>)
 8027a2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8027a30:	ed93 7b00 	vldr	d7, [r3]
 8027a34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027a36:	2b00      	cmp	r3, #0
 8027a38:	ed8d 7b00 	vstr	d7, [sp]
 8027a3c:	da03      	bge.n	8027a46 <_dtoa_r+0x43e>
 8027a3e:	9b07      	ldr	r3, [sp, #28]
 8027a40:	2b00      	cmp	r3, #0
 8027a42:	f340 8102 	ble.w	8027c4a <_dtoa_r+0x642>
 8027a46:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8027a4a:	4656      	mov	r6, sl
 8027a4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027a50:	4620      	mov	r0, r4
 8027a52:	4629      	mov	r1, r5
 8027a54:	f7d8 ff12 	bl	800087c <__aeabi_ddiv>
 8027a58:	f7d9 f896 	bl	8000b88 <__aeabi_d2iz>
 8027a5c:	4680      	mov	r8, r0
 8027a5e:	f7d8 fd79 	bl	8000554 <__aeabi_i2d>
 8027a62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027a66:	f7d8 fddf 	bl	8000628 <__aeabi_dmul>
 8027a6a:	4602      	mov	r2, r0
 8027a6c:	460b      	mov	r3, r1
 8027a6e:	4620      	mov	r0, r4
 8027a70:	4629      	mov	r1, r5
 8027a72:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8027a76:	f7d8 fc1f 	bl	80002b8 <__aeabi_dsub>
 8027a7a:	f806 4b01 	strb.w	r4, [r6], #1
 8027a7e:	9d07      	ldr	r5, [sp, #28]
 8027a80:	eba6 040a 	sub.w	r4, r6, sl
 8027a84:	42a5      	cmp	r5, r4
 8027a86:	4602      	mov	r2, r0
 8027a88:	460b      	mov	r3, r1
 8027a8a:	f040 8118 	bne.w	8027cbe <_dtoa_r+0x6b6>
 8027a8e:	f7d8 fc15 	bl	80002bc <__adddf3>
 8027a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027a96:	4604      	mov	r4, r0
 8027a98:	460d      	mov	r5, r1
 8027a9a:	f7d9 f855 	bl	8000b48 <__aeabi_dcmpgt>
 8027a9e:	2800      	cmp	r0, #0
 8027aa0:	f040 80fa 	bne.w	8027c98 <_dtoa_r+0x690>
 8027aa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027aa8:	4620      	mov	r0, r4
 8027aaa:	4629      	mov	r1, r5
 8027aac:	f7d9 f824 	bl	8000af8 <__aeabi_dcmpeq>
 8027ab0:	b118      	cbz	r0, 8027aba <_dtoa_r+0x4b2>
 8027ab2:	f018 0f01 	tst.w	r8, #1
 8027ab6:	f040 80ef 	bne.w	8027c98 <_dtoa_r+0x690>
 8027aba:	4649      	mov	r1, r9
 8027abc:	4658      	mov	r0, fp
 8027abe:	f004 fda4 	bl	802c60a <_Bfree>
 8027ac2:	2300      	movs	r3, #0
 8027ac4:	7033      	strb	r3, [r6, #0]
 8027ac6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027ac8:	3701      	adds	r7, #1
 8027aca:	601f      	str	r7, [r3, #0]
 8027acc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027ace:	2b00      	cmp	r3, #0
 8027ad0:	f43f add1 	beq.w	8027676 <_dtoa_r+0x6e>
 8027ad4:	601e      	str	r6, [r3, #0]
 8027ad6:	e5ce      	b.n	8027676 <_dtoa_r+0x6e>
 8027ad8:	07e2      	lsls	r2, r4, #31
 8027ada:	d505      	bpl.n	8027ae8 <_dtoa_r+0x4e0>
 8027adc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8027ae0:	f7d8 fda2 	bl	8000628 <__aeabi_dmul>
 8027ae4:	3601      	adds	r6, #1
 8027ae6:	2301      	movs	r3, #1
 8027ae8:	1064      	asrs	r4, r4, #1
 8027aea:	3508      	adds	r5, #8
 8027aec:	e73f      	b.n	802796e <_dtoa_r+0x366>
 8027aee:	2602      	movs	r6, #2
 8027af0:	e742      	b.n	8027978 <_dtoa_r+0x370>
 8027af2:	9c07      	ldr	r4, [sp, #28]
 8027af4:	9704      	str	r7, [sp, #16]
 8027af6:	e761      	b.n	80279bc <_dtoa_r+0x3b4>
 8027af8:	4b27      	ldr	r3, [pc, #156]	@ (8027b98 <_dtoa_r+0x590>)
 8027afa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027afc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8027b00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8027b04:	4454      	add	r4, sl
 8027b06:	2900      	cmp	r1, #0
 8027b08:	d054      	beq.n	8027bb4 <_dtoa_r+0x5ac>
 8027b0a:	4929      	ldr	r1, [pc, #164]	@ (8027bb0 <_dtoa_r+0x5a8>)
 8027b0c:	2000      	movs	r0, #0
 8027b0e:	f7d8 feb5 	bl	800087c <__aeabi_ddiv>
 8027b12:	4633      	mov	r3, r6
 8027b14:	462a      	mov	r2, r5
 8027b16:	f7d8 fbcf 	bl	80002b8 <__aeabi_dsub>
 8027b1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8027b1e:	4656      	mov	r6, sl
 8027b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027b24:	f7d9 f830 	bl	8000b88 <__aeabi_d2iz>
 8027b28:	4605      	mov	r5, r0
 8027b2a:	f7d8 fd13 	bl	8000554 <__aeabi_i2d>
 8027b2e:	4602      	mov	r2, r0
 8027b30:	460b      	mov	r3, r1
 8027b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027b36:	f7d8 fbbf 	bl	80002b8 <__aeabi_dsub>
 8027b3a:	3530      	adds	r5, #48	@ 0x30
 8027b3c:	4602      	mov	r2, r0
 8027b3e:	460b      	mov	r3, r1
 8027b40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8027b44:	f806 5b01 	strb.w	r5, [r6], #1
 8027b48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8027b4c:	f7d8 ffde 	bl	8000b0c <__aeabi_dcmplt>
 8027b50:	2800      	cmp	r0, #0
 8027b52:	d172      	bne.n	8027c3a <_dtoa_r+0x632>
 8027b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027b58:	4911      	ldr	r1, [pc, #68]	@ (8027ba0 <_dtoa_r+0x598>)
 8027b5a:	2000      	movs	r0, #0
 8027b5c:	f7d8 fbac 	bl	80002b8 <__aeabi_dsub>
 8027b60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8027b64:	f7d8 ffd2 	bl	8000b0c <__aeabi_dcmplt>
 8027b68:	2800      	cmp	r0, #0
 8027b6a:	f040 8096 	bne.w	8027c9a <_dtoa_r+0x692>
 8027b6e:	42a6      	cmp	r6, r4
 8027b70:	f43f af50 	beq.w	8027a14 <_dtoa_r+0x40c>
 8027b74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8027b78:	4b0a      	ldr	r3, [pc, #40]	@ (8027ba4 <_dtoa_r+0x59c>)
 8027b7a:	2200      	movs	r2, #0
 8027b7c:	f7d8 fd54 	bl	8000628 <__aeabi_dmul>
 8027b80:	4b08      	ldr	r3, [pc, #32]	@ (8027ba4 <_dtoa_r+0x59c>)
 8027b82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8027b86:	2200      	movs	r2, #0
 8027b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027b8c:	f7d8 fd4c 	bl	8000628 <__aeabi_dmul>
 8027b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027b94:	e7c4      	b.n	8027b20 <_dtoa_r+0x518>
 8027b96:	bf00      	nop
 8027b98:	08034688 	.word	0x08034688
 8027b9c:	08034660 	.word	0x08034660
 8027ba0:	3ff00000 	.word	0x3ff00000
 8027ba4:	40240000 	.word	0x40240000
 8027ba8:	401c0000 	.word	0x401c0000
 8027bac:	40140000 	.word	0x40140000
 8027bb0:	3fe00000 	.word	0x3fe00000
 8027bb4:	4631      	mov	r1, r6
 8027bb6:	4628      	mov	r0, r5
 8027bb8:	f7d8 fd36 	bl	8000628 <__aeabi_dmul>
 8027bbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8027bc0:	9415      	str	r4, [sp, #84]	@ 0x54
 8027bc2:	4656      	mov	r6, sl
 8027bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027bc8:	f7d8 ffde 	bl	8000b88 <__aeabi_d2iz>
 8027bcc:	4605      	mov	r5, r0
 8027bce:	f7d8 fcc1 	bl	8000554 <__aeabi_i2d>
 8027bd2:	4602      	mov	r2, r0
 8027bd4:	460b      	mov	r3, r1
 8027bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027bda:	f7d8 fb6d 	bl	80002b8 <__aeabi_dsub>
 8027bde:	3530      	adds	r5, #48	@ 0x30
 8027be0:	f806 5b01 	strb.w	r5, [r6], #1
 8027be4:	4602      	mov	r2, r0
 8027be6:	460b      	mov	r3, r1
 8027be8:	42a6      	cmp	r6, r4
 8027bea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8027bee:	f04f 0200 	mov.w	r2, #0
 8027bf2:	d124      	bne.n	8027c3e <_dtoa_r+0x636>
 8027bf4:	4bac      	ldr	r3, [pc, #688]	@ (8027ea8 <_dtoa_r+0x8a0>)
 8027bf6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8027bfa:	f7d8 fb5f 	bl	80002bc <__adddf3>
 8027bfe:	4602      	mov	r2, r0
 8027c00:	460b      	mov	r3, r1
 8027c02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027c06:	f7d8 ff9f 	bl	8000b48 <__aeabi_dcmpgt>
 8027c0a:	2800      	cmp	r0, #0
 8027c0c:	d145      	bne.n	8027c9a <_dtoa_r+0x692>
 8027c0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8027c12:	49a5      	ldr	r1, [pc, #660]	@ (8027ea8 <_dtoa_r+0x8a0>)
 8027c14:	2000      	movs	r0, #0
 8027c16:	f7d8 fb4f 	bl	80002b8 <__aeabi_dsub>
 8027c1a:	4602      	mov	r2, r0
 8027c1c:	460b      	mov	r3, r1
 8027c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027c22:	f7d8 ff73 	bl	8000b0c <__aeabi_dcmplt>
 8027c26:	2800      	cmp	r0, #0
 8027c28:	f43f aef4 	beq.w	8027a14 <_dtoa_r+0x40c>
 8027c2c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8027c2e:	1e73      	subs	r3, r6, #1
 8027c30:	9315      	str	r3, [sp, #84]	@ 0x54
 8027c32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8027c36:	2b30      	cmp	r3, #48	@ 0x30
 8027c38:	d0f8      	beq.n	8027c2c <_dtoa_r+0x624>
 8027c3a:	9f04      	ldr	r7, [sp, #16]
 8027c3c:	e73d      	b.n	8027aba <_dtoa_r+0x4b2>
 8027c3e:	4b9b      	ldr	r3, [pc, #620]	@ (8027eac <_dtoa_r+0x8a4>)
 8027c40:	f7d8 fcf2 	bl	8000628 <__aeabi_dmul>
 8027c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027c48:	e7bc      	b.n	8027bc4 <_dtoa_r+0x5bc>
 8027c4a:	d10c      	bne.n	8027c66 <_dtoa_r+0x65e>
 8027c4c:	4b98      	ldr	r3, [pc, #608]	@ (8027eb0 <_dtoa_r+0x8a8>)
 8027c4e:	2200      	movs	r2, #0
 8027c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027c54:	f7d8 fce8 	bl	8000628 <__aeabi_dmul>
 8027c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027c5c:	f7d8 ff6a 	bl	8000b34 <__aeabi_dcmpge>
 8027c60:	2800      	cmp	r0, #0
 8027c62:	f000 8157 	beq.w	8027f14 <_dtoa_r+0x90c>
 8027c66:	2400      	movs	r4, #0
 8027c68:	4625      	mov	r5, r4
 8027c6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027c6c:	43db      	mvns	r3, r3
 8027c6e:	9304      	str	r3, [sp, #16]
 8027c70:	4656      	mov	r6, sl
 8027c72:	2700      	movs	r7, #0
 8027c74:	4621      	mov	r1, r4
 8027c76:	4658      	mov	r0, fp
 8027c78:	f004 fcc7 	bl	802c60a <_Bfree>
 8027c7c:	2d00      	cmp	r5, #0
 8027c7e:	d0dc      	beq.n	8027c3a <_dtoa_r+0x632>
 8027c80:	b12f      	cbz	r7, 8027c8e <_dtoa_r+0x686>
 8027c82:	42af      	cmp	r7, r5
 8027c84:	d003      	beq.n	8027c8e <_dtoa_r+0x686>
 8027c86:	4639      	mov	r1, r7
 8027c88:	4658      	mov	r0, fp
 8027c8a:	f004 fcbe 	bl	802c60a <_Bfree>
 8027c8e:	4629      	mov	r1, r5
 8027c90:	4658      	mov	r0, fp
 8027c92:	f004 fcba 	bl	802c60a <_Bfree>
 8027c96:	e7d0      	b.n	8027c3a <_dtoa_r+0x632>
 8027c98:	9704      	str	r7, [sp, #16]
 8027c9a:	4633      	mov	r3, r6
 8027c9c:	461e      	mov	r6, r3
 8027c9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8027ca2:	2a39      	cmp	r2, #57	@ 0x39
 8027ca4:	d107      	bne.n	8027cb6 <_dtoa_r+0x6ae>
 8027ca6:	459a      	cmp	sl, r3
 8027ca8:	d1f8      	bne.n	8027c9c <_dtoa_r+0x694>
 8027caa:	9a04      	ldr	r2, [sp, #16]
 8027cac:	3201      	adds	r2, #1
 8027cae:	9204      	str	r2, [sp, #16]
 8027cb0:	2230      	movs	r2, #48	@ 0x30
 8027cb2:	f88a 2000 	strb.w	r2, [sl]
 8027cb6:	781a      	ldrb	r2, [r3, #0]
 8027cb8:	3201      	adds	r2, #1
 8027cba:	701a      	strb	r2, [r3, #0]
 8027cbc:	e7bd      	b.n	8027c3a <_dtoa_r+0x632>
 8027cbe:	4b7b      	ldr	r3, [pc, #492]	@ (8027eac <_dtoa_r+0x8a4>)
 8027cc0:	2200      	movs	r2, #0
 8027cc2:	f7d8 fcb1 	bl	8000628 <__aeabi_dmul>
 8027cc6:	2200      	movs	r2, #0
 8027cc8:	2300      	movs	r3, #0
 8027cca:	4604      	mov	r4, r0
 8027ccc:	460d      	mov	r5, r1
 8027cce:	f7d8 ff13 	bl	8000af8 <__aeabi_dcmpeq>
 8027cd2:	2800      	cmp	r0, #0
 8027cd4:	f43f aeba 	beq.w	8027a4c <_dtoa_r+0x444>
 8027cd8:	e6ef      	b.n	8027aba <_dtoa_r+0x4b2>
 8027cda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027cdc:	2a00      	cmp	r2, #0
 8027cde:	f000 80db 	beq.w	8027e98 <_dtoa_r+0x890>
 8027ce2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027ce4:	2a01      	cmp	r2, #1
 8027ce6:	f300 80bf 	bgt.w	8027e68 <_dtoa_r+0x860>
 8027cea:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027cec:	2a00      	cmp	r2, #0
 8027cee:	f000 80b7 	beq.w	8027e60 <_dtoa_r+0x858>
 8027cf2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8027cf6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027cf8:	4646      	mov	r6, r8
 8027cfa:	9a08      	ldr	r2, [sp, #32]
 8027cfc:	2101      	movs	r1, #1
 8027cfe:	441a      	add	r2, r3
 8027d00:	4658      	mov	r0, fp
 8027d02:	4498      	add	r8, r3
 8027d04:	9208      	str	r2, [sp, #32]
 8027d06:	f004 fd65 	bl	802c7d4 <__i2b>
 8027d0a:	4605      	mov	r5, r0
 8027d0c:	b15e      	cbz	r6, 8027d26 <_dtoa_r+0x71e>
 8027d0e:	9b08      	ldr	r3, [sp, #32]
 8027d10:	2b00      	cmp	r3, #0
 8027d12:	dd08      	ble.n	8027d26 <_dtoa_r+0x71e>
 8027d14:	42b3      	cmp	r3, r6
 8027d16:	9a08      	ldr	r2, [sp, #32]
 8027d18:	bfa8      	it	ge
 8027d1a:	4633      	movge	r3, r6
 8027d1c:	eba8 0803 	sub.w	r8, r8, r3
 8027d20:	1af6      	subs	r6, r6, r3
 8027d22:	1ad3      	subs	r3, r2, r3
 8027d24:	9308      	str	r3, [sp, #32]
 8027d26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027d28:	b1f3      	cbz	r3, 8027d68 <_dtoa_r+0x760>
 8027d2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027d2c:	2b00      	cmp	r3, #0
 8027d2e:	f000 80b7 	beq.w	8027ea0 <_dtoa_r+0x898>
 8027d32:	b18c      	cbz	r4, 8027d58 <_dtoa_r+0x750>
 8027d34:	4629      	mov	r1, r5
 8027d36:	4622      	mov	r2, r4
 8027d38:	4658      	mov	r0, fp
 8027d3a:	f004 fe0b 	bl	802c954 <__pow5mult>
 8027d3e:	464a      	mov	r2, r9
 8027d40:	4601      	mov	r1, r0
 8027d42:	4605      	mov	r5, r0
 8027d44:	4658      	mov	r0, fp
 8027d46:	f004 fd5b 	bl	802c800 <__multiply>
 8027d4a:	4649      	mov	r1, r9
 8027d4c:	9004      	str	r0, [sp, #16]
 8027d4e:	4658      	mov	r0, fp
 8027d50:	f004 fc5b 	bl	802c60a <_Bfree>
 8027d54:	9b04      	ldr	r3, [sp, #16]
 8027d56:	4699      	mov	r9, r3
 8027d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027d5a:	1b1a      	subs	r2, r3, r4
 8027d5c:	d004      	beq.n	8027d68 <_dtoa_r+0x760>
 8027d5e:	4649      	mov	r1, r9
 8027d60:	4658      	mov	r0, fp
 8027d62:	f004 fdf7 	bl	802c954 <__pow5mult>
 8027d66:	4681      	mov	r9, r0
 8027d68:	2101      	movs	r1, #1
 8027d6a:	4658      	mov	r0, fp
 8027d6c:	f004 fd32 	bl	802c7d4 <__i2b>
 8027d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027d72:	4604      	mov	r4, r0
 8027d74:	2b00      	cmp	r3, #0
 8027d76:	f000 81cc 	beq.w	8028112 <_dtoa_r+0xb0a>
 8027d7a:	461a      	mov	r2, r3
 8027d7c:	4601      	mov	r1, r0
 8027d7e:	4658      	mov	r0, fp
 8027d80:	f004 fde8 	bl	802c954 <__pow5mult>
 8027d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d86:	2b01      	cmp	r3, #1
 8027d88:	4604      	mov	r4, r0
 8027d8a:	f300 8095 	bgt.w	8027eb8 <_dtoa_r+0x8b0>
 8027d8e:	9b02      	ldr	r3, [sp, #8]
 8027d90:	2b00      	cmp	r3, #0
 8027d92:	f040 8087 	bne.w	8027ea4 <_dtoa_r+0x89c>
 8027d96:	9b03      	ldr	r3, [sp, #12]
 8027d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8027d9c:	2b00      	cmp	r3, #0
 8027d9e:	f040 8089 	bne.w	8027eb4 <_dtoa_r+0x8ac>
 8027da2:	9b03      	ldr	r3, [sp, #12]
 8027da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027da8:	0d1b      	lsrs	r3, r3, #20
 8027daa:	051b      	lsls	r3, r3, #20
 8027dac:	b12b      	cbz	r3, 8027dba <_dtoa_r+0x7b2>
 8027dae:	9b08      	ldr	r3, [sp, #32]
 8027db0:	3301      	adds	r3, #1
 8027db2:	9308      	str	r3, [sp, #32]
 8027db4:	f108 0801 	add.w	r8, r8, #1
 8027db8:	2301      	movs	r3, #1
 8027dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8027dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027dbe:	2b00      	cmp	r3, #0
 8027dc0:	f000 81ad 	beq.w	802811e <_dtoa_r+0xb16>
 8027dc4:	6923      	ldr	r3, [r4, #16]
 8027dc6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8027dca:	6918      	ldr	r0, [r3, #16]
 8027dcc:	f004 fcb6 	bl	802c73c <__hi0bits>
 8027dd0:	f1c0 0020 	rsb	r0, r0, #32
 8027dd4:	9b08      	ldr	r3, [sp, #32]
 8027dd6:	4418      	add	r0, r3
 8027dd8:	f010 001f 	ands.w	r0, r0, #31
 8027ddc:	d077      	beq.n	8027ece <_dtoa_r+0x8c6>
 8027dde:	f1c0 0320 	rsb	r3, r0, #32
 8027de2:	2b04      	cmp	r3, #4
 8027de4:	dd6b      	ble.n	8027ebe <_dtoa_r+0x8b6>
 8027de6:	9b08      	ldr	r3, [sp, #32]
 8027de8:	f1c0 001c 	rsb	r0, r0, #28
 8027dec:	4403      	add	r3, r0
 8027dee:	4480      	add	r8, r0
 8027df0:	4406      	add	r6, r0
 8027df2:	9308      	str	r3, [sp, #32]
 8027df4:	f1b8 0f00 	cmp.w	r8, #0
 8027df8:	dd05      	ble.n	8027e06 <_dtoa_r+0x7fe>
 8027dfa:	4649      	mov	r1, r9
 8027dfc:	4642      	mov	r2, r8
 8027dfe:	4658      	mov	r0, fp
 8027e00:	f004 fde8 	bl	802c9d4 <__lshift>
 8027e04:	4681      	mov	r9, r0
 8027e06:	9b08      	ldr	r3, [sp, #32]
 8027e08:	2b00      	cmp	r3, #0
 8027e0a:	dd05      	ble.n	8027e18 <_dtoa_r+0x810>
 8027e0c:	4621      	mov	r1, r4
 8027e0e:	461a      	mov	r2, r3
 8027e10:	4658      	mov	r0, fp
 8027e12:	f004 fddf 	bl	802c9d4 <__lshift>
 8027e16:	4604      	mov	r4, r0
 8027e18:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027e1a:	2b00      	cmp	r3, #0
 8027e1c:	d059      	beq.n	8027ed2 <_dtoa_r+0x8ca>
 8027e1e:	4621      	mov	r1, r4
 8027e20:	4648      	mov	r0, r9
 8027e22:	f004 fe43 	bl	802caac <__mcmp>
 8027e26:	2800      	cmp	r0, #0
 8027e28:	da53      	bge.n	8027ed2 <_dtoa_r+0x8ca>
 8027e2a:	1e7b      	subs	r3, r7, #1
 8027e2c:	9304      	str	r3, [sp, #16]
 8027e2e:	4649      	mov	r1, r9
 8027e30:	2300      	movs	r3, #0
 8027e32:	220a      	movs	r2, #10
 8027e34:	4658      	mov	r0, fp
 8027e36:	f004 fbf1 	bl	802c61c <__multadd>
 8027e3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027e3c:	4681      	mov	r9, r0
 8027e3e:	2b00      	cmp	r3, #0
 8027e40:	f000 816f 	beq.w	8028122 <_dtoa_r+0xb1a>
 8027e44:	2300      	movs	r3, #0
 8027e46:	4629      	mov	r1, r5
 8027e48:	220a      	movs	r2, #10
 8027e4a:	4658      	mov	r0, fp
 8027e4c:	f004 fbe6 	bl	802c61c <__multadd>
 8027e50:	9b00      	ldr	r3, [sp, #0]
 8027e52:	2b00      	cmp	r3, #0
 8027e54:	4605      	mov	r5, r0
 8027e56:	dc67      	bgt.n	8027f28 <_dtoa_r+0x920>
 8027e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027e5a:	2b02      	cmp	r3, #2
 8027e5c:	dc41      	bgt.n	8027ee2 <_dtoa_r+0x8da>
 8027e5e:	e063      	b.n	8027f28 <_dtoa_r+0x920>
 8027e60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027e62:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8027e66:	e746      	b.n	8027cf6 <_dtoa_r+0x6ee>
 8027e68:	9b07      	ldr	r3, [sp, #28]
 8027e6a:	1e5c      	subs	r4, r3, #1
 8027e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027e6e:	42a3      	cmp	r3, r4
 8027e70:	bfbf      	itttt	lt
 8027e72:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8027e74:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8027e76:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8027e78:	1ae3      	sublt	r3, r4, r3
 8027e7a:	bfb4      	ite	lt
 8027e7c:	18d2      	addlt	r2, r2, r3
 8027e7e:	1b1c      	subge	r4, r3, r4
 8027e80:	9b07      	ldr	r3, [sp, #28]
 8027e82:	bfbc      	itt	lt
 8027e84:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8027e86:	2400      	movlt	r4, #0
 8027e88:	2b00      	cmp	r3, #0
 8027e8a:	bfb5      	itete	lt
 8027e8c:	eba8 0603 	sublt.w	r6, r8, r3
 8027e90:	9b07      	ldrge	r3, [sp, #28]
 8027e92:	2300      	movlt	r3, #0
 8027e94:	4646      	movge	r6, r8
 8027e96:	e730      	b.n	8027cfa <_dtoa_r+0x6f2>
 8027e98:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027e9a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027e9c:	4646      	mov	r6, r8
 8027e9e:	e735      	b.n	8027d0c <_dtoa_r+0x704>
 8027ea0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027ea2:	e75c      	b.n	8027d5e <_dtoa_r+0x756>
 8027ea4:	2300      	movs	r3, #0
 8027ea6:	e788      	b.n	8027dba <_dtoa_r+0x7b2>
 8027ea8:	3fe00000 	.word	0x3fe00000
 8027eac:	40240000 	.word	0x40240000
 8027eb0:	40140000 	.word	0x40140000
 8027eb4:	9b02      	ldr	r3, [sp, #8]
 8027eb6:	e780      	b.n	8027dba <_dtoa_r+0x7b2>
 8027eb8:	2300      	movs	r3, #0
 8027eba:	930a      	str	r3, [sp, #40]	@ 0x28
 8027ebc:	e782      	b.n	8027dc4 <_dtoa_r+0x7bc>
 8027ebe:	d099      	beq.n	8027df4 <_dtoa_r+0x7ec>
 8027ec0:	9a08      	ldr	r2, [sp, #32]
 8027ec2:	331c      	adds	r3, #28
 8027ec4:	441a      	add	r2, r3
 8027ec6:	4498      	add	r8, r3
 8027ec8:	441e      	add	r6, r3
 8027eca:	9208      	str	r2, [sp, #32]
 8027ecc:	e792      	b.n	8027df4 <_dtoa_r+0x7ec>
 8027ece:	4603      	mov	r3, r0
 8027ed0:	e7f6      	b.n	8027ec0 <_dtoa_r+0x8b8>
 8027ed2:	9b07      	ldr	r3, [sp, #28]
 8027ed4:	9704      	str	r7, [sp, #16]
 8027ed6:	2b00      	cmp	r3, #0
 8027ed8:	dc20      	bgt.n	8027f1c <_dtoa_r+0x914>
 8027eda:	9300      	str	r3, [sp, #0]
 8027edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ede:	2b02      	cmp	r3, #2
 8027ee0:	dd1e      	ble.n	8027f20 <_dtoa_r+0x918>
 8027ee2:	9b00      	ldr	r3, [sp, #0]
 8027ee4:	2b00      	cmp	r3, #0
 8027ee6:	f47f aec0 	bne.w	8027c6a <_dtoa_r+0x662>
 8027eea:	4621      	mov	r1, r4
 8027eec:	2205      	movs	r2, #5
 8027eee:	4658      	mov	r0, fp
 8027ef0:	f004 fb94 	bl	802c61c <__multadd>
 8027ef4:	4601      	mov	r1, r0
 8027ef6:	4604      	mov	r4, r0
 8027ef8:	4648      	mov	r0, r9
 8027efa:	f004 fdd7 	bl	802caac <__mcmp>
 8027efe:	2800      	cmp	r0, #0
 8027f00:	f77f aeb3 	ble.w	8027c6a <_dtoa_r+0x662>
 8027f04:	4656      	mov	r6, sl
 8027f06:	2331      	movs	r3, #49	@ 0x31
 8027f08:	f806 3b01 	strb.w	r3, [r6], #1
 8027f0c:	9b04      	ldr	r3, [sp, #16]
 8027f0e:	3301      	adds	r3, #1
 8027f10:	9304      	str	r3, [sp, #16]
 8027f12:	e6ae      	b.n	8027c72 <_dtoa_r+0x66a>
 8027f14:	9c07      	ldr	r4, [sp, #28]
 8027f16:	9704      	str	r7, [sp, #16]
 8027f18:	4625      	mov	r5, r4
 8027f1a:	e7f3      	b.n	8027f04 <_dtoa_r+0x8fc>
 8027f1c:	9b07      	ldr	r3, [sp, #28]
 8027f1e:	9300      	str	r3, [sp, #0]
 8027f20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027f22:	2b00      	cmp	r3, #0
 8027f24:	f000 8101 	beq.w	802812a <_dtoa_r+0xb22>
 8027f28:	2e00      	cmp	r6, #0
 8027f2a:	dd05      	ble.n	8027f38 <_dtoa_r+0x930>
 8027f2c:	4629      	mov	r1, r5
 8027f2e:	4632      	mov	r2, r6
 8027f30:	4658      	mov	r0, fp
 8027f32:	f004 fd4f 	bl	802c9d4 <__lshift>
 8027f36:	4605      	mov	r5, r0
 8027f38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027f3a:	2b00      	cmp	r3, #0
 8027f3c:	d059      	beq.n	8027ff2 <_dtoa_r+0x9ea>
 8027f3e:	6869      	ldr	r1, [r5, #4]
 8027f40:	4658      	mov	r0, fp
 8027f42:	f004 fb3d 	bl	802c5c0 <_Balloc>
 8027f46:	4606      	mov	r6, r0
 8027f48:	b920      	cbnz	r0, 8027f54 <_dtoa_r+0x94c>
 8027f4a:	4b83      	ldr	r3, [pc, #524]	@ (8028158 <_dtoa_r+0xb50>)
 8027f4c:	4602      	mov	r2, r0
 8027f4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8027f52:	e480      	b.n	8027856 <_dtoa_r+0x24e>
 8027f54:	692a      	ldr	r2, [r5, #16]
 8027f56:	3202      	adds	r2, #2
 8027f58:	0092      	lsls	r2, r2, #2
 8027f5a:	f105 010c 	add.w	r1, r5, #12
 8027f5e:	300c      	adds	r0, #12
 8027f60:	f7ff fa52 	bl	8027408 <memcpy>
 8027f64:	2201      	movs	r2, #1
 8027f66:	4631      	mov	r1, r6
 8027f68:	4658      	mov	r0, fp
 8027f6a:	f004 fd33 	bl	802c9d4 <__lshift>
 8027f6e:	f10a 0301 	add.w	r3, sl, #1
 8027f72:	9307      	str	r3, [sp, #28]
 8027f74:	9b00      	ldr	r3, [sp, #0]
 8027f76:	4453      	add	r3, sl
 8027f78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027f7a:	9b02      	ldr	r3, [sp, #8]
 8027f7c:	f003 0301 	and.w	r3, r3, #1
 8027f80:	462f      	mov	r7, r5
 8027f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8027f84:	4605      	mov	r5, r0
 8027f86:	9b07      	ldr	r3, [sp, #28]
 8027f88:	4621      	mov	r1, r4
 8027f8a:	3b01      	subs	r3, #1
 8027f8c:	4648      	mov	r0, r9
 8027f8e:	9300      	str	r3, [sp, #0]
 8027f90:	f7ff faaf 	bl	80274f2 <quorem>
 8027f94:	4639      	mov	r1, r7
 8027f96:	9002      	str	r0, [sp, #8]
 8027f98:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8027f9c:	4648      	mov	r0, r9
 8027f9e:	f004 fd85 	bl	802caac <__mcmp>
 8027fa2:	462a      	mov	r2, r5
 8027fa4:	9008      	str	r0, [sp, #32]
 8027fa6:	4621      	mov	r1, r4
 8027fa8:	4658      	mov	r0, fp
 8027faa:	f004 fd9b 	bl	802cae4 <__mdiff>
 8027fae:	68c2      	ldr	r2, [r0, #12]
 8027fb0:	4606      	mov	r6, r0
 8027fb2:	bb02      	cbnz	r2, 8027ff6 <_dtoa_r+0x9ee>
 8027fb4:	4601      	mov	r1, r0
 8027fb6:	4648      	mov	r0, r9
 8027fb8:	f004 fd78 	bl	802caac <__mcmp>
 8027fbc:	4602      	mov	r2, r0
 8027fbe:	4631      	mov	r1, r6
 8027fc0:	4658      	mov	r0, fp
 8027fc2:	920e      	str	r2, [sp, #56]	@ 0x38
 8027fc4:	f004 fb21 	bl	802c60a <_Bfree>
 8027fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027fca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027fcc:	9e07      	ldr	r6, [sp, #28]
 8027fce:	ea43 0102 	orr.w	r1, r3, r2
 8027fd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027fd4:	4319      	orrs	r1, r3
 8027fd6:	d110      	bne.n	8027ffa <_dtoa_r+0x9f2>
 8027fd8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8027fdc:	d029      	beq.n	8028032 <_dtoa_r+0xa2a>
 8027fde:	9b08      	ldr	r3, [sp, #32]
 8027fe0:	2b00      	cmp	r3, #0
 8027fe2:	dd02      	ble.n	8027fea <_dtoa_r+0x9e2>
 8027fe4:	9b02      	ldr	r3, [sp, #8]
 8027fe6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8027fea:	9b00      	ldr	r3, [sp, #0]
 8027fec:	f883 8000 	strb.w	r8, [r3]
 8027ff0:	e640      	b.n	8027c74 <_dtoa_r+0x66c>
 8027ff2:	4628      	mov	r0, r5
 8027ff4:	e7bb      	b.n	8027f6e <_dtoa_r+0x966>
 8027ff6:	2201      	movs	r2, #1
 8027ff8:	e7e1      	b.n	8027fbe <_dtoa_r+0x9b6>
 8027ffa:	9b08      	ldr	r3, [sp, #32]
 8027ffc:	2b00      	cmp	r3, #0
 8027ffe:	db04      	blt.n	802800a <_dtoa_r+0xa02>
 8028000:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028002:	430b      	orrs	r3, r1
 8028004:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8028006:	430b      	orrs	r3, r1
 8028008:	d120      	bne.n	802804c <_dtoa_r+0xa44>
 802800a:	2a00      	cmp	r2, #0
 802800c:	dded      	ble.n	8027fea <_dtoa_r+0x9e2>
 802800e:	4649      	mov	r1, r9
 8028010:	2201      	movs	r2, #1
 8028012:	4658      	mov	r0, fp
 8028014:	f004 fcde 	bl	802c9d4 <__lshift>
 8028018:	4621      	mov	r1, r4
 802801a:	4681      	mov	r9, r0
 802801c:	f004 fd46 	bl	802caac <__mcmp>
 8028020:	2800      	cmp	r0, #0
 8028022:	dc03      	bgt.n	802802c <_dtoa_r+0xa24>
 8028024:	d1e1      	bne.n	8027fea <_dtoa_r+0x9e2>
 8028026:	f018 0f01 	tst.w	r8, #1
 802802a:	d0de      	beq.n	8027fea <_dtoa_r+0x9e2>
 802802c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8028030:	d1d8      	bne.n	8027fe4 <_dtoa_r+0x9dc>
 8028032:	9a00      	ldr	r2, [sp, #0]
 8028034:	2339      	movs	r3, #57	@ 0x39
 8028036:	7013      	strb	r3, [r2, #0]
 8028038:	4633      	mov	r3, r6
 802803a:	461e      	mov	r6, r3
 802803c:	3b01      	subs	r3, #1
 802803e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8028042:	2a39      	cmp	r2, #57	@ 0x39
 8028044:	d052      	beq.n	80280ec <_dtoa_r+0xae4>
 8028046:	3201      	adds	r2, #1
 8028048:	701a      	strb	r2, [r3, #0]
 802804a:	e613      	b.n	8027c74 <_dtoa_r+0x66c>
 802804c:	2a00      	cmp	r2, #0
 802804e:	dd07      	ble.n	8028060 <_dtoa_r+0xa58>
 8028050:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8028054:	d0ed      	beq.n	8028032 <_dtoa_r+0xa2a>
 8028056:	9a00      	ldr	r2, [sp, #0]
 8028058:	f108 0301 	add.w	r3, r8, #1
 802805c:	7013      	strb	r3, [r2, #0]
 802805e:	e609      	b.n	8027c74 <_dtoa_r+0x66c>
 8028060:	9b07      	ldr	r3, [sp, #28]
 8028062:	9a07      	ldr	r2, [sp, #28]
 8028064:	f803 8c01 	strb.w	r8, [r3, #-1]
 8028068:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802806a:	4293      	cmp	r3, r2
 802806c:	d028      	beq.n	80280c0 <_dtoa_r+0xab8>
 802806e:	4649      	mov	r1, r9
 8028070:	2300      	movs	r3, #0
 8028072:	220a      	movs	r2, #10
 8028074:	4658      	mov	r0, fp
 8028076:	f004 fad1 	bl	802c61c <__multadd>
 802807a:	42af      	cmp	r7, r5
 802807c:	4681      	mov	r9, r0
 802807e:	f04f 0300 	mov.w	r3, #0
 8028082:	f04f 020a 	mov.w	r2, #10
 8028086:	4639      	mov	r1, r7
 8028088:	4658      	mov	r0, fp
 802808a:	d107      	bne.n	802809c <_dtoa_r+0xa94>
 802808c:	f004 fac6 	bl	802c61c <__multadd>
 8028090:	4607      	mov	r7, r0
 8028092:	4605      	mov	r5, r0
 8028094:	9b07      	ldr	r3, [sp, #28]
 8028096:	3301      	adds	r3, #1
 8028098:	9307      	str	r3, [sp, #28]
 802809a:	e774      	b.n	8027f86 <_dtoa_r+0x97e>
 802809c:	f004 fabe 	bl	802c61c <__multadd>
 80280a0:	4629      	mov	r1, r5
 80280a2:	4607      	mov	r7, r0
 80280a4:	2300      	movs	r3, #0
 80280a6:	220a      	movs	r2, #10
 80280a8:	4658      	mov	r0, fp
 80280aa:	f004 fab7 	bl	802c61c <__multadd>
 80280ae:	4605      	mov	r5, r0
 80280b0:	e7f0      	b.n	8028094 <_dtoa_r+0xa8c>
 80280b2:	9b00      	ldr	r3, [sp, #0]
 80280b4:	2b00      	cmp	r3, #0
 80280b6:	bfcc      	ite	gt
 80280b8:	461e      	movgt	r6, r3
 80280ba:	2601      	movle	r6, #1
 80280bc:	4456      	add	r6, sl
 80280be:	2700      	movs	r7, #0
 80280c0:	4649      	mov	r1, r9
 80280c2:	2201      	movs	r2, #1
 80280c4:	4658      	mov	r0, fp
 80280c6:	f004 fc85 	bl	802c9d4 <__lshift>
 80280ca:	4621      	mov	r1, r4
 80280cc:	4681      	mov	r9, r0
 80280ce:	f004 fced 	bl	802caac <__mcmp>
 80280d2:	2800      	cmp	r0, #0
 80280d4:	dcb0      	bgt.n	8028038 <_dtoa_r+0xa30>
 80280d6:	d102      	bne.n	80280de <_dtoa_r+0xad6>
 80280d8:	f018 0f01 	tst.w	r8, #1
 80280dc:	d1ac      	bne.n	8028038 <_dtoa_r+0xa30>
 80280de:	4633      	mov	r3, r6
 80280e0:	461e      	mov	r6, r3
 80280e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80280e6:	2a30      	cmp	r2, #48	@ 0x30
 80280e8:	d0fa      	beq.n	80280e0 <_dtoa_r+0xad8>
 80280ea:	e5c3      	b.n	8027c74 <_dtoa_r+0x66c>
 80280ec:	459a      	cmp	sl, r3
 80280ee:	d1a4      	bne.n	802803a <_dtoa_r+0xa32>
 80280f0:	9b04      	ldr	r3, [sp, #16]
 80280f2:	3301      	adds	r3, #1
 80280f4:	9304      	str	r3, [sp, #16]
 80280f6:	2331      	movs	r3, #49	@ 0x31
 80280f8:	f88a 3000 	strb.w	r3, [sl]
 80280fc:	e5ba      	b.n	8027c74 <_dtoa_r+0x66c>
 80280fe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028100:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802815c <_dtoa_r+0xb54>
 8028104:	2b00      	cmp	r3, #0
 8028106:	f43f aab6 	beq.w	8027676 <_dtoa_r+0x6e>
 802810a:	f10a 0308 	add.w	r3, sl, #8
 802810e:	f7ff bab0 	b.w	8027672 <_dtoa_r+0x6a>
 8028112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028114:	2b01      	cmp	r3, #1
 8028116:	f77f ae3a 	ble.w	8027d8e <_dtoa_r+0x786>
 802811a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802811c:	930a      	str	r3, [sp, #40]	@ 0x28
 802811e:	2001      	movs	r0, #1
 8028120:	e658      	b.n	8027dd4 <_dtoa_r+0x7cc>
 8028122:	9b00      	ldr	r3, [sp, #0]
 8028124:	2b00      	cmp	r3, #0
 8028126:	f77f aed9 	ble.w	8027edc <_dtoa_r+0x8d4>
 802812a:	4656      	mov	r6, sl
 802812c:	4621      	mov	r1, r4
 802812e:	4648      	mov	r0, r9
 8028130:	f7ff f9df 	bl	80274f2 <quorem>
 8028134:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8028138:	f806 8b01 	strb.w	r8, [r6], #1
 802813c:	9b00      	ldr	r3, [sp, #0]
 802813e:	eba6 020a 	sub.w	r2, r6, sl
 8028142:	4293      	cmp	r3, r2
 8028144:	ddb5      	ble.n	80280b2 <_dtoa_r+0xaaa>
 8028146:	4649      	mov	r1, r9
 8028148:	2300      	movs	r3, #0
 802814a:	220a      	movs	r2, #10
 802814c:	4658      	mov	r0, fp
 802814e:	f004 fa65 	bl	802c61c <__multadd>
 8028152:	4681      	mov	r9, r0
 8028154:	e7ea      	b.n	802812c <_dtoa_r+0xb24>
 8028156:	bf00      	nop
 8028158:	08034502 	.word	0x08034502
 802815c:	080344f5 	.word	0x080344f5

08028160 <_malloc_trim_r>:
 8028160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028164:	4606      	mov	r6, r0
 8028166:	2008      	movs	r0, #8
 8028168:	4689      	mov	r9, r1
 802816a:	f7ff f90f 	bl	802738c <sysconf>
 802816e:	4f24      	ldr	r7, [pc, #144]	@ (8028200 <_malloc_trim_r+0xa0>)
 8028170:	4680      	mov	r8, r0
 8028172:	4630      	mov	r0, r6
 8028174:	f7fd f946 	bl	8025404 <__malloc_lock>
 8028178:	68bb      	ldr	r3, [r7, #8]
 802817a:	685d      	ldr	r5, [r3, #4]
 802817c:	f025 0503 	bic.w	r5, r5, #3
 8028180:	f1a5 0411 	sub.w	r4, r5, #17
 8028184:	eba4 0409 	sub.w	r4, r4, r9
 8028188:	4444      	add	r4, r8
 802818a:	fbb4 f4f8 	udiv	r4, r4, r8
 802818e:	3c01      	subs	r4, #1
 8028190:	fb08 f404 	mul.w	r4, r8, r4
 8028194:	45a0      	cmp	r8, r4
 8028196:	dd05      	ble.n	80281a4 <_malloc_trim_r+0x44>
 8028198:	4630      	mov	r0, r6
 802819a:	f7fd f939 	bl	8025410 <__malloc_unlock>
 802819e:	2000      	movs	r0, #0
 80281a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80281a4:	2100      	movs	r1, #0
 80281a6:	4630      	mov	r0, r6
 80281a8:	f7ff f8c8 	bl	802733c <_sbrk_r>
 80281ac:	68bb      	ldr	r3, [r7, #8]
 80281ae:	442b      	add	r3, r5
 80281b0:	4298      	cmp	r0, r3
 80281b2:	d1f1      	bne.n	8028198 <_malloc_trim_r+0x38>
 80281b4:	4261      	negs	r1, r4
 80281b6:	4630      	mov	r0, r6
 80281b8:	f7ff f8c0 	bl	802733c <_sbrk_r>
 80281bc:	3001      	adds	r0, #1
 80281be:	d110      	bne.n	80281e2 <_malloc_trim_r+0x82>
 80281c0:	2100      	movs	r1, #0
 80281c2:	4630      	mov	r0, r6
 80281c4:	f7ff f8ba 	bl	802733c <_sbrk_r>
 80281c8:	68ba      	ldr	r2, [r7, #8]
 80281ca:	1a83      	subs	r3, r0, r2
 80281cc:	2b0f      	cmp	r3, #15
 80281ce:	dde3      	ble.n	8028198 <_malloc_trim_r+0x38>
 80281d0:	490c      	ldr	r1, [pc, #48]	@ (8028204 <_malloc_trim_r+0xa4>)
 80281d2:	6809      	ldr	r1, [r1, #0]
 80281d4:	1a40      	subs	r0, r0, r1
 80281d6:	490c      	ldr	r1, [pc, #48]	@ (8028208 <_malloc_trim_r+0xa8>)
 80281d8:	f043 0301 	orr.w	r3, r3, #1
 80281dc:	6008      	str	r0, [r1, #0]
 80281de:	6053      	str	r3, [r2, #4]
 80281e0:	e7da      	b.n	8028198 <_malloc_trim_r+0x38>
 80281e2:	68bb      	ldr	r3, [r7, #8]
 80281e4:	4a08      	ldr	r2, [pc, #32]	@ (8028208 <_malloc_trim_r+0xa8>)
 80281e6:	1b2d      	subs	r5, r5, r4
 80281e8:	f045 0501 	orr.w	r5, r5, #1
 80281ec:	605d      	str	r5, [r3, #4]
 80281ee:	6813      	ldr	r3, [r2, #0]
 80281f0:	4630      	mov	r0, r6
 80281f2:	1b1b      	subs	r3, r3, r4
 80281f4:	6013      	str	r3, [r2, #0]
 80281f6:	f7fd f90b 	bl	8025410 <__malloc_unlock>
 80281fa:	2001      	movs	r0, #1
 80281fc:	e7d0      	b.n	80281a0 <_malloc_trim_r+0x40>
 80281fe:	bf00      	nop
 8028200:	200002b8 	.word	0x200002b8
 8028204:	200002b0 	.word	0x200002b0
 8028208:	20018160 	.word	0x20018160

0802820c <_free_r>:
 802820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802820e:	4604      	mov	r4, r0
 8028210:	460f      	mov	r7, r1
 8028212:	2900      	cmp	r1, #0
 8028214:	f000 80b1 	beq.w	802837a <_free_r+0x16e>
 8028218:	f7fd f8f4 	bl	8025404 <__malloc_lock>
 802821c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8028220:	4d56      	ldr	r5, [pc, #344]	@ (802837c <_free_r+0x170>)
 8028222:	f022 0001 	bic.w	r0, r2, #1
 8028226:	f1a7 0308 	sub.w	r3, r7, #8
 802822a:	eb03 0c00 	add.w	ip, r3, r0
 802822e:	68a9      	ldr	r1, [r5, #8]
 8028230:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8028234:	4561      	cmp	r1, ip
 8028236:	f026 0603 	bic.w	r6, r6, #3
 802823a:	f002 0201 	and.w	r2, r2, #1
 802823e:	d11b      	bne.n	8028278 <_free_r+0x6c>
 8028240:	4406      	add	r6, r0
 8028242:	b93a      	cbnz	r2, 8028254 <_free_r+0x48>
 8028244:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8028248:	1a9b      	subs	r3, r3, r2
 802824a:	4416      	add	r6, r2
 802824c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8028250:	60ca      	str	r2, [r1, #12]
 8028252:	6091      	str	r1, [r2, #8]
 8028254:	f046 0201 	orr.w	r2, r6, #1
 8028258:	605a      	str	r2, [r3, #4]
 802825a:	60ab      	str	r3, [r5, #8]
 802825c:	4b48      	ldr	r3, [pc, #288]	@ (8028380 <_free_r+0x174>)
 802825e:	681b      	ldr	r3, [r3, #0]
 8028260:	42b3      	cmp	r3, r6
 8028262:	d804      	bhi.n	802826e <_free_r+0x62>
 8028264:	4b47      	ldr	r3, [pc, #284]	@ (8028384 <_free_r+0x178>)
 8028266:	4620      	mov	r0, r4
 8028268:	6819      	ldr	r1, [r3, #0]
 802826a:	f7ff ff79 	bl	8028160 <_malloc_trim_r>
 802826e:	4620      	mov	r0, r4
 8028270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8028274:	f7fd b8cc 	b.w	8025410 <__malloc_unlock>
 8028278:	f8cc 6004 	str.w	r6, [ip, #4]
 802827c:	2a00      	cmp	r2, #0
 802827e:	d138      	bne.n	80282f2 <_free_r+0xe6>
 8028280:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8028284:	1a5b      	subs	r3, r3, r1
 8028286:	4408      	add	r0, r1
 8028288:	6899      	ldr	r1, [r3, #8]
 802828a:	f105 0708 	add.w	r7, r5, #8
 802828e:	42b9      	cmp	r1, r7
 8028290:	d031      	beq.n	80282f6 <_free_r+0xea>
 8028292:	68df      	ldr	r7, [r3, #12]
 8028294:	60cf      	str	r7, [r1, #12]
 8028296:	60b9      	str	r1, [r7, #8]
 8028298:	eb0c 0106 	add.w	r1, ip, r6
 802829c:	6849      	ldr	r1, [r1, #4]
 802829e:	07c9      	lsls	r1, r1, #31
 80282a0:	d40b      	bmi.n	80282ba <_free_r+0xae>
 80282a2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80282a6:	4430      	add	r0, r6
 80282a8:	bb3a      	cbnz	r2, 80282fa <_free_r+0xee>
 80282aa:	4e37      	ldr	r6, [pc, #220]	@ (8028388 <_free_r+0x17c>)
 80282ac:	42b1      	cmp	r1, r6
 80282ae:	d124      	bne.n	80282fa <_free_r+0xee>
 80282b0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80282b4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80282b8:	2201      	movs	r2, #1
 80282ba:	f040 0101 	orr.w	r1, r0, #1
 80282be:	6059      	str	r1, [r3, #4]
 80282c0:	5018      	str	r0, [r3, r0]
 80282c2:	2a00      	cmp	r2, #0
 80282c4:	d1d3      	bne.n	802826e <_free_r+0x62>
 80282c6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80282ca:	d21b      	bcs.n	8028304 <_free_r+0xf8>
 80282cc:	08c2      	lsrs	r2, r0, #3
 80282ce:	2101      	movs	r1, #1
 80282d0:	0940      	lsrs	r0, r0, #5
 80282d2:	4081      	lsls	r1, r0
 80282d4:	6868      	ldr	r0, [r5, #4]
 80282d6:	3201      	adds	r2, #1
 80282d8:	4301      	orrs	r1, r0
 80282da:	6069      	str	r1, [r5, #4]
 80282dc:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 80282e0:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 80282e4:	3908      	subs	r1, #8
 80282e6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80282ea:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 80282ee:	60c3      	str	r3, [r0, #12]
 80282f0:	e7bd      	b.n	802826e <_free_r+0x62>
 80282f2:	2200      	movs	r2, #0
 80282f4:	e7d0      	b.n	8028298 <_free_r+0x8c>
 80282f6:	2201      	movs	r2, #1
 80282f8:	e7ce      	b.n	8028298 <_free_r+0x8c>
 80282fa:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80282fe:	60ce      	str	r6, [r1, #12]
 8028300:	60b1      	str	r1, [r6, #8]
 8028302:	e7da      	b.n	80282ba <_free_r+0xae>
 8028304:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8028308:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802830c:	d214      	bcs.n	8028338 <_free_r+0x12c>
 802830e:	0982      	lsrs	r2, r0, #6
 8028310:	3238      	adds	r2, #56	@ 0x38
 8028312:	1c51      	adds	r1, r2, #1
 8028314:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8028318:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802831c:	428e      	cmp	r6, r1
 802831e:	d125      	bne.n	802836c <_free_r+0x160>
 8028320:	2001      	movs	r0, #1
 8028322:	1092      	asrs	r2, r2, #2
 8028324:	fa00 f202 	lsl.w	r2, r0, r2
 8028328:	6868      	ldr	r0, [r5, #4]
 802832a:	4302      	orrs	r2, r0
 802832c:	606a      	str	r2, [r5, #4]
 802832e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8028332:	60b3      	str	r3, [r6, #8]
 8028334:	60cb      	str	r3, [r1, #12]
 8028336:	e79a      	b.n	802826e <_free_r+0x62>
 8028338:	2a14      	cmp	r2, #20
 802833a:	d801      	bhi.n	8028340 <_free_r+0x134>
 802833c:	325b      	adds	r2, #91	@ 0x5b
 802833e:	e7e8      	b.n	8028312 <_free_r+0x106>
 8028340:	2a54      	cmp	r2, #84	@ 0x54
 8028342:	d802      	bhi.n	802834a <_free_r+0x13e>
 8028344:	0b02      	lsrs	r2, r0, #12
 8028346:	326e      	adds	r2, #110	@ 0x6e
 8028348:	e7e3      	b.n	8028312 <_free_r+0x106>
 802834a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802834e:	d802      	bhi.n	8028356 <_free_r+0x14a>
 8028350:	0bc2      	lsrs	r2, r0, #15
 8028352:	3277      	adds	r2, #119	@ 0x77
 8028354:	e7dd      	b.n	8028312 <_free_r+0x106>
 8028356:	f240 5154 	movw	r1, #1364	@ 0x554
 802835a:	428a      	cmp	r2, r1
 802835c:	bf9a      	itte	ls
 802835e:	0c82      	lsrls	r2, r0, #18
 8028360:	327c      	addls	r2, #124	@ 0x7c
 8028362:	227e      	movhi	r2, #126	@ 0x7e
 8028364:	e7d5      	b.n	8028312 <_free_r+0x106>
 8028366:	6889      	ldr	r1, [r1, #8]
 8028368:	428e      	cmp	r6, r1
 802836a:	d004      	beq.n	8028376 <_free_r+0x16a>
 802836c:	684a      	ldr	r2, [r1, #4]
 802836e:	f022 0203 	bic.w	r2, r2, #3
 8028372:	4282      	cmp	r2, r0
 8028374:	d8f7      	bhi.n	8028366 <_free_r+0x15a>
 8028376:	68ce      	ldr	r6, [r1, #12]
 8028378:	e7d9      	b.n	802832e <_free_r+0x122>
 802837a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802837c:	200002b8 	.word	0x200002b8
 8028380:	200002b4 	.word	0x200002b4
 8028384:	20018190 	.word	0x20018190
 8028388:	200002c0 	.word	0x200002c0

0802838c <_findenv_r>:
 802838c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028390:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8028400 <_findenv_r+0x74>
 8028394:	4606      	mov	r6, r0
 8028396:	4689      	mov	r9, r1
 8028398:	4617      	mov	r7, r2
 802839a:	f006 f98b 	bl	802e6b4 <__env_lock>
 802839e:	f8da 4000 	ldr.w	r4, [sl]
 80283a2:	b134      	cbz	r4, 80283b2 <_findenv_r+0x26>
 80283a4:	464b      	mov	r3, r9
 80283a6:	4698      	mov	r8, r3
 80283a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80283ac:	b13a      	cbz	r2, 80283be <_findenv_r+0x32>
 80283ae:	2a3d      	cmp	r2, #61	@ 0x3d
 80283b0:	d1f9      	bne.n	80283a6 <_findenv_r+0x1a>
 80283b2:	4630      	mov	r0, r6
 80283b4:	f006 f984 	bl	802e6c0 <__env_unlock>
 80283b8:	2000      	movs	r0, #0
 80283ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80283be:	eba8 0809 	sub.w	r8, r8, r9
 80283c2:	46a3      	mov	fp, r4
 80283c4:	f854 0b04 	ldr.w	r0, [r4], #4
 80283c8:	2800      	cmp	r0, #0
 80283ca:	d0f2      	beq.n	80283b2 <_findenv_r+0x26>
 80283cc:	4642      	mov	r2, r8
 80283ce:	4649      	mov	r1, r9
 80283d0:	f7fd fdf7 	bl	8025fc2 <strncmp>
 80283d4:	2800      	cmp	r0, #0
 80283d6:	d1f4      	bne.n	80283c2 <_findenv_r+0x36>
 80283d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80283dc:	eb03 0508 	add.w	r5, r3, r8
 80283e0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80283e4:	2b3d      	cmp	r3, #61	@ 0x3d
 80283e6:	d1ec      	bne.n	80283c2 <_findenv_r+0x36>
 80283e8:	f8da 3000 	ldr.w	r3, [sl]
 80283ec:	ebab 0303 	sub.w	r3, fp, r3
 80283f0:	109b      	asrs	r3, r3, #2
 80283f2:	4630      	mov	r0, r6
 80283f4:	603b      	str	r3, [r7, #0]
 80283f6:	f006 f963 	bl	802e6c0 <__env_unlock>
 80283fa:	1c68      	adds	r0, r5, #1
 80283fc:	e7dd      	b.n	80283ba <_findenv_r+0x2e>
 80283fe:	bf00      	nop
 8028400:	20000004 	.word	0x20000004

08028404 <_getenv_r>:
 8028404:	b507      	push	{r0, r1, r2, lr}
 8028406:	aa01      	add	r2, sp, #4
 8028408:	f7ff ffc0 	bl	802838c <_findenv_r>
 802840c:	b003      	add	sp, #12
 802840e:	f85d fb04 	ldr.w	pc, [sp], #4

08028412 <labs>:
 8028412:	2800      	cmp	r0, #0
 8028414:	bfb8      	it	lt
 8028416:	4240      	neglt	r0, r0
 8028418:	4770      	bx	lr

0802841a <__ascii_mbtowc>:
 802841a:	b082      	sub	sp, #8
 802841c:	b901      	cbnz	r1, 8028420 <__ascii_mbtowc+0x6>
 802841e:	a901      	add	r1, sp, #4
 8028420:	b142      	cbz	r2, 8028434 <__ascii_mbtowc+0x1a>
 8028422:	b14b      	cbz	r3, 8028438 <__ascii_mbtowc+0x1e>
 8028424:	7813      	ldrb	r3, [r2, #0]
 8028426:	600b      	str	r3, [r1, #0]
 8028428:	7812      	ldrb	r2, [r2, #0]
 802842a:	1e10      	subs	r0, r2, #0
 802842c:	bf18      	it	ne
 802842e:	2001      	movne	r0, #1
 8028430:	b002      	add	sp, #8
 8028432:	4770      	bx	lr
 8028434:	4610      	mov	r0, r2
 8028436:	e7fb      	b.n	8028430 <__ascii_mbtowc+0x16>
 8028438:	f06f 0001 	mvn.w	r0, #1
 802843c:	e7f8      	b.n	8028430 <__ascii_mbtowc+0x16>
	...

08028440 <siscanf>:
 8028440:	b40e      	push	{r1, r2, r3}
 8028442:	b530      	push	{r4, r5, lr}
 8028444:	b09c      	sub	sp, #112	@ 0x70
 8028446:	ac1f      	add	r4, sp, #124	@ 0x7c
 8028448:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802844c:	f854 5b04 	ldr.w	r5, [r4], #4
 8028450:	f8ad 2014 	strh.w	r2, [sp, #20]
 8028454:	9002      	str	r0, [sp, #8]
 8028456:	9006      	str	r0, [sp, #24]
 8028458:	f7d7 ff22 	bl	80002a0 <strlen>
 802845c:	4b0b      	ldr	r3, [pc, #44]	@ (802848c <siscanf+0x4c>)
 802845e:	9003      	str	r0, [sp, #12]
 8028460:	9007      	str	r0, [sp, #28]
 8028462:	930a      	str	r3, [sp, #40]	@ 0x28
 8028464:	480a      	ldr	r0, [pc, #40]	@ (8028490 <siscanf+0x50>)
 8028466:	9401      	str	r4, [sp, #4]
 8028468:	2300      	movs	r3, #0
 802846a:	930e      	str	r3, [sp, #56]	@ 0x38
 802846c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802846e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8028472:	f8ad 3016 	strh.w	r3, [sp, #22]
 8028476:	462a      	mov	r2, r5
 8028478:	4623      	mov	r3, r4
 802847a:	a902      	add	r1, sp, #8
 802847c:	6800      	ldr	r0, [r0, #0]
 802847e:	f000 fd99 	bl	8028fb4 <__ssvfiscanf_r>
 8028482:	b01c      	add	sp, #112	@ 0x70
 8028484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028488:	b003      	add	sp, #12
 802848a:	4770      	bx	lr
 802848c:	0802588b 	.word	0x0802588b
 8028490:	20000840 	.word	0x20000840

08028494 <sniprintf>:
 8028494:	b40c      	push	{r2, r3}
 8028496:	b530      	push	{r4, r5, lr}
 8028498:	4b17      	ldr	r3, [pc, #92]	@ (80284f8 <sniprintf+0x64>)
 802849a:	1e0c      	subs	r4, r1, #0
 802849c:	681d      	ldr	r5, [r3, #0]
 802849e:	b09d      	sub	sp, #116	@ 0x74
 80284a0:	da08      	bge.n	80284b4 <sniprintf+0x20>
 80284a2:	238b      	movs	r3, #139	@ 0x8b
 80284a4:	602b      	str	r3, [r5, #0]
 80284a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80284aa:	b01d      	add	sp, #116	@ 0x74
 80284ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80284b0:	b002      	add	sp, #8
 80284b2:	4770      	bx	lr
 80284b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80284b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80284bc:	bf14      	ite	ne
 80284be:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80284c2:	4623      	moveq	r3, r4
 80284c4:	9304      	str	r3, [sp, #16]
 80284c6:	9307      	str	r3, [sp, #28]
 80284c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80284cc:	9002      	str	r0, [sp, #8]
 80284ce:	9006      	str	r0, [sp, #24]
 80284d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80284d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80284d6:	ab21      	add	r3, sp, #132	@ 0x84
 80284d8:	a902      	add	r1, sp, #8
 80284da:	4628      	mov	r0, r5
 80284dc:	9301      	str	r3, [sp, #4]
 80284de:	f000 f88b 	bl	80285f8 <_svfiprintf_r>
 80284e2:	1c43      	adds	r3, r0, #1
 80284e4:	bfbc      	itt	lt
 80284e6:	238b      	movlt	r3, #139	@ 0x8b
 80284e8:	602b      	strlt	r3, [r5, #0]
 80284ea:	2c00      	cmp	r4, #0
 80284ec:	d0dd      	beq.n	80284aa <sniprintf+0x16>
 80284ee:	9b02      	ldr	r3, [sp, #8]
 80284f0:	2200      	movs	r2, #0
 80284f2:	701a      	strb	r2, [r3, #0]
 80284f4:	e7d9      	b.n	80284aa <sniprintf+0x16>
 80284f6:	bf00      	nop
 80284f8:	20000840 	.word	0x20000840

080284fc <__ssprint_r>:
 80284fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028500:	6893      	ldr	r3, [r2, #8]
 8028502:	f8d2 b000 	ldr.w	fp, [r2]
 8028506:	9001      	str	r0, [sp, #4]
 8028508:	460c      	mov	r4, r1
 802850a:	4617      	mov	r7, r2
 802850c:	2b00      	cmp	r3, #0
 802850e:	d157      	bne.n	80285c0 <__ssprint_r+0xc4>
 8028510:	2000      	movs	r0, #0
 8028512:	2300      	movs	r3, #0
 8028514:	607b      	str	r3, [r7, #4]
 8028516:	b003      	add	sp, #12
 8028518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802851c:	e9db a800 	ldrd	sl, r8, [fp]
 8028520:	f10b 0b08 	add.w	fp, fp, #8
 8028524:	68a6      	ldr	r6, [r4, #8]
 8028526:	6820      	ldr	r0, [r4, #0]
 8028528:	f1b8 0f00 	cmp.w	r8, #0
 802852c:	d0f6      	beq.n	802851c <__ssprint_r+0x20>
 802852e:	45b0      	cmp	r8, r6
 8028530:	d32e      	bcc.n	8028590 <__ssprint_r+0x94>
 8028532:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028536:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802853a:	d029      	beq.n	8028590 <__ssprint_r+0x94>
 802853c:	6921      	ldr	r1, [r4, #16]
 802853e:	6965      	ldr	r5, [r4, #20]
 8028540:	eba0 0901 	sub.w	r9, r0, r1
 8028544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802854c:	f109 0001 	add.w	r0, r9, #1
 8028550:	106d      	asrs	r5, r5, #1
 8028552:	4440      	add	r0, r8
 8028554:	4285      	cmp	r5, r0
 8028556:	bf38      	it	cc
 8028558:	4605      	movcc	r5, r0
 802855a:	0553      	lsls	r3, r2, #21
 802855c:	d534      	bpl.n	80285c8 <__ssprint_r+0xcc>
 802855e:	9801      	ldr	r0, [sp, #4]
 8028560:	4629      	mov	r1, r5
 8028562:	f7fa fd93 	bl	802308c <_malloc_r>
 8028566:	4606      	mov	r6, r0
 8028568:	2800      	cmp	r0, #0
 802856a:	d038      	beq.n	80285de <__ssprint_r+0xe2>
 802856c:	464a      	mov	r2, r9
 802856e:	6921      	ldr	r1, [r4, #16]
 8028570:	f7fe ff4a 	bl	8027408 <memcpy>
 8028574:	89a2      	ldrh	r2, [r4, #12]
 8028576:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802857a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802857e:	81a2      	strh	r2, [r4, #12]
 8028580:	6126      	str	r6, [r4, #16]
 8028582:	6165      	str	r5, [r4, #20]
 8028584:	444e      	add	r6, r9
 8028586:	eba5 0509 	sub.w	r5, r5, r9
 802858a:	6026      	str	r6, [r4, #0]
 802858c:	60a5      	str	r5, [r4, #8]
 802858e:	4646      	mov	r6, r8
 8028590:	4546      	cmp	r6, r8
 8028592:	bf28      	it	cs
 8028594:	4646      	movcs	r6, r8
 8028596:	4632      	mov	r2, r6
 8028598:	4651      	mov	r1, sl
 802859a:	6820      	ldr	r0, [r4, #0]
 802859c:	f7fd fcc2 	bl	8025f24 <memmove>
 80285a0:	68a2      	ldr	r2, [r4, #8]
 80285a2:	1b92      	subs	r2, r2, r6
 80285a4:	60a2      	str	r2, [r4, #8]
 80285a6:	6822      	ldr	r2, [r4, #0]
 80285a8:	4432      	add	r2, r6
 80285aa:	6022      	str	r2, [r4, #0]
 80285ac:	68ba      	ldr	r2, [r7, #8]
 80285ae:	eba2 0308 	sub.w	r3, r2, r8
 80285b2:	44c2      	add	sl, r8
 80285b4:	60bb      	str	r3, [r7, #8]
 80285b6:	2b00      	cmp	r3, #0
 80285b8:	d0aa      	beq.n	8028510 <__ssprint_r+0x14>
 80285ba:	f04f 0800 	mov.w	r8, #0
 80285be:	e7b1      	b.n	8028524 <__ssprint_r+0x28>
 80285c0:	f04f 0a00 	mov.w	sl, #0
 80285c4:	46d0      	mov	r8, sl
 80285c6:	e7ad      	b.n	8028524 <__ssprint_r+0x28>
 80285c8:	9801      	ldr	r0, [sp, #4]
 80285ca:	462a      	mov	r2, r5
 80285cc:	f004 fcf2 	bl	802cfb4 <_realloc_r>
 80285d0:	4606      	mov	r6, r0
 80285d2:	2800      	cmp	r0, #0
 80285d4:	d1d4      	bne.n	8028580 <__ssprint_r+0x84>
 80285d6:	6921      	ldr	r1, [r4, #16]
 80285d8:	9801      	ldr	r0, [sp, #4]
 80285da:	f7ff fe17 	bl	802820c <_free_r>
 80285de:	9a01      	ldr	r2, [sp, #4]
 80285e0:	230c      	movs	r3, #12
 80285e2:	6013      	str	r3, [r2, #0]
 80285e4:	89a3      	ldrh	r3, [r4, #12]
 80285e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80285ea:	81a3      	strh	r3, [r4, #12]
 80285ec:	2300      	movs	r3, #0
 80285ee:	60bb      	str	r3, [r7, #8]
 80285f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80285f4:	e78d      	b.n	8028512 <__ssprint_r+0x16>
	...

080285f8 <_svfiprintf_r>:
 80285f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285fc:	461d      	mov	r5, r3
 80285fe:	898b      	ldrh	r3, [r1, #12]
 8028600:	b0bb      	sub	sp, #236	@ 0xec
 8028602:	468b      	mov	fp, r1
 8028604:	0619      	lsls	r1, r3, #24
 8028606:	9001      	str	r0, [sp, #4]
 8028608:	9202      	str	r2, [sp, #8]
 802860a:	d514      	bpl.n	8028636 <_svfiprintf_r+0x3e>
 802860c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8028610:	b98b      	cbnz	r3, 8028636 <_svfiprintf_r+0x3e>
 8028612:	2140      	movs	r1, #64	@ 0x40
 8028614:	f7fa fd3a 	bl	802308c <_malloc_r>
 8028618:	f8cb 0000 	str.w	r0, [fp]
 802861c:	f8cb 0010 	str.w	r0, [fp, #16]
 8028620:	b930      	cbnz	r0, 8028630 <_svfiprintf_r+0x38>
 8028622:	9a01      	ldr	r2, [sp, #4]
 8028624:	230c      	movs	r3, #12
 8028626:	6013      	str	r3, [r2, #0]
 8028628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802862c:	9304      	str	r3, [sp, #16]
 802862e:	e3df      	b.n	8028df0 <_svfiprintf_r+0x7f8>
 8028630:	2340      	movs	r3, #64	@ 0x40
 8028632:	f8cb 3014 	str.w	r3, [fp, #20]
 8028636:	2300      	movs	r3, #0
 8028638:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802863c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8028640:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8028644:	ae11      	add	r6, sp, #68	@ 0x44
 8028646:	960e      	str	r6, [sp, #56]	@ 0x38
 8028648:	9304      	str	r3, [sp, #16]
 802864a:	9b02      	ldr	r3, [sp, #8]
 802864c:	461c      	mov	r4, r3
 802864e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028652:	b10a      	cbz	r2, 8028658 <_svfiprintf_r+0x60>
 8028654:	2a25      	cmp	r2, #37	@ 0x25
 8028656:	d1f9      	bne.n	802864c <_svfiprintf_r+0x54>
 8028658:	9a02      	ldr	r2, [sp, #8]
 802865a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802865c:	1aa7      	subs	r7, r4, r2
 802865e:	d00c      	beq.n	802867a <_svfiprintf_r+0x82>
 8028660:	443b      	add	r3, r7
 8028662:	9310      	str	r3, [sp, #64]	@ 0x40
 8028664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028666:	3301      	adds	r3, #1
 8028668:	2b07      	cmp	r3, #7
 802866a:	e9c6 2700 	strd	r2, r7, [r6]
 802866e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028670:	dc76      	bgt.n	8028760 <_svfiprintf_r+0x168>
 8028672:	3608      	adds	r6, #8
 8028674:	9b04      	ldr	r3, [sp, #16]
 8028676:	443b      	add	r3, r7
 8028678:	9304      	str	r3, [sp, #16]
 802867a:	7823      	ldrb	r3, [r4, #0]
 802867c:	2b00      	cmp	r3, #0
 802867e:	f000 83ce 	beq.w	8028e1e <_svfiprintf_r+0x826>
 8028682:	2300      	movs	r3, #0
 8028684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8028688:	3401      	adds	r4, #1
 802868a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802868e:	9200      	str	r2, [sp, #0]
 8028690:	9303      	str	r3, [sp, #12]
 8028692:	4699      	mov	r9, r3
 8028694:	4622      	mov	r2, r4
 8028696:	f812 3b01 	ldrb.w	r3, [r2], #1
 802869a:	9202      	str	r2, [sp, #8]
 802869c:	f1a3 0220 	sub.w	r2, r3, #32
 80286a0:	2a5a      	cmp	r2, #90	@ 0x5a
 80286a2:	f200 8318 	bhi.w	8028cd6 <_svfiprintf_r+0x6de>
 80286a6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80286aa:	009a      	.short	0x009a
 80286ac:	03160316 	.word	0x03160316
 80286b0:	031600a2 	.word	0x031600a2
 80286b4:	03160316 	.word	0x03160316
 80286b8:	03160082 	.word	0x03160082
 80286bc:	00a50316 	.word	0x00a50316
 80286c0:	031600af 	.word	0x031600af
 80286c4:	00b100ac 	.word	0x00b100ac
 80286c8:	00cc0316 	.word	0x00cc0316
 80286cc:	00cf00cf 	.word	0x00cf00cf
 80286d0:	00cf00cf 	.word	0x00cf00cf
 80286d4:	00cf00cf 	.word	0x00cf00cf
 80286d8:	00cf00cf 	.word	0x00cf00cf
 80286dc:	031600cf 	.word	0x031600cf
 80286e0:	03160316 	.word	0x03160316
 80286e4:	03160316 	.word	0x03160316
 80286e8:	03160316 	.word	0x03160316
 80286ec:	03160316 	.word	0x03160316
 80286f0:	010600f9 	.word	0x010600f9
 80286f4:	03160316 	.word	0x03160316
 80286f8:	03160316 	.word	0x03160316
 80286fc:	03160316 	.word	0x03160316
 8028700:	03160316 	.word	0x03160316
 8028704:	03160316 	.word	0x03160316
 8028708:	03160154 	.word	0x03160154
 802870c:	03160316 	.word	0x03160316
 8028710:	0316019b 	.word	0x0316019b
 8028714:	0316027d 	.word	0x0316027d
 8028718:	029d0316 	.word	0x029d0316
 802871c:	03160316 	.word	0x03160316
 8028720:	03160316 	.word	0x03160316
 8028724:	03160316 	.word	0x03160316
 8028728:	03160316 	.word	0x03160316
 802872c:	03160316 	.word	0x03160316
 8028730:	010800f9 	.word	0x010800f9
 8028734:	03160316 	.word	0x03160316
 8028738:	00df0316 	.word	0x00df0316
 802873c:	00f30108 	.word	0x00f30108
 8028740:	00ec0316 	.word	0x00ec0316
 8028744:	01340316 	.word	0x01340316
 8028748:	018a0156 	.word	0x018a0156
 802874c:	031600f3 	.word	0x031600f3
 8028750:	0098019b 	.word	0x0098019b
 8028754:	0316027f 	.word	0x0316027f
 8028758:	00650316 	.word	0x00650316
 802875c:	00980316 	.word	0x00980316
 8028760:	9801      	ldr	r0, [sp, #4]
 8028762:	aa0e      	add	r2, sp, #56	@ 0x38
 8028764:	4659      	mov	r1, fp
 8028766:	f7ff fec9 	bl	80284fc <__ssprint_r>
 802876a:	2800      	cmp	r0, #0
 802876c:	f040 833b 	bne.w	8028de6 <_svfiprintf_r+0x7ee>
 8028770:	ae11      	add	r6, sp, #68	@ 0x44
 8028772:	e77f      	b.n	8028674 <_svfiprintf_r+0x7c>
 8028774:	4a99      	ldr	r2, [pc, #612]	@ (80289dc <_svfiprintf_r+0x3e4>)
 8028776:	9205      	str	r2, [sp, #20]
 8028778:	f019 0220 	ands.w	r2, r9, #32
 802877c:	f000 8234 	beq.w	8028be8 <_svfiprintf_r+0x5f0>
 8028780:	3507      	adds	r5, #7
 8028782:	f025 0507 	bic.w	r5, r5, #7
 8028786:	462f      	mov	r7, r5
 8028788:	686d      	ldr	r5, [r5, #4]
 802878a:	f857 4b08 	ldr.w	r4, [r7], #8
 802878e:	f019 0f01 	tst.w	r9, #1
 8028792:	d009      	beq.n	80287a8 <_svfiprintf_r+0x1b0>
 8028794:	ea54 0205 	orrs.w	r2, r4, r5
 8028798:	bf1f      	itttt	ne
 802879a:	2230      	movne	r2, #48	@ 0x30
 802879c:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80287a0:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80287a4:	f049 0902 	orrne.w	r9, r9, #2
 80287a8:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 80287ac:	e113      	b.n	80289d6 <_svfiprintf_r+0x3de>
 80287ae:	9801      	ldr	r0, [sp, #4]
 80287b0:	f7fe fd60 	bl	8027274 <_localeconv_r>
 80287b4:	6843      	ldr	r3, [r0, #4]
 80287b6:	9308      	str	r3, [sp, #32]
 80287b8:	4618      	mov	r0, r3
 80287ba:	f7d7 fd71 	bl	80002a0 <strlen>
 80287be:	9007      	str	r0, [sp, #28]
 80287c0:	9801      	ldr	r0, [sp, #4]
 80287c2:	f7fe fd57 	bl	8027274 <_localeconv_r>
 80287c6:	6883      	ldr	r3, [r0, #8]
 80287c8:	9306      	str	r3, [sp, #24]
 80287ca:	9b07      	ldr	r3, [sp, #28]
 80287cc:	b12b      	cbz	r3, 80287da <_svfiprintf_r+0x1e2>
 80287ce:	9b06      	ldr	r3, [sp, #24]
 80287d0:	b11b      	cbz	r3, 80287da <_svfiprintf_r+0x1e2>
 80287d2:	781b      	ldrb	r3, [r3, #0]
 80287d4:	b10b      	cbz	r3, 80287da <_svfiprintf_r+0x1e2>
 80287d6:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 80287da:	9c02      	ldr	r4, [sp, #8]
 80287dc:	e75a      	b.n	8028694 <_svfiprintf_r+0x9c>
 80287de:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80287e2:	2b00      	cmp	r3, #0
 80287e4:	d1f9      	bne.n	80287da <_svfiprintf_r+0x1e2>
 80287e6:	2320      	movs	r3, #32
 80287e8:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80287ec:	e7f5      	b.n	80287da <_svfiprintf_r+0x1e2>
 80287ee:	f049 0901 	orr.w	r9, r9, #1
 80287f2:	e7f2      	b.n	80287da <_svfiprintf_r+0x1e2>
 80287f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80287f8:	9303      	str	r3, [sp, #12]
 80287fa:	2b00      	cmp	r3, #0
 80287fc:	daed      	bge.n	80287da <_svfiprintf_r+0x1e2>
 80287fe:	425b      	negs	r3, r3
 8028800:	9303      	str	r3, [sp, #12]
 8028802:	f049 0904 	orr.w	r9, r9, #4
 8028806:	e7e8      	b.n	80287da <_svfiprintf_r+0x1e2>
 8028808:	232b      	movs	r3, #43	@ 0x2b
 802880a:	e7ed      	b.n	80287e8 <_svfiprintf_r+0x1f0>
 802880c:	9a02      	ldr	r2, [sp, #8]
 802880e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028812:	2b2a      	cmp	r3, #42	@ 0x2a
 8028814:	d111      	bne.n	802883a <_svfiprintf_r+0x242>
 8028816:	f855 3b04 	ldr.w	r3, [r5], #4
 802881a:	9202      	str	r2, [sp, #8]
 802881c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028820:	9300      	str	r3, [sp, #0]
 8028822:	e7da      	b.n	80287da <_svfiprintf_r+0x1e2>
 8028824:	9b00      	ldr	r3, [sp, #0]
 8028826:	fb00 1303 	mla	r3, r0, r3, r1
 802882a:	9300      	str	r3, [sp, #0]
 802882c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028830:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8028834:	2909      	cmp	r1, #9
 8028836:	d9f5      	bls.n	8028824 <_svfiprintf_r+0x22c>
 8028838:	e72f      	b.n	802869a <_svfiprintf_r+0xa2>
 802883a:	2100      	movs	r1, #0
 802883c:	9100      	str	r1, [sp, #0]
 802883e:	200a      	movs	r0, #10
 8028840:	e7f6      	b.n	8028830 <_svfiprintf_r+0x238>
 8028842:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 8028846:	e7c8      	b.n	80287da <_svfiprintf_r+0x1e2>
 8028848:	2100      	movs	r1, #0
 802884a:	9a02      	ldr	r2, [sp, #8]
 802884c:	9103      	str	r1, [sp, #12]
 802884e:	200a      	movs	r0, #10
 8028850:	9903      	ldr	r1, [sp, #12]
 8028852:	3b30      	subs	r3, #48	@ 0x30
 8028854:	fb00 3301 	mla	r3, r0, r1, r3
 8028858:	9303      	str	r3, [sp, #12]
 802885a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802885e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8028862:	2909      	cmp	r1, #9
 8028864:	d9f4      	bls.n	8028850 <_svfiprintf_r+0x258>
 8028866:	e718      	b.n	802869a <_svfiprintf_r+0xa2>
 8028868:	9b02      	ldr	r3, [sp, #8]
 802886a:	781b      	ldrb	r3, [r3, #0]
 802886c:	2b68      	cmp	r3, #104	@ 0x68
 802886e:	bf01      	itttt	eq
 8028870:	9b02      	ldreq	r3, [sp, #8]
 8028872:	3301      	addeq	r3, #1
 8028874:	9302      	streq	r3, [sp, #8]
 8028876:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802887a:	bf18      	it	ne
 802887c:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 8028880:	e7ab      	b.n	80287da <_svfiprintf_r+0x1e2>
 8028882:	9b02      	ldr	r3, [sp, #8]
 8028884:	781b      	ldrb	r3, [r3, #0]
 8028886:	2b6c      	cmp	r3, #108	@ 0x6c
 8028888:	d105      	bne.n	8028896 <_svfiprintf_r+0x29e>
 802888a:	9b02      	ldr	r3, [sp, #8]
 802888c:	3301      	adds	r3, #1
 802888e:	9302      	str	r3, [sp, #8]
 8028890:	f049 0920 	orr.w	r9, r9, #32
 8028894:	e7a1      	b.n	80287da <_svfiprintf_r+0x1e2>
 8028896:	f049 0910 	orr.w	r9, r9, #16
 802889a:	e79e      	b.n	80287da <_svfiprintf_r+0x1e2>
 802889c:	462f      	mov	r7, r5
 802889e:	2400      	movs	r4, #0
 80288a0:	f857 3b04 	ldr.w	r3, [r7], #4
 80288a4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80288a8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80288ac:	2301      	movs	r3, #1
 80288ae:	9300      	str	r3, [sp, #0]
 80288b0:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 80288b4:	e0aa      	b.n	8028a0c <_svfiprintf_r+0x414>
 80288b6:	f049 0910 	orr.w	r9, r9, #16
 80288ba:	f019 0f20 	tst.w	r9, #32
 80288be:	d011      	beq.n	80288e4 <_svfiprintf_r+0x2ec>
 80288c0:	3507      	adds	r5, #7
 80288c2:	f025 0507 	bic.w	r5, r5, #7
 80288c6:	462f      	mov	r7, r5
 80288c8:	686d      	ldr	r5, [r5, #4]
 80288ca:	f857 4b08 	ldr.w	r4, [r7], #8
 80288ce:	2d00      	cmp	r5, #0
 80288d0:	da06      	bge.n	80288e0 <_svfiprintf_r+0x2e8>
 80288d2:	4264      	negs	r4, r4
 80288d4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80288d8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80288dc:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80288e0:	2301      	movs	r3, #1
 80288e2:	e048      	b.n	8028976 <_svfiprintf_r+0x37e>
 80288e4:	462f      	mov	r7, r5
 80288e6:	f019 0f10 	tst.w	r9, #16
 80288ea:	f857 5b04 	ldr.w	r5, [r7], #4
 80288ee:	d002      	beq.n	80288f6 <_svfiprintf_r+0x2fe>
 80288f0:	462c      	mov	r4, r5
 80288f2:	17ed      	asrs	r5, r5, #31
 80288f4:	e7eb      	b.n	80288ce <_svfiprintf_r+0x2d6>
 80288f6:	f019 0f40 	tst.w	r9, #64	@ 0x40
 80288fa:	d003      	beq.n	8028904 <_svfiprintf_r+0x30c>
 80288fc:	b22c      	sxth	r4, r5
 80288fe:	f345 35c0 	sbfx	r5, r5, #15, #1
 8028902:	e7e4      	b.n	80288ce <_svfiprintf_r+0x2d6>
 8028904:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8028908:	d0f2      	beq.n	80288f0 <_svfiprintf_r+0x2f8>
 802890a:	b26c      	sxtb	r4, r5
 802890c:	f345 15c0 	sbfx	r5, r5, #7, #1
 8028910:	e7dd      	b.n	80288ce <_svfiprintf_r+0x2d6>
 8028912:	f019 0f20 	tst.w	r9, #32
 8028916:	d007      	beq.n	8028928 <_svfiprintf_r+0x330>
 8028918:	9a04      	ldr	r2, [sp, #16]
 802891a:	682b      	ldr	r3, [r5, #0]
 802891c:	9904      	ldr	r1, [sp, #16]
 802891e:	17d2      	asrs	r2, r2, #31
 8028920:	e9c3 1200 	strd	r1, r2, [r3]
 8028924:	3504      	adds	r5, #4
 8028926:	e690      	b.n	802864a <_svfiprintf_r+0x52>
 8028928:	f019 0f10 	tst.w	r9, #16
 802892c:	d003      	beq.n	8028936 <_svfiprintf_r+0x33e>
 802892e:	682b      	ldr	r3, [r5, #0]
 8028930:	9a04      	ldr	r2, [sp, #16]
 8028932:	601a      	str	r2, [r3, #0]
 8028934:	e7f6      	b.n	8028924 <_svfiprintf_r+0x32c>
 8028936:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802893a:	d003      	beq.n	8028944 <_svfiprintf_r+0x34c>
 802893c:	682b      	ldr	r3, [r5, #0]
 802893e:	9a04      	ldr	r2, [sp, #16]
 8028940:	801a      	strh	r2, [r3, #0]
 8028942:	e7ef      	b.n	8028924 <_svfiprintf_r+0x32c>
 8028944:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8028948:	d0f1      	beq.n	802892e <_svfiprintf_r+0x336>
 802894a:	682b      	ldr	r3, [r5, #0]
 802894c:	9a04      	ldr	r2, [sp, #16]
 802894e:	701a      	strb	r2, [r3, #0]
 8028950:	e7e8      	b.n	8028924 <_svfiprintf_r+0x32c>
 8028952:	f049 0910 	orr.w	r9, r9, #16
 8028956:	f019 0320 	ands.w	r3, r9, #32
 802895a:	d01e      	beq.n	802899a <_svfiprintf_r+0x3a2>
 802895c:	3507      	adds	r5, #7
 802895e:	f025 0507 	bic.w	r5, r5, #7
 8028962:	462f      	mov	r7, r5
 8028964:	686d      	ldr	r5, [r5, #4]
 8028966:	f857 4b08 	ldr.w	r4, [r7], #8
 802896a:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802896e:	2300      	movs	r3, #0
 8028970:	2200      	movs	r2, #0
 8028972:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8028976:	9a00      	ldr	r2, [sp, #0]
 8028978:	3201      	adds	r2, #1
 802897a:	f000 8259 	beq.w	8028e30 <_svfiprintf_r+0x838>
 802897e:	ea54 0205 	orrs.w	r2, r4, r5
 8028982:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 8028986:	f040 8258 	bne.w	8028e3a <_svfiprintf_r+0x842>
 802898a:	9a00      	ldr	r2, [sp, #0]
 802898c:	2a00      	cmp	r2, #0
 802898e:	f000 8199 	beq.w	8028cc4 <_svfiprintf_r+0x6cc>
 8028992:	2b01      	cmp	r3, #1
 8028994:	f040 8254 	bne.w	8028e40 <_svfiprintf_r+0x848>
 8028998:	e13d      	b.n	8028c16 <_svfiprintf_r+0x61e>
 802899a:	462f      	mov	r7, r5
 802899c:	f019 0510 	ands.w	r5, r9, #16
 80289a0:	f857 4b04 	ldr.w	r4, [r7], #4
 80289a4:	d001      	beq.n	80289aa <_svfiprintf_r+0x3b2>
 80289a6:	461d      	mov	r5, r3
 80289a8:	e7df      	b.n	802896a <_svfiprintf_r+0x372>
 80289aa:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 80289ae:	d001      	beq.n	80289b4 <_svfiprintf_r+0x3bc>
 80289b0:	b2a4      	uxth	r4, r4
 80289b2:	e7da      	b.n	802896a <_svfiprintf_r+0x372>
 80289b4:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 80289b8:	d0d7      	beq.n	802896a <_svfiprintf_r+0x372>
 80289ba:	b2e4      	uxtb	r4, r4
 80289bc:	e7f3      	b.n	80289a6 <_svfiprintf_r+0x3ae>
 80289be:	462f      	mov	r7, r5
 80289c0:	f647 0330 	movw	r3, #30768	@ 0x7830
 80289c4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80289c8:	f857 4b04 	ldr.w	r4, [r7], #4
 80289cc:	4b03      	ldr	r3, [pc, #12]	@ (80289dc <_svfiprintf_r+0x3e4>)
 80289ce:	9305      	str	r3, [sp, #20]
 80289d0:	2500      	movs	r5, #0
 80289d2:	f049 0902 	orr.w	r9, r9, #2
 80289d6:	2302      	movs	r3, #2
 80289d8:	e7ca      	b.n	8028970 <_svfiprintf_r+0x378>
 80289da:	bf00      	nop
 80289dc:	08034048 	.word	0x08034048
 80289e0:	9b00      	ldr	r3, [sp, #0]
 80289e2:	462f      	mov	r7, r5
 80289e4:	1c5a      	adds	r2, r3, #1
 80289e6:	f04f 0500 	mov.w	r5, #0
 80289ea:	f857 8b04 	ldr.w	r8, [r7], #4
 80289ee:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 80289f2:	f000 80d2 	beq.w	8028b9a <_svfiprintf_r+0x5a2>
 80289f6:	461a      	mov	r2, r3
 80289f8:	4629      	mov	r1, r5
 80289fa:	4640      	mov	r0, r8
 80289fc:	f7d7 fc00 	bl	8000200 <memchr>
 8028a00:	4604      	mov	r4, r0
 8028a02:	b118      	cbz	r0, 8028a0c <_svfiprintf_r+0x414>
 8028a04:	eba0 0308 	sub.w	r3, r0, r8
 8028a08:	9300      	str	r3, [sp, #0]
 8028a0a:	462c      	mov	r4, r5
 8028a0c:	9d00      	ldr	r5, [sp, #0]
 8028a0e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8028a12:	42a5      	cmp	r5, r4
 8028a14:	bfb8      	it	lt
 8028a16:	4625      	movlt	r5, r4
 8028a18:	b103      	cbz	r3, 8028a1c <_svfiprintf_r+0x424>
 8028a1a:	3501      	adds	r5, #1
 8028a1c:	f019 0302 	ands.w	r3, r9, #2
 8028a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8028a22:	bf18      	it	ne
 8028a24:	3502      	addne	r5, #2
 8028a26:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 8028a2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8028a2c:	d123      	bne.n	8028a76 <_svfiprintf_r+0x47e>
 8028a2e:	9b03      	ldr	r3, [sp, #12]
 8028a30:	eba3 0a05 	sub.w	sl, r3, r5
 8028a34:	f1ba 0f00 	cmp.w	sl, #0
 8028a38:	dd1d      	ble.n	8028a76 <_svfiprintf_r+0x47e>
 8028a3a:	4bac      	ldr	r3, [pc, #688]	@ (8028cec <_svfiprintf_r+0x6f4>)
 8028a3c:	6033      	str	r3, [r6, #0]
 8028a3e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8028a42:	f1ba 0f10 	cmp.w	sl, #16
 8028a46:	f102 0201 	add.w	r2, r2, #1
 8028a4a:	f106 0008 	add.w	r0, r6, #8
 8028a4e:	f300 8153 	bgt.w	8028cf8 <_svfiprintf_r+0x700>
 8028a52:	eb0c 010a 	add.w	r1, ip, sl
 8028a56:	2a07      	cmp	r2, #7
 8028a58:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028a5c:	f8c6 a004 	str.w	sl, [r6, #4]
 8028a60:	f340 815e 	ble.w	8028d20 <_svfiprintf_r+0x728>
 8028a64:	9801      	ldr	r0, [sp, #4]
 8028a66:	aa0e      	add	r2, sp, #56	@ 0x38
 8028a68:	4659      	mov	r1, fp
 8028a6a:	f7ff fd47 	bl	80284fc <__ssprint_r>
 8028a6e:	2800      	cmp	r0, #0
 8028a70:	f040 81b9 	bne.w	8028de6 <_svfiprintf_r+0x7ee>
 8028a74:	ae11      	add	r6, sp, #68	@ 0x44
 8028a76:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8028a7a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028a7e:	b161      	cbz	r1, 8028a9a <_svfiprintf_r+0x4a2>
 8028a80:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8028a84:	3301      	adds	r3, #1
 8028a86:	6031      	str	r1, [r6, #0]
 8028a88:	2101      	movs	r1, #1
 8028a8a:	440a      	add	r2, r1
 8028a8c:	2b07      	cmp	r3, #7
 8028a8e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028a92:	6071      	str	r1, [r6, #4]
 8028a94:	f300 8146 	bgt.w	8028d24 <_svfiprintf_r+0x72c>
 8028a98:	3608      	adds	r6, #8
 8028a9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028a9c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028aa0:	b159      	cbz	r1, 8028aba <_svfiprintf_r+0x4c2>
 8028aa2:	a90d      	add	r1, sp, #52	@ 0x34
 8028aa4:	3301      	adds	r3, #1
 8028aa6:	6031      	str	r1, [r6, #0]
 8028aa8:	2102      	movs	r1, #2
 8028aaa:	440a      	add	r2, r1
 8028aac:	2b07      	cmp	r3, #7
 8028aae:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028ab2:	6071      	str	r1, [r6, #4]
 8028ab4:	f300 813f 	bgt.w	8028d36 <_svfiprintf_r+0x73e>
 8028ab8:	3608      	adds	r6, #8
 8028aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028abc:	2b80      	cmp	r3, #128	@ 0x80
 8028abe:	d123      	bne.n	8028b08 <_svfiprintf_r+0x510>
 8028ac0:	9b03      	ldr	r3, [sp, #12]
 8028ac2:	eba3 0a05 	sub.w	sl, r3, r5
 8028ac6:	f1ba 0f00 	cmp.w	sl, #0
 8028aca:	dd1d      	ble.n	8028b08 <_svfiprintf_r+0x510>
 8028acc:	4b88      	ldr	r3, [pc, #544]	@ (8028cf0 <_svfiprintf_r+0x6f8>)
 8028ace:	6033      	str	r3, [r6, #0]
 8028ad0:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8028ad4:	f1ba 0f10 	cmp.w	sl, #16
 8028ad8:	f102 0201 	add.w	r2, r2, #1
 8028adc:	f106 0008 	add.w	r0, r6, #8
 8028ae0:	f300 8132 	bgt.w	8028d48 <_svfiprintf_r+0x750>
 8028ae4:	eb0c 010a 	add.w	r1, ip, sl
 8028ae8:	2a07      	cmp	r2, #7
 8028aea:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028aee:	f8c6 a004 	str.w	sl, [r6, #4]
 8028af2:	f340 813d 	ble.w	8028d70 <_svfiprintf_r+0x778>
 8028af6:	9801      	ldr	r0, [sp, #4]
 8028af8:	aa0e      	add	r2, sp, #56	@ 0x38
 8028afa:	4659      	mov	r1, fp
 8028afc:	f7ff fcfe 	bl	80284fc <__ssprint_r>
 8028b00:	2800      	cmp	r0, #0
 8028b02:	f040 8170 	bne.w	8028de6 <_svfiprintf_r+0x7ee>
 8028b06:	ae11      	add	r6, sp, #68	@ 0x44
 8028b08:	9b00      	ldr	r3, [sp, #0]
 8028b0a:	1ae4      	subs	r4, r4, r3
 8028b0c:	2c00      	cmp	r4, #0
 8028b0e:	dd1a      	ble.n	8028b46 <_svfiprintf_r+0x54e>
 8028b10:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028b14:	4876      	ldr	r0, [pc, #472]	@ (8028cf0 <_svfiprintf_r+0x6f8>)
 8028b16:	6030      	str	r0, [r6, #0]
 8028b18:	2c10      	cmp	r4, #16
 8028b1a:	f103 0301 	add.w	r3, r3, #1
 8028b1e:	f106 0108 	add.w	r1, r6, #8
 8028b22:	f300 8127 	bgt.w	8028d74 <_svfiprintf_r+0x77c>
 8028b26:	6074      	str	r4, [r6, #4]
 8028b28:	2b07      	cmp	r3, #7
 8028b2a:	4414      	add	r4, r2
 8028b2c:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8028b30:	f340 8131 	ble.w	8028d96 <_svfiprintf_r+0x79e>
 8028b34:	9801      	ldr	r0, [sp, #4]
 8028b36:	aa0e      	add	r2, sp, #56	@ 0x38
 8028b38:	4659      	mov	r1, fp
 8028b3a:	f7ff fcdf 	bl	80284fc <__ssprint_r>
 8028b3e:	2800      	cmp	r0, #0
 8028b40:	f040 8151 	bne.w	8028de6 <_svfiprintf_r+0x7ee>
 8028b44:	ae11      	add	r6, sp, #68	@ 0x44
 8028b46:	9b00      	ldr	r3, [sp, #0]
 8028b48:	9a00      	ldr	r2, [sp, #0]
 8028b4a:	6073      	str	r3, [r6, #4]
 8028b4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028b4e:	f8c6 8000 	str.w	r8, [r6]
 8028b52:	4413      	add	r3, r2
 8028b54:	9310      	str	r3, [sp, #64]	@ 0x40
 8028b56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028b58:	3301      	adds	r3, #1
 8028b5a:	2b07      	cmp	r3, #7
 8028b5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028b5e:	f300 811c 	bgt.w	8028d9a <_svfiprintf_r+0x7a2>
 8028b62:	f106 0308 	add.w	r3, r6, #8
 8028b66:	f019 0f04 	tst.w	r9, #4
 8028b6a:	f040 811e 	bne.w	8028daa <_svfiprintf_r+0x7b2>
 8028b6e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8028b72:	42aa      	cmp	r2, r5
 8028b74:	bfac      	ite	ge
 8028b76:	189b      	addge	r3, r3, r2
 8028b78:	195b      	addlt	r3, r3, r5
 8028b7a:	9304      	str	r3, [sp, #16]
 8028b7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028b7e:	b13b      	cbz	r3, 8028b90 <_svfiprintf_r+0x598>
 8028b80:	9801      	ldr	r0, [sp, #4]
 8028b82:	aa0e      	add	r2, sp, #56	@ 0x38
 8028b84:	4659      	mov	r1, fp
 8028b86:	f7ff fcb9 	bl	80284fc <__ssprint_r>
 8028b8a:	2800      	cmp	r0, #0
 8028b8c:	f040 812b 	bne.w	8028de6 <_svfiprintf_r+0x7ee>
 8028b90:	2300      	movs	r3, #0
 8028b92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028b94:	463d      	mov	r5, r7
 8028b96:	ae11      	add	r6, sp, #68	@ 0x44
 8028b98:	e557      	b.n	802864a <_svfiprintf_r+0x52>
 8028b9a:	4640      	mov	r0, r8
 8028b9c:	f7d7 fb80 	bl	80002a0 <strlen>
 8028ba0:	9000      	str	r0, [sp, #0]
 8028ba2:	e732      	b.n	8028a0a <_svfiprintf_r+0x412>
 8028ba4:	f049 0910 	orr.w	r9, r9, #16
 8028ba8:	f019 0320 	ands.w	r3, r9, #32
 8028bac:	d008      	beq.n	8028bc0 <_svfiprintf_r+0x5c8>
 8028bae:	3507      	adds	r5, #7
 8028bb0:	f025 0507 	bic.w	r5, r5, #7
 8028bb4:	462f      	mov	r7, r5
 8028bb6:	686d      	ldr	r5, [r5, #4]
 8028bb8:	f857 4b08 	ldr.w	r4, [r7], #8
 8028bbc:	2301      	movs	r3, #1
 8028bbe:	e6d7      	b.n	8028970 <_svfiprintf_r+0x378>
 8028bc0:	462f      	mov	r7, r5
 8028bc2:	f019 0510 	ands.w	r5, r9, #16
 8028bc6:	f857 4b04 	ldr.w	r4, [r7], #4
 8028bca:	d001      	beq.n	8028bd0 <_svfiprintf_r+0x5d8>
 8028bcc:	461d      	mov	r5, r3
 8028bce:	e7f5      	b.n	8028bbc <_svfiprintf_r+0x5c4>
 8028bd0:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8028bd4:	d001      	beq.n	8028bda <_svfiprintf_r+0x5e2>
 8028bd6:	b2a4      	uxth	r4, r4
 8028bd8:	e7f0      	b.n	8028bbc <_svfiprintf_r+0x5c4>
 8028bda:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8028bde:	d0ed      	beq.n	8028bbc <_svfiprintf_r+0x5c4>
 8028be0:	b2e4      	uxtb	r4, r4
 8028be2:	e7f3      	b.n	8028bcc <_svfiprintf_r+0x5d4>
 8028be4:	4a43      	ldr	r2, [pc, #268]	@ (8028cf4 <_svfiprintf_r+0x6fc>)
 8028be6:	e5c6      	b.n	8028776 <_svfiprintf_r+0x17e>
 8028be8:	462f      	mov	r7, r5
 8028bea:	f019 0510 	ands.w	r5, r9, #16
 8028bee:	f857 4b04 	ldr.w	r4, [r7], #4
 8028bf2:	d001      	beq.n	8028bf8 <_svfiprintf_r+0x600>
 8028bf4:	4615      	mov	r5, r2
 8028bf6:	e5ca      	b.n	802878e <_svfiprintf_r+0x196>
 8028bf8:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 8028bfc:	d001      	beq.n	8028c02 <_svfiprintf_r+0x60a>
 8028bfe:	b2a4      	uxth	r4, r4
 8028c00:	e5c5      	b.n	802878e <_svfiprintf_r+0x196>
 8028c02:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8028c06:	f43f adc2 	beq.w	802878e <_svfiprintf_r+0x196>
 8028c0a:	b2e4      	uxtb	r4, r4
 8028c0c:	e7f2      	b.n	8028bf4 <_svfiprintf_r+0x5fc>
 8028c0e:	2c0a      	cmp	r4, #10
 8028c10:	f175 0300 	sbcs.w	r3, r5, #0
 8028c14:	d206      	bcs.n	8028c24 <_svfiprintf_r+0x62c>
 8028c16:	3430      	adds	r4, #48	@ 0x30
 8028c18:	b2e4      	uxtb	r4, r4
 8028c1a:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8028c1e:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 8028c22:	e129      	b.n	8028e78 <_svfiprintf_r+0x880>
 8028c24:	ab3a      	add	r3, sp, #232	@ 0xe8
 8028c26:	9309      	str	r3, [sp, #36]	@ 0x24
 8028c28:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 8028c2c:	f04f 0900 	mov.w	r9, #0
 8028c30:	930a      	str	r3, [sp, #40]	@ 0x28
 8028c32:	220a      	movs	r2, #10
 8028c34:	2300      	movs	r3, #0
 8028c36:	4620      	mov	r0, r4
 8028c38:	4629      	mov	r1, r5
 8028c3a:	f7d8 f88d 	bl	8000d58 <__aeabi_uldivmod>
 8028c3e:	460b      	mov	r3, r1
 8028c40:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028c42:	900b      	str	r0, [sp, #44]	@ 0x2c
 8028c44:	3230      	adds	r2, #48	@ 0x30
 8028c46:	f801 2c01 	strb.w	r2, [r1, #-1]
 8028c4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028c4c:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8028c50:	f109 0901 	add.w	r9, r9, #1
 8028c54:	b1e2      	cbz	r2, 8028c90 <_svfiprintf_r+0x698>
 8028c56:	9a06      	ldr	r2, [sp, #24]
 8028c58:	7812      	ldrb	r2, [r2, #0]
 8028c5a:	454a      	cmp	r2, r9
 8028c5c:	d118      	bne.n	8028c90 <_svfiprintf_r+0x698>
 8028c5e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028c62:	d015      	beq.n	8028c90 <_svfiprintf_r+0x698>
 8028c64:	2c0a      	cmp	r4, #10
 8028c66:	f175 0200 	sbcs.w	r2, r5, #0
 8028c6a:	d311      	bcc.n	8028c90 <_svfiprintf_r+0x698>
 8028c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8028c6e:	9b07      	ldr	r3, [sp, #28]
 8028c70:	9908      	ldr	r1, [sp, #32]
 8028c72:	eba8 0803 	sub.w	r8, r8, r3
 8028c76:	461a      	mov	r2, r3
 8028c78:	4640      	mov	r0, r8
 8028c7a:	f7fd f9b4 	bl	8025fe6 <strncpy>
 8028c7e:	9b06      	ldr	r3, [sp, #24]
 8028c80:	785a      	ldrb	r2, [r3, #1]
 8028c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028c84:	b172      	cbz	r2, 8028ca4 <_svfiprintf_r+0x6ac>
 8028c86:	9a06      	ldr	r2, [sp, #24]
 8028c88:	3201      	adds	r2, #1
 8028c8a:	9206      	str	r2, [sp, #24]
 8028c8c:	f04f 0900 	mov.w	r9, #0
 8028c90:	2c0a      	cmp	r4, #10
 8028c92:	f175 0500 	sbcs.w	r5, r5, #0
 8028c96:	f0c0 80ef 	bcc.w	8028e78 <_svfiprintf_r+0x880>
 8028c9a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028c9c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8028ca0:	461d      	mov	r5, r3
 8028ca2:	e7c6      	b.n	8028c32 <_svfiprintf_r+0x63a>
 8028ca4:	4691      	mov	r9, r2
 8028ca6:	e7f3      	b.n	8028c90 <_svfiprintf_r+0x698>
 8028ca8:	f004 030f 	and.w	r3, r4, #15
 8028cac:	9a05      	ldr	r2, [sp, #20]
 8028cae:	0924      	lsrs	r4, r4, #4
 8028cb0:	5cd3      	ldrb	r3, [r2, r3]
 8028cb2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8028cb6:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8028cba:	092d      	lsrs	r5, r5, #4
 8028cbc:	ea54 0305 	orrs.w	r3, r4, r5
 8028cc0:	d1f2      	bne.n	8028ca8 <_svfiprintf_r+0x6b0>
 8028cc2:	e0d9      	b.n	8028e78 <_svfiprintf_r+0x880>
 8028cc4:	b923      	cbnz	r3, 8028cd0 <_svfiprintf_r+0x6d8>
 8028cc6:	f019 0f01 	tst.w	r9, #1
 8028cca:	d001      	beq.n	8028cd0 <_svfiprintf_r+0x6d8>
 8028ccc:	2430      	movs	r4, #48	@ 0x30
 8028cce:	e7a4      	b.n	8028c1a <_svfiprintf_r+0x622>
 8028cd0:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 8028cd4:	e0d0      	b.n	8028e78 <_svfiprintf_r+0x880>
 8028cd6:	2b00      	cmp	r3, #0
 8028cd8:	f000 80a1 	beq.w	8028e1e <_svfiprintf_r+0x826>
 8028cdc:	2400      	movs	r4, #0
 8028cde:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8028ce2:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8028ce6:	462f      	mov	r7, r5
 8028ce8:	e5e0      	b.n	80288ac <_svfiprintf_r+0x2b4>
 8028cea:	bf00      	nop
 8028cec:	0803457b 	.word	0x0803457b
 8028cf0:	0803456b 	.word	0x0803456b
 8028cf4:	08034059 	.word	0x08034059
 8028cf8:	2110      	movs	r1, #16
 8028cfa:	6071      	str	r1, [r6, #4]
 8028cfc:	2a07      	cmp	r2, #7
 8028cfe:	4461      	add	r1, ip
 8028d00:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028d04:	dd08      	ble.n	8028d18 <_svfiprintf_r+0x720>
 8028d06:	9801      	ldr	r0, [sp, #4]
 8028d08:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d0a:	4659      	mov	r1, fp
 8028d0c:	f7ff fbf6 	bl	80284fc <__ssprint_r>
 8028d10:	2800      	cmp	r0, #0
 8028d12:	d168      	bne.n	8028de6 <_svfiprintf_r+0x7ee>
 8028d14:	4b5c      	ldr	r3, [pc, #368]	@ (8028e88 <_svfiprintf_r+0x890>)
 8028d16:	a811      	add	r0, sp, #68	@ 0x44
 8028d18:	f1aa 0a10 	sub.w	sl, sl, #16
 8028d1c:	4606      	mov	r6, r0
 8028d1e:	e68d      	b.n	8028a3c <_svfiprintf_r+0x444>
 8028d20:	4606      	mov	r6, r0
 8028d22:	e6a8      	b.n	8028a76 <_svfiprintf_r+0x47e>
 8028d24:	9801      	ldr	r0, [sp, #4]
 8028d26:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d28:	4659      	mov	r1, fp
 8028d2a:	f7ff fbe7 	bl	80284fc <__ssprint_r>
 8028d2e:	2800      	cmp	r0, #0
 8028d30:	d159      	bne.n	8028de6 <_svfiprintf_r+0x7ee>
 8028d32:	ae11      	add	r6, sp, #68	@ 0x44
 8028d34:	e6b1      	b.n	8028a9a <_svfiprintf_r+0x4a2>
 8028d36:	9801      	ldr	r0, [sp, #4]
 8028d38:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d3a:	4659      	mov	r1, fp
 8028d3c:	f7ff fbde 	bl	80284fc <__ssprint_r>
 8028d40:	2800      	cmp	r0, #0
 8028d42:	d150      	bne.n	8028de6 <_svfiprintf_r+0x7ee>
 8028d44:	ae11      	add	r6, sp, #68	@ 0x44
 8028d46:	e6b8      	b.n	8028aba <_svfiprintf_r+0x4c2>
 8028d48:	2110      	movs	r1, #16
 8028d4a:	6071      	str	r1, [r6, #4]
 8028d4c:	2a07      	cmp	r2, #7
 8028d4e:	4461      	add	r1, ip
 8028d50:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028d54:	dd08      	ble.n	8028d68 <_svfiprintf_r+0x770>
 8028d56:	9801      	ldr	r0, [sp, #4]
 8028d58:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d5a:	4659      	mov	r1, fp
 8028d5c:	f7ff fbce 	bl	80284fc <__ssprint_r>
 8028d60:	2800      	cmp	r0, #0
 8028d62:	d140      	bne.n	8028de6 <_svfiprintf_r+0x7ee>
 8028d64:	4b49      	ldr	r3, [pc, #292]	@ (8028e8c <_svfiprintf_r+0x894>)
 8028d66:	a811      	add	r0, sp, #68	@ 0x44
 8028d68:	f1aa 0a10 	sub.w	sl, sl, #16
 8028d6c:	4606      	mov	r6, r0
 8028d6e:	e6ae      	b.n	8028ace <_svfiprintf_r+0x4d6>
 8028d70:	4606      	mov	r6, r0
 8028d72:	e6c9      	b.n	8028b08 <_svfiprintf_r+0x510>
 8028d74:	2010      	movs	r0, #16
 8028d76:	4402      	add	r2, r0
 8028d78:	2b07      	cmp	r3, #7
 8028d7a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028d7e:	6070      	str	r0, [r6, #4]
 8028d80:	dd06      	ble.n	8028d90 <_svfiprintf_r+0x798>
 8028d82:	9801      	ldr	r0, [sp, #4]
 8028d84:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d86:	4659      	mov	r1, fp
 8028d88:	f7ff fbb8 	bl	80284fc <__ssprint_r>
 8028d8c:	bb58      	cbnz	r0, 8028de6 <_svfiprintf_r+0x7ee>
 8028d8e:	a911      	add	r1, sp, #68	@ 0x44
 8028d90:	3c10      	subs	r4, #16
 8028d92:	460e      	mov	r6, r1
 8028d94:	e6bc      	b.n	8028b10 <_svfiprintf_r+0x518>
 8028d96:	460e      	mov	r6, r1
 8028d98:	e6d5      	b.n	8028b46 <_svfiprintf_r+0x54e>
 8028d9a:	9801      	ldr	r0, [sp, #4]
 8028d9c:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d9e:	4659      	mov	r1, fp
 8028da0:	f7ff fbac 	bl	80284fc <__ssprint_r>
 8028da4:	b9f8      	cbnz	r0, 8028de6 <_svfiprintf_r+0x7ee>
 8028da6:	ab11      	add	r3, sp, #68	@ 0x44
 8028da8:	e6dd      	b.n	8028b66 <_svfiprintf_r+0x56e>
 8028daa:	9a03      	ldr	r2, [sp, #12]
 8028dac:	1b54      	subs	r4, r2, r5
 8028dae:	2c00      	cmp	r4, #0
 8028db0:	f77f aedd 	ble.w	8028b6e <_svfiprintf_r+0x576>
 8028db4:	4e34      	ldr	r6, [pc, #208]	@ (8028e88 <_svfiprintf_r+0x890>)
 8028db6:	f04f 0810 	mov.w	r8, #16
 8028dba:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8028dbe:	2c10      	cmp	r4, #16
 8028dc0:	f102 0201 	add.w	r2, r2, #1
 8028dc4:	601e      	str	r6, [r3, #0]
 8028dc6:	dc17      	bgt.n	8028df8 <_svfiprintf_r+0x800>
 8028dc8:	605c      	str	r4, [r3, #4]
 8028dca:	2a07      	cmp	r2, #7
 8028dcc:	440c      	add	r4, r1
 8028dce:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8028dd2:	f77f aecc 	ble.w	8028b6e <_svfiprintf_r+0x576>
 8028dd6:	9801      	ldr	r0, [sp, #4]
 8028dd8:	aa0e      	add	r2, sp, #56	@ 0x38
 8028dda:	4659      	mov	r1, fp
 8028ddc:	f7ff fb8e 	bl	80284fc <__ssprint_r>
 8028de0:	2800      	cmp	r0, #0
 8028de2:	f43f aec4 	beq.w	8028b6e <_svfiprintf_r+0x576>
 8028de6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8028dea:	065b      	lsls	r3, r3, #25
 8028dec:	f53f ac1c 	bmi.w	8028628 <_svfiprintf_r+0x30>
 8028df0:	9804      	ldr	r0, [sp, #16]
 8028df2:	b03b      	add	sp, #236	@ 0xec
 8028df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028df8:	3110      	adds	r1, #16
 8028dfa:	2a07      	cmp	r2, #7
 8028dfc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028e00:	f8c3 8004 	str.w	r8, [r3, #4]
 8028e04:	dc02      	bgt.n	8028e0c <_svfiprintf_r+0x814>
 8028e06:	3308      	adds	r3, #8
 8028e08:	3c10      	subs	r4, #16
 8028e0a:	e7d6      	b.n	8028dba <_svfiprintf_r+0x7c2>
 8028e0c:	9801      	ldr	r0, [sp, #4]
 8028e0e:	aa0e      	add	r2, sp, #56	@ 0x38
 8028e10:	4659      	mov	r1, fp
 8028e12:	f7ff fb73 	bl	80284fc <__ssprint_r>
 8028e16:	2800      	cmp	r0, #0
 8028e18:	d1e5      	bne.n	8028de6 <_svfiprintf_r+0x7ee>
 8028e1a:	ab11      	add	r3, sp, #68	@ 0x44
 8028e1c:	e7f4      	b.n	8028e08 <_svfiprintf_r+0x810>
 8028e1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028e20:	2b00      	cmp	r3, #0
 8028e22:	d0e0      	beq.n	8028de6 <_svfiprintf_r+0x7ee>
 8028e24:	9801      	ldr	r0, [sp, #4]
 8028e26:	aa0e      	add	r2, sp, #56	@ 0x38
 8028e28:	4659      	mov	r1, fp
 8028e2a:	f7ff fb67 	bl	80284fc <__ssprint_r>
 8028e2e:	e7da      	b.n	8028de6 <_svfiprintf_r+0x7ee>
 8028e30:	ea54 0205 	orrs.w	r2, r4, r5
 8028e34:	46ca      	mov	sl, r9
 8028e36:	f43f adac 	beq.w	8028992 <_svfiprintf_r+0x39a>
 8028e3a:	2b01      	cmp	r3, #1
 8028e3c:	f43f aee7 	beq.w	8028c0e <_svfiprintf_r+0x616>
 8028e40:	2b02      	cmp	r3, #2
 8028e42:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 8028e46:	f43f af2f 	beq.w	8028ca8 <_svfiprintf_r+0x6b0>
 8028e4a:	f004 0307 	and.w	r3, r4, #7
 8028e4e:	08e4      	lsrs	r4, r4, #3
 8028e50:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8028e54:	08ed      	lsrs	r5, r5, #3
 8028e56:	3330      	adds	r3, #48	@ 0x30
 8028e58:	ea54 0105 	orrs.w	r1, r4, r5
 8028e5c:	4642      	mov	r2, r8
 8028e5e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8028e62:	d1f2      	bne.n	8028e4a <_svfiprintf_r+0x852>
 8028e64:	f01a 0f01 	tst.w	sl, #1
 8028e68:	d006      	beq.n	8028e78 <_svfiprintf_r+0x880>
 8028e6a:	2b30      	cmp	r3, #48	@ 0x30
 8028e6c:	d004      	beq.n	8028e78 <_svfiprintf_r+0x880>
 8028e6e:	2330      	movs	r3, #48	@ 0x30
 8028e70:	f808 3c01 	strb.w	r3, [r8, #-1]
 8028e74:	f1a2 0802 	sub.w	r8, r2, #2
 8028e78:	ab3a      	add	r3, sp, #232	@ 0xe8
 8028e7a:	eba3 0308 	sub.w	r3, r3, r8
 8028e7e:	9c00      	ldr	r4, [sp, #0]
 8028e80:	9300      	str	r3, [sp, #0]
 8028e82:	46d1      	mov	r9, sl
 8028e84:	e5c2      	b.n	8028a0c <_svfiprintf_r+0x414>
 8028e86:	bf00      	nop
 8028e88:	0803457b 	.word	0x0803457b
 8028e8c:	0803456b 	.word	0x0803456b

08028e90 <_sungetc_r>:
 8028e90:	b538      	push	{r3, r4, r5, lr}
 8028e92:	1c4b      	adds	r3, r1, #1
 8028e94:	4614      	mov	r4, r2
 8028e96:	d103      	bne.n	8028ea0 <_sungetc_r+0x10>
 8028e98:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8028e9c:	4628      	mov	r0, r5
 8028e9e:	bd38      	pop	{r3, r4, r5, pc}
 8028ea0:	8993      	ldrh	r3, [r2, #12]
 8028ea2:	f023 0320 	bic.w	r3, r3, #32
 8028ea6:	8193      	strh	r3, [r2, #12]
 8028ea8:	6853      	ldr	r3, [r2, #4]
 8028eaa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8028eac:	b2cd      	uxtb	r5, r1
 8028eae:	b18a      	cbz	r2, 8028ed4 <_sungetc_r+0x44>
 8028eb0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8028eb2:	429a      	cmp	r2, r3
 8028eb4:	dd08      	ble.n	8028ec8 <_sungetc_r+0x38>
 8028eb6:	6823      	ldr	r3, [r4, #0]
 8028eb8:	1e5a      	subs	r2, r3, #1
 8028eba:	6022      	str	r2, [r4, #0]
 8028ebc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8028ec0:	6863      	ldr	r3, [r4, #4]
 8028ec2:	3301      	adds	r3, #1
 8028ec4:	6063      	str	r3, [r4, #4]
 8028ec6:	e7e9      	b.n	8028e9c <_sungetc_r+0xc>
 8028ec8:	4621      	mov	r1, r4
 8028eca:	f005 f89d 	bl	802e008 <__submore>
 8028ece:	2800      	cmp	r0, #0
 8028ed0:	d0f1      	beq.n	8028eb6 <_sungetc_r+0x26>
 8028ed2:	e7e1      	b.n	8028e98 <_sungetc_r+0x8>
 8028ed4:	6921      	ldr	r1, [r4, #16]
 8028ed6:	6822      	ldr	r2, [r4, #0]
 8028ed8:	b141      	cbz	r1, 8028eec <_sungetc_r+0x5c>
 8028eda:	4291      	cmp	r1, r2
 8028edc:	d206      	bcs.n	8028eec <_sungetc_r+0x5c>
 8028ede:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8028ee2:	42a9      	cmp	r1, r5
 8028ee4:	d102      	bne.n	8028eec <_sungetc_r+0x5c>
 8028ee6:	3a01      	subs	r2, #1
 8028ee8:	6022      	str	r2, [r4, #0]
 8028eea:	e7ea      	b.n	8028ec2 <_sungetc_r+0x32>
 8028eec:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 8028ef0:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8028ef4:	6323      	str	r3, [r4, #48]	@ 0x30
 8028ef6:	2303      	movs	r3, #3
 8028ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8028efa:	4623      	mov	r3, r4
 8028efc:	f803 5f42 	strb.w	r5, [r3, #66]!
 8028f00:	6023      	str	r3, [r4, #0]
 8028f02:	2301      	movs	r3, #1
 8028f04:	e7de      	b.n	8028ec4 <_sungetc_r+0x34>

08028f06 <__ssrefill_r>:
 8028f06:	b510      	push	{r4, lr}
 8028f08:	460c      	mov	r4, r1
 8028f0a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8028f0c:	b169      	cbz	r1, 8028f2a <__ssrefill_r+0x24>
 8028f0e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8028f12:	4299      	cmp	r1, r3
 8028f14:	d001      	beq.n	8028f1a <__ssrefill_r+0x14>
 8028f16:	f7ff f979 	bl	802820c <_free_r>
 8028f1a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8028f1c:	6063      	str	r3, [r4, #4]
 8028f1e:	2000      	movs	r0, #0
 8028f20:	6320      	str	r0, [r4, #48]	@ 0x30
 8028f22:	b113      	cbz	r3, 8028f2a <__ssrefill_r+0x24>
 8028f24:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8028f26:	6023      	str	r3, [r4, #0]
 8028f28:	bd10      	pop	{r4, pc}
 8028f2a:	6923      	ldr	r3, [r4, #16]
 8028f2c:	6023      	str	r3, [r4, #0]
 8028f2e:	2300      	movs	r3, #0
 8028f30:	6063      	str	r3, [r4, #4]
 8028f32:	89a3      	ldrh	r3, [r4, #12]
 8028f34:	f043 0320 	orr.w	r3, r3, #32
 8028f38:	81a3      	strh	r3, [r4, #12]
 8028f3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028f3e:	e7f3      	b.n	8028f28 <__ssrefill_r+0x22>

08028f40 <_sfread_r>:
 8028f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f44:	461f      	mov	r7, r3
 8028f46:	4613      	mov	r3, r2
 8028f48:	437b      	muls	r3, r7
 8028f4a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028f4c:	9000      	str	r0, [sp, #0]
 8028f4e:	4688      	mov	r8, r1
 8028f50:	4691      	mov	r9, r2
 8028f52:	d028      	beq.n	8028fa6 <_sfread_r+0x66>
 8028f54:	461e      	mov	r6, r3
 8028f56:	f04f 0b00 	mov.w	fp, #0
 8028f5a:	e9d4 1500 	ldrd	r1, r5, [r4]
 8028f5e:	42b5      	cmp	r5, r6
 8028f60:	d30b      	bcc.n	8028f7a <_sfread_r+0x3a>
 8028f62:	4632      	mov	r2, r6
 8028f64:	4640      	mov	r0, r8
 8028f66:	f7fe fa4f 	bl	8027408 <memcpy>
 8028f6a:	6862      	ldr	r2, [r4, #4]
 8028f6c:	6821      	ldr	r1, [r4, #0]
 8028f6e:	1b92      	subs	r2, r2, r6
 8028f70:	4431      	add	r1, r6
 8028f72:	6062      	str	r2, [r4, #4]
 8028f74:	6021      	str	r1, [r4, #0]
 8028f76:	463b      	mov	r3, r7
 8028f78:	e015      	b.n	8028fa6 <_sfread_r+0x66>
 8028f7a:	462a      	mov	r2, r5
 8028f7c:	4640      	mov	r0, r8
 8028f7e:	9301      	str	r3, [sp, #4]
 8028f80:	f7fe fa42 	bl	8027408 <memcpy>
 8028f84:	6822      	ldr	r2, [r4, #0]
 8028f86:	9800      	ldr	r0, [sp, #0]
 8028f88:	442a      	add	r2, r5
 8028f8a:	e9c4 2b00 	strd	r2, fp, [r4]
 8028f8e:	4621      	mov	r1, r4
 8028f90:	f7ff ffb9 	bl	8028f06 <__ssrefill_r>
 8028f94:	44a8      	add	r8, r5
 8028f96:	9b01      	ldr	r3, [sp, #4]
 8028f98:	eba6 0a05 	sub.w	sl, r6, r5
 8028f9c:	b138      	cbz	r0, 8028fae <_sfread_r+0x6e>
 8028f9e:	441d      	add	r5, r3
 8028fa0:	1bad      	subs	r5, r5, r6
 8028fa2:	fbb5 f3f9 	udiv	r3, r5, r9
 8028fa6:	4618      	mov	r0, r3
 8028fa8:	b003      	add	sp, #12
 8028faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028fae:	4656      	mov	r6, sl
 8028fb0:	e7d3      	b.n	8028f5a <_sfread_r+0x1a>
	...

08028fb4 <__ssvfiscanf_r>:
 8028fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fb8:	b0df      	sub	sp, #380	@ 0x17c
 8028fba:	af02      	add	r7, sp, #8
 8028fbc:	460c      	mov	r4, r1
 8028fbe:	623b      	str	r3, [r7, #32]
 8028fc0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8028fc4:	6278      	str	r0, [r7, #36]	@ 0x24
 8028fc6:	049d      	lsls	r5, r3, #18
 8028fc8:	60ba      	str	r2, [r7, #8]
 8028fca:	d406      	bmi.n	8028fda <__ssvfiscanf_r+0x26>
 8028fcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8028fd0:	818b      	strh	r3, [r1, #12]
 8028fd2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8028fd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8028fd8:	664b      	str	r3, [r1, #100]	@ 0x64
 8028fda:	2300      	movs	r3, #0
 8028fdc:	e9c7 3305 	strd	r3, r3, [r7, #20]
 8028fe0:	60fb      	str	r3, [r7, #12]
 8028fe2:	469b      	mov	fp, r3
 8028fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8028fe6:	61fb      	str	r3, [r7, #28]
 8028fe8:	e005      	b.n	8028ff6 <__ssvfiscanf_r+0x42>
 8028fea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8028fec:	4621      	mov	r1, r4
 8028fee:	f7ff ff8a 	bl	8028f06 <__ssrefill_r>
 8028ff2:	b168      	cbz	r0, 8029010 <__ssvfiscanf_r+0x5c>
 8028ff4:	60bd      	str	r5, [r7, #8]
 8028ff6:	68bd      	ldr	r5, [r7, #8]
 8028ff8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8028ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8028ffe:	b333      	cbz	r3, 802904e <__ssvfiscanf_r+0x9a>
 8029000:	4a75      	ldr	r2, [pc, #468]	@ (80291d8 <__ssvfiscanf_r+0x224>)
 8029002:	5cd6      	ldrb	r6, [r2, r3]
 8029004:	f016 0608 	ands.w	r6, r6, #8
 8029008:	d011      	beq.n	802902e <__ssvfiscanf_r+0x7a>
 802900a:	6863      	ldr	r3, [r4, #4]
 802900c:	2b00      	cmp	r3, #0
 802900e:	ddec      	ble.n	8028fea <__ssvfiscanf_r+0x36>
 8029010:	6823      	ldr	r3, [r4, #0]
 8029012:	4971      	ldr	r1, [pc, #452]	@ (80291d8 <__ssvfiscanf_r+0x224>)
 8029014:	781a      	ldrb	r2, [r3, #0]
 8029016:	5c8a      	ldrb	r2, [r1, r2]
 8029018:	0710      	lsls	r0, r2, #28
 802901a:	d5eb      	bpl.n	8028ff4 <__ssvfiscanf_r+0x40>
 802901c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802901e:	3201      	adds	r2, #1
 8029020:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8029022:	6862      	ldr	r2, [r4, #4]
 8029024:	3301      	adds	r3, #1
 8029026:	3a01      	subs	r2, #1
 8029028:	6062      	str	r2, [r4, #4]
 802902a:	6023      	str	r3, [r4, #0]
 802902c:	e7ed      	b.n	802900a <__ssvfiscanf_r+0x56>
 802902e:	2b25      	cmp	r3, #37	@ 0x25
 8029030:	d15f      	bne.n	80290f2 <__ssvfiscanf_r+0x13e>
 8029032:	62be      	str	r6, [r7, #40]	@ 0x28
 8029034:	462a      	mov	r2, r5
 8029036:	f812 3b01 	ldrb.w	r3, [r2], #1
 802903a:	60ba      	str	r2, [r7, #8]
 802903c:	2b7a      	cmp	r3, #122	@ 0x7a
 802903e:	d806      	bhi.n	802904e <__ssvfiscanf_r+0x9a>
 8029040:	2b42      	cmp	r3, #66	@ 0x42
 8029042:	d809      	bhi.n	8029058 <__ssvfiscanf_r+0xa4>
 8029044:	2b2a      	cmp	r3, #42	@ 0x2a
 8029046:	d079      	beq.n	802913c <__ssvfiscanf_r+0x188>
 8029048:	d844      	bhi.n	80290d4 <__ssvfiscanf_r+0x120>
 802904a:	2b25      	cmp	r3, #37	@ 0x25
 802904c:	d050      	beq.n	80290f0 <__ssvfiscanf_r+0x13c>
 802904e:	f1bb 0f00 	cmp.w	fp, #0
 8029052:	f000 810e 	beq.w	8029272 <__ssvfiscanf_r+0x2be>
 8029056:	e107      	b.n	8029268 <__ssvfiscanf_r+0x2b4>
 8029058:	3b43      	subs	r3, #67	@ 0x43
 802905a:	2b37      	cmp	r3, #55	@ 0x37
 802905c:	f200 80fd 	bhi.w	802925a <__ssvfiscanf_r+0x2a6>
 8029060:	e8df f013 	tbh	[pc, r3, lsl #1]
 8029064:	00a40117 	.word	0x00a40117
 8029068:	00fb00fb 	.word	0x00fb00fb
 802906c:	00fb00fb 	.word	0x00fb00fb
 8029070:	00fb00fb 	.word	0x00fb00fb
 8029074:	008e00fb 	.word	0x008e00fb
 8029078:	00fb00fb 	.word	0x00fb00fb
 802907c:	00fb00a8 	.word	0x00fb00a8
 8029080:	00fb00fb 	.word	0x00fb00fb
 8029084:	00fb00c0 	.word	0x00fb00c0
 8029088:	00fb00fb 	.word	0x00fb00fb
 802908c:	00b400fb 	.word	0x00b400fb
 8029090:	00fb00fb 	.word	0x00fb00fb
 8029094:	00fb010d 	.word	0x00fb010d
 8029098:	00fb00fb 	.word	0x00fb00fb
 802909c:	00fb00fb 	.word	0x00fb00fb
 80290a0:	00fb00fb 	.word	0x00fb00fb
 80290a4:	00a60119 	.word	0x00a60119
 80290a8:	00fb00fb 	.word	0x00fb00fb
 80290ac:	008100fb 	.word	0x008100fb
 80290b0:	008e013e 	.word	0x008e013e
 80290b4:	007300fb 	.word	0x007300fb
 80290b8:	01200095 	.word	0x01200095
 80290bc:	011d00aa 	.word	0x011d00aa
 80290c0:	00fb00fb 	.word	0x00fb00fb
 80290c4:	009200c2 	.word	0x009200c2
 80290c8:	00fb00b0 	.word	0x00fb00b0
 80290cc:	00b400fb 	.word	0x00b400fb
 80290d0:	009200fb 	.word	0x009200fb
 80290d4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80290d8:	2a09      	cmp	r2, #9
 80290da:	d8b8      	bhi.n	802904e <__ssvfiscanf_r+0x9a>
 80290dc:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 80290e0:	d1b5      	bne.n	802904e <__ssvfiscanf_r+0x9a>
 80290e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80290e4:	220a      	movs	r2, #10
 80290e6:	fb02 3301 	mla	r3, r2, r1, r3
 80290ea:	3b30      	subs	r3, #48	@ 0x30
 80290ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80290ee:	e02a      	b.n	8029146 <__ssvfiscanf_r+0x192>
 80290f0:	68bd      	ldr	r5, [r7, #8]
 80290f2:	6863      	ldr	r3, [r4, #4]
 80290f4:	2b00      	cmp	r3, #0
 80290f6:	dd0e      	ble.n	8029116 <__ssvfiscanf_r+0x162>
 80290f8:	6823      	ldr	r3, [r4, #0]
 80290fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80290fe:	7819      	ldrb	r1, [r3, #0]
 8029100:	4291      	cmp	r1, r2
 8029102:	d1a4      	bne.n	802904e <__ssvfiscanf_r+0x9a>
 8029104:	3301      	adds	r3, #1
 8029106:	6862      	ldr	r2, [r4, #4]
 8029108:	6023      	str	r3, [r4, #0]
 802910a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802910c:	3a01      	subs	r2, #1
 802910e:	3301      	adds	r3, #1
 8029110:	6062      	str	r2, [r4, #4]
 8029112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029114:	e76e      	b.n	8028ff4 <__ssvfiscanf_r+0x40>
 8029116:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029118:	4621      	mov	r1, r4
 802911a:	f7ff fef4 	bl	8028f06 <__ssrefill_r>
 802911e:	2800      	cmp	r0, #0
 8029120:	d0ea      	beq.n	80290f8 <__ssvfiscanf_r+0x144>
 8029122:	69fb      	ldr	r3, [r7, #28]
 8029124:	b113      	cbz	r3, 802912c <__ssvfiscanf_r+0x178>
 8029126:	89a3      	ldrh	r3, [r4, #12]
 8029128:	065b      	lsls	r3, r3, #25
 802912a:	d590      	bpl.n	802904e <__ssvfiscanf_r+0x9a>
 802912c:	f1bb 0f00 	cmp.w	fp, #0
 8029130:	f040 8654 	bne.w	8029ddc <__ssvfiscanf_r+0xe28>
 8029134:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029138:	61fb      	str	r3, [r7, #28]
 802913a:	e09a      	b.n	8029272 <__ssvfiscanf_r+0x2be>
 802913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802913e:	4333      	orrs	r3, r6
 8029140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029142:	d184      	bne.n	802904e <__ssvfiscanf_r+0x9a>
 8029144:	2610      	movs	r6, #16
 8029146:	68bd      	ldr	r5, [r7, #8]
 8029148:	e774      	b.n	8029034 <__ssvfiscanf_r+0x80>
 802914a:	0731      	lsls	r1, r6, #28
 802914c:	f47f af7f 	bne.w	802904e <__ssvfiscanf_r+0x9a>
 8029150:	786b      	ldrb	r3, [r5, #1]
 8029152:	2b6c      	cmp	r3, #108	@ 0x6c
 8029154:	d104      	bne.n	8029160 <__ssvfiscanf_r+0x1ac>
 8029156:	1cab      	adds	r3, r5, #2
 8029158:	60bb      	str	r3, [r7, #8]
 802915a:	f046 0602 	orr.w	r6, r6, #2
 802915e:	e7f2      	b.n	8029146 <__ssvfiscanf_r+0x192>
 8029160:	f046 0601 	orr.w	r6, r6, #1
 8029164:	e7ef      	b.n	8029146 <__ssvfiscanf_r+0x192>
 8029166:	0732      	lsls	r2, r6, #28
 8029168:	f47f af71 	bne.w	802904e <__ssvfiscanf_r+0x9a>
 802916c:	786b      	ldrb	r3, [r5, #1]
 802916e:	2b68      	cmp	r3, #104	@ 0x68
 8029170:	bf03      	ittte	eq
 8029172:	1cab      	addeq	r3, r5, #2
 8029174:	60bb      	streq	r3, [r7, #8]
 8029176:	f046 0608 	orreq.w	r6, r6, #8
 802917a:	f046 0604 	orrne.w	r6, r6, #4
 802917e:	e7e2      	b.n	8029146 <__ssvfiscanf_r+0x192>
 8029180:	0733      	lsls	r3, r6, #28
 8029182:	f47f af64 	bne.w	802904e <__ssvfiscanf_r+0x9a>
 8029186:	e7e8      	b.n	802915a <__ssvfiscanf_r+0x1a6>
 8029188:	0735      	lsls	r5, r6, #28
 802918a:	d0dc      	beq.n	8029146 <__ssvfiscanf_r+0x192>
 802918c:	e75f      	b.n	802904e <__ssvfiscanf_r+0x9a>
 802918e:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8029192:	f47f af5c 	bne.w	802904e <__ssvfiscanf_r+0x9a>
 8029196:	f1bb 0f00 	cmp.w	fp, #0
 802919a:	d104      	bne.n	80291a6 <__ssvfiscanf_r+0x1f2>
 802919c:	b082      	sub	sp, #8
 802919e:	f10d 0b08 	add.w	fp, sp, #8
 80291a2:	e9cb 3300 	strd	r3, r3, [fp]
 80291a6:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 80291aa:	e7cc      	b.n	8029146 <__ssvfiscanf_r+0x192>
 80291ac:	f046 0601 	orr.w	r6, r6, #1
 80291b0:	4b0a      	ldr	r3, [pc, #40]	@ (80291dc <__ssvfiscanf_r+0x228>)
 80291b2:	e008      	b.n	80291c6 <__ssvfiscanf_r+0x212>
 80291b4:	f046 0601 	orr.w	r6, r6, #1
 80291b8:	4b09      	ldr	r3, [pc, #36]	@ (80291e0 <__ssvfiscanf_r+0x22c>)
 80291ba:	60fb      	str	r3, [r7, #12]
 80291bc:	2308      	movs	r3, #8
 80291be:	617b      	str	r3, [r7, #20]
 80291c0:	2503      	movs	r5, #3
 80291c2:	e012      	b.n	80291ea <__ssvfiscanf_r+0x236>
 80291c4:	4b06      	ldr	r3, [pc, #24]	@ (80291e0 <__ssvfiscanf_r+0x22c>)
 80291c6:	60fb      	str	r3, [r7, #12]
 80291c8:	230a      	movs	r3, #10
 80291ca:	e7f8      	b.n	80291be <__ssvfiscanf_r+0x20a>
 80291cc:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80291d0:	4b03      	ldr	r3, [pc, #12]	@ (80291e0 <__ssvfiscanf_r+0x22c>)
 80291d2:	60fb      	str	r3, [r7, #12]
 80291d4:	2310      	movs	r3, #16
 80291d6:	e7f2      	b.n	80291be <__ssvfiscanf_r+0x20a>
 80291d8:	080343f5 	.word	0x080343f5
 80291dc:	08025661 	.word	0x08025661
 80291e0:	0802dff1 	.word	0x0802dff1
 80291e4:	f046 0601 	orr.w	r6, r6, #1
 80291e8:	2502      	movs	r5, #2
 80291ea:	6863      	ldr	r3, [r4, #4]
 80291ec:	2b00      	cmp	r3, #0
 80291ee:	dd7b      	ble.n	80292e8 <__ssvfiscanf_r+0x334>
 80291f0:	0671      	lsls	r1, r6, #25
 80291f2:	d407      	bmi.n	8029204 <__ssvfiscanf_r+0x250>
 80291f4:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 8029580 <__ssvfiscanf_r+0x5cc>
 80291f8:	6823      	ldr	r3, [r4, #0]
 80291fa:	781a      	ldrb	r2, [r3, #0]
 80291fc:	f818 2002 	ldrb.w	r2, [r8, r2]
 8029200:	0712      	lsls	r2, r2, #28
 8029202:	d479      	bmi.n	80292f8 <__ssvfiscanf_r+0x344>
 8029204:	2d02      	cmp	r5, #2
 8029206:	f000 836f 	beq.w	80298e8 <__ssvfiscanf_r+0x934>
 802920a:	2d03      	cmp	r5, #3
 802920c:	f000 84f6 	beq.w	8029bfc <__ssvfiscanf_r+0xc48>
 8029210:	f006 0310 	and.w	r3, r6, #16
 8029214:	2d01      	cmp	r5, #1
 8029216:	613b      	str	r3, [r7, #16]
 8029218:	f006 0501 	and.w	r5, r6, #1
 802921c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802921e:	f000 81b1 	beq.w	8029584 <__ssvfiscanf_r+0x5d0>
 8029222:	2b01      	cmp	r3, #1
 8029224:	bf38      	it	cc
 8029226:	2301      	movcc	r3, #1
 8029228:	4698      	mov	r8, r3
 802922a:	693b      	ldr	r3, [r7, #16]
 802922c:	2d00      	cmp	r5, #0
 802922e:	f000 813b 	beq.w	80294a8 <__ssvfiscanf_r+0x4f4>
 8029232:	2b00      	cmp	r3, #0
 8029234:	f040 80d8 	bne.w	80293e8 <__ssvfiscanf_r+0x434>
 8029238:	6a3b      	ldr	r3, [r7, #32]
 802923a:	0636      	lsls	r6, r6, #24
 802923c:	f853 5b04 	ldr.w	r5, [r3], #4
 8029240:	623b      	str	r3, [r7, #32]
 8029242:	f140 80d7 	bpl.w	80293f4 <__ssvfiscanf_r+0x440>
 8029246:	b145      	cbz	r5, 802925a <__ssvfiscanf_r+0x2a6>
 8029248:	2080      	movs	r0, #128	@ 0x80
 802924a:	f7f9 ff0f 	bl	802306c <malloc>
 802924e:	4606      	mov	r6, r0
 8029250:	2800      	cmp	r0, #0
 8029252:	d164      	bne.n	802931e <__ssvfiscanf_r+0x36a>
 8029254:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029258:	61fb      	str	r3, [r7, #28]
 802925a:	f1bb 0f00 	cmp.w	fp, #0
 802925e:	d008      	beq.n	8029272 <__ssvfiscanf_r+0x2be>
 8029260:	69fb      	ldr	r3, [r7, #28]
 8029262:	3301      	adds	r3, #1
 8029264:	f000 85ba 	beq.w	8029ddc <__ssvfiscanf_r+0xe28>
 8029268:	f8db 0000 	ldr.w	r0, [fp]
 802926c:	b108      	cbz	r0, 8029272 <__ssvfiscanf_r+0x2be>
 802926e:	f7f9 ff05 	bl	802307c <free>
 8029272:	69f8      	ldr	r0, [r7, #28]
 8029274:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 8029278:	46bd      	mov	sp, r7
 802927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802927e:	68b9      	ldr	r1, [r7, #8]
 8029280:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8029284:	f003 fe5d 	bl	802cf42 <__sccl>
 8029288:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802928c:	60b8      	str	r0, [r7, #8]
 802928e:	2501      	movs	r5, #1
 8029290:	e7ab      	b.n	80291ea <__ssvfiscanf_r+0x236>
 8029292:	f046 0601 	orr.w	r6, r6, #1
 8029296:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802929a:	2500      	movs	r5, #0
 802929c:	e7a5      	b.n	80291ea <__ssvfiscanf_r+0x236>
 802929e:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 80292a2:	e795      	b.n	80291d0 <__ssvfiscanf_r+0x21c>
 80292a4:	06f0      	lsls	r0, r6, #27
 80292a6:	f53f aea6 	bmi.w	8028ff6 <__ssvfiscanf_r+0x42>
 80292aa:	6a3a      	ldr	r2, [r7, #32]
 80292ac:	0731      	lsls	r1, r6, #28
 80292ae:	f852 3b04 	ldr.w	r3, [r2], #4
 80292b2:	623a      	str	r2, [r7, #32]
 80292b4:	d502      	bpl.n	80292bc <__ssvfiscanf_r+0x308>
 80292b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80292b8:	701a      	strb	r2, [r3, #0]
 80292ba:	e69c      	b.n	8028ff6 <__ssvfiscanf_r+0x42>
 80292bc:	0772      	lsls	r2, r6, #29
 80292be:	d502      	bpl.n	80292c6 <__ssvfiscanf_r+0x312>
 80292c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80292c2:	801a      	strh	r2, [r3, #0]
 80292c4:	e697      	b.n	8028ff6 <__ssvfiscanf_r+0x42>
 80292c6:	07f5      	lsls	r5, r6, #31
 80292c8:	d502      	bpl.n	80292d0 <__ssvfiscanf_r+0x31c>
 80292ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80292cc:	601a      	str	r2, [r3, #0]
 80292ce:	e692      	b.n	8028ff6 <__ssvfiscanf_r+0x42>
 80292d0:	07b0      	lsls	r0, r6, #30
 80292d2:	d5fa      	bpl.n	80292ca <__ssvfiscanf_r+0x316>
 80292d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80292d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80292d8:	17d2      	asrs	r2, r2, #31
 80292da:	e9c3 1200 	strd	r1, r2, [r3]
 80292de:	e68a      	b.n	8028ff6 <__ssvfiscanf_r+0x42>
 80292e0:	4ba6      	ldr	r3, [pc, #664]	@ (802957c <__ssvfiscanf_r+0x5c8>)
 80292e2:	60fb      	str	r3, [r7, #12]
 80292e4:	2300      	movs	r3, #0
 80292e6:	e76a      	b.n	80291be <__ssvfiscanf_r+0x20a>
 80292e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80292ea:	4621      	mov	r1, r4
 80292ec:	f7ff fe0b 	bl	8028f06 <__ssrefill_r>
 80292f0:	2800      	cmp	r0, #0
 80292f2:	f43f af7d 	beq.w	80291f0 <__ssvfiscanf_r+0x23c>
 80292f6:	e714      	b.n	8029122 <__ssvfiscanf_r+0x16e>
 80292f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80292fa:	3201      	adds	r2, #1
 80292fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80292fe:	6862      	ldr	r2, [r4, #4]
 8029300:	3a01      	subs	r2, #1
 8029302:	2a00      	cmp	r2, #0
 8029304:	6062      	str	r2, [r4, #4]
 8029306:	dd02      	ble.n	802930e <__ssvfiscanf_r+0x35a>
 8029308:	3301      	adds	r3, #1
 802930a:	6023      	str	r3, [r4, #0]
 802930c:	e774      	b.n	80291f8 <__ssvfiscanf_r+0x244>
 802930e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029310:	4621      	mov	r1, r4
 8029312:	f7ff fdf8 	bl	8028f06 <__ssrefill_r>
 8029316:	2800      	cmp	r0, #0
 8029318:	f43f af6e 	beq.w	80291f8 <__ssvfiscanf_r+0x244>
 802931c:	e701      	b.n	8029122 <__ssvfiscanf_r+0x16e>
 802931e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8029322:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8029326:	6028      	str	r0, [r5, #0]
 8029328:	4599      	cmp	r9, r3
 802932a:	d314      	bcc.n	8029356 <__ssvfiscanf_r+0x3a2>
 802932c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8029330:	4293      	cmp	r3, r2
 8029332:	f200 8553 	bhi.w	8029ddc <__ssvfiscanf_r+0xe28>
 8029336:	3308      	adds	r3, #8
 8029338:	fa1f fa83 	uxth.w	sl, r3
 802933c:	f8db 0000 	ldr.w	r0, [fp]
 8029340:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8029344:	f003 fda0 	bl	802ce88 <realloc>
 8029348:	2800      	cmp	r0, #0
 802934a:	f000 8547 	beq.w	8029ddc <__ssvfiscanf_r+0xe28>
 802934e:	f8cb 0000 	str.w	r0, [fp]
 8029352:	f8ab a004 	strh.w	sl, [fp, #4]
 8029356:	f8db 3000 	ldr.w	r3, [fp]
 802935a:	f109 0201 	add.w	r2, r9, #1
 802935e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8029362:	46aa      	mov	sl, r5
 8029364:	f8ab 2006 	strh.w	r2, [fp, #6]
 8029368:	4635      	mov	r5, r6
 802936a:	f04f 0920 	mov.w	r9, #32
 802936e:	2200      	movs	r2, #0
 8029370:	62ba      	str	r2, [r7, #40]	@ 0x28
 8029372:	f7fd ff79 	bl	8027268 <__locale_mb_cur_max>
 8029376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8029378:	4290      	cmp	r0, r2
 802937a:	f43f aed2 	beq.w	8029122 <__ssvfiscanf_r+0x16e>
 802937e:	6821      	ldr	r1, [r4, #0]
 8029380:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 8029384:	f811 0b01 	ldrb.w	r0, [r1], #1
 8029388:	f80c 0002 	strb.w	r0, [ip, r2]
 802938c:	1c53      	adds	r3, r2, #1
 802938e:	6862      	ldr	r2, [r4, #4]
 8029390:	3a01      	subs	r2, #1
 8029392:	e9c4 1200 	strd	r1, r2, [r4]
 8029396:	69ba      	ldr	r2, [r7, #24]
 8029398:	2a03      	cmp	r2, #3
 802939a:	d102      	bne.n	80293a2 <__ssvfiscanf_r+0x3ee>
 802939c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802939e:	2a04      	cmp	r2, #4
 80293a0:	d007      	beq.n	80293b2 <__ssvfiscanf_r+0x3fe>
 80293a2:	2208      	movs	r2, #8
 80293a4:	2100      	movs	r1, #0
 80293a6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80293aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80293ac:	f7fc fdd4 	bl	8025f58 <memset>
 80293b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80293b2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80293b6:	9200      	str	r2, [sp, #0]
 80293b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80293ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80293bc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80293c0:	4629      	mov	r1, r5
 80293c2:	f005 f8ff 	bl	802e5c4 <_mbrtowc_r>
 80293c6:	4603      	mov	r3, r0
 80293c8:	61b8      	str	r0, [r7, #24]
 80293ca:	1c58      	adds	r0, r3, #1
 80293cc:	f43f aea9 	beq.w	8029122 <__ssvfiscanf_r+0x16e>
 80293d0:	461a      	mov	r2, r3
 80293d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80293d4:	b9b2      	cbnz	r2, 8029404 <__ssvfiscanf_r+0x450>
 80293d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80293d8:	441a      	add	r2, r3
 80293da:	4613      	mov	r3, r2
 80293dc:	693a      	ldr	r2, [r7, #16]
 80293de:	b172      	cbz	r2, 80293fe <__ssvfiscanf_r+0x44a>
 80293e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80293e2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80293e6:	e019      	b.n	802941c <__ssvfiscanf_r+0x468>
 80293e8:	f04f 0900 	mov.w	r9, #0
 80293ec:	464e      	mov	r6, r9
 80293ee:	46ca      	mov	sl, r9
 80293f0:	464d      	mov	r5, r9
 80293f2:	e7bc      	b.n	802936e <__ssvfiscanf_r+0x3ba>
 80293f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80293f8:	464e      	mov	r6, r9
 80293fa:	46ca      	mov	sl, r9
 80293fc:	e7b7      	b.n	802936e <__ssvfiscanf_r+0x3ba>
 80293fe:	693a      	ldr	r2, [r7, #16]
 8029400:	602a      	str	r2, [r5, #0]
 8029402:	e7ed      	b.n	80293e0 <__ssvfiscanf_r+0x42c>
 8029404:	69ba      	ldr	r2, [r7, #24]
 8029406:	3202      	adds	r2, #2
 8029408:	d024      	beq.n	8029454 <__ssvfiscanf_r+0x4a0>
 802940a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802940c:	441a      	add	r2, r3
 802940e:	69bb      	ldr	r3, [r7, #24]
 8029410:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8029412:	2b03      	cmp	r3, #3
 8029414:	d1e5      	bne.n	80293e2 <__ssvfiscanf_r+0x42e>
 8029416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8029418:	2b04      	cmp	r3, #4
 802941a:	d1e2      	bne.n	80293e2 <__ssvfiscanf_r+0x42e>
 802941c:	693b      	ldr	r3, [r7, #16]
 802941e:	b9bb      	cbnz	r3, 8029450 <__ssvfiscanf_r+0x49c>
 8029420:	f1ba 0f00 	cmp.w	sl, #0
 8029424:	d013      	beq.n	802944e <__ssvfiscanf_r+0x49a>
 8029426:	1bab      	subs	r3, r5, r6
 8029428:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802942c:	d80f      	bhi.n	802944e <__ssvfiscanf_r+0x49a>
 802942e:	4630      	mov	r0, r6
 8029430:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8029434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029436:	f003 fd27 	bl	802ce88 <realloc>
 802943a:	4606      	mov	r6, r0
 802943c:	2800      	cmp	r0, #0
 802943e:	f43f af09 	beq.w	8029254 <__ssvfiscanf_r+0x2a0>
 8029442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029444:	f8ca 0000 	str.w	r0, [sl]
 8029448:	18c5      	adds	r5, r0, r3
 802944a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802944e:	3504      	adds	r5, #4
 8029450:	2200      	movs	r2, #0
 8029452:	e000      	b.n	8029456 <__ssvfiscanf_r+0x4a2>
 8029454:	461a      	mov	r2, r3
 8029456:	6863      	ldr	r3, [r4, #4]
 8029458:	2b00      	cmp	r3, #0
 802945a:	dc13      	bgt.n	8029484 <__ssvfiscanf_r+0x4d0>
 802945c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802945e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8029460:	4621      	mov	r1, r4
 8029462:	f7ff fd50 	bl	8028f06 <__ssrefill_r>
 8029466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8029468:	b160      	cbz	r0, 8029484 <__ssvfiscanf_r+0x4d0>
 802946a:	2a00      	cmp	r2, #0
 802946c:	f47f ae59 	bne.w	8029122 <__ssvfiscanf_r+0x16e>
 8029470:	f1ba 0f00 	cmp.w	sl, #0
 8029474:	d10b      	bne.n	802948e <__ssvfiscanf_r+0x4da>
 8029476:	693b      	ldr	r3, [r7, #16]
 8029478:	2b00      	cmp	r3, #0
 802947a:	f47f adbc 	bne.w	8028ff6 <__ssvfiscanf_r+0x42>
 802947e:	69fb      	ldr	r3, [r7, #28]
 8029480:	3301      	adds	r3, #1
 8029482:	e5b0      	b.n	8028fe6 <__ssvfiscanf_r+0x32>
 8029484:	f1b8 0f00 	cmp.w	r8, #0
 8029488:	f47f af72 	bne.w	8029370 <__ssvfiscanf_r+0x3bc>
 802948c:	e7f0      	b.n	8029470 <__ssvfiscanf_r+0x4bc>
 802948e:	1ba9      	subs	r1, r5, r6
 8029490:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8029494:	d9ef      	bls.n	8029476 <__ssvfiscanf_r+0x4c2>
 8029496:	f8da 0000 	ldr.w	r0, [sl]
 802949a:	f003 fcf5 	bl	802ce88 <realloc>
 802949e:	2800      	cmp	r0, #0
 80294a0:	d0e9      	beq.n	8029476 <__ssvfiscanf_r+0x4c2>
 80294a2:	f8ca 0000 	str.w	r0, [sl]
 80294a6:	e7e6      	b.n	8029476 <__ssvfiscanf_r+0x4c2>
 80294a8:	b1db      	cbz	r3, 80294e2 <__ssvfiscanf_r+0x52e>
 80294aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80294ae:	4598      	cmp	r8, r3
 80294b0:	dd10      	ble.n	80294d4 <__ssvfiscanf_r+0x520>
 80294b2:	441a      	add	r2, r3
 80294b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80294b6:	6022      	str	r2, [r4, #0]
 80294b8:	4621      	mov	r1, r4
 80294ba:	441d      	add	r5, r3
 80294bc:	eba8 0803 	sub.w	r8, r8, r3
 80294c0:	f7ff fd21 	bl	8028f06 <__ssrefill_r>
 80294c4:	2800      	cmp	r0, #0
 80294c6:	d0f0      	beq.n	80294aa <__ssvfiscanf_r+0x4f6>
 80294c8:	2d00      	cmp	r5, #0
 80294ca:	f43f ae2a 	beq.w	8029122 <__ssvfiscanf_r+0x16e>
 80294ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80294d0:	442b      	add	r3, r5
 80294d2:	e201      	b.n	80298d8 <__ssvfiscanf_r+0x924>
 80294d4:	eba3 0308 	sub.w	r3, r3, r8
 80294d8:	4442      	add	r2, r8
 80294da:	4445      	add	r5, r8
 80294dc:	6063      	str	r3, [r4, #4]
 80294de:	6022      	str	r2, [r4, #0]
 80294e0:	e7f5      	b.n	80294ce <__ssvfiscanf_r+0x51a>
 80294e2:	6a3b      	ldr	r3, [r7, #32]
 80294e4:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80294e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80294ec:	623b      	str	r3, [r7, #32]
 80294ee:	d02d      	beq.n	802954c <__ssvfiscanf_r+0x598>
 80294f0:	2d00      	cmp	r5, #0
 80294f2:	f43f adac 	beq.w	802904e <__ssvfiscanf_r+0x9a>
 80294f6:	4640      	mov	r0, r8
 80294f8:	f7f9 fdb8 	bl	802306c <malloc>
 80294fc:	4681      	mov	r9, r0
 80294fe:	2800      	cmp	r0, #0
 8029500:	f43f ae14 	beq.w	802912c <__ssvfiscanf_r+0x178>
 8029504:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8029508:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802950c:	6028      	str	r0, [r5, #0]
 802950e:	45b2      	cmp	sl, r6
 8029510:	d312      	bcc.n	8029538 <__ssvfiscanf_r+0x584>
 8029512:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8029516:	429e      	cmp	r6, r3
 8029518:	f200 8460 	bhi.w	8029ddc <__ssvfiscanf_r+0xe28>
 802951c:	3608      	adds	r6, #8
 802951e:	b2b6      	uxth	r6, r6
 8029520:	f8db 0000 	ldr.w	r0, [fp]
 8029524:	00b1      	lsls	r1, r6, #2
 8029526:	f003 fcaf 	bl	802ce88 <realloc>
 802952a:	2800      	cmp	r0, #0
 802952c:	f000 8456 	beq.w	8029ddc <__ssvfiscanf_r+0xe28>
 8029530:	f8cb 0000 	str.w	r0, [fp]
 8029534:	f8ab 6004 	strh.w	r6, [fp, #4]
 8029538:	f8db 3000 	ldr.w	r3, [fp]
 802953c:	f10a 0201 	add.w	r2, sl, #1
 8029540:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8029544:	462e      	mov	r6, r5
 8029546:	f8ab 2006 	strh.w	r2, [fp, #6]
 802954a:	464d      	mov	r5, r9
 802954c:	9400      	str	r4, [sp, #0]
 802954e:	4629      	mov	r1, r5
 8029550:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029552:	4643      	mov	r3, r8
 8029554:	2201      	movs	r2, #1
 8029556:	f7ff fcf3 	bl	8028f40 <_sfread_r>
 802955a:	4605      	mov	r5, r0
 802955c:	2800      	cmp	r0, #0
 802955e:	f43f ade0 	beq.w	8029122 <__ssvfiscanf_r+0x16e>
 8029562:	b13e      	cbz	r6, 8029574 <__ssvfiscanf_r+0x5c0>
 8029564:	4580      	cmp	r8, r0
 8029566:	d905      	bls.n	8029574 <__ssvfiscanf_r+0x5c0>
 8029568:	4601      	mov	r1, r0
 802956a:	6830      	ldr	r0, [r6, #0]
 802956c:	f003 fc8c 	bl	802ce88 <realloc>
 8029570:	b100      	cbz	r0, 8029574 <__ssvfiscanf_r+0x5c0>
 8029572:	6030      	str	r0, [r6, #0]
 8029574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029576:	442b      	add	r3, r5
 8029578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802957a:	e780      	b.n	802947e <__ssvfiscanf_r+0x4ca>
 802957c:	08025661 	.word	0x08025661
 8029580:	080343f5 	.word	0x080343f5
 8029584:	2b00      	cmp	r3, #0
 8029586:	bf08      	it	eq
 8029588:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802958c:	62bb      	str	r3, [r7, #40]	@ 0x28
 802958e:	693b      	ldr	r3, [r7, #16]
 8029590:	2d00      	cmp	r5, #0
 8029592:	f000 8100 	beq.w	8029796 <__ssvfiscanf_r+0x7e2>
 8029596:	2b00      	cmp	r3, #0
 8029598:	f040 80a5 	bne.w	80296e6 <__ssvfiscanf_r+0x732>
 802959c:	6a3b      	ldr	r3, [r7, #32]
 802959e:	0631      	lsls	r1, r6, #24
 80295a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80295a4:	623b      	str	r3, [r7, #32]
 80295a6:	f140 80a5 	bpl.w	80296f4 <__ssvfiscanf_r+0x740>
 80295aa:	2d00      	cmp	r5, #0
 80295ac:	f43f ae55 	beq.w	802925a <__ssvfiscanf_r+0x2a6>
 80295b0:	2080      	movs	r0, #128	@ 0x80
 80295b2:	f7f9 fd5b 	bl	802306c <malloc>
 80295b6:	4680      	mov	r8, r0
 80295b8:	2800      	cmp	r0, #0
 80295ba:	f43f ae4b 	beq.w	8029254 <__ssvfiscanf_r+0x2a0>
 80295be:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 80295c2:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80295c6:	6028      	str	r0, [r5, #0]
 80295c8:	429e      	cmp	r6, r3
 80295ca:	d314      	bcc.n	80295f6 <__ssvfiscanf_r+0x642>
 80295cc:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80295d0:	4293      	cmp	r3, r2
 80295d2:	f200 8403 	bhi.w	8029ddc <__ssvfiscanf_r+0xe28>
 80295d6:	3308      	adds	r3, #8
 80295d8:	fa1f f983 	uxth.w	r9, r3
 80295dc:	f8db 0000 	ldr.w	r0, [fp]
 80295e0:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80295e4:	f003 fc50 	bl	802ce88 <realloc>
 80295e8:	2800      	cmp	r0, #0
 80295ea:	f000 83f7 	beq.w	8029ddc <__ssvfiscanf_r+0xe28>
 80295ee:	f8cb 0000 	str.w	r0, [fp]
 80295f2:	f8ab 9004 	strh.w	r9, [fp, #4]
 80295f6:	f8db 3000 	ldr.w	r3, [fp]
 80295fa:	1c72      	adds	r2, r6, #1
 80295fc:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8029600:	46aa      	mov	sl, r5
 8029602:	f8ab 2006 	strh.w	r2, [fp, #6]
 8029606:	4645      	mov	r5, r8
 8029608:	f04f 0920 	mov.w	r9, #32
 802960c:	2600      	movs	r6, #0
 802960e:	f7fd fe2b 	bl	8027268 <__locale_mb_cur_max>
 8029612:	4286      	cmp	r6, r0
 8029614:	f43f ad85 	beq.w	8029122 <__ssvfiscanf_r+0x16e>
 8029618:	1c73      	adds	r3, r6, #1
 802961a:	607b      	str	r3, [r7, #4]
 802961c:	6823      	ldr	r3, [r4, #0]
 802961e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8029622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029626:	558a      	strb	r2, [r1, r6]
 8029628:	6862      	ldr	r2, [r4, #4]
 802962a:	3a01      	subs	r2, #1
 802962c:	e9c4 3200 	strd	r3, r2, [r4]
 8029630:	69bb      	ldr	r3, [r7, #24]
 8029632:	2b03      	cmp	r3, #3
 8029634:	d102      	bne.n	802963c <__ssvfiscanf_r+0x688>
 8029636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029638:	2b04      	cmp	r3, #4
 802963a:	d005      	beq.n	8029648 <__ssvfiscanf_r+0x694>
 802963c:	2208      	movs	r2, #8
 802963e:	2100      	movs	r1, #0
 8029640:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8029644:	f7fc fc88 	bl	8025f58 <memset>
 8029648:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 802964c:	9300      	str	r3, [sp, #0]
 802964e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8029652:	687b      	ldr	r3, [r7, #4]
 8029654:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029656:	4629      	mov	r1, r5
 8029658:	f004 ffb4 	bl	802e5c4 <_mbrtowc_r>
 802965c:	1c42      	adds	r2, r0, #1
 802965e:	61b8      	str	r0, [r7, #24]
 8029660:	f43f ad5f 	beq.w	8029122 <__ssvfiscanf_r+0x16e>
 8029664:	2800      	cmp	r0, #0
 8029666:	d14a      	bne.n	80296fe <__ssvfiscanf_r+0x74a>
 8029668:	6028      	str	r0, [r5, #0]
 802966a:	682e      	ldr	r6, [r5, #0]
 802966c:	1c73      	adds	r3, r6, #1
 802966e:	d056      	beq.n	802971e <__ssvfiscanf_r+0x76a>
 8029670:	2208      	movs	r2, #8
 8029672:	2100      	movs	r1, #0
 8029674:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8029678:	f7fc fc6e 	bl	8025f58 <memset>
 802967c:	4b99      	ldr	r3, [pc, #612]	@ (80298e4 <__ssvfiscanf_r+0x930>)
 802967e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8029684:	603b      	str	r3, [r7, #0]
 8029686:	4632      	mov	r2, r6
 8029688:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802968c:	683e      	ldr	r6, [r7, #0]
 802968e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8029692:	47b0      	blx	r6
 8029694:	2801      	cmp	r0, #1
 8029696:	d144      	bne.n	8029722 <__ssvfiscanf_r+0x76e>
 8029698:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 802969c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80296a0:	5c9b      	ldrb	r3, [r3, r2]
 80296a2:	2b00      	cmp	r3, #0
 80296a4:	d148      	bne.n	8029738 <__ssvfiscanf_r+0x784>
 80296a6:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 80296aa:	687b      	ldr	r3, [r7, #4]
 80296ac:	2b00      	cmp	r3, #0
 80296ae:	d13a      	bne.n	8029726 <__ssvfiscanf_r+0x772>
 80296b0:	693b      	ldr	r3, [r7, #16]
 80296b2:	2b00      	cmp	r3, #0
 80296b4:	f47f ac9f 	bne.w	8028ff6 <__ssvfiscanf_r+0x42>
 80296b8:	602b      	str	r3, [r5, #0]
 80296ba:	f1ba 0f00 	cmp.w	sl, #0
 80296be:	f43f aede 	beq.w	802947e <__ssvfiscanf_r+0x4ca>
 80296c2:	eba5 0108 	sub.w	r1, r5, r8
 80296c6:	108b      	asrs	r3, r1, #2
 80296c8:	3301      	adds	r3, #1
 80296ca:	4599      	cmp	r9, r3
 80296cc:	f67f aed7 	bls.w	802947e <__ssvfiscanf_r+0x4ca>
 80296d0:	f8da 0000 	ldr.w	r0, [sl]
 80296d4:	3104      	adds	r1, #4
 80296d6:	f003 fbd7 	bl	802ce88 <realloc>
 80296da:	2800      	cmp	r0, #0
 80296dc:	f43f aecf 	beq.w	802947e <__ssvfiscanf_r+0x4ca>
 80296e0:	f8ca 0000 	str.w	r0, [sl]
 80296e4:	e6cb      	b.n	802947e <__ssvfiscanf_r+0x4ca>
 80296e6:	f04f 0900 	mov.w	r9, #0
 80296ea:	46c8      	mov	r8, r9
 80296ec:	46ca      	mov	sl, r9
 80296ee:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80296f2:	e78b      	b.n	802960c <__ssvfiscanf_r+0x658>
 80296f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80296f8:	46c8      	mov	r8, r9
 80296fa:	46ca      	mov	sl, r9
 80296fc:	e786      	b.n	802960c <__ssvfiscanf_r+0x658>
 80296fe:	69bb      	ldr	r3, [r7, #24]
 8029700:	3302      	adds	r3, #2
 8029702:	d1b2      	bne.n	802966a <__ssvfiscanf_r+0x6b6>
 8029704:	687e      	ldr	r6, [r7, #4]
 8029706:	6863      	ldr	r3, [r4, #4]
 8029708:	2b00      	cmp	r3, #0
 802970a:	dc3f      	bgt.n	802978c <__ssvfiscanf_r+0x7d8>
 802970c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802970e:	4621      	mov	r1, r4
 8029710:	f7ff fbf9 	bl	8028f06 <__ssrefill_r>
 8029714:	2800      	cmp	r0, #0
 8029716:	d039      	beq.n	802978c <__ssvfiscanf_r+0x7d8>
 8029718:	2e00      	cmp	r6, #0
 802971a:	d0c9      	beq.n	80296b0 <__ssvfiscanf_r+0x6fc>
 802971c:	e501      	b.n	8029122 <__ssvfiscanf_r+0x16e>
 802971e:	4632      	mov	r2, r6
 8029720:	e7bc      	b.n	802969c <__ssvfiscanf_r+0x6e8>
 8029722:	2200      	movs	r2, #0
 8029724:	e7ba      	b.n	802969c <__ssvfiscanf_r+0x6e8>
 8029726:	687b      	ldr	r3, [r7, #4]
 8029728:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802972a:	3b01      	subs	r3, #1
 802972c:	4622      	mov	r2, r4
 802972e:	5cf1      	ldrb	r1, [r6, r3]
 8029730:	607b      	str	r3, [r7, #4]
 8029732:	f7ff fbad 	bl	8028e90 <_sungetc_r>
 8029736:	e7b8      	b.n	80296aa <__ssvfiscanf_r+0x6f6>
 8029738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802973a:	687a      	ldr	r2, [r7, #4]
 802973c:	4413      	add	r3, r2
 802973e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029740:	69bb      	ldr	r3, [r7, #24]
 8029742:	2b03      	cmp	r3, #3
 8029744:	d102      	bne.n	802974c <__ssvfiscanf_r+0x798>
 8029746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029748:	2b04      	cmp	r3, #4
 802974a:	d002      	beq.n	8029752 <__ssvfiscanf_r+0x79e>
 802974c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802974e:	3b01      	subs	r3, #1
 8029750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029752:	693b      	ldr	r3, [r7, #16]
 8029754:	b9c3      	cbnz	r3, 8029788 <__ssvfiscanf_r+0x7d4>
 8029756:	3504      	adds	r5, #4
 8029758:	f1ba 0f00 	cmp.w	sl, #0
 802975c:	d014      	beq.n	8029788 <__ssvfiscanf_r+0x7d4>
 802975e:	eba5 0608 	sub.w	r6, r5, r8
 8029762:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8029766:	d80d      	bhi.n	8029784 <__ssvfiscanf_r+0x7d0>
 8029768:	4640      	mov	r0, r8
 802976a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802976e:	f003 fb8b 	bl	802ce88 <realloc>
 8029772:	4680      	mov	r8, r0
 8029774:	2800      	cmp	r0, #0
 8029776:	f43f ad6d 	beq.w	8029254 <__ssvfiscanf_r+0x2a0>
 802977a:	1985      	adds	r5, r0, r6
 802977c:	f8ca 0000 	str.w	r0, [sl]
 8029780:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029784:	693e      	ldr	r6, [r7, #16]
 8029786:	e7be      	b.n	8029706 <__ssvfiscanf_r+0x752>
 8029788:	2600      	movs	r6, #0
 802978a:	e7bc      	b.n	8029706 <__ssvfiscanf_r+0x752>
 802978c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802978e:	2b00      	cmp	r3, #0
 8029790:	f47f af3d 	bne.w	802960e <__ssvfiscanf_r+0x65a>
 8029794:	e78c      	b.n	80296b0 <__ssvfiscanf_r+0x6fc>
 8029796:	b1e3      	cbz	r3, 80297d2 <__ssvfiscanf_r+0x81e>
 8029798:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 802979c:	6823      	ldr	r3, [r4, #0]
 802979e:	781a      	ldrb	r2, [r3, #0]
 80297a0:	5cb2      	ldrb	r2, [r6, r2]
 80297a2:	b91a      	cbnz	r2, 80297ac <__ssvfiscanf_r+0x7f8>
 80297a4:	2d00      	cmp	r5, #0
 80297a6:	f47f ae92 	bne.w	80294ce <__ssvfiscanf_r+0x51a>
 80297aa:	e450      	b.n	802904e <__ssvfiscanf_r+0x9a>
 80297ac:	3301      	adds	r3, #1
 80297ae:	6862      	ldr	r2, [r4, #4]
 80297b0:	6023      	str	r3, [r4, #0]
 80297b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80297b4:	3501      	adds	r5, #1
 80297b6:	3a01      	subs	r2, #1
 80297b8:	42ab      	cmp	r3, r5
 80297ba:	6062      	str	r2, [r4, #4]
 80297bc:	f43f ae87 	beq.w	80294ce <__ssvfiscanf_r+0x51a>
 80297c0:	2a00      	cmp	r2, #0
 80297c2:	dceb      	bgt.n	802979c <__ssvfiscanf_r+0x7e8>
 80297c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80297c6:	4621      	mov	r1, r4
 80297c8:	f7ff fb9d 	bl	8028f06 <__ssrefill_r>
 80297cc:	2800      	cmp	r0, #0
 80297ce:	d0e5      	beq.n	802979c <__ssvfiscanf_r+0x7e8>
 80297d0:	e67d      	b.n	80294ce <__ssvfiscanf_r+0x51a>
 80297d2:	6a3b      	ldr	r3, [r7, #32]
 80297d4:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 80297d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80297dc:	623b      	str	r3, [r7, #32]
 80297de:	d07e      	beq.n	80298de <__ssvfiscanf_r+0x92a>
 80297e0:	2d00      	cmp	r5, #0
 80297e2:	f43f ac34 	beq.w	802904e <__ssvfiscanf_r+0x9a>
 80297e6:	2020      	movs	r0, #32
 80297e8:	f7f9 fc40 	bl	802306c <malloc>
 80297ec:	4680      	mov	r8, r0
 80297ee:	2800      	cmp	r0, #0
 80297f0:	f43f ac9c 	beq.w	802912c <__ssvfiscanf_r+0x178>
 80297f4:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80297f8:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 80297fc:	6028      	str	r0, [r5, #0]
 80297fe:	45b1      	cmp	r9, r6
 8029800:	d312      	bcc.n	8029828 <__ssvfiscanf_r+0x874>
 8029802:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8029806:	429e      	cmp	r6, r3
 8029808:	f200 82e8 	bhi.w	8029ddc <__ssvfiscanf_r+0xe28>
 802980c:	3608      	adds	r6, #8
 802980e:	b2b6      	uxth	r6, r6
 8029810:	f8db 0000 	ldr.w	r0, [fp]
 8029814:	00b1      	lsls	r1, r6, #2
 8029816:	f003 fb37 	bl	802ce88 <realloc>
 802981a:	2800      	cmp	r0, #0
 802981c:	f000 82de 	beq.w	8029ddc <__ssvfiscanf_r+0xe28>
 8029820:	f8cb 0000 	str.w	r0, [fp]
 8029824:	f8ab 6004 	strh.w	r6, [fp, #4]
 8029828:	f8db 3000 	ldr.w	r3, [fp]
 802982c:	f109 0201 	add.w	r2, r9, #1
 8029830:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8029834:	46aa      	mov	sl, r5
 8029836:	f8ab 2006 	strh.w	r2, [fp, #6]
 802983a:	4645      	mov	r5, r8
 802983c:	f04f 0920 	mov.w	r9, #32
 8029840:	462e      	mov	r6, r5
 8029842:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 8029846:	6823      	ldr	r3, [r4, #0]
 8029848:	781a      	ldrb	r2, [r3, #0]
 802984a:	f818 2002 	ldrb.w	r2, [r8, r2]
 802984e:	b362      	cbz	r2, 80298aa <__ssvfiscanf_r+0x8f6>
 8029850:	6862      	ldr	r2, [r4, #4]
 8029852:	3a01      	subs	r2, #1
 8029854:	6062      	str	r2, [r4, #4]
 8029856:	1c5a      	adds	r2, r3, #1
 8029858:	6022      	str	r2, [r4, #0]
 802985a:	781b      	ldrb	r3, [r3, #0]
 802985c:	f805 3b01 	strb.w	r3, [r5], #1
 8029860:	f1ba 0f00 	cmp.w	sl, #0
 8029864:	d011      	beq.n	802988a <__ssvfiscanf_r+0x8d6>
 8029866:	1bab      	subs	r3, r5, r6
 8029868:	454b      	cmp	r3, r9
 802986a:	d30e      	bcc.n	802988a <__ssvfiscanf_r+0x8d6>
 802986c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029870:	4630      	mov	r0, r6
 8029872:	4649      	mov	r1, r9
 8029874:	613b      	str	r3, [r7, #16]
 8029876:	f003 fb07 	bl	802ce88 <realloc>
 802987a:	4606      	mov	r6, r0
 802987c:	2800      	cmp	r0, #0
 802987e:	f43f ac55 	beq.w	802912c <__ssvfiscanf_r+0x178>
 8029882:	693b      	ldr	r3, [r7, #16]
 8029884:	f8ca 0000 	str.w	r0, [sl]
 8029888:	18c5      	adds	r5, r0, r3
 802988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802988c:	3b01      	subs	r3, #1
 802988e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029890:	d00b      	beq.n	80298aa <__ssvfiscanf_r+0x8f6>
 8029892:	6863      	ldr	r3, [r4, #4]
 8029894:	2b00      	cmp	r3, #0
 8029896:	dcd6      	bgt.n	8029846 <__ssvfiscanf_r+0x892>
 8029898:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802989a:	4621      	mov	r1, r4
 802989c:	f7ff fb33 	bl	8028f06 <__ssrefill_r>
 80298a0:	2800      	cmp	r0, #0
 80298a2:	d0d0      	beq.n	8029846 <__ssvfiscanf_r+0x892>
 80298a4:	42b5      	cmp	r5, r6
 80298a6:	f43f ac3c 	beq.w	8029122 <__ssvfiscanf_r+0x16e>
 80298aa:	1bae      	subs	r6, r5, r6
 80298ac:	f43f abcf 	beq.w	802904e <__ssvfiscanf_r+0x9a>
 80298b0:	2300      	movs	r3, #0
 80298b2:	702b      	strb	r3, [r5, #0]
 80298b4:	f1ba 0f00 	cmp.w	sl, #0
 80298b8:	d009      	beq.n	80298ce <__ssvfiscanf_r+0x91a>
 80298ba:	1c71      	adds	r1, r6, #1
 80298bc:	4589      	cmp	r9, r1
 80298be:	d906      	bls.n	80298ce <__ssvfiscanf_r+0x91a>
 80298c0:	f8da 0000 	ldr.w	r0, [sl]
 80298c4:	f003 fae0 	bl	802ce88 <realloc>
 80298c8:	b108      	cbz	r0, 80298ce <__ssvfiscanf_r+0x91a>
 80298ca:	f8ca 0000 	str.w	r0, [sl]
 80298ce:	69fb      	ldr	r3, [r7, #28]
 80298d0:	3301      	adds	r3, #1
 80298d2:	61fb      	str	r3, [r7, #28]
 80298d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80298d6:	4433      	add	r3, r6
 80298d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80298da:	f7ff bb8c 	b.w	8028ff6 <__ssvfiscanf_r+0x42>
 80298de:	46ca      	mov	sl, r9
 80298e0:	e7ae      	b.n	8029840 <__ssvfiscanf_r+0x88c>
 80298e2:	bf00      	nop
 80298e4:	200006d4 	.word	0x200006d4
 80298e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80298ea:	2b00      	cmp	r3, #0
 80298ec:	bf08      	it	eq
 80298ee:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 80298f2:	f016 0501 	ands.w	r5, r6, #1
 80298f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80298f8:	f006 0810 	and.w	r8, r6, #16
 80298fc:	f000 80e1 	beq.w	8029ac2 <__ssvfiscanf_r+0xb0e>
 8029900:	f1b8 0f00 	cmp.w	r8, #0
 8029904:	f040 8089 	bne.w	8029a1a <__ssvfiscanf_r+0xa66>
 8029908:	6a3b      	ldr	r3, [r7, #32]
 802990a:	0636      	lsls	r6, r6, #24
 802990c:	f853 5b04 	ldr.w	r5, [r3], #4
 8029910:	623b      	str	r3, [r7, #32]
 8029912:	f140 8089 	bpl.w	8029a28 <__ssvfiscanf_r+0xa74>
 8029916:	2d00      	cmp	r5, #0
 8029918:	f43f ac9f 	beq.w	802925a <__ssvfiscanf_r+0x2a6>
 802991c:	2080      	movs	r0, #128	@ 0x80
 802991e:	f7f9 fba5 	bl	802306c <malloc>
 8029922:	4606      	mov	r6, r0
 8029924:	2800      	cmp	r0, #0
 8029926:	f43f ac95 	beq.w	8029254 <__ssvfiscanf_r+0x2a0>
 802992a:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802992e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8029932:	6028      	str	r0, [r5, #0]
 8029934:	4599      	cmp	r9, r3
 8029936:	d314      	bcc.n	8029962 <__ssvfiscanf_r+0x9ae>
 8029938:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802993c:	4293      	cmp	r3, r2
 802993e:	f200 824d 	bhi.w	8029ddc <__ssvfiscanf_r+0xe28>
 8029942:	3308      	adds	r3, #8
 8029944:	fa1f fa83 	uxth.w	sl, r3
 8029948:	f8db 0000 	ldr.w	r0, [fp]
 802994c:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8029950:	f003 fa9a 	bl	802ce88 <realloc>
 8029954:	2800      	cmp	r0, #0
 8029956:	f000 8241 	beq.w	8029ddc <__ssvfiscanf_r+0xe28>
 802995a:	f8cb 0000 	str.w	r0, [fp]
 802995e:	f8ab a004 	strh.w	sl, [fp, #4]
 8029962:	f8db 3000 	ldr.w	r3, [fp]
 8029966:	f109 0201 	add.w	r2, r9, #1
 802996a:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802996e:	46aa      	mov	sl, r5
 8029970:	f8ab 2006 	strh.w	r2, [fp, #6]
 8029974:	4635      	mov	r5, r6
 8029976:	f04f 0920 	mov.w	r9, #32
 802997a:	2300      	movs	r3, #0
 802997c:	6822      	ldr	r2, [r4, #0]
 802997e:	499e      	ldr	r1, [pc, #632]	@ (8029bf8 <__ssvfiscanf_r+0xc44>)
 8029980:	7812      	ldrb	r2, [r2, #0]
 8029982:	5c8a      	ldrb	r2, [r1, r2]
 8029984:	0711      	lsls	r1, r2, #28
 8029986:	d43c      	bmi.n	8029a02 <__ssvfiscanf_r+0xa4e>
 8029988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802998a:	2a00      	cmp	r2, #0
 802998c:	d039      	beq.n	8029a02 <__ssvfiscanf_r+0xa4e>
 802998e:	613b      	str	r3, [r7, #16]
 8029990:	f7fd fc6a 	bl	8027268 <__locale_mb_cur_max>
 8029994:	693b      	ldr	r3, [r7, #16]
 8029996:	4298      	cmp	r0, r3
 8029998:	f43f abc3 	beq.w	8029122 <__ssvfiscanf_r+0x16e>
 802999c:	1c5a      	adds	r2, r3, #1
 802999e:	613a      	str	r2, [r7, #16]
 80299a0:	6822      	ldr	r2, [r4, #0]
 80299a2:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80299a6:	f812 0b01 	ldrb.w	r0, [r2], #1
 80299aa:	54c8      	strb	r0, [r1, r3]
 80299ac:	6863      	ldr	r3, [r4, #4]
 80299ae:	3b01      	subs	r3, #1
 80299b0:	e9c4 2300 	strd	r2, r3, [r4]
 80299b4:	69bb      	ldr	r3, [r7, #24]
 80299b6:	2b03      	cmp	r3, #3
 80299b8:	d102      	bne.n	80299c0 <__ssvfiscanf_r+0xa0c>
 80299ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80299bc:	2b04      	cmp	r3, #4
 80299be:	d005      	beq.n	80299cc <__ssvfiscanf_r+0xa18>
 80299c0:	2208      	movs	r2, #8
 80299c2:	2100      	movs	r1, #0
 80299c4:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80299c8:	f7fc fac6 	bl	8025f58 <memset>
 80299cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80299d0:	9300      	str	r3, [sp, #0]
 80299d2:	693b      	ldr	r3, [r7, #16]
 80299d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80299d6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80299da:	4629      	mov	r1, r5
 80299dc:	f004 fdf2 	bl	802e5c4 <_mbrtowc_r>
 80299e0:	4603      	mov	r3, r0
 80299e2:	61b8      	str	r0, [r7, #24]
 80299e4:	1c58      	adds	r0, r3, #1
 80299e6:	f43f ab9c 	beq.w	8029122 <__ssvfiscanf_r+0x16e>
 80299ea:	bb0b      	cbnz	r3, 8029a30 <__ssvfiscanf_r+0xa7c>
 80299ec:	602b      	str	r3, [r5, #0]
 80299ee:	6828      	ldr	r0, [r5, #0]
 80299f0:	f004 fe02 	bl	802e5f8 <iswspace>
 80299f4:	4603      	mov	r3, r0
 80299f6:	2800      	cmp	r0, #0
 80299f8:	d037      	beq.n	8029a6a <__ssvfiscanf_r+0xab6>
 80299fa:	693a      	ldr	r2, [r7, #16]
 80299fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029a00:	bb4a      	cbnz	r2, 8029a56 <__ssvfiscanf_r+0xaa2>
 8029a02:	f1b8 0f00 	cmp.w	r8, #0
 8029a06:	f47f aaf6 	bne.w	8028ff6 <__ssvfiscanf_r+0x42>
 8029a0a:	f8c5 8000 	str.w	r8, [r5]
 8029a0e:	f1ba 0f00 	cmp.w	sl, #0
 8029a12:	f43f ad34 	beq.w	802947e <__ssvfiscanf_r+0x4ca>
 8029a16:	1ba9      	subs	r1, r5, r6
 8029a18:	e655      	b.n	80296c6 <__ssvfiscanf_r+0x712>
 8029a1a:	f04f 0900 	mov.w	r9, #0
 8029a1e:	464e      	mov	r6, r9
 8029a20:	46ca      	mov	sl, r9
 8029a22:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8029a26:	e7a8      	b.n	802997a <__ssvfiscanf_r+0x9c6>
 8029a28:	46c1      	mov	r9, r8
 8029a2a:	4646      	mov	r6, r8
 8029a2c:	46c2      	mov	sl, r8
 8029a2e:	e7a4      	b.n	802997a <__ssvfiscanf_r+0x9c6>
 8029a30:	69bb      	ldr	r3, [r7, #24]
 8029a32:	3302      	adds	r3, #2
 8029a34:	d1db      	bne.n	80299ee <__ssvfiscanf_r+0xa3a>
 8029a36:	693b      	ldr	r3, [r7, #16]
 8029a38:	6862      	ldr	r2, [r4, #4]
 8029a3a:	2a00      	cmp	r2, #0
 8029a3c:	dc9e      	bgt.n	802997c <__ssvfiscanf_r+0x9c8>
 8029a3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029a40:	613b      	str	r3, [r7, #16]
 8029a42:	4621      	mov	r1, r4
 8029a44:	f7ff fa5f 	bl	8028f06 <__ssrefill_r>
 8029a48:	693b      	ldr	r3, [r7, #16]
 8029a4a:	2800      	cmp	r0, #0
 8029a4c:	d096      	beq.n	802997c <__ssvfiscanf_r+0x9c8>
 8029a4e:	2b00      	cmp	r3, #0
 8029a50:	f47f ab67 	bne.w	8029122 <__ssvfiscanf_r+0x16e>
 8029a54:	e7d5      	b.n	8029a02 <__ssvfiscanf_r+0xa4e>
 8029a56:	693a      	ldr	r2, [r7, #16]
 8029a58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029a5a:	3a01      	subs	r2, #1
 8029a5c:	613a      	str	r2, [r7, #16]
 8029a5e:	6939      	ldr	r1, [r7, #16]
 8029a60:	4622      	mov	r2, r4
 8029a62:	5c59      	ldrb	r1, [r3, r1]
 8029a64:	f7ff fa14 	bl	8028e90 <_sungetc_r>
 8029a68:	e7c7      	b.n	80299fa <__ssvfiscanf_r+0xa46>
 8029a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029a6c:	6939      	ldr	r1, [r7, #16]
 8029a6e:	440a      	add	r2, r1
 8029a70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8029a72:	69ba      	ldr	r2, [r7, #24]
 8029a74:	2a03      	cmp	r2, #3
 8029a76:	d102      	bne.n	8029a7e <__ssvfiscanf_r+0xaca>
 8029a78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8029a7a:	2a04      	cmp	r2, #4
 8029a7c:	d002      	beq.n	8029a84 <__ssvfiscanf_r+0xad0>
 8029a7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8029a80:	3a01      	subs	r2, #1
 8029a82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8029a84:	f1b8 0f00 	cmp.w	r8, #0
 8029a88:	d1d6      	bne.n	8029a38 <__ssvfiscanf_r+0xa84>
 8029a8a:	3504      	adds	r5, #4
 8029a8c:	f1ba 0f00 	cmp.w	sl, #0
 8029a90:	d015      	beq.n	8029abe <__ssvfiscanf_r+0xb0a>
 8029a92:	1bab      	subs	r3, r5, r6
 8029a94:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8029a98:	d80f      	bhi.n	8029aba <__ssvfiscanf_r+0xb06>
 8029a9a:	4630      	mov	r0, r6
 8029a9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8029aa0:	613b      	str	r3, [r7, #16]
 8029aa2:	f003 f9f1 	bl	802ce88 <realloc>
 8029aa6:	4606      	mov	r6, r0
 8029aa8:	2800      	cmp	r0, #0
 8029aaa:	f43f abd3 	beq.w	8029254 <__ssvfiscanf_r+0x2a0>
 8029aae:	693b      	ldr	r3, [r7, #16]
 8029ab0:	f8ca 0000 	str.w	r0, [sl]
 8029ab4:	18c5      	adds	r5, r0, r3
 8029ab6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029aba:	4643      	mov	r3, r8
 8029abc:	e7bc      	b.n	8029a38 <__ssvfiscanf_r+0xa84>
 8029abe:	4653      	mov	r3, sl
 8029ac0:	e7ba      	b.n	8029a38 <__ssvfiscanf_r+0xa84>
 8029ac2:	f1b8 0f00 	cmp.w	r8, #0
 8029ac6:	d019      	beq.n	8029afc <__ssvfiscanf_r+0xb48>
 8029ac8:	4e4b      	ldr	r6, [pc, #300]	@ (8029bf8 <__ssvfiscanf_r+0xc44>)
 8029aca:	6823      	ldr	r3, [r4, #0]
 8029acc:	781a      	ldrb	r2, [r3, #0]
 8029ace:	5cb2      	ldrb	r2, [r6, r2]
 8029ad0:	0712      	lsls	r2, r2, #28
 8029ad2:	f53f acfc 	bmi.w	80294ce <__ssvfiscanf_r+0x51a>
 8029ad6:	3301      	adds	r3, #1
 8029ad8:	6862      	ldr	r2, [r4, #4]
 8029ada:	6023      	str	r3, [r4, #0]
 8029adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029ade:	3501      	adds	r5, #1
 8029ae0:	3a01      	subs	r2, #1
 8029ae2:	429d      	cmp	r5, r3
 8029ae4:	6062      	str	r2, [r4, #4]
 8029ae6:	f43f acf2 	beq.w	80294ce <__ssvfiscanf_r+0x51a>
 8029aea:	2a00      	cmp	r2, #0
 8029aec:	dced      	bgt.n	8029aca <__ssvfiscanf_r+0xb16>
 8029aee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029af0:	4621      	mov	r1, r4
 8029af2:	f7ff fa08 	bl	8028f06 <__ssrefill_r>
 8029af6:	2800      	cmp	r0, #0
 8029af8:	d0e7      	beq.n	8029aca <__ssvfiscanf_r+0xb16>
 8029afa:	e4e8      	b.n	80294ce <__ssvfiscanf_r+0x51a>
 8029afc:	6a3b      	ldr	r3, [r7, #32]
 8029afe:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8029b02:	f853 5b04 	ldr.w	r5, [r3], #4
 8029b06:	623b      	str	r3, [r7, #32]
 8029b08:	d074      	beq.n	8029bf4 <__ssvfiscanf_r+0xc40>
 8029b0a:	2d00      	cmp	r5, #0
 8029b0c:	f43f aa9f 	beq.w	802904e <__ssvfiscanf_r+0x9a>
 8029b10:	2020      	movs	r0, #32
 8029b12:	f7f9 faab 	bl	802306c <malloc>
 8029b16:	4680      	mov	r8, r0
 8029b18:	2800      	cmp	r0, #0
 8029b1a:	f43f ab07 	beq.w	802912c <__ssvfiscanf_r+0x178>
 8029b1e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8029b22:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8029b26:	6028      	str	r0, [r5, #0]
 8029b28:	45b1      	cmp	r9, r6
 8029b2a:	d312      	bcc.n	8029b52 <__ssvfiscanf_r+0xb9e>
 8029b2c:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8029b30:	429e      	cmp	r6, r3
 8029b32:	f200 8153 	bhi.w	8029ddc <__ssvfiscanf_r+0xe28>
 8029b36:	3608      	adds	r6, #8
 8029b38:	b2b6      	uxth	r6, r6
 8029b3a:	f8db 0000 	ldr.w	r0, [fp]
 8029b3e:	00b1      	lsls	r1, r6, #2
 8029b40:	f003 f9a2 	bl	802ce88 <realloc>
 8029b44:	2800      	cmp	r0, #0
 8029b46:	f000 8149 	beq.w	8029ddc <__ssvfiscanf_r+0xe28>
 8029b4a:	f8cb 0000 	str.w	r0, [fp]
 8029b4e:	f8ab 6004 	strh.w	r6, [fp, #4]
 8029b52:	f8db 3000 	ldr.w	r3, [fp]
 8029b56:	f109 0201 	add.w	r2, r9, #1
 8029b5a:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8029b5e:	46aa      	mov	sl, r5
 8029b60:	f8ab 2006 	strh.w	r2, [fp, #6]
 8029b64:	4645      	mov	r5, r8
 8029b66:	2620      	movs	r6, #32
 8029b68:	46a9      	mov	r9, r5
 8029b6a:	6823      	ldr	r3, [r4, #0]
 8029b6c:	4922      	ldr	r1, [pc, #136]	@ (8029bf8 <__ssvfiscanf_r+0xc44>)
 8029b6e:	781a      	ldrb	r2, [r3, #0]
 8029b70:	5c8a      	ldrb	r2, [r1, r2]
 8029b72:	0710      	lsls	r0, r2, #28
 8029b74:	d428      	bmi.n	8029bc8 <__ssvfiscanf_r+0xc14>
 8029b76:	6862      	ldr	r2, [r4, #4]
 8029b78:	3a01      	subs	r2, #1
 8029b7a:	6062      	str	r2, [r4, #4]
 8029b7c:	1c5a      	adds	r2, r3, #1
 8029b7e:	6022      	str	r2, [r4, #0]
 8029b80:	781b      	ldrb	r3, [r3, #0]
 8029b82:	f805 3b01 	strb.w	r3, [r5], #1
 8029b86:	f1ba 0f00 	cmp.w	sl, #0
 8029b8a:	d010      	beq.n	8029bae <__ssvfiscanf_r+0xbfa>
 8029b8c:	eba5 0809 	sub.w	r8, r5, r9
 8029b90:	45b0      	cmp	r8, r6
 8029b92:	d30c      	bcc.n	8029bae <__ssvfiscanf_r+0xbfa>
 8029b94:	0076      	lsls	r6, r6, #1
 8029b96:	4648      	mov	r0, r9
 8029b98:	4631      	mov	r1, r6
 8029b9a:	f003 f975 	bl	802ce88 <realloc>
 8029b9e:	4681      	mov	r9, r0
 8029ba0:	2800      	cmp	r0, #0
 8029ba2:	f43f aac3 	beq.w	802912c <__ssvfiscanf_r+0x178>
 8029ba6:	eb00 0508 	add.w	r5, r0, r8
 8029baa:	f8ca 0000 	str.w	r0, [sl]
 8029bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029bb0:	3b01      	subs	r3, #1
 8029bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029bb4:	d008      	beq.n	8029bc8 <__ssvfiscanf_r+0xc14>
 8029bb6:	6863      	ldr	r3, [r4, #4]
 8029bb8:	2b00      	cmp	r3, #0
 8029bba:	dcd6      	bgt.n	8029b6a <__ssvfiscanf_r+0xbb6>
 8029bbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029bbe:	4621      	mov	r1, r4
 8029bc0:	f7ff f9a1 	bl	8028f06 <__ssrefill_r>
 8029bc4:	2800      	cmp	r0, #0
 8029bc6:	d0d0      	beq.n	8029b6a <__ssvfiscanf_r+0xbb6>
 8029bc8:	2300      	movs	r3, #0
 8029bca:	702b      	strb	r3, [r5, #0]
 8029bcc:	eba5 0509 	sub.w	r5, r5, r9
 8029bd0:	f1ba 0f00 	cmp.w	sl, #0
 8029bd4:	f43f acce 	beq.w	8029574 <__ssvfiscanf_r+0x5c0>
 8029bd8:	1c69      	adds	r1, r5, #1
 8029bda:	428e      	cmp	r6, r1
 8029bdc:	f67f acca 	bls.w	8029574 <__ssvfiscanf_r+0x5c0>
 8029be0:	f8da 0000 	ldr.w	r0, [sl]
 8029be4:	f003 f950 	bl	802ce88 <realloc>
 8029be8:	2800      	cmp	r0, #0
 8029bea:	f43f acc3 	beq.w	8029574 <__ssvfiscanf_r+0x5c0>
 8029bee:	f8ca 0000 	str.w	r0, [sl]
 8029bf2:	e4bf      	b.n	8029574 <__ssvfiscanf_r+0x5c0>
 8029bf4:	46b2      	mov	sl, r6
 8029bf6:	e7b7      	b.n	8029b68 <__ssvfiscanf_r+0xbb4>
 8029bf8:	080343f5 	.word	0x080343f5
 8029bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029bfe:	3b01      	subs	r3, #1
 8029c00:	2b26      	cmp	r3, #38	@ 0x26
 8029c02:	bf81      	itttt	hi
 8029c04:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 8029c06:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 8029c0a:	2327      	movhi	r3, #39	@ 0x27
 8029c0c:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8029c0e:	bf98      	it	ls
 8029c10:	f04f 0800 	movls.w	r8, #0
 8029c14:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 8029c18:	f04f 0900 	mov.w	r9, #0
 8029c1c:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8029c20:	6822      	ldr	r2, [r4, #0]
 8029c22:	7813      	ldrb	r3, [r2, #0]
 8029c24:	2b39      	cmp	r3, #57	@ 0x39
 8029c26:	d80f      	bhi.n	8029c48 <__ssvfiscanf_r+0xc94>
 8029c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8029c2a:	d91a      	bls.n	8029c62 <__ssvfiscanf_r+0xcae>
 8029c2c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8029c30:	290e      	cmp	r1, #14
 8029c32:	d816      	bhi.n	8029c62 <__ssvfiscanf_r+0xcae>
 8029c34:	e8df f001 	tbb	[pc, r1]
 8029c38:	15771577 	.word	0x15771577
 8029c3c:	67673e15 	.word	0x67673e15
 8029c40:	67676767 	.word	0x67676767
 8029c44:	6f67      	.short	0x6f67
 8029c46:	6f          	.byte	0x6f
 8029c47:	00          	.byte	0x00
 8029c48:	2b66      	cmp	r3, #102	@ 0x66
 8029c4a:	d831      	bhi.n	8029cb0 <__ssvfiscanf_r+0xcfc>
 8029c4c:	2b60      	cmp	r3, #96	@ 0x60
 8029c4e:	d803      	bhi.n	8029c58 <__ssvfiscanf_r+0xca4>
 8029c50:	2b46      	cmp	r3, #70	@ 0x46
 8029c52:	d804      	bhi.n	8029c5e <__ssvfiscanf_r+0xcaa>
 8029c54:	2b40      	cmp	r3, #64	@ 0x40
 8029c56:	d904      	bls.n	8029c62 <__ssvfiscanf_r+0xcae>
 8029c58:	6979      	ldr	r1, [r7, #20]
 8029c5a:	290a      	cmp	r1, #10
 8029c5c:	e061      	b.n	8029d22 <__ssvfiscanf_r+0xd6e>
 8029c5e:	2b58      	cmp	r3, #88	@ 0x58
 8029c60:	d066      	beq.n	8029d30 <__ssvfiscanf_r+0xd7c>
 8029c62:	05f1      	lsls	r1, r6, #23
 8029c64:	d511      	bpl.n	8029c8a <__ssvfiscanf_r+0xcd6>
 8029c66:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029c6a:	459a      	cmp	sl, r3
 8029c6c:	d908      	bls.n	8029c80 <__ssvfiscanf_r+0xccc>
 8029c6e:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8029c72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029c74:	4622      	mov	r2, r4
 8029c76:	f7ff f90b 	bl	8028e90 <_sungetc_r>
 8029c7a:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8029c7e:	46c2      	mov	sl, r8
 8029c80:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029c84:	459a      	cmp	sl, r3
 8029c86:	f43f a9e2 	beq.w	802904e <__ssvfiscanf_r+0x9a>
 8029c8a:	f016 0210 	ands.w	r2, r6, #16
 8029c8e:	d16b      	bne.n	8029d68 <__ssvfiscanf_r+0xdb4>
 8029c90:	697b      	ldr	r3, [r7, #20]
 8029c92:	f88a 2000 	strb.w	r2, [sl]
 8029c96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029c98:	68fd      	ldr	r5, [r7, #12]
 8029c9a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8029c9e:	47a8      	blx	r5
 8029ca0:	6a3b      	ldr	r3, [r7, #32]
 8029ca2:	06b2      	lsls	r2, r6, #26
 8029ca4:	f103 0804 	add.w	r8, r3, #4
 8029ca8:	d555      	bpl.n	8029d56 <__ssvfiscanf_r+0xda2>
 8029caa:	681b      	ldr	r3, [r3, #0]
 8029cac:	6018      	str	r0, [r3, #0]
 8029cae:	e057      	b.n	8029d60 <__ssvfiscanf_r+0xdac>
 8029cb0:	2b78      	cmp	r3, #120	@ 0x78
 8029cb2:	e7d5      	b.n	8029c60 <__ssvfiscanf_r+0xcac>
 8029cb4:	0531      	lsls	r1, r6, #20
 8029cb6:	d509      	bpl.n	8029ccc <__ssvfiscanf_r+0xd18>
 8029cb8:	6979      	ldr	r1, [r7, #20]
 8029cba:	b919      	cbnz	r1, 8029cc4 <__ssvfiscanf_r+0xd10>
 8029cbc:	2108      	movs	r1, #8
 8029cbe:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8029cc2:	6179      	str	r1, [r7, #20]
 8029cc4:	0575      	lsls	r5, r6, #21
 8029cc6:	d506      	bpl.n	8029cd6 <__ssvfiscanf_r+0xd22>
 8029cc8:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 8029ccc:	4655      	mov	r5, sl
 8029cce:	f805 3b01 	strb.w	r3, [r5], #1
 8029cd2:	46aa      	mov	sl, r5
 8029cd4:	e00b      	b.n	8029cee <__ssvfiscanf_r+0xd3a>
 8029cd6:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 8029cda:	f1b8 0f00 	cmp.w	r8, #0
 8029cde:	d004      	beq.n	8029cea <__ssvfiscanf_r+0xd36>
 8029ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029ce2:	3301      	adds	r3, #1
 8029ce4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8029ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029cea:	f109 0901 	add.w	r9, r9, #1
 8029cee:	6863      	ldr	r3, [r4, #4]
 8029cf0:	3b01      	subs	r3, #1
 8029cf2:	2b00      	cmp	r3, #0
 8029cf4:	6063      	str	r3, [r4, #4]
 8029cf6:	dd27      	ble.n	8029d48 <__ssvfiscanf_r+0xd94>
 8029cf8:	3201      	adds	r2, #1
 8029cfa:	6022      	str	r2, [r4, #0]
 8029cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029cfe:	3b01      	subs	r3, #1
 8029d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029d02:	d18d      	bne.n	8029c20 <__ssvfiscanf_r+0xc6c>
 8029d04:	e7ad      	b.n	8029c62 <__ssvfiscanf_r+0xcae>
 8029d06:	6978      	ldr	r0, [r7, #20]
 8029d08:	4936      	ldr	r1, [pc, #216]	@ (8029de4 <__ssvfiscanf_r+0xe30>)
 8029d0a:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8029d0e:	6179      	str	r1, [r7, #20]
 8029d10:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8029d14:	e7da      	b.n	8029ccc <__ssvfiscanf_r+0xd18>
 8029d16:	6978      	ldr	r0, [r7, #20]
 8029d18:	4932      	ldr	r1, [pc, #200]	@ (8029de4 <__ssvfiscanf_r+0xe30>)
 8029d1a:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8029d1e:	6179      	str	r1, [r7, #20]
 8029d20:	2908      	cmp	r1, #8
 8029d22:	dcf5      	bgt.n	8029d10 <__ssvfiscanf_r+0xd5c>
 8029d24:	e79d      	b.n	8029c62 <__ssvfiscanf_r+0xcae>
 8029d26:	0630      	lsls	r0, r6, #24
 8029d28:	d59b      	bpl.n	8029c62 <__ssvfiscanf_r+0xcae>
 8029d2a:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8029d2e:	e7cd      	b.n	8029ccc <__ssvfiscanf_r+0xd18>
 8029d30:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 8029d34:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8029d38:	d193      	bne.n	8029c62 <__ssvfiscanf_r+0xcae>
 8029d3a:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 8029d3e:	2110      	movs	r1, #16
 8029d40:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 8029d44:	6179      	str	r1, [r7, #20]
 8029d46:	e7c1      	b.n	8029ccc <__ssvfiscanf_r+0xd18>
 8029d48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029d4a:	4621      	mov	r1, r4
 8029d4c:	f7ff f8db 	bl	8028f06 <__ssrefill_r>
 8029d50:	2800      	cmp	r0, #0
 8029d52:	d0d3      	beq.n	8029cfc <__ssvfiscanf_r+0xd48>
 8029d54:	e785      	b.n	8029c62 <__ssvfiscanf_r+0xcae>
 8029d56:	0733      	lsls	r3, r6, #28
 8029d58:	d50d      	bpl.n	8029d76 <__ssvfiscanf_r+0xdc2>
 8029d5a:	6a3b      	ldr	r3, [r7, #32]
 8029d5c:	681b      	ldr	r3, [r3, #0]
 8029d5e:	7018      	strb	r0, [r3, #0]
 8029d60:	69fb      	ldr	r3, [r7, #28]
 8029d62:	3301      	adds	r3, #1
 8029d64:	e9c7 3807 	strd	r3, r8, [r7, #28]
 8029d68:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029d6c:	ebaa 0503 	sub.w	r5, sl, r3
 8029d70:	444d      	add	r5, r9
 8029d72:	f7ff bbac 	b.w	80294ce <__ssvfiscanf_r+0x51a>
 8029d76:	0775      	lsls	r5, r6, #29
 8029d78:	d503      	bpl.n	8029d82 <__ssvfiscanf_r+0xdce>
 8029d7a:	6a3b      	ldr	r3, [r7, #32]
 8029d7c:	681b      	ldr	r3, [r3, #0]
 8029d7e:	8018      	strh	r0, [r3, #0]
 8029d80:	e7ee      	b.n	8029d60 <__ssvfiscanf_r+0xdac>
 8029d82:	f016 0201 	ands.w	r2, r6, #1
 8029d86:	d001      	beq.n	8029d8c <__ssvfiscanf_r+0xdd8>
 8029d88:	6a3b      	ldr	r3, [r7, #32]
 8029d8a:	e78e      	b.n	8029caa <__ssvfiscanf_r+0xcf6>
 8029d8c:	07b1      	lsls	r1, r6, #30
 8029d8e:	d5fb      	bpl.n	8029d88 <__ssvfiscanf_r+0xdd4>
 8029d90:	4b15      	ldr	r3, [pc, #84]	@ (8029de8 <__ssvfiscanf_r+0xe34>)
 8029d92:	68f9      	ldr	r1, [r7, #12]
 8029d94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029d96:	4299      	cmp	r1, r3
 8029d98:	697b      	ldr	r3, [r7, #20]
 8029d9a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8029d9e:	d106      	bne.n	8029dae <__ssvfiscanf_r+0xdfa>
 8029da0:	f004 fc0e 	bl	802e5c0 <_strtoull_r>
 8029da4:	6a3b      	ldr	r3, [r7, #32]
 8029da6:	681b      	ldr	r3, [r3, #0]
 8029da8:	e9c3 0100 	strd	r0, r1, [r3]
 8029dac:	e7d8      	b.n	8029d60 <__ssvfiscanf_r+0xdac>
 8029dae:	f004 fb5b 	bl	802e468 <_strtoll_r>
 8029db2:	e7f7      	b.n	8029da4 <__ssvfiscanf_r+0xdf0>
 8029db4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8029db8:	6818      	ldr	r0, [r3, #0]
 8029dba:	f7f9 f95f 	bl	802307c <free>
 8029dbe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8029dc2:	3401      	adds	r4, #1
 8029dc4:	601e      	str	r6, [r3, #0]
 8029dc6:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8029dca:	f8db 5000 	ldr.w	r5, [fp]
 8029dce:	42a3      	cmp	r3, r4
 8029dd0:	dcf0      	bgt.n	8029db4 <__ssvfiscanf_r+0xe00>
 8029dd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029dd6:	61fb      	str	r3, [r7, #28]
 8029dd8:	f7ff ba46 	b.w	8029268 <__ssvfiscanf_r+0x2b4>
 8029ddc:	2400      	movs	r4, #0
 8029dde:	4626      	mov	r6, r4
 8029de0:	e7f1      	b.n	8029dc6 <__ssvfiscanf_r+0xe12>
 8029de2:	bf00      	nop
 8029de4:	0803458c 	.word	0x0803458c
 8029de8:	0802dff1 	.word	0x0802dff1
 8029dec:	00000000 	.word	0x00000000

08029df0 <_svfprintf_r>:
 8029df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029df4:	b0d3      	sub	sp, #332	@ 0x14c
 8029df6:	468b      	mov	fp, r1
 8029df8:	4691      	mov	r9, r2
 8029dfa:	461e      	mov	r6, r3
 8029dfc:	9003      	str	r0, [sp, #12]
 8029dfe:	f7fd fa39 	bl	8027274 <_localeconv_r>
 8029e02:	6803      	ldr	r3, [r0, #0]
 8029e04:	9316      	str	r3, [sp, #88]	@ 0x58
 8029e06:	4618      	mov	r0, r3
 8029e08:	f7d6 fa4a 	bl	80002a0 <strlen>
 8029e0c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029e10:	900d      	str	r0, [sp, #52]	@ 0x34
 8029e12:	061b      	lsls	r3, r3, #24
 8029e14:	d515      	bpl.n	8029e42 <_svfprintf_r+0x52>
 8029e16:	f8db 3010 	ldr.w	r3, [fp, #16]
 8029e1a:	b993      	cbnz	r3, 8029e42 <_svfprintf_r+0x52>
 8029e1c:	9803      	ldr	r0, [sp, #12]
 8029e1e:	2140      	movs	r1, #64	@ 0x40
 8029e20:	f7f9 f934 	bl	802308c <_malloc_r>
 8029e24:	f8cb 0000 	str.w	r0, [fp]
 8029e28:	f8cb 0010 	str.w	r0, [fp, #16]
 8029e2c:	b930      	cbnz	r0, 8029e3c <_svfprintf_r+0x4c>
 8029e2e:	9a03      	ldr	r2, [sp, #12]
 8029e30:	230c      	movs	r3, #12
 8029e32:	6013      	str	r3, [r2, #0]
 8029e34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029e38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029e3a:	e1f7      	b.n	802a22c <_svfprintf_r+0x43c>
 8029e3c:	2340      	movs	r3, #64	@ 0x40
 8029e3e:	f8cb 3014 	str.w	r3, [fp, #20]
 8029e42:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 802a090 <_svfprintf_r+0x2a0>
 8029e46:	2300      	movs	r3, #0
 8029e48:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8029e4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8029e50:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8029e54:	ac29      	add	r4, sp, #164	@ 0xa4
 8029e56:	9426      	str	r4, [sp, #152]	@ 0x98
 8029e58:	9304      	str	r3, [sp, #16]
 8029e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8029e5c:	9312      	str	r3, [sp, #72]	@ 0x48
 8029e5e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029e60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029e62:	464b      	mov	r3, r9
 8029e64:	461d      	mov	r5, r3
 8029e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029e6a:	b10a      	cbz	r2, 8029e70 <_svfprintf_r+0x80>
 8029e6c:	2a25      	cmp	r2, #37	@ 0x25
 8029e6e:	d1f9      	bne.n	8029e64 <_svfprintf_r+0x74>
 8029e70:	ebb5 0709 	subs.w	r7, r5, r9
 8029e74:	d00d      	beq.n	8029e92 <_svfprintf_r+0xa2>
 8029e76:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029e78:	443b      	add	r3, r7
 8029e7a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029e7c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029e7e:	3301      	adds	r3, #1
 8029e80:	2b07      	cmp	r3, #7
 8029e82:	e9c4 9700 	strd	r9, r7, [r4]
 8029e86:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029e88:	dc75      	bgt.n	8029f76 <_svfprintf_r+0x186>
 8029e8a:	3408      	adds	r4, #8
 8029e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029e8e:	443b      	add	r3, r7
 8029e90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029e92:	782b      	ldrb	r3, [r5, #0]
 8029e94:	2b00      	cmp	r3, #0
 8029e96:	f001 8148 	beq.w	802b12a <_svfprintf_r+0x133a>
 8029e9a:	2200      	movs	r2, #0
 8029e9c:	1c6b      	adds	r3, r5, #1
 8029e9e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8029ea2:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8029ea6:	920e      	str	r2, [sp, #56]	@ 0x38
 8029ea8:	4615      	mov	r5, r2
 8029eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029eae:	9206      	str	r2, [sp, #24]
 8029eb0:	930c      	str	r3, [sp, #48]	@ 0x30
 8029eb2:	9b06      	ldr	r3, [sp, #24]
 8029eb4:	3b20      	subs	r3, #32
 8029eb6:	2b5a      	cmp	r3, #90	@ 0x5a
 8029eb8:	f200 85a4 	bhi.w	802aa04 <_svfprintf_r+0xc14>
 8029ebc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8029ec0:	05a2009d 	.word	0x05a2009d
 8029ec4:	00a505a2 	.word	0x00a505a2
 8029ec8:	05a205a2 	.word	0x05a205a2
 8029ecc:	008505a2 	.word	0x008505a2
 8029ed0:	05a205a2 	.word	0x05a205a2
 8029ed4:	00b200a8 	.word	0x00b200a8
 8029ed8:	00af05a2 	.word	0x00af05a2
 8029edc:	05a200b4 	.word	0x05a200b4
 8029ee0:	00d100ce 	.word	0x00d100ce
 8029ee4:	00d100d1 	.word	0x00d100d1
 8029ee8:	00d100d1 	.word	0x00d100d1
 8029eec:	00d100d1 	.word	0x00d100d1
 8029ef0:	00d100d1 	.word	0x00d100d1
 8029ef4:	05a205a2 	.word	0x05a205a2
 8029ef8:	05a205a2 	.word	0x05a205a2
 8029efc:	05a205a2 	.word	0x05a205a2
 8029f00:	014705a2 	.word	0x014705a2
 8029f04:	010805a2 	.word	0x010805a2
 8029f08:	0147011b 	.word	0x0147011b
 8029f0c:	01470147 	.word	0x01470147
 8029f10:	05a205a2 	.word	0x05a205a2
 8029f14:	05a205a2 	.word	0x05a205a2
 8029f18:	05a200e2 	.word	0x05a200e2
 8029f1c:	049d05a2 	.word	0x049d05a2
 8029f20:	05a205a2 	.word	0x05a205a2
 8029f24:	04e705a2 	.word	0x04e705a2
 8029f28:	050805a2 	.word	0x050805a2
 8029f2c:	05a205a2 	.word	0x05a205a2
 8029f30:	05a2052a 	.word	0x05a2052a
 8029f34:	05a205a2 	.word	0x05a205a2
 8029f38:	05a205a2 	.word	0x05a205a2
 8029f3c:	05a205a2 	.word	0x05a205a2
 8029f40:	014705a2 	.word	0x014705a2
 8029f44:	010805a2 	.word	0x010805a2
 8029f48:	0147011d 	.word	0x0147011d
 8029f4c:	01470147 	.word	0x01470147
 8029f50:	011d00ee 	.word	0x011d00ee
 8029f54:	05a20102 	.word	0x05a20102
 8029f58:	05a200fb 	.word	0x05a200fb
 8029f5c:	049f047e 	.word	0x049f047e
 8029f60:	010204d6 	.word	0x010204d6
 8029f64:	04e705a2 	.word	0x04e705a2
 8029f68:	050a009b 	.word	0x050a009b
 8029f6c:	05a205a2 	.word	0x05a205a2
 8029f70:	05a20065 	.word	0x05a20065
 8029f74:	009b      	.short	0x009b
 8029f76:	9803      	ldr	r0, [sp, #12]
 8029f78:	aa26      	add	r2, sp, #152	@ 0x98
 8029f7a:	4659      	mov	r1, fp
 8029f7c:	f7fe fabe 	bl	80284fc <__ssprint_r>
 8029f80:	2800      	cmp	r0, #0
 8029f82:	f040 814e 	bne.w	802a222 <_svfprintf_r+0x432>
 8029f86:	ac29      	add	r4, sp, #164	@ 0xa4
 8029f88:	e780      	b.n	8029e8c <_svfprintf_r+0x9c>
 8029f8a:	4b43      	ldr	r3, [pc, #268]	@ (802a098 <_svfprintf_r+0x2a8>)
 8029f8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8029f8e:	f015 0320 	ands.w	r3, r5, #32
 8029f92:	f000 84c2 	beq.w	802a91a <_svfprintf_r+0xb2a>
 8029f96:	3607      	adds	r6, #7
 8029f98:	f026 0307 	bic.w	r3, r6, #7
 8029f9c:	461a      	mov	r2, r3
 8029f9e:	685f      	ldr	r7, [r3, #4]
 8029fa0:	f852 6b08 	ldr.w	r6, [r2], #8
 8029fa4:	9207      	str	r2, [sp, #28]
 8029fa6:	07eb      	lsls	r3, r5, #31
 8029fa8:	d50a      	bpl.n	8029fc0 <_svfprintf_r+0x1d0>
 8029faa:	ea56 0307 	orrs.w	r3, r6, r7
 8029fae:	d007      	beq.n	8029fc0 <_svfprintf_r+0x1d0>
 8029fb0:	2330      	movs	r3, #48	@ 0x30
 8029fb2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8029fb6:	9b06      	ldr	r3, [sp, #24]
 8029fb8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8029fbc:	f045 0502 	orr.w	r5, r5, #2
 8029fc0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8029fc4:	2302      	movs	r3, #2
 8029fc6:	f000 bc28 	b.w	802a81a <_svfprintf_r+0xa2a>
 8029fca:	9803      	ldr	r0, [sp, #12]
 8029fcc:	f7fd f952 	bl	8027274 <_localeconv_r>
 8029fd0:	6843      	ldr	r3, [r0, #4]
 8029fd2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029fd4:	4618      	mov	r0, r3
 8029fd6:	f7d6 f963 	bl	80002a0 <strlen>
 8029fda:	9012      	str	r0, [sp, #72]	@ 0x48
 8029fdc:	9803      	ldr	r0, [sp, #12]
 8029fde:	f7fd f949 	bl	8027274 <_localeconv_r>
 8029fe2:	6883      	ldr	r3, [r0, #8]
 8029fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8029fe6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029fe8:	b12b      	cbz	r3, 8029ff6 <_svfprintf_r+0x206>
 8029fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029fec:	b11b      	cbz	r3, 8029ff6 <_svfprintf_r+0x206>
 8029fee:	781b      	ldrb	r3, [r3, #0]
 8029ff0:	b10b      	cbz	r3, 8029ff6 <_svfprintf_r+0x206>
 8029ff2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8029ff6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029ff8:	e757      	b.n	8029eaa <_svfprintf_r+0xba>
 8029ffa:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8029ffe:	2b00      	cmp	r3, #0
 802a000:	d1f9      	bne.n	8029ff6 <_svfprintf_r+0x206>
 802a002:	2320      	movs	r3, #32
 802a004:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a008:	e7f5      	b.n	8029ff6 <_svfprintf_r+0x206>
 802a00a:	f045 0501 	orr.w	r5, r5, #1
 802a00e:	e7f2      	b.n	8029ff6 <_svfprintf_r+0x206>
 802a010:	f856 3b04 	ldr.w	r3, [r6], #4
 802a014:	930e      	str	r3, [sp, #56]	@ 0x38
 802a016:	2b00      	cmp	r3, #0
 802a018:	daed      	bge.n	8029ff6 <_svfprintf_r+0x206>
 802a01a:	425b      	negs	r3, r3
 802a01c:	930e      	str	r3, [sp, #56]	@ 0x38
 802a01e:	f045 0504 	orr.w	r5, r5, #4
 802a022:	e7e8      	b.n	8029ff6 <_svfprintf_r+0x206>
 802a024:	232b      	movs	r3, #43	@ 0x2b
 802a026:	e7ed      	b.n	802a004 <_svfprintf_r+0x214>
 802a028:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a02e:	9206      	str	r2, [sp, #24]
 802a030:	2a2a      	cmp	r2, #42	@ 0x2a
 802a032:	d10f      	bne.n	802a054 <_svfprintf_r+0x264>
 802a034:	f856 2b04 	ldr.w	r2, [r6], #4
 802a038:	930c      	str	r3, [sp, #48]	@ 0x30
 802a03a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 802a03e:	e7da      	b.n	8029ff6 <_svfprintf_r+0x206>
 802a040:	fb01 2808 	mla	r8, r1, r8, r2
 802a044:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a048:	9206      	str	r2, [sp, #24]
 802a04a:	9a06      	ldr	r2, [sp, #24]
 802a04c:	3a30      	subs	r2, #48	@ 0x30
 802a04e:	2a09      	cmp	r2, #9
 802a050:	d9f6      	bls.n	802a040 <_svfprintf_r+0x250>
 802a052:	e72d      	b.n	8029eb0 <_svfprintf_r+0xc0>
 802a054:	f04f 0800 	mov.w	r8, #0
 802a058:	210a      	movs	r1, #10
 802a05a:	e7f6      	b.n	802a04a <_svfprintf_r+0x25a>
 802a05c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802a060:	e7c9      	b.n	8029ff6 <_svfprintf_r+0x206>
 802a062:	2200      	movs	r2, #0
 802a064:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a066:	920e      	str	r2, [sp, #56]	@ 0x38
 802a068:	210a      	movs	r1, #10
 802a06a:	9a06      	ldr	r2, [sp, #24]
 802a06c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802a06e:	3a30      	subs	r2, #48	@ 0x30
 802a070:	fb01 2200 	mla	r2, r1, r0, r2
 802a074:	920e      	str	r2, [sp, #56]	@ 0x38
 802a076:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a07a:	9206      	str	r2, [sp, #24]
 802a07c:	3a30      	subs	r2, #48	@ 0x30
 802a07e:	2a09      	cmp	r2, #9
 802a080:	d9f3      	bls.n	802a06a <_svfprintf_r+0x27a>
 802a082:	e715      	b.n	8029eb0 <_svfprintf_r+0xc0>
 802a084:	f045 0508 	orr.w	r5, r5, #8
 802a088:	e7b5      	b.n	8029ff6 <_svfprintf_r+0x206>
 802a08a:	bf00      	nop
 802a08c:	f3af 8000 	nop.w
	...
 802a098:	08034048 	.word	0x08034048
 802a09c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a09e:	781b      	ldrb	r3, [r3, #0]
 802a0a0:	2b68      	cmp	r3, #104	@ 0x68
 802a0a2:	bf01      	itttt	eq
 802a0a4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802a0a6:	3301      	addeq	r3, #1
 802a0a8:	930c      	streq	r3, [sp, #48]	@ 0x30
 802a0aa:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802a0ae:	bf18      	it	ne
 802a0b0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802a0b4:	e79f      	b.n	8029ff6 <_svfprintf_r+0x206>
 802a0b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a0b8:	781b      	ldrb	r3, [r3, #0]
 802a0ba:	2b6c      	cmp	r3, #108	@ 0x6c
 802a0bc:	d105      	bne.n	802a0ca <_svfprintf_r+0x2da>
 802a0be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a0c0:	3301      	adds	r3, #1
 802a0c2:	930c      	str	r3, [sp, #48]	@ 0x30
 802a0c4:	f045 0520 	orr.w	r5, r5, #32
 802a0c8:	e795      	b.n	8029ff6 <_svfprintf_r+0x206>
 802a0ca:	f045 0510 	orr.w	r5, r5, #16
 802a0ce:	e792      	b.n	8029ff6 <_svfprintf_r+0x206>
 802a0d0:	4632      	mov	r2, r6
 802a0d2:	f852 3b04 	ldr.w	r3, [r2], #4
 802a0d6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802a0da:	2300      	movs	r3, #0
 802a0dc:	9207      	str	r2, [sp, #28]
 802a0de:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a0e2:	469a      	mov	sl, r3
 802a0e4:	f04f 0801 	mov.w	r8, #1
 802a0e8:	9310      	str	r3, [sp, #64]	@ 0x40
 802a0ea:	461f      	mov	r7, r3
 802a0ec:	9308      	str	r3, [sp, #32]
 802a0ee:	461e      	mov	r6, r3
 802a0f0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802a0f4:	e1d2      	b.n	802a49c <_svfprintf_r+0x6ac>
 802a0f6:	f045 0510 	orr.w	r5, r5, #16
 802a0fa:	06af      	lsls	r7, r5, #26
 802a0fc:	d512      	bpl.n	802a124 <_svfprintf_r+0x334>
 802a0fe:	3607      	adds	r6, #7
 802a100:	f026 0307 	bic.w	r3, r6, #7
 802a104:	461a      	mov	r2, r3
 802a106:	685f      	ldr	r7, [r3, #4]
 802a108:	f852 6b08 	ldr.w	r6, [r2], #8
 802a10c:	9207      	str	r2, [sp, #28]
 802a10e:	2f00      	cmp	r7, #0
 802a110:	da06      	bge.n	802a120 <_svfprintf_r+0x330>
 802a112:	4276      	negs	r6, r6
 802a114:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802a118:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802a11c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a120:	2301      	movs	r3, #1
 802a122:	e37d      	b.n	802a820 <_svfprintf_r+0xa30>
 802a124:	4633      	mov	r3, r6
 802a126:	06ee      	lsls	r6, r5, #27
 802a128:	f853 7b04 	ldr.w	r7, [r3], #4
 802a12c:	9307      	str	r3, [sp, #28]
 802a12e:	d502      	bpl.n	802a136 <_svfprintf_r+0x346>
 802a130:	463e      	mov	r6, r7
 802a132:	17ff      	asrs	r7, r7, #31
 802a134:	e7eb      	b.n	802a10e <_svfprintf_r+0x31e>
 802a136:	0668      	lsls	r0, r5, #25
 802a138:	d503      	bpl.n	802a142 <_svfprintf_r+0x352>
 802a13a:	b23e      	sxth	r6, r7
 802a13c:	f347 37c0 	sbfx	r7, r7, #15, #1
 802a140:	e7e5      	b.n	802a10e <_svfprintf_r+0x31e>
 802a142:	05a9      	lsls	r1, r5, #22
 802a144:	d5f4      	bpl.n	802a130 <_svfprintf_r+0x340>
 802a146:	b27e      	sxtb	r6, r7
 802a148:	f347 17c0 	sbfx	r7, r7, #7, #1
 802a14c:	e7df      	b.n	802a10e <_svfprintf_r+0x31e>
 802a14e:	3607      	adds	r6, #7
 802a150:	f026 0307 	bic.w	r3, r6, #7
 802a154:	ecb3 7b02 	vldmia	r3!, {d7}
 802a158:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a15c:	9307      	str	r3, [sp, #28]
 802a15e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a160:	931a      	str	r3, [sp, #104]	@ 0x68
 802a162:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a164:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a168:	931b      	str	r3, [sp, #108]	@ 0x6c
 802a16a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a16e:	4b81      	ldr	r3, [pc, #516]	@ (802a374 <_svfprintf_r+0x584>)
 802a170:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a174:	f7d6 fcf2 	bl	8000b5c <__aeabi_dcmpun>
 802a178:	bb10      	cbnz	r0, 802a1c0 <_svfprintf_r+0x3d0>
 802a17a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a17e:	4b7d      	ldr	r3, [pc, #500]	@ (802a374 <_svfprintf_r+0x584>)
 802a180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a184:	f7d6 fccc 	bl	8000b20 <__aeabi_dcmple>
 802a188:	b9d0      	cbnz	r0, 802a1c0 <_svfprintf_r+0x3d0>
 802a18a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802a18e:	2200      	movs	r2, #0
 802a190:	2300      	movs	r3, #0
 802a192:	f7d6 fcbb 	bl	8000b0c <__aeabi_dcmplt>
 802a196:	b110      	cbz	r0, 802a19e <_svfprintf_r+0x3ae>
 802a198:	232d      	movs	r3, #45	@ 0x2d
 802a19a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a19e:	4a76      	ldr	r2, [pc, #472]	@ (802a378 <_svfprintf_r+0x588>)
 802a1a0:	4b76      	ldr	r3, [pc, #472]	@ (802a37c <_svfprintf_r+0x58c>)
 802a1a2:	9906      	ldr	r1, [sp, #24]
 802a1a4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802a1a8:	2947      	cmp	r1, #71	@ 0x47
 802a1aa:	bfd4      	ite	le
 802a1ac:	4691      	movle	r9, r2
 802a1ae:	4699      	movgt	r9, r3
 802a1b0:	f04f 0a00 	mov.w	sl, #0
 802a1b4:	f04f 0803 	mov.w	r8, #3
 802a1b8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802a1bc:	f000 bfec 	b.w	802b198 <_svfprintf_r+0x13a8>
 802a1c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802a1c4:	4610      	mov	r0, r2
 802a1c6:	4619      	mov	r1, r3
 802a1c8:	f7d6 fcc8 	bl	8000b5c <__aeabi_dcmpun>
 802a1cc:	4682      	mov	sl, r0
 802a1ce:	b140      	cbz	r0, 802a1e2 <_svfprintf_r+0x3f2>
 802a1d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a1d2:	4a6b      	ldr	r2, [pc, #428]	@ (802a380 <_svfprintf_r+0x590>)
 802a1d4:	2b00      	cmp	r3, #0
 802a1d6:	bfbc      	itt	lt
 802a1d8:	232d      	movlt	r3, #45	@ 0x2d
 802a1da:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802a1de:	4b69      	ldr	r3, [pc, #420]	@ (802a384 <_svfprintf_r+0x594>)
 802a1e0:	e7df      	b.n	802a1a2 <_svfprintf_r+0x3b2>
 802a1e2:	9b06      	ldr	r3, [sp, #24]
 802a1e4:	2b61      	cmp	r3, #97	@ 0x61
 802a1e6:	d025      	beq.n	802a234 <_svfprintf_r+0x444>
 802a1e8:	2b41      	cmp	r3, #65	@ 0x41
 802a1ea:	d125      	bne.n	802a238 <_svfprintf_r+0x448>
 802a1ec:	2358      	movs	r3, #88	@ 0x58
 802a1ee:	2230      	movs	r2, #48	@ 0x30
 802a1f0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 802a1f4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802a1f8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a1fc:	f045 0502 	orr.w	r5, r5, #2
 802a200:	f340 80a5 	ble.w	802a34e <_svfprintf_r+0x55e>
 802a204:	9803      	ldr	r0, [sp, #12]
 802a206:	f108 0101 	add.w	r1, r8, #1
 802a20a:	f7f8 ff3f 	bl	802308c <_malloc_r>
 802a20e:	4681      	mov	r9, r0
 802a210:	2800      	cmp	r0, #0
 802a212:	f040 80a1 	bne.w	802a358 <_svfprintf_r+0x568>
 802a216:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a21a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a21e:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a222:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a226:	065b      	lsls	r3, r3, #25
 802a228:	f53f ae04 	bmi.w	8029e34 <_svfprintf_r+0x44>
 802a22c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a22e:	b053      	add	sp, #332	@ 0x14c
 802a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a234:	2378      	movs	r3, #120	@ 0x78
 802a236:	e7da      	b.n	802a1ee <_svfprintf_r+0x3fe>
 802a238:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802a23c:	f000 808e 	beq.w	802a35c <_svfprintf_r+0x56c>
 802a240:	9b06      	ldr	r3, [sp, #24]
 802a242:	f023 0320 	bic.w	r3, r3, #32
 802a246:	2b47      	cmp	r3, #71	@ 0x47
 802a248:	d105      	bne.n	802a256 <_svfprintf_r+0x466>
 802a24a:	f1b8 0f00 	cmp.w	r8, #0
 802a24e:	d102      	bne.n	802a256 <_svfprintf_r+0x466>
 802a250:	46c2      	mov	sl, r8
 802a252:	f04f 0801 	mov.w	r8, #1
 802a256:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a25a:	9311      	str	r3, [sp, #68]	@ 0x44
 802a25c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a25e:	2b00      	cmp	r3, #0
 802a260:	da7f      	bge.n	802a362 <_svfprintf_r+0x572>
 802a262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a264:	9314      	str	r3, [sp, #80]	@ 0x50
 802a266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a268:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802a26c:	9315      	str	r3, [sp, #84]	@ 0x54
 802a26e:	232d      	movs	r3, #45	@ 0x2d
 802a270:	931c      	str	r3, [sp, #112]	@ 0x70
 802a272:	9b06      	ldr	r3, [sp, #24]
 802a274:	f023 0320 	bic.w	r3, r3, #32
 802a278:	2b41      	cmp	r3, #65	@ 0x41
 802a27a:	9308      	str	r3, [sp, #32]
 802a27c:	f040 81e6 	bne.w	802a64c <_svfprintf_r+0x85c>
 802a280:	a820      	add	r0, sp, #128	@ 0x80
 802a282:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a286:	f7fd f8e3 	bl	8027450 <frexp>
 802a28a:	2200      	movs	r2, #0
 802a28c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802a290:	ec51 0b10 	vmov	r0, r1, d0
 802a294:	f7d6 f9c8 	bl	8000628 <__aeabi_dmul>
 802a298:	4602      	mov	r2, r0
 802a29a:	460b      	mov	r3, r1
 802a29c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a2a0:	2200      	movs	r2, #0
 802a2a2:	2300      	movs	r3, #0
 802a2a4:	f7d6 fc28 	bl	8000af8 <__aeabi_dcmpeq>
 802a2a8:	b108      	cbz	r0, 802a2ae <_svfprintf_r+0x4be>
 802a2aa:	2301      	movs	r3, #1
 802a2ac:	9320      	str	r3, [sp, #128]	@ 0x80
 802a2ae:	4a36      	ldr	r2, [pc, #216]	@ (802a388 <_svfprintf_r+0x598>)
 802a2b0:	4b36      	ldr	r3, [pc, #216]	@ (802a38c <_svfprintf_r+0x59c>)
 802a2b2:	9906      	ldr	r1, [sp, #24]
 802a2b4:	2961      	cmp	r1, #97	@ 0x61
 802a2b6:	bf18      	it	ne
 802a2b8:	461a      	movne	r2, r3
 802a2ba:	9210      	str	r2, [sp, #64]	@ 0x40
 802a2bc:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 802a2c0:	464e      	mov	r6, r9
 802a2c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a2c6:	4b32      	ldr	r3, [pc, #200]	@ (802a390 <_svfprintf_r+0x5a0>)
 802a2c8:	2200      	movs	r2, #0
 802a2ca:	f7d6 f9ad 	bl	8000628 <__aeabi_dmul>
 802a2ce:	4602      	mov	r2, r0
 802a2d0:	460b      	mov	r3, r1
 802a2d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a2d6:	f7d6 fc57 	bl	8000b88 <__aeabi_d2iz>
 802a2da:	9013      	str	r0, [sp, #76]	@ 0x4c
 802a2dc:	f7d6 f93a 	bl	8000554 <__aeabi_i2d>
 802a2e0:	4602      	mov	r2, r0
 802a2e2:	460b      	mov	r3, r1
 802a2e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a2e8:	f7d5 ffe6 	bl	80002b8 <__aeabi_dsub>
 802a2ec:	4602      	mov	r2, r0
 802a2ee:	460b      	mov	r3, r1
 802a2f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a2f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a2f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a2f8:	5c9b      	ldrb	r3, [r3, r2]
 802a2fa:	f806 3b01 	strb.w	r3, [r6], #1
 802a2fe:	1c7a      	adds	r2, r7, #1
 802a300:	d006      	beq.n	802a310 <_svfprintf_r+0x520>
 802a302:	1e7b      	subs	r3, r7, #1
 802a304:	931d      	str	r3, [sp, #116]	@ 0x74
 802a306:	2200      	movs	r2, #0
 802a308:	2300      	movs	r3, #0
 802a30a:	f7d6 fbf5 	bl	8000af8 <__aeabi_dcmpeq>
 802a30e:	b370      	cbz	r0, 802a36e <_svfprintf_r+0x57e>
 802a310:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a314:	4b1f      	ldr	r3, [pc, #124]	@ (802a394 <_svfprintf_r+0x5a4>)
 802a316:	2200      	movs	r2, #0
 802a318:	f7d6 fc16 	bl	8000b48 <__aeabi_dcmpgt>
 802a31c:	2800      	cmp	r0, #0
 802a31e:	d13b      	bne.n	802a398 <_svfprintf_r+0x5a8>
 802a320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a324:	4b1b      	ldr	r3, [pc, #108]	@ (802a394 <_svfprintf_r+0x5a4>)
 802a326:	2200      	movs	r2, #0
 802a328:	f7d6 fbe6 	bl	8000af8 <__aeabi_dcmpeq>
 802a32c:	b110      	cbz	r0, 802a334 <_svfprintf_r+0x544>
 802a32e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a330:	07db      	lsls	r3, r3, #31
 802a332:	d431      	bmi.n	802a398 <_svfprintf_r+0x5a8>
 802a334:	4633      	mov	r3, r6
 802a336:	19f1      	adds	r1, r6, r7
 802a338:	2030      	movs	r0, #48	@ 0x30
 802a33a:	1aca      	subs	r2, r1, r3
 802a33c:	2a00      	cmp	r2, #0
 802a33e:	f280 8182 	bge.w	802a646 <_svfprintf_r+0x856>
 802a342:	1c7b      	adds	r3, r7, #1
 802a344:	3701      	adds	r7, #1
 802a346:	bfb8      	it	lt
 802a348:	2300      	movlt	r3, #0
 802a34a:	441e      	add	r6, r3
 802a34c:	e038      	b.n	802a3c0 <_svfprintf_r+0x5d0>
 802a34e:	f04f 0a00 	mov.w	sl, #0
 802a352:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802a356:	e77e      	b.n	802a256 <_svfprintf_r+0x466>
 802a358:	4682      	mov	sl, r0
 802a35a:	e77c      	b.n	802a256 <_svfprintf_r+0x466>
 802a35c:	f04f 0806 	mov.w	r8, #6
 802a360:	e779      	b.n	802a256 <_svfprintf_r+0x466>
 802a362:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802a366:	2300      	movs	r3, #0
 802a368:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802a36c:	e780      	b.n	802a270 <_svfprintf_r+0x480>
 802a36e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802a370:	e7a7      	b.n	802a2c2 <_svfprintf_r+0x4d2>
 802a372:	bf00      	nop
 802a374:	7fefffff 	.word	0x7fefffff
 802a378:	08034038 	.word	0x08034038
 802a37c:	0803403c 	.word	0x0803403c
 802a380:	08034040 	.word	0x08034040
 802a384:	08034044 	.word	0x08034044
 802a388:	08034048 	.word	0x08034048
 802a38c:	08034059 	.word	0x08034059
 802a390:	40300000 	.word	0x40300000
 802a394:	3fe00000 	.word	0x3fe00000
 802a398:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a39a:	9624      	str	r6, [sp, #144]	@ 0x90
 802a39c:	7bd9      	ldrb	r1, [r3, #15]
 802a39e:	2030      	movs	r0, #48	@ 0x30
 802a3a0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802a3a2:	1e53      	subs	r3, r2, #1
 802a3a4:	9324      	str	r3, [sp, #144]	@ 0x90
 802a3a6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802a3aa:	428b      	cmp	r3, r1
 802a3ac:	f000 8148 	beq.w	802a640 <_svfprintf_r+0x850>
 802a3b0:	2b39      	cmp	r3, #57	@ 0x39
 802a3b2:	bf0b      	itete	eq
 802a3b4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802a3b6:	3301      	addne	r3, #1
 802a3b8:	7a9b      	ldrbeq	r3, [r3, #10]
 802a3ba:	b2db      	uxtbne	r3, r3
 802a3bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 802a3c0:	eba6 0309 	sub.w	r3, r6, r9
 802a3c4:	9304      	str	r3, [sp, #16]
 802a3c6:	9b08      	ldr	r3, [sp, #32]
 802a3c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a3ca:	2b47      	cmp	r3, #71	@ 0x47
 802a3cc:	f040 8187 	bne.w	802a6de <_svfprintf_r+0x8ee>
 802a3d0:	1cf1      	adds	r1, r6, #3
 802a3d2:	db02      	blt.n	802a3da <_svfprintf_r+0x5ea>
 802a3d4:	4546      	cmp	r6, r8
 802a3d6:	f340 81a5 	ble.w	802a724 <_svfprintf_r+0x934>
 802a3da:	9b06      	ldr	r3, [sp, #24]
 802a3dc:	3b02      	subs	r3, #2
 802a3de:	9306      	str	r3, [sp, #24]
 802a3e0:	9906      	ldr	r1, [sp, #24]
 802a3e2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802a3e6:	f021 0120 	bic.w	r1, r1, #32
 802a3ea:	2941      	cmp	r1, #65	@ 0x41
 802a3ec:	bf08      	it	eq
 802a3ee:	320f      	addeq	r2, #15
 802a3f0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802a3f4:	bf06      	itte	eq
 802a3f6:	b2d2      	uxtbeq	r2, r2
 802a3f8:	2101      	moveq	r1, #1
 802a3fa:	2100      	movne	r1, #0
 802a3fc:	2b00      	cmp	r3, #0
 802a3fe:	9320      	str	r3, [sp, #128]	@ 0x80
 802a400:	bfb8      	it	lt
 802a402:	f1c6 0301 	rsblt	r3, r6, #1
 802a406:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802a40a:	bfb4      	ite	lt
 802a40c:	222d      	movlt	r2, #45	@ 0x2d
 802a40e:	222b      	movge	r2, #43	@ 0x2b
 802a410:	2b09      	cmp	r3, #9
 802a412:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802a416:	f340 8178 	ble.w	802a70a <_svfprintf_r+0x91a>
 802a41a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a41e:	270a      	movs	r7, #10
 802a420:	4602      	mov	r2, r0
 802a422:	fbb3 f6f7 	udiv	r6, r3, r7
 802a426:	fb07 3116 	mls	r1, r7, r6, r3
 802a42a:	3130      	adds	r1, #48	@ 0x30
 802a42c:	f802 1c01 	strb.w	r1, [r2, #-1]
 802a430:	4619      	mov	r1, r3
 802a432:	2963      	cmp	r1, #99	@ 0x63
 802a434:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802a438:	4633      	mov	r3, r6
 802a43a:	dcf1      	bgt.n	802a420 <_svfprintf_r+0x630>
 802a43c:	3330      	adds	r3, #48	@ 0x30
 802a43e:	1e91      	subs	r1, r2, #2
 802a440:	f800 3c01 	strb.w	r3, [r0, #-1]
 802a444:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802a448:	460b      	mov	r3, r1
 802a44a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a44e:	4283      	cmp	r3, r0
 802a450:	f0c0 8156 	bcc.w	802a700 <_svfprintf_r+0x910>
 802a454:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802a458:	1a9b      	subs	r3, r3, r2
 802a45a:	4281      	cmp	r1, r0
 802a45c:	bf88      	it	hi
 802a45e:	2300      	movhi	r3, #0
 802a460:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a464:	441a      	add	r2, r3
 802a466:	ab22      	add	r3, sp, #136	@ 0x88
 802a468:	1ad3      	subs	r3, r2, r3
 802a46a:	9a04      	ldr	r2, [sp, #16]
 802a46c:	9318      	str	r3, [sp, #96]	@ 0x60
 802a46e:	2a01      	cmp	r2, #1
 802a470:	eb03 0802 	add.w	r8, r3, r2
 802a474:	dc01      	bgt.n	802a47a <_svfprintf_r+0x68a>
 802a476:	07ea      	lsls	r2, r5, #31
 802a478:	d501      	bpl.n	802a47e <_svfprintf_r+0x68e>
 802a47a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a47c:	4498      	add	r8, r3
 802a47e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a482:	2700      	movs	r7, #0
 802a484:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a488:	9311      	str	r3, [sp, #68]	@ 0x44
 802a48a:	9708      	str	r7, [sp, #32]
 802a48c:	463e      	mov	r6, r7
 802a48e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a490:	2b00      	cmp	r3, #0
 802a492:	f040 818f 	bne.w	802a7b4 <_svfprintf_r+0x9c4>
 802a496:	2300      	movs	r3, #0
 802a498:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a49a:	9310      	str	r3, [sp, #64]	@ 0x40
 802a49c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a49e:	4543      	cmp	r3, r8
 802a4a0:	bfb8      	it	lt
 802a4a2:	4643      	movlt	r3, r8
 802a4a4:	9311      	str	r3, [sp, #68]	@ 0x44
 802a4a6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a4aa:	b113      	cbz	r3, 802a4b2 <_svfprintf_r+0x6c2>
 802a4ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802a4ae:	3301      	adds	r3, #1
 802a4b0:	9311      	str	r3, [sp, #68]	@ 0x44
 802a4b2:	f015 0302 	ands.w	r3, r5, #2
 802a4b6:	931c      	str	r3, [sp, #112]	@ 0x70
 802a4b8:	bf1e      	ittt	ne
 802a4ba:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802a4bc:	3302      	addne	r3, #2
 802a4be:	9311      	strne	r3, [sp, #68]	@ 0x44
 802a4c0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802a4c4:	931d      	str	r3, [sp, #116]	@ 0x74
 802a4c6:	d122      	bne.n	802a50e <_svfprintf_r+0x71e>
 802a4c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a4ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a4cc:	1a9b      	subs	r3, r3, r2
 802a4ce:	2b00      	cmp	r3, #0
 802a4d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a4d2:	dd1c      	ble.n	802a50e <_svfprintf_r+0x71e>
 802a4d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a4d6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a4da:	2810      	cmp	r0, #16
 802a4dc:	489e      	ldr	r0, [pc, #632]	@ (802a758 <_svfprintf_r+0x968>)
 802a4de:	6020      	str	r0, [r4, #0]
 802a4e0:	f102 0201 	add.w	r2, r2, #1
 802a4e4:	f104 0108 	add.w	r1, r4, #8
 802a4e8:	f300 8298 	bgt.w	802aa1c <_svfprintf_r+0xc2c>
 802a4ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a4ee:	6060      	str	r0, [r4, #4]
 802a4f0:	4403      	add	r3, r0
 802a4f2:	2a07      	cmp	r2, #7
 802a4f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a4f8:	f340 82a5 	ble.w	802aa46 <_svfprintf_r+0xc56>
 802a4fc:	9803      	ldr	r0, [sp, #12]
 802a4fe:	aa26      	add	r2, sp, #152	@ 0x98
 802a500:	4659      	mov	r1, fp
 802a502:	f7fd fffb 	bl	80284fc <__ssprint_r>
 802a506:	2800      	cmp	r0, #0
 802a508:	f040 85ed 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802a50c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a50e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802a512:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a514:	b16a      	cbz	r2, 802a532 <_svfprintf_r+0x742>
 802a516:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802a51a:	6022      	str	r2, [r4, #0]
 802a51c:	2201      	movs	r2, #1
 802a51e:	4413      	add	r3, r2
 802a520:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a522:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a524:	6062      	str	r2, [r4, #4]
 802a526:	4413      	add	r3, r2
 802a528:	2b07      	cmp	r3, #7
 802a52a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a52c:	f300 828d 	bgt.w	802aa4a <_svfprintf_r+0xc5a>
 802a530:	3408      	adds	r4, #8
 802a532:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802a534:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a536:	b162      	cbz	r2, 802a552 <_svfprintf_r+0x762>
 802a538:	aa1f      	add	r2, sp, #124	@ 0x7c
 802a53a:	6022      	str	r2, [r4, #0]
 802a53c:	2202      	movs	r2, #2
 802a53e:	4413      	add	r3, r2
 802a540:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a542:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a544:	6062      	str	r2, [r4, #4]
 802a546:	3301      	adds	r3, #1
 802a548:	2b07      	cmp	r3, #7
 802a54a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a54c:	f300 8287 	bgt.w	802aa5e <_svfprintf_r+0xc6e>
 802a550:	3408      	adds	r4, #8
 802a552:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802a554:	2b80      	cmp	r3, #128	@ 0x80
 802a556:	d122      	bne.n	802a59e <_svfprintf_r+0x7ae>
 802a558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a55a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a55c:	1a9b      	subs	r3, r3, r2
 802a55e:	2b00      	cmp	r3, #0
 802a560:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a562:	dd1c      	ble.n	802a59e <_svfprintf_r+0x7ae>
 802a564:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a566:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a56a:	2810      	cmp	r0, #16
 802a56c:	487b      	ldr	r0, [pc, #492]	@ (802a75c <_svfprintf_r+0x96c>)
 802a56e:	6020      	str	r0, [r4, #0]
 802a570:	f102 0201 	add.w	r2, r2, #1
 802a574:	f104 0108 	add.w	r1, r4, #8
 802a578:	f300 827b 	bgt.w	802aa72 <_svfprintf_r+0xc82>
 802a57c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a57e:	6060      	str	r0, [r4, #4]
 802a580:	4403      	add	r3, r0
 802a582:	2a07      	cmp	r2, #7
 802a584:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a588:	f340 8288 	ble.w	802aa9c <_svfprintf_r+0xcac>
 802a58c:	9803      	ldr	r0, [sp, #12]
 802a58e:	aa26      	add	r2, sp, #152	@ 0x98
 802a590:	4659      	mov	r1, fp
 802a592:	f7fd ffb3 	bl	80284fc <__ssprint_r>
 802a596:	2800      	cmp	r0, #0
 802a598:	f040 85a5 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802a59c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a59e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a5a0:	eba3 0308 	sub.w	r3, r3, r8
 802a5a4:	2b00      	cmp	r3, #0
 802a5a6:	9310      	str	r3, [sp, #64]	@ 0x40
 802a5a8:	dd1c      	ble.n	802a5e4 <_svfprintf_r+0x7f4>
 802a5aa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a5ac:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a5b0:	2810      	cmp	r0, #16
 802a5b2:	486a      	ldr	r0, [pc, #424]	@ (802a75c <_svfprintf_r+0x96c>)
 802a5b4:	6020      	str	r0, [r4, #0]
 802a5b6:	f102 0201 	add.w	r2, r2, #1
 802a5ba:	f104 0108 	add.w	r1, r4, #8
 802a5be:	f300 826f 	bgt.w	802aaa0 <_svfprintf_r+0xcb0>
 802a5c2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a5c4:	6060      	str	r0, [r4, #4]
 802a5c6:	4403      	add	r3, r0
 802a5c8:	2a07      	cmp	r2, #7
 802a5ca:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a5ce:	f340 827c 	ble.w	802aaca <_svfprintf_r+0xcda>
 802a5d2:	9803      	ldr	r0, [sp, #12]
 802a5d4:	aa26      	add	r2, sp, #152	@ 0x98
 802a5d6:	4659      	mov	r1, fp
 802a5d8:	f7fd ff90 	bl	80284fc <__ssprint_r>
 802a5dc:	2800      	cmp	r0, #0
 802a5de:	f040 8582 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802a5e2:	ac29      	add	r4, sp, #164	@ 0xa4
 802a5e4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a5e6:	9310      	str	r3, [sp, #64]	@ 0x40
 802a5e8:	05ea      	lsls	r2, r5, #23
 802a5ea:	f100 8275 	bmi.w	802aad8 <_svfprintf_r+0xce8>
 802a5ee:	4443      	add	r3, r8
 802a5f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a5f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a5f4:	3301      	adds	r3, #1
 802a5f6:	2b07      	cmp	r3, #7
 802a5f8:	e9c4 9800 	strd	r9, r8, [r4]
 802a5fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a5fe:	f300 82b1 	bgt.w	802ab64 <_svfprintf_r+0xd74>
 802a602:	3408      	adds	r4, #8
 802a604:	076a      	lsls	r2, r5, #29
 802a606:	f100 8550 	bmi.w	802b0aa <_svfprintf_r+0x12ba>
 802a60a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802a60e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802a610:	428a      	cmp	r2, r1
 802a612:	bfac      	ite	ge
 802a614:	189b      	addge	r3, r3, r2
 802a616:	185b      	addlt	r3, r3, r1
 802a618:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a61a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a61c:	b13b      	cbz	r3, 802a62e <_svfprintf_r+0x83e>
 802a61e:	9803      	ldr	r0, [sp, #12]
 802a620:	aa26      	add	r2, sp, #152	@ 0x98
 802a622:	4659      	mov	r1, fp
 802a624:	f7fd ff6a 	bl	80284fc <__ssprint_r>
 802a628:	2800      	cmp	r0, #0
 802a62a:	f040 855c 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802a62e:	2300      	movs	r3, #0
 802a630:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a632:	f1ba 0f00 	cmp.w	sl, #0
 802a636:	f040 8572 	bne.w	802b11e <_svfprintf_r+0x132e>
 802a63a:	9e07      	ldr	r6, [sp, #28]
 802a63c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a63e:	e0c6      	b.n	802a7ce <_svfprintf_r+0x9de>
 802a640:	f802 0c01 	strb.w	r0, [r2, #-1]
 802a644:	e6ac      	b.n	802a3a0 <_svfprintf_r+0x5b0>
 802a646:	f803 0b01 	strb.w	r0, [r3], #1
 802a64a:	e676      	b.n	802a33a <_svfprintf_r+0x54a>
 802a64c:	9b08      	ldr	r3, [sp, #32]
 802a64e:	2b46      	cmp	r3, #70	@ 0x46
 802a650:	d005      	beq.n	802a65e <_svfprintf_r+0x86e>
 802a652:	2b45      	cmp	r3, #69	@ 0x45
 802a654:	d11a      	bne.n	802a68c <_svfprintf_r+0x89c>
 802a656:	f108 0601 	add.w	r6, r8, #1
 802a65a:	2102      	movs	r1, #2
 802a65c:	e001      	b.n	802a662 <_svfprintf_r+0x872>
 802a65e:	4646      	mov	r6, r8
 802a660:	2103      	movs	r1, #3
 802a662:	ab24      	add	r3, sp, #144	@ 0x90
 802a664:	9301      	str	r3, [sp, #4]
 802a666:	ab21      	add	r3, sp, #132	@ 0x84
 802a668:	9300      	str	r3, [sp, #0]
 802a66a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a66e:	ab20      	add	r3, sp, #128	@ 0x80
 802a670:	9803      	ldr	r0, [sp, #12]
 802a672:	4632      	mov	r2, r6
 802a674:	f7fc ffc8 	bl	8027608 <_dtoa_r>
 802a678:	9b08      	ldr	r3, [sp, #32]
 802a67a:	2b47      	cmp	r3, #71	@ 0x47
 802a67c:	4681      	mov	r9, r0
 802a67e:	d119      	bne.n	802a6b4 <_svfprintf_r+0x8c4>
 802a680:	07e8      	lsls	r0, r5, #31
 802a682:	d405      	bmi.n	802a690 <_svfprintf_r+0x8a0>
 802a684:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a686:	eba3 0309 	sub.w	r3, r3, r9
 802a68a:	e69b      	b.n	802a3c4 <_svfprintf_r+0x5d4>
 802a68c:	4646      	mov	r6, r8
 802a68e:	e7e4      	b.n	802a65a <_svfprintf_r+0x86a>
 802a690:	eb09 0706 	add.w	r7, r9, r6
 802a694:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a698:	2200      	movs	r2, #0
 802a69a:	2300      	movs	r3, #0
 802a69c:	f7d6 fa2c 	bl	8000af8 <__aeabi_dcmpeq>
 802a6a0:	b100      	cbz	r0, 802a6a4 <_svfprintf_r+0x8b4>
 802a6a2:	9724      	str	r7, [sp, #144]	@ 0x90
 802a6a4:	2230      	movs	r2, #48	@ 0x30
 802a6a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a6a8:	429f      	cmp	r7, r3
 802a6aa:	d9eb      	bls.n	802a684 <_svfprintf_r+0x894>
 802a6ac:	1c59      	adds	r1, r3, #1
 802a6ae:	9124      	str	r1, [sp, #144]	@ 0x90
 802a6b0:	701a      	strb	r2, [r3, #0]
 802a6b2:	e7f8      	b.n	802a6a6 <_svfprintf_r+0x8b6>
 802a6b4:	9b08      	ldr	r3, [sp, #32]
 802a6b6:	2b46      	cmp	r3, #70	@ 0x46
 802a6b8:	eb00 0706 	add.w	r7, r0, r6
 802a6bc:	d1ea      	bne.n	802a694 <_svfprintf_r+0x8a4>
 802a6be:	7803      	ldrb	r3, [r0, #0]
 802a6c0:	2b30      	cmp	r3, #48	@ 0x30
 802a6c2:	d109      	bne.n	802a6d8 <_svfprintf_r+0x8e8>
 802a6c4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a6c8:	2200      	movs	r2, #0
 802a6ca:	2300      	movs	r3, #0
 802a6cc:	f7d6 fa14 	bl	8000af8 <__aeabi_dcmpeq>
 802a6d0:	b910      	cbnz	r0, 802a6d8 <_svfprintf_r+0x8e8>
 802a6d2:	f1c6 0601 	rsb	r6, r6, #1
 802a6d6:	9620      	str	r6, [sp, #128]	@ 0x80
 802a6d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a6da:	441f      	add	r7, r3
 802a6dc:	e7da      	b.n	802a694 <_svfprintf_r+0x8a4>
 802a6de:	9b08      	ldr	r3, [sp, #32]
 802a6e0:	2b46      	cmp	r3, #70	@ 0x46
 802a6e2:	f47f ae7d 	bne.w	802a3e0 <_svfprintf_r+0x5f0>
 802a6e6:	f005 0301 	and.w	r3, r5, #1
 802a6ea:	2e00      	cmp	r6, #0
 802a6ec:	ea43 0308 	orr.w	r3, r3, r8
 802a6f0:	dd25      	ble.n	802a73e <_svfprintf_r+0x94e>
 802a6f2:	b37b      	cbz	r3, 802a754 <_svfprintf_r+0x964>
 802a6f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a6f6:	18f3      	adds	r3, r6, r3
 802a6f8:	4498      	add	r8, r3
 802a6fa:	2366      	movs	r3, #102	@ 0x66
 802a6fc:	9306      	str	r3, [sp, #24]
 802a6fe:	e033      	b.n	802a768 <_svfprintf_r+0x978>
 802a700:	f813 7b01 	ldrb.w	r7, [r3], #1
 802a704:	f806 7f01 	strb.w	r7, [r6, #1]!
 802a708:	e6a1      	b.n	802a44e <_svfprintf_r+0x65e>
 802a70a:	b941      	cbnz	r1, 802a71e <_svfprintf_r+0x92e>
 802a70c:	2230      	movs	r2, #48	@ 0x30
 802a70e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802a712:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802a716:	3330      	adds	r3, #48	@ 0x30
 802a718:	f802 3b01 	strb.w	r3, [r2], #1
 802a71c:	e6a3      	b.n	802a466 <_svfprintf_r+0x676>
 802a71e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a722:	e7f8      	b.n	802a716 <_svfprintf_r+0x926>
 802a724:	9b04      	ldr	r3, [sp, #16]
 802a726:	429e      	cmp	r6, r3
 802a728:	da0d      	bge.n	802a746 <_svfprintf_r+0x956>
 802a72a:	9b04      	ldr	r3, [sp, #16]
 802a72c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a72e:	2e00      	cmp	r6, #0
 802a730:	eb03 0802 	add.w	r8, r3, r2
 802a734:	dc0c      	bgt.n	802a750 <_svfprintf_r+0x960>
 802a736:	f1c6 0301 	rsb	r3, r6, #1
 802a73a:	4498      	add	r8, r3
 802a73c:	e008      	b.n	802a750 <_svfprintf_r+0x960>
 802a73e:	b17b      	cbz	r3, 802a760 <_svfprintf_r+0x970>
 802a740:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a742:	3301      	adds	r3, #1
 802a744:	e7d8      	b.n	802a6f8 <_svfprintf_r+0x908>
 802a746:	07eb      	lsls	r3, r5, #31
 802a748:	d521      	bpl.n	802a78e <_svfprintf_r+0x99e>
 802a74a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a74c:	eb06 0803 	add.w	r8, r6, r3
 802a750:	2367      	movs	r3, #103	@ 0x67
 802a752:	e7d3      	b.n	802a6fc <_svfprintf_r+0x90c>
 802a754:	46b0      	mov	r8, r6
 802a756:	e7d0      	b.n	802a6fa <_svfprintf_r+0x90a>
 802a758:	080345be 	.word	0x080345be
 802a75c:	080345ae 	.word	0x080345ae
 802a760:	2366      	movs	r3, #102	@ 0x66
 802a762:	9306      	str	r3, [sp, #24]
 802a764:	f04f 0801 	mov.w	r8, #1
 802a768:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802a76c:	9308      	str	r3, [sp, #32]
 802a76e:	d01f      	beq.n	802a7b0 <_svfprintf_r+0x9c0>
 802a770:	2700      	movs	r7, #0
 802a772:	2e00      	cmp	r6, #0
 802a774:	9708      	str	r7, [sp, #32]
 802a776:	f77f ae8a 	ble.w	802a48e <_svfprintf_r+0x69e>
 802a77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a77c:	781b      	ldrb	r3, [r3, #0]
 802a77e:	2bff      	cmp	r3, #255	@ 0xff
 802a780:	d107      	bne.n	802a792 <_svfprintf_r+0x9a2>
 802a782:	9b08      	ldr	r3, [sp, #32]
 802a784:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a786:	443b      	add	r3, r7
 802a788:	fb02 8803 	mla	r8, r2, r3, r8
 802a78c:	e67f      	b.n	802a48e <_svfprintf_r+0x69e>
 802a78e:	46b0      	mov	r8, r6
 802a790:	e7de      	b.n	802a750 <_svfprintf_r+0x960>
 802a792:	42b3      	cmp	r3, r6
 802a794:	daf5      	bge.n	802a782 <_svfprintf_r+0x992>
 802a796:	1af6      	subs	r6, r6, r3
 802a798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a79a:	785b      	ldrb	r3, [r3, #1]
 802a79c:	b133      	cbz	r3, 802a7ac <_svfprintf_r+0x9bc>
 802a79e:	9b08      	ldr	r3, [sp, #32]
 802a7a0:	3301      	adds	r3, #1
 802a7a2:	9308      	str	r3, [sp, #32]
 802a7a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a7a6:	3301      	adds	r3, #1
 802a7a8:	9309      	str	r3, [sp, #36]	@ 0x24
 802a7aa:	e7e6      	b.n	802a77a <_svfprintf_r+0x98a>
 802a7ac:	3701      	adds	r7, #1
 802a7ae:	e7e4      	b.n	802a77a <_svfprintf_r+0x98a>
 802a7b0:	9f08      	ldr	r7, [sp, #32]
 802a7b2:	e66c      	b.n	802a48e <_svfprintf_r+0x69e>
 802a7b4:	232d      	movs	r3, #45	@ 0x2d
 802a7b6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a7ba:	e66c      	b.n	802a496 <_svfprintf_r+0x6a6>
 802a7bc:	06af      	lsls	r7, r5, #26
 802a7be:	d50a      	bpl.n	802a7d6 <_svfprintf_r+0x9e6>
 802a7c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a7c2:	6833      	ldr	r3, [r6, #0]
 802a7c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a7c6:	17d2      	asrs	r2, r2, #31
 802a7c8:	e9c3 1200 	strd	r1, r2, [r3]
 802a7cc:	3604      	adds	r6, #4
 802a7ce:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 802a7d2:	f7ff bb46 	b.w	8029e62 <_svfprintf_r+0x72>
 802a7d6:	06e8      	lsls	r0, r5, #27
 802a7d8:	d503      	bpl.n	802a7e2 <_svfprintf_r+0x9f2>
 802a7da:	6833      	ldr	r3, [r6, #0]
 802a7dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a7de:	601a      	str	r2, [r3, #0]
 802a7e0:	e7f4      	b.n	802a7cc <_svfprintf_r+0x9dc>
 802a7e2:	0669      	lsls	r1, r5, #25
 802a7e4:	d503      	bpl.n	802a7ee <_svfprintf_r+0x9fe>
 802a7e6:	6833      	ldr	r3, [r6, #0]
 802a7e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a7ea:	801a      	strh	r2, [r3, #0]
 802a7ec:	e7ee      	b.n	802a7cc <_svfprintf_r+0x9dc>
 802a7ee:	05aa      	lsls	r2, r5, #22
 802a7f0:	d5f3      	bpl.n	802a7da <_svfprintf_r+0x9ea>
 802a7f2:	6833      	ldr	r3, [r6, #0]
 802a7f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a7f6:	701a      	strb	r2, [r3, #0]
 802a7f8:	e7e8      	b.n	802a7cc <_svfprintf_r+0x9dc>
 802a7fa:	f045 0510 	orr.w	r5, r5, #16
 802a7fe:	f015 0320 	ands.w	r3, r5, #32
 802a802:	d020      	beq.n	802a846 <_svfprintf_r+0xa56>
 802a804:	3607      	adds	r6, #7
 802a806:	f026 0307 	bic.w	r3, r6, #7
 802a80a:	461a      	mov	r2, r3
 802a80c:	685f      	ldr	r7, [r3, #4]
 802a80e:	f852 6b08 	ldr.w	r6, [r2], #8
 802a812:	9207      	str	r2, [sp, #28]
 802a814:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a818:	2300      	movs	r3, #0
 802a81a:	2200      	movs	r2, #0
 802a81c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802a820:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802a824:	f000 848c 	beq.w	802b140 <_svfprintf_r+0x1350>
 802a828:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802a82c:	9208      	str	r2, [sp, #32]
 802a82e:	ea56 0207 	orrs.w	r2, r6, r7
 802a832:	f040 848a 	bne.w	802b14a <_svfprintf_r+0x135a>
 802a836:	f1b8 0f00 	cmp.w	r8, #0
 802a83a:	f000 80db 	beq.w	802a9f4 <_svfprintf_r+0xc04>
 802a83e:	2b01      	cmp	r3, #1
 802a840:	f040 8486 	bne.w	802b150 <_svfprintf_r+0x1360>
 802a844:	e083      	b.n	802a94e <_svfprintf_r+0xb5e>
 802a846:	4632      	mov	r2, r6
 802a848:	f015 0710 	ands.w	r7, r5, #16
 802a84c:	f852 6b04 	ldr.w	r6, [r2], #4
 802a850:	9207      	str	r2, [sp, #28]
 802a852:	d001      	beq.n	802a858 <_svfprintf_r+0xa68>
 802a854:	461f      	mov	r7, r3
 802a856:	e7dd      	b.n	802a814 <_svfprintf_r+0xa24>
 802a858:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a85c:	d001      	beq.n	802a862 <_svfprintf_r+0xa72>
 802a85e:	b2b6      	uxth	r6, r6
 802a860:	e7d8      	b.n	802a814 <_svfprintf_r+0xa24>
 802a862:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a866:	d0d5      	beq.n	802a814 <_svfprintf_r+0xa24>
 802a868:	b2f6      	uxtb	r6, r6
 802a86a:	e7f3      	b.n	802a854 <_svfprintf_r+0xa64>
 802a86c:	4633      	mov	r3, r6
 802a86e:	2278      	movs	r2, #120	@ 0x78
 802a870:	f853 6b04 	ldr.w	r6, [r3], #4
 802a874:	9307      	str	r3, [sp, #28]
 802a876:	f647 0330 	movw	r3, #30768	@ 0x7830
 802a87a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802a87e:	4b94      	ldr	r3, [pc, #592]	@ (802aad0 <_svfprintf_r+0xce0>)
 802a880:	9319      	str	r3, [sp, #100]	@ 0x64
 802a882:	2700      	movs	r7, #0
 802a884:	f045 0502 	orr.w	r5, r5, #2
 802a888:	2302      	movs	r3, #2
 802a88a:	9206      	str	r2, [sp, #24]
 802a88c:	e7c5      	b.n	802a81a <_svfprintf_r+0xa2a>
 802a88e:	4633      	mov	r3, r6
 802a890:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802a894:	f853 9b04 	ldr.w	r9, [r3], #4
 802a898:	9307      	str	r3, [sp, #28]
 802a89a:	f04f 0600 	mov.w	r6, #0
 802a89e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802a8a2:	d00f      	beq.n	802a8c4 <_svfprintf_r+0xad4>
 802a8a4:	4642      	mov	r2, r8
 802a8a6:	4631      	mov	r1, r6
 802a8a8:	4648      	mov	r0, r9
 802a8aa:	f7d5 fca9 	bl	8000200 <memchr>
 802a8ae:	4682      	mov	sl, r0
 802a8b0:	2800      	cmp	r0, #0
 802a8b2:	f43f ac81 	beq.w	802a1b8 <_svfprintf_r+0x3c8>
 802a8b6:	eba0 0809 	sub.w	r8, r0, r9
 802a8ba:	46b2      	mov	sl, r6
 802a8bc:	9610      	str	r6, [sp, #64]	@ 0x40
 802a8be:	4637      	mov	r7, r6
 802a8c0:	9608      	str	r6, [sp, #32]
 802a8c2:	e5eb      	b.n	802a49c <_svfprintf_r+0x6ac>
 802a8c4:	4648      	mov	r0, r9
 802a8c6:	f7d5 fceb 	bl	80002a0 <strlen>
 802a8ca:	46b2      	mov	sl, r6
 802a8cc:	4680      	mov	r8, r0
 802a8ce:	e473      	b.n	802a1b8 <_svfprintf_r+0x3c8>
 802a8d0:	f045 0510 	orr.w	r5, r5, #16
 802a8d4:	f015 0320 	ands.w	r3, r5, #32
 802a8d8:	d009      	beq.n	802a8ee <_svfprintf_r+0xafe>
 802a8da:	3607      	adds	r6, #7
 802a8dc:	f026 0307 	bic.w	r3, r6, #7
 802a8e0:	461a      	mov	r2, r3
 802a8e2:	685f      	ldr	r7, [r3, #4]
 802a8e4:	f852 6b08 	ldr.w	r6, [r2], #8
 802a8e8:	9207      	str	r2, [sp, #28]
 802a8ea:	2301      	movs	r3, #1
 802a8ec:	e795      	b.n	802a81a <_svfprintf_r+0xa2a>
 802a8ee:	4632      	mov	r2, r6
 802a8f0:	f015 0710 	ands.w	r7, r5, #16
 802a8f4:	f852 6b04 	ldr.w	r6, [r2], #4
 802a8f8:	9207      	str	r2, [sp, #28]
 802a8fa:	d001      	beq.n	802a900 <_svfprintf_r+0xb10>
 802a8fc:	461f      	mov	r7, r3
 802a8fe:	e7f4      	b.n	802a8ea <_svfprintf_r+0xafa>
 802a900:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a904:	d001      	beq.n	802a90a <_svfprintf_r+0xb1a>
 802a906:	b2b6      	uxth	r6, r6
 802a908:	e7ef      	b.n	802a8ea <_svfprintf_r+0xafa>
 802a90a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a90e:	d0ec      	beq.n	802a8ea <_svfprintf_r+0xafa>
 802a910:	b2f6      	uxtb	r6, r6
 802a912:	e7f3      	b.n	802a8fc <_svfprintf_r+0xb0c>
 802a914:	4b6f      	ldr	r3, [pc, #444]	@ (802aad4 <_svfprintf_r+0xce4>)
 802a916:	f7ff bb39 	b.w	8029f8c <_svfprintf_r+0x19c>
 802a91a:	4632      	mov	r2, r6
 802a91c:	f015 0710 	ands.w	r7, r5, #16
 802a920:	f852 6b04 	ldr.w	r6, [r2], #4
 802a924:	9207      	str	r2, [sp, #28]
 802a926:	d002      	beq.n	802a92e <_svfprintf_r+0xb3e>
 802a928:	461f      	mov	r7, r3
 802a92a:	f7ff bb3c 	b.w	8029fa6 <_svfprintf_r+0x1b6>
 802a92e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a932:	d002      	beq.n	802a93a <_svfprintf_r+0xb4a>
 802a934:	b2b6      	uxth	r6, r6
 802a936:	f7ff bb36 	b.w	8029fa6 <_svfprintf_r+0x1b6>
 802a93a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a93e:	f43f ab32 	beq.w	8029fa6 <_svfprintf_r+0x1b6>
 802a942:	b2f6      	uxtb	r6, r6
 802a944:	e7f0      	b.n	802a928 <_svfprintf_r+0xb38>
 802a946:	2e0a      	cmp	r6, #10
 802a948:	f177 0300 	sbcs.w	r3, r7, #0
 802a94c:	d207      	bcs.n	802a95e <_svfprintf_r+0xb6e>
 802a94e:	3630      	adds	r6, #48	@ 0x30
 802a950:	b2f6      	uxtb	r6, r6
 802a952:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802a956:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 802a95a:	f000 bc15 	b.w	802b188 <_svfprintf_r+0x1398>
 802a95e:	2300      	movs	r3, #0
 802a960:	9304      	str	r3, [sp, #16]
 802a962:	9b08      	ldr	r3, [sp, #32]
 802a964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802a968:	ad52      	add	r5, sp, #328	@ 0x148
 802a96a:	9310      	str	r3, [sp, #64]	@ 0x40
 802a96c:	220a      	movs	r2, #10
 802a96e:	2300      	movs	r3, #0
 802a970:	4630      	mov	r0, r6
 802a972:	4639      	mov	r1, r7
 802a974:	f7d6 f9f0 	bl	8000d58 <__aeabi_uldivmod>
 802a978:	9b04      	ldr	r3, [sp, #16]
 802a97a:	9011      	str	r0, [sp, #68]	@ 0x44
 802a97c:	3301      	adds	r3, #1
 802a97e:	9304      	str	r3, [sp, #16]
 802a980:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a982:	3230      	adds	r2, #48	@ 0x30
 802a984:	468a      	mov	sl, r1
 802a986:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 802a98a:	f805 2c01 	strb.w	r2, [r5, #-1]
 802a98e:	b1d3      	cbz	r3, 802a9c6 <_svfprintf_r+0xbd6>
 802a990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a992:	9a04      	ldr	r2, [sp, #16]
 802a994:	781b      	ldrb	r3, [r3, #0]
 802a996:	429a      	cmp	r2, r3
 802a998:	d115      	bne.n	802a9c6 <_svfprintf_r+0xbd6>
 802a99a:	2aff      	cmp	r2, #255	@ 0xff
 802a99c:	d013      	beq.n	802a9c6 <_svfprintf_r+0xbd6>
 802a99e:	2e0a      	cmp	r6, #10
 802a9a0:	f177 0300 	sbcs.w	r3, r7, #0
 802a9a4:	d30f      	bcc.n	802a9c6 <_svfprintf_r+0xbd6>
 802a9a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a9a8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802a9aa:	eba9 0903 	sub.w	r9, r9, r3
 802a9ae:	461a      	mov	r2, r3
 802a9b0:	4648      	mov	r0, r9
 802a9b2:	f7fb fb18 	bl	8025fe6 <strncpy>
 802a9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a9b8:	785b      	ldrb	r3, [r3, #1]
 802a9ba:	b11b      	cbz	r3, 802a9c4 <_svfprintf_r+0xbd4>
 802a9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a9be:	3301      	adds	r3, #1
 802a9c0:	9309      	str	r3, [sp, #36]	@ 0x24
 802a9c2:	2300      	movs	r3, #0
 802a9c4:	9304      	str	r3, [sp, #16]
 802a9c6:	2e0a      	cmp	r6, #10
 802a9c8:	f177 0700 	sbcs.w	r7, r7, #0
 802a9cc:	f0c0 83dc 	bcc.w	802b188 <_svfprintf_r+0x1398>
 802a9d0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802a9d2:	4657      	mov	r7, sl
 802a9d4:	464d      	mov	r5, r9
 802a9d6:	e7c9      	b.n	802a96c <_svfprintf_r+0xb7c>
 802a9d8:	f006 030f 	and.w	r3, r6, #15
 802a9dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802a9de:	0936      	lsrs	r6, r6, #4
 802a9e0:	5cd3      	ldrb	r3, [r2, r3]
 802a9e2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802a9e6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802a9ea:	093f      	lsrs	r7, r7, #4
 802a9ec:	ea56 0307 	orrs.w	r3, r6, r7
 802a9f0:	d1f2      	bne.n	802a9d8 <_svfprintf_r+0xbe8>
 802a9f2:	e3c9      	b.n	802b188 <_svfprintf_r+0x1398>
 802a9f4:	b91b      	cbnz	r3, 802a9fe <_svfprintf_r+0xc0e>
 802a9f6:	07e9      	lsls	r1, r5, #31
 802a9f8:	d501      	bpl.n	802a9fe <_svfprintf_r+0xc0e>
 802a9fa:	2630      	movs	r6, #48	@ 0x30
 802a9fc:	e7a9      	b.n	802a952 <_svfprintf_r+0xb62>
 802a9fe:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 802aa02:	e3c1      	b.n	802b188 <_svfprintf_r+0x1398>
 802aa04:	9b06      	ldr	r3, [sp, #24]
 802aa06:	2b00      	cmp	r3, #0
 802aa08:	f000 838f 	beq.w	802b12a <_svfprintf_r+0x133a>
 802aa0c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802aa10:	2300      	movs	r3, #0
 802aa12:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802aa16:	9607      	str	r6, [sp, #28]
 802aa18:	f7ff bb63 	b.w	802a0e2 <_svfprintf_r+0x2f2>
 802aa1c:	2010      	movs	r0, #16
 802aa1e:	4403      	add	r3, r0
 802aa20:	2a07      	cmp	r2, #7
 802aa22:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802aa26:	6060      	str	r0, [r4, #4]
 802aa28:	dd08      	ble.n	802aa3c <_svfprintf_r+0xc4c>
 802aa2a:	9803      	ldr	r0, [sp, #12]
 802aa2c:	aa26      	add	r2, sp, #152	@ 0x98
 802aa2e:	4659      	mov	r1, fp
 802aa30:	f7fd fd64 	bl	80284fc <__ssprint_r>
 802aa34:	2800      	cmp	r0, #0
 802aa36:	f040 8356 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802aa3a:	a929      	add	r1, sp, #164	@ 0xa4
 802aa3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802aa3e:	3b10      	subs	r3, #16
 802aa40:	9313      	str	r3, [sp, #76]	@ 0x4c
 802aa42:	460c      	mov	r4, r1
 802aa44:	e546      	b.n	802a4d4 <_svfprintf_r+0x6e4>
 802aa46:	460c      	mov	r4, r1
 802aa48:	e561      	b.n	802a50e <_svfprintf_r+0x71e>
 802aa4a:	9803      	ldr	r0, [sp, #12]
 802aa4c:	aa26      	add	r2, sp, #152	@ 0x98
 802aa4e:	4659      	mov	r1, fp
 802aa50:	f7fd fd54 	bl	80284fc <__ssprint_r>
 802aa54:	2800      	cmp	r0, #0
 802aa56:	f040 8346 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802aa5a:	ac29      	add	r4, sp, #164	@ 0xa4
 802aa5c:	e569      	b.n	802a532 <_svfprintf_r+0x742>
 802aa5e:	9803      	ldr	r0, [sp, #12]
 802aa60:	aa26      	add	r2, sp, #152	@ 0x98
 802aa62:	4659      	mov	r1, fp
 802aa64:	f7fd fd4a 	bl	80284fc <__ssprint_r>
 802aa68:	2800      	cmp	r0, #0
 802aa6a:	f040 833c 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802aa6e:	ac29      	add	r4, sp, #164	@ 0xa4
 802aa70:	e56f      	b.n	802a552 <_svfprintf_r+0x762>
 802aa72:	2010      	movs	r0, #16
 802aa74:	4403      	add	r3, r0
 802aa76:	2a07      	cmp	r2, #7
 802aa78:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802aa7c:	6060      	str	r0, [r4, #4]
 802aa7e:	dd08      	ble.n	802aa92 <_svfprintf_r+0xca2>
 802aa80:	9803      	ldr	r0, [sp, #12]
 802aa82:	aa26      	add	r2, sp, #152	@ 0x98
 802aa84:	4659      	mov	r1, fp
 802aa86:	f7fd fd39 	bl	80284fc <__ssprint_r>
 802aa8a:	2800      	cmp	r0, #0
 802aa8c:	f040 832b 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802aa90:	a929      	add	r1, sp, #164	@ 0xa4
 802aa92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802aa94:	3b10      	subs	r3, #16
 802aa96:	9313      	str	r3, [sp, #76]	@ 0x4c
 802aa98:	460c      	mov	r4, r1
 802aa9a:	e563      	b.n	802a564 <_svfprintf_r+0x774>
 802aa9c:	460c      	mov	r4, r1
 802aa9e:	e57e      	b.n	802a59e <_svfprintf_r+0x7ae>
 802aaa0:	2010      	movs	r0, #16
 802aaa2:	4403      	add	r3, r0
 802aaa4:	2a07      	cmp	r2, #7
 802aaa6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802aaaa:	6060      	str	r0, [r4, #4]
 802aaac:	dd08      	ble.n	802aac0 <_svfprintf_r+0xcd0>
 802aaae:	9803      	ldr	r0, [sp, #12]
 802aab0:	aa26      	add	r2, sp, #152	@ 0x98
 802aab2:	4659      	mov	r1, fp
 802aab4:	f7fd fd22 	bl	80284fc <__ssprint_r>
 802aab8:	2800      	cmp	r0, #0
 802aaba:	f040 8314 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802aabe:	a929      	add	r1, sp, #164	@ 0xa4
 802aac0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802aac2:	3b10      	subs	r3, #16
 802aac4:	9310      	str	r3, [sp, #64]	@ 0x40
 802aac6:	460c      	mov	r4, r1
 802aac8:	e56f      	b.n	802a5aa <_svfprintf_r+0x7ba>
 802aaca:	460c      	mov	r4, r1
 802aacc:	e58a      	b.n	802a5e4 <_svfprintf_r+0x7f4>
 802aace:	bf00      	nop
 802aad0:	08034048 	.word	0x08034048
 802aad4:	08034059 	.word	0x08034059
 802aad8:	9b06      	ldr	r3, [sp, #24]
 802aada:	2b65      	cmp	r3, #101	@ 0x65
 802aadc:	f340 8246 	ble.w	802af6c <_svfprintf_r+0x117c>
 802aae0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802aae4:	2200      	movs	r2, #0
 802aae6:	2300      	movs	r3, #0
 802aae8:	f7d6 f806 	bl	8000af8 <__aeabi_dcmpeq>
 802aaec:	2800      	cmp	r0, #0
 802aaee:	d06a      	beq.n	802abc6 <_svfprintf_r+0xdd6>
 802aaf0:	4b73      	ldr	r3, [pc, #460]	@ (802acc0 <_svfprintf_r+0xed0>)
 802aaf2:	6023      	str	r3, [r4, #0]
 802aaf4:	2301      	movs	r3, #1
 802aaf6:	6063      	str	r3, [r4, #4]
 802aaf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802aafa:	3301      	adds	r3, #1
 802aafc:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aafe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ab00:	3301      	adds	r3, #1
 802ab02:	2b07      	cmp	r3, #7
 802ab04:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ab06:	dc37      	bgt.n	802ab78 <_svfprintf_r+0xd88>
 802ab08:	3408      	adds	r4, #8
 802ab0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ab0c:	9a04      	ldr	r2, [sp, #16]
 802ab0e:	4293      	cmp	r3, r2
 802ab10:	db02      	blt.n	802ab18 <_svfprintf_r+0xd28>
 802ab12:	07ef      	lsls	r7, r5, #31
 802ab14:	f57f ad76 	bpl.w	802a604 <_svfprintf_r+0x814>
 802ab18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ab1a:	6023      	str	r3, [r4, #0]
 802ab1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ab1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ab20:	6063      	str	r3, [r4, #4]
 802ab22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ab24:	4413      	add	r3, r2
 802ab26:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ab28:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ab2a:	3301      	adds	r3, #1
 802ab2c:	2b07      	cmp	r3, #7
 802ab2e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ab30:	dc2c      	bgt.n	802ab8c <_svfprintf_r+0xd9c>
 802ab32:	3408      	adds	r4, #8
 802ab34:	9b04      	ldr	r3, [sp, #16]
 802ab36:	1e5e      	subs	r6, r3, #1
 802ab38:	2e00      	cmp	r6, #0
 802ab3a:	f77f ad63 	ble.w	802a604 <_svfprintf_r+0x814>
 802ab3e:	4f61      	ldr	r7, [pc, #388]	@ (802acc4 <_svfprintf_r+0xed4>)
 802ab40:	f04f 0810 	mov.w	r8, #16
 802ab44:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802ab48:	2e10      	cmp	r6, #16
 802ab4a:	f103 0301 	add.w	r3, r3, #1
 802ab4e:	f104 0108 	add.w	r1, r4, #8
 802ab52:	6027      	str	r7, [r4, #0]
 802ab54:	dc24      	bgt.n	802aba0 <_svfprintf_r+0xdb0>
 802ab56:	6066      	str	r6, [r4, #4]
 802ab58:	2b07      	cmp	r3, #7
 802ab5a:	4416      	add	r6, r2
 802ab5c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802ab60:	f340 82a0 	ble.w	802b0a4 <_svfprintf_r+0x12b4>
 802ab64:	9803      	ldr	r0, [sp, #12]
 802ab66:	aa26      	add	r2, sp, #152	@ 0x98
 802ab68:	4659      	mov	r1, fp
 802ab6a:	f7fd fcc7 	bl	80284fc <__ssprint_r>
 802ab6e:	2800      	cmp	r0, #0
 802ab70:	f040 82b9 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802ab74:	ac29      	add	r4, sp, #164	@ 0xa4
 802ab76:	e545      	b.n	802a604 <_svfprintf_r+0x814>
 802ab78:	9803      	ldr	r0, [sp, #12]
 802ab7a:	aa26      	add	r2, sp, #152	@ 0x98
 802ab7c:	4659      	mov	r1, fp
 802ab7e:	f7fd fcbd 	bl	80284fc <__ssprint_r>
 802ab82:	2800      	cmp	r0, #0
 802ab84:	f040 82af 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802ab88:	ac29      	add	r4, sp, #164	@ 0xa4
 802ab8a:	e7be      	b.n	802ab0a <_svfprintf_r+0xd1a>
 802ab8c:	9803      	ldr	r0, [sp, #12]
 802ab8e:	aa26      	add	r2, sp, #152	@ 0x98
 802ab90:	4659      	mov	r1, fp
 802ab92:	f7fd fcb3 	bl	80284fc <__ssprint_r>
 802ab96:	2800      	cmp	r0, #0
 802ab98:	f040 82a5 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802ab9c:	ac29      	add	r4, sp, #164	@ 0xa4
 802ab9e:	e7c9      	b.n	802ab34 <_svfprintf_r+0xd44>
 802aba0:	3210      	adds	r2, #16
 802aba2:	2b07      	cmp	r3, #7
 802aba4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802aba8:	f8c4 8004 	str.w	r8, [r4, #4]
 802abac:	dd08      	ble.n	802abc0 <_svfprintf_r+0xdd0>
 802abae:	9803      	ldr	r0, [sp, #12]
 802abb0:	aa26      	add	r2, sp, #152	@ 0x98
 802abb2:	4659      	mov	r1, fp
 802abb4:	f7fd fca2 	bl	80284fc <__ssprint_r>
 802abb8:	2800      	cmp	r0, #0
 802abba:	f040 8294 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802abbe:	a929      	add	r1, sp, #164	@ 0xa4
 802abc0:	3e10      	subs	r6, #16
 802abc2:	460c      	mov	r4, r1
 802abc4:	e7be      	b.n	802ab44 <_svfprintf_r+0xd54>
 802abc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802abc8:	2b00      	cmp	r3, #0
 802abca:	dc7d      	bgt.n	802acc8 <_svfprintf_r+0xed8>
 802abcc:	4b3c      	ldr	r3, [pc, #240]	@ (802acc0 <_svfprintf_r+0xed0>)
 802abce:	6023      	str	r3, [r4, #0]
 802abd0:	2301      	movs	r3, #1
 802abd2:	6063      	str	r3, [r4, #4]
 802abd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802abd6:	3301      	adds	r3, #1
 802abd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 802abda:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802abdc:	3301      	adds	r3, #1
 802abde:	2b07      	cmp	r3, #7
 802abe0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802abe2:	dc46      	bgt.n	802ac72 <_svfprintf_r+0xe82>
 802abe4:	3408      	adds	r4, #8
 802abe6:	9904      	ldr	r1, [sp, #16]
 802abe8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802abea:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802abec:	430b      	orrs	r3, r1
 802abee:	f005 0101 	and.w	r1, r5, #1
 802abf2:	430b      	orrs	r3, r1
 802abf4:	f43f ad06 	beq.w	802a604 <_svfprintf_r+0x814>
 802abf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802abfa:	6023      	str	r3, [r4, #0]
 802abfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802abfe:	6063      	str	r3, [r4, #4]
 802ac00:	441a      	add	r2, r3
 802ac02:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ac04:	9228      	str	r2, [sp, #160]	@ 0xa0
 802ac06:	3301      	adds	r3, #1
 802ac08:	2b07      	cmp	r3, #7
 802ac0a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ac0c:	dc3b      	bgt.n	802ac86 <_svfprintf_r+0xe96>
 802ac0e:	f104 0308 	add.w	r3, r4, #8
 802ac12:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802ac14:	2e00      	cmp	r6, #0
 802ac16:	da1b      	bge.n	802ac50 <_svfprintf_r+0xe60>
 802ac18:	4f2a      	ldr	r7, [pc, #168]	@ (802acc4 <_svfprintf_r+0xed4>)
 802ac1a:	4276      	negs	r6, r6
 802ac1c:	461a      	mov	r2, r3
 802ac1e:	2410      	movs	r4, #16
 802ac20:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802ac24:	2e10      	cmp	r6, #16
 802ac26:	f101 0101 	add.w	r1, r1, #1
 802ac2a:	f103 0308 	add.w	r3, r3, #8
 802ac2e:	6017      	str	r7, [r2, #0]
 802ac30:	dc33      	bgt.n	802ac9a <_svfprintf_r+0xeaa>
 802ac32:	6056      	str	r6, [r2, #4]
 802ac34:	2907      	cmp	r1, #7
 802ac36:	4406      	add	r6, r0
 802ac38:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802ac3c:	dd08      	ble.n	802ac50 <_svfprintf_r+0xe60>
 802ac3e:	9803      	ldr	r0, [sp, #12]
 802ac40:	aa26      	add	r2, sp, #152	@ 0x98
 802ac42:	4659      	mov	r1, fp
 802ac44:	f7fd fc5a 	bl	80284fc <__ssprint_r>
 802ac48:	2800      	cmp	r0, #0
 802ac4a:	f040 824c 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802ac4e:	ab29      	add	r3, sp, #164	@ 0xa4
 802ac50:	9a04      	ldr	r2, [sp, #16]
 802ac52:	9904      	ldr	r1, [sp, #16]
 802ac54:	605a      	str	r2, [r3, #4]
 802ac56:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802ac58:	f8c3 9000 	str.w	r9, [r3]
 802ac5c:	440a      	add	r2, r1
 802ac5e:	9228      	str	r2, [sp, #160]	@ 0xa0
 802ac60:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802ac62:	3201      	adds	r2, #1
 802ac64:	2a07      	cmp	r2, #7
 802ac66:	9227      	str	r2, [sp, #156]	@ 0x9c
 802ac68:	f73f af7c 	bgt.w	802ab64 <_svfprintf_r+0xd74>
 802ac6c:	f103 0408 	add.w	r4, r3, #8
 802ac70:	e4c8      	b.n	802a604 <_svfprintf_r+0x814>
 802ac72:	9803      	ldr	r0, [sp, #12]
 802ac74:	aa26      	add	r2, sp, #152	@ 0x98
 802ac76:	4659      	mov	r1, fp
 802ac78:	f7fd fc40 	bl	80284fc <__ssprint_r>
 802ac7c:	2800      	cmp	r0, #0
 802ac7e:	f040 8232 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802ac82:	ac29      	add	r4, sp, #164	@ 0xa4
 802ac84:	e7af      	b.n	802abe6 <_svfprintf_r+0xdf6>
 802ac86:	9803      	ldr	r0, [sp, #12]
 802ac88:	aa26      	add	r2, sp, #152	@ 0x98
 802ac8a:	4659      	mov	r1, fp
 802ac8c:	f7fd fc36 	bl	80284fc <__ssprint_r>
 802ac90:	2800      	cmp	r0, #0
 802ac92:	f040 8228 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802ac96:	ab29      	add	r3, sp, #164	@ 0xa4
 802ac98:	e7bb      	b.n	802ac12 <_svfprintf_r+0xe22>
 802ac9a:	3010      	adds	r0, #16
 802ac9c:	2907      	cmp	r1, #7
 802ac9e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802aca2:	6054      	str	r4, [r2, #4]
 802aca4:	dd08      	ble.n	802acb8 <_svfprintf_r+0xec8>
 802aca6:	9803      	ldr	r0, [sp, #12]
 802aca8:	aa26      	add	r2, sp, #152	@ 0x98
 802acaa:	4659      	mov	r1, fp
 802acac:	f7fd fc26 	bl	80284fc <__ssprint_r>
 802acb0:	2800      	cmp	r0, #0
 802acb2:	f040 8218 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802acb6:	ab29      	add	r3, sp, #164	@ 0xa4
 802acb8:	3e10      	subs	r6, #16
 802acba:	461a      	mov	r2, r3
 802acbc:	e7b0      	b.n	802ac20 <_svfprintf_r+0xe30>
 802acbe:	bf00      	nop
 802acc0:	0803406a 	.word	0x0803406a
 802acc4:	080345ae 	.word	0x080345ae
 802acc8:	9b04      	ldr	r3, [sp, #16]
 802acca:	444b      	add	r3, r9
 802accc:	9306      	str	r3, [sp, #24]
 802acce:	9b04      	ldr	r3, [sp, #16]
 802acd0:	42b3      	cmp	r3, r6
 802acd2:	bfa8      	it	ge
 802acd4:	4633      	movge	r3, r6
 802acd6:	2b00      	cmp	r3, #0
 802acd8:	4698      	mov	r8, r3
 802acda:	dd0b      	ble.n	802acf4 <_svfprintf_r+0xf04>
 802acdc:	e9c4 9300 	strd	r9, r3, [r4]
 802ace0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ace2:	4443      	add	r3, r8
 802ace4:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ace6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ace8:	3301      	adds	r3, #1
 802acea:	2b07      	cmp	r3, #7
 802acec:	9327      	str	r3, [sp, #156]	@ 0x9c
 802acee:	f300 8089 	bgt.w	802ae04 <_svfprintf_r+0x1014>
 802acf2:	3408      	adds	r4, #8
 802acf4:	4643      	mov	r3, r8
 802acf6:	2b00      	cmp	r3, #0
 802acf8:	bfac      	ite	ge
 802acfa:	eba6 0808 	subge.w	r8, r6, r8
 802acfe:	46b0      	movlt	r8, r6
 802ad00:	f1b8 0f00 	cmp.w	r8, #0
 802ad04:	dd1b      	ble.n	802ad3e <_svfprintf_r+0xf4e>
 802ad06:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802ad0a:	4897      	ldr	r0, [pc, #604]	@ (802af68 <_svfprintf_r+0x1178>)
 802ad0c:	6020      	str	r0, [r4, #0]
 802ad0e:	f1b8 0f10 	cmp.w	r8, #16
 802ad12:	f102 0201 	add.w	r2, r2, #1
 802ad16:	f104 0108 	add.w	r1, r4, #8
 802ad1a:	dc7d      	bgt.n	802ae18 <_svfprintf_r+0x1028>
 802ad1c:	4443      	add	r3, r8
 802ad1e:	2a07      	cmp	r2, #7
 802ad20:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ad24:	f8c4 8004 	str.w	r8, [r4, #4]
 802ad28:	f340 808a 	ble.w	802ae40 <_svfprintf_r+0x1050>
 802ad2c:	9803      	ldr	r0, [sp, #12]
 802ad2e:	aa26      	add	r2, sp, #152	@ 0x98
 802ad30:	4659      	mov	r1, fp
 802ad32:	f7fd fbe3 	bl	80284fc <__ssprint_r>
 802ad36:	2800      	cmp	r0, #0
 802ad38:	f040 81d5 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802ad3c:	ac29      	add	r4, sp, #164	@ 0xa4
 802ad3e:	eb09 0806 	add.w	r8, r9, r6
 802ad42:	056e      	lsls	r6, r5, #21
 802ad44:	d508      	bpl.n	802ad58 <_svfprintf_r+0xf68>
 802ad46:	9b08      	ldr	r3, [sp, #32]
 802ad48:	2b00      	cmp	r3, #0
 802ad4a:	d17b      	bne.n	802ae44 <_svfprintf_r+0x1054>
 802ad4c:	2f00      	cmp	r7, #0
 802ad4e:	d17b      	bne.n	802ae48 <_svfprintf_r+0x1058>
 802ad50:	9b06      	ldr	r3, [sp, #24]
 802ad52:	4598      	cmp	r8, r3
 802ad54:	bf28      	it	cs
 802ad56:	4698      	movcs	r8, r3
 802ad58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ad5a:	9a04      	ldr	r2, [sp, #16]
 802ad5c:	4293      	cmp	r3, r2
 802ad5e:	db01      	blt.n	802ad64 <_svfprintf_r+0xf74>
 802ad60:	07e8      	lsls	r0, r5, #31
 802ad62:	d50e      	bpl.n	802ad82 <_svfprintf_r+0xf92>
 802ad64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ad66:	6023      	str	r3, [r4, #0]
 802ad68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ad6a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ad6c:	6063      	str	r3, [r4, #4]
 802ad6e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ad70:	4413      	add	r3, r2
 802ad72:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ad74:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ad76:	3301      	adds	r3, #1
 802ad78:	2b07      	cmp	r3, #7
 802ad7a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ad7c:	f300 80df 	bgt.w	802af3e <_svfprintf_r+0x114e>
 802ad80:	3408      	adds	r4, #8
 802ad82:	9b04      	ldr	r3, [sp, #16]
 802ad84:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802ad86:	1bdf      	subs	r7, r3, r7
 802ad88:	9b06      	ldr	r3, [sp, #24]
 802ad8a:	eba3 0308 	sub.w	r3, r3, r8
 802ad8e:	429f      	cmp	r7, r3
 802ad90:	bfa8      	it	ge
 802ad92:	461f      	movge	r7, r3
 802ad94:	2f00      	cmp	r7, #0
 802ad96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ad98:	dd0a      	ble.n	802adb0 <_svfprintf_r+0xfc0>
 802ad9a:	443b      	add	r3, r7
 802ad9c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ad9e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ada0:	3301      	adds	r3, #1
 802ada2:	2b07      	cmp	r3, #7
 802ada4:	e9c4 8700 	strd	r8, r7, [r4]
 802ada8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802adaa:	f300 80d2 	bgt.w	802af52 <_svfprintf_r+0x1162>
 802adae:	3408      	adds	r4, #8
 802adb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802adb2:	9b04      	ldr	r3, [sp, #16]
 802adb4:	2f00      	cmp	r7, #0
 802adb6:	eba3 0606 	sub.w	r6, r3, r6
 802adba:	bfa8      	it	ge
 802adbc:	1bf6      	subge	r6, r6, r7
 802adbe:	2e00      	cmp	r6, #0
 802adc0:	f77f ac20 	ble.w	802a604 <_svfprintf_r+0x814>
 802adc4:	4f68      	ldr	r7, [pc, #416]	@ (802af68 <_svfprintf_r+0x1178>)
 802adc6:	f04f 0810 	mov.w	r8, #16
 802adca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802adce:	2e10      	cmp	r6, #16
 802add0:	f103 0301 	add.w	r3, r3, #1
 802add4:	f104 0108 	add.w	r1, r4, #8
 802add8:	6027      	str	r7, [r4, #0]
 802adda:	f77f aebc 	ble.w	802ab56 <_svfprintf_r+0xd66>
 802adde:	3210      	adds	r2, #16
 802ade0:	2b07      	cmp	r3, #7
 802ade2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802ade6:	f8c4 8004 	str.w	r8, [r4, #4]
 802adea:	dd08      	ble.n	802adfe <_svfprintf_r+0x100e>
 802adec:	9803      	ldr	r0, [sp, #12]
 802adee:	aa26      	add	r2, sp, #152	@ 0x98
 802adf0:	4659      	mov	r1, fp
 802adf2:	f7fd fb83 	bl	80284fc <__ssprint_r>
 802adf6:	2800      	cmp	r0, #0
 802adf8:	f040 8175 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802adfc:	a929      	add	r1, sp, #164	@ 0xa4
 802adfe:	3e10      	subs	r6, #16
 802ae00:	460c      	mov	r4, r1
 802ae02:	e7e2      	b.n	802adca <_svfprintf_r+0xfda>
 802ae04:	9803      	ldr	r0, [sp, #12]
 802ae06:	aa26      	add	r2, sp, #152	@ 0x98
 802ae08:	4659      	mov	r1, fp
 802ae0a:	f7fd fb77 	bl	80284fc <__ssprint_r>
 802ae0e:	2800      	cmp	r0, #0
 802ae10:	f040 8169 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802ae14:	ac29      	add	r4, sp, #164	@ 0xa4
 802ae16:	e76d      	b.n	802acf4 <_svfprintf_r+0xf04>
 802ae18:	2010      	movs	r0, #16
 802ae1a:	4403      	add	r3, r0
 802ae1c:	2a07      	cmp	r2, #7
 802ae1e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ae22:	6060      	str	r0, [r4, #4]
 802ae24:	dd08      	ble.n	802ae38 <_svfprintf_r+0x1048>
 802ae26:	9803      	ldr	r0, [sp, #12]
 802ae28:	aa26      	add	r2, sp, #152	@ 0x98
 802ae2a:	4659      	mov	r1, fp
 802ae2c:	f7fd fb66 	bl	80284fc <__ssprint_r>
 802ae30:	2800      	cmp	r0, #0
 802ae32:	f040 8158 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802ae36:	a929      	add	r1, sp, #164	@ 0xa4
 802ae38:	f1a8 0810 	sub.w	r8, r8, #16
 802ae3c:	460c      	mov	r4, r1
 802ae3e:	e762      	b.n	802ad06 <_svfprintf_r+0xf16>
 802ae40:	460c      	mov	r4, r1
 802ae42:	e77c      	b.n	802ad3e <_svfprintf_r+0xf4e>
 802ae44:	2f00      	cmp	r7, #0
 802ae46:	d04a      	beq.n	802aede <_svfprintf_r+0x10ee>
 802ae48:	3f01      	subs	r7, #1
 802ae4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802ae4c:	6023      	str	r3, [r4, #0]
 802ae4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802ae50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802ae52:	6063      	str	r3, [r4, #4]
 802ae54:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ae56:	4413      	add	r3, r2
 802ae58:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ae5a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ae5c:	3301      	adds	r3, #1
 802ae5e:	2b07      	cmp	r3, #7
 802ae60:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae62:	dc43      	bgt.n	802aeec <_svfprintf_r+0x10fc>
 802ae64:	3408      	adds	r4, #8
 802ae66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ae68:	781a      	ldrb	r2, [r3, #0]
 802ae6a:	9b06      	ldr	r3, [sp, #24]
 802ae6c:	eba3 0308 	sub.w	r3, r3, r8
 802ae70:	429a      	cmp	r2, r3
 802ae72:	bfa8      	it	ge
 802ae74:	461a      	movge	r2, r3
 802ae76:	2a00      	cmp	r2, #0
 802ae78:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ae7a:	4691      	mov	r9, r2
 802ae7c:	dd09      	ble.n	802ae92 <_svfprintf_r+0x10a2>
 802ae7e:	4413      	add	r3, r2
 802ae80:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ae82:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ae84:	3301      	adds	r3, #1
 802ae86:	2b07      	cmp	r3, #7
 802ae88:	e9c4 8200 	strd	r8, r2, [r4]
 802ae8c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae8e:	dc37      	bgt.n	802af00 <_svfprintf_r+0x1110>
 802ae90:	3408      	adds	r4, #8
 802ae92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ae94:	781e      	ldrb	r6, [r3, #0]
 802ae96:	f1b9 0f00 	cmp.w	r9, #0
 802ae9a:	bfa8      	it	ge
 802ae9c:	eba6 0609 	subge.w	r6, r6, r9
 802aea0:	2e00      	cmp	r6, #0
 802aea2:	dd18      	ble.n	802aed6 <_svfprintf_r+0x10e6>
 802aea4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802aea8:	482f      	ldr	r0, [pc, #188]	@ (802af68 <_svfprintf_r+0x1178>)
 802aeaa:	6020      	str	r0, [r4, #0]
 802aeac:	2e10      	cmp	r6, #16
 802aeae:	f103 0301 	add.w	r3, r3, #1
 802aeb2:	f104 0108 	add.w	r1, r4, #8
 802aeb6:	dc2d      	bgt.n	802af14 <_svfprintf_r+0x1124>
 802aeb8:	6066      	str	r6, [r4, #4]
 802aeba:	2b07      	cmp	r3, #7
 802aebc:	4416      	add	r6, r2
 802aebe:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802aec2:	dd3a      	ble.n	802af3a <_svfprintf_r+0x114a>
 802aec4:	9803      	ldr	r0, [sp, #12]
 802aec6:	aa26      	add	r2, sp, #152	@ 0x98
 802aec8:	4659      	mov	r1, fp
 802aeca:	f7fd fb17 	bl	80284fc <__ssprint_r>
 802aece:	2800      	cmp	r0, #0
 802aed0:	f040 8109 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802aed4:	ac29      	add	r4, sp, #164	@ 0xa4
 802aed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aed8:	781b      	ldrb	r3, [r3, #0]
 802aeda:	4498      	add	r8, r3
 802aedc:	e733      	b.n	802ad46 <_svfprintf_r+0xf56>
 802aede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aee0:	3b01      	subs	r3, #1
 802aee2:	9309      	str	r3, [sp, #36]	@ 0x24
 802aee4:	9b08      	ldr	r3, [sp, #32]
 802aee6:	3b01      	subs	r3, #1
 802aee8:	9308      	str	r3, [sp, #32]
 802aeea:	e7ae      	b.n	802ae4a <_svfprintf_r+0x105a>
 802aeec:	9803      	ldr	r0, [sp, #12]
 802aeee:	aa26      	add	r2, sp, #152	@ 0x98
 802aef0:	4659      	mov	r1, fp
 802aef2:	f7fd fb03 	bl	80284fc <__ssprint_r>
 802aef6:	2800      	cmp	r0, #0
 802aef8:	f040 80f5 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802aefc:	ac29      	add	r4, sp, #164	@ 0xa4
 802aefe:	e7b2      	b.n	802ae66 <_svfprintf_r+0x1076>
 802af00:	9803      	ldr	r0, [sp, #12]
 802af02:	aa26      	add	r2, sp, #152	@ 0x98
 802af04:	4659      	mov	r1, fp
 802af06:	f7fd faf9 	bl	80284fc <__ssprint_r>
 802af0a:	2800      	cmp	r0, #0
 802af0c:	f040 80eb 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802af10:	ac29      	add	r4, sp, #164	@ 0xa4
 802af12:	e7be      	b.n	802ae92 <_svfprintf_r+0x10a2>
 802af14:	2010      	movs	r0, #16
 802af16:	4402      	add	r2, r0
 802af18:	2b07      	cmp	r3, #7
 802af1a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802af1e:	6060      	str	r0, [r4, #4]
 802af20:	dd08      	ble.n	802af34 <_svfprintf_r+0x1144>
 802af22:	9803      	ldr	r0, [sp, #12]
 802af24:	aa26      	add	r2, sp, #152	@ 0x98
 802af26:	4659      	mov	r1, fp
 802af28:	f7fd fae8 	bl	80284fc <__ssprint_r>
 802af2c:	2800      	cmp	r0, #0
 802af2e:	f040 80da 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802af32:	a929      	add	r1, sp, #164	@ 0xa4
 802af34:	3e10      	subs	r6, #16
 802af36:	460c      	mov	r4, r1
 802af38:	e7b4      	b.n	802aea4 <_svfprintf_r+0x10b4>
 802af3a:	460c      	mov	r4, r1
 802af3c:	e7cb      	b.n	802aed6 <_svfprintf_r+0x10e6>
 802af3e:	9803      	ldr	r0, [sp, #12]
 802af40:	aa26      	add	r2, sp, #152	@ 0x98
 802af42:	4659      	mov	r1, fp
 802af44:	f7fd fada 	bl	80284fc <__ssprint_r>
 802af48:	2800      	cmp	r0, #0
 802af4a:	f040 80cc 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802af4e:	ac29      	add	r4, sp, #164	@ 0xa4
 802af50:	e717      	b.n	802ad82 <_svfprintf_r+0xf92>
 802af52:	9803      	ldr	r0, [sp, #12]
 802af54:	aa26      	add	r2, sp, #152	@ 0x98
 802af56:	4659      	mov	r1, fp
 802af58:	f7fd fad0 	bl	80284fc <__ssprint_r>
 802af5c:	2800      	cmp	r0, #0
 802af5e:	f040 80c2 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802af62:	ac29      	add	r4, sp, #164	@ 0xa4
 802af64:	e724      	b.n	802adb0 <_svfprintf_r+0xfc0>
 802af66:	bf00      	nop
 802af68:	080345ae 	.word	0x080345ae
 802af6c:	9904      	ldr	r1, [sp, #16]
 802af6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802af70:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802af72:	2901      	cmp	r1, #1
 802af74:	f103 0301 	add.w	r3, r3, #1
 802af78:	f102 0201 	add.w	r2, r2, #1
 802af7c:	f104 0608 	add.w	r6, r4, #8
 802af80:	dc02      	bgt.n	802af88 <_svfprintf_r+0x1198>
 802af82:	07e9      	lsls	r1, r5, #31
 802af84:	f140 8083 	bpl.w	802b08e <_svfprintf_r+0x129e>
 802af88:	2101      	movs	r1, #1
 802af8a:	2a07      	cmp	r2, #7
 802af8c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802af90:	f8c4 9000 	str.w	r9, [r4]
 802af94:	6061      	str	r1, [r4, #4]
 802af96:	dd08      	ble.n	802afaa <_svfprintf_r+0x11ba>
 802af98:	9803      	ldr	r0, [sp, #12]
 802af9a:	aa26      	add	r2, sp, #152	@ 0x98
 802af9c:	4659      	mov	r1, fp
 802af9e:	f7fd faad 	bl	80284fc <__ssprint_r>
 802afa2:	2800      	cmp	r0, #0
 802afa4:	f040 809f 	bne.w	802b0e6 <_svfprintf_r+0x12f6>
 802afa8:	ae29      	add	r6, sp, #164	@ 0xa4
 802afaa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802afac:	6033      	str	r3, [r6, #0]
 802afae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802afb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802afb2:	6073      	str	r3, [r6, #4]
 802afb4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802afb6:	4413      	add	r3, r2
 802afb8:	9328      	str	r3, [sp, #160]	@ 0xa0
 802afba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802afbc:	3301      	adds	r3, #1
 802afbe:	2b07      	cmp	r3, #7
 802afc0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802afc2:	dc33      	bgt.n	802b02c <_svfprintf_r+0x123c>
 802afc4:	3608      	adds	r6, #8
 802afc6:	9b04      	ldr	r3, [sp, #16]
 802afc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802afcc:	1e5c      	subs	r4, r3, #1
 802afce:	2200      	movs	r2, #0
 802afd0:	2300      	movs	r3, #0
 802afd2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 802afd6:	f7d5 fd8f 	bl	8000af8 <__aeabi_dcmpeq>
 802afda:	2800      	cmp	r0, #0
 802afdc:	d12f      	bne.n	802b03e <_svfprintf_r+0x124e>
 802afde:	f109 0201 	add.w	r2, r9, #1
 802afe2:	e9c6 2400 	strd	r2, r4, [r6]
 802afe6:	9a04      	ldr	r2, [sp, #16]
 802afe8:	f108 0301 	add.w	r3, r8, #1
 802afec:	3f01      	subs	r7, #1
 802afee:	4417      	add	r7, r2
 802aff0:	2b07      	cmp	r3, #7
 802aff2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802aff6:	dd53      	ble.n	802b0a0 <_svfprintf_r+0x12b0>
 802aff8:	9803      	ldr	r0, [sp, #12]
 802affa:	aa26      	add	r2, sp, #152	@ 0x98
 802affc:	4659      	mov	r1, fp
 802affe:	f7fd fa7d 	bl	80284fc <__ssprint_r>
 802b002:	2800      	cmp	r0, #0
 802b004:	d16f      	bne.n	802b0e6 <_svfprintf_r+0x12f6>
 802b006:	ae29      	add	r6, sp, #164	@ 0xa4
 802b008:	ab22      	add	r3, sp, #136	@ 0x88
 802b00a:	6033      	str	r3, [r6, #0]
 802b00c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802b00e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802b010:	6073      	str	r3, [r6, #4]
 802b012:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b014:	4413      	add	r3, r2
 802b016:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b018:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b01a:	3301      	adds	r3, #1
 802b01c:	2b07      	cmp	r3, #7
 802b01e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b020:	f73f ada0 	bgt.w	802ab64 <_svfprintf_r+0xd74>
 802b024:	f106 0408 	add.w	r4, r6, #8
 802b028:	f7ff baec 	b.w	802a604 <_svfprintf_r+0x814>
 802b02c:	9803      	ldr	r0, [sp, #12]
 802b02e:	aa26      	add	r2, sp, #152	@ 0x98
 802b030:	4659      	mov	r1, fp
 802b032:	f7fd fa63 	bl	80284fc <__ssprint_r>
 802b036:	2800      	cmp	r0, #0
 802b038:	d155      	bne.n	802b0e6 <_svfprintf_r+0x12f6>
 802b03a:	ae29      	add	r6, sp, #164	@ 0xa4
 802b03c:	e7c3      	b.n	802afc6 <_svfprintf_r+0x11d6>
 802b03e:	9b04      	ldr	r3, [sp, #16]
 802b040:	2b01      	cmp	r3, #1
 802b042:	dde1      	ble.n	802b008 <_svfprintf_r+0x1218>
 802b044:	4f57      	ldr	r7, [pc, #348]	@ (802b1a4 <_svfprintf_r+0x13b4>)
 802b046:	f04f 0810 	mov.w	r8, #16
 802b04a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b04e:	2c10      	cmp	r4, #16
 802b050:	f103 0301 	add.w	r3, r3, #1
 802b054:	f106 0108 	add.w	r1, r6, #8
 802b058:	6037      	str	r7, [r6, #0]
 802b05a:	dc07      	bgt.n	802b06c <_svfprintf_r+0x127c>
 802b05c:	6074      	str	r4, [r6, #4]
 802b05e:	2b07      	cmp	r3, #7
 802b060:	4414      	add	r4, r2
 802b062:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802b066:	dcc7      	bgt.n	802aff8 <_svfprintf_r+0x1208>
 802b068:	460e      	mov	r6, r1
 802b06a:	e7cd      	b.n	802b008 <_svfprintf_r+0x1218>
 802b06c:	3210      	adds	r2, #16
 802b06e:	2b07      	cmp	r3, #7
 802b070:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b074:	f8c6 8004 	str.w	r8, [r6, #4]
 802b078:	dd06      	ble.n	802b088 <_svfprintf_r+0x1298>
 802b07a:	9803      	ldr	r0, [sp, #12]
 802b07c:	aa26      	add	r2, sp, #152	@ 0x98
 802b07e:	4659      	mov	r1, fp
 802b080:	f7fd fa3c 	bl	80284fc <__ssprint_r>
 802b084:	bb78      	cbnz	r0, 802b0e6 <_svfprintf_r+0x12f6>
 802b086:	a929      	add	r1, sp, #164	@ 0xa4
 802b088:	3c10      	subs	r4, #16
 802b08a:	460e      	mov	r6, r1
 802b08c:	e7dd      	b.n	802b04a <_svfprintf_r+0x125a>
 802b08e:	2101      	movs	r1, #1
 802b090:	2a07      	cmp	r2, #7
 802b092:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b096:	f8c4 9000 	str.w	r9, [r4]
 802b09a:	6061      	str	r1, [r4, #4]
 802b09c:	ddb4      	ble.n	802b008 <_svfprintf_r+0x1218>
 802b09e:	e7ab      	b.n	802aff8 <_svfprintf_r+0x1208>
 802b0a0:	3608      	adds	r6, #8
 802b0a2:	e7b1      	b.n	802b008 <_svfprintf_r+0x1218>
 802b0a4:	460c      	mov	r4, r1
 802b0a6:	f7ff baad 	b.w	802a604 <_svfprintf_r+0x814>
 802b0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b0ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b0ae:	1a9d      	subs	r5, r3, r2
 802b0b0:	2d00      	cmp	r5, #0
 802b0b2:	f77f aaaa 	ble.w	802a60a <_svfprintf_r+0x81a>
 802b0b6:	4e3c      	ldr	r6, [pc, #240]	@ (802b1a8 <_svfprintf_r+0x13b8>)
 802b0b8:	2710      	movs	r7, #16
 802b0ba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b0be:	2d10      	cmp	r5, #16
 802b0c0:	f103 0301 	add.w	r3, r3, #1
 802b0c4:	6026      	str	r6, [r4, #0]
 802b0c6:	dc18      	bgt.n	802b0fa <_svfprintf_r+0x130a>
 802b0c8:	442a      	add	r2, r5
 802b0ca:	2b07      	cmp	r3, #7
 802b0cc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b0d0:	6065      	str	r5, [r4, #4]
 802b0d2:	f77f aa9a 	ble.w	802a60a <_svfprintf_r+0x81a>
 802b0d6:	9803      	ldr	r0, [sp, #12]
 802b0d8:	aa26      	add	r2, sp, #152	@ 0x98
 802b0da:	4659      	mov	r1, fp
 802b0dc:	f7fd fa0e 	bl	80284fc <__ssprint_r>
 802b0e0:	2800      	cmp	r0, #0
 802b0e2:	f43f aa92 	beq.w	802a60a <_svfprintf_r+0x81a>
 802b0e6:	f1ba 0f00 	cmp.w	sl, #0
 802b0ea:	f43f a89a 	beq.w	802a222 <_svfprintf_r+0x432>
 802b0ee:	9803      	ldr	r0, [sp, #12]
 802b0f0:	4651      	mov	r1, sl
 802b0f2:	f7fd f88b 	bl	802820c <_free_r>
 802b0f6:	f7ff b894 	b.w	802a222 <_svfprintf_r+0x432>
 802b0fa:	3210      	adds	r2, #16
 802b0fc:	2b07      	cmp	r3, #7
 802b0fe:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b102:	6067      	str	r7, [r4, #4]
 802b104:	dc02      	bgt.n	802b10c <_svfprintf_r+0x131c>
 802b106:	3408      	adds	r4, #8
 802b108:	3d10      	subs	r5, #16
 802b10a:	e7d6      	b.n	802b0ba <_svfprintf_r+0x12ca>
 802b10c:	9803      	ldr	r0, [sp, #12]
 802b10e:	aa26      	add	r2, sp, #152	@ 0x98
 802b110:	4659      	mov	r1, fp
 802b112:	f7fd f9f3 	bl	80284fc <__ssprint_r>
 802b116:	2800      	cmp	r0, #0
 802b118:	d1e5      	bne.n	802b0e6 <_svfprintf_r+0x12f6>
 802b11a:	ac29      	add	r4, sp, #164	@ 0xa4
 802b11c:	e7f4      	b.n	802b108 <_svfprintf_r+0x1318>
 802b11e:	9803      	ldr	r0, [sp, #12]
 802b120:	4651      	mov	r1, sl
 802b122:	f7fd f873 	bl	802820c <_free_r>
 802b126:	f7ff ba88 	b.w	802a63a <_svfprintf_r+0x84a>
 802b12a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b12c:	2b00      	cmp	r3, #0
 802b12e:	f43f a878 	beq.w	802a222 <_svfprintf_r+0x432>
 802b132:	9803      	ldr	r0, [sp, #12]
 802b134:	aa26      	add	r2, sp, #152	@ 0x98
 802b136:	4659      	mov	r1, fp
 802b138:	f7fd f9e0 	bl	80284fc <__ssprint_r>
 802b13c:	f7ff b871 	b.w	802a222 <_svfprintf_r+0x432>
 802b140:	ea56 0207 	orrs.w	r2, r6, r7
 802b144:	9508      	str	r5, [sp, #32]
 802b146:	f43f ab7a 	beq.w	802a83e <_svfprintf_r+0xa4e>
 802b14a:	2b01      	cmp	r3, #1
 802b14c:	f43f abfb 	beq.w	802a946 <_svfprintf_r+0xb56>
 802b150:	2b02      	cmp	r3, #2
 802b152:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 802b156:	f43f ac3f 	beq.w	802a9d8 <_svfprintf_r+0xbe8>
 802b15a:	f006 0307 	and.w	r3, r6, #7
 802b15e:	08f6      	lsrs	r6, r6, #3
 802b160:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802b164:	08ff      	lsrs	r7, r7, #3
 802b166:	3330      	adds	r3, #48	@ 0x30
 802b168:	ea56 0107 	orrs.w	r1, r6, r7
 802b16c:	464a      	mov	r2, r9
 802b16e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802b172:	d1f2      	bne.n	802b15a <_svfprintf_r+0x136a>
 802b174:	9908      	ldr	r1, [sp, #32]
 802b176:	07c8      	lsls	r0, r1, #31
 802b178:	d506      	bpl.n	802b188 <_svfprintf_r+0x1398>
 802b17a:	2b30      	cmp	r3, #48	@ 0x30
 802b17c:	d004      	beq.n	802b188 <_svfprintf_r+0x1398>
 802b17e:	2330      	movs	r3, #48	@ 0x30
 802b180:	f809 3c01 	strb.w	r3, [r9, #-1]
 802b184:	f1a2 0902 	sub.w	r9, r2, #2
 802b188:	ab52      	add	r3, sp, #328	@ 0x148
 802b18a:	9d08      	ldr	r5, [sp, #32]
 802b18c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 802b190:	f04f 0a00 	mov.w	sl, #0
 802b194:	eba3 0809 	sub.w	r8, r3, r9
 802b198:	4657      	mov	r7, sl
 802b19a:	f8cd a020 	str.w	sl, [sp, #32]
 802b19e:	4656      	mov	r6, sl
 802b1a0:	f7ff b97c 	b.w	802a49c <_svfprintf_r+0x6ac>
 802b1a4:	080345ae 	.word	0x080345ae
 802b1a8:	080345be 	.word	0x080345be

0802b1ac <__swhatbuf_r>:
 802b1ac:	b570      	push	{r4, r5, r6, lr}
 802b1ae:	460c      	mov	r4, r1
 802b1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b1b4:	2900      	cmp	r1, #0
 802b1b6:	b096      	sub	sp, #88	@ 0x58
 802b1b8:	4615      	mov	r5, r2
 802b1ba:	461e      	mov	r6, r3
 802b1bc:	da07      	bge.n	802b1ce <__swhatbuf_r+0x22>
 802b1be:	89a1      	ldrh	r1, [r4, #12]
 802b1c0:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 802b1c4:	d117      	bne.n	802b1f6 <__swhatbuf_r+0x4a>
 802b1c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b1ca:	4608      	mov	r0, r1
 802b1cc:	e00f      	b.n	802b1ee <__swhatbuf_r+0x42>
 802b1ce:	466a      	mov	r2, sp
 802b1d0:	f003 f886 	bl	802e2e0 <_fstat_r>
 802b1d4:	2800      	cmp	r0, #0
 802b1d6:	dbf2      	blt.n	802b1be <__swhatbuf_r+0x12>
 802b1d8:	9901      	ldr	r1, [sp, #4]
 802b1da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802b1de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802b1e2:	4259      	negs	r1, r3
 802b1e4:	4159      	adcs	r1, r3
 802b1e6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802b1ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b1ee:	6031      	str	r1, [r6, #0]
 802b1f0:	602b      	str	r3, [r5, #0]
 802b1f2:	b016      	add	sp, #88	@ 0x58
 802b1f4:	bd70      	pop	{r4, r5, r6, pc}
 802b1f6:	2100      	movs	r1, #0
 802b1f8:	2340      	movs	r3, #64	@ 0x40
 802b1fa:	e7e6      	b.n	802b1ca <__swhatbuf_r+0x1e>

0802b1fc <__smakebuf_r>:
 802b1fc:	898b      	ldrh	r3, [r1, #12]
 802b1fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b200:	079d      	lsls	r5, r3, #30
 802b202:	4606      	mov	r6, r0
 802b204:	460c      	mov	r4, r1
 802b206:	d507      	bpl.n	802b218 <__smakebuf_r+0x1c>
 802b208:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 802b20c:	6023      	str	r3, [r4, #0]
 802b20e:	6123      	str	r3, [r4, #16]
 802b210:	2301      	movs	r3, #1
 802b212:	6163      	str	r3, [r4, #20]
 802b214:	b003      	add	sp, #12
 802b216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b218:	ab01      	add	r3, sp, #4
 802b21a:	466a      	mov	r2, sp
 802b21c:	f7ff ffc6 	bl	802b1ac <__swhatbuf_r>
 802b220:	9f00      	ldr	r7, [sp, #0]
 802b222:	4605      	mov	r5, r0
 802b224:	4639      	mov	r1, r7
 802b226:	4630      	mov	r0, r6
 802b228:	f7f7 ff30 	bl	802308c <_malloc_r>
 802b22c:	b948      	cbnz	r0, 802b242 <__smakebuf_r+0x46>
 802b22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b232:	059a      	lsls	r2, r3, #22
 802b234:	d4ee      	bmi.n	802b214 <__smakebuf_r+0x18>
 802b236:	f023 0303 	bic.w	r3, r3, #3
 802b23a:	f043 0302 	orr.w	r3, r3, #2
 802b23e:	81a3      	strh	r3, [r4, #12]
 802b240:	e7e2      	b.n	802b208 <__smakebuf_r+0xc>
 802b242:	89a3      	ldrh	r3, [r4, #12]
 802b244:	6020      	str	r0, [r4, #0]
 802b246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b24a:	81a3      	strh	r3, [r4, #12]
 802b24c:	9b01      	ldr	r3, [sp, #4]
 802b24e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802b252:	b15b      	cbz	r3, 802b26c <__smakebuf_r+0x70>
 802b254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b258:	4630      	mov	r0, r6
 802b25a:	f003 f853 	bl	802e304 <_isatty_r>
 802b25e:	b128      	cbz	r0, 802b26c <__smakebuf_r+0x70>
 802b260:	89a3      	ldrh	r3, [r4, #12]
 802b262:	f023 0303 	bic.w	r3, r3, #3
 802b266:	f043 0301 	orr.w	r3, r3, #1
 802b26a:	81a3      	strh	r3, [r4, #12]
 802b26c:	89a3      	ldrh	r3, [r4, #12]
 802b26e:	431d      	orrs	r5, r3
 802b270:	81a5      	strh	r5, [r4, #12]
 802b272:	e7cf      	b.n	802b214 <__smakebuf_r+0x18>

0802b274 <__ssvfscanf_r>:
 802b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b278:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 802b27c:	461d      	mov	r5, r3
 802b27e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802b282:	af02      	add	r7, sp, #8
 802b284:	049e      	lsls	r6, r3, #18
 802b286:	62b8      	str	r0, [r7, #40]	@ 0x28
 802b288:	460c      	mov	r4, r1
 802b28a:	617a      	str	r2, [r7, #20]
 802b28c:	d406      	bmi.n	802b29c <__ssvfscanf_r+0x28>
 802b28e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b292:	818b      	strh	r3, [r1, #12]
 802b294:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b296:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802b29a:	664b      	str	r3, [r1, #100]	@ 0x64
 802b29c:	2300      	movs	r3, #0
 802b29e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 802b2a2:	61bb      	str	r3, [r7, #24]
 802b2a4:	637b      	str	r3, [r7, #52]	@ 0x34
 802b2a6:	633b      	str	r3, [r7, #48]	@ 0x30
 802b2a8:	627b      	str	r3, [r7, #36]	@ 0x24
 802b2aa:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802b2ae:	f818 3b01 	ldrb.w	r3, [r8], #1
 802b2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802b2b4:	2b00      	cmp	r3, #0
 802b2b6:	f000 80d3 	beq.w	802b460 <__ssvfscanf_r+0x1ec>
 802b2ba:	4a84      	ldr	r2, [pc, #528]	@ (802b4cc <__ssvfscanf_r+0x258>)
 802b2bc:	5cd6      	ldrb	r6, [r2, r3]
 802b2be:	f016 0608 	ands.w	r6, r6, #8
 802b2c2:	d01b      	beq.n	802b2fc <__ssvfscanf_r+0x88>
 802b2c4:	6863      	ldr	r3, [r4, #4]
 802b2c6:	2b00      	cmp	r3, #0
 802b2c8:	dd08      	ble.n	802b2dc <__ssvfscanf_r+0x68>
 802b2ca:	6823      	ldr	r3, [r4, #0]
 802b2cc:	497f      	ldr	r1, [pc, #508]	@ (802b4cc <__ssvfscanf_r+0x258>)
 802b2ce:	781a      	ldrb	r2, [r3, #0]
 802b2d0:	5c8a      	ldrb	r2, [r1, r2]
 802b2d2:	0710      	lsls	r0, r2, #28
 802b2d4:	d409      	bmi.n	802b2ea <__ssvfscanf_r+0x76>
 802b2d6:	f8c7 8014 	str.w	r8, [r7, #20]
 802b2da:	e7e6      	b.n	802b2aa <__ssvfscanf_r+0x36>
 802b2dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b2de:	4621      	mov	r1, r4
 802b2e0:	f7fd fe11 	bl	8028f06 <__ssrefill_r>
 802b2e4:	2800      	cmp	r0, #0
 802b2e6:	d0f0      	beq.n	802b2ca <__ssvfscanf_r+0x56>
 802b2e8:	e7f5      	b.n	802b2d6 <__ssvfscanf_r+0x62>
 802b2ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b2ec:	3201      	adds	r2, #1
 802b2ee:	633a      	str	r2, [r7, #48]	@ 0x30
 802b2f0:	6862      	ldr	r2, [r4, #4]
 802b2f2:	3301      	adds	r3, #1
 802b2f4:	3a01      	subs	r2, #1
 802b2f6:	6062      	str	r2, [r4, #4]
 802b2f8:	6023      	str	r3, [r4, #0]
 802b2fa:	e7e3      	b.n	802b2c4 <__ssvfscanf_r+0x50>
 802b2fc:	2b25      	cmp	r3, #37	@ 0x25
 802b2fe:	d163      	bne.n	802b3c8 <__ssvfscanf_r+0x154>
 802b300:	62fe      	str	r6, [r7, #44]	@ 0x2c
 802b302:	4642      	mov	r2, r8
 802b304:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b308:	617a      	str	r2, [r7, #20]
 802b30a:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 802b30e:	2a55      	cmp	r2, #85	@ 0x55
 802b310:	f200 816e 	bhi.w	802b5f0 <__ssvfscanf_r+0x37c>
 802b314:	e8df f012 	tbh	[pc, r2, lsl #1]
 802b318:	016c0056 	.word	0x016c0056
 802b31c:	016c016c 	.word	0x016c016c
 802b320:	007d016c 	.word	0x007d016c
 802b324:	016c016c 	.word	0x016c016c
 802b328:	016c016c 	.word	0x016c016c
 802b32c:	00b9016c 	.word	0x00b9016c
 802b330:	00b900b9 	.word	0x00b900b9
 802b334:	00b900b9 	.word	0x00b900b9
 802b338:	00b900b9 	.word	0x00b900b9
 802b33c:	00b900b9 	.word	0x00b900b9
 802b340:	016c00b9 	.word	0x016c00b9
 802b344:	016c016c 	.word	0x016c016c
 802b348:	016c016c 	.word	0x016c016c
 802b34c:	016c016c 	.word	0x016c016c
 802b350:	016c00e0 	.word	0x016c00e0
 802b354:	00c3010a 	.word	0x00c3010a
 802b358:	00e000e0 	.word	0x00e000e0
 802b35c:	016c00e0 	.word	0x016c00e0
 802b360:	016c016c 	.word	0x016c016c
 802b364:	00a2016c 	.word	0x00a2016c
 802b368:	016c016c 	.word	0x016c016c
 802b36c:	016c00c7 	.word	0x016c00c7
 802b370:	016c016c 	.word	0x016c016c
 802b374:	016c00fa 	.word	0x016c00fa
 802b378:	016c016c 	.word	0x016c016c
 802b37c:	00d4016c 	.word	0x00d4016c
 802b380:	016c016c 	.word	0x016c016c
 802b384:	016c00ff 	.word	0x016c00ff
 802b388:	016c016c 	.word	0x016c016c
 802b38c:	016c016c 	.word	0x016c016c
 802b390:	016c00e0 	.word	0x016c00e0
 802b394:	00c5010c 	.word	0x00c5010c
 802b398:	00e000e0 	.word	0x00e000e0
 802b39c:	009400e0 	.word	0x009400e0
 802b3a0:	00a20130 	.word	0x00a20130
 802b3a4:	0085016c 	.word	0x0085016c
 802b3a8:	011400ac 	.word	0x011400ac
 802b3ac:	011100c9 	.word	0x011100c9
 802b3b0:	016c016c 	.word	0x016c016c
 802b3b4:	00a900fc 	.word	0x00a900fc
 802b3b8:	016c00d0 	.word	0x016c00d0
 802b3bc:	00d4016c 	.word	0x00d4016c
 802b3c0:	00a9016c 	.word	0x00a9016c
 802b3c4:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802b3c8:	6863      	ldr	r3, [r4, #4]
 802b3ca:	2b00      	cmp	r3, #0
 802b3cc:	dd0e      	ble.n	802b3ec <__ssvfscanf_r+0x178>
 802b3ce:	6823      	ldr	r3, [r4, #0]
 802b3d0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802b3d4:	7819      	ldrb	r1, [r3, #0]
 802b3d6:	4291      	cmp	r1, r2
 802b3d8:	d142      	bne.n	802b460 <__ssvfscanf_r+0x1ec>
 802b3da:	3301      	adds	r3, #1
 802b3dc:	6862      	ldr	r2, [r4, #4]
 802b3de:	6023      	str	r3, [r4, #0]
 802b3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b3e2:	3a01      	subs	r2, #1
 802b3e4:	3301      	adds	r3, #1
 802b3e6:	6062      	str	r2, [r4, #4]
 802b3e8:	633b      	str	r3, [r7, #48]	@ 0x30
 802b3ea:	e774      	b.n	802b2d6 <__ssvfscanf_r+0x62>
 802b3ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b3ee:	4621      	mov	r1, r4
 802b3f0:	f7fd fd89 	bl	8028f06 <__ssrefill_r>
 802b3f4:	2800      	cmp	r0, #0
 802b3f6:	d0ea      	beq.n	802b3ce <__ssvfscanf_r+0x15a>
 802b3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b3fa:	b113      	cbz	r3, 802b402 <__ssvfscanf_r+0x18e>
 802b3fc:	89a3      	ldrh	r3, [r4, #12]
 802b3fe:	065b      	lsls	r3, r3, #25
 802b400:	d52e      	bpl.n	802b460 <__ssvfscanf_r+0x1ec>
 802b402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b404:	2b00      	cmp	r3, #0
 802b406:	f041 809d 	bne.w	802c544 <__ssvfscanf_r+0x12d0>
 802b40a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b40e:	627b      	str	r3, [r7, #36]	@ 0x24
 802b410:	e0f9      	b.n	802b606 <__ssvfscanf_r+0x392>
 802b412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b414:	4333      	orrs	r3, r6
 802b416:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b418:	d122      	bne.n	802b460 <__ssvfscanf_r+0x1ec>
 802b41a:	2610      	movs	r6, #16
 802b41c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802b420:	e76f      	b.n	802b302 <__ssvfscanf_r+0x8e>
 802b422:	0731      	lsls	r1, r6, #28
 802b424:	d11c      	bne.n	802b460 <__ssvfscanf_r+0x1ec>
 802b426:	f898 3001 	ldrb.w	r3, [r8, #1]
 802b42a:	2b6c      	cmp	r3, #108	@ 0x6c
 802b42c:	d105      	bne.n	802b43a <__ssvfscanf_r+0x1c6>
 802b42e:	f108 0302 	add.w	r3, r8, #2
 802b432:	617b      	str	r3, [r7, #20]
 802b434:	f046 0602 	orr.w	r6, r6, #2
 802b438:	e7f0      	b.n	802b41c <__ssvfscanf_r+0x1a8>
 802b43a:	f046 0601 	orr.w	r6, r6, #1
 802b43e:	e7ed      	b.n	802b41c <__ssvfscanf_r+0x1a8>
 802b440:	0732      	lsls	r2, r6, #28
 802b442:	d10d      	bne.n	802b460 <__ssvfscanf_r+0x1ec>
 802b444:	f898 3001 	ldrb.w	r3, [r8, #1]
 802b448:	2b68      	cmp	r3, #104	@ 0x68
 802b44a:	bf03      	ittte	eq
 802b44c:	f108 0302 	addeq.w	r3, r8, #2
 802b450:	617b      	streq	r3, [r7, #20]
 802b452:	f046 0608 	orreq.w	r6, r6, #8
 802b456:	f046 0604 	orrne.w	r6, r6, #4
 802b45a:	e7df      	b.n	802b41c <__ssvfscanf_r+0x1a8>
 802b45c:	0733      	lsls	r3, r6, #28
 802b45e:	d0e9      	beq.n	802b434 <__ssvfscanf_r+0x1c0>
 802b460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b462:	2b00      	cmp	r3, #0
 802b464:	f000 80cf 	beq.w	802b606 <__ssvfscanf_r+0x392>
 802b468:	e0c8      	b.n	802b5fc <__ssvfscanf_r+0x388>
 802b46a:	0730      	lsls	r0, r6, #28
 802b46c:	d0d6      	beq.n	802b41c <__ssvfscanf_r+0x1a8>
 802b46e:	e7f7      	b.n	802b460 <__ssvfscanf_r+0x1ec>
 802b470:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802b474:	d1f4      	bne.n	802b460 <__ssvfscanf_r+0x1ec>
 802b476:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802b478:	b922      	cbnz	r2, 802b484 <__ssvfscanf_r+0x210>
 802b47a:	b082      	sub	sp, #8
 802b47c:	aa02      	add	r2, sp, #8
 802b47e:	e9c2 3300 	strd	r3, r3, [r2]
 802b482:	637a      	str	r2, [r7, #52]	@ 0x34
 802b484:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802b488:	e7c8      	b.n	802b41c <__ssvfscanf_r+0x1a8>
 802b48a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802b48e:	d1e7      	bne.n	802b460 <__ssvfscanf_r+0x1ec>
 802b490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802b492:	220a      	movs	r2, #10
 802b494:	fb02 3301 	mla	r3, r2, r1, r3
 802b498:	3b30      	subs	r3, #48	@ 0x30
 802b49a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b49c:	e7be      	b.n	802b41c <__ssvfscanf_r+0x1a8>
 802b49e:	f046 0601 	orr.w	r6, r6, #1
 802b4a2:	4b0b      	ldr	r3, [pc, #44]	@ (802b4d0 <__ssvfscanf_r+0x25c>)
 802b4a4:	e009      	b.n	802b4ba <__ssvfscanf_r+0x246>
 802b4a6:	f046 0601 	orr.w	r6, r6, #1
 802b4aa:	4b0a      	ldr	r3, [pc, #40]	@ (802b4d4 <__ssvfscanf_r+0x260>)
 802b4ac:	61bb      	str	r3, [r7, #24]
 802b4ae:	2308      	movs	r3, #8
 802b4b0:	61fb      	str	r3, [r7, #28]
 802b4b2:	f04f 0803 	mov.w	r8, #3
 802b4b6:	e011      	b.n	802b4dc <__ssvfscanf_r+0x268>
 802b4b8:	4b06      	ldr	r3, [pc, #24]	@ (802b4d4 <__ssvfscanf_r+0x260>)
 802b4ba:	61bb      	str	r3, [r7, #24]
 802b4bc:	230a      	movs	r3, #10
 802b4be:	e7f7      	b.n	802b4b0 <__ssvfscanf_r+0x23c>
 802b4c0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802b4c4:	4b03      	ldr	r3, [pc, #12]	@ (802b4d4 <__ssvfscanf_r+0x260>)
 802b4c6:	61bb      	str	r3, [r7, #24]
 802b4c8:	2310      	movs	r3, #16
 802b4ca:	e7f1      	b.n	802b4b0 <__ssvfscanf_r+0x23c>
 802b4cc:	080343f5 	.word	0x080343f5
 802b4d0:	08025661 	.word	0x08025661
 802b4d4:	0802dff1 	.word	0x0802dff1
 802b4d8:	f04f 0804 	mov.w	r8, #4
 802b4dc:	6863      	ldr	r3, [r4, #4]
 802b4de:	2b00      	cmp	r3, #0
 802b4e0:	dd4e      	ble.n	802b580 <__ssvfscanf_r+0x30c>
 802b4e2:	0673      	lsls	r3, r6, #25
 802b4e4:	d407      	bmi.n	802b4f6 <__ssvfscanf_r+0x282>
 802b4e6:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 802b7e4 <__ssvfscanf_r+0x570>
 802b4ea:	6823      	ldr	r3, [r4, #0]
 802b4ec:	781a      	ldrb	r2, [r3, #0]
 802b4ee:	f819 2002 	ldrb.w	r2, [r9, r2]
 802b4f2:	0710      	lsls	r0, r2, #28
 802b4f4:	d44b      	bmi.n	802b58e <__ssvfscanf_r+0x31a>
 802b4f6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802b4fa:	f1b8 0f03 	cmp.w	r8, #3
 802b4fe:	d858      	bhi.n	802b5b2 <__ssvfscanf_r+0x33e>
 802b500:	e8df f018 	tbh	[pc, r8, lsl #1]
 802b504:	037801c1 	.word	0x037801c1
 802b508:	05f30514 	.word	0x05f30514
 802b50c:	f046 0601 	orr.w	r6, r6, #1
 802b510:	f04f 0802 	mov.w	r8, #2
 802b514:	e7e2      	b.n	802b4dc <__ssvfscanf_r+0x268>
 802b516:	6979      	ldr	r1, [r7, #20]
 802b518:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 802b51c:	f001 fd11 	bl	802cf42 <__sccl>
 802b520:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802b524:	6178      	str	r0, [r7, #20]
 802b526:	f04f 0801 	mov.w	r8, #1
 802b52a:	e7d7      	b.n	802b4dc <__ssvfscanf_r+0x268>
 802b52c:	f046 0601 	orr.w	r6, r6, #1
 802b530:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802b534:	f04f 0800 	mov.w	r8, #0
 802b538:	e7d0      	b.n	802b4dc <__ssvfscanf_r+0x268>
 802b53a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 802b53e:	e7c1      	b.n	802b4c4 <__ssvfscanf_r+0x250>
 802b540:	06f1      	lsls	r1, r6, #27
 802b542:	f53f aeb2 	bmi.w	802b2aa <__ssvfscanf_r+0x36>
 802b546:	0732      	lsls	r2, r6, #28
 802b548:	f855 3b04 	ldr.w	r3, [r5], #4
 802b54c:	d502      	bpl.n	802b554 <__ssvfscanf_r+0x2e0>
 802b54e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b550:	701a      	strb	r2, [r3, #0]
 802b552:	e6aa      	b.n	802b2aa <__ssvfscanf_r+0x36>
 802b554:	0770      	lsls	r0, r6, #29
 802b556:	d502      	bpl.n	802b55e <__ssvfscanf_r+0x2ea>
 802b558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b55a:	801a      	strh	r2, [r3, #0]
 802b55c:	e6a5      	b.n	802b2aa <__ssvfscanf_r+0x36>
 802b55e:	07f1      	lsls	r1, r6, #31
 802b560:	d502      	bpl.n	802b568 <__ssvfscanf_r+0x2f4>
 802b562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b564:	601a      	str	r2, [r3, #0]
 802b566:	e6a0      	b.n	802b2aa <__ssvfscanf_r+0x36>
 802b568:	07b2      	lsls	r2, r6, #30
 802b56a:	d5fa      	bpl.n	802b562 <__ssvfscanf_r+0x2ee>
 802b56c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b56e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802b570:	17d2      	asrs	r2, r2, #31
 802b572:	e9c3 1200 	strd	r1, r2, [r3]
 802b576:	e698      	b.n	802b2aa <__ssvfscanf_r+0x36>
 802b578:	4b99      	ldr	r3, [pc, #612]	@ (802b7e0 <__ssvfscanf_r+0x56c>)
 802b57a:	61bb      	str	r3, [r7, #24]
 802b57c:	2300      	movs	r3, #0
 802b57e:	e797      	b.n	802b4b0 <__ssvfscanf_r+0x23c>
 802b580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b582:	4621      	mov	r1, r4
 802b584:	f7fd fcbf 	bl	8028f06 <__ssrefill_r>
 802b588:	2800      	cmp	r0, #0
 802b58a:	d0aa      	beq.n	802b4e2 <__ssvfscanf_r+0x26e>
 802b58c:	e734      	b.n	802b3f8 <__ssvfscanf_r+0x184>
 802b58e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b590:	3201      	adds	r2, #1
 802b592:	633a      	str	r2, [r7, #48]	@ 0x30
 802b594:	6862      	ldr	r2, [r4, #4]
 802b596:	3a01      	subs	r2, #1
 802b598:	2a00      	cmp	r2, #0
 802b59a:	6062      	str	r2, [r4, #4]
 802b59c:	dd02      	ble.n	802b5a4 <__ssvfscanf_r+0x330>
 802b59e:	3301      	adds	r3, #1
 802b5a0:	6023      	str	r3, [r4, #0]
 802b5a2:	e7a2      	b.n	802b4ea <__ssvfscanf_r+0x276>
 802b5a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b5a6:	4621      	mov	r1, r4
 802b5a8:	f7fd fcad 	bl	8028f06 <__ssrefill_r>
 802b5ac:	2800      	cmp	r0, #0
 802b5ae:	d09c      	beq.n	802b4ea <__ssvfscanf_r+0x276>
 802b5b0:	e722      	b.n	802b3f8 <__ssvfscanf_r+0x184>
 802b5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b5b4:	2b01      	cmp	r3, #1
 802b5b6:	bf38      	it	cc
 802b5b8:	2301      	movcc	r3, #1
 802b5ba:	4698      	mov	r8, r3
 802b5bc:	f016 0301 	ands.w	r3, r6, #1
 802b5c0:	f006 0b10 	and.w	fp, r6, #16
 802b5c4:	f000 80eb 	beq.w	802b79e <__ssvfscanf_r+0x52a>
 802b5c8:	f1bb 0f00 	cmp.w	fp, #0
 802b5cc:	f040 8085 	bne.w	802b6da <__ssvfscanf_r+0x466>
 802b5d0:	462b      	mov	r3, r5
 802b5d2:	0631      	lsls	r1, r6, #24
 802b5d4:	f853 5b04 	ldr.w	r5, [r3], #4
 802b5d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b5da:	f140 8085 	bpl.w	802b6e8 <__ssvfscanf_r+0x474>
 802b5de:	b13d      	cbz	r5, 802b5f0 <__ssvfscanf_r+0x37c>
 802b5e0:	2080      	movs	r0, #128	@ 0x80
 802b5e2:	f7f7 fd43 	bl	802306c <malloc>
 802b5e6:	4606      	mov	r6, r0
 802b5e8:	b998      	cbnz	r0, 802b612 <__ssvfscanf_r+0x39e>
 802b5ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b5ee:	627b      	str	r3, [r7, #36]	@ 0x24
 802b5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b5f2:	b143      	cbz	r3, 802b606 <__ssvfscanf_r+0x392>
 802b5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b5f6:	3301      	adds	r3, #1
 802b5f8:	f000 87a4 	beq.w	802c544 <__ssvfscanf_r+0x12d0>
 802b5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b5fe:	6818      	ldr	r0, [r3, #0]
 802b600:	b108      	cbz	r0, 802b606 <__ssvfscanf_r+0x392>
 802b602:	f7f7 fd3b 	bl	802307c <free>
 802b606:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802b608:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 802b60c:	46bd      	mov	sp, r7
 802b60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b614:	6028      	str	r0, [r5, #0]
 802b616:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 802b61a:	889b      	ldrh	r3, [r3, #4]
 802b61c:	4599      	cmp	r9, r3
 802b61e:	d314      	bcc.n	802b64a <__ssvfscanf_r+0x3d6>
 802b620:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802b624:	4293      	cmp	r3, r2
 802b626:	f200 878d 	bhi.w	802c544 <__ssvfscanf_r+0x12d0>
 802b62a:	3308      	adds	r3, #8
 802b62c:	fa1f fa83 	uxth.w	sl, r3
 802b630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b632:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802b636:	6818      	ldr	r0, [r3, #0]
 802b638:	f001 fc26 	bl	802ce88 <realloc>
 802b63c:	2800      	cmp	r0, #0
 802b63e:	f000 8781 	beq.w	802c544 <__ssvfscanf_r+0x12d0>
 802b642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b644:	6018      	str	r0, [r3, #0]
 802b646:	f8a3 a004 	strh.w	sl, [r3, #4]
 802b64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b64c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802b64e:	681b      	ldr	r3, [r3, #0]
 802b650:	f109 0201 	add.w	r2, r9, #1
 802b654:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802b658:	46aa      	mov	sl, r5
 802b65a:	80ca      	strh	r2, [r1, #6]
 802b65c:	4635      	mov	r5, r6
 802b65e:	f04f 0920 	mov.w	r9, #32
 802b662:	2200      	movs	r2, #0
 802b664:	613a      	str	r2, [r7, #16]
 802b666:	f7fb fdff 	bl	8027268 <__locale_mb_cur_max>
 802b66a:	693a      	ldr	r2, [r7, #16]
 802b66c:	4290      	cmp	r0, r2
 802b66e:	f43f aec3 	beq.w	802b3f8 <__ssvfscanf_r+0x184>
 802b672:	6821      	ldr	r1, [r4, #0]
 802b674:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 802b678:	f811 0b01 	ldrb.w	r0, [r1], #1
 802b67c:	f80c 0002 	strb.w	r0, [ip, r2]
 802b680:	1c53      	adds	r3, r2, #1
 802b682:	6862      	ldr	r2, [r4, #4]
 802b684:	3a01      	subs	r2, #1
 802b686:	e9c4 1200 	strd	r1, r2, [r4]
 802b68a:	6a3a      	ldr	r2, [r7, #32]
 802b68c:	2a03      	cmp	r2, #3
 802b68e:	d102      	bne.n	802b696 <__ssvfscanf_r+0x422>
 802b690:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802b692:	2a04      	cmp	r2, #4
 802b694:	d007      	beq.n	802b6a6 <__ssvfscanf_r+0x432>
 802b696:	2208      	movs	r2, #8
 802b698:	2100      	movs	r1, #0
 802b69a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802b69e:	623b      	str	r3, [r7, #32]
 802b6a0:	f7fa fc5a 	bl	8025f58 <memset>
 802b6a4:	6a3b      	ldr	r3, [r7, #32]
 802b6a6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802b6aa:	9200      	str	r2, [sp, #0]
 802b6ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b6ae:	613b      	str	r3, [r7, #16]
 802b6b0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802b6b4:	4629      	mov	r1, r5
 802b6b6:	f002 ff85 	bl	802e5c4 <_mbrtowc_r>
 802b6ba:	1c42      	adds	r2, r0, #1
 802b6bc:	6238      	str	r0, [r7, #32]
 802b6be:	f43f ae9b 	beq.w	802b3f8 <__ssvfscanf_r+0x184>
 802b6c2:	693b      	ldr	r3, [r7, #16]
 802b6c4:	b9b8      	cbnz	r0, 802b6f6 <__ssvfscanf_r+0x482>
 802b6c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b6c8:	441a      	add	r2, r3
 802b6ca:	4613      	mov	r3, r2
 802b6cc:	f1bb 0f00 	cmp.w	fp, #0
 802b6d0:	d00e      	beq.n	802b6f0 <__ssvfscanf_r+0x47c>
 802b6d2:	633b      	str	r3, [r7, #48]	@ 0x30
 802b6d4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802b6d8:	e019      	b.n	802b70e <__ssvfscanf_r+0x49a>
 802b6da:	f04f 0900 	mov.w	r9, #0
 802b6de:	62fd      	str	r5, [r7, #44]	@ 0x2c
 802b6e0:	464e      	mov	r6, r9
 802b6e2:	46ca      	mov	sl, r9
 802b6e4:	464d      	mov	r5, r9
 802b6e6:	e7bc      	b.n	802b662 <__ssvfscanf_r+0x3ee>
 802b6e8:	46d9      	mov	r9, fp
 802b6ea:	465e      	mov	r6, fp
 802b6ec:	46da      	mov	sl, fp
 802b6ee:	e7b8      	b.n	802b662 <__ssvfscanf_r+0x3ee>
 802b6f0:	f8c5 b000 	str.w	fp, [r5]
 802b6f4:	e7ed      	b.n	802b6d2 <__ssvfscanf_r+0x45e>
 802b6f6:	6a3a      	ldr	r2, [r7, #32]
 802b6f8:	3202      	adds	r2, #2
 802b6fa:	d025      	beq.n	802b748 <__ssvfscanf_r+0x4d4>
 802b6fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b6fe:	441a      	add	r2, r3
 802b700:	6a3b      	ldr	r3, [r7, #32]
 802b702:	633a      	str	r2, [r7, #48]	@ 0x30
 802b704:	2b03      	cmp	r3, #3
 802b706:	d1e5      	bne.n	802b6d4 <__ssvfscanf_r+0x460>
 802b708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802b70a:	2b04      	cmp	r3, #4
 802b70c:	d1e2      	bne.n	802b6d4 <__ssvfscanf_r+0x460>
 802b70e:	f1bb 0f00 	cmp.w	fp, #0
 802b712:	d117      	bne.n	802b744 <__ssvfscanf_r+0x4d0>
 802b714:	f1ba 0f00 	cmp.w	sl, #0
 802b718:	d013      	beq.n	802b742 <__ssvfscanf_r+0x4ce>
 802b71a:	1bab      	subs	r3, r5, r6
 802b71c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802b720:	d80f      	bhi.n	802b742 <__ssvfscanf_r+0x4ce>
 802b722:	4630      	mov	r0, r6
 802b724:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b728:	613b      	str	r3, [r7, #16]
 802b72a:	f001 fbad 	bl	802ce88 <realloc>
 802b72e:	4606      	mov	r6, r0
 802b730:	2800      	cmp	r0, #0
 802b732:	f43f af5a 	beq.w	802b5ea <__ssvfscanf_r+0x376>
 802b736:	693b      	ldr	r3, [r7, #16]
 802b738:	f8ca 0000 	str.w	r0, [sl]
 802b73c:	18c5      	adds	r5, r0, r3
 802b73e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802b742:	3504      	adds	r5, #4
 802b744:	2200      	movs	r2, #0
 802b746:	e000      	b.n	802b74a <__ssvfscanf_r+0x4d6>
 802b748:	461a      	mov	r2, r3
 802b74a:	6863      	ldr	r3, [r4, #4]
 802b74c:	2b00      	cmp	r3, #0
 802b74e:	dc14      	bgt.n	802b77a <__ssvfscanf_r+0x506>
 802b750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b752:	613a      	str	r2, [r7, #16]
 802b754:	4621      	mov	r1, r4
 802b756:	f7fd fbd6 	bl	8028f06 <__ssrefill_r>
 802b75a:	693a      	ldr	r2, [r7, #16]
 802b75c:	b168      	cbz	r0, 802b77a <__ssvfscanf_r+0x506>
 802b75e:	2a00      	cmp	r2, #0
 802b760:	f47f ae4a 	bne.w	802b3f8 <__ssvfscanf_r+0x184>
 802b764:	f1ba 0f00 	cmp.w	sl, #0
 802b768:	d10c      	bne.n	802b784 <__ssvfscanf_r+0x510>
 802b76a:	f1bb 0f00 	cmp.w	fp, #0
 802b76e:	d102      	bne.n	802b776 <__ssvfscanf_r+0x502>
 802b770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b772:	3301      	adds	r3, #1
 802b774:	627b      	str	r3, [r7, #36]	@ 0x24
 802b776:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 802b778:	e597      	b.n	802b2aa <__ssvfscanf_r+0x36>
 802b77a:	f1b8 0f00 	cmp.w	r8, #0
 802b77e:	f47f af71 	bne.w	802b664 <__ssvfscanf_r+0x3f0>
 802b782:	e7ef      	b.n	802b764 <__ssvfscanf_r+0x4f0>
 802b784:	1ba9      	subs	r1, r5, r6
 802b786:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 802b78a:	d9ee      	bls.n	802b76a <__ssvfscanf_r+0x4f6>
 802b78c:	f8da 0000 	ldr.w	r0, [sl]
 802b790:	f001 fb7a 	bl	802ce88 <realloc>
 802b794:	2800      	cmp	r0, #0
 802b796:	d0e8      	beq.n	802b76a <__ssvfscanf_r+0x4f6>
 802b798:	f8ca 0000 	str.w	r0, [sl]
 802b79c:	e7e5      	b.n	802b76a <__ssvfscanf_r+0x4f6>
 802b79e:	f1bb 0f00 	cmp.w	fp, #0
 802b7a2:	d021      	beq.n	802b7e8 <__ssvfscanf_r+0x574>
 802b7a4:	461e      	mov	r6, r3
 802b7a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 802b7aa:	4598      	cmp	r8, r3
 802b7ac:	dd11      	ble.n	802b7d2 <__ssvfscanf_r+0x55e>
 802b7ae:	441a      	add	r2, r3
 802b7b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b7b2:	6022      	str	r2, [r4, #0]
 802b7b4:	4621      	mov	r1, r4
 802b7b6:	441e      	add	r6, r3
 802b7b8:	eba8 0803 	sub.w	r8, r8, r3
 802b7bc:	f7fd fba3 	bl	8028f06 <__ssrefill_r>
 802b7c0:	2800      	cmp	r0, #0
 802b7c2:	d0f0      	beq.n	802b7a6 <__ssvfscanf_r+0x532>
 802b7c4:	2e00      	cmp	r6, #0
 802b7c6:	f43f ae17 	beq.w	802b3f8 <__ssvfscanf_r+0x184>
 802b7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b7cc:	4433      	add	r3, r6
 802b7ce:	633b      	str	r3, [r7, #48]	@ 0x30
 802b7d0:	e56b      	b.n	802b2aa <__ssvfscanf_r+0x36>
 802b7d2:	eba3 0308 	sub.w	r3, r3, r8
 802b7d6:	4442      	add	r2, r8
 802b7d8:	4446      	add	r6, r8
 802b7da:	6063      	str	r3, [r4, #4]
 802b7dc:	6022      	str	r2, [r4, #0]
 802b7de:	e7f4      	b.n	802b7ca <__ssvfscanf_r+0x556>
 802b7e0:	08025661 	.word	0x08025661
 802b7e4:	080343f5 	.word	0x080343f5
 802b7e8:	46a9      	mov	r9, r5
 802b7ea:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802b7ee:	f859 5b04 	ldr.w	r5, [r9], #4
 802b7f2:	d02c      	beq.n	802b84e <__ssvfscanf_r+0x5da>
 802b7f4:	2d00      	cmp	r5, #0
 802b7f6:	f43f ae33 	beq.w	802b460 <__ssvfscanf_r+0x1ec>
 802b7fa:	4640      	mov	r0, r8
 802b7fc:	f7f7 fc36 	bl	802306c <malloc>
 802b800:	4682      	mov	sl, r0
 802b802:	2800      	cmp	r0, #0
 802b804:	f43f adfd 	beq.w	802b402 <__ssvfscanf_r+0x18e>
 802b808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b80a:	6028      	str	r0, [r5, #0]
 802b80c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 802b810:	889e      	ldrh	r6, [r3, #4]
 802b812:	45b3      	cmp	fp, r6
 802b814:	d311      	bcc.n	802b83a <__ssvfscanf_r+0x5c6>
 802b816:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802b81a:	429e      	cmp	r6, r3
 802b81c:	f200 8692 	bhi.w	802c544 <__ssvfscanf_r+0x12d0>
 802b820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b822:	3608      	adds	r6, #8
 802b824:	b2b6      	uxth	r6, r6
 802b826:	6818      	ldr	r0, [r3, #0]
 802b828:	00b1      	lsls	r1, r6, #2
 802b82a:	f001 fb2d 	bl	802ce88 <realloc>
 802b82e:	2800      	cmp	r0, #0
 802b830:	f000 8688 	beq.w	802c544 <__ssvfscanf_r+0x12d0>
 802b834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b836:	6018      	str	r0, [r3, #0]
 802b838:	809e      	strh	r6, [r3, #4]
 802b83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b83c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802b83e:	681b      	ldr	r3, [r3, #0]
 802b840:	f10b 0201 	add.w	r2, fp, #1
 802b844:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 802b848:	462e      	mov	r6, r5
 802b84a:	80ca      	strh	r2, [r1, #6]
 802b84c:	4655      	mov	r5, sl
 802b84e:	9400      	str	r4, [sp, #0]
 802b850:	4629      	mov	r1, r5
 802b852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b854:	4643      	mov	r3, r8
 802b856:	2201      	movs	r2, #1
 802b858:	f7fd fb72 	bl	8028f40 <_sfread_r>
 802b85c:	4605      	mov	r5, r0
 802b85e:	2800      	cmp	r0, #0
 802b860:	f43f adca 	beq.w	802b3f8 <__ssvfscanf_r+0x184>
 802b864:	b13e      	cbz	r6, 802b876 <__ssvfscanf_r+0x602>
 802b866:	4580      	cmp	r8, r0
 802b868:	d905      	bls.n	802b876 <__ssvfscanf_r+0x602>
 802b86a:	4601      	mov	r1, r0
 802b86c:	6830      	ldr	r0, [r6, #0]
 802b86e:	f001 fb0b 	bl	802ce88 <realloc>
 802b872:	b100      	cbz	r0, 802b876 <__ssvfscanf_r+0x602>
 802b874:	6030      	str	r0, [r6, #0]
 802b876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b878:	442b      	add	r3, r5
 802b87a:	633b      	str	r3, [r7, #48]	@ 0x30
 802b87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b87e:	3301      	adds	r3, #1
 802b880:	627b      	str	r3, [r7, #36]	@ 0x24
 802b882:	464d      	mov	r5, r9
 802b884:	e511      	b.n	802b2aa <__ssvfscanf_r+0x36>
 802b886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b888:	2b00      	cmp	r3, #0
 802b88a:	bf08      	it	eq
 802b88c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802b890:	f016 0801 	ands.w	r8, r6, #1
 802b894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b896:	f006 0a10 	and.w	sl, r6, #16
 802b89a:	f000 8101 	beq.w	802baa0 <__ssvfscanf_r+0x82c>
 802b89e:	f1ba 0f00 	cmp.w	sl, #0
 802b8a2:	f040 80a4 	bne.w	802b9ee <__ssvfscanf_r+0x77a>
 802b8a6:	462b      	mov	r3, r5
 802b8a8:	f853 5b04 	ldr.w	r5, [r3], #4
 802b8ac:	60fb      	str	r3, [r7, #12]
 802b8ae:	0633      	lsls	r3, r6, #24
 802b8b0:	f140 80a5 	bpl.w	802b9fe <__ssvfscanf_r+0x78a>
 802b8b4:	2d00      	cmp	r5, #0
 802b8b6:	f43f ae9b 	beq.w	802b5f0 <__ssvfscanf_r+0x37c>
 802b8ba:	2080      	movs	r0, #128	@ 0x80
 802b8bc:	f7f7 fbd6 	bl	802306c <malloc>
 802b8c0:	4680      	mov	r8, r0
 802b8c2:	2800      	cmp	r0, #0
 802b8c4:	f43f ae91 	beq.w	802b5ea <__ssvfscanf_r+0x376>
 802b8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b8ca:	6028      	str	r0, [r5, #0]
 802b8cc:	88de      	ldrh	r6, [r3, #6]
 802b8ce:	889b      	ldrh	r3, [r3, #4]
 802b8d0:	429e      	cmp	r6, r3
 802b8d2:	d314      	bcc.n	802b8fe <__ssvfscanf_r+0x68a>
 802b8d4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802b8d8:	4293      	cmp	r3, r2
 802b8da:	f200 8633 	bhi.w	802c544 <__ssvfscanf_r+0x12d0>
 802b8de:	3308      	adds	r3, #8
 802b8e0:	fa1f f983 	uxth.w	r9, r3
 802b8e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b8e6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802b8ea:	6818      	ldr	r0, [r3, #0]
 802b8ec:	f001 facc 	bl	802ce88 <realloc>
 802b8f0:	2800      	cmp	r0, #0
 802b8f2:	f000 8627 	beq.w	802c544 <__ssvfscanf_r+0x12d0>
 802b8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b8f8:	6018      	str	r0, [r3, #0]
 802b8fa:	f8a3 9004 	strh.w	r9, [r3, #4]
 802b8fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b900:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802b902:	681b      	ldr	r3, [r3, #0]
 802b904:	1c72      	adds	r2, r6, #1
 802b906:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 802b90a:	46ab      	mov	fp, r5
 802b90c:	80ca      	strh	r2, [r1, #6]
 802b90e:	4645      	mov	r5, r8
 802b910:	f04f 0920 	mov.w	r9, #32
 802b914:	2600      	movs	r6, #0
 802b916:	f7fb fca7 	bl	8027268 <__locale_mb_cur_max>
 802b91a:	42b0      	cmp	r0, r6
 802b91c:	f43f ad6c 	beq.w	802b3f8 <__ssvfscanf_r+0x184>
 802b920:	1c73      	adds	r3, r6, #1
 802b922:	613b      	str	r3, [r7, #16]
 802b924:	6823      	ldr	r3, [r4, #0]
 802b926:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802b92a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b92e:	558a      	strb	r2, [r1, r6]
 802b930:	6862      	ldr	r2, [r4, #4]
 802b932:	3a01      	subs	r2, #1
 802b934:	e9c4 3200 	strd	r3, r2, [r4]
 802b938:	6a3b      	ldr	r3, [r7, #32]
 802b93a:	2b03      	cmp	r3, #3
 802b93c:	d102      	bne.n	802b944 <__ssvfscanf_r+0x6d0>
 802b93e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b940:	2b04      	cmp	r3, #4
 802b942:	d005      	beq.n	802b950 <__ssvfscanf_r+0x6dc>
 802b944:	2208      	movs	r2, #8
 802b946:	2100      	movs	r1, #0
 802b948:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802b94c:	f7fa fb04 	bl	8025f58 <memset>
 802b950:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802b954:	9300      	str	r3, [sp, #0]
 802b956:	693b      	ldr	r3, [r7, #16]
 802b958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b95a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802b95e:	4629      	mov	r1, r5
 802b960:	f002 fe30 	bl	802e5c4 <_mbrtowc_r>
 802b964:	1c46      	adds	r6, r0, #1
 802b966:	6238      	str	r0, [r7, #32]
 802b968:	f43f ad46 	beq.w	802b3f8 <__ssvfscanf_r+0x184>
 802b96c:	2800      	cmp	r0, #0
 802b96e:	d14a      	bne.n	802ba06 <__ssvfscanf_r+0x792>
 802b970:	6028      	str	r0, [r5, #0]
 802b972:	682e      	ldr	r6, [r5, #0]
 802b974:	1c70      	adds	r0, r6, #1
 802b976:	d056      	beq.n	802ba26 <__ssvfscanf_r+0x7b2>
 802b978:	2208      	movs	r2, #8
 802b97a:	2100      	movs	r1, #0
 802b97c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802b980:	f7fa faea 	bl	8025f58 <memset>
 802b984:	4b9a      	ldr	r3, [pc, #616]	@ (802bbf0 <__ssvfscanf_r+0x97c>)
 802b986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802b98c:	60bb      	str	r3, [r7, #8]
 802b98e:	4632      	mov	r2, r6
 802b990:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802b994:	68be      	ldr	r6, [r7, #8]
 802b996:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 802b99a:	47b0      	blx	r6
 802b99c:	2801      	cmp	r0, #1
 802b99e:	d144      	bne.n	802ba2a <__ssvfscanf_r+0x7b6>
 802b9a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 802b9a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802b9a8:	5c9b      	ldrb	r3, [r3, r2]
 802b9aa:	2b00      	cmp	r3, #0
 802b9ac:	d148      	bne.n	802ba40 <__ssvfscanf_r+0x7cc>
 802b9ae:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 802b9b2:	693b      	ldr	r3, [r7, #16]
 802b9b4:	2b00      	cmp	r3, #0
 802b9b6:	d13a      	bne.n	802ba2e <__ssvfscanf_r+0x7ba>
 802b9b8:	f1ba 0f00 	cmp.w	sl, #0
 802b9bc:	d115      	bne.n	802b9ea <__ssvfscanf_r+0x776>
 802b9be:	f8c5 a000 	str.w	sl, [r5]
 802b9c2:	f1bb 0f00 	cmp.w	fp, #0
 802b9c6:	d00d      	beq.n	802b9e4 <__ssvfscanf_r+0x770>
 802b9c8:	eba5 0108 	sub.w	r1, r5, r8
 802b9cc:	108b      	asrs	r3, r1, #2
 802b9ce:	3301      	adds	r3, #1
 802b9d0:	4599      	cmp	r9, r3
 802b9d2:	d907      	bls.n	802b9e4 <__ssvfscanf_r+0x770>
 802b9d4:	f8db 0000 	ldr.w	r0, [fp]
 802b9d8:	3104      	adds	r1, #4
 802b9da:	f001 fa55 	bl	802ce88 <realloc>
 802b9de:	b108      	cbz	r0, 802b9e4 <__ssvfscanf_r+0x770>
 802b9e0:	f8cb 0000 	str.w	r0, [fp]
 802b9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b9e6:	3301      	adds	r3, #1
 802b9e8:	627b      	str	r3, [r7, #36]	@ 0x24
 802b9ea:	68fd      	ldr	r5, [r7, #12]
 802b9ec:	e45d      	b.n	802b2aa <__ssvfscanf_r+0x36>
 802b9ee:	f04f 0900 	mov.w	r9, #0
 802b9f2:	60fd      	str	r5, [r7, #12]
 802b9f4:	46c8      	mov	r8, r9
 802b9f6:	46cb      	mov	fp, r9
 802b9f8:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 802b9fc:	e78a      	b.n	802b914 <__ssvfscanf_r+0x6a0>
 802b9fe:	46d1      	mov	r9, sl
 802ba00:	46d0      	mov	r8, sl
 802ba02:	46d3      	mov	fp, sl
 802ba04:	e786      	b.n	802b914 <__ssvfscanf_r+0x6a0>
 802ba06:	6a3b      	ldr	r3, [r7, #32]
 802ba08:	3302      	adds	r3, #2
 802ba0a:	d1b2      	bne.n	802b972 <__ssvfscanf_r+0x6fe>
 802ba0c:	693e      	ldr	r6, [r7, #16]
 802ba0e:	6863      	ldr	r3, [r4, #4]
 802ba10:	2b00      	cmp	r3, #0
 802ba12:	dc40      	bgt.n	802ba96 <__ssvfscanf_r+0x822>
 802ba14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802ba16:	4621      	mov	r1, r4
 802ba18:	f7fd fa75 	bl	8028f06 <__ssrefill_r>
 802ba1c:	2800      	cmp	r0, #0
 802ba1e:	d03a      	beq.n	802ba96 <__ssvfscanf_r+0x822>
 802ba20:	2e00      	cmp	r6, #0
 802ba22:	d0c9      	beq.n	802b9b8 <__ssvfscanf_r+0x744>
 802ba24:	e4e8      	b.n	802b3f8 <__ssvfscanf_r+0x184>
 802ba26:	4632      	mov	r2, r6
 802ba28:	e7bc      	b.n	802b9a4 <__ssvfscanf_r+0x730>
 802ba2a:	2200      	movs	r2, #0
 802ba2c:	e7ba      	b.n	802b9a4 <__ssvfscanf_r+0x730>
 802ba2e:	693b      	ldr	r3, [r7, #16]
 802ba30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802ba32:	3b01      	subs	r3, #1
 802ba34:	4622      	mov	r2, r4
 802ba36:	5cf1      	ldrb	r1, [r6, r3]
 802ba38:	613b      	str	r3, [r7, #16]
 802ba3a:	f7fd fa29 	bl	8028e90 <_sungetc_r>
 802ba3e:	e7b8      	b.n	802b9b2 <__ssvfscanf_r+0x73e>
 802ba40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802ba42:	693a      	ldr	r2, [r7, #16]
 802ba44:	4413      	add	r3, r2
 802ba46:	633b      	str	r3, [r7, #48]	@ 0x30
 802ba48:	6a3b      	ldr	r3, [r7, #32]
 802ba4a:	2b03      	cmp	r3, #3
 802ba4c:	d102      	bne.n	802ba54 <__ssvfscanf_r+0x7e0>
 802ba4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802ba50:	2b04      	cmp	r3, #4
 802ba52:	d002      	beq.n	802ba5a <__ssvfscanf_r+0x7e6>
 802ba54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802ba56:	3b01      	subs	r3, #1
 802ba58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802ba5a:	f1ba 0f00 	cmp.w	sl, #0
 802ba5e:	d118      	bne.n	802ba92 <__ssvfscanf_r+0x81e>
 802ba60:	3504      	adds	r5, #4
 802ba62:	f1bb 0f00 	cmp.w	fp, #0
 802ba66:	d014      	beq.n	802ba92 <__ssvfscanf_r+0x81e>
 802ba68:	eba5 0608 	sub.w	r6, r5, r8
 802ba6c:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802ba70:	d80d      	bhi.n	802ba8e <__ssvfscanf_r+0x81a>
 802ba72:	4640      	mov	r0, r8
 802ba74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802ba78:	f001 fa06 	bl	802ce88 <realloc>
 802ba7c:	4680      	mov	r8, r0
 802ba7e:	2800      	cmp	r0, #0
 802ba80:	f43f adb3 	beq.w	802b5ea <__ssvfscanf_r+0x376>
 802ba84:	1985      	adds	r5, r0, r6
 802ba86:	f8cb 0000 	str.w	r0, [fp]
 802ba8a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802ba8e:	4656      	mov	r6, sl
 802ba90:	e7bd      	b.n	802ba0e <__ssvfscanf_r+0x79a>
 802ba92:	2600      	movs	r6, #0
 802ba94:	e7bb      	b.n	802ba0e <__ssvfscanf_r+0x79a>
 802ba96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802ba98:	2b00      	cmp	r3, #0
 802ba9a:	f47f af3c 	bne.w	802b916 <__ssvfscanf_r+0x6a2>
 802ba9e:	e78b      	b.n	802b9b8 <__ssvfscanf_r+0x744>
 802baa0:	f1ba 0f00 	cmp.w	sl, #0
 802baa4:	d01e      	beq.n	802bae4 <__ssvfscanf_r+0x870>
 802baa6:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 802baaa:	6823      	ldr	r3, [r4, #0]
 802baac:	781a      	ldrb	r2, [r3, #0]
 802baae:	5cb2      	ldrb	r2, [r6, r2]
 802bab0:	b91a      	cbnz	r2, 802baba <__ssvfscanf_r+0x846>
 802bab2:	f1b8 0f00 	cmp.w	r8, #0
 802bab6:	d112      	bne.n	802bade <__ssvfscanf_r+0x86a>
 802bab8:	e4d2      	b.n	802b460 <__ssvfscanf_r+0x1ec>
 802baba:	3301      	adds	r3, #1
 802babc:	6862      	ldr	r2, [r4, #4]
 802babe:	6023      	str	r3, [r4, #0]
 802bac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bac2:	f108 0801 	add.w	r8, r8, #1
 802bac6:	3a01      	subs	r2, #1
 802bac8:	4543      	cmp	r3, r8
 802baca:	6062      	str	r2, [r4, #4]
 802bacc:	d007      	beq.n	802bade <__ssvfscanf_r+0x86a>
 802bace:	2a00      	cmp	r2, #0
 802bad0:	dceb      	bgt.n	802baaa <__ssvfscanf_r+0x836>
 802bad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bad4:	4621      	mov	r1, r4
 802bad6:	f7fd fa16 	bl	8028f06 <__ssrefill_r>
 802bada:	2800      	cmp	r0, #0
 802badc:	d0e5      	beq.n	802baaa <__ssvfscanf_r+0x836>
 802bade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802bae0:	4443      	add	r3, r8
 802bae2:	e674      	b.n	802b7ce <__ssvfscanf_r+0x55a>
 802bae4:	46a9      	mov	r9, r5
 802bae6:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802baea:	f859 8b04 	ldr.w	r8, [r9], #4
 802baee:	d07d      	beq.n	802bbec <__ssvfscanf_r+0x978>
 802baf0:	f1b8 0f00 	cmp.w	r8, #0
 802baf4:	f43f acb4 	beq.w	802b460 <__ssvfscanf_r+0x1ec>
 802baf8:	2020      	movs	r0, #32
 802bafa:	f7f7 fab7 	bl	802306c <malloc>
 802bafe:	4606      	mov	r6, r0
 802bb00:	2800      	cmp	r0, #0
 802bb02:	f43f ac7e 	beq.w	802b402 <__ssvfscanf_r+0x18e>
 802bb06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bb08:	f8c8 0000 	str.w	r0, [r8]
 802bb0c:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 802bb10:	889d      	ldrh	r5, [r3, #4]
 802bb12:	45aa      	cmp	sl, r5
 802bb14:	d311      	bcc.n	802bb3a <__ssvfscanf_r+0x8c6>
 802bb16:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802bb1a:	429d      	cmp	r5, r3
 802bb1c:	f200 8512 	bhi.w	802c544 <__ssvfscanf_r+0x12d0>
 802bb20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bb22:	3508      	adds	r5, #8
 802bb24:	b2ad      	uxth	r5, r5
 802bb26:	6818      	ldr	r0, [r3, #0]
 802bb28:	00a9      	lsls	r1, r5, #2
 802bb2a:	f001 f9ad 	bl	802ce88 <realloc>
 802bb2e:	2800      	cmp	r0, #0
 802bb30:	f000 8508 	beq.w	802c544 <__ssvfscanf_r+0x12d0>
 802bb34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bb36:	6018      	str	r0, [r3, #0]
 802bb38:	809d      	strh	r5, [r3, #4]
 802bb3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bb3c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802bb3e:	681b      	ldr	r3, [r3, #0]
 802bb40:	f10a 0201 	add.w	r2, sl, #1
 802bb44:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 802bb48:	80ca      	strh	r2, [r1, #6]
 802bb4a:	46c2      	mov	sl, r8
 802bb4c:	46b0      	mov	r8, r6
 802bb4e:	2620      	movs	r6, #32
 802bb50:	4645      	mov	r5, r8
 802bb52:	6823      	ldr	r3, [r4, #0]
 802bb54:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 802bb58:	781a      	ldrb	r2, [r3, #0]
 802bb5a:	5c8a      	ldrb	r2, [r1, r2]
 802bb5c:	b35a      	cbz	r2, 802bbb6 <__ssvfscanf_r+0x942>
 802bb5e:	6862      	ldr	r2, [r4, #4]
 802bb60:	3a01      	subs	r2, #1
 802bb62:	6062      	str	r2, [r4, #4]
 802bb64:	1c5a      	adds	r2, r3, #1
 802bb66:	6022      	str	r2, [r4, #0]
 802bb68:	781b      	ldrb	r3, [r3, #0]
 802bb6a:	f808 3b01 	strb.w	r3, [r8], #1
 802bb6e:	f1ba 0f00 	cmp.w	sl, #0
 802bb72:	d010      	beq.n	802bb96 <__ssvfscanf_r+0x922>
 802bb74:	eba8 0b05 	sub.w	fp, r8, r5
 802bb78:	45b3      	cmp	fp, r6
 802bb7a:	d30c      	bcc.n	802bb96 <__ssvfscanf_r+0x922>
 802bb7c:	0076      	lsls	r6, r6, #1
 802bb7e:	4628      	mov	r0, r5
 802bb80:	4631      	mov	r1, r6
 802bb82:	f001 f981 	bl	802ce88 <realloc>
 802bb86:	4605      	mov	r5, r0
 802bb88:	2800      	cmp	r0, #0
 802bb8a:	f43f ac3a 	beq.w	802b402 <__ssvfscanf_r+0x18e>
 802bb8e:	eb00 080b 	add.w	r8, r0, fp
 802bb92:	f8ca 0000 	str.w	r0, [sl]
 802bb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bb98:	3b01      	subs	r3, #1
 802bb9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802bb9c:	d00b      	beq.n	802bbb6 <__ssvfscanf_r+0x942>
 802bb9e:	6863      	ldr	r3, [r4, #4]
 802bba0:	2b00      	cmp	r3, #0
 802bba2:	dcd6      	bgt.n	802bb52 <__ssvfscanf_r+0x8de>
 802bba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bba6:	4621      	mov	r1, r4
 802bba8:	f7fd f9ad 	bl	8028f06 <__ssrefill_r>
 802bbac:	2800      	cmp	r0, #0
 802bbae:	d0d0      	beq.n	802bb52 <__ssvfscanf_r+0x8de>
 802bbb0:	45a8      	cmp	r8, r5
 802bbb2:	f43f ac21 	beq.w	802b3f8 <__ssvfscanf_r+0x184>
 802bbb6:	ebb8 0505 	subs.w	r5, r8, r5
 802bbba:	f43f ac51 	beq.w	802b460 <__ssvfscanf_r+0x1ec>
 802bbbe:	2300      	movs	r3, #0
 802bbc0:	f888 3000 	strb.w	r3, [r8]
 802bbc4:	f1ba 0f00 	cmp.w	sl, #0
 802bbc8:	d009      	beq.n	802bbde <__ssvfscanf_r+0x96a>
 802bbca:	1c69      	adds	r1, r5, #1
 802bbcc:	428e      	cmp	r6, r1
 802bbce:	d906      	bls.n	802bbde <__ssvfscanf_r+0x96a>
 802bbd0:	f8da 0000 	ldr.w	r0, [sl]
 802bbd4:	f001 f958 	bl	802ce88 <realloc>
 802bbd8:	b108      	cbz	r0, 802bbde <__ssvfscanf_r+0x96a>
 802bbda:	f8ca 0000 	str.w	r0, [sl]
 802bbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bbe0:	3301      	adds	r3, #1
 802bbe2:	627b      	str	r3, [r7, #36]	@ 0x24
 802bbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802bbe6:	442b      	add	r3, r5
 802bbe8:	633b      	str	r3, [r7, #48]	@ 0x30
 802bbea:	e64a      	b.n	802b882 <__ssvfscanf_r+0x60e>
 802bbec:	46b2      	mov	sl, r6
 802bbee:	e7af      	b.n	802bb50 <__ssvfscanf_r+0x8dc>
 802bbf0:	200006d4 	.word	0x200006d4
 802bbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bbf6:	2b00      	cmp	r3, #0
 802bbf8:	bf08      	it	eq
 802bbfa:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802bbfe:	f016 0901 	ands.w	r9, r6, #1
 802bc02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802bc04:	f006 0810 	and.w	r8, r6, #16
 802bc08:	f000 80ef 	beq.w	802bdea <__ssvfscanf_r+0xb76>
 802bc0c:	f1b8 0f00 	cmp.w	r8, #0
 802bc10:	f040 8098 	bne.w	802bd44 <__ssvfscanf_r+0xad0>
 802bc14:	462b      	mov	r3, r5
 802bc16:	0631      	lsls	r1, r6, #24
 802bc18:	f853 5b04 	ldr.w	r5, [r3], #4
 802bc1c:	613b      	str	r3, [r7, #16]
 802bc1e:	f140 8099 	bpl.w	802bd54 <__ssvfscanf_r+0xae0>
 802bc22:	2d00      	cmp	r5, #0
 802bc24:	f43f ace4 	beq.w	802b5f0 <__ssvfscanf_r+0x37c>
 802bc28:	2080      	movs	r0, #128	@ 0x80
 802bc2a:	f7f7 fa1f 	bl	802306c <malloc>
 802bc2e:	4606      	mov	r6, r0
 802bc30:	2800      	cmp	r0, #0
 802bc32:	f43f acda 	beq.w	802b5ea <__ssvfscanf_r+0x376>
 802bc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bc38:	6028      	str	r0, [r5, #0]
 802bc3a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 802bc3e:	889b      	ldrh	r3, [r3, #4]
 802bc40:	4599      	cmp	r9, r3
 802bc42:	d314      	bcc.n	802bc6e <__ssvfscanf_r+0x9fa>
 802bc44:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802bc48:	4293      	cmp	r3, r2
 802bc4a:	f200 847b 	bhi.w	802c544 <__ssvfscanf_r+0x12d0>
 802bc4e:	3308      	adds	r3, #8
 802bc50:	fa1f fa83 	uxth.w	sl, r3
 802bc54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bc56:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802bc5a:	6818      	ldr	r0, [r3, #0]
 802bc5c:	f001 f914 	bl	802ce88 <realloc>
 802bc60:	2800      	cmp	r0, #0
 802bc62:	f000 846f 	beq.w	802c544 <__ssvfscanf_r+0x12d0>
 802bc66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bc68:	6018      	str	r0, [r3, #0]
 802bc6a:	f8a3 a004 	strh.w	sl, [r3, #4]
 802bc6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bc70:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802bc72:	681b      	ldr	r3, [r3, #0]
 802bc74:	f109 0201 	add.w	r2, r9, #1
 802bc78:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802bc7c:	46aa      	mov	sl, r5
 802bc7e:	80ca      	strh	r2, [r1, #6]
 802bc80:	4635      	mov	r5, r6
 802bc82:	f04f 0920 	mov.w	r9, #32
 802bc86:	2300      	movs	r3, #0
 802bc88:	6822      	ldr	r2, [r4, #0]
 802bc8a:	49a7      	ldr	r1, [pc, #668]	@ (802bf28 <__ssvfscanf_r+0xcb4>)
 802bc8c:	7812      	ldrb	r2, [r2, #0]
 802bc8e:	5c8a      	ldrb	r2, [r1, r2]
 802bc90:	0710      	lsls	r0, r2, #28
 802bc92:	d43c      	bmi.n	802bd0e <__ssvfscanf_r+0xa9a>
 802bc94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802bc96:	2a00      	cmp	r2, #0
 802bc98:	d039      	beq.n	802bd0e <__ssvfscanf_r+0xa9a>
 802bc9a:	60fb      	str	r3, [r7, #12]
 802bc9c:	f7fb fae4 	bl	8027268 <__locale_mb_cur_max>
 802bca0:	68fb      	ldr	r3, [r7, #12]
 802bca2:	4298      	cmp	r0, r3
 802bca4:	f43f aba8 	beq.w	802b3f8 <__ssvfscanf_r+0x184>
 802bca8:	6822      	ldr	r2, [r4, #0]
 802bcaa:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802bcae:	f812 0b01 	ldrb.w	r0, [r2], #1
 802bcb2:	54c8      	strb	r0, [r1, r3]
 802bcb4:	f103 0b01 	add.w	fp, r3, #1
 802bcb8:	6863      	ldr	r3, [r4, #4]
 802bcba:	3b01      	subs	r3, #1
 802bcbc:	e9c4 2300 	strd	r2, r3, [r4]
 802bcc0:	6a3b      	ldr	r3, [r7, #32]
 802bcc2:	2b03      	cmp	r3, #3
 802bcc4:	d102      	bne.n	802bccc <__ssvfscanf_r+0xa58>
 802bcc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bcc8:	2b04      	cmp	r3, #4
 802bcca:	d005      	beq.n	802bcd8 <__ssvfscanf_r+0xa64>
 802bccc:	2208      	movs	r2, #8
 802bcce:	2100      	movs	r1, #0
 802bcd0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802bcd4:	f7fa f940 	bl	8025f58 <memset>
 802bcd8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802bcdc:	9300      	str	r3, [sp, #0]
 802bcde:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802bce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bce4:	465b      	mov	r3, fp
 802bce6:	4629      	mov	r1, r5
 802bce8:	f002 fc6c 	bl	802e5c4 <_mbrtowc_r>
 802bcec:	1c42      	adds	r2, r0, #1
 802bcee:	6238      	str	r0, [r7, #32]
 802bcf0:	f43f ab82 	beq.w	802b3f8 <__ssvfscanf_r+0x184>
 802bcf4:	bb90      	cbnz	r0, 802bd5c <__ssvfscanf_r+0xae8>
 802bcf6:	6028      	str	r0, [r5, #0]
 802bcf8:	6828      	ldr	r0, [r5, #0]
 802bcfa:	f002 fc7d 	bl	802e5f8 <iswspace>
 802bcfe:	4603      	mov	r3, r0
 802bd00:	2800      	cmp	r0, #0
 802bd02:	d047      	beq.n	802bd94 <__ssvfscanf_r+0xb20>
 802bd04:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802bd08:	f1bb 0f00 	cmp.w	fp, #0
 802bd0c:	d139      	bne.n	802bd82 <__ssvfscanf_r+0xb0e>
 802bd0e:	f1b8 0f00 	cmp.w	r8, #0
 802bd12:	d114      	bne.n	802bd3e <__ssvfscanf_r+0xaca>
 802bd14:	f8c5 8000 	str.w	r8, [r5]
 802bd18:	f1ba 0f00 	cmp.w	sl, #0
 802bd1c:	d00c      	beq.n	802bd38 <__ssvfscanf_r+0xac4>
 802bd1e:	1ba9      	subs	r1, r5, r6
 802bd20:	108b      	asrs	r3, r1, #2
 802bd22:	3301      	adds	r3, #1
 802bd24:	4599      	cmp	r9, r3
 802bd26:	d907      	bls.n	802bd38 <__ssvfscanf_r+0xac4>
 802bd28:	f8da 0000 	ldr.w	r0, [sl]
 802bd2c:	3104      	adds	r1, #4
 802bd2e:	f001 f8ab 	bl	802ce88 <realloc>
 802bd32:	b108      	cbz	r0, 802bd38 <__ssvfscanf_r+0xac4>
 802bd34:	f8ca 0000 	str.w	r0, [sl]
 802bd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bd3a:	3301      	adds	r3, #1
 802bd3c:	627b      	str	r3, [r7, #36]	@ 0x24
 802bd3e:	693d      	ldr	r5, [r7, #16]
 802bd40:	f7ff bab3 	b.w	802b2aa <__ssvfscanf_r+0x36>
 802bd44:	f04f 0900 	mov.w	r9, #0
 802bd48:	613d      	str	r5, [r7, #16]
 802bd4a:	464e      	mov	r6, r9
 802bd4c:	46ca      	mov	sl, r9
 802bd4e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 802bd52:	e798      	b.n	802bc86 <__ssvfscanf_r+0xa12>
 802bd54:	46c1      	mov	r9, r8
 802bd56:	4646      	mov	r6, r8
 802bd58:	46c2      	mov	sl, r8
 802bd5a:	e794      	b.n	802bc86 <__ssvfscanf_r+0xa12>
 802bd5c:	6a3b      	ldr	r3, [r7, #32]
 802bd5e:	3302      	adds	r3, #2
 802bd60:	d1ca      	bne.n	802bcf8 <__ssvfscanf_r+0xa84>
 802bd62:	465b      	mov	r3, fp
 802bd64:	6862      	ldr	r2, [r4, #4]
 802bd66:	2a00      	cmp	r2, #0
 802bd68:	dc8e      	bgt.n	802bc88 <__ssvfscanf_r+0xa14>
 802bd6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bd6c:	60fb      	str	r3, [r7, #12]
 802bd6e:	4621      	mov	r1, r4
 802bd70:	f7fd f8c9 	bl	8028f06 <__ssrefill_r>
 802bd74:	68fb      	ldr	r3, [r7, #12]
 802bd76:	2800      	cmp	r0, #0
 802bd78:	d086      	beq.n	802bc88 <__ssvfscanf_r+0xa14>
 802bd7a:	2b00      	cmp	r3, #0
 802bd7c:	f47f ab3c 	bne.w	802b3f8 <__ssvfscanf_r+0x184>
 802bd80:	e7c5      	b.n	802bd0e <__ssvfscanf_r+0xa9a>
 802bd82:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802bd86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bd88:	f813 100b 	ldrb.w	r1, [r3, fp]
 802bd8c:	4622      	mov	r2, r4
 802bd8e:	f7fd f87f 	bl	8028e90 <_sungetc_r>
 802bd92:	e7b7      	b.n	802bd04 <__ssvfscanf_r+0xa90>
 802bd94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802bd96:	445a      	add	r2, fp
 802bd98:	633a      	str	r2, [r7, #48]	@ 0x30
 802bd9a:	6a3a      	ldr	r2, [r7, #32]
 802bd9c:	2a03      	cmp	r2, #3
 802bd9e:	d102      	bne.n	802bda6 <__ssvfscanf_r+0xb32>
 802bda0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bda2:	2a04      	cmp	r2, #4
 802bda4:	d002      	beq.n	802bdac <__ssvfscanf_r+0xb38>
 802bda6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802bda8:	3a01      	subs	r2, #1
 802bdaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802bdac:	f1b8 0f00 	cmp.w	r8, #0
 802bdb0:	d1d8      	bne.n	802bd64 <__ssvfscanf_r+0xaf0>
 802bdb2:	3504      	adds	r5, #4
 802bdb4:	f1ba 0f00 	cmp.w	sl, #0
 802bdb8:	d015      	beq.n	802bde6 <__ssvfscanf_r+0xb72>
 802bdba:	eba5 0b06 	sub.w	fp, r5, r6
 802bdbe:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 802bdc2:	d80e      	bhi.n	802bde2 <__ssvfscanf_r+0xb6e>
 802bdc4:	4630      	mov	r0, r6
 802bdc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802bdca:	f001 f85d 	bl	802ce88 <realloc>
 802bdce:	4606      	mov	r6, r0
 802bdd0:	2800      	cmp	r0, #0
 802bdd2:	f43f ac0a 	beq.w	802b5ea <__ssvfscanf_r+0x376>
 802bdd6:	eb00 050b 	add.w	r5, r0, fp
 802bdda:	f8ca 0000 	str.w	r0, [sl]
 802bdde:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802bde2:	4643      	mov	r3, r8
 802bde4:	e7be      	b.n	802bd64 <__ssvfscanf_r+0xaf0>
 802bde6:	4653      	mov	r3, sl
 802bde8:	e7bc      	b.n	802bd64 <__ssvfscanf_r+0xaf0>
 802bdea:	f1b8 0f00 	cmp.w	r8, #0
 802bdee:	d01a      	beq.n	802be26 <__ssvfscanf_r+0xbb2>
 802bdf0:	4e4d      	ldr	r6, [pc, #308]	@ (802bf28 <__ssvfscanf_r+0xcb4>)
 802bdf2:	6823      	ldr	r3, [r4, #0]
 802bdf4:	781a      	ldrb	r2, [r3, #0]
 802bdf6:	5cb2      	ldrb	r2, [r6, r2]
 802bdf8:	0711      	lsls	r1, r2, #28
 802bdfa:	d411      	bmi.n	802be20 <__ssvfscanf_r+0xbac>
 802bdfc:	3301      	adds	r3, #1
 802bdfe:	6862      	ldr	r2, [r4, #4]
 802be00:	6023      	str	r3, [r4, #0]
 802be02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802be04:	f109 0901 	add.w	r9, r9, #1
 802be08:	3a01      	subs	r2, #1
 802be0a:	454b      	cmp	r3, r9
 802be0c:	6062      	str	r2, [r4, #4]
 802be0e:	d007      	beq.n	802be20 <__ssvfscanf_r+0xbac>
 802be10:	2a00      	cmp	r2, #0
 802be12:	dcee      	bgt.n	802bdf2 <__ssvfscanf_r+0xb7e>
 802be14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802be16:	4621      	mov	r1, r4
 802be18:	f7fd f875 	bl	8028f06 <__ssrefill_r>
 802be1c:	2800      	cmp	r0, #0
 802be1e:	d0e8      	beq.n	802bdf2 <__ssvfscanf_r+0xb7e>
 802be20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802be22:	444b      	add	r3, r9
 802be24:	e4d3      	b.n	802b7ce <__ssvfscanf_r+0x55a>
 802be26:	46a8      	mov	r8, r5
 802be28:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802be2c:	f858 5b04 	ldr.w	r5, [r8], #4
 802be30:	d077      	beq.n	802bf22 <__ssvfscanf_r+0xcae>
 802be32:	2d00      	cmp	r5, #0
 802be34:	f43f ab14 	beq.w	802b460 <__ssvfscanf_r+0x1ec>
 802be38:	2020      	movs	r0, #32
 802be3a:	f7f7 f917 	bl	802306c <malloc>
 802be3e:	4681      	mov	r9, r0
 802be40:	2800      	cmp	r0, #0
 802be42:	f43f aade 	beq.w	802b402 <__ssvfscanf_r+0x18e>
 802be46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802be48:	6028      	str	r0, [r5, #0]
 802be4a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 802be4e:	889e      	ldrh	r6, [r3, #4]
 802be50:	45b2      	cmp	sl, r6
 802be52:	d311      	bcc.n	802be78 <__ssvfscanf_r+0xc04>
 802be54:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802be58:	429e      	cmp	r6, r3
 802be5a:	f200 8373 	bhi.w	802c544 <__ssvfscanf_r+0x12d0>
 802be5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802be60:	3608      	adds	r6, #8
 802be62:	b2b6      	uxth	r6, r6
 802be64:	6818      	ldr	r0, [r3, #0]
 802be66:	00b1      	lsls	r1, r6, #2
 802be68:	f001 f80e 	bl	802ce88 <realloc>
 802be6c:	2800      	cmp	r0, #0
 802be6e:	f000 8369 	beq.w	802c544 <__ssvfscanf_r+0x12d0>
 802be72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802be74:	6018      	str	r0, [r3, #0]
 802be76:	809e      	strh	r6, [r3, #4]
 802be78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802be7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802be7c:	681b      	ldr	r3, [r3, #0]
 802be7e:	f10a 0201 	add.w	r2, sl, #1
 802be82:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802be86:	80ca      	strh	r2, [r1, #6]
 802be88:	46aa      	mov	sl, r5
 802be8a:	2620      	movs	r6, #32
 802be8c:	464d      	mov	r5, r9
 802be8e:	46a9      	mov	r9, r5
 802be90:	6823      	ldr	r3, [r4, #0]
 802be92:	4925      	ldr	r1, [pc, #148]	@ (802bf28 <__ssvfscanf_r+0xcb4>)
 802be94:	781a      	ldrb	r2, [r3, #0]
 802be96:	5c8a      	ldrb	r2, [r1, r2]
 802be98:	0712      	lsls	r2, r2, #28
 802be9a:	d428      	bmi.n	802beee <__ssvfscanf_r+0xc7a>
 802be9c:	6862      	ldr	r2, [r4, #4]
 802be9e:	3a01      	subs	r2, #1
 802bea0:	6062      	str	r2, [r4, #4]
 802bea2:	1c5a      	adds	r2, r3, #1
 802bea4:	6022      	str	r2, [r4, #0]
 802bea6:	781b      	ldrb	r3, [r3, #0]
 802bea8:	f805 3b01 	strb.w	r3, [r5], #1
 802beac:	f1ba 0f00 	cmp.w	sl, #0
 802beb0:	d010      	beq.n	802bed4 <__ssvfscanf_r+0xc60>
 802beb2:	eba5 0b09 	sub.w	fp, r5, r9
 802beb6:	45b3      	cmp	fp, r6
 802beb8:	d30c      	bcc.n	802bed4 <__ssvfscanf_r+0xc60>
 802beba:	0076      	lsls	r6, r6, #1
 802bebc:	4648      	mov	r0, r9
 802bebe:	4631      	mov	r1, r6
 802bec0:	f000 ffe2 	bl	802ce88 <realloc>
 802bec4:	4681      	mov	r9, r0
 802bec6:	2800      	cmp	r0, #0
 802bec8:	f43f aa9b 	beq.w	802b402 <__ssvfscanf_r+0x18e>
 802becc:	eb00 050b 	add.w	r5, r0, fp
 802bed0:	f8ca 0000 	str.w	r0, [sl]
 802bed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bed6:	3b01      	subs	r3, #1
 802bed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802beda:	d008      	beq.n	802beee <__ssvfscanf_r+0xc7a>
 802bedc:	6863      	ldr	r3, [r4, #4]
 802bede:	2b00      	cmp	r3, #0
 802bee0:	dcd6      	bgt.n	802be90 <__ssvfscanf_r+0xc1c>
 802bee2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bee4:	4621      	mov	r1, r4
 802bee6:	f7fd f80e 	bl	8028f06 <__ssrefill_r>
 802beea:	2800      	cmp	r0, #0
 802beec:	d0d0      	beq.n	802be90 <__ssvfscanf_r+0xc1c>
 802beee:	2300      	movs	r3, #0
 802bef0:	702b      	strb	r3, [r5, #0]
 802bef2:	eba5 0509 	sub.w	r5, r5, r9
 802bef6:	f1ba 0f00 	cmp.w	sl, #0
 802befa:	d009      	beq.n	802bf10 <__ssvfscanf_r+0xc9c>
 802befc:	1c69      	adds	r1, r5, #1
 802befe:	428e      	cmp	r6, r1
 802bf00:	d906      	bls.n	802bf10 <__ssvfscanf_r+0xc9c>
 802bf02:	f8da 0000 	ldr.w	r0, [sl]
 802bf06:	f000 ffbf 	bl	802ce88 <realloc>
 802bf0a:	b108      	cbz	r0, 802bf10 <__ssvfscanf_r+0xc9c>
 802bf0c:	f8ca 0000 	str.w	r0, [sl]
 802bf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802bf12:	442b      	add	r3, r5
 802bf14:	633b      	str	r3, [r7, #48]	@ 0x30
 802bf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bf18:	3301      	adds	r3, #1
 802bf1a:	627b      	str	r3, [r7, #36]	@ 0x24
 802bf1c:	4645      	mov	r5, r8
 802bf1e:	f7ff b9c4 	b.w	802b2aa <__ssvfscanf_r+0x36>
 802bf22:	46b2      	mov	sl, r6
 802bf24:	e7b3      	b.n	802be8e <__ssvfscanf_r+0xc1a>
 802bf26:	bf00      	nop
 802bf28:	080343f5 	.word	0x080343f5
 802bf2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bf2e:	3b01      	subs	r3, #1
 802bf30:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 802bf34:	bf81      	itttt	hi
 802bf36:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 802bf38:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 802bf3c:	eb03 090c 	addhi.w	r9, r3, ip
 802bf40:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802bf44:	bf8c      	ite	hi
 802bf46:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 802bf48:	f04f 0900 	movls.w	r9, #0
 802bf4c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 802bf50:	f04f 0a00 	mov.w	sl, #0
 802bf54:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 802bf58:	6822      	ldr	r2, [r4, #0]
 802bf5a:	7813      	ldrb	r3, [r2, #0]
 802bf5c:	2b39      	cmp	r3, #57	@ 0x39
 802bf5e:	d80f      	bhi.n	802bf80 <__ssvfscanf_r+0xd0c>
 802bf60:	2b2a      	cmp	r3, #42	@ 0x2a
 802bf62:	d91a      	bls.n	802bf9a <__ssvfscanf_r+0xd26>
 802bf64:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802bf68:	290e      	cmp	r1, #14
 802bf6a:	d816      	bhi.n	802bf9a <__ssvfscanf_r+0xd26>
 802bf6c:	e8df f001 	tbb	[pc, r1]
 802bf70:	15781578 	.word	0x15781578
 802bf74:	68683f15 	.word	0x68683f15
 802bf78:	68686868 	.word	0x68686868
 802bf7c:	7068      	.short	0x7068
 802bf7e:	70          	.byte	0x70
 802bf7f:	00          	.byte	0x00
 802bf80:	2b66      	cmp	r3, #102	@ 0x66
 802bf82:	d832      	bhi.n	802bfea <__ssvfscanf_r+0xd76>
 802bf84:	2b60      	cmp	r3, #96	@ 0x60
 802bf86:	d803      	bhi.n	802bf90 <__ssvfscanf_r+0xd1c>
 802bf88:	2b46      	cmp	r3, #70	@ 0x46
 802bf8a:	d804      	bhi.n	802bf96 <__ssvfscanf_r+0xd22>
 802bf8c:	2b40      	cmp	r3, #64	@ 0x40
 802bf8e:	d904      	bls.n	802bf9a <__ssvfscanf_r+0xd26>
 802bf90:	69f9      	ldr	r1, [r7, #28]
 802bf92:	290a      	cmp	r1, #10
 802bf94:	e062      	b.n	802c05c <__ssvfscanf_r+0xde8>
 802bf96:	2b58      	cmp	r3, #88	@ 0x58
 802bf98:	d068      	beq.n	802c06c <__ssvfscanf_r+0xdf8>
 802bf9a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 802bf9e:	d011      	beq.n	802bfc4 <__ssvfscanf_r+0xd50>
 802bfa0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802bfa4:	4598      	cmp	r8, r3
 802bfa6:	d908      	bls.n	802bfba <__ssvfscanf_r+0xd46>
 802bfa8:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 802bfac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bfae:	4622      	mov	r2, r4
 802bfb0:	f7fc ff6e 	bl	8028e90 <_sungetc_r>
 802bfb4:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 802bfb8:	46c8      	mov	r8, r9
 802bfba:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802bfbe:	4598      	cmp	r8, r3
 802bfc0:	f43f aa4e 	beq.w	802b460 <__ssvfscanf_r+0x1ec>
 802bfc4:	f01b 0210 	ands.w	r2, fp, #16
 802bfc8:	d16c      	bne.n	802c0a4 <__ssvfscanf_r+0xe30>
 802bfca:	69fb      	ldr	r3, [r7, #28]
 802bfcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bfce:	69be      	ldr	r6, [r7, #24]
 802bfd0:	f888 2000 	strb.w	r2, [r8]
 802bfd4:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802bfd8:	47b0      	blx	r6
 802bfda:	f01b 0f20 	tst.w	fp, #32
 802bfde:	f105 0904 	add.w	r9, r5, #4
 802bfe2:	d056      	beq.n	802c092 <__ssvfscanf_r+0xe1e>
 802bfe4:	682b      	ldr	r3, [r5, #0]
 802bfe6:	6018      	str	r0, [r3, #0]
 802bfe8:	e058      	b.n	802c09c <__ssvfscanf_r+0xe28>
 802bfea:	2b78      	cmp	r3, #120	@ 0x78
 802bfec:	e7d4      	b.n	802bf98 <__ssvfscanf_r+0xd24>
 802bfee:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 802bff2:	d00a      	beq.n	802c00a <__ssvfscanf_r+0xd96>
 802bff4:	69f9      	ldr	r1, [r7, #28]
 802bff6:	b919      	cbnz	r1, 802c000 <__ssvfscanf_r+0xd8c>
 802bff8:	2108      	movs	r1, #8
 802bffa:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 802bffe:	61f9      	str	r1, [r7, #28]
 802c000:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 802c004:	d004      	beq.n	802c010 <__ssvfscanf_r+0xd9c>
 802c006:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 802c00a:	f808 3b01 	strb.w	r3, [r8], #1
 802c00e:	e00b      	b.n	802c028 <__ssvfscanf_r+0xdb4>
 802c010:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 802c014:	f1b9 0f00 	cmp.w	r9, #0
 802c018:	d004      	beq.n	802c024 <__ssvfscanf_r+0xdb0>
 802c01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c01c:	3301      	adds	r3, #1
 802c01e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802c022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802c024:	f10a 0a01 	add.w	sl, sl, #1
 802c028:	6863      	ldr	r3, [r4, #4]
 802c02a:	3b01      	subs	r3, #1
 802c02c:	2b00      	cmp	r3, #0
 802c02e:	6063      	str	r3, [r4, #4]
 802c030:	dd28      	ble.n	802c084 <__ssvfscanf_r+0xe10>
 802c032:	3201      	adds	r2, #1
 802c034:	6022      	str	r2, [r4, #0]
 802c036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c038:	3b01      	subs	r3, #1
 802c03a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802c03c:	d18c      	bne.n	802bf58 <__ssvfscanf_r+0xce4>
 802c03e:	e7ac      	b.n	802bf9a <__ssvfscanf_r+0xd26>
 802c040:	69f8      	ldr	r0, [r7, #28]
 802c042:	499b      	ldr	r1, [pc, #620]	@ (802c2b0 <__ssvfscanf_r+0x103c>)
 802c044:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802c048:	61f9      	str	r1, [r7, #28]
 802c04a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 802c04e:	e7dc      	b.n	802c00a <__ssvfscanf_r+0xd96>
 802c050:	69f8      	ldr	r0, [r7, #28]
 802c052:	4997      	ldr	r1, [pc, #604]	@ (802c2b0 <__ssvfscanf_r+0x103c>)
 802c054:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802c058:	61f9      	str	r1, [r7, #28]
 802c05a:	2908      	cmp	r1, #8
 802c05c:	dcf5      	bgt.n	802c04a <__ssvfscanf_r+0xdd6>
 802c05e:	e79c      	b.n	802bf9a <__ssvfscanf_r+0xd26>
 802c060:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 802c064:	d099      	beq.n	802bf9a <__ssvfscanf_r+0xd26>
 802c066:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 802c06a:	e7ce      	b.n	802c00a <__ssvfscanf_r+0xd96>
 802c06c:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 802c070:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802c074:	d191      	bne.n	802bf9a <__ssvfscanf_r+0xd26>
 802c076:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 802c07a:	2110      	movs	r1, #16
 802c07c:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 802c080:	61f9      	str	r1, [r7, #28]
 802c082:	e7c2      	b.n	802c00a <__ssvfscanf_r+0xd96>
 802c084:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c086:	4621      	mov	r1, r4
 802c088:	f7fc ff3d 	bl	8028f06 <__ssrefill_r>
 802c08c:	2800      	cmp	r0, #0
 802c08e:	d0d2      	beq.n	802c036 <__ssvfscanf_r+0xdc2>
 802c090:	e783      	b.n	802bf9a <__ssvfscanf_r+0xd26>
 802c092:	f01b 0f08 	tst.w	fp, #8
 802c096:	d00b      	beq.n	802c0b0 <__ssvfscanf_r+0xe3c>
 802c098:	682b      	ldr	r3, [r5, #0]
 802c09a:	7018      	strb	r0, [r3, #0]
 802c09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c09e:	3301      	adds	r3, #1
 802c0a0:	627b      	str	r3, [r7, #36]	@ 0x24
 802c0a2:	464d      	mov	r5, r9
 802c0a4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802c0a8:	eba8 0803 	sub.w	r8, r8, r3
 802c0ac:	44d0      	add	r8, sl
 802c0ae:	e516      	b.n	802bade <__ssvfscanf_r+0x86a>
 802c0b0:	f01b 0f04 	tst.w	fp, #4
 802c0b4:	d002      	beq.n	802c0bc <__ssvfscanf_r+0xe48>
 802c0b6:	682b      	ldr	r3, [r5, #0]
 802c0b8:	8018      	strh	r0, [r3, #0]
 802c0ba:	e7ef      	b.n	802c09c <__ssvfscanf_r+0xe28>
 802c0bc:	f01b 0201 	ands.w	r2, fp, #1
 802c0c0:	d190      	bne.n	802bfe4 <__ssvfscanf_r+0xd70>
 802c0c2:	f01b 0f02 	tst.w	fp, #2
 802c0c6:	d08d      	beq.n	802bfe4 <__ssvfscanf_r+0xd70>
 802c0c8:	4b7a      	ldr	r3, [pc, #488]	@ (802c2b4 <__ssvfscanf_r+0x1040>)
 802c0ca:	69b9      	ldr	r1, [r7, #24]
 802c0cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c0ce:	4299      	cmp	r1, r3
 802c0d0:	69fb      	ldr	r3, [r7, #28]
 802c0d2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802c0d6:	d105      	bne.n	802c0e4 <__ssvfscanf_r+0xe70>
 802c0d8:	f002 fa72 	bl	802e5c0 <_strtoull_r>
 802c0dc:	682b      	ldr	r3, [r5, #0]
 802c0de:	e9c3 0100 	strd	r0, r1, [r3]
 802c0e2:	e7db      	b.n	802c09c <__ssvfscanf_r+0xe28>
 802c0e4:	f002 f9c0 	bl	802e468 <_strtoll_r>
 802c0e8:	e7f8      	b.n	802c0dc <__ssvfscanf_r+0xe68>
 802c0ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c0ec:	f7fb f8c2 	bl	8027274 <_localeconv_r>
 802c0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c0f2:	6802      	ldr	r2, [r0, #0]
 802c0f4:	3b01      	subs	r3, #1
 802c0f6:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 802c0fa:	f04f 0800 	mov.w	r8, #0
 802c0fe:	bf88      	it	hi
 802c100:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 802c102:	f8c7 8010 	str.w	r8, [r7, #16]
 802c106:	e9c7 8802 	strd	r8, r8, [r7, #8]
 802c10a:	bf81      	itttt	hi
 802c10c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 802c110:	f240 115d 	movwhi	r1, #349	@ 0x15d
 802c114:	181b      	addhi	r3, r3, r0
 802c116:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 802c118:	bf98      	it	ls
 802c11a:	2300      	movls	r3, #0
 802c11c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 802c120:	46c3      	mov	fp, r8
 802c122:	46c2      	mov	sl, r8
 802c124:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 802c128:	6821      	ldr	r1, [r4, #0]
 802c12a:	6079      	str	r1, [r7, #4]
 802c12c:	7808      	ldrb	r0, [r1, #0]
 802c12e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 802c132:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 802c136:	f200 8123 	bhi.w	802c380 <__ssvfscanf_r+0x110c>
 802c13a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 802c13e:	0089      	.short	0x0089
 802c140:	00890121 	.word	0x00890121
 802c144:	01210121 	.word	0x01210121
 802c148:	006f004f 	.word	0x006f004f
 802c14c:	006f006f 	.word	0x006f006f
 802c150:	006f006f 	.word	0x006f006f
 802c154:	006f006f 	.word	0x006f006f
 802c158:	006f006f 	.word	0x006f006f
 802c15c:	01210121 	.word	0x01210121
 802c160:	01210121 	.word	0x01210121
 802c164:	01210121 	.word	0x01210121
 802c168:	00af0121 	.word	0x00af0121
 802c16c:	006d006d 	.word	0x006d006d
 802c170:	011e006d 	.word	0x011e006d
 802c174:	012100ed 	.word	0x012100ed
 802c178:	00d60121 	.word	0x00d60121
 802c17c:	01210121 	.word	0x01210121
 802c180:	01210121 	.word	0x01210121
 802c184:	01210090 	.word	0x01210090
 802c188:	01210104 	.word	0x01210104
 802c18c:	01210121 	.word	0x01210121
 802c190:	012100f8 	.word	0x012100f8
 802c194:	01210121 	.word	0x01210121
 802c198:	00fe0073 	.word	0x00fe0073
 802c19c:	01210121 	.word	0x01210121
 802c1a0:	01210121 	.word	0x01210121
 802c1a4:	01210121 	.word	0x01210121
 802c1a8:	00af0121 	.word	0x00af0121
 802c1ac:	006d006d 	.word	0x006d006d
 802c1b0:	011e006d 	.word	0x011e006d
 802c1b4:	012100ed 	.word	0x012100ed
 802c1b8:	00d60121 	.word	0x00d60121
 802c1bc:	01210121 	.word	0x01210121
 802c1c0:	01210121 	.word	0x01210121
 802c1c4:	01210090 	.word	0x01210090
 802c1c8:	01210104 	.word	0x01210104
 802c1cc:	01210121 	.word	0x01210121
 802c1d0:	012100f8 	.word	0x012100f8
 802c1d4:	01210121 	.word	0x01210121
 802c1d8:	00fe0073 	.word	0x00fe0073
 802c1dc:	05f1      	lsls	r1, r6, #23
 802c1de:	d51d      	bpl.n	802c21c <__ssvfscanf_r+0xfa8>
 802c1e0:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 802c1e4:	f10a 0a01 	add.w	sl, sl, #1
 802c1e8:	b11b      	cbz	r3, 802c1f2 <__ssvfscanf_r+0xf7e>
 802c1ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 802c1ec:	3001      	adds	r0, #1
 802c1ee:	3b01      	subs	r3, #1
 802c1f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 802c1f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802c1f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c1f6:	3001      	adds	r0, #1
 802c1f8:	6338      	str	r0, [r7, #48]	@ 0x30
 802c1fa:	6860      	ldr	r0, [r4, #4]
 802c1fc:	3801      	subs	r0, #1
 802c1fe:	3901      	subs	r1, #1
 802c200:	2800      	cmp	r0, #0
 802c202:	62f9      	str	r1, [r7, #44]	@ 0x2c
 802c204:	6060      	str	r0, [r4, #4]
 802c206:	f340 80cc 	ble.w	802c3a2 <__ssvfscanf_r+0x112e>
 802c20a:	6879      	ldr	r1, [r7, #4]
 802c20c:	3101      	adds	r1, #1
 802c20e:	6021      	str	r1, [r4, #0]
 802c210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c212:	2900      	cmp	r1, #0
 802c214:	d188      	bne.n	802c128 <__ssvfscanf_r+0xeb4>
 802c216:	e052      	b.n	802c2be <__ssvfscanf_r+0x104a>
 802c218:	0531      	lsls	r1, r6, #20
 802c21a:	d550      	bpl.n	802c2be <__ssvfscanf_r+0x104a>
 802c21c:	eb1b 0c08 	adds.w	ip, fp, r8
 802c220:	d041      	beq.n	802c2a6 <__ssvfscanf_r+0x1032>
 802c222:	e04c      	b.n	802c2be <__ssvfscanf_r+0x104a>
 802c224:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 802c228:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 802c22c:	d147      	bne.n	802c2be <__ssvfscanf_r+0x104a>
 802c22e:	f1ba 0f01 	cmp.w	sl, #1
 802c232:	d144      	bne.n	802c2be <__ssvfscanf_r+0x104a>
 802c234:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c236:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 802c23a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 802c23e:	3901      	subs	r1, #1
 802c240:	f809 cb01 	strb.w	ip, [r9], #1
 802c244:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 802c248:	62f9      	str	r1, [r7, #44]	@ 0x2c
 802c24a:	f04f 0a00 	mov.w	sl, #0
 802c24e:	e003      	b.n	802c258 <__ssvfscanf_r+0xfe4>
 802c250:	0631      	lsls	r1, r6, #24
 802c252:	d534      	bpl.n	802c2be <__ssvfscanf_r+0x104a>
 802c254:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 802c258:	f809 0b01 	strb.w	r0, [r9], #1
 802c25c:	e7c9      	b.n	802c1f2 <__ssvfscanf_r+0xf7e>
 802c25e:	f1bb 0f00 	cmp.w	fp, #0
 802c262:	d10c      	bne.n	802c27e <__ssvfscanf_r+0x100a>
 802c264:	f1ba 0f00 	cmp.w	sl, #0
 802c268:	d10d      	bne.n	802c286 <__ssvfscanf_r+0x1012>
 802c26a:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 802c26e:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 802c272:	d108      	bne.n	802c286 <__ssvfscanf_r+0x1012>
 802c274:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 802c278:	f04f 0b01 	mov.w	fp, #1
 802c27c:	e7ec      	b.n	802c258 <__ssvfscanf_r+0xfe4>
 802c27e:	f1bb 0f02 	cmp.w	fp, #2
 802c282:	f000 8088 	beq.w	802c396 <__ssvfscanf_r+0x1122>
 802c286:	f1b8 0f01 	cmp.w	r8, #1
 802c28a:	d002      	beq.n	802c292 <__ssvfscanf_r+0x101e>
 802c28c:	f1b8 0f04 	cmp.w	r8, #4
 802c290:	d115      	bne.n	802c2be <__ssvfscanf_r+0x104a>
 802c292:	f108 0801 	add.w	r8, r8, #1
 802c296:	fa5f f888 	uxtb.w	r8, r8
 802c29a:	e7dd      	b.n	802c258 <__ssvfscanf_r+0xfe4>
 802c29c:	0531      	lsls	r1, r6, #20
 802c29e:	d50b      	bpl.n	802c2b8 <__ssvfscanf_r+0x1044>
 802c2a0:	eb1b 0c08 	adds.w	ip, fp, r8
 802c2a4:	d108      	bne.n	802c2b8 <__ssvfscanf_r+0x1044>
 802c2a6:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 802c2aa:	46e0      	mov	r8, ip
 802c2ac:	46e3      	mov	fp, ip
 802c2ae:	e7d3      	b.n	802c258 <__ssvfscanf_r+0xfe4>
 802c2b0:	080345d4 	.word	0x080345d4
 802c2b4:	0802dff1 	.word	0x0802dff1
 802c2b8:	f1bb 0f01 	cmp.w	fp, #1
 802c2bc:	d06e      	beq.n	802c39c <__ssvfscanf_r+0x1128>
 802c2be:	f1ba 0f00 	cmp.w	sl, #0
 802c2c2:	d001      	beq.n	802c2c8 <__ssvfscanf_r+0x1054>
 802c2c4:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 802c2c8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c2cc:	f1bb 0f01 	cmp.w	fp, #1
 802c2d0:	d873      	bhi.n	802c3ba <__ssvfscanf_r+0x1146>
 802c2d2:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 802c2d6:	45a9      	cmp	r9, r5
 802c2d8:	f67f a8c2 	bls.w	802b460 <__ssvfscanf_r+0x1ec>
 802c2dc:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 802c2e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c2e2:	4622      	mov	r2, r4
 802c2e4:	f7fc fdd4 	bl	8028e90 <_sungetc_r>
 802c2e8:	e7f5      	b.n	802c2d6 <__ssvfscanf_r+0x1062>
 802c2ea:	f1b8 0f00 	cmp.w	r8, #0
 802c2ee:	d10d      	bne.n	802c30c <__ssvfscanf_r+0x1098>
 802c2f0:	f1ba 0f00 	cmp.w	sl, #0
 802c2f4:	d1e6      	bne.n	802c2c4 <__ssvfscanf_r+0x1050>
 802c2f6:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 802c2fa:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 802c2fe:	f040 8124 	bne.w	802c54a <__ssvfscanf_r+0x12d6>
 802c302:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 802c306:	f04f 0801 	mov.w	r8, #1
 802c30a:	e7a5      	b.n	802c258 <__ssvfscanf_r+0xfe4>
 802c30c:	f1b8 0f03 	cmp.w	r8, #3
 802c310:	d0bf      	beq.n	802c292 <__ssvfscanf_r+0x101e>
 802c312:	f1b8 0f05 	cmp.w	r8, #5
 802c316:	e7bb      	b.n	802c290 <__ssvfscanf_r+0x101c>
 802c318:	0531      	lsls	r1, r6, #20
 802c31a:	d502      	bpl.n	802c322 <__ssvfscanf_r+0x10ae>
 802c31c:	eb1b 0c08 	adds.w	ip, fp, r8
 802c320:	d0c1      	beq.n	802c2a6 <__ssvfscanf_r+0x1032>
 802c322:	f1b8 0f02 	cmp.w	r8, #2
 802c326:	d1ca      	bne.n	802c2be <__ssvfscanf_r+0x104a>
 802c328:	f04f 0803 	mov.w	r8, #3
 802c32c:	e794      	b.n	802c258 <__ssvfscanf_r+0xfe4>
 802c32e:	f1b8 0f06 	cmp.w	r8, #6
 802c332:	d1c4      	bne.n	802c2be <__ssvfscanf_r+0x104a>
 802c334:	f04f 0807 	mov.w	r8, #7
 802c338:	e78e      	b.n	802c258 <__ssvfscanf_r+0xfe4>
 802c33a:	f1b8 0f07 	cmp.w	r8, #7
 802c33e:	d1be      	bne.n	802c2be <__ssvfscanf_r+0x104a>
 802c340:	f04f 0808 	mov.w	r8, #8
 802c344:	e788      	b.n	802c258 <__ssvfscanf_r+0xfe4>
 802c346:	0531      	lsls	r1, r6, #20
 802c348:	d5b9      	bpl.n	802c2be <__ssvfscanf_r+0x104a>
 802c34a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 802c34e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 802c352:	d005      	beq.n	802c360 <__ssvfscanf_r+0x10ec>
 802c354:	0571      	lsls	r1, r6, #21
 802c356:	d5b2      	bpl.n	802c2be <__ssvfscanf_r+0x104a>
 802c358:	f1ba 0f00 	cmp.w	sl, #0
 802c35c:	f000 80f5 	beq.w	802c54a <__ssvfscanf_r+0x12d6>
 802c360:	05b1      	lsls	r1, r6, #22
 802c362:	bf58      	it	pl
 802c364:	6939      	ldrpl	r1, [r7, #16]
 802c366:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 802c36a:	bf5c      	itt	pl
 802c36c:	ebaa 0101 	subpl.w	r1, sl, r1
 802c370:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 802c374:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 802c378:	e767      	b.n	802c24a <__ssvfscanf_r+0xfd6>
 802c37a:	0531      	lsls	r1, r6, #20
 802c37c:	d5e5      	bpl.n	802c34a <__ssvfscanf_r+0x10d6>
 802c37e:	e74d      	b.n	802c21c <__ssvfscanf_r+0xfa8>
 802c380:	f892 c000 	ldrb.w	ip, [r2]
 802c384:	4584      	cmp	ip, r0
 802c386:	d19a      	bne.n	802c2be <__ssvfscanf_r+0x104a>
 802c388:	05b1      	lsls	r1, r6, #22
 802c38a:	d598      	bpl.n	802c2be <__ssvfscanf_r+0x104a>
 802c38c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 802c390:	f8c7 a010 	str.w	sl, [r7, #16]
 802c394:	e760      	b.n	802c258 <__ssvfscanf_r+0xfe4>
 802c396:	f04f 0b03 	mov.w	fp, #3
 802c39a:	e75d      	b.n	802c258 <__ssvfscanf_r+0xfe4>
 802c39c:	f04f 0b02 	mov.w	fp, #2
 802c3a0:	e75a      	b.n	802c258 <__ssvfscanf_r+0xfe4>
 802c3a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c3a4:	4621      	mov	r1, r4
 802c3a6:	e9c7 2300 	strd	r2, r3, [r7]
 802c3aa:	f7fc fdac 	bl	8028f06 <__ssrefill_r>
 802c3ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 802c3b2:	2800      	cmp	r0, #0
 802c3b4:	f43f af2c 	beq.w	802c210 <__ssvfscanf_r+0xf9c>
 802c3b8:	e781      	b.n	802c2be <__ssvfscanf_r+0x104a>
 802c3ba:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 802c3be:	2b06      	cmp	r3, #6
 802c3c0:	d827      	bhi.n	802c412 <__ssvfscanf_r+0x119e>
 802c3c2:	f1b8 0f02 	cmp.w	r8, #2
 802c3c6:	d834      	bhi.n	802c432 <__ssvfscanf_r+0x11be>
 802c3c8:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 802c3cc:	45a9      	cmp	r9, r5
 802c3ce:	f67f a847 	bls.w	802b460 <__ssvfscanf_r+0x1ec>
 802c3d2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 802c3d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c3d8:	4622      	mov	r2, r4
 802c3da:	f7fc fd59 	bl	8028e90 <_sungetc_r>
 802c3de:	e7f5      	b.n	802c3cc <__ssvfscanf_r+0x1158>
 802c3e0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 802c3e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802c3e8:	4622      	mov	r2, r4
 802c3ea:	f7fc fd51 	bl	8028e90 <_sungetc_r>
 802c3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c3f0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c3f4:	fa5f fb8b 	uxtb.w	fp, fp
 802c3f8:	f1bb 0f02 	cmp.w	fp, #2
 802c3fc:	d1f0      	bne.n	802c3e0 <__ssvfscanf_r+0x116c>
 802c3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c400:	f1a8 0803 	sub.w	r8, r8, #3
 802c404:	fa5f f888 	uxtb.w	r8, r8
 802c408:	eba3 0308 	sub.w	r3, r3, r8
 802c40c:	eba9 0908 	sub.w	r9, r9, r8
 802c410:	633b      	str	r3, [r7, #48]	@ 0x30
 802c412:	05f3      	lsls	r3, r6, #23
 802c414:	d52d      	bpl.n	802c472 <__ssvfscanf_r+0x11fe>
 802c416:	0570      	lsls	r0, r6, #21
 802c418:	d50e      	bpl.n	802c438 <__ssvfscanf_r+0x11c4>
 802c41a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 802c41e:	45a9      	cmp	r9, r5
 802c420:	f67f a81e 	bls.w	802b460 <__ssvfscanf_r+0x1ec>
 802c424:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 802c428:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c42a:	4622      	mov	r2, r4
 802c42c:	f7fc fd30 	bl	8028e90 <_sungetc_r>
 802c430:	e7f5      	b.n	802c41e <__ssvfscanf_r+0x11aa>
 802c432:	46c3      	mov	fp, r8
 802c434:	464b      	mov	r3, r9
 802c436:	e7db      	b.n	802c3f0 <__ssvfscanf_r+0x117c>
 802c438:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 802c43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c43e:	2965      	cmp	r1, #101	@ 0x65
 802c440:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 802c444:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 802c448:	d00c      	beq.n	802c464 <__ssvfscanf_r+0x11f0>
 802c44a:	2945      	cmp	r1, #69	@ 0x45
 802c44c:	d00a      	beq.n	802c464 <__ssvfscanf_r+0x11f0>
 802c44e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c450:	4622      	mov	r2, r4
 802c452:	f7fc fd1d 	bl	8028e90 <_sungetc_r>
 802c456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c458:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 802c45c:	f1a9 0802 	sub.w	r8, r9, #2
 802c460:	f1a3 0b02 	sub.w	fp, r3, #2
 802c464:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c466:	4622      	mov	r2, r4
 802c468:	f7fc fd12 	bl	8028e90 <_sungetc_r>
 802c46c:	46c1      	mov	r9, r8
 802c46e:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 802c472:	f016 0210 	ands.w	r2, r6, #16
 802c476:	f47e af18 	bne.w	802b2aa <__ssvfscanf_r+0x36>
 802c47a:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 802c47e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802c482:	f889 2000 	strb.w	r2, [r9]
 802c486:	d119      	bne.n	802c4bc <__ssvfscanf_r+0x1248>
 802c488:	693b      	ldr	r3, [r7, #16]
 802c48a:	4553      	cmp	r3, sl
 802c48c:	eba3 020a 	sub.w	r2, r3, sl
 802c490:	d121      	bne.n	802c4d6 <__ssvfscanf_r+0x1262>
 802c492:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802c496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c498:	2200      	movs	r2, #0
 802c49a:	f001 fd35 	bl	802df08 <_strtod_r>
 802c49e:	07f1      	lsls	r1, r6, #31
 802c4a0:	ec59 8b10 	vmov	r8, r9, d0
 802c4a4:	f105 0a04 	add.w	sl, r5, #4
 802c4a8:	d520      	bpl.n	802c4ec <__ssvfscanf_r+0x1278>
 802c4aa:	682b      	ldr	r3, [r5, #0]
 802c4ac:	ed83 0b00 	vstr	d0, [r3]
 802c4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c4b2:	3301      	adds	r3, #1
 802c4b4:	627b      	str	r3, [r7, #36]	@ 0x24
 802c4b6:	4655      	mov	r5, sl
 802c4b8:	f7fe bef7 	b.w	802b2aa <__ssvfscanf_r+0x36>
 802c4bc:	68fb      	ldr	r3, [r7, #12]
 802c4be:	2b00      	cmp	r3, #0
 802c4c0:	d0e7      	beq.n	802c492 <__ssvfscanf_r+0x121e>
 802c4c2:	68b9      	ldr	r1, [r7, #8]
 802c4c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c4c6:	230a      	movs	r3, #10
 802c4c8:	3101      	adds	r1, #1
 802c4ca:	f7f9 f8c9 	bl	8025660 <_strtol_r>
 802c4ce:	68fb      	ldr	r3, [r7, #12]
 802c4d0:	f8d7 9008 	ldr.w	r9, [r7, #8]
 802c4d4:	1ac2      	subs	r2, r0, r3
 802c4d6:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 802c4da:	4599      	cmp	r9, r3
 802c4dc:	bf28      	it	cs
 802c4de:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 802c4e2:	491b      	ldr	r1, [pc, #108]	@ (802c550 <__ssvfscanf_r+0x12dc>)
 802c4e4:	4648      	mov	r0, r9
 802c4e6:	f7f9 f975 	bl	80257d4 <sprintf>
 802c4ea:	e7d2      	b.n	802c492 <__ssvfscanf_r+0x121e>
 802c4ec:	07b2      	lsls	r2, r6, #30
 802c4ee:	682d      	ldr	r5, [r5, #0]
 802c4f0:	d502      	bpl.n	802c4f8 <__ssvfscanf_r+0x1284>
 802c4f2:	ed85 0b00 	vstr	d0, [r5]
 802c4f6:	e7db      	b.n	802c4b0 <__ssvfscanf_r+0x123c>
 802c4f8:	4642      	mov	r2, r8
 802c4fa:	464b      	mov	r3, r9
 802c4fc:	4640      	mov	r0, r8
 802c4fe:	4649      	mov	r1, r9
 802c500:	f7d4 fb2c 	bl	8000b5c <__aeabi_dcmpun>
 802c504:	b128      	cbz	r0, 802c512 <__ssvfscanf_r+0x129e>
 802c506:	4813      	ldr	r0, [pc, #76]	@ (802c554 <__ssvfscanf_r+0x12e0>)
 802c508:	f002 f8ce 	bl	802e6a8 <nanf>
 802c50c:	ed85 0a00 	vstr	s0, [r5]
 802c510:	e7ce      	b.n	802c4b0 <__ssvfscanf_r+0x123c>
 802c512:	4640      	mov	r0, r8
 802c514:	4649      	mov	r1, r9
 802c516:	f7d4 fb7f 	bl	8000c18 <__aeabi_d2f>
 802c51a:	6028      	str	r0, [r5, #0]
 802c51c:	e7c8      	b.n	802c4b0 <__ssvfscanf_r+0x123c>
 802c51e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802c522:	6818      	ldr	r0, [r3, #0]
 802c524:	f7f6 fdaa 	bl	802307c <free>
 802c528:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802c52c:	3401      	adds	r4, #1
 802c52e:	601e      	str	r6, [r3, #0]
 802c530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c532:	681d      	ldr	r5, [r3, #0]
 802c534:	88db      	ldrh	r3, [r3, #6]
 802c536:	42a3      	cmp	r3, r4
 802c538:	dcf1      	bgt.n	802c51e <__ssvfscanf_r+0x12aa>
 802c53a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802c53e:	627b      	str	r3, [r7, #36]	@ 0x24
 802c540:	f7ff b85c 	b.w	802b5fc <__ssvfscanf_r+0x388>
 802c544:	2400      	movs	r4, #0
 802c546:	4626      	mov	r6, r4
 802c548:	e7f2      	b.n	802c530 <__ssvfscanf_r+0x12bc>
 802c54a:	f04f 0a00 	mov.w	sl, #0
 802c54e:	e6bb      	b.n	802c2c8 <__ssvfscanf_r+0x1054>
 802c550:	080345ce 	.word	0x080345ce
 802c554:	08034037 	.word	0x08034037

0802c558 <_putc_r>:
 802c558:	b570      	push	{r4, r5, r6, lr}
 802c55a:	460d      	mov	r5, r1
 802c55c:	4614      	mov	r4, r2
 802c55e:	4606      	mov	r6, r0
 802c560:	b118      	cbz	r0, 802c56a <_putc_r+0x12>
 802c562:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c564:	b90b      	cbnz	r3, 802c56a <_putc_r+0x12>
 802c566:	f7f9 fa51 	bl	8025a0c <__sinit>
 802c56a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c56c:	07d8      	lsls	r0, r3, #31
 802c56e:	d405      	bmi.n	802c57c <_putc_r+0x24>
 802c570:	89a3      	ldrh	r3, [r4, #12]
 802c572:	0599      	lsls	r1, r3, #22
 802c574:	d402      	bmi.n	802c57c <_putc_r+0x24>
 802c576:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c578:	f7fa ff43 	bl	8027402 <__retarget_lock_acquire_recursive>
 802c57c:	68a3      	ldr	r3, [r4, #8]
 802c57e:	3b01      	subs	r3, #1
 802c580:	2b00      	cmp	r3, #0
 802c582:	60a3      	str	r3, [r4, #8]
 802c584:	da05      	bge.n	802c592 <_putc_r+0x3a>
 802c586:	69a2      	ldr	r2, [r4, #24]
 802c588:	4293      	cmp	r3, r2
 802c58a:	db12      	blt.n	802c5b2 <_putc_r+0x5a>
 802c58c:	b2eb      	uxtb	r3, r5
 802c58e:	2b0a      	cmp	r3, #10
 802c590:	d00f      	beq.n	802c5b2 <_putc_r+0x5a>
 802c592:	6823      	ldr	r3, [r4, #0]
 802c594:	1c5a      	adds	r2, r3, #1
 802c596:	6022      	str	r2, [r4, #0]
 802c598:	701d      	strb	r5, [r3, #0]
 802c59a:	b2ed      	uxtb	r5, r5
 802c59c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c59e:	07da      	lsls	r2, r3, #31
 802c5a0:	d405      	bmi.n	802c5ae <_putc_r+0x56>
 802c5a2:	89a3      	ldrh	r3, [r4, #12]
 802c5a4:	059b      	lsls	r3, r3, #22
 802c5a6:	d402      	bmi.n	802c5ae <_putc_r+0x56>
 802c5a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c5aa:	f7fa ff2c 	bl	8027406 <__retarget_lock_release_recursive>
 802c5ae:	4628      	mov	r0, r5
 802c5b0:	bd70      	pop	{r4, r5, r6, pc}
 802c5b2:	4629      	mov	r1, r5
 802c5b4:	4622      	mov	r2, r4
 802c5b6:	4630      	mov	r0, r6
 802c5b8:	f001 fd6d 	bl	802e096 <__swbuf_r>
 802c5bc:	4605      	mov	r5, r0
 802c5be:	e7ed      	b.n	802c59c <_putc_r+0x44>

0802c5c0 <_Balloc>:
 802c5c0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802c5c2:	b570      	push	{r4, r5, r6, lr}
 802c5c4:	4605      	mov	r5, r0
 802c5c6:	460c      	mov	r4, r1
 802c5c8:	b17b      	cbz	r3, 802c5ea <_Balloc+0x2a>
 802c5ca:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 802c5cc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802c5d0:	b9a0      	cbnz	r0, 802c5fc <_Balloc+0x3c>
 802c5d2:	2101      	movs	r1, #1
 802c5d4:	fa01 f604 	lsl.w	r6, r1, r4
 802c5d8:	1d72      	adds	r2, r6, #5
 802c5da:	0092      	lsls	r2, r2, #2
 802c5dc:	4628      	mov	r0, r5
 802c5de:	f7f6 fcfd 	bl	8022fdc <_calloc_r>
 802c5e2:	b148      	cbz	r0, 802c5f8 <_Balloc+0x38>
 802c5e4:	e9c0 4601 	strd	r4, r6, [r0, #4]
 802c5e8:	e00b      	b.n	802c602 <_Balloc+0x42>
 802c5ea:	2221      	movs	r2, #33	@ 0x21
 802c5ec:	2104      	movs	r1, #4
 802c5ee:	f7f6 fcf5 	bl	8022fdc <_calloc_r>
 802c5f2:	6468      	str	r0, [r5, #68]	@ 0x44
 802c5f4:	2800      	cmp	r0, #0
 802c5f6:	d1e8      	bne.n	802c5ca <_Balloc+0xa>
 802c5f8:	2000      	movs	r0, #0
 802c5fa:	bd70      	pop	{r4, r5, r6, pc}
 802c5fc:	6802      	ldr	r2, [r0, #0]
 802c5fe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 802c602:	2300      	movs	r3, #0
 802c604:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c608:	e7f7      	b.n	802c5fa <_Balloc+0x3a>

0802c60a <_Bfree>:
 802c60a:	b131      	cbz	r1, 802c61a <_Bfree+0x10>
 802c60c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802c60e:	684a      	ldr	r2, [r1, #4]
 802c610:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802c614:	6008      	str	r0, [r1, #0]
 802c616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802c61a:	4770      	bx	lr

0802c61c <__multadd>:
 802c61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c620:	690d      	ldr	r5, [r1, #16]
 802c622:	4607      	mov	r7, r0
 802c624:	460c      	mov	r4, r1
 802c626:	461e      	mov	r6, r3
 802c628:	f101 0c14 	add.w	ip, r1, #20
 802c62c:	2000      	movs	r0, #0
 802c62e:	f8dc 3000 	ldr.w	r3, [ip]
 802c632:	b299      	uxth	r1, r3
 802c634:	fb02 6101 	mla	r1, r2, r1, r6
 802c638:	0c1e      	lsrs	r6, r3, #16
 802c63a:	0c0b      	lsrs	r3, r1, #16
 802c63c:	fb02 3306 	mla	r3, r2, r6, r3
 802c640:	b289      	uxth	r1, r1
 802c642:	3001      	adds	r0, #1
 802c644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c648:	4285      	cmp	r5, r0
 802c64a:	f84c 1b04 	str.w	r1, [ip], #4
 802c64e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802c652:	dcec      	bgt.n	802c62e <__multadd+0x12>
 802c654:	b30e      	cbz	r6, 802c69a <__multadd+0x7e>
 802c656:	68a3      	ldr	r3, [r4, #8]
 802c658:	42ab      	cmp	r3, r5
 802c65a:	dc19      	bgt.n	802c690 <__multadd+0x74>
 802c65c:	6861      	ldr	r1, [r4, #4]
 802c65e:	4638      	mov	r0, r7
 802c660:	3101      	adds	r1, #1
 802c662:	f7ff ffad 	bl	802c5c0 <_Balloc>
 802c666:	4680      	mov	r8, r0
 802c668:	b928      	cbnz	r0, 802c676 <__multadd+0x5a>
 802c66a:	4602      	mov	r2, r0
 802c66c:	4b0c      	ldr	r3, [pc, #48]	@ (802c6a0 <__multadd+0x84>)
 802c66e:	480d      	ldr	r0, [pc, #52]	@ (802c6a4 <__multadd+0x88>)
 802c670:	21ba      	movs	r1, #186	@ 0xba
 802c672:	f7f6 fc91 	bl	8022f98 <__assert_func>
 802c676:	6922      	ldr	r2, [r4, #16]
 802c678:	3202      	adds	r2, #2
 802c67a:	f104 010c 	add.w	r1, r4, #12
 802c67e:	0092      	lsls	r2, r2, #2
 802c680:	300c      	adds	r0, #12
 802c682:	f7fa fec1 	bl	8027408 <memcpy>
 802c686:	4621      	mov	r1, r4
 802c688:	4638      	mov	r0, r7
 802c68a:	f7ff ffbe 	bl	802c60a <_Bfree>
 802c68e:	4644      	mov	r4, r8
 802c690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802c694:	3501      	adds	r5, #1
 802c696:	615e      	str	r6, [r3, #20]
 802c698:	6125      	str	r5, [r4, #16]
 802c69a:	4620      	mov	r0, r4
 802c69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c6a0:	08034502 	.word	0x08034502
 802c6a4:	080345f6 	.word	0x080345f6

0802c6a8 <__s2b>:
 802c6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c6ac:	460c      	mov	r4, r1
 802c6ae:	4615      	mov	r5, r2
 802c6b0:	461f      	mov	r7, r3
 802c6b2:	2209      	movs	r2, #9
 802c6b4:	3308      	adds	r3, #8
 802c6b6:	4606      	mov	r6, r0
 802c6b8:	fb93 f3f2 	sdiv	r3, r3, r2
 802c6bc:	2100      	movs	r1, #0
 802c6be:	2201      	movs	r2, #1
 802c6c0:	429a      	cmp	r2, r3
 802c6c2:	db09      	blt.n	802c6d8 <__s2b+0x30>
 802c6c4:	4630      	mov	r0, r6
 802c6c6:	f7ff ff7b 	bl	802c5c0 <_Balloc>
 802c6ca:	b940      	cbnz	r0, 802c6de <__s2b+0x36>
 802c6cc:	4602      	mov	r2, r0
 802c6ce:	4b19      	ldr	r3, [pc, #100]	@ (802c734 <__s2b+0x8c>)
 802c6d0:	4819      	ldr	r0, [pc, #100]	@ (802c738 <__s2b+0x90>)
 802c6d2:	21d3      	movs	r1, #211	@ 0xd3
 802c6d4:	f7f6 fc60 	bl	8022f98 <__assert_func>
 802c6d8:	0052      	lsls	r2, r2, #1
 802c6da:	3101      	adds	r1, #1
 802c6dc:	e7f0      	b.n	802c6c0 <__s2b+0x18>
 802c6de:	9b08      	ldr	r3, [sp, #32]
 802c6e0:	6143      	str	r3, [r0, #20]
 802c6e2:	2d09      	cmp	r5, #9
 802c6e4:	f04f 0301 	mov.w	r3, #1
 802c6e8:	6103      	str	r3, [r0, #16]
 802c6ea:	dd16      	ble.n	802c71a <__s2b+0x72>
 802c6ec:	f104 0909 	add.w	r9, r4, #9
 802c6f0:	46c8      	mov	r8, r9
 802c6f2:	442c      	add	r4, r5
 802c6f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 802c6f8:	4601      	mov	r1, r0
 802c6fa:	3b30      	subs	r3, #48	@ 0x30
 802c6fc:	220a      	movs	r2, #10
 802c6fe:	4630      	mov	r0, r6
 802c700:	f7ff ff8c 	bl	802c61c <__multadd>
 802c704:	45a0      	cmp	r8, r4
 802c706:	d1f5      	bne.n	802c6f4 <__s2b+0x4c>
 802c708:	f1a5 0408 	sub.w	r4, r5, #8
 802c70c:	444c      	add	r4, r9
 802c70e:	1b2d      	subs	r5, r5, r4
 802c710:	1963      	adds	r3, r4, r5
 802c712:	42bb      	cmp	r3, r7
 802c714:	db04      	blt.n	802c720 <__s2b+0x78>
 802c716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c71a:	340a      	adds	r4, #10
 802c71c:	2509      	movs	r5, #9
 802c71e:	e7f6      	b.n	802c70e <__s2b+0x66>
 802c720:	f814 3b01 	ldrb.w	r3, [r4], #1
 802c724:	4601      	mov	r1, r0
 802c726:	3b30      	subs	r3, #48	@ 0x30
 802c728:	220a      	movs	r2, #10
 802c72a:	4630      	mov	r0, r6
 802c72c:	f7ff ff76 	bl	802c61c <__multadd>
 802c730:	e7ee      	b.n	802c710 <__s2b+0x68>
 802c732:	bf00      	nop
 802c734:	08034502 	.word	0x08034502
 802c738:	080345f6 	.word	0x080345f6

0802c73c <__hi0bits>:
 802c73c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802c740:	4603      	mov	r3, r0
 802c742:	bf36      	itet	cc
 802c744:	0403      	lslcc	r3, r0, #16
 802c746:	2000      	movcs	r0, #0
 802c748:	2010      	movcc	r0, #16
 802c74a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802c74e:	bf3c      	itt	cc
 802c750:	021b      	lslcc	r3, r3, #8
 802c752:	3008      	addcc	r0, #8
 802c754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802c758:	bf3c      	itt	cc
 802c75a:	011b      	lslcc	r3, r3, #4
 802c75c:	3004      	addcc	r0, #4
 802c75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802c762:	bf3c      	itt	cc
 802c764:	009b      	lslcc	r3, r3, #2
 802c766:	3002      	addcc	r0, #2
 802c768:	2b00      	cmp	r3, #0
 802c76a:	db05      	blt.n	802c778 <__hi0bits+0x3c>
 802c76c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802c770:	f100 0001 	add.w	r0, r0, #1
 802c774:	bf08      	it	eq
 802c776:	2020      	moveq	r0, #32
 802c778:	4770      	bx	lr

0802c77a <__lo0bits>:
 802c77a:	6803      	ldr	r3, [r0, #0]
 802c77c:	4602      	mov	r2, r0
 802c77e:	f013 0007 	ands.w	r0, r3, #7
 802c782:	d00b      	beq.n	802c79c <__lo0bits+0x22>
 802c784:	07d9      	lsls	r1, r3, #31
 802c786:	d421      	bmi.n	802c7cc <__lo0bits+0x52>
 802c788:	0798      	lsls	r0, r3, #30
 802c78a:	bf49      	itett	mi
 802c78c:	085b      	lsrmi	r3, r3, #1
 802c78e:	089b      	lsrpl	r3, r3, #2
 802c790:	2001      	movmi	r0, #1
 802c792:	6013      	strmi	r3, [r2, #0]
 802c794:	bf5c      	itt	pl
 802c796:	6013      	strpl	r3, [r2, #0]
 802c798:	2002      	movpl	r0, #2
 802c79a:	4770      	bx	lr
 802c79c:	b299      	uxth	r1, r3
 802c79e:	b909      	cbnz	r1, 802c7a4 <__lo0bits+0x2a>
 802c7a0:	0c1b      	lsrs	r3, r3, #16
 802c7a2:	2010      	movs	r0, #16
 802c7a4:	b2d9      	uxtb	r1, r3
 802c7a6:	b909      	cbnz	r1, 802c7ac <__lo0bits+0x32>
 802c7a8:	3008      	adds	r0, #8
 802c7aa:	0a1b      	lsrs	r3, r3, #8
 802c7ac:	0719      	lsls	r1, r3, #28
 802c7ae:	bf04      	itt	eq
 802c7b0:	091b      	lsreq	r3, r3, #4
 802c7b2:	3004      	addeq	r0, #4
 802c7b4:	0799      	lsls	r1, r3, #30
 802c7b6:	bf04      	itt	eq
 802c7b8:	089b      	lsreq	r3, r3, #2
 802c7ba:	3002      	addeq	r0, #2
 802c7bc:	07d9      	lsls	r1, r3, #31
 802c7be:	d403      	bmi.n	802c7c8 <__lo0bits+0x4e>
 802c7c0:	085b      	lsrs	r3, r3, #1
 802c7c2:	f100 0001 	add.w	r0, r0, #1
 802c7c6:	d003      	beq.n	802c7d0 <__lo0bits+0x56>
 802c7c8:	6013      	str	r3, [r2, #0]
 802c7ca:	4770      	bx	lr
 802c7cc:	2000      	movs	r0, #0
 802c7ce:	4770      	bx	lr
 802c7d0:	2020      	movs	r0, #32
 802c7d2:	4770      	bx	lr

0802c7d4 <__i2b>:
 802c7d4:	b510      	push	{r4, lr}
 802c7d6:	460c      	mov	r4, r1
 802c7d8:	2101      	movs	r1, #1
 802c7da:	f7ff fef1 	bl	802c5c0 <_Balloc>
 802c7de:	4602      	mov	r2, r0
 802c7e0:	b928      	cbnz	r0, 802c7ee <__i2b+0x1a>
 802c7e2:	4b05      	ldr	r3, [pc, #20]	@ (802c7f8 <__i2b+0x24>)
 802c7e4:	4805      	ldr	r0, [pc, #20]	@ (802c7fc <__i2b+0x28>)
 802c7e6:	f240 1145 	movw	r1, #325	@ 0x145
 802c7ea:	f7f6 fbd5 	bl	8022f98 <__assert_func>
 802c7ee:	2301      	movs	r3, #1
 802c7f0:	6144      	str	r4, [r0, #20]
 802c7f2:	6103      	str	r3, [r0, #16]
 802c7f4:	bd10      	pop	{r4, pc}
 802c7f6:	bf00      	nop
 802c7f8:	08034502 	.word	0x08034502
 802c7fc:	080345f6 	.word	0x080345f6

0802c800 <__multiply>:
 802c800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c804:	4614      	mov	r4, r2
 802c806:	690a      	ldr	r2, [r1, #16]
 802c808:	6923      	ldr	r3, [r4, #16]
 802c80a:	429a      	cmp	r2, r3
 802c80c:	bfa8      	it	ge
 802c80e:	4623      	movge	r3, r4
 802c810:	460f      	mov	r7, r1
 802c812:	bfa4      	itt	ge
 802c814:	460c      	movge	r4, r1
 802c816:	461f      	movge	r7, r3
 802c818:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802c81c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802c820:	68a3      	ldr	r3, [r4, #8]
 802c822:	6861      	ldr	r1, [r4, #4]
 802c824:	eb0a 0609 	add.w	r6, sl, r9
 802c828:	42b3      	cmp	r3, r6
 802c82a:	b085      	sub	sp, #20
 802c82c:	bfb8      	it	lt
 802c82e:	3101      	addlt	r1, #1
 802c830:	f7ff fec6 	bl	802c5c0 <_Balloc>
 802c834:	b930      	cbnz	r0, 802c844 <__multiply+0x44>
 802c836:	4602      	mov	r2, r0
 802c838:	4b44      	ldr	r3, [pc, #272]	@ (802c94c <__multiply+0x14c>)
 802c83a:	4845      	ldr	r0, [pc, #276]	@ (802c950 <__multiply+0x150>)
 802c83c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802c840:	f7f6 fbaa 	bl	8022f98 <__assert_func>
 802c844:	f100 0514 	add.w	r5, r0, #20
 802c848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802c84c:	462b      	mov	r3, r5
 802c84e:	2200      	movs	r2, #0
 802c850:	4543      	cmp	r3, r8
 802c852:	d321      	bcc.n	802c898 <__multiply+0x98>
 802c854:	f107 0114 	add.w	r1, r7, #20
 802c858:	f104 0214 	add.w	r2, r4, #20
 802c85c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802c860:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802c864:	9302      	str	r3, [sp, #8]
 802c866:	1b13      	subs	r3, r2, r4
 802c868:	3b15      	subs	r3, #21
 802c86a:	f023 0303 	bic.w	r3, r3, #3
 802c86e:	3304      	adds	r3, #4
 802c870:	f104 0715 	add.w	r7, r4, #21
 802c874:	42ba      	cmp	r2, r7
 802c876:	bf38      	it	cc
 802c878:	2304      	movcc	r3, #4
 802c87a:	9301      	str	r3, [sp, #4]
 802c87c:	9b02      	ldr	r3, [sp, #8]
 802c87e:	9103      	str	r1, [sp, #12]
 802c880:	428b      	cmp	r3, r1
 802c882:	d80c      	bhi.n	802c89e <__multiply+0x9e>
 802c884:	2e00      	cmp	r6, #0
 802c886:	dd03      	ble.n	802c890 <__multiply+0x90>
 802c888:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802c88c:	2b00      	cmp	r3, #0
 802c88e:	d05b      	beq.n	802c948 <__multiply+0x148>
 802c890:	6106      	str	r6, [r0, #16]
 802c892:	b005      	add	sp, #20
 802c894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c898:	f843 2b04 	str.w	r2, [r3], #4
 802c89c:	e7d8      	b.n	802c850 <__multiply+0x50>
 802c89e:	f8b1 a000 	ldrh.w	sl, [r1]
 802c8a2:	f1ba 0f00 	cmp.w	sl, #0
 802c8a6:	d024      	beq.n	802c8f2 <__multiply+0xf2>
 802c8a8:	f104 0e14 	add.w	lr, r4, #20
 802c8ac:	46a9      	mov	r9, r5
 802c8ae:	f04f 0c00 	mov.w	ip, #0
 802c8b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 802c8b6:	f8d9 3000 	ldr.w	r3, [r9]
 802c8ba:	fa1f fb87 	uxth.w	fp, r7
 802c8be:	b29b      	uxth	r3, r3
 802c8c0:	fb0a 330b 	mla	r3, sl, fp, r3
 802c8c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802c8c8:	f8d9 7000 	ldr.w	r7, [r9]
 802c8cc:	4463      	add	r3, ip
 802c8ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802c8d2:	fb0a c70b 	mla	r7, sl, fp, ip
 802c8d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802c8da:	b29b      	uxth	r3, r3
 802c8dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c8e0:	4572      	cmp	r2, lr
 802c8e2:	f849 3b04 	str.w	r3, [r9], #4
 802c8e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802c8ea:	d8e2      	bhi.n	802c8b2 <__multiply+0xb2>
 802c8ec:	9b01      	ldr	r3, [sp, #4]
 802c8ee:	f845 c003 	str.w	ip, [r5, r3]
 802c8f2:	9b03      	ldr	r3, [sp, #12]
 802c8f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802c8f8:	3104      	adds	r1, #4
 802c8fa:	f1b9 0f00 	cmp.w	r9, #0
 802c8fe:	d021      	beq.n	802c944 <__multiply+0x144>
 802c900:	682b      	ldr	r3, [r5, #0]
 802c902:	f104 0c14 	add.w	ip, r4, #20
 802c906:	46ae      	mov	lr, r5
 802c908:	f04f 0a00 	mov.w	sl, #0
 802c90c:	f8bc b000 	ldrh.w	fp, [ip]
 802c910:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802c914:	fb09 770b 	mla	r7, r9, fp, r7
 802c918:	4457      	add	r7, sl
 802c91a:	b29b      	uxth	r3, r3
 802c91c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c920:	f84e 3b04 	str.w	r3, [lr], #4
 802c924:	f85c 3b04 	ldr.w	r3, [ip], #4
 802c928:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802c92c:	f8be 3000 	ldrh.w	r3, [lr]
 802c930:	fb09 330a 	mla	r3, r9, sl, r3
 802c934:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802c938:	4562      	cmp	r2, ip
 802c93a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802c93e:	d8e5      	bhi.n	802c90c <__multiply+0x10c>
 802c940:	9f01      	ldr	r7, [sp, #4]
 802c942:	51eb      	str	r3, [r5, r7]
 802c944:	3504      	adds	r5, #4
 802c946:	e799      	b.n	802c87c <__multiply+0x7c>
 802c948:	3e01      	subs	r6, #1
 802c94a:	e79b      	b.n	802c884 <__multiply+0x84>
 802c94c:	08034502 	.word	0x08034502
 802c950:	080345f6 	.word	0x080345f6

0802c954 <__pow5mult>:
 802c954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c958:	4615      	mov	r5, r2
 802c95a:	f012 0203 	ands.w	r2, r2, #3
 802c95e:	4607      	mov	r7, r0
 802c960:	460e      	mov	r6, r1
 802c962:	d007      	beq.n	802c974 <__pow5mult+0x20>
 802c964:	4c1a      	ldr	r4, [pc, #104]	@ (802c9d0 <__pow5mult+0x7c>)
 802c966:	3a01      	subs	r2, #1
 802c968:	2300      	movs	r3, #0
 802c96a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802c96e:	f7ff fe55 	bl	802c61c <__multadd>
 802c972:	4606      	mov	r6, r0
 802c974:	10ad      	asrs	r5, r5, #2
 802c976:	d027      	beq.n	802c9c8 <__pow5mult+0x74>
 802c978:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 802c97a:	b944      	cbnz	r4, 802c98e <__pow5mult+0x3a>
 802c97c:	f240 2171 	movw	r1, #625	@ 0x271
 802c980:	4638      	mov	r0, r7
 802c982:	f7ff ff27 	bl	802c7d4 <__i2b>
 802c986:	2300      	movs	r3, #0
 802c988:	6438      	str	r0, [r7, #64]	@ 0x40
 802c98a:	4604      	mov	r4, r0
 802c98c:	6003      	str	r3, [r0, #0]
 802c98e:	f04f 0900 	mov.w	r9, #0
 802c992:	07eb      	lsls	r3, r5, #31
 802c994:	d50a      	bpl.n	802c9ac <__pow5mult+0x58>
 802c996:	4631      	mov	r1, r6
 802c998:	4622      	mov	r2, r4
 802c99a:	4638      	mov	r0, r7
 802c99c:	f7ff ff30 	bl	802c800 <__multiply>
 802c9a0:	4631      	mov	r1, r6
 802c9a2:	4680      	mov	r8, r0
 802c9a4:	4638      	mov	r0, r7
 802c9a6:	f7ff fe30 	bl	802c60a <_Bfree>
 802c9aa:	4646      	mov	r6, r8
 802c9ac:	106d      	asrs	r5, r5, #1
 802c9ae:	d00b      	beq.n	802c9c8 <__pow5mult+0x74>
 802c9b0:	6820      	ldr	r0, [r4, #0]
 802c9b2:	b938      	cbnz	r0, 802c9c4 <__pow5mult+0x70>
 802c9b4:	4622      	mov	r2, r4
 802c9b6:	4621      	mov	r1, r4
 802c9b8:	4638      	mov	r0, r7
 802c9ba:	f7ff ff21 	bl	802c800 <__multiply>
 802c9be:	6020      	str	r0, [r4, #0]
 802c9c0:	f8c0 9000 	str.w	r9, [r0]
 802c9c4:	4604      	mov	r4, r0
 802c9c6:	e7e4      	b.n	802c992 <__pow5mult+0x3e>
 802c9c8:	4630      	mov	r0, r6
 802c9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c9ce:	bf00      	nop
 802c9d0:	08034650 	.word	0x08034650

0802c9d4 <__lshift>:
 802c9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c9d8:	460c      	mov	r4, r1
 802c9da:	6849      	ldr	r1, [r1, #4]
 802c9dc:	6923      	ldr	r3, [r4, #16]
 802c9de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802c9e2:	68a3      	ldr	r3, [r4, #8]
 802c9e4:	4607      	mov	r7, r0
 802c9e6:	4691      	mov	r9, r2
 802c9e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802c9ec:	f108 0601 	add.w	r6, r8, #1
 802c9f0:	42b3      	cmp	r3, r6
 802c9f2:	db0b      	blt.n	802ca0c <__lshift+0x38>
 802c9f4:	4638      	mov	r0, r7
 802c9f6:	f7ff fde3 	bl	802c5c0 <_Balloc>
 802c9fa:	4605      	mov	r5, r0
 802c9fc:	b948      	cbnz	r0, 802ca12 <__lshift+0x3e>
 802c9fe:	4602      	mov	r2, r0
 802ca00:	4b28      	ldr	r3, [pc, #160]	@ (802caa4 <__lshift+0xd0>)
 802ca02:	4829      	ldr	r0, [pc, #164]	@ (802caa8 <__lshift+0xd4>)
 802ca04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802ca08:	f7f6 fac6 	bl	8022f98 <__assert_func>
 802ca0c:	3101      	adds	r1, #1
 802ca0e:	005b      	lsls	r3, r3, #1
 802ca10:	e7ee      	b.n	802c9f0 <__lshift+0x1c>
 802ca12:	2300      	movs	r3, #0
 802ca14:	f100 0114 	add.w	r1, r0, #20
 802ca18:	f100 0210 	add.w	r2, r0, #16
 802ca1c:	4618      	mov	r0, r3
 802ca1e:	4553      	cmp	r3, sl
 802ca20:	db33      	blt.n	802ca8a <__lshift+0xb6>
 802ca22:	6920      	ldr	r0, [r4, #16]
 802ca24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802ca28:	f104 0314 	add.w	r3, r4, #20
 802ca2c:	f019 091f 	ands.w	r9, r9, #31
 802ca30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802ca34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802ca38:	d02b      	beq.n	802ca92 <__lshift+0xbe>
 802ca3a:	f1c9 0e20 	rsb	lr, r9, #32
 802ca3e:	468a      	mov	sl, r1
 802ca40:	2200      	movs	r2, #0
 802ca42:	6818      	ldr	r0, [r3, #0]
 802ca44:	fa00 f009 	lsl.w	r0, r0, r9
 802ca48:	4310      	orrs	r0, r2
 802ca4a:	f84a 0b04 	str.w	r0, [sl], #4
 802ca4e:	f853 2b04 	ldr.w	r2, [r3], #4
 802ca52:	459c      	cmp	ip, r3
 802ca54:	fa22 f20e 	lsr.w	r2, r2, lr
 802ca58:	d8f3      	bhi.n	802ca42 <__lshift+0x6e>
 802ca5a:	ebac 0304 	sub.w	r3, ip, r4
 802ca5e:	3b15      	subs	r3, #21
 802ca60:	f023 0303 	bic.w	r3, r3, #3
 802ca64:	3304      	adds	r3, #4
 802ca66:	f104 0015 	add.w	r0, r4, #21
 802ca6a:	4584      	cmp	ip, r0
 802ca6c:	bf38      	it	cc
 802ca6e:	2304      	movcc	r3, #4
 802ca70:	50ca      	str	r2, [r1, r3]
 802ca72:	b10a      	cbz	r2, 802ca78 <__lshift+0xa4>
 802ca74:	f108 0602 	add.w	r6, r8, #2
 802ca78:	3e01      	subs	r6, #1
 802ca7a:	4638      	mov	r0, r7
 802ca7c:	612e      	str	r6, [r5, #16]
 802ca7e:	4621      	mov	r1, r4
 802ca80:	f7ff fdc3 	bl	802c60a <_Bfree>
 802ca84:	4628      	mov	r0, r5
 802ca86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ca8a:	f842 0f04 	str.w	r0, [r2, #4]!
 802ca8e:	3301      	adds	r3, #1
 802ca90:	e7c5      	b.n	802ca1e <__lshift+0x4a>
 802ca92:	3904      	subs	r1, #4
 802ca94:	f853 2b04 	ldr.w	r2, [r3], #4
 802ca98:	f841 2f04 	str.w	r2, [r1, #4]!
 802ca9c:	459c      	cmp	ip, r3
 802ca9e:	d8f9      	bhi.n	802ca94 <__lshift+0xc0>
 802caa0:	e7ea      	b.n	802ca78 <__lshift+0xa4>
 802caa2:	bf00      	nop
 802caa4:	08034502 	.word	0x08034502
 802caa8:	080345f6 	.word	0x080345f6

0802caac <__mcmp>:
 802caac:	690a      	ldr	r2, [r1, #16]
 802caae:	4603      	mov	r3, r0
 802cab0:	6900      	ldr	r0, [r0, #16]
 802cab2:	1a80      	subs	r0, r0, r2
 802cab4:	b530      	push	{r4, r5, lr}
 802cab6:	d10e      	bne.n	802cad6 <__mcmp+0x2a>
 802cab8:	3314      	adds	r3, #20
 802caba:	3114      	adds	r1, #20
 802cabc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802cac0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802cac4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802cac8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802cacc:	4295      	cmp	r5, r2
 802cace:	d003      	beq.n	802cad8 <__mcmp+0x2c>
 802cad0:	d205      	bcs.n	802cade <__mcmp+0x32>
 802cad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802cad6:	bd30      	pop	{r4, r5, pc}
 802cad8:	42a3      	cmp	r3, r4
 802cada:	d3f3      	bcc.n	802cac4 <__mcmp+0x18>
 802cadc:	e7fb      	b.n	802cad6 <__mcmp+0x2a>
 802cade:	2001      	movs	r0, #1
 802cae0:	e7f9      	b.n	802cad6 <__mcmp+0x2a>
	...

0802cae4 <__mdiff>:
 802cae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cae8:	4689      	mov	r9, r1
 802caea:	4606      	mov	r6, r0
 802caec:	4611      	mov	r1, r2
 802caee:	4648      	mov	r0, r9
 802caf0:	4614      	mov	r4, r2
 802caf2:	f7ff ffdb 	bl	802caac <__mcmp>
 802caf6:	1e05      	subs	r5, r0, #0
 802caf8:	d112      	bne.n	802cb20 <__mdiff+0x3c>
 802cafa:	4629      	mov	r1, r5
 802cafc:	4630      	mov	r0, r6
 802cafe:	f7ff fd5f 	bl	802c5c0 <_Balloc>
 802cb02:	4602      	mov	r2, r0
 802cb04:	b928      	cbnz	r0, 802cb12 <__mdiff+0x2e>
 802cb06:	4b3f      	ldr	r3, [pc, #252]	@ (802cc04 <__mdiff+0x120>)
 802cb08:	f240 2137 	movw	r1, #567	@ 0x237
 802cb0c:	483e      	ldr	r0, [pc, #248]	@ (802cc08 <__mdiff+0x124>)
 802cb0e:	f7f6 fa43 	bl	8022f98 <__assert_func>
 802cb12:	2301      	movs	r3, #1
 802cb14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802cb18:	4610      	mov	r0, r2
 802cb1a:	b003      	add	sp, #12
 802cb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cb20:	bfbc      	itt	lt
 802cb22:	464b      	movlt	r3, r9
 802cb24:	46a1      	movlt	r9, r4
 802cb26:	4630      	mov	r0, r6
 802cb28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802cb2c:	bfba      	itte	lt
 802cb2e:	461c      	movlt	r4, r3
 802cb30:	2501      	movlt	r5, #1
 802cb32:	2500      	movge	r5, #0
 802cb34:	f7ff fd44 	bl	802c5c0 <_Balloc>
 802cb38:	4602      	mov	r2, r0
 802cb3a:	b918      	cbnz	r0, 802cb44 <__mdiff+0x60>
 802cb3c:	4b31      	ldr	r3, [pc, #196]	@ (802cc04 <__mdiff+0x120>)
 802cb3e:	f240 2145 	movw	r1, #581	@ 0x245
 802cb42:	e7e3      	b.n	802cb0c <__mdiff+0x28>
 802cb44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802cb48:	6926      	ldr	r6, [r4, #16]
 802cb4a:	60c5      	str	r5, [r0, #12]
 802cb4c:	f109 0310 	add.w	r3, r9, #16
 802cb50:	f109 0514 	add.w	r5, r9, #20
 802cb54:	f104 0e14 	add.w	lr, r4, #20
 802cb58:	f100 0b14 	add.w	fp, r0, #20
 802cb5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802cb60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802cb64:	9301      	str	r3, [sp, #4]
 802cb66:	46d9      	mov	r9, fp
 802cb68:	f04f 0c00 	mov.w	ip, #0
 802cb6c:	9b01      	ldr	r3, [sp, #4]
 802cb6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 802cb72:	f853 af04 	ldr.w	sl, [r3, #4]!
 802cb76:	9301      	str	r3, [sp, #4]
 802cb78:	fa1f f38a 	uxth.w	r3, sl
 802cb7c:	4619      	mov	r1, r3
 802cb7e:	b283      	uxth	r3, r0
 802cb80:	1acb      	subs	r3, r1, r3
 802cb82:	0c00      	lsrs	r0, r0, #16
 802cb84:	4463      	add	r3, ip
 802cb86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802cb8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802cb8e:	b29b      	uxth	r3, r3
 802cb90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802cb94:	4576      	cmp	r6, lr
 802cb96:	f849 3b04 	str.w	r3, [r9], #4
 802cb9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802cb9e:	d8e5      	bhi.n	802cb6c <__mdiff+0x88>
 802cba0:	1b33      	subs	r3, r6, r4
 802cba2:	3b15      	subs	r3, #21
 802cba4:	f023 0303 	bic.w	r3, r3, #3
 802cba8:	3415      	adds	r4, #21
 802cbaa:	3304      	adds	r3, #4
 802cbac:	42a6      	cmp	r6, r4
 802cbae:	bf38      	it	cc
 802cbb0:	2304      	movcc	r3, #4
 802cbb2:	441d      	add	r5, r3
 802cbb4:	445b      	add	r3, fp
 802cbb6:	461e      	mov	r6, r3
 802cbb8:	462c      	mov	r4, r5
 802cbba:	4544      	cmp	r4, r8
 802cbbc:	d30e      	bcc.n	802cbdc <__mdiff+0xf8>
 802cbbe:	f108 0103 	add.w	r1, r8, #3
 802cbc2:	1b49      	subs	r1, r1, r5
 802cbc4:	f021 0103 	bic.w	r1, r1, #3
 802cbc8:	3d03      	subs	r5, #3
 802cbca:	45a8      	cmp	r8, r5
 802cbcc:	bf38      	it	cc
 802cbce:	2100      	movcc	r1, #0
 802cbd0:	440b      	add	r3, r1
 802cbd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802cbd6:	b191      	cbz	r1, 802cbfe <__mdiff+0x11a>
 802cbd8:	6117      	str	r7, [r2, #16]
 802cbda:	e79d      	b.n	802cb18 <__mdiff+0x34>
 802cbdc:	f854 1b04 	ldr.w	r1, [r4], #4
 802cbe0:	46e6      	mov	lr, ip
 802cbe2:	0c08      	lsrs	r0, r1, #16
 802cbe4:	fa1c fc81 	uxtah	ip, ip, r1
 802cbe8:	4471      	add	r1, lr
 802cbea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802cbee:	b289      	uxth	r1, r1
 802cbf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802cbf4:	f846 1b04 	str.w	r1, [r6], #4
 802cbf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802cbfc:	e7dd      	b.n	802cbba <__mdiff+0xd6>
 802cbfe:	3f01      	subs	r7, #1
 802cc00:	e7e7      	b.n	802cbd2 <__mdiff+0xee>
 802cc02:	bf00      	nop
 802cc04:	08034502 	.word	0x08034502
 802cc08:	080345f6 	.word	0x080345f6

0802cc0c <__ulp>:
 802cc0c:	b082      	sub	sp, #8
 802cc0e:	ed8d 0b00 	vstr	d0, [sp]
 802cc12:	9a01      	ldr	r2, [sp, #4]
 802cc14:	4b0f      	ldr	r3, [pc, #60]	@ (802cc54 <__ulp+0x48>)
 802cc16:	4013      	ands	r3, r2
 802cc18:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 802cc1c:	2b00      	cmp	r3, #0
 802cc1e:	dc08      	bgt.n	802cc32 <__ulp+0x26>
 802cc20:	425b      	negs	r3, r3
 802cc22:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802cc26:	ea4f 5223 	mov.w	r2, r3, asr #20
 802cc2a:	da04      	bge.n	802cc36 <__ulp+0x2a>
 802cc2c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802cc30:	4113      	asrs	r3, r2
 802cc32:	2200      	movs	r2, #0
 802cc34:	e008      	b.n	802cc48 <__ulp+0x3c>
 802cc36:	f1a2 0314 	sub.w	r3, r2, #20
 802cc3a:	2b1e      	cmp	r3, #30
 802cc3c:	bfda      	itte	le
 802cc3e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802cc42:	40da      	lsrle	r2, r3
 802cc44:	2201      	movgt	r2, #1
 802cc46:	2300      	movs	r3, #0
 802cc48:	4619      	mov	r1, r3
 802cc4a:	4610      	mov	r0, r2
 802cc4c:	ec41 0b10 	vmov	d0, r0, r1
 802cc50:	b002      	add	sp, #8
 802cc52:	4770      	bx	lr
 802cc54:	7ff00000 	.word	0x7ff00000

0802cc58 <__b2d>:
 802cc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cc5c:	6906      	ldr	r6, [r0, #16]
 802cc5e:	f100 0814 	add.w	r8, r0, #20
 802cc62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802cc66:	1f37      	subs	r7, r6, #4
 802cc68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802cc6c:	4610      	mov	r0, r2
 802cc6e:	f7ff fd65 	bl	802c73c <__hi0bits>
 802cc72:	f1c0 0320 	rsb	r3, r0, #32
 802cc76:	280a      	cmp	r0, #10
 802cc78:	600b      	str	r3, [r1, #0]
 802cc7a:	491b      	ldr	r1, [pc, #108]	@ (802cce8 <__b2d+0x90>)
 802cc7c:	dc15      	bgt.n	802ccaa <__b2d+0x52>
 802cc7e:	f1c0 0c0b 	rsb	ip, r0, #11
 802cc82:	fa22 f30c 	lsr.w	r3, r2, ip
 802cc86:	45b8      	cmp	r8, r7
 802cc88:	ea43 0501 	orr.w	r5, r3, r1
 802cc8c:	bf34      	ite	cc
 802cc8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802cc92:	2300      	movcs	r3, #0
 802cc94:	3015      	adds	r0, #21
 802cc96:	fa02 f000 	lsl.w	r0, r2, r0
 802cc9a:	fa23 f30c 	lsr.w	r3, r3, ip
 802cc9e:	4303      	orrs	r3, r0
 802cca0:	461c      	mov	r4, r3
 802cca2:	ec45 4b10 	vmov	d0, r4, r5
 802cca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ccaa:	45b8      	cmp	r8, r7
 802ccac:	bf3a      	itte	cc
 802ccae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802ccb2:	f1a6 0708 	subcc.w	r7, r6, #8
 802ccb6:	2300      	movcs	r3, #0
 802ccb8:	380b      	subs	r0, #11
 802ccba:	d012      	beq.n	802cce2 <__b2d+0x8a>
 802ccbc:	f1c0 0120 	rsb	r1, r0, #32
 802ccc0:	fa23 f401 	lsr.w	r4, r3, r1
 802ccc4:	4082      	lsls	r2, r0
 802ccc6:	4322      	orrs	r2, r4
 802ccc8:	4547      	cmp	r7, r8
 802ccca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 802ccce:	bf8c      	ite	hi
 802ccd0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802ccd4:	2200      	movls	r2, #0
 802ccd6:	4083      	lsls	r3, r0
 802ccd8:	40ca      	lsrs	r2, r1
 802ccda:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802ccde:	4313      	orrs	r3, r2
 802cce0:	e7de      	b.n	802cca0 <__b2d+0x48>
 802cce2:	ea42 0501 	orr.w	r5, r2, r1
 802cce6:	e7db      	b.n	802cca0 <__b2d+0x48>
 802cce8:	3ff00000 	.word	0x3ff00000

0802ccec <__d2b>:
 802ccec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802ccf0:	460f      	mov	r7, r1
 802ccf2:	2101      	movs	r1, #1
 802ccf4:	ec59 8b10 	vmov	r8, r9, d0
 802ccf8:	4616      	mov	r6, r2
 802ccfa:	f7ff fc61 	bl	802c5c0 <_Balloc>
 802ccfe:	4604      	mov	r4, r0
 802cd00:	b930      	cbnz	r0, 802cd10 <__d2b+0x24>
 802cd02:	4602      	mov	r2, r0
 802cd04:	4b23      	ldr	r3, [pc, #140]	@ (802cd94 <__d2b+0xa8>)
 802cd06:	4824      	ldr	r0, [pc, #144]	@ (802cd98 <__d2b+0xac>)
 802cd08:	f240 310f 	movw	r1, #783	@ 0x30f
 802cd0c:	f7f6 f944 	bl	8022f98 <__assert_func>
 802cd10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802cd14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802cd18:	b10d      	cbz	r5, 802cd1e <__d2b+0x32>
 802cd1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802cd1e:	9301      	str	r3, [sp, #4]
 802cd20:	f1b8 0300 	subs.w	r3, r8, #0
 802cd24:	d023      	beq.n	802cd6e <__d2b+0x82>
 802cd26:	4668      	mov	r0, sp
 802cd28:	9300      	str	r3, [sp, #0]
 802cd2a:	f7ff fd26 	bl	802c77a <__lo0bits>
 802cd2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 802cd32:	b1d0      	cbz	r0, 802cd6a <__d2b+0x7e>
 802cd34:	f1c0 0320 	rsb	r3, r0, #32
 802cd38:	fa02 f303 	lsl.w	r3, r2, r3
 802cd3c:	430b      	orrs	r3, r1
 802cd3e:	40c2      	lsrs	r2, r0
 802cd40:	6163      	str	r3, [r4, #20]
 802cd42:	9201      	str	r2, [sp, #4]
 802cd44:	9b01      	ldr	r3, [sp, #4]
 802cd46:	61a3      	str	r3, [r4, #24]
 802cd48:	2b00      	cmp	r3, #0
 802cd4a:	bf0c      	ite	eq
 802cd4c:	2201      	moveq	r2, #1
 802cd4e:	2202      	movne	r2, #2
 802cd50:	6122      	str	r2, [r4, #16]
 802cd52:	b1a5      	cbz	r5, 802cd7e <__d2b+0x92>
 802cd54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802cd58:	4405      	add	r5, r0
 802cd5a:	603d      	str	r5, [r7, #0]
 802cd5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802cd60:	6030      	str	r0, [r6, #0]
 802cd62:	4620      	mov	r0, r4
 802cd64:	b003      	add	sp, #12
 802cd66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802cd6a:	6161      	str	r1, [r4, #20]
 802cd6c:	e7ea      	b.n	802cd44 <__d2b+0x58>
 802cd6e:	a801      	add	r0, sp, #4
 802cd70:	f7ff fd03 	bl	802c77a <__lo0bits>
 802cd74:	9b01      	ldr	r3, [sp, #4]
 802cd76:	6163      	str	r3, [r4, #20]
 802cd78:	3020      	adds	r0, #32
 802cd7a:	2201      	movs	r2, #1
 802cd7c:	e7e8      	b.n	802cd50 <__d2b+0x64>
 802cd7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802cd82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802cd86:	6038      	str	r0, [r7, #0]
 802cd88:	6918      	ldr	r0, [r3, #16]
 802cd8a:	f7ff fcd7 	bl	802c73c <__hi0bits>
 802cd8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802cd92:	e7e5      	b.n	802cd60 <__d2b+0x74>
 802cd94:	08034502 	.word	0x08034502
 802cd98:	080345f6 	.word	0x080345f6

0802cd9c <__ratio>:
 802cd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cda0:	b085      	sub	sp, #20
 802cda2:	e9cd 1000 	strd	r1, r0, [sp]
 802cda6:	a902      	add	r1, sp, #8
 802cda8:	f7ff ff56 	bl	802cc58 <__b2d>
 802cdac:	9800      	ldr	r0, [sp, #0]
 802cdae:	a903      	add	r1, sp, #12
 802cdb0:	ec55 4b10 	vmov	r4, r5, d0
 802cdb4:	f7ff ff50 	bl	802cc58 <__b2d>
 802cdb8:	9b01      	ldr	r3, [sp, #4]
 802cdba:	6919      	ldr	r1, [r3, #16]
 802cdbc:	9b00      	ldr	r3, [sp, #0]
 802cdbe:	691b      	ldr	r3, [r3, #16]
 802cdc0:	1ac9      	subs	r1, r1, r3
 802cdc2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802cdc6:	1a9b      	subs	r3, r3, r2
 802cdc8:	ec5b ab10 	vmov	sl, fp, d0
 802cdcc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 802cdd0:	2b00      	cmp	r3, #0
 802cdd2:	bfce      	itee	gt
 802cdd4:	462a      	movgt	r2, r5
 802cdd6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802cdda:	465a      	movle	r2, fp
 802cddc:	462f      	mov	r7, r5
 802cdde:	46d9      	mov	r9, fp
 802cde0:	bfcc      	ite	gt
 802cde2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802cde6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 802cdea:	464b      	mov	r3, r9
 802cdec:	4652      	mov	r2, sl
 802cdee:	4620      	mov	r0, r4
 802cdf0:	4639      	mov	r1, r7
 802cdf2:	f7d3 fd43 	bl	800087c <__aeabi_ddiv>
 802cdf6:	ec41 0b10 	vmov	d0, r0, r1
 802cdfa:	b005      	add	sp, #20
 802cdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802ce00 <__copybits>:
 802ce00:	3901      	subs	r1, #1
 802ce02:	b570      	push	{r4, r5, r6, lr}
 802ce04:	1149      	asrs	r1, r1, #5
 802ce06:	6914      	ldr	r4, [r2, #16]
 802ce08:	3101      	adds	r1, #1
 802ce0a:	f102 0314 	add.w	r3, r2, #20
 802ce0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802ce12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802ce16:	1f05      	subs	r5, r0, #4
 802ce18:	42a3      	cmp	r3, r4
 802ce1a:	d30c      	bcc.n	802ce36 <__copybits+0x36>
 802ce1c:	1aa3      	subs	r3, r4, r2
 802ce1e:	3b11      	subs	r3, #17
 802ce20:	f023 0303 	bic.w	r3, r3, #3
 802ce24:	3211      	adds	r2, #17
 802ce26:	42a2      	cmp	r2, r4
 802ce28:	bf88      	it	hi
 802ce2a:	2300      	movhi	r3, #0
 802ce2c:	4418      	add	r0, r3
 802ce2e:	2300      	movs	r3, #0
 802ce30:	4288      	cmp	r0, r1
 802ce32:	d305      	bcc.n	802ce40 <__copybits+0x40>
 802ce34:	bd70      	pop	{r4, r5, r6, pc}
 802ce36:	f853 6b04 	ldr.w	r6, [r3], #4
 802ce3a:	f845 6f04 	str.w	r6, [r5, #4]!
 802ce3e:	e7eb      	b.n	802ce18 <__copybits+0x18>
 802ce40:	f840 3b04 	str.w	r3, [r0], #4
 802ce44:	e7f4      	b.n	802ce30 <__copybits+0x30>

0802ce46 <__any_on>:
 802ce46:	f100 0214 	add.w	r2, r0, #20
 802ce4a:	6900      	ldr	r0, [r0, #16]
 802ce4c:	114b      	asrs	r3, r1, #5
 802ce4e:	4298      	cmp	r0, r3
 802ce50:	b510      	push	{r4, lr}
 802ce52:	db11      	blt.n	802ce78 <__any_on+0x32>
 802ce54:	dd0a      	ble.n	802ce6c <__any_on+0x26>
 802ce56:	f011 011f 	ands.w	r1, r1, #31
 802ce5a:	d007      	beq.n	802ce6c <__any_on+0x26>
 802ce5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802ce60:	fa24 f001 	lsr.w	r0, r4, r1
 802ce64:	fa00 f101 	lsl.w	r1, r0, r1
 802ce68:	428c      	cmp	r4, r1
 802ce6a:	d10b      	bne.n	802ce84 <__any_on+0x3e>
 802ce6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802ce70:	4293      	cmp	r3, r2
 802ce72:	d803      	bhi.n	802ce7c <__any_on+0x36>
 802ce74:	2000      	movs	r0, #0
 802ce76:	bd10      	pop	{r4, pc}
 802ce78:	4603      	mov	r3, r0
 802ce7a:	e7f7      	b.n	802ce6c <__any_on+0x26>
 802ce7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802ce80:	2900      	cmp	r1, #0
 802ce82:	d0f5      	beq.n	802ce70 <__any_on+0x2a>
 802ce84:	2001      	movs	r0, #1
 802ce86:	e7f6      	b.n	802ce76 <__any_on+0x30>

0802ce88 <realloc>:
 802ce88:	4b02      	ldr	r3, [pc, #8]	@ (802ce94 <realloc+0xc>)
 802ce8a:	460a      	mov	r2, r1
 802ce8c:	4601      	mov	r1, r0
 802ce8e:	6818      	ldr	r0, [r3, #0]
 802ce90:	f000 b890 	b.w	802cfb4 <_realloc_r>
 802ce94:	20000840 	.word	0x20000840

0802ce98 <_fclose_r>:
 802ce98:	b570      	push	{r4, r5, r6, lr}
 802ce9a:	4605      	mov	r5, r0
 802ce9c:	460c      	mov	r4, r1
 802ce9e:	b1b1      	cbz	r1, 802cece <_fclose_r+0x36>
 802cea0:	b118      	cbz	r0, 802ceaa <_fclose_r+0x12>
 802cea2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802cea4:	b90b      	cbnz	r3, 802ceaa <_fclose_r+0x12>
 802cea6:	f7f8 fdb1 	bl	8025a0c <__sinit>
 802ceaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ceac:	07de      	lsls	r6, r3, #31
 802ceae:	d405      	bmi.n	802cebc <_fclose_r+0x24>
 802ceb0:	89a3      	ldrh	r3, [r4, #12]
 802ceb2:	0598      	lsls	r0, r3, #22
 802ceb4:	d402      	bmi.n	802cebc <_fclose_r+0x24>
 802ceb6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ceb8:	f7fa faa3 	bl	8027402 <__retarget_lock_acquire_recursive>
 802cebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cec0:	b943      	cbnz	r3, 802ced4 <_fclose_r+0x3c>
 802cec2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802cec4:	07d9      	lsls	r1, r3, #31
 802cec6:	d402      	bmi.n	802cece <_fclose_r+0x36>
 802cec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ceca:	f7fa fa9c 	bl	8027406 <__retarget_lock_release_recursive>
 802cece:	2600      	movs	r6, #0
 802ced0:	4630      	mov	r0, r6
 802ced2:	bd70      	pop	{r4, r5, r6, pc}
 802ced4:	4621      	mov	r1, r4
 802ced6:	4628      	mov	r0, r5
 802ced8:	f7f8 fbce 	bl	8025678 <__sflush_r>
 802cedc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802cede:	4606      	mov	r6, r0
 802cee0:	b133      	cbz	r3, 802cef0 <_fclose_r+0x58>
 802cee2:	69e1      	ldr	r1, [r4, #28]
 802cee4:	4628      	mov	r0, r5
 802cee6:	4798      	blx	r3
 802cee8:	2800      	cmp	r0, #0
 802ceea:	bfb8      	it	lt
 802ceec:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 802cef0:	89a3      	ldrh	r3, [r4, #12]
 802cef2:	061a      	lsls	r2, r3, #24
 802cef4:	d503      	bpl.n	802cefe <_fclose_r+0x66>
 802cef6:	6921      	ldr	r1, [r4, #16]
 802cef8:	4628      	mov	r0, r5
 802cefa:	f7fb f987 	bl	802820c <_free_r>
 802cefe:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802cf00:	b141      	cbz	r1, 802cf14 <_fclose_r+0x7c>
 802cf02:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802cf06:	4299      	cmp	r1, r3
 802cf08:	d002      	beq.n	802cf10 <_fclose_r+0x78>
 802cf0a:	4628      	mov	r0, r5
 802cf0c:	f7fb f97e 	bl	802820c <_free_r>
 802cf10:	2300      	movs	r3, #0
 802cf12:	6323      	str	r3, [r4, #48]	@ 0x30
 802cf14:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802cf16:	b121      	cbz	r1, 802cf22 <_fclose_r+0x8a>
 802cf18:	4628      	mov	r0, r5
 802cf1a:	f7fb f977 	bl	802820c <_free_r>
 802cf1e:	2300      	movs	r3, #0
 802cf20:	6463      	str	r3, [r4, #68]	@ 0x44
 802cf22:	f7f8 fd67 	bl	80259f4 <__sfp_lock_acquire>
 802cf26:	2300      	movs	r3, #0
 802cf28:	81a3      	strh	r3, [r4, #12]
 802cf2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802cf2c:	07db      	lsls	r3, r3, #31
 802cf2e:	d402      	bmi.n	802cf36 <_fclose_r+0x9e>
 802cf30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802cf32:	f7fa fa68 	bl	8027406 <__retarget_lock_release_recursive>
 802cf36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802cf38:	f7fa fa61 	bl	80273fe <__retarget_lock_close_recursive>
 802cf3c:	f7f8 fd60 	bl	8025a00 <__sfp_lock_release>
 802cf40:	e7c6      	b.n	802ced0 <_fclose_r+0x38>

0802cf42 <__sccl>:
 802cf42:	b570      	push	{r4, r5, r6, lr}
 802cf44:	780b      	ldrb	r3, [r1, #0]
 802cf46:	4604      	mov	r4, r0
 802cf48:	2b5e      	cmp	r3, #94	@ 0x5e
 802cf4a:	bf0b      	itete	eq
 802cf4c:	784b      	ldrbeq	r3, [r1, #1]
 802cf4e:	1c4a      	addne	r2, r1, #1
 802cf50:	1c8a      	addeq	r2, r1, #2
 802cf52:	2100      	movne	r1, #0
 802cf54:	bf08      	it	eq
 802cf56:	2101      	moveq	r1, #1
 802cf58:	3801      	subs	r0, #1
 802cf5a:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 802cf5e:	f800 1f01 	strb.w	r1, [r0, #1]!
 802cf62:	42a8      	cmp	r0, r5
 802cf64:	d1fb      	bne.n	802cf5e <__sccl+0x1c>
 802cf66:	b90b      	cbnz	r3, 802cf6c <__sccl+0x2a>
 802cf68:	1e50      	subs	r0, r2, #1
 802cf6a:	bd70      	pop	{r4, r5, r6, pc}
 802cf6c:	f081 0101 	eor.w	r1, r1, #1
 802cf70:	54e1      	strb	r1, [r4, r3]
 802cf72:	4610      	mov	r0, r2
 802cf74:	4602      	mov	r2, r0
 802cf76:	f812 5b01 	ldrb.w	r5, [r2], #1
 802cf7a:	2d2d      	cmp	r5, #45	@ 0x2d
 802cf7c:	d005      	beq.n	802cf8a <__sccl+0x48>
 802cf7e:	2d5d      	cmp	r5, #93	@ 0x5d
 802cf80:	d016      	beq.n	802cfb0 <__sccl+0x6e>
 802cf82:	2d00      	cmp	r5, #0
 802cf84:	d0f1      	beq.n	802cf6a <__sccl+0x28>
 802cf86:	462b      	mov	r3, r5
 802cf88:	e7f2      	b.n	802cf70 <__sccl+0x2e>
 802cf8a:	7846      	ldrb	r6, [r0, #1]
 802cf8c:	2e5d      	cmp	r6, #93	@ 0x5d
 802cf8e:	d0fa      	beq.n	802cf86 <__sccl+0x44>
 802cf90:	42b3      	cmp	r3, r6
 802cf92:	dcf8      	bgt.n	802cf86 <__sccl+0x44>
 802cf94:	3002      	adds	r0, #2
 802cf96:	461a      	mov	r2, r3
 802cf98:	3201      	adds	r2, #1
 802cf9a:	4296      	cmp	r6, r2
 802cf9c:	54a1      	strb	r1, [r4, r2]
 802cf9e:	dcfb      	bgt.n	802cf98 <__sccl+0x56>
 802cfa0:	1af2      	subs	r2, r6, r3
 802cfa2:	3a01      	subs	r2, #1
 802cfa4:	1c5d      	adds	r5, r3, #1
 802cfa6:	42b3      	cmp	r3, r6
 802cfa8:	bfa8      	it	ge
 802cfaa:	2200      	movge	r2, #0
 802cfac:	18ab      	adds	r3, r5, r2
 802cfae:	e7e1      	b.n	802cf74 <__sccl+0x32>
 802cfb0:	4610      	mov	r0, r2
 802cfb2:	e7da      	b.n	802cf6a <__sccl+0x28>

0802cfb4 <_realloc_r>:
 802cfb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cfb8:	4682      	mov	sl, r0
 802cfba:	4693      	mov	fp, r2
 802cfbc:	460c      	mov	r4, r1
 802cfbe:	b929      	cbnz	r1, 802cfcc <_realloc_r+0x18>
 802cfc0:	4611      	mov	r1, r2
 802cfc2:	b003      	add	sp, #12
 802cfc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cfc8:	f7f6 b860 	b.w	802308c <_malloc_r>
 802cfcc:	f7f8 fa1a 	bl	8025404 <__malloc_lock>
 802cfd0:	f10b 080b 	add.w	r8, fp, #11
 802cfd4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 802cfd8:	f1b8 0f16 	cmp.w	r8, #22
 802cfdc:	f1a4 0908 	sub.w	r9, r4, #8
 802cfe0:	f025 0603 	bic.w	r6, r5, #3
 802cfe4:	d908      	bls.n	802cff8 <_realloc_r+0x44>
 802cfe6:	f038 0807 	bics.w	r8, r8, #7
 802cfea:	d507      	bpl.n	802cffc <_realloc_r+0x48>
 802cfec:	230c      	movs	r3, #12
 802cfee:	f8ca 3000 	str.w	r3, [sl]
 802cff2:	f04f 0b00 	mov.w	fp, #0
 802cff6:	e032      	b.n	802d05e <_realloc_r+0xaa>
 802cff8:	f04f 0810 	mov.w	r8, #16
 802cffc:	45c3      	cmp	fp, r8
 802cffe:	d8f5      	bhi.n	802cfec <_realloc_r+0x38>
 802d000:	4546      	cmp	r6, r8
 802d002:	f280 8174 	bge.w	802d2ee <_realloc_r+0x33a>
 802d006:	4b9e      	ldr	r3, [pc, #632]	@ (802d280 <_realloc_r+0x2cc>)
 802d008:	f8d3 c008 	ldr.w	ip, [r3, #8]
 802d00c:	eb09 0106 	add.w	r1, r9, r6
 802d010:	458c      	cmp	ip, r1
 802d012:	6848      	ldr	r0, [r1, #4]
 802d014:	d005      	beq.n	802d022 <_realloc_r+0x6e>
 802d016:	f020 0201 	bic.w	r2, r0, #1
 802d01a:	440a      	add	r2, r1
 802d01c:	6852      	ldr	r2, [r2, #4]
 802d01e:	07d7      	lsls	r7, r2, #31
 802d020:	d449      	bmi.n	802d0b6 <_realloc_r+0x102>
 802d022:	f020 0003 	bic.w	r0, r0, #3
 802d026:	458c      	cmp	ip, r1
 802d028:	eb06 0700 	add.w	r7, r6, r0
 802d02c:	d11b      	bne.n	802d066 <_realloc_r+0xb2>
 802d02e:	f108 0210 	add.w	r2, r8, #16
 802d032:	42ba      	cmp	r2, r7
 802d034:	dc41      	bgt.n	802d0ba <_realloc_r+0x106>
 802d036:	eb09 0208 	add.w	r2, r9, r8
 802d03a:	eba7 0708 	sub.w	r7, r7, r8
 802d03e:	f047 0701 	orr.w	r7, r7, #1
 802d042:	609a      	str	r2, [r3, #8]
 802d044:	6057      	str	r7, [r2, #4]
 802d046:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802d04a:	f003 0301 	and.w	r3, r3, #1
 802d04e:	ea43 0308 	orr.w	r3, r3, r8
 802d052:	f844 3c04 	str.w	r3, [r4, #-4]
 802d056:	4650      	mov	r0, sl
 802d058:	f7f8 f9da 	bl	8025410 <__malloc_unlock>
 802d05c:	46a3      	mov	fp, r4
 802d05e:	4658      	mov	r0, fp
 802d060:	b003      	add	sp, #12
 802d062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d066:	45b8      	cmp	r8, r7
 802d068:	dc27      	bgt.n	802d0ba <_realloc_r+0x106>
 802d06a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 802d06e:	60d3      	str	r3, [r2, #12]
 802d070:	609a      	str	r2, [r3, #8]
 802d072:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802d076:	eba7 0008 	sub.w	r0, r7, r8
 802d07a:	280f      	cmp	r0, #15
 802d07c:	f003 0301 	and.w	r3, r3, #1
 802d080:	eb09 0207 	add.w	r2, r9, r7
 802d084:	f240 8135 	bls.w	802d2f2 <_realloc_r+0x33e>
 802d088:	eb09 0108 	add.w	r1, r9, r8
 802d08c:	ea48 0303 	orr.w	r3, r8, r3
 802d090:	f040 0001 	orr.w	r0, r0, #1
 802d094:	f8c9 3004 	str.w	r3, [r9, #4]
 802d098:	6048      	str	r0, [r1, #4]
 802d09a:	6853      	ldr	r3, [r2, #4]
 802d09c:	f043 0301 	orr.w	r3, r3, #1
 802d0a0:	6053      	str	r3, [r2, #4]
 802d0a2:	3108      	adds	r1, #8
 802d0a4:	4650      	mov	r0, sl
 802d0a6:	f7fb f8b1 	bl	802820c <_free_r>
 802d0aa:	4650      	mov	r0, sl
 802d0ac:	f7f8 f9b0 	bl	8025410 <__malloc_unlock>
 802d0b0:	f109 0b08 	add.w	fp, r9, #8
 802d0b4:	e7d3      	b.n	802d05e <_realloc_r+0xaa>
 802d0b6:	2000      	movs	r0, #0
 802d0b8:	4601      	mov	r1, r0
 802d0ba:	07ea      	lsls	r2, r5, #31
 802d0bc:	f100 80c7 	bmi.w	802d24e <_realloc_r+0x29a>
 802d0c0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 802d0c4:	eba9 0505 	sub.w	r5, r9, r5
 802d0c8:	686a      	ldr	r2, [r5, #4]
 802d0ca:	f022 0203 	bic.w	r2, r2, #3
 802d0ce:	4432      	add	r2, r6
 802d0d0:	9201      	str	r2, [sp, #4]
 802d0d2:	2900      	cmp	r1, #0
 802d0d4:	f000 8086 	beq.w	802d1e4 <_realloc_r+0x230>
 802d0d8:	458c      	cmp	ip, r1
 802d0da:	eb00 0702 	add.w	r7, r0, r2
 802d0de:	d149      	bne.n	802d174 <_realloc_r+0x1c0>
 802d0e0:	f108 0210 	add.w	r2, r8, #16
 802d0e4:	42ba      	cmp	r2, r7
 802d0e6:	dc7d      	bgt.n	802d1e4 <_realloc_r+0x230>
 802d0e8:	46ab      	mov	fp, r5
 802d0ea:	68ea      	ldr	r2, [r5, #12]
 802d0ec:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 802d0f0:	60ca      	str	r2, [r1, #12]
 802d0f2:	6091      	str	r1, [r2, #8]
 802d0f4:	1f32      	subs	r2, r6, #4
 802d0f6:	2a24      	cmp	r2, #36	@ 0x24
 802d0f8:	d836      	bhi.n	802d168 <_realloc_r+0x1b4>
 802d0fa:	2a13      	cmp	r2, #19
 802d0fc:	d932      	bls.n	802d164 <_realloc_r+0x1b0>
 802d0fe:	6821      	ldr	r1, [r4, #0]
 802d100:	60a9      	str	r1, [r5, #8]
 802d102:	6861      	ldr	r1, [r4, #4]
 802d104:	60e9      	str	r1, [r5, #12]
 802d106:	2a1b      	cmp	r2, #27
 802d108:	d81a      	bhi.n	802d140 <_realloc_r+0x18c>
 802d10a:	3408      	adds	r4, #8
 802d10c:	f105 0210 	add.w	r2, r5, #16
 802d110:	6821      	ldr	r1, [r4, #0]
 802d112:	6011      	str	r1, [r2, #0]
 802d114:	6861      	ldr	r1, [r4, #4]
 802d116:	6051      	str	r1, [r2, #4]
 802d118:	68a1      	ldr	r1, [r4, #8]
 802d11a:	6091      	str	r1, [r2, #8]
 802d11c:	eb05 0208 	add.w	r2, r5, r8
 802d120:	eba7 0708 	sub.w	r7, r7, r8
 802d124:	f047 0701 	orr.w	r7, r7, #1
 802d128:	609a      	str	r2, [r3, #8]
 802d12a:	6057      	str	r7, [r2, #4]
 802d12c:	686b      	ldr	r3, [r5, #4]
 802d12e:	f003 0301 	and.w	r3, r3, #1
 802d132:	ea43 0308 	orr.w	r3, r3, r8
 802d136:	606b      	str	r3, [r5, #4]
 802d138:	4650      	mov	r0, sl
 802d13a:	f7f8 f969 	bl	8025410 <__malloc_unlock>
 802d13e:	e78e      	b.n	802d05e <_realloc_r+0xaa>
 802d140:	68a1      	ldr	r1, [r4, #8]
 802d142:	6129      	str	r1, [r5, #16]
 802d144:	68e1      	ldr	r1, [r4, #12]
 802d146:	6169      	str	r1, [r5, #20]
 802d148:	2a24      	cmp	r2, #36	@ 0x24
 802d14a:	bf01      	itttt	eq
 802d14c:	6922      	ldreq	r2, [r4, #16]
 802d14e:	61aa      	streq	r2, [r5, #24]
 802d150:	6961      	ldreq	r1, [r4, #20]
 802d152:	61e9      	streq	r1, [r5, #28]
 802d154:	bf19      	ittee	ne
 802d156:	3410      	addne	r4, #16
 802d158:	f105 0218 	addne.w	r2, r5, #24
 802d15c:	f105 0220 	addeq.w	r2, r5, #32
 802d160:	3418      	addeq	r4, #24
 802d162:	e7d5      	b.n	802d110 <_realloc_r+0x15c>
 802d164:	465a      	mov	r2, fp
 802d166:	e7d3      	b.n	802d110 <_realloc_r+0x15c>
 802d168:	4621      	mov	r1, r4
 802d16a:	4658      	mov	r0, fp
 802d16c:	f7f8 feda 	bl	8025f24 <memmove>
 802d170:	4b43      	ldr	r3, [pc, #268]	@ (802d280 <_realloc_r+0x2cc>)
 802d172:	e7d3      	b.n	802d11c <_realloc_r+0x168>
 802d174:	45b8      	cmp	r8, r7
 802d176:	dc35      	bgt.n	802d1e4 <_realloc_r+0x230>
 802d178:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 802d17c:	4628      	mov	r0, r5
 802d17e:	60d3      	str	r3, [r2, #12]
 802d180:	609a      	str	r2, [r3, #8]
 802d182:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802d186:	68eb      	ldr	r3, [r5, #12]
 802d188:	60d3      	str	r3, [r2, #12]
 802d18a:	609a      	str	r2, [r3, #8]
 802d18c:	1f32      	subs	r2, r6, #4
 802d18e:	2a24      	cmp	r2, #36	@ 0x24
 802d190:	d824      	bhi.n	802d1dc <_realloc_r+0x228>
 802d192:	2a13      	cmp	r2, #19
 802d194:	d908      	bls.n	802d1a8 <_realloc_r+0x1f4>
 802d196:	6823      	ldr	r3, [r4, #0]
 802d198:	60ab      	str	r3, [r5, #8]
 802d19a:	6863      	ldr	r3, [r4, #4]
 802d19c:	60eb      	str	r3, [r5, #12]
 802d19e:	2a1b      	cmp	r2, #27
 802d1a0:	d80a      	bhi.n	802d1b8 <_realloc_r+0x204>
 802d1a2:	3408      	adds	r4, #8
 802d1a4:	f105 0010 	add.w	r0, r5, #16
 802d1a8:	6823      	ldr	r3, [r4, #0]
 802d1aa:	6003      	str	r3, [r0, #0]
 802d1ac:	6863      	ldr	r3, [r4, #4]
 802d1ae:	6043      	str	r3, [r0, #4]
 802d1b0:	68a3      	ldr	r3, [r4, #8]
 802d1b2:	6083      	str	r3, [r0, #8]
 802d1b4:	46a9      	mov	r9, r5
 802d1b6:	e75c      	b.n	802d072 <_realloc_r+0xbe>
 802d1b8:	68a3      	ldr	r3, [r4, #8]
 802d1ba:	612b      	str	r3, [r5, #16]
 802d1bc:	68e3      	ldr	r3, [r4, #12]
 802d1be:	616b      	str	r3, [r5, #20]
 802d1c0:	2a24      	cmp	r2, #36	@ 0x24
 802d1c2:	bf01      	itttt	eq
 802d1c4:	6923      	ldreq	r3, [r4, #16]
 802d1c6:	61ab      	streq	r3, [r5, #24]
 802d1c8:	6963      	ldreq	r3, [r4, #20]
 802d1ca:	61eb      	streq	r3, [r5, #28]
 802d1cc:	bf19      	ittee	ne
 802d1ce:	3410      	addne	r4, #16
 802d1d0:	f105 0018 	addne.w	r0, r5, #24
 802d1d4:	f105 0020 	addeq.w	r0, r5, #32
 802d1d8:	3418      	addeq	r4, #24
 802d1da:	e7e5      	b.n	802d1a8 <_realloc_r+0x1f4>
 802d1dc:	4621      	mov	r1, r4
 802d1de:	f7f8 fea1 	bl	8025f24 <memmove>
 802d1e2:	e7e7      	b.n	802d1b4 <_realloc_r+0x200>
 802d1e4:	9b01      	ldr	r3, [sp, #4]
 802d1e6:	4598      	cmp	r8, r3
 802d1e8:	dc31      	bgt.n	802d24e <_realloc_r+0x29a>
 802d1ea:	4628      	mov	r0, r5
 802d1ec:	68eb      	ldr	r3, [r5, #12]
 802d1ee:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802d1f2:	60d3      	str	r3, [r2, #12]
 802d1f4:	609a      	str	r2, [r3, #8]
 802d1f6:	1f32      	subs	r2, r6, #4
 802d1f8:	2a24      	cmp	r2, #36	@ 0x24
 802d1fa:	d824      	bhi.n	802d246 <_realloc_r+0x292>
 802d1fc:	2a13      	cmp	r2, #19
 802d1fe:	d908      	bls.n	802d212 <_realloc_r+0x25e>
 802d200:	6823      	ldr	r3, [r4, #0]
 802d202:	60ab      	str	r3, [r5, #8]
 802d204:	6863      	ldr	r3, [r4, #4]
 802d206:	60eb      	str	r3, [r5, #12]
 802d208:	2a1b      	cmp	r2, #27
 802d20a:	d80a      	bhi.n	802d222 <_realloc_r+0x26e>
 802d20c:	3408      	adds	r4, #8
 802d20e:	f105 0010 	add.w	r0, r5, #16
 802d212:	6823      	ldr	r3, [r4, #0]
 802d214:	6003      	str	r3, [r0, #0]
 802d216:	6863      	ldr	r3, [r4, #4]
 802d218:	6043      	str	r3, [r0, #4]
 802d21a:	68a3      	ldr	r3, [r4, #8]
 802d21c:	6083      	str	r3, [r0, #8]
 802d21e:	9f01      	ldr	r7, [sp, #4]
 802d220:	e7c8      	b.n	802d1b4 <_realloc_r+0x200>
 802d222:	68a3      	ldr	r3, [r4, #8]
 802d224:	612b      	str	r3, [r5, #16]
 802d226:	68e3      	ldr	r3, [r4, #12]
 802d228:	616b      	str	r3, [r5, #20]
 802d22a:	2a24      	cmp	r2, #36	@ 0x24
 802d22c:	bf01      	itttt	eq
 802d22e:	6923      	ldreq	r3, [r4, #16]
 802d230:	61ab      	streq	r3, [r5, #24]
 802d232:	6963      	ldreq	r3, [r4, #20]
 802d234:	61eb      	streq	r3, [r5, #28]
 802d236:	bf19      	ittee	ne
 802d238:	3410      	addne	r4, #16
 802d23a:	f105 0018 	addne.w	r0, r5, #24
 802d23e:	f105 0020 	addeq.w	r0, r5, #32
 802d242:	3418      	addeq	r4, #24
 802d244:	e7e5      	b.n	802d212 <_realloc_r+0x25e>
 802d246:	4621      	mov	r1, r4
 802d248:	f7f8 fe6c 	bl	8025f24 <memmove>
 802d24c:	e7e7      	b.n	802d21e <_realloc_r+0x26a>
 802d24e:	4659      	mov	r1, fp
 802d250:	4650      	mov	r0, sl
 802d252:	f7f5 ff1b 	bl	802308c <_malloc_r>
 802d256:	4683      	mov	fp, r0
 802d258:	b918      	cbnz	r0, 802d262 <_realloc_r+0x2ae>
 802d25a:	4650      	mov	r0, sl
 802d25c:	f7f8 f8d8 	bl	8025410 <__malloc_unlock>
 802d260:	e6c7      	b.n	802cff2 <_realloc_r+0x3e>
 802d262:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802d266:	f023 0301 	bic.w	r3, r3, #1
 802d26a:	444b      	add	r3, r9
 802d26c:	f1a0 0208 	sub.w	r2, r0, #8
 802d270:	4293      	cmp	r3, r2
 802d272:	d107      	bne.n	802d284 <_realloc_r+0x2d0>
 802d274:	f850 7c04 	ldr.w	r7, [r0, #-4]
 802d278:	f027 0703 	bic.w	r7, r7, #3
 802d27c:	4437      	add	r7, r6
 802d27e:	e6f8      	b.n	802d072 <_realloc_r+0xbe>
 802d280:	200002b8 	.word	0x200002b8
 802d284:	1f32      	subs	r2, r6, #4
 802d286:	2a24      	cmp	r2, #36	@ 0x24
 802d288:	d82d      	bhi.n	802d2e6 <_realloc_r+0x332>
 802d28a:	2a13      	cmp	r2, #19
 802d28c:	d928      	bls.n	802d2e0 <_realloc_r+0x32c>
 802d28e:	6823      	ldr	r3, [r4, #0]
 802d290:	6003      	str	r3, [r0, #0]
 802d292:	6863      	ldr	r3, [r4, #4]
 802d294:	6043      	str	r3, [r0, #4]
 802d296:	2a1b      	cmp	r2, #27
 802d298:	d80e      	bhi.n	802d2b8 <_realloc_r+0x304>
 802d29a:	f104 0208 	add.w	r2, r4, #8
 802d29e:	f100 0308 	add.w	r3, r0, #8
 802d2a2:	6811      	ldr	r1, [r2, #0]
 802d2a4:	6019      	str	r1, [r3, #0]
 802d2a6:	6851      	ldr	r1, [r2, #4]
 802d2a8:	6059      	str	r1, [r3, #4]
 802d2aa:	6892      	ldr	r2, [r2, #8]
 802d2ac:	609a      	str	r2, [r3, #8]
 802d2ae:	4621      	mov	r1, r4
 802d2b0:	4650      	mov	r0, sl
 802d2b2:	f7fa ffab 	bl	802820c <_free_r>
 802d2b6:	e73f      	b.n	802d138 <_realloc_r+0x184>
 802d2b8:	68a3      	ldr	r3, [r4, #8]
 802d2ba:	6083      	str	r3, [r0, #8]
 802d2bc:	68e3      	ldr	r3, [r4, #12]
 802d2be:	60c3      	str	r3, [r0, #12]
 802d2c0:	2a24      	cmp	r2, #36	@ 0x24
 802d2c2:	bf01      	itttt	eq
 802d2c4:	6923      	ldreq	r3, [r4, #16]
 802d2c6:	6103      	streq	r3, [r0, #16]
 802d2c8:	6961      	ldreq	r1, [r4, #20]
 802d2ca:	6141      	streq	r1, [r0, #20]
 802d2cc:	bf19      	ittee	ne
 802d2ce:	f104 0210 	addne.w	r2, r4, #16
 802d2d2:	f100 0310 	addne.w	r3, r0, #16
 802d2d6:	f104 0218 	addeq.w	r2, r4, #24
 802d2da:	f100 0318 	addeq.w	r3, r0, #24
 802d2de:	e7e0      	b.n	802d2a2 <_realloc_r+0x2ee>
 802d2e0:	4603      	mov	r3, r0
 802d2e2:	4622      	mov	r2, r4
 802d2e4:	e7dd      	b.n	802d2a2 <_realloc_r+0x2ee>
 802d2e6:	4621      	mov	r1, r4
 802d2e8:	f7f8 fe1c 	bl	8025f24 <memmove>
 802d2ec:	e7df      	b.n	802d2ae <_realloc_r+0x2fa>
 802d2ee:	4637      	mov	r7, r6
 802d2f0:	e6bf      	b.n	802d072 <_realloc_r+0xbe>
 802d2f2:	431f      	orrs	r7, r3
 802d2f4:	f8c9 7004 	str.w	r7, [r9, #4]
 802d2f8:	6853      	ldr	r3, [r2, #4]
 802d2fa:	f043 0301 	orr.w	r3, r3, #1
 802d2fe:	6053      	str	r3, [r2, #4]
 802d300:	e6d3      	b.n	802d0aa <_realloc_r+0xf6>
 802d302:	bf00      	nop

0802d304 <sulp>:
 802d304:	b570      	push	{r4, r5, r6, lr}
 802d306:	4604      	mov	r4, r0
 802d308:	460d      	mov	r5, r1
 802d30a:	ec45 4b10 	vmov	d0, r4, r5
 802d30e:	4616      	mov	r6, r2
 802d310:	f7ff fc7c 	bl	802cc0c <__ulp>
 802d314:	ec51 0b10 	vmov	r0, r1, d0
 802d318:	b17e      	cbz	r6, 802d33a <sulp+0x36>
 802d31a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802d31e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802d322:	2b00      	cmp	r3, #0
 802d324:	dd09      	ble.n	802d33a <sulp+0x36>
 802d326:	051b      	lsls	r3, r3, #20
 802d328:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 802d32c:	2400      	movs	r4, #0
 802d32e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 802d332:	4622      	mov	r2, r4
 802d334:	462b      	mov	r3, r5
 802d336:	f7d3 f977 	bl	8000628 <__aeabi_dmul>
 802d33a:	ec41 0b10 	vmov	d0, r0, r1
 802d33e:	bd70      	pop	{r4, r5, r6, pc}

0802d340 <_strtod_l>:
 802d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d344:	b09f      	sub	sp, #124	@ 0x7c
 802d346:	460c      	mov	r4, r1
 802d348:	9217      	str	r2, [sp, #92]	@ 0x5c
 802d34a:	2200      	movs	r2, #0
 802d34c:	921a      	str	r2, [sp, #104]	@ 0x68
 802d34e:	9005      	str	r0, [sp, #20]
 802d350:	f04f 0a00 	mov.w	sl, #0
 802d354:	f04f 0b00 	mov.w	fp, #0
 802d358:	460a      	mov	r2, r1
 802d35a:	9219      	str	r2, [sp, #100]	@ 0x64
 802d35c:	7811      	ldrb	r1, [r2, #0]
 802d35e:	292b      	cmp	r1, #43	@ 0x2b
 802d360:	d04a      	beq.n	802d3f8 <_strtod_l+0xb8>
 802d362:	d838      	bhi.n	802d3d6 <_strtod_l+0x96>
 802d364:	290d      	cmp	r1, #13
 802d366:	d832      	bhi.n	802d3ce <_strtod_l+0x8e>
 802d368:	2908      	cmp	r1, #8
 802d36a:	d832      	bhi.n	802d3d2 <_strtod_l+0x92>
 802d36c:	2900      	cmp	r1, #0
 802d36e:	d03b      	beq.n	802d3e8 <_strtod_l+0xa8>
 802d370:	2200      	movs	r2, #0
 802d372:	920b      	str	r2, [sp, #44]	@ 0x2c
 802d374:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 802d376:	782a      	ldrb	r2, [r5, #0]
 802d378:	2a30      	cmp	r2, #48	@ 0x30
 802d37a:	f040 80b3 	bne.w	802d4e4 <_strtod_l+0x1a4>
 802d37e:	786a      	ldrb	r2, [r5, #1]
 802d380:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802d384:	2a58      	cmp	r2, #88	@ 0x58
 802d386:	d16e      	bne.n	802d466 <_strtod_l+0x126>
 802d388:	9302      	str	r3, [sp, #8]
 802d38a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d38c:	9301      	str	r3, [sp, #4]
 802d38e:	ab1a      	add	r3, sp, #104	@ 0x68
 802d390:	9300      	str	r3, [sp, #0]
 802d392:	4a8e      	ldr	r2, [pc, #568]	@ (802d5cc <_strtod_l+0x28c>)
 802d394:	9805      	ldr	r0, [sp, #20]
 802d396:	ab1b      	add	r3, sp, #108	@ 0x6c
 802d398:	a919      	add	r1, sp, #100	@ 0x64
 802d39a:	f001 f9ff 	bl	802e79c <__gethex>
 802d39e:	f010 060f 	ands.w	r6, r0, #15
 802d3a2:	4604      	mov	r4, r0
 802d3a4:	d005      	beq.n	802d3b2 <_strtod_l+0x72>
 802d3a6:	2e06      	cmp	r6, #6
 802d3a8:	d128      	bne.n	802d3fc <_strtod_l+0xbc>
 802d3aa:	3501      	adds	r5, #1
 802d3ac:	2300      	movs	r3, #0
 802d3ae:	9519      	str	r5, [sp, #100]	@ 0x64
 802d3b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d3b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802d3b4:	2b00      	cmp	r3, #0
 802d3b6:	f040 858e 	bne.w	802ded6 <_strtod_l+0xb96>
 802d3ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d3bc:	b1cb      	cbz	r3, 802d3f2 <_strtod_l+0xb2>
 802d3be:	4652      	mov	r2, sl
 802d3c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 802d3c4:	ec43 2b10 	vmov	d0, r2, r3
 802d3c8:	b01f      	add	sp, #124	@ 0x7c
 802d3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d3ce:	2920      	cmp	r1, #32
 802d3d0:	d1ce      	bne.n	802d370 <_strtod_l+0x30>
 802d3d2:	3201      	adds	r2, #1
 802d3d4:	e7c1      	b.n	802d35a <_strtod_l+0x1a>
 802d3d6:	292d      	cmp	r1, #45	@ 0x2d
 802d3d8:	d1ca      	bne.n	802d370 <_strtod_l+0x30>
 802d3da:	2101      	movs	r1, #1
 802d3dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 802d3de:	1c51      	adds	r1, r2, #1
 802d3e0:	9119      	str	r1, [sp, #100]	@ 0x64
 802d3e2:	7852      	ldrb	r2, [r2, #1]
 802d3e4:	2a00      	cmp	r2, #0
 802d3e6:	d1c5      	bne.n	802d374 <_strtod_l+0x34>
 802d3e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802d3ea:	9419      	str	r4, [sp, #100]	@ 0x64
 802d3ec:	2b00      	cmp	r3, #0
 802d3ee:	f040 8570 	bne.w	802ded2 <_strtod_l+0xb92>
 802d3f2:	4652      	mov	r2, sl
 802d3f4:	465b      	mov	r3, fp
 802d3f6:	e7e5      	b.n	802d3c4 <_strtod_l+0x84>
 802d3f8:	2100      	movs	r1, #0
 802d3fa:	e7ef      	b.n	802d3dc <_strtod_l+0x9c>
 802d3fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802d3fe:	b13a      	cbz	r2, 802d410 <_strtod_l+0xd0>
 802d400:	2135      	movs	r1, #53	@ 0x35
 802d402:	a81c      	add	r0, sp, #112	@ 0x70
 802d404:	f7ff fcfc 	bl	802ce00 <__copybits>
 802d408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802d40a:	9805      	ldr	r0, [sp, #20]
 802d40c:	f7ff f8fd 	bl	802c60a <_Bfree>
 802d410:	3e01      	subs	r6, #1
 802d412:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802d414:	2e04      	cmp	r6, #4
 802d416:	d806      	bhi.n	802d426 <_strtod_l+0xe6>
 802d418:	e8df f006 	tbb	[pc, r6]
 802d41c:	201d0314 	.word	0x201d0314
 802d420:	14          	.byte	0x14
 802d421:	00          	.byte	0x00
 802d422:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 802d426:	05e1      	lsls	r1, r4, #23
 802d428:	bf48      	it	mi
 802d42a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802d42e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802d432:	0d1b      	lsrs	r3, r3, #20
 802d434:	051b      	lsls	r3, r3, #20
 802d436:	2b00      	cmp	r3, #0
 802d438:	d1bb      	bne.n	802d3b2 <_strtod_l+0x72>
 802d43a:	f7f9 ffa1 	bl	8027380 <__errno>
 802d43e:	2322      	movs	r3, #34	@ 0x22
 802d440:	6003      	str	r3, [r0, #0]
 802d442:	e7b6      	b.n	802d3b2 <_strtod_l+0x72>
 802d444:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 802d448:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802d44c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 802d450:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802d454:	e7e7      	b.n	802d426 <_strtod_l+0xe6>
 802d456:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 802d5d4 <_strtod_l+0x294>
 802d45a:	e7e4      	b.n	802d426 <_strtod_l+0xe6>
 802d45c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 802d460:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802d464:	e7df      	b.n	802d426 <_strtod_l+0xe6>
 802d466:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d468:	1c5a      	adds	r2, r3, #1
 802d46a:	9219      	str	r2, [sp, #100]	@ 0x64
 802d46c:	785b      	ldrb	r3, [r3, #1]
 802d46e:	2b30      	cmp	r3, #48	@ 0x30
 802d470:	d0f9      	beq.n	802d466 <_strtod_l+0x126>
 802d472:	2b00      	cmp	r3, #0
 802d474:	d09d      	beq.n	802d3b2 <_strtod_l+0x72>
 802d476:	2301      	movs	r3, #1
 802d478:	9309      	str	r3, [sp, #36]	@ 0x24
 802d47a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d47c:	930c      	str	r3, [sp, #48]	@ 0x30
 802d47e:	2300      	movs	r3, #0
 802d480:	9308      	str	r3, [sp, #32]
 802d482:	930a      	str	r3, [sp, #40]	@ 0x28
 802d484:	461f      	mov	r7, r3
 802d486:	220a      	movs	r2, #10
 802d488:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802d48a:	7805      	ldrb	r5, [r0, #0]
 802d48c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 802d490:	b2d9      	uxtb	r1, r3
 802d492:	2909      	cmp	r1, #9
 802d494:	d928      	bls.n	802d4e8 <_strtod_l+0x1a8>
 802d496:	494e      	ldr	r1, [pc, #312]	@ (802d5d0 <_strtod_l+0x290>)
 802d498:	2201      	movs	r2, #1
 802d49a:	f7f8 fd92 	bl	8025fc2 <strncmp>
 802d49e:	2800      	cmp	r0, #0
 802d4a0:	d032      	beq.n	802d508 <_strtod_l+0x1c8>
 802d4a2:	2000      	movs	r0, #0
 802d4a4:	462a      	mov	r2, r5
 802d4a6:	4681      	mov	r9, r0
 802d4a8:	463d      	mov	r5, r7
 802d4aa:	4603      	mov	r3, r0
 802d4ac:	2a65      	cmp	r2, #101	@ 0x65
 802d4ae:	d001      	beq.n	802d4b4 <_strtod_l+0x174>
 802d4b0:	2a45      	cmp	r2, #69	@ 0x45
 802d4b2:	d114      	bne.n	802d4de <_strtod_l+0x19e>
 802d4b4:	b91d      	cbnz	r5, 802d4be <_strtod_l+0x17e>
 802d4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d4b8:	4302      	orrs	r2, r0
 802d4ba:	d095      	beq.n	802d3e8 <_strtod_l+0xa8>
 802d4bc:	2500      	movs	r5, #0
 802d4be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 802d4c0:	1c62      	adds	r2, r4, #1
 802d4c2:	9219      	str	r2, [sp, #100]	@ 0x64
 802d4c4:	7862      	ldrb	r2, [r4, #1]
 802d4c6:	2a2b      	cmp	r2, #43	@ 0x2b
 802d4c8:	d077      	beq.n	802d5ba <_strtod_l+0x27a>
 802d4ca:	2a2d      	cmp	r2, #45	@ 0x2d
 802d4cc:	d07b      	beq.n	802d5c6 <_strtod_l+0x286>
 802d4ce:	f04f 0c00 	mov.w	ip, #0
 802d4d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 802d4d6:	2909      	cmp	r1, #9
 802d4d8:	f240 8082 	bls.w	802d5e0 <_strtod_l+0x2a0>
 802d4dc:	9419      	str	r4, [sp, #100]	@ 0x64
 802d4de:	f04f 0800 	mov.w	r8, #0
 802d4e2:	e0a2      	b.n	802d62a <_strtod_l+0x2ea>
 802d4e4:	2300      	movs	r3, #0
 802d4e6:	e7c7      	b.n	802d478 <_strtod_l+0x138>
 802d4e8:	2f08      	cmp	r7, #8
 802d4ea:	bfd5      	itete	le
 802d4ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 802d4ee:	9908      	ldrgt	r1, [sp, #32]
 802d4f0:	fb02 3301 	mlale	r3, r2, r1, r3
 802d4f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 802d4f8:	f100 0001 	add.w	r0, r0, #1
 802d4fc:	bfd4      	ite	le
 802d4fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 802d500:	9308      	strgt	r3, [sp, #32]
 802d502:	3701      	adds	r7, #1
 802d504:	9019      	str	r0, [sp, #100]	@ 0x64
 802d506:	e7bf      	b.n	802d488 <_strtod_l+0x148>
 802d508:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d50a:	1c5a      	adds	r2, r3, #1
 802d50c:	9219      	str	r2, [sp, #100]	@ 0x64
 802d50e:	785a      	ldrb	r2, [r3, #1]
 802d510:	b37f      	cbz	r7, 802d572 <_strtod_l+0x232>
 802d512:	4681      	mov	r9, r0
 802d514:	463d      	mov	r5, r7
 802d516:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 802d51a:	2b09      	cmp	r3, #9
 802d51c:	d912      	bls.n	802d544 <_strtod_l+0x204>
 802d51e:	2301      	movs	r3, #1
 802d520:	e7c4      	b.n	802d4ac <_strtod_l+0x16c>
 802d522:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d524:	1c5a      	adds	r2, r3, #1
 802d526:	9219      	str	r2, [sp, #100]	@ 0x64
 802d528:	785a      	ldrb	r2, [r3, #1]
 802d52a:	3001      	adds	r0, #1
 802d52c:	2a30      	cmp	r2, #48	@ 0x30
 802d52e:	d0f8      	beq.n	802d522 <_strtod_l+0x1e2>
 802d530:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802d534:	2b08      	cmp	r3, #8
 802d536:	f200 84d3 	bhi.w	802dee0 <_strtod_l+0xba0>
 802d53a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d53c:	930c      	str	r3, [sp, #48]	@ 0x30
 802d53e:	4681      	mov	r9, r0
 802d540:	2000      	movs	r0, #0
 802d542:	4605      	mov	r5, r0
 802d544:	3a30      	subs	r2, #48	@ 0x30
 802d546:	f100 0301 	add.w	r3, r0, #1
 802d54a:	d02a      	beq.n	802d5a2 <_strtod_l+0x262>
 802d54c:	4499      	add	r9, r3
 802d54e:	eb00 0c05 	add.w	ip, r0, r5
 802d552:	462b      	mov	r3, r5
 802d554:	210a      	movs	r1, #10
 802d556:	4563      	cmp	r3, ip
 802d558:	d10d      	bne.n	802d576 <_strtod_l+0x236>
 802d55a:	1c69      	adds	r1, r5, #1
 802d55c:	4401      	add	r1, r0
 802d55e:	4428      	add	r0, r5
 802d560:	2808      	cmp	r0, #8
 802d562:	dc16      	bgt.n	802d592 <_strtod_l+0x252>
 802d564:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802d566:	230a      	movs	r3, #10
 802d568:	fb03 2300 	mla	r3, r3, r0, r2
 802d56c:	930a      	str	r3, [sp, #40]	@ 0x28
 802d56e:	2300      	movs	r3, #0
 802d570:	e018      	b.n	802d5a4 <_strtod_l+0x264>
 802d572:	4638      	mov	r0, r7
 802d574:	e7da      	b.n	802d52c <_strtod_l+0x1ec>
 802d576:	2b08      	cmp	r3, #8
 802d578:	f103 0301 	add.w	r3, r3, #1
 802d57c:	dc03      	bgt.n	802d586 <_strtod_l+0x246>
 802d57e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802d580:	434e      	muls	r6, r1
 802d582:	960a      	str	r6, [sp, #40]	@ 0x28
 802d584:	e7e7      	b.n	802d556 <_strtod_l+0x216>
 802d586:	2b10      	cmp	r3, #16
 802d588:	bfde      	ittt	le
 802d58a:	9e08      	ldrle	r6, [sp, #32]
 802d58c:	434e      	mulle	r6, r1
 802d58e:	9608      	strle	r6, [sp, #32]
 802d590:	e7e1      	b.n	802d556 <_strtod_l+0x216>
 802d592:	280f      	cmp	r0, #15
 802d594:	dceb      	bgt.n	802d56e <_strtod_l+0x22e>
 802d596:	9808      	ldr	r0, [sp, #32]
 802d598:	230a      	movs	r3, #10
 802d59a:	fb03 2300 	mla	r3, r3, r0, r2
 802d59e:	9308      	str	r3, [sp, #32]
 802d5a0:	e7e5      	b.n	802d56e <_strtod_l+0x22e>
 802d5a2:	4629      	mov	r1, r5
 802d5a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d5a6:	1c50      	adds	r0, r2, #1
 802d5a8:	9019      	str	r0, [sp, #100]	@ 0x64
 802d5aa:	7852      	ldrb	r2, [r2, #1]
 802d5ac:	4618      	mov	r0, r3
 802d5ae:	460d      	mov	r5, r1
 802d5b0:	e7b1      	b.n	802d516 <_strtod_l+0x1d6>
 802d5b2:	f04f 0900 	mov.w	r9, #0
 802d5b6:	2301      	movs	r3, #1
 802d5b8:	e77d      	b.n	802d4b6 <_strtod_l+0x176>
 802d5ba:	f04f 0c00 	mov.w	ip, #0
 802d5be:	1ca2      	adds	r2, r4, #2
 802d5c0:	9219      	str	r2, [sp, #100]	@ 0x64
 802d5c2:	78a2      	ldrb	r2, [r4, #2]
 802d5c4:	e785      	b.n	802d4d2 <_strtod_l+0x192>
 802d5c6:	f04f 0c01 	mov.w	ip, #1
 802d5ca:	e7f8      	b.n	802d5be <_strtod_l+0x27e>
 802d5cc:	08034764 	.word	0x08034764
 802d5d0:	080341ca 	.word	0x080341ca
 802d5d4:	7ff00000 	.word	0x7ff00000
 802d5d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d5da:	1c51      	adds	r1, r2, #1
 802d5dc:	9119      	str	r1, [sp, #100]	@ 0x64
 802d5de:	7852      	ldrb	r2, [r2, #1]
 802d5e0:	2a30      	cmp	r2, #48	@ 0x30
 802d5e2:	d0f9      	beq.n	802d5d8 <_strtod_l+0x298>
 802d5e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 802d5e8:	2908      	cmp	r1, #8
 802d5ea:	f63f af78 	bhi.w	802d4de <_strtod_l+0x19e>
 802d5ee:	3a30      	subs	r2, #48	@ 0x30
 802d5f0:	920e      	str	r2, [sp, #56]	@ 0x38
 802d5f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d5f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 802d5f6:	f04f 080a 	mov.w	r8, #10
 802d5fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d5fc:	1c56      	adds	r6, r2, #1
 802d5fe:	9619      	str	r6, [sp, #100]	@ 0x64
 802d600:	7852      	ldrb	r2, [r2, #1]
 802d602:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 802d606:	f1be 0f09 	cmp.w	lr, #9
 802d60a:	d939      	bls.n	802d680 <_strtod_l+0x340>
 802d60c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802d60e:	1a76      	subs	r6, r6, r1
 802d610:	2e08      	cmp	r6, #8
 802d612:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 802d616:	dc03      	bgt.n	802d620 <_strtod_l+0x2e0>
 802d618:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802d61a:	4588      	cmp	r8, r1
 802d61c:	bfa8      	it	ge
 802d61e:	4688      	movge	r8, r1
 802d620:	f1bc 0f00 	cmp.w	ip, #0
 802d624:	d001      	beq.n	802d62a <_strtod_l+0x2ea>
 802d626:	f1c8 0800 	rsb	r8, r8, #0
 802d62a:	2d00      	cmp	r5, #0
 802d62c:	d14e      	bne.n	802d6cc <_strtod_l+0x38c>
 802d62e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802d630:	4308      	orrs	r0, r1
 802d632:	f47f aebe 	bne.w	802d3b2 <_strtod_l+0x72>
 802d636:	2b00      	cmp	r3, #0
 802d638:	f47f aed6 	bne.w	802d3e8 <_strtod_l+0xa8>
 802d63c:	2a69      	cmp	r2, #105	@ 0x69
 802d63e:	d028      	beq.n	802d692 <_strtod_l+0x352>
 802d640:	dc25      	bgt.n	802d68e <_strtod_l+0x34e>
 802d642:	2a49      	cmp	r2, #73	@ 0x49
 802d644:	d025      	beq.n	802d692 <_strtod_l+0x352>
 802d646:	2a4e      	cmp	r2, #78	@ 0x4e
 802d648:	f47f aece 	bne.w	802d3e8 <_strtod_l+0xa8>
 802d64c:	499b      	ldr	r1, [pc, #620]	@ (802d8bc <_strtod_l+0x57c>)
 802d64e:	a819      	add	r0, sp, #100	@ 0x64
 802d650:	f001 fac6 	bl	802ebe0 <__match>
 802d654:	2800      	cmp	r0, #0
 802d656:	f43f aec7 	beq.w	802d3e8 <_strtod_l+0xa8>
 802d65a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d65c:	781b      	ldrb	r3, [r3, #0]
 802d65e:	2b28      	cmp	r3, #40	@ 0x28
 802d660:	d12e      	bne.n	802d6c0 <_strtod_l+0x380>
 802d662:	4997      	ldr	r1, [pc, #604]	@ (802d8c0 <_strtod_l+0x580>)
 802d664:	aa1c      	add	r2, sp, #112	@ 0x70
 802d666:	a819      	add	r0, sp, #100	@ 0x64
 802d668:	f001 face 	bl	802ec08 <__hexnan>
 802d66c:	2805      	cmp	r0, #5
 802d66e:	d127      	bne.n	802d6c0 <_strtod_l+0x380>
 802d670:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802d672:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802d676:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 802d67a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 802d67e:	e698      	b.n	802d3b2 <_strtod_l+0x72>
 802d680:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802d682:	fb08 2101 	mla	r1, r8, r1, r2
 802d686:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 802d68a:	920e      	str	r2, [sp, #56]	@ 0x38
 802d68c:	e7b5      	b.n	802d5fa <_strtod_l+0x2ba>
 802d68e:	2a6e      	cmp	r2, #110	@ 0x6e
 802d690:	e7da      	b.n	802d648 <_strtod_l+0x308>
 802d692:	498c      	ldr	r1, [pc, #560]	@ (802d8c4 <_strtod_l+0x584>)
 802d694:	a819      	add	r0, sp, #100	@ 0x64
 802d696:	f001 faa3 	bl	802ebe0 <__match>
 802d69a:	2800      	cmp	r0, #0
 802d69c:	f43f aea4 	beq.w	802d3e8 <_strtod_l+0xa8>
 802d6a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d6a2:	4989      	ldr	r1, [pc, #548]	@ (802d8c8 <_strtod_l+0x588>)
 802d6a4:	3b01      	subs	r3, #1
 802d6a6:	a819      	add	r0, sp, #100	@ 0x64
 802d6a8:	9319      	str	r3, [sp, #100]	@ 0x64
 802d6aa:	f001 fa99 	bl	802ebe0 <__match>
 802d6ae:	b910      	cbnz	r0, 802d6b6 <_strtod_l+0x376>
 802d6b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d6b2:	3301      	adds	r3, #1
 802d6b4:	9319      	str	r3, [sp, #100]	@ 0x64
 802d6b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 802d8d8 <_strtod_l+0x598>
 802d6ba:	f04f 0a00 	mov.w	sl, #0
 802d6be:	e678      	b.n	802d3b2 <_strtod_l+0x72>
 802d6c0:	4882      	ldr	r0, [pc, #520]	@ (802d8cc <_strtod_l+0x58c>)
 802d6c2:	f000 ffe9 	bl	802e698 <nan>
 802d6c6:	ec5b ab10 	vmov	sl, fp, d0
 802d6ca:	e672      	b.n	802d3b2 <_strtod_l+0x72>
 802d6cc:	eba8 0309 	sub.w	r3, r8, r9
 802d6d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802d6d2:	9309      	str	r3, [sp, #36]	@ 0x24
 802d6d4:	2f00      	cmp	r7, #0
 802d6d6:	bf08      	it	eq
 802d6d8:	462f      	moveq	r7, r5
 802d6da:	2d10      	cmp	r5, #16
 802d6dc:	462c      	mov	r4, r5
 802d6de:	bfa8      	it	ge
 802d6e0:	2410      	movge	r4, #16
 802d6e2:	f7d2 ff27 	bl	8000534 <__aeabi_ui2d>
 802d6e6:	2d09      	cmp	r5, #9
 802d6e8:	4682      	mov	sl, r0
 802d6ea:	468b      	mov	fp, r1
 802d6ec:	dc13      	bgt.n	802d716 <_strtod_l+0x3d6>
 802d6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d6f0:	2b00      	cmp	r3, #0
 802d6f2:	f43f ae5e 	beq.w	802d3b2 <_strtod_l+0x72>
 802d6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d6f8:	dd78      	ble.n	802d7ec <_strtod_l+0x4ac>
 802d6fa:	2b16      	cmp	r3, #22
 802d6fc:	dc5f      	bgt.n	802d7be <_strtod_l+0x47e>
 802d6fe:	4974      	ldr	r1, [pc, #464]	@ (802d8d0 <_strtod_l+0x590>)
 802d700:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802d704:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d708:	4652      	mov	r2, sl
 802d70a:	465b      	mov	r3, fp
 802d70c:	f7d2 ff8c 	bl	8000628 <__aeabi_dmul>
 802d710:	4682      	mov	sl, r0
 802d712:	468b      	mov	fp, r1
 802d714:	e64d      	b.n	802d3b2 <_strtod_l+0x72>
 802d716:	4b6e      	ldr	r3, [pc, #440]	@ (802d8d0 <_strtod_l+0x590>)
 802d718:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802d71c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 802d720:	f7d2 ff82 	bl	8000628 <__aeabi_dmul>
 802d724:	4682      	mov	sl, r0
 802d726:	9808      	ldr	r0, [sp, #32]
 802d728:	468b      	mov	fp, r1
 802d72a:	f7d2 ff03 	bl	8000534 <__aeabi_ui2d>
 802d72e:	4602      	mov	r2, r0
 802d730:	460b      	mov	r3, r1
 802d732:	4650      	mov	r0, sl
 802d734:	4659      	mov	r1, fp
 802d736:	f7d2 fdc1 	bl	80002bc <__adddf3>
 802d73a:	2d0f      	cmp	r5, #15
 802d73c:	4682      	mov	sl, r0
 802d73e:	468b      	mov	fp, r1
 802d740:	ddd5      	ble.n	802d6ee <_strtod_l+0x3ae>
 802d742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d744:	1b2c      	subs	r4, r5, r4
 802d746:	441c      	add	r4, r3
 802d748:	2c00      	cmp	r4, #0
 802d74a:	f340 8096 	ble.w	802d87a <_strtod_l+0x53a>
 802d74e:	f014 030f 	ands.w	r3, r4, #15
 802d752:	d00a      	beq.n	802d76a <_strtod_l+0x42a>
 802d754:	495e      	ldr	r1, [pc, #376]	@ (802d8d0 <_strtod_l+0x590>)
 802d756:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802d75a:	4652      	mov	r2, sl
 802d75c:	465b      	mov	r3, fp
 802d75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d762:	f7d2 ff61 	bl	8000628 <__aeabi_dmul>
 802d766:	4682      	mov	sl, r0
 802d768:	468b      	mov	fp, r1
 802d76a:	f034 040f 	bics.w	r4, r4, #15
 802d76e:	d073      	beq.n	802d858 <_strtod_l+0x518>
 802d770:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 802d774:	dd48      	ble.n	802d808 <_strtod_l+0x4c8>
 802d776:	2400      	movs	r4, #0
 802d778:	46a0      	mov	r8, r4
 802d77a:	940a      	str	r4, [sp, #40]	@ 0x28
 802d77c:	46a1      	mov	r9, r4
 802d77e:	9a05      	ldr	r2, [sp, #20]
 802d780:	f8df b154 	ldr.w	fp, [pc, #340]	@ 802d8d8 <_strtod_l+0x598>
 802d784:	2322      	movs	r3, #34	@ 0x22
 802d786:	6013      	str	r3, [r2, #0]
 802d788:	f04f 0a00 	mov.w	sl, #0
 802d78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d78e:	2b00      	cmp	r3, #0
 802d790:	f43f ae0f 	beq.w	802d3b2 <_strtod_l+0x72>
 802d794:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802d796:	9805      	ldr	r0, [sp, #20]
 802d798:	f7fe ff37 	bl	802c60a <_Bfree>
 802d79c:	9805      	ldr	r0, [sp, #20]
 802d79e:	4649      	mov	r1, r9
 802d7a0:	f7fe ff33 	bl	802c60a <_Bfree>
 802d7a4:	9805      	ldr	r0, [sp, #20]
 802d7a6:	4641      	mov	r1, r8
 802d7a8:	f7fe ff2f 	bl	802c60a <_Bfree>
 802d7ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802d7ae:	9805      	ldr	r0, [sp, #20]
 802d7b0:	f7fe ff2b 	bl	802c60a <_Bfree>
 802d7b4:	9805      	ldr	r0, [sp, #20]
 802d7b6:	4621      	mov	r1, r4
 802d7b8:	f7fe ff27 	bl	802c60a <_Bfree>
 802d7bc:	e5f9      	b.n	802d3b2 <_strtod_l+0x72>
 802d7be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d7c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 802d7c4:	4293      	cmp	r3, r2
 802d7c6:	dbbc      	blt.n	802d742 <_strtod_l+0x402>
 802d7c8:	4c41      	ldr	r4, [pc, #260]	@ (802d8d0 <_strtod_l+0x590>)
 802d7ca:	f1c5 050f 	rsb	r5, r5, #15
 802d7ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802d7d2:	4652      	mov	r2, sl
 802d7d4:	465b      	mov	r3, fp
 802d7d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d7da:	f7d2 ff25 	bl	8000628 <__aeabi_dmul>
 802d7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d7e0:	1b5d      	subs	r5, r3, r5
 802d7e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802d7e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 802d7ea:	e78f      	b.n	802d70c <_strtod_l+0x3cc>
 802d7ec:	3316      	adds	r3, #22
 802d7ee:	dba8      	blt.n	802d742 <_strtod_l+0x402>
 802d7f0:	4b37      	ldr	r3, [pc, #220]	@ (802d8d0 <_strtod_l+0x590>)
 802d7f2:	eba9 0808 	sub.w	r8, r9, r8
 802d7f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 802d7fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 802d7fe:	4650      	mov	r0, sl
 802d800:	4659      	mov	r1, fp
 802d802:	f7d3 f83b 	bl	800087c <__aeabi_ddiv>
 802d806:	e783      	b.n	802d710 <_strtod_l+0x3d0>
 802d808:	4b32      	ldr	r3, [pc, #200]	@ (802d8d4 <_strtod_l+0x594>)
 802d80a:	9308      	str	r3, [sp, #32]
 802d80c:	2300      	movs	r3, #0
 802d80e:	1124      	asrs	r4, r4, #4
 802d810:	4650      	mov	r0, sl
 802d812:	4659      	mov	r1, fp
 802d814:	461e      	mov	r6, r3
 802d816:	2c01      	cmp	r4, #1
 802d818:	dc21      	bgt.n	802d85e <_strtod_l+0x51e>
 802d81a:	b10b      	cbz	r3, 802d820 <_strtod_l+0x4e0>
 802d81c:	4682      	mov	sl, r0
 802d81e:	468b      	mov	fp, r1
 802d820:	492c      	ldr	r1, [pc, #176]	@ (802d8d4 <_strtod_l+0x594>)
 802d822:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802d826:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 802d82a:	4652      	mov	r2, sl
 802d82c:	465b      	mov	r3, fp
 802d82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d832:	f7d2 fef9 	bl	8000628 <__aeabi_dmul>
 802d836:	4b28      	ldr	r3, [pc, #160]	@ (802d8d8 <_strtod_l+0x598>)
 802d838:	460a      	mov	r2, r1
 802d83a:	400b      	ands	r3, r1
 802d83c:	4927      	ldr	r1, [pc, #156]	@ (802d8dc <_strtod_l+0x59c>)
 802d83e:	428b      	cmp	r3, r1
 802d840:	4682      	mov	sl, r0
 802d842:	d898      	bhi.n	802d776 <_strtod_l+0x436>
 802d844:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 802d848:	428b      	cmp	r3, r1
 802d84a:	bf86      	itte	hi
 802d84c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 802d8e0 <_strtod_l+0x5a0>
 802d850:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 802d854:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 802d858:	2300      	movs	r3, #0
 802d85a:	9308      	str	r3, [sp, #32]
 802d85c:	e07a      	b.n	802d954 <_strtod_l+0x614>
 802d85e:	07e2      	lsls	r2, r4, #31
 802d860:	d505      	bpl.n	802d86e <_strtod_l+0x52e>
 802d862:	9b08      	ldr	r3, [sp, #32]
 802d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d868:	f7d2 fede 	bl	8000628 <__aeabi_dmul>
 802d86c:	2301      	movs	r3, #1
 802d86e:	9a08      	ldr	r2, [sp, #32]
 802d870:	3208      	adds	r2, #8
 802d872:	3601      	adds	r6, #1
 802d874:	1064      	asrs	r4, r4, #1
 802d876:	9208      	str	r2, [sp, #32]
 802d878:	e7cd      	b.n	802d816 <_strtod_l+0x4d6>
 802d87a:	d0ed      	beq.n	802d858 <_strtod_l+0x518>
 802d87c:	4264      	negs	r4, r4
 802d87e:	f014 020f 	ands.w	r2, r4, #15
 802d882:	d00a      	beq.n	802d89a <_strtod_l+0x55a>
 802d884:	4b12      	ldr	r3, [pc, #72]	@ (802d8d0 <_strtod_l+0x590>)
 802d886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802d88a:	4650      	mov	r0, sl
 802d88c:	4659      	mov	r1, fp
 802d88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d892:	f7d2 fff3 	bl	800087c <__aeabi_ddiv>
 802d896:	4682      	mov	sl, r0
 802d898:	468b      	mov	fp, r1
 802d89a:	1124      	asrs	r4, r4, #4
 802d89c:	d0dc      	beq.n	802d858 <_strtod_l+0x518>
 802d89e:	2c1f      	cmp	r4, #31
 802d8a0:	dd20      	ble.n	802d8e4 <_strtod_l+0x5a4>
 802d8a2:	2400      	movs	r4, #0
 802d8a4:	46a0      	mov	r8, r4
 802d8a6:	940a      	str	r4, [sp, #40]	@ 0x28
 802d8a8:	46a1      	mov	r9, r4
 802d8aa:	9a05      	ldr	r2, [sp, #20]
 802d8ac:	2322      	movs	r3, #34	@ 0x22
 802d8ae:	f04f 0a00 	mov.w	sl, #0
 802d8b2:	f04f 0b00 	mov.w	fp, #0
 802d8b6:	6013      	str	r3, [r2, #0]
 802d8b8:	e768      	b.n	802d78c <_strtod_l+0x44c>
 802d8ba:	bf00      	nop
 802d8bc:	080341cd 	.word	0x080341cd
 802d8c0:	08034750 	.word	0x08034750
 802d8c4:	0803403d 	.word	0x0803403d
 802d8c8:	080344f8 	.word	0x080344f8
 802d8cc:	08034037 	.word	0x08034037
 802d8d0:	08034688 	.word	0x08034688
 802d8d4:	08034660 	.word	0x08034660
 802d8d8:	7ff00000 	.word	0x7ff00000
 802d8dc:	7ca00000 	.word	0x7ca00000
 802d8e0:	7fefffff 	.word	0x7fefffff
 802d8e4:	f014 0310 	ands.w	r3, r4, #16
 802d8e8:	bf18      	it	ne
 802d8ea:	236a      	movne	r3, #106	@ 0x6a
 802d8ec:	4ea9      	ldr	r6, [pc, #676]	@ (802db94 <_strtod_l+0x854>)
 802d8ee:	9308      	str	r3, [sp, #32]
 802d8f0:	4650      	mov	r0, sl
 802d8f2:	4659      	mov	r1, fp
 802d8f4:	2300      	movs	r3, #0
 802d8f6:	07e2      	lsls	r2, r4, #31
 802d8f8:	d504      	bpl.n	802d904 <_strtod_l+0x5c4>
 802d8fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 802d8fe:	f7d2 fe93 	bl	8000628 <__aeabi_dmul>
 802d902:	2301      	movs	r3, #1
 802d904:	1064      	asrs	r4, r4, #1
 802d906:	f106 0608 	add.w	r6, r6, #8
 802d90a:	d1f4      	bne.n	802d8f6 <_strtod_l+0x5b6>
 802d90c:	b10b      	cbz	r3, 802d912 <_strtod_l+0x5d2>
 802d90e:	4682      	mov	sl, r0
 802d910:	468b      	mov	fp, r1
 802d912:	9b08      	ldr	r3, [sp, #32]
 802d914:	b1b3      	cbz	r3, 802d944 <_strtod_l+0x604>
 802d916:	f3cb 520a 	ubfx	r2, fp, #20, #11
 802d91a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 802d91e:	2b00      	cmp	r3, #0
 802d920:	4659      	mov	r1, fp
 802d922:	dd0f      	ble.n	802d944 <_strtod_l+0x604>
 802d924:	2b1f      	cmp	r3, #31
 802d926:	dd55      	ble.n	802d9d4 <_strtod_l+0x694>
 802d928:	2b34      	cmp	r3, #52	@ 0x34
 802d92a:	bfde      	ittt	le
 802d92c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 802d930:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 802d934:	4093      	lslle	r3, r2
 802d936:	f04f 0a00 	mov.w	sl, #0
 802d93a:	bfcc      	ite	gt
 802d93c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 802d940:	ea03 0b01 	andle.w	fp, r3, r1
 802d944:	2200      	movs	r2, #0
 802d946:	2300      	movs	r3, #0
 802d948:	4650      	mov	r0, sl
 802d94a:	4659      	mov	r1, fp
 802d94c:	f7d3 f8d4 	bl	8000af8 <__aeabi_dcmpeq>
 802d950:	2800      	cmp	r0, #0
 802d952:	d1a6      	bne.n	802d8a2 <_strtod_l+0x562>
 802d954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d956:	9300      	str	r3, [sp, #0]
 802d958:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802d95a:	9805      	ldr	r0, [sp, #20]
 802d95c:	462b      	mov	r3, r5
 802d95e:	463a      	mov	r2, r7
 802d960:	f7fe fea2 	bl	802c6a8 <__s2b>
 802d964:	900a      	str	r0, [sp, #40]	@ 0x28
 802d966:	2800      	cmp	r0, #0
 802d968:	f43f af05 	beq.w	802d776 <_strtod_l+0x436>
 802d96c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d96e:	2a00      	cmp	r2, #0
 802d970:	eba9 0308 	sub.w	r3, r9, r8
 802d974:	bfa8      	it	ge
 802d976:	2300      	movge	r3, #0
 802d978:	9312      	str	r3, [sp, #72]	@ 0x48
 802d97a:	2400      	movs	r4, #0
 802d97c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802d980:	9316      	str	r3, [sp, #88]	@ 0x58
 802d982:	46a0      	mov	r8, r4
 802d984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d986:	9805      	ldr	r0, [sp, #20]
 802d988:	6859      	ldr	r1, [r3, #4]
 802d98a:	f7fe fe19 	bl	802c5c0 <_Balloc>
 802d98e:	4681      	mov	r9, r0
 802d990:	2800      	cmp	r0, #0
 802d992:	f43f aef4 	beq.w	802d77e <_strtod_l+0x43e>
 802d996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d998:	691a      	ldr	r2, [r3, #16]
 802d99a:	3202      	adds	r2, #2
 802d99c:	f103 010c 	add.w	r1, r3, #12
 802d9a0:	0092      	lsls	r2, r2, #2
 802d9a2:	300c      	adds	r0, #12
 802d9a4:	f7f9 fd30 	bl	8027408 <memcpy>
 802d9a8:	ec4b ab10 	vmov	d0, sl, fp
 802d9ac:	9805      	ldr	r0, [sp, #20]
 802d9ae:	aa1c      	add	r2, sp, #112	@ 0x70
 802d9b0:	a91b      	add	r1, sp, #108	@ 0x6c
 802d9b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 802d9b6:	f7ff f999 	bl	802ccec <__d2b>
 802d9ba:	901a      	str	r0, [sp, #104]	@ 0x68
 802d9bc:	2800      	cmp	r0, #0
 802d9be:	f43f aede 	beq.w	802d77e <_strtod_l+0x43e>
 802d9c2:	9805      	ldr	r0, [sp, #20]
 802d9c4:	2101      	movs	r1, #1
 802d9c6:	f7fe ff05 	bl	802c7d4 <__i2b>
 802d9ca:	4680      	mov	r8, r0
 802d9cc:	b948      	cbnz	r0, 802d9e2 <_strtod_l+0x6a2>
 802d9ce:	f04f 0800 	mov.w	r8, #0
 802d9d2:	e6d4      	b.n	802d77e <_strtod_l+0x43e>
 802d9d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802d9d8:	fa02 f303 	lsl.w	r3, r2, r3
 802d9dc:	ea03 0a0a 	and.w	sl, r3, sl
 802d9e0:	e7b0      	b.n	802d944 <_strtod_l+0x604>
 802d9e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 802d9e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802d9e6:	2d00      	cmp	r5, #0
 802d9e8:	bfab      	itete	ge
 802d9ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 802d9ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 802d9ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 802d9f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 802d9f2:	bfac      	ite	ge
 802d9f4:	18ef      	addge	r7, r5, r3
 802d9f6:	1b5e      	sublt	r6, r3, r5
 802d9f8:	9b08      	ldr	r3, [sp, #32]
 802d9fa:	1aed      	subs	r5, r5, r3
 802d9fc:	4415      	add	r5, r2
 802d9fe:	4b66      	ldr	r3, [pc, #408]	@ (802db98 <_strtod_l+0x858>)
 802da00:	3d01      	subs	r5, #1
 802da02:	429d      	cmp	r5, r3
 802da04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 802da08:	da50      	bge.n	802daac <_strtod_l+0x76c>
 802da0a:	1b5b      	subs	r3, r3, r5
 802da0c:	2b1f      	cmp	r3, #31
 802da0e:	eba2 0203 	sub.w	r2, r2, r3
 802da12:	f04f 0101 	mov.w	r1, #1
 802da16:	dc3d      	bgt.n	802da94 <_strtod_l+0x754>
 802da18:	fa01 f303 	lsl.w	r3, r1, r3
 802da1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802da1e:	2300      	movs	r3, #0
 802da20:	9310      	str	r3, [sp, #64]	@ 0x40
 802da22:	18bd      	adds	r5, r7, r2
 802da24:	9b08      	ldr	r3, [sp, #32]
 802da26:	42af      	cmp	r7, r5
 802da28:	4416      	add	r6, r2
 802da2a:	441e      	add	r6, r3
 802da2c:	463b      	mov	r3, r7
 802da2e:	bfa8      	it	ge
 802da30:	462b      	movge	r3, r5
 802da32:	42b3      	cmp	r3, r6
 802da34:	bfa8      	it	ge
 802da36:	4633      	movge	r3, r6
 802da38:	2b00      	cmp	r3, #0
 802da3a:	bfc2      	ittt	gt
 802da3c:	1aed      	subgt	r5, r5, r3
 802da3e:	1af6      	subgt	r6, r6, r3
 802da40:	1aff      	subgt	r7, r7, r3
 802da42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802da44:	2b00      	cmp	r3, #0
 802da46:	dd16      	ble.n	802da76 <_strtod_l+0x736>
 802da48:	4641      	mov	r1, r8
 802da4a:	9805      	ldr	r0, [sp, #20]
 802da4c:	461a      	mov	r2, r3
 802da4e:	f7fe ff81 	bl	802c954 <__pow5mult>
 802da52:	4680      	mov	r8, r0
 802da54:	2800      	cmp	r0, #0
 802da56:	d0ba      	beq.n	802d9ce <_strtod_l+0x68e>
 802da58:	4601      	mov	r1, r0
 802da5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802da5c:	9805      	ldr	r0, [sp, #20]
 802da5e:	f7fe fecf 	bl	802c800 <__multiply>
 802da62:	900e      	str	r0, [sp, #56]	@ 0x38
 802da64:	2800      	cmp	r0, #0
 802da66:	f43f ae8a 	beq.w	802d77e <_strtod_l+0x43e>
 802da6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802da6c:	9805      	ldr	r0, [sp, #20]
 802da6e:	f7fe fdcc 	bl	802c60a <_Bfree>
 802da72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802da74:	931a      	str	r3, [sp, #104]	@ 0x68
 802da76:	2d00      	cmp	r5, #0
 802da78:	dc1d      	bgt.n	802dab6 <_strtod_l+0x776>
 802da7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802da7c:	2b00      	cmp	r3, #0
 802da7e:	dd23      	ble.n	802dac8 <_strtod_l+0x788>
 802da80:	4649      	mov	r1, r9
 802da82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802da84:	9805      	ldr	r0, [sp, #20]
 802da86:	f7fe ff65 	bl	802c954 <__pow5mult>
 802da8a:	4681      	mov	r9, r0
 802da8c:	b9e0      	cbnz	r0, 802dac8 <_strtod_l+0x788>
 802da8e:	f04f 0900 	mov.w	r9, #0
 802da92:	e674      	b.n	802d77e <_strtod_l+0x43e>
 802da94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 802da98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 802da9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 802daa0:	35e2      	adds	r5, #226	@ 0xe2
 802daa2:	fa01 f305 	lsl.w	r3, r1, r5
 802daa6:	9310      	str	r3, [sp, #64]	@ 0x40
 802daa8:	9113      	str	r1, [sp, #76]	@ 0x4c
 802daaa:	e7ba      	b.n	802da22 <_strtod_l+0x6e2>
 802daac:	2300      	movs	r3, #0
 802daae:	9310      	str	r3, [sp, #64]	@ 0x40
 802dab0:	2301      	movs	r3, #1
 802dab2:	9313      	str	r3, [sp, #76]	@ 0x4c
 802dab4:	e7b5      	b.n	802da22 <_strtod_l+0x6e2>
 802dab6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802dab8:	9805      	ldr	r0, [sp, #20]
 802daba:	462a      	mov	r2, r5
 802dabc:	f7fe ff8a 	bl	802c9d4 <__lshift>
 802dac0:	901a      	str	r0, [sp, #104]	@ 0x68
 802dac2:	2800      	cmp	r0, #0
 802dac4:	d1d9      	bne.n	802da7a <_strtod_l+0x73a>
 802dac6:	e65a      	b.n	802d77e <_strtod_l+0x43e>
 802dac8:	2e00      	cmp	r6, #0
 802daca:	dd07      	ble.n	802dadc <_strtod_l+0x79c>
 802dacc:	4649      	mov	r1, r9
 802dace:	9805      	ldr	r0, [sp, #20]
 802dad0:	4632      	mov	r2, r6
 802dad2:	f7fe ff7f 	bl	802c9d4 <__lshift>
 802dad6:	4681      	mov	r9, r0
 802dad8:	2800      	cmp	r0, #0
 802dada:	d0d8      	beq.n	802da8e <_strtod_l+0x74e>
 802dadc:	2f00      	cmp	r7, #0
 802dade:	dd08      	ble.n	802daf2 <_strtod_l+0x7b2>
 802dae0:	4641      	mov	r1, r8
 802dae2:	9805      	ldr	r0, [sp, #20]
 802dae4:	463a      	mov	r2, r7
 802dae6:	f7fe ff75 	bl	802c9d4 <__lshift>
 802daea:	4680      	mov	r8, r0
 802daec:	2800      	cmp	r0, #0
 802daee:	f43f ae46 	beq.w	802d77e <_strtod_l+0x43e>
 802daf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802daf4:	9805      	ldr	r0, [sp, #20]
 802daf6:	464a      	mov	r2, r9
 802daf8:	f7fe fff4 	bl	802cae4 <__mdiff>
 802dafc:	4604      	mov	r4, r0
 802dafe:	2800      	cmp	r0, #0
 802db00:	f43f ae3d 	beq.w	802d77e <_strtod_l+0x43e>
 802db04:	68c3      	ldr	r3, [r0, #12]
 802db06:	930f      	str	r3, [sp, #60]	@ 0x3c
 802db08:	2300      	movs	r3, #0
 802db0a:	60c3      	str	r3, [r0, #12]
 802db0c:	4641      	mov	r1, r8
 802db0e:	f7fe ffcd 	bl	802caac <__mcmp>
 802db12:	2800      	cmp	r0, #0
 802db14:	da46      	bge.n	802dba4 <_strtod_l+0x864>
 802db16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802db18:	ea53 030a 	orrs.w	r3, r3, sl
 802db1c:	d16c      	bne.n	802dbf8 <_strtod_l+0x8b8>
 802db1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802db22:	2b00      	cmp	r3, #0
 802db24:	d168      	bne.n	802dbf8 <_strtod_l+0x8b8>
 802db26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802db2a:	0d1b      	lsrs	r3, r3, #20
 802db2c:	051b      	lsls	r3, r3, #20
 802db2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802db32:	d961      	bls.n	802dbf8 <_strtod_l+0x8b8>
 802db34:	6963      	ldr	r3, [r4, #20]
 802db36:	b913      	cbnz	r3, 802db3e <_strtod_l+0x7fe>
 802db38:	6923      	ldr	r3, [r4, #16]
 802db3a:	2b01      	cmp	r3, #1
 802db3c:	dd5c      	ble.n	802dbf8 <_strtod_l+0x8b8>
 802db3e:	4621      	mov	r1, r4
 802db40:	2201      	movs	r2, #1
 802db42:	9805      	ldr	r0, [sp, #20]
 802db44:	f7fe ff46 	bl	802c9d4 <__lshift>
 802db48:	4641      	mov	r1, r8
 802db4a:	4604      	mov	r4, r0
 802db4c:	f7fe ffae 	bl	802caac <__mcmp>
 802db50:	2800      	cmp	r0, #0
 802db52:	dd51      	ble.n	802dbf8 <_strtod_l+0x8b8>
 802db54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802db58:	9a08      	ldr	r2, [sp, #32]
 802db5a:	0d1b      	lsrs	r3, r3, #20
 802db5c:	051b      	lsls	r3, r3, #20
 802db5e:	2a00      	cmp	r2, #0
 802db60:	d06b      	beq.n	802dc3a <_strtod_l+0x8fa>
 802db62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802db66:	d868      	bhi.n	802dc3a <_strtod_l+0x8fa>
 802db68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 802db6c:	f67f ae9d 	bls.w	802d8aa <_strtod_l+0x56a>
 802db70:	4b0a      	ldr	r3, [pc, #40]	@ (802db9c <_strtod_l+0x85c>)
 802db72:	4650      	mov	r0, sl
 802db74:	4659      	mov	r1, fp
 802db76:	2200      	movs	r2, #0
 802db78:	f7d2 fd56 	bl	8000628 <__aeabi_dmul>
 802db7c:	4b08      	ldr	r3, [pc, #32]	@ (802dba0 <_strtod_l+0x860>)
 802db7e:	400b      	ands	r3, r1
 802db80:	4682      	mov	sl, r0
 802db82:	468b      	mov	fp, r1
 802db84:	2b00      	cmp	r3, #0
 802db86:	f47f ae05 	bne.w	802d794 <_strtod_l+0x454>
 802db8a:	9a05      	ldr	r2, [sp, #20]
 802db8c:	2322      	movs	r3, #34	@ 0x22
 802db8e:	6013      	str	r3, [r2, #0]
 802db90:	e600      	b.n	802d794 <_strtod_l+0x454>
 802db92:	bf00      	nop
 802db94:	08034778 	.word	0x08034778
 802db98:	fffffc02 	.word	0xfffffc02
 802db9c:	39500000 	.word	0x39500000
 802dba0:	7ff00000 	.word	0x7ff00000
 802dba4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 802dba8:	d165      	bne.n	802dc76 <_strtod_l+0x936>
 802dbaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802dbac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802dbb0:	b35a      	cbz	r2, 802dc0a <_strtod_l+0x8ca>
 802dbb2:	4a9f      	ldr	r2, [pc, #636]	@ (802de30 <_strtod_l+0xaf0>)
 802dbb4:	4293      	cmp	r3, r2
 802dbb6:	d12b      	bne.n	802dc10 <_strtod_l+0x8d0>
 802dbb8:	9b08      	ldr	r3, [sp, #32]
 802dbba:	4651      	mov	r1, sl
 802dbbc:	b303      	cbz	r3, 802dc00 <_strtod_l+0x8c0>
 802dbbe:	4b9d      	ldr	r3, [pc, #628]	@ (802de34 <_strtod_l+0xaf4>)
 802dbc0:	465a      	mov	r2, fp
 802dbc2:	4013      	ands	r3, r2
 802dbc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 802dbc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802dbcc:	d81b      	bhi.n	802dc06 <_strtod_l+0x8c6>
 802dbce:	0d1b      	lsrs	r3, r3, #20
 802dbd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802dbd4:	fa02 f303 	lsl.w	r3, r2, r3
 802dbd8:	4299      	cmp	r1, r3
 802dbda:	d119      	bne.n	802dc10 <_strtod_l+0x8d0>
 802dbdc:	4b96      	ldr	r3, [pc, #600]	@ (802de38 <_strtod_l+0xaf8>)
 802dbde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802dbe0:	429a      	cmp	r2, r3
 802dbe2:	d102      	bne.n	802dbea <_strtod_l+0x8aa>
 802dbe4:	3101      	adds	r1, #1
 802dbe6:	f43f adca 	beq.w	802d77e <_strtod_l+0x43e>
 802dbea:	4b92      	ldr	r3, [pc, #584]	@ (802de34 <_strtod_l+0xaf4>)
 802dbec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802dbee:	401a      	ands	r2, r3
 802dbf0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 802dbf4:	f04f 0a00 	mov.w	sl, #0
 802dbf8:	9b08      	ldr	r3, [sp, #32]
 802dbfa:	2b00      	cmp	r3, #0
 802dbfc:	d1b8      	bne.n	802db70 <_strtod_l+0x830>
 802dbfe:	e5c9      	b.n	802d794 <_strtod_l+0x454>
 802dc00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802dc04:	e7e8      	b.n	802dbd8 <_strtod_l+0x898>
 802dc06:	4613      	mov	r3, r2
 802dc08:	e7e6      	b.n	802dbd8 <_strtod_l+0x898>
 802dc0a:	ea53 030a 	orrs.w	r3, r3, sl
 802dc0e:	d0a1      	beq.n	802db54 <_strtod_l+0x814>
 802dc10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802dc12:	b1db      	cbz	r3, 802dc4c <_strtod_l+0x90c>
 802dc14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802dc16:	4213      	tst	r3, r2
 802dc18:	d0ee      	beq.n	802dbf8 <_strtod_l+0x8b8>
 802dc1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dc1c:	9a08      	ldr	r2, [sp, #32]
 802dc1e:	4650      	mov	r0, sl
 802dc20:	4659      	mov	r1, fp
 802dc22:	b1bb      	cbz	r3, 802dc54 <_strtod_l+0x914>
 802dc24:	f7ff fb6e 	bl	802d304 <sulp>
 802dc28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802dc2c:	ec53 2b10 	vmov	r2, r3, d0
 802dc30:	f7d2 fb44 	bl	80002bc <__adddf3>
 802dc34:	4682      	mov	sl, r0
 802dc36:	468b      	mov	fp, r1
 802dc38:	e7de      	b.n	802dbf8 <_strtod_l+0x8b8>
 802dc3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802dc3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802dc42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802dc46:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802dc4a:	e7d5      	b.n	802dbf8 <_strtod_l+0x8b8>
 802dc4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802dc4e:	ea13 0f0a 	tst.w	r3, sl
 802dc52:	e7e1      	b.n	802dc18 <_strtod_l+0x8d8>
 802dc54:	f7ff fb56 	bl	802d304 <sulp>
 802dc58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802dc5c:	ec53 2b10 	vmov	r2, r3, d0
 802dc60:	f7d2 fb2a 	bl	80002b8 <__aeabi_dsub>
 802dc64:	2200      	movs	r2, #0
 802dc66:	2300      	movs	r3, #0
 802dc68:	4682      	mov	sl, r0
 802dc6a:	468b      	mov	fp, r1
 802dc6c:	f7d2 ff44 	bl	8000af8 <__aeabi_dcmpeq>
 802dc70:	2800      	cmp	r0, #0
 802dc72:	d0c1      	beq.n	802dbf8 <_strtod_l+0x8b8>
 802dc74:	e619      	b.n	802d8aa <_strtod_l+0x56a>
 802dc76:	4641      	mov	r1, r8
 802dc78:	4620      	mov	r0, r4
 802dc7a:	f7ff f88f 	bl	802cd9c <__ratio>
 802dc7e:	ec57 6b10 	vmov	r6, r7, d0
 802dc82:	2200      	movs	r2, #0
 802dc84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802dc88:	4630      	mov	r0, r6
 802dc8a:	4639      	mov	r1, r7
 802dc8c:	f7d2 ff48 	bl	8000b20 <__aeabi_dcmple>
 802dc90:	2800      	cmp	r0, #0
 802dc92:	d06f      	beq.n	802dd74 <_strtod_l+0xa34>
 802dc94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dc96:	2b00      	cmp	r3, #0
 802dc98:	d17a      	bne.n	802dd90 <_strtod_l+0xa50>
 802dc9a:	f1ba 0f00 	cmp.w	sl, #0
 802dc9e:	d158      	bne.n	802dd52 <_strtod_l+0xa12>
 802dca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802dca6:	2b00      	cmp	r3, #0
 802dca8:	d15a      	bne.n	802dd60 <_strtod_l+0xa20>
 802dcaa:	4b64      	ldr	r3, [pc, #400]	@ (802de3c <_strtod_l+0xafc>)
 802dcac:	2200      	movs	r2, #0
 802dcae:	4630      	mov	r0, r6
 802dcb0:	4639      	mov	r1, r7
 802dcb2:	f7d2 ff2b 	bl	8000b0c <__aeabi_dcmplt>
 802dcb6:	2800      	cmp	r0, #0
 802dcb8:	d159      	bne.n	802dd6e <_strtod_l+0xa2e>
 802dcba:	4630      	mov	r0, r6
 802dcbc:	4639      	mov	r1, r7
 802dcbe:	4b60      	ldr	r3, [pc, #384]	@ (802de40 <_strtod_l+0xb00>)
 802dcc0:	2200      	movs	r2, #0
 802dcc2:	f7d2 fcb1 	bl	8000628 <__aeabi_dmul>
 802dcc6:	4606      	mov	r6, r0
 802dcc8:	460f      	mov	r7, r1
 802dcca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 802dcce:	9606      	str	r6, [sp, #24]
 802dcd0:	9307      	str	r3, [sp, #28]
 802dcd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802dcd6:	4d57      	ldr	r5, [pc, #348]	@ (802de34 <_strtod_l+0xaf4>)
 802dcd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 802dcdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dcde:	401d      	ands	r5, r3
 802dce0:	4b58      	ldr	r3, [pc, #352]	@ (802de44 <_strtod_l+0xb04>)
 802dce2:	429d      	cmp	r5, r3
 802dce4:	f040 80b2 	bne.w	802de4c <_strtod_l+0xb0c>
 802dce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dcea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 802dcee:	ec4b ab10 	vmov	d0, sl, fp
 802dcf2:	f7fe ff8b 	bl	802cc0c <__ulp>
 802dcf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802dcfa:	ec51 0b10 	vmov	r0, r1, d0
 802dcfe:	f7d2 fc93 	bl	8000628 <__aeabi_dmul>
 802dd02:	4652      	mov	r2, sl
 802dd04:	465b      	mov	r3, fp
 802dd06:	f7d2 fad9 	bl	80002bc <__adddf3>
 802dd0a:	460b      	mov	r3, r1
 802dd0c:	4949      	ldr	r1, [pc, #292]	@ (802de34 <_strtod_l+0xaf4>)
 802dd0e:	4a4e      	ldr	r2, [pc, #312]	@ (802de48 <_strtod_l+0xb08>)
 802dd10:	4019      	ands	r1, r3
 802dd12:	4291      	cmp	r1, r2
 802dd14:	4682      	mov	sl, r0
 802dd16:	d942      	bls.n	802dd9e <_strtod_l+0xa5e>
 802dd18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802dd1a:	4b47      	ldr	r3, [pc, #284]	@ (802de38 <_strtod_l+0xaf8>)
 802dd1c:	429a      	cmp	r2, r3
 802dd1e:	d103      	bne.n	802dd28 <_strtod_l+0x9e8>
 802dd20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802dd22:	3301      	adds	r3, #1
 802dd24:	f43f ad2b 	beq.w	802d77e <_strtod_l+0x43e>
 802dd28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 802de38 <_strtod_l+0xaf8>
 802dd2c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802dd30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802dd32:	9805      	ldr	r0, [sp, #20]
 802dd34:	f7fe fc69 	bl	802c60a <_Bfree>
 802dd38:	9805      	ldr	r0, [sp, #20]
 802dd3a:	4649      	mov	r1, r9
 802dd3c:	f7fe fc65 	bl	802c60a <_Bfree>
 802dd40:	9805      	ldr	r0, [sp, #20]
 802dd42:	4641      	mov	r1, r8
 802dd44:	f7fe fc61 	bl	802c60a <_Bfree>
 802dd48:	9805      	ldr	r0, [sp, #20]
 802dd4a:	4621      	mov	r1, r4
 802dd4c:	f7fe fc5d 	bl	802c60a <_Bfree>
 802dd50:	e618      	b.n	802d984 <_strtod_l+0x644>
 802dd52:	f1ba 0f01 	cmp.w	sl, #1
 802dd56:	d103      	bne.n	802dd60 <_strtod_l+0xa20>
 802dd58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dd5a:	2b00      	cmp	r3, #0
 802dd5c:	f43f ada5 	beq.w	802d8aa <_strtod_l+0x56a>
 802dd60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 802de10 <_strtod_l+0xad0>
 802dd64:	4f35      	ldr	r7, [pc, #212]	@ (802de3c <_strtod_l+0xafc>)
 802dd66:	ed8d 7b06 	vstr	d7, [sp, #24]
 802dd6a:	2600      	movs	r6, #0
 802dd6c:	e7b1      	b.n	802dcd2 <_strtod_l+0x992>
 802dd6e:	4f34      	ldr	r7, [pc, #208]	@ (802de40 <_strtod_l+0xb00>)
 802dd70:	2600      	movs	r6, #0
 802dd72:	e7aa      	b.n	802dcca <_strtod_l+0x98a>
 802dd74:	4b32      	ldr	r3, [pc, #200]	@ (802de40 <_strtod_l+0xb00>)
 802dd76:	4630      	mov	r0, r6
 802dd78:	4639      	mov	r1, r7
 802dd7a:	2200      	movs	r2, #0
 802dd7c:	f7d2 fc54 	bl	8000628 <__aeabi_dmul>
 802dd80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dd82:	4606      	mov	r6, r0
 802dd84:	460f      	mov	r7, r1
 802dd86:	2b00      	cmp	r3, #0
 802dd88:	d09f      	beq.n	802dcca <_strtod_l+0x98a>
 802dd8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802dd8e:	e7a0      	b.n	802dcd2 <_strtod_l+0x992>
 802dd90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 802de18 <_strtod_l+0xad8>
 802dd94:	ed8d 7b06 	vstr	d7, [sp, #24]
 802dd98:	ec57 6b17 	vmov	r6, r7, d7
 802dd9c:	e799      	b.n	802dcd2 <_strtod_l+0x992>
 802dd9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802dda2:	9b08      	ldr	r3, [sp, #32]
 802dda4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 802dda8:	2b00      	cmp	r3, #0
 802ddaa:	d1c1      	bne.n	802dd30 <_strtod_l+0x9f0>
 802ddac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802ddb0:	0d1b      	lsrs	r3, r3, #20
 802ddb2:	051b      	lsls	r3, r3, #20
 802ddb4:	429d      	cmp	r5, r3
 802ddb6:	d1bb      	bne.n	802dd30 <_strtod_l+0x9f0>
 802ddb8:	4630      	mov	r0, r6
 802ddba:	4639      	mov	r1, r7
 802ddbc:	f7d2 fff8 	bl	8000db0 <__aeabi_d2lz>
 802ddc0:	f7d2 fc04 	bl	80005cc <__aeabi_l2d>
 802ddc4:	4602      	mov	r2, r0
 802ddc6:	460b      	mov	r3, r1
 802ddc8:	4630      	mov	r0, r6
 802ddca:	4639      	mov	r1, r7
 802ddcc:	f7d2 fa74 	bl	80002b8 <__aeabi_dsub>
 802ddd0:	460b      	mov	r3, r1
 802ddd2:	4602      	mov	r2, r0
 802ddd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 802ddd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 802dddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ddde:	ea46 060a 	orr.w	r6, r6, sl
 802dde2:	431e      	orrs	r6, r3
 802dde4:	d06f      	beq.n	802dec6 <_strtod_l+0xb86>
 802dde6:	a30e      	add	r3, pc, #56	@ (adr r3, 802de20 <_strtod_l+0xae0>)
 802dde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ddec:	f7d2 fe8e 	bl	8000b0c <__aeabi_dcmplt>
 802ddf0:	2800      	cmp	r0, #0
 802ddf2:	f47f accf 	bne.w	802d794 <_strtod_l+0x454>
 802ddf6:	a30c      	add	r3, pc, #48	@ (adr r3, 802de28 <_strtod_l+0xae8>)
 802ddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ddfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802de00:	f7d2 fea2 	bl	8000b48 <__aeabi_dcmpgt>
 802de04:	2800      	cmp	r0, #0
 802de06:	d093      	beq.n	802dd30 <_strtod_l+0x9f0>
 802de08:	e4c4      	b.n	802d794 <_strtod_l+0x454>
 802de0a:	bf00      	nop
 802de0c:	f3af 8000 	nop.w
 802de10:	00000000 	.word	0x00000000
 802de14:	bff00000 	.word	0xbff00000
 802de18:	00000000 	.word	0x00000000
 802de1c:	3ff00000 	.word	0x3ff00000
 802de20:	94a03595 	.word	0x94a03595
 802de24:	3fdfffff 	.word	0x3fdfffff
 802de28:	35afe535 	.word	0x35afe535
 802de2c:	3fe00000 	.word	0x3fe00000
 802de30:	000fffff 	.word	0x000fffff
 802de34:	7ff00000 	.word	0x7ff00000
 802de38:	7fefffff 	.word	0x7fefffff
 802de3c:	3ff00000 	.word	0x3ff00000
 802de40:	3fe00000 	.word	0x3fe00000
 802de44:	7fe00000 	.word	0x7fe00000
 802de48:	7c9fffff 	.word	0x7c9fffff
 802de4c:	9b08      	ldr	r3, [sp, #32]
 802de4e:	b323      	cbz	r3, 802de9a <_strtod_l+0xb5a>
 802de50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 802de54:	d821      	bhi.n	802de9a <_strtod_l+0xb5a>
 802de56:	a328      	add	r3, pc, #160	@ (adr r3, 802def8 <_strtod_l+0xbb8>)
 802de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 802de5c:	4630      	mov	r0, r6
 802de5e:	4639      	mov	r1, r7
 802de60:	f7d2 fe5e 	bl	8000b20 <__aeabi_dcmple>
 802de64:	b1a0      	cbz	r0, 802de90 <_strtod_l+0xb50>
 802de66:	4639      	mov	r1, r7
 802de68:	4630      	mov	r0, r6
 802de6a:	f7d2 feb5 	bl	8000bd8 <__aeabi_d2uiz>
 802de6e:	2801      	cmp	r0, #1
 802de70:	bf38      	it	cc
 802de72:	2001      	movcc	r0, #1
 802de74:	f7d2 fb5e 	bl	8000534 <__aeabi_ui2d>
 802de78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802de7a:	4606      	mov	r6, r0
 802de7c:	460f      	mov	r7, r1
 802de7e:	b9fb      	cbnz	r3, 802dec0 <_strtod_l+0xb80>
 802de80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802de84:	9014      	str	r0, [sp, #80]	@ 0x50
 802de86:	9315      	str	r3, [sp, #84]	@ 0x54
 802de88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 802de8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 802de90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802de92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802de96:	1b5b      	subs	r3, r3, r5
 802de98:	9311      	str	r3, [sp, #68]	@ 0x44
 802de9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802de9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802dea2:	f7fe feb3 	bl	802cc0c <__ulp>
 802dea6:	4650      	mov	r0, sl
 802dea8:	ec53 2b10 	vmov	r2, r3, d0
 802deac:	4659      	mov	r1, fp
 802deae:	f7d2 fbbb 	bl	8000628 <__aeabi_dmul>
 802deb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802deb6:	f7d2 fa01 	bl	80002bc <__adddf3>
 802deba:	4682      	mov	sl, r0
 802debc:	468b      	mov	fp, r1
 802debe:	e770      	b.n	802dda2 <_strtod_l+0xa62>
 802dec0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 802dec4:	e7e0      	b.n	802de88 <_strtod_l+0xb48>
 802dec6:	a30e      	add	r3, pc, #56	@ (adr r3, 802df00 <_strtod_l+0xbc0>)
 802dec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802decc:	f7d2 fe1e 	bl	8000b0c <__aeabi_dcmplt>
 802ded0:	e798      	b.n	802de04 <_strtod_l+0xac4>
 802ded2:	2300      	movs	r3, #0
 802ded4:	930b      	str	r3, [sp, #44]	@ 0x2c
 802ded6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802ded8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802deda:	6013      	str	r3, [r2, #0]
 802dedc:	f7ff ba6d 	b.w	802d3ba <_strtod_l+0x7a>
 802dee0:	2a65      	cmp	r2, #101	@ 0x65
 802dee2:	f43f ab66 	beq.w	802d5b2 <_strtod_l+0x272>
 802dee6:	2a45      	cmp	r2, #69	@ 0x45
 802dee8:	f43f ab63 	beq.w	802d5b2 <_strtod_l+0x272>
 802deec:	2301      	movs	r3, #1
 802deee:	f7ff bb9e 	b.w	802d62e <_strtod_l+0x2ee>
 802def2:	bf00      	nop
 802def4:	f3af 8000 	nop.w
 802def8:	ffc00000 	.word	0xffc00000
 802defc:	41dfffff 	.word	0x41dfffff
 802df00:	94a03595 	.word	0x94a03595
 802df04:	3fcfffff 	.word	0x3fcfffff

0802df08 <_strtod_r>:
 802df08:	4b01      	ldr	r3, [pc, #4]	@ (802df10 <_strtod_r+0x8>)
 802df0a:	f7ff ba19 	b.w	802d340 <_strtod_l>
 802df0e:	bf00      	nop
 802df10:	200006d4 	.word	0x200006d4

0802df14 <_strtoul_l.constprop.0>:
 802df14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802df18:	4e34      	ldr	r6, [pc, #208]	@ (802dfec <_strtoul_l.constprop.0+0xd8>)
 802df1a:	4686      	mov	lr, r0
 802df1c:	460d      	mov	r5, r1
 802df1e:	4628      	mov	r0, r5
 802df20:	f815 4b01 	ldrb.w	r4, [r5], #1
 802df24:	5d37      	ldrb	r7, [r6, r4]
 802df26:	f017 0708 	ands.w	r7, r7, #8
 802df2a:	d1f8      	bne.n	802df1e <_strtoul_l.constprop.0+0xa>
 802df2c:	2c2d      	cmp	r4, #45	@ 0x2d
 802df2e:	d12f      	bne.n	802df90 <_strtoul_l.constprop.0+0x7c>
 802df30:	782c      	ldrb	r4, [r5, #0]
 802df32:	2701      	movs	r7, #1
 802df34:	1c85      	adds	r5, r0, #2
 802df36:	f033 0010 	bics.w	r0, r3, #16
 802df3a:	d109      	bne.n	802df50 <_strtoul_l.constprop.0+0x3c>
 802df3c:	2c30      	cmp	r4, #48	@ 0x30
 802df3e:	d12c      	bne.n	802df9a <_strtoul_l.constprop.0+0x86>
 802df40:	7828      	ldrb	r0, [r5, #0]
 802df42:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 802df46:	2858      	cmp	r0, #88	@ 0x58
 802df48:	d127      	bne.n	802df9a <_strtoul_l.constprop.0+0x86>
 802df4a:	786c      	ldrb	r4, [r5, #1]
 802df4c:	2310      	movs	r3, #16
 802df4e:	3502      	adds	r5, #2
 802df50:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 802df54:	2600      	movs	r6, #0
 802df56:	fbb8 f8f3 	udiv	r8, r8, r3
 802df5a:	fb03 f908 	mul.w	r9, r3, r8
 802df5e:	ea6f 0909 	mvn.w	r9, r9
 802df62:	4630      	mov	r0, r6
 802df64:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802df68:	f1bc 0f09 	cmp.w	ip, #9
 802df6c:	d81c      	bhi.n	802dfa8 <_strtoul_l.constprop.0+0x94>
 802df6e:	4664      	mov	r4, ip
 802df70:	42a3      	cmp	r3, r4
 802df72:	dd2a      	ble.n	802dfca <_strtoul_l.constprop.0+0xb6>
 802df74:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 802df78:	d007      	beq.n	802df8a <_strtoul_l.constprop.0+0x76>
 802df7a:	4580      	cmp	r8, r0
 802df7c:	d322      	bcc.n	802dfc4 <_strtoul_l.constprop.0+0xb0>
 802df7e:	d101      	bne.n	802df84 <_strtoul_l.constprop.0+0x70>
 802df80:	45a1      	cmp	r9, r4
 802df82:	db1f      	blt.n	802dfc4 <_strtoul_l.constprop.0+0xb0>
 802df84:	fb00 4003 	mla	r0, r0, r3, r4
 802df88:	2601      	movs	r6, #1
 802df8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802df8e:	e7e9      	b.n	802df64 <_strtoul_l.constprop.0+0x50>
 802df90:	2c2b      	cmp	r4, #43	@ 0x2b
 802df92:	bf04      	itt	eq
 802df94:	782c      	ldrbeq	r4, [r5, #0]
 802df96:	1c85      	addeq	r5, r0, #2
 802df98:	e7cd      	b.n	802df36 <_strtoul_l.constprop.0+0x22>
 802df9a:	2b00      	cmp	r3, #0
 802df9c:	d1d8      	bne.n	802df50 <_strtoul_l.constprop.0+0x3c>
 802df9e:	2c30      	cmp	r4, #48	@ 0x30
 802dfa0:	bf0c      	ite	eq
 802dfa2:	2308      	moveq	r3, #8
 802dfa4:	230a      	movne	r3, #10
 802dfa6:	e7d3      	b.n	802df50 <_strtoul_l.constprop.0+0x3c>
 802dfa8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 802dfac:	f1bc 0f19 	cmp.w	ip, #25
 802dfb0:	d801      	bhi.n	802dfb6 <_strtoul_l.constprop.0+0xa2>
 802dfb2:	3c37      	subs	r4, #55	@ 0x37
 802dfb4:	e7dc      	b.n	802df70 <_strtoul_l.constprop.0+0x5c>
 802dfb6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802dfba:	f1bc 0f19 	cmp.w	ip, #25
 802dfbe:	d804      	bhi.n	802dfca <_strtoul_l.constprop.0+0xb6>
 802dfc0:	3c57      	subs	r4, #87	@ 0x57
 802dfc2:	e7d5      	b.n	802df70 <_strtoul_l.constprop.0+0x5c>
 802dfc4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 802dfc8:	e7df      	b.n	802df8a <_strtoul_l.constprop.0+0x76>
 802dfca:	1c73      	adds	r3, r6, #1
 802dfcc:	d106      	bne.n	802dfdc <_strtoul_l.constprop.0+0xc8>
 802dfce:	2322      	movs	r3, #34	@ 0x22
 802dfd0:	f8ce 3000 	str.w	r3, [lr]
 802dfd4:	4630      	mov	r0, r6
 802dfd6:	b932      	cbnz	r2, 802dfe6 <_strtoul_l.constprop.0+0xd2>
 802dfd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802dfdc:	b107      	cbz	r7, 802dfe0 <_strtoul_l.constprop.0+0xcc>
 802dfde:	4240      	negs	r0, r0
 802dfe0:	2a00      	cmp	r2, #0
 802dfe2:	d0f9      	beq.n	802dfd8 <_strtoul_l.constprop.0+0xc4>
 802dfe4:	b106      	cbz	r6, 802dfe8 <_strtoul_l.constprop.0+0xd4>
 802dfe6:	1e69      	subs	r1, r5, #1
 802dfe8:	6011      	str	r1, [r2, #0]
 802dfea:	e7f5      	b.n	802dfd8 <_strtoul_l.constprop.0+0xc4>
 802dfec:	080343f5 	.word	0x080343f5

0802dff0 <_strtoul_r>:
 802dff0:	f7ff bf90 	b.w	802df14 <_strtoul_l.constprop.0>

0802dff4 <strtoul>:
 802dff4:	4613      	mov	r3, r2
 802dff6:	460a      	mov	r2, r1
 802dff8:	4601      	mov	r1, r0
 802dffa:	4802      	ldr	r0, [pc, #8]	@ (802e004 <strtoul+0x10>)
 802dffc:	6800      	ldr	r0, [r0, #0]
 802dffe:	f7ff bf89 	b.w	802df14 <_strtoul_l.constprop.0>
 802e002:	bf00      	nop
 802e004:	20000840 	.word	0x20000840

0802e008 <__submore>:
 802e008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e00c:	460c      	mov	r4, r1
 802e00e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802e010:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802e014:	4299      	cmp	r1, r3
 802e016:	d11d      	bne.n	802e054 <__submore+0x4c>
 802e018:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 802e01c:	f7f5 f836 	bl	802308c <_malloc_r>
 802e020:	b918      	cbnz	r0, 802e02a <__submore+0x22>
 802e022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e02a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802e02e:	6363      	str	r3, [r4, #52]	@ 0x34
 802e030:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 802e034:	6320      	str	r0, [r4, #48]	@ 0x30
 802e036:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 802e03a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 802e03e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 802e042:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 802e046:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 802e04a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 802e04e:	6020      	str	r0, [r4, #0]
 802e050:	2000      	movs	r0, #0
 802e052:	e7e8      	b.n	802e026 <__submore+0x1e>
 802e054:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 802e056:	0077      	lsls	r7, r6, #1
 802e058:	463a      	mov	r2, r7
 802e05a:	f7fe ffab 	bl	802cfb4 <_realloc_r>
 802e05e:	4605      	mov	r5, r0
 802e060:	2800      	cmp	r0, #0
 802e062:	d0de      	beq.n	802e022 <__submore+0x1a>
 802e064:	eb00 0806 	add.w	r8, r0, r6
 802e068:	4601      	mov	r1, r0
 802e06a:	4632      	mov	r2, r6
 802e06c:	4640      	mov	r0, r8
 802e06e:	f7f9 f9cb 	bl	8027408 <memcpy>
 802e072:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 802e076:	f8c4 8000 	str.w	r8, [r4]
 802e07a:	e7e9      	b.n	802e050 <__submore+0x48>

0802e07c <__ascii_wctomb>:
 802e07c:	4603      	mov	r3, r0
 802e07e:	4608      	mov	r0, r1
 802e080:	b141      	cbz	r1, 802e094 <__ascii_wctomb+0x18>
 802e082:	2aff      	cmp	r2, #255	@ 0xff
 802e084:	d904      	bls.n	802e090 <__ascii_wctomb+0x14>
 802e086:	228a      	movs	r2, #138	@ 0x8a
 802e088:	601a      	str	r2, [r3, #0]
 802e08a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e08e:	4770      	bx	lr
 802e090:	700a      	strb	r2, [r1, #0]
 802e092:	2001      	movs	r0, #1
 802e094:	4770      	bx	lr

0802e096 <__swbuf_r>:
 802e096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e098:	460e      	mov	r6, r1
 802e09a:	4614      	mov	r4, r2
 802e09c:	4605      	mov	r5, r0
 802e09e:	b118      	cbz	r0, 802e0a8 <__swbuf_r+0x12>
 802e0a0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802e0a2:	b90b      	cbnz	r3, 802e0a8 <__swbuf_r+0x12>
 802e0a4:	f7f7 fcb2 	bl	8025a0c <__sinit>
 802e0a8:	69a3      	ldr	r3, [r4, #24]
 802e0aa:	60a3      	str	r3, [r4, #8]
 802e0ac:	89a3      	ldrh	r3, [r4, #12]
 802e0ae:	0719      	lsls	r1, r3, #28
 802e0b0:	d501      	bpl.n	802e0b6 <__swbuf_r+0x20>
 802e0b2:	6923      	ldr	r3, [r4, #16]
 802e0b4:	b943      	cbnz	r3, 802e0c8 <__swbuf_r+0x32>
 802e0b6:	4621      	mov	r1, r4
 802e0b8:	4628      	mov	r0, r5
 802e0ba:	f7f7 fe63 	bl	8025d84 <__swsetup_r>
 802e0be:	b118      	cbz	r0, 802e0c8 <__swbuf_r+0x32>
 802e0c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802e0c4:	4638      	mov	r0, r7
 802e0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e0c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e0cc:	b2f6      	uxtb	r6, r6
 802e0ce:	049a      	lsls	r2, r3, #18
 802e0d0:	4637      	mov	r7, r6
 802e0d2:	d406      	bmi.n	802e0e2 <__swbuf_r+0x4c>
 802e0d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802e0d8:	81a3      	strh	r3, [r4, #12]
 802e0da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802e0dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802e0e0:	6663      	str	r3, [r4, #100]	@ 0x64
 802e0e2:	6823      	ldr	r3, [r4, #0]
 802e0e4:	6922      	ldr	r2, [r4, #16]
 802e0e6:	1a98      	subs	r0, r3, r2
 802e0e8:	6963      	ldr	r3, [r4, #20]
 802e0ea:	4283      	cmp	r3, r0
 802e0ec:	dc05      	bgt.n	802e0fa <__swbuf_r+0x64>
 802e0ee:	4621      	mov	r1, r4
 802e0f0:	4628      	mov	r0, r5
 802e0f2:	f7f7 fb49 	bl	8025788 <_fflush_r>
 802e0f6:	2800      	cmp	r0, #0
 802e0f8:	d1e2      	bne.n	802e0c0 <__swbuf_r+0x2a>
 802e0fa:	68a3      	ldr	r3, [r4, #8]
 802e0fc:	3b01      	subs	r3, #1
 802e0fe:	60a3      	str	r3, [r4, #8]
 802e100:	6823      	ldr	r3, [r4, #0]
 802e102:	1c5a      	adds	r2, r3, #1
 802e104:	6022      	str	r2, [r4, #0]
 802e106:	701e      	strb	r6, [r3, #0]
 802e108:	6962      	ldr	r2, [r4, #20]
 802e10a:	1c43      	adds	r3, r0, #1
 802e10c:	429a      	cmp	r2, r3
 802e10e:	d004      	beq.n	802e11a <__swbuf_r+0x84>
 802e110:	89a3      	ldrh	r3, [r4, #12]
 802e112:	07db      	lsls	r3, r3, #31
 802e114:	d5d6      	bpl.n	802e0c4 <__swbuf_r+0x2e>
 802e116:	2e0a      	cmp	r6, #10
 802e118:	d1d4      	bne.n	802e0c4 <__swbuf_r+0x2e>
 802e11a:	4621      	mov	r1, r4
 802e11c:	4628      	mov	r0, r5
 802e11e:	f7f7 fb33 	bl	8025788 <_fflush_r>
 802e122:	2800      	cmp	r0, #0
 802e124:	d0ce      	beq.n	802e0c4 <__swbuf_r+0x2e>
 802e126:	e7cb      	b.n	802e0c0 <__swbuf_r+0x2a>

0802e128 <_raise_r>:
 802e128:	291f      	cmp	r1, #31
 802e12a:	b538      	push	{r3, r4, r5, lr}
 802e12c:	4605      	mov	r5, r0
 802e12e:	460c      	mov	r4, r1
 802e130:	d904      	bls.n	802e13c <_raise_r+0x14>
 802e132:	2316      	movs	r3, #22
 802e134:	6003      	str	r3, [r0, #0]
 802e136:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e13a:	bd38      	pop	{r3, r4, r5, pc}
 802e13c:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 802e140:	b112      	cbz	r2, 802e148 <_raise_r+0x20>
 802e142:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e146:	b94b      	cbnz	r3, 802e15c <_raise_r+0x34>
 802e148:	4628      	mov	r0, r5
 802e14a:	f000 f8fd 	bl	802e348 <_getpid_r>
 802e14e:	4622      	mov	r2, r4
 802e150:	4601      	mov	r1, r0
 802e152:	4628      	mov	r0, r5
 802e154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e158:	f000 b8e4 	b.w	802e324 <_kill_r>
 802e15c:	2b01      	cmp	r3, #1
 802e15e:	d00a      	beq.n	802e176 <_raise_r+0x4e>
 802e160:	1c59      	adds	r1, r3, #1
 802e162:	d103      	bne.n	802e16c <_raise_r+0x44>
 802e164:	2316      	movs	r3, #22
 802e166:	6003      	str	r3, [r0, #0]
 802e168:	2001      	movs	r0, #1
 802e16a:	e7e6      	b.n	802e13a <_raise_r+0x12>
 802e16c:	2100      	movs	r1, #0
 802e16e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802e172:	4620      	mov	r0, r4
 802e174:	4798      	blx	r3
 802e176:	2000      	movs	r0, #0
 802e178:	e7df      	b.n	802e13a <_raise_r+0x12>
	...

0802e17c <raise>:
 802e17c:	4b02      	ldr	r3, [pc, #8]	@ (802e188 <raise+0xc>)
 802e17e:	4601      	mov	r1, r0
 802e180:	6818      	ldr	r0, [r3, #0]
 802e182:	f7ff bfd1 	b.w	802e128 <_raise_r>
 802e186:	bf00      	nop
 802e188:	20000840 	.word	0x20000840

0802e18c <__gettzinfo>:
 802e18c:	4800      	ldr	r0, [pc, #0]	@ (802e190 <__gettzinfo+0x4>)
 802e18e:	4770      	bx	lr
 802e190:	20000970 	.word	0x20000970

0802e194 <gmtime_r>:
 802e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e198:	4a4d      	ldr	r2, [pc, #308]	@ (802e2d0 <gmtime_r+0x13c>)
 802e19a:	460c      	mov	r4, r1
 802e19c:	2300      	movs	r3, #0
 802e19e:	e9d0 0100 	ldrd	r0, r1, [r0]
 802e1a2:	f7d2 fd89 	bl	8000cb8 <__aeabi_ldivmod>
 802e1a6:	2a00      	cmp	r2, #0
 802e1a8:	bfbc      	itt	lt
 802e1aa:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 802e1ae:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 802e1b2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802e1b6:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 802e1ba:	fbb2 f3f1 	udiv	r3, r2, r1
 802e1be:	fb01 2213 	mls	r2, r1, r3, r2
 802e1c2:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 802e1c6:	bfac      	ite	ge
 802e1c8:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 802e1cc:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 802e1d0:	60a3      	str	r3, [r4, #8]
 802e1d2:	fbb2 f3f1 	udiv	r3, r2, r1
 802e1d6:	fb01 2213 	mls	r2, r1, r3, r2
 802e1da:	6063      	str	r3, [r4, #4]
 802e1dc:	6022      	str	r2, [r4, #0]
 802e1de:	1cc3      	adds	r3, r0, #3
 802e1e0:	2207      	movs	r2, #7
 802e1e2:	fb93 f2f2 	sdiv	r2, r3, r2
 802e1e6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802e1ea:	1a9b      	subs	r3, r3, r2
 802e1ec:	bf48      	it	mi
 802e1ee:	3307      	addmi	r3, #7
 802e1f0:	2800      	cmp	r0, #0
 802e1f2:	61a3      	str	r3, [r4, #24]
 802e1f4:	bfb8      	it	lt
 802e1f6:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 802e1fa:	4936      	ldr	r1, [pc, #216]	@ (802e2d4 <gmtime_r+0x140>)
 802e1fc:	bfae      	itee	ge
 802e1fe:	fb90 f1f1 	sdivge	r1, r0, r1
 802e202:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 802e206:	fb93 f1f1 	sdivlt	r1, r3, r1
 802e20a:	4b33      	ldr	r3, [pc, #204]	@ (802e2d8 <gmtime_r+0x144>)
 802e20c:	fb03 0001 	mla	r0, r3, r1, r0
 802e210:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 802e214:	fbb0 f3f3 	udiv	r3, r0, r3
 802e218:	4403      	add	r3, r0
 802e21a:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 802e21e:	fbb0 f2fc 	udiv	r2, r0, ip
 802e222:	1a9b      	subs	r3, r3, r2
 802e224:	f240 176d 	movw	r7, #365	@ 0x16d
 802e228:	4a2c      	ldr	r2, [pc, #176]	@ (802e2dc <gmtime_r+0x148>)
 802e22a:	fbb0 f2f2 	udiv	r2, r0, r2
 802e22e:	2664      	movs	r6, #100	@ 0x64
 802e230:	1a9b      	subs	r3, r3, r2
 802e232:	fbb3 f2f7 	udiv	r2, r3, r7
 802e236:	fbb3 f3fc 	udiv	r3, r3, ip
 802e23a:	fbb2 f5f6 	udiv	r5, r2, r6
 802e23e:	1aeb      	subs	r3, r5, r3
 802e240:	4403      	add	r3, r0
 802e242:	fb07 3312 	mls	r3, r7, r2, r3
 802e246:	2099      	movs	r0, #153	@ 0x99
 802e248:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 802e24c:	3702      	adds	r7, #2
 802e24e:	f103 0e01 	add.w	lr, r3, #1
 802e252:	fbb7 fcf0 	udiv	ip, r7, r0
 802e256:	fb00 f00c 	mul.w	r0, r0, ip
 802e25a:	3002      	adds	r0, #2
 802e25c:	f04f 0805 	mov.w	r8, #5
 802e260:	fbb0 f0f8 	udiv	r0, r0, r8
 802e264:	ebae 0000 	sub.w	r0, lr, r0
 802e268:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 802e26c:	4577      	cmp	r7, lr
 802e26e:	bf8c      	ite	hi
 802e270:	f06f 0709 	mvnhi.w	r7, #9
 802e274:	2702      	movls	r7, #2
 802e276:	4467      	add	r7, ip
 802e278:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 802e27c:	fb0c 2101 	mla	r1, ip, r1, r2
 802e280:	2f01      	cmp	r7, #1
 802e282:	bf98      	it	ls
 802e284:	3101      	addls	r1, #1
 802e286:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 802e28a:	d30c      	bcc.n	802e2a6 <gmtime_r+0x112>
 802e28c:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 802e290:	61e3      	str	r3, [r4, #28]
 802e292:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 802e296:	2300      	movs	r3, #0
 802e298:	60e0      	str	r0, [r4, #12]
 802e29a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802e29e:	6223      	str	r3, [r4, #32]
 802e2a0:	4620      	mov	r0, r4
 802e2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e2a6:	f012 0f03 	tst.w	r2, #3
 802e2aa:	d102      	bne.n	802e2b2 <gmtime_r+0x11e>
 802e2ac:	fb06 2515 	mls	r5, r6, r5, r2
 802e2b0:	b95d      	cbnz	r5, 802e2ca <gmtime_r+0x136>
 802e2b2:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 802e2b6:	fbb2 f6f5 	udiv	r6, r2, r5
 802e2ba:	fb05 2216 	mls	r2, r5, r6, r2
 802e2be:	fab2 f282 	clz	r2, r2
 802e2c2:	0952      	lsrs	r2, r2, #5
 802e2c4:	333b      	adds	r3, #59	@ 0x3b
 802e2c6:	4413      	add	r3, r2
 802e2c8:	e7e2      	b.n	802e290 <gmtime_r+0xfc>
 802e2ca:	2201      	movs	r2, #1
 802e2cc:	e7fa      	b.n	802e2c4 <gmtime_r+0x130>
 802e2ce:	bf00      	nop
 802e2d0:	00015180 	.word	0x00015180
 802e2d4:	00023ab1 	.word	0x00023ab1
 802e2d8:	fffdc54f 	.word	0xfffdc54f
 802e2dc:	00023ab0 	.word	0x00023ab0

0802e2e0 <_fstat_r>:
 802e2e0:	b538      	push	{r3, r4, r5, lr}
 802e2e2:	4d07      	ldr	r5, [pc, #28]	@ (802e300 <_fstat_r+0x20>)
 802e2e4:	2300      	movs	r3, #0
 802e2e6:	4604      	mov	r4, r0
 802e2e8:	4608      	mov	r0, r1
 802e2ea:	4611      	mov	r1, r2
 802e2ec:	602b      	str	r3, [r5, #0]
 802e2ee:	f7d4 fa79 	bl	80027e4 <_fstat>
 802e2f2:	1c43      	adds	r3, r0, #1
 802e2f4:	d102      	bne.n	802e2fc <_fstat_r+0x1c>
 802e2f6:	682b      	ldr	r3, [r5, #0]
 802e2f8:	b103      	cbz	r3, 802e2fc <_fstat_r+0x1c>
 802e2fa:	6023      	str	r3, [r4, #0]
 802e2fc:	bd38      	pop	{r3, r4, r5, pc}
 802e2fe:	bf00      	nop
 802e300:	200182f4 	.word	0x200182f4

0802e304 <_isatty_r>:
 802e304:	b538      	push	{r3, r4, r5, lr}
 802e306:	4d06      	ldr	r5, [pc, #24]	@ (802e320 <_isatty_r+0x1c>)
 802e308:	2300      	movs	r3, #0
 802e30a:	4604      	mov	r4, r0
 802e30c:	4608      	mov	r0, r1
 802e30e:	602b      	str	r3, [r5, #0]
 802e310:	f7d4 fa78 	bl	8002804 <_isatty>
 802e314:	1c43      	adds	r3, r0, #1
 802e316:	d102      	bne.n	802e31e <_isatty_r+0x1a>
 802e318:	682b      	ldr	r3, [r5, #0]
 802e31a:	b103      	cbz	r3, 802e31e <_isatty_r+0x1a>
 802e31c:	6023      	str	r3, [r4, #0]
 802e31e:	bd38      	pop	{r3, r4, r5, pc}
 802e320:	200182f4 	.word	0x200182f4

0802e324 <_kill_r>:
 802e324:	b538      	push	{r3, r4, r5, lr}
 802e326:	4d07      	ldr	r5, [pc, #28]	@ (802e344 <_kill_r+0x20>)
 802e328:	2300      	movs	r3, #0
 802e32a:	4604      	mov	r4, r0
 802e32c:	4608      	mov	r0, r1
 802e32e:	4611      	mov	r1, r2
 802e330:	602b      	str	r3, [r5, #0]
 802e332:	f7d4 f9f7 	bl	8002724 <_kill>
 802e336:	1c43      	adds	r3, r0, #1
 802e338:	d102      	bne.n	802e340 <_kill_r+0x1c>
 802e33a:	682b      	ldr	r3, [r5, #0]
 802e33c:	b103      	cbz	r3, 802e340 <_kill_r+0x1c>
 802e33e:	6023      	str	r3, [r4, #0]
 802e340:	bd38      	pop	{r3, r4, r5, pc}
 802e342:	bf00      	nop
 802e344:	200182f4 	.word	0x200182f4

0802e348 <_getpid_r>:
 802e348:	f7d4 b9e4 	b.w	8002714 <_getpid>

0802e34c <_strtoll_l.constprop.0>:
 802e34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e350:	b085      	sub	sp, #20
 802e352:	4690      	mov	r8, r2
 802e354:	4a43      	ldr	r2, [pc, #268]	@ (802e464 <_strtoll_l.constprop.0+0x118>)
 802e356:	9002      	str	r0, [sp, #8]
 802e358:	4689      	mov	r9, r1
 802e35a:	461e      	mov	r6, r3
 802e35c:	460d      	mov	r5, r1
 802e35e:	462b      	mov	r3, r5
 802e360:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e364:	5d17      	ldrb	r7, [r2, r4]
 802e366:	f017 0708 	ands.w	r7, r7, #8
 802e36a:	d1f8      	bne.n	802e35e <_strtoll_l.constprop.0+0x12>
 802e36c:	2c2d      	cmp	r4, #45	@ 0x2d
 802e36e:	d149      	bne.n	802e404 <_strtoll_l.constprop.0+0xb8>
 802e370:	782c      	ldrb	r4, [r5, #0]
 802e372:	2701      	movs	r7, #1
 802e374:	1c9d      	adds	r5, r3, #2
 802e376:	f036 0310 	bics.w	r3, r6, #16
 802e37a:	d109      	bne.n	802e390 <_strtoll_l.constprop.0+0x44>
 802e37c:	2c30      	cmp	r4, #48	@ 0x30
 802e37e:	d146      	bne.n	802e40e <_strtoll_l.constprop.0+0xc2>
 802e380:	782b      	ldrb	r3, [r5, #0]
 802e382:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802e386:	2b58      	cmp	r3, #88	@ 0x58
 802e388:	d141      	bne.n	802e40e <_strtoll_l.constprop.0+0xc2>
 802e38a:	786c      	ldrb	r4, [r5, #1]
 802e38c:	2610      	movs	r6, #16
 802e38e:	3502      	adds	r5, #2
 802e390:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 802e394:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 802e398:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 802e39c:	17f3      	asrs	r3, r6, #31
 802e39e:	4632      	mov	r2, r6
 802e3a0:	4658      	mov	r0, fp
 802e3a2:	4651      	mov	r1, sl
 802e3a4:	9303      	str	r3, [sp, #12]
 802e3a6:	f7d2 fcd7 	bl	8000d58 <__aeabi_uldivmod>
 802e3aa:	9201      	str	r2, [sp, #4]
 802e3ac:	2200      	movs	r2, #0
 802e3ae:	468e      	mov	lr, r1
 802e3b0:	4684      	mov	ip, r0
 802e3b2:	4611      	mov	r1, r2
 802e3b4:	4610      	mov	r0, r2
 802e3b6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 802e3ba:	2b09      	cmp	r3, #9
 802e3bc:	d905      	bls.n	802e3ca <_strtoll_l.constprop.0+0x7e>
 802e3be:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 802e3c2:	2b19      	cmp	r3, #25
 802e3c4:	d82a      	bhi.n	802e41c <_strtoll_l.constprop.0+0xd0>
 802e3c6:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 802e3ca:	429e      	cmp	r6, r3
 802e3cc:	dd30      	ble.n	802e430 <_strtoll_l.constprop.0+0xe4>
 802e3ce:	1c54      	adds	r4, r2, #1
 802e3d0:	d015      	beq.n	802e3fe <_strtoll_l.constprop.0+0xb2>
 802e3d2:	4584      	cmp	ip, r0
 802e3d4:	eb7e 0201 	sbcs.w	r2, lr, r1
 802e3d8:	d327      	bcc.n	802e42a <_strtoll_l.constprop.0+0xde>
 802e3da:	458e      	cmp	lr, r1
 802e3dc:	bf08      	it	eq
 802e3de:	4584      	cmpeq	ip, r0
 802e3e0:	d102      	bne.n	802e3e8 <_strtoll_l.constprop.0+0x9c>
 802e3e2:	9a01      	ldr	r2, [sp, #4]
 802e3e4:	429a      	cmp	r2, r3
 802e3e6:	db20      	blt.n	802e42a <_strtoll_l.constprop.0+0xde>
 802e3e8:	9a03      	ldr	r2, [sp, #12]
 802e3ea:	4371      	muls	r1, r6
 802e3ec:	fb00 1102 	mla	r1, r0, r2, r1
 802e3f0:	fba6 0200 	umull	r0, r2, r6, r0
 802e3f4:	440a      	add	r2, r1
 802e3f6:	1818      	adds	r0, r3, r0
 802e3f8:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 802e3fc:	2201      	movs	r2, #1
 802e3fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e402:	e7d8      	b.n	802e3b6 <_strtoll_l.constprop.0+0x6a>
 802e404:	2c2b      	cmp	r4, #43	@ 0x2b
 802e406:	bf04      	itt	eq
 802e408:	782c      	ldrbeq	r4, [r5, #0]
 802e40a:	1c9d      	addeq	r5, r3, #2
 802e40c:	e7b3      	b.n	802e376 <_strtoll_l.constprop.0+0x2a>
 802e40e:	2e00      	cmp	r6, #0
 802e410:	d1be      	bne.n	802e390 <_strtoll_l.constprop.0+0x44>
 802e412:	2c30      	cmp	r4, #48	@ 0x30
 802e414:	bf0c      	ite	eq
 802e416:	2608      	moveq	r6, #8
 802e418:	260a      	movne	r6, #10
 802e41a:	e7b9      	b.n	802e390 <_strtoll_l.constprop.0+0x44>
 802e41c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 802e420:	2b19      	cmp	r3, #25
 802e422:	d805      	bhi.n	802e430 <_strtoll_l.constprop.0+0xe4>
 802e424:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 802e428:	e7cf      	b.n	802e3ca <_strtoll_l.constprop.0+0x7e>
 802e42a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802e42e:	e7e6      	b.n	802e3fe <_strtoll_l.constprop.0+0xb2>
 802e430:	1c53      	adds	r3, r2, #1
 802e432:	d10a      	bne.n	802e44a <_strtoll_l.constprop.0+0xfe>
 802e434:	9a02      	ldr	r2, [sp, #8]
 802e436:	2322      	movs	r3, #34	@ 0x22
 802e438:	6013      	str	r3, [r2, #0]
 802e43a:	4658      	mov	r0, fp
 802e43c:	4651      	mov	r1, sl
 802e43e:	f1b8 0f00 	cmp.w	r8, #0
 802e442:	d10a      	bne.n	802e45a <_strtoll_l.constprop.0+0x10e>
 802e444:	b005      	add	sp, #20
 802e446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e44a:	b117      	cbz	r7, 802e452 <_strtoll_l.constprop.0+0x106>
 802e44c:	4240      	negs	r0, r0
 802e44e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802e452:	f1b8 0f00 	cmp.w	r8, #0
 802e456:	d0f5      	beq.n	802e444 <_strtoll_l.constprop.0+0xf8>
 802e458:	b10a      	cbz	r2, 802e45e <_strtoll_l.constprop.0+0x112>
 802e45a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 802e45e:	f8c8 9000 	str.w	r9, [r8]
 802e462:	e7ef      	b.n	802e444 <_strtoll_l.constprop.0+0xf8>
 802e464:	080343f5 	.word	0x080343f5

0802e468 <_strtoll_r>:
 802e468:	f7ff bf70 	b.w	802e34c <_strtoll_l.constprop.0>

0802e46c <__libc_fini_array>:
 802e46c:	b538      	push	{r3, r4, r5, lr}
 802e46e:	4d07      	ldr	r5, [pc, #28]	@ (802e48c <__libc_fini_array+0x20>)
 802e470:	4c07      	ldr	r4, [pc, #28]	@ (802e490 <__libc_fini_array+0x24>)
 802e472:	1b64      	subs	r4, r4, r5
 802e474:	10a4      	asrs	r4, r4, #2
 802e476:	b91c      	cbnz	r4, 802e480 <__libc_fini_array+0x14>
 802e478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e47c:	f000 bc66 	b.w	802ed4c <_fini>
 802e480:	3c01      	subs	r4, #1
 802e482:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802e486:	4798      	blx	r3
 802e488:	e7f5      	b.n	802e476 <__libc_fini_array+0xa>
 802e48a:	bf00      	nop
 802e48c:	08034810 	.word	0x08034810
 802e490:	08034814 	.word	0x08034814

0802e494 <_strtoull_l.constprop.0>:
 802e494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e498:	4691      	mov	r9, r2
 802e49a:	4a48      	ldr	r2, [pc, #288]	@ (802e5bc <_strtoull_l.constprop.0+0x128>)
 802e49c:	9001      	str	r0, [sp, #4]
 802e49e:	468a      	mov	sl, r1
 802e4a0:	461e      	mov	r6, r3
 802e4a2:	460d      	mov	r5, r1
 802e4a4:	462b      	mov	r3, r5
 802e4a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e4aa:	5d17      	ldrb	r7, [r2, r4]
 802e4ac:	f017 0708 	ands.w	r7, r7, #8
 802e4b0:	d1f8      	bne.n	802e4a4 <_strtoull_l.constprop.0+0x10>
 802e4b2:	2c2d      	cmp	r4, #45	@ 0x2d
 802e4b4:	d14a      	bne.n	802e54c <_strtoull_l.constprop.0+0xb8>
 802e4b6:	782c      	ldrb	r4, [r5, #0]
 802e4b8:	2701      	movs	r7, #1
 802e4ba:	1c9d      	adds	r5, r3, #2
 802e4bc:	f036 0310 	bics.w	r3, r6, #16
 802e4c0:	d109      	bne.n	802e4d6 <_strtoull_l.constprop.0+0x42>
 802e4c2:	2c30      	cmp	r4, #48	@ 0x30
 802e4c4:	d147      	bne.n	802e556 <_strtoull_l.constprop.0+0xc2>
 802e4c6:	782b      	ldrb	r3, [r5, #0]
 802e4c8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802e4cc:	2b58      	cmp	r3, #88	@ 0x58
 802e4ce:	d142      	bne.n	802e556 <_strtoull_l.constprop.0+0xc2>
 802e4d0:	786c      	ldrb	r4, [r5, #1]
 802e4d2:	2610      	movs	r6, #16
 802e4d4:	3502      	adds	r5, #2
 802e4d6:	ea4f 7be6 	mov.w	fp, r6, asr #31
 802e4da:	4632      	mov	r2, r6
 802e4dc:	465b      	mov	r3, fp
 802e4de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e4e2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802e4e6:	f7d2 fc37 	bl	8000d58 <__aeabi_uldivmod>
 802e4ea:	4632      	mov	r2, r6
 802e4ec:	9000      	str	r0, [sp, #0]
 802e4ee:	4688      	mov	r8, r1
 802e4f0:	465b      	mov	r3, fp
 802e4f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e4f6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802e4fa:	f7d2 fc2d 	bl	8000d58 <__aeabi_uldivmod>
 802e4fe:	2300      	movs	r3, #0
 802e500:	4618      	mov	r0, r3
 802e502:	4619      	mov	r1, r3
 802e504:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802e508:	f1bc 0f09 	cmp.w	ip, #9
 802e50c:	d82a      	bhi.n	802e564 <_strtoull_l.constprop.0+0xd0>
 802e50e:	4664      	mov	r4, ip
 802e510:	42a6      	cmp	r6, r4
 802e512:	dd38      	ble.n	802e586 <_strtoull_l.constprop.0+0xf2>
 802e514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802e518:	d015      	beq.n	802e546 <_strtoull_l.constprop.0+0xb2>
 802e51a:	9b00      	ldr	r3, [sp, #0]
 802e51c:	4283      	cmp	r3, r0
 802e51e:	eb78 0301 	sbcs.w	r3, r8, r1
 802e522:	d32d      	bcc.n	802e580 <_strtoull_l.constprop.0+0xec>
 802e524:	9b00      	ldr	r3, [sp, #0]
 802e526:	4588      	cmp	r8, r1
 802e528:	bf08      	it	eq
 802e52a:	4283      	cmpeq	r3, r0
 802e52c:	d101      	bne.n	802e532 <_strtoull_l.constprop.0+0x9e>
 802e52e:	42a2      	cmp	r2, r4
 802e530:	db26      	blt.n	802e580 <_strtoull_l.constprop.0+0xec>
 802e532:	4371      	muls	r1, r6
 802e534:	fb00 110b 	mla	r1, r0, fp, r1
 802e538:	fba6 0300 	umull	r0, r3, r6, r0
 802e53c:	4419      	add	r1, r3
 802e53e:	1820      	adds	r0, r4, r0
 802e540:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 802e544:	2301      	movs	r3, #1
 802e546:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e54a:	e7db      	b.n	802e504 <_strtoull_l.constprop.0+0x70>
 802e54c:	2c2b      	cmp	r4, #43	@ 0x2b
 802e54e:	bf04      	itt	eq
 802e550:	782c      	ldrbeq	r4, [r5, #0]
 802e552:	1c9d      	addeq	r5, r3, #2
 802e554:	e7b2      	b.n	802e4bc <_strtoull_l.constprop.0+0x28>
 802e556:	2e00      	cmp	r6, #0
 802e558:	d1bd      	bne.n	802e4d6 <_strtoull_l.constprop.0+0x42>
 802e55a:	2c30      	cmp	r4, #48	@ 0x30
 802e55c:	bf0c      	ite	eq
 802e55e:	2608      	moveq	r6, #8
 802e560:	260a      	movne	r6, #10
 802e562:	e7b8      	b.n	802e4d6 <_strtoull_l.constprop.0+0x42>
 802e564:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 802e568:	f1bc 0f19 	cmp.w	ip, #25
 802e56c:	d801      	bhi.n	802e572 <_strtoull_l.constprop.0+0xde>
 802e56e:	3c37      	subs	r4, #55	@ 0x37
 802e570:	e7ce      	b.n	802e510 <_strtoull_l.constprop.0+0x7c>
 802e572:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802e576:	f1bc 0f19 	cmp.w	ip, #25
 802e57a:	d804      	bhi.n	802e586 <_strtoull_l.constprop.0+0xf2>
 802e57c:	3c57      	subs	r4, #87	@ 0x57
 802e57e:	e7c7      	b.n	802e510 <_strtoull_l.constprop.0+0x7c>
 802e580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e584:	e7df      	b.n	802e546 <_strtoull_l.constprop.0+0xb2>
 802e586:	1c5a      	adds	r2, r3, #1
 802e588:	d10a      	bne.n	802e5a0 <_strtoull_l.constprop.0+0x10c>
 802e58a:	9901      	ldr	r1, [sp, #4]
 802e58c:	2222      	movs	r2, #34	@ 0x22
 802e58e:	600a      	str	r2, [r1, #0]
 802e590:	4618      	mov	r0, r3
 802e592:	4619      	mov	r1, r3
 802e594:	f1b9 0f00 	cmp.w	r9, #0
 802e598:	d10a      	bne.n	802e5b0 <_strtoull_l.constprop.0+0x11c>
 802e59a:	b003      	add	sp, #12
 802e59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e5a0:	b117      	cbz	r7, 802e5a8 <_strtoull_l.constprop.0+0x114>
 802e5a2:	4240      	negs	r0, r0
 802e5a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802e5a8:	f1b9 0f00 	cmp.w	r9, #0
 802e5ac:	d0f5      	beq.n	802e59a <_strtoull_l.constprop.0+0x106>
 802e5ae:	b10b      	cbz	r3, 802e5b4 <_strtoull_l.constprop.0+0x120>
 802e5b0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 802e5b4:	f8c9 a000 	str.w	sl, [r9]
 802e5b8:	e7ef      	b.n	802e59a <_strtoull_l.constprop.0+0x106>
 802e5ba:	bf00      	nop
 802e5bc:	080343f5 	.word	0x080343f5

0802e5c0 <_strtoull_r>:
 802e5c0:	f7ff bf68 	b.w	802e494 <_strtoull_l.constprop.0>

0802e5c4 <_mbrtowc_r>:
 802e5c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802e5c6:	4c0a      	ldr	r4, [pc, #40]	@ (802e5f0 <_mbrtowc_r+0x2c>)
 802e5c8:	9e08      	ldr	r6, [sp, #32]
 802e5ca:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 802e5ce:	9600      	str	r6, [sp, #0]
 802e5d0:	4605      	mov	r5, r0
 802e5d2:	4614      	mov	r4, r2
 802e5d4:	b912      	cbnz	r2, 802e5dc <_mbrtowc_r+0x18>
 802e5d6:	4a07      	ldr	r2, [pc, #28]	@ (802e5f4 <_mbrtowc_r+0x30>)
 802e5d8:	2301      	movs	r3, #1
 802e5da:	4621      	mov	r1, r4
 802e5dc:	47b8      	blx	r7
 802e5de:	1c43      	adds	r3, r0, #1
 802e5e0:	bf01      	itttt	eq
 802e5e2:	2300      	moveq	r3, #0
 802e5e4:	6033      	streq	r3, [r6, #0]
 802e5e6:	238a      	moveq	r3, #138	@ 0x8a
 802e5e8:	602b      	streq	r3, [r5, #0]
 802e5ea:	b003      	add	sp, #12
 802e5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e5ee:	bf00      	nop
 802e5f0:	200006d4 	.word	0x200006d4
 802e5f4:	08034037 	.word	0x08034037

0802e5f8 <iswspace>:
 802e5f8:	2100      	movs	r1, #0
 802e5fa:	f000 b801 	b.w	802e600 <iswspace_l>
	...

0802e600 <iswspace_l>:
 802e600:	28ff      	cmp	r0, #255	@ 0xff
 802e602:	bf9d      	ittte	ls
 802e604:	4b02      	ldrls	r3, [pc, #8]	@ (802e610 <iswspace_l+0x10>)
 802e606:	5c18      	ldrbls	r0, [r3, r0]
 802e608:	f000 0008 	andls.w	r0, r0, #8
 802e60c:	2000      	movhi	r0, #0
 802e60e:	4770      	bx	lr
 802e610:	080343f5 	.word	0x080343f5

0802e614 <__register_exitproc>:
 802e614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e618:	f8df a074 	ldr.w	sl, [pc, #116]	@ 802e690 <__register_exitproc+0x7c>
 802e61c:	4606      	mov	r6, r0
 802e61e:	f8da 0000 	ldr.w	r0, [sl]
 802e622:	4698      	mov	r8, r3
 802e624:	460f      	mov	r7, r1
 802e626:	4691      	mov	r9, r2
 802e628:	f7f8 feeb 	bl	8027402 <__retarget_lock_acquire_recursive>
 802e62c:	4b16      	ldr	r3, [pc, #88]	@ (802e688 <__register_exitproc+0x74>)
 802e62e:	681c      	ldr	r4, [r3, #0]
 802e630:	b90c      	cbnz	r4, 802e636 <__register_exitproc+0x22>
 802e632:	4c16      	ldr	r4, [pc, #88]	@ (802e68c <__register_exitproc+0x78>)
 802e634:	601c      	str	r4, [r3, #0]
 802e636:	6865      	ldr	r5, [r4, #4]
 802e638:	f8da 0000 	ldr.w	r0, [sl]
 802e63c:	2d1f      	cmp	r5, #31
 802e63e:	dd05      	ble.n	802e64c <__register_exitproc+0x38>
 802e640:	f7f8 fee1 	bl	8027406 <__retarget_lock_release_recursive>
 802e644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e64c:	b19e      	cbz	r6, 802e676 <__register_exitproc+0x62>
 802e64e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 802e652:	2201      	movs	r2, #1
 802e654:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 802e658:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 802e65c:	40aa      	lsls	r2, r5
 802e65e:	4313      	orrs	r3, r2
 802e660:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 802e664:	2e02      	cmp	r6, #2
 802e666:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 802e66a:	bf02      	ittt	eq
 802e66c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 802e670:	4313      	orreq	r3, r2
 802e672:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 802e676:	1c6b      	adds	r3, r5, #1
 802e678:	3502      	adds	r5, #2
 802e67a:	6063      	str	r3, [r4, #4]
 802e67c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 802e680:	f7f8 fec1 	bl	8027406 <__retarget_lock_release_recursive>
 802e684:	2000      	movs	r0, #0
 802e686:	e7df      	b.n	802e648 <__register_exitproc+0x34>
 802e688:	20018300 	.word	0x20018300
 802e68c:	20018304 	.word	0x20018304
 802e690:	20000968 	.word	0x20000968
 802e694:	00000000 	.word	0x00000000

0802e698 <nan>:
 802e698:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 802e6a0 <nan+0x8>
 802e69c:	4770      	bx	lr
 802e69e:	bf00      	nop
 802e6a0:	00000000 	.word	0x00000000
 802e6a4:	7ff80000 	.word	0x7ff80000

0802e6a8 <nanf>:
 802e6a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 802e6b0 <nanf+0x8>
 802e6ac:	4770      	bx	lr
 802e6ae:	bf00      	nop
 802e6b0:	7fc00000 	.word	0x7fc00000

0802e6b4 <__env_lock>:
 802e6b4:	4801      	ldr	r0, [pc, #4]	@ (802e6bc <__env_lock+0x8>)
 802e6b6:	f7f8 bea4 	b.w	8027402 <__retarget_lock_acquire_recursive>
 802e6ba:	bf00      	nop
 802e6bc:	200182f9 	.word	0x200182f9

0802e6c0 <__env_unlock>:
 802e6c0:	4801      	ldr	r0, [pc, #4]	@ (802e6c8 <__env_unlock+0x8>)
 802e6c2:	f7f8 bea0 	b.w	8027406 <__retarget_lock_release_recursive>
 802e6c6:	bf00      	nop
 802e6c8:	200182f9 	.word	0x200182f9

0802e6cc <rshift>:
 802e6cc:	6903      	ldr	r3, [r0, #16]
 802e6ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802e6d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802e6d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 802e6da:	f100 0414 	add.w	r4, r0, #20
 802e6de:	dd45      	ble.n	802e76c <rshift+0xa0>
 802e6e0:	f011 011f 	ands.w	r1, r1, #31
 802e6e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802e6e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802e6ec:	d10c      	bne.n	802e708 <rshift+0x3c>
 802e6ee:	f100 0710 	add.w	r7, r0, #16
 802e6f2:	4629      	mov	r1, r5
 802e6f4:	42b1      	cmp	r1, r6
 802e6f6:	d334      	bcc.n	802e762 <rshift+0x96>
 802e6f8:	1a9b      	subs	r3, r3, r2
 802e6fa:	009b      	lsls	r3, r3, #2
 802e6fc:	1eea      	subs	r2, r5, #3
 802e6fe:	4296      	cmp	r6, r2
 802e700:	bf38      	it	cc
 802e702:	2300      	movcc	r3, #0
 802e704:	4423      	add	r3, r4
 802e706:	e015      	b.n	802e734 <rshift+0x68>
 802e708:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802e70c:	f1c1 0820 	rsb	r8, r1, #32
 802e710:	40cf      	lsrs	r7, r1
 802e712:	f105 0e04 	add.w	lr, r5, #4
 802e716:	46a1      	mov	r9, r4
 802e718:	4576      	cmp	r6, lr
 802e71a:	46f4      	mov	ip, lr
 802e71c:	d815      	bhi.n	802e74a <rshift+0x7e>
 802e71e:	1a9a      	subs	r2, r3, r2
 802e720:	0092      	lsls	r2, r2, #2
 802e722:	3a04      	subs	r2, #4
 802e724:	3501      	adds	r5, #1
 802e726:	42ae      	cmp	r6, r5
 802e728:	bf38      	it	cc
 802e72a:	2200      	movcc	r2, #0
 802e72c:	18a3      	adds	r3, r4, r2
 802e72e:	50a7      	str	r7, [r4, r2]
 802e730:	b107      	cbz	r7, 802e734 <rshift+0x68>
 802e732:	3304      	adds	r3, #4
 802e734:	1b1a      	subs	r2, r3, r4
 802e736:	42a3      	cmp	r3, r4
 802e738:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802e73c:	bf08      	it	eq
 802e73e:	2300      	moveq	r3, #0
 802e740:	6102      	str	r2, [r0, #16]
 802e742:	bf08      	it	eq
 802e744:	6143      	streq	r3, [r0, #20]
 802e746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e74a:	f8dc c000 	ldr.w	ip, [ip]
 802e74e:	fa0c fc08 	lsl.w	ip, ip, r8
 802e752:	ea4c 0707 	orr.w	r7, ip, r7
 802e756:	f849 7b04 	str.w	r7, [r9], #4
 802e75a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802e75e:	40cf      	lsrs	r7, r1
 802e760:	e7da      	b.n	802e718 <rshift+0x4c>
 802e762:	f851 cb04 	ldr.w	ip, [r1], #4
 802e766:	f847 cf04 	str.w	ip, [r7, #4]!
 802e76a:	e7c3      	b.n	802e6f4 <rshift+0x28>
 802e76c:	4623      	mov	r3, r4
 802e76e:	e7e1      	b.n	802e734 <rshift+0x68>

0802e770 <__hexdig_fun>:
 802e770:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802e774:	2b09      	cmp	r3, #9
 802e776:	d802      	bhi.n	802e77e <__hexdig_fun+0xe>
 802e778:	3820      	subs	r0, #32
 802e77a:	b2c0      	uxtb	r0, r0
 802e77c:	4770      	bx	lr
 802e77e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802e782:	2b05      	cmp	r3, #5
 802e784:	d801      	bhi.n	802e78a <__hexdig_fun+0x1a>
 802e786:	3847      	subs	r0, #71	@ 0x47
 802e788:	e7f7      	b.n	802e77a <__hexdig_fun+0xa>
 802e78a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802e78e:	2b05      	cmp	r3, #5
 802e790:	d801      	bhi.n	802e796 <__hexdig_fun+0x26>
 802e792:	3827      	subs	r0, #39	@ 0x27
 802e794:	e7f1      	b.n	802e77a <__hexdig_fun+0xa>
 802e796:	2000      	movs	r0, #0
 802e798:	4770      	bx	lr
	...

0802e79c <__gethex>:
 802e79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e7a0:	b085      	sub	sp, #20
 802e7a2:	468a      	mov	sl, r1
 802e7a4:	9302      	str	r3, [sp, #8]
 802e7a6:	680b      	ldr	r3, [r1, #0]
 802e7a8:	9001      	str	r0, [sp, #4]
 802e7aa:	4690      	mov	r8, r2
 802e7ac:	1c9c      	adds	r4, r3, #2
 802e7ae:	46a1      	mov	r9, r4
 802e7b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 802e7b4:	2830      	cmp	r0, #48	@ 0x30
 802e7b6:	d0fa      	beq.n	802e7ae <__gethex+0x12>
 802e7b8:	eba9 0303 	sub.w	r3, r9, r3
 802e7bc:	f1a3 0b02 	sub.w	fp, r3, #2
 802e7c0:	f7ff ffd6 	bl	802e770 <__hexdig_fun>
 802e7c4:	4605      	mov	r5, r0
 802e7c6:	2800      	cmp	r0, #0
 802e7c8:	d168      	bne.n	802e89c <__gethex+0x100>
 802e7ca:	49a0      	ldr	r1, [pc, #640]	@ (802ea4c <__gethex+0x2b0>)
 802e7cc:	2201      	movs	r2, #1
 802e7ce:	4648      	mov	r0, r9
 802e7d0:	f7f7 fbf7 	bl	8025fc2 <strncmp>
 802e7d4:	4607      	mov	r7, r0
 802e7d6:	2800      	cmp	r0, #0
 802e7d8:	d167      	bne.n	802e8aa <__gethex+0x10e>
 802e7da:	f899 0001 	ldrb.w	r0, [r9, #1]
 802e7de:	4626      	mov	r6, r4
 802e7e0:	f7ff ffc6 	bl	802e770 <__hexdig_fun>
 802e7e4:	2800      	cmp	r0, #0
 802e7e6:	d062      	beq.n	802e8ae <__gethex+0x112>
 802e7e8:	4623      	mov	r3, r4
 802e7ea:	7818      	ldrb	r0, [r3, #0]
 802e7ec:	2830      	cmp	r0, #48	@ 0x30
 802e7ee:	4699      	mov	r9, r3
 802e7f0:	f103 0301 	add.w	r3, r3, #1
 802e7f4:	d0f9      	beq.n	802e7ea <__gethex+0x4e>
 802e7f6:	f7ff ffbb 	bl	802e770 <__hexdig_fun>
 802e7fa:	fab0 f580 	clz	r5, r0
 802e7fe:	096d      	lsrs	r5, r5, #5
 802e800:	f04f 0b01 	mov.w	fp, #1
 802e804:	464a      	mov	r2, r9
 802e806:	4616      	mov	r6, r2
 802e808:	3201      	adds	r2, #1
 802e80a:	7830      	ldrb	r0, [r6, #0]
 802e80c:	f7ff ffb0 	bl	802e770 <__hexdig_fun>
 802e810:	2800      	cmp	r0, #0
 802e812:	d1f8      	bne.n	802e806 <__gethex+0x6a>
 802e814:	498d      	ldr	r1, [pc, #564]	@ (802ea4c <__gethex+0x2b0>)
 802e816:	2201      	movs	r2, #1
 802e818:	4630      	mov	r0, r6
 802e81a:	f7f7 fbd2 	bl	8025fc2 <strncmp>
 802e81e:	2800      	cmp	r0, #0
 802e820:	d13f      	bne.n	802e8a2 <__gethex+0x106>
 802e822:	b944      	cbnz	r4, 802e836 <__gethex+0x9a>
 802e824:	1c74      	adds	r4, r6, #1
 802e826:	4622      	mov	r2, r4
 802e828:	4616      	mov	r6, r2
 802e82a:	3201      	adds	r2, #1
 802e82c:	7830      	ldrb	r0, [r6, #0]
 802e82e:	f7ff ff9f 	bl	802e770 <__hexdig_fun>
 802e832:	2800      	cmp	r0, #0
 802e834:	d1f8      	bne.n	802e828 <__gethex+0x8c>
 802e836:	1ba4      	subs	r4, r4, r6
 802e838:	00a7      	lsls	r7, r4, #2
 802e83a:	7833      	ldrb	r3, [r6, #0]
 802e83c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802e840:	2b50      	cmp	r3, #80	@ 0x50
 802e842:	d13e      	bne.n	802e8c2 <__gethex+0x126>
 802e844:	7873      	ldrb	r3, [r6, #1]
 802e846:	2b2b      	cmp	r3, #43	@ 0x2b
 802e848:	d033      	beq.n	802e8b2 <__gethex+0x116>
 802e84a:	2b2d      	cmp	r3, #45	@ 0x2d
 802e84c:	d034      	beq.n	802e8b8 <__gethex+0x11c>
 802e84e:	1c71      	adds	r1, r6, #1
 802e850:	2400      	movs	r4, #0
 802e852:	7808      	ldrb	r0, [r1, #0]
 802e854:	f7ff ff8c 	bl	802e770 <__hexdig_fun>
 802e858:	1e43      	subs	r3, r0, #1
 802e85a:	b2db      	uxtb	r3, r3
 802e85c:	2b18      	cmp	r3, #24
 802e85e:	d830      	bhi.n	802e8c2 <__gethex+0x126>
 802e860:	f1a0 0210 	sub.w	r2, r0, #16
 802e864:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802e868:	f7ff ff82 	bl	802e770 <__hexdig_fun>
 802e86c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 802e870:	fa5f fc8c 	uxtb.w	ip, ip
 802e874:	f1bc 0f18 	cmp.w	ip, #24
 802e878:	f04f 030a 	mov.w	r3, #10
 802e87c:	d91e      	bls.n	802e8bc <__gethex+0x120>
 802e87e:	b104      	cbz	r4, 802e882 <__gethex+0xe6>
 802e880:	4252      	negs	r2, r2
 802e882:	4417      	add	r7, r2
 802e884:	f8ca 1000 	str.w	r1, [sl]
 802e888:	b1ed      	cbz	r5, 802e8c6 <__gethex+0x12a>
 802e88a:	f1bb 0f00 	cmp.w	fp, #0
 802e88e:	bf0c      	ite	eq
 802e890:	2506      	moveq	r5, #6
 802e892:	2500      	movne	r5, #0
 802e894:	4628      	mov	r0, r5
 802e896:	b005      	add	sp, #20
 802e898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e89c:	2500      	movs	r5, #0
 802e89e:	462c      	mov	r4, r5
 802e8a0:	e7b0      	b.n	802e804 <__gethex+0x68>
 802e8a2:	2c00      	cmp	r4, #0
 802e8a4:	d1c7      	bne.n	802e836 <__gethex+0x9a>
 802e8a6:	4627      	mov	r7, r4
 802e8a8:	e7c7      	b.n	802e83a <__gethex+0x9e>
 802e8aa:	464e      	mov	r6, r9
 802e8ac:	462f      	mov	r7, r5
 802e8ae:	2501      	movs	r5, #1
 802e8b0:	e7c3      	b.n	802e83a <__gethex+0x9e>
 802e8b2:	2400      	movs	r4, #0
 802e8b4:	1cb1      	adds	r1, r6, #2
 802e8b6:	e7cc      	b.n	802e852 <__gethex+0xb6>
 802e8b8:	2401      	movs	r4, #1
 802e8ba:	e7fb      	b.n	802e8b4 <__gethex+0x118>
 802e8bc:	fb03 0002 	mla	r0, r3, r2, r0
 802e8c0:	e7ce      	b.n	802e860 <__gethex+0xc4>
 802e8c2:	4631      	mov	r1, r6
 802e8c4:	e7de      	b.n	802e884 <__gethex+0xe8>
 802e8c6:	eba6 0309 	sub.w	r3, r6, r9
 802e8ca:	3b01      	subs	r3, #1
 802e8cc:	4629      	mov	r1, r5
 802e8ce:	2b07      	cmp	r3, #7
 802e8d0:	dc0a      	bgt.n	802e8e8 <__gethex+0x14c>
 802e8d2:	9801      	ldr	r0, [sp, #4]
 802e8d4:	f7fd fe74 	bl	802c5c0 <_Balloc>
 802e8d8:	4604      	mov	r4, r0
 802e8da:	b940      	cbnz	r0, 802e8ee <__gethex+0x152>
 802e8dc:	4b5c      	ldr	r3, [pc, #368]	@ (802ea50 <__gethex+0x2b4>)
 802e8de:	4602      	mov	r2, r0
 802e8e0:	21e4      	movs	r1, #228	@ 0xe4
 802e8e2:	485c      	ldr	r0, [pc, #368]	@ (802ea54 <__gethex+0x2b8>)
 802e8e4:	f7f4 fb58 	bl	8022f98 <__assert_func>
 802e8e8:	3101      	adds	r1, #1
 802e8ea:	105b      	asrs	r3, r3, #1
 802e8ec:	e7ef      	b.n	802e8ce <__gethex+0x132>
 802e8ee:	f100 0a14 	add.w	sl, r0, #20
 802e8f2:	2300      	movs	r3, #0
 802e8f4:	4655      	mov	r5, sl
 802e8f6:	469b      	mov	fp, r3
 802e8f8:	45b1      	cmp	r9, r6
 802e8fa:	d337      	bcc.n	802e96c <__gethex+0x1d0>
 802e8fc:	f845 bb04 	str.w	fp, [r5], #4
 802e900:	eba5 050a 	sub.w	r5, r5, sl
 802e904:	10ad      	asrs	r5, r5, #2
 802e906:	6125      	str	r5, [r4, #16]
 802e908:	4658      	mov	r0, fp
 802e90a:	f7fd ff17 	bl	802c73c <__hi0bits>
 802e90e:	016d      	lsls	r5, r5, #5
 802e910:	f8d8 6000 	ldr.w	r6, [r8]
 802e914:	1a2d      	subs	r5, r5, r0
 802e916:	42b5      	cmp	r5, r6
 802e918:	dd54      	ble.n	802e9c4 <__gethex+0x228>
 802e91a:	1bad      	subs	r5, r5, r6
 802e91c:	4629      	mov	r1, r5
 802e91e:	4620      	mov	r0, r4
 802e920:	f7fe fa91 	bl	802ce46 <__any_on>
 802e924:	4681      	mov	r9, r0
 802e926:	b178      	cbz	r0, 802e948 <__gethex+0x1ac>
 802e928:	1e6b      	subs	r3, r5, #1
 802e92a:	1159      	asrs	r1, r3, #5
 802e92c:	f003 021f 	and.w	r2, r3, #31
 802e930:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 802e934:	f04f 0901 	mov.w	r9, #1
 802e938:	fa09 f202 	lsl.w	r2, r9, r2
 802e93c:	420a      	tst	r2, r1
 802e93e:	d003      	beq.n	802e948 <__gethex+0x1ac>
 802e940:	454b      	cmp	r3, r9
 802e942:	dc36      	bgt.n	802e9b2 <__gethex+0x216>
 802e944:	f04f 0902 	mov.w	r9, #2
 802e948:	4629      	mov	r1, r5
 802e94a:	4620      	mov	r0, r4
 802e94c:	f7ff febe 	bl	802e6cc <rshift>
 802e950:	442f      	add	r7, r5
 802e952:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802e956:	42bb      	cmp	r3, r7
 802e958:	da42      	bge.n	802e9e0 <__gethex+0x244>
 802e95a:	9801      	ldr	r0, [sp, #4]
 802e95c:	4621      	mov	r1, r4
 802e95e:	f7fd fe54 	bl	802c60a <_Bfree>
 802e962:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802e964:	2300      	movs	r3, #0
 802e966:	6013      	str	r3, [r2, #0]
 802e968:	25a3      	movs	r5, #163	@ 0xa3
 802e96a:	e793      	b.n	802e894 <__gethex+0xf8>
 802e96c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 802e970:	2a2e      	cmp	r2, #46	@ 0x2e
 802e972:	d012      	beq.n	802e99a <__gethex+0x1fe>
 802e974:	2b20      	cmp	r3, #32
 802e976:	d104      	bne.n	802e982 <__gethex+0x1e6>
 802e978:	f845 bb04 	str.w	fp, [r5], #4
 802e97c:	f04f 0b00 	mov.w	fp, #0
 802e980:	465b      	mov	r3, fp
 802e982:	7830      	ldrb	r0, [r6, #0]
 802e984:	9303      	str	r3, [sp, #12]
 802e986:	f7ff fef3 	bl	802e770 <__hexdig_fun>
 802e98a:	9b03      	ldr	r3, [sp, #12]
 802e98c:	f000 000f 	and.w	r0, r0, #15
 802e990:	4098      	lsls	r0, r3
 802e992:	ea4b 0b00 	orr.w	fp, fp, r0
 802e996:	3304      	adds	r3, #4
 802e998:	e7ae      	b.n	802e8f8 <__gethex+0x15c>
 802e99a:	45b1      	cmp	r9, r6
 802e99c:	d8ea      	bhi.n	802e974 <__gethex+0x1d8>
 802e99e:	492b      	ldr	r1, [pc, #172]	@ (802ea4c <__gethex+0x2b0>)
 802e9a0:	9303      	str	r3, [sp, #12]
 802e9a2:	2201      	movs	r2, #1
 802e9a4:	4630      	mov	r0, r6
 802e9a6:	f7f7 fb0c 	bl	8025fc2 <strncmp>
 802e9aa:	9b03      	ldr	r3, [sp, #12]
 802e9ac:	2800      	cmp	r0, #0
 802e9ae:	d1e1      	bne.n	802e974 <__gethex+0x1d8>
 802e9b0:	e7a2      	b.n	802e8f8 <__gethex+0x15c>
 802e9b2:	1ea9      	subs	r1, r5, #2
 802e9b4:	4620      	mov	r0, r4
 802e9b6:	f7fe fa46 	bl	802ce46 <__any_on>
 802e9ba:	2800      	cmp	r0, #0
 802e9bc:	d0c2      	beq.n	802e944 <__gethex+0x1a8>
 802e9be:	f04f 0903 	mov.w	r9, #3
 802e9c2:	e7c1      	b.n	802e948 <__gethex+0x1ac>
 802e9c4:	da09      	bge.n	802e9da <__gethex+0x23e>
 802e9c6:	1b75      	subs	r5, r6, r5
 802e9c8:	4621      	mov	r1, r4
 802e9ca:	9801      	ldr	r0, [sp, #4]
 802e9cc:	462a      	mov	r2, r5
 802e9ce:	f7fe f801 	bl	802c9d4 <__lshift>
 802e9d2:	1b7f      	subs	r7, r7, r5
 802e9d4:	4604      	mov	r4, r0
 802e9d6:	f100 0a14 	add.w	sl, r0, #20
 802e9da:	f04f 0900 	mov.w	r9, #0
 802e9de:	e7b8      	b.n	802e952 <__gethex+0x1b6>
 802e9e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802e9e4:	42bd      	cmp	r5, r7
 802e9e6:	dd6f      	ble.n	802eac8 <__gethex+0x32c>
 802e9e8:	1bed      	subs	r5, r5, r7
 802e9ea:	42ae      	cmp	r6, r5
 802e9ec:	dc34      	bgt.n	802ea58 <__gethex+0x2bc>
 802e9ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802e9f2:	2b02      	cmp	r3, #2
 802e9f4:	d022      	beq.n	802ea3c <__gethex+0x2a0>
 802e9f6:	2b03      	cmp	r3, #3
 802e9f8:	d024      	beq.n	802ea44 <__gethex+0x2a8>
 802e9fa:	2b01      	cmp	r3, #1
 802e9fc:	d115      	bne.n	802ea2a <__gethex+0x28e>
 802e9fe:	42ae      	cmp	r6, r5
 802ea00:	d113      	bne.n	802ea2a <__gethex+0x28e>
 802ea02:	2e01      	cmp	r6, #1
 802ea04:	d10b      	bne.n	802ea1e <__gethex+0x282>
 802ea06:	9a02      	ldr	r2, [sp, #8]
 802ea08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802ea0c:	6013      	str	r3, [r2, #0]
 802ea0e:	2301      	movs	r3, #1
 802ea10:	6123      	str	r3, [r4, #16]
 802ea12:	f8ca 3000 	str.w	r3, [sl]
 802ea16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ea18:	2562      	movs	r5, #98	@ 0x62
 802ea1a:	601c      	str	r4, [r3, #0]
 802ea1c:	e73a      	b.n	802e894 <__gethex+0xf8>
 802ea1e:	1e71      	subs	r1, r6, #1
 802ea20:	4620      	mov	r0, r4
 802ea22:	f7fe fa10 	bl	802ce46 <__any_on>
 802ea26:	2800      	cmp	r0, #0
 802ea28:	d1ed      	bne.n	802ea06 <__gethex+0x26a>
 802ea2a:	9801      	ldr	r0, [sp, #4]
 802ea2c:	4621      	mov	r1, r4
 802ea2e:	f7fd fdec 	bl	802c60a <_Bfree>
 802ea32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ea34:	2300      	movs	r3, #0
 802ea36:	6013      	str	r3, [r2, #0]
 802ea38:	2550      	movs	r5, #80	@ 0x50
 802ea3a:	e72b      	b.n	802e894 <__gethex+0xf8>
 802ea3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ea3e:	2b00      	cmp	r3, #0
 802ea40:	d1f3      	bne.n	802ea2a <__gethex+0x28e>
 802ea42:	e7e0      	b.n	802ea06 <__gethex+0x26a>
 802ea44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ea46:	2b00      	cmp	r3, #0
 802ea48:	d1dd      	bne.n	802ea06 <__gethex+0x26a>
 802ea4a:	e7ee      	b.n	802ea2a <__gethex+0x28e>
 802ea4c:	080341ca 	.word	0x080341ca
 802ea50:	08034502 	.word	0x08034502
 802ea54:	080347a0 	.word	0x080347a0
 802ea58:	1e6f      	subs	r7, r5, #1
 802ea5a:	f1b9 0f00 	cmp.w	r9, #0
 802ea5e:	d130      	bne.n	802eac2 <__gethex+0x326>
 802ea60:	b127      	cbz	r7, 802ea6c <__gethex+0x2d0>
 802ea62:	4639      	mov	r1, r7
 802ea64:	4620      	mov	r0, r4
 802ea66:	f7fe f9ee 	bl	802ce46 <__any_on>
 802ea6a:	4681      	mov	r9, r0
 802ea6c:	117a      	asrs	r2, r7, #5
 802ea6e:	2301      	movs	r3, #1
 802ea70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802ea74:	f007 071f 	and.w	r7, r7, #31
 802ea78:	40bb      	lsls	r3, r7
 802ea7a:	4213      	tst	r3, r2
 802ea7c:	4629      	mov	r1, r5
 802ea7e:	4620      	mov	r0, r4
 802ea80:	bf18      	it	ne
 802ea82:	f049 0902 	orrne.w	r9, r9, #2
 802ea86:	f7ff fe21 	bl	802e6cc <rshift>
 802ea8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802ea8e:	1b76      	subs	r6, r6, r5
 802ea90:	2502      	movs	r5, #2
 802ea92:	f1b9 0f00 	cmp.w	r9, #0
 802ea96:	d047      	beq.n	802eb28 <__gethex+0x38c>
 802ea98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802ea9c:	2b02      	cmp	r3, #2
 802ea9e:	d015      	beq.n	802eacc <__gethex+0x330>
 802eaa0:	2b03      	cmp	r3, #3
 802eaa2:	d017      	beq.n	802ead4 <__gethex+0x338>
 802eaa4:	2b01      	cmp	r3, #1
 802eaa6:	d109      	bne.n	802eabc <__gethex+0x320>
 802eaa8:	f019 0f02 	tst.w	r9, #2
 802eaac:	d006      	beq.n	802eabc <__gethex+0x320>
 802eaae:	f8da 3000 	ldr.w	r3, [sl]
 802eab2:	ea49 0903 	orr.w	r9, r9, r3
 802eab6:	f019 0f01 	tst.w	r9, #1
 802eaba:	d10e      	bne.n	802eada <__gethex+0x33e>
 802eabc:	f045 0510 	orr.w	r5, r5, #16
 802eac0:	e032      	b.n	802eb28 <__gethex+0x38c>
 802eac2:	f04f 0901 	mov.w	r9, #1
 802eac6:	e7d1      	b.n	802ea6c <__gethex+0x2d0>
 802eac8:	2501      	movs	r5, #1
 802eaca:	e7e2      	b.n	802ea92 <__gethex+0x2f6>
 802eacc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802eace:	f1c3 0301 	rsb	r3, r3, #1
 802ead2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ead4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ead6:	2b00      	cmp	r3, #0
 802ead8:	d0f0      	beq.n	802eabc <__gethex+0x320>
 802eada:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802eade:	f104 0314 	add.w	r3, r4, #20
 802eae2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802eae6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802eaea:	f04f 0c00 	mov.w	ip, #0
 802eaee:	4618      	mov	r0, r3
 802eaf0:	f853 2b04 	ldr.w	r2, [r3], #4
 802eaf4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 802eaf8:	d01b      	beq.n	802eb32 <__gethex+0x396>
 802eafa:	3201      	adds	r2, #1
 802eafc:	6002      	str	r2, [r0, #0]
 802eafe:	2d02      	cmp	r5, #2
 802eb00:	f104 0314 	add.w	r3, r4, #20
 802eb04:	d13c      	bne.n	802eb80 <__gethex+0x3e4>
 802eb06:	f8d8 2000 	ldr.w	r2, [r8]
 802eb0a:	3a01      	subs	r2, #1
 802eb0c:	42b2      	cmp	r2, r6
 802eb0e:	d109      	bne.n	802eb24 <__gethex+0x388>
 802eb10:	1171      	asrs	r1, r6, #5
 802eb12:	2201      	movs	r2, #1
 802eb14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802eb18:	f006 061f 	and.w	r6, r6, #31
 802eb1c:	fa02 f606 	lsl.w	r6, r2, r6
 802eb20:	421e      	tst	r6, r3
 802eb22:	d13a      	bne.n	802eb9a <__gethex+0x3fe>
 802eb24:	f045 0520 	orr.w	r5, r5, #32
 802eb28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802eb2a:	601c      	str	r4, [r3, #0]
 802eb2c:	9b02      	ldr	r3, [sp, #8]
 802eb2e:	601f      	str	r7, [r3, #0]
 802eb30:	e6b0      	b.n	802e894 <__gethex+0xf8>
 802eb32:	4299      	cmp	r1, r3
 802eb34:	f843 cc04 	str.w	ip, [r3, #-4]
 802eb38:	d8d9      	bhi.n	802eaee <__gethex+0x352>
 802eb3a:	68a3      	ldr	r3, [r4, #8]
 802eb3c:	459b      	cmp	fp, r3
 802eb3e:	db17      	blt.n	802eb70 <__gethex+0x3d4>
 802eb40:	6861      	ldr	r1, [r4, #4]
 802eb42:	9801      	ldr	r0, [sp, #4]
 802eb44:	3101      	adds	r1, #1
 802eb46:	f7fd fd3b 	bl	802c5c0 <_Balloc>
 802eb4a:	4681      	mov	r9, r0
 802eb4c:	b918      	cbnz	r0, 802eb56 <__gethex+0x3ba>
 802eb4e:	4b1a      	ldr	r3, [pc, #104]	@ (802ebb8 <__gethex+0x41c>)
 802eb50:	4602      	mov	r2, r0
 802eb52:	2184      	movs	r1, #132	@ 0x84
 802eb54:	e6c5      	b.n	802e8e2 <__gethex+0x146>
 802eb56:	6922      	ldr	r2, [r4, #16]
 802eb58:	3202      	adds	r2, #2
 802eb5a:	f104 010c 	add.w	r1, r4, #12
 802eb5e:	0092      	lsls	r2, r2, #2
 802eb60:	300c      	adds	r0, #12
 802eb62:	f7f8 fc51 	bl	8027408 <memcpy>
 802eb66:	4621      	mov	r1, r4
 802eb68:	9801      	ldr	r0, [sp, #4]
 802eb6a:	f7fd fd4e 	bl	802c60a <_Bfree>
 802eb6e:	464c      	mov	r4, r9
 802eb70:	6923      	ldr	r3, [r4, #16]
 802eb72:	1c5a      	adds	r2, r3, #1
 802eb74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802eb78:	6122      	str	r2, [r4, #16]
 802eb7a:	2201      	movs	r2, #1
 802eb7c:	615a      	str	r2, [r3, #20]
 802eb7e:	e7be      	b.n	802eafe <__gethex+0x362>
 802eb80:	6922      	ldr	r2, [r4, #16]
 802eb82:	455a      	cmp	r2, fp
 802eb84:	dd0b      	ble.n	802eb9e <__gethex+0x402>
 802eb86:	2101      	movs	r1, #1
 802eb88:	4620      	mov	r0, r4
 802eb8a:	f7ff fd9f 	bl	802e6cc <rshift>
 802eb8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802eb92:	3701      	adds	r7, #1
 802eb94:	42bb      	cmp	r3, r7
 802eb96:	f6ff aee0 	blt.w	802e95a <__gethex+0x1be>
 802eb9a:	2501      	movs	r5, #1
 802eb9c:	e7c2      	b.n	802eb24 <__gethex+0x388>
 802eb9e:	f016 061f 	ands.w	r6, r6, #31
 802eba2:	d0fa      	beq.n	802eb9a <__gethex+0x3fe>
 802eba4:	4453      	add	r3, sl
 802eba6:	f1c6 0620 	rsb	r6, r6, #32
 802ebaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802ebae:	f7fd fdc5 	bl	802c73c <__hi0bits>
 802ebb2:	42b0      	cmp	r0, r6
 802ebb4:	dbe7      	blt.n	802eb86 <__gethex+0x3ea>
 802ebb6:	e7f0      	b.n	802eb9a <__gethex+0x3fe>
 802ebb8:	08034502 	.word	0x08034502

0802ebbc <L_shift>:
 802ebbc:	f1c2 0208 	rsb	r2, r2, #8
 802ebc0:	0092      	lsls	r2, r2, #2
 802ebc2:	b570      	push	{r4, r5, r6, lr}
 802ebc4:	f1c2 0620 	rsb	r6, r2, #32
 802ebc8:	6843      	ldr	r3, [r0, #4]
 802ebca:	6804      	ldr	r4, [r0, #0]
 802ebcc:	fa03 f506 	lsl.w	r5, r3, r6
 802ebd0:	432c      	orrs	r4, r5
 802ebd2:	40d3      	lsrs	r3, r2
 802ebd4:	6004      	str	r4, [r0, #0]
 802ebd6:	f840 3f04 	str.w	r3, [r0, #4]!
 802ebda:	4288      	cmp	r0, r1
 802ebdc:	d3f4      	bcc.n	802ebc8 <L_shift+0xc>
 802ebde:	bd70      	pop	{r4, r5, r6, pc}

0802ebe0 <__match>:
 802ebe0:	b530      	push	{r4, r5, lr}
 802ebe2:	6803      	ldr	r3, [r0, #0]
 802ebe4:	3301      	adds	r3, #1
 802ebe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ebea:	b914      	cbnz	r4, 802ebf2 <__match+0x12>
 802ebec:	6003      	str	r3, [r0, #0]
 802ebee:	2001      	movs	r0, #1
 802ebf0:	bd30      	pop	{r4, r5, pc}
 802ebf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ebf6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802ebfa:	2d19      	cmp	r5, #25
 802ebfc:	bf98      	it	ls
 802ebfe:	3220      	addls	r2, #32
 802ec00:	42a2      	cmp	r2, r4
 802ec02:	d0f0      	beq.n	802ebe6 <__match+0x6>
 802ec04:	2000      	movs	r0, #0
 802ec06:	e7f3      	b.n	802ebf0 <__match+0x10>

0802ec08 <__hexnan>:
 802ec08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ec0c:	680b      	ldr	r3, [r1, #0]
 802ec0e:	6801      	ldr	r1, [r0, #0]
 802ec10:	115e      	asrs	r6, r3, #5
 802ec12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802ec16:	f013 031f 	ands.w	r3, r3, #31
 802ec1a:	b087      	sub	sp, #28
 802ec1c:	bf18      	it	ne
 802ec1e:	3604      	addne	r6, #4
 802ec20:	2500      	movs	r5, #0
 802ec22:	1f37      	subs	r7, r6, #4
 802ec24:	4682      	mov	sl, r0
 802ec26:	4690      	mov	r8, r2
 802ec28:	9301      	str	r3, [sp, #4]
 802ec2a:	f846 5c04 	str.w	r5, [r6, #-4]
 802ec2e:	46b9      	mov	r9, r7
 802ec30:	463c      	mov	r4, r7
 802ec32:	9502      	str	r5, [sp, #8]
 802ec34:	46ab      	mov	fp, r5
 802ec36:	784a      	ldrb	r2, [r1, #1]
 802ec38:	1c4b      	adds	r3, r1, #1
 802ec3a:	9303      	str	r3, [sp, #12]
 802ec3c:	b342      	cbz	r2, 802ec90 <__hexnan+0x88>
 802ec3e:	4610      	mov	r0, r2
 802ec40:	9105      	str	r1, [sp, #20]
 802ec42:	9204      	str	r2, [sp, #16]
 802ec44:	f7ff fd94 	bl	802e770 <__hexdig_fun>
 802ec48:	2800      	cmp	r0, #0
 802ec4a:	d151      	bne.n	802ecf0 <__hexnan+0xe8>
 802ec4c:	9a04      	ldr	r2, [sp, #16]
 802ec4e:	9905      	ldr	r1, [sp, #20]
 802ec50:	2a20      	cmp	r2, #32
 802ec52:	d818      	bhi.n	802ec86 <__hexnan+0x7e>
 802ec54:	9b02      	ldr	r3, [sp, #8]
 802ec56:	459b      	cmp	fp, r3
 802ec58:	dd13      	ble.n	802ec82 <__hexnan+0x7a>
 802ec5a:	454c      	cmp	r4, r9
 802ec5c:	d206      	bcs.n	802ec6c <__hexnan+0x64>
 802ec5e:	2d07      	cmp	r5, #7
 802ec60:	dc04      	bgt.n	802ec6c <__hexnan+0x64>
 802ec62:	462a      	mov	r2, r5
 802ec64:	4649      	mov	r1, r9
 802ec66:	4620      	mov	r0, r4
 802ec68:	f7ff ffa8 	bl	802ebbc <L_shift>
 802ec6c:	4544      	cmp	r4, r8
 802ec6e:	d952      	bls.n	802ed16 <__hexnan+0x10e>
 802ec70:	2300      	movs	r3, #0
 802ec72:	f1a4 0904 	sub.w	r9, r4, #4
 802ec76:	f844 3c04 	str.w	r3, [r4, #-4]
 802ec7a:	f8cd b008 	str.w	fp, [sp, #8]
 802ec7e:	464c      	mov	r4, r9
 802ec80:	461d      	mov	r5, r3
 802ec82:	9903      	ldr	r1, [sp, #12]
 802ec84:	e7d7      	b.n	802ec36 <__hexnan+0x2e>
 802ec86:	2a29      	cmp	r2, #41	@ 0x29
 802ec88:	d157      	bne.n	802ed3a <__hexnan+0x132>
 802ec8a:	3102      	adds	r1, #2
 802ec8c:	f8ca 1000 	str.w	r1, [sl]
 802ec90:	f1bb 0f00 	cmp.w	fp, #0
 802ec94:	d051      	beq.n	802ed3a <__hexnan+0x132>
 802ec96:	454c      	cmp	r4, r9
 802ec98:	d206      	bcs.n	802eca8 <__hexnan+0xa0>
 802ec9a:	2d07      	cmp	r5, #7
 802ec9c:	dc04      	bgt.n	802eca8 <__hexnan+0xa0>
 802ec9e:	462a      	mov	r2, r5
 802eca0:	4649      	mov	r1, r9
 802eca2:	4620      	mov	r0, r4
 802eca4:	f7ff ff8a 	bl	802ebbc <L_shift>
 802eca8:	4544      	cmp	r4, r8
 802ecaa:	d936      	bls.n	802ed1a <__hexnan+0x112>
 802ecac:	f1a8 0204 	sub.w	r2, r8, #4
 802ecb0:	4623      	mov	r3, r4
 802ecb2:	f853 1b04 	ldr.w	r1, [r3], #4
 802ecb6:	f842 1f04 	str.w	r1, [r2, #4]!
 802ecba:	429f      	cmp	r7, r3
 802ecbc:	d2f9      	bcs.n	802ecb2 <__hexnan+0xaa>
 802ecbe:	1b3b      	subs	r3, r7, r4
 802ecc0:	f023 0303 	bic.w	r3, r3, #3
 802ecc4:	3304      	adds	r3, #4
 802ecc6:	3401      	adds	r4, #1
 802ecc8:	3e03      	subs	r6, #3
 802ecca:	42b4      	cmp	r4, r6
 802eccc:	bf88      	it	hi
 802ecce:	2304      	movhi	r3, #4
 802ecd0:	4443      	add	r3, r8
 802ecd2:	2200      	movs	r2, #0
 802ecd4:	f843 2b04 	str.w	r2, [r3], #4
 802ecd8:	429f      	cmp	r7, r3
 802ecda:	d2fb      	bcs.n	802ecd4 <__hexnan+0xcc>
 802ecdc:	683b      	ldr	r3, [r7, #0]
 802ecde:	b91b      	cbnz	r3, 802ece8 <__hexnan+0xe0>
 802ece0:	4547      	cmp	r7, r8
 802ece2:	d128      	bne.n	802ed36 <__hexnan+0x12e>
 802ece4:	2301      	movs	r3, #1
 802ece6:	603b      	str	r3, [r7, #0]
 802ece8:	2005      	movs	r0, #5
 802ecea:	b007      	add	sp, #28
 802ecec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ecf0:	3501      	adds	r5, #1
 802ecf2:	2d08      	cmp	r5, #8
 802ecf4:	f10b 0b01 	add.w	fp, fp, #1
 802ecf8:	dd06      	ble.n	802ed08 <__hexnan+0x100>
 802ecfa:	4544      	cmp	r4, r8
 802ecfc:	d9c1      	bls.n	802ec82 <__hexnan+0x7a>
 802ecfe:	2300      	movs	r3, #0
 802ed00:	f844 3c04 	str.w	r3, [r4, #-4]
 802ed04:	2501      	movs	r5, #1
 802ed06:	3c04      	subs	r4, #4
 802ed08:	6822      	ldr	r2, [r4, #0]
 802ed0a:	f000 000f 	and.w	r0, r0, #15
 802ed0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802ed12:	6020      	str	r0, [r4, #0]
 802ed14:	e7b5      	b.n	802ec82 <__hexnan+0x7a>
 802ed16:	2508      	movs	r5, #8
 802ed18:	e7b3      	b.n	802ec82 <__hexnan+0x7a>
 802ed1a:	9b01      	ldr	r3, [sp, #4]
 802ed1c:	2b00      	cmp	r3, #0
 802ed1e:	d0dd      	beq.n	802ecdc <__hexnan+0xd4>
 802ed20:	f1c3 0320 	rsb	r3, r3, #32
 802ed24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802ed28:	40da      	lsrs	r2, r3
 802ed2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802ed2e:	4013      	ands	r3, r2
 802ed30:	f846 3c04 	str.w	r3, [r6, #-4]
 802ed34:	e7d2      	b.n	802ecdc <__hexnan+0xd4>
 802ed36:	3f04      	subs	r7, #4
 802ed38:	e7d0      	b.n	802ecdc <__hexnan+0xd4>
 802ed3a:	2004      	movs	r0, #4
 802ed3c:	e7d5      	b.n	802ecea <__hexnan+0xe2>
	...

0802ed40 <_init>:
 802ed40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ed42:	bf00      	nop
 802ed44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ed46:	bc08      	pop	{r3}
 802ed48:	469e      	mov	lr, r3
 802ed4a:	4770      	bx	lr

0802ed4c <_fini>:
 802ed4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ed4e:	bf00      	nop
 802ed50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ed52:	bc08      	pop	{r3}
 802ed54:	469e      	mov	lr, r3
 802ed56:	4770      	bx	lr
