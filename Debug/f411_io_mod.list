
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024b74  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000061b0  08034d18  08034d18  00025d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803aec8  0803aec8  0002c7e8  2**0
                  CONTENTS
  4 .ARM          00000008  0803aec8  0803aec8  0002bec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803aed0  0803aed0  0002c7e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803aed0  0803aed0  0002bed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803aed8  0803aed8  0002bed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000007e8  20000000  0803aedc  0002c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018940  200007e8  0803b6c4  0002c7e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20019128  0803b6c4  0002d128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002c7e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000568cd  00000000  00000000  0002c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e92  00000000  00000000  000830e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00026b21  00000000  00000000  00089f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002da8  00000000  00000000  000b0a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002e54  00000000  00000000  000b3840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f892  00000000  00000000  000b6694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004326a  00000000  00000000  000d5f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8a3e  00000000  00000000  00119190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c1bce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b91c  00000000  00000000  001c1c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001cd530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200007e8 	.word	0x200007e8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08034cfc 	.word	0x08034cfc

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200007ec 	.word	0x200007ec
 80101dc:	08034cfc 	.word	0x08034cfc

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 80110dc:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80110de:	2200      	movs	r2, #0
 80110e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110e4:	4801      	ldr	r0, [pc, #4]	@ (80110ec <EthBegin+0x10>)
 80110e6:	f004 fbb6 	bl	8015856 <HAL_GPIO_WritePin>
}
 80110ea:	bd08      	pop	{r3, pc}
 80110ec:	40020400 	.word	0x40020400

080110f0 <EthEnd>:

void EthEnd(void * param){
 80110f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80110f2:	2201      	movs	r2, #1
 80110f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110f8:	4801      	ldr	r0, [pc, #4]	@ (8011100 <EthEnd+0x10>)
 80110fa:	f004 fbac 	bl	8015856 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80110fe:	bd08      	pop	{r3, pc}
 8011100:	40020400 	.word	0x40020400

08011104 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 8011104:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011106:	2200      	movs	r2, #0
 8011108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801110c:	4801      	ldr	r0, [pc, #4]	@ (8011114 <FlashBegin+0x10>)
 801110e:	f004 fba2 	bl	8015856 <HAL_GPIO_WritePin>
}
 8011112:	bd08      	pop	{r3, pc}
 8011114:	40020000 	.word	0x40020000

08011118 <FlashEnd>:

void FlashEnd(void){
 8011118:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 801111a:	2201      	movs	r2, #1
 801111c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011120:	4801      	ldr	r0, [pc, #4]	@ (8011128 <FlashEnd+0x10>)
 8011122:	f004 fb98 	bl	8015856 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 8011126:	bd08      	pop	{r3, pc}
 8011128:	40020000 	.word	0x40020000

0801112c <StartIOTask>:
{
 801112c:	b510      	push	{r4, lr}
 801112e:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 8011130:	4b48      	ldr	r3, [pc, #288]	@ (8011254 <StartIOTask+0x128>)
 8011132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011136:	900c      	str	r0, [sp, #48]	@ 0x30
 8011138:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 801113c:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8011140:	f103 0408 	add.w	r4, r3, #8
 8011144:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011148:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 801114c:	3314      	adds	r3, #20
 801114e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011152:	9007      	str	r0, [sp, #28]
 8011154:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8011158:	ab04      	add	r3, sp, #16
 801115a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801115e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011162:	e06f      	b.n	8011244 <StartIOTask+0x118>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011164:	2300      	movs	r3, #0
 8011166:	461a      	mov	r2, r3
 8011168:	a901      	add	r1, sp, #4
 801116a:	483b      	ldr	r0, [pc, #236]	@ (8011258 <StartIOTask+0x12c>)
 801116c:	6800      	ldr	r0, [r0, #0]
 801116e:	f006 fbec 	bl	801794a <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011172:	2400      	movs	r4, #0
 8011174:	e00e      	b.n	8011194 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011176:	2200      	movs	r2, #0
 8011178:	ab0e      	add	r3, sp, #56	@ 0x38
 801117a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801117e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011182:	ab0e      	add	r3, sp, #56	@ 0x38
 8011184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011188:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801118c:	f004 fb63 	bl	8015856 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011190:	3401      	adds	r4, #1
 8011192:	b2e4      	uxtb	r4, r4
 8011194:	2c02      	cmp	r4, #2
 8011196:	d85b      	bhi.n	8011250 <StartIOTask+0x124>
		     if (pinOutputs_w[i]) {
 8011198:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801119c:	446b      	add	r3, sp
 801119e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0e7      	beq.n	8011176 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 80111a6:	2201      	movs	r2, #1
 80111a8:	ab0e      	add	r3, sp, #56	@ 0x38
 80111aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80111ae:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 80111b2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111b8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111bc:	f004 fb4b 	bl	8015856 <HAL_GPIO_WritePin>
 80111c0:	e7e6      	b.n	8011190 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80111c2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111c4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80111c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111cc:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 80111d0:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111d4:	f004 fb38 	bl	8015848 <HAL_GPIO_ReadPin>
 80111d8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80111dc:	446b      	add	r3, sp
 80111de:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80111e2:	3401      	adds	r4, #1
 80111e4:	b2e4      	uxtb	r4, r4
 80111e6:	2c02      	cmp	r4, #2
 80111e8:	d9eb      	bls.n	80111c2 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 80111ea:	4c1c      	ldr	r4, [pc, #112]	@ (801125c <StartIOTask+0x130>)
 80111ec:	6820      	ldr	r0, [r4, #0]
 80111ee:	f006 fbfa 	bl	80179e6 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 80111f2:	2300      	movs	r3, #0
 80111f4:	461a      	mov	r2, r3
 80111f6:	a902      	add	r1, sp, #8
 80111f8:	6820      	ldr	r0, [r4, #0]
 80111fa:	f006 fb64 	bl	80178c6 <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 80111fe:	2400      	movs	r4, #0
 8011200:	e011      	b.n	8011226 <StartIOTask+0xfa>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 8011202:	ab0e      	add	r3, sp, #56	@ 0x38
 8011204:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011208:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801120c:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 8011210:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8011214:	f004 fb18 	bl	8015848 <HAL_GPIO_ReadPin>
 8011218:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801121c:	446b      	add	r3, sp
 801121e:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011222:	3401      	adds	r4, #1
 8011224:	b2e4      	uxtb	r4, r4
 8011226:	2c02      	cmp	r4, #2
 8011228:	d9eb      	bls.n	8011202 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 801122a:	4c0d      	ldr	r4, [pc, #52]	@ (8011260 <StartIOTask+0x134>)
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	f006 fbda 	bl	80179e6 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 8011232:	2300      	movs	r3, #0
 8011234:	461a      	mov	r2, r3
 8011236:	a903      	add	r1, sp, #12
 8011238:	6820      	ldr	r0, [r4, #0]
 801123a:	f006 fb44 	bl	80178c6 <osMessageQueuePut>
    osDelay(1);
 801123e:	2001      	movs	r0, #1
 8011240:	f006 fa49 	bl	80176d6 <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8011244:	4b04      	ldr	r3, [pc, #16]	@ (8011258 <StartIOTask+0x12c>)
 8011246:	6818      	ldr	r0, [r3, #0]
 8011248:	f006 fbc0 	bl	80179cc <osMessageQueueGetCount>
 801124c:	2800      	cmp	r0, #0
 801124e:	d189      	bne.n	8011164 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011250:	2400      	movs	r4, #0
 8011252:	e7c8      	b.n	80111e6 <StartIOTask+0xba>
 8011254:	08034d18 	.word	0x08034d18
 8011258:	20000814 	.word	0x20000814
 801125c:	20000818 	.word	0x20000818
 8011260:	2000081c 	.word	0x2000081c

08011264 <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 8011264:	b084      	sub	sp, #16
 8011266:	b508      	push	{r3, lr}
 8011268:	f10d 0c08 	add.w	ip, sp, #8
 801126c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011270:	2300      	movs	r3, #0
 8011272:	461a      	mov	r2, r3
 8011274:	4661      	mov	r1, ip
 8011276:	4804      	ldr	r0, [pc, #16]	@ (8011288 <add_log_mess_to_q+0x24>)
 8011278:	6800      	ldr	r0, [r0, #0]
 801127a:	f006 fb24 	bl	80178c6 <osMessageQueuePut>

}
 801127e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011282:	b004      	add	sp, #16
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	2000080c 	.word	0x2000080c

0801128c <StartDisplayTask>:
{
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	b08a      	sub	sp, #40	@ 0x28
	osDelay(1000);//
 8011290:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011294:	f006 fa1f 	bl	80176d6 <osDelay>
	SSD1306_Init (); // initialise the display
 8011298:	f006 f8b6 	bl	8017408 <SSD1306_Init>
	osDelay(100);//
 801129c:	2064      	movs	r0, #100	@ 0x64
 801129e:	f006 fa1a 	bl	80176d6 <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80112a2:	2100      	movs	r1, #0
 80112a4:	2001      	movs	r0, #1
 80112a6:	f006 f813 	bl	80172d0 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80112aa:	2000      	movs	r0, #0
 80112ac:	f005 ffd4 	bl	8017258 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112b0:	4c48      	ldr	r4, [pc, #288]	@ (80113d4 <StartDisplayTask+0x148>)
 80112b2:	2201      	movs	r2, #1
 80112b4:	4621      	mov	r1, r4
 80112b6:	4848      	ldr	r0, [pc, #288]	@ (80113d8 <StartDisplayTask+0x14c>)
 80112b8:	f006 f85e 	bl	8017378 <SSD1306_Puts>
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112bc:	2201      	movs	r2, #1
 80112be:	4621      	mov	r1, r4
 80112c0:	4846      	ldr	r0, [pc, #280]	@ (80113dc <StartDisplayTask+0x150>)
 80112c2:	f006 f859 	bl	8017378 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112c6:	210b      	movs	r1, #11
 80112c8:	2001      	movs	r0, #1
 80112ca:	f006 f801 	bl	80172d0 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112ce:	2201      	movs	r2, #1
 80112d0:	4621      	mov	r1, r4
 80112d2:	4843      	ldr	r0, [pc, #268]	@ (80113e0 <StartDisplayTask+0x154>)
 80112d4:	f006 f850 	bl	8017378 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112d8:	2116      	movs	r1, #22
 80112da:	2001      	movs	r0, #1
 80112dc:	f005 fff8 	bl	80172d0 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112e0:	2201      	movs	r2, #1
 80112e2:	4621      	mov	r1, r4
 80112e4:	483f      	ldr	r0, [pc, #252]	@ (80113e4 <StartDisplayTask+0x158>)
 80112e6:	f006 f847 	bl	8017378 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80112ea:	2121      	movs	r1, #33	@ 0x21
 80112ec:	2001      	movs	r0, #1
 80112ee:	f005 ffef 	bl	80172d0 <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 80112f2:	4b3d      	ldr	r3, [pc, #244]	@ (80113e8 <StartDisplayTask+0x15c>)
 80112f4:	6859      	ldr	r1, [r3, #4]
 80112f6:	780a      	ldrb	r2, [r1, #0]
 80112f8:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 80112fa:	7888      	ldrb	r0, [r1, #2]
 80112fc:	78cd      	ldrb	r5, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 80112fe:	790e      	ldrb	r6, [r1, #4]
 8011300:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011302:	9103      	str	r1, [sp, #12]
 8011304:	9602      	str	r6, [sp, #8]
 8011306:	9501      	str	r5, [sp, #4]
 8011308:	9000      	str	r0, [sp, #0]
 801130a:	4938      	ldr	r1, [pc, #224]	@ (80113ec <StartDisplayTask+0x160>)
 801130c:	a805      	add	r0, sp, #20
 801130e:	f019 ffb5 	bl	802b27c <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011312:	2201      	movs	r2, #1
 8011314:	4621      	mov	r1, r4
 8011316:	a805      	add	r0, sp, #20
 8011318:	f006 f82e 	bl	8017378 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 801131c:	f006 f91e 	bl	801755c <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 8011320:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011324:	f007 fd42 	bl	8018dac <vTaskDelay>
    int i=0;
 8011328:	2500      	movs	r5, #0
 801132a:	e003      	b.n	8011334 <StartDisplayTask+0xa8>
		osDelay(1000);
 801132c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011330:	f006 f9d1 	bl	80176d6 <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 8011334:	2100      	movs	r1, #0
 8011336:	2001      	movs	r0, #1
 8011338:	f005 ffca 	bl	80172d0 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 801133c:	2000      	movs	r0, #0
 801133e:	f005 ff8b 	bl	8017258 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011342:	4c24      	ldr	r4, [pc, #144]	@ (80113d4 <StartDisplayTask+0x148>)
 8011344:	2201      	movs	r2, #1
 8011346:	4621      	mov	r1, r4
 8011348:	4829      	ldr	r0, [pc, #164]	@ (80113f0 <StartDisplayTask+0x164>)
 801134a:	f006 f815 	bl	8017378 <SSD1306_Puts>
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 801134e:	4b26      	ldr	r3, [pc, #152]	@ (80113e8 <StartDisplayTask+0x15c>)
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011354:	0e13      	lsrs	r3, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 8011356:	9301      	str	r3, [sp, #4]
 8011358:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	4923      	ldr	r1, [pc, #140]	@ (80113f4 <StartDisplayTask+0x168>)
 8011366:	a805      	add	r0, sp, #20
 8011368:	f019 ff88 	bl	802b27c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801136c:	2201      	movs	r2, #1
 801136e:	4621      	mov	r1, r4
 8011370:	a805      	add	r0, sp, #20
 8011372:	f006 f801 	bl	8017378 <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 8011376:	210a      	movs	r1, #10
 8011378:	2001      	movs	r0, #1
 801137a:	f005 ffa9 	bl	80172d0 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 801137e:	2201      	movs	r2, #1
 8011380:	4621      	mov	r1, r4
 8011382:	481d      	ldr	r0, [pc, #116]	@ (80113f8 <StartDisplayTask+0x16c>)
 8011384:	f005 fff8 	bl	8017378 <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 8011388:	3501      	adds	r5, #1
 801138a:	462a      	mov	r2, r5
 801138c:	491b      	ldr	r1, [pc, #108]	@ (80113fc <StartDisplayTask+0x170>)
 801138e:	a805      	add	r0, sp, #20
 8011390:	f019 ff74 	bl	802b27c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011394:	2201      	movs	r2, #1
 8011396:	4621      	mov	r1, r4
 8011398:	a805      	add	r0, sp, #20
 801139a:	f005 ffed 	bl	8017378 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801139e:	f006 f8dd 	bl	801755c <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 80113a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113a6:	2201      	movs	r2, #1
 80113a8:	2178      	movs	r1, #120	@ 0x78
 80113aa:	4815      	ldr	r0, [pc, #84]	@ (8011400 <StartDisplayTask+0x174>)
 80113ac:	f004 fd9e 	bl	8015eec <HAL_I2C_IsDeviceReady>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d0bb      	beq.n	801132c <StartDisplayTask+0xa0>
			HAL_I2C_DeInit(&hi2c1);
 80113b4:	4812      	ldr	r0, [pc, #72]	@ (8011400 <StartDisplayTask+0x174>)
 80113b6:	f004 fcc3 	bl	8015d40 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 80113ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113be:	f007 fcf5 	bl	8018dac <vTaskDelay>
			MX_I2C1_Init();
 80113c2:	f000 fc5d 	bl	8011c80 <MX_I2C1_Init>
			vTaskDelay(1000);
 80113c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113ca:	f007 fcef 	bl	8018dac <vTaskDelay>
			SSD1306_Init ();
 80113ce:	f006 f81b 	bl	8017408 <SSD1306_Init>
 80113d2:	e7e6      	b.n	80113a2 <StartDisplayTask+0x116>
 80113d4:	20000088 	.word	0x20000088
 80113d8:	08034f94 	.word	0x08034f94
 80113dc:	08034fa0 	.word	0x08034fa0
 80113e0:	08034fac 	.word	0x08034fac
 80113e4:	08034fb8 	.word	0x08034fb8
 80113e8:	20000834 	.word	0x20000834
 80113ec:	08034fc0 	.word	0x08034fc0
 80113f0:	08034fe0 	.word	0x08034fe0
 80113f4:	08034fe4 	.word	0x08034fe4
 80113f8:	08034ff4 	.word	0x08034ff4
 80113fc:	08039f60 	.word	0x08039f60
 8011400:	2000083c 	.word	0x2000083c

08011404 <StartSettingsTask>:
{
 8011404:	b570      	push	{r4, r5, r6, lr}
 8011406:	b0ba      	sub	sp, #232	@ 0xe8
	size_t  f_size = 0;
 8011408:	2300      	movs	r3, #0
 801140a:	9339      	str	r3, [sp, #228]	@ 0xe4
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 801140c:	4b79      	ldr	r3, [pc, #484]	@ (80115f4 <StartSettingsTask+0x1f0>)
 801140e:	4a7a      	ldr	r2, [pc, #488]	@ (80115f8 <StartSettingsTask+0x1f4>)
 8011410:	497a      	ldr	r1, [pc, #488]	@ (80115fc <StartSettingsTask+0x1f8>)
 8011412:	487b      	ldr	r0, [pc, #492]	@ (8011600 <StartSettingsTask+0x1fc>)
 8011414:	f003 fdb2 	bl	8014f7c <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 8011418:	497a      	ldr	r1, [pc, #488]	@ (8011604 <StartSettingsTask+0x200>)
 801141a:	487b      	ldr	r0, [pc, #492]	@ (8011608 <StartSettingsTask+0x204>)
 801141c:	f008 fd96 	bl	8019f4c <lfs_fs_ll_init>
 8011420:	2800      	cmp	r0, #0
 8011422:	db3b      	blt.n	801149c <StartSettingsTask+0x98>
  mg_fs_lfs_mkdir("/web");
 8011424:	4879      	ldr	r0, [pc, #484]	@ (801160c <StartSettingsTask+0x208>)
 8011426:	f008 fd7f 	bl	8019f28 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 801142a:	4c79      	ldr	r4, [pc, #484]	@ (8011610 <StartSettingsTask+0x20c>)
 801142c:	4620      	mov	r0, r4
 801142e:	f008 fd6f 	bl	8019f10 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 8011432:	4878      	ldr	r0, [pc, #480]	@ (8011614 <StartSettingsTask+0x210>)
 8011434:	f008 fd6c 	bl	8019f10 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011438:	4620      	mov	r0, r4
 801143a:	f008 fd75 	bl	8019f28 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 801143e:	4876      	ldr	r0, [pc, #472]	@ (8011618 <StartSettingsTask+0x214>)
 8011440:	f008 fd72 	bl	8019f28 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 8011444:	4875      	ldr	r0, [pc, #468]	@ (801161c <StartSettingsTask+0x218>)
 8011446:	f008 fd6f 	bl	8019f28 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 801144a:	4875      	ldr	r0, [pc, #468]	@ (8011620 <StartSettingsTask+0x21c>)
 801144c:	f008 fd6c 	bl	8019f28 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/auth");
 8011450:	4874      	ldr	r0, [pc, #464]	@ (8011624 <StartSettingsTask+0x220>)
 8011452:	f008 fd69 	bl	8019f28 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 8011456:	2200      	movs	r2, #0
 8011458:	a939      	add	r1, sp, #228	@ 0xe4
 801145a:	4873      	ldr	r0, [pc, #460]	@ (8011628 <StartSettingsTask+0x224>)
 801145c:	f008 fcac 	bl	8019db8 <mg_fs_lfs_status>
 8011460:	b1f8      	cbz	r0, 80114a2 <StartSettingsTask+0x9e>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 8011462:	2101      	movs	r1, #1
 8011464:	4870      	ldr	r0, [pc, #448]	@ (8011628 <StartSettingsTask+0x224>)
 8011466:	f008 fce5 	bl	8019e34 <mg_fs_lfs_open>
 801146a:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801146c:	22c6      	movs	r2, #198	@ 0xc6
 801146e:	a907      	add	r1, sp, #28
 8011470:	f008 fd10 	bl	8019e94 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 8011474:	4620      	mov	r0, r4
 8011476:	f008 fd01 	bl	8019e7c <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 801147a:	2200      	movs	r2, #0
 801147c:	f88d 201c 	strb.w	r2, [sp, #28]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011480:	2302      	movs	r3, #2
 8011482:	a907      	add	r1, sp, #28
 8011484:	4869      	ldr	r0, [pc, #420]	@ (801162c <StartSettingsTask+0x228>)
 8011486:	6800      	ldr	r0, [r0, #0]
 8011488:	f006 fc84 	bl	8017d94 <xQueueGenericSend>
  if (mg_fs_lfs_status(WEB_USERS_FILE, &f_size, NULL) == 0){//file not found
 801148c:	2200      	movs	r2, #0
 801148e:	a939      	add	r1, sp, #228	@ 0xe4
 8011490:	4867      	ldr	r0, [pc, #412]	@ (8011630 <StartSettingsTask+0x22c>)
 8011492:	f008 fc91 	bl	8019db8 <mg_fs_lfs_status>
 8011496:	b188      	cbz	r0, 80114bc <StartSettingsTask+0xb8>
{
 8011498:	2400      	movs	r4, #0
 801149a:	e082      	b.n	80115a2 <StartSettingsTask+0x19e>
	  HAL_NVIC_SystemReset(); //TODO fo Release uncomment
 801149c:	f004 f864 	bl	8015568 <HAL_NVIC_SystemReset>
 80114a0:	e7c0      	b.n	8011424 <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 80114a2:	22c6      	movs	r2, #198	@ 0xc6
 80114a4:	2100      	movs	r1, #0
 80114a6:	a807      	add	r0, sp, #28
 80114a8:	f01a faaa 	bl	802ba00 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80114ac:	2302      	movs	r3, #2
 80114ae:	2200      	movs	r2, #0
 80114b0:	a907      	add	r1, sp, #28
 80114b2:	485e      	ldr	r0, [pc, #376]	@ (801162c <StartSettingsTask+0x228>)
 80114b4:	6800      	ldr	r0, [r0, #0]
 80114b6:	f006 fc6d 	bl	8017d94 <xQueueGenericSend>
 80114ba:	e7e7      	b.n	801148c <StartSettingsTask+0x88>
	  web_users = (users_list_t *)malloc(user_list_size * sizeof(users_list_t));
 80114bc:	f240 609a 	movw	r0, #1690	@ 0x69a
 80114c0:	f008 fb12 	bl	8019ae8 <pvPortMalloc>
	  if (web_users == NULL) {
 80114c4:	4604      	mov	r4, r0
 80114c6:	b390      	cbz	r0, 801152e <StartSettingsTask+0x12a>
		  logging(L_INFO, "Initialize default login pass for web (admin:admin)'");
 80114c8:	495a      	ldr	r1, [pc, #360]	@ (8011634 <StartSettingsTask+0x230>)
 80114ca:	2001      	movs	r0, #1
 80114cc:	f000 fc6c 	bl	8011da8 <logging>
		  strcpy(web_users[0].user, WEB_ADMIN_DEFAULT);
 80114d0:	4b59      	ldr	r3, [pc, #356]	@ (8011638 <StartSettingsTask+0x234>)
 80114d2:	6818      	ldr	r0, [r3, #0]
 80114d4:	6020      	str	r0, [r4, #0]
 80114d6:	889b      	ldrh	r3, [r3, #4]
 80114d8:	80a3      	strh	r3, [r4, #4]
		  unsigned char pass_digest[] = WEB_ADMIN_PASS_DIGEST;
 80114da:	ad01      	add	r5, sp, #4
 80114dc:	4e57      	ldr	r6, [pc, #348]	@ (801163c <StartSettingsTask+0x238>)
 80114de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80114e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80114e6:	f845 0b04 	str.w	r0, [r5], #4
 80114ea:	7029      	strb	r1, [r5, #0]
		  memcpy(web_users[0].pass_digest, pass_digest, sizeof(pass_digest));
 80114ec:	ad01      	add	r5, sp, #4
 80114ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114f0:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 80114f4:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 80114f8:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 80114fc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8011500:	6828      	ldr	r0, [r5, #0]
 8011502:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
 8011506:	792b      	ldrb	r3, [r5, #4]
 8011508:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
		  f_pointer = mg_fs_lfs_open(WEB_USERS_FILE, MG_FS_WRITE);
 801150c:	2102      	movs	r1, #2
 801150e:	4848      	ldr	r0, [pc, #288]	@ (8011630 <StartSettingsTask+0x22c>)
 8011510:	f008 fc90 	bl	8019e34 <mg_fs_lfs_open>
 8011514:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, web_users, user_list_size * sizeof(users_list_t));
 8011516:	f240 629a 	movw	r2, #1690	@ 0x69a
 801151a:	4621      	mov	r1, r4
 801151c:	f008 fcc6 	bl	8019eac <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011520:	4628      	mov	r0, r5
 8011522:	f008 fcab 	bl	8019e7c <mg_fs_lfs_close>
	  free(web_users);
 8011526:	4620      	mov	r0, r4
 8011528:	f008 fb60 	bl	8019bec <vPortFree>
 801152c:	e7b4      	b.n	8011498 <StartSettingsTask+0x94>
		  logging(L_ERR, "Failed to allocate memory for 'web_users' ");
 801152e:	4944      	ldr	r1, [pc, #272]	@ (8011640 <StartSettingsTask+0x23c>)
 8011530:	2003      	movs	r0, #3
 8011532:	f000 fc39 	bl	8011da8 <logging>
 8011536:	e7f6      	b.n	8011526 <StartSettingsTask+0x122>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 8011538:	4d3b      	ldr	r5, [pc, #236]	@ (8011628 <StartSettingsTask+0x224>)
 801153a:	4628      	mov	r0, r5
 801153c:	f008 fce8 	bl	8019f10 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8011540:	2102      	movs	r1, #2
 8011542:	4628      	mov	r0, r5
 8011544:	f008 fc76 	bl	8019e34 <mg_fs_lfs_open>
 8011548:	4605      	mov	r5, r0
 801154a:	2800      	cmp	r0, #0
 801154c:	d033      	beq.n	80115b6 <StartSettingsTask+0x1b2>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801154e:	22c6      	movs	r2, #198	@ 0xc6
 8011550:	a907      	add	r1, sp, #28
 8011552:	f008 fcab 	bl	8019eac <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 8011556:	4628      	mov	r0, r5
 8011558:	f008 fc90 	bl	8019e7c <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 801155c:	2200      	movs	r2, #0
 801155e:	f88d 201c 	strb.w	r2, [sp, #28]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011562:	2302      	movs	r3, #2
 8011564:	a907      	add	r1, sp, #28
 8011566:	4831      	ldr	r0, [pc, #196]	@ (801162c <StartSettingsTask+0x228>)
 8011568:	6800      	ldr	r0, [r0, #0]
 801156a:	f006 fc13 	bl	8017d94 <xQueueGenericSend>
 801156e:	e022      	b.n	80115b6 <StartSettingsTask+0x1b2>
				 osDelay(1);
 8011570:	2001      	movs	r0, #1
 8011572:	f006 f8b0 	bl	80176d6 <osDelay>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 8011576:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801157a:	4832      	ldr	r0, [pc, #200]	@ (8011644 <StartSettingsTask+0x240>)
 801157c:	f004 f964 	bl	8015848 <HAL_GPIO_ReadPin>
 8011580:	2800      	cmp	r0, #0
 8011582:	d0f5      	beq.n	8011570 <StartSettingsTask+0x16c>
			 osDelay(1000);
 8011584:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011588:	f006 f8a5 	bl	80176d6 <osDelay>
			 mg_fs_lfs_remove(WEB_USERS_FILE);
 801158c:	4828      	ldr	r0, [pc, #160]	@ (8011630 <StartSettingsTask+0x22c>)
 801158e:	f008 fcbf 	bl	8019f10 <mg_fs_lfs_remove>
			 HAL_NVIC_SystemReset();
 8011592:	f003 ffe9 	bl	8015568 <HAL_NVIC_SystemReset>
 8011596:	e000      	b.n	801159a <StartSettingsTask+0x196>
		 press_time = 0;
 8011598:	2400      	movs	r4, #0
	  osDelay(1000);
 801159a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801159e:	f006 f89a 	bl	80176d6 <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80115a2:	2200      	movs	r2, #0
 80115a4:	a907      	add	r1, sp, #28
 80115a6:	4b21      	ldr	r3, [pc, #132]	@ (801162c <StartSettingsTask+0x228>)
 80115a8:	6818      	ldr	r0, [r3, #0]
 80115aa:	f006 ff06 	bl	80183ba <xQueuePeek>
	  if(mqtt_config.save){
 80115ae:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d1c0      	bne.n	8011538 <StartSettingsTask+0x134>
	 if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){ // If key pressed, more than 8 secons - reset auth file and reset mcu
 80115b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80115ba:	4822      	ldr	r0, [pc, #136]	@ (8011644 <StartSettingsTask+0x240>)
 80115bc:	f004 f944 	bl	8015848 <HAL_GPIO_ReadPin>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d1e9      	bne.n	8011598 <StartSettingsTask+0x194>
		 press_time++;
 80115c4:	3401      	adds	r4, #1
 80115c6:	b2e4      	uxtb	r4, r4
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115c8:	4d1e      	ldr	r5, [pc, #120]	@ (8011644 <StartSettingsTask+0x240>)
 80115ca:	2201      	movs	r2, #1
 80115cc:	2102      	movs	r1, #2
 80115ce:	4628      	mov	r0, r5
 80115d0:	f004 f941 	bl	8015856 <HAL_GPIO_WritePin>
		 osDelay(100);
 80115d4:	2064      	movs	r0, #100	@ 0x64
 80115d6:	f006 f87e 	bl	80176d6 <osDelay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80115da:	2200      	movs	r2, #0
 80115dc:	2102      	movs	r1, #2
 80115de:	4628      	mov	r0, r5
 80115e0:	f004 f939 	bl	8015856 <HAL_GPIO_WritePin>
		 if (press_time == 8){
 80115e4:	2c08      	cmp	r4, #8
 80115e6:	d1d8      	bne.n	801159a <StartSettingsTask+0x196>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115e8:	2201      	movs	r2, #1
 80115ea:	2102      	movs	r1, #2
 80115ec:	4628      	mov	r0, r5
 80115ee:	f004 f932 	bl	8015856 <HAL_GPIO_WritePin>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 80115f2:	e7c0      	b.n	8011576 <StartSettingsTask+0x172>
 80115f4:	08011811 	.word	0x08011811
 80115f8:	08011835 	.word	0x08011835
 80115fc:	08011119 	.word	0x08011119
 8011600:	08011105 	.word	0x08011105
 8011604:	08011861 	.word	0x08011861
 8011608:	0801184d 	.word	0x0801184d
 801160c:	08034ff8 	.word	0x08034ff8
 8011610:	08035000 	.word	0x08035000
 8011614:	0803500c 	.word	0x0803500c
 8011618:	0803501c 	.word	0x0803501c
 801161c:	08035028 	.word	0x08035028
 8011620:	08035030 	.word	0x08035030
 8011624:	08035038 	.word	0x08035038
 8011628:	08035040 	.word	0x08035040
 801162c:	20000810 	.word	0x20000810
 8011630:	08035054 	.word	0x08035054
 8011634:	08035090 	.word	0x08035090
 8011638:	080350c8 	.word	0x080350c8
 801163c:	080350d0 	.word	0x080350d0
 8011640:	08035064 	.word	0x08035064
 8011644:	40020400 	.word	0x40020400

08011648 <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011648:	b508      	push	{r3, lr}
	switch (param_type) {
 801164a:	2901      	cmp	r1, #1
 801164c:	d014      	beq.n	8011678 <RW_parameters_from_queue+0x30>
 801164e:	2902      	cmp	r1, #2
 8011650:	d01a      	beq.n	8011688 <RW_parameters_from_queue+0x40>
 8011652:	b101      	cbz	r1, 8011656 <RW_parameters_from_queue+0xe>
}
 8011654:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 8011656:	b14a      	cbz	r2, 801166c <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 8011658:	2a01      	cmp	r2, #1
 801165a:	d1fb      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 801165c:	2302      	movs	r3, #2
 801165e:	2200      	movs	r2, #0
 8011660:	4601      	mov	r1, r0
 8011662:	4812      	ldr	r0, [pc, #72]	@ (80116ac <RW_parameters_from_queue+0x64>)
 8011664:	6800      	ldr	r0, [r0, #0]
 8011666:	f006 fb95 	bl	8017d94 <xQueueGenericSend>
 801166a:	e7f3      	b.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 801166c:	4601      	mov	r1, r0
 801166e:	4b0f      	ldr	r3, [pc, #60]	@ (80116ac <RW_parameters_from_queue+0x64>)
 8011670:	6818      	ldr	r0, [r3, #0]
 8011672:	f006 fea2 	bl	80183ba <xQueuePeek>
 8011676:	e7ed      	b.n	8011654 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011678:	2a00      	cmp	r2, #0
 801167a:	d1eb      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 801167c:	4601      	mov	r1, r0
 801167e:	4b0c      	ldr	r3, [pc, #48]	@ (80116b0 <RW_parameters_from_queue+0x68>)
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	f006 fe9a 	bl	80183ba <xQueuePeek>
 8011686:	e7e5      	b.n	8011654 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011688:	b14a      	cbz	r2, 801169e <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 801168a:	2a01      	cmp	r2, #1
 801168c:	d1e2      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 801168e:	2302      	movs	r3, #2
 8011690:	2200      	movs	r2, #0
 8011692:	4601      	mov	r1, r0
 8011694:	4807      	ldr	r0, [pc, #28]	@ (80116b4 <RW_parameters_from_queue+0x6c>)
 8011696:	6800      	ldr	r0, [r0, #0]
 8011698:	f006 fb7c 	bl	8017d94 <xQueueGenericSend>
}
 801169c:	e7da      	b.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 801169e:	4601      	mov	r1, r0
 80116a0:	4b05      	ldr	r3, [pc, #20]	@ (80116b8 <RW_parameters_from_queue+0x70>)
 80116a2:	6818      	ldr	r0, [r3, #0]
 80116a4:	f006 fe89 	bl	80183ba <xQueuePeek>
 80116a8:	e7d4      	b.n	8011654 <RW_parameters_from_queue+0xc>
 80116aa:	bf00      	nop
 80116ac:	20000810 	.word	0x20000810
 80116b0:	2000081c 	.word	0x2000081c
 80116b4:	20000814 	.word	0x20000814
 80116b8:	20000818 	.word	0x20000818

080116bc <StartLoggingTask>:
{
 80116bc:	b530      	push	{r4, r5, lr}
 80116be:	b0d1      	sub	sp, #324	@ 0x144
	reg_logging_fn(add_log_mess_to_q);
 80116c0:	483e      	ldr	r0, [pc, #248]	@ (80117bc <StartLoggingTask+0x100>)
 80116c2:	f000 fb65 	bl	8011d90 <reg_logging_fn>
	logger_set_level(L_INFO);
 80116c6:	2001      	movs	r0, #1
 80116c8:	f000 fb68 	bl	8011d9c <logger_set_level>
	logging(L_INFO, "Device started...");
 80116cc:	493c      	ldr	r1, [pc, #240]	@ (80117c0 <StartLoggingTask+0x104>)
 80116ce:	2001      	movs	r0, #1
 80116d0:	f000 fb6a 	bl	8011da8 <logging>
	osDelay(2000);
 80116d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80116d8:	f005 fffd 	bl	80176d6 <osDelay>
	uint32_t count = 2000;
 80116dc:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 80116e0:	e048      	b.n	8011774 <StartLoggingTask+0xb8>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 80116e2:	2300      	movs	r3, #0
 80116e4:	461a      	mov	r2, r3
 80116e6:	a907      	add	r1, sp, #28
 80116e8:	4836      	ldr	r0, [pc, #216]	@ (80117c4 <StartLoggingTask+0x108>)
 80116ea:	6800      	ldr	r0, [r0, #0]
 80116ec:	f006 f92d 	bl	801794a <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 80116f0:	2102      	movs	r1, #2
 80116f2:	4835      	ldr	r0, [pc, #212]	@ (80117c8 <StartLoggingTask+0x10c>)
 80116f4:	f008 fb9e 	bl	8019e34 <mg_fs_lfs_open>
 80116f8:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 80116fa:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 80116fe:	f10d 011d 	add.w	r1, sp, #29
 8011702:	f008 fbd3 	bl	8019eac <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011706:	4628      	mov	r0, r5
 8011708:	f008 fbb8 	bl	8019e7c <mg_fs_lfs_close>
 801170c:	e038      	b.n	8011780 <StartLoggingTask+0xc4>
    	vPortGetHeapStats(&heap_status);
 801170e:	a848      	add	r0, sp, #288	@ 0x120
 8011710:	f008 faaa 	bl	8019c68 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011714:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8011716:	9304      	str	r3, [sp, #16]
 8011718:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 801171a:	9303      	str	r3, [sp, #12]
 801171c:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 801171e:	9302      	str	r3, [sp, #8]
 8011720:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 8011722:	9301      	str	r3, [sp, #4]
 8011724:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 801172a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 801172c:	4927      	ldr	r1, [pc, #156]	@ (80117cc <StartLoggingTask+0x110>)
 801172e:	2001      	movs	r0, #1
 8011730:	f000 fb3a 	bl	8011da8 <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011734:	4c26      	ldr	r4, [pc, #152]	@ (80117d0 <StartLoggingTask+0x114>)
 8011736:	6863      	ldr	r3, [r4, #4]
 8011738:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801173a:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 801173c:	9301      	str	r3, [sp, #4]
 801173e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011742:	9300      	str	r3, [sp, #0]
 8011744:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011748:	b2d2      	uxtb	r2, r2
 801174a:	4922      	ldr	r1, [pc, #136]	@ (80117d4 <StartLoggingTask+0x118>)
 801174c:	2001      	movs	r0, #1
 801174e:	f000 fb2b 	bl	8011da8 <logging>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011752:	6861      	ldr	r1, [r4, #4]
 8011754:	780a      	ldrb	r2, [r1, #0]
 8011756:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011758:	7888      	ldrb	r0, [r1, #2]
 801175a:	78cc      	ldrb	r4, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 801175c:	790d      	ldrb	r5, [r1, #4]
 801175e:	7949      	ldrb	r1, [r1, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011760:	9103      	str	r1, [sp, #12]
 8011762:	9502      	str	r5, [sp, #8]
 8011764:	9401      	str	r4, [sp, #4]
 8011766:	9000      	str	r0, [sp, #0]
 8011768:	491b      	ldr	r1, [pc, #108]	@ (80117d8 <StartLoggingTask+0x11c>)
 801176a:	2001      	movs	r0, #1
 801176c:	f000 fb1c 	bl	8011da8 <logging>
    	count = 0;
 8011770:	2400      	movs	r4, #0
    count ++;
 8011772:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011774:	4b13      	ldr	r3, [pc, #76]	@ (80117c4 <StartLoggingTask+0x108>)
 8011776:	6818      	ldr	r0, [r3, #0]
 8011778:	f006 f928 	bl	80179cc <osMessageQueueGetCount>
 801177c:	2800      	cmp	r0, #0
 801177e:	d1b0      	bne.n	80116e2 <StartLoggingTask+0x26>
    osDelay(500);
 8011780:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011784:	f005 ffa7 	bl	80176d6 <osDelay>
    if (count == 2000){
 8011788:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 801178c:	d1f1      	bne.n	8011772 <StartLoggingTask+0xb6>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 801178e:	2200      	movs	r2, #0
 8011790:	a94f      	add	r1, sp, #316	@ 0x13c
 8011792:	480d      	ldr	r0, [pc, #52]	@ (80117c8 <StartLoggingTask+0x10c>)
 8011794:	f008 fb10 	bl	8019db8 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011798:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 801179a:	f24c 3350 	movw	r3, #50000	@ 0xc350
 801179e:	429a      	cmp	r2, r3
 80117a0:	d9b5      	bls.n	801170e <StartLoggingTask+0x52>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 80117a2:	4c0e      	ldr	r4, [pc, #56]	@ (80117dc <StartLoggingTask+0x120>)
 80117a4:	4620      	mov	r0, r4
 80117a6:	f008 fbb3 	bl	8019f10 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 80117aa:	4621      	mov	r1, r4
 80117ac:	4806      	ldr	r0, [pc, #24]	@ (80117c8 <StartLoggingTask+0x10c>)
 80117ae:	f008 fba3 	bl	8019ef8 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 80117b2:	490b      	ldr	r1, [pc, #44]	@ (80117e0 <StartLoggingTask+0x124>)
 80117b4:	2001      	movs	r0, #1
 80117b6:	f000 faf7 	bl	8011da8 <logging>
 80117ba:	e7a8      	b.n	801170e <StartLoggingTask+0x52>
 80117bc:	08011265 	.word	0x08011265
 80117c0:	080350e8 	.word	0x080350e8
 80117c4:	2000080c 	.word	0x2000080c
 80117c8:	080350fc 	.word	0x080350fc
 80117cc:	08035130 	.word	0x08035130
 80117d0:	20000834 	.word	0x20000834
 80117d4:	080351c4 	.word	0x080351c4
 80117d8:	080351e0 	.word	0x080351e0
 80117dc:	0803510c 	.word	0x0803510c
 80117e0:	0803511c 	.word	0x0803511c

080117e4 <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 80117e4:	b500      	push	{lr}
 80117e6:	b087      	sub	sp, #28
 80117e8:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 80117ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	2301      	movs	r3, #1
 80117f4:	f10d 0217 	add.w	r2, sp, #23
 80117f8:	f10d 010f 	add.w	r1, sp, #15
 80117fc:	4803      	ldr	r0, [pc, #12]	@ (801180c <EthTxn+0x28>)
 80117fe:	f005 f9c8 	bl	8016b92 <HAL_SPI_TransmitReceive>
}
 8011802:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8011806:	b007      	add	sp, #28
 8011808:	f85d fb04 	ldr.w	pc, [sp], #4
 801180c:	20000894 	.word	0x20000894

08011810 <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 8011810:	b500      	push	{lr}
 8011812:	b083      	sub	sp, #12
 8011814:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801181c:	2201      	movs	r2, #1
 801181e:	f10d 0107 	add.w	r1, sp, #7
 8011822:	4803      	ldr	r0, [pc, #12]	@ (8011830 <FlashSPIsendByte+0x20>)
 8011824:	f005 f8d3 	bl	80169ce <HAL_SPI_Transmit>
}
 8011828:	b003      	add	sp, #12
 801182a:	f85d fb04 	ldr.w	pc, [sp], #4
 801182e:	bf00      	nop
 8011830:	200008ec 	.word	0x200008ec

08011834 <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 8011834:	b508      	push	{r3, lr}
 8011836:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011838:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801183c:	4601      	mov	r1, r0
 801183e:	4802      	ldr	r0, [pc, #8]	@ (8011848 <FlashSPIrecvBuff+0x14>)
 8011840:	f005 fad1 	bl	8016de6 <HAL_SPI_Receive>
}
 8011844:	bd08      	pop	{r3, pc}
 8011846:	bf00      	nop
 8011848:	200008ec 	.word	0x200008ec

0801184c <FS_Lock>:
void FS_Lock(void * param){
 801184c:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 801184e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011852:	4b02      	ldr	r3, [pc, #8]	@ (801185c <FS_Lock+0x10>)
 8011854:	6818      	ldr	r0, [r3, #0]
 8011856:	f005 ff95 	bl	8017784 <osMutexAcquire>
}
 801185a:	bd08      	pop	{r3, pc}
 801185c:	20000804 	.word	0x20000804

08011860 <FS_Unlock>:
void FS_Unlock(void * param){
 8011860:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 8011862:	4b02      	ldr	r3, [pc, #8]	@ (801186c <FS_Unlock+0xc>)
 8011864:	6818      	ldr	r0, [r3, #0]
 8011866:	f005 ffbc 	bl	80177e2 <osMutexRelease>
}
 801186a:	bd08      	pop	{r3, pc}
 801186c:	20000804 	.word	0x20000804

08011870 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8011870:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 8011872:	4829      	ldr	r0, [pc, #164]	@ (8011918 <MX_FREERTOS_Init+0xa8>)
 8011874:	f005 ff3d 	bl	80176f2 <osMutexNew>
 8011878:	4b28      	ldr	r3, [pc, #160]	@ (801191c <MX_FREERTOS_Init+0xac>)
 801187a:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 801187c:	4828      	ldr	r0, [pc, #160]	@ (8011920 <MX_FREERTOS_Init+0xb0>)
 801187e:	f005 ff38 	bl	80176f2 <osMutexNew>
 8011882:	4b28      	ldr	r3, [pc, #160]	@ (8011924 <MX_FREERTOS_Init+0xb4>)
 8011884:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8011886:	4a28      	ldr	r2, [pc, #160]	@ (8011928 <MX_FREERTOS_Init+0xb8>)
 8011888:	2103      	movs	r1, #3
 801188a:	2001      	movs	r0, #1
 801188c:	f005 ffd0 	bl	8017830 <osMessageQueueNew>
 8011890:	4b26      	ldr	r3, [pc, #152]	@ (801192c <MX_FREERTOS_Init+0xbc>)
 8011892:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011894:	4a26      	ldr	r2, [pc, #152]	@ (8011930 <MX_FREERTOS_Init+0xc0>)
 8011896:	2103      	movs	r1, #3
 8011898:	2001      	movs	r0, #1
 801189a:	f005 ffc9 	bl	8017830 <osMessageQueueNew>
 801189e:	4b25      	ldr	r3, [pc, #148]	@ (8011934 <MX_FREERTOS_Init+0xc4>)
 80118a0:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 80118a2:	4a25      	ldr	r2, [pc, #148]	@ (8011938 <MX_FREERTOS_Init+0xc8>)
 80118a4:	2103      	movs	r1, #3
 80118a6:	2001      	movs	r0, #1
 80118a8:	f005 ffc2 	bl	8017830 <osMessageQueueNew>
 80118ac:	4b23      	ldr	r3, [pc, #140]	@ (801193c <MX_FREERTOS_Init+0xcc>)
 80118ae:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 80118b0:	4a23      	ldr	r2, [pc, #140]	@ (8011940 <MX_FREERTOS_Init+0xd0>)
 80118b2:	21c6      	movs	r1, #198	@ 0xc6
 80118b4:	2001      	movs	r0, #1
 80118b6:	f005 ffbb 	bl	8017830 <osMessageQueueNew>
 80118ba:	4b22      	ldr	r3, [pc, #136]	@ (8011944 <MX_FREERTOS_Init+0xd4>)
 80118bc:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 80118be:	4a22      	ldr	r2, [pc, #136]	@ (8011948 <MX_FREERTOS_Init+0xd8>)
 80118c0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80118c4:	200f      	movs	r0, #15
 80118c6:	f005 ffb3 	bl	8017830 <osMessageQueueNew>
 80118ca:	4b20      	ldr	r3, [pc, #128]	@ (801194c <MX_FREERTOS_Init+0xdc>)
 80118cc:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 80118ce:	4a20      	ldr	r2, [pc, #128]	@ (8011950 <MX_FREERTOS_Init+0xe0>)
 80118d0:	2100      	movs	r1, #0
 80118d2:	4820      	ldr	r0, [pc, #128]	@ (8011954 <MX_FREERTOS_Init+0xe4>)
 80118d4:	f005 fea0 	bl	8017618 <osThreadNew>
 80118d8:	4b1f      	ldr	r3, [pc, #124]	@ (8011958 <MX_FREERTOS_Init+0xe8>)
 80118da:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 80118dc:	4a1f      	ldr	r2, [pc, #124]	@ (801195c <MX_FREERTOS_Init+0xec>)
 80118de:	2100      	movs	r1, #0
 80118e0:	481f      	ldr	r0, [pc, #124]	@ (8011960 <MX_FREERTOS_Init+0xf0>)
 80118e2:	f005 fe99 	bl	8017618 <osThreadNew>
 80118e6:	4b1f      	ldr	r3, [pc, #124]	@ (8011964 <MX_FREERTOS_Init+0xf4>)
 80118e8:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 80118ea:	4a1f      	ldr	r2, [pc, #124]	@ (8011968 <MX_FREERTOS_Init+0xf8>)
 80118ec:	2100      	movs	r1, #0
 80118ee:	481f      	ldr	r0, [pc, #124]	@ (801196c <MX_FREERTOS_Init+0xfc>)
 80118f0:	f005 fe92 	bl	8017618 <osThreadNew>
 80118f4:	4b1e      	ldr	r3, [pc, #120]	@ (8011970 <MX_FREERTOS_Init+0x100>)
 80118f6:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 80118f8:	4a1e      	ldr	r2, [pc, #120]	@ (8011974 <MX_FREERTOS_Init+0x104>)
 80118fa:	2100      	movs	r1, #0
 80118fc:	481e      	ldr	r0, [pc, #120]	@ (8011978 <MX_FREERTOS_Init+0x108>)
 80118fe:	f005 fe8b 	bl	8017618 <osThreadNew>
 8011902:	4b1e      	ldr	r3, [pc, #120]	@ (801197c <MX_FREERTOS_Init+0x10c>)
 8011904:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 8011906:	4a1e      	ldr	r2, [pc, #120]	@ (8011980 <MX_FREERTOS_Init+0x110>)
 8011908:	2100      	movs	r1, #0
 801190a:	481e      	ldr	r0, [pc, #120]	@ (8011984 <MX_FREERTOS_Init+0x114>)
 801190c:	f005 fe84 	bl	8017618 <osThreadNew>
 8011910:	4b1d      	ldr	r3, [pc, #116]	@ (8011988 <MX_FREERTOS_Init+0x118>)
 8011912:	6018      	str	r0, [r3, #0]
}
 8011914:	bd08      	pop	{r3, pc}
 8011916:	bf00      	nop
 8011918:	080352e4 	.word	0x080352e4
 801191c:	20000808 	.word	0x20000808
 8011920:	080352d4 	.word	0x080352d4
 8011924:	20000804 	.word	0x20000804
 8011928:	08035354 	.word	0x08035354
 801192c:	2000081c 	.word	0x2000081c
 8011930:	0803533c 	.word	0x0803533c
 8011934:	20000818 	.word	0x20000818
 8011938:	08035324 	.word	0x08035324
 801193c:	20000814 	.word	0x20000814
 8011940:	0803530c 	.word	0x0803530c
 8011944:	20000810 	.word	0x20000810
 8011948:	080352f4 	.word	0x080352f4
 801194c:	2000080c 	.word	0x2000080c
 8011950:	080353fc 	.word	0x080353fc
 8011954:	080119b5 	.word	0x080119b5
 8011958:	20000830 	.word	0x20000830
 801195c:	080353d8 	.word	0x080353d8
 8011960:	0801112d 	.word	0x0801112d
 8011964:	2000082c 	.word	0x2000082c
 8011968:	080353b4 	.word	0x080353b4
 801196c:	0801128d 	.word	0x0801128d
 8011970:	20000828 	.word	0x20000828
 8011974:	08035390 	.word	0x08035390
 8011978:	08011405 	.word	0x08011405
 801197c:	20000824 	.word	0x20000824
 8011980:	0803536c 	.word	0x0803536c
 8011984:	080116bd 	.word	0x080116bd
 8011988:	20000820 	.word	0x20000820

0801198c <EthResetBegin>:
void EthResetBegin(void){
 801198c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 801198e:	2200      	movs	r2, #0
 8011990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011994:	4801      	ldr	r0, [pc, #4]	@ (801199c <EthResetBegin+0x10>)
 8011996:	f003 ff5e 	bl	8015856 <HAL_GPIO_WritePin>
}
 801199a:	bd08      	pop	{r3, pc}
 801199c:	40020000 	.word	0x40020000

080119a0 <EthResetEnd>:
void EthResetEnd(void){
 80119a0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 80119a2:	2201      	movs	r2, #1
 80119a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119a8:	4801      	ldr	r0, [pc, #4]	@ (80119b0 <EthResetEnd+0x10>)
 80119aa:	f003 ff54 	bl	8015856 <HAL_GPIO_WritePin>
}
 80119ae:	bd08      	pop	{r3, pc}
 80119b0:	40020000 	.word	0x40020000

080119b4 <StartEthTask>:
{
 80119b4:	b530      	push	{r4, r5, lr}
 80119b6:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 80119b8:	ad22      	add	r5, sp, #136	@ 0x88
 80119ba:	4b62      	ldr	r3, [pc, #392]	@ (8011b44 <StartEthTask+0x190>)
 80119bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80119be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 80119c2:	ac02      	add	r4, sp, #8
 80119c4:	2280      	movs	r2, #128	@ 0x80
 80119c6:	2100      	movs	r1, #0
 80119c8:	4620      	mov	r0, r4
 80119ca:	f01a f819 	bl	802ba00 <memset>
 80119ce:	2340      	movs	r3, #64	@ 0x40
 80119d0:	f88d 3008 	strb.w	r3, [sp, #8]
 80119d4:	2322      	movs	r3, #34	@ 0x22
 80119d6:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 80119da:	4b5b      	ldr	r3, [pc, #364]	@ (8011b48 <StartEthTask+0x194>)
 80119dc:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 80119de:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 80119e2:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 80119e4:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 80119e8:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 80119ea:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 80119ee:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 80119f0:	f88d 300d 	strb.w	r3, [sp, #13]
 80119f4:	2301      	movs	r3, #1
 80119f6:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 80119fa:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80119fe:	4b53      	ldr	r3, [pc, #332]	@ (8011b4c <StartEthTask+0x198>)
 8011a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a02:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 8011a04:	4b52      	ldr	r3, [pc, #328]	@ (8011b50 <StartEthTask+0x19c>)
 8011a06:	aa58      	add	r2, sp, #352	@ 0x160
 8011a08:	601a      	str	r2, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 8011a0a:	605c      	str	r4, [r3, #4]
  while (mg_fs_mounted() == 0){
 8011a0c:	e003      	b.n	8011a16 <StartEthTask+0x62>
	  osDelay(500);
 8011a0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a12:	f005 fe60 	bl	80176d6 <osDelay>
  while (mg_fs_mounted() == 0){
 8011a16:	f008 fa93 	bl	8019f40 <mg_fs_mounted>
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	d0f7      	beq.n	8011a0e <StartEthTask+0x5a>
  mg_mgr_init(&mgr);        // Mongoose event manager
 8011a1e:	a858      	add	r0, sp, #352	@ 0x160
 8011a20:	f010 fe1a 	bl	8022658 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8011a24:	4b4b      	ldr	r3, [pc, #300]	@ (8011b54 <StartEthTask+0x1a0>)
 8011a26:	2203      	movs	r2, #3
 8011a28:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011a2a:	f002 f887 	bl	8013b3c <dash_hdl>
 8011a2e:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011a30:	e00f      	b.n	8011a52 <StartEthTask+0x9e>
	  EthResetBegin();
 8011a32:	f7ff ffab 	bl	801198c <EthResetBegin>
	  osDelay(500);
 8011a36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a3a:	f005 fe4c 	bl	80176d6 <osDelay>
	  EthResetEnd();
 8011a3e:	f7ff ffaf 	bl	80119a0 <EthResetEnd>
	  osDelay(2000);
 8011a42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011a46:	f005 fe46 	bl	80176d6 <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011a4a:	a902      	add	r1, sp, #8
 8011a4c:	a858      	add	r0, sp, #352	@ 0x160
 8011a4e:	f016 f9f9 	bl	8027e44 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011a52:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d0eb      	beq.n	8011a32 <StartEthTask+0x7e>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011a5a:	2106      	movs	r1, #6
 8011a5c:	a802      	add	r0, sp, #8
 8011a5e:	f002 fc99 	bl	8014394 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 8011a62:	483d      	ldr	r0, [pc, #244]	@ (8011b58 <StartEthTask+0x1a4>)
 8011a64:	f002 f878 	bl	8013b58 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011a68:	4b39      	ldr	r3, [pc, #228]	@ (8011b50 <StartEthTask+0x19c>)
 8011a6a:	4622      	mov	r2, r4
 8011a6c:	493b      	ldr	r1, [pc, #236]	@ (8011b5c <StartEthTask+0x1a8>)
 8011a6e:	a858      	add	r0, sp, #352	@ 0x160
 8011a70:	f014 fc16 	bl	80262a0 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011a74:	e006      	b.n	8011a84 <StartEthTask+0xd0>
    mg_mgr_poll(&mgr, 1);
 8011a76:	2101      	movs	r1, #1
 8011a78:	a858      	add	r0, sp, #352	@ 0x160
 8011a7a:	f016 ff7d 	bl	8028978 <mg_mgr_poll>
    osDelay(1);
 8011a7e:	2001      	movs	r0, #1
 8011a80:	f005 fe29 	bl	80176d6 <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011a84:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011a88:	2b03      	cmp	r3, #3
 8011a8a:	d1f4      	bne.n	8011a76 <StartEthTask+0xc2>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011a8c:	4b30      	ldr	r3, [pc, #192]	@ (8011b50 <StartEthTask+0x19c>)
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011a92:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011a94:	9301      	str	r3, [sp, #4]
 8011a96:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011a9a:	9300      	str	r3, [sp, #0]
 8011a9c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011aa0:	b2d2      	uxtb	r2, r2
 8011aa2:	492f      	ldr	r1, [pc, #188]	@ (8011b60 <StartEthTask+0x1ac>)
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	f000 f97f 	bl	8011da8 <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011aaa:	2200      	movs	r2, #0
 8011aac:	4611      	mov	r1, r2
 8011aae:	a826      	add	r0, sp, #152	@ 0x98
 8011ab0:	f7ff fdca 	bl	8011648 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8011ab4:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011ab8:	b1d3      	cbz	r3, 8011af0 <StartEthTask+0x13c>
	  logging(L_INFO, "MQTT function enabled.");
 8011aba:	492a      	ldr	r1, [pc, #168]	@ (8011b64 <StartEthTask+0x1b0>)
 8011abc:	2001      	movs	r0, #1
 8011abe:	f000 f973 	bl	8011da8 <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8011ac2:	4b25      	ldr	r3, [pc, #148]	@ (8011b58 <StartEthTask+0x1a4>)
 8011ac4:	9301      	str	r3, [sp, #4]
 8011ac6:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	ab47      	add	r3, sp, #284	@ 0x11c
 8011ace:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8011ad2:	a902      	add	r1, sp, #8
 8011ad4:	a858      	add	r0, sp, #352	@ 0x160
 8011ad6:	f002 fb9b 	bl	8014210 <mqtt_init>
  start_sntp(&mgr);
 8011ada:	a858      	add	r0, sp, #352	@ 0x160
 8011adc:	f003 f830 	bl	8014b40 <start_sntp>
  ssdp_start_server(&mgr, &mif);
 8011ae0:	a902      	add	r1, sp, #8
 8011ae2:	a858      	add	r0, sp, #352	@ 0x160
 8011ae4:	f003 f9f8 	bl	8014ed8 <ssdp_start_server>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 8011ae8:	f007 f852 	bl	8018b90 <xTaskGetTickCount>
 8011aec:	4605      	mov	r5, r0
 8011aee:	e008      	b.n	8011b02 <StartEthTask+0x14e>
	  logging(L_INFO, "MQTT function disabled");
 8011af0:	491d      	ldr	r1, [pc, #116]	@ (8011b68 <StartEthTask+0x1b4>)
 8011af2:	2001      	movs	r0, #1
 8011af4:	f000 f958 	bl	8011da8 <logging>
 8011af8:	e7ef      	b.n	8011ada <StartEthTask+0x126>
      osDelay(1);
 8011afa:	2001      	movs	r0, #1
 8011afc:	f005 fdeb 	bl	80176d6 <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 8011b00:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 8011b02:	f007 f845 	bl	8018b90 <xTaskGetTickCount>
 8011b06:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011b08:	1b41      	subs	r1, r0, r5
 8011b0a:	a858      	add	r0, sp, #352	@ 0x160
 8011b0c:	f016 ff34 	bl	8028978 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 8011b10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	a802      	add	r0, sp, #8
 8011b16:	4798      	blx	r3
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	d1ee      	bne.n	8011afa <StartEthTask+0x146>
    	  EthResetBegin(); //enable reset state w5500
 8011b1c:	f7ff ff36 	bl	801198c <EthResetBegin>
    	  osDelay(100);
 8011b20:	2064      	movs	r0, #100	@ 0x64
 8011b22:	f005 fdd8 	bl	80176d6 <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8011b26:	f7ff ff3b 	bl	80119a0 <EthResetEnd>
    	  osDelay(3000);
 8011b2a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011b2e:	f005 fdd2 	bl	80176d6 <osDelay>
    	  mif.driver->init(&mif);
 8011b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	a802      	add	r0, sp, #8
 8011b38:	4798      	blx	r3
    	  osDelay(7000);
 8011b3a:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011b3e:	f005 fdca 	bl	80176d6 <osDelay>
 8011b42:	e7e5      	b.n	8011b10 <StartEthTask+0x15c>
 8011b44:	08034d34 	.word	0x08034d34
 8011b48:	1fff7a00 	.word	0x1fff7a00
 8011b4c:	20000094 	.word	0x20000094
 8011b50:	20000834 	.word	0x20000834
 8011b54:	200000a8 	.word	0x200000a8
 8011b58:	08011649 	.word	0x08011649
 8011b5c:	08035208 	.word	0x08035208
 8011b60:	080351c4 	.word	0x080351c4
 8011b64:	0803521c 	.word	0x0803521c
 8011b68:	08035234 	.word	0x08035234

08011b6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b70:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b72:	2400      	movs	r4, #0
 8011b74:	9403      	str	r4, [sp, #12]
 8011b76:	9404      	str	r4, [sp, #16]
 8011b78:	9405      	str	r4, [sp, #20]
 8011b7a:	9406      	str	r4, [sp, #24]
 8011b7c:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011b7e:	9400      	str	r4, [sp, #0]
 8011b80:	4b3c      	ldr	r3, [pc, #240]	@ (8011c74 <MX_GPIO_Init+0x108>)
 8011b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011b84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011b88:	631a      	str	r2, [r3, #48]	@ 0x30
 8011b8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011b8c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011b90:	9200      	str	r2, [sp, #0]
 8011b92:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b94:	9401      	str	r4, [sp, #4]
 8011b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011b98:	f042 0201 	orr.w	r2, r2, #1
 8011b9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8011b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ba0:	f002 0201 	and.w	r2, r2, #1
 8011ba4:	9201      	str	r2, [sp, #4]
 8011ba6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011ba8:	9402      	str	r4, [sp, #8]
 8011baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011bac:	f042 0202 	orr.w	r2, r2, #2
 8011bb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8011bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bb4:	f003 0302 	and.w	r3, r3, #2
 8011bb8:	9302      	str	r3, [sp, #8]
 8011bba:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011bbc:	4e2e      	ldr	r6, [pc, #184]	@ (8011c78 <MX_GPIO_Init+0x10c>)
 8011bbe:	4622      	mov	r2, r4
 8011bc0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	f003 fe46 	bl	8015856 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011bca:	4d2c      	ldr	r5, [pc, #176]	@ (8011c7c <MX_GPIO_Init+0x110>)
 8011bcc:	4622      	mov	r2, r4
 8011bce:	2107      	movs	r1, #7
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	f003 fe40 	bl	8015856 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011bd6:	2201      	movs	r2, #1
 8011bd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011bdc:	4628      	mov	r0, r5
 8011bde:	f003 fe3a 	bl	8015856 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011be2:	2201      	movs	r2, #1
 8011be4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011be8:	4630      	mov	r0, r6
 8011bea:	f003 fe34 	bl	8015856 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011bee:	f04f 0907 	mov.w	r9, #7
 8011bf2:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011bf6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011bf8:	f04f 0802 	mov.w	r8, #2
 8011bfc:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c00:	a903      	add	r1, sp, #12
 8011c02:	4630      	mov	r0, r6
 8011c04:	f003 fcb4 	bl	8015570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011c08:	23e0      	movs	r3, #224	@ 0xe0
 8011c0a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c0c:	2701      	movs	r7, #1
 8011c0e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c10:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c12:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c14:	a903      	add	r1, sp, #12
 8011c16:	4630      	mov	r0, r6
 8011c18:	f003 fcaa 	bl	8015570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8011c1c:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c20:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c22:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c24:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011c26:	a903      	add	r1, sp, #12
 8011c28:	4628      	mov	r0, r5
 8011c2a:	f003 fca1 	bl	8015570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8011c2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011c32:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c34:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c36:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011c38:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8011c3c:	a903      	add	r1, sp, #12
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f003 fc96 	bl	8015570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8011c44:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8011c48:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c4a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c4c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011c4e:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c52:	a903      	add	r1, sp, #12
 8011c54:	4630      	mov	r0, r6
 8011c56:	f003 fc8b 	bl	8015570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8011c5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011c5e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011c60:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c62:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8011c64:	a903      	add	r1, sp, #12
 8011c66:	4628      	mov	r0, r5
 8011c68:	f003 fc82 	bl	8015570 <HAL_GPIO_Init>

}
 8011c6c:	b009      	add	sp, #36	@ 0x24
 8011c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c72:	bf00      	nop
 8011c74:	40023800 	.word	0x40023800
 8011c78:	40020000 	.word	0x40020000
 8011c7c:	40020400 	.word	0x40020400

08011c80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8011c80:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011c82:	480b      	ldr	r0, [pc, #44]	@ (8011cb0 <MX_I2C1_Init+0x30>)
 8011c84:	4b0b      	ldr	r3, [pc, #44]	@ (8011cb4 <MX_I2C1_Init+0x34>)
 8011c86:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8011c88:	4b0b      	ldr	r3, [pc, #44]	@ (8011cb8 <MX_I2C1_Init+0x38>)
 8011c8a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011c90:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011c92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011c96:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011c98:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011c9a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011c9c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011c9e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011ca0:	f003 ff70 	bl	8015b84 <HAL_I2C_Init>
 8011ca4:	b900      	cbnz	r0, 8011ca8 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011ca6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011ca8:	f000 f928 	bl	8011efc <Error_Handler>
}
 8011cac:	e7fb      	b.n	8011ca6 <MX_I2C1_Init+0x26>
 8011cae:	bf00      	nop
 8011cb0:	2000083c 	.word	0x2000083c
 8011cb4:	40005400 	.word	0x40005400
 8011cb8:	00030d40 	.word	0x00030d40

08011cbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011cbc:	b530      	push	{r4, r5, lr}
 8011cbe:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	9303      	str	r3, [sp, #12]
 8011cc4:	9304      	str	r3, [sp, #16]
 8011cc6:	9305      	str	r3, [sp, #20]
 8011cc8:	9306      	str	r3, [sp, #24]
 8011cca:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8011ccc:	6802      	ldr	r2, [r0, #0]
 8011cce:	4b15      	ldr	r3, [pc, #84]	@ (8011d24 <HAL_I2C_MspInit+0x68>)
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d001      	beq.n	8011cd8 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8011cd4:	b009      	add	sp, #36	@ 0x24
 8011cd6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011cd8:	2500      	movs	r5, #0
 8011cda:	9501      	str	r5, [sp, #4]
 8011cdc:	4c12      	ldr	r4, [pc, #72]	@ (8011d28 <HAL_I2C_MspInit+0x6c>)
 8011cde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ce0:	f043 0302 	orr.w	r3, r3, #2
 8011ce4:	6323      	str	r3, [r4, #48]	@ 0x30
 8011ce6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ce8:	f003 0302 	and.w	r3, r3, #2
 8011cec:	9301      	str	r3, [sp, #4]
 8011cee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011cf0:	23c0      	movs	r3, #192	@ 0xc0
 8011cf2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011cf4:	2312      	movs	r3, #18
 8011cf6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011cfc:	2303      	movs	r3, #3
 8011cfe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011d00:	2304      	movs	r3, #4
 8011d02:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d04:	a903      	add	r1, sp, #12
 8011d06:	4809      	ldr	r0, [pc, #36]	@ (8011d2c <HAL_I2C_MspInit+0x70>)
 8011d08:	f003 fc32 	bl	8015570 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011d0c:	9502      	str	r5, [sp, #8]
 8011d0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011d10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011d14:	6423      	str	r3, [r4, #64]	@ 0x40
 8011d16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011d1c:	9302      	str	r3, [sp, #8]
 8011d1e:	9b02      	ldr	r3, [sp, #8]
}
 8011d20:	e7d8      	b.n	8011cd4 <HAL_I2C_MspInit+0x18>
 8011d22:	bf00      	nop
 8011d24:	40005400 	.word	0x40005400
 8011d28:	40023800 	.word	0x40023800
 8011d2c:	40020400 	.word	0x40020400

08011d30 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8011d30:	6802      	ldr	r2, [r0, #0]
 8011d32:	4b0a      	ldr	r3, [pc, #40]	@ (8011d5c <HAL_I2C_MspDeInit+0x2c>)
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d000      	beq.n	8011d3a <HAL_I2C_MspDeInit+0xa>
 8011d38:	4770      	bx	lr
{
 8011d3a:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8011d3c:	4a08      	ldr	r2, [pc, #32]	@ (8011d60 <HAL_I2C_MspDeInit+0x30>)
 8011d3e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011d40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011d44:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8011d46:	4c07      	ldr	r4, [pc, #28]	@ (8011d64 <HAL_I2C_MspDeInit+0x34>)
 8011d48:	2140      	movs	r1, #64	@ 0x40
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f003 fcf4 	bl	8015738 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8011d50:	2180      	movs	r1, #128	@ 0x80
 8011d52:	4620      	mov	r0, r4
 8011d54:	f003 fcf0 	bl	8015738 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8011d58:	bd10      	pop	{r4, pc}
 8011d5a:	bf00      	nop
 8011d5c:	40005400 	.word	0x40005400
 8011d60:	40023800 	.word	0x40023800
 8011d64:	40020400 	.word	0x40020400

08011d68 <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 8011d68:	b084      	sub	sp, #16
 8011d6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011d6e:	b004      	add	sp, #16
 8011d70:	4770      	bx	lr

08011d72 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8011d72:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8011d74:	fb01 f400 	mul.w	r4, r1, r0
 8011d78:	4620      	mov	r0, r4
 8011d7a:	f007 feb5 	bl	8019ae8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8011d7e:	4605      	mov	r5, r0
 8011d80:	b118      	cbz	r0, 8011d8a <mg_calloc+0x18>
 8011d82:	4622      	mov	r2, r4
 8011d84:	2100      	movs	r1, #0
 8011d86:	f019 fe3b 	bl	802ba00 <memset>
  return p;
}
 8011d8a:	4628      	mov	r0, r5
 8011d8c:	bd38      	pop	{r3, r4, r5, pc}
	...

08011d90 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 8011d90:	b108      	cbz	r0, 8011d96 <reg_logging_fn+0x6>
		_send_log_mess = fn;
 8011d92:	4a01      	ldr	r2, [pc, #4]	@ (8011d98 <reg_logging_fn+0x8>)
 8011d94:	6010      	str	r0, [r2, #0]
	}
}
 8011d96:	4770      	bx	lr
 8011d98:	20000000 	.word	0x20000000

08011d9c <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 8011d9c:	4b01      	ldr	r3, [pc, #4]	@ (8011da4 <logger_set_level+0x8>)
 8011d9e:	7018      	strb	r0, [r3, #0]
}
 8011da0:	4770      	bx	lr
 8011da2:	bf00      	nop
 8011da4:	20000890 	.word	0x20000890

08011da8 <logging>:

void logging(logging_level_t level, const char *format, ...){
 8011da8:	b40e      	push	{r1, r2, r3}
 8011daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dac:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 8011db0:	4b44      	ldr	r3, [pc, #272]	@ (8011ec4 <logging+0x11c>)
 8011db2:	781b      	ldrb	r3, [r3, #0]
 8011db4:	4283      	cmp	r3, r0
 8011db6:	d905      	bls.n	8011dc4 <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 8011db8:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 8011dbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011dc0:	b003      	add	sp, #12
 8011dc2:	4770      	bx	lr
 8011dc4:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8011dc6:	2101      	movs	r1, #1
 8011dc8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011dcc:	f7ff ffd1 	bl	8011d72 <mg_calloc>
    if (!tmp_buf){
 8011dd0:	4605      	mov	r5, r0
 8011dd2:	2800      	cmp	r0, #0
 8011dd4:	d0f0      	beq.n	8011db8 <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 8011dd6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011dda:	2100      	movs	r1, #0
 8011ddc:	a85b      	add	r0, sp, #364	@ 0x16c
 8011dde:	f019 fe0f 	bl	802ba00 <memset>
    mess.log_level = level;
 8011de2:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 8011de6:	f016 fe5b 	bl	8028aa0 <mg_now>
 8011dea:	f7fe fbe7 	bl	80105bc <__aeabi_ul2d>
 8011dee:	4606      	mov	r6, r0
 8011df0:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 8011df2:	2200      	movs	r2, #0
 8011df4:	4b34      	ldr	r3, [pc, #208]	@ (8011ec8 <logging+0x120>)
 8011df6:	f7fe fd41 	bl	801087c <__aeabi_ddiv>
 8011dfa:	f7fe ffd9 	bl	8010db0 <__aeabi_d2lz>
 8011dfe:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 8011e02:	a94f      	add	r1, sp, #316	@ 0x13c
 8011e04:	a858      	add	r0, sp, #352	@ 0x160
 8011e06:	f019 fe91 	bl	802bb2c <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 8011e0a:	ab4f      	add	r3, sp, #316	@ 0x13c
 8011e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8011ecc <logging+0x124>)
 8011e0e:	2140      	movs	r1, #64	@ 0x40
 8011e10:	a83f      	add	r0, sp, #252	@ 0xfc
 8011e12:	f01a fc9d 	bl	802c750 <strftime>
 8011e16:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 8011e18:	4630      	mov	r0, r6
 8011e1a:	4639      	mov	r1, r7
 8011e1c:	f7fe feb4 	bl	8010b88 <__aeabi_d2iz>
 8011e20:	4a2b      	ldr	r2, [pc, #172]	@ (8011ed0 <logging+0x128>)
 8011e22:	fb82 3200 	smull	r3, r2, r2, r0
 8011e26:	17c3      	asrs	r3, r0, #31
 8011e28:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8011e2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011e30:	fb02 0313 	mls	r3, r2, r3, r0
 8011e34:	4a27      	ldr	r2, [pc, #156]	@ (8011ed4 <logging+0x12c>)
 8011e36:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 8011e3a:	a83f      	add	r0, sp, #252	@ 0xfc
 8011e3c:	4420      	add	r0, r4
 8011e3e:	f019 f8b5 	bl	802afac <snprintf>
 8011e42:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 8011e44:	1c63      	adds	r3, r4, #1
 8011e46:	2220      	movs	r2, #32
 8011e48:	a93f      	add	r1, sp, #252	@ 0xfc
 8011e4a:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8011e50:	aba2      	add	r3, sp, #648	@ 0x288
 8011e52:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8011e54:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 8011e58:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8011e5a:	21fd      	movs	r1, #253	@ 0xfd
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	f019 fb6d 	bl	802b53c <vsnprintf>
 8011e62:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 8011e64:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 8011e68:	9601      	str	r6, [sp, #4]
 8011e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8011ed8 <logging+0x130>)
 8011e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	ab3f      	add	r3, sp, #252	@ 0xfc
 8011e74:	4a19      	ldr	r2, [pc, #100]	@ (8011edc <logging+0x134>)
 8011e76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	f019 f896 	bl	802afac <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 8011e80:	2cf5      	cmp	r4, #245	@ 0xf5
 8011e82:	d81b      	bhi.n	8011ebc <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 8011e84:	4628      	mov	r0, r5
 8011e86:	f7fe fa0b 	bl	80102a0 <strlen>
 8011e8a:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 8011e8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011e92:	4629      	mov	r1, r5
 8011e94:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 8011e98:	f019 fdf9 	bl	802ba8e <strncpy>
    if (_send_log_mess) {
 8011e9c:	4b10      	ldr	r3, [pc, #64]	@ (8011ee0 <logging+0x138>)
 8011e9e:	681e      	ldr	r6, [r3, #0]
 8011ea0:	b146      	cbz	r6, 8011eb4 <logging+0x10c>
        _send_log_mess(mess);
 8011ea2:	ac5b      	add	r4, sp, #364	@ 0x16c
 8011ea4:	22f2      	movs	r2, #242	@ 0xf2
 8011ea6:	a95f      	add	r1, sp, #380	@ 0x17c
 8011ea8:	4668      	mov	r0, sp
 8011eaa:	f01a ffe5 	bl	802ce78 <memcpy>
 8011eae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011eb2:	47b0      	blx	r6
    free(tmp_buf);
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	f007 fe99 	bl	8019bec <vPortFree>
 8011eba:	e77d      	b.n	8011db8 <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 8011ebc:	23f6      	movs	r3, #246	@ 0xf6
 8011ebe:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 8011ec2:	e7e4      	b.n	8011e8e <logging+0xe6>
 8011ec4:	20000890 	.word	0x20000890
 8011ec8:	408f4000 	.word	0x408f4000
 8011ecc:	08035420 	.word	0x08035420
 8011ed0:	10624dd3 	.word	0x10624dd3
 8011ed4:	08035434 	.word	0x08035434
 8011ed8:	20000004 	.word	0x20000004
 8011edc:	0803543c 	.word	0x0803543c
 8011ee0:	20000000 	.word	0x20000000

08011ee4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011ee4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8011ee6:	6802      	ldr	r2, [r0, #0]
 8011ee8:	4b03      	ldr	r3, [pc, #12]	@ (8011ef8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d000      	beq.n	8011ef0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011eee:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8011ef0:	f003 fa9a 	bl	8015428 <HAL_IncTick>
}
 8011ef4:	e7fb      	b.n	8011eee <HAL_TIM_PeriodElapsedCallback+0xa>
 8011ef6:	bf00      	nop
 8011ef8:	40014000 	.word	0x40014000

08011efc <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011efc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011efe:	e7fe      	b.n	8011efe <Error_Handler+0x2>

08011f00 <SystemClock_Config>:
{
 8011f00:	b500      	push	{lr}
 8011f02:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011f04:	2230      	movs	r2, #48	@ 0x30
 8011f06:	2100      	movs	r1, #0
 8011f08:	a808      	add	r0, sp, #32
 8011f0a:	f019 fd79 	bl	802ba00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011f0e:	2300      	movs	r3, #0
 8011f10:	9303      	str	r3, [sp, #12]
 8011f12:	9304      	str	r3, [sp, #16]
 8011f14:	9305      	str	r3, [sp, #20]
 8011f16:	9306      	str	r3, [sp, #24]
 8011f18:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011f1a:	9301      	str	r3, [sp, #4]
 8011f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8011f9c <SystemClock_Config+0x9c>)
 8011f1e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8011f20:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8011f24:	6411      	str	r1, [r2, #64]	@ 0x40
 8011f26:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8011f28:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8011f2c:	9201      	str	r2, [sp, #4]
 8011f2e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011f30:	9302      	str	r3, [sp, #8]
 8011f32:	4b1b      	ldr	r3, [pc, #108]	@ (8011fa0 <SystemClock_Config+0xa0>)
 8011f34:	681a      	ldr	r2, [r3, #0]
 8011f36:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8011f3a:	601a      	str	r2, [r3, #0]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011f42:	9302      	str	r3, [sp, #8]
 8011f44:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8011f46:	2301      	movs	r3, #1
 8011f48:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011f4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8011f4e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011f50:	2202      	movs	r2, #2
 8011f52:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011f54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011f58:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8011f5a:	2304      	movs	r3, #4
 8011f5c:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8011f5e:	2164      	movs	r1, #100	@ 0x64
 8011f60:	9111      	str	r1, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011f62:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8011f64:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011f66:	a808      	add	r0, sp, #32
 8011f68:	f004 f88a 	bl	8016080 <HAL_RCC_OscConfig>
 8011f6c:	b988      	cbnz	r0, 8011f92 <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011f6e:	230f      	movs	r3, #15
 8011f70:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011f72:	2302      	movs	r3, #2
 8011f74:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011f76:	2300      	movs	r3, #0
 8011f78:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8011f7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011f7e:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8011f80:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8011f82:	2103      	movs	r1, #3
 8011f84:	a803      	add	r0, sp, #12
 8011f86:	f004 fae5 	bl	8016554 <HAL_RCC_ClockConfig>
 8011f8a:	b920      	cbnz	r0, 8011f96 <SystemClock_Config+0x96>
}
 8011f8c:	b015      	add	sp, #84	@ 0x54
 8011f8e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8011f92:	f7ff ffb3 	bl	8011efc <Error_Handler>
    Error_Handler();
 8011f96:	f7ff ffb1 	bl	8011efc <Error_Handler>
 8011f9a:	bf00      	nop
 8011f9c:	40023800 	.word	0x40023800
 8011fa0:	40007000 	.word	0x40007000

08011fa4 <main>:
{
 8011fa4:	b500      	push	{lr}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 8011faa:	4b10      	ldr	r3, [pc, #64]	@ (8011fec <main+0x48>)
 8011fac:	4a10      	ldr	r2, [pc, #64]	@ (8011ff0 <main+0x4c>)
 8011fae:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8011fb0:	b662      	cpsie	i
	volatile int i = 1000000;
 8011fb2:	4b10      	ldr	r3, [pc, #64]	@ (8011ff4 <main+0x50>)
 8011fb4:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8011fb6:	e002      	b.n	8011fbe <main+0x1a>
		i--;
 8011fb8:	9b01      	ldr	r3, [sp, #4]
 8011fba:	3b01      	subs	r3, #1
 8011fbc:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8011fbe:	9b01      	ldr	r3, [sp, #4]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	dcf9      	bgt.n	8011fb8 <main+0x14>
  HAL_Init();
 8011fc4:	f003 fa16 	bl	80153f4 <HAL_Init>
  SystemClock_Config();
 8011fc8:	f7ff ff9a 	bl	8011f00 <SystemClock_Config>
  MX_GPIO_Init();
 8011fcc:	f7ff fdce 	bl	8011b6c <MX_GPIO_Init>
  MX_SPI2_Init();
 8011fd0:	f000 f834 	bl	801203c <MX_SPI2_Init>
  MX_I2C1_Init();
 8011fd4:	f7ff fe54 	bl	8011c80 <MX_I2C1_Init>
  MX_SPI1_Init();
 8011fd8:	f000 f80e 	bl	8011ff8 <MX_SPI1_Init>
  osKernelInitialize();
 8011fdc:	f005 faee 	bl	80175bc <osKernelInitialize>
  MX_FREERTOS_Init();
 8011fe0:	f7ff fc46 	bl	8011870 <MX_FREERTOS_Init>
  osKernelStart();
 8011fe4:	f005 fafc 	bl	80175e0 <osKernelStart>
  while (1)
 8011fe8:	e7fe      	b.n	8011fe8 <main+0x44>
 8011fea:	bf00      	nop
 8011fec:	e000ed00 	.word	0xe000ed00
 8011ff0:	08010000 	.word	0x08010000
 8011ff4:	000f4240 	.word	0x000f4240

08011ff8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8011ff8:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8011ffa:	480e      	ldr	r0, [pc, #56]	@ (8012034 <MX_SPI1_Init+0x3c>)
 8011ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8012038 <MX_SPI1_Init+0x40>)
 8011ffe:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8012000:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012004:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012006:	2300      	movs	r3, #0
 8012008:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801200a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801200c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801200e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8012010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012014:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8012016:	2208      	movs	r2, #8
 8012018:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801201a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801201c:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801201e:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8012020:	230a      	movs	r3, #10
 8012022:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8012024:	f004 fc74 	bl	8016910 <HAL_SPI_Init>
 8012028:	b900      	cbnz	r0, 801202c <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801202a:	bd08      	pop	{r3, pc}
    Error_Handler();
 801202c:	f7ff ff66 	bl	8011efc <Error_Handler>
}
 8012030:	e7fb      	b.n	801202a <MX_SPI1_Init+0x32>
 8012032:	bf00      	nop
 8012034:	200008ec 	.word	0x200008ec
 8012038:	40013000 	.word	0x40013000

0801203c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 801203c:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 801203e:	480d      	ldr	r0, [pc, #52]	@ (8012074 <MX_SPI2_Init+0x38>)
 8012040:	4b0d      	ldr	r3, [pc, #52]	@ (8012078 <MX_SPI2_Init+0x3c>)
 8012042:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8012044:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012048:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 801204a:	2300      	movs	r3, #0
 801204c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801204e:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012050:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012052:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8012054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012058:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801205a:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801205c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 801205e:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012060:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8012062:	230a      	movs	r3, #10
 8012064:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8012066:	f004 fc53 	bl	8016910 <HAL_SPI_Init>
 801206a:	b900      	cbnz	r0, 801206e <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 801206c:	bd08      	pop	{r3, pc}
    Error_Handler();
 801206e:	f7ff ff45 	bl	8011efc <Error_Handler>
}
 8012072:	e7fb      	b.n	801206c <MX_SPI2_Init+0x30>
 8012074:	20000894 	.word	0x20000894
 8012078:	40003800 	.word	0x40003800

0801207c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801207c:	b500      	push	{lr}
 801207e:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012080:	2300      	movs	r3, #0
 8012082:	9305      	str	r3, [sp, #20]
 8012084:	9306      	str	r3, [sp, #24]
 8012086:	9307      	str	r3, [sp, #28]
 8012088:	9308      	str	r3, [sp, #32]
 801208a:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 801208c:	6803      	ldr	r3, [r0, #0]
 801208e:	4a28      	ldr	r2, [pc, #160]	@ (8012130 <HAL_SPI_MspInit+0xb4>)
 8012090:	4293      	cmp	r3, r2
 8012092:	d005      	beq.n	80120a0 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8012094:	4a27      	ldr	r2, [pc, #156]	@ (8012134 <HAL_SPI_MspInit+0xb8>)
 8012096:	4293      	cmp	r3, r2
 8012098:	d025      	beq.n	80120e6 <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 801209a:	b00b      	add	sp, #44	@ 0x2c
 801209c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80120a0:	2100      	movs	r1, #0
 80120a2:	9101      	str	r1, [sp, #4]
 80120a4:	4b24      	ldr	r3, [pc, #144]	@ (8012138 <HAL_SPI_MspInit+0xbc>)
 80120a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80120a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80120ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80120ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80120b0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80120b4:	9201      	str	r2, [sp, #4]
 80120b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80120b8:	9102      	str	r1, [sp, #8]
 80120ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80120bc:	f042 0202 	orr.w	r2, r2, #2
 80120c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80120c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120c4:	f003 0302 	and.w	r3, r3, #2
 80120c8:	9302      	str	r3, [sp, #8]
 80120ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80120cc:	2338      	movs	r3, #56	@ 0x38
 80120ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120d0:	2302      	movs	r3, #2
 80120d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80120d4:	2303      	movs	r3, #3
 80120d6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80120d8:	2305      	movs	r3, #5
 80120da:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80120dc:	a905      	add	r1, sp, #20
 80120de:	4817      	ldr	r0, [pc, #92]	@ (801213c <HAL_SPI_MspInit+0xc0>)
 80120e0:	f003 fa46 	bl	8015570 <HAL_GPIO_Init>
 80120e4:	e7d9      	b.n	801209a <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80120e6:	2100      	movs	r1, #0
 80120e8:	9103      	str	r1, [sp, #12]
 80120ea:	4b13      	ldr	r3, [pc, #76]	@ (8012138 <HAL_SPI_MspInit+0xbc>)
 80120ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80120ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80120f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80120f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80120f6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80120fa:	9203      	str	r2, [sp, #12]
 80120fc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80120fe:	9104      	str	r1, [sp, #16]
 8012100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012102:	f042 0202 	orr.w	r2, r2, #2
 8012106:	631a      	str	r2, [r3, #48]	@ 0x30
 8012108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801210a:	f003 0302 	and.w	r3, r3, #2
 801210e:	9304      	str	r3, [sp, #16]
 8012110:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8012112:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8012116:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012118:	2302      	movs	r3, #2
 801211a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801211c:	2303      	movs	r3, #3
 801211e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8012120:	2305      	movs	r3, #5
 8012122:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012124:	a905      	add	r1, sp, #20
 8012126:	4805      	ldr	r0, [pc, #20]	@ (801213c <HAL_SPI_MspInit+0xc0>)
 8012128:	f003 fa22 	bl	8015570 <HAL_GPIO_Init>
}
 801212c:	e7b5      	b.n	801209a <HAL_SPI_MspInit+0x1e>
 801212e:	bf00      	nop
 8012130:	40013000 	.word	0x40013000
 8012134:	40003800 	.word	0x40003800
 8012138:	40023800 	.word	0x40023800
 801213c:	40020400 	.word	0x40020400

08012140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012140:	b500      	push	{lr}
 8012142:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012144:	2200      	movs	r2, #0
 8012146:	9200      	str	r2, [sp, #0]
 8012148:	4b0d      	ldr	r3, [pc, #52]	@ (8012180 <HAL_MspInit+0x40>)
 801214a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 801214c:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8012150:	6459      	str	r1, [r3, #68]	@ 0x44
 8012152:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012154:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8012158:	9100      	str	r1, [sp, #0]
 801215a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801215c:	9201      	str	r2, [sp, #4]
 801215e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8012160:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8012164:	6419      	str	r1, [r3, #64]	@ 0x40
 8012166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801216c:	9301      	str	r3, [sp, #4]
 801216e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8012170:	210f      	movs	r1, #15
 8012172:	f06f 0001 	mvn.w	r0, #1
 8012176:	f003 f9e3 	bl	8015540 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801217a:	b003      	add	sp, #12
 801217c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012180:	40023800 	.word	0x40023800

08012184 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012184:	b530      	push	{r4, r5, lr}
 8012186:	b089      	sub	sp, #36	@ 0x24
 8012188:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 801218a:	2400      	movs	r4, #0
 801218c:	9401      	str	r4, [sp, #4]
 801218e:	4b1d      	ldr	r3, [pc, #116]	@ (8012204 <HAL_InitTick+0x80>)
 8012190:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012192:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8012196:	645a      	str	r2, [r3, #68]	@ 0x44
 8012198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801219a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801219e:	9301      	str	r3, [sp, #4]
 80121a0:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80121a2:	a902      	add	r1, sp, #8
 80121a4:	a803      	add	r0, sp, #12
 80121a6:	f004 faab 	bl	8016700 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80121aa:	f004 fa99 	bl	80166e0 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80121ae:	4a16      	ldr	r2, [pc, #88]	@ (8012208 <HAL_InitTick+0x84>)
 80121b0:	fba2 2300 	umull	r2, r3, r2, r0
 80121b4:	0c9b      	lsrs	r3, r3, #18
 80121b6:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80121b8:	4814      	ldr	r0, [pc, #80]	@ (801220c <HAL_InitTick+0x88>)
 80121ba:	4a15      	ldr	r2, [pc, #84]	@ (8012210 <HAL_InitTick+0x8c>)
 80121bc:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80121be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80121c2:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80121c4:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 80121c6:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80121c8:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80121ca:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80121cc:	f005 f816 	bl	80171fc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80121d0:	4604      	mov	r4, r0
 80121d2:	b110      	cbz	r0, 80121da <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80121d4:	4620      	mov	r0, r4
 80121d6:	b009      	add	sp, #36	@ 0x24
 80121d8:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 80121da:	480c      	ldr	r0, [pc, #48]	@ (801220c <HAL_InitTick+0x88>)
 80121dc:	f004 fec8 	bl	8016f70 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80121e0:	4604      	mov	r4, r0
 80121e2:	2800      	cmp	r0, #0
 80121e4:	d1f6      	bne.n	80121d4 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80121e6:	2018      	movs	r0, #24
 80121e8:	f003 f9ba 	bl	8015560 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80121ec:	2d0f      	cmp	r5, #15
 80121ee:	d901      	bls.n	80121f4 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80121f0:	2401      	movs	r4, #1
 80121f2:	e7ef      	b.n	80121d4 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80121f4:	2200      	movs	r2, #0
 80121f6:	4629      	mov	r1, r5
 80121f8:	2018      	movs	r0, #24
 80121fa:	f003 f9a1 	bl	8015540 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80121fe:	4b05      	ldr	r3, [pc, #20]	@ (8012214 <HAL_InitTick+0x90>)
 8012200:	601d      	str	r5, [r3, #0]
 8012202:	e7e7      	b.n	80121d4 <HAL_InitTick+0x50>
 8012204:	40023800 	.word	0x40023800
 8012208:	431bde83 	.word	0x431bde83
 801220c:	20000944 	.word	0x20000944
 8012210:	40014000 	.word	0x40014000
 8012214:	20000084 	.word	0x20000084

08012218 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012218:	e7fe      	b.n	8012218 <NMI_Handler>

0801221a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801221a:	e7fe      	b.n	801221a <HardFault_Handler>

0801221c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801221c:	e7fe      	b.n	801221c <MemManage_Handler>

0801221e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801221e:	e7fe      	b.n	801221e <BusFault_Handler>

08012220 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012220:	e7fe      	b.n	8012220 <UsageFault_Handler>

08012222 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012222:	4770      	bx	lr

08012224 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8012224:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8012226:	4802      	ldr	r0, [pc, #8]	@ (8012230 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8012228:	f004 fee2 	bl	8016ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 801222c:	bd08      	pop	{r3, pc}
 801222e:	bf00      	nop
 8012230:	20000944 	.word	0x20000944

08012234 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8012234:	2001      	movs	r0, #1
 8012236:	4770      	bx	lr

08012238 <_kill>:

int _kill(int pid, int sig)
{
 8012238:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801223a:	f01a fde5 	bl	802ce08 <__errno>
 801223e:	2316      	movs	r3, #22
 8012240:	6003      	str	r3, [r0, #0]
  return -1;
}
 8012242:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012246:	bd08      	pop	{r3, pc}

08012248 <_exit>:

void _exit (int status)
{
 8012248:	b508      	push	{r3, lr}
  _kill(status, -1);
 801224a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801224e:	f7ff fff3 	bl	8012238 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012252:	e7fe      	b.n	8012252 <_exit+0xa>

08012254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012254:	b570      	push	{r4, r5, r6, lr}
 8012256:	460c      	mov	r4, r1
 8012258:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801225a:	2500      	movs	r5, #0
 801225c:	e006      	b.n	801226c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 801225e:	f3af 8000 	nop.w
 8012262:	4621      	mov	r1, r4
 8012264:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012268:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 801226a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801226c:	42b5      	cmp	r5, r6
 801226e:	dbf6      	blt.n	801225e <_read+0xa>
  }

  return len;
}
 8012270:	4630      	mov	r0, r6
 8012272:	bd70      	pop	{r4, r5, r6, pc}

08012274 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012274:	b570      	push	{r4, r5, r6, lr}
 8012276:	460c      	mov	r4, r1
 8012278:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801227a:	2500      	movs	r5, #0
 801227c:	e004      	b.n	8012288 <_write+0x14>
  {
    __io_putchar(*ptr++);
 801227e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012282:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012286:	3501      	adds	r5, #1
 8012288:	42b5      	cmp	r5, r6
 801228a:	dbf8      	blt.n	801227e <_write+0xa>
  }
  return len;
}
 801228c:	4630      	mov	r0, r6
 801228e:	bd70      	pop	{r4, r5, r6, pc}

08012290 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8012290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012294:	4770      	bx	lr

08012296 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8012296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801229a:	604b      	str	r3, [r1, #4]
  return 0;
}
 801229c:	2000      	movs	r0, #0
 801229e:	4770      	bx	lr

080122a0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80122a0:	2001      	movs	r0, #1
 80122a2:	4770      	bx	lr

080122a4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80122a4:	2000      	movs	r0, #0
 80122a6:	4770      	bx	lr

080122a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80122a8:	b510      	push	{r4, lr}
 80122aa:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80122ac:	4a0c      	ldr	r2, [pc, #48]	@ (80122e0 <_sbrk+0x38>)
 80122ae:	490d      	ldr	r1, [pc, #52]	@ (80122e4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80122b0:	480d      	ldr	r0, [pc, #52]	@ (80122e8 <_sbrk+0x40>)
 80122b2:	6800      	ldr	r0, [r0, #0]
 80122b4:	b140      	cbz	r0, 80122c8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80122b6:	480c      	ldr	r0, [pc, #48]	@ (80122e8 <_sbrk+0x40>)
 80122b8:	6800      	ldr	r0, [r0, #0]
 80122ba:	4403      	add	r3, r0
 80122bc:	1a52      	subs	r2, r2, r1
 80122be:	4293      	cmp	r3, r2
 80122c0:	d806      	bhi.n	80122d0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80122c2:	4a09      	ldr	r2, [pc, #36]	@ (80122e8 <_sbrk+0x40>)
 80122c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80122c6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80122c8:	4807      	ldr	r0, [pc, #28]	@ (80122e8 <_sbrk+0x40>)
 80122ca:	4c08      	ldr	r4, [pc, #32]	@ (80122ec <_sbrk+0x44>)
 80122cc:	6004      	str	r4, [r0, #0]
 80122ce:	e7f2      	b.n	80122b6 <_sbrk+0xe>
    errno = ENOMEM;
 80122d0:	f01a fd9a 	bl	802ce08 <__errno>
 80122d4:	230c      	movs	r3, #12
 80122d6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80122d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80122dc:	e7f3      	b.n	80122c6 <_sbrk+0x1e>
 80122de:	bf00      	nop
 80122e0:	20020000 	.word	0x20020000
 80122e4:	00000800 	.word	0x00000800
 80122e8:	20000990 	.word	0x20000990
 80122ec:	20019128 	.word	0x20019128

080122f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80122f0:	4a03      	ldr	r2, [pc, #12]	@ (8012300 <SystemInit+0x10>)
 80122f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80122f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80122fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80122fe:	4770      	bx	lr
 8012300:	e000ed00 	.word	0xe000ed00

08012304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8012304:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801233c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8012308:	f7ff fff2 	bl	80122f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801230c:	480c      	ldr	r0, [pc, #48]	@ (8012340 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801230e:	490d      	ldr	r1, [pc, #52]	@ (8012344 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012310:	4a0d      	ldr	r2, [pc, #52]	@ (8012348 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012314:	e002      	b.n	801231c <LoopCopyDataInit>

08012316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801231a:	3304      	adds	r3, #4

0801231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012320:	d3f9      	bcc.n	8012316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012322:	4a0a      	ldr	r2, [pc, #40]	@ (801234c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012324:	4c0a      	ldr	r4, [pc, #40]	@ (8012350 <LoopFillZerobss+0x22>)
  movs r3, #0
 8012326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012328:	e001      	b.n	801232e <LoopFillZerobss>

0801232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801232c:	3204      	adds	r2, #4

0801232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012330:	d3fb      	bcc.n	801232a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012332:	f01a fd77 	bl	802ce24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012336:	f7ff fe35 	bl	8011fa4 <main>
  bx  lr    
 801233a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801233c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8012340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012344:	200007e8 	.word	0x200007e8
  ldr r2, =_sidata
 8012348:	0803aedc 	.word	0x0803aedc
  ldr r2, =_sbss
 801234c:	200007e8 	.word	0x200007e8
  ldr r4, =_ebss
 8012350:	20019128 	.word	0x20019128

08012354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012354:	e7fe      	b.n	8012354 <ADC_IRQHandler>
	...

08012358 <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 8012358:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 801235a:	4b03      	ldr	r3, [pc, #12]	@ (8012368 <handle_OPTIONS_method+0x10>)
 801235c:	4a03      	ldr	r2, [pc, #12]	@ (801236c <handle_OPTIONS_method+0x14>)
 801235e:	21c8      	movs	r1, #200	@ 0xc8
 8012360:	f010 fe90 	bl	8023084 <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8012364:	bd08      	pop	{r3, pc}
 8012366:	bf00      	nop
 8012368:	080398c0 	.word	0x080398c0
 801236c:	08035480 	.word	0x08035480

08012370 <handle_firmware_deactivate>:
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 8012370:	b570      	push	{r4, r5, r6, lr}
 8012372:	b084      	sub	sp, #16
 8012374:	4605      	mov	r5, r0
 8012376:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012378:	ae02      	add	r6, sp, #8
 801237a:	4914      	ldr	r1, [pc, #80]	@ (80123cc <handle_firmware_deactivate+0x5c>)
 801237c:	4630      	mov	r0, r6
 801237e:	f011 f80b 	bl	8023398 <mg_str_s>
 8012382:	2300      	movs	r3, #0
 8012384:	9300      	str	r3, [sp, #0]
 8012386:	e896 000c 	ldmia.w	r6, {r2, r3}
 801238a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801238e:	f011 fa25 	bl	80237dc <mg_match>
 8012392:	b198      	cbz	r0, 80123bc <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8012394:	4b0e      	ldr	r3, [pc, #56]	@ (80123d0 <handle_firmware_deactivate+0x60>)
 8012396:	6a1b      	ldr	r3, [r3, #32]
 8012398:	480e      	ldr	r0, [pc, #56]	@ (80123d4 <handle_firmware_deactivate+0x64>)
 801239a:	4798      	blx	r3
 801239c:	b138      	cbz	r0, 80123ae <handle_firmware_deactivate+0x3e>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 801239e:	4b0e      	ldr	r3, [pc, #56]	@ (80123d8 <handle_firmware_deactivate+0x68>)
 80123a0:	4a0e      	ldr	r2, [pc, #56]	@ (80123dc <handle_firmware_deactivate+0x6c>)
 80123a2:	21c8      	movs	r1, #200	@ 0xc8
 80123a4:	4628      	mov	r0, r5
 80123a6:	f010 fe6d 	bl	8023084 <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 80123aa:	b004      	add	sp, #16
 80123ac:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 80123ae:	4b0c      	ldr	r3, [pc, #48]	@ (80123e0 <handle_firmware_deactivate+0x70>)
 80123b0:	4a0a      	ldr	r2, [pc, #40]	@ (80123dc <handle_firmware_deactivate+0x6c>)
 80123b2:	21c8      	movs	r1, #200	@ 0xc8
 80123b4:	4628      	mov	r0, r5
 80123b6:	f010 fe65 	bl	8023084 <mg_http_reply>
 80123ba:	e7f6      	b.n	80123aa <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80123bc:	4b09      	ldr	r3, [pc, #36]	@ (80123e4 <handle_firmware_deactivate+0x74>)
 80123be:	4a07      	ldr	r2, [pc, #28]	@ (80123dc <handle_firmware_deactivate+0x6c>)
 80123c0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80123c4:	4628      	mov	r0, r5
 80123c6:	f010 fe5d 	bl	8023084 <mg_http_reply>
}
 80123ca:	e7ee      	b.n	80123aa <handle_firmware_deactivate+0x3a>
 80123cc:	08035520 	.word	0x08035520
 80123d0:	2000001c 	.word	0x2000001c
 80123d4:	0803500c 	.word	0x0803500c
 80123d8:	08035528 	.word	0x08035528
 80123dc:	08035564 	.word	0x08035564
 80123e0:	080355d4 	.word	0x080355d4
 80123e4:	08035618 	.word	0x08035618

080123e8 <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 80123e8:	b570      	push	{r4, r5, r6, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	4605      	mov	r5, r0
 80123ee:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80123f0:	ae02      	add	r6, sp, #8
 80123f2:	4912      	ldr	r1, [pc, #72]	@ (801243c <handle_web_files_remove+0x54>)
 80123f4:	4630      	mov	r0, r6
 80123f6:	f010 ffcf 	bl	8023398 <mg_str_s>
 80123fa:	2300      	movs	r3, #0
 80123fc:	9300      	str	r3, [sp, #0]
 80123fe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012406:	f011 f9e9 	bl	80237dc <mg_match>
 801240a:	b178      	cbz	r0, 801242c <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 801240c:	4e0c      	ldr	r6, [pc, #48]	@ (8012440 <handle_web_files_remove+0x58>)
 801240e:	6a33      	ldr	r3, [r6, #32]
 8012410:	4c0c      	ldr	r4, [pc, #48]	@ (8012444 <handle_web_files_remove+0x5c>)
 8012412:	4620      	mov	r0, r4
 8012414:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 8012416:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8012418:	4620      	mov	r0, r4
 801241a:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 801241c:	4b0a      	ldr	r3, [pc, #40]	@ (8012448 <handle_web_files_remove+0x60>)
 801241e:	4a0b      	ldr	r2, [pc, #44]	@ (801244c <handle_web_files_remove+0x64>)
 8012420:	21c8      	movs	r1, #200	@ 0xc8
 8012422:	4628      	mov	r0, r5
 8012424:	f010 fe2e 	bl	8023084 <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 8012428:	b004      	add	sp, #16
 801242a:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801242c:	4b08      	ldr	r3, [pc, #32]	@ (8012450 <handle_web_files_remove+0x68>)
 801242e:	4a07      	ldr	r2, [pc, #28]	@ (801244c <handle_web_files_remove+0x64>)
 8012430:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012434:	4628      	mov	r0, r5
 8012436:	f010 fe25 	bl	8023084 <mg_http_reply>
}
 801243a:	e7f5      	b.n	8012428 <handle_web_files_remove+0x40>
 801243c:	08035520 	.word	0x08035520
 8012440:	2000001c 	.word	0x2000001c
 8012444:	08034ff8 	.word	0x08034ff8
 8012448:	08035668 	.word	0x08035668
 801244c:	08035564 	.word	0x08035564
 8012450:	08035618 	.word	0x08035618

08012454 <handler_logout>:
static void handler_logout(struct mg_connection *c,struct mg_http_message *hm){
 8012454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012456:	b0c3      	sub	sp, #268	@ 0x10c
 8012458:	4606      	mov	r6, r0
 801245a:	460d      	mov	r5, r1
	char username[128] = {0};
 801245c:	2400      	movs	r4, #0
 801245e:	9422      	str	r4, [sp, #136]	@ 0x88
 8012460:	277c      	movs	r7, #124	@ 0x7c
 8012462:	463a      	mov	r2, r7
 8012464:	4621      	mov	r1, r4
 8012466:	a823      	add	r0, sp, #140	@ 0x8c
 8012468:	f019 faca 	bl	802ba00 <memset>
	char pass[128] = {0};
 801246c:	9402      	str	r4, [sp, #8]
 801246e:	463a      	mov	r2, r7
 8012470:	4621      	mov	r1, r4
 8012472:	a803      	add	r0, sp, #12
 8012474:	f019 fac4 	bl	802ba00 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8012478:	2280      	movs	r2, #128	@ 0x80
 801247a:	9200      	str	r2, [sp, #0]
 801247c:	ab02      	add	r3, sp, #8
 801247e:	a922      	add	r1, sp, #136	@ 0x88
 8012480:	4628      	mov	r0, r5
 8012482:	f011 feb1 	bl	80241e8 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8012486:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 801248a:	b113      	cbz	r3, 8012492 <handler_logout+0x3e>
 801248c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012490:	b962      	cbnz	r2, 80124ac <handler_logout+0x58>
	}else if (username[0] == '\0' && pass[0] != '\0') {
 8012492:	b913      	cbnz	r3, 801249a <handler_logout+0x46>
 8012494:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012498:	bb23      	cbnz	r3, 80124e4 <handler_logout+0x90>
        mg_http_reply(c, 404, headers, //TODO delete for release,
 801249a:	4b1e      	ldr	r3, [pc, #120]	@ (8012514 <handler_logout+0xc0>)
 801249c:	4a1e      	ldr	r2, [pc, #120]	@ (8012518 <handler_logout+0xc4>)
 801249e:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80124a2:	4630      	mov	r0, r6
 80124a4:	f010 fdee 	bl	8023084 <mg_http_reply>
}
 80124a8:	b043      	add	sp, #268	@ 0x10c
 80124aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mg_http_reply(c, 400, headers, //TODO delete for release,
 80124ac:	4b1b      	ldr	r3, [pc, #108]	@ (801251c <handler_logout+0xc8>)
 80124ae:	4a1a      	ldr	r2, [pc, #104]	@ (8012518 <handler_logout+0xc4>)
 80124b0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80124b4:	4630      	mov	r0, r6
 80124b6:	f010 fde5 	bl	8023084 <mg_http_reply>
        return;
 80124ba:	e7f5      	b.n	80124a8 <handler_logout+0x54>
				web_tokens[i].token[0] = '\0';
 80124bc:	4a18      	ldr	r2, [pc, #96]	@ (8012520 <handler_logout+0xcc>)
 80124be:	23b8      	movs	r3, #184	@ 0xb8
 80124c0:	fb04 f303 	mul.w	r3, r4, r3
 80124c4:	18d0      	adds	r0, r2, r3
 80124c6:	2100      	movs	r1, #0
 80124c8:	f880 1080 	strb.w	r1, [r0, #128]	@ 0x80
				web_tokens[i].expare = 0;
 80124cc:	2400      	movs	r4, #0
 80124ce:	2500      	movs	r5, #0
 80124d0:	e9c0 452c 	strd	r4, r5, [r0, #176]	@ 0xb0
				web_tokens[i].user[0] = '\0';
 80124d4:	54d1      	strb	r1, [r2, r3]
		        mg_http_reply(c, 200, headers, //TODO delete for release,
 80124d6:	4b13      	ldr	r3, [pc, #76]	@ (8012524 <handler_logout+0xd0>)
 80124d8:	4a0f      	ldr	r2, [pc, #60]	@ (8012518 <handler_logout+0xc4>)
 80124da:	21c8      	movs	r1, #200	@ 0xc8
 80124dc:	4630      	mov	r0, r6
 80124de:	f010 fdd1 	bl	8023084 <mg_http_reply>
		        return;
 80124e2:	e7e1      	b.n	80124a8 <handler_logout+0x54>
		for (i=0;i<user_list_size; i++){
 80124e4:	2400      	movs	r4, #0
 80124e6:	2c09      	cmp	r4, #9
 80124e8:	dc0c      	bgt.n	8012504 <handler_logout+0xb0>
			if((strcmp(web_tokens[i].token, pass) == 0)){
 80124ea:	23b8      	movs	r3, #184	@ 0xb8
 80124ec:	fb04 f303 	mul.w	r3, r4, r3
 80124f0:	3380      	adds	r3, #128	@ 0x80
 80124f2:	a902      	add	r1, sp, #8
 80124f4:	480a      	ldr	r0, [pc, #40]	@ (8012520 <handler_logout+0xcc>)
 80124f6:	4418      	add	r0, r3
 80124f8:	f7fd fe72 	bl	80101e0 <strcmp>
 80124fc:	2800      	cmp	r0, #0
 80124fe:	d0dd      	beq.n	80124bc <handler_logout+0x68>
		for (i=0;i<user_list_size; i++){
 8012500:	3401      	adds	r4, #1
 8012502:	e7f0      	b.n	80124e6 <handler_logout+0x92>
        mg_http_reply(c, 404, headers,
 8012504:	4b08      	ldr	r3, [pc, #32]	@ (8012528 <handler_logout+0xd4>)
 8012506:	4a04      	ldr	r2, [pc, #16]	@ (8012518 <handler_logout+0xc4>)
 8012508:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 801250c:	4630      	mov	r0, r6
 801250e:	f010 fdb9 	bl	8023084 <mg_http_reply>
        return;
 8012512:	e7c9      	b.n	80124a8 <handler_logout+0x54>
 8012514:	080357a0 	.word	0x080357a0
 8012518:	08035564 	.word	0x08035564
 801251c:	080356b0 	.word	0x080356b0
 8012520:	20000998 	.word	0x20000998
 8012524:	08035730 	.word	0x08035730
 8012528:	0803576c 	.word	0x0803576c

0801252c <handle_login>:
static void handle_login(struct mg_connection *c, tokens_list_t *u) {
 801252c:	b530      	push	{r4, r5, lr}
 801252e:	b0c7      	sub	sp, #284	@ 0x11c
 8012530:	4604      	mov	r4, r0
 8012532:	460d      	mov	r5, r1
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8012534:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8012538:	f013 0240 	ands.w	r2, r3, #64	@ 0x40
 801253c:	d01f      	beq.n	801257e <handle_login+0x52>
 801253e:	4b12      	ldr	r3, [pc, #72]	@ (8012588 <handle_login+0x5c>)
              cookie_name, u->token,
 8012540:	f105 0180 	add.w	r1, r5, #128	@ 0x80
  mg_snprintf(cookie, sizeof(cookie),
 8012544:	b1ea      	cbz	r2, 8012582 <handle_login+0x56>
 8012546:	4a11      	ldr	r2, [pc, #68]	@ (801258c <handle_login+0x60>)
 8012548:	4811      	ldr	r0, [pc, #68]	@ (8012590 <handle_login+0x64>)
 801254a:	9002      	str	r0, [sp, #8]
 801254c:	9201      	str	r2, [sp, #4]
 801254e:	9100      	str	r1, [sp, #0]
 8012550:	4a10      	ldr	r2, [pc, #64]	@ (8012594 <handle_login+0x68>)
 8012552:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012556:	a806      	add	r0, sp, #24
 8012558:	f010 f894 	bl	8022684 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->user));
 801255c:	9505      	str	r5, [sp, #20]
 801255e:	2200      	movs	r2, #0
 8012560:	9204      	str	r2, [sp, #16]
 8012562:	4b0d      	ldr	r3, [pc, #52]	@ (8012598 <handle_login+0x6c>)
 8012564:	9303      	str	r3, [sp, #12]
 8012566:	490d      	ldr	r1, [pc, #52]	@ (801259c <handle_login+0x70>)
 8012568:	9102      	str	r1, [sp, #8]
 801256a:	9201      	str	r2, [sp, #4]
 801256c:	9300      	str	r3, [sp, #0]
 801256e:	4b0c      	ldr	r3, [pc, #48]	@ (80125a0 <handle_login+0x74>)
 8012570:	aa06      	add	r2, sp, #24
 8012572:	21c8      	movs	r1, #200	@ 0xc8
 8012574:	4620      	mov	r0, r4
 8012576:	f010 fd85 	bl	8023084 <mg_http_reply>
}
 801257a:	b047      	add	sp, #284	@ 0x11c
 801257c:	bd30      	pop	{r4, r5, pc}
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 801257e:	4b09      	ldr	r3, [pc, #36]	@ (80125a4 <handle_login+0x78>)
 8012580:	e7de      	b.n	8012540 <handle_login+0x14>
  mg_snprintf(cookie, sizeof(cookie),
 8012582:	4a09      	ldr	r2, [pc, #36]	@ (80125a8 <handle_login+0x7c>)
 8012584:	e7e0      	b.n	8012548 <handle_login+0x1c>
 8012586:	bf00      	nop
 8012588:	08035818 	.word	0x08035818
 801258c:	0803583c 	.word	0x0803583c
 8012590:	0002a300 	.word	0x0002a300
 8012594:	08035848 	.word	0x08035848
 8012598:	08021915 	.word	0x08021915
 801259c:	080365f4 	.word	0x080365f4
 80125a0:	0803588c 	.word	0x0803588c
 80125a4:	0803582c 	.word	0x0803582c
 80125a8:	08035a68 	.word	0x08035a68

080125ac <auth>:
static bool auth(struct mg_connection *c, struct mg_http_message *hm, bool set_cookie){
 80125ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125b0:	b0e5      	sub	sp, #404	@ 0x194
 80125b2:	4605      	mov	r5, r0
 80125b4:	460c      	mov	r4, r1
 80125b6:	4616      	mov	r6, r2
	char pass_digest[sha1_str_len] = {0};
 80125b8:	2100      	movs	r1, #0
 80125ba:	9159      	str	r1, [sp, #356]	@ 0x164
 80125bc:	2225      	movs	r2, #37	@ 0x25
 80125be:	a85a      	add	r0, sp, #360	@ 0x168
 80125c0:	f019 fa1e 	bl	802ba00 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 80125c4:	2280      	movs	r2, #128	@ 0x80
 80125c6:	9200      	str	r2, [sp, #0]
 80125c8:	ab02      	add	r3, sp, #8
 80125ca:	a922      	add	r1, sp, #136	@ 0x88
 80125cc:	4620      	mov	r0, r4
 80125ce:	f011 fe0b 	bl	80241e8 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 80125d2:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80125d6:	b113      	cbz	r3, 80125de <auth+0x32>
 80125d8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80125dc:	b94a      	cbnz	r2, 80125f2 <auth+0x46>
	} else if (username[0] == '\0' && pass[0] != '\0') {
 80125de:	2b00      	cmp	r3, #0
 80125e0:	f040 80ad 	bne.w	801273e <auth+0x192>
 80125e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	f040 80a4 	bne.w	8012736 <auth+0x18a>
	return false;
 80125ee:	2000      	movs	r0, #0
 80125f0:	e0a6      	b.n	8012740 <auth+0x194>
		mg_sha1_init(&sha1_ctx);
 80125f2:	a842      	add	r0, sp, #264	@ 0x108
 80125f4:	f010 fe1e 	bl	8023234 <mg_sha1_init>
		mg_sha1_update(&sha1_ctx, (const unsigned char *)pass, strlen(pass) * sizeof(char));
 80125f8:	a802      	add	r0, sp, #8
 80125fa:	f7fd fe51 	bl	80102a0 <strlen>
 80125fe:	4602      	mov	r2, r0
 8012600:	a902      	add	r1, sp, #8
 8012602:	a842      	add	r0, sp, #264	@ 0x108
 8012604:	f010 fe30 	bl	8023268 <mg_sha1_update>
		mg_sha1_final((unsigned char *)&pass_digest, &sha1_ctx); // calculate sha1 pass
 8012608:	a942      	add	r1, sp, #264	@ 0x108
 801260a:	a859      	add	r0, sp, #356	@ 0x164
 801260c:	f010 fe66 	bl	80232dc <mg_sha1_final>
		for (i=0; i< user_list_size; i++ ){
 8012610:	2400      	movs	r4, #0
 8012612:	e026      	b.n	8012662 <auth+0xb6>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 8012614:	4649      	mov	r1, r9
 8012616:	4628      	mov	r0, r5
 8012618:	f7ff ff88 	bl	801252c <handle_login>
 801261c:	e062      	b.n	80126e4 <auth+0x138>
					strncpy(web_tokens[1].user, username, sizeof(web_tokens[1].user));
 801261e:	4f4a      	ldr	r7, [pc, #296]	@ (8012748 <auth+0x19c>)
 8012620:	2280      	movs	r2, #128	@ 0x80
 8012622:	a922      	add	r1, sp, #136	@ 0x88
 8012624:	4638      	mov	r0, r7
 8012626:	f019 fa32 	bl	802ba8e <strncpy>
					web_tokens[1].expare = mg_now() + token_life_time;
 801262a:	f016 fa39 	bl	8028aa0 <mg_now>
 801262e:	4b47      	ldr	r3, [pc, #284]	@ (801274c <auth+0x1a0>)
 8012630:	18c3      	adds	r3, r0, r3
 8012632:	f141 0100 	adc.w	r1, r1, #0
 8012636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801263a:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
					mg_random_str(web_tokens[1].token, sha1_str_len -1);
 801263e:	2128      	movs	r1, #40	@ 0x28
 8012640:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8012644:	f012 fa16 	bl	8024a74 <mg_random_str>
					if (set_cookie)handle_login(c, &web_tokens[i]);
 8012648:	b90e      	cbnz	r6, 801264e <auth+0xa2>
					return true;
 801264a:	2001      	movs	r0, #1
 801264c:	e078      	b.n	8012740 <auth+0x194>
					if (set_cookie)handle_login(c, &web_tokens[i]);
 801264e:	21b8      	movs	r1, #184	@ 0xb8
 8012650:	f1a7 03b8 	sub.w	r3, r7, #184	@ 0xb8
 8012654:	fb01 3104 	mla	r1, r1, r4, r3
 8012658:	4628      	mov	r0, r5
 801265a:	f7ff ff67 	bl	801252c <handle_login>
 801265e:	e7f4      	b.n	801264a <auth+0x9e>
		for (i=0; i< user_list_size; i++ ){
 8012660:	3401      	adds	r4, #1
 8012662:	2c09      	cmp	r4, #9
 8012664:	dc40      	bgt.n	80126e8 <auth+0x13c>
			if((strcmp(web_users[i].user, username) == 0) && (strcmp(web_users[i].pass_digest, pass_digest) == 0)){
 8012666:	a922      	add	r1, sp, #136	@ 0x88
 8012668:	20a9      	movs	r0, #169	@ 0xa9
 801266a:	4b39      	ldr	r3, [pc, #228]	@ (8012750 <auth+0x1a4>)
 801266c:	fb00 3004 	mla	r0, r0, r4, r3
 8012670:	f7fd fdb6 	bl	80101e0 <strcmp>
 8012674:	2800      	cmp	r0, #0
 8012676:	d1f3      	bne.n	8012660 <auth+0xb4>
 8012678:	23a9      	movs	r3, #169	@ 0xa9
 801267a:	fb04 f303 	mul.w	r3, r4, r3
 801267e:	3380      	adds	r3, #128	@ 0x80
 8012680:	a959      	add	r1, sp, #356	@ 0x164
 8012682:	4833      	ldr	r0, [pc, #204]	@ (8012750 <auth+0x1a4>)
 8012684:	4418      	add	r0, r3
 8012686:	f7fd fdab 	bl	80101e0 <strcmp>
 801268a:	2800      	cmp	r0, #0
 801268c:	d1e8      	bne.n	8012660 <auth+0xb4>
					if(web_tokens[i].expare < mg_now()){
 801268e:	4b31      	ldr	r3, [pc, #196]	@ (8012754 <auth+0x1a8>)
 8012690:	22b8      	movs	r2, #184	@ 0xb8
 8012692:	fb02 3304 	mla	r3, r2, r4, r3
 8012696:	f8d3 80b0 	ldr.w	r8, [r3, #176]	@ 0xb0
 801269a:	f8d3 70b4 	ldr.w	r7, [r3, #180]	@ 0xb4
 801269e:	f016 f9ff 	bl	8028aa0 <mg_now>
 80126a2:	4580      	cmp	r8, r0
 80126a4:	418f      	sbcs	r7, r1
 80126a6:	d2ba      	bcs.n	801261e <auth+0x72>
						strncpy(web_tokens[i].user, username, sizeof(web_tokens[i].user));
 80126a8:	27b8      	movs	r7, #184	@ 0xb8
 80126aa:	fb04 f707 	mul.w	r7, r4, r7
 80126ae:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8012754 <auth+0x1a8>
 80126b2:	eb07 0908 	add.w	r9, r7, r8
 80126b6:	2280      	movs	r2, #128	@ 0x80
 80126b8:	a922      	add	r1, sp, #136	@ 0x88
 80126ba:	4648      	mov	r0, r9
 80126bc:	f019 f9e7 	bl	802ba8e <strncpy>
						web_tokens[i].expare = mg_now() + token_life_time;
 80126c0:	f016 f9ee 	bl	8028aa0 <mg_now>
 80126c4:	4b21      	ldr	r3, [pc, #132]	@ (801274c <auth+0x1a0>)
 80126c6:	18c0      	adds	r0, r0, r3
 80126c8:	f141 0100 	adc.w	r1, r1, #0
 80126cc:	f8c9 00b0 	str.w	r0, [r9, #176]	@ 0xb0
 80126d0:	f8c9 10b4 	str.w	r1, [r9, #180]	@ 0xb4
						mg_random_str(web_tokens[i].token, sha1_str_len -1);
 80126d4:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80126d8:	2128      	movs	r1, #40	@ 0x28
 80126da:	4440      	add	r0, r8
 80126dc:	f012 f9ca 	bl	8024a74 <mg_random_str>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 80126e0:	2e00      	cmp	r6, #0
 80126e2:	d197      	bne.n	8012614 <auth+0x68>
						return true;
 80126e4:	2001      	movs	r0, #1
 80126e6:	e02b      	b.n	8012740 <auth+0x194>
	return false;
 80126e8:	2000      	movs	r0, #0
 80126ea:	e029      	b.n	8012740 <auth+0x194>
				        		"{\"status\":\"success\",\"message\":\"Token is valid\", \"user\": \"%s\"}\r\n", web_tokens[i].user);
 80126ec:	22b8      	movs	r2, #184	@ 0xb8
 80126ee:	4b19      	ldr	r3, [pc, #100]	@ (8012754 <auth+0x1a8>)
 80126f0:	fb02 3304 	mla	r3, r2, r4, r3
				if (set_cookie) mg_http_reply(c, 200, headers,
 80126f4:	9300      	str	r3, [sp, #0]
 80126f6:	4b18      	ldr	r3, [pc, #96]	@ (8012758 <auth+0x1ac>)
 80126f8:	4a18      	ldr	r2, [pc, #96]	@ (801275c <auth+0x1b0>)
 80126fa:	21c8      	movs	r1, #200	@ 0xc8
 80126fc:	4628      	mov	r0, r5
 80126fe:	f010 fcc1 	bl	8023084 <mg_http_reply>
 8012702:	e016      	b.n	8012732 <auth+0x186>
		for (i=0;i<user_list_size; i++){
 8012704:	3401      	adds	r4, #1
 8012706:	2c09      	cmp	r4, #9
 8012708:	dc17      	bgt.n	801273a <auth+0x18e>
			if((strcmp(web_tokens[i].token, pass) == 0 && web_tokens[i].user[0] != 0)){// && (web_tokens[i].expare > mg_now())
 801270a:	23b8      	movs	r3, #184	@ 0xb8
 801270c:	fb04 f303 	mul.w	r3, r4, r3
 8012710:	3380      	adds	r3, #128	@ 0x80
 8012712:	a902      	add	r1, sp, #8
 8012714:	480f      	ldr	r0, [pc, #60]	@ (8012754 <auth+0x1a8>)
 8012716:	4418      	add	r0, r3
 8012718:	f7fd fd62 	bl	80101e0 <strcmp>
 801271c:	2800      	cmp	r0, #0
 801271e:	d1f1      	bne.n	8012704 <auth+0x158>
 8012720:	23b8      	movs	r3, #184	@ 0xb8
 8012722:	fb04 f303 	mul.w	r3, r4, r3
 8012726:	4a0b      	ldr	r2, [pc, #44]	@ (8012754 <auth+0x1a8>)
 8012728:	5cd3      	ldrb	r3, [r2, r3]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d0ea      	beq.n	8012704 <auth+0x158>
				if (set_cookie) mg_http_reply(c, 200, headers,
 801272e:	2e00      	cmp	r6, #0
 8012730:	d1dc      	bne.n	80126ec <auth+0x140>
				return true;
 8012732:	2001      	movs	r0, #1
 8012734:	e004      	b.n	8012740 <auth+0x194>
		for (i=0;i<user_list_size; i++){
 8012736:	2400      	movs	r4, #0
 8012738:	e7e5      	b.n	8012706 <auth+0x15a>
	return false;
 801273a:	2000      	movs	r0, #0
 801273c:	e000      	b.n	8012740 <auth+0x194>
 801273e:	2000      	movs	r0, #0
}
 8012740:	b065      	add	sp, #404	@ 0x194
 8012742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012746:	bf00      	nop
 8012748:	20000a50 	.word	0x20000a50
 801274c:	0a4cb800 	.word	0x0a4cb800
 8012750:	200010c8 	.word	0x200010c8
 8012754:	20000998 	.word	0x20000998
 8012758:	08035894 	.word	0x08035894
 801275c:	08035564 	.word	0x08035564

08012760 <handler_authanticate>:
static void handler_authanticate(struct mg_connection *c,struct mg_http_message *hm){
 8012760:	b510      	push	{r4, lr}
 8012762:	4604      	mov	r4, r0
	if ( auth(c, hm, 1) ){
 8012764:	2201      	movs	r2, #1
 8012766:	f7ff ff21 	bl	80125ac <auth>
 801276a:	b100      	cbz	r0, 801276e <handler_authanticate+0xe>
}
 801276c:	bd10      	pop	{r4, pc}
        mg_http_reply(c, 403, headers, //TODO delete for release,
 801276e:	4b04      	ldr	r3, [pc, #16]	@ (8012780 <handler_authanticate+0x20>)
 8012770:	4a04      	ldr	r2, [pc, #16]	@ (8012784 <handler_authanticate+0x24>)
 8012772:	f240 1193 	movw	r1, #403	@ 0x193
 8012776:	4620      	mov	r0, r4
 8012778:	f010 fc84 	bl	8023084 <mg_http_reply>
}
 801277c:	e7f6      	b.n	801276c <handler_authanticate+0xc>
 801277e:	bf00      	nop
 8012780:	080358d4 	.word	0x080358d4
 8012784:	08035564 	.word	0x08035564

08012788 <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 8012788:	b510      	push	{r4, lr}
 801278a:	b090      	sub	sp, #64	@ 0x40
 801278c:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 801278e:	a809      	add	r0, sp, #36	@ 0x24
 8012790:	f007 fa6a 	bl	8019c68 <vPortGetHeapStats>
	logging(1, "Start execute API RAM status");
 8012794:	490c      	ldr	r1, [pc, #48]	@ (80127c8 <handle_ram_status_get+0x40>)
 8012796:	2001      	movs	r0, #1
 8012798:	f7ff fb06 	bl	8011da8 <logging>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 801279c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801279e:	9306      	str	r3, [sp, #24]
 80127a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127a2:	9305      	str	r3, [sp, #20]
 80127a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80127a6:	9304      	str	r3, [sp, #16]
 80127a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127aa:	9303      	str	r3, [sp, #12]
 80127ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127ae:	9302      	str	r3, [sp, #8]
 80127b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127b2:	9301      	str	r3, [sp, #4]
 80127b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	4b04      	ldr	r3, [pc, #16]	@ (80127cc <handle_ram_status_get+0x44>)
 80127ba:	4a05      	ldr	r2, [pc, #20]	@ (80127d0 <handle_ram_status_get+0x48>)
 80127bc:	21c8      	movs	r1, #200	@ 0xc8
 80127be:	4620      	mov	r0, r4
 80127c0:	f010 fc60 	bl	8023084 <mg_http_reply>
}
 80127c4:	b010      	add	sp, #64	@ 0x40
 80127c6:	bd10      	pop	{r4, pc}
 80127c8:	08035904 	.word	0x08035904
 80127cc:	08035924 	.word	0x08035924
 80127d0:	08035a28 	.word	0x08035a28

080127d4 <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 80127d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127d6:	b091      	sub	sp, #68	@ 0x44
 80127d8:	4606      	mov	r6, r0
 80127da:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80127dc:	ad0c      	add	r5, sp, #48	@ 0x30
 80127de:	494b      	ldr	r1, [pc, #300]	@ (801290c <handle_io_status_get+0x138>)
 80127e0:	4628      	mov	r0, r5
 80127e2:	f010 fdd9 	bl	8023398 <mg_str_s>
 80127e6:	2300      	movs	r3, #0
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	e895 000c 	ldmia.w	r5, {r2, r3}
 80127ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80127f2:	f010 fff3 	bl	80237dc <mg_match>
 80127f6:	b328      	cbz	r0, 8012844 <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 80127f8:	4c45      	ldr	r4, [pc, #276]	@ (8012910 <handle_io_status_get+0x13c>)
 80127fa:	6823      	ldr	r3, [r4, #0]
 80127fc:	2200      	movs	r2, #0
 80127fe:	2101      	movs	r1, #1
 8012800:	a80a      	add	r0, sp, #40	@ 0x28
 8012802:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8012804:	6823      	ldr	r3, [r4, #0]
 8012806:	2200      	movs	r2, #0
 8012808:	2102      	movs	r1, #2
 801280a:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 801280e:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 8012810:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012814:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8012818:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 801281c:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8012820:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 8012824:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8012828:	9505      	str	r5, [sp, #20]
 801282a:	9404      	str	r4, [sp, #16]
 801282c:	9003      	str	r0, [sp, #12]
 801282e:	9102      	str	r1, [sp, #8]
 8012830:	9201      	str	r2, [sp, #4]
 8012832:	9300      	str	r3, [sp, #0]
 8012834:	4b37      	ldr	r3, [pc, #220]	@ (8012914 <handle_io_status_get+0x140>)
 8012836:	4a38      	ldr	r2, [pc, #224]	@ (8012918 <handle_io_status_get+0x144>)
 8012838:	21c8      	movs	r1, #200	@ 0xc8
 801283a:	4630      	mov	r0, r6
 801283c:	f010 fc22 	bl	8023084 <mg_http_reply>
}
 8012840:	b011      	add	sp, #68	@ 0x44
 8012842:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8012844:	ad0e      	add	r5, sp, #56	@ 0x38
 8012846:	4935      	ldr	r1, [pc, #212]	@ (801291c <handle_io_status_get+0x148>)
 8012848:	4628      	mov	r0, r5
 801284a:	f010 fda5 	bl	8023398 <mg_str_s>
 801284e:	2300      	movs	r3, #0
 8012850:	9300      	str	r3, [sp, #0]
 8012852:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012856:	e894 0003 	ldmia.w	r4, {r0, r1}
 801285a:	f010 ffbf 	bl	80237dc <mg_match>
 801285e:	2800      	cmp	r0, #0
 8012860:	d04b      	beq.n	80128fa <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8012862:	ab08      	add	r3, sp, #32
 8012864:	4a2e      	ldr	r2, [pc, #184]	@ (8012920 <handle_io_status_get+0x14c>)
 8012866:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801286a:	c903      	ldmia	r1, {r0, r1}
 801286c:	f00f fcce 	bl	802220c <mg_json_get_num>
 8012870:	2800      	cmp	r0, #0
 8012872:	d03a      	beq.n	80128ea <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 8012874:	ab0a      	add	r3, sp, #40	@ 0x28
 8012876:	4a2b      	ldr	r2, [pc, #172]	@ (8012924 <handle_io_status_get+0x150>)
 8012878:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801287c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012880:	f00f fcc4 	bl	802220c <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8012884:	2800      	cmp	r0, #0
 8012886:	d030      	beq.n	80128ea <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 8012888:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801288c:	f7fe f9a4 	bl	8010bd8 <__aeabi_d2uiz>
 8012890:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 8012892:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012896:	f7fe f99f 	bl	8010bd8 <__aeabi_d2uiz>
 801289a:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 801289c:	1e63      	subs	r3, r4, #1
 801289e:	b2db      	uxtb	r3, r3
 80128a0:	2b02      	cmp	r3, #2
 80128a2:	d801      	bhi.n	80128a8 <handle_io_status_get+0xd4>
 80128a4:	2d01      	cmp	r5, #1
 80128a6:	d907      	bls.n	80128b8 <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 80128a8:	4b1f      	ldr	r3, [pc, #124]	@ (8012928 <handle_io_status_get+0x154>)
 80128aa:	4a1b      	ldr	r2, [pc, #108]	@ (8012918 <handle_io_status_get+0x144>)
 80128ac:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80128b0:	4630      	mov	r0, r6
 80128b2:	f010 fbe7 	bl	8023084 <mg_http_reply>
 80128b6:	e7c3      	b.n	8012840 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 80128b8:	4f15      	ldr	r7, [pc, #84]	@ (8012910 <handle_io_status_get+0x13c>)
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	2200      	movs	r2, #0
 80128be:	2102      	movs	r1, #2
 80128c0:	a807      	add	r0, sp, #28
 80128c2:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 80128c4:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 80128c8:	446b      	add	r3, sp
 80128ca:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	2201      	movs	r2, #1
 80128d2:	2102      	movs	r1, #2
 80128d4:	a807      	add	r0, sp, #28
 80128d6:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 80128d8:	9501      	str	r5, [sp, #4]
 80128da:	9400      	str	r4, [sp, #0]
 80128dc:	4b13      	ldr	r3, [pc, #76]	@ (801292c <handle_io_status_get+0x158>)
 80128de:	4a0e      	ldr	r2, [pc, #56]	@ (8012918 <handle_io_status_get+0x144>)
 80128e0:	21c8      	movs	r1, #200	@ 0xc8
 80128e2:	4630      	mov	r0, r6
 80128e4:	f010 fbce 	bl	8023084 <mg_http_reply>
 80128e8:	e7aa      	b.n	8012840 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 80128ea:	4b11      	ldr	r3, [pc, #68]	@ (8012930 <handle_io_status_get+0x15c>)
 80128ec:	4a0a      	ldr	r2, [pc, #40]	@ (8012918 <handle_io_status_get+0x144>)
 80128ee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80128f2:	4630      	mov	r0, r6
 80128f4:	f010 fbc6 	bl	8023084 <mg_http_reply>
 80128f8:	e7a2      	b.n	8012840 <handle_io_status_get+0x6c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80128fa:	4b0e      	ldr	r3, [pc, #56]	@ (8012934 <handle_io_status_get+0x160>)
 80128fc:	4a06      	ldr	r2, [pc, #24]	@ (8012918 <handle_io_status_get+0x144>)
 80128fe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012902:	4630      	mov	r0, r6
 8012904:	f010 fbbe 	bl	8023084 <mg_http_reply>
}
 8012908:	e79a      	b.n	8012840 <handle_io_status_get+0x6c>
 801290a:	bf00      	nop
 801290c:	08035a6c 	.word	0x08035a6c
 8012910:	20001764 	.word	0x20001764
 8012914:	08035a70 	.word	0x08035a70
 8012918:	08035564 	.word	0x08035564
 801291c:	08035520 	.word	0x08035520
 8012920:	08035aa4 	.word	0x08035aa4
 8012924:	08035ab0 	.word	0x08035ab0
 8012928:	08035af0 	.word	0x08035af0
 801292c:	08035ab8 	.word	0x08035ab8
 8012930:	08035b2c 	.word	0x08035b2c
 8012934:	08035b68 	.word	0x08035b68

08012938 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8012938:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801293a:	fb01 f400 	mul.w	r4, r1, r0
 801293e:	4620      	mov	r0, r4
 8012940:	f007 f8d2 	bl	8019ae8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8012944:	4605      	mov	r5, r0
 8012946:	b118      	cbz	r0, 8012950 <mg_calloc+0x18>
 8012948:	4622      	mov	r2, r4
 801294a:	2100      	movs	r1, #0
 801294c:	f019 f858 	bl	802ba00 <memset>
}
 8012950:	4628      	mov	r0, r5
 8012952:	bd38      	pop	{r3, r4, r5, pc}

08012954 <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8012954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012956:	b08b      	sub	sp, #44	@ 0x2c
 8012958:	4606      	mov	r6, r0
 801295a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801295c:	ad06      	add	r5, sp, #24
 801295e:	4984      	ldr	r1, [pc, #528]	@ (8012b70 <handle_mqtt_conf+0x21c>)
 8012960:	4628      	mov	r0, r5
 8012962:	f010 fd19 	bl	8023398 <mg_str_s>
 8012966:	2300      	movs	r3, #0
 8012968:	9300      	str	r3, [sp, #0]
 801296a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801296e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012972:	f010 ff33 	bl	80237dc <mg_match>
 8012976:	2800      	cmp	r0, #0
 8012978:	d03b      	beq.n	80129f2 <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 801297a:	21c6      	movs	r1, #198	@ 0xc6
 801297c:	2001      	movs	r0, #1
 801297e:	f7ff ffdb 	bl	8012938 <mg_calloc>
		if (mqtt_config == NULL) {
 8012982:	4605      	mov	r5, r0
 8012984:	b340      	cbz	r0, 80129d8 <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 8012986:	4b7b      	ldr	r3, [pc, #492]	@ (8012b74 <handle_mqtt_conf+0x220>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	2200      	movs	r2, #0
 801298c:	4611      	mov	r1, r2
 801298e:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8012990:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 8012994:	4638      	mov	r0, r7
 8012996:	f7fd fc83 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 801299a:	b2c4      	uxtb	r4, r0
 801299c:	4622      	mov	r2, r4
 801299e:	212a      	movs	r1, #42	@ 0x2a
 80129a0:	4638      	mov	r0, r7
 80129a2:	f019 f82d 	bl	802ba00 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 80129a6:	442c      	add	r4, r5
 80129a8:	2300      	movs	r3, #0
 80129aa:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80129ae:	786b      	ldrb	r3, [r5, #1]
 80129b0:	b1eb      	cbz	r3, 80129ee <handle_mqtt_conf+0x9a>
 80129b2:	4b71      	ldr	r3, [pc, #452]	@ (8012b78 <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 80129b4:	1caa      	adds	r2, r5, #2
 80129b6:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80129ba:	9703      	str	r7, [sp, #12]
 80129bc:	9102      	str	r1, [sp, #8]
 80129be:	9201      	str	r2, [sp, #4]
 80129c0:	9300      	str	r3, [sp, #0]
 80129c2:	4b6e      	ldr	r3, [pc, #440]	@ (8012b7c <handle_mqtt_conf+0x228>)
 80129c4:	4a6e      	ldr	r2, [pc, #440]	@ (8012b80 <handle_mqtt_conf+0x22c>)
 80129c6:	21c8      	movs	r1, #200	@ 0xc8
 80129c8:	4630      	mov	r0, r6
 80129ca:	f010 fb5b 	bl	8023084 <mg_http_reply>
		free(mqtt_config);
 80129ce:	4628      	mov	r0, r5
 80129d0:	f007 f90c 	bl	8019bec <vPortFree>
}
 80129d4:	b00b      	add	sp, #44	@ 0x2c
 80129d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 80129d8:	4b6a      	ldr	r3, [pc, #424]	@ (8012b84 <handle_mqtt_conf+0x230>)
 80129da:	4a69      	ldr	r2, [pc, #420]	@ (8012b80 <handle_mqtt_conf+0x22c>)
 80129dc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80129e0:	4630      	mov	r0, r6
 80129e2:	f010 fb4f 	bl	8023084 <mg_http_reply>
			free(mqtt_config);
 80129e6:	4628      	mov	r0, r5
 80129e8:	f007 f900 	bl	8019bec <vPortFree>
			return;
 80129ec:	e7f2      	b.n	80129d4 <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80129ee:	4b66      	ldr	r3, [pc, #408]	@ (8012b88 <handle_mqtt_conf+0x234>)
 80129f0:	e7e0      	b.n	80129b4 <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80129f2:	ad08      	add	r5, sp, #32
 80129f4:	4965      	ldr	r1, [pc, #404]	@ (8012b8c <handle_mqtt_conf+0x238>)
 80129f6:	4628      	mov	r0, r5
 80129f8:	f010 fcce 	bl	8023398 <mg_str_s>
 80129fc:	2300      	movs	r3, #0
 80129fe:	9300      	str	r3, [sp, #0]
 8012a00:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012a04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012a08:	f010 fee8 	bl	80237dc <mg_match>
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	f000 80a7 	beq.w	8012b60 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8012a12:	21c6      	movs	r1, #198	@ 0xc6
 8012a14:	2001      	movs	r0, #1
 8012a16:	f7ff ff8f 	bl	8012938 <mg_calloc>
		if (mqtt_config == NULL) {
 8012a1a:	4605      	mov	r5, r0
 8012a1c:	b310      	cbz	r0, 8012a64 <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8012a1e:	ab05      	add	r3, sp, #20
 8012a20:	4a5b      	ldr	r2, [pc, #364]	@ (8012b90 <handle_mqtt_conf+0x23c>)
 8012a22:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8012a26:	c903      	ldmia	r1, {r0, r1}
 8012a28:	f00f f986 	bl	8021d38 <mg_json_get>
 8012a2c:	2800      	cmp	r0, #0
 8012a2e:	db24      	blt.n	8012a7a <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8012a30:	1c6b      	adds	r3, r5, #1
 8012a32:	4a58      	ldr	r2, [pc, #352]	@ (8012b94 <handle_mqtt_conf+0x240>)
 8012a34:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 8012a38:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012a3c:	f00f fc0c 	bl	8022258 <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8012a40:	4a55      	ldr	r2, [pc, #340]	@ (8012b98 <handle_mqtt_conf+0x244>)
 8012a42:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012a46:	f011 fd97 	bl	8024578 <mg_json_get_str>
 8012a4a:	4607      	mov	r7, r0
 8012a4c:	b328      	cbz	r0, 8012a9a <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8012a4e:	f016 fa43 	bl	8028ed8 <is_valid_mqtt_url>
 8012a52:	4603      	mov	r3, r0
 8012a54:	b1e0      	cbz	r0, 8012a90 <handle_mqtt_conf+0x13c>
					switch (err) {
 8012a56:	3304      	adds	r3, #4
 8012a58:	2b03      	cmp	r3, #3
 8012a5a:	d879      	bhi.n	8012b50 <handle_mqtt_conf+0x1fc>
 8012a5c:	e8df f003 	tbb	[pc, r3]
 8012a60:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8012a64:	4b47      	ldr	r3, [pc, #284]	@ (8012b84 <handle_mqtt_conf+0x230>)
 8012a66:	4a46      	ldr	r2, [pc, #280]	@ (8012b80 <handle_mqtt_conf+0x22c>)
 8012a68:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8012a6c:	4630      	mov	r0, r6
 8012a6e:	f010 fb09 	bl	8023084 <mg_http_reply>
			free(mqtt_config);
 8012a72:	4628      	mov	r0, r5
 8012a74:	f007 f8ba 	bl	8019bec <vPortFree>
			return;
 8012a78:	e7ac      	b.n	80129d4 <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8012a7a:	4b48      	ldr	r3, [pc, #288]	@ (8012b9c <handle_mqtt_conf+0x248>)
 8012a7c:	4a40      	ldr	r2, [pc, #256]	@ (8012b80 <handle_mqtt_conf+0x22c>)
 8012a7e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012a82:	4630      	mov	r0, r6
 8012a84:	f010 fafe 	bl	8023084 <mg_http_reply>
		free(mqtt_config);
 8012a88:	4628      	mov	r0, r5
 8012a8a:	f007 f8af 	bl	8019bec <vPortFree>
 8012a8e:	e7a1      	b.n	80129d4 <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8012a90:	227f      	movs	r2, #127	@ 0x7f
 8012a92:	4639      	mov	r1, r7
 8012a94:	1ca8      	adds	r0, r5, #2
 8012a96:	f018 fffa 	bl	802ba8e <strncpy>
			free(broker);
 8012a9a:	4638      	mov	r0, r7
 8012a9c:	f007 f8a6 	bl	8019bec <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8012aa0:	4a3f      	ldr	r2, [pc, #252]	@ (8012ba0 <handle_mqtt_conf+0x24c>)
 8012aa2:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 8012aa6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012aaa:	f011 fd65 	bl	8024578 <mg_json_get_str>
 8012aae:	4607      	mov	r7, r0
 8012ab0:	b128      	cbz	r0, 8012abe <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8012ab2:	2220      	movs	r2, #32
 8012ab4:	4601      	mov	r1, r0
 8012ab6:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8012aba:	f018 ffe8 	bl	802ba8e <strncpy>
			free(username);
 8012abe:	4638      	mov	r0, r7
 8012ac0:	f007 f894 	bl	8019bec <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8012ac4:	4a37      	ldr	r2, [pc, #220]	@ (8012ba4 <handle_mqtt_conf+0x250>)
 8012ac6:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8012aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012ace:	f011 fd53 	bl	8024578 <mg_json_get_str>
 8012ad2:	4604      	mov	r4, r0
 8012ad4:	b128      	cbz	r0, 8012ae2 <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 8012ad6:	2220      	movs	r2, #32
 8012ad8:	4601      	mov	r1, r0
 8012ada:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 8012ade:	f018 ffd6 	bl	802ba8e <strncpy>
			free(password);
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	f007 f882 	bl	8019bec <vPortFree>
			mqtt_config->save = 1;
 8012ae8:	2201      	movs	r2, #1
 8012aea:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8012aec:	4b21      	ldr	r3, [pc, #132]	@ (8012b74 <handle_mqtt_conf+0x220>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	2100      	movs	r1, #0
 8012af2:	4628      	mov	r0, r5
 8012af4:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012af6:	4b2c      	ldr	r3, [pc, #176]	@ (8012ba8 <handle_mqtt_conf+0x254>)
 8012af8:	4a21      	ldr	r2, [pc, #132]	@ (8012b80 <handle_mqtt_conf+0x22c>)
 8012afa:	21c8      	movs	r1, #200	@ 0xc8
 8012afc:	4630      	mov	r0, r6
 8012afe:	f010 fac1 	bl	8023084 <mg_http_reply>
 8012b02:	e7c1      	b.n	8012a88 <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012b04:	4b29      	ldr	r3, [pc, #164]	@ (8012bac <handle_mqtt_conf+0x258>)
 8012b06:	4a1e      	ldr	r2, [pc, #120]	@ (8012b80 <handle_mqtt_conf+0x22c>)
 8012b08:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	f010 fab9 	bl	8023084 <mg_http_reply>
					free(broker);
 8012b12:	4638      	mov	r0, r7
 8012b14:	f007 f86a 	bl	8019bec <vPortFree>
					free(mqtt_config);
 8012b18:	4628      	mov	r0, r5
 8012b1a:	f007 f867 	bl	8019bec <vPortFree>
					return;
 8012b1e:	e759      	b.n	80129d4 <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012b20:	4b23      	ldr	r3, [pc, #140]	@ (8012bb0 <handle_mqtt_conf+0x25c>)
 8012b22:	4a17      	ldr	r2, [pc, #92]	@ (8012b80 <handle_mqtt_conf+0x22c>)
 8012b24:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012b28:	4630      	mov	r0, r6
 8012b2a:	f010 faab 	bl	8023084 <mg_http_reply>
							break;
 8012b2e:	e7f0      	b.n	8012b12 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012b30:	4b20      	ldr	r3, [pc, #128]	@ (8012bb4 <handle_mqtt_conf+0x260>)
 8012b32:	4a13      	ldr	r2, [pc, #76]	@ (8012b80 <handle_mqtt_conf+0x22c>)
 8012b34:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012b38:	4630      	mov	r0, r6
 8012b3a:	f010 faa3 	bl	8023084 <mg_http_reply>
							break;
 8012b3e:	e7e8      	b.n	8012b12 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012b40:	4b1d      	ldr	r3, [pc, #116]	@ (8012bb8 <handle_mqtt_conf+0x264>)
 8012b42:	4a0f      	ldr	r2, [pc, #60]	@ (8012b80 <handle_mqtt_conf+0x22c>)
 8012b44:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f010 fa9b 	bl	8023084 <mg_http_reply>
							break;
 8012b4e:	e7e0      	b.n	8012b12 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012b50:	4b1a      	ldr	r3, [pc, #104]	@ (8012bbc <handle_mqtt_conf+0x268>)
 8012b52:	4a0b      	ldr	r2, [pc, #44]	@ (8012b80 <handle_mqtt_conf+0x22c>)
 8012b54:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012b58:	4630      	mov	r0, r6
 8012b5a:	f010 fa93 	bl	8023084 <mg_http_reply>
							break;
 8012b5e:	e7d8      	b.n	8012b12 <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012b60:	4b17      	ldr	r3, [pc, #92]	@ (8012bc0 <handle_mqtt_conf+0x26c>)
 8012b62:	4a07      	ldr	r2, [pc, #28]	@ (8012b80 <handle_mqtt_conf+0x22c>)
 8012b64:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012b68:	4630      	mov	r0, r6
 8012b6a:	f010 fa8b 	bl	8023084 <mg_http_reply>
 8012b6e:	e731      	b.n	80129d4 <handle_mqtt_conf+0x80>
 8012b70:	08035a6c 	.word	0x08035a6c
 8012b74:	20001764 	.word	0x20001764
 8012b78:	08035bbc 	.word	0x08035bbc
 8012b7c:	08035c08 	.word	0x08035c08
 8012b80:	08035564 	.word	0x08035564
 8012b84:	08035bcc 	.word	0x08035bcc
 8012b88:	08035bc4 	.word	0x08035bc4
 8012b8c:	08035520 	.word	0x08035520
 8012b90:	08035c50 	.word	0x08035c50
 8012b94:	08035c84 	.word	0x08035c84
 8012b98:	08035c90 	.word	0x08035c90
 8012b9c:	08035c54 	.word	0x08035c54
 8012ba0:	08035dd8 	.word	0x08035dd8
 8012ba4:	08035de4 	.word	0x08035de4
 8012ba8:	08035df0 	.word	0x08035df0
 8012bac:	08035c9c 	.word	0x08035c9c
 8012bb0:	08035ce0 	.word	0x08035ce0
 8012bb4:	08035d2c 	.word	0x08035d2c
 8012bb8:	08035d6c 	.word	0x08035d6c
 8012bbc:	08035da4 	.word	0x08035da4
 8012bc0:	08035b68 	.word	0x08035b68

08012bc4 <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8012bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bc8:	b0c7      	sub	sp, #284	@ 0x11c
 8012bca:	4681      	mov	r9, r0
 8012bcc:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8012bce:	2272      	movs	r2, #114	@ 0x72
 8012bd0:	498e      	ldr	r1, [pc, #568]	@ (8012e0c <handle_dev_status+0x248>)
 8012bd2:	a827      	add	r0, sp, #156	@ 0x9c
 8012bd4:	f01a f950 	bl	802ce78 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8012bd8:	2101      	movs	r1, #1
 8012bda:	201e      	movs	r0, #30
 8012bdc:	f7ff feac 	bl	8012938 <mg_calloc>
 8012be0:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8012be2:	2101      	movs	r1, #1
 8012be4:	202e      	movs	r0, #46	@ 0x2e
 8012be6:	f7ff fea7 	bl	8012938 <mg_calloc>
 8012bea:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8012bec:	2101      	movs	r1, #1
 8012bee:	202e      	movs	r0, #46	@ 0x2e
 8012bf0:	f7ff fea2 	bl	8012938 <mg_calloc>
 8012bf4:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8012bf6:	2101      	movs	r1, #1
 8012bf8:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8012bfc:	f7ff fe9c 	bl	8012938 <mg_calloc>
 8012c00:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8012c02:	2101      	movs	r1, #1
 8012c04:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8012c08:	f7ff fe96 	bl	8012938 <mg_calloc>
 8012c0c:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 8012c0e:	2e00      	cmp	r6, #0
 8012c10:	f000 80e3 	beq.w	8012dda <handle_dev_status+0x216>
 8012c14:	2f00      	cmp	r7, #0
 8012c16:	f000 80e0 	beq.w	8012dda <handle_dev_status+0x216>
 8012c1a:	f1b8 0f00 	cmp.w	r8, #0
 8012c1e:	f000 80dc 	beq.w	8012dda <handle_dev_status+0x216>
 8012c22:	2c00      	cmp	r4, #0
 8012c24:	f000 80d9 	beq.w	8012dda <handle_dev_status+0x216>
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	f000 80d6 	beq.w	8012dda <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012c2e:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 8012c32:	4977      	ldr	r1, [pc, #476]	@ (8012e10 <handle_dev_status+0x24c>)
 8012c34:	4658      	mov	r0, fp
 8012c36:	f010 fbaf 	bl	8023398 <mg_str_s>
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	9300      	str	r3, [sp, #0]
 8012c3e:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8012c42:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8012c46:	f010 fdc9 	bl	80237dc <mg_match>
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	f000 80bd 	beq.w	8012dca <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 8012c50:	f001 fad8 	bl	8014204 <get_mqtt_connection>
			if(!mqtt_connection){
 8012c54:	4682      	mov	sl, r0
 8012c56:	b358      	cbz	r0, 8012cb0 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 8012c58:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8012c5c:	f013 0f20 	tst.w	r3, #32
 8012c60:	d12c      	bne.n	8012cbc <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 8012c62:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8012c66:	f013 0f20 	tst.w	r3, #32
 8012c6a:	d02d      	beq.n	8012cc8 <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8012c6c:	221e      	movs	r2, #30
 8012c6e:	4969      	ldr	r1, [pc, #420]	@ (8012e14 <handle_dev_status+0x250>)
 8012c70:	4630      	mov	r0, r6
 8012c72:	f018 ff0c 	bl	802ba8e <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8012c76:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 8012e3c <handle_dev_status+0x278>
 8012c7a:	f10a 0308 	add.w	r3, sl, #8
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	465b      	mov	r3, fp
 8012c82:	4a65      	ldr	r2, [pc, #404]	@ (8012e18 <handle_dev_status+0x254>)
 8012c84:	212e      	movs	r1, #46	@ 0x2e
 8012c86:	4640      	mov	r0, r8
 8012c88:	f00f fcfc 	bl	8022684 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8012c8c:	f10a 031c 	add.w	r3, sl, #28
 8012c90:	9300      	str	r3, [sp, #0]
 8012c92:	465b      	mov	r3, fp
 8012c94:	4a60      	ldr	r2, [pc, #384]	@ (8012e18 <handle_dev_status+0x254>)
 8012c96:	212e      	movs	r1, #46	@ 0x2e
 8012c98:	4638      	mov	r0, r7
 8012c9a:	f00f fcf3 	bl	8022684 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 8012c9e:	4620      	mov	r0, r4
 8012ca0:	f7fd fafe 	bl	80102a0 <strlen>
 8012ca4:	4b5d      	ldr	r3, [pc, #372]	@ (8012e1c <handle_dev_status+0x258>)
 8012ca6:	881b      	ldrh	r3, [r3, #0]
 8012ca8:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8012caa:	f04f 0a01 	mov.w	sl, #1
 8012cae:	e028      	b.n	8012d02 <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8012cb0:	221e      	movs	r2, #30
 8012cb2:	495b      	ldr	r1, [pc, #364]	@ (8012e20 <handle_dev_status+0x25c>)
 8012cb4:	4630      	mov	r0, r6
 8012cb6:	f018 feea 	bl	802ba8e <strncpy>
 8012cba:	e7f0      	b.n	8012c9e <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8012cbc:	221e      	movs	r2, #30
 8012cbe:	4959      	ldr	r1, [pc, #356]	@ (8012e24 <handle_dev_status+0x260>)
 8012cc0:	4630      	mov	r0, r6
 8012cc2:	f018 fee4 	bl	802ba8e <strncpy>
 8012cc6:	e7d6      	b.n	8012c76 <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 8012cc8:	221e      	movs	r2, #30
 8012cca:	4957      	ldr	r1, [pc, #348]	@ (8012e28 <handle_dev_status+0x264>)
 8012ccc:	4630      	mov	r0, r6
 8012cce:	f018 fede 	bl	802ba8e <strncpy>
 8012cd2:	e7d0      	b.n	8012c76 <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8012cd4:	fa5f f38a 	uxtb.w	r3, sl
 8012cd8:	2201      	movs	r2, #1
 8012cda:	2180      	movs	r1, #128	@ 0x80
 8012cdc:	a807      	add	r0, sp, #28
 8012cde:	f001 fe81 	bl	80149e4 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8012ce2:	a907      	add	r1, sp, #28
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	f018 fe93 	bl	802ba10 <strcat>
				strcat(pub_topics_str, "\", \"");
 8012cea:	4620      	mov	r0, r4
 8012cec:	f7fd fad8 	bl	80102a0 <strlen>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	1821      	adds	r1, r4, r0
 8012cf4:	4a4d      	ldr	r2, [pc, #308]	@ (8012e2c <handle_dev_status+0x268>)
 8012cf6:	6810      	ldr	r0, [r2, #0]
 8012cf8:	50e0      	str	r0, [r4, r3]
 8012cfa:	7913      	ldrb	r3, [r2, #4]
 8012cfc:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8012cfe:	f10a 0a01 	add.w	sl, sl, #1
 8012d02:	f1ba 0f03 	cmp.w	sl, #3
 8012d06:	dde5      	ble.n	8012cd4 <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8012d08:	f04f 0a01 	mov.w	sl, #1
 8012d0c:	e007      	b.n	8012d1e <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 8012d0e:	4620      	mov	r0, r4
 8012d10:	f7fd fac6 	bl	80102a0 <strlen>
 8012d14:	4b41      	ldr	r3, [pc, #260]	@ (8012e1c <handle_dev_status+0x258>)
 8012d16:	881b      	ldrh	r3, [r3, #0]
 8012d18:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8012d1a:	f10a 0a01 	add.w	sl, sl, #1
 8012d1e:	f1ba 0f03 	cmp.w	sl, #3
 8012d22:	dc18      	bgt.n	8012d56 <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8012d24:	fa5f f38a 	uxtb.w	r3, sl
 8012d28:	2202      	movs	r2, #2
 8012d2a:	2180      	movs	r1, #128	@ 0x80
 8012d2c:	a807      	add	r0, sp, #28
 8012d2e:	f001 fe59 	bl	80149e4 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8012d32:	a907      	add	r1, sp, #28
 8012d34:	4620      	mov	r0, r4
 8012d36:	f018 fe6b 	bl	802ba10 <strcat>
				if (i < OUTPUTS_COUNT) {
 8012d3a:	f1ba 0f02 	cmp.w	sl, #2
 8012d3e:	dce6      	bgt.n	8012d0e <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 8012d40:	4620      	mov	r0, r4
 8012d42:	f7fd faad 	bl	80102a0 <strlen>
 8012d46:	4603      	mov	r3, r0
 8012d48:	1821      	adds	r1, r4, r0
 8012d4a:	4a38      	ldr	r2, [pc, #224]	@ (8012e2c <handle_dev_status+0x268>)
 8012d4c:	6810      	ldr	r0, [r2, #0]
 8012d4e:	50e0      	str	r0, [r4, r3]
 8012d50:	7913      	ldrb	r3, [r2, #4]
 8012d52:	710b      	strb	r3, [r1, #4]
 8012d54:	e7e1      	b.n	8012d1a <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 8012d56:	4628      	mov	r0, r5
 8012d58:	f7fd faa2 	bl	80102a0 <strlen>
 8012d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8012e1c <handle_dev_status+0x258>)
 8012d5e:	881b      	ldrh	r3, [r3, #0]
 8012d60:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8012d62:	f04f 0a01 	mov.w	sl, #1
 8012d66:	e007      	b.n	8012d78 <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 8012d68:	4628      	mov	r0, r5
 8012d6a:	f7fd fa99 	bl	80102a0 <strlen>
 8012d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8012e1c <handle_dev_status+0x258>)
 8012d70:	881b      	ldrh	r3, [r3, #0]
 8012d72:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8012d74:	f10a 0a01 	add.w	sl, sl, #1
 8012d78:	f1ba 0f03 	cmp.w	sl, #3
 8012d7c:	dc18      	bgt.n	8012db0 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8012d7e:	fa5f f38a 	uxtb.w	r3, sl
 8012d82:	2202      	movs	r2, #2
 8012d84:	2180      	movs	r1, #128	@ 0x80
 8012d86:	a807      	add	r0, sp, #28
 8012d88:	f001 fe14 	bl	80149b4 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8012d8c:	a907      	add	r1, sp, #28
 8012d8e:	4628      	mov	r0, r5
 8012d90:	f018 fe3e 	bl	802ba10 <strcat>
				if (i < OUTPUTS_COUNT) {
 8012d94:	f1ba 0f02 	cmp.w	sl, #2
 8012d98:	dce6      	bgt.n	8012d68 <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 8012d9a:	4628      	mov	r0, r5
 8012d9c:	f7fd fa80 	bl	80102a0 <strlen>
 8012da0:	4603      	mov	r3, r0
 8012da2:	1829      	adds	r1, r5, r0
 8012da4:	4a21      	ldr	r2, [pc, #132]	@ (8012e2c <handle_dev_status+0x268>)
 8012da6:	6810      	ldr	r0, [r2, #0]
 8012da8:	50e8      	str	r0, [r5, r3]
 8012daa:	7913      	ldrb	r3, [r2, #4]
 8012dac:	710b      	strb	r3, [r1, #4]
 8012dae:	e7e1      	b.n	8012d74 <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012db0:	9504      	str	r5, [sp, #16]
 8012db2:	9403      	str	r4, [sp, #12]
 8012db4:	9702      	str	r7, [sp, #8]
 8012db6:	f8cd 8004 	str.w	r8, [sp, #4]
 8012dba:	9600      	str	r6, [sp, #0]
 8012dbc:	ab27      	add	r3, sp, #156	@ 0x9c
 8012dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8012e30 <handle_dev_status+0x26c>)
 8012dc0:	21c8      	movs	r1, #200	@ 0xc8
 8012dc2:	4648      	mov	r0, r9
 8012dc4:	f010 f95e 	bl	8023084 <mg_http_reply>
 8012dc8:	e00e      	b.n	8012de8 <handle_dev_status+0x224>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8012dca:	4b1a      	ldr	r3, [pc, #104]	@ (8012e34 <handle_dev_status+0x270>)
 8012dcc:	4a18      	ldr	r2, [pc, #96]	@ (8012e30 <handle_dev_status+0x26c>)
 8012dce:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012dd2:	4648      	mov	r0, r9
 8012dd4:	f010 f956 	bl	8023084 <mg_http_reply>
 8012dd8:	e006      	b.n	8012de8 <handle_dev_status+0x224>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012dda:	4b17      	ldr	r3, [pc, #92]	@ (8012e38 <handle_dev_status+0x274>)
 8012ddc:	4a14      	ldr	r2, [pc, #80]	@ (8012e30 <handle_dev_status+0x26c>)
 8012dde:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012de2:	4648      	mov	r0, r9
 8012de4:	f010 f94e 	bl	8023084 <mg_http_reply>
	free(mqtt_status_str);
 8012de8:	4630      	mov	r0, r6
 8012dea:	f006 feff 	bl	8019bec <vPortFree>
	free(mqtt_server_addr);
 8012dee:	4638      	mov	r0, r7
 8012df0:	f006 fefc 	bl	8019bec <vPortFree>
	free(mqtt_local_addr);
 8012df4:	4640      	mov	r0, r8
 8012df6:	f006 fef9 	bl	8019bec <vPortFree>
	free(pub_topics_str);
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f006 fef6 	bl	8019bec <vPortFree>
	free(subscr_topics_str);
 8012e00:	4628      	mov	r0, r5
 8012e02:	f006 fef3 	bl	8019bec <vPortFree>
}
 8012e06:	b047      	add	sp, #284	@ 0x11c
 8012e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e0c:	08035e98 	.word	0x08035e98
 8012e10:	08035a6c 	.word	0x08035a6c
 8012e14:	08035e38 	.word	0x08035e38
 8012e18:	08035e4c 	.word	0x08035e4c
 8012e1c:	08035e50 	.word	0x08035e50
 8012e20:	08039a50 	.word	0x08039a50
 8012e24:	08035e2c 	.word	0x08035e2c
 8012e28:	08035e40 	.word	0x08035e40
 8012e2c:	08035e54 	.word	0x08035e54
 8012e30:	08035564 	.word	0x08035564
 8012e34:	08035b68 	.word	0x08035b68
 8012e38:	08035e5c 	.word	0x08035e5c
 8012e3c:	08025135 	.word	0x08025135

08012e40 <handle_fs_get_log>:
  }
}

// function for show logging
// function for show logging
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8012e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e42:	b08d      	sub	sp, #52	@ 0x34
 8012e44:	4607      	mov	r7, r0
 8012e46:	460c      	mov	r4, r1
 8012e48:	4615      	mov	r5, r2

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012e4a:	ae08      	add	r6, sp, #32
 8012e4c:	4923      	ldr	r1, [pc, #140]	@ (8012edc <handle_fs_get_log+0x9c>)
 8012e4e:	4630      	mov	r0, r6
 8012e50:	f010 faa2 	bl	8023398 <mg_str_s>
 8012e54:	2300      	movs	r3, #0
 8012e56:	9300      	str	r3, [sp, #0]
 8012e58:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012e5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012e60:	f010 fcbc 	bl	80237dc <mg_match>
 8012e64:	b318      	cbz	r0, 8012eae <handle_fs_get_log+0x6e>

		struct mg_http_serve_opts opts = {
 8012e66:	2300      	movs	r3, #0
 8012e68:	9302      	str	r3, [sp, #8]
 8012e6a:	9303      	str	r3, [sp, #12]
 8012e6c:	9304      	str	r3, [sp, #16]
 8012e6e:	9305      	str	r3, [sp, #20]
 8012e70:	9306      	str	r3, [sp, #24]
 8012e72:	9307      	str	r3, [sp, #28]
 8012e74:	4b1a      	ldr	r3, [pc, #104]	@ (8012ee0 <handle_fs_get_log+0xa0>)
 8012e76:	9302      	str	r3, [sp, #8]
 8012e78:	4b1a      	ldr	r3, [pc, #104]	@ (8012ee4 <handle_fs_get_log+0xa4>)
 8012e7a:	9307      	str	r3, [sp, #28]
			.root_dir = "/log",
			.fs = &mg_fs_lfs
		};

		switch (number) {
 8012e7c:	b145      	cbz	r5, 8012e90 <handle_fs_get_log+0x50>
 8012e7e:	2d01      	cmp	r5, #1
 8012e80:	d00e      	beq.n	8012ea0 <handle_fs_get_log+0x60>
				break;
			case 1:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
				break;
			default:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8012e82:	ab02      	add	r3, sp, #8
 8012e84:	4a18      	ldr	r2, [pc, #96]	@ (8012ee8 <handle_fs_get_log+0xa8>)
 8012e86:	4621      	mov	r1, r4
 8012e88:	4638      	mov	r0, r7
 8012e8a:	f010 fe63 	bl	8023b54 <mg_http_serve_file>
				break;
 8012e8e:	e005      	b.n	8012e9c <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8012e90:	ab02      	add	r3, sp, #8
 8012e92:	4a15      	ldr	r2, [pc, #84]	@ (8012ee8 <handle_fs_get_log+0xa8>)
 8012e94:	4621      	mov	r1, r4
 8012e96:	4638      	mov	r0, r7
 8012e98:	f010 fe5c 	bl	8023b54 <mg_http_serve_file>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}
}
 8012e9c:	b00d      	add	sp, #52	@ 0x34
 8012e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8012ea0:	ab02      	add	r3, sp, #8
 8012ea2:	4a12      	ldr	r2, [pc, #72]	@ (8012eec <handle_fs_get_log+0xac>)
 8012ea4:	4621      	mov	r1, r4
 8012ea6:	4638      	mov	r0, r7
 8012ea8:	f010 fe54 	bl	8023b54 <mg_http_serve_file>
				break;
 8012eac:	e7f6      	b.n	8012e9c <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012eae:	ad0a      	add	r5, sp, #40	@ 0x28
 8012eb0:	490f      	ldr	r1, [pc, #60]	@ (8012ef0 <handle_fs_get_log+0xb0>)
 8012eb2:	4628      	mov	r0, r5
 8012eb4:	f010 fa70 	bl	8023398 <mg_str_s>
 8012eb8:	2300      	movs	r3, #0
 8012eba:	9300      	str	r3, [sp, #0]
 8012ebc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012ec4:	f010 fc8a 	bl	80237dc <mg_match>
 8012ec8:	2800      	cmp	r0, #0
 8012eca:	d1e7      	bne.n	8012e9c <handle_fs_get_log+0x5c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012ecc:	4b09      	ldr	r3, [pc, #36]	@ (8012ef4 <handle_fs_get_log+0xb4>)
 8012ece:	4a0a      	ldr	r2, [pc, #40]	@ (8012ef8 <handle_fs_get_log+0xb8>)
 8012ed0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012ed4:	4638      	mov	r0, r7
 8012ed6:	f010 f8d5 	bl	8023084 <mg_http_reply>
}
 8012eda:	e7df      	b.n	8012e9c <handle_fs_get_log+0x5c>
 8012edc:	08035a6c 	.word	0x08035a6c
 8012ee0:	08035030 	.word	0x08035030
 8012ee4:	2000001c 	.word	0x2000001c
 8012ee8:	080350fc 	.word	0x080350fc
 8012eec:	0803510c 	.word	0x0803510c
 8012ef0:	08035520 	.word	0x08035520
 8012ef4:	08035f0c 	.word	0x08035f0c
 8012ef8:	08035564 	.word	0x08035564

08012efc <write_users>:
static void write_users(const char *file_path, users_list_t * users, size_t count){
 8012efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012efe:	4604      	mov	r4, r0
 8012f00:	460d      	mov	r5, r1
 8012f02:	4616      	mov	r6, r2
	mg_fs_lfs.rm(file_path);
 8012f04:	4f09      	ldr	r7, [pc, #36]	@ (8012f2c <write_users+0x30>)
 8012f06:	6a3b      	ldr	r3, [r7, #32]
 8012f08:	4798      	blx	r3
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_WRITE);
 8012f0a:	2202      	movs	r2, #2
 8012f0c:	4621      	mov	r1, r4
 8012f0e:	4638      	mov	r0, r7
 8012f10:	f00e fe29 	bl	8021b66 <mg_fs_open>
 8012f14:	4604      	mov	r4, r0
	mg_fs_lfs.wr(fd->fd, users, sizeof(users_list_t) * count);
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	22a9      	movs	r2, #169	@ 0xa9
 8012f1a:	fb06 f202 	mul.w	r2, r6, r2
 8012f1e:	4629      	mov	r1, r5
 8012f20:	6800      	ldr	r0, [r0, #0]
 8012f22:	4798      	blx	r3
	mg_fs_close(fd);
 8012f24:	4620      	mov	r0, r4
 8012f26:	f00e fe37 	bl	8021b98 <mg_fs_close>
}
 8012f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f2c:	2000001c 	.word	0x2000001c

08012f30 <handle_manage_user>:

static void handle_manage_user(struct mg_connection *c, struct mg_http_message *hm){
 8012f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f34:	b0af      	sub	sp, #188	@ 0xbc
 8012f36:	4607      	mov	r7, r0
 8012f38:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012f3a:	ad26      	add	r5, sp, #152	@ 0x98
 8012f3c:	49a4      	ldr	r1, [pc, #656]	@ (80131d0 <handle_manage_user+0x2a0>)
 8012f3e:	4628      	mov	r0, r5
 8012f40:	f010 fa2a 	bl	8023398 <mg_str_s>
 8012f44:	2300      	movs	r3, #0
 8012f46:	9300      	str	r3, [sp, #0]
 8012f48:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012f4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012f50:	f010 fc44 	bl	80237dc <mg_match>
 8012f54:	2800      	cmp	r0, #0
 8012f56:	f000 8090 	beq.w	801307a <handle_manage_user+0x14a>

		uint32_t response_len = 1024;
		uint32_t user_entry_len = 160;
	    char *response = calloc(response_len, sizeof(char));
 8012f5a:	2101      	movs	r1, #1
 8012f5c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8012f60:	f7ff fcea 	bl	8012938 <mg_calloc>
 8012f64:	4680      	mov	r8, r0
	    char *user_entry = calloc(user_entry_len, sizeof(char));
 8012f66:	2101      	movs	r1, #1
 8012f68:	20a0      	movs	r0, #160	@ 0xa0
 8012f6a:	f7ff fce5 	bl	8012938 <mg_calloc>
 8012f6e:	4681      	mov	r9, r0
	    size_t offset = 0;

	    if (response && user_entry) {
 8012f70:	f1b8 0f00 	cmp.w	r8, #0
 8012f74:	d046      	beq.n	8013004 <handle_manage_user+0xd4>
 8012f76:	2800      	cmp	r0, #0
 8012f78:	d044      	beq.n	8013004 <handle_manage_user+0xd4>
	        // Начало JSON-объекта
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 8012f7a:	4b96      	ldr	r3, [pc, #600]	@ (80131d4 <handle_manage_user+0x2a4>)
 8012f7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012f7e:	f8c8 0000 	str.w	r0, [r8]
 8012f82:	f8c8 1004 	str.w	r1, [r8, #4]
 8012f86:	f8c8 2008 	str.w	r2, [r8, #8]
 8012f8a:	781b      	ldrb	r3, [r3, #0]
 8012f8c:	f888 300c 	strb.w	r3, [r8, #12]
 8012f90:	260c      	movs	r6, #12

	        // Проход по всем пользователям
	        for (int i = 0; i < user_list_size; i++) {
 8012f92:	2500      	movs	r5, #0
 8012f94:	e009      	b.n	8012faa <handle_manage_user+0x7a>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
	                    offset += snprintf(response + offset, response_len - offset, ",");
	                }

	                // Добавляем объект пользователя в JSON
	                offset += snprintf(response + offset, response_len - offset, "%s", user_entry);
 8012f96:	464b      	mov	r3, r9
 8012f98:	4a8f      	ldr	r2, [pc, #572]	@ (80131d8 <handle_manage_user+0x2a8>)
 8012f9a:	f5c6 6180 	rsb	r1, r6, #1024	@ 0x400
 8012f9e:	eb08 0006 	add.w	r0, r8, r6
 8012fa2:	f018 f803 	bl	802afac <snprintf>
 8012fa6:	4406      	add	r6, r0
	        for (int i = 0; i < user_list_size; i++) {
 8012fa8:	3501      	adds	r5, #1
 8012faa:	2d09      	cmp	r5, #9
 8012fac:	dc1a      	bgt.n	8012fe4 <handle_manage_user+0xb4>
	            if (web_users[i].user[0] != '\0') {  // Проверяем, что имя пользователя не пустое
 8012fae:	22a9      	movs	r2, #169	@ 0xa9
 8012fb0:	fb05 f202 	mul.w	r2, r5, r2
 8012fb4:	4b89      	ldr	r3, [pc, #548]	@ (80131dc <handle_manage_user+0x2ac>)
 8012fb6:	5c9b      	ldrb	r3, [r3, r2]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d0f5      	beq.n	8012fa8 <handle_manage_user+0x78>
	                snprintf(user_entry, user_entry_len, "{\"user\": \"%s\"}", web_users[i].user);
 8012fbc:	22a9      	movs	r2, #169	@ 0xa9
 8012fbe:	4b87      	ldr	r3, [pc, #540]	@ (80131dc <handle_manage_user+0x2ac>)
 8012fc0:	fb02 3305 	mla	r3, r2, r5, r3
 8012fc4:	4a86      	ldr	r2, [pc, #536]	@ (80131e0 <handle_manage_user+0x2b0>)
 8012fc6:	21a0      	movs	r1, #160	@ 0xa0
 8012fc8:	4648      	mov	r0, r9
 8012fca:	f017 ffef 	bl	802afac <snprintf>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
 8012fce:	2e0c      	cmp	r6, #12
 8012fd0:	d9e1      	bls.n	8012f96 <handle_manage_user+0x66>
	                    offset += snprintf(response + offset, response_len - offset, ",");
 8012fd2:	4a84      	ldr	r2, [pc, #528]	@ (80131e4 <handle_manage_user+0x2b4>)
 8012fd4:	f5c6 6180 	rsb	r1, r6, #1024	@ 0x400
 8012fd8:	eb08 0006 	add.w	r0, r8, r6
 8012fdc:	f017 ffe6 	bl	802afac <snprintf>
 8012fe0:	4406      	add	r6, r0
 8012fe2:	e7d8      	b.n	8012f96 <handle_manage_user+0x66>
	            }
	        }

	        // Завершаем JSON-объект
	        offset += snprintf(response + offset, response_len - offset, "]}");
 8012fe4:	4a80      	ldr	r2, [pc, #512]	@ (80131e8 <handle_manage_user+0x2b8>)
 8012fe6:	f5c6 6180 	rsb	r1, r6, #1024	@ 0x400
 8012fea:	eb08 0006 	add.w	r0, r8, r6
 8012fee:	f017 ffdd 	bl	802afac <snprintf>

	        // Отправляем JSON-ответ
	        mg_http_reply(c, 200, headers, "%s", response);
 8012ff2:	f8cd 8000 	str.w	r8, [sp]
 8012ff6:	4b78      	ldr	r3, [pc, #480]	@ (80131d8 <handle_manage_user+0x2a8>)
 8012ff8:	4a7c      	ldr	r2, [pc, #496]	@ (80131ec <handle_manage_user+0x2bc>)
 8012ffa:	21c8      	movs	r1, #200	@ 0xc8
 8012ffc:	4638      	mov	r0, r7
 8012ffe:	f010 f841 	bl	8023084 <mg_http_reply>
 8013002:	e00a      	b.n	801301a <handle_manage_user+0xea>
	    } else {
	        // Если память не выделена, отправляем ошибку
	    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013004:	497a      	ldr	r1, [pc, #488]	@ (80131f0 <handle_manage_user+0x2c0>)
 8013006:	2003      	movs	r0, #3
 8013008:	f7fe fece 	bl	8011da8 <logging>
	        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 801300c:	4b79      	ldr	r3, [pc, #484]	@ (80131f4 <handle_manage_user+0x2c4>)
 801300e:	4a77      	ldr	r2, [pc, #476]	@ (80131ec <handle_manage_user+0x2bc>)
 8013010:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013014:	4638      	mov	r0, r7
 8013016:	f010 f835 	bl	8023084 <mg_http_reply>
	    }

	    // Освобождаем память
	    free(response);
 801301a:	4640      	mov	r0, r8
 801301c:	f006 fde6 	bl	8019bec <vPortFree>
	    free(user_entry);
 8013020:	4648      	mov	r0, r9
 8013022:	f006 fde3 	bl	8019bec <vPortFree>
	    // Free allocated memory
	    free(username_edit);
	    free(new_password);


	}if (mg_match(hm->method, mg_str("DELETE"), NULL)){
 8013026:	ad2c      	add	r5, sp, #176	@ 0xb0
 8013028:	4973      	ldr	r1, [pc, #460]	@ (80131f8 <handle_manage_user+0x2c8>)
 801302a:	4628      	mov	r0, r5
 801302c:	f010 f9b4 	bl	8023398 <mg_str_s>
 8013030:	2300      	movs	r3, #0
 8013032:	9300      	str	r3, [sp, #0]
 8013034:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013038:	e894 0003 	ldmia.w	r4, {r0, r1}
 801303c:	f010 fbce 	bl	80237dc <mg_match>
 8013040:	2800      	cmp	r0, #0
 8013042:	f000 81b2 	beq.w	80133aa <handle_manage_user+0x47a>
		char *username_del = NULL;

	    username_del = mg_json_get_str(hm->body, "$.user");
 8013046:	4a6d      	ldr	r2, [pc, #436]	@ (80131fc <handle_manage_user+0x2cc>)
 8013048:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801304c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013050:	f011 fa92 	bl	8024578 <mg_json_get_str>

	    if (username_del && strlen(username_del) > 0) {
 8013054:	4606      	mov	r6, r0
 8013056:	b118      	cbz	r0, 8013060 <handle_manage_user+0x130>
 8013058:	7803      	ldrb	r3, [r0, #0]
 801305a:	2b00      	cmp	r3, #0
 801305c:	f040 818e 	bne.w	801337c <handle_manage_user+0x44c>
	            mg_http_reply(c, 400, headers,
	                          "{\"status\":\"error\",\"message\":\"User not found or cannot delete user at index 0\"}\r\n");
	        }
	    } else {
	        // Неполные данные
	        mg_http_reply(c, 400, headers,
 8013060:	4b67      	ldr	r3, [pc, #412]	@ (8013200 <handle_manage_user+0x2d0>)
 8013062:	4a62      	ldr	r2, [pc, #392]	@ (80131ec <handle_manage_user+0x2bc>)
 8013064:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013068:	4638      	mov	r0, r7
 801306a:	f010 f80b 	bl	8023084 <mg_http_reply>
	                      "{\"status\":\"error\",\"message\":\"Field user is empty or missing\"}\r\n");
	    }

	    // Освобождаем память
	    free(username_del);
 801306e:	4630      	mov	r0, r6
 8013070:	f006 fdbc 	bl	8019bec <vPortFree>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET POST PUT DELETE methods\"}\r\n");

	}
}
 8013074:	b02f      	add	sp, #188	@ 0xbc
 8013076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 801307a:	ad28      	add	r5, sp, #160	@ 0xa0
 801307c:	4961      	ldr	r1, [pc, #388]	@ (8013204 <handle_manage_user+0x2d4>)
 801307e:	4628      	mov	r0, r5
 8013080:	f010 f98a 	bl	8023398 <mg_str_s>
 8013084:	2300      	movs	r3, #0
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	e895 000c 	ldmia.w	r5, {r2, r3}
 801308c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013090:	f010 fba4 	bl	80237dc <mg_match>
 8013094:	2800      	cmp	r0, #0
 8013096:	f000 80c7 	beq.w	8013228 <handle_manage_user+0x2f8>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 801309a:	ab03      	add	r3, sp, #12
 801309c:	4a5a      	ldr	r2, [pc, #360]	@ (8013208 <handle_manage_user+0x2d8>)
 801309e:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80130a2:	c903      	ldmia	r1, {r0, r1}
 80130a4:	f00e fe48 	bl	8021d38 <mg_json_get>
 80130a8:	2800      	cmp	r0, #0
 80130aa:	db21      	blt.n	80130f0 <handle_manage_user+0x1c0>
	    username_add = mg_json_get_str(hm->body, "$.user");
 80130ac:	4a53      	ldr	r2, [pc, #332]	@ (80131fc <handle_manage_user+0x2cc>)
 80130ae:	f504 7600 	add.w	r6, r4, #512	@ 0x200
 80130b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80130b6:	f011 fa5f 	bl	8024578 <mg_json_get_str>
 80130ba:	4605      	mov	r5, r0
	    password_add = mg_json_get_str(hm->body, "$.pass");
 80130bc:	4a53      	ldr	r2, [pc, #332]	@ (801320c <handle_manage_user+0x2dc>)
 80130be:	e896 0003 	ldmia.w	r6, {r0, r1}
 80130c2:	f011 fa59 	bl	8024578 <mg_json_get_str>
 80130c6:	4606      	mov	r6, r0
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 80130c8:	b125      	cbz	r5, 80130d4 <handle_manage_user+0x1a4>
 80130ca:	b118      	cbz	r0, 80130d4 <handle_manage_user+0x1a4>
 80130cc:	782b      	ldrb	r3, [r5, #0]
 80130ce:	b10b      	cbz	r3, 80130d4 <handle_manage_user+0x1a4>
 80130d0:	7803      	ldrb	r3, [r0, #0]
 80130d2:	bb8b      	cbnz	r3, 8013138 <handle_manage_user+0x208>
	        mg_http_reply(c, 400, headers,
 80130d4:	4b4e      	ldr	r3, [pc, #312]	@ (8013210 <handle_manage_user+0x2e0>)
 80130d6:	4a45      	ldr	r2, [pc, #276]	@ (80131ec <handle_manage_user+0x2bc>)
 80130d8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80130dc:	4638      	mov	r0, r7
 80130de:	f00f ffd1 	bl	8023084 <mg_http_reply>
		free(username_add);
 80130e2:	4628      	mov	r0, r5
 80130e4:	f006 fd82 	bl	8019bec <vPortFree>
		free(password_add);
 80130e8:	4630      	mov	r0, r6
 80130ea:	f006 fd7f 	bl	8019bec <vPortFree>
 80130ee:	e79a      	b.n	8013026 <handle_manage_user+0xf6>
	        mg_http_reply(c, 400, headers,
 80130f0:	4b48      	ldr	r3, [pc, #288]	@ (8013214 <handle_manage_user+0x2e4>)
 80130f2:	4a3e      	ldr	r2, [pc, #248]	@ (80131ec <handle_manage_user+0x2bc>)
 80130f4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80130f8:	4638      	mov	r0, r7
 80130fa:	f00f ffc3 	bl	8023084 <mg_http_reply>
	        return;
 80130fe:	e7b9      	b.n	8013074 <handle_manage_user+0x144>
	        for (int i = 0; i < user_list_size; i++) {
 8013100:	f108 0801 	add.w	r8, r8, #1
 8013104:	f1b8 0f09 	cmp.w	r8, #9
 8013108:	dc19      	bgt.n	801313e <handle_manage_user+0x20e>
	            if (strcmp(web_users[i].user, username_add) == 0) {
 801310a:	4629      	mov	r1, r5
 801310c:	20a9      	movs	r0, #169	@ 0xa9
 801310e:	4b33      	ldr	r3, [pc, #204]	@ (80131dc <handle_manage_user+0x2ac>)
 8013110:	fb00 3008 	mla	r0, r0, r8, r3
 8013114:	f7fd f864 	bl	80101e0 <strcmp>
 8013118:	2800      	cmp	r0, #0
 801311a:	d1f1      	bne.n	8013100 <handle_manage_user+0x1d0>
	                mg_http_reply(c, 400, headers,
 801311c:	4b3e      	ldr	r3, [pc, #248]	@ (8013218 <handle_manage_user+0x2e8>)
 801311e:	4a33      	ldr	r2, [pc, #204]	@ (80131ec <handle_manage_user+0x2bc>)
 8013120:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013124:	4638      	mov	r0, r7
 8013126:	f00f ffad 	bl	8023084 <mg_http_reply>
	                free(username_add);
 801312a:	4628      	mov	r0, r5
 801312c:	f006 fd5e 	bl	8019bec <vPortFree>
	                free(password_add);
 8013130:	4630      	mov	r0, r6
 8013132:	f006 fd5b 	bl	8019bec <vPortFree>
	                return;
 8013136:	e79d      	b.n	8013074 <handle_manage_user+0x144>
	        for (int i = 0; i < user_list_size; i++) {
 8013138:	f04f 0800 	mov.w	r8, #0
 801313c:	e7e2      	b.n	8013104 <handle_manage_user+0x1d4>
			char add_pass_digest[sha1_str_len] = {0};
 801313e:	f04f 0800 	mov.w	r8, #0
 8013142:	f8cd 8010 	str.w	r8, [sp, #16]
 8013146:	2225      	movs	r2, #37	@ 0x25
 8013148:	4641      	mov	r1, r8
 801314a:	a805      	add	r0, sp, #20
 801314c:	f018 fc58 	bl	802ba00 <memset>
			mg_sha1_init(&sha1_ctx);
 8013150:	a80f      	add	r0, sp, #60	@ 0x3c
 8013152:	f010 f86f 	bl	8023234 <mg_sha1_init>
			mg_sha1_update(&sha1_ctx, (const unsigned char *)password_add, strlen(password_add) * sizeof(char));
 8013156:	4630      	mov	r0, r6
 8013158:	f7fd f8a2 	bl	80102a0 <strlen>
 801315c:	4602      	mov	r2, r0
 801315e:	4631      	mov	r1, r6
 8013160:	a80f      	add	r0, sp, #60	@ 0x3c
 8013162:	f010 f881 	bl	8023268 <mg_sha1_update>
			mg_sha1_final((unsigned char *)add_pass_digest, &sha1_ctx);
 8013166:	a90f      	add	r1, sp, #60	@ 0x3c
 8013168:	a804      	add	r0, sp, #16
 801316a:	f010 f8b7 	bl	80232dc <mg_sha1_final>
	        for (int i = 0; i < user_list_size; i++) {
 801316e:	4643      	mov	r3, r8
 8013170:	e000      	b.n	8013174 <handle_manage_user+0x244>
 8013172:	3301      	adds	r3, #1
 8013174:	2b09      	cmp	r3, #9
 8013176:	dc23      	bgt.n	80131c0 <handle_manage_user+0x290>
	            if (web_users[i].user[0] == '\0') { // Пустая запись
 8013178:	22a9      	movs	r2, #169	@ 0xa9
 801317a:	fb03 f202 	mul.w	r2, r3, r2
 801317e:	4917      	ldr	r1, [pc, #92]	@ (80131dc <handle_manage_user+0x2ac>)
 8013180:	5c8a      	ldrb	r2, [r1, r2]
 8013182:	2a00      	cmp	r2, #0
 8013184:	d1f5      	bne.n	8013172 <handle_manage_user+0x242>
	                strncpy(web_users[i].user, username_add, sizeof(web_users[i].user) - 1);
 8013186:	22a9      	movs	r2, #169	@ 0xa9
 8013188:	fb02 f803 	mul.w	r8, r2, r3
 801318c:	4689      	mov	r9, r1
 801318e:	227f      	movs	r2, #127	@ 0x7f
 8013190:	4629      	mov	r1, r5
 8013192:	eb09 0008 	add.w	r0, r9, r8
 8013196:	f018 fc7a 	bl	802ba8e <strncpy>
	                strncpy(web_users[i].pass_digest, add_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 801319a:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 801319e:	2228      	movs	r2, #40	@ 0x28
 80131a0:	a904      	add	r1, sp, #16
 80131a2:	4448      	add	r0, r9
 80131a4:	f018 fc73 	bl	802ba8e <strncpy>
	                write_users(user_cred_file, web_users, user_list_size);
 80131a8:	220a      	movs	r2, #10
 80131aa:	4649      	mov	r1, r9
 80131ac:	481b      	ldr	r0, [pc, #108]	@ (801321c <handle_manage_user+0x2ec>)
 80131ae:	f7ff fea5 	bl	8012efc <write_users>
	            mg_http_reply(c, 200, headers,
 80131b2:	4b1b      	ldr	r3, [pc, #108]	@ (8013220 <handle_manage_user+0x2f0>)
 80131b4:	4a0d      	ldr	r2, [pc, #52]	@ (80131ec <handle_manage_user+0x2bc>)
 80131b6:	21c8      	movs	r1, #200	@ 0xc8
 80131b8:	4638      	mov	r0, r7
 80131ba:	f00f ff63 	bl	8023084 <mg_http_reply>
 80131be:	e790      	b.n	80130e2 <handle_manage_user+0x1b2>
	            mg_http_reply(c, 400, headers,
 80131c0:	4b18      	ldr	r3, [pc, #96]	@ (8013224 <handle_manage_user+0x2f4>)
 80131c2:	4a0a      	ldr	r2, [pc, #40]	@ (80131ec <handle_manage_user+0x2bc>)
 80131c4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80131c8:	4638      	mov	r0, r7
 80131ca:	f00f ff5b 	bl	8023084 <mg_http_reply>
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 80131ce:	e788      	b.n	80130e2 <handle_manage_user+0x1b2>
 80131d0:	08035a6c 	.word	0x08035a6c
 80131d4:	08035f64 	.word	0x08035f64
 80131d8:	08039a5c 	.word	0x08039a5c
 80131dc:	200010c8 	.word	0x200010c8
 80131e0:	08035f74 	.word	0x08035f74
 80131e4:	08035f84 	.word	0x08035f84
 80131e8:	08035f88 	.word	0x08035f88
 80131ec:	08035564 	.word	0x08035564
 80131f0:	08035f8c 	.word	0x08035f8c
 80131f4:	08035fc0 	.word	0x08035fc0
 80131f8:	080361a0 	.word	0x080361a0
 80131fc:	08035fe8 	.word	0x08035fe8
 8013200:	0803623c 	.word	0x0803623c
 8013204:	08035520 	.word	0x08035520
 8013208:	08035c50 	.word	0x08035c50
 801320c:	08035ff0 	.word	0x08035ff0
 8013210:	080360a4 	.word	0x080360a4
 8013214:	08035c54 	.word	0x08035c54
 8013218:	08035ff8 	.word	0x08035ff8
 801321c:	08035054 	.word	0x08035054
 8013220:	08036034 	.word	0x08036034
 8013224:	08036070 	.word	0x08036070
	}else if (mg_match(hm->method, mg_str("PUT"), NULL)){
 8013228:	ad2a      	add	r5, sp, #168	@ 0xa8
 801322a:	4964      	ldr	r1, [pc, #400]	@ (80133bc <handle_manage_user+0x48c>)
 801322c:	4628      	mov	r0, r5
 801322e:	f010 f8b3 	bl	8023398 <mg_str_s>
 8013232:	2300      	movs	r3, #0
 8013234:	9300      	str	r3, [sp, #0]
 8013236:	e895 000c 	ldmia.w	r5, {r2, r3}
 801323a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801323e:	f010 facd 	bl	80237dc <mg_match>
 8013242:	2800      	cmp	r0, #0
 8013244:	f43f aeef 	beq.w	8013026 <handle_manage_user+0xf6>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013248:	ab03      	add	r3, sp, #12
 801324a:	4a5d      	ldr	r2, [pc, #372]	@ (80133c0 <handle_manage_user+0x490>)
 801324c:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013250:	c903      	ldmia	r1, {r0, r1}
 8013252:	f00e fd71 	bl	8021d38 <mg_json_get>
 8013256:	2800      	cmp	r0, #0
 8013258:	db21      	blt.n	801329e <handle_manage_user+0x36e>
	        username_edit = mg_json_get_str(hm->body, "$.user");
 801325a:	4a5a      	ldr	r2, [pc, #360]	@ (80133c4 <handle_manage_user+0x494>)
 801325c:	f504 7600 	add.w	r6, r4, #512	@ 0x200
 8013260:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013264:	f011 f988 	bl	8024578 <mg_json_get_str>
 8013268:	4605      	mov	r5, r0
	        new_password = mg_json_get_str(hm->body, "$.pass");
 801326a:	4a57      	ldr	r2, [pc, #348]	@ (80133c8 <handle_manage_user+0x498>)
 801326c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013270:	f011 f982 	bl	8024578 <mg_json_get_str>
 8013274:	4606      	mov	r6, r0
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8013276:	b125      	cbz	r5, 8013282 <handle_manage_user+0x352>
 8013278:	b118      	cbz	r0, 8013282 <handle_manage_user+0x352>
 801327a:	782b      	ldrb	r3, [r5, #0]
 801327c:	b10b      	cbz	r3, 8013282 <handle_manage_user+0x352>
 801327e:	7803      	ldrb	r3, [r0, #0]
 8013280:	b9bb      	cbnz	r3, 80132b2 <handle_manage_user+0x382>
	            mg_http_reply(c, 400, headers,
 8013282:	4b52      	ldr	r3, [pc, #328]	@ (80133cc <handle_manage_user+0x49c>)
 8013284:	4a52      	ldr	r2, [pc, #328]	@ (80133d0 <handle_manage_user+0x4a0>)
 8013286:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801328a:	4638      	mov	r0, r7
 801328c:	f00f fefa 	bl	8023084 <mg_http_reply>
	    free(username_edit);
 8013290:	4628      	mov	r0, r5
 8013292:	f006 fcab 	bl	8019bec <vPortFree>
	    free(new_password);
 8013296:	4630      	mov	r0, r6
 8013298:	f006 fca8 	bl	8019bec <vPortFree>
 801329c:	e6c3      	b.n	8013026 <handle_manage_user+0xf6>
	        mg_http_reply(c, 400, headers,
 801329e:	4b4d      	ldr	r3, [pc, #308]	@ (80133d4 <handle_manage_user+0x4a4>)
 80132a0:	4a4b      	ldr	r2, [pc, #300]	@ (80133d0 <handle_manage_user+0x4a0>)
 80132a2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80132a6:	4638      	mov	r0, r7
 80132a8:	f00f feec 	bl	8023084 <mg_http_reply>
	    char *new_password = NULL;
 80132ac:	2600      	movs	r6, #0
	    char *username_edit = NULL;
 80132ae:	4635      	mov	r5, r6
 80132b0:	e7ee      	b.n	8013290 <handle_manage_user+0x360>
	            char new_pass_digest[sha1_str_len] = {0};
 80132b2:	f04f 0800 	mov.w	r8, #0
 80132b6:	f8cd 8010 	str.w	r8, [sp, #16]
 80132ba:	2225      	movs	r2, #37	@ 0x25
 80132bc:	4641      	mov	r1, r8
 80132be:	a805      	add	r0, sp, #20
 80132c0:	f018 fb9e 	bl	802ba00 <memset>
	            mg_sha1_init(&sha1_ctx);
 80132c4:	a80f      	add	r0, sp, #60	@ 0x3c
 80132c6:	f00f ffb5 	bl	8023234 <mg_sha1_init>
	            mg_sha1_update(&sha1_ctx, (const unsigned char *)new_password, strlen(new_password));
 80132ca:	4630      	mov	r0, r6
 80132cc:	f7fc ffe8 	bl	80102a0 <strlen>
 80132d0:	4602      	mov	r2, r0
 80132d2:	4631      	mov	r1, r6
 80132d4:	a80f      	add	r0, sp, #60	@ 0x3c
 80132d6:	f00f ffc7 	bl	8023268 <mg_sha1_update>
	            mg_sha1_final((unsigned char *)new_pass_digest, &sha1_ctx);
 80132da:	a90f      	add	r1, sp, #60	@ 0x3c
 80132dc:	a804      	add	r0, sp, #16
 80132de:	f00f fffd 	bl	80232dc <mg_sha1_final>
	            for (int i = 0; i < user_list_size; i++) {
 80132e2:	f1b8 0f09 	cmp.w	r8, #9
 80132e6:	dc26      	bgt.n	8013336 <handle_manage_user+0x406>
	                if (strcmp(web_users[i].user, username_edit) == 0) {
 80132e8:	4629      	mov	r1, r5
 80132ea:	20a9      	movs	r0, #169	@ 0xa9
 80132ec:	4b3a      	ldr	r3, [pc, #232]	@ (80133d8 <handle_manage_user+0x4a8>)
 80132ee:	fb00 3008 	mla	r0, r0, r8, r3
 80132f2:	f7fc ff75 	bl	80101e0 <strcmp>
 80132f6:	b110      	cbz	r0, 80132fe <handle_manage_user+0x3ce>
	            for (int i = 0; i < user_list_size; i++) {
 80132f8:	f108 0801 	add.w	r8, r8, #1
 80132fc:	e7f1      	b.n	80132e2 <handle_manage_user+0x3b2>
	                    strncpy(web_users[i].pass_digest, new_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 80132fe:	23a9      	movs	r3, #169	@ 0xa9
 8013300:	fb03 f808 	mul.w	r8, r3, r8
 8013304:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 8013308:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 80133d8 <handle_manage_user+0x4a8>
 801330c:	2228      	movs	r2, #40	@ 0x28
 801330e:	a904      	add	r1, sp, #16
 8013310:	4448      	add	r0, r9
 8013312:	f018 fbbc 	bl	802ba8e <strncpy>
	                    web_users[i].pass_digest[sizeof(web_users[i].pass_digest) - 1] = '\0';
 8013316:	44c8      	add	r8, r9
 8013318:	2300      	movs	r3, #0
 801331a:	f888 30a8 	strb.w	r3, [r8, #168]	@ 0xa8
	                    write_users(user_cred_file, web_users, user_list_size);
 801331e:	220a      	movs	r2, #10
 8013320:	4649      	mov	r1, r9
 8013322:	482e      	ldr	r0, [pc, #184]	@ (80133dc <handle_manage_user+0x4ac>)
 8013324:	f7ff fdea 	bl	8012efc <write_users>
	                mg_http_reply(c, 200, headers,
 8013328:	4b2d      	ldr	r3, [pc, #180]	@ (80133e0 <handle_manage_user+0x4b0>)
 801332a:	4a29      	ldr	r2, [pc, #164]	@ (80133d0 <handle_manage_user+0x4a0>)
 801332c:	21c8      	movs	r1, #200	@ 0xc8
 801332e:	4638      	mov	r0, r7
 8013330:	f00f fea8 	bl	8023084 <mg_http_reply>
 8013334:	e7ac      	b.n	8013290 <handle_manage_user+0x360>
	                mg_http_reply(c, 404, headers,
 8013336:	4b2b      	ldr	r3, [pc, #172]	@ (80133e4 <handle_manage_user+0x4b4>)
 8013338:	4a25      	ldr	r2, [pc, #148]	@ (80133d0 <handle_manage_user+0x4a0>)
 801333a:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 801333e:	4638      	mov	r0, r7
 8013340:	f00f fea0 	bl	8023084 <mg_http_reply>
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8013344:	e7a4      	b.n	8013290 <handle_manage_user+0x360>
	                memset(web_users[i].user, 0, sizeof(web_users[i].user));
 8013346:	2280      	movs	r2, #128	@ 0x80
 8013348:	2100      	movs	r1, #0
 801334a:	4628      	mov	r0, r5
 801334c:	f018 fb58 	bl	802ba00 <memset>
	                memset(web_users[i].pass_digest, 0, sizeof(web_users[i].pass_digest));
 8013350:	23a9      	movs	r3, #169	@ 0xa9
 8013352:	fb03 f004 	mul.w	r0, r3, r4
 8013356:	3080      	adds	r0, #128	@ 0x80
 8013358:	4c1f      	ldr	r4, [pc, #124]	@ (80133d8 <handle_manage_user+0x4a8>)
 801335a:	2229      	movs	r2, #41	@ 0x29
 801335c:	2100      	movs	r1, #0
 801335e:	4420      	add	r0, r4
 8013360:	f018 fb4e 	bl	802ba00 <memset>
	                write_users(user_cred_file, web_users, user_list_size);
 8013364:	220a      	movs	r2, #10
 8013366:	4621      	mov	r1, r4
 8013368:	481c      	ldr	r0, [pc, #112]	@ (80133dc <handle_manage_user+0x4ac>)
 801336a:	f7ff fdc7 	bl	8012efc <write_users>
	            mg_http_reply(c, 200, headers,
 801336e:	4b1e      	ldr	r3, [pc, #120]	@ (80133e8 <handle_manage_user+0x4b8>)
 8013370:	4a17      	ldr	r2, [pc, #92]	@ (80133d0 <handle_manage_user+0x4a0>)
 8013372:	21c8      	movs	r1, #200	@ 0xc8
 8013374:	4638      	mov	r0, r7
 8013376:	f00f fe85 	bl	8023084 <mg_http_reply>
 801337a:	e678      	b.n	801306e <handle_manage_user+0x13e>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 801337c:	2401      	movs	r4, #1
 801337e:	2c09      	cmp	r4, #9
 8013380:	dc0b      	bgt.n	801339a <handle_manage_user+0x46a>
	            if (strcmp(web_users[i].user, username_del) == 0) {
 8013382:	23a9      	movs	r3, #169	@ 0xa9
 8013384:	4d14      	ldr	r5, [pc, #80]	@ (80133d8 <handle_manage_user+0x4a8>)
 8013386:	fb03 5504 	mla	r5, r3, r4, r5
 801338a:	4631      	mov	r1, r6
 801338c:	4628      	mov	r0, r5
 801338e:	f7fc ff27 	bl	80101e0 <strcmp>
 8013392:	2800      	cmp	r0, #0
 8013394:	d0d7      	beq.n	8013346 <handle_manage_user+0x416>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8013396:	3401      	adds	r4, #1
 8013398:	e7f1      	b.n	801337e <handle_manage_user+0x44e>
	            mg_http_reply(c, 400, headers,
 801339a:	4b14      	ldr	r3, [pc, #80]	@ (80133ec <handle_manage_user+0x4bc>)
 801339c:	4a0c      	ldr	r2, [pc, #48]	@ (80133d0 <handle_manage_user+0x4a0>)
 801339e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80133a2:	4638      	mov	r0, r7
 80133a4:	f00f fe6e 	bl	8023084 <mg_http_reply>
 80133a8:	e661      	b.n	801306e <handle_manage_user+0x13e>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80133aa:	4b11      	ldr	r3, [pc, #68]	@ (80133f0 <handle_manage_user+0x4c0>)
 80133ac:	4a08      	ldr	r2, [pc, #32]	@ (80133d0 <handle_manage_user+0x4a0>)
 80133ae:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80133b2:	4638      	mov	r0, r7
 80133b4:	f00f fe66 	bl	8023084 <mg_http_reply>
 80133b8:	e65c      	b.n	8013074 <handle_manage_user+0x144>
 80133ba:	bf00      	nop
 80133bc:	080360e4 	.word	0x080360e4
 80133c0:	08035c50 	.word	0x08035c50
 80133c4:	08035fe8 	.word	0x08035fe8
 80133c8:	08035ff0 	.word	0x08035ff0
 80133cc:	0803615c 	.word	0x0803615c
 80133d0:	08035564 	.word	0x08035564
 80133d4:	08035c54 	.word	0x08035c54
 80133d8:	200010c8 	.word	0x200010c8
 80133dc:	08035054 	.word	0x08035054
 80133e0:	080360e8 	.word	0x080360e8
 80133e4:	0803612c 	.word	0x0803612c
 80133e8:	080361a8 	.word	0x080361a8
 80133ec:	080361e8 	.word	0x080361e8
 80133f0:	0803627c 	.word	0x0803627c

080133f4 <load_users>:
static bool load_users(const char *file_path, users_list_t * users, size_t count){
 80133f4:	b570      	push	{r4, r5, r6, lr}
 80133f6:	460e      	mov	r6, r1
 80133f8:	4614      	mov	r4, r2
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_READ);
 80133fa:	2201      	movs	r2, #1
 80133fc:	4601      	mov	r1, r0
 80133fe:	480a      	ldr	r0, [pc, #40]	@ (8013428 <load_users+0x34>)
 8013400:	f00e fbb1 	bl	8021b66 <mg_fs_open>
	if (!fd) return false;
 8013404:	b168      	cbz	r0, 8013422 <load_users+0x2e>
 8013406:	4605      	mov	r5, r0
	mg_fs_lfs.rd(fd->fd, users, sizeof(users_list_t) * count);
 8013408:	4b07      	ldr	r3, [pc, #28]	@ (8013428 <load_users+0x34>)
 801340a:	691b      	ldr	r3, [r3, #16]
 801340c:	22a9      	movs	r2, #169	@ 0xa9
 801340e:	fb04 f202 	mul.w	r2, r4, r2
 8013412:	4631      	mov	r1, r6
 8013414:	6800      	ldr	r0, [r0, #0]
 8013416:	4798      	blx	r3
	mg_fs_close(fd);
 8013418:	4628      	mov	r0, r5
 801341a:	f00e fbbd 	bl	8021b98 <mg_fs_close>
	return true;
 801341e:	2001      	movs	r0, #1
}
 8013420:	bd70      	pop	{r4, r5, r6, pc}
	if (!fd) return false;
 8013422:	2000      	movs	r0, #0
 8013424:	e7fc      	b.n	8013420 <load_users+0x2c>
 8013426:	bf00      	nop
 8013428:	2000001c 	.word	0x2000001c

0801342c <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 801342c:	b570      	push	{r4, r5, r6, lr}
 801342e:	b086      	sub	sp, #24
 8013430:	4605      	mov	r5, r0
 8013432:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013434:	ae04      	add	r6, sp, #16
 8013436:	4915      	ldr	r1, [pc, #84]	@ (801348c <handle_restart_mcu+0x60>)
 8013438:	4630      	mov	r0, r6
 801343a:	f00f ffad 	bl	8023398 <mg_str_s>
 801343e:	2300      	movs	r3, #0
 8013440:	9300      	str	r3, [sp, #0]
 8013442:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013446:	e894 0003 	ldmia.w	r4, {r0, r1}
 801344a:	f010 f9c7 	bl	80237dc <mg_match>
 801344e:	b1a0      	cbz	r0, 801347a <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 8013450:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8013452:	6818      	ldr	r0, [r3, #0]
 8013454:	2300      	movs	r3, #0
 8013456:	9302      	str	r3, [sp, #8]
 8013458:	4b0d      	ldr	r3, [pc, #52]	@ (8013490 <handle_restart_mcu+0x64>)
 801345a:	9301      	str	r3, [sp, #4]
 801345c:	2301      	movs	r3, #1
 801345e:	9300      	str	r3, [sp, #0]
 8013460:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8013464:	2300      	movs	r3, #0
 8013466:	f011 f979 	bl	802475c <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 801346a:	4b0a      	ldr	r3, [pc, #40]	@ (8013494 <handle_restart_mcu+0x68>)
 801346c:	4a0a      	ldr	r2, [pc, #40]	@ (8013498 <handle_restart_mcu+0x6c>)
 801346e:	21c8      	movs	r1, #200	@ 0xc8
 8013470:	4628      	mov	r0, r5
 8013472:	f00f fe07 	bl	8023084 <mg_http_reply>
}
 8013476:	b006      	add	sp, #24
 8013478:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801347a:	4b08      	ldr	r3, [pc, #32]	@ (801349c <handle_restart_mcu+0x70>)
 801347c:	4a06      	ldr	r2, [pc, #24]	@ (8013498 <handle_restart_mcu+0x6c>)
 801347e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013482:	4628      	mov	r0, r5
 8013484:	f00f fdfe 	bl	8023084 <mg_http_reply>
}
 8013488:	e7f5      	b.n	8013476 <handle_restart_mcu+0x4a>
 801348a:	bf00      	nop
 801348c:	08035520 	.word	0x08035520
 8013490:	08015569 	.word	0x08015569
 8013494:	080362dc 	.word	0x080362dc
 8013498:	08035564 	.word	0x08035564
 801349c:	08035618 	.word	0x08035618

080134a0 <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 80134a0:	b570      	push	{r4, r5, r6, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	4605      	mov	r5, r0
 80134a6:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80134a8:	ae02      	add	r6, sp, #8
 80134aa:	4914      	ldr	r1, [pc, #80]	@ (80134fc <handle_activete_and_reboot+0x5c>)
 80134ac:	4630      	mov	r0, r6
 80134ae:	f00f ff73 	bl	8023398 <mg_str_s>
 80134b2:	2300      	movs	r3, #0
 80134b4:	9300      	str	r3, [sp, #0]
 80134b6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80134ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80134be:	f010 f98d 	bl	80237dc <mg_match>
 80134c2:	b198      	cbz	r0, 80134ec <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 80134c4:	4b0e      	ldr	r3, [pc, #56]	@ (8013500 <handle_activete_and_reboot+0x60>)
 80134c6:	69db      	ldr	r3, [r3, #28]
 80134c8:	490e      	ldr	r1, [pc, #56]	@ (8013504 <handle_activete_and_reboot+0x64>)
 80134ca:	480f      	ldr	r0, [pc, #60]	@ (8013508 <handle_activete_and_reboot+0x68>)
 80134cc:	4798      	blx	r3
 80134ce:	b128      	cbz	r0, 80134dc <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 80134d0:	4621      	mov	r1, r4
 80134d2:	4628      	mov	r0, r5
 80134d4:	f7ff ffaa 	bl	801342c <handle_restart_mcu>
}
 80134d8:	b004      	add	sp, #16
 80134da:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 80134dc:	4b0b      	ldr	r3, [pc, #44]	@ (801350c <handle_activete_and_reboot+0x6c>)
 80134de:	4a0c      	ldr	r2, [pc, #48]	@ (8013510 <handle_activete_and_reboot+0x70>)
 80134e0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80134e4:	4628      	mov	r0, r5
 80134e6:	f00f fdcd 	bl	8023084 <mg_http_reply>
 80134ea:	e7f5      	b.n	80134d8 <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80134ec:	4b09      	ldr	r3, [pc, #36]	@ (8013514 <handle_activete_and_reboot+0x74>)
 80134ee:	4a08      	ldr	r2, [pc, #32]	@ (8013510 <handle_activete_and_reboot+0x70>)
 80134f0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80134f4:	4628      	mov	r0, r5
 80134f6:	f00f fdc5 	bl	8023084 <mg_http_reply>
}
 80134fa:	e7ed      	b.n	80134d8 <handle_activete_and_reboot+0x38>
 80134fc:	08035520 	.word	0x08035520
 8013500:	2000001c 	.word	0x2000001c
 8013504:	0803500c 	.word	0x0803500c
 8013508:	08036314 	.word	0x08036314
 801350c:	0803632c 	.word	0x0803632c
 8013510:	08035564 	.word	0x08035564
 8013514:	08035618 	.word	0x08035618

08013518 <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 8013518:	b570      	push	{r4, r5, r6, lr}
 801351a:	b0a4      	sub	sp, #144	@ 0x90
 801351c:	4605      	mov	r5, r0
 801351e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013520:	ae22      	add	r6, sp, #136	@ 0x88
 8013522:	491a      	ldr	r1, [pc, #104]	@ (801358c <handle_firmware_upload+0x74>)
 8013524:	4630      	mov	r0, r6
 8013526:	f00f ff37 	bl	8023398 <mg_str_s>
 801352a:	2300      	movs	r3, #0
 801352c:	9300      	str	r3, [sp, #0]
 801352e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013532:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013536:	f010 f951 	bl	80237dc <mg_match>
 801353a:	b1f0      	cbz	r0, 801357a <handle_firmware_upload+0x62>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 801353c:	2380      	movs	r3, #128	@ 0x80
 801353e:	aa02      	add	r2, sp, #8
 8013540:	4913      	ldr	r1, [pc, #76]	@ (8013590 <handle_firmware_upload+0x78>)
 8013542:	f104 0010 	add.w	r0, r4, #16
 8013546:	f010 fe14 	bl	8024172 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 801354a:	4912      	ldr	r1, [pc, #72]	@ (8013594 <handle_firmware_upload+0x7c>)
 801354c:	a802      	add	r0, sp, #8
 801354e:	f7fc fe47 	bl	80101e0 <strcmp>
 8013552:	b940      	cbnz	r0, 8013566 <handle_firmware_upload+0x4e>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 8013554:	4b10      	ldr	r3, [pc, #64]	@ (8013598 <handle_firmware_upload+0x80>)
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	4b10      	ldr	r3, [pc, #64]	@ (801359c <handle_firmware_upload+0x84>)
 801355a:	4a11      	ldr	r2, [pc, #68]	@ (80135a0 <handle_firmware_upload+0x88>)
 801355c:	4621      	mov	r1, r4
 801355e:	4628      	mov	r0, r5
 8013560:	f012 fb92 	bl	8025c88 <mg_http_upload>
 8013564:	e010      	b.n	8013588 <handle_firmware_upload+0x70>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013566:	4b0b      	ldr	r3, [pc, #44]	@ (8013594 <handle_firmware_upload+0x7c>)
 8013568:	9300      	str	r3, [sp, #0]
 801356a:	4b0e      	ldr	r3, [pc, #56]	@ (80135a4 <handle_firmware_upload+0x8c>)
 801356c:	4a0e      	ldr	r2, [pc, #56]	@ (80135a8 <handle_firmware_upload+0x90>)
 801356e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013572:	4628      	mov	r0, r5
 8013574:	f00f fd86 	bl	8023084 <mg_http_reply>
 8013578:	e006      	b.n	8013588 <handle_firmware_upload+0x70>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801357a:	4b0c      	ldr	r3, [pc, #48]	@ (80135ac <handle_firmware_upload+0x94>)
 801357c:	4a0a      	ldr	r2, [pc, #40]	@ (80135a8 <handle_firmware_upload+0x90>)
 801357e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013582:	4628      	mov	r0, r5
 8013584:	f00f fd7e 	bl	8023084 <mg_http_reply>
}
 8013588:	b024      	add	sp, #144	@ 0x90
 801358a:	bd70      	pop	{r4, r5, r6, pc}
 801358c:	08035520 	.word	0x08035520
 8013590:	080399ac 	.word	0x080399ac
 8013594:	08036370 	.word	0x08036370
 8013598:	0003d090 	.word	0x0003d090
 801359c:	08035000 	.word	0x08035000
 80135a0:	2000001c 	.word	0x2000001c
 80135a4:	08036380 	.word	0x08036380
 80135a8:	08035564 	.word	0x08035564
 80135ac:	08035618 	.word	0x08035618

080135b0 <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 80135b0:	b570      	push	{r4, r5, r6, lr}
 80135b2:	b0c4      	sub	sp, #272	@ 0x110
 80135b4:	4606      	mov	r6, r0
 80135b6:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 80135b8:	ad42      	add	r5, sp, #264	@ 0x108
 80135ba:	4920      	ldr	r1, [pc, #128]	@ (801363c <handle_fs_mkdir+0x8c>)
 80135bc:	4628      	mov	r0, r5
 80135be:	f00f feeb 	bl	8023398 <mg_str_s>
 80135c2:	2300      	movs	r3, #0
 80135c4:	9300      	str	r3, [sp, #0]
 80135c6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80135ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80135ce:	f010 f905 	bl	80237dc <mg_match>
 80135d2:	b350      	cbz	r0, 801362a <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 80135d4:	237b      	movs	r3, #123	@ 0x7b
 80135d6:	aa23      	add	r2, sp, #140	@ 0x8c
 80135d8:	4919      	ldr	r1, [pc, #100]	@ (8013640 <handle_fs_mkdir+0x90>)
 80135da:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 80135de:	f010 fdc8 	bl	8024172 <mg_http_get_var>
 80135e2:	2800      	cmp	r0, #0
 80135e4:	dd19      	ble.n	801361a <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 80135e6:	ab23      	add	r3, sp, #140	@ 0x8c
 80135e8:	4a16      	ldr	r2, [pc, #88]	@ (8013644 <handle_fs_mkdir+0x94>)
 80135ea:	2180      	movs	r1, #128	@ 0x80
 80135ec:	a803      	add	r0, sp, #12
 80135ee:	f017 fcdd 	bl	802afac <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 80135f2:	4b15      	ldr	r3, [pc, #84]	@ (8013648 <handle_fs_mkdir+0x98>)
 80135f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135f6:	a803      	add	r0, sp, #12
 80135f8:	4798      	blx	r3
 80135fa:	b130      	cbz	r0, 801360a <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 80135fc:	4b13      	ldr	r3, [pc, #76]	@ (801364c <handle_fs_mkdir+0x9c>)
 80135fe:	4a14      	ldr	r2, [pc, #80]	@ (8013650 <handle_fs_mkdir+0xa0>)
 8013600:	21c8      	movs	r1, #200	@ 0xc8
 8013602:	4630      	mov	r0, r6
 8013604:	f00f fd3e 	bl	8023084 <mg_http_reply>
 8013608:	e016      	b.n	8013638 <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 801360a:	4b12      	ldr	r3, [pc, #72]	@ (8013654 <handle_fs_mkdir+0xa4>)
 801360c:	4a10      	ldr	r2, [pc, #64]	@ (8013650 <handle_fs_mkdir+0xa0>)
 801360e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013612:	4630      	mov	r0, r6
 8013614:	f00f fd36 	bl	8023084 <mg_http_reply>
 8013618:	e00e      	b.n	8013638 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801361a:	4b0f      	ldr	r3, [pc, #60]	@ (8013658 <handle_fs_mkdir+0xa8>)
 801361c:	4a0c      	ldr	r2, [pc, #48]	@ (8013650 <handle_fs_mkdir+0xa0>)
 801361e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013622:	4630      	mov	r0, r6
 8013624:	f00f fd2e 	bl	8023084 <mg_http_reply>
 8013628:	e006      	b.n	8013638 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801362a:	4b0c      	ldr	r3, [pc, #48]	@ (801365c <handle_fs_mkdir+0xac>)
 801362c:	4a08      	ldr	r2, [pc, #32]	@ (8013650 <handle_fs_mkdir+0xa0>)
 801362e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013632:	4630      	mov	r0, r6
 8013634:	f00f fd26 	bl	8023084 <mg_http_reply>
}
 8013638:	b044      	add	sp, #272	@ 0x110
 801363a:	bd70      	pop	{r4, r5, r6, pc}
 801363c:	08035520 	.word	0x08035520
 8013640:	080363cc 	.word	0x080363cc
 8013644:	080363d4 	.word	0x080363d4
 8013648:	2000001c 	.word	0x2000001c
 801364c:	080363dc 	.word	0x080363dc
 8013650:	08035564 	.word	0x08035564
 8013654:	08036410 	.word	0x08036410
 8013658:	0803644c 	.word	0x0803644c
 801365c:	08035618 	.word	0x08035618

08013660 <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 8013660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013662:	b097      	sub	sp, #92	@ 0x5c
 8013664:	4604      	mov	r4, r0
 8013666:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 8013668:	2101      	movs	r1, #1
 801366a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801366e:	f7ff f963 	bl	8012938 <mg_calloc>
	if (buff == NULL){
 8013672:	4605      	mov	r5, r0
 8013674:	b150      	cbz	r0, 801368c <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8013676:	2201      	movs	r2, #1
 8013678:	4621      	mov	r1, r4
 801367a:	4828      	ldr	r0, [pc, #160]	@ (801371c <calc_file_md5sum+0xbc>)
 801367c:	f00e fa73 	bl	8021b66 <mg_fs_open>
	if (fd==NULL){
 8013680:	4604      	mov	r4, r0
 8013682:	b140      	cbz	r0, 8013696 <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8013684:	4668      	mov	r0, sp
 8013686:	f00e fe7d 	bl	8022384 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 801368a:	e010      	b.n	80136ae <calc_file_md5sum+0x4e>
		free(buff);
 801368c:	f006 faae 	bl	8019bec <vPortFree>
		return -1;
 8013690:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013694:	e040      	b.n	8013718 <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8013696:	f00e fa7f 	bl	8021b98 <mg_fs_close>
		free(buff);
 801369a:	4628      	mov	r0, r5
 801369c:	f006 faa6 	bl	8019bec <vPortFree>
		return -2;
 80136a0:	f06f 0001 	mvn.w	r0, #1
 80136a4:	e038      	b.n	8013718 <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 80136a6:	4629      	mov	r1, r5
 80136a8:	4668      	mov	r0, sp
 80136aa:	f00e fe81 	bl	80223b0 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 80136ae:	4b1b      	ldr	r3, [pc, #108]	@ (801371c <calc_file_md5sum+0xbc>)
 80136b0:	691b      	ldr	r3, [r3, #16]
 80136b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80136b6:	4629      	mov	r1, r5
 80136b8:	6820      	ldr	r0, [r4, #0]
 80136ba:	4798      	blx	r3
 80136bc:	4602      	mov	r2, r0
 80136be:	2800      	cmp	r0, #0
 80136c0:	d1f1      	bne.n	80136a6 <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 80136c2:	4620      	mov	r0, r4
 80136c4:	f00e fa68 	bl	8021b98 <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 80136c8:	2101      	movs	r1, #1
 80136ca:	2010      	movs	r0, #16
 80136cc:	f7ff f934 	bl	8012938 <mg_calloc>
	if (digest == NULL){
 80136d0:	4607      	mov	r7, r0
 80136d2:	b128      	cbz	r0, 80136e0 <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 80136d4:	4601      	mov	r1, r0
 80136d6:	4668      	mov	r0, sp
 80136d8:	f00e fec1 	bl	802245e <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 80136dc:	2400      	movs	r4, #0
 80136de:	e012      	b.n	8013706 <calc_file_md5sum+0xa6>
		free(buff);
 80136e0:	4628      	mov	r0, r5
 80136e2:	f006 fa83 	bl	8019bec <vPortFree>
		free(digest);
 80136e6:	4638      	mov	r0, r7
 80136e8:	f006 fa80 	bl	8019bec <vPortFree>
		return -1;
 80136ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80136f0:	e012      	b.n	8013718 <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 80136f2:	0061      	lsls	r1, r4, #1
 80136f4:	5d3b      	ldrb	r3, [r7, r4]
 80136f6:	4a0a      	ldr	r2, [pc, #40]	@ (8013720 <calc_file_md5sum+0xc0>)
 80136f8:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 80136fc:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 8013700:	f017 fc54 	bl	802afac <snprintf>
	for (int i = 0; i < 16; ++i) {
 8013704:	3401      	adds	r4, #1
 8013706:	2c0f      	cmp	r4, #15
 8013708:	ddf3      	ble.n	80136f2 <calc_file_md5sum+0x92>
	free(buff);
 801370a:	4628      	mov	r0, r5
 801370c:	f006 fa6e 	bl	8019bec <vPortFree>
	free(digest);
 8013710:	4638      	mov	r0, r7
 8013712:	f006 fa6b 	bl	8019bec <vPortFree>
	return 0;
 8013716:	2000      	movs	r0, #0
}
 8013718:	b017      	add	sp, #92	@ 0x5c
 801371a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801371c:	2000001c 	.word	0x2000001c
 8013720:	08036488 	.word	0x08036488

08013724 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 8013724:	b570      	push	{r4, r5, r6, lr}
 8013726:	b084      	sub	sp, #16
 8013728:	4605      	mov	r5, r0
 801372a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801372c:	ae02      	add	r6, sp, #8
 801372e:	4919      	ldr	r1, [pc, #100]	@ (8013794 <handle_firmware_md5+0x70>)
 8013730:	4630      	mov	r0, r6
 8013732:	f00f fe31 	bl	8023398 <mg_str_s>
 8013736:	2300      	movs	r3, #0
 8013738:	9300      	str	r3, [sp, #0]
 801373a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801373e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013742:	f010 f84b 	bl	80237dc <mg_match>
 8013746:	b1e8      	cbz	r0, 8013784 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8013748:	2101      	movs	r1, #1
 801374a:	2021      	movs	r0, #33	@ 0x21
 801374c:	f7ff f8f4 	bl	8012938 <mg_calloc>
 8013750:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8013752:	4601      	mov	r1, r0
 8013754:	4810      	ldr	r0, [pc, #64]	@ (8013798 <handle_firmware_md5+0x74>)
 8013756:	f7ff ff83 	bl	8013660 <calc_file_md5sum>
 801375a:	b958      	cbnz	r0, 8013774 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801375c:	9400      	str	r4, [sp, #0]
 801375e:	4b0f      	ldr	r3, [pc, #60]	@ (801379c <handle_firmware_md5+0x78>)
 8013760:	4a0f      	ldr	r2, [pc, #60]	@ (80137a0 <handle_firmware_md5+0x7c>)
 8013762:	21c8      	movs	r1, #200	@ 0xc8
 8013764:	4628      	mov	r0, r5
 8013766:	f00f fc8d 	bl	8023084 <mg_http_reply>
		free(md5_str);
 801376a:	4620      	mov	r0, r4
 801376c:	f006 fa3e 	bl	8019bec <vPortFree>
}
 8013770:	b004      	add	sp, #16
 8013772:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8013774:	4b0b      	ldr	r3, [pc, #44]	@ (80137a4 <handle_firmware_md5+0x80>)
 8013776:	4a0a      	ldr	r2, [pc, #40]	@ (80137a0 <handle_firmware_md5+0x7c>)
 8013778:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 801377c:	4628      	mov	r0, r5
 801377e:	f00f fc81 	bl	8023084 <mg_http_reply>
 8013782:	e7f2      	b.n	801376a <handle_firmware_md5+0x46>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013784:	4b08      	ldr	r3, [pc, #32]	@ (80137a8 <handle_firmware_md5+0x84>)
 8013786:	4a06      	ldr	r2, [pc, #24]	@ (80137a0 <handle_firmware_md5+0x7c>)
 8013788:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801378c:	4628      	mov	r0, r5
 801378e:	f00f fc79 	bl	8023084 <mg_http_reply>
}
 8013792:	e7ed      	b.n	8013770 <handle_firmware_md5+0x4c>
 8013794:	08035a6c 	.word	0x08035a6c
 8013798:	08036314 	.word	0x08036314
 801379c:	08036490 	.word	0x08036490
 80137a0:	08035564 	.word	0x08035564
 80137a4:	080364b4 	.word	0x080364b4
 80137a8:	080364f4 	.word	0x080364f4

080137ac <dashboard>:


static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 80137ac:	290b      	cmp	r1, #11
 80137ae:	d000      	beq.n	80137b2 <dashboard+0x6>
 80137b0:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 80137b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137b4:	b0af      	sub	sp, #188	@ 0xbc
 80137b6:	4605      	mov	r5, r0
 80137b8:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

    bool authenticate = auth(c, hm, 0); //Check authentication status
 80137ba:	2200      	movs	r2, #0
 80137bc:	4621      	mov	r1, r4
 80137be:	f7fe fef5 	bl	80125ac <auth>
 80137c2:	4607      	mov	r7, r0

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 80137c4:	ae08      	add	r6, sp, #32
 80137c6:	49a7      	ldr	r1, [pc, #668]	@ (8013a64 <dashboard+0x2b8>)
 80137c8:	4630      	mov	r0, r6
 80137ca:	f00f fde5 	bl	8023398 <mg_str_s>
 80137ce:	2300      	movs	r3, #0
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80137d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80137da:	f00f ffff 	bl	80237dc <mg_match>
 80137de:	b120      	cbz	r0, 80137ea <dashboard+0x3e>
            	handle_OPTIONS_method(c);
 80137e0:	4628      	mov	r0, r5
 80137e2:	f7fe fdb9 	bl	8012358 <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 80137e6:	b02f      	add	sp, #188	@ 0xbc
 80137e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }else if (mg_match(hm->uri, mg_str("/api/#"), NULL) && !authenticate ) { // All requests to /api should be authenticated
 80137ea:	ae0a      	add	r6, sp, #40	@ 0x28
 80137ec:	499e      	ldr	r1, [pc, #632]	@ (8013a68 <dashboard+0x2bc>)
 80137ee:	4630      	mov	r0, r6
 80137f0:	f00f fdd2 	bl	8023398 <mg_str_s>
 80137f4:	2300      	movs	r3, #0
 80137f6:	9300      	str	r3, [sp, #0]
 80137f8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80137fc:	f104 0108 	add.w	r1, r4, #8
 8013800:	c903      	ldmia	r1, {r0, r1}
 8013802:	f00f ffeb 	bl	80237dc <mg_match>
 8013806:	b100      	cbz	r0, 801380a <dashboard+0x5e>
 8013808:	b19f      	cbz	r7, 8013832 <dashboard+0x86>
		}else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 801380a:	ae0c      	add	r6, sp, #48	@ 0x30
 801380c:	4997      	ldr	r1, [pc, #604]	@ (8013a6c <dashboard+0x2c0>)
 801380e:	4630      	mov	r0, r6
 8013810:	f00f fdc2 	bl	8023398 <mg_str_s>
 8013814:	2300      	movs	r3, #0
 8013816:	9300      	str	r3, [sp, #0]
 8013818:	e896 000c 	ldmia.w	r6, {r2, r3}
 801381c:	f104 0108 	add.w	r1, r4, #8
 8013820:	c903      	ldmia	r1, {r0, r1}
 8013822:	f00f ffdb 	bl	80237dc <mg_match>
 8013826:	b160      	cbz	r0, 8013842 <dashboard+0x96>
        	 handler_authanticate(c,hm);
 8013828:	4621      	mov	r1, r4
 801382a:	4628      	mov	r0, r5
 801382c:	f7fe ff98 	bl	8012760 <handler_authanticate>
 8013830:	e7d9      	b.n	80137e6 <dashboard+0x3a>
        	mg_http_reply(c, 403, "", "Not Authorised\n");
 8013832:	4b8f      	ldr	r3, [pc, #572]	@ (8013a70 <dashboard+0x2c4>)
 8013834:	4a8f      	ldr	r2, [pc, #572]	@ (8013a74 <dashboard+0x2c8>)
 8013836:	f240 1193 	movw	r1, #403	@ 0x193
 801383a:	4628      	mov	r0, r5
 801383c:	f00f fc22 	bl	8023084 <mg_http_reply>
 8013840:	e7d1      	b.n	80137e6 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8013842:	ae0e      	add	r6, sp, #56	@ 0x38
 8013844:	498c      	ldr	r1, [pc, #560]	@ (8013a78 <dashboard+0x2cc>)
 8013846:	4630      	mov	r0, r6
 8013848:	f00f fda6 	bl	8023398 <mg_str_s>
 801384c:	2300      	movs	r3, #0
 801384e:	9300      	str	r3, [sp, #0]
 8013850:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013854:	f104 0108 	add.w	r1, r4, #8
 8013858:	c903      	ldmia	r1, {r0, r1}
 801385a:	f00f ffbf 	bl	80237dc <mg_match>
 801385e:	b120      	cbz	r0, 801386a <dashboard+0xbe>
			handler_logout(c,hm);
 8013860:	4621      	mov	r1, r4
 8013862:	4628      	mov	r0, r5
 8013864:	f7fe fdf6 	bl	8012454 <handler_logout>
 8013868:	e7bd      	b.n	80137e6 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 801386a:	ae10      	add	r6, sp, #64	@ 0x40
 801386c:	4983      	ldr	r1, [pc, #524]	@ (8013a7c <dashboard+0x2d0>)
 801386e:	4630      	mov	r0, r6
 8013870:	f00f fd92 	bl	8023398 <mg_str_s>
 8013874:	2300      	movs	r3, #0
 8013876:	9300      	str	r3, [sp, #0]
 8013878:	e896 000c 	ldmia.w	r6, {r2, r3}
 801387c:	f104 0108 	add.w	r1, r4, #8
 8013880:	c903      	ldmia	r1, {r0, r1}
 8013882:	f00f ffab 	bl	80237dc <mg_match>
 8013886:	b118      	cbz	r0, 8013890 <dashboard+0xe4>
			handle_ram_status_get(c);
 8013888:	4628      	mov	r0, r5
 801388a:	f7fe ff7d 	bl	8012788 <handle_ram_status_get>
 801388e:	e7aa      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8013890:	ae12      	add	r6, sp, #72	@ 0x48
 8013892:	497b      	ldr	r1, [pc, #492]	@ (8013a80 <dashboard+0x2d4>)
 8013894:	4630      	mov	r0, r6
 8013896:	f00f fd7f 	bl	8023398 <mg_str_s>
 801389a:	2300      	movs	r3, #0
 801389c:	9300      	str	r3, [sp, #0]
 801389e:	e896 000c 	ldmia.w	r6, {r2, r3}
 80138a2:	f104 0108 	add.w	r1, r4, #8
 80138a6:	c903      	ldmia	r1, {r0, r1}
 80138a8:	f00f ff98 	bl	80237dc <mg_match>
 80138ac:	b120      	cbz	r0, 80138b8 <dashboard+0x10c>
			handle_io_status_get(c, hm);
 80138ae:	4621      	mov	r1, r4
 80138b0:	4628      	mov	r0, r5
 80138b2:	f7fe ff8f 	bl	80127d4 <handle_io_status_get>
 80138b6:	e796      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 80138b8:	ae14      	add	r6, sp, #80	@ 0x50
 80138ba:	4972      	ldr	r1, [pc, #456]	@ (8013a84 <dashboard+0x2d8>)
 80138bc:	4630      	mov	r0, r6
 80138be:	f00f fd6b 	bl	8023398 <mg_str_s>
 80138c2:	2300      	movs	r3, #0
 80138c4:	9300      	str	r3, [sp, #0]
 80138c6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80138ca:	f104 0108 	add.w	r1, r4, #8
 80138ce:	c903      	ldmia	r1, {r0, r1}
 80138d0:	f00f ff84 	bl	80237dc <mg_match>
 80138d4:	b120      	cbz	r0, 80138e0 <dashboard+0x134>
			handle_mqtt_conf(c, hm);
 80138d6:	4621      	mov	r1, r4
 80138d8:	4628      	mov	r0, r5
 80138da:	f7ff f83b 	bl	8012954 <handle_mqtt_conf>
 80138de:	e782      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 80138e0:	ae16      	add	r6, sp, #88	@ 0x58
 80138e2:	4969      	ldr	r1, [pc, #420]	@ (8013a88 <dashboard+0x2dc>)
 80138e4:	4630      	mov	r0, r6
 80138e6:	f00f fd57 	bl	8023398 <mg_str_s>
 80138ea:	2300      	movs	r3, #0
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	e896 000c 	ldmia.w	r6, {r2, r3}
 80138f2:	f104 0108 	add.w	r1, r4, #8
 80138f6:	c903      	ldmia	r1, {r0, r1}
 80138f8:	f00f ff70 	bl	80237dc <mg_match>
 80138fc:	b120      	cbz	r0, 8013908 <dashboard+0x15c>
			handle_dev_status(c, hm);
 80138fe:	4621      	mov	r1, r4
 8013900:	4628      	mov	r0, r5
 8013902:	f7ff f95f 	bl	8012bc4 <handle_dev_status>
 8013906:	e76e      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8013908:	ae18      	add	r6, sp, #96	@ 0x60
 801390a:	4960      	ldr	r1, [pc, #384]	@ (8013a8c <dashboard+0x2e0>)
 801390c:	4630      	mov	r0, r6
 801390e:	f00f fd43 	bl	8023398 <mg_str_s>
 8013912:	2300      	movs	r3, #0
 8013914:	9300      	str	r3, [sp, #0]
 8013916:	e896 000c 	ldmia.w	r6, {r2, r3}
 801391a:	f104 0108 	add.w	r1, r4, #8
 801391e:	c903      	ldmia	r1, {r0, r1}
 8013920:	f00f ff5c 	bl	80237dc <mg_match>
 8013924:	b128      	cbz	r0, 8013932 <dashboard+0x186>
			handle_fs_get_log(c, hm, 0);
 8013926:	2200      	movs	r2, #0
 8013928:	4621      	mov	r1, r4
 801392a:	4628      	mov	r0, r5
 801392c:	f7ff fa88 	bl	8012e40 <handle_fs_get_log>
 8013930:	e759      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8013932:	ae1a      	add	r6, sp, #104	@ 0x68
 8013934:	4956      	ldr	r1, [pc, #344]	@ (8013a90 <dashboard+0x2e4>)
 8013936:	4630      	mov	r0, r6
 8013938:	f00f fd2e 	bl	8023398 <mg_str_s>
 801393c:	2300      	movs	r3, #0
 801393e:	9300      	str	r3, [sp, #0]
 8013940:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013944:	68e1      	ldr	r1, [r4, #12]
 8013946:	68a0      	ldr	r0, [r4, #8]
 8013948:	f00f ff48 	bl	80237dc <mg_match>
 801394c:	b128      	cbz	r0, 801395a <dashboard+0x1ae>
			handle_fs_get_log(c, hm, 1);
 801394e:	2201      	movs	r2, #1
 8013950:	4621      	mov	r1, r4
 8013952:	4628      	mov	r0, r5
 8013954:	f7ff fa74 	bl	8012e40 <handle_fs_get_log>
 8013958:	e745      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/user"), NULL)){
 801395a:	ae1c      	add	r6, sp, #112	@ 0x70
 801395c:	494d      	ldr	r1, [pc, #308]	@ (8013a94 <dashboard+0x2e8>)
 801395e:	4630      	mov	r0, r6
 8013960:	f00f fd1a 	bl	8023398 <mg_str_s>
 8013964:	2300      	movs	r3, #0
 8013966:	9300      	str	r3, [sp, #0]
 8013968:	e896 000c 	ldmia.w	r6, {r2, r3}
 801396c:	68e1      	ldr	r1, [r4, #12]
 801396e:	68a0      	ldr	r0, [r4, #8]
 8013970:	f00f ff34 	bl	80237dc <mg_match>
 8013974:	b120      	cbz	r0, 8013980 <dashboard+0x1d4>
			handle_manage_user(c, hm);
 8013976:	4621      	mov	r1, r4
 8013978:	4628      	mov	r0, r5
 801397a:	f7ff fad9 	bl	8012f30 <handle_manage_user>
 801397e:	e732      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8013980:	ae1e      	add	r6, sp, #120	@ 0x78
 8013982:	4945      	ldr	r1, [pc, #276]	@ (8013a98 <dashboard+0x2ec>)
 8013984:	4630      	mov	r0, r6
 8013986:	f00f fd07 	bl	8023398 <mg_str_s>
 801398a:	2300      	movs	r3, #0
 801398c:	9300      	str	r3, [sp, #0]
 801398e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013992:	68e1      	ldr	r1, [r4, #12]
 8013994:	68a0      	ldr	r0, [r4, #8]
 8013996:	f00f ff21 	bl	80237dc <mg_match>
 801399a:	b120      	cbz	r0, 80139a6 <dashboard+0x1fa>
			handle_restart_mcu(c, hm);
 801399c:	4621      	mov	r1, r4
 801399e:	4628      	mov	r0, r5
 80139a0:	f7ff fd44 	bl	801342c <handle_restart_mcu>
 80139a4:	e71f      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 80139a6:	ae20      	add	r6, sp, #128	@ 0x80
 80139a8:	493c      	ldr	r1, [pc, #240]	@ (8013a9c <dashboard+0x2f0>)
 80139aa:	4630      	mov	r0, r6
 80139ac:	f00f fcf4 	bl	8023398 <mg_str_s>
 80139b0:	2300      	movs	r3, #0
 80139b2:	9300      	str	r3, [sp, #0]
 80139b4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80139b8:	68e1      	ldr	r1, [r4, #12]
 80139ba:	68a0      	ldr	r0, [r4, #8]
 80139bc:	f00f ff0e 	bl	80237dc <mg_match>
 80139c0:	b120      	cbz	r0, 80139cc <dashboard+0x220>
			handle_firmware_upload(c, hm);
 80139c2:	4621      	mov	r1, r4
 80139c4:	4628      	mov	r0, r5
 80139c6:	f7ff fda7 	bl	8013518 <handle_firmware_upload>
 80139ca:	e70c      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 80139cc:	ae22      	add	r6, sp, #136	@ 0x88
 80139ce:	4934      	ldr	r1, [pc, #208]	@ (8013aa0 <dashboard+0x2f4>)
 80139d0:	4630      	mov	r0, r6
 80139d2:	f00f fce1 	bl	8023398 <mg_str_s>
 80139d6:	2300      	movs	r3, #0
 80139d8:	9300      	str	r3, [sp, #0]
 80139da:	e896 000c 	ldmia.w	r6, {r2, r3}
 80139de:	68e1      	ldr	r1, [r4, #12]
 80139e0:	68a0      	ldr	r0, [r4, #8]
 80139e2:	f00f fefb 	bl	80237dc <mg_match>
 80139e6:	b120      	cbz	r0, 80139f2 <dashboard+0x246>
			handle_firmware_md5(c, hm);
 80139e8:	4621      	mov	r1, r4
 80139ea:	4628      	mov	r0, r5
 80139ec:	f7ff fe9a 	bl	8013724 <handle_firmware_md5>
 80139f0:	e6f9      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/apply"), NULL)){
 80139f2:	ae24      	add	r6, sp, #144	@ 0x90
 80139f4:	492b      	ldr	r1, [pc, #172]	@ (8013aa4 <dashboard+0x2f8>)
 80139f6:	4630      	mov	r0, r6
 80139f8:	f00f fcce 	bl	8023398 <mg_str_s>
 80139fc:	2300      	movs	r3, #0
 80139fe:	9300      	str	r3, [sp, #0]
 8013a00:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013a04:	68e1      	ldr	r1, [r4, #12]
 8013a06:	68a0      	ldr	r0, [r4, #8]
 8013a08:	f00f fee8 	bl	80237dc <mg_match>
 8013a0c:	b120      	cbz	r0, 8013a18 <dashboard+0x26c>
			handle_activete_and_reboot(c, hm);
 8013a0e:	4621      	mov	r1, r4
 8013a10:	4628      	mov	r0, r5
 8013a12:	f7ff fd45 	bl	80134a0 <handle_activete_and_reboot>
 8013a16:	e6e6      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8013a18:	ae26      	add	r6, sp, #152	@ 0x98
 8013a1a:	4923      	ldr	r1, [pc, #140]	@ (8013aa8 <dashboard+0x2fc>)
 8013a1c:	4630      	mov	r0, r6
 8013a1e:	f00f fcbb 	bl	8023398 <mg_str_s>
 8013a22:	2300      	movs	r3, #0
 8013a24:	9300      	str	r3, [sp, #0]
 8013a26:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013a2a:	68e1      	ldr	r1, [r4, #12]
 8013a2c:	68a0      	ldr	r0, [r4, #8]
 8013a2e:	f00f fed5 	bl	80237dc <mg_match>
 8013a32:	b120      	cbz	r0, 8013a3e <dashboard+0x292>
			handle_firmware_deactivate(c, hm);
 8013a34:	4621      	mov	r1, r4
 8013a36:	4628      	mov	r0, r5
 8013a38:	f7fe fc9a 	bl	8012370 <handle_firmware_deactivate>
 8013a3c:	e6d3      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8013a3e:	ae28      	add	r6, sp, #160	@ 0xa0
 8013a40:	491a      	ldr	r1, [pc, #104]	@ (8013aac <dashboard+0x300>)
 8013a42:	4630      	mov	r0, r6
 8013a44:	f00f fca8 	bl	8023398 <mg_str_s>
 8013a48:	2300      	movs	r3, #0
 8013a4a:	9300      	str	r3, [sp, #0]
 8013a4c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013a50:	68e1      	ldr	r1, [r4, #12]
 8013a52:	68a0      	ldr	r0, [r4, #8]
 8013a54:	f00f fec2 	bl	80237dc <mg_match>
 8013a58:	b350      	cbz	r0, 8013ab0 <dashboard+0x304>
			 handle_web_files_remove(c, hm);
 8013a5a:	4621      	mov	r1, r4
 8013a5c:	4628      	mov	r0, r5
 8013a5e:	f7fe fcc3 	bl	80123e8 <handle_web_files_remove>
 8013a62:	e6c0      	b.n	80137e6 <dashboard+0x3a>
 8013a64:	08036544 	.word	0x08036544
 8013a68:	0803654c 	.word	0x0803654c
 8013a6c:	08036564 	.word	0x08036564
 8013a70:	08036554 	.word	0x08036554
 8013a74:	08035a68 	.word	0x08035a68
 8013a78:	08036570 	.word	0x08036570
 8013a7c:	0803657c 	.word	0x0803657c
 8013a80:	0803658c 	.word	0x0803658c
 8013a84:	0803659c 	.word	0x0803659c
 8013a88:	080365b0 	.word	0x080365b0
 8013a8c:	080365c4 	.word	0x080365c4
 8013a90:	080365d4 	.word	0x080365d4
 8013a94:	080365e8 	.word	0x080365e8
 8013a98:	080365fc 	.word	0x080365fc
 8013a9c:	08036610 	.word	0x08036610
 8013aa0:	08036628 	.word	0x08036628
 8013aa4:	0803663c 	.word	0x0803663c
 8013aa8:	08036650 	.word	0x08036650
 8013aac:	0803666c 	.word	0x0803666c
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8013ab0:	ae2a      	add	r6, sp, #168	@ 0xa8
 8013ab2:	491d      	ldr	r1, [pc, #116]	@ (8013b28 <dashboard+0x37c>)
 8013ab4:	4630      	mov	r0, r6
 8013ab6:	f00f fc6f 	bl	8023398 <mg_str_s>
 8013aba:	2300      	movs	r3, #0
 8013abc:	9300      	str	r3, [sp, #0]
 8013abe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013ac2:	68e1      	ldr	r1, [r4, #12]
 8013ac4:	68a0      	ldr	r0, [r4, #8]
 8013ac6:	f00f fe89 	bl	80237dc <mg_match>
 8013aca:	b140      	cbz	r0, 8013ade <dashboard+0x332>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8013acc:	4b17      	ldr	r3, [pc, #92]	@ (8013b2c <dashboard+0x380>)
 8013ace:	9300      	str	r3, [sp, #0]
 8013ad0:	4b17      	ldr	r3, [pc, #92]	@ (8013b30 <dashboard+0x384>)
 8013ad2:	4a18      	ldr	r2, [pc, #96]	@ (8013b34 <dashboard+0x388>)
 8013ad4:	4621      	mov	r1, r4
 8013ad6:	4628      	mov	r0, r5
 8013ad8:	f012 f8d6 	bl	8025c88 <mg_http_upload>
 8013adc:	e683      	b.n	80137e6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8013ade:	ae2c      	add	r6, sp, #176	@ 0xb0
 8013ae0:	4915      	ldr	r1, [pc, #84]	@ (8013b38 <dashboard+0x38c>)
 8013ae2:	4630      	mov	r0, r6
 8013ae4:	f00f fc58 	bl	8023398 <mg_str_s>
 8013ae8:	2300      	movs	r3, #0
 8013aea:	9300      	str	r3, [sp, #0]
 8013aec:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013af0:	68e1      	ldr	r1, [r4, #12]
 8013af2:	68a0      	ldr	r0, [r4, #8]
 8013af4:	f00f fe72 	bl	80237dc <mg_match>
 8013af8:	b120      	cbz	r0, 8013b04 <dashboard+0x358>
			 handle_fs_mkdir(c, hm);
 8013afa:	4621      	mov	r1, r4
 8013afc:	4628      	mov	r0, r5
 8013afe:	f7ff fd57 	bl	80135b0 <handle_fs_mkdir>
 8013b02:	e670      	b.n	80137e6 <dashboard+0x3a>
			struct mg_http_serve_opts opts = {
 8013b04:	2300      	movs	r3, #0
 8013b06:	9302      	str	r3, [sp, #8]
 8013b08:	9303      	str	r3, [sp, #12]
 8013b0a:	9304      	str	r3, [sp, #16]
 8013b0c:	9305      	str	r3, [sp, #20]
 8013b0e:	9306      	str	r3, [sp, #24]
 8013b10:	9307      	str	r3, [sp, #28]
 8013b12:	4b07      	ldr	r3, [pc, #28]	@ (8013b30 <dashboard+0x384>)
 8013b14:	9302      	str	r3, [sp, #8]
 8013b16:	4b07      	ldr	r3, [pc, #28]	@ (8013b34 <dashboard+0x388>)
 8013b18:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 8013b1a:	aa02      	add	r2, sp, #8
 8013b1c:	4621      	mov	r1, r4
 8013b1e:	4628      	mov	r0, r5
 8013b20:	f011 ffcc 	bl	8025abc <mg_http_serve_dir>
}
 8013b24:	e65f      	b.n	80137e6 <dashboard+0x3a>
 8013b26:	bf00      	nop
 8013b28:	08036688 	.word	0x08036688
 8013b2c:	0016e360 	.word	0x0016e360
 8013b30:	08034ff8 	.word	0x08034ff8
 8013b34:	2000001c 	.word	0x2000001c
 8013b38:	080366a4 	.word	0x080366a4

08013b3c <dash_hdl>:

void * dash_hdl (void){
 8013b3c:	b508      	push	{r3, lr}

	load_users(user_cred_file, web_users, user_list_size);
 8013b3e:	220a      	movs	r2, #10
 8013b40:	4902      	ldr	r1, [pc, #8]	@ (8013b4c <dash_hdl+0x10>)
 8013b42:	4803      	ldr	r0, [pc, #12]	@ (8013b50 <dash_hdl+0x14>)
 8013b44:	f7ff fc56 	bl	80133f4 <load_users>

	return &dashboard;
}
 8013b48:	4802      	ldr	r0, [pc, #8]	@ (8013b54 <dash_hdl+0x18>)
 8013b4a:	bd08      	pop	{r3, pc}
 8013b4c:	200010c8 	.word	0x200010c8
 8013b50:	08035054 	.word	0x08035054
 8013b54:	080137ad 	.word	0x080137ad

08013b58 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 8013b58:	4b01      	ldr	r3, [pc, #4]	@ (8013b60 <reg_parameter_handler+0x8>)
 8013b5a:	6018      	str	r0, [r3, #0]
}
 8013b5c:	4770      	bx	lr
 8013b5e:	bf00      	nop
 8013b60:	20001764 	.word	0x20001764

08013b64 <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 8013b64:	4b1a      	ldr	r3, [pc, #104]	@ (8013bd0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	b103      	cbz	r3, 8013b6c <_ZL18mqtt_timer_handlerPv+0x8>
 8013b6a:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 8013b6c:	b530      	push	{r4, r5, lr}
 8013b6e:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 8013b70:	4918      	ldr	r1, [pc, #96]	@ (8013bd4 <_ZL18mqtt_timer_handlerPv+0x70>)
 8013b72:	2001      	movs	r0, #1
 8013b74:	f7fe f918 	bl	8011da8 <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8013b78:	4c17      	ldr	r4, [pc, #92]	@ (8013bd8 <_ZL18mqtt_timer_handlerPv+0x74>)
 8013b7a:	2240      	movs	r2, #64	@ 0x40
 8013b7c:	2100      	movs	r1, #0
 8013b7e:	4620      	mov	r0, r4
 8013b80:	f017 ff3e 	bl	802ba00 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8013b84:	ad02      	add	r5, sp, #8
 8013b86:	4b15      	ldr	r3, [pc, #84]	@ (8013bdc <_ZL18mqtt_timer_handlerPv+0x78>)
 8013b88:	6819      	ldr	r1, [r3, #0]
 8013b8a:	4628      	mov	r0, r5
 8013b8c:	f00f fc04 	bl	8023398 <mg_str_s>
 8013b90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013b94:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 8013b98:	4b11      	ldr	r3, [pc, #68]	@ (8013be0 <_ZL18mqtt_timer_handlerPv+0x7c>)
 8013b9a:	6819      	ldr	r1, [r3, #0]
 8013b9c:	4628      	mov	r0, r5
 8013b9e:	f00f fbfb 	bl	8023398 <mg_str_s>
 8013ba2:	f104 0308 	add.w	r3, r4, #8
 8013ba6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013baa:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 8013bae:	233c      	movs	r3, #60	@ 0x3c
 8013bb0:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	9300      	str	r3, [sp, #0]
 8013bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8013be4 <_ZL18mqtt_timer_handlerPv+0x80>)
 8013bb8:	4622      	mov	r2, r4
 8013bba:	490b      	ldr	r1, [pc, #44]	@ (8013be8 <_ZL18mqtt_timer_handlerPv+0x84>)
 8013bbc:	6809      	ldr	r1, [r1, #0]
 8013bbe:	480b      	ldr	r0, [pc, #44]	@ (8013bec <_ZL18mqtt_timer_handlerPv+0x88>)
 8013bc0:	6800      	ldr	r0, [r0, #0]
 8013bc2:	f014 f921 	bl	8027e08 <mg_mqtt_connect>
 8013bc6:	4b02      	ldr	r3, [pc, #8]	@ (8013bd0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8013bc8:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 8013bca:	b005      	add	sp, #20
 8013bcc:	bd30      	pop	{r4, r5, pc}
 8013bce:	bf00      	nop
 8013bd0:	20001788 	.word	0x20001788
 8013bd4:	080366c0 	.word	0x080366c0
 8013bd8:	2000178c 	.word	0x2000178c
 8013bdc:	200017e0 	.word	0x200017e0
 8013be0:	200017dc 	.word	0x200017dc
 8013be4:	08014141 	.word	0x08014141
 8013be8:	200017e4 	.word	0x200017e4
 8013bec:	200017d0 	.word	0x200017d0

08013bf0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8013bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bf4:	b085      	sub	sp, #20
 8013bf6:	4681      	mov	r9, r0
 8013bf8:	4688      	mov	r8, r1
 8013bfa:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8013bfc:	4c2a      	ldr	r4, [pc, #168]	@ (8013ca8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 8013bfe:	f100 0308 	add.w	r3, r0, #8
 8013c02:	9300      	str	r3, [sp, #0]
 8013c04:	4b29      	ldr	r3, [pc, #164]	@ (8013cac <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 8013c06:	4a2a      	ldr	r2, [pc, #168]	@ (8013cb0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 8013c08:	2128      	movs	r1, #40	@ 0x28
 8013c0a:	6820      	ldr	r0, [r4, #0]
 8013c0c:	f00e fd3a 	bl	8022684 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8013c10:	6824      	ldr	r4, [r4, #0]
 8013c12:	4620      	mov	r0, r4
 8013c14:	f7fc fb44 	bl	80102a0 <strlen>
 8013c18:	4601      	mov	r1, r0
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	f000 fbe0 	bl	80143e0 <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 8013c20:	2600      	movs	r6, #0
 8013c22:	e03b      	b.n	8013c9c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 8013c24:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8013c28:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 8013c2c:	791d      	ldrb	r5, [r3, #4]
 8013c2e:	4f21      	ldr	r7, [pc, #132]	@ (8013cb4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 8013c30:	462b      	mov	r3, r5
 8013c32:	4622      	mov	r2, r4
 8013c34:	2180      	movs	r1, #128	@ 0x80
 8013c36:	6838      	ldr	r0, [r7, #0]
 8013c38:	f000 fbf0 	bl	801441c <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8013c3c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8013cc0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 8013c40:	462b      	mov	r3, r5
 8013c42:	4622      	mov	r2, r4
 8013c44:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8013c48:	f8db 0000 	ldr.w	r0, [fp]
 8013c4c:	f000 fc96 	bl	801457c <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8013c50:	4d19      	ldr	r5, [pc, #100]	@ (8013cb8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 8013c52:	ac02      	add	r4, sp, #8
 8013c54:	6839      	ldr	r1, [r7, #0]
 8013c56:	4620      	mov	r0, r4
 8013c58:	f00f fb9e 	bl	8023398 <mg_str_s>
 8013c5c:	f105 0318 	add.w	r3, r5, #24
 8013c60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c64:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8013c68:	f8db 1000 	ldr.w	r1, [fp]
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	f00f fb93 	bl	8023398 <mg_str_s>
 8013c72:	f105 0320 	add.w	r3, r5, #32
 8013c76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c7a:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8013c7e:	2401      	movs	r4, #1
 8013c80:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8013c84:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8013c88:	4629      	mov	r1, r5
 8013c8a:	4648      	mov	r0, r9
 8013c8c:	f012 fe22 	bl	80268d4 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8013c90:	683a      	ldr	r2, [r7, #0]
 8013c92:	490a      	ldr	r1, [pc, #40]	@ (8013cbc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 8013c94:	4620      	mov	r0, r4
 8013c96:	f7fe f887 	bl	8011da8 <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8013c9a:	4426      	add	r6, r4
 8013c9c:	4556      	cmp	r6, sl
 8013c9e:	d3c1      	bcc.n	8013c24 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8013ca0:	b005      	add	sp, #20
 8013ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ca6:	bf00      	nop
 8013ca8:	20001784 	.word	0x20001784
 8013cac:	08025119 	.word	0x08025119
 8013cb0:	08035e4c 	.word	0x08035e4c
 8013cb4:	200017d8 	.word	0x200017d8
 8013cb8:	2000178c 	.word	0x2000178c
 8013cbc:	080366e0 	.word	0x080366e0
 8013cc0:	200017d4 	.word	0x200017d4

08013cc4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8013cc4:	b570      	push	{r4, r5, r6, lr}
 8013cc6:	b084      	sub	sp, #16
	int relay_number = 0;  // Переменная для хранения номера реле
 8013cc8:	2300      	movs	r3, #0
 8013cca:	9301      	str	r3, [sp, #4]
    const char *topic = mess->topic.buf;
 8013ccc:	6805      	ldr	r5, [r0, #0]
    const char *message = mess->data.buf;
 8013cce:	6886      	ldr	r6, [r0, #8]
    if(message == NULL || topic == NULL){
 8013cd0:	b326      	cbz	r6, 8013d1c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
 8013cd2:	4604      	mov	r4, r0
 8013cd4:	b315      	cbz	r5, 8013d1c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8013cd6:	4b71      	ldr	r3, [pc, #452]	@ (8013e9c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	2102      	movs	r1, #2
 8013cde:	a803      	add	r0, sp, #12
 8013ce0:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 8013ce2:	9b03      	ldr	r3, [sp, #12]
 8013ce4:	f8ad 3008 	strh.w	r3, [sp, #8]
 8013ce8:	0c1b      	lsrs	r3, r3, #16
 8013cea:	f88d 300a 	strb.w	r3, [sp, #10]
    const char *switch_position = strstr(topic, "switch");
 8013cee:	496c      	ldr	r1, [pc, #432]	@ (8013ea0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1dc>)
 8013cf0:	4628      	mov	r0, r5
 8013cf2:	f017 ff05 	bl	802bb00 <strstr>
    if (switch_position != NULL) {
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	f000 80ba 	beq.w	8013e70 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ac>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8013cfc:	aa01      	add	r2, sp, #4
 8013cfe:	4969      	ldr	r1, [pc, #420]	@ (8013ea4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e0>)
 8013d00:	f017 fadc 	bl	802b2bc <sscanf>
 8013d04:	2801      	cmp	r0, #1
 8013d06:	d018      	beq.n	8013d3a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x76>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8013d08:	4b67      	ldr	r3, [pc, #412]	@ (8013ea8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	f300 80a5 	bgt.w	8013e5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x198>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 8013d12:	4966      	ldr	r1, [pc, #408]	@ (8013eac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e8>)
 8013d14:	2003      	movs	r0, #3
 8013d16:	f7fe f847 	bl	8011da8 <logging>
 8013d1a:	e0b2      	b.n	8013e82 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8013d1c:	4b62      	ldr	r3, [pc, #392]	@ (8013ea8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f340 80ae 	ble.w	8013e82 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
 8013d26:	4b62      	ldr	r3, [pc, #392]	@ (8013eb0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013d28:	2292      	movs	r2, #146	@ 0x92
 8013d2a:	4962      	ldr	r1, [pc, #392]	@ (8013eb4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013d2c:	2001      	movs	r0, #1
 8013d2e:	f011 fa6b 	bl	8025208 <mg_log_prefix>
 8013d32:	4861      	ldr	r0, [pc, #388]	@ (8013eb8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 8013d34:	f00f f952 	bl	8022fdc <mg_log>
    	return;
 8013d38:	e0a3      	b.n	8013e82 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8013d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8013ea8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	2b01      	cmp	r3, #1
 8013d40:	dc18      	bgt.n	8013d74 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb0>
    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 8013d42:	462b      	mov	r3, r5
 8013d44:	9a01      	ldr	r2, [sp, #4]
 8013d46:	495d      	ldr	r1, [pc, #372]	@ (8013ebc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 8013d48:	2001      	movs	r0, #1
 8013d4a:	f7fe f82d 	bl	8011da8 <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 8013d4e:	9d01      	ldr	r5, [sp, #4]
 8013d50:	1e6b      	subs	r3, r5, #1
 8013d52:	2b02      	cmp	r3, #2
 8013d54:	d81a      	bhi.n	8013d8c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc8>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 8013d56:	68e4      	ldr	r4, [r4, #12]
 8013d58:	2c02      	cmp	r4, #2
 8013d5a:	d02e      	beq.n	8013dba <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf6>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8013d5c:	2c03      	cmp	r4, #3
 8013d5e:	d04f      	beq.n	8013e00 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x13c>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 8013d60:	4b51      	ldr	r3, [pc, #324]	@ (8013ea8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	dc6e      	bgt.n	8013e46 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x182>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 8013d68:	4632      	mov	r2, r6
 8013d6a:	4955      	ldr	r1, [pc, #340]	@ (8013ec0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8013d6c:	2003      	movs	r0, #3
 8013d6e:	f7fe f81b 	bl	8011da8 <logging>
 8013d72:	e086      	b.n	8013e82 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8013d74:	4b4e      	ldr	r3, [pc, #312]	@ (8013eb0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013d76:	229f      	movs	r2, #159	@ 0x9f
 8013d78:	494e      	ldr	r1, [pc, #312]	@ (8013eb4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013d7a:	2002      	movs	r0, #2
 8013d7c:	f011 fa44 	bl	8025208 <mg_log_prefix>
 8013d80:	462a      	mov	r2, r5
 8013d82:	9901      	ldr	r1, [sp, #4]
 8013d84:	484f      	ldr	r0, [pc, #316]	@ (8013ec4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x200>)
 8013d86:	f00f f929 	bl	8022fdc <mg_log>
 8013d8a:	e7da      	b.n	8013d42 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x7e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8013d8c:	4b46      	ldr	r3, [pc, #280]	@ (8013ea8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	dc06      	bgt.n	8013da2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xde>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8013d94:	9b01      	ldr	r3, [sp, #4]
 8013d96:	2203      	movs	r2, #3
 8013d98:	494b      	ldr	r1, [pc, #300]	@ (8013ec8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 8013d9a:	4610      	mov	r0, r2
 8013d9c:	f7fe f804 	bl	8011da8 <logging>
    			return;
 8013da0:	e06f      	b.n	8013e82 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8013da2:	4b43      	ldr	r3, [pc, #268]	@ (8013eb0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013da4:	22a4      	movs	r2, #164	@ 0xa4
 8013da6:	4943      	ldr	r1, [pc, #268]	@ (8013eb4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013da8:	2001      	movs	r0, #1
 8013daa:	f011 fa2d 	bl	8025208 <mg_log_prefix>
 8013dae:	9a01      	ldr	r2, [sp, #4]
 8013db0:	2103      	movs	r1, #3
 8013db2:	4845      	ldr	r0, [pc, #276]	@ (8013ec8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 8013db4:	f00f f912 	bl	8022fdc <mg_log>
 8013db8:	e7ec      	b.n	8013d94 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd0>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 8013dba:	2202      	movs	r2, #2
 8013dbc:	4943      	ldr	r1, [pc, #268]	@ (8013ecc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x208>)
 8013dbe:	4630      	mov	r0, r6
 8013dc0:	f017 fe53 	bl	802ba6a <strncmp>
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	d1c9      	bne.n	8013d5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x98>
				sw_w[relay_number-1] = 1;
 8013dc8:	f105 030f 	add.w	r3, r5, #15
 8013dcc:	446b      	add	r3, sp
 8013dce:	2201      	movs	r2, #1
 8013dd0:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8013dd4:	4b34      	ldr	r3, [pc, #208]	@ (8013ea8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	4293      	cmp	r3, r2
 8013dda:	dc06      	bgt.n	8013dea <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x126>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8013ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8013e9c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	2201      	movs	r2, #1
 8013de2:	2102      	movs	r1, #2
 8013de4:	a802      	add	r0, sp, #8
 8013de6:	4798      	blx	r3
 8013de8:	e04b      	b.n	8013e82 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8013dea:	4b31      	ldr	r3, [pc, #196]	@ (8013eb0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013dec:	22ae      	movs	r2, #174	@ 0xae
 8013dee:	4931      	ldr	r1, [pc, #196]	@ (8013eb4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013df0:	2002      	movs	r0, #2
 8013df2:	f011 fa09 	bl	8025208 <mg_log_prefix>
 8013df6:	9901      	ldr	r1, [sp, #4]
 8013df8:	4835      	ldr	r0, [pc, #212]	@ (8013ed0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>)
 8013dfa:	f00f f8ef 	bl	8022fdc <mg_log>
 8013dfe:	e7ed      	b.n	8013ddc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x118>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8013e00:	2203      	movs	r2, #3
 8013e02:	4934      	ldr	r1, [pc, #208]	@ (8013ed4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>)
 8013e04:	4630      	mov	r0, r6
 8013e06:	f017 fe30 	bl	802ba6a <strncmp>
 8013e0a:	2800      	cmp	r0, #0
 8013e0c:	d1a8      	bne.n	8013d60 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x9c>
				sw_w[relay_number-1] = 0;
 8013e0e:	f105 030f 	add.w	r3, r5, #15
 8013e12:	446b      	add	r3, sp
 8013e14:	2200      	movs	r2, #0
 8013e16:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8013e1a:	4b23      	ldr	r3, [pc, #140]	@ (8013ea8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	dc06      	bgt.n	8013e30 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x16c>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8013e22:	4b1e      	ldr	r3, [pc, #120]	@ (8013e9c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	2201      	movs	r2, #1
 8013e28:	2102      	movs	r1, #2
 8013e2a:	a802      	add	r0, sp, #8
 8013e2c:	4798      	blx	r3
 8013e2e:	e028      	b.n	8013e82 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8013e30:	4b1f      	ldr	r3, [pc, #124]	@ (8013eb0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013e32:	22b2      	movs	r2, #178	@ 0xb2
 8013e34:	491f      	ldr	r1, [pc, #124]	@ (8013eb4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013e36:	2002      	movs	r0, #2
 8013e38:	f011 f9e6 	bl	8025208 <mg_log_prefix>
 8013e3c:	9901      	ldr	r1, [sp, #4]
 8013e3e:	4826      	ldr	r0, [pc, #152]	@ (8013ed8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x214>)
 8013e40:	f00f f8cc 	bl	8022fdc <mg_log>
 8013e44:	e7ed      	b.n	8013e22 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15e>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 8013e46:	4b1a      	ldr	r3, [pc, #104]	@ (8013eb0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013e48:	22b6      	movs	r2, #182	@ 0xb6
 8013e4a:	491a      	ldr	r1, [pc, #104]	@ (8013eb4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013e4c:	2001      	movs	r0, #1
 8013e4e:	f011 f9db 	bl	8025208 <mg_log_prefix>
 8013e52:	4631      	mov	r1, r6
 8013e54:	481a      	ldr	r0, [pc, #104]	@ (8013ec0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8013e56:	f00f f8c1 	bl	8022fdc <mg_log>
 8013e5a:	e785      	b.n	8013d68 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xa4>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8013e5c:	4b14      	ldr	r3, [pc, #80]	@ (8013eb0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013e5e:	22bb      	movs	r2, #187	@ 0xbb
 8013e60:	4914      	ldr	r1, [pc, #80]	@ (8013eb4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013e62:	2001      	movs	r0, #1
 8013e64:	f011 f9d0 	bl	8025208 <mg_log_prefix>
 8013e68:	481c      	ldr	r0, [pc, #112]	@ (8013edc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>)
 8013e6a:	f00f f8b7 	bl	8022fdc <mg_log>
 8013e6e:	e750      	b.n	8013d12 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x4e>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8013e70:	4b0d      	ldr	r3, [pc, #52]	@ (8013ea8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	dc06      	bgt.n	8013e86 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 8013e78:	462a      	mov	r2, r5
 8013e7a:	4919      	ldr	r1, [pc, #100]	@ (8013ee0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8013e7c:	2003      	movs	r0, #3
 8013e7e:	f7fd ff93 	bl	8011da8 <logging>
}
 8013e82:	b004      	add	sp, #16
 8013e84:	bd70      	pop	{r4, r5, r6, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8013e86:	4b0a      	ldr	r3, [pc, #40]	@ (8013eb0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013e88:	22bf      	movs	r2, #191	@ 0xbf
 8013e8a:	490a      	ldr	r1, [pc, #40]	@ (8013eb4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013e8c:	2001      	movs	r0, #1
 8013e8e:	f011 f9bb 	bl	8025208 <mg_log_prefix>
 8013e92:	4629      	mov	r1, r5
 8013e94:	4812      	ldr	r0, [pc, #72]	@ (8013ee0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8013e96:	f00f f8a1 	bl	8022fdc <mg_log>
 8013e9a:	e7ed      	b.n	8013e78 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1b4>
 8013e9c:	20001770 	.word	0x20001770
 8013ea0:	08036774 	.word	0x08036774
 8013ea4:	0803677c 	.word	0x0803677c
 8013ea8:	200000a8 	.word	0x200000a8
 8013eac:	080368d0 	.word	0x080368d0
 8013eb0:	08036704 	.word	0x08036704
 8013eb4:	08036724 	.word	0x08036724
 8013eb8:	08036750 	.word	0x08036750
 8013ebc:	080367b4 	.word	0x080367b4
 8013ec0:	0803685c 	.word	0x0803685c
 8013ec4:	08036788 	.word	0x08036788
 8013ec8:	080367dc 	.word	0x080367dc
 8013ecc:	0803682c 	.word	0x0803682c
 8013ed0:	08036830 	.word	0x08036830
 8013ed4:	08036844 	.word	0x08036844
 8013ed8:	08036848 	.word	0x08036848
 8013edc:	08036898 	.word	0x08036898
 8013ee0:	08036908 	.word	0x08036908

08013ee4 <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8013ee4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8013ee6:	fb01 f400 	mul.w	r4, r1, r0
 8013eea:	4620      	mov	r0, r4
 8013eec:	f005 fdfc 	bl	8019ae8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8013ef0:	4605      	mov	r5, r0
 8013ef2:	b118      	cbz	r0, 8013efc <_ZL9my_callocjj+0x18>
 8013ef4:	4622      	mov	r2, r4
 8013ef6:	2100      	movs	r1, #0
 8013ef8:	f017 fd82 	bl	802ba00 <memset>
  return p;
}
 8013efc:	4628      	mov	r0, r5
 8013efe:	bd38      	pop	{r3, r4, r5, pc}

08013f00 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8013f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f04:	b087      	sub	sp, #28
 8013f06:	4607      	mov	r7, r0
 8013f08:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8013f0a:	4d58      	ldr	r5, [pc, #352]	@ (801406c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 8013f0c:	682b      	ldr	r3, [r5, #0]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	2101      	movs	r1, #1
 8013f12:	a804      	add	r0, sp, #16
 8013f14:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8013f16:	682b      	ldr	r3, [r5, #0]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	2102      	movs	r1, #2
 8013f1c:	f10d 0013 	add.w	r0, sp, #19
 8013f20:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8013f22:	2203      	movs	r2, #3
 8013f24:	4952      	ldr	r1, [pc, #328]	@ (8014070 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8013f26:	a804      	add	r0, sp, #16
 8013f28:	f017 fcd6 	bl	802b8d8 <memcmp>
 8013f2c:	b948      	cbnz	r0, 8013f42 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8013f2e:	2203      	movs	r2, #3
 8013f30:	4950      	ldr	r1, [pc, #320]	@ (8014074 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 8013f32:	f10d 0013 	add.w	r0, sp, #19
 8013f36:	f017 fccf 	bl	802b8d8 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8013f3a:	b910      	cbnz	r0, 8013f42 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8013f3c:	2c00      	cmp	r4, #0
 8013f3e:	f000 8091 	beq.w	8014064 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 8013f42:	4b4b      	ldr	r3, [pc, #300]	@ (8014070 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8013f44:	aa06      	add	r2, sp, #24
 8013f46:	e912 0003 	ldmdb	r2, {r0, r1}
 8013f4a:	6018      	str	r0, [r3, #0]
 8013f4c:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8013f4e:	2101      	movs	r1, #1
 8013f50:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013f54:	f7ff ffc6 	bl	8013ee4 <_ZL9my_callocjj>
 8013f58:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8013f5a:	2101      	movs	r1, #1
 8013f5c:	2080      	movs	r0, #128	@ 0x80
 8013f5e:	f7ff ffc1 	bl	8013ee4 <_ZL9my_callocjj>
 8013f62:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 8013f64:	2200      	movs	r2, #0
 8013f66:	e038      	b.n	8013fda <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8013f68:	f102 0801 	add.w	r8, r2, #1
 8013f6c:	fa5f f888 	uxtb.w	r8, r8
 8013f70:	f102 0318 	add.w	r3, r2, #24
 8013f74:	eb0d 0203 	add.w	r2, sp, r3
 8013f78:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8013f7c:	9300      	str	r3, [sp, #0]
 8013f7e:	4643      	mov	r3, r8
 8013f80:	2201      	movs	r2, #1
 8013f82:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8013f86:	4630      	mov	r0, r6
 8013f88:	f000 fcec 	bl	8014964 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8013f8c:	4643      	mov	r3, r8
 8013f8e:	2201      	movs	r2, #1
 8013f90:	2180      	movs	r1, #128	@ 0x80
 8013f92:	4628      	mov	r0, r5
 8013f94:	f000 fd26 	bl	80149e4 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8013f98:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8014078 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8013f9c:	ac02      	add	r4, sp, #8
 8013f9e:	4629      	mov	r1, r5
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	f00f f9f9 	bl	8023398 <mg_str_s>
 8013fa6:	f109 0318 	add.w	r3, r9, #24
 8013faa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013fae:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8013fb2:	4631      	mov	r1, r6
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	f00f f9ef 	bl	8023398 <mg_str_s>
 8013fba:	f109 0320 	add.w	r3, r9, #32
 8013fbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013fc2:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8013fcc:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8013fd0:	4649      	mov	r1, r9
 8013fd2:	4638      	mov	r0, r7
 8013fd4:	f012 fc7e 	bl	80268d4 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8013fd8:	4642      	mov	r2, r8
 8013fda:	2a02      	cmp	r2, #2
 8013fdc:	d9c4      	bls.n	8013f68 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8013fde:	2200      	movs	r2, #0
 8013fe0:	e038      	b.n	8014054 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8013fe2:	f102 0801 	add.w	r8, r2, #1
 8013fe6:	fa5f f888 	uxtb.w	r8, r8
 8013fea:	f102 0318 	add.w	r3, r2, #24
 8013fee:	eb0d 0203 	add.w	r2, sp, r3
 8013ff2:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 8013ff6:	9300      	str	r3, [sp, #0]
 8013ff8:	4643      	mov	r3, r8
 8013ffa:	2202      	movs	r2, #2
 8013ffc:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014000:	4630      	mov	r0, r6
 8014002:	f000 fcaf 	bl	8014964 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8014006:	4643      	mov	r3, r8
 8014008:	2202      	movs	r2, #2
 801400a:	2180      	movs	r1, #128	@ 0x80
 801400c:	4628      	mov	r0, r5
 801400e:	f000 fce9 	bl	80149e4 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014012:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8014078 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014016:	ac02      	add	r4, sp, #8
 8014018:	4629      	mov	r1, r5
 801401a:	4620      	mov	r0, r4
 801401c:	f00f f9bc 	bl	8023398 <mg_str_s>
 8014020:	f109 0318 	add.w	r3, r9, #24
 8014024:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014028:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 801402c:	4631      	mov	r1, r6
 801402e:	4620      	mov	r0, r4
 8014030:	f00f f9b2 	bl	8023398 <mg_str_s>
 8014034:	f109 0320 	add.w	r3, r9, #32
 8014038:	e894 0003 	ldmia.w	r4, {r0, r1}
 801403c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014040:	2300      	movs	r3, #0
 8014042:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014046:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 801404a:	4649      	mov	r1, r9
 801404c:	4638      	mov	r0, r7
 801404e:	f012 fc41 	bl	80268d4 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014052:	4642      	mov	r2, r8
 8014054:	2a02      	cmp	r2, #2
 8014056:	d9c4      	bls.n	8013fe2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 8014058:	4630      	mov	r0, r6
 801405a:	f005 fdc7 	bl	8019bec <vPortFree>
		free(topik);
 801405e:	4628      	mov	r0, r5
 8014060:	f005 fdc4 	bl	8019bec <vPortFree>
}
 8014064:	b007      	add	sp, #28
 8014066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801406a:	bf00      	nop
 801406c:	20001770 	.word	0x20001770
 8014070:	20001768 	.word	0x20001768
 8014074:	2000176b 	.word	0x2000176b
 8014078:	2000178c 	.word	0x2000178c

0801407c <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 801407c:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 801407e:	4b05      	ldr	r3, [pc, #20]	@ (8014094 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 8014080:	6818      	ldr	r0, [r3, #0]
 8014082:	b110      	cbz	r0, 801408a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014084:	4b04      	ldr	r3, [pc, #16]	@ (8014098 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	b903      	cbnz	r3, 801408c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 801408a:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 801408c:	2100      	movs	r1, #0
 801408e:	f7ff ff37 	bl	8013f00 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014092:	e7fa      	b.n	801408a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014094:	20001788 	.word	0x20001788
 8014098:	20001774 	.word	0x20001774

0801409c <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 801409c:	b508      	push	{r3, lr}
	if(is_registered){
 801409e:	4b05      	ldr	r3, [pc, #20]	@ (80140b4 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 80140a0:	781b      	ldrb	r3, [r3, #0]
 80140a2:	b903      	cbnz	r3, 80140a6 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 80140a4:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 80140a6:	2101      	movs	r1, #1
 80140a8:	4b03      	ldr	r3, [pc, #12]	@ (80140b8 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 80140aa:	6818      	ldr	r0, [r3, #0]
 80140ac:	f7ff ff28 	bl	8013f00 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 80140b0:	e7f8      	b.n	80140a4 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 80140b2:	bf00      	nop
 80140b4:	20001774 	.word	0x20001774
 80140b8:	20001788 	.word	0x20001788

080140bc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 80140bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140c0:	b083      	sub	sp, #12
 80140c2:	4681      	mov	r9, r0
 80140c4:	460d      	mov	r5, r1
 80140c6:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 80140c8:	2400      	movs	r4, #0
 80140ca:	e000      	b.n	80140ce <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 80140cc:	3401      	adds	r4, #1
 80140ce:	42b4      	cmp	r4, r6
 80140d0:	d22e      	bcs.n	8014130 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 80140d2:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 80140d6:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80140da:	2b02      	cmp	r3, #2
 80140dc:	d1f6      	bne.n	80140cc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80140de:	2101      	movs	r1, #1
 80140e0:	2080      	movs	r0, #128	@ 0x80
 80140e2:	f7ff feff 	bl	8013ee4 <_ZL9my_callocjj>
 80140e6:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 80140e8:	f898 3004 	ldrb.w	r3, [r8, #4]
 80140ec:	2202      	movs	r2, #2
 80140ee:	2180      	movs	r1, #128	@ 0x80
 80140f0:	f000 fc60 	bl	80149b4 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 80140f4:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 801413c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 80140f8:	f04f 0b01 	mov.w	fp, #1
 80140fc:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8014100:	46ea      	mov	sl, sp
 8014102:	4639      	mov	r1, r7
 8014104:	4650      	mov	r0, sl
 8014106:	f00f f947 	bl	8023398 <mg_str_s>
 801410a:	f108 0318 	add.w	r3, r8, #24
 801410e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8014112:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8014116:	4641      	mov	r1, r8
 8014118:	4648      	mov	r0, r9
 801411a:	f012 fb8d 	bl	8026838 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 801411e:	463a      	mov	r2, r7
 8014120:	4905      	ldr	r1, [pc, #20]	@ (8014138 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 8014122:	4658      	mov	r0, fp
 8014124:	f7fd fe40 	bl	8011da8 <logging>
			free(topik);
 8014128:	4638      	mov	r0, r7
 801412a:	f005 fd5f 	bl	8019bec <vPortFree>
 801412e:	e7cd      	b.n	80140cc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 8014130:	b003      	add	sp, #12
 8014132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014136:	bf00      	nop
 8014138:	08036938 	.word	0x08036938
 801413c:	2000178c 	.word	0x2000178c

08014140 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 8014140:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 8014142:	2910      	cmp	r1, #16
 8014144:	d031      	beq.n	80141aa <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 8014146:	4605      	mov	r5, r0
 8014148:	2911      	cmp	r1, #17
 801414a:	d002      	beq.n	8014152 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 801414c:	2909      	cmp	r1, #9
 801414e:	d03a      	beq.n	80141c6 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 8014150:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 8014152:	4b22      	ldr	r3, [pc, #136]	@ (80141dc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	2b02      	cmp	r3, #2
 8014158:	dc1d      	bgt.n	8014196 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 801415a:	4921      	ldr	r1, [pc, #132]	@ (80141e0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 801415c:	2001      	movs	r0, #1
 801415e:	f7fd fe23 	bl	8011da8 <logging>
		mqtt_conn = conn;
 8014162:	4b20      	ldr	r3, [pc, #128]	@ (80141e4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014164:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 8014166:	4b20      	ldr	r3, [pc, #128]	@ (80141e8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d1f0      	bne.n	8014150 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 801416e:	4e1f      	ldr	r6, [pc, #124]	@ (80141ec <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 8014170:	2206      	movs	r2, #6
 8014172:	4631      	mov	r1, r6
 8014174:	4628      	mov	r0, r5
 8014176:	f7ff fd3b 	bl	8013bf0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 801417a:	4c1a      	ldr	r4, [pc, #104]	@ (80141e4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 801417c:	2101      	movs	r1, #1
 801417e:	6820      	ldr	r0, [r4, #0]
 8014180:	f7ff febe 	bl	8013f00 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014184:	2206      	movs	r2, #6
 8014186:	4631      	mov	r1, r6
 8014188:	6820      	ldr	r0, [r4, #0]
 801418a:	f7ff ff97 	bl	80140bc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 801418e:	4b16      	ldr	r3, [pc, #88]	@ (80141e8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014190:	2201      	movs	r2, #1
 8014192:	701a      	strb	r2, [r3, #0]
 8014194:	e7dc      	b.n	8014150 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 8014196:	4b16      	ldr	r3, [pc, #88]	@ (80141f0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 8014198:	22cd      	movs	r2, #205	@ 0xcd
 801419a:	4916      	ldr	r1, [pc, #88]	@ (80141f4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 801419c:	2003      	movs	r0, #3
 801419e:	f011 f833 	bl	8025208 <mg_log_prefix>
 80141a2:	4815      	ldr	r0, [pc, #84]	@ (80141f8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 80141a4:	f00e ff1a 	bl	8022fdc <mg_log>
 80141a8:	e7d7      	b.n	801415a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 80141aa:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 80141ac:	4913      	ldr	r1, [pc, #76]	@ (80141fc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 80141ae:	2001      	movs	r0, #1
 80141b0:	f7fd fdfa 	bl	8011da8 <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 80141b4:	4620      	mov	r0, r4
 80141b6:	f7ff fd85 	bl	8013cc4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 80141ba:	2100      	movs	r1, #0
 80141bc:	4b09      	ldr	r3, [pc, #36]	@ (80141e4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80141be:	6818      	ldr	r0, [r3, #0]
 80141c0:	f7ff fe9e 	bl	8013f00 <_ZL19mqtt_send_io_statusP13mg_connectionb>
 80141c4:	e7c4      	b.n	8014150 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 80141c6:	490e      	ldr	r1, [pc, #56]	@ (8014200 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 80141c8:	2001      	movs	r0, #1
 80141ca:	f7fd fded 	bl	8011da8 <logging>
		mqtt_conn     = NULL;
 80141ce:	2300      	movs	r3, #0
 80141d0:	4a04      	ldr	r2, [pc, #16]	@ (80141e4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80141d2:	6013      	str	r3, [r2, #0]
		is_registered = false;
 80141d4:	4a04      	ldr	r2, [pc, #16]	@ (80141e8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 80141d6:	7013      	strb	r3, [r2, #0]
}
 80141d8:	e7ba      	b.n	8014150 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 80141da:	bf00      	nop
 80141dc:	200000a8 	.word	0x200000a8
 80141e0:	08036980 	.word	0x08036980
 80141e4:	20001788 	.word	0x20001788
 80141e8:	20001774 	.word	0x20001774
 80141ec:	20000044 	.word	0x20000044
 80141f0:	08036954 	.word	0x08036954
 80141f4:	08036724 	.word	0x08036724
 80141f8:	08036968 	.word	0x08036968
 80141fc:	08036998 	.word	0x08036998
 8014200:	080369bc 	.word	0x080369bc

08014204 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 8014204:	4b01      	ldr	r3, [pc, #4]	@ (801420c <get_mqtt_connection+0x8>)
 8014206:	6818      	ldr	r0, [r3, #0]
 8014208:	4770      	bx	lr
 801420a:	bf00      	nop
 801420c:	20001788 	.word	0x20001788

08014210 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 8014210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014214:	b086      	sub	sp, #24
 8014216:	4606      	mov	r6, r0
 8014218:	460c      	mov	r4, r1
 801421a:	4691      	mov	r9, r2
 801421c:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 801421e:	2101      	movs	r1, #1
 8014220:	2080      	movs	r0, #128	@ 0x80
 8014222:	f7ff fe5f 	bl	8013ee4 <_ZL9my_callocjj>
 8014226:	f8df a148 	ldr.w	sl, [pc, #328]	@ 8014370 <mqtt_init+0x160>
 801422a:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 801422e:	2101      	movs	r1, #1
 8014230:	2021      	movs	r0, #33	@ 0x21
 8014232:	f7ff fe57 	bl	8013ee4 <_ZL9my_callocjj>
 8014236:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8014374 <mqtt_init+0x164>
 801423a:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 801423e:	2101      	movs	r1, #1
 8014240:	2021      	movs	r0, #33	@ 0x21
 8014242:	f7ff fe4f 	bl	8013ee4 <_ZL9my_callocjj>
 8014246:	4f3b      	ldr	r7, [pc, #236]	@ (8014334 <mqtt_init+0x124>)
 8014248:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 801424a:	2101      	movs	r1, #1
 801424c:	2080      	movs	r0, #128	@ 0x80
 801424e:	f7ff fe49 	bl	8013ee4 <_ZL9my_callocjj>
 8014252:	4b39      	ldr	r3, [pc, #228]	@ (8014338 <mqtt_init+0x128>)
 8014254:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014256:	2101      	movs	r1, #1
 8014258:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801425c:	f7ff fe42 	bl	8013ee4 <_ZL9my_callocjj>
 8014260:	4b36      	ldr	r3, [pc, #216]	@ (801433c <mqtt_init+0x12c>)
 8014262:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 8014264:	2101      	movs	r1, #1
 8014266:	2028      	movs	r0, #40	@ 0x28
 8014268:	f7ff fe3c 	bl	8013ee4 <_ZL9my_callocjj>
 801426c:	4b34      	ldr	r3, [pc, #208]	@ (8014340 <mqtt_init+0x130>)
 801426e:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 8014270:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014272:	4b34      	ldr	r3, [pc, #208]	@ (8014344 <mqtt_init+0x134>)
 8014274:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 8014276:	f8da a000 	ldr.w	sl, [sl]
 801427a:	4649      	mov	r1, r9
 801427c:	4650      	mov	r0, sl
 801427e:	f018 fdc9 	bl	802ce14 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 8014282:	f8d8 9000 	ldr.w	r9, [r8]
 8014286:	4629      	mov	r1, r5
 8014288:	4648      	mov	r0, r9
 801428a:	f018 fdc3 	bl	802ce14 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 801428e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8014290:	6838      	ldr	r0, [r7, #0]
 8014292:	f018 fdbf 	bl	802ce14 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 8014296:	464b      	mov	r3, r9
 8014298:	4652      	mov	r2, sl
 801429a:	492b      	ldr	r1, [pc, #172]	@ (8014348 <mqtt_init+0x138>)
 801429c:	2001      	movs	r0, #1
 801429e:	f7fd fd83 	bl	8011da8 <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 80142a2:	4d2a      	ldr	r5, [pc, #168]	@ (801434c <mqtt_init+0x13c>)
 80142a4:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 80142a6:	4b2a      	ldr	r3, [pc, #168]	@ (8014350 <mqtt_init+0x140>)
 80142a8:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 80142aa:	2106      	movs	r1, #6
 80142ac:	4620      	mov	r0, r4
 80142ae:	f000 f871 	bl	8014394 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 80142b2:	4e28      	ldr	r6, [pc, #160]	@ (8014354 <mqtt_init+0x144>)
 80142b4:	ac04      	add	r4, sp, #16
 80142b6:	f8d8 1000 	ldr.w	r1, [r8]
 80142ba:	4620      	mov	r0, r4
 80142bc:	f00f f86c 	bl	8023398 <mg_str_s>
 80142c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80142c4:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 80142c8:	6839      	ldr	r1, [r7, #0]
 80142ca:	4620      	mov	r0, r4
 80142cc:	f00f f864 	bl	8023398 <mg_str_s>
 80142d0:	f106 0308 	add.w	r3, r6, #8
 80142d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80142d8:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 80142dc:	233c      	movs	r3, #60	@ 0x3c
 80142de:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 80142e0:	2400      	movs	r4, #0
 80142e2:	9402      	str	r4, [sp, #8]
 80142e4:	4b1c      	ldr	r3, [pc, #112]	@ (8014358 <mqtt_init+0x148>)
 80142e6:	9301      	str	r3, [sp, #4]
 80142e8:	2303      	movs	r3, #3
 80142ea:	9300      	str	r3, [sp, #0]
 80142ec:	f242 7210 	movw	r2, #10000	@ 0x2710
 80142f0:	2300      	movs	r3, #0
 80142f2:	6828      	ldr	r0, [r5, #0]
 80142f4:	f010 fa32 	bl	802475c <mg_timer_add>
 80142f8:	4b18      	ldr	r3, [pc, #96]	@ (801435c <mqtt_init+0x14c>)
 80142fa:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 80142fc:	9402      	str	r4, [sp, #8]
 80142fe:	4b18      	ldr	r3, [pc, #96]	@ (8014360 <mqtt_init+0x150>)
 8014300:	9301      	str	r3, [sp, #4]
 8014302:	2601      	movs	r6, #1
 8014304:	9600      	str	r6, [sp, #0]
 8014306:	f643 2298 	movw	r2, #15000	@ 0x3a98
 801430a:	2300      	movs	r3, #0
 801430c:	6828      	ldr	r0, [r5, #0]
 801430e:	f010 fa25 	bl	802475c <mg_timer_add>
 8014312:	4b14      	ldr	r3, [pc, #80]	@ (8014364 <mqtt_init+0x154>)
 8014314:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 8014316:	9402      	str	r4, [sp, #8]
 8014318:	4b13      	ldr	r3, [pc, #76]	@ (8014368 <mqtt_init+0x158>)
 801431a:	9301      	str	r3, [sp, #4]
 801431c:	9600      	str	r6, [sp, #0]
 801431e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8014322:	2300      	movs	r3, #0
 8014324:	6828      	ldr	r0, [r5, #0]
 8014326:	f010 fa19 	bl	802475c <mg_timer_add>
 801432a:	4b10      	ldr	r3, [pc, #64]	@ (801436c <mqtt_init+0x15c>)
 801432c:	6018      	str	r0, [r3, #0]

}
 801432e:	b006      	add	sp, #24
 8014330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014334:	200017dc 	.word	0x200017dc
 8014338:	200017d8 	.word	0x200017d8
 801433c:	200017d4 	.word	0x200017d4
 8014340:	20001784 	.word	0x20001784
 8014344:	20001770 	.word	0x20001770
 8014348:	080369d4 	.word	0x080369d4
 801434c:	200017d0 	.word	0x200017d0
 8014350:	200017cc 	.word	0x200017cc
 8014354:	2000178c 	.word	0x2000178c
 8014358:	08013b65 	.word	0x08013b65
 801435c:	20001780 	.word	0x20001780
 8014360:	0801409d 	.word	0x0801409d
 8014364:	2000177c 	.word	0x2000177c
 8014368:	0801407d 	.word	0x0801407d
 801436c:	20001778 	.word	0x20001778
 8014370:	200017e4 	.word	0x200017e4
 8014374:	200017e0 	.word	0x200017e0

08014378 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014378:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801437a:	fb01 f400 	mul.w	r4, r1, r0
 801437e:	4620      	mov	r0, r4
 8014380:	f005 fbb2 	bl	8019ae8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014384:	4605      	mov	r5, r0
 8014386:	b118      	cbz	r0, 8014390 <_ZL9my_callocjj+0x18>
 8014388:	4622      	mov	r2, r4
 801438a:	2100      	movs	r1, #0
 801438c:	f017 fb38 	bl	802ba00 <memset>
}
 8014390:	4628      	mov	r0, r5
 8014392:	bd38      	pop	{r3, r4, r5, pc}

08014394 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8014394:	b570      	push	{r4, r5, r6, lr}
 8014396:	4606      	mov	r6, r0
 8014398:	460d      	mov	r5, r1

	if ( unical_id){
 801439a:	4b0f      	ldr	r3, [pc, #60]	@ (80143d8 <set_device_id+0x44>)
 801439c:	6818      	ldr	r0, [r3, #0]
 801439e:	b108      	cbz	r0, 80143a4 <set_device_id+0x10>
		free(unical_id);
 80143a0:	f005 fc24 	bl	8019bec <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 80143a4:	0068      	lsls	r0, r5, #1
 80143a6:	2101      	movs	r1, #1
 80143a8:	4408      	add	r0, r1
 80143aa:	f7ff ffe5 	bl	8014378 <_ZL9my_callocjj>
 80143ae:	4b0a      	ldr	r3, [pc, #40]	@ (80143d8 <set_device_id+0x44>)
 80143b0:	6018      	str	r0, [r3, #0]


	if (unical_id){
 80143b2:	b108      	cbz	r0, 80143b8 <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 80143b4:	2400      	movs	r4, #0
 80143b6:	e00b      	b.n	80143d0 <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80143b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80143bc:	e00b      	b.n	80143d6 <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 80143be:	4b06      	ldr	r3, [pc, #24]	@ (80143d8 <set_device_id+0x44>)
 80143c0:	6818      	ldr	r0, [r3, #0]
 80143c2:	5d32      	ldrb	r2, [r6, r4]
 80143c4:	4905      	ldr	r1, [pc, #20]	@ (80143dc <set_device_id+0x48>)
 80143c6:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80143ca:	f016 ff57 	bl	802b27c <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 80143ce:	3401      	adds	r4, #1
 80143d0:	42ac      	cmp	r4, r5
 80143d2:	d3f4      	bcc.n	80143be <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 80143d4:	2000      	movs	r0, #0
}
 80143d6:	bd70      	pop	{r4, r5, r6, pc}
 80143d8:	200017ec 	.word	0x200017ec
 80143dc:	08036a00 	.word	0x08036a00

080143e0 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 80143e0:	b538      	push	{r3, r4, r5, lr}
 80143e2:	4605      	mov	r5, r0
 80143e4:	460c      	mov	r4, r1

	if(dev_conf_ip){
 80143e6:	4b0c      	ldr	r3, [pc, #48]	@ (8014418 <set_device_conf_ip+0x38>)
 80143e8:	6818      	ldr	r0, [r3, #0]
 80143ea:	b108      	cbz	r0, 80143f0 <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 80143ec:	f005 fbfe 	bl	8019bec <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 80143f0:	2101      	movs	r1, #1
 80143f2:	1860      	adds	r0, r4, r1
 80143f4:	f7ff ffc0 	bl	8014378 <_ZL9my_callocjj>
 80143f8:	4b07      	ldr	r3, [pc, #28]	@ (8014418 <set_device_conf_ip+0x38>)
 80143fa:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 80143fc:	b140      	cbz	r0, 8014410 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 80143fe:	4622      	mov	r2, r4
 8014400:	4629      	mov	r1, r5
 8014402:	f017 fb44 	bl	802ba8e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 8014406:	4b04      	ldr	r3, [pc, #16]	@ (8014418 <set_device_conf_ip+0x38>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2000      	movs	r0, #0
 801440c:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 801440e:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8014410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014414:	e7fb      	b.n	801440e <set_device_conf_ip+0x2e>
 8014416:	bf00      	nop
 8014418:	200017e8 	.word	0x200017e8

0801441c <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 801441c:	b500      	push	{lr}
 801441e:	b087      	sub	sp, #28

	strcpy(buff, "");
 8014420:	f04f 0c00 	mov.w	ip, #0
 8014424:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8014428:	3a01      	subs	r2, #1
 801442a:	2a07      	cmp	r2, #7
 801442c:	f200 8087 	bhi.w	801453e <get_config_topik_string+0x122>
 8014430:	e8df f002 	tbb	[pc, r2]
 8014434:	45251604 	.word	0x45251604
 8014438:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 801443c:	9304      	str	r3, [sp, #16]
 801443e:	4b41      	ldr	r3, [pc, #260]	@ (8014544 <get_config_topik_string+0x128>)
 8014440:	9303      	str	r3, [sp, #12]
 8014442:	4b41      	ldr	r3, [pc, #260]	@ (8014548 <get_config_topik_string+0x12c>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	9302      	str	r3, [sp, #8]
 8014448:	4b40      	ldr	r3, [pc, #256]	@ (801454c <get_config_topik_string+0x130>)
 801444a:	9301      	str	r3, [sp, #4]
 801444c:	4b40      	ldr	r3, [pc, #256]	@ (8014550 <get_config_topik_string+0x134>)
 801444e:	9300      	str	r3, [sp, #0]
 8014450:	4b40      	ldr	r3, [pc, #256]	@ (8014554 <get_config_topik_string+0x138>)
 8014452:	4a41      	ldr	r2, [pc, #260]	@ (8014558 <get_config_topik_string+0x13c>)
 8014454:	f016 fdaa 	bl	802afac <snprintf>
			return -1;
			break;
	}


	return 0;
 8014458:	2000      	movs	r0, #0
}
 801445a:	b007      	add	sp, #28
 801445c:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 8014460:	9304      	str	r3, [sp, #16]
 8014462:	4b3e      	ldr	r3, [pc, #248]	@ (801455c <get_config_topik_string+0x140>)
 8014464:	9303      	str	r3, [sp, #12]
 8014466:	4a38      	ldr	r2, [pc, #224]	@ (8014548 <get_config_topik_string+0x12c>)
 8014468:	6812      	ldr	r2, [r2, #0]
 801446a:	9202      	str	r2, [sp, #8]
 801446c:	4a37      	ldr	r2, [pc, #220]	@ (801454c <get_config_topik_string+0x130>)
 801446e:	9201      	str	r2, [sp, #4]
 8014470:	9300      	str	r3, [sp, #0]
 8014472:	4b38      	ldr	r3, [pc, #224]	@ (8014554 <get_config_topik_string+0x138>)
 8014474:	4a38      	ldr	r2, [pc, #224]	@ (8014558 <get_config_topik_string+0x13c>)
 8014476:	f016 fd99 	bl	802afac <snprintf>
	return 0;
 801447a:	2000      	movs	r0, #0
			break;
 801447c:	e7ed      	b.n	801445a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 801447e:	9304      	str	r3, [sp, #16]
 8014480:	4b37      	ldr	r3, [pc, #220]	@ (8014560 <get_config_topik_string+0x144>)
 8014482:	9303      	str	r3, [sp, #12]
 8014484:	4b30      	ldr	r3, [pc, #192]	@ (8014548 <get_config_topik_string+0x12c>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	9302      	str	r3, [sp, #8]
 801448a:	4b30      	ldr	r3, [pc, #192]	@ (801454c <get_config_topik_string+0x130>)
 801448c:	9301      	str	r3, [sp, #4]
 801448e:	4b35      	ldr	r3, [pc, #212]	@ (8014564 <get_config_topik_string+0x148>)
 8014490:	9300      	str	r3, [sp, #0]
 8014492:	4b30      	ldr	r3, [pc, #192]	@ (8014554 <get_config_topik_string+0x138>)
 8014494:	4a30      	ldr	r2, [pc, #192]	@ (8014558 <get_config_topik_string+0x13c>)
 8014496:	f016 fd89 	bl	802afac <snprintf>
	return 0;
 801449a:	2000      	movs	r0, #0
			break;
 801449c:	e7dd      	b.n	801445a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 801449e:	9304      	str	r3, [sp, #16]
 80144a0:	4b31      	ldr	r3, [pc, #196]	@ (8014568 <get_config_topik_string+0x14c>)
 80144a2:	9303      	str	r3, [sp, #12]
 80144a4:	4b28      	ldr	r3, [pc, #160]	@ (8014548 <get_config_topik_string+0x12c>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	9302      	str	r3, [sp, #8]
 80144aa:	4b28      	ldr	r3, [pc, #160]	@ (801454c <get_config_topik_string+0x130>)
 80144ac:	9301      	str	r3, [sp, #4]
 80144ae:	4b2d      	ldr	r3, [pc, #180]	@ (8014564 <get_config_topik_string+0x148>)
 80144b0:	9300      	str	r3, [sp, #0]
 80144b2:	4b28      	ldr	r3, [pc, #160]	@ (8014554 <get_config_topik_string+0x138>)
 80144b4:	4a28      	ldr	r2, [pc, #160]	@ (8014558 <get_config_topik_string+0x13c>)
 80144b6:	f016 fd79 	bl	802afac <snprintf>
	return 0;
 80144ba:	2000      	movs	r0, #0
			break;
 80144bc:	e7cd      	b.n	801445a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 80144be:	9304      	str	r3, [sp, #16]
 80144c0:	4b2a      	ldr	r3, [pc, #168]	@ (801456c <get_config_topik_string+0x150>)
 80144c2:	9303      	str	r3, [sp, #12]
 80144c4:	4b20      	ldr	r3, [pc, #128]	@ (8014548 <get_config_topik_string+0x12c>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	9302      	str	r3, [sp, #8]
 80144ca:	4b20      	ldr	r3, [pc, #128]	@ (801454c <get_config_topik_string+0x130>)
 80144cc:	9301      	str	r3, [sp, #4]
 80144ce:	4b25      	ldr	r3, [pc, #148]	@ (8014564 <get_config_topik_string+0x148>)
 80144d0:	9300      	str	r3, [sp, #0]
 80144d2:	4b20      	ldr	r3, [pc, #128]	@ (8014554 <get_config_topik_string+0x138>)
 80144d4:	4a20      	ldr	r2, [pc, #128]	@ (8014558 <get_config_topik_string+0x13c>)
 80144d6:	f016 fd69 	bl	802afac <snprintf>
	return 0;
 80144da:	2000      	movs	r0, #0
			break;
 80144dc:	e7bd      	b.n	801445a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 80144de:	9304      	str	r3, [sp, #16]
 80144e0:	4b23      	ldr	r3, [pc, #140]	@ (8014570 <get_config_topik_string+0x154>)
 80144e2:	9303      	str	r3, [sp, #12]
 80144e4:	4b18      	ldr	r3, [pc, #96]	@ (8014548 <get_config_topik_string+0x12c>)
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	9302      	str	r3, [sp, #8]
 80144ea:	4b18      	ldr	r3, [pc, #96]	@ (801454c <get_config_topik_string+0x130>)
 80144ec:	9301      	str	r3, [sp, #4]
 80144ee:	4b1d      	ldr	r3, [pc, #116]	@ (8014564 <get_config_topik_string+0x148>)
 80144f0:	9300      	str	r3, [sp, #0]
 80144f2:	4b18      	ldr	r3, [pc, #96]	@ (8014554 <get_config_topik_string+0x138>)
 80144f4:	4a18      	ldr	r2, [pc, #96]	@ (8014558 <get_config_topik_string+0x13c>)
 80144f6:	f016 fd59 	bl	802afac <snprintf>
	return 0;
 80144fa:	2000      	movs	r0, #0
			break;
 80144fc:	e7ad      	b.n	801445a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 80144fe:	9304      	str	r3, [sp, #16]
 8014500:	4b1c      	ldr	r3, [pc, #112]	@ (8014574 <get_config_topik_string+0x158>)
 8014502:	9303      	str	r3, [sp, #12]
 8014504:	4b10      	ldr	r3, [pc, #64]	@ (8014548 <get_config_topik_string+0x12c>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	9302      	str	r3, [sp, #8]
 801450a:	4b10      	ldr	r3, [pc, #64]	@ (801454c <get_config_topik_string+0x130>)
 801450c:	9301      	str	r3, [sp, #4]
 801450e:	4b15      	ldr	r3, [pc, #84]	@ (8014564 <get_config_topik_string+0x148>)
 8014510:	9300      	str	r3, [sp, #0]
 8014512:	4b10      	ldr	r3, [pc, #64]	@ (8014554 <get_config_topik_string+0x138>)
 8014514:	4a10      	ldr	r2, [pc, #64]	@ (8014558 <get_config_topik_string+0x13c>)
 8014516:	f016 fd49 	bl	802afac <snprintf>
	return 0;
 801451a:	2000      	movs	r0, #0
			break;
 801451c:	e79d      	b.n	801445a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 801451e:	9304      	str	r3, [sp, #16]
 8014520:	4b15      	ldr	r3, [pc, #84]	@ (8014578 <get_config_topik_string+0x15c>)
 8014522:	9303      	str	r3, [sp, #12]
 8014524:	4b08      	ldr	r3, [pc, #32]	@ (8014548 <get_config_topik_string+0x12c>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	9302      	str	r3, [sp, #8]
 801452a:	4b08      	ldr	r3, [pc, #32]	@ (801454c <get_config_topik_string+0x130>)
 801452c:	9301      	str	r3, [sp, #4]
 801452e:	4b0d      	ldr	r3, [pc, #52]	@ (8014564 <get_config_topik_string+0x148>)
 8014530:	9300      	str	r3, [sp, #0]
 8014532:	4b08      	ldr	r3, [pc, #32]	@ (8014554 <get_config_topik_string+0x138>)
 8014534:	4a08      	ldr	r2, [pc, #32]	@ (8014558 <get_config_topik_string+0x13c>)
 8014536:	f016 fd39 	bl	802afac <snprintf>
	return 0;
 801453a:	2000      	movs	r0, #0
			break;
 801453c:	e78d      	b.n	801445a <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 801453e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014542:	e78a      	b.n	801445a <get_config_topik_string+0x3e>
 8014544:	08036a20 	.word	0x08036a20
 8014548:	200017ec 	.word	0x200017ec
 801454c:	08036a28 	.word	0x08036a28
 8014550:	08036a30 	.word	0x08036a30
 8014554:	20000074 	.word	0x20000074
 8014558:	08036a08 	.word	0x08036a08
 801455c:	08036774 	.word	0x08036774
 8014560:	08036a40 	.word	0x08036a40
 8014564:	08036a48 	.word	0x08036a48
 8014568:	08036a50 	.word	0x08036a50
 801456c:	08036a58 	.word	0x08036a58
 8014570:	08036a60 	.word	0x08036a60
 8014574:	08036a70 	.word	0x08036a70
 8014578:	08036a80 	.word	0x08036a80

0801457c <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 801457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014580:	b099      	sub	sp, #100	@ 0x64
 8014582:	9017      	str	r0, [sp, #92]	@ 0x5c
 8014584:	460d      	mov	r5, r1
 8014586:	4617      	mov	r7, r2
 8014588:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 801458a:	460a      	mov	r2, r1
 801458c:	2100      	movs	r1, #0
 801458e:	f017 fa37 	bl	802ba00 <memset>

	switch (payload_type) {
 8014592:	1e7a      	subs	r2, r7, #1
 8014594:	2a07      	cmp	r2, #7
 8014596:	f200 81ba 	bhi.w	801490e <get_config_payload_string+0x392>
 801459a:	e8df f012 	tbh	[pc, r2, lsl #1]
 801459e:	0008      	.short	0x0008
 80145a0:	00a10043 	.word	0x00a10043
 80145a4:	00c500ea 	.word	0x00c500ea
 80145a8:	0193016e 	.word	0x0193016e
 80145ac:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 80145ae:	2101      	movs	r1, #1
 80145b0:	2080      	movs	r0, #128	@ 0x80
 80145b2:	f7ff fee1 	bl	8014378 <_ZL9my_callocjj>
 80145b6:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 80145b8:	9400      	str	r4, [sp, #0]
 80145ba:	4b80      	ldr	r3, [pc, #512]	@ (80147bc <get_config_payload_string+0x240>)
 80145bc:	4a80      	ldr	r2, [pc, #512]	@ (80147c0 <get_config_payload_string+0x244>)
 80145be:	2180      	movs	r1, #128	@ 0x80
 80145c0:	f016 fcf4 	bl	802afac <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 80145c4:	4b7f      	ldr	r3, [pc, #508]	@ (80147c4 <get_config_payload_string+0x248>)
 80145c6:	681a      	ldr	r2, [r3, #0]
 80145c8:	4b7f      	ldr	r3, [pc, #508]	@ (80147c8 <get_config_payload_string+0x24c>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	9314      	str	r3, [sp, #80]	@ 0x50
 80145ce:	4b7f      	ldr	r3, [pc, #508]	@ (80147cc <get_config_payload_string+0x250>)
 80145d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80145d2:	4b7f      	ldr	r3, [pc, #508]	@ (80147d0 <get_config_payload_string+0x254>)
 80145d4:	9312      	str	r3, [sp, #72]	@ 0x48
 80145d6:	4b7f      	ldr	r3, [pc, #508]	@ (80147d4 <get_config_payload_string+0x258>)
 80145d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80145da:	4b7f      	ldr	r3, [pc, #508]	@ (80147d8 <get_config_payload_string+0x25c>)
 80145dc:	9310      	str	r3, [sp, #64]	@ 0x40
 80145de:	4b7f      	ldr	r3, [pc, #508]	@ (80147dc <get_config_payload_string+0x260>)
 80145e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80145e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80145e4:	4b7e      	ldr	r3, [pc, #504]	@ (80147e0 <get_config_payload_string+0x264>)
 80145e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80145e8:	497e      	ldr	r1, [pc, #504]	@ (80147e4 <get_config_payload_string+0x268>)
 80145ea:	910c      	str	r1, [sp, #48]	@ 0x30
 80145ec:	940b      	str	r4, [sp, #44]	@ 0x2c
 80145ee:	497e      	ldr	r1, [pc, #504]	@ (80147e8 <get_config_payload_string+0x26c>)
 80145f0:	910a      	str	r1, [sp, #40]	@ 0x28
 80145f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80145f4:	9308      	str	r3, [sp, #32]
 80145f6:	9707      	str	r7, [sp, #28]
 80145f8:	487c      	ldr	r0, [pc, #496]	@ (80147ec <get_config_payload_string+0x270>)
 80145fa:	9006      	str	r0, [sp, #24]
 80145fc:	9405      	str	r4, [sp, #20]
 80145fe:	9104      	str	r1, [sp, #16]
 8014600:	9403      	str	r4, [sp, #12]
 8014602:	9102      	str	r1, [sp, #8]
 8014604:	9201      	str	r2, [sp, #4]
 8014606:	9300      	str	r3, [sp, #0]
 8014608:	4b79      	ldr	r3, [pc, #484]	@ (80147f0 <get_config_payload_string+0x274>)
 801460a:	4a7a      	ldr	r2, [pc, #488]	@ (80147f4 <get_config_payload_string+0x278>)
 801460c:	4629      	mov	r1, r5
 801460e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014610:	f016 fccc 	bl	802afac <snprintf>
 8014614:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8014616:	4638      	mov	r0, r7
 8014618:	f005 fae8 	bl	8019bec <vPortFree>

			return len;
 801461c:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 801461e:	b019      	add	sp, #100	@ 0x64
 8014620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014624:	2101      	movs	r1, #1
 8014626:	2080      	movs	r0, #128	@ 0x80
 8014628:	f7ff fea6 	bl	8014378 <_ZL9my_callocjj>
 801462c:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 801462e:	2101      	movs	r1, #1
 8014630:	2080      	movs	r0, #128	@ 0x80
 8014632:	f7ff fea1 	bl	8014378 <_ZL9my_callocjj>
 8014636:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8014638:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 801482c <get_config_payload_string+0x2b0>
 801463c:	9400      	str	r4, [sp, #0]
 801463e:	464b      	mov	r3, r9
 8014640:	4a6d      	ldr	r2, [pc, #436]	@ (80147f8 <get_config_payload_string+0x27c>)
 8014642:	2180      	movs	r1, #128	@ 0x80
 8014644:	4638      	mov	r0, r7
 8014646:	f016 fcb1 	bl	802afac <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 801464a:	f8df a194 	ldr.w	sl, [pc, #404]	@ 80147e0 <get_config_payload_string+0x264>
 801464e:	4e65      	ldr	r6, [pc, #404]	@ (80147e4 <get_config_payload_string+0x268>)
 8014650:	9602      	str	r6, [sp, #8]
 8014652:	9701      	str	r7, [sp, #4]
 8014654:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80147c4 <get_config_payload_string+0x248>
 8014658:	f8db 3000 	ldr.w	r3, [fp]
 801465c:	9300      	str	r3, [sp, #0]
 801465e:	4653      	mov	r3, sl
 8014660:	4a66      	ldr	r2, [pc, #408]	@ (80147fc <get_config_payload_string+0x280>)
 8014662:	2180      	movs	r1, #128	@ 0x80
 8014664:	4640      	mov	r0, r8
 8014666:	f016 fca1 	bl	802afac <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 801466a:	9400      	str	r4, [sp, #0]
 801466c:	4b64      	ldr	r3, [pc, #400]	@ (8014800 <get_config_payload_string+0x284>)
 801466e:	4a54      	ldr	r2, [pc, #336]	@ (80147c0 <get_config_payload_string+0x244>)
 8014670:	2180      	movs	r1, #128	@ 0x80
 8014672:	4638      	mov	r0, r7
 8014674:	f016 fc9a 	bl	802afac <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8014678:	f8db 3000 	ldr.w	r3, [fp]
 801467c:	4a52      	ldr	r2, [pc, #328]	@ (80147c8 <get_config_payload_string+0x24c>)
 801467e:	6812      	ldr	r2, [r2, #0]
 8014680:	9214      	str	r2, [sp, #80]	@ 0x50
 8014682:	4a52      	ldr	r2, [pc, #328]	@ (80147cc <get_config_payload_string+0x250>)
 8014684:	9213      	str	r2, [sp, #76]	@ 0x4c
 8014686:	4a52      	ldr	r2, [pc, #328]	@ (80147d0 <get_config_payload_string+0x254>)
 8014688:	9212      	str	r2, [sp, #72]	@ 0x48
 801468a:	4a52      	ldr	r2, [pc, #328]	@ (80147d4 <get_config_payload_string+0x258>)
 801468c:	9211      	str	r2, [sp, #68]	@ 0x44
 801468e:	4a52      	ldr	r2, [pc, #328]	@ (80147d8 <get_config_payload_string+0x25c>)
 8014690:	9210      	str	r2, [sp, #64]	@ 0x40
 8014692:	4a52      	ldr	r2, [pc, #328]	@ (80147dc <get_config_payload_string+0x260>)
 8014694:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014696:	930e      	str	r3, [sp, #56]	@ 0x38
 8014698:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 801469c:	960c      	str	r6, [sp, #48]	@ 0x30
 801469e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80146a0:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80146a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80146a6:	f8cd a020 	str.w	sl, [sp, #32]
 80146aa:	9707      	str	r7, [sp, #28]
 80146ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80146b0:	9405      	str	r4, [sp, #20]
 80146b2:	f8cd 9010 	str.w	r9, [sp, #16]
 80146b6:	9403      	str	r4, [sp, #12]
 80146b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80146bc:	9301      	str	r3, [sp, #4]
 80146be:	f8cd a000 	str.w	sl, [sp]
 80146c2:	464b      	mov	r3, r9
 80146c4:	4a4b      	ldr	r2, [pc, #300]	@ (80147f4 <get_config_payload_string+0x278>)
 80146c6:	4629      	mov	r1, r5
 80146c8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80146ca:	f016 fc6f 	bl	802afac <snprintf>
 80146ce:	4604      	mov	r4, r0
			free(name);
 80146d0:	4638      	mov	r0, r7
 80146d2:	f005 fa8b 	bl	8019bec <vPortFree>
			free(com_topik);
 80146d6:	4640      	mov	r0, r8
 80146d8:	f005 fa88 	bl	8019bec <vPortFree>
			return len;
 80146dc:	b2e0      	uxtb	r0, r4
 80146de:	e79e      	b.n	801461e <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 80146e0:	4b38      	ldr	r3, [pc, #224]	@ (80147c4 <get_config_payload_string+0x248>)
 80146e2:	6819      	ldr	r1, [r3, #0]
 80146e4:	4b3e      	ldr	r3, [pc, #248]	@ (80147e0 <get_config_payload_string+0x264>)
 80146e6:	4a47      	ldr	r2, [pc, #284]	@ (8014804 <get_config_payload_string+0x288>)
 80146e8:	4837      	ldr	r0, [pc, #220]	@ (80147c8 <get_config_payload_string+0x24c>)
 80146ea:	6800      	ldr	r0, [r0, #0]
 80146ec:	9010      	str	r0, [sp, #64]	@ 0x40
 80146ee:	4837      	ldr	r0, [pc, #220]	@ (80147cc <get_config_payload_string+0x250>)
 80146f0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80146f2:	4837      	ldr	r0, [pc, #220]	@ (80147d0 <get_config_payload_string+0x254>)
 80146f4:	900e      	str	r0, [sp, #56]	@ 0x38
 80146f6:	4837      	ldr	r0, [pc, #220]	@ (80147d4 <get_config_payload_string+0x258>)
 80146f8:	900d      	str	r0, [sp, #52]	@ 0x34
 80146fa:	4837      	ldr	r0, [pc, #220]	@ (80147d8 <get_config_payload_string+0x25c>)
 80146fc:	900c      	str	r0, [sp, #48]	@ 0x30
 80146fe:	4837      	ldr	r0, [pc, #220]	@ (80147dc <get_config_payload_string+0x260>)
 8014700:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014702:	910a      	str	r1, [sp, #40]	@ 0x28
 8014704:	9309      	str	r3, [sp, #36]	@ 0x24
 8014706:	4840      	ldr	r0, [pc, #256]	@ (8014808 <get_config_payload_string+0x28c>)
 8014708:	9008      	str	r0, [sp, #32]
 801470a:	9207      	str	r2, [sp, #28]
 801470c:	9106      	str	r1, [sp, #24]
 801470e:	9305      	str	r3, [sp, #20]
 8014710:	483e      	ldr	r0, [pc, #248]	@ (801480c <get_config_payload_string+0x290>)
 8014712:	9004      	str	r0, [sp, #16]
 8014714:	483e      	ldr	r0, [pc, #248]	@ (8014810 <get_config_payload_string+0x294>)
 8014716:	9003      	str	r0, [sp, #12]
 8014718:	9202      	str	r2, [sp, #8]
 801471a:	483e      	ldr	r0, [pc, #248]	@ (8014814 <get_config_payload_string+0x298>)
 801471c:	9001      	str	r0, [sp, #4]
 801471e:	9100      	str	r1, [sp, #0]
 8014720:	4934      	ldr	r1, [pc, #208]	@ (80147f4 <get_config_payload_string+0x278>)
 8014722:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014724:	f016 fdaa 	bl	802b27c <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8014728:	4b26      	ldr	r3, [pc, #152]	@ (80147c4 <get_config_payload_string+0x248>)
 801472a:	6819      	ldr	r1, [r3, #0]
 801472c:	4b2c      	ldr	r3, [pc, #176]	@ (80147e0 <get_config_payload_string+0x264>)
 801472e:	4a3a      	ldr	r2, [pc, #232]	@ (8014818 <get_config_payload_string+0x29c>)
 8014730:	4825      	ldr	r0, [pc, #148]	@ (80147c8 <get_config_payload_string+0x24c>)
 8014732:	6800      	ldr	r0, [r0, #0]
 8014734:	9010      	str	r0, [sp, #64]	@ 0x40
 8014736:	4825      	ldr	r0, [pc, #148]	@ (80147cc <get_config_payload_string+0x250>)
 8014738:	900f      	str	r0, [sp, #60]	@ 0x3c
 801473a:	4825      	ldr	r0, [pc, #148]	@ (80147d0 <get_config_payload_string+0x254>)
 801473c:	900e      	str	r0, [sp, #56]	@ 0x38
 801473e:	4825      	ldr	r0, [pc, #148]	@ (80147d4 <get_config_payload_string+0x258>)
 8014740:	900d      	str	r0, [sp, #52]	@ 0x34
 8014742:	4825      	ldr	r0, [pc, #148]	@ (80147d8 <get_config_payload_string+0x25c>)
 8014744:	900c      	str	r0, [sp, #48]	@ 0x30
 8014746:	4825      	ldr	r0, [pc, #148]	@ (80147dc <get_config_payload_string+0x260>)
 8014748:	900b      	str	r0, [sp, #44]	@ 0x2c
 801474a:	910a      	str	r1, [sp, #40]	@ 0x28
 801474c:	9309      	str	r3, [sp, #36]	@ 0x24
 801474e:	4833      	ldr	r0, [pc, #204]	@ (801481c <get_config_payload_string+0x2a0>)
 8014750:	9008      	str	r0, [sp, #32]
 8014752:	9207      	str	r2, [sp, #28]
 8014754:	9106      	str	r1, [sp, #24]
 8014756:	9305      	str	r3, [sp, #20]
 8014758:	4831      	ldr	r0, [pc, #196]	@ (8014820 <get_config_payload_string+0x2a4>)
 801475a:	9004      	str	r0, [sp, #16]
 801475c:	4823      	ldr	r0, [pc, #140]	@ (80147ec <get_config_payload_string+0x270>)
 801475e:	9003      	str	r0, [sp, #12]
 8014760:	9202      	str	r2, [sp, #8]
 8014762:	482c      	ldr	r0, [pc, #176]	@ (8014814 <get_config_payload_string+0x298>)
 8014764:	9001      	str	r0, [sp, #4]
 8014766:	9100      	str	r1, [sp, #0]
 8014768:	4922      	ldr	r1, [pc, #136]	@ (80147f4 <get_config_payload_string+0x278>)
 801476a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801476c:	f016 fd86 	bl	802b27c <sprintf>
			break;
 8014770:	e7da      	b.n	8014728 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8014772:	4b14      	ldr	r3, [pc, #80]	@ (80147c4 <get_config_payload_string+0x248>)
 8014774:	6819      	ldr	r1, [r3, #0]
 8014776:	4b1a      	ldr	r3, [pc, #104]	@ (80147e0 <get_config_payload_string+0x264>)
 8014778:	4a1d      	ldr	r2, [pc, #116]	@ (80147f0 <get_config_payload_string+0x274>)
 801477a:	4813      	ldr	r0, [pc, #76]	@ (80147c8 <get_config_payload_string+0x24c>)
 801477c:	6800      	ldr	r0, [r0, #0]
 801477e:	9010      	str	r0, [sp, #64]	@ 0x40
 8014780:	4812      	ldr	r0, [pc, #72]	@ (80147cc <get_config_payload_string+0x250>)
 8014782:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014784:	4812      	ldr	r0, [pc, #72]	@ (80147d0 <get_config_payload_string+0x254>)
 8014786:	900e      	str	r0, [sp, #56]	@ 0x38
 8014788:	4812      	ldr	r0, [pc, #72]	@ (80147d4 <get_config_payload_string+0x258>)
 801478a:	900d      	str	r0, [sp, #52]	@ 0x34
 801478c:	4812      	ldr	r0, [pc, #72]	@ (80147d8 <get_config_payload_string+0x25c>)
 801478e:	900c      	str	r0, [sp, #48]	@ 0x30
 8014790:	4812      	ldr	r0, [pc, #72]	@ (80147dc <get_config_payload_string+0x260>)
 8014792:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014794:	910a      	str	r1, [sp, #40]	@ 0x28
 8014796:	9309      	str	r3, [sp, #36]	@ 0x24
 8014798:	4822      	ldr	r0, [pc, #136]	@ (8014824 <get_config_payload_string+0x2a8>)
 801479a:	9008      	str	r0, [sp, #32]
 801479c:	9207      	str	r2, [sp, #28]
 801479e:	9106      	str	r1, [sp, #24]
 80147a0:	9305      	str	r3, [sp, #20]
 80147a2:	4821      	ldr	r0, [pc, #132]	@ (8014828 <get_config_payload_string+0x2ac>)
 80147a4:	9004      	str	r0, [sp, #16]
 80147a6:	4811      	ldr	r0, [pc, #68]	@ (80147ec <get_config_payload_string+0x270>)
 80147a8:	9003      	str	r0, [sp, #12]
 80147aa:	9202      	str	r2, [sp, #8]
 80147ac:	4819      	ldr	r0, [pc, #100]	@ (8014814 <get_config_payload_string+0x298>)
 80147ae:	9001      	str	r0, [sp, #4]
 80147b0:	9100      	str	r1, [sp, #0]
 80147b2:	4910      	ldr	r1, [pc, #64]	@ (80147f4 <get_config_payload_string+0x278>)
 80147b4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80147b6:	f016 fd61 	bl	802b27c <sprintf>
			break;
 80147ba:	e7b5      	b.n	8014728 <get_config_payload_string+0x1ac>
 80147bc:	08036a88 	.word	0x08036a88
 80147c0:	08036a94 	.word	0x08036a94
 80147c4:	200017ec 	.word	0x200017ec
 80147c8:	200017e8 	.word	0x200017e8
 80147cc:	08036a9c 	.word	0x08036a9c
 80147d0:	08036aa0 	.word	0x08036aa0
 80147d4:	08036aa4 	.word	0x08036aa4
 80147d8:	08036ab4 	.word	0x08036ab4
 80147dc:	08036ac8 	.word	0x08036ac8
 80147e0:	08036a28 	.word	0x08036a28
 80147e4:	08035a68 	.word	0x08035a68
 80147e8:	08036a20 	.word	0x08036a20
 80147ec:	08038efc 	.word	0x08038efc
 80147f0:	08036a58 	.word	0x08036a58
 80147f4:	08036c2c 	.word	0x08036c2c
 80147f8:	08036ad4 	.word	0x08036ad4
 80147fc:	08036c04 	.word	0x08036c04
 8014800:	08036adc 	.word	0x08036adc
 8014804:	08036a40 	.word	0x08036a40
 8014808:	08036af0 	.word	0x08036af0
 801480c:	08036af4 	.word	0x08036af4
 8014810:	08036b04 	.word	0x08036b04
 8014814:	08036b28 	.word	0x08036b28
 8014818:	08036a50 	.word	0x08036a50
 801481c:	08036b30 	.word	0x08036b30
 8014820:	08036b34 	.word	0x08036b34
 8014824:	08036b44 	.word	0x08036b44
 8014828:	08036b48 	.word	0x08036b48
 801482c:	08036774 	.word	0x08036774
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8014830:	4b38      	ldr	r3, [pc, #224]	@ (8014914 <get_config_payload_string+0x398>)
 8014832:	6819      	ldr	r1, [r3, #0]
 8014834:	4b38      	ldr	r3, [pc, #224]	@ (8014918 <get_config_payload_string+0x39c>)
 8014836:	4a39      	ldr	r2, [pc, #228]	@ (801491c <get_config_payload_string+0x3a0>)
 8014838:	4839      	ldr	r0, [pc, #228]	@ (8014920 <get_config_payload_string+0x3a4>)
 801483a:	6800      	ldr	r0, [r0, #0]
 801483c:	9010      	str	r0, [sp, #64]	@ 0x40
 801483e:	4839      	ldr	r0, [pc, #228]	@ (8014924 <get_config_payload_string+0x3a8>)
 8014840:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014842:	4839      	ldr	r0, [pc, #228]	@ (8014928 <get_config_payload_string+0x3ac>)
 8014844:	900e      	str	r0, [sp, #56]	@ 0x38
 8014846:	4839      	ldr	r0, [pc, #228]	@ (801492c <get_config_payload_string+0x3b0>)
 8014848:	900d      	str	r0, [sp, #52]	@ 0x34
 801484a:	4839      	ldr	r0, [pc, #228]	@ (8014930 <get_config_payload_string+0x3b4>)
 801484c:	900c      	str	r0, [sp, #48]	@ 0x30
 801484e:	4839      	ldr	r0, [pc, #228]	@ (8014934 <get_config_payload_string+0x3b8>)
 8014850:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014852:	910a      	str	r1, [sp, #40]	@ 0x28
 8014854:	9309      	str	r3, [sp, #36]	@ 0x24
 8014856:	4838      	ldr	r0, [pc, #224]	@ (8014938 <get_config_payload_string+0x3bc>)
 8014858:	9008      	str	r0, [sp, #32]
 801485a:	9207      	str	r2, [sp, #28]
 801485c:	9106      	str	r1, [sp, #24]
 801485e:	9305      	str	r3, [sp, #20]
 8014860:	4836      	ldr	r0, [pc, #216]	@ (801493c <get_config_payload_string+0x3c0>)
 8014862:	9004      	str	r0, [sp, #16]
 8014864:	4836      	ldr	r0, [pc, #216]	@ (8014940 <get_config_payload_string+0x3c4>)
 8014866:	9003      	str	r0, [sp, #12]
 8014868:	9202      	str	r2, [sp, #8]
 801486a:	4836      	ldr	r0, [pc, #216]	@ (8014944 <get_config_payload_string+0x3c8>)
 801486c:	9001      	str	r0, [sp, #4]
 801486e:	9100      	str	r1, [sp, #0]
 8014870:	4935      	ldr	r1, [pc, #212]	@ (8014948 <get_config_payload_string+0x3cc>)
 8014872:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014874:	f016 fd02 	bl	802b27c <sprintf>
			break;
 8014878:	e756      	b.n	8014728 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 801487a:	4b26      	ldr	r3, [pc, #152]	@ (8014914 <get_config_payload_string+0x398>)
 801487c:	6819      	ldr	r1, [r3, #0]
 801487e:	4b26      	ldr	r3, [pc, #152]	@ (8014918 <get_config_payload_string+0x39c>)
 8014880:	4a32      	ldr	r2, [pc, #200]	@ (801494c <get_config_payload_string+0x3d0>)
 8014882:	4827      	ldr	r0, [pc, #156]	@ (8014920 <get_config_payload_string+0x3a4>)
 8014884:	6800      	ldr	r0, [r0, #0]
 8014886:	9010      	str	r0, [sp, #64]	@ 0x40
 8014888:	4826      	ldr	r0, [pc, #152]	@ (8014924 <get_config_payload_string+0x3a8>)
 801488a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801488c:	4826      	ldr	r0, [pc, #152]	@ (8014928 <get_config_payload_string+0x3ac>)
 801488e:	900e      	str	r0, [sp, #56]	@ 0x38
 8014890:	4826      	ldr	r0, [pc, #152]	@ (801492c <get_config_payload_string+0x3b0>)
 8014892:	900d      	str	r0, [sp, #52]	@ 0x34
 8014894:	4826      	ldr	r0, [pc, #152]	@ (8014930 <get_config_payload_string+0x3b4>)
 8014896:	900c      	str	r0, [sp, #48]	@ 0x30
 8014898:	4826      	ldr	r0, [pc, #152]	@ (8014934 <get_config_payload_string+0x3b8>)
 801489a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801489c:	910a      	str	r1, [sp, #40]	@ 0x28
 801489e:	9309      	str	r3, [sp, #36]	@ 0x24
 80148a0:	482b      	ldr	r0, [pc, #172]	@ (8014950 <get_config_payload_string+0x3d4>)
 80148a2:	9008      	str	r0, [sp, #32]
 80148a4:	9207      	str	r2, [sp, #28]
 80148a6:	9106      	str	r1, [sp, #24]
 80148a8:	9305      	str	r3, [sp, #20]
 80148aa:	482a      	ldr	r0, [pc, #168]	@ (8014954 <get_config_payload_string+0x3d8>)
 80148ac:	9004      	str	r0, [sp, #16]
 80148ae:	4824      	ldr	r0, [pc, #144]	@ (8014940 <get_config_payload_string+0x3c4>)
 80148b0:	9003      	str	r0, [sp, #12]
 80148b2:	9202      	str	r2, [sp, #8]
 80148b4:	4823      	ldr	r0, [pc, #140]	@ (8014944 <get_config_payload_string+0x3c8>)
 80148b6:	9001      	str	r0, [sp, #4]
 80148b8:	9100      	str	r1, [sp, #0]
 80148ba:	4923      	ldr	r1, [pc, #140]	@ (8014948 <get_config_payload_string+0x3cc>)
 80148bc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80148be:	f016 fcdd 	bl	802b27c <sprintf>
			break;
 80148c2:	e731      	b.n	8014728 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 80148c4:	4b13      	ldr	r3, [pc, #76]	@ (8014914 <get_config_payload_string+0x398>)
 80148c6:	6819      	ldr	r1, [r3, #0]
 80148c8:	4b13      	ldr	r3, [pc, #76]	@ (8014918 <get_config_payload_string+0x39c>)
 80148ca:	4a23      	ldr	r2, [pc, #140]	@ (8014958 <get_config_payload_string+0x3dc>)
 80148cc:	4814      	ldr	r0, [pc, #80]	@ (8014920 <get_config_payload_string+0x3a4>)
 80148ce:	6800      	ldr	r0, [r0, #0]
 80148d0:	9010      	str	r0, [sp, #64]	@ 0x40
 80148d2:	4814      	ldr	r0, [pc, #80]	@ (8014924 <get_config_payload_string+0x3a8>)
 80148d4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80148d6:	4814      	ldr	r0, [pc, #80]	@ (8014928 <get_config_payload_string+0x3ac>)
 80148d8:	900e      	str	r0, [sp, #56]	@ 0x38
 80148da:	4814      	ldr	r0, [pc, #80]	@ (801492c <get_config_payload_string+0x3b0>)
 80148dc:	900d      	str	r0, [sp, #52]	@ 0x34
 80148de:	4814      	ldr	r0, [pc, #80]	@ (8014930 <get_config_payload_string+0x3b4>)
 80148e0:	900c      	str	r0, [sp, #48]	@ 0x30
 80148e2:	4814      	ldr	r0, [pc, #80]	@ (8014934 <get_config_payload_string+0x3b8>)
 80148e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80148e6:	910a      	str	r1, [sp, #40]	@ 0x28
 80148e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80148ea:	481c      	ldr	r0, [pc, #112]	@ (801495c <get_config_payload_string+0x3e0>)
 80148ec:	9008      	str	r0, [sp, #32]
 80148ee:	9207      	str	r2, [sp, #28]
 80148f0:	9106      	str	r1, [sp, #24]
 80148f2:	9305      	str	r3, [sp, #20]
 80148f4:	481a      	ldr	r0, [pc, #104]	@ (8014960 <get_config_payload_string+0x3e4>)
 80148f6:	9004      	str	r0, [sp, #16]
 80148f8:	4811      	ldr	r0, [pc, #68]	@ (8014940 <get_config_payload_string+0x3c4>)
 80148fa:	9003      	str	r0, [sp, #12]
 80148fc:	9202      	str	r2, [sp, #8]
 80148fe:	4811      	ldr	r0, [pc, #68]	@ (8014944 <get_config_payload_string+0x3c8>)
 8014900:	9001      	str	r0, [sp, #4]
 8014902:	9100      	str	r1, [sp, #0]
 8014904:	4910      	ldr	r1, [pc, #64]	@ (8014948 <get_config_payload_string+0x3cc>)
 8014906:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014908:	f016 fcb8 	bl	802b27c <sprintf>
			break;
 801490c:	e70c      	b.n	8014728 <get_config_payload_string+0x1ac>
	switch (payload_type) {
 801490e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014912:	e684      	b.n	801461e <get_config_payload_string+0xa2>
 8014914:	200017ec 	.word	0x200017ec
 8014918:	08036a28 	.word	0x08036a28
 801491c:	08036a60 	.word	0x08036a60
 8014920:	200017e8 	.word	0x200017e8
 8014924:	08036a9c 	.word	0x08036a9c
 8014928:	08036aa0 	.word	0x08036aa0
 801492c:	08036aa4 	.word	0x08036aa4
 8014930:	08036ab4 	.word	0x08036ab4
 8014934:	08036ac8 	.word	0x08036ac8
 8014938:	08036b6c 	.word	0x08036b6c
 801493c:	08036b70 	.word	0x08036b70
 8014940:	08038efc 	.word	0x08038efc
 8014944:	08036b28 	.word	0x08036b28
 8014948:	08036c2c 	.word	0x08036c2c
 801494c:	08036a70 	.word	0x08036a70
 8014950:	08036b90 	.word	0x08036b90
 8014954:	08036b94 	.word	0x08036b94
 8014958:	08036a80 	.word	0x08036a80
 801495c:	08036bc0 	.word	0x08036bc0
 8014960:	08036bc4 	.word	0x08036bc4

08014964 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8014964:	b530      	push	{r4, r5, lr}
 8014966:	b083      	sub	sp, #12
 8014968:	461c      	mov	r4, r3
 801496a:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 801496e:	2a01      	cmp	r2, #1
 8014970:	d00b      	beq.n	801498a <gen_bin_sensor_status_payload_JSON+0x26>
 8014972:	2a02      	cmp	r2, #2
 8014974:	d10b      	bne.n	801498e <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 8014976:	4b0a      	ldr	r3, [pc, #40]	@ (80149a0 <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 8014978:	b15d      	cbz	r5, 8014992 <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 801497a:	4a0a      	ldr	r2, [pc, #40]	@ (80149a4 <gen_bin_sensor_status_payload_JSON+0x40>)
 801497c:	9201      	str	r2, [sp, #4]
 801497e:	9400      	str	r4, [sp, #0]
 8014980:	4a09      	ldr	r2, [pc, #36]	@ (80149a8 <gen_bin_sensor_status_payload_JSON+0x44>)
 8014982:	f016 fb13 	bl	802afac <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 8014986:	b003      	add	sp, #12
 8014988:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 801498a:	4b08      	ldr	r3, [pc, #32]	@ (80149ac <gen_bin_sensor_status_payload_JSON+0x48>)
 801498c:	e7f4      	b.n	8014978 <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 801498e:	2300      	movs	r3, #0
 8014990:	e7f2      	b.n	8014978 <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8014992:	4a07      	ldr	r2, [pc, #28]	@ (80149b0 <gen_bin_sensor_status_payload_JSON+0x4c>)
 8014994:	9201      	str	r2, [sp, #4]
 8014996:	9400      	str	r4, [sp, #0]
 8014998:	4a03      	ldr	r2, [pc, #12]	@ (80149a8 <gen_bin_sensor_status_payload_JSON+0x44>)
 801499a:	f016 fb07 	bl	802afac <snprintf>
 801499e:	e7f2      	b.n	8014986 <gen_bin_sensor_status_payload_JSON+0x22>
 80149a0:	08036774 	.word	0x08036774
 80149a4:	0803682c 	.word	0x0803682c
 80149a8:	08036bf4 	.word	0x08036bf4
 80149ac:	08036a20 	.word	0x08036a20
 80149b0:	08036844 	.word	0x08036844

080149b4 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 80149b4:	b500      	push	{lr}
 80149b6:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 80149b8:	9302      	str	r3, [sp, #8]
 80149ba:	4b06      	ldr	r3, [pc, #24]	@ (80149d4 <generate_comand_topik_for_subscrabe+0x20>)
 80149bc:	9301      	str	r3, [sp, #4]
 80149be:	4b06      	ldr	r3, [pc, #24]	@ (80149d8 <generate_comand_topik_for_subscrabe+0x24>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	9300      	str	r3, [sp, #0]
 80149c4:	4b05      	ldr	r3, [pc, #20]	@ (80149dc <generate_comand_topik_for_subscrabe+0x28>)
 80149c6:	4a06      	ldr	r2, [pc, #24]	@ (80149e0 <generate_comand_topik_for_subscrabe+0x2c>)
 80149c8:	f016 faf0 	bl	802afac <snprintf>
			break;
	}
}
 80149cc:	b005      	add	sp, #20
 80149ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80149d2:	bf00      	nop
 80149d4:	08036774 	.word	0x08036774
 80149d8:	200017ec 	.word	0x200017ec
 80149dc:	08036a28 	.word	0x08036a28
 80149e0:	08036bd0 	.word	0x08036bd0

080149e4 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 80149e4:	b500      	push	{lr}
 80149e6:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 80149e8:	f04f 0c00 	mov.w	ip, #0
 80149ec:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 80149f0:	2a01      	cmp	r2, #1
 80149f2:	d006      	beq.n	8014a02 <generate_status_topik+0x1e>
 80149f4:	2a02      	cmp	r2, #2
 80149f6:	d00f      	beq.n	8014a18 <generate_status_topik+0x34>
 80149f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 80149fc:	b005      	add	sp, #20
 80149fe:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8014a02:	9302      	str	r3, [sp, #8]
 8014a04:	4b0a      	ldr	r3, [pc, #40]	@ (8014a30 <generate_status_topik+0x4c>)
 8014a06:	9301      	str	r3, [sp, #4]
 8014a08:	4b0a      	ldr	r3, [pc, #40]	@ (8014a34 <generate_status_topik+0x50>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	9300      	str	r3, [sp, #0]
 8014a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8014a38 <generate_status_topik+0x54>)
 8014a10:	4a0a      	ldr	r2, [pc, #40]	@ (8014a3c <generate_status_topik+0x58>)
 8014a12:	f016 facb 	bl	802afac <snprintf>
 8014a16:	e7f1      	b.n	80149fc <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8014a18:	9302      	str	r3, [sp, #8]
 8014a1a:	4b09      	ldr	r3, [pc, #36]	@ (8014a40 <generate_status_topik+0x5c>)
 8014a1c:	9301      	str	r3, [sp, #4]
 8014a1e:	4b05      	ldr	r3, [pc, #20]	@ (8014a34 <generate_status_topik+0x50>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	9300      	str	r3, [sp, #0]
 8014a24:	4b04      	ldr	r3, [pc, #16]	@ (8014a38 <generate_status_topik+0x54>)
 8014a26:	4a05      	ldr	r2, [pc, #20]	@ (8014a3c <generate_status_topik+0x58>)
 8014a28:	f016 fac0 	bl	802afac <snprintf>
 8014a2c:	e7e6      	b.n	80149fc <generate_status_topik+0x18>
 8014a2e:	bf00      	nop
 8014a30:	08036a20 	.word	0x08036a20
 8014a34:	200017ec 	.word	0x200017ec
 8014a38:	08036a28 	.word	0x08036a28
 8014a3c:	08036be0 	.word	0x08036be0
 8014a40:	08036774 	.word	0x08036774

08014a44 <timer_fn>:
  }
  (void) c;
}


void timer_fn(void *arg) {
 8014a44:	b508      	push	{r3, lr}
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8014a46:	4b08      	ldr	r3, [pc, #32]	@ (8014a68 <timer_fn+0x24>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	b12b      	cbz	r3, 8014a58 <timer_fn+0x14>
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8014a4c:	4b06      	ldr	r3, [pc, #24]	@ (8014a68 <timer_fn+0x24>)
 8014a4e:	6818      	ldr	r0, [r3, #0]
 8014a50:	b108      	cbz	r0, 8014a56 <timer_fn+0x12>
 8014a52:	f014 f8e9 	bl	8028c28 <mg_sntp_request>
}
 8014a56:	bd08      	pop	{r3, pc}
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8014a58:	4a04      	ldr	r2, [pc, #16]	@ (8014a6c <timer_fn+0x28>)
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	f014 f9b6 	bl	8028dcc <mg_sntp_connect>
 8014a60:	4b01      	ldr	r3, [pc, #4]	@ (8014a68 <timer_fn+0x24>)
 8014a62:	6018      	str	r0, [r3, #0]
 8014a64:	e7f2      	b.n	8014a4c <timer_fn+0x8>
 8014a66:	bf00      	nop
 8014a68:	200017f0 	.word	0x200017f0
 8014a6c:	08014a71 	.word	0x08014a71

08014a70 <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8014a70:	b570      	push	{r4, r5, r6, lr}
  if (ev == MG_EV_SNTP_TIME) {
 8014a72:	2912      	cmp	r1, #18
 8014a74:	d002      	beq.n	8014a7c <sfn+0xc>
  } else if (ev == MG_EV_CLOSE) {
 8014a76:	2909      	cmp	r1, #9
 8014a78:	d046      	beq.n	8014b08 <sfn+0x98>
}
 8014a7a:	bd70      	pop	{r4, r5, r6, pc}
 8014a7c:	4614      	mov	r4, r2
	  logging(L_INFO, "Response from NTP server received");
 8014a7e:	4926      	ldr	r1, [pc, #152]	@ (8014b18 <sfn+0xa8>)
 8014a80:	2001      	movs	r0, #1
 8014a82:	f7fd f991 	bl	8011da8 <logging>
    uint64_t curtime = mg_now();
 8014a86:	f014 f80b 	bl	8028aa0 <mg_now>
 8014a8a:	4606      	mov	r6, r0
 8014a8c:	460d      	mov	r5, r1
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8014a8e:	4b23      	ldr	r3, [pc, #140]	@ (8014b1c <sfn+0xac>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	dc20      	bgt.n	8014ad8 <sfn+0x68>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 8014a96:	4632      	mov	r2, r6
 8014a98:	462b      	mov	r3, r5
 8014a9a:	4921      	ldr	r1, [pc, #132]	@ (8014b20 <sfn+0xb0>)
 8014a9c:	2001      	movs	r0, #1
 8014a9e:	f7fd f983 	bl	8011da8 <logging>
      uint64_t t = *(uint64_t *) ev_data;
 8014aa2:	6825      	ldr	r5, [r4, #0]
 8014aa4:	6864      	ldr	r4, [r4, #4]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 8014aa6:	f010 fbaa 	bl	80251fe <mg_millis>
 8014aaa:	1a28      	subs	r0, r5, r0
 8014aac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014ab0:	f04f 0300 	mov.w	r3, #0
 8014ab4:	eb64 0101 	sbc.w	r1, r4, r1
 8014ab8:	f7fc f94e 	bl	8010d58 <__aeabi_uldivmod>
 8014abc:	4b19      	ldr	r3, [pc, #100]	@ (8014b24 <sfn+0xb4>)
 8014abe:	e9c3 0100 	strd	r0, r1, [r3]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8014ac2:	4b16      	ldr	r3, [pc, #88]	@ (8014b1c <sfn+0xac>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	2b01      	cmp	r3, #1
 8014ac8:	dc12      	bgt.n	8014af0 <sfn+0x80>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 8014aca:	462a      	mov	r2, r5
 8014acc:	4623      	mov	r3, r4
 8014ace:	4916      	ldr	r1, [pc, #88]	@ (8014b28 <sfn+0xb8>)
 8014ad0:	2001      	movs	r0, #1
 8014ad2:	f7fd f969 	bl	8011da8 <logging>
 8014ad6:	e7d0      	b.n	8014a7a <sfn+0xa>
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8014ad8:	4b14      	ldr	r3, [pc, #80]	@ (8014b2c <sfn+0xbc>)
 8014ada:	221b      	movs	r2, #27
 8014adc:	4914      	ldr	r1, [pc, #80]	@ (8014b30 <sfn+0xc0>)
 8014ade:	2002      	movs	r0, #2
 8014ae0:	f010 fb92 	bl	8025208 <mg_log_prefix>
 8014ae4:	4632      	mov	r2, r6
 8014ae6:	462b      	mov	r3, r5
 8014ae8:	480d      	ldr	r0, [pc, #52]	@ (8014b20 <sfn+0xb0>)
 8014aea:	f00e fa77 	bl	8022fdc <mg_log>
 8014aee:	e7d2      	b.n	8014a96 <sfn+0x26>
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8014af0:	4b0e      	ldr	r3, [pc, #56]	@ (8014b2c <sfn+0xbc>)
 8014af2:	2221      	movs	r2, #33	@ 0x21
 8014af4:	490e      	ldr	r1, [pc, #56]	@ (8014b30 <sfn+0xc0>)
 8014af6:	2002      	movs	r0, #2
 8014af8:	f010 fb86 	bl	8025208 <mg_log_prefix>
 8014afc:	462a      	mov	r2, r5
 8014afe:	4623      	mov	r3, r4
 8014b00:	480c      	ldr	r0, [pc, #48]	@ (8014b34 <sfn+0xc4>)
 8014b02:	f00e fa6b 	bl	8022fdc <mg_log>
 8014b06:	e7e0      	b.n	8014aca <sfn+0x5a>
	  logging(L_INFO, "NTP connection is closed");
 8014b08:	490b      	ldr	r1, [pc, #44]	@ (8014b38 <sfn+0xc8>)
 8014b0a:	2001      	movs	r0, #1
 8014b0c:	f7fd f94c 	bl	8011da8 <logging>
    s_sntp_conn = NULL;
 8014b10:	4b0a      	ldr	r3, [pc, #40]	@ (8014b3c <sfn+0xcc>)
 8014b12:	2200      	movs	r2, #0
 8014b14:	601a      	str	r2, [r3, #0]
}
 8014b16:	e7b0      	b.n	8014a7a <sfn+0xa>
 8014b18:	08036dac 	.word	0x08036dac
 8014b1c:	200000a8 	.word	0x200000a8
 8014b20:	08036df0 	.word	0x08036df0
 8014b24:	200017f8 	.word	0x200017f8
 8014b28:	08036e48 	.word	0x08036e48
 8014b2c:	08036ea4 	.word	0x08036ea4
 8014b30:	08036dd0 	.word	0x08036dd0
 8014b34:	08036e24 	.word	0x08036e24
 8014b38:	08036e6c 	.word	0x08036e6c
 8014b3c:	200017f0 	.word	0x200017f0

08014b40 <start_sntp>:

void start_sntp(void *arg){
 8014b40:	b530      	push	{r4, r5, lr}
 8014b42:	b085      	sub	sp, #20
 8014b44:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 8014b46:	490d      	ldr	r1, [pc, #52]	@ (8014b7c <start_sntp+0x3c>)
 8014b48:	2001      	movs	r0, #1
 8014b4a:	f7fd f92d 	bl	8011da8 <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 8014b4e:	9402      	str	r4, [sp, #8]
 8014b50:	4d0b      	ldr	r5, [pc, #44]	@ (8014b80 <start_sntp+0x40>)
 8014b52:	9501      	str	r5, [sp, #4]
 8014b54:	2300      	movs	r3, #0
 8014b56:	9300      	str	r3, [sp, #0]
 8014b58:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	4620      	mov	r0, r4
 8014b60:	f00f fdfc 	bl	802475c <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 8014b64:	9402      	str	r4, [sp, #8]
 8014b66:	9501      	str	r5, [sp, #4]
 8014b68:	2301      	movs	r3, #1
 8014b6a:	9300      	str	r3, [sp, #0]
 8014b6c:	4a05      	ldr	r2, [pc, #20]	@ (8014b84 <start_sntp+0x44>)
 8014b6e:	2300      	movs	r3, #0
 8014b70:	4620      	mov	r0, r4
 8014b72:	f00f fdf3 	bl	802475c <mg_timer_add>

}
 8014b76:	b005      	add	sp, #20
 8014b78:	bd30      	pop	{r4, r5, pc}
 8014b7a:	bf00      	nop
 8014b7c:	08036e88 	.word	0x08036e88
 8014b80:	08014a45 	.word	0x08014a45
 8014b84:	00107ac0 	.word	0x00107ac0

08014b88 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014b88:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014b8a:	fb01 f400 	mul.w	r4, r1, r0
 8014b8e:	4620      	mov	r0, r4
 8014b90:	f004 ffaa 	bl	8019ae8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014b94:	4605      	mov	r5, r0
 8014b96:	b118      	cbz	r0, 8014ba0 <my_calloc+0x18>
 8014b98:	4622      	mov	r2, r4
 8014b9a:	2100      	movs	r1, #0
 8014b9c:	f016 ff30 	bl	802ba00 <memset>
}
 8014ba0:	4628      	mov	r0, r5
 8014ba2:	bd38      	pop	{r3, r4, r5, pc}

08014ba4 <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 8014ba4:	b570      	push	{r4, r5, r6, lr}
 8014ba6:	b088      	sub	sp, #32
 8014ba8:	4605      	mov	r5, r0
 8014baa:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 8014bac:	4917      	ldr	r1, [pc, #92]	@ (8014c0c <dev_description_handler+0x68>)
 8014bae:	2000      	movs	r0, #0
 8014bb0:	f7fd f8fa 	bl	8011da8 <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8014bb4:	ae06      	add	r6, sp, #24
 8014bb6:	4916      	ldr	r1, [pc, #88]	@ (8014c10 <dev_description_handler+0x6c>)
 8014bb8:	4630      	mov	r0, r6
 8014bba:	f00e fbed 	bl	8023398 <mg_str_s>
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	9300      	str	r3, [sp, #0]
 8014bc2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014bc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014bca:	f00e fe07 	bl	80237dc <mg_match>
 8014bce:	b1a8      	cbz	r0, 8014bfc <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 8014bd0:	4b10      	ldr	r3, [pc, #64]	@ (8014c14 <dev_description_handler+0x70>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	9305      	str	r3, [sp, #20]
 8014bd6:	4b10      	ldr	r3, [pc, #64]	@ (8014c18 <dev_description_handler+0x74>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	9304      	str	r3, [sp, #16]
 8014bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8014c1c <dev_description_handler+0x78>)
 8014bde:	9303      	str	r3, [sp, #12]
 8014be0:	4b0f      	ldr	r3, [pc, #60]	@ (8014c20 <dev_description_handler+0x7c>)
 8014be2:	9302      	str	r3, [sp, #8]
 8014be4:	4b0f      	ldr	r3, [pc, #60]	@ (8014c24 <dev_description_handler+0x80>)
 8014be6:	9301      	str	r3, [sp, #4]
 8014be8:	4b0f      	ldr	r3, [pc, #60]	@ (8014c28 <dev_description_handler+0x84>)
 8014bea:	9300      	str	r3, [sp, #0]
 8014bec:	4b0f      	ldr	r3, [pc, #60]	@ (8014c2c <dev_description_handler+0x88>)
 8014bee:	4a10      	ldr	r2, [pc, #64]	@ (8014c30 <dev_description_handler+0x8c>)
 8014bf0:	21c8      	movs	r1, #200	@ 0xc8
 8014bf2:	4628      	mov	r0, r5
 8014bf4:	f00e fa46 	bl	8023084 <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 8014bf8:	b008      	add	sp, #32
 8014bfa:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 8014bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8014c34 <dev_description_handler+0x90>)
 8014bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8014c30 <dev_description_handler+0x8c>)
 8014c00:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014c04:	4628      	mov	r0, r5
 8014c06:	f00e fa3d 	bl	8023084 <mg_http_reply>
}
 8014c0a:	e7f5      	b.n	8014bf8 <dev_description_handler+0x54>
 8014c0c:	08036ea8 	.word	0x08036ea8
 8014c10:	08035a6c 	.word	0x08035a6c
 8014c14:	2000180c 	.word	0x2000180c
 8014c18:	20001814 	.word	0x20001814
 8014c1c:	08036a9c 	.word	0x08036a9c
 8014c20:	08036ab4 	.word	0x08036ab4
 8014c24:	08036aa4 	.word	0x08036aa4
 8014c28:	08036ac8 	.word	0x08036ac8
 8014c2c:	080371b0 	.word	0x080371b0
 8014c30:	08035a68 	.word	0x08035a68
 8014c34:	08035f0c 	.word	0x08035f0c

08014c38 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 8014c38:	b510      	push	{r4, lr}
 8014c3a:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 8014c3c:	4905      	ldr	r1, [pc, #20]	@ (8014c54 <dev_404_handler+0x1c>)
 8014c3e:	2000      	movs	r0, #0
 8014c40:	f7fd f8b2 	bl	8011da8 <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 8014c44:	4b04      	ldr	r3, [pc, #16]	@ (8014c58 <dev_404_handler+0x20>)
 8014c46:	4a05      	ldr	r2, [pc, #20]	@ (8014c5c <dev_404_handler+0x24>)
 8014c48:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8014c4c:	4620      	mov	r0, r4
 8014c4e:	f00e fa19 	bl	8023084 <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 8014c52:	bd10      	pop	{r4, pc}
 8014c54:	08036ec8 	.word	0x08036ec8
 8014c58:	08036ee0 	.word	0x08036ee0
 8014c5c:	08035a68 	.word	0x08035a68

08014c60 <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 8014c60:	290b      	cmp	r1, #11
 8014c62:	d000      	beq.n	8014c66 <ssdp_web_handler+0x6>
 8014c64:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 8014c66:	b570      	push	{r4, r5, r6, lr}
 8014c68:	b086      	sub	sp, #24
 8014c6a:	4605      	mov	r5, r0
 8014c6c:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 8014c6e:	4917      	ldr	r1, [pc, #92]	@ (8014ccc <ssdp_web_handler+0x6c>)
 8014c70:	2000      	movs	r0, #0
 8014c72:	f7fd f899 	bl	8011da8 <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 8014c76:	ae02      	add	r6, sp, #8
 8014c78:	4915      	ldr	r1, [pc, #84]	@ (8014cd0 <ssdp_web_handler+0x70>)
 8014c7a:	4630      	mov	r0, r6
 8014c7c:	f00e fb8c 	bl	8023398 <mg_str_s>
 8014c80:	2300      	movs	r3, #0
 8014c82:	9300      	str	r3, [sp, #0]
 8014c84:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c88:	f104 0108 	add.w	r1, r4, #8
 8014c8c:	c903      	ldmia	r1, {r0, r1}
 8014c8e:	f00e fda5 	bl	80237dc <mg_match>
 8014c92:	b128      	cbz	r0, 8014ca0 <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 8014c94:	4621      	mov	r1, r4
 8014c96:	4628      	mov	r0, r5
 8014c98:	f7ff ff84 	bl	8014ba4 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8014c9c:	b006      	add	sp, #24
 8014c9e:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8014ca0:	ae04      	add	r6, sp, #16
 8014ca2:	490c      	ldr	r1, [pc, #48]	@ (8014cd4 <ssdp_web_handler+0x74>)
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	f00e fb77 	bl	8023398 <mg_str_s>
 8014caa:	2300      	movs	r3, #0
 8014cac:	9300      	str	r3, [sp, #0]
 8014cae:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014cb2:	f104 0108 	add.w	r1, r4, #8
 8014cb6:	c903      	ldmia	r1, {r0, r1}
 8014cb8:	f00e fd90 	bl	80237dc <mg_match>
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	d0ed      	beq.n	8014c9c <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 8014cc0:	4621      	mov	r1, r4
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	f7ff ffb8 	bl	8014c38 <dev_404_handler>
}
 8014cc8:	e7e8      	b.n	8014c9c <ssdp_web_handler+0x3c>
 8014cca:	bf00      	nop
 8014ccc:	08036f0c 	.word	0x08036f0c
 8014cd0:	08036f34 	.word	0x08036f34
 8014cd4:	08036f4c 	.word	0x08036f4c

08014cd8 <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 8014cd8:	b510      	push	{r4, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	4602      	mov	r2, r0
 8014cde:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 8014ce0:	0e14      	lsrs	r4, r2, #24
 8014ce2:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 8014ce6:	0c11      	lsrs	r1, r2, #16
 8014ce8:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 8014cec:	0a13      	lsrs	r3, r2, #8
 8014cee:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 8014cf2:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 8014cf6:	9401      	str	r4, [sp, #4]
 8014cf8:	b2c9      	uxtb	r1, r1
 8014cfa:	9100      	str	r1, [sp, #0]
 8014cfc:	b2db      	uxtb	r3, r3
 8014cfe:	b2d2      	uxtb	r2, r2
 8014d00:	4902      	ldr	r1, [pc, #8]	@ (8014d0c <ip_to_string+0x34>)
 8014d02:	f016 fabb 	bl	802b27c <sprintf>
}
 8014d06:	b004      	add	sp, #16
 8014d08:	bd10      	pop	{r4, pc}
 8014d0a:	bf00      	nop
 8014d0c:	08036f50 	.word	0x08036f50

08014d10 <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 8014d10:	b570      	push	{r4, r5, r6, lr}
 8014d12:	b084      	sub	sp, #16
 8014d14:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 8014d16:	491e      	ldr	r1, [pc, #120]	@ (8014d90 <send_ssdp_notify+0x80>)
 8014d18:	2000      	movs	r0, #0
 8014d1a:	f7fd f845 	bl	8011da8 <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 8014d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8014d94 <send_ssdp_notify+0x84>)
 8014d20:	6818      	ldr	r0, [r3, #0]
 8014d22:	f7fb fabd 	bl	80102a0 <strlen>
 8014d26:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 8014d28:	2101      	movs	r1, #1
 8014d2a:	f200 1039 	addw	r0, r0, #313	@ 0x139
 8014d2e:	f7ff ff2b 	bl	8014b88 <my_calloc>
 8014d32:	4a19      	ldr	r2, [pc, #100]	@ (8014d98 <send_ssdp_notify+0x88>)
 8014d34:	6010      	str	r0, [r2, #0]
	if (!buff) {
 8014d36:	b330      	cbz	r0, 8014d86 <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 8014d38:	4b18      	ldr	r3, [pc, #96]	@ (8014d9c <send_ssdp_notify+0x8c>)
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	4d18      	ldr	r5, [pc, #96]	@ (8014da0 <send_ssdp_notify+0x90>)
 8014d3e:	6829      	ldr	r1, [r5, #0]
 8014d40:	6898      	ldr	r0, [r3, #8]
 8014d42:	f7ff ffc9 	bl	8014cd8 <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 8014d46:	4b13      	ldr	r3, [pc, #76]	@ (8014d94 <send_ssdp_notify+0x84>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	9302      	str	r3, [sp, #8]
 8014d4c:	4b15      	ldr	r3, [pc, #84]	@ (8014da4 <send_ssdp_notify+0x94>)
 8014d4e:	9301      	str	r3, [sp, #4]
 8014d50:	682b      	ldr	r3, [r5, #0]
 8014d52:	9300      	str	r3, [sp, #0]
 8014d54:	4b14      	ldr	r3, [pc, #80]	@ (8014da8 <send_ssdp_notify+0x98>)
 8014d56:	4a15      	ldr	r2, [pc, #84]	@ (8014dac <send_ssdp_notify+0x9c>)
 8014d58:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 8014d5c:	480e      	ldr	r0, [pc, #56]	@ (8014d98 <send_ssdp_notify+0x88>)
 8014d5e:	6800      	ldr	r0, [r0, #0]
 8014d60:	f016 f924 	bl	802afac <snprintf>
    if (udp_conn != NULL) {
 8014d64:	b14e      	cbz	r6, 8014d7a <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 8014d66:	4b0c      	ldr	r3, [pc, #48]	@ (8014d98 <send_ssdp_notify+0x88>)
 8014d68:	681c      	ldr	r4, [r3, #0]
 8014d6a:	4620      	mov	r0, r4
 8014d6c:	f7fb fa98 	bl	80102a0 <strlen>
 8014d70:	4602      	mov	r2, r0
 8014d72:	4621      	mov	r1, r4
 8014d74:	4630      	mov	r0, r6
 8014d76:	f011 fafb 	bl	8026370 <mg_send>
    free(buff);
 8014d7a:	4b07      	ldr	r3, [pc, #28]	@ (8014d98 <send_ssdp_notify+0x88>)
 8014d7c:	6818      	ldr	r0, [r3, #0]
 8014d7e:	f004 ff35 	bl	8019bec <vPortFree>
}
 8014d82:	b004      	add	sp, #16
 8014d84:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 8014d86:	490a      	ldr	r1, [pc, #40]	@ (8014db0 <send_ssdp_notify+0xa0>)
 8014d88:	2003      	movs	r0, #3
 8014d8a:	f7fd f80d 	bl	8011da8 <logging>
		return; //TODO add log
 8014d8e:	e7f8      	b.n	8014d82 <send_ssdp_notify+0x72>
 8014d90:	08036f5c 	.word	0x08036f5c
 8014d94:	20001814 	.word	0x20001814
 8014d98:	20001810 	.word	0x20001810
 8014d9c:	20001804 	.word	0x20001804
 8014da0:	2000180c 	.word	0x2000180c
 8014da4:	08036fac 	.word	0x08036fac
 8014da8:	08036fa4 	.word	0x08036fa4
 8014dac:	080370b8 	.word	0x080370b8
 8014db0:	08036f74 	.word	0x08036f74

08014db4 <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 8014db4:	2907      	cmp	r1, #7
 8014db6:	d000      	beq.n	8014dba <ssdp_listener_handler+0x6>
 8014db8:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 8014dba:	b570      	push	{r4, r5, r6, lr}
 8014dbc:	b088      	sub	sp, #32
 8014dbe:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 8014dc0:	491a      	ldr	r1, [pc, #104]	@ (8014e2c <ssdp_listener_handler+0x78>)
 8014dc2:	2000      	movs	r0, #0
 8014dc4:	f7fc fff0 	bl	8011da8 <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 8014dc8:	4b19      	ldr	r3, [pc, #100]	@ (8014e30 <ssdp_listener_handler+0x7c>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	ad02      	add	r5, sp, #8
 8014dce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014dd0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8014dd2:	4628      	mov	r0, r5
 8014dd4:	f00e faec 	bl	80233b0 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8014dd8:	ae04      	add	r6, sp, #16
 8014dda:	4916      	ldr	r1, [pc, #88]	@ (8014e34 <ssdp_listener_handler+0x80>)
 8014ddc:	4630      	mov	r0, r6
 8014dde:	f00e fadb 	bl	8023398 <mg_str_s>
 8014de2:	2300      	movs	r3, #0
 8014de4:	9300      	str	r3, [sp, #0]
 8014de6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014dea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014dee:	f00e fcf5 	bl	80237dc <mg_match>
 8014df2:	b918      	cbnz	r0, 8014dfc <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 8014df4:	2300      	movs	r3, #0
 8014df6:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 8014df8:	b008      	add	sp, #32
 8014dfa:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8014dfc:	ad06      	add	r5, sp, #24
 8014dfe:	490e      	ldr	r1, [pc, #56]	@ (8014e38 <ssdp_listener_handler+0x84>)
 8014e00:	4628      	mov	r0, r5
 8014e02:	f00e fac9 	bl	8023398 <mg_str_s>
 8014e06:	2300      	movs	r3, #0
 8014e08:	9300      	str	r3, [sp, #0]
 8014e0a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014e0e:	a902      	add	r1, sp, #8
 8014e10:	c903      	ldmia	r1, {r0, r1}
 8014e12:	f00e fce3 	bl	80237dc <mg_match>
 8014e16:	2800      	cmp	r0, #0
 8014e18:	d0ec      	beq.n	8014df4 <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 8014e1a:	4908      	ldr	r1, [pc, #32]	@ (8014e3c <ssdp_listener_handler+0x88>)
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	f7fc ffc3 	bl	8011da8 <logging>
			send_ssdp_notify(udp_listen_conn);
 8014e22:	4b03      	ldr	r3, [pc, #12]	@ (8014e30 <ssdp_listener_handler+0x7c>)
 8014e24:	6818      	ldr	r0, [r3, #0]
 8014e26:	f7ff ff73 	bl	8014d10 <send_ssdp_notify>
 8014e2a:	e7e3      	b.n	8014df4 <ssdp_listener_handler+0x40>
 8014e2c:	08036fb4 	.word	0x08036fb4
 8014e30:	20001800 	.word	0x20001800
 8014e34:	08036fe8 	.word	0x08036fe8
 8014e38:	08036ff4 	.word	0x08036ff4
 8014e3c:	08037004 	.word	0x08037004

08014e40 <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 8014e40:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 8014e42:	490c      	ldr	r1, [pc, #48]	@ (8014e74 <ssdp_timer_handler+0x34>)
 8014e44:	2000      	movs	r0, #0
 8014e46:	f7fc ffaf 	bl	8011da8 <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	461a      	mov	r2, r3
 8014e4e:	490a      	ldr	r1, [pc, #40]	@ (8014e78 <ssdp_timer_handler+0x38>)
 8014e50:	480a      	ldr	r0, [pc, #40]	@ (8014e7c <ssdp_timer_handler+0x3c>)
 8014e52:	6800      	ldr	r0, [r0, #0]
 8014e54:	f012 ff60 	bl	8027d18 <mg_connect>
	if (conn == NULL){
 8014e58:	b130      	cbz	r0, 8014e68 <ssdp_timer_handler+0x28>
 8014e5a:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 8014e5c:	f7ff ff58 	bl	8014d10 <send_ssdp_notify>
	mg_close_conn(conn);
 8014e60:	4620      	mov	r0, r4
 8014e62:	f011 f943 	bl	80260ec <mg_close_conn>
}
 8014e66:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 8014e68:	4905      	ldr	r1, [pc, #20]	@ (8014e80 <ssdp_timer_handler+0x40>)
 8014e6a:	2003      	movs	r0, #3
 8014e6c:	f7fc ff9c 	bl	8011da8 <logging>
		return ;
 8014e70:	e7f9      	b.n	8014e66 <ssdp_timer_handler+0x26>
 8014e72:	bf00      	nop
 8014e74:	08037034 	.word	0x08037034
 8014e78:	08037354 	.word	0x08037354
 8014e7c:	20001808 	.word	0x20001808
 8014e80:	0803704c 	.word	0x0803704c

08014e84 <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 8014e84:	b570      	push	{r4, r5, r6, lr}
 8014e86:	4606      	mov	r6, r0
 8014e88:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 8014e8a:	4910      	ldr	r1, [pc, #64]	@ (8014ecc <ssdp_set_id+0x48>)
 8014e8c:	2000      	movs	r0, #0
 8014e8e:	f7fc ff8b 	bl	8011da8 <logging>
	if (id && (id_len > 0)){
 8014e92:	b1d6      	cbz	r6, 8014eca <ssdp_set_id+0x46>
 8014e94:	b1cd      	cbz	r5, 8014eca <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 8014e96:	4b0e      	ldr	r3, [pc, #56]	@ (8014ed0 <ssdp_set_id+0x4c>)
 8014e98:	6818      	ldr	r0, [r3, #0]
 8014e9a:	b108      	cbz	r0, 8014ea0 <ssdp_set_id+0x1c>
 8014e9c:	f004 fea6 	bl	8019bec <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8014ea0:	0068      	lsls	r0, r5, #1
 8014ea2:	2101      	movs	r1, #1
 8014ea4:	4408      	add	r0, r1
 8014ea6:	f7ff fe6f 	bl	8014b88 <my_calloc>
 8014eaa:	4b09      	ldr	r3, [pc, #36]	@ (8014ed0 <ssdp_set_id+0x4c>)
 8014eac:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 8014eae:	b160      	cbz	r0, 8014eca <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 8014eb0:	2400      	movs	r4, #0
 8014eb2:	e008      	b.n	8014ec6 <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 8014eb4:	4b06      	ldr	r3, [pc, #24]	@ (8014ed0 <ssdp_set_id+0x4c>)
 8014eb6:	6818      	ldr	r0, [r3, #0]
 8014eb8:	5d32      	ldrb	r2, [r6, r4]
 8014eba:	4906      	ldr	r1, [pc, #24]	@ (8014ed4 <ssdp_set_id+0x50>)
 8014ebc:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8014ec0:	f016 f9dc 	bl	802b27c <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 8014ec4:	3401      	adds	r4, #1
 8014ec6:	42a5      	cmp	r5, r4
 8014ec8:	d8f4      	bhi.n	8014eb4 <ssdp_set_id+0x30>
}
 8014eca:	bd70      	pop	{r4, r5, r6, pc}
 8014ecc:	08037074 	.word	0x08037074
 8014ed0:	20001814 	.word	0x20001814
 8014ed4:	08036a00 	.word	0x08036a00

08014ed8 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 8014ed8:	b530      	push	{r4, r5, lr}
 8014eda:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 8014edc:	4b18      	ldr	r3, [pc, #96]	@ (8014f40 <ssdp_start_server+0x68>)
 8014ede:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 8014ee0:	4b18      	ldr	r3, [pc, #96]	@ (8014f44 <ssdp_start_server+0x6c>)
 8014ee2:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 8014ee4:	2101      	movs	r1, #1
 8014ee6:	2028      	movs	r0, #40	@ 0x28
 8014ee8:	f7ff fe4e 	bl	8014b88 <my_calloc>
 8014eec:	4b16      	ldr	r3, [pc, #88]	@ (8014f48 <ssdp_start_server+0x70>)
 8014eee:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 8014ef0:	b318      	cbz	r0, 8014f3a <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 8014ef2:	4d14      	ldr	r5, [pc, #80]	@ (8014f44 <ssdp_start_server+0x6c>)
 8014ef4:	2106      	movs	r1, #6
 8014ef6:	6828      	ldr	r0, [r5, #0]
 8014ef8:	f7ff ffc4 	bl	8014e84 <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 8014efc:	4913      	ldr	r1, [pc, #76]	@ (8014f4c <ssdp_start_server+0x74>)
 8014efe:	2001      	movs	r0, #1
 8014f00:	f7fc ff52 	bl	8011da8 <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 8014f04:	4c0e      	ldr	r4, [pc, #56]	@ (8014f40 <ssdp_start_server+0x68>)
 8014f06:	2300      	movs	r3, #0
 8014f08:	9302      	str	r3, [sp, #8]
 8014f0a:	4b11      	ldr	r3, [pc, #68]	@ (8014f50 <ssdp_start_server+0x78>)
 8014f0c:	9301      	str	r3, [sp, #4]
 8014f0e:	2303      	movs	r3, #3
 8014f10:	9300      	str	r3, [sp, #0]
 8014f12:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8014f16:	2300      	movs	r3, #0
 8014f18:	6820      	ldr	r0, [r4, #0]
 8014f1a:	f00f fc1f 	bl	802475c <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 8014f1e:	682b      	ldr	r3, [r5, #0]
 8014f20:	4a0c      	ldr	r2, [pc, #48]	@ (8014f54 <ssdp_start_server+0x7c>)
 8014f22:	490d      	ldr	r1, [pc, #52]	@ (8014f58 <ssdp_start_server+0x80>)
 8014f24:	6820      	ldr	r0, [r4, #0]
 8014f26:	f011 f9bb 	bl	80262a0 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 8014f2a:	682b      	ldr	r3, [r5, #0]
 8014f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8014f5c <ssdp_start_server+0x84>)
 8014f2e:	490c      	ldr	r1, [pc, #48]	@ (8014f60 <ssdp_start_server+0x88>)
 8014f30:	6820      	ldr	r0, [r4, #0]
 8014f32:	f011 f931 	bl	8026198 <mg_listen>
 8014f36:	4b0b      	ldr	r3, [pc, #44]	@ (8014f64 <ssdp_start_server+0x8c>)
 8014f38:	6018      	str	r0, [r3, #0]
}
 8014f3a:	b005      	add	sp, #20
 8014f3c:	bd30      	pop	{r4, r5, pc}
 8014f3e:	bf00      	nop
 8014f40:	20001808 	.word	0x20001808
 8014f44:	20001804 	.word	0x20001804
 8014f48:	2000180c 	.word	0x2000180c
 8014f4c:	08037088 	.word	0x08037088
 8014f50:	08014e41 	.word	0x08014e41
 8014f54:	08014c61 	.word	0x08014c61
 8014f58:	080370a0 	.word	0x080370a0
 8014f5c:	08014db5 	.word	0x08014db5
 8014f60:	08037354 	.word	0x08037354
 8014f64:	20001800 	.word	0x20001800

08014f68 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8014f68:	4770      	bx	lr
	...

08014f6c <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8014f6c:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 8014f6e:	4b02      	ldr	r3, [pc, #8]	@ (8014f78 <sFLASH_SPI_ReadBuffer+0xc>)
 8014f70:	685b      	ldr	r3, [r3, #4]
 8014f72:	4798      	blx	r3
}
 8014f74:	bd08      	pop	{r3, pc}
 8014f76:	bf00      	nop
 8014f78:	20001858 	.word	0x20001858

08014f7c <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 8014f7c:	b410      	push	{r4}
	if (chip_select){
 8014f7e:	b158      	cbz	r0, 8014f98 <SPI_flash_reg_cb+0x1c>
 8014f80:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 8014f82:	4809      	ldr	r0, [pc, #36]	@ (8014fa8 <SPI_flash_reg_cb+0x2c>)
 8014f84:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 8014f86:	b159      	cbz	r1, 8014fa0 <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 8014f88:	4807      	ldr	r0, [pc, #28]	@ (8014fa8 <SPI_flash_reg_cb+0x2c>)
 8014f8a:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 8014f8c:	4906      	ldr	r1, [pc, #24]	@ (8014fa8 <SPI_flash_reg_cb+0x2c>)
 8014f8e:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 8014f90:	608b      	str	r3, [r1, #8]
}
 8014f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f96:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 8014f98:	4803      	ldr	r0, [pc, #12]	@ (8014fa8 <SPI_flash_reg_cb+0x2c>)
 8014f9a:	4c04      	ldr	r4, [pc, #16]	@ (8014fac <SPI_flash_reg_cb+0x30>)
 8014f9c:	60c4      	str	r4, [r0, #12]
 8014f9e:	e7f2      	b.n	8014f86 <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 8014fa0:	4901      	ldr	r1, [pc, #4]	@ (8014fa8 <SPI_flash_reg_cb+0x2c>)
 8014fa2:	4802      	ldr	r0, [pc, #8]	@ (8014fac <SPI_flash_reg_cb+0x30>)
 8014fa4:	6108      	str	r0, [r1, #16]
 8014fa6:	e7f1      	b.n	8014f8c <SPI_flash_reg_cb+0x10>
 8014fa8:	20001858 	.word	0x20001858
 8014fac:	08014f69 	.word	0x08014f69

08014fb0 <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 8014fb0:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 8014fb2:	4b02      	ldr	r3, [pc, #8]	@ (8014fbc <sFLASH_CS_LOW+0xc>)
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	4798      	blx	r3
}
 8014fb8:	bd08      	pop	{r3, pc}
 8014fba:	bf00      	nop
 8014fbc:	20001858 	.word	0x20001858

08014fc0 <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 8014fc0:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 8014fc2:	4b02      	ldr	r3, [pc, #8]	@ (8014fcc <sFLASH_CS_HIGH+0xc>)
 8014fc4:	691b      	ldr	r3, [r3, #16]
 8014fc6:	4798      	blx	r3
}
 8014fc8:	bd08      	pop	{r3, pc}
 8014fca:	bf00      	nop
 8014fcc:	20001858 	.word	0x20001858

08014fd0 <sFLASH_ReadByte>:
{
 8014fd0:	b500      	push	{lr}
 8014fd2:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 8014fd4:	4b05      	ldr	r3, [pc, #20]	@ (8014fec <sFLASH_ReadByte+0x1c>)
 8014fd6:	685b      	ldr	r3, [r3, #4]
 8014fd8:	2101      	movs	r1, #1
 8014fda:	f10d 0007 	add.w	r0, sp, #7
 8014fde:	4798      	blx	r3
}
 8014fe0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014fe4:	b003      	add	sp, #12
 8014fe6:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fea:	bf00      	nop
 8014fec:	20001858 	.word	0x20001858

08014ff0 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8014ff0:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 8014ff2:	4b02      	ldr	r3, [pc, #8]	@ (8014ffc <sFLASH_SendByte+0xc>)
 8014ff4:	689b      	ldr	r3, [r3, #8]
 8014ff6:	4798      	blx	r3
}
 8014ff8:	bd08      	pop	{r3, pc}
 8014ffa:	bf00      	nop
 8014ffc:	20001858 	.word	0x20001858

08015000 <sFLASH_Reset>:
void sFLASH_Reset(void){
 8015000:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 8015002:	f7ff ffd5 	bl	8014fb0 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8015006:	2066      	movs	r0, #102	@ 0x66
 8015008:	f7ff fff2 	bl	8014ff0 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 801500c:	2099      	movs	r0, #153	@ 0x99
 801500e:	f7ff ffef 	bl	8014ff0 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8015012:	f7ff ffd5 	bl	8014fc0 <sFLASH_CS_HIGH>
}
 8015016:	bd08      	pop	{r3, pc}

08015018 <sFLASH_Init>:
void sFLASH_Init(void){
 8015018:	b508      	push	{r3, lr}
    HAL_Delay(100);
 801501a:	2064      	movs	r0, #100	@ 0x64
 801501c:	f000 fa16 	bl	801544c <HAL_Delay>
    sFLASH_Reset();
 8015020:	f7ff ffee 	bl	8015000 <sFLASH_Reset>
    HAL_Delay(100);
 8015024:	2064      	movs	r0, #100	@ 0x64
 8015026:	f000 fa11 	bl	801544c <HAL_Delay>
    HAL_Delay(100);
 801502a:	2064      	movs	r0, #100	@ 0x64
 801502c:	f000 fa0e 	bl	801544c <HAL_Delay>
}
 8015030:	bd08      	pop	{r3, pc}

08015032 <sFLASH_ReadBuffer>:
{
 8015032:	b570      	push	{r4, r5, r6, lr}
 8015034:	4606      	mov	r6, r0
 8015036:	460c      	mov	r4, r1
 8015038:	4615      	mov	r5, r2
  sFLASH_CS_LOW();
 801503a:	f7ff ffb9 	bl	8014fb0 <sFLASH_CS_LOW>
  if (NumByteToRead > 16){
 801503e:	2d10      	cmp	r5, #16
 8015040:	d917      	bls.n	8015072 <sFLASH_ReadBuffer+0x40>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 8015042:	200b      	movs	r0, #11
 8015044:	f7ff ffd4 	bl	8014ff0 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015048:	f3c4 4007 	ubfx	r0, r4, #16, #8
 801504c:	f7ff ffd0 	bl	8014ff0 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 8015050:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015054:	f7ff ffcc 	bl	8014ff0 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015058:	b2e0      	uxtb	r0, r4
 801505a:	f7ff ffc9 	bl	8014ff0 <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 801505e:	2000      	movs	r0, #0
 8015060:	f7ff ffc6 	bl	8014ff0 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8015064:	4629      	mov	r1, r5
 8015066:	4630      	mov	r0, r6
 8015068:	f7ff ff80 	bl	8014f6c <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 801506c:	f7ff ffa8 	bl	8014fc0 <sFLASH_CS_HIGH>
}
 8015070:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8015072:	2003      	movs	r0, #3
 8015074:	f7ff ffbc 	bl	8014ff0 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015078:	f3c4 4007 	ubfx	r0, r4, #16, #8
 801507c:	f7ff ffb8 	bl	8014ff0 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8015080:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015084:	f7ff ffb4 	bl	8014ff0 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015088:	b2e0      	uxtb	r0, r4
 801508a:	f7ff ffb1 	bl	8014ff0 <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 801508e:	e004      	b.n	801509a <sFLASH_ReadBuffer+0x68>
		  *pBuffer = sFLASH_ReadByte();
 8015090:	f7ff ff9e 	bl	8014fd0 <sFLASH_ReadByte>
 8015094:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 8015098:	4625      	mov	r5, r4
 801509a:	1e6b      	subs	r3, r5, #1
 801509c:	b29c      	uxth	r4, r3
 801509e:	2d00      	cmp	r5, #0
 80150a0:	d1f6      	bne.n	8015090 <sFLASH_ReadBuffer+0x5e>
 80150a2:	e7e3      	b.n	801506c <sFLASH_ReadBuffer+0x3a>

080150a4 <sFLASH_ReadID>:
{
 80150a4:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 80150a6:	f7ff ff83 	bl	8014fb0 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80150aa:	f7ff ff89 	bl	8014fc0 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80150ae:	f7ff ff7f 	bl	8014fb0 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80150b2:	f7ff ff85 	bl	8014fc0 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80150b6:	f7ff ff7b 	bl	8014fb0 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80150ba:	209f      	movs	r0, #159	@ 0x9f
 80150bc:	f7ff ff98 	bl	8014ff0 <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 80150c0:	f7ff ff86 	bl	8014fd0 <sFLASH_ReadByte>
 80150c4:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 80150c6:	f7ff ff83 	bl	8014fd0 <sFLASH_ReadByte>
 80150ca:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 80150cc:	f7ff ff80 	bl	8014fd0 <sFLASH_ReadByte>
 80150d0:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 80150d2:	f7ff ff75 	bl	8014fc0 <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80150d6:	0224      	lsls	r4, r4, #8
 80150d8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 80150dc:	ea44 0005 	orr.w	r0, r4, r5
 80150e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080150e4 <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 80150e4:	b538      	push	{r3, r4, r5, lr}
 80150e6:	4605      	mov	r5, r0
	sFLASH_Init();
 80150e8:	f7ff ff96 	bl	8015018 <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 80150ec:	f7ff ffda 	bl	80150a4 <sFLASH_ReadID>
	switch (flash_id) {
 80150f0:	4b52      	ldr	r3, [pc, #328]	@ (801523c <sFLASH_GetInfo+0x158>)
 80150f2:	4298      	cmp	r0, r3
 80150f4:	f000 8085 	beq.w	8015202 <sFLASH_GetInfo+0x11e>
 80150f8:	f0c0 809c 	bcc.w	8015234 <sFLASH_GetInfo+0x150>
 80150fc:	4b50      	ldr	r3, [pc, #320]	@ (8015240 <sFLASH_GetInfo+0x15c>)
 80150fe:	4298      	cmp	r0, r3
 8015100:	f200 8098 	bhi.w	8015234 <sFLASH_GetInfo+0x150>
 8015104:	3b03      	subs	r3, #3
 8015106:	4298      	cmp	r0, r3
 8015108:	f0c0 8094 	bcc.w	8015234 <sFLASH_GetInfo+0x150>
 801510c:	4b4d      	ldr	r3, [pc, #308]	@ (8015244 <sFLASH_GetInfo+0x160>)
 801510e:	4403      	add	r3, r0
 8015110:	2b03      	cmp	r3, #3
 8015112:	f200 808f 	bhi.w	8015234 <sFLASH_GetInfo+0x150>
 8015116:	e8df f003 	tbb	[pc, r3]
 801511a:	2b02      	.short	0x2b02
 801511c:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 801511e:	4c4a      	ldr	r4, [pc, #296]	@ (8015248 <sFLASH_GetInfo+0x164>)
 8015120:	4b4a      	ldr	r3, [pc, #296]	@ (801524c <sFLASH_GetInfo+0x168>)
 8015122:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015124:	2301      	movs	r3, #1
 8015126:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015128:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801512a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801512e:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015130:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015134:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 8015136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801513a:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q16", sizeof(flash_info.model_name) - 1);
 801513c:	2231      	movs	r2, #49	@ 0x31
 801513e:	4944      	ldr	r1, [pc, #272]	@ (8015250 <sFLASH_GetInfo+0x16c>)
 8015140:	f104 000e 	add.w	r0, r4, #14
 8015144:	f016 fca3 	bl	802ba8e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015148:	2300      	movs	r3, #0
 801514a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 801514e:	46ac      	mov	ip, r5
 8015150:	4c3d      	ldr	r4, [pc, #244]	@ (8015248 <sFLASH_GetInfo+0x164>)
 8015152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801515a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801515e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015160:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015164:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015168:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 801516c:	4628      	mov	r0, r5
 801516e:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8015170:	4c35      	ldr	r4, [pc, #212]	@ (8015248 <sFLASH_GetInfo+0x164>)
 8015172:	4b38      	ldr	r3, [pc, #224]	@ (8015254 <sFLASH_GetInfo+0x170>)
 8015174:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015176:	2301      	movs	r3, #1
 8015178:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 801517a:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801517c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015180:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015182:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015186:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8015188:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801518c:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q32", sizeof(flash_info.model_name) - 1);
 801518e:	2231      	movs	r2, #49	@ 0x31
 8015190:	4931      	ldr	r1, [pc, #196]	@ (8015258 <sFLASH_GetInfo+0x174>)
 8015192:	f104 000e 	add.w	r0, r4, #14
 8015196:	f016 fc7a 	bl	802ba8e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 801519a:	2300      	movs	r3, #0
 801519c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80151a0:	e7d5      	b.n	801514e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 80151a2:	4c29      	ldr	r4, [pc, #164]	@ (8015248 <sFLASH_GetInfo+0x164>)
 80151a4:	4b2d      	ldr	r3, [pc, #180]	@ (801525c <sFLASH_GetInfo+0x178>)
 80151a6:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80151a8:	2301      	movs	r3, #1
 80151aa:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80151ac:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80151ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80151b2:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80151b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80151b8:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 80151ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80151be:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q64", sizeof(flash_info.model_name) - 1);
 80151c0:	2231      	movs	r2, #49	@ 0x31
 80151c2:	4927      	ldr	r1, [pc, #156]	@ (8015260 <sFLASH_GetInfo+0x17c>)
 80151c4:	f104 000e 	add.w	r0, r4, #14
 80151c8:	f016 fc61 	bl	802ba8e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80151cc:	2300      	movs	r3, #0
 80151ce:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80151d2:	e7bc      	b.n	801514e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 80151d4:	4c1c      	ldr	r4, [pc, #112]	@ (8015248 <sFLASH_GetInfo+0x164>)
 80151d6:	4b1a      	ldr	r3, [pc, #104]	@ (8015240 <sFLASH_GetInfo+0x15c>)
 80151d8:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80151da:	2301      	movs	r3, #1
 80151dc:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80151de:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80151e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80151e4:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80151e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80151ea:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 80151ec:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q128", sizeof(flash_info.model_name) - 1);
 80151ee:	2231      	movs	r2, #49	@ 0x31
 80151f0:	491c      	ldr	r1, [pc, #112]	@ (8015264 <sFLASH_GetInfo+0x180>)
 80151f2:	f104 000e 	add.w	r0, r4, #14
 80151f6:	f016 fc4a 	bl	802ba8e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80151fa:	2300      	movs	r3, #0
 80151fc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015200:	e7a5      	b.n	801514e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8015202:	4c11      	ldr	r4, [pc, #68]	@ (8015248 <sFLASH_GetInfo+0x164>)
 8015204:	4b0d      	ldr	r3, [pc, #52]	@ (801523c <sFLASH_GetInfo+0x158>)
 8015206:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015208:	2301      	movs	r3, #1
 801520a:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 801520c:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801520e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015212:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015218:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 801521a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801521e:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 8015220:	2231      	movs	r2, #49	@ 0x31
 8015222:	4911      	ldr	r1, [pc, #68]	@ (8015268 <sFLASH_GetInfo+0x184>)
 8015224:	f104 000e 	add.w	r0, r4, #14
 8015228:	f016 fc31 	bl	802ba8e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 801522c:	2300      	movs	r3, #0
 801522e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015232:	e78c      	b.n	801514e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8015234:	4b04      	ldr	r3, [pc, #16]	@ (8015248 <sFLASH_GetInfo+0x164>)
 8015236:	2200      	movs	r2, #0
 8015238:	601a      	str	r2, [r3, #0]
			break;
 801523a:	e788      	b.n	801514e <sFLASH_GetInfo+0x6a>
 801523c:	00c22016 	.word	0x00c22016
 8015240:	00ef4018 	.word	0x00ef4018
 8015244:	ff10bfeb 	.word	0xff10bfeb
 8015248:	20001818 	.word	0x20001818
 801524c:	00ef4015 	.word	0x00ef4015
 8015250:	08037370 	.word	0x08037370
 8015254:	00ef4016 	.word	0x00ef4016
 8015258:	08037378 	.word	0x08037378
 801525c:	00ef4017 	.word	0x00ef4017
 8015260:	08037380 	.word	0x08037380
 8015264:	08037388 	.word	0x08037388
 8015268:	08037390 	.word	0x08037390

0801526c <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 801526c:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801526e:	f7ff fe9f 	bl	8014fb0 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8015272:	2006      	movs	r0, #6
 8015274:	f7ff febc 	bl	8014ff0 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015278:	f7ff fea2 	bl	8014fc0 <sFLASH_CS_HIGH>
}
 801527c:	bd08      	pop	{r3, pc}
	...

08015280 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8015280:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 8015282:	4d09      	ldr	r5, [pc, #36]	@ (80152a8 <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 8015284:	f7ff fe94 	bl	8014fb0 <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8015288:	2005      	movs	r0, #5
 801528a:	f7ff feb1 	bl	8014ff0 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 801528e:	f7ff fe9f 	bl	8014fd0 <sFLASH_ReadByte>
 8015292:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 8015294:	f7ff fe94 	bl	8014fc0 <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 8015298:	462b      	mov	r3, r5
 801529a:	3d01      	subs	r5, #1
 801529c:	b113      	cbz	r3, 80152a4 <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 801529e:	f014 0f01 	tst.w	r4, #1
 80152a2:	d1ef      	bne.n	8015284 <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 80152a4:	bd38      	pop	{r3, r4, r5, pc}
 80152a6:	bf00      	nop
 80152a8:	000186a0 	.word	0x000186a0

080152ac <sFLASH_EraseSector>:
{
 80152ac:	b510      	push	{r4, lr}
 80152ae:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 80152b0:	f7ff ffdc 	bl	801526c <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 80152b4:	f7ff fe7c 	bl	8014fb0 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 80152b8:	2020      	movs	r0, #32
 80152ba:	f7ff fe99 	bl	8014ff0 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 80152be:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80152c2:	f7ff fe95 	bl	8014ff0 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 80152c6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80152ca:	f7ff fe91 	bl	8014ff0 <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 80152ce:	b2e0      	uxtb	r0, r4
 80152d0:	f7ff fe8e 	bl	8014ff0 <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 80152d4:	f7ff fe74 	bl	8014fc0 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 80152d8:	f7ff ffd2 	bl	8015280 <sFLASH_WaitForWriteEnd>
}
 80152dc:	bd10      	pop	{r4, pc}

080152de <sFLASH_WritePage>:
{
 80152de:	b570      	push	{r4, r5, r6, lr}
 80152e0:	4606      	mov	r6, r0
 80152e2:	460c      	mov	r4, r1
 80152e4:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 80152e6:	f7ff ffc1 	bl	801526c <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 80152ea:	f7ff fe61 	bl	8014fb0 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 80152ee:	2002      	movs	r0, #2
 80152f0:	f7ff fe7e 	bl	8014ff0 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 80152f4:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80152f8:	f7ff fe7a 	bl	8014ff0 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80152fc:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015300:	f7ff fe76 	bl	8014ff0 <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 8015304:	b2e0      	uxtb	r0, r4
 8015306:	f7ff fe73 	bl	8014ff0 <sFLASH_SendByte>
  while (NumByteToWrite--)
 801530a:	e004      	b.n	8015316 <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 801530c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8015310:	f7ff fe6e 	bl	8014ff0 <sFLASH_SendByte>
  while (NumByteToWrite--)
 8015314:	4625      	mov	r5, r4
 8015316:	1e6b      	subs	r3, r5, #1
 8015318:	b29c      	uxth	r4, r3
 801531a:	2d00      	cmp	r5, #0
 801531c:	d1f6      	bne.n	801530c <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 801531e:	f7ff fe4f 	bl	8014fc0 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8015322:	f7ff ffad 	bl	8015280 <sFLASH_WaitForWriteEnd>
}
 8015326:	bd70      	pop	{r4, r5, r6, pc}

08015328 <sFLASH_WriteBuffer>:
{
 8015328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801532c:	4605      	mov	r5, r0
 801532e:	460c      	mov	r4, r1
 8015330:	4617      	mov	r7, r2
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8015332:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015334:	0a11      	lsrs	r1, r2, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8015336:	b9d3      	cbnz	r3, 801536e <sFLASH_WriteBuffer+0x46>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015338:	b971      	cbnz	r1, 8015358 <sFLASH_WriteBuffer+0x30>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801533a:	4621      	mov	r1, r4
 801533c:	f7ff ffcf 	bl	80152de <sFLASH_WritePage>
 8015340:	e013      	b.n	801536a <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015342:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015346:	4621      	mov	r1, r4
 8015348:	4628      	mov	r0, r5
 801534a:	f7ff ffc8 	bl	80152de <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 801534e:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8015352:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8015356:	4631      	mov	r1, r6
 8015358:	1e4b      	subs	r3, r1, #1
 801535a:	b2de      	uxtb	r6, r3
 801535c:	2900      	cmp	r1, #0
 801535e:	d1f0      	bne.n	8015342 <sFLASH_WriteBuffer+0x1a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015360:	b2fa      	uxtb	r2, r7
 8015362:	4621      	mov	r1, r4
 8015364:	4628      	mov	r0, r5
 8015366:	f7ff ffba 	bl	80152de <sFLASH_WritePage>
}
 801536a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801536e:	f1c3 0800 	rsb	r8, r3, #0
 8015372:	fa5f f888 	uxtb.w	r8, r8
 8015376:	b2d2      	uxtb	r2, r2
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015378:	b9a1      	cbnz	r1, 80153a4 <sFLASH_WriteBuffer+0x7c>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 801537a:	4590      	cmp	r8, r2
 801537c:	d20d      	bcs.n	801539a <sFLASH_WriteBuffer+0x72>
        temp = NumOfSingle - count;
 801537e:	4413      	add	r3, r2
 8015380:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8015382:	4642      	mov	r2, r8
 8015384:	4621      	mov	r1, r4
 8015386:	f7ff ffaa 	bl	80152de <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 801538a:	4632      	mov	r2, r6
 801538c:	eb08 0104 	add.w	r1, r8, r4
 8015390:	eb05 0008 	add.w	r0, r5, r8
 8015394:	f7ff ffa3 	bl	80152de <sFLASH_WritePage>
 8015398:	e7e7      	b.n	801536a <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801539a:	463a      	mov	r2, r7
 801539c:	4621      	mov	r1, r4
 801539e:	f7ff ff9e 	bl	80152de <sFLASH_WritePage>
 80153a2:	e7e2      	b.n	801536a <sFLASH_WriteBuffer+0x42>
      NumByteToWrite -= count;
 80153a4:	eba7 0708 	sub.w	r7, r7, r8
 80153a8:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80153ac:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80153b0:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 80153b2:	4642      	mov	r2, r8
 80153b4:	4621      	mov	r1, r4
 80153b6:	f7ff ff92 	bl	80152de <sFLASH_WritePage>
      WriteAddr +=  count;
 80153ba:	4444      	add	r4, r8
      pBuffer += count;
 80153bc:	4445      	add	r5, r8
      while (NumOfPage--)
 80153be:	e00a      	b.n	80153d6 <sFLASH_WriteBuffer+0xae>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80153c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80153c4:	4621      	mov	r1, r4
 80153c6:	4628      	mov	r0, r5
 80153c8:	f7ff ff89 	bl	80152de <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80153cc:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 80153d0:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 80153d4:	4646      	mov	r6, r8
 80153d6:	1e73      	subs	r3, r6, #1
 80153d8:	fa5f f883 	uxtb.w	r8, r3
 80153dc:	2e00      	cmp	r6, #0
 80153de:	d1ef      	bne.n	80153c0 <sFLASH_WriteBuffer+0x98>
      if (NumOfSingle != 0)
 80153e0:	2f00      	cmp	r7, #0
 80153e2:	d0c2      	beq.n	801536a <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80153e4:	fa5f f289 	uxtb.w	r2, r9
 80153e8:	4621      	mov	r1, r4
 80153ea:	4628      	mov	r0, r5
 80153ec:	f7ff ff77 	bl	80152de <sFLASH_WritePage>
}
 80153f0:	e7bb      	b.n	801536a <sFLASH_WriteBuffer+0x42>
	...

080153f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80153f4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80153f6:	4b0b      	ldr	r3, [pc, #44]	@ (8015424 <HAL_Init+0x30>)
 80153f8:	681a      	ldr	r2, [r3, #0]
 80153fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80153fe:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015400:	681a      	ldr	r2, [r3, #0]
 8015402:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8015406:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015408:	681a      	ldr	r2, [r3, #0]
 801540a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801540e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015410:	2003      	movs	r0, #3
 8015412:	f000 f883 	bl	801551c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015416:	200f      	movs	r0, #15
 8015418:	f7fc feb4 	bl	8012184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801541c:	f7fc fe90 	bl	8012140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8015420:	2000      	movs	r0, #0
 8015422:	bd08      	pop	{r3, pc}
 8015424:	40023c00 	.word	0x40023c00

08015428 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8015428:	4a03      	ldr	r2, [pc, #12]	@ (8015438 <HAL_IncTick+0x10>)
 801542a:	6811      	ldr	r1, [r2, #0]
 801542c:	4b03      	ldr	r3, [pc, #12]	@ (801543c <HAL_IncTick+0x14>)
 801542e:	781b      	ldrb	r3, [r3, #0]
 8015430:	440b      	add	r3, r1
 8015432:	6013      	str	r3, [r2, #0]
}
 8015434:	4770      	bx	lr
 8015436:	bf00      	nop
 8015438:	2000186c 	.word	0x2000186c
 801543c:	20000082 	.word	0x20000082

08015440 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8015440:	4b01      	ldr	r3, [pc, #4]	@ (8015448 <HAL_GetTick+0x8>)
 8015442:	6818      	ldr	r0, [r3, #0]
}
 8015444:	4770      	bx	lr
 8015446:	bf00      	nop
 8015448:	2000186c 	.word	0x2000186c

0801544c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801544c:	b538      	push	{r3, r4, r5, lr}
 801544e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8015450:	f7ff fff6 	bl	8015440 <HAL_GetTick>
 8015454:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015456:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801545a:	d002      	beq.n	8015462 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 801545c:	4b04      	ldr	r3, [pc, #16]	@ (8015470 <HAL_Delay+0x24>)
 801545e:	781b      	ldrb	r3, [r3, #0]
 8015460:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8015462:	f7ff ffed 	bl	8015440 <HAL_GetTick>
 8015466:	1b40      	subs	r0, r0, r5
 8015468:	42a0      	cmp	r0, r4
 801546a:	d3fa      	bcc.n	8015462 <HAL_Delay+0x16>
  {
  }
}
 801546c:	bd38      	pop	{r3, r4, r5, pc}
 801546e:	bf00      	nop
 8015470:	20000082 	.word	0x20000082

08015474 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8015474:	2800      	cmp	r0, #0
 8015476:	db07      	blt.n	8015488 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015478:	f000 021f 	and.w	r2, r0, #31
 801547c:	0940      	lsrs	r0, r0, #5
 801547e:	2301      	movs	r3, #1
 8015480:	4093      	lsls	r3, r2
 8015482:	4a02      	ldr	r2, [pc, #8]	@ (801548c <__NVIC_EnableIRQ+0x18>)
 8015484:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8015488:	4770      	bx	lr
 801548a:	bf00      	nop
 801548c:	e000e100 	.word	0xe000e100

08015490 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8015490:	2800      	cmp	r0, #0
 8015492:	db08      	blt.n	80154a6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015494:	0109      	lsls	r1, r1, #4
 8015496:	b2c9      	uxtb	r1, r1
 8015498:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 801549c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80154a0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80154a4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80154a6:	f000 000f 	and.w	r0, r0, #15
 80154aa:	0109      	lsls	r1, r1, #4
 80154ac:	b2c9      	uxtb	r1, r1
 80154ae:	4b01      	ldr	r3, [pc, #4]	@ (80154b4 <__NVIC_SetPriority+0x24>)
 80154b0:	5419      	strb	r1, [r3, r0]
  }
}
 80154b2:	4770      	bx	lr
 80154b4:	e000ed14 	.word	0xe000ed14

080154b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80154b8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80154ba:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80154be:	f1c0 0c07 	rsb	ip, r0, #7
 80154c2:	f1bc 0f04 	cmp.w	ip, #4
 80154c6:	bf28      	it	cs
 80154c8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80154cc:	1d03      	adds	r3, r0, #4
 80154ce:	2b06      	cmp	r3, #6
 80154d0:	d90f      	bls.n	80154f2 <NVIC_EncodePriority+0x3a>
 80154d2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80154d4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80154d8:	fa0e f00c 	lsl.w	r0, lr, ip
 80154dc:	ea21 0100 	bic.w	r1, r1, r0
 80154e0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80154e2:	fa0e fe03 	lsl.w	lr, lr, r3
 80154e6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80154ea:	ea41 0002 	orr.w	r0, r1, r2
 80154ee:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80154f2:	2300      	movs	r3, #0
 80154f4:	e7ee      	b.n	80154d4 <NVIC_EncodePriority+0x1c>
	...

080154f8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80154f8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80154fc:	4905      	ldr	r1, [pc, #20]	@ (8015514 <__NVIC_SystemReset+0x1c>)
 80154fe:	68ca      	ldr	r2, [r1, #12]
 8015500:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015504:	4b04      	ldr	r3, [pc, #16]	@ (8015518 <__NVIC_SystemReset+0x20>)
 8015506:	4313      	orrs	r3, r2
 8015508:	60cb      	str	r3, [r1, #12]
 801550a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801550e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8015510:	e7fd      	b.n	801550e <__NVIC_SystemReset+0x16>
 8015512:	bf00      	nop
 8015514:	e000ed00 	.word	0xe000ed00
 8015518:	05fa0004 	.word	0x05fa0004

0801551c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801551c:	4a07      	ldr	r2, [pc, #28]	@ (801553c <HAL_NVIC_SetPriorityGrouping+0x20>)
 801551e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015520:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8015524:	041b      	lsls	r3, r3, #16
 8015526:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015528:	0200      	lsls	r0, r0, #8
 801552a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801552e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8015530:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8015534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8015538:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 801553a:	4770      	bx	lr
 801553c:	e000ed00 	.word	0xe000ed00

08015540 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015540:	b510      	push	{r4, lr}
 8015542:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015544:	4b05      	ldr	r3, [pc, #20]	@ (801555c <HAL_NVIC_SetPriority+0x1c>)
 8015546:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015548:	f3c0 2002 	ubfx	r0, r0, #8, #3
 801554c:	f7ff ffb4 	bl	80154b8 <NVIC_EncodePriority>
 8015550:	4601      	mov	r1, r0
 8015552:	4620      	mov	r0, r4
 8015554:	f7ff ff9c 	bl	8015490 <__NVIC_SetPriority>
}
 8015558:	bd10      	pop	{r4, pc}
 801555a:	bf00      	nop
 801555c:	e000ed00 	.word	0xe000ed00

08015560 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015560:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015562:	f7ff ff87 	bl	8015474 <__NVIC_EnableIRQ>
}
 8015566:	bd08      	pop	{r3, pc}

08015568 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8015568:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 801556a:	f7ff ffc5 	bl	80154f8 <__NVIC_SystemReset>
	...

08015570 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015570:	2300      	movs	r3, #0
 8015572:	2b0f      	cmp	r3, #15
 8015574:	f200 80d7 	bhi.w	8015726 <HAL_GPIO_Init+0x1b6>
{
 8015578:	b570      	push	{r4, r5, r6, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	e065      	b.n	801564a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801557e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015580:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8015584:	2403      	movs	r4, #3
 8015586:	fa04 f40e 	lsl.w	r4, r4, lr
 801558a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 801558e:	68cc      	ldr	r4, [r1, #12]
 8015590:	fa04 f40e 	lsl.w	r4, r4, lr
 8015594:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8015596:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015598:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801559a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801559e:	684a      	ldr	r2, [r1, #4]
 80155a0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80155a4:	409a      	lsls	r2, r3
 80155a6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80155a8:	6042      	str	r2, [r0, #4]
 80155aa:	e05c      	b.n	8015666 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80155ac:	08dc      	lsrs	r4, r3, #3
 80155ae:	3408      	adds	r4, #8
 80155b0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80155b4:	f003 0507 	and.w	r5, r3, #7
 80155b8:	00ad      	lsls	r5, r5, #2
 80155ba:	f04f 0e0f 	mov.w	lr, #15
 80155be:	fa0e fe05 	lsl.w	lr, lr, r5
 80155c2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80155c6:	690a      	ldr	r2, [r1, #16]
 80155c8:	40aa      	lsls	r2, r5
 80155ca:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80155ce:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80155d2:	e05c      	b.n	801568e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80155d4:	2204      	movs	r2, #4
 80155d6:	e000      	b.n	80155da <HAL_GPIO_Init+0x6a>
 80155d8:	2200      	movs	r2, #0
 80155da:	fa02 f20e 	lsl.w	r2, r2, lr
 80155de:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80155e0:	3402      	adds	r4, #2
 80155e2:	4d51      	ldr	r5, [pc, #324]	@ (8015728 <HAL_GPIO_Init+0x1b8>)
 80155e4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80155e8:	4a50      	ldr	r2, [pc, #320]	@ (801572c <HAL_GPIO_Init+0x1bc>)
 80155ea:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80155ec:	ea6f 020c 	mvn.w	r2, ip
 80155f0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80155f4:	684e      	ldr	r6, [r1, #4]
 80155f6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80155fa:	d001      	beq.n	8015600 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80155fc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8015600:	4c4a      	ldr	r4, [pc, #296]	@ (801572c <HAL_GPIO_Init+0x1bc>)
 8015602:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8015604:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8015606:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801560a:	684e      	ldr	r6, [r1, #4]
 801560c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8015610:	d001      	beq.n	8015616 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8015612:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8015616:	4c45      	ldr	r4, [pc, #276]	@ (801572c <HAL_GPIO_Init+0x1bc>)
 8015618:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 801561a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 801561c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015620:	684e      	ldr	r6, [r1, #4]
 8015622:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8015626:	d001      	beq.n	801562c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8015628:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 801562c:	4c3f      	ldr	r4, [pc, #252]	@ (801572c <HAL_GPIO_Init+0x1bc>)
 801562e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015630:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8015632:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015634:	684d      	ldr	r5, [r1, #4]
 8015636:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 801563a:	d001      	beq.n	8015640 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 801563c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8015640:	4c3a      	ldr	r4, [pc, #232]	@ (801572c <HAL_GPIO_Init+0x1bc>)
 8015642:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015644:	3301      	adds	r3, #1
 8015646:	2b0f      	cmp	r3, #15
 8015648:	d86b      	bhi.n	8015722 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 801564a:	2201      	movs	r2, #1
 801564c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801564e:	680c      	ldr	r4, [r1, #0]
 8015650:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8015654:	ea32 0404 	bics.w	r4, r2, r4
 8015658:	d1f4      	bne.n	8015644 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801565a:	684c      	ldr	r4, [r1, #4]
 801565c:	f004 0403 	and.w	r4, r4, #3
 8015660:	3c01      	subs	r4, #1
 8015662:	2c01      	cmp	r4, #1
 8015664:	d98b      	bls.n	801557e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015666:	684a      	ldr	r2, [r1, #4]
 8015668:	f002 0203 	and.w	r2, r2, #3
 801566c:	2a03      	cmp	r2, #3
 801566e:	d009      	beq.n	8015684 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8015670:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015672:	005d      	lsls	r5, r3, #1
 8015674:	2203      	movs	r2, #3
 8015676:	40aa      	lsls	r2, r5
 8015678:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801567c:	688a      	ldr	r2, [r1, #8]
 801567e:	40aa      	lsls	r2, r5
 8015680:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8015682:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015684:	684a      	ldr	r2, [r1, #4]
 8015686:	f002 0203 	and.w	r2, r2, #3
 801568a:	2a02      	cmp	r2, #2
 801568c:	d08e      	beq.n	80155ac <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 801568e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015690:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8015694:	2203      	movs	r2, #3
 8015696:	fa02 f20e 	lsl.w	r2, r2, lr
 801569a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801569e:	684a      	ldr	r2, [r1, #4]
 80156a0:	f002 0203 	and.w	r2, r2, #3
 80156a4:	fa02 f20e 	lsl.w	r2, r2, lr
 80156a8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80156aa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80156ac:	684a      	ldr	r2, [r1, #4]
 80156ae:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80156b2:	d0c7      	beq.n	8015644 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80156b4:	2200      	movs	r2, #0
 80156b6:	9201      	str	r2, [sp, #4]
 80156b8:	4a1d      	ldr	r2, [pc, #116]	@ (8015730 <HAL_GPIO_Init+0x1c0>)
 80156ba:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80156bc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80156c0:	6454      	str	r4, [r2, #68]	@ 0x44
 80156c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80156c4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80156c8:	9201      	str	r2, [sp, #4]
 80156ca:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80156cc:	089c      	lsrs	r4, r3, #2
 80156ce:	1ca5      	adds	r5, r4, #2
 80156d0:	4a15      	ldr	r2, [pc, #84]	@ (8015728 <HAL_GPIO_Init+0x1b8>)
 80156d2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80156d6:	f003 0e03 	and.w	lr, r3, #3
 80156da:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80156de:	220f      	movs	r2, #15
 80156e0:	fa02 f20e 	lsl.w	r2, r2, lr
 80156e4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80156e8:	4a12      	ldr	r2, [pc, #72]	@ (8015734 <HAL_GPIO_Init+0x1c4>)
 80156ea:	4290      	cmp	r0, r2
 80156ec:	f43f af74 	beq.w	80155d8 <HAL_GPIO_Init+0x68>
 80156f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80156f4:	4290      	cmp	r0, r2
 80156f6:	d00e      	beq.n	8015716 <HAL_GPIO_Init+0x1a6>
 80156f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80156fc:	4290      	cmp	r0, r2
 80156fe:	d00c      	beq.n	801571a <HAL_GPIO_Init+0x1aa>
 8015700:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015704:	4290      	cmp	r0, r2
 8015706:	d00a      	beq.n	801571e <HAL_GPIO_Init+0x1ae>
 8015708:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801570c:	4290      	cmp	r0, r2
 801570e:	f43f af61 	beq.w	80155d4 <HAL_GPIO_Init+0x64>
 8015712:	2207      	movs	r2, #7
 8015714:	e761      	b.n	80155da <HAL_GPIO_Init+0x6a>
 8015716:	2201      	movs	r2, #1
 8015718:	e75f      	b.n	80155da <HAL_GPIO_Init+0x6a>
 801571a:	2202      	movs	r2, #2
 801571c:	e75d      	b.n	80155da <HAL_GPIO_Init+0x6a>
 801571e:	2203      	movs	r2, #3
 8015720:	e75b      	b.n	80155da <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8015722:	b002      	add	sp, #8
 8015724:	bd70      	pop	{r4, r5, r6, pc}
 8015726:	4770      	bx	lr
 8015728:	40013800 	.word	0x40013800
 801572c:	40013c00 	.word	0x40013c00
 8015730:	40023800 	.word	0x40023800
 8015734:	40020000 	.word	0x40020000

08015738 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015738:	2300      	movs	r3, #0
 801573a:	2b0f      	cmp	r3, #15
 801573c:	d87c      	bhi.n	8015838 <HAL_GPIO_DeInit+0x100>
{
 801573e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015740:	e02d      	b.n	801579e <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8015742:	2504      	movs	r5, #4
 8015744:	e000      	b.n	8015748 <HAL_GPIO_DeInit+0x10>
 8015746:	2500      	movs	r5, #0
 8015748:	fa05 f50c 	lsl.w	r5, r5, ip
 801574c:	42a5      	cmp	r5, r4
 801574e:	d057      	beq.n	8015800 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015750:	6804      	ldr	r4, [r0, #0]
 8015752:	005d      	lsls	r5, r3, #1
 8015754:	f04f 0c03 	mov.w	ip, #3
 8015758:	fa0c fc05 	lsl.w	ip, ip, r5
 801575c:	ea24 040c 	bic.w	r4, r4, ip
 8015760:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015762:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8015766:	f10e 0e08 	add.w	lr, lr, #8
 801576a:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 801576e:	f003 0607 	and.w	r6, r3, #7
 8015772:	00b6      	lsls	r6, r6, #2
 8015774:	250f      	movs	r5, #15
 8015776:	40b5      	lsls	r5, r6
 8015778:	ea24 0405 	bic.w	r4, r4, r5
 801577c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015780:	68c4      	ldr	r4, [r0, #12]
 8015782:	ea24 040c 	bic.w	r4, r4, ip
 8015786:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015788:	6844      	ldr	r4, [r0, #4]
 801578a:	ea24 0202 	bic.w	r2, r4, r2
 801578e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015790:	6882      	ldr	r2, [r0, #8]
 8015792:	ea22 020c 	bic.w	r2, r2, ip
 8015796:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015798:	3301      	adds	r3, #1
 801579a:	2b0f      	cmp	r3, #15
 801579c:	d84b      	bhi.n	8015836 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 801579e:	2201      	movs	r2, #1
 80157a0:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80157a2:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 80157a6:	ea32 0401 	bics.w	r4, r2, r1
 80157aa:	d1f5      	bne.n	8015798 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80157ac:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80157b0:	f10e 0502 	add.w	r5, lr, #2
 80157b4:	4c21      	ldr	r4, [pc, #132]	@ (801583c <HAL_GPIO_DeInit+0x104>)
 80157b6:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80157ba:	f003 0c03 	and.w	ip, r3, #3
 80157be:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80157c2:	250f      	movs	r5, #15
 80157c4:	fa05 f70c 	lsl.w	r7, r5, ip
 80157c8:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80157ca:	4d1d      	ldr	r5, [pc, #116]	@ (8015840 <HAL_GPIO_DeInit+0x108>)
 80157cc:	42a8      	cmp	r0, r5
 80157ce:	d0ba      	beq.n	8015746 <HAL_GPIO_DeInit+0xe>
 80157d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80157d4:	42a8      	cmp	r0, r5
 80157d6:	d00d      	beq.n	80157f4 <HAL_GPIO_DeInit+0xbc>
 80157d8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80157dc:	42a8      	cmp	r0, r5
 80157de:	d00b      	beq.n	80157f8 <HAL_GPIO_DeInit+0xc0>
 80157e0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80157e4:	42a8      	cmp	r0, r5
 80157e6:	d009      	beq.n	80157fc <HAL_GPIO_DeInit+0xc4>
 80157e8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80157ec:	42a8      	cmp	r0, r5
 80157ee:	d0a8      	beq.n	8015742 <HAL_GPIO_DeInit+0xa>
 80157f0:	2507      	movs	r5, #7
 80157f2:	e7a9      	b.n	8015748 <HAL_GPIO_DeInit+0x10>
 80157f4:	2501      	movs	r5, #1
 80157f6:	e7a7      	b.n	8015748 <HAL_GPIO_DeInit+0x10>
 80157f8:	2502      	movs	r5, #2
 80157fa:	e7a5      	b.n	8015748 <HAL_GPIO_DeInit+0x10>
 80157fc:	2503      	movs	r5, #3
 80157fe:	e7a3      	b.n	8015748 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8015800:	4c10      	ldr	r4, [pc, #64]	@ (8015844 <HAL_GPIO_DeInit+0x10c>)
 8015802:	6825      	ldr	r5, [r4, #0]
 8015804:	ea25 0506 	bic.w	r5, r5, r6
 8015808:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801580a:	6865      	ldr	r5, [r4, #4]
 801580c:	ea25 0506 	bic.w	r5, r5, r6
 8015810:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8015812:	68e5      	ldr	r5, [r4, #12]
 8015814:	ea25 0506 	bic.w	r5, r5, r6
 8015818:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801581a:	68a5      	ldr	r5, [r4, #8]
 801581c:	ea25 0506 	bic.w	r5, r5, r6
 8015820:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8015822:	4e06      	ldr	r6, [pc, #24]	@ (801583c <HAL_GPIO_DeInit+0x104>)
 8015824:	f10e 0402 	add.w	r4, lr, #2
 8015828:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 801582c:	ea25 0507 	bic.w	r5, r5, r7
 8015830:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8015834:	e78c      	b.n	8015750 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8015836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015838:	4770      	bx	lr
 801583a:	bf00      	nop
 801583c:	40013800 	.word	0x40013800
 8015840:	40020000 	.word	0x40020000
 8015844:	40013c00 	.word	0x40013c00

08015848 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8015848:	6903      	ldr	r3, [r0, #16]
 801584a:	4219      	tst	r1, r3
 801584c:	d001      	beq.n	8015852 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 801584e:	2001      	movs	r0, #1
 8015850:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015852:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8015854:	4770      	bx	lr

08015856 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015856:	b10a      	cbz	r2, 801585c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015858:	6181      	str	r1, [r0, #24]
 801585a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801585c:	0409      	lsls	r1, r1, #16
 801585e:	6181      	str	r1, [r0, #24]
  }
}
 8015860:	4770      	bx	lr

08015862 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8015862:	6803      	ldr	r3, [r0, #0]
 8015864:	695a      	ldr	r2, [r3, #20]
 8015866:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 801586a:	d101      	bne.n	8015870 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 801586c:	2000      	movs	r0, #0
}
 801586e:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015870:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8015874:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8015876:	2300      	movs	r3, #0
 8015878:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801587a:	2220      	movs	r2, #32
 801587c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8015880:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8015884:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8015886:	f042 0204 	orr.w	r2, r2, #4
 801588a:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 801588c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8015890:	2001      	movs	r0, #1
 8015892:	4770      	bx	lr

08015894 <I2C_WaitOnFlagUntilTimeout>:
{
 8015894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015898:	4606      	mov	r6, r0
 801589a:	460c      	mov	r4, r1
 801589c:	4617      	mov	r7, r2
 801589e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80158a0:	e03b      	b.n	801591a <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80158a2:	f7ff fdcd 	bl	8015440 <HAL_GetTick>
 80158a6:	9b06      	ldr	r3, [sp, #24]
 80158a8:	1ac0      	subs	r0, r0, r3
 80158aa:	4540      	cmp	r0, r8
 80158ac:	d802      	bhi.n	80158b4 <I2C_WaitOnFlagUntilTimeout+0x20>
 80158ae:	f1b8 0f00 	cmp.w	r8, #0
 80158b2:	d132      	bne.n	801591a <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80158b4:	2d01      	cmp	r5, #1
 80158b6:	d018      	beq.n	80158ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80158b8:	6833      	ldr	r3, [r6, #0]
 80158ba:	699b      	ldr	r3, [r3, #24]
 80158bc:	ea24 0303 	bic.w	r3, r4, r3
 80158c0:	b29b      	uxth	r3, r3
 80158c2:	fab3 f383 	clz	r3, r3
 80158c6:	095b      	lsrs	r3, r3, #5
 80158c8:	429f      	cmp	r7, r3
 80158ca:	d126      	bne.n	801591a <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80158cc:	2300      	movs	r3, #0
 80158ce:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80158d0:	2220      	movs	r2, #32
 80158d2:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80158d6:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80158da:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80158dc:	f042 0220 	orr.w	r2, r2, #32
 80158e0:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80158e2:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 80158e6:	2001      	movs	r0, #1
 80158e8:	e027      	b.n	801593a <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80158ea:	6833      	ldr	r3, [r6, #0]
 80158ec:	695b      	ldr	r3, [r3, #20]
 80158ee:	ea24 0303 	bic.w	r3, r4, r3
 80158f2:	b29b      	uxth	r3, r3
 80158f4:	fab3 f383 	clz	r3, r3
 80158f8:	095b      	lsrs	r3, r3, #5
 80158fa:	e7e5      	b.n	80158c8 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80158fc:	6833      	ldr	r3, [r6, #0]
 80158fe:	695b      	ldr	r3, [r3, #20]
 8015900:	ea24 0c03 	bic.w	ip, r4, r3
 8015904:	fa1f fc8c 	uxth.w	ip, ip
 8015908:	fabc fc8c 	clz	ip, ip
 801590c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8015910:	4567      	cmp	r7, ip
 8015912:	d111      	bne.n	8015938 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8015914:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8015918:	d1c3      	bne.n	80158a2 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801591a:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801591e:	2d01      	cmp	r5, #1
 8015920:	d0ec      	beq.n	80158fc <I2C_WaitOnFlagUntilTimeout+0x68>
 8015922:	6833      	ldr	r3, [r6, #0]
 8015924:	699b      	ldr	r3, [r3, #24]
 8015926:	ea24 0c03 	bic.w	ip, r4, r3
 801592a:	fa1f fc8c 	uxth.w	ip, ip
 801592e:	fabc fc8c 	clz	ip, ip
 8015932:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8015936:	e7eb      	b.n	8015910 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8015938:	2000      	movs	r0, #0
}
 801593a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801593e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 801593e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015942:	4605      	mov	r5, r0
 8015944:	460e      	mov	r6, r1
 8015946:	4690      	mov	r8, r2
 8015948:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801594a:	e053      	b.n	80159f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801594c:	681a      	ldr	r2, [r3, #0]
 801594e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015952:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015954:	682b      	ldr	r3, [r5, #0]
 8015956:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801595a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 801595c:	2300      	movs	r3, #0
 801595e:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8015960:	2220      	movs	r2, #32
 8015962:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8015966:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801596a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 801596c:	f042 0204 	orr.w	r2, r2, #4
 8015970:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8015972:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8015976:	2001      	movs	r0, #1
 8015978:	e04a      	b.n	8015a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801597a:	f7ff fd61 	bl	8015440 <HAL_GetTick>
 801597e:	eba0 0009 	sub.w	r0, r0, r9
 8015982:	4540      	cmp	r0, r8
 8015984:	d802      	bhi.n	801598c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8015986:	f1b8 0f00 	cmp.w	r8, #0
 801598a:	d133      	bne.n	80159f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 801598c:	2f01      	cmp	r7, #1
 801598e:	d017      	beq.n	80159c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8015990:	682b      	ldr	r3, [r5, #0]
 8015992:	699b      	ldr	r3, [r3, #24]
 8015994:	ea26 0303 	bic.w	r3, r6, r3
 8015998:	b29b      	uxth	r3, r3
 801599a:	3b00      	subs	r3, #0
 801599c:	bf18      	it	ne
 801599e:	2301      	movne	r3, #1
 80159a0:	b343      	cbz	r3, 80159f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80159a2:	2300      	movs	r3, #0
 80159a4:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80159a6:	2220      	movs	r2, #32
 80159a8:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80159ac:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80159b0:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80159b2:	f042 0220 	orr.w	r2, r2, #32
 80159b6:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80159b8:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80159bc:	2001      	movs	r0, #1
 80159be:	e027      	b.n	8015a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80159c0:	682b      	ldr	r3, [r5, #0]
 80159c2:	695b      	ldr	r3, [r3, #20]
 80159c4:	ea26 0303 	bic.w	r3, r6, r3
 80159c8:	b29b      	uxth	r3, r3
 80159ca:	3b00      	subs	r3, #0
 80159cc:	bf18      	it	ne
 80159ce:	2301      	movne	r3, #1
 80159d0:	e7e6      	b.n	80159a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80159d2:	682b      	ldr	r3, [r5, #0]
 80159d4:	699c      	ldr	r4, [r3, #24]
 80159d6:	ea26 0404 	bic.w	r4, r6, r4
 80159da:	b2a4      	uxth	r4, r4
 80159dc:	3c00      	subs	r4, #0
 80159de:	bf18      	it	ne
 80159e0:	2401      	movne	r4, #1
 80159e2:	b1a4      	cbz	r4, 8015a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80159e4:	682b      	ldr	r3, [r5, #0]
 80159e6:	695a      	ldr	r2, [r3, #20]
 80159e8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80159ec:	d1ae      	bne.n	801594c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80159ee:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80159f2:	d1c2      	bne.n	801597a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80159f4:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80159f8:	2f01      	cmp	r7, #1
 80159fa:	d1ea      	bne.n	80159d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 80159fc:	682b      	ldr	r3, [r5, #0]
 80159fe:	695c      	ldr	r4, [r3, #20]
 8015a00:	ea26 0404 	bic.w	r4, r6, r4
 8015a04:	b2a4      	uxth	r4, r4
 8015a06:	3c00      	subs	r4, #0
 8015a08:	bf18      	it	ne
 8015a0a:	2401      	movne	r4, #1
 8015a0c:	e7e9      	b.n	80159e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8015a0e:	2000      	movs	r0, #0
}
 8015a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015a14 <I2C_MasterRequestWrite>:
{
 8015a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a16:	b083      	sub	sp, #12
 8015a18:	4604      	mov	r4, r0
 8015a1a:	460d      	mov	r5, r1
 8015a1c:	4616      	mov	r6, r2
 8015a1e:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8015a20:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8015a22:	2b08      	cmp	r3, #8
 8015a24:	d00d      	beq.n	8015a42 <I2C_MasterRequestWrite+0x2e>
 8015a26:	2b01      	cmp	r3, #1
 8015a28:	d00b      	beq.n	8015a42 <I2C_MasterRequestWrite+0x2e>
 8015a2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8015a2e:	d008      	beq.n	8015a42 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8015a30:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015a32:	2b12      	cmp	r3, #18
 8015a34:	d10a      	bne.n	8015a4c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015a36:	6802      	ldr	r2, [r0, #0]
 8015a38:	6813      	ldr	r3, [r2, #0]
 8015a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015a3e:	6013      	str	r3, [r2, #0]
 8015a40:	e004      	b.n	8015a4c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015a42:	6822      	ldr	r2, [r4, #0]
 8015a44:	6813      	ldr	r3, [r2, #0]
 8015a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015a4a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8015a4c:	9700      	str	r7, [sp, #0]
 8015a4e:	4633      	mov	r3, r6
 8015a50:	2200      	movs	r2, #0
 8015a52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8015a56:	4620      	mov	r0, r4
 8015a58:	f7ff ff1c 	bl	8015894 <I2C_WaitOnFlagUntilTimeout>
 8015a5c:	b980      	cbnz	r0, 8015a80 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015a5e:	6923      	ldr	r3, [r4, #16]
 8015a60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a64:	d116      	bne.n	8015a94 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8015a66:	6823      	ldr	r3, [r4, #0]
 8015a68:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8015a6c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8015a6e:	463b      	mov	r3, r7
 8015a70:	4632      	mov	r2, r6
 8015a72:	4913      	ldr	r1, [pc, #76]	@ (8015ac0 <I2C_MasterRequestWrite+0xac>)
 8015a74:	4620      	mov	r0, r4
 8015a76:	f7ff ff62 	bl	801593e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015a7a:	b9f8      	cbnz	r0, 8015abc <I2C_MasterRequestWrite+0xa8>
}
 8015a7c:	b003      	add	sp, #12
 8015a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8015a80:	6823      	ldr	r3, [r4, #0]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8015a88:	d002      	beq.n	8015a90 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8015a8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015a8e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8015a90:	2003      	movs	r0, #3
 8015a92:	e7f3      	b.n	8015a7c <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8015a94:	11eb      	asrs	r3, r5, #7
 8015a96:	6822      	ldr	r2, [r4, #0]
 8015a98:	f003 0306 	and.w	r3, r3, #6
 8015a9c:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8015aa0:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8015aa2:	463b      	mov	r3, r7
 8015aa4:	4632      	mov	r2, r6
 8015aa6:	4907      	ldr	r1, [pc, #28]	@ (8015ac4 <I2C_MasterRequestWrite+0xb0>)
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	f7ff ff48 	bl	801593e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015aae:	b918      	cbnz	r0, 8015ab8 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8015ab0:	6823      	ldr	r3, [r4, #0]
 8015ab2:	b2ed      	uxtb	r5, r5
 8015ab4:	611d      	str	r5, [r3, #16]
 8015ab6:	e7da      	b.n	8015a6e <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8015ab8:	2001      	movs	r0, #1
 8015aba:	e7df      	b.n	8015a7c <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8015abc:	2001      	movs	r0, #1
 8015abe:	e7dd      	b.n	8015a7c <I2C_MasterRequestWrite+0x68>
 8015ac0:	00010002 	.word	0x00010002
 8015ac4:	00010008 	.word	0x00010008

08015ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8015ac8:	b570      	push	{r4, r5, r6, lr}
 8015aca:	4604      	mov	r4, r0
 8015acc:	460d      	mov	r5, r1
 8015ace:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8015ad0:	6823      	ldr	r3, [r4, #0]
 8015ad2:	695b      	ldr	r3, [r3, #20]
 8015ad4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015ad8:	d121      	bne.n	8015b1e <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8015ada:	4620      	mov	r0, r4
 8015adc:	f7ff fec1 	bl	8015862 <I2C_IsAcknowledgeFailed>
 8015ae0:	b9f8      	cbnz	r0, 8015b22 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8015ae2:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8015ae6:	d0f3      	beq.n	8015ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015ae8:	f7ff fcaa 	bl	8015440 <HAL_GetTick>
 8015aec:	1b80      	subs	r0, r0, r6
 8015aee:	42a8      	cmp	r0, r5
 8015af0:	d801      	bhi.n	8015af6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8015af2:	2d00      	cmp	r5, #0
 8015af4:	d1ec      	bne.n	8015ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8015af6:	6823      	ldr	r3, [r4, #0]
 8015af8:	695b      	ldr	r3, [r3, #20]
 8015afa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015afe:	d1e7      	bne.n	8015ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8015b00:	2300      	movs	r3, #0
 8015b02:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8015b04:	2220      	movs	r2, #32
 8015b06:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8015b0a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8015b0e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8015b10:	f042 0220 	orr.w	r2, r2, #32
 8015b14:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8015b16:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8015b1a:	2001      	movs	r0, #1
 8015b1c:	e000      	b.n	8015b20 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8015b1e:	2000      	movs	r0, #0
}
 8015b20:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8015b22:	2001      	movs	r0, #1
 8015b24:	e7fc      	b.n	8015b20 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08015b26 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8015b26:	b570      	push	{r4, r5, r6, lr}
 8015b28:	4604      	mov	r4, r0
 8015b2a:	460d      	mov	r5, r1
 8015b2c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8015b2e:	6823      	ldr	r3, [r4, #0]
 8015b30:	695b      	ldr	r3, [r3, #20]
 8015b32:	f013 0f04 	tst.w	r3, #4
 8015b36:	d121      	bne.n	8015b7c <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8015b38:	4620      	mov	r0, r4
 8015b3a:	f7ff fe92 	bl	8015862 <I2C_IsAcknowledgeFailed>
 8015b3e:	b9f8      	cbnz	r0, 8015b80 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8015b40:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8015b44:	d0f3      	beq.n	8015b2e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015b46:	f7ff fc7b 	bl	8015440 <HAL_GetTick>
 8015b4a:	1b80      	subs	r0, r0, r6
 8015b4c:	42a8      	cmp	r0, r5
 8015b4e:	d801      	bhi.n	8015b54 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8015b50:	2d00      	cmp	r5, #0
 8015b52:	d1ec      	bne.n	8015b2e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8015b54:	6823      	ldr	r3, [r4, #0]
 8015b56:	695b      	ldr	r3, [r3, #20]
 8015b58:	f013 0f04 	tst.w	r3, #4
 8015b5c:	d1e7      	bne.n	8015b2e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8015b5e:	2300      	movs	r3, #0
 8015b60:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8015b62:	2220      	movs	r2, #32
 8015b64:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8015b68:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8015b6c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8015b6e:	f042 0220 	orr.w	r2, r2, #32
 8015b72:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8015b74:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8015b78:	2001      	movs	r0, #1
 8015b7a:	e000      	b.n	8015b7e <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8015b7c:	2000      	movs	r0, #0
}
 8015b7e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8015b80:	2001      	movs	r0, #1
 8015b82:	e7fc      	b.n	8015b7e <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08015b84 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8015b84:	2800      	cmp	r0, #0
 8015b86:	f000 80cc 	beq.w	8015d22 <HAL_I2C_Init+0x19e>
{
 8015b8a:	b570      	push	{r4, r5, r6, lr}
 8015b8c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015b8e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d077      	beq.n	8015c86 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8015b96:	2324      	movs	r3, #36	@ 0x24
 8015b98:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8015b9c:	6822      	ldr	r2, [r4, #0]
 8015b9e:	6813      	ldr	r3, [r2, #0]
 8015ba0:	f023 0301 	bic.w	r3, r3, #1
 8015ba4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8015ba6:	6822      	ldr	r2, [r4, #0]
 8015ba8:	6813      	ldr	r3, [r2, #0]
 8015baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015bae:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8015bb0:	6822      	ldr	r2, [r4, #0]
 8015bb2:	6813      	ldr	r3, [r2, #0]
 8015bb4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8015bb8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8015bba:	f000 fd81 	bl	80166c0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8015bbe:	6862      	ldr	r2, [r4, #4]
 8015bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8015d2c <HAL_I2C_Init+0x1a8>)
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	d864      	bhi.n	8015c90 <HAL_I2C_Init+0x10c>
 8015bc6:	4b5a      	ldr	r3, [pc, #360]	@ (8015d30 <HAL_I2C_Init+0x1ac>)
 8015bc8:	4298      	cmp	r0, r3
 8015bca:	bf8c      	ite	hi
 8015bcc:	2300      	movhi	r3, #0
 8015bce:	2301      	movls	r3, #1
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f040 80a8 	bne.w	8015d26 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8015bd6:	4957      	ldr	r1, [pc, #348]	@ (8015d34 <HAL_I2C_Init+0x1b0>)
 8015bd8:	fba1 3100 	umull	r3, r1, r1, r0
 8015bdc:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8015bde:	6825      	ldr	r5, [r4, #0]
 8015be0:	686a      	ldr	r2, [r5, #4]
 8015be2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8015be6:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8015bea:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8015bec:	6821      	ldr	r1, [r4, #0]
 8015bee:	6a0a      	ldr	r2, [r1, #32]
 8015bf0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8015bf4:	6866      	ldr	r6, [r4, #4]
 8015bf6:	4d4d      	ldr	r5, [pc, #308]	@ (8015d2c <HAL_I2C_Init+0x1a8>)
 8015bf8:	42ae      	cmp	r6, r5
 8015bfa:	d84f      	bhi.n	8015c9c <HAL_I2C_Init+0x118>
 8015bfc:	3301      	adds	r3, #1
 8015bfe:	4313      	orrs	r3, r2
 8015c00:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8015c02:	6821      	ldr	r1, [r4, #0]
 8015c04:	69ca      	ldr	r2, [r1, #28]
 8015c06:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8015c0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8015c0e:	6865      	ldr	r5, [r4, #4]
 8015c10:	4b46      	ldr	r3, [pc, #280]	@ (8015d2c <HAL_I2C_Init+0x1a8>)
 8015c12:	429d      	cmp	r5, r3
 8015c14:	d84c      	bhi.n	8015cb0 <HAL_I2C_Init+0x12c>
 8015c16:	1e43      	subs	r3, r0, #1
 8015c18:	006d      	lsls	r5, r5, #1
 8015c1a:	fbb3 f3f5 	udiv	r3, r3, r5
 8015c1e:	3301      	adds	r3, #1
 8015c20:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8015c24:	4203      	tst	r3, r0
 8015c26:	d078      	beq.n	8015d1a <HAL_I2C_Init+0x196>
 8015c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015c2c:	431a      	orrs	r2, r3
 8015c2e:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8015c30:	6821      	ldr	r1, [r4, #0]
 8015c32:	680b      	ldr	r3, [r1, #0]
 8015c34:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015c38:	69e2      	ldr	r2, [r4, #28]
 8015c3a:	6a20      	ldr	r0, [r4, #32]
 8015c3c:	4302      	orrs	r2, r0
 8015c3e:	4313      	orrs	r3, r2
 8015c40:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8015c42:	6821      	ldr	r1, [r4, #0]
 8015c44:	688b      	ldr	r3, [r1, #8]
 8015c46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8015c4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8015c4e:	6922      	ldr	r2, [r4, #16]
 8015c50:	68e0      	ldr	r0, [r4, #12]
 8015c52:	4302      	orrs	r2, r0
 8015c54:	4313      	orrs	r3, r2
 8015c56:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8015c58:	6821      	ldr	r1, [r4, #0]
 8015c5a:	68cb      	ldr	r3, [r1, #12]
 8015c5c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8015c60:	6962      	ldr	r2, [r4, #20]
 8015c62:	69a0      	ldr	r0, [r4, #24]
 8015c64:	4302      	orrs	r2, r0
 8015c66:	4313      	orrs	r3, r2
 8015c68:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8015c6a:	6822      	ldr	r2, [r4, #0]
 8015c6c:	6813      	ldr	r3, [r2, #0]
 8015c6e:	f043 0301 	orr.w	r3, r3, #1
 8015c72:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015c74:	2000      	movs	r0, #0
 8015c76:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8015c78:	2320      	movs	r3, #32
 8015c7a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8015c7e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015c80:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8015c84:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8015c86:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8015c8a:	f7fc f817 	bl	8011cbc <HAL_I2C_MspInit>
 8015c8e:	e782      	b.n	8015b96 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8015c90:	4b29      	ldr	r3, [pc, #164]	@ (8015d38 <HAL_I2C_Init+0x1b4>)
 8015c92:	4298      	cmp	r0, r3
 8015c94:	bf8c      	ite	hi
 8015c96:	2300      	movhi	r3, #0
 8015c98:	2301      	movls	r3, #1
 8015c9a:	e799      	b.n	8015bd0 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8015c9c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8015ca0:	fb05 f303 	mul.w	r3, r5, r3
 8015ca4:	4d25      	ldr	r5, [pc, #148]	@ (8015d3c <HAL_I2C_Init+0x1b8>)
 8015ca6:	fba5 5303 	umull	r5, r3, r5, r3
 8015caa:	099b      	lsrs	r3, r3, #6
 8015cac:	3301      	adds	r3, #1
 8015cae:	e7a6      	b.n	8015bfe <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8015cb0:	68a6      	ldr	r6, [r4, #8]
 8015cb2:	b9be      	cbnz	r6, 8015ce4 <HAL_I2C_Init+0x160>
 8015cb4:	1e43      	subs	r3, r0, #1
 8015cb6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8015cba:	fbb3 f3fc 	udiv	r3, r3, ip
 8015cbe:	3301      	adds	r3, #1
 8015cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015cc4:	fab3 f383 	clz	r3, r3
 8015cc8:	095b      	lsrs	r3, r3, #5
 8015cca:	bb43      	cbnz	r3, 8015d1e <HAL_I2C_Init+0x19a>
 8015ccc:	b9c6      	cbnz	r6, 8015d00 <HAL_I2C_Init+0x17c>
 8015cce:	1e43      	subs	r3, r0, #1
 8015cd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015cd4:	fbb3 f3f5 	udiv	r3, r3, r5
 8015cd8:	3301      	adds	r3, #1
 8015cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015ce2:	e7a3      	b.n	8015c2c <HAL_I2C_Init+0xa8>
 8015ce4:	1e43      	subs	r3, r0, #1
 8015ce6:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8015cea:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8015cee:	fbb3 f3fc 	udiv	r3, r3, ip
 8015cf2:	3301      	adds	r3, #1
 8015cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015cf8:	fab3 f383 	clz	r3, r3
 8015cfc:	095b      	lsrs	r3, r3, #5
 8015cfe:	e7e4      	b.n	8015cca <HAL_I2C_Init+0x146>
 8015d00:	1e43      	subs	r3, r0, #1
 8015d02:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8015d06:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8015d0a:	fbb3 f3f5 	udiv	r3, r3, r5
 8015d0e:	3301      	adds	r3, #1
 8015d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015d14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8015d18:	e788      	b.n	8015c2c <HAL_I2C_Init+0xa8>
 8015d1a:	2304      	movs	r3, #4
 8015d1c:	e786      	b.n	8015c2c <HAL_I2C_Init+0xa8>
 8015d1e:	2301      	movs	r3, #1
 8015d20:	e784      	b.n	8015c2c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8015d22:	2001      	movs	r0, #1
}
 8015d24:	4770      	bx	lr
    return HAL_ERROR;
 8015d26:	2001      	movs	r0, #1
 8015d28:	e7ac      	b.n	8015c84 <HAL_I2C_Init+0x100>
 8015d2a:	bf00      	nop
 8015d2c:	000186a0 	.word	0x000186a0
 8015d30:	001e847f 	.word	0x001e847f
 8015d34:	431bde83 	.word	0x431bde83
 8015d38:	003d08ff 	.word	0x003d08ff
 8015d3c:	10624dd3 	.word	0x10624dd3

08015d40 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8015d40:	b1a8      	cbz	r0, 8015d6e <HAL_I2C_DeInit+0x2e>
{
 8015d42:	b510      	push	{r4, lr}
 8015d44:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8015d46:	2324      	movs	r3, #36	@ 0x24
 8015d48:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8015d4c:	6802      	ldr	r2, [r0, #0]
 8015d4e:	6813      	ldr	r3, [r2, #0]
 8015d50:	f023 0301 	bic.w	r3, r3, #1
 8015d54:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8015d56:	f7fb ffeb 	bl	8011d30 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8015d5a:	2000      	movs	r0, #0
 8015d5c:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8015d5e:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8015d62:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8015d64:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8015d68:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8015d6c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8015d6e:	2001      	movs	r0, #1
}
 8015d70:	4770      	bx	lr
	...

08015d74 <HAL_I2C_Master_Transmit>:
{
 8015d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d78:	b085      	sub	sp, #20
 8015d7a:	4604      	mov	r4, r0
 8015d7c:	460f      	mov	r7, r1
 8015d7e:	4691      	mov	r9, r2
 8015d80:	4698      	mov	r8, r3
 8015d82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8015d84:	f7ff fb5c 	bl	8015440 <HAL_GetTick>
 8015d88:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8015d8a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8015d8e:	b2c0      	uxtb	r0, r0
 8015d90:	2820      	cmp	r0, #32
 8015d92:	d004      	beq.n	8015d9e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8015d94:	2702      	movs	r7, #2
}
 8015d96:	4638      	mov	r0, r7
 8015d98:	b005      	add	sp, #20
 8015d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8015d9e:	9500      	str	r5, [sp, #0]
 8015da0:	2319      	movs	r3, #25
 8015da2:	2201      	movs	r2, #1
 8015da4:	494f      	ldr	r1, [pc, #316]	@ (8015ee4 <HAL_I2C_Master_Transmit+0x170>)
 8015da6:	4620      	mov	r0, r4
 8015da8:	f7ff fd74 	bl	8015894 <I2C_WaitOnFlagUntilTimeout>
 8015dac:	2800      	cmp	r0, #0
 8015dae:	f040 8092 	bne.w	8015ed6 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8015db2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8015db6:	2b01      	cmp	r3, #1
 8015db8:	f000 808f 	beq.w	8015eda <HAL_I2C_Master_Transmit+0x166>
 8015dbc:	2301      	movs	r3, #1
 8015dbe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8015dc2:	6823      	ldr	r3, [r4, #0]
 8015dc4:	681a      	ldr	r2, [r3, #0]
 8015dc6:	f012 0f01 	tst.w	r2, #1
 8015dca:	d103      	bne.n	8015dd4 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8015dcc:	681a      	ldr	r2, [r3, #0]
 8015dce:	f042 0201 	orr.w	r2, r2, #1
 8015dd2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8015dd4:	6822      	ldr	r2, [r4, #0]
 8015dd6:	6813      	ldr	r3, [r2, #0]
 8015dd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015ddc:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015dde:	2321      	movs	r3, #33	@ 0x21
 8015de0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8015de4:	2310      	movs	r3, #16
 8015de6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015dea:	2300      	movs	r3, #0
 8015dec:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8015dee:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015df2:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8015df6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8015df8:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8015ee8 <HAL_I2C_Master_Transmit+0x174>)
 8015dfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8015dfe:	462b      	mov	r3, r5
 8015e00:	4632      	mov	r2, r6
 8015e02:	4639      	mov	r1, r7
 8015e04:	4620      	mov	r0, r4
 8015e06:	f7ff fe05 	bl	8015a14 <I2C_MasterRequestWrite>
 8015e0a:	4607      	mov	r7, r0
 8015e0c:	2800      	cmp	r0, #0
 8015e0e:	d166      	bne.n	8015ede <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015e10:	2300      	movs	r3, #0
 8015e12:	9303      	str	r3, [sp, #12]
 8015e14:	6823      	ldr	r3, [r4, #0]
 8015e16:	695a      	ldr	r2, [r3, #20]
 8015e18:	9203      	str	r2, [sp, #12]
 8015e1a:	699b      	ldr	r3, [r3, #24]
 8015e1c:	9303      	str	r3, [sp, #12]
 8015e1e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8015e20:	e011      	b.n	8015e46 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8015e22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015e24:	2b04      	cmp	r3, #4
 8015e26:	d001      	beq.n	8015e2c <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8015e28:	2701      	movs	r7, #1
 8015e2a:	e7b4      	b.n	8015d96 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015e2c:	6822      	ldr	r2, [r4, #0]
 8015e2e:	6813      	ldr	r3, [r2, #0]
 8015e30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8015e34:	6013      	str	r3, [r2, #0]
 8015e36:	e7f7      	b.n	8015e28 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015e38:	462a      	mov	r2, r5
 8015e3a:	4631      	mov	r1, r6
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	f7ff fe72 	bl	8015b26 <I2C_WaitOnBTFFlagUntilTimeout>
 8015e42:	2800      	cmp	r0, #0
 8015e44:	d12e      	bne.n	8015ea4 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8015e46:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d036      	beq.n	8015eba <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015e4c:	462a      	mov	r2, r5
 8015e4e:	4631      	mov	r1, r6
 8015e50:	4620      	mov	r0, r4
 8015e52:	f7ff fe39 	bl	8015ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8015e56:	2800      	cmp	r0, #0
 8015e58:	d1e3      	bne.n	8015e22 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8015e5a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015e5c:	6823      	ldr	r3, [r4, #0]
 8015e5e:	7812      	ldrb	r2, [r2, #0]
 8015e60:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8015e62:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015e64:	1c43      	adds	r3, r0, #1
 8015e66:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8015e68:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8015e6a:	b289      	uxth	r1, r1
 8015e6c:	3901      	subs	r1, #1
 8015e6e:	b289      	uxth	r1, r1
 8015e70:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8015e72:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8015e74:	3b01      	subs	r3, #1
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8015e7a:	6822      	ldr	r2, [r4, #0]
 8015e7c:	6951      	ldr	r1, [r2, #20]
 8015e7e:	f011 0f04 	tst.w	r1, #4
 8015e82:	d0d9      	beq.n	8015e38 <HAL_I2C_Master_Transmit+0xc4>
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d0d7      	beq.n	8015e38 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8015e88:	7843      	ldrb	r3, [r0, #1]
 8015e8a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8015e8c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015e8e:	3301      	adds	r3, #1
 8015e90:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8015e92:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8015e94:	b29b      	uxth	r3, r3
 8015e96:	3b01      	subs	r3, #1
 8015e98:	b29b      	uxth	r3, r3
 8015e9a:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8015e9c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8015e9e:	3b01      	subs	r3, #1
 8015ea0:	8523      	strh	r3, [r4, #40]	@ 0x28
 8015ea2:	e7c9      	b.n	8015e38 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8015ea4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015ea6:	2b04      	cmp	r3, #4
 8015ea8:	d001      	beq.n	8015eae <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8015eaa:	2701      	movs	r7, #1
 8015eac:	e773      	b.n	8015d96 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015eae:	6822      	ldr	r2, [r4, #0]
 8015eb0:	6813      	ldr	r3, [r2, #0]
 8015eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8015eb6:	6013      	str	r3, [r2, #0]
 8015eb8:	e7f7      	b.n	8015eaa <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015eba:	6822      	ldr	r2, [r4, #0]
 8015ebc:	6813      	ldr	r3, [r2, #0]
 8015ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8015ec2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8015ec4:	2320      	movs	r3, #32
 8015ec6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8015ed0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8015ed4:	e75f      	b.n	8015d96 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8015ed6:	2702      	movs	r7, #2
 8015ed8:	e75d      	b.n	8015d96 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8015eda:	2702      	movs	r7, #2
 8015edc:	e75b      	b.n	8015d96 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8015ede:	2701      	movs	r7, #1
 8015ee0:	e759      	b.n	8015d96 <HAL_I2C_Master_Transmit+0x22>
 8015ee2:	bf00      	nop
 8015ee4:	00100002 	.word	0x00100002
 8015ee8:	ffff0000 	.word	0xffff0000

08015eec <HAL_I2C_IsDeviceReady>:
{
 8015eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ef0:	b085      	sub	sp, #20
 8015ef2:	4604      	mov	r4, r0
 8015ef4:	4688      	mov	r8, r1
 8015ef6:	4691      	mov	r9, r2
 8015ef8:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8015efa:	f7ff faa1 	bl	8015440 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8015efe:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8015f02:	b2db      	uxtb	r3, r3
 8015f04:	2b20      	cmp	r3, #32
 8015f06:	d003      	beq.n	8015f10 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8015f08:	2002      	movs	r0, #2
}
 8015f0a:	b005      	add	sp, #20
 8015f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f10:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8015f12:	9000      	str	r0, [sp, #0]
 8015f14:	2319      	movs	r3, #25
 8015f16:	2201      	movs	r2, #1
 8015f18:	4957      	ldr	r1, [pc, #348]	@ (8016078 <HAL_I2C_IsDeviceReady+0x18c>)
 8015f1a:	4620      	mov	r0, r4
 8015f1c:	f7ff fcba 	bl	8015894 <I2C_WaitOnFlagUntilTimeout>
 8015f20:	2800      	cmp	r0, #0
 8015f22:	f040 80a0 	bne.w	8016066 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8015f26:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8015f2a:	2b01      	cmp	r3, #1
 8015f2c:	f000 809d 	beq.w	801606a <HAL_I2C_IsDeviceReady+0x17e>
 8015f30:	2301      	movs	r3, #1
 8015f32:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8015f36:	6823      	ldr	r3, [r4, #0]
 8015f38:	681a      	ldr	r2, [r3, #0]
 8015f3a:	f012 0f01 	tst.w	r2, #1
 8015f3e:	d103      	bne.n	8015f48 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8015f40:	681a      	ldr	r2, [r3, #0]
 8015f42:	f042 0201 	orr.w	r2, r2, #1
 8015f46:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8015f48:	6822      	ldr	r2, [r4, #0]
 8015f4a:	6813      	ldr	r3, [r2, #0]
 8015f4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015f50:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8015f52:	2324      	movs	r3, #36	@ 0x24
 8015f54:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015f58:	2700      	movs	r7, #0
 8015f5a:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015f5c:	4b47      	ldr	r3, [pc, #284]	@ (801607c <HAL_I2C_IsDeviceReady+0x190>)
 8015f5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015f60:	e040      	b.n	8015fe4 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8015f62:	6823      	ldr	r3, [r4, #0]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8015f6a:	d002      	beq.n	8015f72 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8015f6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015f70:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8015f72:	2003      	movs	r0, #3
 8015f74:	e7c9      	b.n	8015f0a <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8015f76:	23a0      	movs	r3, #160	@ 0xa0
 8015f78:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8015f7c:	6822      	ldr	r2, [r4, #0]
 8015f7e:	6953      	ldr	r3, [r2, #20]
 8015f80:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8015f84:	6952      	ldr	r2, [r2, #20]
 8015f86:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8015f8a:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8015f8e:	fa5f fc8c 	uxtb.w	ip, ip
 8015f92:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8015f96:	d009      	beq.n	8015fac <HAL_I2C_IsDeviceReady+0xc0>
 8015f98:	b943      	cbnz	r3, 8015fac <HAL_I2C_IsDeviceReady+0xc0>
 8015f9a:	b93a      	cbnz	r2, 8015fac <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015f9c:	f7ff fa50 	bl	8015440 <HAL_GetTick>
 8015fa0:	1b80      	subs	r0, r0, r6
 8015fa2:	42a8      	cmp	r0, r5
 8015fa4:	d8e7      	bhi.n	8015f76 <HAL_I2C_IsDeviceReady+0x8a>
 8015fa6:	2d00      	cmp	r5, #0
 8015fa8:	d1e8      	bne.n	8015f7c <HAL_I2C_IsDeviceReady+0x90>
 8015faa:	e7e4      	b.n	8015f76 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8015fac:	2320      	movs	r3, #32
 8015fae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8015fb2:	6823      	ldr	r3, [r4, #0]
 8015fb4:	695a      	ldr	r2, [r3, #20]
 8015fb6:	f012 0f02 	tst.w	r2, #2
 8015fba:	d131      	bne.n	8016020 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015fbc:	681a      	ldr	r2, [r3, #0]
 8015fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015fc2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015fc4:	6823      	ldr	r3, [r4, #0]
 8015fc6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8015fca:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8015fcc:	9600      	str	r6, [sp, #0]
 8015fce:	2319      	movs	r3, #25
 8015fd0:	2201      	movs	r2, #1
 8015fd2:	4929      	ldr	r1, [pc, #164]	@ (8016078 <HAL_I2C_IsDeviceReady+0x18c>)
 8015fd4:	4620      	mov	r0, r4
 8015fd6:	f7ff fc5d 	bl	8015894 <I2C_WaitOnFlagUntilTimeout>
 8015fda:	2800      	cmp	r0, #0
 8015fdc:	d149      	bne.n	8016072 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8015fde:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8015fe0:	454f      	cmp	r7, r9
 8015fe2:	d238      	bcs.n	8016056 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015fe4:	6822      	ldr	r2, [r4, #0]
 8015fe6:	6813      	ldr	r3, [r2, #0]
 8015fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015fec:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8015fee:	9600      	str	r6, [sp, #0]
 8015ff0:	462b      	mov	r3, r5
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8015ff8:	4620      	mov	r0, r4
 8015ffa:	f7ff fc4b 	bl	8015894 <I2C_WaitOnFlagUntilTimeout>
 8015ffe:	2800      	cmp	r0, #0
 8016000:	d1af      	bne.n	8015f62 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016002:	6823      	ldr	r3, [r4, #0]
 8016004:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8016008:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 801600a:	f7ff fa19 	bl	8015440 <HAL_GetTick>
 801600e:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016010:	6822      	ldr	r2, [r4, #0]
 8016012:	6953      	ldr	r3, [r2, #20]
 8016014:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016018:	6952      	ldr	r2, [r2, #20]
 801601a:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801601e:	e7b4      	b.n	8015f8a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016020:	681a      	ldr	r2, [r3, #0]
 8016022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016026:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016028:	2300      	movs	r3, #0
 801602a:	9303      	str	r3, [sp, #12]
 801602c:	6823      	ldr	r3, [r4, #0]
 801602e:	695a      	ldr	r2, [r3, #20]
 8016030:	9203      	str	r2, [sp, #12]
 8016032:	699b      	ldr	r3, [r3, #24]
 8016034:	9303      	str	r3, [sp, #12]
 8016036:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016038:	9600      	str	r6, [sp, #0]
 801603a:	2319      	movs	r3, #25
 801603c:	2201      	movs	r2, #1
 801603e:	490e      	ldr	r1, [pc, #56]	@ (8016078 <HAL_I2C_IsDeviceReady+0x18c>)
 8016040:	4620      	mov	r0, r4
 8016042:	f7ff fc27 	bl	8015894 <I2C_WaitOnFlagUntilTimeout>
 8016046:	b990      	cbnz	r0, 801606e <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8016048:	2320      	movs	r3, #32
 801604a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 801604e:	2300      	movs	r3, #0
 8016050:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8016054:	e759      	b.n	8015f0a <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8016056:	2320      	movs	r3, #32
 8016058:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 801605c:	2300      	movs	r3, #0
 801605e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8016062:	2001      	movs	r0, #1
 8016064:	e751      	b.n	8015f0a <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8016066:	2002      	movs	r0, #2
 8016068:	e74f      	b.n	8015f0a <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 801606a:	2002      	movs	r0, #2
 801606c:	e74d      	b.n	8015f0a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 801606e:	2001      	movs	r0, #1
 8016070:	e74b      	b.n	8015f0a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8016072:	2001      	movs	r0, #1
 8016074:	e749      	b.n	8015f0a <HAL_I2C_IsDeviceReady+0x1e>
 8016076:	bf00      	nop
 8016078:	00100002 	.word	0x00100002
 801607c:	ffff0000 	.word	0xffff0000

08016080 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016080:	2800      	cmp	r0, #0
 8016082:	f000 81e0 	beq.w	8016446 <HAL_RCC_OscConfig+0x3c6>
{
 8016086:	b570      	push	{r4, r5, r6, lr}
 8016088:	b082      	sub	sp, #8
 801608a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801608c:	6803      	ldr	r3, [r0, #0]
 801608e:	f013 0f01 	tst.w	r3, #1
 8016092:	d03b      	beq.n	801610c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016094:	4b9f      	ldr	r3, [pc, #636]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 8016096:	689b      	ldr	r3, [r3, #8]
 8016098:	f003 030c 	and.w	r3, r3, #12
 801609c:	2b04      	cmp	r3, #4
 801609e:	d02c      	beq.n	80160fa <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80160a0:	4b9c      	ldr	r3, [pc, #624]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 80160a2:	689b      	ldr	r3, [r3, #8]
 80160a4:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80160a8:	2b08      	cmp	r3, #8
 80160aa:	d021      	beq.n	80160f0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80160ac:	6863      	ldr	r3, [r4, #4]
 80160ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80160b2:	d04f      	beq.n	8016154 <HAL_RCC_OscConfig+0xd4>
 80160b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80160b8:	d052      	beq.n	8016160 <HAL_RCC_OscConfig+0xe0>
 80160ba:	4b96      	ldr	r3, [pc, #600]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 80160bc:	681a      	ldr	r2, [r3, #0]
 80160be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80160c2:	601a      	str	r2, [r3, #0]
 80160c4:	681a      	ldr	r2, [r3, #0]
 80160c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80160ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80160cc:	6863      	ldr	r3, [r4, #4]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d050      	beq.n	8016174 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80160d2:	f7ff f9b5 	bl	8015440 <HAL_GetTick>
 80160d6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80160d8:	4b8e      	ldr	r3, [pc, #568]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80160e0:	d114      	bne.n	801610c <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80160e2:	f7ff f9ad 	bl	8015440 <HAL_GetTick>
 80160e6:	1b40      	subs	r0, r0, r5
 80160e8:	2864      	cmp	r0, #100	@ 0x64
 80160ea:	d9f5      	bls.n	80160d8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80160ec:	2003      	movs	r0, #3
 80160ee:	e1b1      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80160f0:	4b88      	ldr	r3, [pc, #544]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 80160f2:	685b      	ldr	r3, [r3, #4]
 80160f4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80160f8:	d0d8      	beq.n	80160ac <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80160fa:	4b86      	ldr	r3, [pc, #536]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016102:	d003      	beq.n	801610c <HAL_RCC_OscConfig+0x8c>
 8016104:	6863      	ldr	r3, [r4, #4]
 8016106:	2b00      	cmp	r3, #0
 8016108:	f000 819f 	beq.w	801644a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801610c:	6823      	ldr	r3, [r4, #0]
 801610e:	f013 0f02 	tst.w	r3, #2
 8016112:	d054      	beq.n	80161be <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8016114:	4b7f      	ldr	r3, [pc, #508]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 8016116:	689b      	ldr	r3, [r3, #8]
 8016118:	f013 0f0c 	tst.w	r3, #12
 801611c:	d03e      	beq.n	801619c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801611e:	4b7d      	ldr	r3, [pc, #500]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 8016120:	689b      	ldr	r3, [r3, #8]
 8016122:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8016126:	2b08      	cmp	r3, #8
 8016128:	d033      	beq.n	8016192 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801612a:	68e3      	ldr	r3, [r4, #12]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d068      	beq.n	8016202 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016130:	4b79      	ldr	r3, [pc, #484]	@ (8016318 <HAL_RCC_OscConfig+0x298>)
 8016132:	2201      	movs	r2, #1
 8016134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016136:	f7ff f983 	bl	8015440 <HAL_GetTick>
 801613a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801613c:	4b75      	ldr	r3, [pc, #468]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	f013 0f02 	tst.w	r3, #2
 8016144:	d154      	bne.n	80161f0 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016146:	f7ff f97b 	bl	8015440 <HAL_GetTick>
 801614a:	1b40      	subs	r0, r0, r5
 801614c:	2802      	cmp	r0, #2
 801614e:	d9f5      	bls.n	801613c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8016150:	2003      	movs	r0, #3
 8016152:	e17f      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016154:	4a6f      	ldr	r2, [pc, #444]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 8016156:	6813      	ldr	r3, [r2, #0]
 8016158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801615c:	6013      	str	r3, [r2, #0]
 801615e:	e7b5      	b.n	80160cc <HAL_RCC_OscConfig+0x4c>
 8016160:	4b6c      	ldr	r3, [pc, #432]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 8016162:	681a      	ldr	r2, [r3, #0]
 8016164:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8016168:	601a      	str	r2, [r3, #0]
 801616a:	681a      	ldr	r2, [r3, #0]
 801616c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8016170:	601a      	str	r2, [r3, #0]
 8016172:	e7ab      	b.n	80160cc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8016174:	f7ff f964 	bl	8015440 <HAL_GetTick>
 8016178:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801617a:	4b66      	ldr	r3, [pc, #408]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016182:	d0c3      	beq.n	801610c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016184:	f7ff f95c 	bl	8015440 <HAL_GetTick>
 8016188:	1b40      	subs	r0, r0, r5
 801618a:	2864      	cmp	r0, #100	@ 0x64
 801618c:	d9f5      	bls.n	801617a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 801618e:	2003      	movs	r0, #3
 8016190:	e160      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016192:	4b60      	ldr	r3, [pc, #384]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 8016194:	685b      	ldr	r3, [r3, #4]
 8016196:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 801619a:	d1c6      	bne.n	801612a <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801619c:	4b5d      	ldr	r3, [pc, #372]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	f013 0f02 	tst.w	r3, #2
 80161a4:	d003      	beq.n	80161ae <HAL_RCC_OscConfig+0x12e>
 80161a6:	68e3      	ldr	r3, [r4, #12]
 80161a8:	2b01      	cmp	r3, #1
 80161aa:	f040 8150 	bne.w	801644e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80161ae:	4a59      	ldr	r2, [pc, #356]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 80161b0:	6813      	ldr	r3, [r2, #0]
 80161b2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80161b6:	6921      	ldr	r1, [r4, #16]
 80161b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80161bc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80161be:	6823      	ldr	r3, [r4, #0]
 80161c0:	f013 0f08 	tst.w	r3, #8
 80161c4:	d042      	beq.n	801624c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80161c6:	6963      	ldr	r3, [r4, #20]
 80161c8:	b36b      	cbz	r3, 8016226 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80161ca:	4b53      	ldr	r3, [pc, #332]	@ (8016318 <HAL_RCC_OscConfig+0x298>)
 80161cc:	2201      	movs	r2, #1
 80161ce:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80161d2:	f7ff f935 	bl	8015440 <HAL_GetTick>
 80161d6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80161d8:	4b4e      	ldr	r3, [pc, #312]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 80161da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161dc:	f013 0f02 	tst.w	r3, #2
 80161e0:	d134      	bne.n	801624c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80161e2:	f7ff f92d 	bl	8015440 <HAL_GetTick>
 80161e6:	1b40      	subs	r0, r0, r5
 80161e8:	2802      	cmp	r0, #2
 80161ea:	d9f5      	bls.n	80161d8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80161ec:	2003      	movs	r0, #3
 80161ee:	e131      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80161f0:	4a48      	ldr	r2, [pc, #288]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 80161f2:	6813      	ldr	r3, [r2, #0]
 80161f4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80161f8:	6921      	ldr	r1, [r4, #16]
 80161fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80161fe:	6013      	str	r3, [r2, #0]
 8016200:	e7dd      	b.n	80161be <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8016202:	4b45      	ldr	r3, [pc, #276]	@ (8016318 <HAL_RCC_OscConfig+0x298>)
 8016204:	2200      	movs	r2, #0
 8016206:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8016208:	f7ff f91a 	bl	8015440 <HAL_GetTick>
 801620c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801620e:	4b41      	ldr	r3, [pc, #260]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	f013 0f02 	tst.w	r3, #2
 8016216:	d0d2      	beq.n	80161be <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016218:	f7ff f912 	bl	8015440 <HAL_GetTick>
 801621c:	1b40      	subs	r0, r0, r5
 801621e:	2802      	cmp	r0, #2
 8016220:	d9f5      	bls.n	801620e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8016222:	2003      	movs	r0, #3
 8016224:	e116      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016226:	4b3c      	ldr	r3, [pc, #240]	@ (8016318 <HAL_RCC_OscConfig+0x298>)
 8016228:	2200      	movs	r2, #0
 801622a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801622e:	f7ff f907 	bl	8015440 <HAL_GetTick>
 8016232:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8016234:	4b37      	ldr	r3, [pc, #220]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 8016236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016238:	f013 0f02 	tst.w	r3, #2
 801623c:	d006      	beq.n	801624c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801623e:	f7ff f8ff 	bl	8015440 <HAL_GetTick>
 8016242:	1b40      	subs	r0, r0, r5
 8016244:	2802      	cmp	r0, #2
 8016246:	d9f5      	bls.n	8016234 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8016248:	2003      	movs	r0, #3
 801624a:	e103      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801624c:	6823      	ldr	r3, [r4, #0]
 801624e:	f013 0f04 	tst.w	r3, #4
 8016252:	d077      	beq.n	8016344 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016254:	4b2f      	ldr	r3, [pc, #188]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 8016256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016258:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 801625c:	d133      	bne.n	80162c6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801625e:	2300      	movs	r3, #0
 8016260:	9301      	str	r3, [sp, #4]
 8016262:	4b2c      	ldr	r3, [pc, #176]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 8016264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016266:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 801626a:	641a      	str	r2, [r3, #64]	@ 0x40
 801626c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801626e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016272:	9301      	str	r3, [sp, #4]
 8016274:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8016276:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016278:	4b28      	ldr	r3, [pc, #160]	@ (801631c <HAL_RCC_OscConfig+0x29c>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016280:	d023      	beq.n	80162ca <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016282:	68a3      	ldr	r3, [r4, #8]
 8016284:	2b01      	cmp	r3, #1
 8016286:	d034      	beq.n	80162f2 <HAL_RCC_OscConfig+0x272>
 8016288:	2b05      	cmp	r3, #5
 801628a:	d038      	beq.n	80162fe <HAL_RCC_OscConfig+0x27e>
 801628c:	4b21      	ldr	r3, [pc, #132]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 801628e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016290:	f022 0201 	bic.w	r2, r2, #1
 8016294:	671a      	str	r2, [r3, #112]	@ 0x70
 8016296:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016298:	f022 0204 	bic.w	r2, r2, #4
 801629c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801629e:	68a3      	ldr	r3, [r4, #8]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d03d      	beq.n	8016320 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80162a4:	f7ff f8cc 	bl	8015440 <HAL_GetTick>
 80162a8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80162aa:	4b1a      	ldr	r3, [pc, #104]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 80162ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80162ae:	f013 0f02 	tst.w	r3, #2
 80162b2:	d146      	bne.n	8016342 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80162b4:	f7ff f8c4 	bl	8015440 <HAL_GetTick>
 80162b8:	1b80      	subs	r0, r0, r6
 80162ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80162be:	4298      	cmp	r0, r3
 80162c0:	d9f3      	bls.n	80162aa <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80162c2:	2003      	movs	r0, #3
 80162c4:	e0c6      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80162c6:	2500      	movs	r5, #0
 80162c8:	e7d6      	b.n	8016278 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80162ca:	4a14      	ldr	r2, [pc, #80]	@ (801631c <HAL_RCC_OscConfig+0x29c>)
 80162cc:	6813      	ldr	r3, [r2, #0]
 80162ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80162d2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80162d4:	f7ff f8b4 	bl	8015440 <HAL_GetTick>
 80162d8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80162da:	4b10      	ldr	r3, [pc, #64]	@ (801631c <HAL_RCC_OscConfig+0x29c>)
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80162e2:	d1ce      	bne.n	8016282 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80162e4:	f7ff f8ac 	bl	8015440 <HAL_GetTick>
 80162e8:	1b80      	subs	r0, r0, r6
 80162ea:	2802      	cmp	r0, #2
 80162ec:	d9f5      	bls.n	80162da <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80162ee:	2003      	movs	r0, #3
 80162f0:	e0b0      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80162f2:	4a08      	ldr	r2, [pc, #32]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 80162f4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80162f6:	f043 0301 	orr.w	r3, r3, #1
 80162fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80162fc:	e7cf      	b.n	801629e <HAL_RCC_OscConfig+0x21e>
 80162fe:	4b05      	ldr	r3, [pc, #20]	@ (8016314 <HAL_RCC_OscConfig+0x294>)
 8016300:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016302:	f042 0204 	orr.w	r2, r2, #4
 8016306:	671a      	str	r2, [r3, #112]	@ 0x70
 8016308:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801630a:	f042 0201 	orr.w	r2, r2, #1
 801630e:	671a      	str	r2, [r3, #112]	@ 0x70
 8016310:	e7c5      	b.n	801629e <HAL_RCC_OscConfig+0x21e>
 8016312:	bf00      	nop
 8016314:	40023800 	.word	0x40023800
 8016318:	42470000 	.word	0x42470000
 801631c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016320:	f7ff f88e 	bl	8015440 <HAL_GetTick>
 8016324:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8016326:	4b52      	ldr	r3, [pc, #328]	@ (8016470 <HAL_RCC_OscConfig+0x3f0>)
 8016328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801632a:	f013 0f02 	tst.w	r3, #2
 801632e:	d008      	beq.n	8016342 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016330:	f7ff f886 	bl	8015440 <HAL_GetTick>
 8016334:	1b80      	subs	r0, r0, r6
 8016336:	f241 3388 	movw	r3, #5000	@ 0x1388
 801633a:	4298      	cmp	r0, r3
 801633c:	d9f3      	bls.n	8016326 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 801633e:	2003      	movs	r0, #3
 8016340:	e088      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8016342:	b9ed      	cbnz	r5, 8016380 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8016344:	69a3      	ldr	r3, [r4, #24]
 8016346:	2b00      	cmp	r3, #0
 8016348:	f000 8083 	beq.w	8016452 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801634c:	4a48      	ldr	r2, [pc, #288]	@ (8016470 <HAL_RCC_OscConfig+0x3f0>)
 801634e:	6892      	ldr	r2, [r2, #8]
 8016350:	f002 020c 	and.w	r2, r2, #12
 8016354:	2a08      	cmp	r2, #8
 8016356:	d051      	beq.n	80163fc <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8016358:	2b02      	cmp	r3, #2
 801635a:	d017      	beq.n	801638c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801635c:	4b45      	ldr	r3, [pc, #276]	@ (8016474 <HAL_RCC_OscConfig+0x3f4>)
 801635e:	2200      	movs	r2, #0
 8016360:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016362:	f7ff f86d 	bl	8015440 <HAL_GetTick>
 8016366:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016368:	4b41      	ldr	r3, [pc, #260]	@ (8016470 <HAL_RCC_OscConfig+0x3f0>)
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8016370:	d042      	beq.n	80163f8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016372:	f7ff f865 	bl	8015440 <HAL_GetTick>
 8016376:	1b00      	subs	r0, r0, r4
 8016378:	2802      	cmp	r0, #2
 801637a:	d9f5      	bls.n	8016368 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 801637c:	2003      	movs	r0, #3
 801637e:	e069      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8016380:	4a3b      	ldr	r2, [pc, #236]	@ (8016470 <HAL_RCC_OscConfig+0x3f0>)
 8016382:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016388:	6413      	str	r3, [r2, #64]	@ 0x40
 801638a:	e7db      	b.n	8016344 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 801638c:	4b39      	ldr	r3, [pc, #228]	@ (8016474 <HAL_RCC_OscConfig+0x3f4>)
 801638e:	2200      	movs	r2, #0
 8016390:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8016392:	f7ff f855 	bl	8015440 <HAL_GetTick>
 8016396:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016398:	4b35      	ldr	r3, [pc, #212]	@ (8016470 <HAL_RCC_OscConfig+0x3f0>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80163a0:	d006      	beq.n	80163b0 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80163a2:	f7ff f84d 	bl	8015440 <HAL_GetTick>
 80163a6:	1b40      	subs	r0, r0, r5
 80163a8:	2802      	cmp	r0, #2
 80163aa:	d9f5      	bls.n	8016398 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80163ac:	2003      	movs	r0, #3
 80163ae:	e051      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80163b0:	69e3      	ldr	r3, [r4, #28]
 80163b2:	6a22      	ldr	r2, [r4, #32]
 80163b4:	4313      	orrs	r3, r2
 80163b6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80163b8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80163bc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80163be:	0852      	lsrs	r2, r2, #1
 80163c0:	3a01      	subs	r2, #1
 80163c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80163c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80163c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80163cc:	4a28      	ldr	r2, [pc, #160]	@ (8016470 <HAL_RCC_OscConfig+0x3f0>)
 80163ce:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80163d0:	4b28      	ldr	r3, [pc, #160]	@ (8016474 <HAL_RCC_OscConfig+0x3f4>)
 80163d2:	2201      	movs	r2, #1
 80163d4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80163d6:	f7ff f833 	bl	8015440 <HAL_GetTick>
 80163da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80163dc:	4b24      	ldr	r3, [pc, #144]	@ (8016470 <HAL_RCC_OscConfig+0x3f0>)
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80163e4:	d106      	bne.n	80163f4 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80163e6:	f7ff f82b 	bl	8015440 <HAL_GetTick>
 80163ea:	1b00      	subs	r0, r0, r4
 80163ec:	2802      	cmp	r0, #2
 80163ee:	d9f5      	bls.n	80163dc <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80163f0:	2003      	movs	r0, #3
 80163f2:	e02f      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80163f4:	2000      	movs	r0, #0
 80163f6:	e02d      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
 80163f8:	2000      	movs	r0, #0
 80163fa:	e02b      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80163fc:	2b01      	cmp	r3, #1
 80163fe:	d02b      	beq.n	8016458 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8016400:	4b1b      	ldr	r3, [pc, #108]	@ (8016470 <HAL_RCC_OscConfig+0x3f0>)
 8016402:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016404:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8016408:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801640a:	4291      	cmp	r1, r2
 801640c:	d126      	bne.n	801645c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801640e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8016412:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016414:	428a      	cmp	r2, r1
 8016416:	d123      	bne.n	8016460 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8016418:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801641a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 801641e:	401a      	ands	r2, r3
 8016420:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8016424:	d11e      	bne.n	8016464 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8016426:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 801642a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801642c:	0852      	lsrs	r2, r2, #1
 801642e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8016430:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8016434:	d118      	bne.n	8016468 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8016436:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 801643a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801643c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8016440:	d114      	bne.n	801646c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8016442:	2000      	movs	r0, #0
 8016444:	e006      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8016446:	2001      	movs	r0, #1
}
 8016448:	4770      	bx	lr
        return HAL_ERROR;
 801644a:	2001      	movs	r0, #1
 801644c:	e002      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 801644e:	2001      	movs	r0, #1
 8016450:	e000      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8016452:	2000      	movs	r0, #0
}
 8016454:	b002      	add	sp, #8
 8016456:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8016458:	2001      	movs	r0, #1
 801645a:	e7fb      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 801645c:	2001      	movs	r0, #1
 801645e:	e7f9      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
 8016460:	2001      	movs	r0, #1
 8016462:	e7f7      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
 8016464:	2001      	movs	r0, #1
 8016466:	e7f5      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
 8016468:	2001      	movs	r0, #1
 801646a:	e7f3      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
 801646c:	2001      	movs	r0, #1
 801646e:	e7f1      	b.n	8016454 <HAL_RCC_OscConfig+0x3d4>
 8016470:	40023800 	.word	0x40023800
 8016474:	42470000 	.word	0x42470000

08016478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016478:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801647a:	4b33      	ldr	r3, [pc, #204]	@ (8016548 <HAL_RCC_GetSysClockFreq+0xd0>)
 801647c:	689b      	ldr	r3, [r3, #8]
 801647e:	f003 030c 	and.w	r3, r3, #12
 8016482:	2b04      	cmp	r3, #4
 8016484:	d05b      	beq.n	801653e <HAL_RCC_GetSysClockFreq+0xc6>
 8016486:	2b08      	cmp	r3, #8
 8016488:	d15b      	bne.n	8016542 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801648a:	4b2f      	ldr	r3, [pc, #188]	@ (8016548 <HAL_RCC_GetSysClockFreq+0xd0>)
 801648c:	685a      	ldr	r2, [r3, #4]
 801648e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8016492:	685b      	ldr	r3, [r3, #4]
 8016494:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8016498:	d02c      	beq.n	80164f4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801649a:	4b2b      	ldr	r3, [pc, #172]	@ (8016548 <HAL_RCC_GetSysClockFreq+0xd0>)
 801649c:	6858      	ldr	r0, [r3, #4]
 801649e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80164a2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80164a6:	ebbc 0c00 	subs.w	ip, ip, r0
 80164aa:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80164ae:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80164b2:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80164b6:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80164ba:	ebb1 010c 	subs.w	r1, r1, ip
 80164be:	eb63 030e 	sbc.w	r3, r3, lr
 80164c2:	00db      	lsls	r3, r3, #3
 80164c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80164c8:	00c9      	lsls	r1, r1, #3
 80164ca:	eb11 0c00 	adds.w	ip, r1, r0
 80164ce:	f143 0300 	adc.w	r3, r3, #0
 80164d2:	0259      	lsls	r1, r3, #9
 80164d4:	2300      	movs	r3, #0
 80164d6:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80164da:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80164de:	f7fa fc3b 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80164e2:	4b19      	ldr	r3, [pc, #100]	@ (8016548 <HAL_RCC_GetSysClockFreq+0xd0>)
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80164ea:	3301      	adds	r3, #1
 80164ec:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80164ee:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80164f2:	e027      	b.n	8016544 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80164f4:	4b14      	ldr	r3, [pc, #80]	@ (8016548 <HAL_RCC_GetSysClockFreq+0xd0>)
 80164f6:	6858      	ldr	r0, [r3, #4]
 80164f8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80164fc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8016500:	ebbc 0c00 	subs.w	ip, ip, r0
 8016504:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8016508:	ea4f 138e 	mov.w	r3, lr, lsl #6
 801650c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8016510:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8016514:	ebb1 010c 	subs.w	r1, r1, ip
 8016518:	eb63 030e 	sbc.w	r3, r3, lr
 801651c:	00db      	lsls	r3, r3, #3
 801651e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8016522:	00c9      	lsls	r1, r1, #3
 8016524:	eb11 0c00 	adds.w	ip, r1, r0
 8016528:	f143 0300 	adc.w	r3, r3, #0
 801652c:	0299      	lsls	r1, r3, #10
 801652e:	2300      	movs	r3, #0
 8016530:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8016534:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8016538:	f7fa fc0e 	bl	8010d58 <__aeabi_uldivmod>
 801653c:	e7d1      	b.n	80164e2 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 801653e:	4803      	ldr	r0, [pc, #12]	@ (801654c <HAL_RCC_GetSysClockFreq+0xd4>)
 8016540:	e000      	b.n	8016544 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8016542:	4803      	ldr	r0, [pc, #12]	@ (8016550 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8016544:	bd08      	pop	{r3, pc}
 8016546:	bf00      	nop
 8016548:	40023800 	.word	0x40023800
 801654c:	007a1200 	.word	0x007a1200
 8016550:	00f42400 	.word	0x00f42400

08016554 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8016554:	2800      	cmp	r0, #0
 8016556:	f000 809b 	beq.w	8016690 <HAL_RCC_ClockConfig+0x13c>
{
 801655a:	b570      	push	{r4, r5, r6, lr}
 801655c:	460d      	mov	r5, r1
 801655e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8016560:	4b4f      	ldr	r3, [pc, #316]	@ (80166a0 <HAL_RCC_ClockConfig+0x14c>)
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	f003 0307 	and.w	r3, r3, #7
 8016568:	428b      	cmp	r3, r1
 801656a:	d208      	bcs.n	801657e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801656c:	b2cb      	uxtb	r3, r1
 801656e:	4a4c      	ldr	r2, [pc, #304]	@ (80166a0 <HAL_RCC_ClockConfig+0x14c>)
 8016570:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016572:	6813      	ldr	r3, [r2, #0]
 8016574:	f003 0307 	and.w	r3, r3, #7
 8016578:	428b      	cmp	r3, r1
 801657a:	f040 808b 	bne.w	8016694 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801657e:	6823      	ldr	r3, [r4, #0]
 8016580:	f013 0f02 	tst.w	r3, #2
 8016584:	d017      	beq.n	80165b6 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016586:	f013 0f04 	tst.w	r3, #4
 801658a:	d004      	beq.n	8016596 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801658c:	4a45      	ldr	r2, [pc, #276]	@ (80166a4 <HAL_RCC_ClockConfig+0x150>)
 801658e:	6893      	ldr	r3, [r2, #8]
 8016590:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8016594:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016596:	6823      	ldr	r3, [r4, #0]
 8016598:	f013 0f08 	tst.w	r3, #8
 801659c:	d004      	beq.n	80165a8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801659e:	4a41      	ldr	r2, [pc, #260]	@ (80166a4 <HAL_RCC_ClockConfig+0x150>)
 80165a0:	6893      	ldr	r3, [r2, #8]
 80165a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80165a6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80165a8:	4a3e      	ldr	r2, [pc, #248]	@ (80166a4 <HAL_RCC_ClockConfig+0x150>)
 80165aa:	6893      	ldr	r3, [r2, #8]
 80165ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80165b0:	68a1      	ldr	r1, [r4, #8]
 80165b2:	430b      	orrs	r3, r1
 80165b4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80165b6:	6823      	ldr	r3, [r4, #0]
 80165b8:	f013 0f01 	tst.w	r3, #1
 80165bc:	d032      	beq.n	8016624 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80165be:	6863      	ldr	r3, [r4, #4]
 80165c0:	2b01      	cmp	r3, #1
 80165c2:	d021      	beq.n	8016608 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80165c4:	1e9a      	subs	r2, r3, #2
 80165c6:	2a01      	cmp	r2, #1
 80165c8:	d925      	bls.n	8016616 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80165ca:	4a36      	ldr	r2, [pc, #216]	@ (80166a4 <HAL_RCC_ClockConfig+0x150>)
 80165cc:	6812      	ldr	r2, [r2, #0]
 80165ce:	f012 0f02 	tst.w	r2, #2
 80165d2:	d061      	beq.n	8016698 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80165d4:	4933      	ldr	r1, [pc, #204]	@ (80166a4 <HAL_RCC_ClockConfig+0x150>)
 80165d6:	688a      	ldr	r2, [r1, #8]
 80165d8:	f022 0203 	bic.w	r2, r2, #3
 80165dc:	4313      	orrs	r3, r2
 80165de:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80165e0:	f7fe ff2e 	bl	8015440 <HAL_GetTick>
 80165e4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80165e6:	4b2f      	ldr	r3, [pc, #188]	@ (80166a4 <HAL_RCC_ClockConfig+0x150>)
 80165e8:	689b      	ldr	r3, [r3, #8]
 80165ea:	f003 030c 	and.w	r3, r3, #12
 80165ee:	6862      	ldr	r2, [r4, #4]
 80165f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80165f4:	d016      	beq.n	8016624 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80165f6:	f7fe ff23 	bl	8015440 <HAL_GetTick>
 80165fa:	1b80      	subs	r0, r0, r6
 80165fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016600:	4298      	cmp	r0, r3
 8016602:	d9f0      	bls.n	80165e6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8016604:	2003      	movs	r0, #3
 8016606:	e042      	b.n	801668e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016608:	4a26      	ldr	r2, [pc, #152]	@ (80166a4 <HAL_RCC_ClockConfig+0x150>)
 801660a:	6812      	ldr	r2, [r2, #0]
 801660c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8016610:	d1e0      	bne.n	80165d4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8016612:	2001      	movs	r0, #1
 8016614:	e03b      	b.n	801668e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016616:	4a23      	ldr	r2, [pc, #140]	@ (80166a4 <HAL_RCC_ClockConfig+0x150>)
 8016618:	6812      	ldr	r2, [r2, #0]
 801661a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 801661e:	d1d9      	bne.n	80165d4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8016620:	2001      	movs	r0, #1
 8016622:	e034      	b.n	801668e <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8016624:	4b1e      	ldr	r3, [pc, #120]	@ (80166a0 <HAL_RCC_ClockConfig+0x14c>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	f003 0307 	and.w	r3, r3, #7
 801662c:	42ab      	cmp	r3, r5
 801662e:	d907      	bls.n	8016640 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016630:	b2ea      	uxtb	r2, r5
 8016632:	4b1b      	ldr	r3, [pc, #108]	@ (80166a0 <HAL_RCC_ClockConfig+0x14c>)
 8016634:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	f003 0307 	and.w	r3, r3, #7
 801663c:	42ab      	cmp	r3, r5
 801663e:	d12d      	bne.n	801669c <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016640:	6823      	ldr	r3, [r4, #0]
 8016642:	f013 0f04 	tst.w	r3, #4
 8016646:	d006      	beq.n	8016656 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016648:	4a16      	ldr	r2, [pc, #88]	@ (80166a4 <HAL_RCC_ClockConfig+0x150>)
 801664a:	6893      	ldr	r3, [r2, #8]
 801664c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8016650:	68e1      	ldr	r1, [r4, #12]
 8016652:	430b      	orrs	r3, r1
 8016654:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016656:	6823      	ldr	r3, [r4, #0]
 8016658:	f013 0f08 	tst.w	r3, #8
 801665c:	d007      	beq.n	801666e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801665e:	4a11      	ldr	r2, [pc, #68]	@ (80166a4 <HAL_RCC_ClockConfig+0x150>)
 8016660:	6893      	ldr	r3, [r2, #8]
 8016662:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8016666:	6921      	ldr	r1, [r4, #16]
 8016668:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801666c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801666e:	f7ff ff03 	bl	8016478 <HAL_RCC_GetSysClockFreq>
 8016672:	4b0c      	ldr	r3, [pc, #48]	@ (80166a4 <HAL_RCC_ClockConfig+0x150>)
 8016674:	689b      	ldr	r3, [r3, #8]
 8016676:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801667a:	4a0b      	ldr	r2, [pc, #44]	@ (80166a8 <HAL_RCC_ClockConfig+0x154>)
 801667c:	5cd3      	ldrb	r3, [r2, r3]
 801667e:	40d8      	lsrs	r0, r3
 8016680:	4b0a      	ldr	r3, [pc, #40]	@ (80166ac <HAL_RCC_ClockConfig+0x158>)
 8016682:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8016684:	4b0a      	ldr	r3, [pc, #40]	@ (80166b0 <HAL_RCC_ClockConfig+0x15c>)
 8016686:	6818      	ldr	r0, [r3, #0]
 8016688:	f7fb fd7c 	bl	8012184 <HAL_InitTick>
  return HAL_OK;
 801668c:	2000      	movs	r0, #0
}
 801668e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8016690:	2001      	movs	r0, #1
}
 8016692:	4770      	bx	lr
      return HAL_ERROR;
 8016694:	2001      	movs	r0, #1
 8016696:	e7fa      	b.n	801668e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8016698:	2001      	movs	r0, #1
 801669a:	e7f8      	b.n	801668e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 801669c:	2001      	movs	r0, #1
 801669e:	e7f6      	b.n	801668e <HAL_RCC_ClockConfig+0x13a>
 80166a0:	40023c00 	.word	0x40023c00
 80166a4:	40023800 	.word	0x40023800
 80166a8:	08035470 	.word	0x08035470
 80166ac:	20000018 	.word	0x20000018
 80166b0:	20000084 	.word	0x20000084

080166b4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80166b4:	4b01      	ldr	r3, [pc, #4]	@ (80166bc <HAL_RCC_GetHCLKFreq+0x8>)
 80166b6:	6818      	ldr	r0, [r3, #0]
 80166b8:	4770      	bx	lr
 80166ba:	bf00      	nop
 80166bc:	20000018 	.word	0x20000018

080166c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80166c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80166c2:	f7ff fff7 	bl	80166b4 <HAL_RCC_GetHCLKFreq>
 80166c6:	4b04      	ldr	r3, [pc, #16]	@ (80166d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80166c8:	689b      	ldr	r3, [r3, #8]
 80166ca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80166ce:	4a03      	ldr	r2, [pc, #12]	@ (80166dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80166d0:	5cd3      	ldrb	r3, [r2, r3]
}
 80166d2:	40d8      	lsrs	r0, r3
 80166d4:	bd08      	pop	{r3, pc}
 80166d6:	bf00      	nop
 80166d8:	40023800 	.word	0x40023800
 80166dc:	08035468 	.word	0x08035468

080166e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80166e0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80166e2:	f7ff ffe7 	bl	80166b4 <HAL_RCC_GetHCLKFreq>
 80166e6:	4b04      	ldr	r3, [pc, #16]	@ (80166f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80166e8:	689b      	ldr	r3, [r3, #8]
 80166ea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80166ee:	4a03      	ldr	r2, [pc, #12]	@ (80166fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80166f0:	5cd3      	ldrb	r3, [r2, r3]
}
 80166f2:	40d8      	lsrs	r0, r3
 80166f4:	bd08      	pop	{r3, pc}
 80166f6:	bf00      	nop
 80166f8:	40023800 	.word	0x40023800
 80166fc:	08035468 	.word	0x08035468

08016700 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8016700:	230f      	movs	r3, #15
 8016702:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8016704:	4b0b      	ldr	r3, [pc, #44]	@ (8016734 <HAL_RCC_GetClockConfig+0x34>)
 8016706:	689a      	ldr	r2, [r3, #8]
 8016708:	f002 0203 	and.w	r2, r2, #3
 801670c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801670e:	689a      	ldr	r2, [r3, #8]
 8016710:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8016714:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8016716:	689a      	ldr	r2, [r3, #8]
 8016718:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 801671c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801671e:	689b      	ldr	r3, [r3, #8]
 8016720:	08db      	lsrs	r3, r3, #3
 8016722:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8016726:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8016728:	4b03      	ldr	r3, [pc, #12]	@ (8016738 <HAL_RCC_GetClockConfig+0x38>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	f003 0307 	and.w	r3, r3, #7
 8016730:	600b      	str	r3, [r1, #0]
}
 8016732:	4770      	bx	lr
 8016734:	40023800 	.word	0x40023800
 8016738:	40023c00 	.word	0x40023c00

0801673c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801673c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016740:	b082      	sub	sp, #8
 8016742:	4605      	mov	r5, r0
 8016744:	4688      	mov	r8, r1
 8016746:	4617      	mov	r7, r2
 8016748:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801674a:	f7fe fe79 	bl	8015440 <HAL_GetTick>
 801674e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016750:	1a1b      	subs	r3, r3, r0
 8016752:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8016756:	f7fe fe73 	bl	8015440 <HAL_GetTick>
 801675a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801675c:	4b28      	ldr	r3, [pc, #160]	@ (8016800 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8016764:	fb09 f303 	mul.w	r3, r9, r3
 8016768:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801676a:	682b      	ldr	r3, [r5, #0]
 801676c:	689c      	ldr	r4, [r3, #8]
 801676e:	ea38 0404 	bics.w	r4, r8, r4
 8016772:	bf0c      	ite	eq
 8016774:	2301      	moveq	r3, #1
 8016776:	2300      	movne	r3, #0
 8016778:	42bb      	cmp	r3, r7
 801677a:	d03d      	beq.n	80167f8 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 801677c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016780:	d0f3      	beq.n	801676a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8016782:	f7fe fe5d 	bl	8015440 <HAL_GetTick>
 8016786:	eba0 000a 	sub.w	r0, r0, sl
 801678a:	4548      	cmp	r0, r9
 801678c:	d207      	bcs.n	801679e <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801678e:	9a01      	ldr	r2, [sp, #4]
 8016790:	b102      	cbz	r2, 8016794 <SPI_WaitFlagStateUntilTimeout+0x58>
 8016792:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8016794:	9b01      	ldr	r3, [sp, #4]
 8016796:	3b01      	subs	r3, #1
 8016798:	9301      	str	r3, [sp, #4]
 801679a:	4691      	mov	r9, r2
 801679c:	e7e5      	b.n	801676a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801679e:	682a      	ldr	r2, [r5, #0]
 80167a0:	6853      	ldr	r3, [r2, #4]
 80167a2:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80167a6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80167a8:	686b      	ldr	r3, [r5, #4]
 80167aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80167ae:	d00b      	beq.n	80167c8 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80167b0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80167b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80167b6:	d014      	beq.n	80167e2 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 80167b8:	2301      	movs	r3, #1
 80167ba:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80167be:	2300      	movs	r3, #0
 80167c0:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 80167c4:	2003      	movs	r0, #3
 80167c6:	e018      	b.n	80167fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80167c8:	68ab      	ldr	r3, [r5, #8]
 80167ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80167ce:	d002      	beq.n	80167d6 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80167d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80167d4:	d1ec      	bne.n	80167b0 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 80167d6:	682a      	ldr	r2, [r5, #0]
 80167d8:	6813      	ldr	r3, [r2, #0]
 80167da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80167de:	6013      	str	r3, [r2, #0]
 80167e0:	e7e6      	b.n	80167b0 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 80167e2:	682a      	ldr	r2, [r5, #0]
 80167e4:	6813      	ldr	r3, [r2, #0]
 80167e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80167ea:	6013      	str	r3, [r2, #0]
 80167ec:	682a      	ldr	r2, [r5, #0]
 80167ee:	6813      	ldr	r3, [r2, #0]
 80167f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80167f4:	6013      	str	r3, [r2, #0]
 80167f6:	e7df      	b.n	80167b8 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 80167f8:	2000      	movs	r0, #0
}
 80167fa:	b002      	add	sp, #8
 80167fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016800:	20000018 	.word	0x20000018

08016804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8016804:	b570      	push	{r4, r5, r6, lr}
 8016806:	b084      	sub	sp, #16
 8016808:	4604      	mov	r4, r0
 801680a:	460d      	mov	r5, r1
 801680c:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 801680e:	9200      	str	r2, [sp, #0]
 8016810:	460b      	mov	r3, r1
 8016812:	2201      	movs	r2, #1
 8016814:	2102      	movs	r1, #2
 8016816:	f7ff ff91 	bl	801673c <SPI_WaitFlagStateUntilTimeout>
 801681a:	b9d0      	cbnz	r0, 8016852 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801681c:	4b17      	ldr	r3, [pc, #92]	@ (801687c <SPI_EndRxTxTransaction+0x78>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	4a17      	ldr	r2, [pc, #92]	@ (8016880 <SPI_EndRxTxTransaction+0x7c>)
 8016822:	fba2 2303 	umull	r2, r3, r2, r3
 8016826:	0d5b      	lsrs	r3, r3, #21
 8016828:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801682c:	fb02 f303 	mul.w	r3, r2, r3
 8016830:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016832:	6863      	ldr	r3, [r4, #4]
 8016834:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8016838:	d011      	beq.n	801685e <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801683a:	9b03      	ldr	r3, [sp, #12]
 801683c:	b13b      	cbz	r3, 801684e <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 801683e:	9b03      	ldr	r3, [sp, #12]
 8016840:	3b01      	subs	r3, #1
 8016842:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8016844:	6823      	ldr	r3, [r4, #0]
 8016846:	689b      	ldr	r3, [r3, #8]
 8016848:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801684c:	d1f5      	bne.n	801683a <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 801684e:	b004      	add	sp, #16
 8016850:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016852:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016854:	f043 0320 	orr.w	r3, r3, #32
 8016858:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 801685a:	2003      	movs	r0, #3
 801685c:	e7f7      	b.n	801684e <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801685e:	9600      	str	r6, [sp, #0]
 8016860:	462b      	mov	r3, r5
 8016862:	2200      	movs	r2, #0
 8016864:	2180      	movs	r1, #128	@ 0x80
 8016866:	4620      	mov	r0, r4
 8016868:	f7ff ff68 	bl	801673c <SPI_WaitFlagStateUntilTimeout>
 801686c:	2800      	cmp	r0, #0
 801686e:	d0ee      	beq.n	801684e <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016870:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016872:	f043 0320 	orr.w	r3, r3, #32
 8016876:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8016878:	2003      	movs	r0, #3
 801687a:	e7e8      	b.n	801684e <SPI_EndRxTxTransaction+0x4a>
 801687c:	20000018 	.word	0x20000018
 8016880:	165e9f81 	.word	0x165e9f81

08016884 <SPI_EndRxTransaction>:
{
 8016884:	b510      	push	{r4, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	4604      	mov	r4, r0
 801688a:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801688c:	6841      	ldr	r1, [r0, #4]
 801688e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8016892:	d014      	beq.n	80168be <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016894:	6861      	ldr	r1, [r4, #4]
 8016896:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 801689a:	d12a      	bne.n	80168f2 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801689c:	68a1      	ldr	r1, [r4, #8]
 801689e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80168a2:	d019      	beq.n	80168d8 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80168a4:	9200      	str	r2, [sp, #0]
 80168a6:	2200      	movs	r2, #0
 80168a8:	2180      	movs	r1, #128	@ 0x80
 80168aa:	4620      	mov	r0, r4
 80168ac:	f7ff ff46 	bl	801673c <SPI_WaitFlagStateUntilTimeout>
 80168b0:	b330      	cbz	r0, 8016900 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80168b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80168b4:	f043 0320 	orr.w	r3, r3, #32
 80168b8:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 80168ba:	2003      	movs	r0, #3
 80168bc:	e020      	b.n	8016900 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80168be:	6881      	ldr	r1, [r0, #8]
 80168c0:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80168c4:	d002      	beq.n	80168cc <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80168c6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80168ca:	d1e3      	bne.n	8016894 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 80168cc:	6820      	ldr	r0, [r4, #0]
 80168ce:	6801      	ldr	r1, [r0, #0]
 80168d0:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80168d4:	6001      	str	r1, [r0, #0]
 80168d6:	e7dd      	b.n	8016894 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80168d8:	9200      	str	r2, [sp, #0]
 80168da:	2200      	movs	r2, #0
 80168dc:	2101      	movs	r1, #1
 80168de:	4620      	mov	r0, r4
 80168e0:	f7ff ff2c 	bl	801673c <SPI_WaitFlagStateUntilTimeout>
 80168e4:	b160      	cbz	r0, 8016900 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80168e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80168e8:	f043 0320 	orr.w	r3, r3, #32
 80168ec:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 80168ee:	2003      	movs	r0, #3
 80168f0:	e006      	b.n	8016900 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80168f2:	9200      	str	r2, [sp, #0]
 80168f4:	2200      	movs	r2, #0
 80168f6:	2101      	movs	r1, #1
 80168f8:	4620      	mov	r0, r4
 80168fa:	f7ff ff1f 	bl	801673c <SPI_WaitFlagStateUntilTimeout>
 80168fe:	b908      	cbnz	r0, 8016904 <SPI_EndRxTransaction+0x80>
}
 8016900:	b002      	add	sp, #8
 8016902:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016904:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016906:	f043 0320 	orr.w	r3, r3, #32
 801690a:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 801690c:	2003      	movs	r0, #3
 801690e:	e7f7      	b.n	8016900 <SPI_EndRxTransaction+0x7c>

08016910 <HAL_SPI_Init>:
  if (hspi == NULL)
 8016910:	2800      	cmp	r0, #0
 8016912:	d05a      	beq.n	80169ca <HAL_SPI_Init+0xba>
{
 8016914:	b510      	push	{r4, lr}
 8016916:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8016918:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801691a:	b933      	cbnz	r3, 801692a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801691c:	6843      	ldr	r3, [r0, #4]
 801691e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8016922:	d005      	beq.n	8016930 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016924:	2300      	movs	r3, #0
 8016926:	61c3      	str	r3, [r0, #28]
 8016928:	e002      	b.n	8016930 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801692a:	2300      	movs	r3, #0
 801692c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801692e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016930:	2300      	movs	r3, #0
 8016932:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8016934:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8016938:	2b00      	cmp	r3, #0
 801693a:	d040      	beq.n	80169be <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 801693c:	2302      	movs	r3, #2
 801693e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8016942:	6822      	ldr	r2, [r4, #0]
 8016944:	6813      	ldr	r3, [r2, #0]
 8016946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801694a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801694c:	6863      	ldr	r3, [r4, #4]
 801694e:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8016952:	68a2      	ldr	r2, [r4, #8]
 8016954:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8016958:	4313      	orrs	r3, r2
 801695a:	68e2      	ldr	r2, [r4, #12]
 801695c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8016960:	4313      	orrs	r3, r2
 8016962:	6922      	ldr	r2, [r4, #16]
 8016964:	f002 0202 	and.w	r2, r2, #2
 8016968:	4313      	orrs	r3, r2
 801696a:	6962      	ldr	r2, [r4, #20]
 801696c:	f002 0201 	and.w	r2, r2, #1
 8016970:	4313      	orrs	r3, r2
 8016972:	69a2      	ldr	r2, [r4, #24]
 8016974:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8016978:	4313      	orrs	r3, r2
 801697a:	69e2      	ldr	r2, [r4, #28]
 801697c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8016980:	4313      	orrs	r3, r2
 8016982:	6a22      	ldr	r2, [r4, #32]
 8016984:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8016988:	4313      	orrs	r3, r2
 801698a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801698c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8016990:	6821      	ldr	r1, [r4, #0]
 8016992:	4313      	orrs	r3, r2
 8016994:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8016996:	8b63      	ldrh	r3, [r4, #26]
 8016998:	f003 0304 	and.w	r3, r3, #4
 801699c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801699e:	f002 0210 	and.w	r2, r2, #16
 80169a2:	6821      	ldr	r1, [r4, #0]
 80169a4:	4313      	orrs	r3, r2
 80169a6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80169a8:	6822      	ldr	r2, [r4, #0]
 80169aa:	69d3      	ldr	r3, [r2, #28]
 80169ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80169b0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80169b2:	2000      	movs	r0, #0
 80169b4:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80169b6:	2301      	movs	r3, #1
 80169b8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80169bc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80169be:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80169c2:	4620      	mov	r0, r4
 80169c4:	f7fb fb5a 	bl	801207c <HAL_SPI_MspInit>
 80169c8:	e7b8      	b.n	801693c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80169ca:	2001      	movs	r0, #1
}
 80169cc:	4770      	bx	lr

080169ce <HAL_SPI_Transmit>:
{
 80169ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80169d2:	b083      	sub	sp, #12
 80169d4:	4604      	mov	r4, r0
 80169d6:	4689      	mov	r9, r1
 80169d8:	4690      	mov	r8, r2
 80169da:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 80169dc:	f7fe fd30 	bl	8015440 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80169e0:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 80169e4:	b2f6      	uxtb	r6, r6
 80169e6:	2e01      	cmp	r6, #1
 80169e8:	f040 80cc 	bne.w	8016b84 <HAL_SPI_Transmit+0x1b6>
 80169ec:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 80169ee:	f1b9 0f00 	cmp.w	r9, #0
 80169f2:	f000 80c8 	beq.w	8016b86 <HAL_SPI_Transmit+0x1b8>
 80169f6:	f1b8 0f00 	cmp.w	r8, #0
 80169fa:	f000 80c4 	beq.w	8016b86 <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 80169fe:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8016a02:	2b01      	cmp	r3, #1
 8016a04:	f000 80c3 	beq.w	8016b8e <HAL_SPI_Transmit+0x1c0>
 8016a08:	2301      	movs	r3, #1
 8016a0a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8016a0e:	2303      	movs	r3, #3
 8016a10:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016a14:	2300      	movs	r3, #0
 8016a16:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8016a18:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8016a1c:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8016a20:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8016a24:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8016a26:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8016a28:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8016a2a:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8016a2c:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016a2e:	68a3      	ldr	r3, [r4, #8]
 8016a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016a34:	d01e      	beq.n	8016a74 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016a36:	6823      	ldr	r3, [r4, #0]
 8016a38:	681a      	ldr	r2, [r3, #0]
 8016a3a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8016a3e:	d103      	bne.n	8016a48 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8016a40:	681a      	ldr	r2, [r3, #0]
 8016a42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016a46:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016a48:	68e3      	ldr	r3, [r4, #12]
 8016a4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016a4e:	d01c      	beq.n	8016a8a <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016a50:	6863      	ldr	r3, [r4, #4]
 8016a52:	b113      	cbz	r3, 8016a5a <HAL_SPI_Transmit+0x8c>
 8016a54:	f1b8 0f01 	cmp.w	r8, #1
 8016a58:	d15f      	bne.n	8016b1a <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8016a5a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016a5c:	6823      	ldr	r3, [r4, #0]
 8016a5e:	7812      	ldrb	r2, [r2, #0]
 8016a60:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016a62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016a64:	3301      	adds	r3, #1
 8016a66:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8016a68:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016a6a:	b29b      	uxth	r3, r3
 8016a6c:	3b01      	subs	r3, #1
 8016a6e:	b29b      	uxth	r3, r3
 8016a70:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8016a72:	e052      	b.n	8016b1a <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8016a74:	6822      	ldr	r2, [r4, #0]
 8016a76:	6813      	ldr	r3, [r2, #0]
 8016a78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016a7c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8016a7e:	6822      	ldr	r2, [r4, #0]
 8016a80:	6813      	ldr	r3, [r2, #0]
 8016a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8016a86:	6013      	str	r3, [r2, #0]
 8016a88:	e7d5      	b.n	8016a36 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016a8a:	6863      	ldr	r3, [r4, #4]
 8016a8c:	b113      	cbz	r3, 8016a94 <HAL_SPI_Transmit+0xc6>
 8016a8e:	f1b8 0f01 	cmp.w	r8, #1
 8016a92:	d115      	bne.n	8016ac0 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8016a94:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016a96:	6823      	ldr	r3, [r4, #0]
 8016a98:	8812      	ldrh	r2, [r2, #0]
 8016a9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016a9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016a9e:	3302      	adds	r3, #2
 8016aa0:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8016aa2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016aa4:	b29b      	uxth	r3, r3
 8016aa6:	3b01      	subs	r3, #1
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8016aac:	e008      	b.n	8016ac0 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016aae:	f7fe fcc7 	bl	8015440 <HAL_GetTick>
 8016ab2:	1bc0      	subs	r0, r0, r7
 8016ab4:	42a8      	cmp	r0, r5
 8016ab6:	d302      	bcc.n	8016abe <HAL_SPI_Transmit+0xf0>
 8016ab8:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016abc:	d115      	bne.n	8016aea <HAL_SPI_Transmit+0x11c>
 8016abe:	b1a5      	cbz	r5, 8016aea <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8016ac0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016ac2:	b29b      	uxth	r3, r3
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d042      	beq.n	8016b4e <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016ac8:	6823      	ldr	r3, [r4, #0]
 8016aca:	689a      	ldr	r2, [r3, #8]
 8016acc:	f012 0f02 	tst.w	r2, #2
 8016ad0:	d0ed      	beq.n	8016aae <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8016ad2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016ad4:	8812      	ldrh	r2, [r2, #0]
 8016ad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016ad8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016ada:	3302      	adds	r3, #2
 8016adc:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8016ade:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016ae0:	b29b      	uxth	r3, r3
 8016ae2:	3b01      	subs	r3, #1
 8016ae4:	b29b      	uxth	r3, r3
 8016ae6:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8016ae8:	e7ea      	b.n	8016ac0 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8016aea:	2301      	movs	r3, #1
 8016aec:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8016af0:	2300      	movs	r3, #0
 8016af2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8016af6:	2603      	movs	r6, #3
 8016af8:	e045      	b.n	8016b86 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8016afa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016afc:	7812      	ldrb	r2, [r2, #0]
 8016afe:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8016b00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016b02:	3301      	adds	r3, #1
 8016b04:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8016b06:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8016b0a:	fa1f fc8c 	uxth.w	ip, ip
 8016b0e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8016b12:	fa1f fc8c 	uxth.w	ip, ip
 8016b16:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8016b1a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016b1c:	b29b      	uxth	r3, r3
 8016b1e:	b1b3      	cbz	r3, 8016b4e <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016b20:	6823      	ldr	r3, [r4, #0]
 8016b22:	689a      	ldr	r2, [r3, #8]
 8016b24:	f012 0f02 	tst.w	r2, #2
 8016b28:	d1e7      	bne.n	8016afa <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016b2a:	f7fe fc89 	bl	8015440 <HAL_GetTick>
 8016b2e:	1bc0      	subs	r0, r0, r7
 8016b30:	42a8      	cmp	r0, r5
 8016b32:	d302      	bcc.n	8016b3a <HAL_SPI_Transmit+0x16c>
 8016b34:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016b38:	d101      	bne.n	8016b3e <HAL_SPI_Transmit+0x170>
 8016b3a:	2d00      	cmp	r5, #0
 8016b3c:	d1ed      	bne.n	8016b1a <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 8016b3e:	2301      	movs	r3, #1
 8016b40:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8016b44:	2300      	movs	r3, #0
 8016b46:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8016b4a:	2603      	movs	r6, #3
 8016b4c:	e01b      	b.n	8016b86 <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016b4e:	463a      	mov	r2, r7
 8016b50:	4629      	mov	r1, r5
 8016b52:	4620      	mov	r0, r4
 8016b54:	f7ff fe56 	bl	8016804 <SPI_EndRxTxTransaction>
 8016b58:	b108      	cbz	r0, 8016b5e <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016b5a:	2320      	movs	r3, #32
 8016b5c:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016b5e:	68a3      	ldr	r3, [r4, #8]
 8016b60:	b933      	cbnz	r3, 8016b70 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016b62:	9301      	str	r3, [sp, #4]
 8016b64:	6823      	ldr	r3, [r4, #0]
 8016b66:	68da      	ldr	r2, [r3, #12]
 8016b68:	9201      	str	r2, [sp, #4]
 8016b6a:	689b      	ldr	r3, [r3, #8]
 8016b6c:	9301      	str	r3, [sp, #4]
 8016b6e:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8016b70:	2301      	movs	r3, #1
 8016b72:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8016b76:	2300      	movs	r3, #0
 8016b78:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016b7c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016b7e:	b913      	cbnz	r3, 8016b86 <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8016b80:	2600      	movs	r6, #0
 8016b82:	e000      	b.n	8016b86 <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8016b84:	2602      	movs	r6, #2
}
 8016b86:	4630      	mov	r0, r6
 8016b88:	b003      	add	sp, #12
 8016b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8016b8e:	2602      	movs	r6, #2
 8016b90:	e7f9      	b.n	8016b86 <HAL_SPI_Transmit+0x1b8>

08016b92 <HAL_SPI_TransmitReceive>:
{
 8016b92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b96:	b083      	sub	sp, #12
 8016b98:	4604      	mov	r4, r0
 8016b9a:	4688      	mov	r8, r1
 8016b9c:	4691      	mov	r9, r2
 8016b9e:	461f      	mov	r7, r3
 8016ba0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8016ba2:	f7fe fc4d 	bl	8015440 <HAL_GetTick>
 8016ba6:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8016ba8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8016bac:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8016bae:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8016bb0:	2b01      	cmp	r3, #1
 8016bb2:	d00a      	beq.n	8016bca <HAL_SPI_TransmitReceive+0x38>
 8016bb4:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8016bb8:	f040 8105 	bne.w	8016dc6 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8016bbc:	68a2      	ldr	r2, [r4, #8]
 8016bbe:	2a00      	cmp	r2, #0
 8016bc0:	f040 8105 	bne.w	8016dce <HAL_SPI_TransmitReceive+0x23c>
 8016bc4:	2b04      	cmp	r3, #4
 8016bc6:	f040 8104 	bne.w	8016dd2 <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8016bca:	f1b8 0f00 	cmp.w	r8, #0
 8016bce:	f000 8102 	beq.w	8016dd6 <HAL_SPI_TransmitReceive+0x244>
 8016bd2:	f1b9 0f00 	cmp.w	r9, #0
 8016bd6:	f000 8100 	beq.w	8016dda <HAL_SPI_TransmitReceive+0x248>
 8016bda:	2f00      	cmp	r7, #0
 8016bdc:	f000 80ff 	beq.w	8016dde <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8016be0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8016be4:	2b01      	cmp	r3, #1
 8016be6:	f000 80fc 	beq.w	8016de2 <HAL_SPI_TransmitReceive+0x250>
 8016bea:	2301      	movs	r3, #1
 8016bec:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016bf0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8016bf4:	b2db      	uxtb	r3, r3
 8016bf6:	2b04      	cmp	r3, #4
 8016bf8:	d002      	beq.n	8016c00 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8016bfa:	2305      	movs	r3, #5
 8016bfc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016c00:	2300      	movs	r3, #0
 8016c02:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8016c04:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8016c08:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8016c0a:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8016c0c:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8016c10:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8016c12:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8016c14:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8016c16:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016c18:	6823      	ldr	r3, [r4, #0]
 8016c1a:	681a      	ldr	r2, [r3, #0]
 8016c1c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8016c20:	d103      	bne.n	8016c2a <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8016c22:	681a      	ldr	r2, [r3, #0]
 8016c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016c28:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016c2a:	68e3      	ldr	r3, [r4, #12]
 8016c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016c30:	d011      	beq.n	8016c56 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016c32:	6863      	ldr	r3, [r4, #4]
 8016c34:	b10b      	cbz	r3, 8016c3a <HAL_SPI_TransmitReceive+0xa8>
 8016c36:	2f01      	cmp	r7, #1
 8016c38:	d10b      	bne.n	8016c52 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8016c3a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016c3c:	6823      	ldr	r3, [r4, #0]
 8016c3e:	7812      	ldrb	r2, [r2, #0]
 8016c40:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016c42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c44:	3301      	adds	r3, #1
 8016c46:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8016c48:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016c4a:	b29b      	uxth	r3, r3
 8016c4c:	3b01      	subs	r3, #1
 8016c4e:	b29b      	uxth	r3, r3
 8016c50:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8016c52:	2701      	movs	r7, #1
 8016c54:	e071      	b.n	8016d3a <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016c56:	6863      	ldr	r3, [r4, #4]
 8016c58:	b10b      	cbz	r3, 8016c5e <HAL_SPI_TransmitReceive+0xcc>
 8016c5a:	2f01      	cmp	r7, #1
 8016c5c:	d10b      	bne.n	8016c76 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8016c5e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016c60:	6823      	ldr	r3, [r4, #0]
 8016c62:	8812      	ldrh	r2, [r2, #0]
 8016c64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016c66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c68:	3302      	adds	r3, #2
 8016c6a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8016c6c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016c6e:	b29b      	uxth	r3, r3
 8016c70:	3b01      	subs	r3, #1
 8016c72:	b29b      	uxth	r3, r3
 8016c74:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8016c76:	2701      	movs	r7, #1
 8016c78:	e01b      	b.n	8016cb2 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016c7a:	6823      	ldr	r3, [r4, #0]
 8016c7c:	689a      	ldr	r2, [r3, #8]
 8016c7e:	f012 0f01 	tst.w	r2, #1
 8016c82:	d00e      	beq.n	8016ca2 <HAL_SPI_TransmitReceive+0x110>
 8016c84:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8016c86:	b292      	uxth	r2, r2
 8016c88:	b15a      	cbz	r2, 8016ca2 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016c8a:	68da      	ldr	r2, [r3, #12]
 8016c8c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016c8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016c90:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016c92:	3302      	adds	r3, #2
 8016c94:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8016c96:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016c98:	b29b      	uxth	r3, r3
 8016c9a:	3b01      	subs	r3, #1
 8016c9c:	b29b      	uxth	r3, r3
 8016c9e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8016ca0:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8016ca2:	f7fe fbcd 	bl	8015440 <HAL_GetTick>
 8016ca6:	1b80      	subs	r0, r0, r6
 8016ca8:	42a8      	cmp	r0, r5
 8016caa:	d302      	bcc.n	8016cb2 <HAL_SPI_TransmitReceive+0x120>
 8016cac:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016cb0:	d11e      	bne.n	8016cf0 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016cb2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016cb4:	b29b      	uxth	r3, r3
 8016cb6:	b91b      	cbnz	r3, 8016cc0 <HAL_SPI_TransmitReceive+0x12e>
 8016cb8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016cba:	b29b      	uxth	r3, r3
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d062      	beq.n	8016d86 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016cc0:	6823      	ldr	r3, [r4, #0]
 8016cc2:	689a      	ldr	r2, [r3, #8]
 8016cc4:	f012 0f02 	tst.w	r2, #2
 8016cc8:	d0d7      	beq.n	8016c7a <HAL_SPI_TransmitReceive+0xe8>
 8016cca:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016ccc:	b292      	uxth	r2, r2
 8016cce:	2a00      	cmp	r2, #0
 8016cd0:	d0d3      	beq.n	8016c7a <HAL_SPI_TransmitReceive+0xe8>
 8016cd2:	2f00      	cmp	r7, #0
 8016cd4:	d0d1      	beq.n	8016c7a <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8016cd6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016cd8:	8812      	ldrh	r2, [r2, #0]
 8016cda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016cdc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cde:	3302      	adds	r3, #2
 8016ce0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8016ce2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016ce4:	b29b      	uxth	r3, r3
 8016ce6:	3b01      	subs	r3, #1
 8016ce8:	b29b      	uxth	r3, r3
 8016cea:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8016cec:	2700      	movs	r7, #0
 8016cee:	e7c4      	b.n	8016c7a <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8016cfc:	2003      	movs	r0, #3
 8016cfe:	e063      	b.n	8016dc8 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016d00:	6823      	ldr	r3, [r4, #0]
 8016d02:	689a      	ldr	r2, [r3, #8]
 8016d04:	f012 0f01 	tst.w	r2, #1
 8016d08:	d00e      	beq.n	8016d28 <HAL_SPI_TransmitReceive+0x196>
 8016d0a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8016d0c:	b292      	uxth	r2, r2
 8016d0e:	b15a      	cbz	r2, 8016d28 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8016d10:	68da      	ldr	r2, [r3, #12]
 8016d12:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016d14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8016d16:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016d18:	3301      	adds	r3, #1
 8016d1a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8016d1c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	3b01      	subs	r3, #1
 8016d22:	b29b      	uxth	r3, r3
 8016d24:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8016d26:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8016d28:	f7fe fb8a 	bl	8015440 <HAL_GetTick>
 8016d2c:	1b83      	subs	r3, r0, r6
 8016d2e:	42ab      	cmp	r3, r5
 8016d30:	d302      	bcc.n	8016d38 <HAL_SPI_TransmitReceive+0x1a6>
 8016d32:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016d36:	d11e      	bne.n	8016d76 <HAL_SPI_TransmitReceive+0x1e4>
 8016d38:	b1ed      	cbz	r5, 8016d76 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016d3a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016d3c:	b29b      	uxth	r3, r3
 8016d3e:	b913      	cbnz	r3, 8016d46 <HAL_SPI_TransmitReceive+0x1b4>
 8016d40:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016d42:	b29b      	uxth	r3, r3
 8016d44:	b1fb      	cbz	r3, 8016d86 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016d46:	6823      	ldr	r3, [r4, #0]
 8016d48:	689a      	ldr	r2, [r3, #8]
 8016d4a:	f012 0f02 	tst.w	r2, #2
 8016d4e:	d0d7      	beq.n	8016d00 <HAL_SPI_TransmitReceive+0x16e>
 8016d50:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016d52:	b292      	uxth	r2, r2
 8016d54:	2a00      	cmp	r2, #0
 8016d56:	d0d3      	beq.n	8016d00 <HAL_SPI_TransmitReceive+0x16e>
 8016d58:	2f00      	cmp	r7, #0
 8016d5a:	d0d1      	beq.n	8016d00 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8016d5c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016d5e:	7812      	ldrb	r2, [r2, #0]
 8016d60:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8016d62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d64:	3301      	adds	r3, #1
 8016d66:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8016d68:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016d6a:	b29b      	uxth	r3, r3
 8016d6c:	3b01      	subs	r3, #1
 8016d6e:	b29b      	uxth	r3, r3
 8016d70:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8016d72:	2700      	movs	r7, #0
 8016d74:	e7c4      	b.n	8016d00 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8016d76:	2301      	movs	r3, #1
 8016d78:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8016d82:	2003      	movs	r0, #3
 8016d84:	e020      	b.n	8016dc8 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016d86:	4632      	mov	r2, r6
 8016d88:	4629      	mov	r1, r5
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	f7ff fd3a 	bl	8016804 <SPI_EndRxTxTransaction>
 8016d90:	b990      	cbnz	r0, 8016db8 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016d92:	68a3      	ldr	r3, [r4, #8]
 8016d94:	b933      	cbnz	r3, 8016da4 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016d96:	9301      	str	r3, [sp, #4]
 8016d98:	6823      	ldr	r3, [r4, #0]
 8016d9a:	68da      	ldr	r2, [r3, #12]
 8016d9c:	9201      	str	r2, [sp, #4]
 8016d9e:	689b      	ldr	r3, [r3, #8]
 8016da0:	9301      	str	r3, [sp, #4]
 8016da2:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8016da4:	2301      	movs	r3, #1
 8016da6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8016daa:	2300      	movs	r3, #0
 8016dac:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016db0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016db2:	b14b      	cbz	r3, 8016dc8 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8016db4:	2001      	movs	r0, #1
 8016db6:	e007      	b.n	8016dc8 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016db8:	2320      	movs	r3, #32
 8016dba:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8016dc2:	2001      	movs	r0, #1
 8016dc4:	e000      	b.n	8016dc8 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8016dc6:	2002      	movs	r0, #2
}
 8016dc8:	b003      	add	sp, #12
 8016dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8016dce:	2002      	movs	r0, #2
 8016dd0:	e7fa      	b.n	8016dc8 <HAL_SPI_TransmitReceive+0x236>
 8016dd2:	2002      	movs	r0, #2
 8016dd4:	e7f8      	b.n	8016dc8 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8016dd6:	2001      	movs	r0, #1
 8016dd8:	e7f6      	b.n	8016dc8 <HAL_SPI_TransmitReceive+0x236>
 8016dda:	2001      	movs	r0, #1
 8016ddc:	e7f4      	b.n	8016dc8 <HAL_SPI_TransmitReceive+0x236>
 8016dde:	2001      	movs	r0, #1
 8016de0:	e7f2      	b.n	8016dc8 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8016de2:	2002      	movs	r0, #2
 8016de4:	e7f0      	b.n	8016dc8 <HAL_SPI_TransmitReceive+0x236>

08016de6 <HAL_SPI_Receive>:
{
 8016de6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016dea:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8016dec:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8016df0:	b2f6      	uxtb	r6, r6
 8016df2:	2e01      	cmp	r6, #1
 8016df4:	f040 80b4 	bne.w	8016f60 <HAL_SPI_Receive+0x17a>
 8016df8:	4604      	mov	r4, r0
 8016dfa:	4689      	mov	r9, r1
 8016dfc:	4690      	mov	r8, r2
 8016dfe:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8016e00:	6843      	ldr	r3, [r0, #4]
 8016e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8016e06:	d101      	bne.n	8016e0c <HAL_SPI_Receive+0x26>
 8016e08:	6883      	ldr	r3, [r0, #8]
 8016e0a:	b393      	cbz	r3, 8016e72 <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 8016e0c:	f7fe fb18 	bl	8015440 <HAL_GetTick>
 8016e10:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8016e12:	f1b9 0f00 	cmp.w	r9, #0
 8016e16:	f000 80a4 	beq.w	8016f62 <HAL_SPI_Receive+0x17c>
 8016e1a:	f1b8 0f00 	cmp.w	r8, #0
 8016e1e:	f000 80a0 	beq.w	8016f62 <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 8016e22:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8016e26:	2b01      	cmp	r3, #1
 8016e28:	f000 809f 	beq.w	8016f6a <HAL_SPI_Receive+0x184>
 8016e2c:	2301      	movs	r3, #1
 8016e2e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8016e32:	2304      	movs	r3, #4
 8016e34:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8016e3c:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8016e40:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8016e44:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8016e48:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8016e4a:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8016e4c:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8016e4e:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8016e50:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016e52:	68a3      	ldr	r3, [r4, #8]
 8016e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016e58:	d015      	beq.n	8016e86 <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016e5a:	6823      	ldr	r3, [r4, #0]
 8016e5c:	681a      	ldr	r2, [r3, #0]
 8016e5e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8016e62:	d103      	bne.n	8016e6c <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 8016e64:	681a      	ldr	r2, [r3, #0]
 8016e66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016e6a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8016e6c:	68e3      	ldr	r3, [r4, #12]
 8016e6e:	b1f3      	cbz	r3, 8016eae <HAL_SPI_Receive+0xc8>
 8016e70:	e043      	b.n	8016efa <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8016e72:	2304      	movs	r3, #4
 8016e74:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8016e78:	9500      	str	r5, [sp, #0]
 8016e7a:	4613      	mov	r3, r2
 8016e7c:	460a      	mov	r2, r1
 8016e7e:	f7ff fe88 	bl	8016b92 <HAL_SPI_TransmitReceive>
 8016e82:	4606      	mov	r6, r0
 8016e84:	e06d      	b.n	8016f62 <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8016e86:	6822      	ldr	r2, [r4, #0]
 8016e88:	6813      	ldr	r3, [r2, #0]
 8016e8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016e8e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8016e90:	6822      	ldr	r2, [r4, #0]
 8016e92:	6813      	ldr	r3, [r2, #0]
 8016e94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016e98:	6013      	str	r3, [r2, #0]
 8016e9a:	e7de      	b.n	8016e5a <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016e9c:	f7fe fad0 	bl	8015440 <HAL_GetTick>
 8016ea0:	1bc0      	subs	r0, r0, r7
 8016ea2:	42a8      	cmp	r0, r5
 8016ea4:	d302      	bcc.n	8016eac <HAL_SPI_Receive+0xc6>
 8016ea6:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016eaa:	d115      	bne.n	8016ed8 <HAL_SPI_Receive+0xf2>
 8016eac:	b1a5      	cbz	r5, 8016ed8 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 8016eae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016eb0:	b29b      	uxth	r3, r3
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d042      	beq.n	8016f3c <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016eb6:	6823      	ldr	r3, [r4, #0]
 8016eb8:	689a      	ldr	r2, [r3, #8]
 8016eba:	f012 0f01 	tst.w	r2, #1
 8016ebe:	d0ed      	beq.n	8016e9c <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016ec0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8016ec2:	7b1b      	ldrb	r3, [r3, #12]
 8016ec4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8016ec6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016ec8:	3301      	adds	r3, #1
 8016eca:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8016ecc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016ece:	b29b      	uxth	r3, r3
 8016ed0:	3b01      	subs	r3, #1
 8016ed2:	b29b      	uxth	r3, r3
 8016ed4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8016ed6:	e7ea      	b.n	8016eae <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8016ed8:	2301      	movs	r3, #1
 8016eda:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8016ede:	2300      	movs	r3, #0
 8016ee0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8016ee4:	2603      	movs	r6, #3
 8016ee6:	e03c      	b.n	8016f62 <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016ee8:	f7fe faaa 	bl	8015440 <HAL_GetTick>
 8016eec:	1bc0      	subs	r0, r0, r7
 8016eee:	42a8      	cmp	r0, r5
 8016ef0:	d302      	bcc.n	8016ef8 <HAL_SPI_Receive+0x112>
 8016ef2:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016ef6:	d119      	bne.n	8016f2c <HAL_SPI_Receive+0x146>
 8016ef8:	b1c5      	cbz	r5, 8016f2c <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 8016efa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016efc:	b29b      	uxth	r3, r3
 8016efe:	b1eb      	cbz	r3, 8016f3c <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016f00:	6823      	ldr	r3, [r4, #0]
 8016f02:	689a      	ldr	r2, [r3, #8]
 8016f04:	f012 0f01 	tst.w	r2, #1
 8016f08:	d0ee      	beq.n	8016ee8 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016f0a:	68da      	ldr	r2, [r3, #12]
 8016f0c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016f0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016f10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016f12:	3302      	adds	r3, #2
 8016f14:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8016f16:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8016f1a:	fa1f fc8c 	uxth.w	ip, ip
 8016f1e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8016f22:	fa1f fc8c 	uxth.w	ip, ip
 8016f26:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8016f2a:	e7e6      	b.n	8016efa <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8016f32:	2300      	movs	r3, #0
 8016f34:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8016f38:	2603      	movs	r6, #3
 8016f3a:	e012      	b.n	8016f62 <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016f3c:	463a      	mov	r2, r7
 8016f3e:	4629      	mov	r1, r5
 8016f40:	4620      	mov	r0, r4
 8016f42:	f7ff fc9f 	bl	8016884 <SPI_EndRxTransaction>
 8016f46:	b108      	cbz	r0, 8016f4c <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016f48:	2320      	movs	r3, #32
 8016f4a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8016f4c:	2301      	movs	r3, #1
 8016f4e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8016f52:	2300      	movs	r3, #0
 8016f54:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016f58:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016f5a:	b913      	cbnz	r3, 8016f62 <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 8016f5c:	2600      	movs	r6, #0
 8016f5e:	e000      	b.n	8016f62 <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 8016f60:	2602      	movs	r6, #2
}
 8016f62:	4630      	mov	r0, r6
 8016f64:	b003      	add	sp, #12
 8016f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8016f6a:	2602      	movs	r6, #2
 8016f6c:	e7f9      	b.n	8016f62 <HAL_SPI_Receive+0x17c>

08016f6e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8016f6e:	4770      	bx	lr

08016f70 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016f70:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8016f74:	b2db      	uxtb	r3, r3
 8016f76:	2b01      	cmp	r3, #1
 8016f78:	d12f      	bne.n	8016fda <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016f7a:	2302      	movs	r3, #2
 8016f7c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016f80:	6802      	ldr	r2, [r0, #0]
 8016f82:	68d3      	ldr	r3, [r2, #12]
 8016f84:	f043 0301 	orr.w	r3, r3, #1
 8016f88:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016f8a:	6803      	ldr	r3, [r0, #0]
 8016f8c:	4a15      	ldr	r2, [pc, #84]	@ (8016fe4 <HAL_TIM_Base_Start_IT+0x74>)
 8016f8e:	4293      	cmp	r3, r2
 8016f90:	d018      	beq.n	8016fc4 <HAL_TIM_Base_Start_IT+0x54>
 8016f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016f96:	d015      	beq.n	8016fc4 <HAL_TIM_Base_Start_IT+0x54>
 8016f98:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8016f9c:	4293      	cmp	r3, r2
 8016f9e:	d011      	beq.n	8016fc4 <HAL_TIM_Base_Start_IT+0x54>
 8016fa0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016fa4:	4293      	cmp	r3, r2
 8016fa6:	d00d      	beq.n	8016fc4 <HAL_TIM_Base_Start_IT+0x54>
 8016fa8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016fac:	4293      	cmp	r3, r2
 8016fae:	d009      	beq.n	8016fc4 <HAL_TIM_Base_Start_IT+0x54>
 8016fb0:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8016fb4:	4293      	cmp	r3, r2
 8016fb6:	d005      	beq.n	8016fc4 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016fb8:	681a      	ldr	r2, [r3, #0]
 8016fba:	f042 0201 	orr.w	r2, r2, #1
 8016fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016fc0:	2000      	movs	r0, #0
 8016fc2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016fc4:	689a      	ldr	r2, [r3, #8]
 8016fc6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016fca:	2a06      	cmp	r2, #6
 8016fcc:	d007      	beq.n	8016fde <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	f042 0201 	orr.w	r2, r2, #1
 8016fd4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8016fd6:	2000      	movs	r0, #0
 8016fd8:	4770      	bx	lr
    return HAL_ERROR;
 8016fda:	2001      	movs	r0, #1
 8016fdc:	4770      	bx	lr
  return HAL_OK;
 8016fde:	2000      	movs	r0, #0
}
 8016fe0:	4770      	bx	lr
 8016fe2:	bf00      	nop
 8016fe4:	40010000 	.word	0x40010000

08016fe8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016fe8:	4770      	bx	lr

08016fea <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016fea:	4770      	bx	lr

08016fec <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016fec:	4770      	bx	lr

08016fee <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016fee:	4770      	bx	lr

08016ff0 <HAL_TIM_IRQHandler>:
{
 8016ff0:	b570      	push	{r4, r5, r6, lr}
 8016ff2:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8016ff4:	6803      	ldr	r3, [r0, #0]
 8016ff6:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016ff8:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8016ffa:	f015 0f02 	tst.w	r5, #2
 8016ffe:	d010      	beq.n	8017022 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8017000:	f016 0f02 	tst.w	r6, #2
 8017004:	d00d      	beq.n	8017022 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017006:	f06f 0202 	mvn.w	r2, #2
 801700a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801700c:	2301      	movs	r3, #1
 801700e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017010:	6803      	ldr	r3, [r0, #0]
 8017012:	699b      	ldr	r3, [r3, #24]
 8017014:	f013 0f03 	tst.w	r3, #3
 8017018:	d05e      	beq.n	80170d8 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 801701a:	f7ff ffe6 	bl	8016fea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801701e:	2300      	movs	r3, #0
 8017020:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8017022:	f015 0f04 	tst.w	r5, #4
 8017026:	d012      	beq.n	801704e <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8017028:	f016 0f04 	tst.w	r6, #4
 801702c:	d00f      	beq.n	801704e <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801702e:	6823      	ldr	r3, [r4, #0]
 8017030:	f06f 0204 	mvn.w	r2, #4
 8017034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017036:	2302      	movs	r3, #2
 8017038:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801703a:	6823      	ldr	r3, [r4, #0]
 801703c:	699b      	ldr	r3, [r3, #24]
 801703e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8017042:	d04f      	beq.n	80170e4 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8017044:	4620      	mov	r0, r4
 8017046:	f7ff ffd0 	bl	8016fea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801704a:	2300      	movs	r3, #0
 801704c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801704e:	f015 0f08 	tst.w	r5, #8
 8017052:	d012      	beq.n	801707a <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8017054:	f016 0f08 	tst.w	r6, #8
 8017058:	d00f      	beq.n	801707a <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801705a:	6823      	ldr	r3, [r4, #0]
 801705c:	f06f 0208 	mvn.w	r2, #8
 8017060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017062:	2304      	movs	r3, #4
 8017064:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017066:	6823      	ldr	r3, [r4, #0]
 8017068:	69db      	ldr	r3, [r3, #28]
 801706a:	f013 0f03 	tst.w	r3, #3
 801706e:	d040      	beq.n	80170f2 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8017070:	4620      	mov	r0, r4
 8017072:	f7ff ffba 	bl	8016fea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017076:	2300      	movs	r3, #0
 8017078:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801707a:	f015 0f10 	tst.w	r5, #16
 801707e:	d012      	beq.n	80170a6 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8017080:	f016 0f10 	tst.w	r6, #16
 8017084:	d00f      	beq.n	80170a6 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017086:	6823      	ldr	r3, [r4, #0]
 8017088:	f06f 0210 	mvn.w	r2, #16
 801708c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801708e:	2308      	movs	r3, #8
 8017090:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017092:	6823      	ldr	r3, [r4, #0]
 8017094:	69db      	ldr	r3, [r3, #28]
 8017096:	f413 7f40 	tst.w	r3, #768	@ 0x300
 801709a:	d031      	beq.n	8017100 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 801709c:	4620      	mov	r0, r4
 801709e:	f7ff ffa4 	bl	8016fea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80170a2:	2300      	movs	r3, #0
 80170a4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80170a6:	f015 0f01 	tst.w	r5, #1
 80170aa:	d002      	beq.n	80170b2 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80170ac:	f016 0f01 	tst.w	r6, #1
 80170b0:	d12d      	bne.n	801710e <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80170b2:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80170b6:	d002      	beq.n	80170be <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80170b8:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80170bc:	d12f      	bne.n	801711e <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80170be:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80170c2:	d002      	beq.n	80170ca <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80170c4:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80170c8:	d131      	bne.n	801712e <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80170ca:	f015 0f20 	tst.w	r5, #32
 80170ce:	d002      	beq.n	80170d6 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80170d0:	f016 0f20 	tst.w	r6, #32
 80170d4:	d133      	bne.n	801713e <HAL_TIM_IRQHandler+0x14e>
}
 80170d6:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80170d8:	f7ff ff86 	bl	8016fe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80170dc:	4620      	mov	r0, r4
 80170de:	f7ff ff85 	bl	8016fec <HAL_TIM_PWM_PulseFinishedCallback>
 80170e2:	e79c      	b.n	801701e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80170e4:	4620      	mov	r0, r4
 80170e6:	f7ff ff7f 	bl	8016fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80170ea:	4620      	mov	r0, r4
 80170ec:	f7ff ff7e 	bl	8016fec <HAL_TIM_PWM_PulseFinishedCallback>
 80170f0:	e7ab      	b.n	801704a <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80170f2:	4620      	mov	r0, r4
 80170f4:	f7ff ff78 	bl	8016fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80170f8:	4620      	mov	r0, r4
 80170fa:	f7ff ff77 	bl	8016fec <HAL_TIM_PWM_PulseFinishedCallback>
 80170fe:	e7ba      	b.n	8017076 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017100:	4620      	mov	r0, r4
 8017102:	f7ff ff71 	bl	8016fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017106:	4620      	mov	r0, r4
 8017108:	f7ff ff70 	bl	8016fec <HAL_TIM_PWM_PulseFinishedCallback>
 801710c:	e7c9      	b.n	80170a2 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801710e:	6823      	ldr	r3, [r4, #0]
 8017110:	f06f 0201 	mvn.w	r2, #1
 8017114:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8017116:	4620      	mov	r0, r4
 8017118:	f7fa fee4 	bl	8011ee4 <HAL_TIM_PeriodElapsedCallback>
 801711c:	e7c9      	b.n	80170b2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801711e:	6823      	ldr	r3, [r4, #0]
 8017120:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8017124:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8017126:	4620      	mov	r0, r4
 8017128:	f000 f895 	bl	8017256 <HAL_TIMEx_BreakCallback>
 801712c:	e7c7      	b.n	80170be <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801712e:	6823      	ldr	r3, [r4, #0]
 8017130:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8017134:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8017136:	4620      	mov	r0, r4
 8017138:	f7ff ff59 	bl	8016fee <HAL_TIM_TriggerCallback>
 801713c:	e7c5      	b.n	80170ca <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801713e:	6823      	ldr	r3, [r4, #0]
 8017140:	f06f 0220 	mvn.w	r2, #32
 8017144:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8017146:	4620      	mov	r0, r4
 8017148:	f000 f884 	bl	8017254 <HAL_TIMEx_CommutCallback>
}
 801714c:	e7c3      	b.n	80170d6 <HAL_TIM_IRQHandler+0xe6>
	...

08017150 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017150:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017152:	4a29      	ldr	r2, [pc, #164]	@ (80171f8 <TIM_Base_SetConfig+0xa8>)
 8017154:	4290      	cmp	r0, r2
 8017156:	d00e      	beq.n	8017176 <TIM_Base_SetConfig+0x26>
 8017158:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801715c:	d00b      	beq.n	8017176 <TIM_Base_SetConfig+0x26>
 801715e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8017162:	4290      	cmp	r0, r2
 8017164:	d007      	beq.n	8017176 <TIM_Base_SetConfig+0x26>
 8017166:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801716a:	4290      	cmp	r0, r2
 801716c:	d003      	beq.n	8017176 <TIM_Base_SetConfig+0x26>
 801716e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017172:	4290      	cmp	r0, r2
 8017174:	d103      	bne.n	801717e <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 801717a:	684a      	ldr	r2, [r1, #4]
 801717c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801717e:	4a1e      	ldr	r2, [pc, #120]	@ (80171f8 <TIM_Base_SetConfig+0xa8>)
 8017180:	4290      	cmp	r0, r2
 8017182:	d01a      	beq.n	80171ba <TIM_Base_SetConfig+0x6a>
 8017184:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8017188:	d017      	beq.n	80171ba <TIM_Base_SetConfig+0x6a>
 801718a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 801718e:	4290      	cmp	r0, r2
 8017190:	d013      	beq.n	80171ba <TIM_Base_SetConfig+0x6a>
 8017192:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017196:	4290      	cmp	r0, r2
 8017198:	d00f      	beq.n	80171ba <TIM_Base_SetConfig+0x6a>
 801719a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801719e:	4290      	cmp	r0, r2
 80171a0:	d00b      	beq.n	80171ba <TIM_Base_SetConfig+0x6a>
 80171a2:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80171a6:	4290      	cmp	r0, r2
 80171a8:	d007      	beq.n	80171ba <TIM_Base_SetConfig+0x6a>
 80171aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80171ae:	4290      	cmp	r0, r2
 80171b0:	d003      	beq.n	80171ba <TIM_Base_SetConfig+0x6a>
 80171b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80171b6:	4290      	cmp	r0, r2
 80171b8:	d103      	bne.n	80171c2 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80171ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80171be:	68ca      	ldr	r2, [r1, #12]
 80171c0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80171c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80171c6:	694a      	ldr	r2, [r1, #20]
 80171c8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80171ca:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80171cc:	688b      	ldr	r3, [r1, #8]
 80171ce:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80171d0:	680b      	ldr	r3, [r1, #0]
 80171d2:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80171d4:	4b08      	ldr	r3, [pc, #32]	@ (80171f8 <TIM_Base_SetConfig+0xa8>)
 80171d6:	4298      	cmp	r0, r3
 80171d8:	d00a      	beq.n	80171f0 <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80171da:	2301      	movs	r3, #1
 80171dc:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80171de:	6903      	ldr	r3, [r0, #16]
 80171e0:	f013 0f01 	tst.w	r3, #1
 80171e4:	d003      	beq.n	80171ee <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80171e6:	6903      	ldr	r3, [r0, #16]
 80171e8:	f023 0301 	bic.w	r3, r3, #1
 80171ec:	6103      	str	r3, [r0, #16]
  }
}
 80171ee:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80171f0:	690b      	ldr	r3, [r1, #16]
 80171f2:	6303      	str	r3, [r0, #48]	@ 0x30
 80171f4:	e7f1      	b.n	80171da <TIM_Base_SetConfig+0x8a>
 80171f6:	bf00      	nop
 80171f8:	40010000 	.word	0x40010000

080171fc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80171fc:	b340      	cbz	r0, 8017250 <HAL_TIM_Base_Init+0x54>
{
 80171fe:	b510      	push	{r4, lr}
 8017200:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8017202:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8017206:	b1f3      	cbz	r3, 8017246 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8017208:	2302      	movs	r3, #2
 801720a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801720e:	4621      	mov	r1, r4
 8017210:	f851 0b04 	ldr.w	r0, [r1], #4
 8017214:	f7ff ff9c 	bl	8017150 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017218:	2301      	movs	r3, #1
 801721a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801721e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8017222:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8017226:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 801722a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801722e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017236:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801723a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 801723e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8017242:	2000      	movs	r0, #0
}
 8017244:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8017246:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 801724a:	f7ff fe90 	bl	8016f6e <HAL_TIM_Base_MspInit>
 801724e:	e7db      	b.n	8017208 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8017250:	2001      	movs	r0, #1
}
 8017252:	4770      	bx	lr

08017254 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017254:	4770      	bx	lr

08017256 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017256:	4770      	bx	lr

08017258 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8017258:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 801725a:	b930      	cbnz	r0, 801726a <SSD1306_Fill+0x12>
 801725c:	2100      	movs	r1, #0
 801725e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017262:	4803      	ldr	r0, [pc, #12]	@ (8017270 <SSD1306_Fill+0x18>)
 8017264:	f014 fbcc 	bl	802ba00 <memset>
}
 8017268:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 801726a:	21ff      	movs	r1, #255	@ 0xff
 801726c:	e7f7      	b.n	801725e <SSD1306_Fill+0x6>
 801726e:	bf00      	nop
 8017270:	20001878 	.word	0x20001878

08017274 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8017274:	287f      	cmp	r0, #127	@ 0x7f
 8017276:	d825      	bhi.n	80172c4 <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 8017278:	293f      	cmp	r1, #63	@ 0x3f
 801727a:	d823      	bhi.n	80172c4 <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 801727c:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 801727e:	4b12      	ldr	r3, [pc, #72]	@ (80172c8 <SSD1306_DrawPixel+0x54>)
 8017280:	791b      	ldrb	r3, [r3, #4]
 8017282:	b113      	cbz	r3, 801728a <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8017284:	fab2 f282 	clz	r2, r2
 8017288:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 801728a:	2a01      	cmp	r2, #1
 801728c:	d00f      	beq.n	80172ae <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 801728e:	08cb      	lsrs	r3, r1, #3
 8017290:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8017294:	4c0d      	ldr	r4, [pc, #52]	@ (80172cc <SSD1306_DrawPixel+0x58>)
 8017296:	5c22      	ldrb	r2, [r4, r0]
 8017298:	f001 0107 	and.w	r1, r1, #7
 801729c:	2301      	movs	r3, #1
 801729e:	408b      	lsls	r3, r1
 80172a0:	43db      	mvns	r3, r3
 80172a2:	b25b      	sxtb	r3, r3
 80172a4:	4013      	ands	r3, r2
 80172a6:	5423      	strb	r3, [r4, r0]
	}
}
 80172a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172ac:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80172ae:	08cb      	lsrs	r3, r1, #3
 80172b0:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80172b4:	4c05      	ldr	r4, [pc, #20]	@ (80172cc <SSD1306_DrawPixel+0x58>)
 80172b6:	5c23      	ldrb	r3, [r4, r0]
 80172b8:	f001 0107 	and.w	r1, r1, #7
 80172bc:	408a      	lsls	r2, r1
 80172be:	4313      	orrs	r3, r2
 80172c0:	5423      	strb	r3, [r4, r0]
 80172c2:	e7f1      	b.n	80172a8 <SSD1306_DrawPixel+0x34>
 80172c4:	4770      	bx	lr
 80172c6:	bf00      	nop
 80172c8:	20001870 	.word	0x20001870
 80172cc:	20001878 	.word	0x20001878

080172d0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80172d0:	4b01      	ldr	r3, [pc, #4]	@ (80172d8 <SSD1306_GotoXY+0x8>)
 80172d2:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80172d4:	8059      	strh	r1, [r3, #2]
}
 80172d6:	4770      	bx	lr
 80172d8:	20001870 	.word	0x20001870

080172dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80172dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172e0:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80172e2:	4b24      	ldr	r3, [pc, #144]	@ (8017374 <SSD1306_Putc+0x98>)
 80172e4:	881b      	ldrh	r3, [r3, #0]
 80172e6:	780a      	ldrb	r2, [r1, #0]
 80172e8:	4413      	add	r3, r2
	if (
 80172ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80172ec:	dc3e      	bgt.n	801736c <SSD1306_Putc+0x90>
 80172ee:	4681      	mov	r9, r0
 80172f0:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80172f2:	4b20      	ldr	r3, [pc, #128]	@ (8017374 <SSD1306_Putc+0x98>)
 80172f4:	885b      	ldrh	r3, [r3, #2]
 80172f6:	784a      	ldrb	r2, [r1, #1]
 80172f8:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80172fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80172fc:	dc38      	bgt.n	8017370 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80172fe:	2600      	movs	r6, #0
 8017300:	e020      	b.n	8017344 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8017302:	4b1c      	ldr	r3, [pc, #112]	@ (8017374 <SSD1306_Putc+0x98>)
 8017304:	8818      	ldrh	r0, [r3, #0]
 8017306:	8859      	ldrh	r1, [r3, #2]
 8017308:	4431      	add	r1, r6
 801730a:	4420      	add	r0, r4
 801730c:	fab8 f288 	clz	r2, r8
 8017310:	0952      	lsrs	r2, r2, #5
 8017312:	b289      	uxth	r1, r1
 8017314:	b280      	uxth	r0, r0
 8017316:	f7ff ffad 	bl	8017274 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 801731a:	3401      	adds	r4, #1
 801731c:	782b      	ldrb	r3, [r5, #0]
 801731e:	42a3      	cmp	r3, r4
 8017320:	d90f      	bls.n	8017342 <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 8017322:	fa07 f304 	lsl.w	r3, r7, r4
 8017326:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 801732a:	d0ea      	beq.n	8017302 <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 801732c:	4b11      	ldr	r3, [pc, #68]	@ (8017374 <SSD1306_Putc+0x98>)
 801732e:	8818      	ldrh	r0, [r3, #0]
 8017330:	8859      	ldrh	r1, [r3, #2]
 8017332:	4431      	add	r1, r6
 8017334:	4420      	add	r0, r4
 8017336:	4642      	mov	r2, r8
 8017338:	b289      	uxth	r1, r1
 801733a:	b280      	uxth	r0, r0
 801733c:	f7ff ff9a 	bl	8017274 <SSD1306_DrawPixel>
 8017340:	e7eb      	b.n	801731a <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8017342:	3601      	adds	r6, #1
 8017344:	786a      	ldrb	r2, [r5, #1]
 8017346:	42b2      	cmp	r2, r6
 8017348:	d908      	bls.n	801735c <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 801734a:	6869      	ldr	r1, [r5, #4]
 801734c:	f1a9 0320 	sub.w	r3, r9, #32
 8017350:	fb02 6303 	mla	r3, r2, r3, r6
 8017354:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8017358:	2400      	movs	r4, #0
 801735a:	e7df      	b.n	801731c <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 801735c:	4a05      	ldr	r2, [pc, #20]	@ (8017374 <SSD1306_Putc+0x98>)
 801735e:	8813      	ldrh	r3, [r2, #0]
 8017360:	7829      	ldrb	r1, [r5, #0]
 8017362:	440b      	add	r3, r1
 8017364:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8017366:	4648      	mov	r0, r9
}
 8017368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 801736c:	2000      	movs	r0, #0
 801736e:	e7fb      	b.n	8017368 <SSD1306_Putc+0x8c>
 8017370:	2000      	movs	r0, #0
 8017372:	e7f9      	b.n	8017368 <SSD1306_Putc+0x8c>
 8017374:	20001870 	.word	0x20001870

08017378 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8017378:	b570      	push	{r4, r5, r6, lr}
 801737a:	4604      	mov	r4, r0
 801737c:	460e      	mov	r6, r1
 801737e:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8017380:	e000      	b.n	8017384 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 8017382:	3401      	adds	r4, #1
	while (*str) {
 8017384:	7820      	ldrb	r0, [r4, #0]
 8017386:	b138      	cbz	r0, 8017398 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8017388:	462a      	mov	r2, r5
 801738a:	4631      	mov	r1, r6
 801738c:	f7ff ffa6 	bl	80172dc <SSD1306_Putc>
 8017390:	4603      	mov	r3, r0
 8017392:	7820      	ldrb	r0, [r4, #0]
 8017394:	4283      	cmp	r3, r0
 8017396:	d0f4      	beq.n	8017382 <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8017398:	bd70      	pop	{r4, r5, r6, pc}
	...

0801739c <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 801739c:	b500      	push	{lr}
 801739e:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 80173a0:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 80173a4:	f04f 0c00 	mov.w	ip, #0
 80173a8:	e009      	b.n	80173be <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 80173aa:	f10c 0e01 	add.w	lr, ip, #1
 80173ae:	f812 100c 	ldrb.w	r1, [r2, ip]
 80173b2:	f10d 0c08 	add.w	ip, sp, #8
 80173b6:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 80173ba:	fa5f fc8e 	uxtb.w	ip, lr
 80173be:	459c      	cmp	ip, r3
 80173c0:	d3f3      	bcc.n	80173aa <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80173c2:	3301      	adds	r3, #1
 80173c4:	220a      	movs	r2, #10
 80173c6:	9200      	str	r2, [sp, #0]
 80173c8:	b29b      	uxth	r3, r3
 80173ca:	aa02      	add	r2, sp, #8
 80173cc:	4601      	mov	r1, r0
 80173ce:	4803      	ldr	r0, [pc, #12]	@ (80173dc <ssd1306_I2C_WriteMulti+0x40>)
 80173d0:	f7fe fcd0 	bl	8015d74 <HAL_I2C_Master_Transmit>
}
 80173d4:	b043      	add	sp, #268	@ 0x10c
 80173d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80173da:	bf00      	nop
 80173dc:	2000083c 	.word	0x2000083c

080173e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80173e0:	b500      	push	{lr}
 80173e2:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 80173e4:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 80173e8:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80173ec:	230a      	movs	r3, #10
 80173ee:	9300      	str	r3, [sp, #0]
 80173f0:	2302      	movs	r3, #2
 80173f2:	aa03      	add	r2, sp, #12
 80173f4:	4601      	mov	r1, r0
 80173f6:	4803      	ldr	r0, [pc, #12]	@ (8017404 <ssd1306_I2C_Write+0x24>)
 80173f8:	f7fe fcbc 	bl	8015d74 <HAL_I2C_Master_Transmit>
}
 80173fc:	b005      	add	sp, #20
 80173fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8017402:	bf00      	nop
 8017404:	2000083c 	.word	0x2000083c

08017408 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8017408:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 801740a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801740e:	2201      	movs	r2, #1
 8017410:	2178      	movs	r1, #120	@ 0x78
 8017412:	4850      	ldr	r0, [pc, #320]	@ (8017554 <SSD1306_Init+0x14c>)
 8017414:	f7fe fd6a 	bl	8015eec <HAL_I2C_IsDeviceReady>
 8017418:	2800      	cmp	r0, #0
 801741a:	f040 8099 	bne.w	8017550 <SSD1306_Init+0x148>
	uint32_t p = 2500;
 801741e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8017422:	e000      	b.n	8017426 <SSD1306_Init+0x1e>
		p--;
 8017424:	3b01      	subs	r3, #1
	while(p>0)
 8017426:	2b00      	cmp	r3, #0
 8017428:	d1fc      	bne.n	8017424 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 801742a:	22ae      	movs	r2, #174	@ 0xae
 801742c:	2100      	movs	r1, #0
 801742e:	2078      	movs	r0, #120	@ 0x78
 8017430:	f7ff ffd6 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8017434:	2220      	movs	r2, #32
 8017436:	2100      	movs	r1, #0
 8017438:	2078      	movs	r0, #120	@ 0x78
 801743a:	f7ff ffd1 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 801743e:	2210      	movs	r2, #16
 8017440:	2100      	movs	r1, #0
 8017442:	2078      	movs	r0, #120	@ 0x78
 8017444:	f7ff ffcc 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8017448:	22b0      	movs	r2, #176	@ 0xb0
 801744a:	2100      	movs	r1, #0
 801744c:	2078      	movs	r0, #120	@ 0x78
 801744e:	f7ff ffc7 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8017452:	22c8      	movs	r2, #200	@ 0xc8
 8017454:	2100      	movs	r1, #0
 8017456:	2078      	movs	r0, #120	@ 0x78
 8017458:	f7ff ffc2 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 801745c:	2200      	movs	r2, #0
 801745e:	4611      	mov	r1, r2
 8017460:	2078      	movs	r0, #120	@ 0x78
 8017462:	f7ff ffbd 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8017466:	2210      	movs	r2, #16
 8017468:	2100      	movs	r1, #0
 801746a:	2078      	movs	r0, #120	@ 0x78
 801746c:	f7ff ffb8 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8017470:	2240      	movs	r2, #64	@ 0x40
 8017472:	2100      	movs	r1, #0
 8017474:	2078      	movs	r0, #120	@ 0x78
 8017476:	f7ff ffb3 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 801747a:	2281      	movs	r2, #129	@ 0x81
 801747c:	2100      	movs	r1, #0
 801747e:	2078      	movs	r0, #120	@ 0x78
 8017480:	f7ff ffae 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8017484:	22ff      	movs	r2, #255	@ 0xff
 8017486:	2100      	movs	r1, #0
 8017488:	2078      	movs	r0, #120	@ 0x78
 801748a:	f7ff ffa9 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 801748e:	22a1      	movs	r2, #161	@ 0xa1
 8017490:	2100      	movs	r1, #0
 8017492:	2078      	movs	r0, #120	@ 0x78
 8017494:	f7ff ffa4 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8017498:	22a6      	movs	r2, #166	@ 0xa6
 801749a:	2100      	movs	r1, #0
 801749c:	2078      	movs	r0, #120	@ 0x78
 801749e:	f7ff ff9f 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80174a2:	22a8      	movs	r2, #168	@ 0xa8
 80174a4:	2100      	movs	r1, #0
 80174a6:	2078      	movs	r0, #120	@ 0x78
 80174a8:	f7ff ff9a 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80174ac:	223f      	movs	r2, #63	@ 0x3f
 80174ae:	2100      	movs	r1, #0
 80174b0:	2078      	movs	r0, #120	@ 0x78
 80174b2:	f7ff ff95 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80174b6:	22a4      	movs	r2, #164	@ 0xa4
 80174b8:	2100      	movs	r1, #0
 80174ba:	2078      	movs	r0, #120	@ 0x78
 80174bc:	f7ff ff90 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80174c0:	22d3      	movs	r2, #211	@ 0xd3
 80174c2:	2100      	movs	r1, #0
 80174c4:	2078      	movs	r0, #120	@ 0x78
 80174c6:	f7ff ff8b 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80174ca:	2200      	movs	r2, #0
 80174cc:	4611      	mov	r1, r2
 80174ce:	2078      	movs	r0, #120	@ 0x78
 80174d0:	f7ff ff86 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80174d4:	22d5      	movs	r2, #213	@ 0xd5
 80174d6:	2100      	movs	r1, #0
 80174d8:	2078      	movs	r0, #120	@ 0x78
 80174da:	f7ff ff81 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80174de:	22f0      	movs	r2, #240	@ 0xf0
 80174e0:	2100      	movs	r1, #0
 80174e2:	2078      	movs	r0, #120	@ 0x78
 80174e4:	f7ff ff7c 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80174e8:	22d9      	movs	r2, #217	@ 0xd9
 80174ea:	2100      	movs	r1, #0
 80174ec:	2078      	movs	r0, #120	@ 0x78
 80174ee:	f7ff ff77 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80174f2:	2222      	movs	r2, #34	@ 0x22
 80174f4:	2100      	movs	r1, #0
 80174f6:	2078      	movs	r0, #120	@ 0x78
 80174f8:	f7ff ff72 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80174fc:	22da      	movs	r2, #218	@ 0xda
 80174fe:	2100      	movs	r1, #0
 8017500:	2078      	movs	r0, #120	@ 0x78
 8017502:	f7ff ff6d 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8017506:	2212      	movs	r2, #18
 8017508:	2100      	movs	r1, #0
 801750a:	2078      	movs	r0, #120	@ 0x78
 801750c:	f7ff ff68 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8017510:	22db      	movs	r2, #219	@ 0xdb
 8017512:	2100      	movs	r1, #0
 8017514:	2078      	movs	r0, #120	@ 0x78
 8017516:	f7ff ff63 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 801751a:	2220      	movs	r2, #32
 801751c:	2100      	movs	r1, #0
 801751e:	2078      	movs	r0, #120	@ 0x78
 8017520:	f7ff ff5e 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8017524:	228d      	movs	r2, #141	@ 0x8d
 8017526:	2100      	movs	r1, #0
 8017528:	2078      	movs	r0, #120	@ 0x78
 801752a:	f7ff ff59 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 801752e:	2214      	movs	r2, #20
 8017530:	2100      	movs	r1, #0
 8017532:	2078      	movs	r0, #120	@ 0x78
 8017534:	f7ff ff54 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8017538:	22af      	movs	r2, #175	@ 0xaf
 801753a:	2100      	movs	r1, #0
 801753c:	2078      	movs	r0, #120	@ 0x78
 801753e:	f7ff ff4f 	bl	80173e0 <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 8017542:	4b05      	ldr	r3, [pc, #20]	@ (8017558 <SSD1306_Init+0x150>)
 8017544:	2200      	movs	r2, #0
 8017546:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8017548:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 801754a:	2001      	movs	r0, #1
 801754c:	7158      	strb	r0, [r3, #5]
}
 801754e:	bd08      	pop	{r3, pc}
		return 0;
 8017550:	2000      	movs	r0, #0
 8017552:	e7fc      	b.n	801754e <SSD1306_Init+0x146>
 8017554:	2000083c 	.word	0x2000083c
 8017558:	20001870 	.word	0x20001870

0801755c <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 801755c:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 801755e:	2400      	movs	r4, #0
 8017560:	e01a      	b.n	8017598 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8017562:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 8017566:	b2d2      	uxtb	r2, r2
 8017568:	2100      	movs	r1, #0
 801756a:	2078      	movs	r0, #120	@ 0x78
 801756c:	f7ff ff38 	bl	80173e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8017570:	2200      	movs	r2, #0
 8017572:	4611      	mov	r1, r2
 8017574:	2078      	movs	r0, #120	@ 0x78
 8017576:	f7ff ff33 	bl	80173e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 801757a:	2210      	movs	r2, #16
 801757c:	2100      	movs	r1, #0
 801757e:	2078      	movs	r0, #120	@ 0x78
 8017580:	f7ff ff2e 	bl	80173e0 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8017584:	2380      	movs	r3, #128	@ 0x80
 8017586:	4a06      	ldr	r2, [pc, #24]	@ (80175a0 <SSD1306_UpdateScreen+0x44>)
 8017588:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 801758c:	2140      	movs	r1, #64	@ 0x40
 801758e:	2078      	movs	r0, #120	@ 0x78
 8017590:	f7ff ff04 	bl	801739c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8017594:	3401      	adds	r4, #1
 8017596:	b2e4      	uxtb	r4, r4
 8017598:	2c07      	cmp	r4, #7
 801759a:	d9e2      	bls.n	8017562 <SSD1306_UpdateScreen+0x6>
}
 801759c:	bd10      	pop	{r4, pc}
 801759e:	bf00      	nop
 80175a0:	20001878 	.word	0x20001878

080175a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80175a4:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80175a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80175aa:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80175ac:	f001 fd4a 	bl	8019044 <xTaskGetSchedulerState>
 80175b0:	2801      	cmp	r0, #1
 80175b2:	d100      	bne.n	80175b6 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80175b4:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 80175b6:	f002 f94d 	bl	8019854 <xPortSysTickHandler>
}
 80175ba:	e7fb      	b.n	80175b4 <SysTick_Handler+0x10>

080175bc <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80175bc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80175c0:	b92b      	cbnz	r3, 80175ce <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80175c2:	4b06      	ldr	r3, [pc, #24]	@ (80175dc <osKernelInitialize+0x20>)
 80175c4:	6818      	ldr	r0, [r3, #0]
 80175c6:	b928      	cbnz	r0, 80175d4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80175c8:	2201      	movs	r2, #1
 80175ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80175cc:	4770      	bx	lr
    stat = osErrorISR;
 80175ce:	f06f 0005 	mvn.w	r0, #5
 80175d2:	4770      	bx	lr
    } else {
      stat = osError;
 80175d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 80175d8:	4770      	bx	lr
 80175da:	bf00      	nop
 80175dc:	20002578 	.word	0x20002578

080175e0 <osKernelStart>:
 80175e0:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80175e4:	b973      	cbnz	r3, 8017604 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80175e6:	4b0a      	ldr	r3, [pc, #40]	@ (8017610 <osKernelStart+0x30>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	2b01      	cmp	r3, #1
 80175ec:	d10d      	bne.n	801760a <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 80175ee:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80175f0:	2400      	movs	r4, #0
 80175f2:	4b08      	ldr	r3, [pc, #32]	@ (8017614 <osKernelStart+0x34>)
 80175f4:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80175f6:	4b06      	ldr	r3, [pc, #24]	@ (8017610 <osKernelStart+0x30>)
 80175f8:	2202      	movs	r2, #2
 80175fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80175fc:	f001 fa6a 	bl	8018ad4 <vTaskStartScheduler>
      stat = osOK;
 8017600:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8017602:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8017604:	f06f 0005 	mvn.w	r0, #5
 8017608:	4770      	bx	lr
      stat = osError;
 801760a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 801760e:	4770      	bx	lr
 8017610:	20002578 	.word	0x20002578
 8017614:	e000ed00 	.word	0xe000ed00

08017618 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801761a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801761c:	2400      	movs	r4, #0
 801761e:	9405      	str	r4, [sp, #20]
 8017620:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8017624:	bb7c      	cbnz	r4, 8017686 <osThreadNew+0x6e>
 8017626:	b370      	cbz	r0, 8017686 <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8017628:	b32a      	cbz	r2, 8017676 <osThreadNew+0x5e>
      if (attr->name != NULL) {
 801762a:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 801762c:	6993      	ldr	r3, [r2, #24]
 801762e:	b903      	cbnz	r3, 8017632 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8017630:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017632:	1e5c      	subs	r4, r3, #1
 8017634:	2c37      	cmp	r4, #55	@ 0x37
 8017636:	d84a      	bhi.n	80176ce <osThreadNew+0xb6>
 8017638:	6854      	ldr	r4, [r2, #4]
 801763a:	f014 0f01 	tst.w	r4, #1
 801763e:	d148      	bne.n	80176d2 <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8017640:	6956      	ldr	r6, [r2, #20]
 8017642:	b176      	cbz	r6, 8017662 <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017644:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017648:	6894      	ldr	r4, [r2, #8]
 801764a:	b134      	cbz	r4, 801765a <osThreadNew+0x42>
 801764c:	68d7      	ldr	r7, [r2, #12]
 801764e:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 8017652:	d302      	bcc.n	801765a <osThreadNew+0x42>
 8017654:	6917      	ldr	r7, [r2, #16]
 8017656:	b107      	cbz	r7, 801765a <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017658:	b9c6      	cbnz	r6, 801768c <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801765a:	b12c      	cbz	r4, 8017668 <osThreadNew+0x50>
    mem  = -1;
 801765c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017660:	e00e      	b.n	8017680 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8017662:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8017666:	e7ef      	b.n	8017648 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017668:	68d4      	ldr	r4, [r2, #12]
 801766a:	b98c      	cbnz	r4, 8017690 <osThreadNew+0x78>
 801766c:	6914      	ldr	r4, [r2, #16]
 801766e:	b194      	cbz	r4, 8017696 <osThreadNew+0x7e>
    mem  = -1;
 8017670:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017674:	e004      	b.n	8017680 <osThreadNew+0x68>
    name = NULL;
 8017676:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8017678:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 801767a:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 801767c:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 8017680:	2c01      	cmp	r4, #1
 8017682:	d00a      	beq.n	801769a <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8017684:	b1ac      	cbz	r4, 80176b2 <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8017686:	9805      	ldr	r0, [sp, #20]
}
 8017688:	b007      	add	sp, #28
 801768a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 801768c:	2401      	movs	r4, #1
 801768e:	e7f7      	b.n	8017680 <osThreadNew+0x68>
    mem  = -1;
 8017690:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017694:	e7f4      	b.n	8017680 <osThreadNew+0x68>
          mem = 0;
 8017696:	2400      	movs	r4, #0
 8017698:	e7f2      	b.n	8017680 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801769a:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801769c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801769e:	9202      	str	r2, [sp, #8]
 80176a0:	9401      	str	r4, [sp, #4]
 80176a2:	9300      	str	r3, [sp, #0]
 80176a4:	460b      	mov	r3, r1
 80176a6:	4662      	mov	r2, ip
 80176a8:	4629      	mov	r1, r5
 80176aa:	f001 f9a3 	bl	80189f4 <xTaskCreateStatic>
 80176ae:	9005      	str	r0, [sp, #20]
 80176b0:	e7e9      	b.n	8017686 <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80176b2:	aa05      	add	r2, sp, #20
 80176b4:	9201      	str	r2, [sp, #4]
 80176b6:	9300      	str	r3, [sp, #0]
 80176b8:	460b      	mov	r3, r1
 80176ba:	fa1f f28c 	uxth.w	r2, ip
 80176be:	4629      	mov	r1, r5
 80176c0:	f001 f9d5 	bl	8018a6e <xTaskCreate>
 80176c4:	2801      	cmp	r0, #1
 80176c6:	d0de      	beq.n	8017686 <osThreadNew+0x6e>
            hTask = NULL;
 80176c8:	2300      	movs	r3, #0
 80176ca:	9305      	str	r3, [sp, #20]
 80176cc:	e7db      	b.n	8017686 <osThreadNew+0x6e>
        return (NULL);
 80176ce:	2000      	movs	r0, #0
 80176d0:	e7da      	b.n	8017688 <osThreadNew+0x70>
 80176d2:	2000      	movs	r0, #0
 80176d4:	e7d8      	b.n	8017688 <osThreadNew+0x70>

080176d6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80176d6:	b508      	push	{r3, lr}
 80176d8:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80176dc:	b933      	cbnz	r3, 80176ec <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80176de:	b908      	cbnz	r0, 80176e4 <osDelay+0xe>
    stat = osOK;
 80176e0:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80176e2:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 80176e4:	f001 fb62 	bl	8018dac <vTaskDelay>
    stat = osOK;
 80176e8:	2000      	movs	r0, #0
 80176ea:	e7fa      	b.n	80176e2 <osDelay+0xc>
    stat = osErrorISR;
 80176ec:	f06f 0005 	mvn.w	r0, #5
 80176f0:	e7f7      	b.n	80176e2 <osDelay+0xc>

080176f2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80176f2:	b570      	push	{r4, r5, r6, lr}
 80176f4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d13c      	bne.n	8017776 <osMutexNew+0x84>
 80176fc:	4604      	mov	r4, r0
    if (attr != NULL) {
 80176fe:	b100      	cbz	r0, 8017702 <osMutexNew+0x10>
      type = attr->attr_bits;
 8017700:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8017702:	f013 0601 	ands.w	r6, r3, #1
 8017706:	d000      	beq.n	801770a <osMutexNew+0x18>
      rmtx = 1U;
 8017708:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801770a:	f013 0f08 	tst.w	r3, #8
 801770e:	d135      	bne.n	801777c <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 8017710:	b344      	cbz	r4, 8017764 <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8017712:	68a1      	ldr	r1, [r4, #8]
 8017714:	b111      	cbz	r1, 801771c <osMutexNew+0x2a>
 8017716:	68e3      	ldr	r3, [r4, #12]
 8017718:	2b4f      	cmp	r3, #79	@ 0x4f
 801771a:	d818      	bhi.n	801774e <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801771c:	b191      	cbz	r1, 8017744 <osMutexNew+0x52>
      mem = -1;
 801771e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8017722:	bb6b      	cbnz	r3, 8017780 <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8017724:	b316      	cbz	r6, 801776c <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8017726:	2004      	movs	r0, #4
 8017728:	f000 fc04 	bl	8017f34 <xQueueCreateMutex>
 801772c:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801772e:	b31d      	cbz	r5, 8017778 <osMutexNew+0x86>
        if (attr != NULL) {
 8017730:	b104      	cbz	r4, 8017734 <osMutexNew+0x42>
          name = attr->name;
 8017732:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8017734:	4621      	mov	r1, r4
 8017736:	4628      	mov	r0, r5
 8017738:	f000 ff64 	bl	8018604 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801773c:	b1e6      	cbz	r6, 8017778 <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801773e:	f045 0501 	orr.w	r5, r5, #1
 8017742:	e019      	b.n	8017778 <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017744:	68e3      	ldr	r3, [r4, #12]
 8017746:	b17b      	cbz	r3, 8017768 <osMutexNew+0x76>
      mem = -1;
 8017748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801774c:	e7e9      	b.n	8017722 <osMutexNew+0x30>
          if (rmtx != 0U) {
 801774e:	b126      	cbz	r6, 801775a <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8017750:	2004      	movs	r0, #4
 8017752:	f000 fbfa 	bl	8017f4a <xQueueCreateMutexStatic>
 8017756:	4605      	mov	r5, r0
 8017758:	e7e9      	b.n	801772e <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801775a:	2001      	movs	r0, #1
 801775c:	f000 fbf5 	bl	8017f4a <xQueueCreateMutexStatic>
 8017760:	4605      	mov	r5, r0
 8017762:	e7e4      	b.n	801772e <osMutexNew+0x3c>
        mem = 0;
 8017764:	2300      	movs	r3, #0
 8017766:	e7dc      	b.n	8017722 <osMutexNew+0x30>
            mem = 0;
 8017768:	2300      	movs	r3, #0
 801776a:	e7da      	b.n	8017722 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 801776c:	2001      	movs	r0, #1
 801776e:	f000 fbe1 	bl	8017f34 <xQueueCreateMutex>
 8017772:	4605      	mov	r5, r0
 8017774:	e7db      	b.n	801772e <osMutexNew+0x3c>
  hMutex = NULL;
 8017776:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8017778:	4628      	mov	r0, r5
 801777a:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 801777c:	2500      	movs	r5, #0
 801777e:	e7fb      	b.n	8017778 <osMutexNew+0x86>
 8017780:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8017782:	e7f9      	b.n	8017778 <osMutexNew+0x86>

08017784 <osMutexAcquire>:
 8017784:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8017788:	b9da      	cbnz	r2, 80177c2 <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801778a:	b510      	push	{r4, lr}
 801778c:	4603      	mov	r3, r0
 801778e:	460c      	mov	r4, r1
 8017790:	f020 0001 	bic.w	r0, r0, #1
 8017794:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8017798:	2b01      	cmp	r3, #1
 801779a:	d915      	bls.n	80177c8 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 801779c:	b141      	cbz	r1, 80177b0 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801779e:	4621      	mov	r1, r4
 80177a0:	f000 fdeb 	bl	801837a <xQueueTakeMutexRecursive>
 80177a4:	2801      	cmp	r0, #1
 80177a6:	d012      	beq.n	80177ce <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 80177a8:	b19c      	cbz	r4, 80177d2 <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 80177aa:	f06f 0001 	mvn.w	r0, #1
 80177ae:	e00f      	b.n	80177d0 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80177b0:	4621      	mov	r1, r4
 80177b2:	f000 fd0f 	bl	80181d4 <xQueueSemaphoreTake>
 80177b6:	2801      	cmp	r0, #1
 80177b8:	d00e      	beq.n	80177d8 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 80177ba:	b17c      	cbz	r4, 80177dc <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 80177bc:	f06f 0001 	mvn.w	r0, #1
 80177c0:	e006      	b.n	80177d0 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 80177c2:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80177c6:	4770      	bx	lr
    stat = osErrorParameter;
 80177c8:	f06f 0003 	mvn.w	r0, #3
 80177cc:	e000      	b.n	80177d0 <osMutexAcquire+0x4c>
  stat = osOK;
 80177ce:	2000      	movs	r0, #0
}
 80177d0:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 80177d2:	f06f 0002 	mvn.w	r0, #2
 80177d6:	e7fb      	b.n	80177d0 <osMutexAcquire+0x4c>
  stat = osOK;
 80177d8:	2000      	movs	r0, #0
 80177da:	e7f9      	b.n	80177d0 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 80177dc:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80177e0:	e7f6      	b.n	80177d0 <osMutexAcquire+0x4c>

080177e2 <osMutexRelease>:
 80177e2:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80177e6:	b9ba      	cbnz	r2, 8017818 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80177e8:	b508      	push	{r3, lr}
 80177ea:	4603      	mov	r3, r0
 80177ec:	f020 0001 	bic.w	r0, r0, #1
 80177f0:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80177f4:	2b01      	cmp	r3, #1
 80177f6:	d912      	bls.n	801781e <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80177f8:	b129      	cbz	r1, 8017806 <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80177fa:	f000 fbb5 	bl	8017f68 <xQueueGiveMutexRecursive>
 80177fe:	2801      	cmp	r0, #1
 8017800:	d110      	bne.n	8017824 <osMutexRelease+0x42>
  stat = osOK;
 8017802:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8017804:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8017806:	2300      	movs	r3, #0
 8017808:	461a      	mov	r2, r3
 801780a:	4619      	mov	r1, r3
 801780c:	f000 fac2 	bl	8017d94 <xQueueGenericSend>
 8017810:	2801      	cmp	r0, #1
 8017812:	d10a      	bne.n	801782a <osMutexRelease+0x48>
  stat = osOK;
 8017814:	2000      	movs	r0, #0
 8017816:	e7f5      	b.n	8017804 <osMutexRelease+0x22>
    stat = osErrorISR;
 8017818:	f06f 0005 	mvn.w	r0, #5
}
 801781c:	4770      	bx	lr
    stat = osErrorParameter;
 801781e:	f06f 0003 	mvn.w	r0, #3
 8017822:	e7ef      	b.n	8017804 <osMutexRelease+0x22>
        stat = osErrorResource;
 8017824:	f06f 0002 	mvn.w	r0, #2
 8017828:	e7ec      	b.n	8017804 <osMutexRelease+0x22>
        stat = osErrorResource;
 801782a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 801782e:	e7e9      	b.n	8017804 <osMutexRelease+0x22>

08017830 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8017830:	b570      	push	{r4, r5, r6, lr}
 8017832:	b082      	sub	sp, #8
 8017834:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8017838:	2b00      	cmp	r3, #0
 801783a:	d13a      	bne.n	80178b2 <osMessageQueueNew+0x82>
 801783c:	4614      	mov	r4, r2
 801783e:	2800      	cmp	r0, #0
 8017840:	d03b      	beq.n	80178ba <osMessageQueueNew+0x8a>
 8017842:	2900      	cmp	r1, #0
 8017844:	d03b      	beq.n	80178be <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8017846:	b36a      	cbz	r2, 80178a4 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8017848:	6893      	ldr	r3, [r2, #8]
 801784a:	b14b      	cbz	r3, 8017860 <osMessageQueueNew+0x30>
 801784c:	68d2      	ldr	r2, [r2, #12]
 801784e:	2a4f      	cmp	r2, #79	@ 0x4f
 8017850:	d906      	bls.n	8017860 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8017852:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8017854:	b122      	cbz	r2, 8017860 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8017856:	fb01 f500 	mul.w	r5, r1, r0
 801785a:	6966      	ldr	r6, [r4, #20]
 801785c:	42ae      	cmp	r6, r5
 801785e:	d21b      	bcs.n	8017898 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017860:	b173      	cbz	r3, 8017880 <osMessageQueueNew+0x50>
    mem = -1;
 8017862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8017866:	bb63      	cbnz	r3, 80178c2 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8017868:	2200      	movs	r2, #0
 801786a:	f000 fa6f 	bl	8017d4c <xQueueGenericCreate>
 801786e:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8017870:	b305      	cbz	r5, 80178b4 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8017872:	b104      	cbz	r4, 8017876 <osMessageQueueNew+0x46>
        name = attr->name;
 8017874:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8017876:	4621      	mov	r1, r4
 8017878:	4628      	mov	r0, r5
 801787a:	f000 fec3 	bl	8018604 <vQueueAddToRegistry>
 801787e:	e019      	b.n	80178b4 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017880:	68e3      	ldr	r3, [r4, #12]
 8017882:	b98b      	cbnz	r3, 80178a8 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8017884:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017886:	b113      	cbz	r3, 801788e <osMessageQueueNew+0x5e>
    mem = -1;
 8017888:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801788c:	e7eb      	b.n	8017866 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801788e:	6963      	ldr	r3, [r4, #20]
 8017890:	b16b      	cbz	r3, 80178ae <osMessageQueueNew+0x7e>
    mem = -1;
 8017892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017896:	e7e6      	b.n	8017866 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8017898:	2500      	movs	r5, #0
 801789a:	9500      	str	r5, [sp, #0]
 801789c:	f000 fa0c 	bl	8017cb8 <xQueueGenericCreateStatic>
 80178a0:	4605      	mov	r5, r0
 80178a2:	e7e5      	b.n	8017870 <osMessageQueueNew+0x40>
      mem = 0;
 80178a4:	2300      	movs	r3, #0
 80178a6:	e7de      	b.n	8017866 <osMessageQueueNew+0x36>
    mem = -1;
 80178a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80178ac:	e7db      	b.n	8017866 <osMessageQueueNew+0x36>
          mem = 0;
 80178ae:	2300      	movs	r3, #0
 80178b0:	e7d9      	b.n	8017866 <osMessageQueueNew+0x36>
  hQueue = NULL;
 80178b2:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80178b4:	4628      	mov	r0, r5
 80178b6:	b002      	add	sp, #8
 80178b8:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 80178ba:	2500      	movs	r5, #0
 80178bc:	e7fa      	b.n	80178b4 <osMessageQueueNew+0x84>
 80178be:	2500      	movs	r5, #0
 80178c0:	e7f8      	b.n	80178b4 <osMessageQueueNew+0x84>
 80178c2:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 80178c4:	e7f6      	b.n	80178b4 <osMessageQueueNew+0x84>

080178c6 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80178c6:	b510      	push	{r4, lr}
 80178c8:	b082      	sub	sp, #8
 80178ca:	461c      	mov	r4, r3
 80178cc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80178d0:	b1c3      	cbz	r3, 8017904 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80178d2:	b318      	cbz	r0, 801791c <osMessageQueuePut+0x56>
 80178d4:	b329      	cbz	r1, 8017922 <osMessageQueuePut+0x5c>
 80178d6:	bb3c      	cbnz	r4, 8017928 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80178d8:	2300      	movs	r3, #0
 80178da:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80178dc:	aa01      	add	r2, sp, #4
 80178de:	f000 fb63 	bl	8017fa8 <xQueueGenericSendFromISR>
 80178e2:	2801      	cmp	r0, #1
 80178e4:	d123      	bne.n	801792e <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80178e6:	9801      	ldr	r0, [sp, #4]
 80178e8:	b150      	cbz	r0, 8017900 <osMessageQueuePut+0x3a>
 80178ea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80178ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80178f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80178f6:	f3bf 8f4f 	dsb	sy
 80178fa:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80178fe:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8017900:	b002      	add	sp, #8
 8017902:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017904:	b1b0      	cbz	r0, 8017934 <osMessageQueuePut+0x6e>
 8017906:	b1c1      	cbz	r1, 801793a <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017908:	2300      	movs	r3, #0
 801790a:	4622      	mov	r2, r4
 801790c:	f000 fa42 	bl	8017d94 <xQueueGenericSend>
 8017910:	2801      	cmp	r0, #1
 8017912:	d015      	beq.n	8017940 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8017914:	b1b4      	cbz	r4, 8017944 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8017916:	f06f 0001 	mvn.w	r0, #1
 801791a:	e7f1      	b.n	8017900 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 801791c:	f06f 0003 	mvn.w	r0, #3
 8017920:	e7ee      	b.n	8017900 <osMessageQueuePut+0x3a>
 8017922:	f06f 0003 	mvn.w	r0, #3
 8017926:	e7eb      	b.n	8017900 <osMessageQueuePut+0x3a>
 8017928:	f06f 0003 	mvn.w	r0, #3
 801792c:	e7e8      	b.n	8017900 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 801792e:	f06f 0002 	mvn.w	r0, #2
 8017932:	e7e5      	b.n	8017900 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8017934:	f06f 0003 	mvn.w	r0, #3
 8017938:	e7e2      	b.n	8017900 <osMessageQueuePut+0x3a>
 801793a:	f06f 0003 	mvn.w	r0, #3
 801793e:	e7df      	b.n	8017900 <osMessageQueuePut+0x3a>
  stat = osOK;
 8017940:	2000      	movs	r0, #0
 8017942:	e7dd      	b.n	8017900 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8017944:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8017948:	e7da      	b.n	8017900 <osMessageQueuePut+0x3a>

0801794a <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801794a:	b510      	push	{r4, lr}
 801794c:	b082      	sub	sp, #8
 801794e:	461c      	mov	r4, r3
 8017950:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8017954:	b1c3      	cbz	r3, 8017988 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017956:	b310      	cbz	r0, 801799e <osMessageQueueGet+0x54>
 8017958:	b321      	cbz	r1, 80179a4 <osMessageQueueGet+0x5a>
 801795a:	bb34      	cbnz	r4, 80179aa <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 801795c:	2300      	movs	r3, #0
 801795e:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8017960:	aa01      	add	r2, sp, #4
 8017962:	f000 fdd9 	bl	8018518 <xQueueReceiveFromISR>
 8017966:	2801      	cmp	r0, #1
 8017968:	d122      	bne.n	80179b0 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 801796a:	9801      	ldr	r0, [sp, #4]
 801796c:	b150      	cbz	r0, 8017984 <osMessageQueueGet+0x3a>
 801796e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017976:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801797a:	f3bf 8f4f 	dsb	sy
 801797e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8017982:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8017984:	b002      	add	sp, #8
 8017986:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017988:	b1a8      	cbz	r0, 80179b6 <osMessageQueueGet+0x6c>
 801798a:	b1b9      	cbz	r1, 80179bc <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801798c:	4622      	mov	r2, r4
 801798e:	f000 fb72 	bl	8018076 <xQueueReceive>
 8017992:	2801      	cmp	r0, #1
 8017994:	d015      	beq.n	80179c2 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8017996:	b1b4      	cbz	r4, 80179c6 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8017998:	f06f 0001 	mvn.w	r0, #1
 801799c:	e7f2      	b.n	8017984 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 801799e:	f06f 0003 	mvn.w	r0, #3
 80179a2:	e7ef      	b.n	8017984 <osMessageQueueGet+0x3a>
 80179a4:	f06f 0003 	mvn.w	r0, #3
 80179a8:	e7ec      	b.n	8017984 <osMessageQueueGet+0x3a>
 80179aa:	f06f 0003 	mvn.w	r0, #3
 80179ae:	e7e9      	b.n	8017984 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 80179b0:	f06f 0002 	mvn.w	r0, #2
 80179b4:	e7e6      	b.n	8017984 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 80179b6:	f06f 0003 	mvn.w	r0, #3
 80179ba:	e7e3      	b.n	8017984 <osMessageQueueGet+0x3a>
 80179bc:	f06f 0003 	mvn.w	r0, #3
 80179c0:	e7e0      	b.n	8017984 <osMessageQueueGet+0x3a>
  stat = osOK;
 80179c2:	2000      	movs	r0, #0
 80179c4:	e7de      	b.n	8017984 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 80179c6:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80179ca:	e7db      	b.n	8017984 <osMessageQueueGet+0x3a>

080179cc <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 80179cc:	b148      	cbz	r0, 80179e2 <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80179ce:	b508      	push	{r3, lr}
 80179d0:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 80179d4:	b112      	cbz	r2, 80179dc <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80179d6:	f000 fe09 	bl	80185ec <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 80179da:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 80179dc:	f000 fdf3 	bl	80185c6 <uxQueueMessagesWaiting>
 80179e0:	e7fb      	b.n	80179da <osMessageQueueGetCount+0xe>
    count = 0U;
 80179e2:	2000      	movs	r0, #0
}
 80179e4:	4770      	bx	lr

080179e6 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 80179e6:	b508      	push	{r3, lr}
 80179e8:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 80179ec:	b92b      	cbnz	r3, 80179fa <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 80179ee:	b138      	cbz	r0, 8017a00 <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 80179f0:	2100      	movs	r1, #0
 80179f2:	f000 f90e 	bl	8017c12 <xQueueGenericReset>
    stat = osOK;
 80179f6:	2000      	movs	r0, #0
  }

  return (stat);
}
 80179f8:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80179fa:	f06f 0005 	mvn.w	r0, #5
 80179fe:	e7fb      	b.n	80179f8 <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8017a00:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8017a04:	e7f8      	b.n	80179f8 <osMessageQueueReset+0x12>
	...

08017a08 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017a08:	4b03      	ldr	r3, [pc, #12]	@ (8017a18 <vApplicationGetIdleTaskMemory+0x10>)
 8017a0a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017a0c:	4b03      	ldr	r3, [pc, #12]	@ (8017a1c <vApplicationGetIdleTaskMemory+0x14>)
 8017a0e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017a10:	2380      	movs	r3, #128	@ 0x80
 8017a12:	6013      	str	r3, [r2, #0]
}
 8017a14:	4770      	bx	lr
 8017a16:	bf00      	nop
 8017a18:	200023f8 	.word	0x200023f8
 8017a1c:	200021f8 	.word	0x200021f8

08017a20 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017a20:	4b03      	ldr	r3, [pc, #12]	@ (8017a30 <vApplicationGetTimerTaskMemory+0x10>)
 8017a22:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017a24:	4b03      	ldr	r3, [pc, #12]	@ (8017a34 <vApplicationGetTimerTaskMemory+0x14>)
 8017a26:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017a2c:	6013      	str	r3, [r2, #0]
}
 8017a2e:	4770      	bx	lr
 8017a30:	20002078 	.word	0x20002078
 8017a34:	20001c78 	.word	0x20001c78

08017a38 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017a38:	f100 0308 	add.w	r3, r0, #8
 8017a3c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017a3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017a42:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017a44:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017a46:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017a48:	2300      	movs	r3, #0
 8017a4a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017a4c:	4770      	bx	lr

08017a4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017a52:	4770      	bx	lr

08017a54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8017a54:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017a56:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017a58:	689a      	ldr	r2, [r3, #8]
 8017a5a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017a5c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017a5e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017a60:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8017a62:	6803      	ldr	r3, [r0, #0]
 8017a64:	3301      	adds	r3, #1
 8017a66:	6003      	str	r3, [r0, #0]
}
 8017a68:	4770      	bx	lr

08017a6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017a6a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017a6c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017a6e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017a72:	d011      	beq.n	8017a98 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017a74:	f100 0308 	add.w	r3, r0, #8
 8017a78:	461c      	mov	r4, r3
 8017a7a:	685b      	ldr	r3, [r3, #4]
 8017a7c:	681a      	ldr	r2, [r3, #0]
 8017a7e:	42aa      	cmp	r2, r5
 8017a80:	d9fa      	bls.n	8017a78 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017a82:	6863      	ldr	r3, [r4, #4]
 8017a84:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017a86:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017a88:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8017a8a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017a8c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8017a8e:	6803      	ldr	r3, [r0, #0]
 8017a90:	3301      	adds	r3, #1
 8017a92:	6003      	str	r3, [r0, #0]
}
 8017a94:	bc30      	pop	{r4, r5}
 8017a96:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8017a98:	6904      	ldr	r4, [r0, #16]
 8017a9a:	e7f2      	b.n	8017a82 <vListInsert+0x18>

08017a9c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017a9c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017a9e:	6841      	ldr	r1, [r0, #4]
 8017aa0:	6882      	ldr	r2, [r0, #8]
 8017aa2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017aa4:	6841      	ldr	r1, [r0, #4]
 8017aa6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017aa8:	685a      	ldr	r2, [r3, #4]
 8017aaa:	4282      	cmp	r2, r0
 8017aac:	d006      	beq.n	8017abc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017aae:	2200      	movs	r2, #0
 8017ab0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8017ab2:	681a      	ldr	r2, [r3, #0]
 8017ab4:	3a01      	subs	r2, #1
 8017ab6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017ab8:	6818      	ldr	r0, [r3, #0]
}
 8017aba:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017abc:	6882      	ldr	r2, [r0, #8]
 8017abe:	605a      	str	r2, [r3, #4]
 8017ac0:	e7f5      	b.n	8017aae <uxListRemove+0x12>

08017ac2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017ac2:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017ac4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8017ac6:	b118      	cbz	r0, 8017ad0 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017aca:	6818      	ldr	r0, [r3, #0]
 8017acc:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8017ad0:	4770      	bx	lr

08017ad2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017ad2:	b510      	push	{r4, lr}
 8017ad4:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017ad6:	f001 fe4d 	bl	8019774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017ada:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017adc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d004      	beq.n	8017aec <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8017ae2:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8017ae4:	f001 fe68 	bl	80197b8 <vPortExitCritical>

	return xReturn;
}
 8017ae8:	4620      	mov	r0, r4
 8017aea:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8017aec:	2401      	movs	r4, #1
 8017aee:	e7f9      	b.n	8017ae4 <prvIsQueueFull+0x12>

08017af0 <prvIsQueueEmpty>:
{
 8017af0:	b510      	push	{r4, lr}
 8017af2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8017af4:	f001 fe3e 	bl	8019774 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017af8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017afa:	b923      	cbnz	r3, 8017b06 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8017afc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8017afe:	f001 fe5b 	bl	80197b8 <vPortExitCritical>
}
 8017b02:	4620      	mov	r0, r4
 8017b04:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8017b06:	2400      	movs	r4, #0
 8017b08:	e7f9      	b.n	8017afe <prvIsQueueEmpty+0xe>

08017b0a <prvCopyDataToQueue>:
{
 8017b0a:	b570      	push	{r4, r5, r6, lr}
 8017b0c:	4604      	mov	r4, r0
 8017b0e:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017b10:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017b12:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8017b14:	b95a      	cbnz	r2, 8017b2e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017b16:	6803      	ldr	r3, [r0, #0]
 8017b18:	b11b      	cbz	r3, 8017b22 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8017b1a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017b1c:	3601      	adds	r6, #1
 8017b1e:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8017b20:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017b22:	6880      	ldr	r0, [r0, #8]
 8017b24:	f001 faea 	bl	80190fc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017b28:	2300      	movs	r3, #0
 8017b2a:	60a3      	str	r3, [r4, #8]
 8017b2c:	e7f6      	b.n	8017b1c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8017b2e:	b96d      	cbnz	r5, 8017b4c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017b30:	6840      	ldr	r0, [r0, #4]
 8017b32:	f015 f9a1 	bl	802ce78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b36:	6863      	ldr	r3, [r4, #4]
 8017b38:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8017b3a:	4413      	add	r3, r2
 8017b3c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b3e:	68a2      	ldr	r2, [r4, #8]
 8017b40:	4293      	cmp	r3, r2
 8017b42:	d319      	bcc.n	8017b78 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017b44:	6823      	ldr	r3, [r4, #0]
 8017b46:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8017b48:	4628      	mov	r0, r5
 8017b4a:	e7e7      	b.n	8017b1c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017b4c:	68c0      	ldr	r0, [r0, #12]
 8017b4e:	f015 f993 	bl	802ce78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017b52:	68e3      	ldr	r3, [r4, #12]
 8017b54:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8017b56:	4251      	negs	r1, r2
 8017b58:	1a9b      	subs	r3, r3, r2
 8017b5a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b5c:	6822      	ldr	r2, [r4, #0]
 8017b5e:	4293      	cmp	r3, r2
 8017b60:	d202      	bcs.n	8017b68 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017b62:	68a3      	ldr	r3, [r4, #8]
 8017b64:	440b      	add	r3, r1
 8017b66:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8017b68:	2d02      	cmp	r5, #2
 8017b6a:	d001      	beq.n	8017b70 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8017b6c:	2000      	movs	r0, #0
 8017b6e:	e7d5      	b.n	8017b1c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017b70:	b126      	cbz	r6, 8017b7c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8017b72:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8017b74:	2000      	movs	r0, #0
 8017b76:	e7d1      	b.n	8017b1c <prvCopyDataToQueue+0x12>
 8017b78:	4628      	mov	r0, r5
 8017b7a:	e7cf      	b.n	8017b1c <prvCopyDataToQueue+0x12>
 8017b7c:	2000      	movs	r0, #0
 8017b7e:	e7cd      	b.n	8017b1c <prvCopyDataToQueue+0x12>

08017b80 <prvCopyDataFromQueue>:
{
 8017b80:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017b82:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8017b84:	b16a      	cbz	r2, 8017ba2 <prvCopyDataFromQueue+0x22>
{
 8017b86:	b510      	push	{r4, lr}
 8017b88:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b8a:	68d9      	ldr	r1, [r3, #12]
 8017b8c:	4411      	add	r1, r2
 8017b8e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017b90:	689c      	ldr	r4, [r3, #8]
 8017b92:	42a1      	cmp	r1, r4
 8017b94:	d301      	bcc.n	8017b9a <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017b96:	6819      	ldr	r1, [r3, #0]
 8017b98:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017b9a:	68d9      	ldr	r1, [r3, #12]
 8017b9c:	f015 f96c 	bl	802ce78 <memcpy>
}
 8017ba0:	bd10      	pop	{r4, pc}
 8017ba2:	4770      	bx	lr

08017ba4 <prvUnlockQueue>:
{
 8017ba4:	b538      	push	{r3, r4, r5, lr}
 8017ba6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8017ba8:	f001 fde4 	bl	8019774 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8017bac:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8017bb0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017bb2:	e001      	b.n	8017bb8 <prvUnlockQueue+0x14>
			--cTxLock;
 8017bb4:	3c01      	subs	r4, #1
 8017bb6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017bb8:	2c00      	cmp	r4, #0
 8017bba:	dd0a      	ble.n	8017bd2 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017bbc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8017bbe:	b143      	cbz	r3, 8017bd2 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017bc0:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8017bc4:	f001 f99e 	bl	8018f04 <xTaskRemoveFromEventList>
 8017bc8:	2800      	cmp	r0, #0
 8017bca:	d0f3      	beq.n	8017bb4 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8017bcc:	f001 fa2e 	bl	801902c <vTaskMissedYield>
 8017bd0:	e7f0      	b.n	8017bb4 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8017bd2:	23ff      	movs	r3, #255	@ 0xff
 8017bd4:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8017bd8:	f001 fdee 	bl	80197b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8017bdc:	f001 fdca 	bl	8019774 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8017be0:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8017be4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017be6:	e001      	b.n	8017bec <prvUnlockQueue+0x48>
				--cRxLock;
 8017be8:	3c01      	subs	r4, #1
 8017bea:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017bec:	2c00      	cmp	r4, #0
 8017bee:	dd0a      	ble.n	8017c06 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017bf0:	692b      	ldr	r3, [r5, #16]
 8017bf2:	b143      	cbz	r3, 8017c06 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017bf4:	f105 0010 	add.w	r0, r5, #16
 8017bf8:	f001 f984 	bl	8018f04 <xTaskRemoveFromEventList>
 8017bfc:	2800      	cmp	r0, #0
 8017bfe:	d0f3      	beq.n	8017be8 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8017c00:	f001 fa14 	bl	801902c <vTaskMissedYield>
 8017c04:	e7f0      	b.n	8017be8 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8017c06:	23ff      	movs	r3, #255	@ 0xff
 8017c08:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8017c0c:	f001 fdd4 	bl	80197b8 <vPortExitCritical>
}
 8017c10:	bd38      	pop	{r3, r4, r5, pc}

08017c12 <xQueueGenericReset>:
{
 8017c12:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8017c14:	b1e0      	cbz	r0, 8017c50 <xQueueGenericReset+0x3e>
 8017c16:	460d      	mov	r5, r1
 8017c18:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8017c1a:	f001 fdab 	bl	8019774 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017c1e:	6823      	ldr	r3, [r4, #0]
 8017c20:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8017c22:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8017c24:	fb01 3002 	mla	r0, r1, r2, r3
 8017c28:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017c2a:	2000      	movs	r0, #0
 8017c2c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017c2e:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017c30:	3a01      	subs	r2, #1
 8017c32:	fb02 3301 	mla	r3, r2, r1, r3
 8017c36:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017c38:	23ff      	movs	r3, #255	@ 0xff
 8017c3a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017c3e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8017c42:	b9fd      	cbnz	r5, 8017c84 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c44:	6923      	ldr	r3, [r4, #16]
 8017c46:	b963      	cbnz	r3, 8017c62 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8017c48:	f001 fdb6 	bl	80197b8 <vPortExitCritical>
}
 8017c4c:	2001      	movs	r0, #1
 8017c4e:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c54:	f383 8811 	msr	BASEPRI, r3
 8017c58:	f3bf 8f6f 	isb	sy
 8017c5c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8017c60:	e7fe      	b.n	8017c60 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c62:	f104 0010 	add.w	r0, r4, #16
 8017c66:	f001 f94d 	bl	8018f04 <xTaskRemoveFromEventList>
 8017c6a:	2800      	cmp	r0, #0
 8017c6c:	d0ec      	beq.n	8017c48 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8017c6e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017c76:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017c7a:	f3bf 8f4f 	dsb	sy
 8017c7e:	f3bf 8f6f 	isb	sy
 8017c82:	e7e1      	b.n	8017c48 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017c84:	f104 0010 	add.w	r0, r4, #16
 8017c88:	f7ff fed6 	bl	8017a38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017c8c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017c90:	f7ff fed2 	bl	8017a38 <vListInitialise>
 8017c94:	e7d8      	b.n	8017c48 <xQueueGenericReset+0x36>

08017c96 <prvInitialiseNewQueue>:
{
 8017c96:	b538      	push	{r3, r4, r5, lr}
 8017c98:	461d      	mov	r5, r3
 8017c9a:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8017c9c:	460b      	mov	r3, r1
 8017c9e:	b949      	cbnz	r1, 8017cb4 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017ca0:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8017ca2:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017ca4:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017ca6:	2101      	movs	r1, #1
 8017ca8:	4620      	mov	r0, r4
 8017caa:	f7ff ffb2 	bl	8017c12 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8017cae:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8017cb2:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017cb4:	6022      	str	r2, [r4, #0]
 8017cb6:	e7f4      	b.n	8017ca2 <prvInitialiseNewQueue+0xc>

08017cb8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017cb8:	b940      	cbnz	r0, 8017ccc <xQueueGenericCreateStatic+0x14>
 8017cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017cbe:	f383 8811 	msr	BASEPRI, r3
 8017cc2:	f3bf 8f6f 	isb	sy
 8017cc6:	f3bf 8f4f 	dsb	sy
 8017cca:	e7fe      	b.n	8017cca <xQueueGenericCreateStatic+0x12>
	{
 8017ccc:	b510      	push	{r4, lr}
 8017cce:	b084      	sub	sp, #16
 8017cd0:	461c      	mov	r4, r3
 8017cd2:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8017cd4:	b153      	cbz	r3, 8017cec <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017cd6:	b192      	cbz	r2, 8017cfe <xQueueGenericCreateStatic+0x46>
 8017cd8:	b989      	cbnz	r1, 8017cfe <xQueueGenericCreateStatic+0x46>
 8017cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017cde:	f383 8811 	msr	BASEPRI, r3
 8017ce2:	f3bf 8f6f 	isb	sy
 8017ce6:	f3bf 8f4f 	dsb	sy
 8017cea:	e7fe      	b.n	8017cea <xQueueGenericCreateStatic+0x32>
 8017cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017cf0:	f383 8811 	msr	BASEPRI, r3
 8017cf4:	f3bf 8f6f 	isb	sy
 8017cf8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8017cfc:	e7fe      	b.n	8017cfc <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017cfe:	b16a      	cbz	r2, 8017d1c <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017d00:	2350      	movs	r3, #80	@ 0x50
 8017d02:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017d04:	9b03      	ldr	r3, [sp, #12]
 8017d06:	2b50      	cmp	r3, #80	@ 0x50
 8017d08:	d013      	beq.n	8017d32 <xQueueGenericCreateStatic+0x7a>
 8017d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d0e:	f383 8811 	msr	BASEPRI, r3
 8017d12:	f3bf 8f6f 	isb	sy
 8017d16:	f3bf 8f4f 	dsb	sy
 8017d1a:	e7fe      	b.n	8017d1a <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017d1c:	2900      	cmp	r1, #0
 8017d1e:	d0ef      	beq.n	8017d00 <xQueueGenericCreateStatic+0x48>
 8017d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d24:	f383 8811 	msr	BASEPRI, r3
 8017d28:	f3bf 8f6f 	isb	sy
 8017d2c:	f3bf 8f4f 	dsb	sy
 8017d30:	e7fe      	b.n	8017d30 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017d32:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017d34:	2301      	movs	r3, #1
 8017d36:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017d3a:	9400      	str	r4, [sp, #0]
 8017d3c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8017d40:	4660      	mov	r0, ip
 8017d42:	f7ff ffa8 	bl	8017c96 <prvInitialiseNewQueue>
	}
 8017d46:	4620      	mov	r0, r4
 8017d48:	b004      	add	sp, #16
 8017d4a:	bd10      	pop	{r4, pc}

08017d4c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017d4c:	b940      	cbnz	r0, 8017d60 <xQueueGenericCreate+0x14>
 8017d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d52:	f383 8811 	msr	BASEPRI, r3
 8017d56:	f3bf 8f6f 	isb	sy
 8017d5a:	f3bf 8f4f 	dsb	sy
 8017d5e:	e7fe      	b.n	8017d5e <xQueueGenericCreate+0x12>
	{
 8017d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d62:	b083      	sub	sp, #12
 8017d64:	460d      	mov	r5, r1
 8017d66:	4614      	mov	r4, r2
 8017d68:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d6a:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017d6e:	3050      	adds	r0, #80	@ 0x50
 8017d70:	f001 feba 	bl	8019ae8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8017d74:	4607      	mov	r7, r0
 8017d76:	b150      	cbz	r0, 8017d8e <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8017d78:	2300      	movs	r3, #0
 8017d7a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017d7e:	9000      	str	r0, [sp, #0]
 8017d80:	4623      	mov	r3, r4
 8017d82:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8017d86:	4629      	mov	r1, r5
 8017d88:	4630      	mov	r0, r6
 8017d8a:	f7ff ff84 	bl	8017c96 <prvInitialiseNewQueue>
	}
 8017d8e:	4638      	mov	r0, r7
 8017d90:	b003      	add	sp, #12
 8017d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d94 <xQueueGenericSend>:
{
 8017d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d96:	b085      	sub	sp, #20
 8017d98:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8017d9a:	b188      	cbz	r0, 8017dc0 <xQueueGenericSend+0x2c>
 8017d9c:	460f      	mov	r7, r1
 8017d9e:	461d      	mov	r5, r3
 8017da0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017da2:	b1b1      	cbz	r1, 8017dd2 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017da4:	2d02      	cmp	r5, #2
 8017da6:	d120      	bne.n	8017dea <xQueueGenericSend+0x56>
 8017da8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017daa:	2b01      	cmp	r3, #1
 8017dac:	d01d      	beq.n	8017dea <xQueueGenericSend+0x56>
 8017dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017db2:	f383 8811 	msr	BASEPRI, r3
 8017db6:	f3bf 8f6f 	isb	sy
 8017dba:	f3bf 8f4f 	dsb	sy
 8017dbe:	e7fe      	b.n	8017dbe <xQueueGenericSend+0x2a>
 8017dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017dc4:	f383 8811 	msr	BASEPRI, r3
 8017dc8:	f3bf 8f6f 	isb	sy
 8017dcc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8017dd0:	e7fe      	b.n	8017dd0 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017dd2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d0e5      	beq.n	8017da4 <xQueueGenericSend+0x10>
 8017dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ddc:	f383 8811 	msr	BASEPRI, r3
 8017de0:	f3bf 8f6f 	isb	sy
 8017de4:	f3bf 8f4f 	dsb	sy
 8017de8:	e7fe      	b.n	8017de8 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017dea:	f001 f92b 	bl	8019044 <xTaskGetSchedulerState>
 8017dee:	4606      	mov	r6, r0
 8017df0:	b958      	cbnz	r0, 8017e0a <xQueueGenericSend+0x76>
 8017df2:	9b01      	ldr	r3, [sp, #4]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d048      	beq.n	8017e8a <xQueueGenericSend+0xf6>
 8017df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017dfc:	f383 8811 	msr	BASEPRI, r3
 8017e00:	f3bf 8f6f 	isb	sy
 8017e04:	f3bf 8f4f 	dsb	sy
 8017e08:	e7fe      	b.n	8017e08 <xQueueGenericSend+0x74>
 8017e0a:	2600      	movs	r6, #0
 8017e0c:	e03d      	b.n	8017e8a <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017e0e:	462a      	mov	r2, r5
 8017e10:	4639      	mov	r1, r7
 8017e12:	4620      	mov	r0, r4
 8017e14:	f7ff fe79 	bl	8017b0a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017e18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017e1a:	b97b      	cbnz	r3, 8017e3c <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8017e1c:	b148      	cbz	r0, 8017e32 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8017e1e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017e26:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017e2a:	f3bf 8f4f 	dsb	sy
 8017e2e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8017e32:	f001 fcc1 	bl	80197b8 <vPortExitCritical>
				return pdPASS;
 8017e36:	2001      	movs	r0, #1
}
 8017e38:	b005      	add	sp, #20
 8017e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017e3c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017e40:	f001 f860 	bl	8018f04 <xTaskRemoveFromEventList>
 8017e44:	2800      	cmp	r0, #0
 8017e46:	d0f4      	beq.n	8017e32 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8017e48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017e50:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017e54:	f3bf 8f4f 	dsb	sy
 8017e58:	f3bf 8f6f 	isb	sy
 8017e5c:	e7e9      	b.n	8017e32 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8017e5e:	f001 fcab 	bl	80197b8 <vPortExitCritical>
					return errQUEUE_FULL;
 8017e62:	2000      	movs	r0, #0
 8017e64:	e7e8      	b.n	8017e38 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017e66:	a802      	add	r0, sp, #8
 8017e68:	f001 f892 	bl	8018f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017e6c:	2601      	movs	r6, #1
 8017e6e:	e019      	b.n	8017ea4 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8017e70:	2300      	movs	r3, #0
 8017e72:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017e76:	e021      	b.n	8017ebc <xQueueGenericSend+0x128>
 8017e78:	2300      	movs	r3, #0
 8017e7a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8017e7e:	e023      	b.n	8017ec8 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8017e80:	4620      	mov	r0, r4
 8017e82:	f7ff fe8f 	bl	8017ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017e86:	f000 ff15 	bl	8018cb4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8017e8a:	f001 fc73 	bl	8019774 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017e8e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017e90:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017e92:	429a      	cmp	r2, r3
 8017e94:	d3bb      	bcc.n	8017e0e <xQueueGenericSend+0x7a>
 8017e96:	2d02      	cmp	r5, #2
 8017e98:	d0b9      	beq.n	8017e0e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8017e9a:	9b01      	ldr	r3, [sp, #4]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d0de      	beq.n	8017e5e <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8017ea0:	2e00      	cmp	r6, #0
 8017ea2:	d0e0      	beq.n	8017e66 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8017ea4:	f001 fc88 	bl	80197b8 <vPortExitCritical>
		vTaskSuspendAll();
 8017ea8:	f000 fe6a 	bl	8018b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017eac:	f001 fc62 	bl	8019774 <vPortEnterCritical>
 8017eb0:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8017eb4:	b252      	sxtb	r2, r2
 8017eb6:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8017eba:	d0d9      	beq.n	8017e70 <xQueueGenericSend+0xdc>
 8017ebc:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8017ec0:	b252      	sxtb	r2, r2
 8017ec2:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8017ec6:	d0d7      	beq.n	8017e78 <xQueueGenericSend+0xe4>
 8017ec8:	f001 fc76 	bl	80197b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017ecc:	a901      	add	r1, sp, #4
 8017ece:	a802      	add	r0, sp, #8
 8017ed0:	f001 f86a 	bl	8018fa8 <xTaskCheckForTimeOut>
 8017ed4:	b9d8      	cbnz	r0, 8017f0e <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	f7ff fdfb 	bl	8017ad2 <prvIsQueueFull>
 8017edc:	2800      	cmp	r0, #0
 8017ede:	d0cf      	beq.n	8017e80 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017ee0:	9901      	ldr	r1, [sp, #4]
 8017ee2:	f104 0010 	add.w	r0, r4, #16
 8017ee6:	f000 ffd9 	bl	8018e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017eea:	4620      	mov	r0, r4
 8017eec:	f7ff fe5a 	bl	8017ba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017ef0:	f000 fee0 	bl	8018cb4 <xTaskResumeAll>
 8017ef4:	2800      	cmp	r0, #0
 8017ef6:	d1c8      	bne.n	8017e8a <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8017ef8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017f00:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017f04:	f3bf 8f4f 	dsb	sy
 8017f08:	f3bf 8f6f 	isb	sy
 8017f0c:	e7bd      	b.n	8017e8a <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8017f0e:	4620      	mov	r0, r4
 8017f10:	f7ff fe48 	bl	8017ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017f14:	f000 fece 	bl	8018cb4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8017f18:	2000      	movs	r0, #0
 8017f1a:	e78d      	b.n	8017e38 <xQueueGenericSend+0xa4>

08017f1c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8017f1c:	b148      	cbz	r0, 8017f32 <prvInitialiseMutex+0x16>
	{
 8017f1e:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8017f20:	2100      	movs	r1, #0
 8017f22:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8017f24:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8017f26:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8017f28:	460b      	mov	r3, r1
 8017f2a:	460a      	mov	r2, r1
 8017f2c:	f7ff ff32 	bl	8017d94 <xQueueGenericSend>
	}
 8017f30:	bd08      	pop	{r3, pc}
 8017f32:	4770      	bx	lr

08017f34 <xQueueCreateMutex>:
	{
 8017f34:	b510      	push	{r4, lr}
 8017f36:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8017f38:	2100      	movs	r1, #0
 8017f3a:	2001      	movs	r0, #1
 8017f3c:	f7ff ff06 	bl	8017d4c <xQueueGenericCreate>
 8017f40:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8017f42:	f7ff ffeb 	bl	8017f1c <prvInitialiseMutex>
	}
 8017f46:	4620      	mov	r0, r4
 8017f48:	bd10      	pop	{r4, pc}

08017f4a <xQueueCreateMutexStatic>:
	{
 8017f4a:	b510      	push	{r4, lr}
 8017f4c:	b082      	sub	sp, #8
 8017f4e:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8017f50:	9000      	str	r0, [sp, #0]
 8017f52:	2200      	movs	r2, #0
 8017f54:	4611      	mov	r1, r2
 8017f56:	2001      	movs	r0, #1
 8017f58:	f7ff feae 	bl	8017cb8 <xQueueGenericCreateStatic>
 8017f5c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8017f5e:	f7ff ffdd 	bl	8017f1c <prvInitialiseMutex>
	}
 8017f62:	4620      	mov	r0, r4
 8017f64:	b002      	add	sp, #8
 8017f66:	bd10      	pop	{r4, pc}

08017f68 <xQueueGiveMutexRecursive>:
	{
 8017f68:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8017f6a:	b138      	cbz	r0, 8017f7c <xQueueGiveMutexRecursive+0x14>
 8017f6c:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8017f6e:	6885      	ldr	r5, [r0, #8]
 8017f70:	f001 f862 	bl	8019038 <xTaskGetCurrentTaskHandle>
 8017f74:	4285      	cmp	r5, r0
 8017f76:	d00a      	beq.n	8017f8e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8017f78:	2000      	movs	r0, #0
	}
 8017f7a:	bd38      	pop	{r3, r4, r5, pc}
 8017f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f80:	f383 8811 	msr	BASEPRI, r3
 8017f84:	f3bf 8f6f 	isb	sy
 8017f88:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8017f8c:	e7fe      	b.n	8017f8c <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8017f8e:	68e3      	ldr	r3, [r4, #12]
 8017f90:	3b01      	subs	r3, #1
 8017f92:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8017f94:	b10b      	cbz	r3, 8017f9a <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8017f96:	2001      	movs	r0, #1
		return xReturn;
 8017f98:	e7ef      	b.n	8017f7a <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8017f9a:	461a      	mov	r2, r3
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	f7ff fef8 	bl	8017d94 <xQueueGenericSend>
			xReturn = pdPASS;
 8017fa4:	2001      	movs	r0, #1
 8017fa6:	e7e8      	b.n	8017f7a <xQueueGiveMutexRecursive+0x12>

08017fa8 <xQueueGenericSendFromISR>:
{
 8017fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8017fac:	b190      	cbz	r0, 8017fd4 <xQueueGenericSendFromISR+0x2c>
 8017fae:	460f      	mov	r7, r1
 8017fb0:	4616      	mov	r6, r2
 8017fb2:	461c      	mov	r4, r3
 8017fb4:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017fb6:	b1b1      	cbz	r1, 8017fe6 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017fb8:	2c02      	cmp	r4, #2
 8017fba:	d120      	bne.n	8017ffe <xQueueGenericSendFromISR+0x56>
 8017fbc:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8017fbe:	2b01      	cmp	r3, #1
 8017fc0:	d01d      	beq.n	8017ffe <xQueueGenericSendFromISR+0x56>
 8017fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fc6:	f383 8811 	msr	BASEPRI, r3
 8017fca:	f3bf 8f6f 	isb	sy
 8017fce:	f3bf 8f4f 	dsb	sy
 8017fd2:	e7fe      	b.n	8017fd2 <xQueueGenericSendFromISR+0x2a>
 8017fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fd8:	f383 8811 	msr	BASEPRI, r3
 8017fdc:	f3bf 8f6f 	isb	sy
 8017fe0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8017fe4:	e7fe      	b.n	8017fe4 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017fe6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d0e5      	beq.n	8017fb8 <xQueueGenericSendFromISR+0x10>
 8017fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ff0:	f383 8811 	msr	BASEPRI, r3
 8017ff4:	f3bf 8f6f 	isb	sy
 8017ff8:	f3bf 8f4f 	dsb	sy
 8017ffc:	e7fe      	b.n	8017ffc <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017ffe:	f001 fcdf 	bl	80199c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018002:	f3ef 8811 	mrs	r8, BASEPRI
 8018006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801800a:	f383 8811 	msr	BASEPRI, r3
 801800e:	f3bf 8f6f 	isb	sy
 8018012:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018016:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8018018:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801801a:	429a      	cmp	r2, r3
 801801c:	d306      	bcc.n	801802c <xQueueGenericSendFromISR+0x84>
 801801e:	2c02      	cmp	r4, #2
 8018020:	d004      	beq.n	801802c <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8018022:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018024:	f388 8811 	msr	BASEPRI, r8
}
 8018028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 801802c:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8018030:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018034:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018036:	4622      	mov	r2, r4
 8018038:	4639      	mov	r1, r7
 801803a:	4628      	mov	r0, r5
 801803c:	f7ff fd65 	bl	8017b0a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8018040:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8018044:	d006      	beq.n	8018054 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018046:	f109 0301 	add.w	r3, r9, #1
 801804a:	b25b      	sxtb	r3, r3
 801804c:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8018050:	2001      	movs	r0, #1
 8018052:	e7e7      	b.n	8018024 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018054:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018056:	b90b      	cbnz	r3, 801805c <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8018058:	2001      	movs	r0, #1
 801805a:	e7e3      	b.n	8018024 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801805c:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8018060:	f000 ff50 	bl	8018f04 <xTaskRemoveFromEventList>
 8018064:	b118      	cbz	r0, 801806e <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8018066:	b126      	cbz	r6, 8018072 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018068:	2001      	movs	r0, #1
 801806a:	6030      	str	r0, [r6, #0]
 801806c:	e7da      	b.n	8018024 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 801806e:	2001      	movs	r0, #1
 8018070:	e7d8      	b.n	8018024 <xQueueGenericSendFromISR+0x7c>
 8018072:	2001      	movs	r0, #1
 8018074:	e7d6      	b.n	8018024 <xQueueGenericSendFromISR+0x7c>

08018076 <xQueueReceive>:
{
 8018076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018078:	b085      	sub	sp, #20
 801807a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801807c:	b190      	cbz	r0, 80180a4 <xQueueReceive+0x2e>
 801807e:	460f      	mov	r7, r1
 8018080:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018082:	b1c1      	cbz	r1, 80180b6 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018084:	f000 ffde 	bl	8019044 <xTaskGetSchedulerState>
 8018088:	4606      	mov	r6, r0
 801808a:	bb00      	cbnz	r0, 80180ce <xQueueReceive+0x58>
 801808c:	9b01      	ldr	r3, [sp, #4]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d05e      	beq.n	8018150 <xQueueReceive+0xda>
	__asm volatile
 8018092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018096:	f383 8811 	msr	BASEPRI, r3
 801809a:	f3bf 8f6f 	isb	sy
 801809e:	f3bf 8f4f 	dsb	sy
 80180a2:	e7fe      	b.n	80180a2 <xQueueReceive+0x2c>
 80180a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180a8:	f383 8811 	msr	BASEPRI, r3
 80180ac:	f3bf 8f6f 	isb	sy
 80180b0:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80180b4:	e7fe      	b.n	80180b4 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80180b6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d0e3      	beq.n	8018084 <xQueueReceive+0xe>
 80180bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180c0:	f383 8811 	msr	BASEPRI, r3
 80180c4:	f3bf 8f6f 	isb	sy
 80180c8:	f3bf 8f4f 	dsb	sy
 80180cc:	e7fe      	b.n	80180cc <xQueueReceive+0x56>
 80180ce:	2600      	movs	r6, #0
 80180d0:	e03e      	b.n	8018150 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80180d2:	4639      	mov	r1, r7
 80180d4:	4620      	mov	r0, r4
 80180d6:	f7ff fd53 	bl	8017b80 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80180da:	3d01      	subs	r5, #1
 80180dc:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80180de:	6923      	ldr	r3, [r4, #16]
 80180e0:	b923      	cbnz	r3, 80180ec <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80180e2:	f001 fb69 	bl	80197b8 <vPortExitCritical>
				return pdPASS;
 80180e6:	2001      	movs	r0, #1
}
 80180e8:	b005      	add	sp, #20
 80180ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80180ec:	f104 0010 	add.w	r0, r4, #16
 80180f0:	f000 ff08 	bl	8018f04 <xTaskRemoveFromEventList>
 80180f4:	2800      	cmp	r0, #0
 80180f6:	d0f4      	beq.n	80180e2 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80180f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80180fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018100:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018104:	f3bf 8f4f 	dsb	sy
 8018108:	f3bf 8f6f 	isb	sy
 801810c:	e7e9      	b.n	80180e2 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 801810e:	f001 fb53 	bl	80197b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018112:	2000      	movs	r0, #0
 8018114:	e7e8      	b.n	80180e8 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018116:	a802      	add	r0, sp, #8
 8018118:	f000 ff3a 	bl	8018f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801811c:	2601      	movs	r6, #1
 801811e:	e021      	b.n	8018164 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8018120:	2300      	movs	r3, #0
 8018122:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018126:	e029      	b.n	801817c <xQueueReceive+0x106>
 8018128:	2300      	movs	r3, #0
 801812a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801812e:	e02b      	b.n	8018188 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8018130:	4620      	mov	r0, r4
 8018132:	f7ff fd37 	bl	8017ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018136:	f000 fdbd 	bl	8018cb4 <xTaskResumeAll>
 801813a:	e009      	b.n	8018150 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 801813c:	4620      	mov	r0, r4
 801813e:	f7ff fd31 	bl	8017ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018142:	f000 fdb7 	bl	8018cb4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018146:	4620      	mov	r0, r4
 8018148:	f7ff fcd2 	bl	8017af0 <prvIsQueueEmpty>
 801814c:	2800      	cmp	r0, #0
 801814e:	d13f      	bne.n	80181d0 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8018150:	f001 fb10 	bl	8019774 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018154:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018156:	2d00      	cmp	r5, #0
 8018158:	d1bb      	bne.n	80180d2 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801815a:	9b01      	ldr	r3, [sp, #4]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d0d6      	beq.n	801810e <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8018160:	2e00      	cmp	r6, #0
 8018162:	d0d8      	beq.n	8018116 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8018164:	f001 fb28 	bl	80197b8 <vPortExitCritical>
		vTaskSuspendAll();
 8018168:	f000 fd0a 	bl	8018b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801816c:	f001 fb02 	bl	8019774 <vPortEnterCritical>
 8018170:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018174:	b25b      	sxtb	r3, r3
 8018176:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801817a:	d0d1      	beq.n	8018120 <xQueueReceive+0xaa>
 801817c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018180:	b25b      	sxtb	r3, r3
 8018182:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018186:	d0cf      	beq.n	8018128 <xQueueReceive+0xb2>
 8018188:	f001 fb16 	bl	80197b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801818c:	a901      	add	r1, sp, #4
 801818e:	a802      	add	r0, sp, #8
 8018190:	f000 ff0a 	bl	8018fa8 <xTaskCheckForTimeOut>
 8018194:	2800      	cmp	r0, #0
 8018196:	d1d1      	bne.n	801813c <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018198:	4620      	mov	r0, r4
 801819a:	f7ff fca9 	bl	8017af0 <prvIsQueueEmpty>
 801819e:	2800      	cmp	r0, #0
 80181a0:	d0c6      	beq.n	8018130 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80181a2:	9901      	ldr	r1, [sp, #4]
 80181a4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80181a8:	f000 fe78 	bl	8018e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80181ac:	4620      	mov	r0, r4
 80181ae:	f7ff fcf9 	bl	8017ba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80181b2:	f000 fd7f 	bl	8018cb4 <xTaskResumeAll>
 80181b6:	2800      	cmp	r0, #0
 80181b8:	d1ca      	bne.n	8018150 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80181ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80181be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80181c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80181c6:	f3bf 8f4f 	dsb	sy
 80181ca:	f3bf 8f6f 	isb	sy
 80181ce:	e7bf      	b.n	8018150 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80181d0:	2000      	movs	r0, #0
 80181d2:	e789      	b.n	80180e8 <xQueueReceive+0x72>

080181d4 <xQueueSemaphoreTake>:
{
 80181d4:	b570      	push	{r4, r5, r6, lr}
 80181d6:	b084      	sub	sp, #16
 80181d8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80181da:	b158      	cbz	r0, 80181f4 <xQueueSemaphoreTake+0x20>
 80181dc:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80181de:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80181e0:	b18b      	cbz	r3, 8018206 <xQueueSemaphoreTake+0x32>
 80181e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181e6:	f383 8811 	msr	BASEPRI, r3
 80181ea:	f3bf 8f6f 	isb	sy
 80181ee:	f3bf 8f4f 	dsb	sy
 80181f2:	e7fe      	b.n	80181f2 <xQueueSemaphoreTake+0x1e>
 80181f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181f8:	f383 8811 	msr	BASEPRI, r3
 80181fc:	f3bf 8f6f 	isb	sy
 8018200:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8018204:	e7fe      	b.n	8018204 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018206:	f000 ff1d 	bl	8019044 <xTaskGetSchedulerState>
 801820a:	4605      	mov	r5, r0
 801820c:	b950      	cbnz	r0, 8018224 <xQueueSemaphoreTake+0x50>
 801820e:	9b01      	ldr	r3, [sp, #4]
 8018210:	b15b      	cbz	r3, 801822a <xQueueSemaphoreTake+0x56>
 8018212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018216:	f383 8811 	msr	BASEPRI, r3
 801821a:	f3bf 8f6f 	isb	sy
 801821e:	f3bf 8f4f 	dsb	sy
 8018222:	e7fe      	b.n	8018222 <xQueueSemaphoreTake+0x4e>
 8018224:	2600      	movs	r6, #0
 8018226:	4635      	mov	r5, r6
 8018228:	e055      	b.n	80182d6 <xQueueSemaphoreTake+0x102>
 801822a:	4606      	mov	r6, r0
 801822c:	e053      	b.n	80182d6 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801822e:	3b01      	subs	r3, #1
 8018230:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018232:	6823      	ldr	r3, [r4, #0]
 8018234:	b13b      	cbz	r3, 8018246 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018236:	6923      	ldr	r3, [r4, #16]
 8018238:	b94b      	cbnz	r3, 801824e <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 801823a:	f001 fabd 	bl	80197b8 <vPortExitCritical>
				return pdPASS;
 801823e:	2601      	movs	r6, #1
}
 8018240:	4630      	mov	r0, r6
 8018242:	b004      	add	sp, #16
 8018244:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018246:	f000 fff1 	bl	801922c <pvTaskIncrementMutexHeldCount>
 801824a:	60a0      	str	r0, [r4, #8]
 801824c:	e7f3      	b.n	8018236 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801824e:	f104 0010 	add.w	r0, r4, #16
 8018252:	f000 fe57 	bl	8018f04 <xTaskRemoveFromEventList>
 8018256:	2800      	cmp	r0, #0
 8018258:	d0ef      	beq.n	801823a <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 801825a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801825e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018262:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018266:	f3bf 8f4f 	dsb	sy
 801826a:	f3bf 8f6f 	isb	sy
 801826e:	e7e4      	b.n	801823a <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018270:	b146      	cbz	r6, 8018284 <xQueueSemaphoreTake+0xb0>
 8018272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018276:	f383 8811 	msr	BASEPRI, r3
 801827a:	f3bf 8f6f 	isb	sy
 801827e:	f3bf 8f4f 	dsb	sy
 8018282:	e7fe      	b.n	8018282 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8018284:	f001 fa98 	bl	80197b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018288:	e7da      	b.n	8018240 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801828a:	a802      	add	r0, sp, #8
 801828c:	f000 fe80 	bl	8018f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018290:	2501      	movs	r5, #1
 8018292:	e02a      	b.n	80182ea <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8018294:	2300      	movs	r3, #0
 8018296:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801829a:	e032      	b.n	8018302 <xQueueSemaphoreTake+0x12e>
 801829c:	2300      	movs	r3, #0
 801829e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80182a2:	e034      	b.n	801830e <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 80182a4:	f001 fa66 	bl	8019774 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80182a8:	68a0      	ldr	r0, [r4, #8]
 80182aa:	f000 fedb 	bl	8019064 <xTaskPriorityInherit>
 80182ae:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80182b0:	f001 fa82 	bl	80197b8 <vPortExitCritical>
 80182b4:	e03b      	b.n	801832e <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 80182b6:	4620      	mov	r0, r4
 80182b8:	f7ff fc74 	bl	8017ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80182bc:	f000 fcfa 	bl	8018cb4 <xTaskResumeAll>
 80182c0:	e009      	b.n	80182d6 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80182c2:	4620      	mov	r0, r4
 80182c4:	f7ff fc6e 	bl	8017ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80182c8:	f000 fcf4 	bl	8018cb4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80182cc:	4620      	mov	r0, r4
 80182ce:	f7ff fc0f 	bl	8017af0 <prvIsQueueEmpty>
 80182d2:	2800      	cmp	r0, #0
 80182d4:	d142      	bne.n	801835c <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80182d6:	f001 fa4d 	bl	8019774 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80182da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d1a6      	bne.n	801822e <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80182e0:	9b01      	ldr	r3, [sp, #4]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d0c4      	beq.n	8018270 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80182e6:	2d00      	cmp	r5, #0
 80182e8:	d0cf      	beq.n	801828a <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80182ea:	f001 fa65 	bl	80197b8 <vPortExitCritical>
		vTaskSuspendAll();
 80182ee:	f000 fc47 	bl	8018b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80182f2:	f001 fa3f 	bl	8019774 <vPortEnterCritical>
 80182f6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80182fa:	b25b      	sxtb	r3, r3
 80182fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018300:	d0c8      	beq.n	8018294 <xQueueSemaphoreTake+0xc0>
 8018302:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018306:	b25b      	sxtb	r3, r3
 8018308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801830c:	d0c6      	beq.n	801829c <xQueueSemaphoreTake+0xc8>
 801830e:	f001 fa53 	bl	80197b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018312:	a901      	add	r1, sp, #4
 8018314:	a802      	add	r0, sp, #8
 8018316:	f000 fe47 	bl	8018fa8 <xTaskCheckForTimeOut>
 801831a:	2800      	cmp	r0, #0
 801831c:	d1d1      	bne.n	80182c2 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801831e:	4620      	mov	r0, r4
 8018320:	f7ff fbe6 	bl	8017af0 <prvIsQueueEmpty>
 8018324:	2800      	cmp	r0, #0
 8018326:	d0c6      	beq.n	80182b6 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018328:	6823      	ldr	r3, [r4, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d0ba      	beq.n	80182a4 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801832e:	9901      	ldr	r1, [sp, #4]
 8018330:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018334:	f000 fdb2 	bl	8018e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018338:	4620      	mov	r0, r4
 801833a:	f7ff fc33 	bl	8017ba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801833e:	f000 fcb9 	bl	8018cb4 <xTaskResumeAll>
 8018342:	2800      	cmp	r0, #0
 8018344:	d1c7      	bne.n	80182d6 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8018346:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801834a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801834e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018352:	f3bf 8f4f 	dsb	sy
 8018356:	f3bf 8f6f 	isb	sy
 801835a:	e7bc      	b.n	80182d6 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 801835c:	b90e      	cbnz	r6, 8018362 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 801835e:	2600      	movs	r6, #0
 8018360:	e76e      	b.n	8018240 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8018362:	f001 fa07 	bl	8019774 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018366:	4620      	mov	r0, r4
 8018368:	f7ff fbab 	bl	8017ac2 <prvGetDisinheritPriorityAfterTimeout>
 801836c:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801836e:	68a0      	ldr	r0, [r4, #8]
 8018370:	f000 ff0c 	bl	801918c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8018374:	f001 fa20 	bl	80197b8 <vPortExitCritical>
 8018378:	e7f1      	b.n	801835e <xQueueSemaphoreTake+0x18a>

0801837a <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 801837a:	b180      	cbz	r0, 801839e <xQueueTakeMutexRecursive+0x24>
	{
 801837c:	b570      	push	{r4, r5, r6, lr}
 801837e:	460c      	mov	r4, r1
 8018380:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8018382:	6886      	ldr	r6, [r0, #8]
 8018384:	f000 fe58 	bl	8019038 <xTaskGetCurrentTaskHandle>
 8018388:	4286      	cmp	r6, r0
 801838a:	d011      	beq.n	80183b0 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801838c:	4621      	mov	r1, r4
 801838e:	4628      	mov	r0, r5
 8018390:	f7ff ff20 	bl	80181d4 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8018394:	b180      	cbz	r0, 80183b8 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8018396:	68eb      	ldr	r3, [r5, #12]
 8018398:	3301      	adds	r3, #1
 801839a:	60eb      	str	r3, [r5, #12]
		return xReturn;
 801839c:	e00c      	b.n	80183b8 <xQueueTakeMutexRecursive+0x3e>
 801839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183a2:	f383 8811 	msr	BASEPRI, r3
 80183a6:	f3bf 8f6f 	isb	sy
 80183aa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80183ae:	e7fe      	b.n	80183ae <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80183b0:	68eb      	ldr	r3, [r5, #12]
 80183b2:	3301      	adds	r3, #1
 80183b4:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80183b6:	2001      	movs	r0, #1
	}
 80183b8:	bd70      	pop	{r4, r5, r6, pc}

080183ba <xQueuePeek>:
{
 80183ba:	b570      	push	{r4, r5, r6, lr}
 80183bc:	b084      	sub	sp, #16
 80183be:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80183c0:	b190      	cbz	r0, 80183e8 <xQueuePeek+0x2e>
 80183c2:	460e      	mov	r6, r1
 80183c4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80183c6:	b1c1      	cbz	r1, 80183fa <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80183c8:	f000 fe3c 	bl	8019044 <xTaskGetSchedulerState>
 80183cc:	4605      	mov	r5, r0
 80183ce:	bb00      	cbnz	r0, 8018412 <xQueuePeek+0x58>
 80183d0:	9b01      	ldr	r3, [sp, #4]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d05e      	beq.n	8018494 <xQueuePeek+0xda>
 80183d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183da:	f383 8811 	msr	BASEPRI, r3
 80183de:	f3bf 8f6f 	isb	sy
 80183e2:	f3bf 8f4f 	dsb	sy
 80183e6:	e7fe      	b.n	80183e6 <xQueuePeek+0x2c>
 80183e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183ec:	f383 8811 	msr	BASEPRI, r3
 80183f0:	f3bf 8f6f 	isb	sy
 80183f4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80183f8:	e7fe      	b.n	80183f8 <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80183fa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d0e3      	beq.n	80183c8 <xQueuePeek+0xe>
 8018400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018404:	f383 8811 	msr	BASEPRI, r3
 8018408:	f3bf 8f6f 	isb	sy
 801840c:	f3bf 8f4f 	dsb	sy
 8018410:	e7fe      	b.n	8018410 <xQueuePeek+0x56>
 8018412:	2500      	movs	r5, #0
 8018414:	e03e      	b.n	8018494 <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8018416:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018418:	4631      	mov	r1, r6
 801841a:	4620      	mov	r0, r4
 801841c:	f7ff fbb0 	bl	8017b80 <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8018420:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018422:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018424:	b923      	cbnz	r3, 8018430 <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 8018426:	f001 f9c7 	bl	80197b8 <vPortExitCritical>
				return pdPASS;
 801842a:	2001      	movs	r0, #1
}
 801842c:	b004      	add	sp, #16
 801842e:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018430:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018434:	f000 fd66 	bl	8018f04 <xTaskRemoveFromEventList>
 8018438:	2800      	cmp	r0, #0
 801843a:	d0f4      	beq.n	8018426 <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 801843c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018444:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018448:	f3bf 8f4f 	dsb	sy
 801844c:	f3bf 8f6f 	isb	sy
 8018450:	e7e9      	b.n	8018426 <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 8018452:	f001 f9b1 	bl	80197b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018456:	2000      	movs	r0, #0
 8018458:	e7e8      	b.n	801842c <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801845a:	a802      	add	r0, sp, #8
 801845c:	f000 fd98 	bl	8018f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018460:	2501      	movs	r5, #1
 8018462:	e021      	b.n	80184a8 <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 8018464:	2300      	movs	r3, #0
 8018466:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801846a:	e029      	b.n	80184c0 <xQueuePeek+0x106>
 801846c:	2300      	movs	r3, #0
 801846e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018472:	e02b      	b.n	80184cc <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 8018474:	4620      	mov	r0, r4
 8018476:	f7ff fb95 	bl	8017ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801847a:	f000 fc1b 	bl	8018cb4 <xTaskResumeAll>
 801847e:	e009      	b.n	8018494 <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 8018480:	4620      	mov	r0, r4
 8018482:	f7ff fb8f 	bl	8017ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018486:	f000 fc15 	bl	8018cb4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801848a:	4620      	mov	r0, r4
 801848c:	f7ff fb30 	bl	8017af0 <prvIsQueueEmpty>
 8018490:	2800      	cmp	r0, #0
 8018492:	d13f      	bne.n	8018514 <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 8018494:	f001 f96e 	bl	8019774 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018498:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801849a:	2b00      	cmp	r3, #0
 801849c:	d1bb      	bne.n	8018416 <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801849e:	9b01      	ldr	r3, [sp, #4]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d0d6      	beq.n	8018452 <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80184a4:	2d00      	cmp	r5, #0
 80184a6:	d0d8      	beq.n	801845a <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 80184a8:	f001 f986 	bl	80197b8 <vPortExitCritical>
		vTaskSuspendAll();
 80184ac:	f000 fb68 	bl	8018b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80184b0:	f001 f960 	bl	8019774 <vPortEnterCritical>
 80184b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80184b8:	b25b      	sxtb	r3, r3
 80184ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80184be:	d0d1      	beq.n	8018464 <xQueuePeek+0xaa>
 80184c0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80184c4:	b25b      	sxtb	r3, r3
 80184c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80184ca:	d0cf      	beq.n	801846c <xQueuePeek+0xb2>
 80184cc:	f001 f974 	bl	80197b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80184d0:	a901      	add	r1, sp, #4
 80184d2:	a802      	add	r0, sp, #8
 80184d4:	f000 fd68 	bl	8018fa8 <xTaskCheckForTimeOut>
 80184d8:	2800      	cmp	r0, #0
 80184da:	d1d1      	bne.n	8018480 <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80184dc:	4620      	mov	r0, r4
 80184de:	f7ff fb07 	bl	8017af0 <prvIsQueueEmpty>
 80184e2:	2800      	cmp	r0, #0
 80184e4:	d0c6      	beq.n	8018474 <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80184e6:	9901      	ldr	r1, [sp, #4]
 80184e8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80184ec:	f000 fcd6 	bl	8018e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80184f0:	4620      	mov	r0, r4
 80184f2:	f7ff fb57 	bl	8017ba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80184f6:	f000 fbdd 	bl	8018cb4 <xTaskResumeAll>
 80184fa:	2800      	cmp	r0, #0
 80184fc:	d1ca      	bne.n	8018494 <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 80184fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018506:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801850a:	f3bf 8f4f 	dsb	sy
 801850e:	f3bf 8f6f 	isb	sy
 8018512:	e7bf      	b.n	8018494 <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 8018514:	2000      	movs	r0, #0
 8018516:	e789      	b.n	801842c <xQueuePeek+0x72>

08018518 <xQueueReceiveFromISR>:
{
 8018518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 801851c:	b1b0      	cbz	r0, 801854c <xQueueReceiveFromISR+0x34>
 801851e:	460d      	mov	r5, r1
 8018520:	4690      	mov	r8, r2
 8018522:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018524:	b1d9      	cbz	r1, 801855e <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018526:	f001 fa4b 	bl	80199c0 <vPortValidateInterruptPriority>
	__asm volatile
 801852a:	f3ef 8711 	mrs	r7, BASEPRI
 801852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018532:	f383 8811 	msr	BASEPRI, r3
 8018536:	f3bf 8f6f 	isb	sy
 801853a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801853e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018540:	b9ce      	cbnz	r6, 8018576 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8018542:	2000      	movs	r0, #0
	__asm volatile
 8018544:	f387 8811 	msr	BASEPRI, r7
}
 8018548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 801854c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018550:	f383 8811 	msr	BASEPRI, r3
 8018554:	f3bf 8f6f 	isb	sy
 8018558:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801855c:	e7fe      	b.n	801855c <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801855e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018560:	2b00      	cmp	r3, #0
 8018562:	d0e0      	beq.n	8018526 <xQueueReceiveFromISR+0xe>
 8018564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018568:	f383 8811 	msr	BASEPRI, r3
 801856c:	f3bf 8f6f 	isb	sy
 8018570:	f3bf 8f4f 	dsb	sy
 8018574:	e7fe      	b.n	8018574 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8018576:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 801857a:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801857e:	4629      	mov	r1, r5
 8018580:	4620      	mov	r0, r4
 8018582:	f7ff fafd 	bl	8017b80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018586:	1e73      	subs	r3, r6, #1
 8018588:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 801858a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801858e:	d006      	beq.n	801859e <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8018590:	f109 0301 	add.w	r3, r9, #1
 8018594:	b25b      	sxtb	r3, r3
 8018596:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 801859a:	2001      	movs	r0, #1
 801859c:	e7d2      	b.n	8018544 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801859e:	6923      	ldr	r3, [r4, #16]
 80185a0:	b90b      	cbnz	r3, 80185a6 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80185a2:	2001      	movs	r0, #1
 80185a4:	e7ce      	b.n	8018544 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80185a6:	f104 0010 	add.w	r0, r4, #16
 80185aa:	f000 fcab 	bl	8018f04 <xTaskRemoveFromEventList>
 80185ae:	b130      	cbz	r0, 80185be <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 80185b0:	f1b8 0f00 	cmp.w	r8, #0
 80185b4:	d005      	beq.n	80185c2 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80185b6:	2001      	movs	r0, #1
 80185b8:	f8c8 0000 	str.w	r0, [r8]
 80185bc:	e7c2      	b.n	8018544 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80185be:	2001      	movs	r0, #1
 80185c0:	e7c0      	b.n	8018544 <xQueueReceiveFromISR+0x2c>
 80185c2:	2001      	movs	r0, #1
 80185c4:	e7be      	b.n	8018544 <xQueueReceiveFromISR+0x2c>

080185c6 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80185c6:	b140      	cbz	r0, 80185da <uxQueueMessagesWaiting+0x14>
{
 80185c8:	b510      	push	{r4, lr}
 80185ca:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80185cc:	f001 f8d2 	bl	8019774 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80185d0:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 80185d2:	f001 f8f1 	bl	80197b8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80185d6:	4620      	mov	r0, r4
 80185d8:	bd10      	pop	{r4, pc}
 80185da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185de:	f383 8811 	msr	BASEPRI, r3
 80185e2:	f3bf 8f6f 	isb	sy
 80185e6:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80185ea:	e7fe      	b.n	80185ea <uxQueueMessagesWaiting+0x24>

080185ec <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80185ec:	b108      	cbz	r0, 80185f2 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 80185ee:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80185f0:	4770      	bx	lr
 80185f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185f6:	f383 8811 	msr	BASEPRI, r3
 80185fa:	f3bf 8f6f 	isb	sy
 80185fe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018602:	e7fe      	b.n	8018602 <uxQueueMessagesWaitingFromISR+0x16>

08018604 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018604:	2300      	movs	r3, #0
 8018606:	2b07      	cmp	r3, #7
 8018608:	d80c      	bhi.n	8018624 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801860a:	4a07      	ldr	r2, [pc, #28]	@ (8018628 <vQueueAddToRegistry+0x24>)
 801860c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018610:	b10a      	cbz	r2, 8018616 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018612:	3301      	adds	r3, #1
 8018614:	e7f7      	b.n	8018606 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018616:	4a04      	ldr	r2, [pc, #16]	@ (8018628 <vQueueAddToRegistry+0x24>)
 8018618:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801861c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018620:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018622:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018624:	4770      	bx	lr
 8018626:	bf00      	nop
 8018628:	2000257c 	.word	0x2000257c

0801862c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801862c:	b570      	push	{r4, r5, r6, lr}
 801862e:	4604      	mov	r4, r0
 8018630:	460d      	mov	r5, r1
 8018632:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018634:	f001 f89e 	bl	8019774 <vPortEnterCritical>
 8018638:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801863c:	b25b      	sxtb	r3, r3
 801863e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018642:	d00d      	beq.n	8018660 <vQueueWaitForMessageRestricted+0x34>
 8018644:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018648:	b25b      	sxtb	r3, r3
 801864a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801864e:	d00b      	beq.n	8018668 <vQueueWaitForMessageRestricted+0x3c>
 8018650:	f001 f8b2 	bl	80197b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018654:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018656:	b15b      	cbz	r3, 8018670 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018658:	4620      	mov	r0, r4
 801865a:	f7ff faa3 	bl	8017ba4 <prvUnlockQueue>
	}
 801865e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8018660:	2300      	movs	r3, #0
 8018662:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018666:	e7ed      	b.n	8018644 <vQueueWaitForMessageRestricted+0x18>
 8018668:	2300      	movs	r3, #0
 801866a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801866e:	e7ef      	b.n	8018650 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018670:	4632      	mov	r2, r6
 8018672:	4629      	mov	r1, r5
 8018674:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018678:	f000 fc28 	bl	8018ecc <vTaskPlaceOnEventListRestricted>
 801867c:	e7ec      	b.n	8018658 <vQueueWaitForMessageRestricted+0x2c>
	...

08018680 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018680:	4b08      	ldr	r3, [pc, #32]	@ (80186a4 <prvResetNextTaskUnblockTime+0x24>)
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	b923      	cbnz	r3, 8018692 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018688:	4b07      	ldr	r3, [pc, #28]	@ (80186a8 <prvResetNextTaskUnblockTime+0x28>)
 801868a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801868e:	601a      	str	r2, [r3, #0]
 8018690:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018692:	4b04      	ldr	r3, [pc, #16]	@ (80186a4 <prvResetNextTaskUnblockTime+0x24>)
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	68db      	ldr	r3, [r3, #12]
 8018698:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801869a:	685a      	ldr	r2, [r3, #4]
 801869c:	4b02      	ldr	r3, [pc, #8]	@ (80186a8 <prvResetNextTaskUnblockTime+0x28>)
 801869e:	601a      	str	r2, [r3, #0]
	}
}
 80186a0:	4770      	bx	lr
 80186a2:	bf00      	nop
 80186a4:	2000262c 	.word	0x2000262c
 80186a8:	200025c4 	.word	0x200025c4

080186ac <prvInitialiseNewTask>:
{
 80186ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186b0:	4680      	mov	r8, r0
 80186b2:	460d      	mov	r5, r1
 80186b4:	4617      	mov	r7, r2
 80186b6:	4699      	mov	r9, r3
 80186b8:	9e08      	ldr	r6, [sp, #32]
 80186ba:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80186be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80186c0:	0092      	lsls	r2, r2, #2
 80186c2:	21a5      	movs	r1, #165	@ 0xa5
 80186c4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80186c6:	f013 f99b 	bl	802ba00 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80186ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80186cc:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 80186d0:	3a01      	subs	r2, #1
 80186d2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80186d6:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 80186da:	2d00      	cmp	r5, #0
 80186dc:	d061      	beq.n	80187a2 <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80186de:	f04f 0c00 	mov.w	ip, #0
 80186e2:	f1bc 0f0f 	cmp.w	ip, #15
 80186e6:	d809      	bhi.n	80186fc <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80186e8:	f815 300c 	ldrb.w	r3, [r5, ip]
 80186ec:	eb04 020c 	add.w	r2, r4, ip
 80186f0:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80186f4:	b113      	cbz	r3, 80186fc <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80186f6:	f10c 0c01 	add.w	ip, ip, #1
 80186fa:	e7f2      	b.n	80186e2 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80186fc:	2300      	movs	r3, #0
 80186fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018702:	2e37      	cmp	r6, #55	@ 0x37
 8018704:	d900      	bls.n	8018708 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018706:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8018708:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801870a:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801870c:	2500      	movs	r5, #0
 801870e:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018710:	1d20      	adds	r0, r4, #4
 8018712:	f7ff f99c 	bl	8017a4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018716:	f104 0018 	add.w	r0, r4, #24
 801871a:	f7ff f998 	bl	8017a4e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801871e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018720:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8018724:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018726:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8018728:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801872c:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8018730:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8018734:	4629      	mov	r1, r5
 8018736:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801873a:	f013 f961 	bl	802ba00 <memset>
 801873e:	4b1b      	ldr	r3, [pc, #108]	@ (80187ac <prvInitialiseNewTask+0x100>)
 8018740:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8018742:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018746:	6622      	str	r2, [r4, #96]	@ 0x60
 8018748:	33d0      	adds	r3, #208	@ 0xd0
 801874a:	6663      	str	r3, [r4, #100]	@ 0x64
 801874c:	2201      	movs	r2, #1
 801874e:	2300      	movs	r3, #0
 8018750:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 8018754:	f243 330e 	movw	r3, #13070	@ 0x330e
 8018758:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 801875c:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 8018760:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 8018764:	f241 2334 	movw	r3, #4660	@ 0x1234
 8018768:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 801876c:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 8018770:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 8018774:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 8018778:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 801877c:	2305      	movs	r3, #5
 801877e:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 8018782:	230b      	movs	r3, #11
 8018784:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018788:	464a      	mov	r2, r9
 801878a:	4641      	mov	r1, r8
 801878c:	4638      	mov	r0, r7
 801878e:	f000 ffc3 	bl	8019718 <pxPortInitialiseStack>
 8018792:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8018794:	f1ba 0f00 	cmp.w	sl, #0
 8018798:	d001      	beq.n	801879e <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801879a:	f8ca 4000 	str.w	r4, [sl]
}
 801879e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80187a2:	2300      	movs	r3, #0
 80187a4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80187a8:	e7ab      	b.n	8018702 <prvInitialiseNewTask+0x56>
 80187aa:	bf00      	nop
 80187ac:	20018df4 	.word	0x20018df4

080187b0 <prvInitialiseTaskLists>:
{
 80187b0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80187b2:	2400      	movs	r4, #0
 80187b4:	e007      	b.n	80187c6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80187b6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80187ba:	0093      	lsls	r3, r2, #2
 80187bc:	480e      	ldr	r0, [pc, #56]	@ (80187f8 <prvInitialiseTaskLists+0x48>)
 80187be:	4418      	add	r0, r3
 80187c0:	f7ff f93a 	bl	8017a38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80187c4:	3401      	adds	r4, #1
 80187c6:	2c37      	cmp	r4, #55	@ 0x37
 80187c8:	d9f5      	bls.n	80187b6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80187ca:	4d0c      	ldr	r5, [pc, #48]	@ (80187fc <prvInitialiseTaskLists+0x4c>)
 80187cc:	4628      	mov	r0, r5
 80187ce:	f7ff f933 	bl	8017a38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80187d2:	4c0b      	ldr	r4, [pc, #44]	@ (8018800 <prvInitialiseTaskLists+0x50>)
 80187d4:	4620      	mov	r0, r4
 80187d6:	f7ff f92f 	bl	8017a38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80187da:	480a      	ldr	r0, [pc, #40]	@ (8018804 <prvInitialiseTaskLists+0x54>)
 80187dc:	f7ff f92c 	bl	8017a38 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80187e0:	4809      	ldr	r0, [pc, #36]	@ (8018808 <prvInitialiseTaskLists+0x58>)
 80187e2:	f7ff f929 	bl	8017a38 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80187e6:	4809      	ldr	r0, [pc, #36]	@ (801880c <prvInitialiseTaskLists+0x5c>)
 80187e8:	f7ff f926 	bl	8017a38 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80187ec:	4b08      	ldr	r3, [pc, #32]	@ (8018810 <prvInitialiseTaskLists+0x60>)
 80187ee:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80187f0:	4b08      	ldr	r3, [pc, #32]	@ (8018814 <prvInitialiseTaskLists+0x64>)
 80187f2:	601c      	str	r4, [r3, #0]
}
 80187f4:	bd38      	pop	{r3, r4, r5, pc}
 80187f6:	bf00      	nop
 80187f8:	20002658 	.word	0x20002658
 80187fc:	20002644 	.word	0x20002644
 8018800:	20002630 	.word	0x20002630
 8018804:	20002614 	.word	0x20002614
 8018808:	20002600 	.word	0x20002600
 801880c:	200025e8 	.word	0x200025e8
 8018810:	2000262c 	.word	0x2000262c
 8018814:	20002628 	.word	0x20002628

08018818 <prvAddNewTaskToReadyList>:
{
 8018818:	b510      	push	{r4, lr}
 801881a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801881c:	f000 ffaa 	bl	8019774 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8018820:	4a22      	ldr	r2, [pc, #136]	@ (80188ac <prvAddNewTaskToReadyList+0x94>)
 8018822:	6813      	ldr	r3, [r2, #0]
 8018824:	3301      	adds	r3, #1
 8018826:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018828:	4b21      	ldr	r3, [pc, #132]	@ (80188b0 <prvAddNewTaskToReadyList+0x98>)
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	b15b      	cbz	r3, 8018846 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 801882e:	4b21      	ldr	r3, [pc, #132]	@ (80188b4 <prvAddNewTaskToReadyList+0x9c>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	b96b      	cbnz	r3, 8018850 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018834:	4b1e      	ldr	r3, [pc, #120]	@ (80188b0 <prvAddNewTaskToReadyList+0x98>)
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801883a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801883c:	429a      	cmp	r2, r3
 801883e:	d807      	bhi.n	8018850 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8018840:	4b1b      	ldr	r3, [pc, #108]	@ (80188b0 <prvAddNewTaskToReadyList+0x98>)
 8018842:	601c      	str	r4, [r3, #0]
 8018844:	e004      	b.n	8018850 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8018846:	4b1a      	ldr	r3, [pc, #104]	@ (80188b0 <prvAddNewTaskToReadyList+0x98>)
 8018848:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801884a:	6813      	ldr	r3, [r2, #0]
 801884c:	2b01      	cmp	r3, #1
 801884e:	d029      	beq.n	80188a4 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8018850:	4a19      	ldr	r2, [pc, #100]	@ (80188b8 <prvAddNewTaskToReadyList+0xa0>)
 8018852:	6813      	ldr	r3, [r2, #0]
 8018854:	3301      	adds	r3, #1
 8018856:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018858:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 801885a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801885c:	4b17      	ldr	r3, [pc, #92]	@ (80188bc <prvAddNewTaskToReadyList+0xa4>)
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	4298      	cmp	r0, r3
 8018862:	d901      	bls.n	8018868 <prvAddNewTaskToReadyList+0x50>
 8018864:	4b15      	ldr	r3, [pc, #84]	@ (80188bc <prvAddNewTaskToReadyList+0xa4>)
 8018866:	6018      	str	r0, [r3, #0]
 8018868:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801886c:	1d21      	adds	r1, r4, #4
 801886e:	4b14      	ldr	r3, [pc, #80]	@ (80188c0 <prvAddNewTaskToReadyList+0xa8>)
 8018870:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018874:	f7ff f8ee 	bl	8017a54 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8018878:	f000 ff9e 	bl	80197b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801887c:	4b0d      	ldr	r3, [pc, #52]	@ (80188b4 <prvAddNewTaskToReadyList+0x9c>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	b17b      	cbz	r3, 80188a2 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018882:	4b0b      	ldr	r3, [pc, #44]	@ (80188b0 <prvAddNewTaskToReadyList+0x98>)
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018888:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801888a:	429a      	cmp	r2, r3
 801888c:	d209      	bcs.n	80188a2 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 801888e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018896:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801889a:	f3bf 8f4f 	dsb	sy
 801889e:	f3bf 8f6f 	isb	sy
}
 80188a2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80188a4:	f7ff ff84 	bl	80187b0 <prvInitialiseTaskLists>
 80188a8:	e7d2      	b.n	8018850 <prvAddNewTaskToReadyList+0x38>
 80188aa:	bf00      	nop
 80188ac:	200025e4 	.word	0x200025e4
 80188b0:	20002ab8 	.word	0x20002ab8
 80188b4:	200025d8 	.word	0x200025d8
 80188b8:	200025c8 	.word	0x200025c8
 80188bc:	200025dc 	.word	0x200025dc
 80188c0:	20002658 	.word	0x20002658

080188c4 <prvDeleteTCB>:
	{
 80188c4:	b510      	push	{r4, lr}
 80188c6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80188c8:	3058      	adds	r0, #88	@ 0x58
 80188ca:	f014 fa3b 	bl	802cd44 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80188ce:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 80188d2:	b163      	cbz	r3, 80188ee <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80188d4:	2b01      	cmp	r3, #1
 80188d6:	d011      	beq.n	80188fc <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80188d8:	2b02      	cmp	r3, #2
 80188da:	d00e      	beq.n	80188fa <prvDeleteTCB+0x36>
 80188dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188e0:	f383 8811 	msr	BASEPRI, r3
 80188e4:	f3bf 8f6f 	isb	sy
 80188e8:	f3bf 8f4f 	dsb	sy
 80188ec:	e7fe      	b.n	80188ec <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80188ee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80188f0:	f001 f97c 	bl	8019bec <vPortFree>
				vPortFree( pxTCB );
 80188f4:	4620      	mov	r0, r4
 80188f6:	f001 f979 	bl	8019bec <vPortFree>
	}
 80188fa:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80188fc:	4620      	mov	r0, r4
 80188fe:	f001 f975 	bl	8019bec <vPortFree>
 8018902:	e7fa      	b.n	80188fa <prvDeleteTCB+0x36>

08018904 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018904:	4b0f      	ldr	r3, [pc, #60]	@ (8018944 <prvCheckTasksWaitingTermination+0x40>)
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	b1d3      	cbz	r3, 8018940 <prvCheckTasksWaitingTermination+0x3c>
{
 801890a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 801890c:	f000 ff32 	bl	8019774 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018910:	4b0d      	ldr	r3, [pc, #52]	@ (8018948 <prvCheckTasksWaitingTermination+0x44>)
 8018912:	68db      	ldr	r3, [r3, #12]
 8018914:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018916:	1d20      	adds	r0, r4, #4
 8018918:	f7ff f8c0 	bl	8017a9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801891c:	4a0b      	ldr	r2, [pc, #44]	@ (801894c <prvCheckTasksWaitingTermination+0x48>)
 801891e:	6813      	ldr	r3, [r2, #0]
 8018920:	3b01      	subs	r3, #1
 8018922:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018924:	4a07      	ldr	r2, [pc, #28]	@ (8018944 <prvCheckTasksWaitingTermination+0x40>)
 8018926:	6813      	ldr	r3, [r2, #0]
 8018928:	3b01      	subs	r3, #1
 801892a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 801892c:	f000 ff44 	bl	80197b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8018930:	4620      	mov	r0, r4
 8018932:	f7ff ffc7 	bl	80188c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018936:	4b03      	ldr	r3, [pc, #12]	@ (8018944 <prvCheckTasksWaitingTermination+0x40>)
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d1e6      	bne.n	801890c <prvCheckTasksWaitingTermination+0x8>
}
 801893e:	bd10      	pop	{r4, pc}
 8018940:	4770      	bx	lr
 8018942:	bf00      	nop
 8018944:	200025fc 	.word	0x200025fc
 8018948:	20002600 	.word	0x20002600
 801894c:	200025e4 	.word	0x200025e4

08018950 <prvIdleTask>:
{
 8018950:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8018952:	f7ff ffd7 	bl	8018904 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018956:	4b07      	ldr	r3, [pc, #28]	@ (8018974 <prvIdleTask+0x24>)
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	2b01      	cmp	r3, #1
 801895c:	d9f9      	bls.n	8018952 <prvIdleTask+0x2>
				taskYIELD();
 801895e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018966:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801896a:	f3bf 8f4f 	dsb	sy
 801896e:	f3bf 8f6f 	isb	sy
 8018972:	e7ee      	b.n	8018952 <prvIdleTask+0x2>
 8018974:	20002658 	.word	0x20002658

08018978 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018978:	b570      	push	{r4, r5, r6, lr}
 801897a:	4604      	mov	r4, r0
 801897c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801897e:	4b17      	ldr	r3, [pc, #92]	@ (80189dc <prvAddCurrentTaskToDelayedList+0x64>)
 8018980:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018982:	4b17      	ldr	r3, [pc, #92]	@ (80189e0 <prvAddCurrentTaskToDelayedList+0x68>)
 8018984:	6818      	ldr	r0, [r3, #0]
 8018986:	3004      	adds	r0, #4
 8018988:	f7ff f888 	bl	8017a9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801898c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8018990:	d00d      	beq.n	80189ae <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018992:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018994:	4b12      	ldr	r3, [pc, #72]	@ (80189e0 <prvAddCurrentTaskToDelayedList+0x68>)
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801899a:	42a6      	cmp	r6, r4
 801899c:	d910      	bls.n	80189c0 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801899e:	4b11      	ldr	r3, [pc, #68]	@ (80189e4 <prvAddCurrentTaskToDelayedList+0x6c>)
 80189a0:	6818      	ldr	r0, [r3, #0]
 80189a2:	4b0f      	ldr	r3, [pc, #60]	@ (80189e0 <prvAddCurrentTaskToDelayedList+0x68>)
 80189a4:	6819      	ldr	r1, [r3, #0]
 80189a6:	3104      	adds	r1, #4
 80189a8:	f7ff f85f 	bl	8017a6a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80189ac:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80189ae:	2d00      	cmp	r5, #0
 80189b0:	d0ef      	beq.n	8018992 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80189b2:	4b0b      	ldr	r3, [pc, #44]	@ (80189e0 <prvAddCurrentTaskToDelayedList+0x68>)
 80189b4:	6819      	ldr	r1, [r3, #0]
 80189b6:	3104      	adds	r1, #4
 80189b8:	480b      	ldr	r0, [pc, #44]	@ (80189e8 <prvAddCurrentTaskToDelayedList+0x70>)
 80189ba:	f7ff f84b 	bl	8017a54 <vListInsertEnd>
 80189be:	e7f5      	b.n	80189ac <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80189c0:	4b0a      	ldr	r3, [pc, #40]	@ (80189ec <prvAddCurrentTaskToDelayedList+0x74>)
 80189c2:	6818      	ldr	r0, [r3, #0]
 80189c4:	4b06      	ldr	r3, [pc, #24]	@ (80189e0 <prvAddCurrentTaskToDelayedList+0x68>)
 80189c6:	6819      	ldr	r1, [r3, #0]
 80189c8:	3104      	adds	r1, #4
 80189ca:	f7ff f84e 	bl	8017a6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80189ce:	4b08      	ldr	r3, [pc, #32]	@ (80189f0 <prvAddCurrentTaskToDelayedList+0x78>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	42a3      	cmp	r3, r4
 80189d4:	d9ea      	bls.n	80189ac <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 80189d6:	4b06      	ldr	r3, [pc, #24]	@ (80189f0 <prvAddCurrentTaskToDelayedList+0x78>)
 80189d8:	601c      	str	r4, [r3, #0]
}
 80189da:	e7e7      	b.n	80189ac <prvAddCurrentTaskToDelayedList+0x34>
 80189dc:	200025e0 	.word	0x200025e0
 80189e0:	20002ab8 	.word	0x20002ab8
 80189e4:	20002628 	.word	0x20002628
 80189e8:	200025e8 	.word	0x200025e8
 80189ec:	2000262c 	.word	0x2000262c
 80189f0:	200025c4 	.word	0x200025c4

080189f4 <xTaskCreateStatic>:
	{
 80189f4:	b530      	push	{r4, r5, lr}
 80189f6:	b087      	sub	sp, #28
 80189f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80189fa:	b18c      	cbz	r4, 8018a20 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80189fc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80189fe:	b1c5      	cbz	r5, 8018a32 <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8018a00:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 8018a04:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018a06:	9d04      	ldr	r5, [sp, #16]
 8018a08:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 8018a0c:	d01a      	beq.n	8018a44 <xTaskCreateStatic+0x50>
 8018a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a12:	f383 8811 	msr	BASEPRI, r3
 8018a16:	f3bf 8f6f 	isb	sy
 8018a1a:	f3bf 8f4f 	dsb	sy
 8018a1e:	e7fe      	b.n	8018a1e <xTaskCreateStatic+0x2a>
 8018a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a24:	f383 8811 	msr	BASEPRI, r3
 8018a28:	f3bf 8f6f 	isb	sy
 8018a2c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8018a30:	e7fe      	b.n	8018a30 <xTaskCreateStatic+0x3c>
 8018a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a36:	f383 8811 	msr	BASEPRI, r3
 8018a3a:	f3bf 8f6f 	isb	sy
 8018a3e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8018a42:	e7fe      	b.n	8018a42 <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018a44:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018a46:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8018a48:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018a4a:	2402      	movs	r4, #2
 8018a4c:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018a50:	2400      	movs	r4, #0
 8018a52:	9403      	str	r4, [sp, #12]
 8018a54:	9502      	str	r5, [sp, #8]
 8018a56:	ac05      	add	r4, sp, #20
 8018a58:	9401      	str	r4, [sp, #4]
 8018a5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018a5c:	9400      	str	r4, [sp, #0]
 8018a5e:	f7ff fe25 	bl	80186ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018a62:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8018a64:	f7ff fed8 	bl	8018818 <prvAddNewTaskToReadyList>
	}
 8018a68:	9805      	ldr	r0, [sp, #20]
 8018a6a:	b007      	add	sp, #28
 8018a6c:	bd30      	pop	{r4, r5, pc}

08018a6e <xTaskCreate>:
	{
 8018a6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a72:	b085      	sub	sp, #20
 8018a74:	4607      	mov	r7, r0
 8018a76:	4688      	mov	r8, r1
 8018a78:	4614      	mov	r4, r2
 8018a7a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018a7c:	0090      	lsls	r0, r2, #2
 8018a7e:	f001 f833 	bl	8019ae8 <pvPortMalloc>
			if( pxStack != NULL )
 8018a82:	b310      	cbz	r0, 8018aca <xTaskCreate+0x5c>
 8018a84:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018a86:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8018a8a:	f001 f82d 	bl	8019ae8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8018a8e:	4605      	mov	r5, r0
 8018a90:	b1a8      	cbz	r0, 8018abe <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8018a92:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018a96:	2300      	movs	r3, #0
 8018a98:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018a9c:	9303      	str	r3, [sp, #12]
 8018a9e:	9002      	str	r0, [sp, #8]
 8018aa0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018aa2:	9301      	str	r3, [sp, #4]
 8018aa4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018aa6:	9300      	str	r3, [sp, #0]
 8018aa8:	4633      	mov	r3, r6
 8018aaa:	4622      	mov	r2, r4
 8018aac:	4641      	mov	r1, r8
 8018aae:	4638      	mov	r0, r7
 8018ab0:	f7ff fdfc 	bl	80186ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018ab4:	4628      	mov	r0, r5
 8018ab6:	f7ff feaf 	bl	8018818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018aba:	2001      	movs	r0, #1
 8018abc:	e007      	b.n	8018ace <xTaskCreate+0x60>
					vPortFree( pxStack );
 8018abe:	4648      	mov	r0, r9
 8018ac0:	f001 f894 	bl	8019bec <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018ac8:	e001      	b.n	8018ace <xTaskCreate+0x60>
 8018aca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8018ace:	b005      	add	sp, #20
 8018ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018ad4 <vTaskStartScheduler>:
{
 8018ad4:	b510      	push	{r4, lr}
 8018ad6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018ad8:	2400      	movs	r4, #0
 8018ada:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018adc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018ade:	aa07      	add	r2, sp, #28
 8018ae0:	a906      	add	r1, sp, #24
 8018ae2:	a805      	add	r0, sp, #20
 8018ae4:	f7fe ff90 	bl	8017a08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018ae8:	9b05      	ldr	r3, [sp, #20]
 8018aea:	9302      	str	r3, [sp, #8]
 8018aec:	9b06      	ldr	r3, [sp, #24]
 8018aee:	9301      	str	r3, [sp, #4]
 8018af0:	9400      	str	r4, [sp, #0]
 8018af2:	4623      	mov	r3, r4
 8018af4:	9a07      	ldr	r2, [sp, #28]
 8018af6:	491a      	ldr	r1, [pc, #104]	@ (8018b60 <vTaskStartScheduler+0x8c>)
 8018af8:	481a      	ldr	r0, [pc, #104]	@ (8018b64 <vTaskStartScheduler+0x90>)
 8018afa:	f7ff ff7b 	bl	80189f4 <xTaskCreateStatic>
 8018afe:	4b1a      	ldr	r3, [pc, #104]	@ (8018b68 <vTaskStartScheduler+0x94>)
 8018b00:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8018b02:	b1e8      	cbz	r0, 8018b40 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8018b04:	f000 fc0c 	bl	8019320 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8018b08:	2801      	cmp	r0, #1
 8018b0a:	d11a      	bne.n	8018b42 <vTaskStartScheduler+0x6e>
 8018b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b10:	f383 8811 	msr	BASEPRI, r3
 8018b14:	f3bf 8f6f 	isb	sy
 8018b18:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018b1c:	4b13      	ldr	r3, [pc, #76]	@ (8018b6c <vTaskStartScheduler+0x98>)
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	3358      	adds	r3, #88	@ 0x58
 8018b22:	4a13      	ldr	r2, [pc, #76]	@ (8018b70 <vTaskStartScheduler+0x9c>)
 8018b24:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8018b26:	4b13      	ldr	r3, [pc, #76]	@ (8018b74 <vTaskStartScheduler+0xa0>)
 8018b28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018b2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018b2e:	4b12      	ldr	r3, [pc, #72]	@ (8018b78 <vTaskStartScheduler+0xa4>)
 8018b30:	2201      	movs	r2, #1
 8018b32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018b34:	4b11      	ldr	r3, [pc, #68]	@ (8018b7c <vTaskStartScheduler+0xa8>)
 8018b36:	2200      	movs	r2, #0
 8018b38:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8018b3a:	f000 feb5 	bl	80198a8 <xPortStartScheduler>
 8018b3e:	e003      	b.n	8018b48 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 8018b40:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018b42:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8018b46:	d001      	beq.n	8018b4c <vTaskStartScheduler+0x78>
}
 8018b48:	b008      	add	sp, #32
 8018b4a:	bd10      	pop	{r4, pc}
 8018b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b50:	f383 8811 	msr	BASEPRI, r3
 8018b54:	f3bf 8f6f 	isb	sy
 8018b58:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018b5c:	e7fe      	b.n	8018b5c <vTaskStartScheduler+0x88>
 8018b5e:	bf00      	nop
 8018b60:	08037b04 	.word	0x08037b04
 8018b64:	08018951 	.word	0x08018951
 8018b68:	200025c0 	.word	0x200025c0
 8018b6c:	20002ab8 	.word	0x20002ab8
 8018b70:	20000254 	.word	0x20000254
 8018b74:	200025c4 	.word	0x200025c4
 8018b78:	200025d8 	.word	0x200025d8
 8018b7c:	200025e0 	.word	0x200025e0

08018b80 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8018b80:	4a02      	ldr	r2, [pc, #8]	@ (8018b8c <vTaskSuspendAll+0xc>)
 8018b82:	6813      	ldr	r3, [r2, #0]
 8018b84:	3301      	adds	r3, #1
 8018b86:	6013      	str	r3, [r2, #0]
}
 8018b88:	4770      	bx	lr
 8018b8a:	bf00      	nop
 8018b8c:	200025bc 	.word	0x200025bc

08018b90 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8018b90:	4b01      	ldr	r3, [pc, #4]	@ (8018b98 <xTaskGetTickCount+0x8>)
 8018b92:	6818      	ldr	r0, [r3, #0]
}
 8018b94:	4770      	bx	lr
 8018b96:	bf00      	nop
 8018b98:	200025e0 	.word	0x200025e0

08018b9c <xTaskIncrementTick>:
{
 8018b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8018c88 <xTaskIncrementTick+0xec>)
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d169      	bne.n	8018c7a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018ba6:	4b39      	ldr	r3, [pc, #228]	@ (8018c8c <xTaskIncrementTick+0xf0>)
 8018ba8:	681d      	ldr	r5, [r3, #0]
 8018baa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8018bac:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018bae:	b9c5      	cbnz	r5, 8018be2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8018bb0:	4b37      	ldr	r3, [pc, #220]	@ (8018c90 <xTaskIncrementTick+0xf4>)
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	b143      	cbz	r3, 8018bca <xTaskIncrementTick+0x2e>
 8018bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bbc:	f383 8811 	msr	BASEPRI, r3
 8018bc0:	f3bf 8f6f 	isb	sy
 8018bc4:	f3bf 8f4f 	dsb	sy
 8018bc8:	e7fe      	b.n	8018bc8 <xTaskIncrementTick+0x2c>
 8018bca:	4a31      	ldr	r2, [pc, #196]	@ (8018c90 <xTaskIncrementTick+0xf4>)
 8018bcc:	6811      	ldr	r1, [r2, #0]
 8018bce:	4b31      	ldr	r3, [pc, #196]	@ (8018c94 <xTaskIncrementTick+0xf8>)
 8018bd0:	6818      	ldr	r0, [r3, #0]
 8018bd2:	6010      	str	r0, [r2, #0]
 8018bd4:	6019      	str	r1, [r3, #0]
 8018bd6:	4a30      	ldr	r2, [pc, #192]	@ (8018c98 <xTaskIncrementTick+0xfc>)
 8018bd8:	6813      	ldr	r3, [r2, #0]
 8018bda:	3301      	adds	r3, #1
 8018bdc:	6013      	str	r3, [r2, #0]
 8018bde:	f7ff fd4f 	bl	8018680 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018be2:	4b2e      	ldr	r3, [pc, #184]	@ (8018c9c <xTaskIncrementTick+0x100>)
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	42ab      	cmp	r3, r5
 8018be8:	d93d      	bls.n	8018c66 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8018bea:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018bec:	4b2c      	ldr	r3, [pc, #176]	@ (8018ca0 <xTaskIncrementTick+0x104>)
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018bf6:	009a      	lsls	r2, r3, #2
 8018bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8018ca4 <xTaskIncrementTick+0x108>)
 8018bfa:	589b      	ldr	r3, [r3, r2]
 8018bfc:	2b01      	cmp	r3, #1
 8018bfe:	d900      	bls.n	8018c02 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8018c00:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8018c02:	4b29      	ldr	r3, [pc, #164]	@ (8018ca8 <xTaskIncrementTick+0x10c>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d03c      	beq.n	8018c84 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8018c0a:	2701      	movs	r7, #1
	return xSwitchRequired;
 8018c0c:	e03a      	b.n	8018c84 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8018c0e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018c10:	4b1f      	ldr	r3, [pc, #124]	@ (8018c90 <xTaskIncrementTick+0xf4>)
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	b343      	cbz	r3, 8018c6a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c18:	4b1d      	ldr	r3, [pc, #116]	@ (8018c90 <xTaskIncrementTick+0xf4>)
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	68db      	ldr	r3, [r3, #12]
 8018c1e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018c20:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8018c22:	429d      	cmp	r5, r3
 8018c24:	d326      	bcc.n	8018c74 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018c26:	1d26      	adds	r6, r4, #4
 8018c28:	4630      	mov	r0, r6
 8018c2a:	f7fe ff37 	bl	8017a9c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018c2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8018c30:	b11b      	cbz	r3, 8018c3a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018c32:	f104 0018 	add.w	r0, r4, #24
 8018c36:	f7fe ff31 	bl	8017a9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018c3a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8018c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8018cac <xTaskIncrementTick+0x110>)
 8018c3e:	6812      	ldr	r2, [r2, #0]
 8018c40:	4293      	cmp	r3, r2
 8018c42:	d901      	bls.n	8018c48 <xTaskIncrementTick+0xac>
 8018c44:	4a19      	ldr	r2, [pc, #100]	@ (8018cac <xTaskIncrementTick+0x110>)
 8018c46:	6013      	str	r3, [r2, #0]
 8018c48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018c4c:	009a      	lsls	r2, r3, #2
 8018c4e:	4631      	mov	r1, r6
 8018c50:	4814      	ldr	r0, [pc, #80]	@ (8018ca4 <xTaskIncrementTick+0x108>)
 8018c52:	4410      	add	r0, r2
 8018c54:	f7fe fefe 	bl	8017a54 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018c58:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018c5a:	4b11      	ldr	r3, [pc, #68]	@ (8018ca0 <xTaskIncrementTick+0x104>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c60:	429a      	cmp	r2, r3
 8018c62:	d2d4      	bcs.n	8018c0e <xTaskIncrementTick+0x72>
 8018c64:	e7d4      	b.n	8018c10 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8018c66:	2700      	movs	r7, #0
 8018c68:	e7d2      	b.n	8018c10 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8018c9c <xTaskIncrementTick+0x100>)
 8018c6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018c70:	601a      	str	r2, [r3, #0]
					break;
 8018c72:	e7bb      	b.n	8018bec <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8018c74:	4a09      	ldr	r2, [pc, #36]	@ (8018c9c <xTaskIncrementTick+0x100>)
 8018c76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018c78:	e7b8      	b.n	8018bec <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8018c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8018cb0 <xTaskIncrementTick+0x114>)
 8018c7c:	6813      	ldr	r3, [r2, #0]
 8018c7e:	3301      	adds	r3, #1
 8018c80:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8018c82:	2700      	movs	r7, #0
}
 8018c84:	4638      	mov	r0, r7
 8018c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c88:	200025bc 	.word	0x200025bc
 8018c8c:	200025e0 	.word	0x200025e0
 8018c90:	2000262c 	.word	0x2000262c
 8018c94:	20002628 	.word	0x20002628
 8018c98:	200025cc 	.word	0x200025cc
 8018c9c:	200025c4 	.word	0x200025c4
 8018ca0:	20002ab8 	.word	0x20002ab8
 8018ca4:	20002658 	.word	0x20002658
 8018ca8:	200025d0 	.word	0x200025d0
 8018cac:	200025dc 	.word	0x200025dc
 8018cb0:	200025d4 	.word	0x200025d4

08018cb4 <xTaskResumeAll>:
{
 8018cb4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8018cb6:	4b35      	ldr	r3, [pc, #212]	@ (8018d8c <xTaskResumeAll+0xd8>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	b943      	cbnz	r3, 8018cce <xTaskResumeAll+0x1a>
 8018cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cc0:	f383 8811 	msr	BASEPRI, r3
 8018cc4:	f3bf 8f6f 	isb	sy
 8018cc8:	f3bf 8f4f 	dsb	sy
 8018ccc:	e7fe      	b.n	8018ccc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8018cce:	f000 fd51 	bl	8019774 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8018cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8018d8c <xTaskResumeAll+0xd8>)
 8018cd4:	681a      	ldr	r2, [r3, #0]
 8018cd6:	3a01      	subs	r2, #1
 8018cd8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d14f      	bne.n	8018d80 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8018d90 <xTaskResumeAll+0xdc>)
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	b90b      	cbnz	r3, 8018cea <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8018ce6:	2400      	movs	r4, #0
 8018ce8:	e04b      	b.n	8018d82 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8018cea:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018cec:	4b29      	ldr	r3, [pc, #164]	@ (8018d94 <xTaskResumeAll+0xe0>)
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	b31b      	cbz	r3, 8018d3a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018cf2:	4b28      	ldr	r3, [pc, #160]	@ (8018d94 <xTaskResumeAll+0xe0>)
 8018cf4:	68db      	ldr	r3, [r3, #12]
 8018cf6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018cf8:	f104 0018 	add.w	r0, r4, #24
 8018cfc:	f7fe fece 	bl	8017a9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018d00:	1d25      	adds	r5, r4, #4
 8018d02:	4628      	mov	r0, r5
 8018d04:	f7fe feca 	bl	8017a9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018d08:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8018d0a:	4b23      	ldr	r3, [pc, #140]	@ (8018d98 <xTaskResumeAll+0xe4>)
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	4298      	cmp	r0, r3
 8018d10:	d901      	bls.n	8018d16 <xTaskResumeAll+0x62>
 8018d12:	4b21      	ldr	r3, [pc, #132]	@ (8018d98 <xTaskResumeAll+0xe4>)
 8018d14:	6018      	str	r0, [r3, #0]
 8018d16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018d1a:	4629      	mov	r1, r5
 8018d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8018d9c <xTaskResumeAll+0xe8>)
 8018d1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018d22:	f7fe fe97 	bl	8017a54 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018d26:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018d28:	4b1d      	ldr	r3, [pc, #116]	@ (8018da0 <xTaskResumeAll+0xec>)
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d2e:	429a      	cmp	r2, r3
 8018d30:	d3dc      	bcc.n	8018cec <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8018d32:	4b1c      	ldr	r3, [pc, #112]	@ (8018da4 <xTaskResumeAll+0xf0>)
 8018d34:	2201      	movs	r2, #1
 8018d36:	601a      	str	r2, [r3, #0]
 8018d38:	e7d8      	b.n	8018cec <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8018d3a:	b10c      	cbz	r4, 8018d40 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8018d3c:	f7ff fca0 	bl	8018680 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018d40:	4b19      	ldr	r3, [pc, #100]	@ (8018da8 <xTaskResumeAll+0xf4>)
 8018d42:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8018d44:	b984      	cbnz	r4, 8018d68 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8018d46:	4b17      	ldr	r3, [pc, #92]	@ (8018da4 <xTaskResumeAll+0xf0>)
 8018d48:	681c      	ldr	r4, [r3, #0]
 8018d4a:	b1d4      	cbz	r4, 8018d82 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8018d4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018d54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018d58:	f3bf 8f4f 	dsb	sy
 8018d5c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8018d60:	2401      	movs	r4, #1
 8018d62:	e00e      	b.n	8018d82 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018d64:	3c01      	subs	r4, #1
 8018d66:	d007      	beq.n	8018d78 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8018d68:	f7ff ff18 	bl	8018b9c <xTaskIncrementTick>
 8018d6c:	2800      	cmp	r0, #0
 8018d6e:	d0f9      	beq.n	8018d64 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8018d70:	4b0c      	ldr	r3, [pc, #48]	@ (8018da4 <xTaskResumeAll+0xf0>)
 8018d72:	2201      	movs	r2, #1
 8018d74:	601a      	str	r2, [r3, #0]
 8018d76:	e7f5      	b.n	8018d64 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8018d78:	4b0b      	ldr	r3, [pc, #44]	@ (8018da8 <xTaskResumeAll+0xf4>)
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	601a      	str	r2, [r3, #0]
 8018d7e:	e7e2      	b.n	8018d46 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8018d80:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8018d82:	f000 fd19 	bl	80197b8 <vPortExitCritical>
}
 8018d86:	4620      	mov	r0, r4
 8018d88:	bd38      	pop	{r3, r4, r5, pc}
 8018d8a:	bf00      	nop
 8018d8c:	200025bc 	.word	0x200025bc
 8018d90:	200025e4 	.word	0x200025e4
 8018d94:	20002614 	.word	0x20002614
 8018d98:	200025dc 	.word	0x200025dc
 8018d9c:	20002658 	.word	0x20002658
 8018da0:	20002ab8 	.word	0x20002ab8
 8018da4:	200025d0 	.word	0x200025d0
 8018da8:	200025d4 	.word	0x200025d4

08018dac <vTaskDelay>:
	{
 8018dac:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018dae:	b1a8      	cbz	r0, 8018ddc <vTaskDelay+0x30>
 8018db0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8018db2:	4b10      	ldr	r3, [pc, #64]	@ (8018df4 <vTaskDelay+0x48>)
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	b143      	cbz	r3, 8018dca <vTaskDelay+0x1e>
 8018db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dbc:	f383 8811 	msr	BASEPRI, r3
 8018dc0:	f3bf 8f6f 	isb	sy
 8018dc4:	f3bf 8f4f 	dsb	sy
 8018dc8:	e7fe      	b.n	8018dc8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8018dca:	f7ff fed9 	bl	8018b80 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018dce:	2100      	movs	r1, #0
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	f7ff fdd1 	bl	8018978 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8018dd6:	f7ff ff6d 	bl	8018cb4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8018dda:	b948      	cbnz	r0, 8018df0 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8018ddc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018de4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018de8:	f3bf 8f4f 	dsb	sy
 8018dec:	f3bf 8f6f 	isb	sy
	}
 8018df0:	bd10      	pop	{r4, pc}
 8018df2:	bf00      	nop
 8018df4:	200025bc 	.word	0x200025bc

08018df8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018df8:	4b22      	ldr	r3, [pc, #136]	@ (8018e84 <vTaskSwitchContext+0x8c>)
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	b11b      	cbz	r3, 8018e06 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8018dfe:	4b22      	ldr	r3, [pc, #136]	@ (8018e88 <vTaskSwitchContext+0x90>)
 8018e00:	2201      	movs	r2, #1
 8018e02:	601a      	str	r2, [r3, #0]
 8018e04:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8018e06:	4b20      	ldr	r3, [pc, #128]	@ (8018e88 <vTaskSwitchContext+0x90>)
 8018e08:	2200      	movs	r2, #0
 8018e0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8018e8c <vTaskSwitchContext+0x94>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8018e14:	008a      	lsls	r2, r1, #2
 8018e16:	491e      	ldr	r1, [pc, #120]	@ (8018e90 <vTaskSwitchContext+0x98>)
 8018e18:	588a      	ldr	r2, [r1, r2]
 8018e1a:	b95a      	cbnz	r2, 8018e34 <vTaskSwitchContext+0x3c>
 8018e1c:	b10b      	cbz	r3, 8018e22 <vTaskSwitchContext+0x2a>
 8018e1e:	3b01      	subs	r3, #1
 8018e20:	e7f6      	b.n	8018e10 <vTaskSwitchContext+0x18>
 8018e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e26:	f383 8811 	msr	BASEPRI, r3
 8018e2a:	f3bf 8f6f 	isb	sy
 8018e2e:	f3bf 8f4f 	dsb	sy
 8018e32:	e7fe      	b.n	8018e32 <vTaskSwitchContext+0x3a>
 8018e34:	4608      	mov	r0, r1
 8018e36:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8018e3a:	008a      	lsls	r2, r1, #2
 8018e3c:	4402      	add	r2, r0
 8018e3e:	6851      	ldr	r1, [r2, #4]
 8018e40:	6849      	ldr	r1, [r1, #4]
 8018e42:	6051      	str	r1, [r2, #4]
 8018e44:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8018e48:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8018e4c:	3208      	adds	r2, #8
 8018e4e:	4402      	add	r2, r0
 8018e50:	4291      	cmp	r1, r2
 8018e52:	d00f      	beq.n	8018e74 <vTaskSwitchContext+0x7c>
 8018e54:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8018e58:	0091      	lsls	r1, r2, #2
 8018e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8018e90 <vTaskSwitchContext+0x98>)
 8018e5c:	440a      	add	r2, r1
 8018e5e:	6852      	ldr	r2, [r2, #4]
 8018e60:	68d1      	ldr	r1, [r2, #12]
 8018e62:	4a0c      	ldr	r2, [pc, #48]	@ (8018e94 <vTaskSwitchContext+0x9c>)
 8018e64:	6011      	str	r1, [r2, #0]
 8018e66:	4909      	ldr	r1, [pc, #36]	@ (8018e8c <vTaskSwitchContext+0x94>)
 8018e68:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018e6a:	6813      	ldr	r3, [r2, #0]
 8018e6c:	3358      	adds	r3, #88	@ 0x58
 8018e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8018e98 <vTaskSwitchContext+0xa0>)
 8018e70:	6013      	str	r3, [r2, #0]
}
 8018e72:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e74:	6848      	ldr	r0, [r1, #4]
 8018e76:	4662      	mov	r2, ip
 8018e78:	0091      	lsls	r1, r2, #2
 8018e7a:	4a05      	ldr	r2, [pc, #20]	@ (8018e90 <vTaskSwitchContext+0x98>)
 8018e7c:	440a      	add	r2, r1
 8018e7e:	6050      	str	r0, [r2, #4]
 8018e80:	e7e8      	b.n	8018e54 <vTaskSwitchContext+0x5c>
 8018e82:	bf00      	nop
 8018e84:	200025bc 	.word	0x200025bc
 8018e88:	200025d0 	.word	0x200025d0
 8018e8c:	200025dc 	.word	0x200025dc
 8018e90:	20002658 	.word	0x20002658
 8018e94:	20002ab8 	.word	0x20002ab8
 8018e98:	20000254 	.word	0x20000254

08018e9c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8018e9c:	b158      	cbz	r0, 8018eb6 <vTaskPlaceOnEventList+0x1a>
{
 8018e9e:	b510      	push	{r4, lr}
 8018ea0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018ea2:	4a09      	ldr	r2, [pc, #36]	@ (8018ec8 <vTaskPlaceOnEventList+0x2c>)
 8018ea4:	6811      	ldr	r1, [r2, #0]
 8018ea6:	3118      	adds	r1, #24
 8018ea8:	f7fe fddf 	bl	8017a6a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018eac:	2101      	movs	r1, #1
 8018eae:	4620      	mov	r0, r4
 8018eb0:	f7ff fd62 	bl	8018978 <prvAddCurrentTaskToDelayedList>
}
 8018eb4:	bd10      	pop	{r4, pc}
 8018eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018eba:	f383 8811 	msr	BASEPRI, r3
 8018ebe:	f3bf 8f6f 	isb	sy
 8018ec2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8018ec6:	e7fe      	b.n	8018ec6 <vTaskPlaceOnEventList+0x2a>
 8018ec8:	20002ab8 	.word	0x20002ab8

08018ecc <vTaskPlaceOnEventListRestricted>:
	{
 8018ecc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8018ece:	b170      	cbz	r0, 8018eee <vTaskPlaceOnEventListRestricted+0x22>
 8018ed0:	460d      	mov	r5, r1
 8018ed2:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8018f00 <vTaskPlaceOnEventListRestricted+0x34>)
 8018ed6:	6811      	ldr	r1, [r2, #0]
 8018ed8:	3118      	adds	r1, #24
 8018eda:	f7fe fdbb 	bl	8017a54 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8018ede:	b10c      	cbz	r4, 8018ee4 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8018ee0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018ee4:	4621      	mov	r1, r4
 8018ee6:	4628      	mov	r0, r5
 8018ee8:	f7ff fd46 	bl	8018978 <prvAddCurrentTaskToDelayedList>
	}
 8018eec:	bd38      	pop	{r3, r4, r5, pc}
 8018eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ef2:	f383 8811 	msr	BASEPRI, r3
 8018ef6:	f3bf 8f6f 	isb	sy
 8018efa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8018efe:	e7fe      	b.n	8018efe <vTaskPlaceOnEventListRestricted+0x32>
 8018f00:	20002ab8 	.word	0x20002ab8

08018f04 <xTaskRemoveFromEventList>:
{
 8018f04:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f06:	68c3      	ldr	r3, [r0, #12]
 8018f08:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8018f0a:	b324      	cbz	r4, 8018f56 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018f0c:	f104 0518 	add.w	r5, r4, #24
 8018f10:	4628      	mov	r0, r5
 8018f12:	f7fe fdc3 	bl	8017a9c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018f16:	4b18      	ldr	r3, [pc, #96]	@ (8018f78 <xTaskRemoveFromEventList+0x74>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	bb2b      	cbnz	r3, 8018f68 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018f1c:	1d25      	adds	r5, r4, #4
 8018f1e:	4628      	mov	r0, r5
 8018f20:	f7fe fdbc 	bl	8017a9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018f24:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8018f26:	4b15      	ldr	r3, [pc, #84]	@ (8018f7c <xTaskRemoveFromEventList+0x78>)
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	4298      	cmp	r0, r3
 8018f2c:	d901      	bls.n	8018f32 <xTaskRemoveFromEventList+0x2e>
 8018f2e:	4b13      	ldr	r3, [pc, #76]	@ (8018f7c <xTaskRemoveFromEventList+0x78>)
 8018f30:	6018      	str	r0, [r3, #0]
 8018f32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018f36:	4629      	mov	r1, r5
 8018f38:	4b11      	ldr	r3, [pc, #68]	@ (8018f80 <xTaskRemoveFromEventList+0x7c>)
 8018f3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018f3e:	f7fe fd89 	bl	8017a54 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018f42:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018f44:	4b0f      	ldr	r3, [pc, #60]	@ (8018f84 <xTaskRemoveFromEventList+0x80>)
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f4a:	429a      	cmp	r2, r3
 8018f4c:	d911      	bls.n	8018f72 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8018f4e:	2001      	movs	r0, #1
 8018f50:	4b0d      	ldr	r3, [pc, #52]	@ (8018f88 <xTaskRemoveFromEventList+0x84>)
 8018f52:	6018      	str	r0, [r3, #0]
}
 8018f54:	bd38      	pop	{r3, r4, r5, pc}
 8018f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f5a:	f383 8811 	msr	BASEPRI, r3
 8018f5e:	f3bf 8f6f 	isb	sy
 8018f62:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8018f66:	e7fe      	b.n	8018f66 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018f68:	4629      	mov	r1, r5
 8018f6a:	4808      	ldr	r0, [pc, #32]	@ (8018f8c <xTaskRemoveFromEventList+0x88>)
 8018f6c:	f7fe fd72 	bl	8017a54 <vListInsertEnd>
 8018f70:	e7e7      	b.n	8018f42 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8018f72:	2000      	movs	r0, #0
	return xReturn;
 8018f74:	e7ee      	b.n	8018f54 <xTaskRemoveFromEventList+0x50>
 8018f76:	bf00      	nop
 8018f78:	200025bc 	.word	0x200025bc
 8018f7c:	200025dc 	.word	0x200025dc
 8018f80:	20002658 	.word	0x20002658
 8018f84:	20002ab8 	.word	0x20002ab8
 8018f88:	200025d0 	.word	0x200025d0
 8018f8c:	20002614 	.word	0x20002614

08018f90 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018f90:	4b03      	ldr	r3, [pc, #12]	@ (8018fa0 <vTaskInternalSetTimeOutState+0x10>)
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018f96:	4b03      	ldr	r3, [pc, #12]	@ (8018fa4 <vTaskInternalSetTimeOutState+0x14>)
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	6043      	str	r3, [r0, #4]
}
 8018f9c:	4770      	bx	lr
 8018f9e:	bf00      	nop
 8018fa0:	200025cc 	.word	0x200025cc
 8018fa4:	200025e0 	.word	0x200025e0

08018fa8 <xTaskCheckForTimeOut>:
{
 8018fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8018faa:	b1c8      	cbz	r0, 8018fe0 <xTaskCheckForTimeOut+0x38>
 8018fac:	460c      	mov	r4, r1
 8018fae:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8018fb0:	b1f9      	cbz	r1, 8018ff2 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8018fb2:	f000 fbdf 	bl	8019774 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8018fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8019024 <xTaskCheckForTimeOut+0x7c>)
 8018fb8:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018fba:	686b      	ldr	r3, [r5, #4]
 8018fbc:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8018fbe:	6822      	ldr	r2, [r4, #0]
 8018fc0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8018fc4:	d026      	beq.n	8019014 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018fc6:	4e18      	ldr	r6, [pc, #96]	@ (8019028 <xTaskCheckForTimeOut+0x80>)
 8018fc8:	6836      	ldr	r6, [r6, #0]
 8018fca:	682f      	ldr	r7, [r5, #0]
 8018fcc:	42b7      	cmp	r7, r6
 8018fce:	d001      	beq.n	8018fd4 <xTaskCheckForTimeOut+0x2c>
 8018fd0:	428b      	cmp	r3, r1
 8018fd2:	d924      	bls.n	801901e <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018fd4:	4282      	cmp	r2, r0
 8018fd6:	d815      	bhi.n	8019004 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8018fd8:	2300      	movs	r3, #0
 8018fda:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8018fdc:	2401      	movs	r4, #1
 8018fde:	e01a      	b.n	8019016 <xTaskCheckForTimeOut+0x6e>
 8018fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fe4:	f383 8811 	msr	BASEPRI, r3
 8018fe8:	f3bf 8f6f 	isb	sy
 8018fec:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8018ff0:	e7fe      	b.n	8018ff0 <xTaskCheckForTimeOut+0x48>
 8018ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ff6:	f383 8811 	msr	BASEPRI, r3
 8018ffa:	f3bf 8f6f 	isb	sy
 8018ffe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8019002:	e7fe      	b.n	8019002 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8019004:	1a5b      	subs	r3, r3, r1
 8019006:	4413      	add	r3, r2
 8019008:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801900a:	4628      	mov	r0, r5
 801900c:	f7ff ffc0 	bl	8018f90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019010:	2400      	movs	r4, #0
 8019012:	e000      	b.n	8019016 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8019014:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019016:	f000 fbcf 	bl	80197b8 <vPortExitCritical>
}
 801901a:	4620      	mov	r0, r4
 801901c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 801901e:	2401      	movs	r4, #1
 8019020:	e7f9      	b.n	8019016 <xTaskCheckForTimeOut+0x6e>
 8019022:	bf00      	nop
 8019024:	200025e0 	.word	0x200025e0
 8019028:	200025cc 	.word	0x200025cc

0801902c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801902c:	4b01      	ldr	r3, [pc, #4]	@ (8019034 <vTaskMissedYield+0x8>)
 801902e:	2201      	movs	r2, #1
 8019030:	601a      	str	r2, [r3, #0]
}
 8019032:	4770      	bx	lr
 8019034:	200025d0 	.word	0x200025d0

08019038 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8019038:	4b01      	ldr	r3, [pc, #4]	@ (8019040 <xTaskGetCurrentTaskHandle+0x8>)
 801903a:	6818      	ldr	r0, [r3, #0]
	}
 801903c:	4770      	bx	lr
 801903e:	bf00      	nop
 8019040:	20002ab8 	.word	0x20002ab8

08019044 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8019044:	4b05      	ldr	r3, [pc, #20]	@ (801905c <xTaskGetSchedulerState+0x18>)
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	b133      	cbz	r3, 8019058 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801904a:	4b05      	ldr	r3, [pc, #20]	@ (8019060 <xTaskGetSchedulerState+0x1c>)
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	b10b      	cbz	r3, 8019054 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8019050:	2000      	movs	r0, #0
	}
 8019052:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8019054:	2002      	movs	r0, #2
 8019056:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019058:	2001      	movs	r0, #1
 801905a:	4770      	bx	lr
 801905c:	200025d8 	.word	0x200025d8
 8019060:	200025bc 	.word	0x200025bc

08019064 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8019064:	2800      	cmp	r0, #0
 8019066:	d03e      	beq.n	80190e6 <xTaskPriorityInherit+0x82>
	{
 8019068:	b538      	push	{r3, r4, r5, lr}
 801906a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801906c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801906e:	4a20      	ldr	r2, [pc, #128]	@ (80190f0 <xTaskPriorityInherit+0x8c>)
 8019070:	6812      	ldr	r2, [r2, #0]
 8019072:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019074:	4293      	cmp	r3, r2
 8019076:	d22e      	bcs.n	80190d6 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019078:	6982      	ldr	r2, [r0, #24]
 801907a:	2a00      	cmp	r2, #0
 801907c:	db05      	blt.n	801908a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801907e:	4a1c      	ldr	r2, [pc, #112]	@ (80190f0 <xTaskPriorityInherit+0x8c>)
 8019080:	6812      	ldr	r2, [r2, #0]
 8019082:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019084:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8019088:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801908a:	6961      	ldr	r1, [r4, #20]
 801908c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019090:	4a18      	ldr	r2, [pc, #96]	@ (80190f4 <xTaskPriorityInherit+0x90>)
 8019092:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019096:	4299      	cmp	r1, r3
 8019098:	d005      	beq.n	80190a6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801909a:	4b15      	ldr	r3, [pc, #84]	@ (80190f0 <xTaskPriorityInherit+0x8c>)
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80190a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 80190a2:	2001      	movs	r0, #1
	}
 80190a4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80190a6:	1d25      	adds	r5, r4, #4
 80190a8:	4628      	mov	r0, r5
 80190aa:	f7fe fcf7 	bl	8017a9c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80190ae:	4b10      	ldr	r3, [pc, #64]	@ (80190f0 <xTaskPriorityInherit+0x8c>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80190b4:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80190b6:	4b10      	ldr	r3, [pc, #64]	@ (80190f8 <xTaskPriorityInherit+0x94>)
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	4298      	cmp	r0, r3
 80190bc:	d901      	bls.n	80190c2 <xTaskPriorityInherit+0x5e>
 80190be:	4b0e      	ldr	r3, [pc, #56]	@ (80190f8 <xTaskPriorityInherit+0x94>)
 80190c0:	6018      	str	r0, [r3, #0]
 80190c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80190c6:	4629      	mov	r1, r5
 80190c8:	4b0a      	ldr	r3, [pc, #40]	@ (80190f4 <xTaskPriorityInherit+0x90>)
 80190ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80190ce:	f7fe fcc1 	bl	8017a54 <vListInsertEnd>
				xReturn = pdTRUE;
 80190d2:	2001      	movs	r0, #1
 80190d4:	e7e6      	b.n	80190a4 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80190d6:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80190d8:	4b05      	ldr	r3, [pc, #20]	@ (80190f0 <xTaskPriorityInherit+0x8c>)
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80190de:	429a      	cmp	r2, r3
 80190e0:	d303      	bcc.n	80190ea <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 80190e2:	2000      	movs	r0, #0
 80190e4:	e7de      	b.n	80190a4 <xTaskPriorityInherit+0x40>
 80190e6:	2000      	movs	r0, #0
	}
 80190e8:	4770      	bx	lr
					xReturn = pdTRUE;
 80190ea:	2001      	movs	r0, #1
		return xReturn;
 80190ec:	e7da      	b.n	80190a4 <xTaskPriorityInherit+0x40>
 80190ee:	bf00      	nop
 80190f0:	20002ab8 	.word	0x20002ab8
 80190f4:	20002658 	.word	0x20002658
 80190f8:	200025dc 	.word	0x200025dc

080190fc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80190fc:	2800      	cmp	r0, #0
 80190fe:	d03b      	beq.n	8019178 <xTaskPriorityDisinherit+0x7c>
	{
 8019100:	b538      	push	{r3, r4, r5, lr}
 8019102:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8019104:	4b1e      	ldr	r3, [pc, #120]	@ (8019180 <xTaskPriorityDisinherit+0x84>)
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	4283      	cmp	r3, r0
 801910a:	d008      	beq.n	801911e <xTaskPriorityDisinherit+0x22>
 801910c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019110:	f383 8811 	msr	BASEPRI, r3
 8019114:	f3bf 8f6f 	isb	sy
 8019118:	f3bf 8f4f 	dsb	sy
 801911c:	e7fe      	b.n	801911c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801911e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8019120:	b943      	cbnz	r3, 8019134 <xTaskPriorityDisinherit+0x38>
 8019122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019126:	f383 8811 	msr	BASEPRI, r3
 801912a:	f3bf 8f6f 	isb	sy
 801912e:	f3bf 8f4f 	dsb	sy
 8019132:	e7fe      	b.n	8019132 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8019134:	3b01      	subs	r3, #1
 8019136:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019138:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801913a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801913c:	4291      	cmp	r1, r2
 801913e:	d01d      	beq.n	801917c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019140:	b10b      	cbz	r3, 8019146 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8019142:	2000      	movs	r0, #0
	}
 8019144:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019146:	1d05      	adds	r5, r0, #4
 8019148:	4628      	mov	r0, r5
 801914a:	f7fe fca7 	bl	8017a9c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801914e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8019150:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019152:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8019156:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8019158:	4b0a      	ldr	r3, [pc, #40]	@ (8019184 <xTaskPriorityDisinherit+0x88>)
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	4298      	cmp	r0, r3
 801915e:	d901      	bls.n	8019164 <xTaskPriorityDisinherit+0x68>
 8019160:	4b08      	ldr	r3, [pc, #32]	@ (8019184 <xTaskPriorityDisinherit+0x88>)
 8019162:	6018      	str	r0, [r3, #0]
 8019164:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019168:	4629      	mov	r1, r5
 801916a:	4b07      	ldr	r3, [pc, #28]	@ (8019188 <xTaskPriorityDisinherit+0x8c>)
 801916c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019170:	f7fe fc70 	bl	8017a54 <vListInsertEnd>
					xReturn = pdTRUE;
 8019174:	2001      	movs	r0, #1
 8019176:	e7e5      	b.n	8019144 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8019178:	2000      	movs	r0, #0
	}
 801917a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 801917c:	2000      	movs	r0, #0
 801917e:	e7e1      	b.n	8019144 <xTaskPriorityDisinherit+0x48>
 8019180:	20002ab8 	.word	0x20002ab8
 8019184:	200025dc 	.word	0x200025dc
 8019188:	20002658 	.word	0x20002658

0801918c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801918c:	2800      	cmp	r0, #0
 801918e:	d046      	beq.n	801921e <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8019190:	b538      	push	{r3, r4, r5, lr}
 8019192:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8019194:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8019196:	b943      	cbnz	r3, 80191aa <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8019198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801919c:	f383 8811 	msr	BASEPRI, r3
 80191a0:	f3bf 8f6f 	isb	sy
 80191a4:	f3bf 8f4f 	dsb	sy
 80191a8:	e7fe      	b.n	80191a8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80191aa:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80191ac:	428a      	cmp	r2, r1
 80191ae:	d200      	bcs.n	80191b2 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80191b0:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80191b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80191b4:	4291      	cmp	r1, r2
 80191b6:	d001      	beq.n	80191bc <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80191b8:	2b01      	cmp	r3, #1
 80191ba:	d000      	beq.n	80191be <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80191bc:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80191be:	4b18      	ldr	r3, [pc, #96]	@ (8019220 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	42a3      	cmp	r3, r4
 80191c4:	d022      	beq.n	801920c <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80191c6:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80191c8:	69a3      	ldr	r3, [r4, #24]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	db02      	blt.n	80191d4 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80191ce:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80191d2:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80191d4:	6962      	ldr	r2, [r4, #20]
 80191d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80191da:	4b12      	ldr	r3, [pc, #72]	@ (8019224 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80191dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80191e0:	429a      	cmp	r2, r3
 80191e2:	d1eb      	bne.n	80191bc <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80191e4:	1d25      	adds	r5, r4, #4
 80191e6:	4628      	mov	r0, r5
 80191e8:	f7fe fc58 	bl	8017a9c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80191ec:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80191ee:	4b0e      	ldr	r3, [pc, #56]	@ (8019228 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	4298      	cmp	r0, r3
 80191f4:	d901      	bls.n	80191fa <vTaskPriorityDisinheritAfterTimeout+0x6e>
 80191f6:	4b0c      	ldr	r3, [pc, #48]	@ (8019228 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80191f8:	6018      	str	r0, [r3, #0]
 80191fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80191fe:	4629      	mov	r1, r5
 8019200:	4b08      	ldr	r3, [pc, #32]	@ (8019224 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8019202:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019206:	f7fe fc25 	bl	8017a54 <vListInsertEnd>
	}
 801920a:	e7d7      	b.n	80191bc <vTaskPriorityDisinheritAfterTimeout+0x30>
 801920c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019210:	f383 8811 	msr	BASEPRI, r3
 8019214:	f3bf 8f6f 	isb	sy
 8019218:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 801921c:	e7fe      	b.n	801921c <vTaskPriorityDisinheritAfterTimeout+0x90>
 801921e:	4770      	bx	lr
 8019220:	20002ab8 	.word	0x20002ab8
 8019224:	20002658 	.word	0x20002658
 8019228:	200025dc 	.word	0x200025dc

0801922c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801922c:	4b05      	ldr	r3, [pc, #20]	@ (8019244 <pvTaskIncrementMutexHeldCount+0x18>)
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	b123      	cbz	r3, 801923c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8019232:	4b04      	ldr	r3, [pc, #16]	@ (8019244 <pvTaskIncrementMutexHeldCount+0x18>)
 8019234:	681a      	ldr	r2, [r3, #0]
 8019236:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8019238:	3301      	adds	r3, #1
 801923a:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 801923c:	4b01      	ldr	r3, [pc, #4]	@ (8019244 <pvTaskIncrementMutexHeldCount+0x18>)
 801923e:	6818      	ldr	r0, [r3, #0]
	}
 8019240:	4770      	bx	lr
 8019242:	bf00      	nop
 8019244:	20002ab8 	.word	0x20002ab8

08019248 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019248:	4b06      	ldr	r3, [pc, #24]	@ (8019264 <prvGetNextExpireTime+0x1c>)
 801924a:	681a      	ldr	r2, [r3, #0]
 801924c:	6813      	ldr	r3, [r2, #0]
 801924e:	b92b      	cbnz	r3, 801925c <prvGetNextExpireTime+0x14>
 8019250:	2301      	movs	r3, #1
 8019252:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019254:	b923      	cbnz	r3, 8019260 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019256:	68d3      	ldr	r3, [r2, #12]
 8019258:	6818      	ldr	r0, [r3, #0]
 801925a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801925c:	2300      	movs	r3, #0
 801925e:	e7f8      	b.n	8019252 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019260:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8019262:	4770      	bx	lr
 8019264:	20002bbc 	.word	0x20002bbc

08019268 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019268:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801926a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801926c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801926e:	4291      	cmp	r1, r2
 8019270:	d80c      	bhi.n	801928c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019272:	1ad2      	subs	r2, r2, r3
 8019274:	6983      	ldr	r3, [r0, #24]
 8019276:	429a      	cmp	r2, r3
 8019278:	d301      	bcc.n	801927e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801927a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 801927c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801927e:	1d01      	adds	r1, r0, #4
 8019280:	4b09      	ldr	r3, [pc, #36]	@ (80192a8 <prvInsertTimerInActiveList+0x40>)
 8019282:	6818      	ldr	r0, [r3, #0]
 8019284:	f7fe fbf1 	bl	8017a6a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8019288:	2000      	movs	r0, #0
 801928a:	e7f7      	b.n	801927c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801928c:	429a      	cmp	r2, r3
 801928e:	d201      	bcs.n	8019294 <prvInsertTimerInActiveList+0x2c>
 8019290:	4299      	cmp	r1, r3
 8019292:	d206      	bcs.n	80192a2 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019294:	1d01      	adds	r1, r0, #4
 8019296:	4b05      	ldr	r3, [pc, #20]	@ (80192ac <prvInsertTimerInActiveList+0x44>)
 8019298:	6818      	ldr	r0, [r3, #0]
 801929a:	f7fe fbe6 	bl	8017a6a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801929e:	2000      	movs	r0, #0
 80192a0:	e7ec      	b.n	801927c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 80192a2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80192a4:	e7ea      	b.n	801927c <prvInsertTimerInActiveList+0x14>
 80192a6:	bf00      	nop
 80192a8:	20002bb8 	.word	0x20002bb8
 80192ac:	20002bbc 	.word	0x20002bbc

080192b0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80192b0:	b530      	push	{r4, r5, lr}
 80192b2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80192b4:	f000 fa5e 	bl	8019774 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80192b8:	4b11      	ldr	r3, [pc, #68]	@ (8019300 <prvCheckForValidListAndQueue+0x50>)
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	b11b      	cbz	r3, 80192c6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80192be:	f000 fa7b 	bl	80197b8 <vPortExitCritical>
}
 80192c2:	b003      	add	sp, #12
 80192c4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80192c6:	4d0f      	ldr	r5, [pc, #60]	@ (8019304 <prvCheckForValidListAndQueue+0x54>)
 80192c8:	4628      	mov	r0, r5
 80192ca:	f7fe fbb5 	bl	8017a38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80192ce:	4c0e      	ldr	r4, [pc, #56]	@ (8019308 <prvCheckForValidListAndQueue+0x58>)
 80192d0:	4620      	mov	r0, r4
 80192d2:	f7fe fbb1 	bl	8017a38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80192d6:	4b0d      	ldr	r3, [pc, #52]	@ (801930c <prvCheckForValidListAndQueue+0x5c>)
 80192d8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80192da:	4b0d      	ldr	r3, [pc, #52]	@ (8019310 <prvCheckForValidListAndQueue+0x60>)
 80192dc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80192de:	2300      	movs	r3, #0
 80192e0:	9300      	str	r3, [sp, #0]
 80192e2:	4b0c      	ldr	r3, [pc, #48]	@ (8019314 <prvCheckForValidListAndQueue+0x64>)
 80192e4:	4a0c      	ldr	r2, [pc, #48]	@ (8019318 <prvCheckForValidListAndQueue+0x68>)
 80192e6:	2110      	movs	r1, #16
 80192e8:	200a      	movs	r0, #10
 80192ea:	f7fe fce5 	bl	8017cb8 <xQueueGenericCreateStatic>
 80192ee:	4b04      	ldr	r3, [pc, #16]	@ (8019300 <prvCheckForValidListAndQueue+0x50>)
 80192f0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80192f2:	2800      	cmp	r0, #0
 80192f4:	d0e3      	beq.n	80192be <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80192f6:	4909      	ldr	r1, [pc, #36]	@ (801931c <prvCheckForValidListAndQueue+0x6c>)
 80192f8:	f7ff f984 	bl	8018604 <vQueueAddToRegistry>
 80192fc:	e7df      	b.n	80192be <prvCheckForValidListAndQueue+0xe>
 80192fe:	bf00      	nop
 8019300:	20002bb4 	.word	0x20002bb4
 8019304:	20002bd4 	.word	0x20002bd4
 8019308:	20002bc0 	.word	0x20002bc0
 801930c:	20002bbc 	.word	0x20002bbc
 8019310:	20002bb8 	.word	0x20002bb8
 8019314:	20002abc 	.word	0x20002abc
 8019318:	20002b0c 	.word	0x20002b0c
 801931c:	08037b0c 	.word	0x08037b0c

08019320 <xTimerCreateTimerTask>:
{
 8019320:	b510      	push	{r4, lr}
 8019322:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8019324:	f7ff ffc4 	bl	80192b0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8019328:	4b12      	ldr	r3, [pc, #72]	@ (8019374 <xTimerCreateTimerTask+0x54>)
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	b1cb      	cbz	r3, 8019362 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801932e:	2400      	movs	r4, #0
 8019330:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019332:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019334:	aa07      	add	r2, sp, #28
 8019336:	a906      	add	r1, sp, #24
 8019338:	a805      	add	r0, sp, #20
 801933a:	f7fe fb71 	bl	8017a20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801933e:	9b05      	ldr	r3, [sp, #20]
 8019340:	9302      	str	r3, [sp, #8]
 8019342:	9b06      	ldr	r3, [sp, #24]
 8019344:	9301      	str	r3, [sp, #4]
 8019346:	2302      	movs	r3, #2
 8019348:	9300      	str	r3, [sp, #0]
 801934a:	4623      	mov	r3, r4
 801934c:	9a07      	ldr	r2, [sp, #28]
 801934e:	490a      	ldr	r1, [pc, #40]	@ (8019378 <xTimerCreateTimerTask+0x58>)
 8019350:	480a      	ldr	r0, [pc, #40]	@ (801937c <xTimerCreateTimerTask+0x5c>)
 8019352:	f7ff fb4f 	bl	80189f4 <xTaskCreateStatic>
 8019356:	4b0a      	ldr	r3, [pc, #40]	@ (8019380 <xTimerCreateTimerTask+0x60>)
 8019358:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801935a:	b110      	cbz	r0, 8019362 <xTimerCreateTimerTask+0x42>
}
 801935c:	2001      	movs	r0, #1
 801935e:	b008      	add	sp, #32
 8019360:	bd10      	pop	{r4, pc}
 8019362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019366:	f383 8811 	msr	BASEPRI, r3
 801936a:	f3bf 8f6f 	isb	sy
 801936e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8019372:	e7fe      	b.n	8019372 <xTimerCreateTimerTask+0x52>
 8019374:	20002bb4 	.word	0x20002bb4
 8019378:	08037b14 	.word	0x08037b14
 801937c:	08019685 	.word	0x08019685
 8019380:	20002bb0 	.word	0x20002bb0

08019384 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8019384:	b1b8      	cbz	r0, 80193b6 <xTimerGenericCommand+0x32>
 8019386:	469c      	mov	ip, r3
 8019388:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 801938a:	4818      	ldr	r0, [pc, #96]	@ (80193ec <xTimerGenericCommand+0x68>)
 801938c:	6800      	ldr	r0, [r0, #0]
 801938e:	b358      	cbz	r0, 80193e8 <xTimerGenericCommand+0x64>
{
 8019390:	b500      	push	{lr}
 8019392:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8019394:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019396:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019398:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801939a:	2905      	cmp	r1, #5
 801939c:	dc1c      	bgt.n	80193d8 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801939e:	f7ff fe51 	bl	8019044 <xTaskGetSchedulerState>
 80193a2:	2802      	cmp	r0, #2
 80193a4:	d010      	beq.n	80193c8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80193a6:	2300      	movs	r3, #0
 80193a8:	461a      	mov	r2, r3
 80193aa:	4669      	mov	r1, sp
 80193ac:	480f      	ldr	r0, [pc, #60]	@ (80193ec <xTimerGenericCommand+0x68>)
 80193ae:	6800      	ldr	r0, [r0, #0]
 80193b0:	f7fe fcf0 	bl	8017d94 <xQueueGenericSend>
 80193b4:	e015      	b.n	80193e2 <xTimerGenericCommand+0x5e>
 80193b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193ba:	f383 8811 	msr	BASEPRI, r3
 80193be:	f3bf 8f6f 	isb	sy
 80193c2:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80193c6:	e7fe      	b.n	80193c6 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80193c8:	2300      	movs	r3, #0
 80193ca:	9a06      	ldr	r2, [sp, #24]
 80193cc:	4669      	mov	r1, sp
 80193ce:	4807      	ldr	r0, [pc, #28]	@ (80193ec <xTimerGenericCommand+0x68>)
 80193d0:	6800      	ldr	r0, [r0, #0]
 80193d2:	f7fe fcdf 	bl	8017d94 <xQueueGenericSend>
 80193d6:	e004      	b.n	80193e2 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80193d8:	2300      	movs	r3, #0
 80193da:	4662      	mov	r2, ip
 80193dc:	4669      	mov	r1, sp
 80193de:	f7fe fde3 	bl	8017fa8 <xQueueGenericSendFromISR>
}
 80193e2:	b005      	add	sp, #20
 80193e4:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 80193e8:	2000      	movs	r0, #0
}
 80193ea:	4770      	bx	lr
 80193ec:	20002bb4 	.word	0x20002bb4

080193f0 <prvSwitchTimerLists>:
{
 80193f0:	b570      	push	{r4, r5, r6, lr}
 80193f2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80193f4:	4b1b      	ldr	r3, [pc, #108]	@ (8019464 <prvSwitchTimerLists+0x74>)
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	681a      	ldr	r2, [r3, #0]
 80193fa:	b362      	cbz	r2, 8019456 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80193fc:	68db      	ldr	r3, [r3, #12]
 80193fe:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019400:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019402:	1d25      	adds	r5, r4, #4
 8019404:	4628      	mov	r0, r5
 8019406:	f7fe fb49 	bl	8017a9c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801940a:	6a23      	ldr	r3, [r4, #32]
 801940c:	4620      	mov	r0, r4
 801940e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019410:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019414:	f013 0f04 	tst.w	r3, #4
 8019418:	d0ec      	beq.n	80193f4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801941a:	69a3      	ldr	r3, [r4, #24]
 801941c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 801941e:	429e      	cmp	r6, r3
 8019420:	d207      	bcs.n	8019432 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019422:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019424:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019426:	4629      	mov	r1, r5
 8019428:	4b0e      	ldr	r3, [pc, #56]	@ (8019464 <prvSwitchTimerLists+0x74>)
 801942a:	6818      	ldr	r0, [r3, #0]
 801942c:	f7fe fb1d 	bl	8017a6a <vListInsert>
 8019430:	e7e0      	b.n	80193f4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019432:	2100      	movs	r1, #0
 8019434:	9100      	str	r1, [sp, #0]
 8019436:	460b      	mov	r3, r1
 8019438:	4632      	mov	r2, r6
 801943a:	4620      	mov	r0, r4
 801943c:	f7ff ffa2 	bl	8019384 <xTimerGenericCommand>
				configASSERT( xResult );
 8019440:	2800      	cmp	r0, #0
 8019442:	d1d7      	bne.n	80193f4 <prvSwitchTimerLists+0x4>
 8019444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019448:	f383 8811 	msr	BASEPRI, r3
 801944c:	f3bf 8f6f 	isb	sy
 8019450:	f3bf 8f4f 	dsb	sy
 8019454:	e7fe      	b.n	8019454 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8019456:	4a04      	ldr	r2, [pc, #16]	@ (8019468 <prvSwitchTimerLists+0x78>)
 8019458:	6810      	ldr	r0, [r2, #0]
 801945a:	4902      	ldr	r1, [pc, #8]	@ (8019464 <prvSwitchTimerLists+0x74>)
 801945c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801945e:	6013      	str	r3, [r2, #0]
}
 8019460:	b002      	add	sp, #8
 8019462:	bd70      	pop	{r4, r5, r6, pc}
 8019464:	20002bbc 	.word	0x20002bbc
 8019468:	20002bb8 	.word	0x20002bb8

0801946c <prvSampleTimeNow>:
{
 801946c:	b538      	push	{r3, r4, r5, lr}
 801946e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8019470:	f7ff fb8e 	bl	8018b90 <xTaskGetTickCount>
 8019474:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8019476:	4b07      	ldr	r3, [pc, #28]	@ (8019494 <prvSampleTimeNow+0x28>)
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	4283      	cmp	r3, r0
 801947c:	d805      	bhi.n	801948a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801947e:	2300      	movs	r3, #0
 8019480:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8019482:	4b04      	ldr	r3, [pc, #16]	@ (8019494 <prvSampleTimeNow+0x28>)
 8019484:	601c      	str	r4, [r3, #0]
}
 8019486:	4620      	mov	r0, r4
 8019488:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 801948a:	f7ff ffb1 	bl	80193f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801948e:	2301      	movs	r3, #1
 8019490:	602b      	str	r3, [r5, #0]
 8019492:	e7f6      	b.n	8019482 <prvSampleTimeNow+0x16>
 8019494:	20002bac 	.word	0x20002bac

08019498 <prvProcessExpiredTimer>:
{
 8019498:	b570      	push	{r4, r5, r6, lr}
 801949a:	b082      	sub	sp, #8
 801949c:	4606      	mov	r6, r0
 801949e:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194a0:	4917      	ldr	r1, [pc, #92]	@ (8019500 <prvProcessExpiredTimer+0x68>)
 80194a2:	6809      	ldr	r1, [r1, #0]
 80194a4:	68c9      	ldr	r1, [r1, #12]
 80194a6:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80194a8:	1d20      	adds	r0, r4, #4
 80194aa:	f7fe faf7 	bl	8017a9c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80194ae:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 80194b2:	f01c 0f04 	tst.w	ip, #4
 80194b6:	d108      	bne.n	80194ca <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80194b8:	f02c 0c01 	bic.w	ip, ip, #1
 80194bc:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80194c0:	6a23      	ldr	r3, [r4, #32]
 80194c2:	4620      	mov	r0, r4
 80194c4:	4798      	blx	r3
}
 80194c6:	b002      	add	sp, #8
 80194c8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80194ca:	69a1      	ldr	r1, [r4, #24]
 80194cc:	4633      	mov	r3, r6
 80194ce:	462a      	mov	r2, r5
 80194d0:	4431      	add	r1, r6
 80194d2:	4620      	mov	r0, r4
 80194d4:	f7ff fec8 	bl	8019268 <prvInsertTimerInActiveList>
 80194d8:	2800      	cmp	r0, #0
 80194da:	d0f1      	beq.n	80194c0 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80194dc:	2100      	movs	r1, #0
 80194de:	9100      	str	r1, [sp, #0]
 80194e0:	460b      	mov	r3, r1
 80194e2:	4632      	mov	r2, r6
 80194e4:	4620      	mov	r0, r4
 80194e6:	f7ff ff4d 	bl	8019384 <xTimerGenericCommand>
			configASSERT( xResult );
 80194ea:	2800      	cmp	r0, #0
 80194ec:	d1e8      	bne.n	80194c0 <prvProcessExpiredTimer+0x28>
 80194ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194f2:	f383 8811 	msr	BASEPRI, r3
 80194f6:	f3bf 8f6f 	isb	sy
 80194fa:	f3bf 8f4f 	dsb	sy
 80194fe:	e7fe      	b.n	80194fe <prvProcessExpiredTimer+0x66>
 8019500:	20002bbc 	.word	0x20002bbc

08019504 <prvProcessTimerOrBlockTask>:
{
 8019504:	b570      	push	{r4, r5, r6, lr}
 8019506:	b082      	sub	sp, #8
 8019508:	4606      	mov	r6, r0
 801950a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 801950c:	f7ff fb38 	bl	8018b80 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019510:	a801      	add	r0, sp, #4
 8019512:	f7ff ffab 	bl	801946c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8019516:	9b01      	ldr	r3, [sp, #4]
 8019518:	bb33      	cbnz	r3, 8019568 <prvProcessTimerOrBlockTask+0x64>
 801951a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801951c:	b9e4      	cbnz	r4, 8019558 <prvProcessTimerOrBlockTask+0x54>
 801951e:	42b0      	cmp	r0, r6
 8019520:	d213      	bcs.n	801954a <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019522:	4622      	mov	r2, r4
 8019524:	1b71      	subs	r1, r6, r5
 8019526:	4b12      	ldr	r3, [pc, #72]	@ (8019570 <prvProcessTimerOrBlockTask+0x6c>)
 8019528:	6818      	ldr	r0, [r3, #0]
 801952a:	f7ff f87f 	bl	801862c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801952e:	f7ff fbc1 	bl	8018cb4 <xTaskResumeAll>
 8019532:	b9d8      	cbnz	r0, 801956c <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8019534:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801953c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019540:	f3bf 8f4f 	dsb	sy
 8019544:	f3bf 8f6f 	isb	sy
 8019548:	e010      	b.n	801956c <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 801954a:	f7ff fbb3 	bl	8018cb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801954e:	4629      	mov	r1, r5
 8019550:	4630      	mov	r0, r6
 8019552:	f7ff ffa1 	bl	8019498 <prvProcessExpiredTimer>
 8019556:	e009      	b.n	801956c <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019558:	4a06      	ldr	r2, [pc, #24]	@ (8019574 <prvProcessTimerOrBlockTask+0x70>)
 801955a:	6812      	ldr	r2, [r2, #0]
 801955c:	6812      	ldr	r2, [r2, #0]
 801955e:	b90a      	cbnz	r2, 8019564 <prvProcessTimerOrBlockTask+0x60>
 8019560:	2401      	movs	r4, #1
 8019562:	e7de      	b.n	8019522 <prvProcessTimerOrBlockTask+0x1e>
 8019564:	461c      	mov	r4, r3
 8019566:	e7dc      	b.n	8019522 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8019568:	f7ff fba4 	bl	8018cb4 <xTaskResumeAll>
}
 801956c:	b002      	add	sp, #8
 801956e:	bd70      	pop	{r4, r5, r6, pc}
 8019570:	20002bb4 	.word	0x20002bb4
 8019574:	20002bb8 	.word	0x20002bb8

08019578 <prvProcessReceivedCommands>:
{
 8019578:	b510      	push	{r4, lr}
 801957a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801957c:	e002      	b.n	8019584 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801957e:	9b04      	ldr	r3, [sp, #16]
 8019580:	2b00      	cmp	r3, #0
 8019582:	da0f      	bge.n	80195a4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019584:	2200      	movs	r2, #0
 8019586:	a904      	add	r1, sp, #16
 8019588:	4b3d      	ldr	r3, [pc, #244]	@ (8019680 <prvProcessReceivedCommands+0x108>)
 801958a:	6818      	ldr	r0, [r3, #0]
 801958c:	f7fe fd73 	bl	8018076 <xQueueReceive>
 8019590:	2800      	cmp	r0, #0
 8019592:	d073      	beq.n	801967c <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019594:	9b04      	ldr	r3, [sp, #16]
 8019596:	2b00      	cmp	r3, #0
 8019598:	daf1      	bge.n	801957e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801959a:	9907      	ldr	r1, [sp, #28]
 801959c:	9806      	ldr	r0, [sp, #24]
 801959e:	9b05      	ldr	r3, [sp, #20]
 80195a0:	4798      	blx	r3
 80195a2:	e7ec      	b.n	801957e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80195a4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80195a6:	6963      	ldr	r3, [r4, #20]
 80195a8:	b113      	cbz	r3, 80195b0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80195aa:	1d20      	adds	r0, r4, #4
 80195ac:	f7fe fa76 	bl	8017a9c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80195b0:	a803      	add	r0, sp, #12
 80195b2:	f7ff ff5b 	bl	801946c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80195b6:	9b04      	ldr	r3, [sp, #16]
 80195b8:	2b09      	cmp	r3, #9
 80195ba:	d8e3      	bhi.n	8019584 <prvProcessReceivedCommands+0xc>
 80195bc:	e8df f003 	tbb	[pc, r3]
 80195c0:	30050505 	.word	0x30050505
 80195c4:	05055037 	.word	0x05055037
 80195c8:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80195ca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80195ce:	f043 0301 	orr.w	r3, r3, #1
 80195d2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80195d6:	9b05      	ldr	r3, [sp, #20]
 80195d8:	69a1      	ldr	r1, [r4, #24]
 80195da:	4602      	mov	r2, r0
 80195dc:	4419      	add	r1, r3
 80195de:	4620      	mov	r0, r4
 80195e0:	f7ff fe42 	bl	8019268 <prvInsertTimerInActiveList>
 80195e4:	2800      	cmp	r0, #0
 80195e6:	d0cd      	beq.n	8019584 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80195e8:	6a23      	ldr	r3, [r4, #32]
 80195ea:	4620      	mov	r0, r4
 80195ec:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80195ee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80195f2:	f013 0f04 	tst.w	r3, #4
 80195f6:	d0c5      	beq.n	8019584 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80195f8:	69a2      	ldr	r2, [r4, #24]
 80195fa:	2100      	movs	r1, #0
 80195fc:	9100      	str	r1, [sp, #0]
 80195fe:	460b      	mov	r3, r1
 8019600:	9805      	ldr	r0, [sp, #20]
 8019602:	4402      	add	r2, r0
 8019604:	4620      	mov	r0, r4
 8019606:	f7ff febd 	bl	8019384 <xTimerGenericCommand>
							configASSERT( xResult );
 801960a:	2800      	cmp	r0, #0
 801960c:	d1ba      	bne.n	8019584 <prvProcessReceivedCommands+0xc>
 801960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019612:	f383 8811 	msr	BASEPRI, r3
 8019616:	f3bf 8f6f 	isb	sy
 801961a:	f3bf 8f4f 	dsb	sy
 801961e:	e7fe      	b.n	801961e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019620:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019624:	f023 0301 	bic.w	r3, r3, #1
 8019628:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 801962c:	e7aa      	b.n	8019584 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801962e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019632:	f043 0301 	orr.w	r3, r3, #1
 8019636:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801963a:	9905      	ldr	r1, [sp, #20]
 801963c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801963e:	b131      	cbz	r1, 801964e <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019640:	4603      	mov	r3, r0
 8019642:	4602      	mov	r2, r0
 8019644:	4401      	add	r1, r0
 8019646:	4620      	mov	r0, r4
 8019648:	f7ff fe0e 	bl	8019268 <prvInsertTimerInActiveList>
					break;
 801964c:	e79a      	b.n	8019584 <prvProcessReceivedCommands+0xc>
 801964e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019652:	f383 8811 	msr	BASEPRI, r3
 8019656:	f3bf 8f6f 	isb	sy
 801965a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801965e:	e7fe      	b.n	801965e <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019660:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019664:	f013 0f02 	tst.w	r3, #2
 8019668:	d004      	beq.n	8019674 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801966a:	f023 0301 	bic.w	r3, r3, #1
 801966e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8019672:	e787      	b.n	8019584 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8019674:	4620      	mov	r0, r4
 8019676:	f000 fab9 	bl	8019bec <vPortFree>
 801967a:	e783      	b.n	8019584 <prvProcessReceivedCommands+0xc>
}
 801967c:	b008      	add	sp, #32
 801967e:	bd10      	pop	{r4, pc}
 8019680:	20002bb4 	.word	0x20002bb4

08019684 <prvTimerTask>:
{
 8019684:	b500      	push	{lr}
 8019686:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019688:	a801      	add	r0, sp, #4
 801968a:	f7ff fddd 	bl	8019248 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801968e:	9901      	ldr	r1, [sp, #4]
 8019690:	f7ff ff38 	bl	8019504 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8019694:	f7ff ff70 	bl	8019578 <prvProcessReceivedCommands>
	for( ;; )
 8019698:	e7f6      	b.n	8019688 <prvTimerTask+0x4>
	...

0801969c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801969c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801969e:	2300      	movs	r3, #0
 80196a0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80196a2:	4b0d      	ldr	r3, [pc, #52]	@ (80196d8 <prvTaskExitError+0x3c>)
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80196aa:	d008      	beq.n	80196be <prvTaskExitError+0x22>
 80196ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196b0:	f383 8811 	msr	BASEPRI, r3
 80196b4:	f3bf 8f6f 	isb	sy
 80196b8:	f3bf 8f4f 	dsb	sy
 80196bc:	e7fe      	b.n	80196bc <prvTaskExitError+0x20>
 80196be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196c2:	f383 8811 	msr	BASEPRI, r3
 80196c6:	f3bf 8f6f 	isb	sy
 80196ca:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80196ce:	9b01      	ldr	r3, [sp, #4]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d0fc      	beq.n	80196ce <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80196d4:	b002      	add	sp, #8
 80196d6:	4770      	bx	lr
 80196d8:	20000090 	.word	0x20000090

080196dc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80196dc:	4808      	ldr	r0, [pc, #32]	@ (8019700 <prvPortStartFirstTask+0x24>)
 80196de:	6800      	ldr	r0, [r0, #0]
 80196e0:	6800      	ldr	r0, [r0, #0]
 80196e2:	f380 8808 	msr	MSP, r0
 80196e6:	f04f 0000 	mov.w	r0, #0
 80196ea:	f380 8814 	msr	CONTROL, r0
 80196ee:	b662      	cpsie	i
 80196f0:	b661      	cpsie	f
 80196f2:	f3bf 8f4f 	dsb	sy
 80196f6:	f3bf 8f6f 	isb	sy
 80196fa:	df00      	svc	0
 80196fc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80196fe:	0000      	.short	0x0000
 8019700:	e000ed08 	.word	0xe000ed08

08019704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019704:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8019714 <vPortEnableVFP+0x10>
 8019708:	6801      	ldr	r1, [r0, #0]
 801970a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801970e:	6001      	str	r1, [r0, #0]
 8019710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019712:	0000      	.short	0x0000
 8019714:	e000ed88 	.word	0xe000ed88

08019718 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019718:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801971c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019720:	f021 0101 	bic.w	r1, r1, #1
 8019724:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019728:	4b05      	ldr	r3, [pc, #20]	@ (8019740 <pxPortInitialiseStack+0x28>)
 801972a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801972e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019732:	f06f 0302 	mvn.w	r3, #2
 8019736:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801973a:	3844      	subs	r0, #68	@ 0x44
 801973c:	4770      	bx	lr
 801973e:	bf00      	nop
 8019740:	0801969d 	.word	0x0801969d
	...

08019750 <SVC_Handler>:
	__asm volatile (
 8019750:	4b07      	ldr	r3, [pc, #28]	@ (8019770 <pxCurrentTCBConst2>)
 8019752:	6819      	ldr	r1, [r3, #0]
 8019754:	6808      	ldr	r0, [r1, #0]
 8019756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801975a:	f380 8809 	msr	PSP, r0
 801975e:	f3bf 8f6f 	isb	sy
 8019762:	f04f 0000 	mov.w	r0, #0
 8019766:	f380 8811 	msr	BASEPRI, r0
 801976a:	4770      	bx	lr
 801976c:	f3af 8000 	nop.w

08019770 <pxCurrentTCBConst2>:
 8019770:	20002ab8 	.word	0x20002ab8

08019774 <vPortEnterCritical>:
 8019774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019778:	f383 8811 	msr	BASEPRI, r3
 801977c:	f3bf 8f6f 	isb	sy
 8019780:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8019784:	4a0b      	ldr	r2, [pc, #44]	@ (80197b4 <vPortEnterCritical+0x40>)
 8019786:	6813      	ldr	r3, [r2, #0]
 8019788:	3301      	adds	r3, #1
 801978a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801978c:	2b01      	cmp	r3, #1
 801978e:	d000      	beq.n	8019792 <vPortEnterCritical+0x1e>
}
 8019790:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019792:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019796:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801979a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 801979e:	d0f7      	beq.n	8019790 <vPortEnterCritical+0x1c>
 80197a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197a4:	f383 8811 	msr	BASEPRI, r3
 80197a8:	f3bf 8f6f 	isb	sy
 80197ac:	f3bf 8f4f 	dsb	sy
 80197b0:	e7fe      	b.n	80197b0 <vPortEnterCritical+0x3c>
 80197b2:	bf00      	nop
 80197b4:	20000090 	.word	0x20000090

080197b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80197b8:	4b09      	ldr	r3, [pc, #36]	@ (80197e0 <vPortExitCritical+0x28>)
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	b943      	cbnz	r3, 80197d0 <vPortExitCritical+0x18>
 80197be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197c2:	f383 8811 	msr	BASEPRI, r3
 80197c6:	f3bf 8f6f 	isb	sy
 80197ca:	f3bf 8f4f 	dsb	sy
 80197ce:	e7fe      	b.n	80197ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80197d0:	3b01      	subs	r3, #1
 80197d2:	4a03      	ldr	r2, [pc, #12]	@ (80197e0 <vPortExitCritical+0x28>)
 80197d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80197d6:	b90b      	cbnz	r3, 80197dc <vPortExitCritical+0x24>
	__asm volatile
 80197d8:	f383 8811 	msr	BASEPRI, r3
}
 80197dc:	4770      	bx	lr
 80197de:	bf00      	nop
 80197e0:	20000090 	.word	0x20000090
	...

080197f0 <PendSV_Handler>:
	__asm volatile
 80197f0:	f3ef 8009 	mrs	r0, PSP
 80197f4:	f3bf 8f6f 	isb	sy
 80197f8:	4b15      	ldr	r3, [pc, #84]	@ (8019850 <pxCurrentTCBConst>)
 80197fa:	681a      	ldr	r2, [r3, #0]
 80197fc:	f01e 0f10 	tst.w	lr, #16
 8019800:	bf08      	it	eq
 8019802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801980a:	6010      	str	r0, [r2, #0]
 801980c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019814:	f380 8811 	msr	BASEPRI, r0
 8019818:	f3bf 8f4f 	dsb	sy
 801981c:	f3bf 8f6f 	isb	sy
 8019820:	f7ff faea 	bl	8018df8 <vTaskSwitchContext>
 8019824:	f04f 0000 	mov.w	r0, #0
 8019828:	f380 8811 	msr	BASEPRI, r0
 801982c:	bc09      	pop	{r0, r3}
 801982e:	6819      	ldr	r1, [r3, #0]
 8019830:	6808      	ldr	r0, [r1, #0]
 8019832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019836:	f01e 0f10 	tst.w	lr, #16
 801983a:	bf08      	it	eq
 801983c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019840:	f380 8809 	msr	PSP, r0
 8019844:	f3bf 8f6f 	isb	sy
 8019848:	4770      	bx	lr
 801984a:	bf00      	nop
 801984c:	f3af 8000 	nop.w

08019850 <pxCurrentTCBConst>:
 8019850:	20002ab8 	.word	0x20002ab8

08019854 <xPortSysTickHandler>:
{
 8019854:	b508      	push	{r3, lr}
	__asm volatile
 8019856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801985a:	f383 8811 	msr	BASEPRI, r3
 801985e:	f3bf 8f6f 	isb	sy
 8019862:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8019866:	f7ff f999 	bl	8018b9c <xTaskIncrementTick>
 801986a:	b128      	cbz	r0, 8019878 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801986c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019874:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8019878:	2300      	movs	r3, #0
 801987a:	f383 8811 	msr	BASEPRI, r3
}
 801987e:	bd08      	pop	{r3, pc}

08019880 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019880:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8019884:	2300      	movs	r3, #0
 8019886:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019888:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801988a:	4b05      	ldr	r3, [pc, #20]	@ (80198a0 <vPortSetupTimerInterrupt+0x20>)
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	4905      	ldr	r1, [pc, #20]	@ (80198a4 <vPortSetupTimerInterrupt+0x24>)
 8019890:	fba1 1303 	umull	r1, r3, r1, r3
 8019894:	099b      	lsrs	r3, r3, #6
 8019896:	3b01      	subs	r3, #1
 8019898:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801989a:	2307      	movs	r3, #7
 801989c:	6113      	str	r3, [r2, #16]
}
 801989e:	4770      	bx	lr
 80198a0:	20000018 	.word	0x20000018
 80198a4:	10624dd3 	.word	0x10624dd3

080198a8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80198a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80198ac:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80198b0:	4b3d      	ldr	r3, [pc, #244]	@ (80199a8 <xPortStartScheduler+0x100>)
 80198b2:	429a      	cmp	r2, r3
 80198b4:	d01c      	beq.n	80198f0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80198b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80198ba:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80198be:	4b3b      	ldr	r3, [pc, #236]	@ (80199ac <xPortStartScheduler+0x104>)
 80198c0:	429a      	cmp	r2, r3
 80198c2:	d01e      	beq.n	8019902 <xPortStartScheduler+0x5a>
{
 80198c4:	b530      	push	{r4, r5, lr}
 80198c6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80198c8:	4b39      	ldr	r3, [pc, #228]	@ (80199b0 <xPortStartScheduler+0x108>)
 80198ca:	781a      	ldrb	r2, [r3, #0]
 80198cc:	b2d2      	uxtb	r2, r2
 80198ce:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80198d0:	22ff      	movs	r2, #255	@ 0xff
 80198d2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80198d4:	781b      	ldrb	r3, [r3, #0]
 80198d6:	b2db      	uxtb	r3, r3
 80198d8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80198dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80198e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80198e4:	4a33      	ldr	r2, [pc, #204]	@ (80199b4 <xPortStartScheduler+0x10c>)
 80198e6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80198e8:	4b33      	ldr	r3, [pc, #204]	@ (80199b8 <xPortStartScheduler+0x110>)
 80198ea:	2207      	movs	r2, #7
 80198ec:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80198ee:	e01b      	b.n	8019928 <xPortStartScheduler+0x80>
	__asm volatile
 80198f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198f4:	f383 8811 	msr	BASEPRI, r3
 80198f8:	f3bf 8f6f 	isb	sy
 80198fc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019900:	e7fe      	b.n	8019900 <xPortStartScheduler+0x58>
 8019902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019906:	f383 8811 	msr	BASEPRI, r3
 801990a:	f3bf 8f6f 	isb	sy
 801990e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019912:	e7fe      	b.n	8019912 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8019914:	4a28      	ldr	r2, [pc, #160]	@ (80199b8 <xPortStartScheduler+0x110>)
 8019916:	6813      	ldr	r3, [r2, #0]
 8019918:	3b01      	subs	r3, #1
 801991a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801991c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019920:	005b      	lsls	r3, r3, #1
 8019922:	b2db      	uxtb	r3, r3
 8019924:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019928:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801992c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019930:	d1f0      	bne.n	8019914 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019932:	4b21      	ldr	r3, [pc, #132]	@ (80199b8 <xPortStartScheduler+0x110>)
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	2b03      	cmp	r3, #3
 8019938:	d008      	beq.n	801994c <xPortStartScheduler+0xa4>
 801993a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801993e:	f383 8811 	msr	BASEPRI, r3
 8019942:	f3bf 8f6f 	isb	sy
 8019946:	f3bf 8f4f 	dsb	sy
 801994a:	e7fe      	b.n	801994a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801994c:	021b      	lsls	r3, r3, #8
 801994e:	4a1a      	ldr	r2, [pc, #104]	@ (80199b8 <xPortStartScheduler+0x110>)
 8019950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019952:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8019956:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019958:	9b01      	ldr	r3, [sp, #4]
 801995a:	b2db      	uxtb	r3, r3
 801995c:	4a14      	ldr	r2, [pc, #80]	@ (80199b0 <xPortStartScheduler+0x108>)
 801995e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019960:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8019964:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8019968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801996c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019970:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8019974:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8019978:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 801997c:	f7ff ff80 	bl	8019880 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8019980:	2500      	movs	r5, #0
 8019982:	4b0e      	ldr	r3, [pc, #56]	@ (80199bc <xPortStartScheduler+0x114>)
 8019984:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8019986:	f7ff febd 	bl	8019704 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801998a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 801998e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8019992:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8019996:	f7ff fea1 	bl	80196dc <prvPortStartFirstTask>
	vTaskSwitchContext();
 801999a:	f7ff fa2d 	bl	8018df8 <vTaskSwitchContext>
	prvTaskExitError();
 801999e:	f7ff fe7d 	bl	801969c <prvTaskExitError>
}
 80199a2:	4628      	mov	r0, r5
 80199a4:	b003      	add	sp, #12
 80199a6:	bd30      	pop	{r4, r5, pc}
 80199a8:	410fc271 	.word	0x410fc271
 80199ac:	410fc270 	.word	0x410fc270
 80199b0:	e000e400 	.word	0xe000e400
 80199b4:	20002bec 	.word	0x20002bec
 80199b8:	20002be8 	.word	0x20002be8
 80199bc:	20000090 	.word	0x20000090

080199c0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80199c0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80199c4:	2b0f      	cmp	r3, #15
 80199c6:	d90f      	bls.n	80199e8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80199c8:	4a11      	ldr	r2, [pc, #68]	@ (8019a10 <vPortValidateInterruptPriority+0x50>)
 80199ca:	5c9b      	ldrb	r3, [r3, r2]
 80199cc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80199ce:	4a11      	ldr	r2, [pc, #68]	@ (8019a14 <vPortValidateInterruptPriority+0x54>)
 80199d0:	7812      	ldrb	r2, [r2, #0]
 80199d2:	429a      	cmp	r2, r3
 80199d4:	d908      	bls.n	80199e8 <vPortValidateInterruptPriority+0x28>
 80199d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199da:	f383 8811 	msr	BASEPRI, r3
 80199de:	f3bf 8f6f 	isb	sy
 80199e2:	f3bf 8f4f 	dsb	sy
 80199e6:	e7fe      	b.n	80199e6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80199e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80199ec:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80199f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80199f4:	4a08      	ldr	r2, [pc, #32]	@ (8019a18 <vPortValidateInterruptPriority+0x58>)
 80199f6:	6812      	ldr	r2, [r2, #0]
 80199f8:	4293      	cmp	r3, r2
 80199fa:	d908      	bls.n	8019a0e <vPortValidateInterruptPriority+0x4e>
 80199fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a00:	f383 8811 	msr	BASEPRI, r3
 8019a04:	f3bf 8f6f 	isb	sy
 8019a08:	f3bf 8f4f 	dsb	sy
 8019a0c:	e7fe      	b.n	8019a0c <vPortValidateInterruptPriority+0x4c>
	}
 8019a0e:	4770      	bx	lr
 8019a10:	e000e3f0 	.word	0xe000e3f0
 8019a14:	20002bec 	.word	0x20002bec
 8019a18:	20002be8 	.word	0x20002be8

08019a1c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019a1c:	4a12      	ldr	r2, [pc, #72]	@ (8019a68 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019a1e:	f012 0f07 	tst.w	r2, #7
 8019a22:	d01f      	beq.n	8019a64 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019a24:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019a26:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019a2a:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 8019a2e:	33f8      	adds	r3, #248	@ 0xf8
 8019a30:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019a32:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019a34:	480d      	ldr	r0, [pc, #52]	@ (8019a6c <prvHeapInit+0x50>)
 8019a36:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019a38:	2100      	movs	r1, #0
 8019a3a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019a3c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8019a3e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019a40:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8019a44:	480a      	ldr	r0, [pc, #40]	@ (8019a70 <prvHeapInit+0x54>)
 8019a46:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8019a48:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019a4a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019a4c:	1a99      	subs	r1, r3, r2
 8019a4e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019a50:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019a52:	4b08      	ldr	r3, [pc, #32]	@ (8019a74 <prvHeapInit+0x58>)
 8019a54:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019a56:	4b08      	ldr	r3, [pc, #32]	@ (8019a78 <prvHeapInit+0x5c>)
 8019a58:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019a5a:	4b08      	ldr	r3, [pc, #32]	@ (8019a7c <prvHeapInit+0x60>)
 8019a5c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8019a60:	601a      	str	r2, [r3, #0]
}
 8019a62:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019a64:	4b06      	ldr	r3, [pc, #24]	@ (8019a80 <prvHeapInit+0x64>)
 8019a66:	e7e5      	b.n	8019a34 <prvHeapInit+0x18>
 8019a68:	20002c10 	.word	0x20002c10
 8019a6c:	20002c08 	.word	0x20002c08
 8019a70:	20002c04 	.word	0x20002c04
 8019a74:	20002bfc 	.word	0x20002bfc
 8019a78:	20002c00 	.word	0x20002c00
 8019a7c:	20002bf0 	.word	0x20002bf0
 8019a80:	000160f8 	.word	0x000160f8

08019a84 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019a84:	4b16      	ldr	r3, [pc, #88]	@ (8019ae0 <prvInsertBlockIntoFreeList+0x5c>)
 8019a86:	461a      	mov	r2, r3
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	4283      	cmp	r3, r0
 8019a8c:	d3fb      	bcc.n	8019a86 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019a8e:	6851      	ldr	r1, [r2, #4]
 8019a90:	eb02 0c01 	add.w	ip, r2, r1
 8019a94:	4584      	cmp	ip, r0
 8019a96:	d009      	beq.n	8019aac <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019a98:	6841      	ldr	r1, [r0, #4]
 8019a9a:	eb00 0c01 	add.w	ip, r0, r1
 8019a9e:	4563      	cmp	r3, ip
 8019aa0:	d009      	beq.n	8019ab6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019aa2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019aa4:	4290      	cmp	r0, r2
 8019aa6:	d019      	beq.n	8019adc <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019aa8:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8019aaa:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019aac:	6840      	ldr	r0, [r0, #4]
 8019aae:	4401      	add	r1, r0
 8019ab0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8019ab2:	4610      	mov	r0, r2
 8019ab4:	e7f0      	b.n	8019a98 <prvInsertBlockIntoFreeList+0x14>
{
 8019ab6:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8019ae4 <prvInsertBlockIntoFreeList+0x60>)
 8019aba:	6824      	ldr	r4, [r4, #0]
 8019abc:	42a3      	cmp	r3, r4
 8019abe:	d00b      	beq.n	8019ad8 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019ac0:	685b      	ldr	r3, [r3, #4]
 8019ac2:	4419      	add	r1, r3
 8019ac4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019ac6:	6813      	ldr	r3, [r2, #0]
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8019acc:	4290      	cmp	r0, r2
 8019ace:	d000      	beq.n	8019ad2 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019ad0:	6010      	str	r0, [r2, #0]
	}
}
 8019ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ad6:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019ad8:	6004      	str	r4, [r0, #0]
 8019ada:	e7f7      	b.n	8019acc <prvInsertBlockIntoFreeList+0x48>
 8019adc:	4770      	bx	lr
 8019ade:	bf00      	nop
 8019ae0:	20002c08 	.word	0x20002c08
 8019ae4:	20002c04 	.word	0x20002c04

08019ae8 <pvPortMalloc>:
{
 8019ae8:	b538      	push	{r3, r4, r5, lr}
 8019aea:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8019aec:	f7ff f848 	bl	8018b80 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8019af0:	4b38      	ldr	r3, [pc, #224]	@ (8019bd4 <pvPortMalloc+0xec>)
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	b1b3      	cbz	r3, 8019b24 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019af6:	4b38      	ldr	r3, [pc, #224]	@ (8019bd8 <pvPortMalloc+0xf0>)
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	421c      	tst	r4, r3
 8019afc:	d150      	bne.n	8019ba0 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8019afe:	2c00      	cmp	r4, #0
 8019b00:	d050      	beq.n	8019ba4 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8019b02:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019b06:	f014 0f07 	tst.w	r4, #7
 8019b0a:	d002      	beq.n	8019b12 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019b0c:	f022 0207 	bic.w	r2, r2, #7
 8019b10:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019b12:	2a00      	cmp	r2, #0
 8019b14:	d055      	beq.n	8019bc2 <pvPortMalloc+0xda>
 8019b16:	4b31      	ldr	r3, [pc, #196]	@ (8019bdc <pvPortMalloc+0xf4>)
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	4293      	cmp	r3, r2
 8019b1c:	d353      	bcc.n	8019bc6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8019b1e:	4930      	ldr	r1, [pc, #192]	@ (8019be0 <pvPortMalloc+0xf8>)
 8019b20:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019b22:	e004      	b.n	8019b2e <pvPortMalloc+0x46>
			prvHeapInit();
 8019b24:	f7ff ff7a 	bl	8019a1c <prvHeapInit>
 8019b28:	e7e5      	b.n	8019af6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8019b2a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8019b2c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019b2e:	6863      	ldr	r3, [r4, #4]
 8019b30:	4293      	cmp	r3, r2
 8019b32:	d202      	bcs.n	8019b3a <pvPortMalloc+0x52>
 8019b34:	6823      	ldr	r3, [r4, #0]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d1f7      	bne.n	8019b2a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8019b3a:	4b26      	ldr	r3, [pc, #152]	@ (8019bd4 <pvPortMalloc+0xec>)
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	42a3      	cmp	r3, r4
 8019b40:	d043      	beq.n	8019bca <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019b42:	680d      	ldr	r5, [r1, #0]
 8019b44:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019b46:	6823      	ldr	r3, [r4, #0]
 8019b48:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019b4a:	6863      	ldr	r3, [r4, #4]
 8019b4c:	1a9b      	subs	r3, r3, r2
 8019b4e:	2b10      	cmp	r3, #16
 8019b50:	d910      	bls.n	8019b74 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019b52:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019b54:	f010 0f07 	tst.w	r0, #7
 8019b58:	d008      	beq.n	8019b6c <pvPortMalloc+0x84>
 8019b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b5e:	f383 8811 	msr	BASEPRI, r3
 8019b62:	f3bf 8f6f 	isb	sy
 8019b66:	f3bf 8f4f 	dsb	sy
 8019b6a:	e7fe      	b.n	8019b6a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019b6c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019b6e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019b70:	f7ff ff88 	bl	8019a84 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019b74:	6862      	ldr	r2, [r4, #4]
 8019b76:	4919      	ldr	r1, [pc, #100]	@ (8019bdc <pvPortMalloc+0xf4>)
 8019b78:	680b      	ldr	r3, [r1, #0]
 8019b7a:	1a9b      	subs	r3, r3, r2
 8019b7c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019b7e:	4919      	ldr	r1, [pc, #100]	@ (8019be4 <pvPortMalloc+0xfc>)
 8019b80:	6809      	ldr	r1, [r1, #0]
 8019b82:	428b      	cmp	r3, r1
 8019b84:	d201      	bcs.n	8019b8a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019b86:	4917      	ldr	r1, [pc, #92]	@ (8019be4 <pvPortMalloc+0xfc>)
 8019b88:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019b8a:	4b13      	ldr	r3, [pc, #76]	@ (8019bd8 <pvPortMalloc+0xf0>)
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	4313      	orrs	r3, r2
 8019b90:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019b92:	2300      	movs	r3, #0
 8019b94:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8019b96:	4a14      	ldr	r2, [pc, #80]	@ (8019be8 <pvPortMalloc+0x100>)
 8019b98:	6813      	ldr	r3, [r2, #0]
 8019b9a:	3301      	adds	r3, #1
 8019b9c:	6013      	str	r3, [r2, #0]
 8019b9e:	e002      	b.n	8019ba6 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8019ba0:	2500      	movs	r5, #0
 8019ba2:	e000      	b.n	8019ba6 <pvPortMalloc+0xbe>
 8019ba4:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8019ba6:	f7ff f885 	bl	8018cb4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019baa:	f015 0f07 	tst.w	r5, #7
 8019bae:	d00e      	beq.n	8019bce <pvPortMalloc+0xe6>
 8019bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019bb4:	f383 8811 	msr	BASEPRI, r3
 8019bb8:	f3bf 8f6f 	isb	sy
 8019bbc:	f3bf 8f4f 	dsb	sy
 8019bc0:	e7fe      	b.n	8019bc0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8019bc2:	2500      	movs	r5, #0
 8019bc4:	e7ef      	b.n	8019ba6 <pvPortMalloc+0xbe>
 8019bc6:	2500      	movs	r5, #0
 8019bc8:	e7ed      	b.n	8019ba6 <pvPortMalloc+0xbe>
 8019bca:	2500      	movs	r5, #0
 8019bcc:	e7eb      	b.n	8019ba6 <pvPortMalloc+0xbe>
}
 8019bce:	4628      	mov	r0, r5
 8019bd0:	bd38      	pop	{r3, r4, r5, pc}
 8019bd2:	bf00      	nop
 8019bd4:	20002c04 	.word	0x20002c04
 8019bd8:	20002bf0 	.word	0x20002bf0
 8019bdc:	20002c00 	.word	0x20002c00
 8019be0:	20002c08 	.word	0x20002c08
 8019be4:	20002bfc 	.word	0x20002bfc
 8019be8:	20002bf8 	.word	0x20002bf8

08019bec <vPortFree>:
	if( pv != NULL )
 8019bec:	2800      	cmp	r0, #0
 8019bee:	d034      	beq.n	8019c5a <vPortFree+0x6e>
{
 8019bf0:	b538      	push	{r3, r4, r5, lr}
 8019bf2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8019bf4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019bf8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019bfc:	4a17      	ldr	r2, [pc, #92]	@ (8019c5c <vPortFree+0x70>)
 8019bfe:	6812      	ldr	r2, [r2, #0]
 8019c00:	4213      	tst	r3, r2
 8019c02:	d108      	bne.n	8019c16 <vPortFree+0x2a>
 8019c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c08:	f383 8811 	msr	BASEPRI, r3
 8019c0c:	f3bf 8f6f 	isb	sy
 8019c10:	f3bf 8f4f 	dsb	sy
 8019c14:	e7fe      	b.n	8019c14 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019c16:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8019c1a:	b141      	cbz	r1, 8019c2e <vPortFree+0x42>
 8019c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c20:	f383 8811 	msr	BASEPRI, r3
 8019c24:	f3bf 8f6f 	isb	sy
 8019c28:	f3bf 8f4f 	dsb	sy
 8019c2c:	e7fe      	b.n	8019c2c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019c2e:	ea23 0302 	bic.w	r3, r3, r2
 8019c32:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8019c36:	f7fe ffa3 	bl	8018b80 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019c3a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8019c3e:	4a08      	ldr	r2, [pc, #32]	@ (8019c60 <vPortFree+0x74>)
 8019c40:	6813      	ldr	r3, [r2, #0]
 8019c42:	440b      	add	r3, r1
 8019c44:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019c46:	4628      	mov	r0, r5
 8019c48:	f7ff ff1c 	bl	8019a84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019c4c:	4a05      	ldr	r2, [pc, #20]	@ (8019c64 <vPortFree+0x78>)
 8019c4e:	6813      	ldr	r3, [r2, #0]
 8019c50:	3301      	adds	r3, #1
 8019c52:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8019c54:	f7ff f82e 	bl	8018cb4 <xTaskResumeAll>
}
 8019c58:	bd38      	pop	{r3, r4, r5, pc}
 8019c5a:	4770      	bx	lr
 8019c5c:	20002bf0 	.word	0x20002bf0
 8019c60:	20002c00 	.word	0x20002c00
 8019c64:	20002bf4 	.word	0x20002bf4

08019c68 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 8019c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c6a:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 8019c6c:	f7fe ff88 	bl	8018b80 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 8019c70:	4b17      	ldr	r3, [pc, #92]	@ (8019cd0 <vPortGetHeapStats+0x68>)
 8019c72:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 8019c74:	b193      	cbz	r3, 8019c9c <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 8019c76:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019c7a:	2500      	movs	r5, #0
 8019c7c:	462c      	mov	r4, r5
 8019c7e:	e004      	b.n	8019c8a <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 8019c80:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 8019c82:	4a14      	ldr	r2, [pc, #80]	@ (8019cd4 <vPortGetHeapStats+0x6c>)
 8019c84:	6812      	ldr	r2, [r2, #0]
 8019c86:	429a      	cmp	r2, r3
 8019c88:	d00c      	beq.n	8019ca4 <vPortGetHeapStats+0x3c>
				xBlocks++;
 8019c8a:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 8019c8c:	685a      	ldr	r2, [r3, #4]
 8019c8e:	42aa      	cmp	r2, r5
 8019c90:	d900      	bls.n	8019c94 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 8019c92:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 8019c94:	42b2      	cmp	r2, r6
 8019c96:	d2f3      	bcs.n	8019c80 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 8019c98:	4616      	mov	r6, r2
 8019c9a:	e7f1      	b.n	8019c80 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 8019c9c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019ca0:	2500      	movs	r5, #0
 8019ca2:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 8019ca4:	f7ff f806 	bl	8018cb4 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 8019ca8:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 8019caa:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 8019cac:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 8019cae:	f7ff fd61 	bl	8019774 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 8019cb2:	4b09      	ldr	r3, [pc, #36]	@ (8019cd8 <vPortGetHeapStats+0x70>)
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 8019cb8:	4b08      	ldr	r3, [pc, #32]	@ (8019cdc <vPortGetHeapStats+0x74>)
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 8019cbe:	4b08      	ldr	r3, [pc, #32]	@ (8019ce0 <vPortGetHeapStats+0x78>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 8019cc4:	4b07      	ldr	r3, [pc, #28]	@ (8019ce4 <vPortGetHeapStats+0x7c>)
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8019cca:	f7ff fd75 	bl	80197b8 <vPortExitCritical>
}
 8019cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cd0:	20002c08 	.word	0x20002c08
 8019cd4:	20002c04 	.word	0x20002c04
 8019cd8:	20002c00 	.word	0x20002c00
 8019cdc:	20002bf8 	.word	0x20002bf8
 8019ce0:	20002bf4 	.word	0x20002bf4
 8019ce4:	20002bfc 	.word	0x20002bfc

08019ce8 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 8019ce8:	2000      	movs	r0, #0
 8019cea:	4770      	bx	lr

08019cec <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8019cec:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8019cee:	fb01 f400 	mul.w	r4, r1, r0
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	f7ff fef8 	bl	8019ae8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8019cf8:	4605      	mov	r5, r0
 8019cfa:	b118      	cbz	r0, 8019d04 <mg_calloc+0x18>
 8019cfc:	4622      	mov	r2, r4
 8019cfe:	2100      	movs	r1, #0
 8019d00:	f011 fe7e 	bl	802ba00 <memset>
}
 8019d04:	4628      	mov	r0, r5
 8019d06:	bd38      	pop	{r3, r4, r5, pc}

08019d08 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 8019d08:	b508      	push	{r3, lr}
 8019d0a:	4684      	mov	ip, r0
 8019d0c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 8019d0e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 8019d12:	428b      	cmp	r3, r1
 8019d14:	d90a      	bls.n	8019d2c <block_device_read+0x24>
 8019d16:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 8019d18:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 8019d1c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019d20:	fb01 e103 	mla	r1, r1, r3, lr
 8019d24:	f7fb f985 	bl	8015032 <sFLASH_ReadBuffer>
}
 8019d28:	2000      	movs	r0, #0
 8019d2a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 8019d2c:	4b03      	ldr	r3, [pc, #12]	@ (8019d3c <block_device_read+0x34>)
 8019d2e:	4a04      	ldr	r2, [pc, #16]	@ (8019d40 <block_device_read+0x38>)
 8019d30:	f240 1119 	movw	r1, #281	@ 0x119
 8019d34:	4803      	ldr	r0, [pc, #12]	@ (8019d44 <block_device_read+0x3c>)
 8019d36:	f00f f911 	bl	8028f5c <__assert_func>
 8019d3a:	bf00      	nop
 8019d3c:	08037b1c 	.word	0x08037b1c
 8019d40:	08037b98 	.word	0x08037b98
 8019d44:	08037b34 	.word	0x08037b34

08019d48 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 8019d48:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 8019d4a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8019d4c:	428b      	cmp	r3, r1
 8019d4e:	d906      	bls.n	8019d5e <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 8019d50:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8019d52:	fb01 f000 	mul.w	r0, r1, r0
 8019d56:	f7fb faa9 	bl	80152ac <sFLASH_EraseSector>
}
 8019d5a:	2000      	movs	r0, #0
 8019d5c:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 8019d5e:	4b03      	ldr	r3, [pc, #12]	@ (8019d6c <block_device_erase+0x24>)
 8019d60:	4a03      	ldr	r2, [pc, #12]	@ (8019d70 <block_device_erase+0x28>)
 8019d62:	f240 1121 	movw	r1, #289	@ 0x121
 8019d66:	4803      	ldr	r0, [pc, #12]	@ (8019d74 <block_device_erase+0x2c>)
 8019d68:	f00f f8f8 	bl	8028f5c <__assert_func>
 8019d6c:	08037b1c 	.word	0x08037b1c
 8019d70:	08037b84 	.word	0x08037b84
 8019d74:	08037b34 	.word	0x08037b34

08019d78 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 8019d78:	b508      	push	{r3, lr}
 8019d7a:	4684      	mov	ip, r0
 8019d7c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 8019d7e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 8019d82:	428b      	cmp	r3, r1
 8019d84:	d90a      	bls.n	8019d9c <block_device_prog+0x24>
 8019d86:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 8019d88:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 8019d8c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019d90:	fb01 e103 	mla	r1, r1, r3, lr
 8019d94:	f7fb fac8 	bl	8015328 <sFLASH_WriteBuffer>
}
 8019d98:	2000      	movs	r0, #0
 8019d9a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 8019d9c:	4b03      	ldr	r3, [pc, #12]	@ (8019dac <block_device_prog+0x34>)
 8019d9e:	4a04      	ldr	r2, [pc, #16]	@ (8019db0 <block_device_prog+0x38>)
 8019da0:	f240 1129 	movw	r1, #297	@ 0x129
 8019da4:	4803      	ldr	r0, [pc, #12]	@ (8019db4 <block_device_prog+0x3c>)
 8019da6:	f00f f8d9 	bl	8028f5c <__assert_func>
 8019daa:	bf00      	nop
 8019dac:	08037b1c 	.word	0x08037b1c
 8019db0:	08037b70 	.word	0x08037b70
 8019db4:	08037b34 	.word	0x08037b34

08019db8 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 8019db8:	b530      	push	{r4, r5, lr}
 8019dba:	b0c3      	sub	sp, #268	@ 0x10c
 8019dbc:	460d      	mov	r5, r1
 8019dbe:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 8019dc0:	466a      	mov	r2, sp
 8019dc2:	4601      	mov	r1, r0
 8019dc4:	480b      	ldr	r0, [pc, #44]	@ (8019df4 <mg_fs_lfs_status+0x3c>)
 8019dc6:	f004 fd97 	bl	801e8f8 <lfs_stat>
 8019dca:	b110      	cbz	r0, 8019dd2 <mg_fs_lfs_status+0x1a>
    return 0;
 8019dcc:	2000      	movs	r0, #0
}
 8019dce:	b043      	add	sp, #268	@ 0x10c
 8019dd0:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 8019dd2:	b10d      	cbz	r5, 8019dd8 <mg_fs_lfs_status+0x20>
 8019dd4:	9b01      	ldr	r3, [sp, #4]
 8019dd6:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 8019dd8:	b11c      	cbz	r4, 8019de2 <mg_fs_lfs_status+0x2a>
 8019dda:	2200      	movs	r2, #0
 8019ddc:	2300      	movs	r3, #0
 8019dde:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 8019de2:	f89d 3000 	ldrb.w	r3, [sp]
 8019de6:	2b02      	cmp	r3, #2
 8019de8:	d001      	beq.n	8019dee <mg_fs_lfs_status+0x36>
 8019dea:	2001      	movs	r0, #1
 8019dec:	e7ef      	b.n	8019dce <mg_fs_lfs_status+0x16>
 8019dee:	2004      	movs	r0, #4
 8019df0:	e7ed      	b.n	8019dce <mg_fs_lfs_status+0x16>
 8019df2:	bf00      	nop
 8019df4:	20018d68 	.word	0x20018d68

08019df8 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 8019df8:	b530      	push	{r4, r5, lr}
 8019dfa:	b0d1      	sub	sp, #324	@ 0x144
 8019dfc:	460d      	mov	r5, r1
 8019dfe:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 8019e00:	4602      	mov	r2, r0
 8019e02:	a901      	add	r1, sp, #4
 8019e04:	480a      	ldr	r0, [pc, #40]	@ (8019e30 <mg_fs_lfs_list+0x38>)
 8019e06:	f004 fe9d 	bl	801eb44 <lfs_dir_open>
 8019e0a:	b120      	cbz	r0, 8019e16 <mg_fs_lfs_list+0x1e>
}
 8019e0c:	b051      	add	sp, #324	@ 0x144
 8019e0e:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 8019e10:	4621      	mov	r1, r4
 8019e12:	a810      	add	r0, sp, #64	@ 0x40
 8019e14:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 8019e16:	aa0e      	add	r2, sp, #56	@ 0x38
 8019e18:	a901      	add	r1, sp, #4
 8019e1a:	4805      	ldr	r0, [pc, #20]	@ (8019e30 <mg_fs_lfs_list+0x38>)
 8019e1c:	f004 fecd 	bl	801ebba <lfs_dir_read>
 8019e20:	2800      	cmp	r0, #0
 8019e22:	dcf5      	bgt.n	8019e10 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 8019e24:	a901      	add	r1, sp, #4
 8019e26:	4802      	ldr	r0, [pc, #8]	@ (8019e30 <mg_fs_lfs_list+0x38>)
 8019e28:	f004 feb4 	bl	801eb94 <lfs_dir_close>
}
 8019e2c:	e7ee      	b.n	8019e0c <mg_fs_lfs_list+0x14>
 8019e2e:	bf00      	nop
 8019e30:	20018d68 	.word	0x20018d68

08019e34 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 8019e34:	b570      	push	{r4, r5, r6, lr}
 8019e36:	4605      	mov	r5, r0
 8019e38:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 8019e3a:	2054      	movs	r0, #84	@ 0x54
 8019e3c:	f7ff fe54 	bl	8019ae8 <pvPortMalloc>
    if (fd == NULL) return NULL;
 8019e40:	4606      	mov	r6, r0
 8019e42:	b188      	cbz	r0, 8019e68 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 8019e44:	f014 0301 	ands.w	r3, r4, #1
 8019e48:	d000      	beq.n	8019e4c <mg_fs_lfs_open+0x18>
 8019e4a:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 8019e4c:	f014 0f02 	tst.w	r4, #2
 8019e50:	d003      	beq.n	8019e5a <mg_fs_lfs_open+0x26>
 8019e52:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 8019e56:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 8019e5a:	462a      	mov	r2, r5
 8019e5c:	4631      	mov	r1, r6
 8019e5e:	4806      	ldr	r0, [pc, #24]	@ (8019e78 <mg_fs_lfs_open+0x44>)
 8019e60:	f004 fd60 	bl	801e924 <lfs_file_open>
 8019e64:	2800      	cmp	r0, #0
 8019e66:	db01      	blt.n	8019e6c <mg_fs_lfs_open+0x38>
}
 8019e68:	4630      	mov	r0, r6
 8019e6a:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 8019e6c:	4630      	mov	r0, r6
 8019e6e:	f7ff febd 	bl	8019bec <vPortFree>
        return NULL;
 8019e72:	2600      	movs	r6, #0
 8019e74:	e7f8      	b.n	8019e68 <mg_fs_lfs_open+0x34>
 8019e76:	bf00      	nop
 8019e78:	20018d68 	.word	0x20018d68

08019e7c <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 8019e7c:	b510      	push	{r4, lr}
 8019e7e:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 8019e80:	4601      	mov	r1, r0
 8019e82:	4803      	ldr	r0, [pc, #12]	@ (8019e90 <mg_fs_lfs_close+0x14>)
 8019e84:	f004 fd7a 	bl	801e97c <lfs_file_close>
    free(file);
 8019e88:	4620      	mov	r0, r4
 8019e8a:	f7ff feaf 	bl	8019bec <vPortFree>
}
 8019e8e:	bd10      	pop	{r4, pc}
 8019e90:	20018d68 	.word	0x20018d68

08019e94 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 8019e94:	b508      	push	{r3, lr}
 8019e96:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 8019e98:	460a      	mov	r2, r1
 8019e9a:	4601      	mov	r1, r0
 8019e9c:	4802      	ldr	r0, [pc, #8]	@ (8019ea8 <mg_fs_lfs_read+0x14>)
 8019e9e:	f004 fd93 	bl	801e9c8 <lfs_file_read>
}
 8019ea2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8019ea6:	bd08      	pop	{r3, pc}
 8019ea8:	20018d68 	.word	0x20018d68

08019eac <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 8019eac:	b508      	push	{r3, lr}
 8019eae:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 8019eb0:	460a      	mov	r2, r1
 8019eb2:	4601      	mov	r1, r0
 8019eb4:	4802      	ldr	r0, [pc, #8]	@ (8019ec0 <mg_fs_lfs_write+0x14>)
 8019eb6:	f004 fdb3 	bl	801ea20 <lfs_file_write>
}
 8019eba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8019ebe:	bd08      	pop	{r3, pc}
 8019ec0:	20018d68 	.word	0x20018d68

08019ec4 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 8019ec4:	b510      	push	{r4, lr}
 8019ec6:	4604      	mov	r4, r0
 8019ec8:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 8019eca:	2300      	movs	r3, #0
 8019ecc:	4601      	mov	r1, r0
 8019ece:	4809      	ldr	r0, [pc, #36]	@ (8019ef4 <mg_fs_lfs_seek+0x30>)
 8019ed0:	f004 fdd2 	bl	801ea78 <lfs_file_seek>
 8019ed4:	2800      	cmp	r0, #0
 8019ed6:	db06      	blt.n	8019ee6 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 8019ed8:	4621      	mov	r1, r4
 8019eda:	4806      	ldr	r0, [pc, #24]	@ (8019ef4 <mg_fs_lfs_seek+0x30>)
 8019edc:	f004 fdf8 	bl	801ead0 <lfs_file_tell>
     if (pos < 0) {
 8019ee0:	2800      	cmp	r0, #0
 8019ee2:	db03      	blt.n	8019eec <mg_fs_lfs_seek+0x28>
}
 8019ee4:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 8019ee6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019eea:	e7fb      	b.n	8019ee4 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 8019eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ef0:	e7f8      	b.n	8019ee4 <mg_fs_lfs_seek+0x20>
 8019ef2:	bf00      	nop
 8019ef4:	20018d68 	.word	0x20018d68

08019ef8 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 8019ef8:	b508      	push	{r3, lr}
 8019efa:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 8019efc:	4601      	mov	r1, r0
 8019efe:	4803      	ldr	r0, [pc, #12]	@ (8019f0c <mg_fs_lfs_rename+0x14>)
 8019f00:	f004 fce5 	bl	801e8ce <lfs_rename>
}
 8019f04:	fab0 f080 	clz	r0, r0
 8019f08:	0940      	lsrs	r0, r0, #5
 8019f0a:	bd08      	pop	{r3, pc}
 8019f0c:	20018d68 	.word	0x20018d68

08019f10 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 8019f10:	b508      	push	{r3, lr}
 8019f12:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 8019f14:	4803      	ldr	r0, [pc, #12]	@ (8019f24 <mg_fs_lfs_remove+0x14>)
 8019f16:	f004 fcc7 	bl	801e8a8 <lfs_remove>
}
 8019f1a:	fab0 f080 	clz	r0, r0
 8019f1e:	0940      	lsrs	r0, r0, #5
 8019f20:	bd08      	pop	{r3, pc}
 8019f22:	bf00      	nop
 8019f24:	20018d68 	.word	0x20018d68

08019f28 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 8019f28:	b508      	push	{r3, lr}
 8019f2a:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 8019f2c:	4803      	ldr	r0, [pc, #12]	@ (8019f3c <mg_fs_lfs_mkdir+0x14>)
 8019f2e:	f004 fdf5 	bl	801eb1c <lfs_mkdir>
}
 8019f32:	fab0 f080 	clz	r0, r0
 8019f36:	0940      	lsrs	r0, r0, #5
 8019f38:	bd08      	pop	{r3, pc}
 8019f3a:	bf00      	nop
 8019f3c:	20018d68 	.word	0x20018d68

08019f40 <mg_fs_mounted>:
}
 8019f40:	4b01      	ldr	r3, [pc, #4]	@ (8019f48 <mg_fs_mounted+0x8>)
 8019f42:	7818      	ldrb	r0, [r3, #0]
 8019f44:	4770      	bx	lr
 8019f46:	bf00      	nop
 8019f48:	20018d08 	.word	0x20018d08

08019f4c <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 8019f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f50:	b090      	sub	sp, #64	@ 0x40
 8019f52:	4680      	mov	r8, r0
 8019f54:	460f      	mov	r7, r1
	flash_info = sFLASH_GetInfo();
 8019f56:	4668      	mov	r0, sp
 8019f58:	f7fb f8c4 	bl	80150e4 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 8019f5c:	9b00      	ldr	r3, [sp, #0]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d054      	beq.n	801a00c <lfs_fs_ll_init+0xc0>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 8019f62:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 8019f66:	4621      	mov	r1, r4
 8019f68:	2001      	movs	r0, #1
 8019f6a:	f7ff febf 	bl	8019cec <mg_calloc>
 8019f6e:	4605      	mov	r5, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 8019f70:	4621      	mov	r1, r4
 8019f72:	2001      	movs	r0, #1
 8019f74:	f7ff feba 	bl	8019cec <mg_calloc>
 8019f78:	4606      	mov	r6, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 8019f7a:	4621      	mov	r1, r4
 8019f7c:	2001      	movs	r0, #1
 8019f7e:	f7ff feb5 	bl	8019cec <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 8019f82:	2d00      	cmp	r5, #0
 8019f84:	d02b      	beq.n	8019fde <lfs_fs_ll_init+0x92>
	cfg.read_size         = flash_info.read_size;
 8019f86:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019f8a:	4922      	ldr	r1, [pc, #136]	@ (801a014 <lfs_fs_ll_init+0xc8>)
 8019f8c:	61cb      	str	r3, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 8019f8e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019f92:	620b      	str	r3, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 8019f94:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019f98:	624b      	str	r3, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 8019f9a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019f9e:	628b      	str	r3, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 8019fa0:	634c      	str	r4, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 8019fa2:	630c      	str	r4, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 8019fa4:	63cd      	str	r5, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 8019fa6:	640e      	str	r6, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 8019fa8:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 8019faa:	4b1b      	ldr	r3, [pc, #108]	@ (801a018 <lfs_fs_ll_init+0xcc>)
 8019fac:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 8019fae:	4b1b      	ldr	r3, [pc, #108]	@ (801a01c <lfs_fs_ll_init+0xd0>)
 8019fb0:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 8019fb2:	4b1b      	ldr	r3, [pc, #108]	@ (801a020 <lfs_fs_ll_init+0xd4>)
 8019fb4:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 8019fb6:	4b1b      	ldr	r3, [pc, #108]	@ (801a024 <lfs_fs_ll_init+0xd8>)
 8019fb8:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 8019fba:	f8c1 8014 	str.w	r8, [r1, #20]
	cfg.unlock	= unlock;
 8019fbe:	618f      	str	r7, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 8019fc0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019fc4:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 8019fc6:	4818      	ldr	r0, [pc, #96]	@ (801a028 <lfs_fs_ll_init+0xdc>)
 8019fc8:	f004 fc5b 	bl	801e882 <lfs_mount>
 8019fcc:	2800      	cmp	r0, #0
 8019fce:	db0d      	blt.n	8019fec <lfs_fs_ll_init+0xa0>
    	fs_mounted = 1;
 8019fd0:	4b16      	ldr	r3, [pc, #88]	@ (801a02c <lfs_fs_ll_init+0xe0>)
 8019fd2:	2201      	movs	r2, #1
 8019fd4:	701a      	strb	r2, [r3, #0]
    	return 0;
 8019fd6:	2000      	movs	r0, #0
}
 8019fd8:	b010      	add	sp, #64	@ 0x40
 8019fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 8019fde:	2e00      	cmp	r6, #0
 8019fe0:	d1d1      	bne.n	8019f86 <lfs_fs_ll_init+0x3a>
 8019fe2:	2800      	cmp	r0, #0
 8019fe4:	d1cf      	bne.n	8019f86 <lfs_fs_ll_init+0x3a>
		return -2;
 8019fe6:	f06f 0001 	mvn.w	r0, #1
 8019fea:	e7f5      	b.n	8019fd8 <lfs_fs_ll_init+0x8c>
    	lfs_format(&lfs, &cfg);
 8019fec:	4d09      	ldr	r5, [pc, #36]	@ (801a014 <lfs_fs_ll_init+0xc8>)
 8019fee:	4c0e      	ldr	r4, [pc, #56]	@ (801a028 <lfs_fs_ll_init+0xdc>)
 8019ff0:	4629      	mov	r1, r5
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	f004 fc32 	bl	801e85c <lfs_format>
    	if((err = lfs_mount(&lfs, &cfg)) == 0) fs_mounted = 1;
 8019ff8:	4629      	mov	r1, r5
 8019ffa:	4620      	mov	r0, r4
 8019ffc:	f004 fc41 	bl	801e882 <lfs_mount>
 801a000:	2800      	cmp	r0, #0
 801a002:	d1e9      	bne.n	8019fd8 <lfs_fs_ll_init+0x8c>
 801a004:	4b09      	ldr	r3, [pc, #36]	@ (801a02c <lfs_fs_ll_init+0xe0>)
 801a006:	2201      	movs	r2, #1
 801a008:	701a      	strb	r2, [r3, #0]
    	return err;
 801a00a:	e7e5      	b.n	8019fd8 <lfs_fs_ll_init+0x8c>
	if (flash_info.flash_id == 0x0) return -1;
 801a00c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a010:	e7e2      	b.n	8019fd8 <lfs_fs_ll_init+0x8c>
 801a012:	bf00      	nop
 801a014:	20018d0c 	.word	0x20018d0c
 801a018:	08019d09 	.word	0x08019d09
 801a01c:	08019d79 	.word	0x08019d79
 801a020:	08019d49 	.word	0x08019d49
 801a024:	08019ce9 	.word	0x08019ce9
 801a028:	20018d68 	.word	0x20018d68
 801a02c:	20018d08 	.word	0x20018d08

0801a030 <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a030:	6803      	ldr	r3, [r0, #0]
 801a032:	680a      	ldr	r2, [r1, #0]
 801a034:	4293      	cmp	r3, r2
 801a036:	d004      	beq.n	801a042 <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a038:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a03a:	428b      	cmp	r3, r1
 801a03c:	d015      	beq.n	801a06a <lfs_pair_issync+0x3a>
 801a03e:	2000      	movs	r0, #0
 801a040:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801a042:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a044:	6844      	ldr	r4, [r0, #4]
 801a046:	684d      	ldr	r5, [r1, #4]
 801a048:	42ac      	cmp	r4, r5
 801a04a:	d00a      	beq.n	801a062 <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a04c:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a04e:	428b      	cmp	r3, r1
 801a050:	d002      	beq.n	801a058 <lfs_pair_issync+0x28>
 801a052:	2000      	movs	r0, #0
}
 801a054:	bc30      	pop	{r4, r5}
 801a056:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a058:	6843      	ldr	r3, [r0, #4]
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d003      	beq.n	801a066 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a05e:	2000      	movs	r0, #0
 801a060:	e7f8      	b.n	801a054 <lfs_pair_issync+0x24>
 801a062:	2001      	movs	r0, #1
 801a064:	e7f6      	b.n	801a054 <lfs_pair_issync+0x24>
 801a066:	2001      	movs	r0, #1
 801a068:	e7f4      	b.n	801a054 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a06a:	6843      	ldr	r3, [r0, #4]
 801a06c:	429a      	cmp	r2, r3
 801a06e:	d001      	beq.n	801a074 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a070:	2000      	movs	r0, #0
 801a072:	4770      	bx	lr
 801a074:	2001      	movs	r0, #1
}
 801a076:	4770      	bx	lr

0801a078 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 801a078:	2300      	movs	r3, #0
 801a07a:	2b02      	cmp	r3, #2
 801a07c:	dc0d      	bgt.n	801a09a <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801a07e:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801a080:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801a084:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801a088:	4062      	eors	r2, r4
 801a08a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801a08e:	3301      	adds	r3, #1
 801a090:	2b02      	cmp	r3, #2
 801a092:	ddf5      	ble.n	801a080 <lfs_gstate_xor+0x8>
    }
}
 801a094:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a098:	4770      	bx	lr
 801a09a:	4770      	bx	lr

0801a09c <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a09c:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801a09e:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a0a0:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801a0a4:	d00f      	beq.n	801a0c6 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801a0a6:	6843      	ldr	r3, [r0, #4]
 801a0a8:	680a      	ldr	r2, [r1, #0]
 801a0aa:	4293      	cmp	r3, r2
 801a0ac:	d00d      	beq.n	801a0ca <lfs_gstate_hasmovehere+0x2e>
 801a0ae:	6880      	ldr	r0, [r0, #8]
 801a0b0:	6849      	ldr	r1, [r1, #4]
 801a0b2:	4288      	cmp	r0, r1
 801a0b4:	d00b      	beq.n	801a0ce <lfs_gstate_hasmovehere+0x32>
 801a0b6:	428b      	cmp	r3, r1
 801a0b8:	d00b      	beq.n	801a0d2 <lfs_gstate_hasmovehere+0x36>
 801a0ba:	4282      	cmp	r2, r0
 801a0bc:	d001      	beq.n	801a0c2 <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a0be:	2000      	movs	r0, #0
}
 801a0c0:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a0c2:	2001      	movs	r0, #1
 801a0c4:	4770      	bx	lr
 801a0c6:	2000      	movs	r0, #0
 801a0c8:	4770      	bx	lr
 801a0ca:	2001      	movs	r0, #1
 801a0cc:	4770      	bx	lr
 801a0ce:	2001      	movs	r0, #1
 801a0d0:	4770      	bx	lr
 801a0d2:	2001      	movs	r0, #1
 801a0d4:	4770      	bx	lr

0801a0d6 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801a0d6:	b082      	sub	sp, #8
 801a0d8:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801a0da:	ab01      	add	r3, sp, #4
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	b11b      	cbz	r3, 801a0e8 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801a0e0:	428b      	cmp	r3, r1
 801a0e2:	d1fb      	bne.n	801a0dc <lfs_mlist_isopen+0x6>
            return true;
 801a0e4:	2001      	movs	r0, #1
 801a0e6:	e000      	b.n	801a0ea <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 801a0e8:	2000      	movs	r0, #0
}
 801a0ea:	b002      	add	sp, #8
 801a0ec:	4770      	bx	lr

0801a0ee <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801a0ee:	3028      	adds	r0, #40	@ 0x28
 801a0f0:	e000      	b.n	801a0f4 <lfs_mlist_remove+0x6>
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	6803      	ldr	r3, [r0, #0]
 801a0f6:	b123      	cbz	r3, 801a102 <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 801a0f8:	428b      	cmp	r3, r1
 801a0fa:	d1fa      	bne.n	801a0f2 <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	6003      	str	r3, [r0, #0]
            break;
 801a100:	4770      	bx	lr
        }
    }
}
 801a102:	4770      	bx	lr

0801a104 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 801a104:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801a106:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 801a108:	6281      	str	r1, [r0, #40]	@ 0x28
}
 801a10a:	4770      	bx	lr

0801a10c <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 801a10c:	4800      	ldr	r0, [pc, #0]	@ (801a110 <lfs_fs_disk_version+0x4>)
 801a10e:	4770      	bx	lr
 801a110:	00020001 	.word	0x00020001

0801a114 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801a114:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801a116:	f7ff fff9 	bl	801a10c <lfs_fs_disk_version>

}
 801a11a:	0c00      	lsrs	r0, r0, #16
 801a11c:	bd08      	pop	{r3, pc}

0801a11e <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801a11e:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801a120:	f7ff fff4 	bl	801a10c <lfs_fs_disk_version>
}
 801a124:	b280      	uxth	r0, r0
 801a126:	bd08      	pop	{r3, pc}

0801a128 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 801a128:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a12a:	6603      	str	r3, [r0, #96]	@ 0x60
}
 801a12c:	4770      	bx	lr

0801a12e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801a12e:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801a130:	2200      	movs	r2, #0
 801a132:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801a134:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801a136:	f7ff fff7 	bl	801a128 <lfs_alloc_ckpoint>
}
 801a13a:	bd08      	pop	{r3, pc}

0801a13c <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 801a13c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801a13e:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801a140:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a142:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 801a144:	fbb1 f2f3 	udiv	r2, r1, r3
 801a148:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 801a14c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801a14e:	428b      	cmp	r3, r1
 801a150:	d90d      	bls.n	801a16e <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801a152:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801a154:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 801a156:	08c8      	lsrs	r0, r1, #3
 801a158:	5c23      	ldrb	r3, [r4, r0]
 801a15a:	f001 0107 	and.w	r1, r1, #7
 801a15e:	2201      	movs	r2, #1
 801a160:	408a      	lsls	r2, r1
 801a162:	4313      	orrs	r3, r2
 801a164:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 801a166:	2000      	movs	r0, #0
 801a168:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a16c:	4770      	bx	lr
 801a16e:	2000      	movs	r0, #0
 801a170:	4770      	bx	lr
	...

0801a174 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801a174:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801a176:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 801a17a:	d01c      	beq.n	801a1b6 <lfs_dir_traverse_filter+0x42>
 801a17c:	4a19      	ldr	r2, [pc, #100]	@ (801a1e4 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801a17e:	6803      	ldr	r3, [r0, #0]
 801a180:	ea83 0401 	eor.w	r4, r3, r1
 801a184:	4214      	tst	r4, r2
 801a186:	d018      	beq.n	801a1ba <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801a188:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 801a18c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a190:	d013      	beq.n	801a1ba <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801a192:	4c14      	ldr	r4, [pc, #80]	@ (801a1e4 <lfs_dir_traverse_filter+0x70>)
 801a194:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801a196:	4a14      	ldr	r2, [pc, #80]	@ (801a1e8 <lfs_dir_traverse_filter+0x74>)
 801a198:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801a19a:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801a19e:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801a1a2:	4294      	cmp	r4, r2
 801a1a4:	d009      	beq.n	801a1ba <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 801a1a6:	0d0a      	lsrs	r2, r1, #20
 801a1a8:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801a1ac:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801a1b0:	d009      	beq.n	801a1c6 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801a1b2:	2000      	movs	r0, #0
 801a1b4:	e004      	b.n	801a1c0 <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801a1b6:	4a0d      	ldr	r2, [pc, #52]	@ (801a1ec <lfs_dir_traverse_filter+0x78>)
 801a1b8:	e7e1      	b.n	801a17e <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	6003      	str	r3, [r0, #0]
        return true;
 801a1be:	2001      	movs	r0, #1
}
 801a1c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1c4:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 801a1c6:	f3c1 2189 	ubfx	r1, r1, #10, #10
 801a1ca:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801a1ce:	428c      	cmp	r4, r1
 801a1d0:	d305      	bcc.n	801a1de <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801a1d2:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801a1d4:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 801a1d8:	6003      	str	r3, [r0, #0]
    return false;
 801a1da:	2000      	movs	r0, #0
 801a1dc:	e7f0      	b.n	801a1c0 <lfs_dir_traverse_filter+0x4c>
 801a1de:	2000      	movs	r0, #0
 801a1e0:	e7ee      	b.n	801a1c0 <lfs_dir_traverse_filter+0x4c>
 801a1e2:	bf00      	nop
 801a1e4:	7ffffc00 	.word	0x7ffffc00
 801a1e8:	000ffc00 	.word	0x000ffc00
 801a1ec:	700ffc00 	.word	0x700ffc00

0801a1f0 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801a1f0:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a1f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a1f8:	bf08      	it	eq
 801a1fa:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 801a1fc:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a200:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801a202:	6803      	ldr	r3, [r0, #0]
 801a204:	440b      	add	r3, r1
 801a206:	6003      	str	r3, [r0, #0]
    return 0;
}
 801a208:	2000      	movs	r0, #0
 801a20a:	4770      	bx	lr

0801a20c <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801a20c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801a210:	2b00      	cmp	r3, #0
 801a212:	dd0b      	ble.n	801a22c <lfs_dir_needsrelocation+0x20>
 801a214:	688a      	ldr	r2, [r1, #8]
 801a216:	3201      	adds	r2, #1
 801a218:	3301      	adds	r3, #1
 801a21a:	f043 0301 	orr.w	r3, r3, #1
 801a21e:	fbb2 f1f3 	udiv	r1, r2, r3
 801a222:	fb03 2211 	mls	r2, r3, r1, r2
 801a226:	b11a      	cbz	r2, 801a230 <lfs_dir_needsrelocation+0x24>
 801a228:	2000      	movs	r0, #0
 801a22a:	4770      	bx	lr
 801a22c:	2000      	movs	r0, #0
 801a22e:	4770      	bx	lr
 801a230:	2001      	movs	r0, #1
}
 801a232:	4770      	bx	lr

0801a234 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 801a234:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801a236:	f7ff ff5a 	bl	801a0ee <lfs_mlist_remove>

    return 0;
}
 801a23a:	2000      	movs	r0, #0
 801a23c:	bd08      	pop	{r3, pc}

0801a23e <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801a23e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801a240:	4770      	bx	lr

0801a242 <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801a242:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801a244:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801a248:	d101      	bne.n	801a24e <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 801a24a:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 801a24c:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801a24e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801a250:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801a252:	4298      	cmp	r0, r3
 801a254:	bf38      	it	cc
 801a256:	4618      	movcc	r0, r3
 801a258:	4770      	bx	lr

0801a25a <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801a25a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a25c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801a260:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801a264:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801a266:	4770      	bx	lr

0801a268 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 801a268:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801a26a:	4b13      	ldr	r3, [pc, #76]	@ (801a2b8 <lfs_fs_prepmove+0x50>)
 801a26c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801a26e:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801a270:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 801a274:	4561      	cmp	r1, ip
 801a276:	d017      	beq.n	801a2a8 <lfs_fs_prepmove+0x40>
 801a278:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 801a27c:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801a280:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801a284:	ea43 030c 	orr.w	r3, r3, ip
 801a288:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801a28a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801a28e:	4299      	cmp	r1, r3
 801a290:	d00d      	beq.n	801a2ae <lfs_fs_prepmove+0x46>
 801a292:	6813      	ldr	r3, [r2, #0]
 801a294:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801a296:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801a29a:	4299      	cmp	r1, r3
 801a29c:	d009      	beq.n	801a2b2 <lfs_fs_prepmove+0x4a>
 801a29e:	6853      	ldr	r3, [r2, #4]
 801a2a0:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801a2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2a6:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801a2a8:	f04f 0c00 	mov.w	ip, #0
 801a2ac:	e7ea      	b.n	801a284 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	e7f0      	b.n	801a294 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	e7f4      	b.n	801a2a0 <lfs_fs_prepmove+0x38>
 801a2b6:	bf00      	nop
 801a2b8:	800003ff 	.word	0x800003ff

0801a2bc <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 801a2bc:	6803      	ldr	r3, [r0, #0]
 801a2be:	3301      	adds	r3, #1
 801a2c0:	6003      	str	r3, [r0, #0]
    return 0;
}
 801a2c2:	2000      	movs	r0, #0
 801a2c4:	4770      	bx	lr
	...

0801a2c8 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801a2c8:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 801a2ca:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a2cc:	428b      	cmp	r3, r1
 801a2ce:	d905      	bls.n	801a2dc <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801a2d0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801a2d2:	68c3      	ldr	r3, [r0, #12]
 801a2d4:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801a2d6:	2800      	cmp	r0, #0
 801a2d8:	dc07      	bgt.n	801a2ea <lfs_bd_erase+0x22>
}
 801a2da:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 801a2dc:	4b06      	ldr	r3, [pc, #24]	@ (801a2f8 <lfs_bd_erase+0x30>)
 801a2de:	4a07      	ldr	r2, [pc, #28]	@ (801a2fc <lfs_bd_erase+0x34>)
 801a2e0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801a2e4:	4806      	ldr	r0, [pc, #24]	@ (801a300 <lfs_bd_erase+0x38>)
 801a2e6:	f00e fe39 	bl	8028f5c <__assert_func>
    LFS_ASSERT(err <= 0);
 801a2ea:	4b06      	ldr	r3, [pc, #24]	@ (801a304 <lfs_bd_erase+0x3c>)
 801a2ec:	4a03      	ldr	r2, [pc, #12]	@ (801a2fc <lfs_bd_erase+0x34>)
 801a2ee:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801a2f2:	4803      	ldr	r0, [pc, #12]	@ (801a300 <lfs_bd_erase+0x38>)
 801a2f4:	f00e fe32 	bl	8028f5c <__assert_func>
 801a2f8:	08037c98 	.word	0x08037c98
 801a2fc:	080388f8 	.word	0x080388f8
 801a300:	08037bac 	.word	0x08037bac
 801a304:	08037bdc 	.word	0x08037bdc

0801a308 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 801a308:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801a30a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801a30c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801a310:	b90a      	cbnz	r2, 801a316 <lfs_fs_preporphans+0xe>
 801a312:	2900      	cmp	r1, #0
 801a314:	db12      	blt.n	801a33c <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801a316:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 801a31a:	d901      	bls.n	801a320 <lfs_fs_preporphans+0x18>
 801a31c:	2900      	cmp	r1, #0
 801a31e:	dc14      	bgt.n	801a34a <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801a320:	4419      	add	r1, r3
 801a322:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801a324:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 801a328:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 801a32c:	3900      	subs	r1, #0
 801a32e:	bf18      	it	ne
 801a330:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801a332:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801a336:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801a338:	2000      	movs	r0, #0
 801a33a:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801a33c:	4b06      	ldr	r3, [pc, #24]	@ (801a358 <lfs_fs_preporphans+0x50>)
 801a33e:	4a07      	ldr	r2, [pc, #28]	@ (801a35c <lfs_fs_preporphans+0x54>)
 801a340:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 801a344:	4806      	ldr	r0, [pc, #24]	@ (801a360 <lfs_fs_preporphans+0x58>)
 801a346:	f00e fe09 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801a34a:	4b06      	ldr	r3, [pc, #24]	@ (801a364 <lfs_fs_preporphans+0x5c>)
 801a34c:	4a03      	ldr	r2, [pc, #12]	@ (801a35c <lfs_fs_preporphans+0x54>)
 801a34e:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801a352:	4803      	ldr	r0, [pc, #12]	@ (801a360 <lfs_fs_preporphans+0x58>)
 801a354:	f00e fe02 	bl	8028f5c <__assert_func>
 801a358:	08037be8 	.word	0x08037be8
 801a35c:	080388c8 	.word	0x080388c8
 801a360:	08037bac 	.word	0x08037bac
 801a364:	08037c20 	.word	0x08037c20

0801a368 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801a368:	b510      	push	{r4, lr}
 801a36a:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801a36c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a36e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a370:	21ff      	movs	r1, #255	@ 0xff
 801a372:	68e0      	ldr	r0, [r4, #12]
 801a374:	f011 fb44 	bl	802ba00 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801a378:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a37c:	6023      	str	r3, [r4, #0]
}
 801a37e:	bd10      	pop	{r4, pc}

0801a380 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801a382:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 801a384:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a386:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 801a388:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 801a38a:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801a38e:	42bd      	cmp	r5, r7
 801a390:	d312      	bcc.n	801a3b8 <lfs_ctz_index+0x38>
 801a392:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801a394:	3801      	subs	r0, #1
 801a396:	f7f6 fcf7 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 801a39a:	1c84      	adds	r4, r0, #2
 801a39c:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801a3a0:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 801a3a4:	fb04 5517 	mls	r5, r4, r7, r5
 801a3a8:	4620      	mov	r0, r4
 801a3aa:	f7f6 fced 	bl	8010d88 <__popcountsi2>
 801a3ae:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801a3b2:	6035      	str	r5, [r6, #0]
    return i;
 801a3b4:	4620      	mov	r0, r4
}
 801a3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801a3b8:	2000      	movs	r0, #0
 801a3ba:	e7fc      	b.n	801a3b6 <lfs_ctz_index+0x36>

0801a3bc <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 801a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3c0:	b087      	sub	sp, #28
 801a3c2:	4615      	mov	r5, r2
 801a3c4:	469b      	mov	fp, r3
 801a3c6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801a3c8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801a3ca:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801a3ce:	eb04 020a 	add.w	r2, r4, sl
 801a3d2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a3d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a3d6:	429a      	cmp	r2, r3
 801a3d8:	f200 80d0 	bhi.w	801a57c <lfs_bd_read+0x1c0>
 801a3dc:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801a3de:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	f000 80c7 	beq.w	801a574 <lfs_bd_read+0x1b8>
 801a3e6:	42bb      	cmp	r3, r7
 801a3e8:	f240 80cb 	bls.w	801a582 <lfs_bd_read+0x1c6>
 801a3ec:	9003      	str	r0, [sp, #12]
 801a3ee:	e084      	b.n	801a4fa <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801a3f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a3f4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801a3f8:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 801a3fa:	42a1      	cmp	r1, r4
 801a3fc:	d91e      	bls.n	801a43c <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801a3fe:	42a3      	cmp	r3, r4
 801a400:	d905      	bls.n	801a40e <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801a402:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 801a404:	4553      	cmp	r3, sl
 801a406:	bf28      	it	cs
 801a408:	4653      	movcs	r3, sl
 801a40a:	4698      	mov	r8, r3
 801a40c:	e081      	b.n	801a512 <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801a40e:	1b19      	subs	r1, r3, r4
 801a410:	eb02 0801 	add.w	r8, r2, r1
 801a414:	45d0      	cmp	r8, sl
 801a416:	bf28      	it	cs
 801a418:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801a41a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801a41e:	1ae3      	subs	r3, r4, r3
 801a420:	4642      	mov	r2, r8
 801a422:	4419      	add	r1, r3
 801a424:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a426:	f012 fd27 	bl	802ce78 <memcpy>
                data += diff;
 801a42a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a42c:	4443      	add	r3, r8
 801a42e:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801a430:	4444      	add	r4, r8
                size -= diff;
 801a432:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801a436:	e060      	b.n	801a4fa <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 801a438:	46d0      	mov	r8, sl
 801a43a:	e06a      	b.n	801a512 <lfs_bd_read+0x156>
 801a43c:	46d0      	mov	r8, sl
 801a43e:	e068      	b.n	801a512 <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 801a440:	686b      	ldr	r3, [r5, #4]
 801a442:	68aa      	ldr	r2, [r5, #8]
 801a444:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 801a446:	42a1      	cmp	r1, r4
 801a448:	d966      	bls.n	801a518 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 801a44a:	42a3      	cmp	r3, r4
 801a44c:	d904      	bls.n	801a458 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 801a44e:	1b1b      	subs	r3, r3, r4
 801a450:	4598      	cmp	r8, r3
 801a452:	bf28      	it	cs
 801a454:	4698      	movcs	r8, r3
 801a456:	e05f      	b.n	801a518 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801a458:	1b19      	subs	r1, r3, r4
 801a45a:	440a      	add	r2, r1
 801a45c:	4590      	cmp	r8, r2
 801a45e:	bf28      	it	cs
 801a460:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801a462:	68e9      	ldr	r1, [r5, #12]
 801a464:	1ae3      	subs	r3, r4, r3
 801a466:	4642      	mov	r2, r8
 801a468:	4419      	add	r1, r3
 801a46a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a46c:	f012 fd04 	bl	802ce78 <memcpy>
                data += diff;
 801a470:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a472:	4443      	add	r3, r8
 801a474:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801a476:	4444      	add	r4, r8
                size -= diff;
 801a478:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801a47c:	e03d      	b.n	801a4fa <lfs_bd_read+0x13e>
            data += diff;
 801a47e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a480:	9b04      	ldr	r3, [sp, #16]
 801a482:	441a      	add	r2, r3
 801a484:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 801a486:	441c      	add	r4, r3
            size -= diff;
 801a488:	9b05      	ldr	r3, [sp, #20]
 801a48a:	eba3 0308 	sub.w	r3, r3, r8
 801a48e:	449a      	add	sl, r3
            continue;
 801a490:	e033      	b.n	801a4fa <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801a492:	9b03      	ldr	r3, [sp, #12]
 801a494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a496:	b10b      	cbz	r3, 801a49c <lfs_bd_read+0xe0>
 801a498:	42bb      	cmp	r3, r7
 801a49a:	d95f      	bls.n	801a55c <lfs_bd_read+0x1a0>
        rcache->block = block;
 801a49c:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801a49e:	9e03      	ldr	r6, [sp, #12]
 801a4a0:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801a4a2:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 801a4a4:	fbb4 f3f2 	udiv	r3, r4, r2
 801a4a8:	fb02 4313 	mls	r3, r2, r3, r4
 801a4ac:	1ae2      	subs	r2, r4, r3
 801a4ae:	606a      	str	r2, [r5, #4]
                lfs_min(
 801a4b0:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801a4b4:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 801a4b8:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801a4bc:	4401      	add	r1, r0
 801a4be:	3901      	subs	r1, #1
    return a - (a % alignment);
 801a4c0:	fbb1 fef0 	udiv	lr, r1, r0
 801a4c4:	fb00 101e 	mls	r0, r0, lr, r1
 801a4c8:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 801a4ca:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 801a4ce:	1b1b      	subs	r3, r3, r4
 801a4d0:	4288      	cmp	r0, r1
 801a4d2:	bf94      	ite	ls
 801a4d4:	181b      	addls	r3, r3, r0
 801a4d6:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 801a4d8:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 801a4dc:	428b      	cmp	r3, r1
 801a4de:	bf28      	it	cs
 801a4e0:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 801a4e2:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801a4e4:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 801a4e6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a4ea:	9300      	str	r3, [sp, #0]
 801a4ec:	68eb      	ldr	r3, [r5, #12]
 801a4ee:	4639      	mov	r1, r7
 801a4f0:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 801a4f2:	1e03      	subs	r3, r0, #0
 801a4f4:	dc38      	bgt.n	801a568 <lfs_bd_read+0x1ac>
        if (err) {
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d146      	bne.n	801a588 <lfs_bd_read+0x1cc>
    while (size > 0) {
 801a4fa:	f1ba 0f00 	cmp.w	sl, #0
 801a4fe:	d03b      	beq.n	801a578 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 801a500:	f1b9 0f00 	cmp.w	r9, #0
 801a504:	d098      	beq.n	801a438 <lfs_bd_read+0x7c>
 801a506:	f8d9 3000 	ldr.w	r3, [r9]
 801a50a:	42bb      	cmp	r3, r7
 801a50c:	f43f af70 	beq.w	801a3f0 <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 801a510:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 801a512:	682b      	ldr	r3, [r5, #0]
 801a514:	42bb      	cmp	r3, r7
 801a516:	d093      	beq.n	801a440 <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801a518:	45da      	cmp	sl, fp
 801a51a:	d3ba      	bcc.n	801a492 <lfs_bd_read+0xd6>
 801a51c:	9b03      	ldr	r3, [sp, #12]
 801a51e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801a520:	69c2      	ldr	r2, [r0, #28]
 801a522:	fbb4 f3f2 	udiv	r3, r4, r2
 801a526:	fb02 4313 	mls	r3, r2, r3, r4
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d1b1      	bne.n	801a492 <lfs_bd_read+0xd6>
 801a52e:	4552      	cmp	r2, sl
 801a530:	d8af      	bhi.n	801a492 <lfs_bd_read+0xd6>
    return a - (a % alignment);
 801a532:	fbb8 f3f2 	udiv	r3, r8, r2
 801a536:	fb02 8313 	mls	r3, r2, r3, r8
 801a53a:	9305      	str	r3, [sp, #20]
 801a53c:	eba8 0203 	sub.w	r2, r8, r3
 801a540:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801a542:	6842      	ldr	r2, [r0, #4]
 801a544:	4616      	mov	r6, r2
 801a546:	9304      	str	r3, [sp, #16]
 801a548:	9300      	str	r3, [sp, #0]
 801a54a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a54c:	4622      	mov	r2, r4
 801a54e:	4639      	mov	r1, r7
 801a550:	47b0      	blx	r6
            if (err) {
 801a552:	2800      	cmp	r0, #0
 801a554:	d093      	beq.n	801a47e <lfs_bd_read+0xc2>
}
 801a556:	b007      	add	sp, #28
 801a558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801a55c:	4b0b      	ldr	r3, [pc, #44]	@ (801a58c <lfs_bd_read+0x1d0>)
 801a55e:	4a0c      	ldr	r2, [pc, #48]	@ (801a590 <lfs_bd_read+0x1d4>)
 801a560:	216b      	movs	r1, #107	@ 0x6b
 801a562:	480c      	ldr	r0, [pc, #48]	@ (801a594 <lfs_bd_read+0x1d8>)
 801a564:	f00e fcfa 	bl	8028f5c <__assert_func>
        LFS_ASSERT(err <= 0);
 801a568:	4b0b      	ldr	r3, [pc, #44]	@ (801a598 <lfs_bd_read+0x1dc>)
 801a56a:	4a09      	ldr	r2, [pc, #36]	@ (801a590 <lfs_bd_read+0x1d4>)
 801a56c:	2176      	movs	r1, #118	@ 0x76
 801a56e:	4809      	ldr	r0, [pc, #36]	@ (801a594 <lfs_bd_read+0x1d8>)
 801a570:	f00e fcf4 	bl	8028f5c <__assert_func>
 801a574:	9003      	str	r0, [sp, #12]
 801a576:	e7c0      	b.n	801a4fa <lfs_bd_read+0x13e>
    return 0;
 801a578:	2000      	movs	r0, #0
 801a57a:	e7ec      	b.n	801a556 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 801a57c:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801a580:	e7e9      	b.n	801a556 <lfs_bd_read+0x19a>
 801a582:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801a586:	e7e6      	b.n	801a556 <lfs_bd_read+0x19a>
 801a588:	4618      	mov	r0, r3
 801a58a:	e7e4      	b.n	801a556 <lfs_bd_read+0x19a>
 801a58c:	08037c58 	.word	0x08037c58
 801a590:	08038920 	.word	0x08038920
 801a594:	08037bac 	.word	0x08037bac
 801a598:	08037bdc 	.word	0x08037bdc

0801a59c <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801a59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5a0:	b089      	sub	sp, #36	@ 0x24
 801a5a2:	4607      	mov	r7, r0
 801a5a4:	468a      	mov	sl, r1
 801a5a6:	4690      	mov	r8, r2
 801a5a8:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 801a5aa:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 801a5ac:	690b      	ldr	r3, [r1, #16]
 801a5ae:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801a5b0:	303c      	adds	r0, #60	@ 0x3c
 801a5b2:	f7ff fd73 	bl	801a09c <lfs_gstate_hasmovehere>
 801a5b6:	2800      	cmp	r0, #0
 801a5b8:	f000 808d 	beq.w	801a6d6 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 801a5bc:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	f000 808a 	beq.w	801a6da <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801a5c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801a5c8:	f3c2 238f 	ubfx	r3, r2, #10, #16
 801a5cc:	f3c2 2289 	ubfx	r2, r2, #10, #10
 801a5d0:	f3cb 218f 	ubfx	r1, fp, #10, #16
 801a5d4:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801a5d8:	404b      	eors	r3, r1
 801a5da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	f000 8085 	beq.w	801a6ee <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801a5e4:	4282      	cmp	r2, r0
 801a5e6:	d37a      	bcc.n	801a6de <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 801a5e8:	2600      	movs	r6, #0
 801a5ea:	e006      	b.n	801a5fa <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801a5ec:	9605      	str	r6, [sp, #20]
 801a5ee:	ebab 0306 	sub.w	r3, fp, r6
 801a5f2:	4063      	eors	r3, r4
 801a5f4:	ea13 0f08 	tst.w	r3, r8
 801a5f8:	d048      	beq.n	801a68c <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801a5fa:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801a5fc:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a600:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801a604:	bf14      	ite	ne
 801a606:	4623      	movne	r3, r4
 801a608:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 801a60a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a60e:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801a610:	3308      	adds	r3, #8
 801a612:	42ab      	cmp	r3, r5
 801a614:	d865      	bhi.n	801a6e2 <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 801a616:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 801a618:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 801a61c:	2304      	movs	r3, #4
 801a61e:	9303      	str	r3, [sp, #12]
 801a620:	a907      	add	r1, sp, #28
 801a622:	9102      	str	r1, [sp, #8]
 801a624:	9501      	str	r5, [sp, #4]
 801a626:	9200      	str	r2, [sp, #0]
 801a628:	463a      	mov	r2, r7
 801a62a:	2100      	movs	r1, #0
 801a62c:	4638      	mov	r0, r7
 801a62e:	f7ff fec5 	bl	801a3bc <lfs_bd_read>
        if (err) {
 801a632:	4603      	mov	r3, r0
 801a634:	2800      	cmp	r0, #0
 801a636:	d156      	bne.n	801a6e6 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801a638:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801a63a:	ba1b      	rev	r3, r3
 801a63c:	4063      	eors	r3, r4
 801a63e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a642:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 801a644:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d0cf      	beq.n	801a5ec <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 801a64c:	0d23      	lsrs	r3, r4, #20
 801a64e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 801a652:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801a656:	d1c9      	bne.n	801a5ec <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 801a658:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801a65c:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 801a660:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801a664:	4584      	cmp	ip, r0
 801a666:	d3c1      	bcc.n	801a5ec <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801a668:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801a66c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801a670:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801a674:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801a678:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801a67c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801a680:	42a2      	cmp	r2, r4
 801a682:	d037      	beq.n	801a6f4 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 801a684:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801a686:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 801a68a:	e7af      	b.n	801a5ec <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 801a68c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801a690:	d033      	beq.n	801a6fa <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 801a692:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 801a696:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a698:	429e      	cmp	r6, r3
 801a69a:	bf28      	it	cs
 801a69c:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801a69e:	f8da 2000 	ldr.w	r2, [sl]
 801a6a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a6a4:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 801a6a6:	9603      	str	r6, [sp, #12]
 801a6a8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a6aa:	9102      	str	r1, [sp, #8]
 801a6ac:	3304      	adds	r3, #4
 801a6ae:	9301      	str	r3, [sp, #4]
 801a6b0:	9200      	str	r2, [sp, #0]
 801a6b2:	4633      	mov	r3, r6
 801a6b4:	463a      	mov	r2, r7
 801a6b6:	2100      	movs	r1, #0
 801a6b8:	4638      	mov	r0, r7
 801a6ba:	f7ff fe7f 	bl	801a3bc <lfs_bd_read>
            if (err) {
 801a6be:	4603      	mov	r3, r0
 801a6c0:	b988      	cbnz	r0, 801a6e6 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801a6c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a6c4:	1b9a      	subs	r2, r3, r6
 801a6c6:	2100      	movs	r1, #0
 801a6c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a6ca:	1998      	adds	r0, r3, r6
 801a6cc:	f011 f998 	bl	802ba00 <memset>
            return tag + gdiff;
 801a6d0:	9b05      	ldr	r3, [sp, #20]
 801a6d2:	4423      	add	r3, r4
 801a6d4:	e007      	b.n	801a6e6 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 801a6d6:	2600      	movs	r6, #0
 801a6d8:	e78f      	b.n	801a5fa <lfs_dir_getslice+0x5e>
 801a6da:	2600      	movs	r6, #0
 801a6dc:	e78d      	b.n	801a5fa <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801a6de:	4e08      	ldr	r6, [pc, #32]	@ (801a700 <lfs_dir_getslice+0x164>)
 801a6e0:	e78b      	b.n	801a5fa <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 801a6e2:	f06f 0301 	mvn.w	r3, #1
}
 801a6e6:	4618      	mov	r0, r3
 801a6e8:	b009      	add	sp, #36	@ 0x24
 801a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 801a6ee:	f06f 0301 	mvn.w	r3, #1
 801a6f2:	e7f8      	b.n	801a6e6 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801a6f4:	f06f 0301 	mvn.w	r3, #1
 801a6f8:	e7f5      	b.n	801a6e6 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801a6fa:	f06f 0301 	mvn.w	r3, #1
 801a6fe:	e7f2      	b.n	801a6e6 <lfs_dir_getslice+0x14a>
 801a700:	fffffc00 	.word	0xfffffc00

0801a704 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801a704:	b510      	push	{r4, lr}
 801a706:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 801a708:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 801a70c:	9402      	str	r4, [sp, #8]
 801a70e:	9c06      	ldr	r4, [sp, #24]
 801a710:	9401      	str	r4, [sp, #4]
 801a712:	2400      	movs	r4, #0
 801a714:	9400      	str	r4, [sp, #0]
 801a716:	f7ff ff41 	bl	801a59c <lfs_dir_getslice>
}
 801a71a:	b004      	add	sp, #16
 801a71c:	bd10      	pop	{r4, pc}
	...

0801a720 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 801a720:	b510      	push	{r4, lr}
 801a722:	b086      	sub	sp, #24
 801a724:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801a726:	ab03      	add	r3, sp, #12
 801a728:	9300      	str	r3, [sp, #0]
 801a72a:	4b09      	ldr	r3, [pc, #36]	@ (801a750 <lfs_dir_getgstate+0x30>)
 801a72c:	4a09      	ldr	r2, [pc, #36]	@ (801a754 <lfs_dir_getgstate+0x34>)
 801a72e:	f7ff ffe9 	bl	801a704 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 801a732:	2800      	cmp	r0, #0
 801a734:	da04      	bge.n	801a740 <lfs_dir_getgstate+0x20>
 801a736:	f110 0f02 	cmn.w	r0, #2
 801a73a:	d106      	bne.n	801a74a <lfs_dir_getgstate+0x2a>
    return 0;
 801a73c:	2000      	movs	r0, #0
 801a73e:	e004      	b.n	801a74a <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 801a740:	a903      	add	r1, sp, #12
 801a742:	4620      	mov	r0, r4
 801a744:	f7ff fc98 	bl	801a078 <lfs_gstate_xor>
    return 0;
 801a748:	2000      	movs	r0, #0
}
 801a74a:	b006      	add	sp, #24
 801a74c:	bd10      	pop	{r4, pc}
 801a74e:	bf00      	nop
 801a750:	7ff0000c 	.word	0x7ff0000c
 801a754:	7ff00000 	.word	0x7ff00000

0801a758 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 801a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a75c:	b089      	sub	sp, #36	@ 0x24
 801a75e:	461c      	mov	r4, r3
 801a760:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a762:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a764:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 801a766:	b923      	cbnz	r3, 801a772 <lfs_ctz_traverse+0x1a>
        return 0;
 801a768:	2300      	movs	r3, #0
}
 801a76a:	4618      	mov	r0, r3
 801a76c:	b009      	add	sp, #36	@ 0x24
 801a76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a772:	4680      	mov	r8, r0
 801a774:	4689      	mov	r9, r1
 801a776:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801a778:	3b01      	subs	r3, #1
 801a77a:	9307      	str	r3, [sp, #28]
 801a77c:	a907      	add	r1, sp, #28
 801a77e:	f7ff fdff 	bl	801a380 <lfs_ctz_index>
 801a782:	4605      	mov	r5, r0
        int err = cb(data, head);
 801a784:	4621      	mov	r1, r4
 801a786:	4638      	mov	r0, r7
 801a788:	47b0      	blx	r6
        if (err) {
 801a78a:	4603      	mov	r3, r0
 801a78c:	2800      	cmp	r0, #0
 801a78e:	d1ec      	bne.n	801a76a <lfs_ctz_traverse+0x12>
        if (index == 0) {
 801a790:	2d00      	cmp	r5, #0
 801a792:	d0ea      	beq.n	801a76a <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 801a794:	f005 0b01 	and.w	fp, r5, #1
 801a798:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 801a79c:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 801a79e:	9303      	str	r3, [sp, #12]
 801a7a0:	aa05      	add	r2, sp, #20
 801a7a2:	9202      	str	r2, [sp, #8]
 801a7a4:	2200      	movs	r2, #0
 801a7a6:	9201      	str	r2, [sp, #4]
 801a7a8:	9400      	str	r4, [sp, #0]
 801a7aa:	4652      	mov	r2, sl
 801a7ac:	4649      	mov	r1, r9
 801a7ae:	4640      	mov	r0, r8
 801a7b0:	f7ff fe04 	bl	801a3bc <lfs_bd_read>
        if (err) {
 801a7b4:	4604      	mov	r4, r0
 801a7b6:	b9c8      	cbnz	r0, 801a7ec <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 801a7b8:	43eb      	mvns	r3, r5
 801a7ba:	f003 0301 	and.w	r3, r3, #1
 801a7be:	42a3      	cmp	r3, r4
 801a7c0:	dd0b      	ble.n	801a7da <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 801a7c2:	ab08      	add	r3, sp, #32
 801a7c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a7c8:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801a7cc:	4638      	mov	r0, r7
 801a7ce:	47b0      	blx	r6
            if (err) {
 801a7d0:	4603      	mov	r3, r0
 801a7d2:	2800      	cmp	r0, #0
 801a7d4:	d1c9      	bne.n	801a76a <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 801a7d6:	3401      	adds	r4, #1
 801a7d8:	e7ee      	b.n	801a7b8 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 801a7da:	aa08      	add	r2, sp, #32
 801a7dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a7e0:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 801a7e4:	f1ab 0b02 	sub.w	fp, fp, #2
 801a7e8:	445d      	add	r5, fp
    while (true) {
 801a7ea:	e7cb      	b.n	801a784 <lfs_ctz_traverse+0x2c>
            return err;
 801a7ec:	4603      	mov	r3, r0
 801a7ee:	e7bc      	b.n	801a76a <lfs_ctz_traverse+0x12>

0801a7f0 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 801a7f0:	b530      	push	{r4, r5, lr}
 801a7f2:	b087      	sub	sp, #28
 801a7f4:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 801a7f6:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801a7f8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801a7fc:	6811      	ldr	r1, [r2, #0]
 801a7fe:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 801a800:	2508      	movs	r5, #8
 801a802:	9503      	str	r5, [sp, #12]
 801a804:	ad04      	add	r5, sp, #16
 801a806:	9502      	str	r5, [sp, #8]
 801a808:	9201      	str	r2, [sp, #4]
 801a80a:	9100      	str	r1, [sp, #0]
 801a80c:	4602      	mov	r2, r0
 801a80e:	f100 0110 	add.w	r1, r0, #16
 801a812:	f7ff fdd3 	bl	801a3bc <lfs_bd_read>
    if (err) {
 801a816:	4603      	mov	r3, r0
 801a818:	b978      	cbnz	r0, 801a83a <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801a81a:	9a04      	ldr	r2, [sp, #16]
 801a81c:	6861      	ldr	r1, [r4, #4]
 801a81e:	4291      	cmp	r1, r2
 801a820:	d008      	beq.n	801a834 <lfs_fs_parent_match+0x44>
 801a822:	9d05      	ldr	r5, [sp, #20]
 801a824:	68a0      	ldr	r0, [r4, #8]
 801a826:	4285      	cmp	r5, r0
 801a828:	d004      	beq.n	801a834 <lfs_fs_parent_match+0x44>
 801a82a:	4282      	cmp	r2, r0
 801a82c:	d002      	beq.n	801a834 <lfs_fs_parent_match+0x44>
 801a82e:	42a9      	cmp	r1, r5
 801a830:	d000      	beq.n	801a834 <lfs_fs_parent_match+0x44>
 801a832:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801a834:	3b00      	subs	r3, #0
 801a836:	bf18      	it	ne
 801a838:	2301      	movne	r3, #1
}
 801a83a:	4618      	mov	r0, r3
 801a83c:	b007      	add	sp, #28
 801a83e:	bd30      	pop	{r4, r5, pc}

0801a840 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a844:	b0af      	sub	sp, #188	@ 0xbc
 801a846:	9007      	str	r0, [sp, #28]
 801a848:	460e      	mov	r6, r1
 801a84a:	4617      	mov	r7, r2
 801a84c:	461c      	mov	r4, r3
 801a84e:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 801a852:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 801a856:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 801a85a:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 801a85e:	9304      	str	r3, [sp, #16]
 801a860:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801a864:	9305      	str	r3, [sp, #20]
 801a866:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 801a86a:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 801a86c:	2500      	movs	r5, #0
 801a86e:	950d      	str	r5, [sp, #52]	@ 0x34
 801a870:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 801a872:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a876:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a87a:	bf14      	ite	ne
 801a87c:	46a1      	movne	r9, r4
 801a87e:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 801a882:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a886:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801a88a:	44b9      	add	r9, r7
 801a88c:	68f3      	ldr	r3, [r6, #12]
 801a88e:	4599      	cmp	r9, r3
 801a890:	d35e      	bcc.n	801a950 <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 801a892:	f1bb 0f00 	cmp.w	fp, #0
 801a896:	f340 80fa 	ble.w	801aa8e <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 801a89a:	f8d8 3000 	ldr.w	r3, [r8]
 801a89e:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 801a8a0:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 801a8a4:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 801a8a8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801a8ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a8ae:	4ba9      	ldr	r3, [pc, #676]	@ (801ab54 <lfs_dir_traverse+0x314>)
 801a8b0:	ea0a 0303 	and.w	r3, sl, r3
 801a8b4:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801a8b6:	404a      	eors	r2, r1
 801a8b8:	401a      	ands	r2, r3
 801a8ba:	d1da      	bne.n	801a872 <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 801a8bc:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	f000 8116 	beq.w	801aaf2 <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801a8c6:	2d02      	cmp	r5, #2
 801a8c8:	d862      	bhi.n	801a990 <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 801a8ca:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801a8ce:	a82e      	add	r0, sp, #184	@ 0xb8
 801a8d0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801a8d4:	f843 6c78 	str.w	r6, [r3, #-120]
 801a8d8:	f843 7c74 	str.w	r7, [r3, #-116]
 801a8dc:	f843 4c70 	str.w	r4, [r3, #-112]
 801a8e0:	f843 8c6c 	str.w	r8, [r3, #-108]
 801a8e4:	f843 bc68 	str.w	fp, [r3, #-104]
 801a8e8:	f843 ac64 	str.w	sl, [r3, #-100]
 801a8ec:	983b      	ldr	r0, [sp, #236]	@ 0xec
 801a8ee:	f843 0c60 	str.w	r0, [r3, #-96]
 801a8f2:	9804      	ldr	r0, [sp, #16]
 801a8f4:	f823 0c5c 	strh.w	r0, [r3, #-92]
 801a8f8:	9805      	ldr	r0, [sp, #20]
 801a8fa:	f823 0c5a 	strh.w	r0, [r3, #-90]
 801a8fe:	9806      	ldr	r0, [sp, #24]
 801a900:	f823 0c58 	strh.w	r0, [r3, #-88]
 801a904:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 801a906:	f843 0c54 	str.w	r0, [r3, #-84]
 801a90a:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801a90c:	f843 0c50 	str.w	r0, [r3, #-80]
 801a910:	f843 1c4c 	str.w	r1, [r3, #-76]
 801a914:	f843 9c48 	str.w	r9, [r3, #-72]
 801a918:	3b44      	subs	r3, #68	@ 0x44
 801a91a:	a90d      	add	r1, sp, #52	@ 0x34
 801a91c:	c903      	ldmia	r1, {r0, r1}
 801a91e:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 801a922:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801a926:	009b      	lsls	r3, r3, #2
 801a928:	3328      	adds	r3, #40	@ 0x28
 801a92a:	a910      	add	r1, sp, #64	@ 0x40
 801a92c:	440b      	add	r3, r1
 801a92e:	3304      	adds	r3, #4
 801a930:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 801a932:	3501      	adds	r5, #1
                ttag = 0;
 801a934:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 801a936:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 801a938:	4b87      	ldr	r3, [pc, #540]	@ (801ab58 <lfs_dir_traverse+0x318>)
 801a93a:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 801a93c:	2300      	movs	r3, #0
 801a93e:	9306      	str	r3, [sp, #24]
                end = 0;
 801a940:	9305      	str	r3, [sp, #20]
                begin = 0;
 801a942:	9304      	str	r3, [sp, #16]
 801a944:	e795      	b.n	801a872 <lfs_dir_traverse+0x32>
 801a946:	9d08      	ldr	r5, [sp, #32]
 801a948:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801a94a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801a94c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a94e:	e790      	b.n	801a872 <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 801a950:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 801a952:	2304      	movs	r3, #4
 801a954:	9303      	str	r3, [sp, #12]
 801a956:	a90f      	add	r1, sp, #60	@ 0x3c
 801a958:	9102      	str	r1, [sp, #8]
 801a95a:	f8cd 9004 	str.w	r9, [sp, #4]
 801a95e:	9200      	str	r2, [sp, #0]
 801a960:	9a07      	ldr	r2, [sp, #28]
 801a962:	2100      	movs	r1, #0
 801a964:	4610      	mov	r0, r2
 801a966:	f7ff fd29 	bl	801a3bc <lfs_bd_read>
                if (err) {
 801a96a:	4603      	mov	r3, r0
 801a96c:	2800      	cmp	r0, #0
 801a96e:	f040 80ec 	bne.w	801ab4a <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801a972:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 801a974:	ba1b      	rev	r3, r3
 801a976:	4063      	eors	r3, r4
 801a978:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 801a97c:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 801a97e:	6833      	ldr	r3, [r6, #0]
 801a980:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 801a982:	f109 0304 	add.w	r3, r9, #4
 801a986:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 801a988:	464f      	mov	r7, r9
                buffer = &disk;
 801a98a:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 801a98e:	e78d      	b.n	801a8ac <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801a990:	4b72      	ldr	r3, [pc, #456]	@ (801ab5c <lfs_dir_traverse+0x31c>)
 801a992:	4a73      	ldr	r2, [pc, #460]	@ (801ab60 <lfs_dir_traverse+0x320>)
 801a994:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801a998:	4872      	ldr	r0, [pc, #456]	@ (801ab64 <lfs_dir_traverse+0x324>)
 801a99a:	f00e fadf 	bl	8028f5c <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 801a99e:	4b6e      	ldr	r3, [pc, #440]	@ (801ab58 <lfs_dir_traverse+0x318>)
 801a9a0:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801a9a2:	429a      	cmp	r2, r3
 801a9a4:	f43f af65 	beq.w	801a872 <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 801a9a8:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801a9ac:	aa2e      	add	r2, sp, #184	@ 0xb8
 801a9ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a9b2:	223c      	movs	r2, #60	@ 0x3c
 801a9b4:	2100      	movs	r1, #0
 801a9b6:	9309      	str	r3, [sp, #36]	@ 0x24
 801a9b8:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 801a9bc:	f011 f820 	bl	802ba00 <memset>
 801a9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a9c2:	f843 6c78 	str.w	r6, [r3, #-120]
 801a9c6:	f843 7c74 	str.w	r7, [r3, #-116]
 801a9ca:	f843 4c70 	str.w	r4, [r3, #-112]
 801a9ce:	f843 8c6c 	str.w	r8, [r3, #-108]
 801a9d2:	f843 bc68 	str.w	fp, [r3, #-104]
 801a9d6:	f843 ac64 	str.w	sl, [r3, #-100]
 801a9da:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801a9dc:	f843 2c60 	str.w	r2, [r3, #-96]
 801a9e0:	9a04      	ldr	r2, [sp, #16]
 801a9e2:	f823 2c5c 	strh.w	r2, [r3, #-92]
 801a9e6:	9a05      	ldr	r2, [sp, #20]
 801a9e8:	f823 2c5a 	strh.w	r2, [r3, #-90]
 801a9ec:	9906      	ldr	r1, [sp, #24]
 801a9ee:	f823 1c58 	strh.w	r1, [r3, #-88]
 801a9f2:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801a9f4:	f843 2c54 	str.w	r2, [r3, #-84]
 801a9f8:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801a9fa:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 801a9fe:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 801aa00:	9b08      	ldr	r3, [sp, #32]
 801aa02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801aa06:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 801aa08:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 801aa0c:	1c50      	adds	r0, r2, #1
 801aa0e:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 801aa10:	1a9b      	subs	r3, r3, r2
 801aa12:	fa11 f383 	uxtah	r3, r1, r3
 801aa16:	b21b      	sxth	r3, r3
 801aa18:	9306      	str	r3, [sp, #24]
            dir = buffer;
 801aa1a:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801aa1c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801aa20:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801aa22:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801ab68 <lfs_dir_traverse+0x328>
            attrcount = 0;
 801aa26:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 801aa2a:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 801aa2c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 801aa30:	465f      	mov	r7, fp
 801aa32:	e71e      	b.n	801a872 <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801aa34:	2300      	movs	r3, #0
 801aa36:	9508      	str	r5, [sp, #32]
 801aa38:	9609      	str	r6, [sp, #36]	@ 0x24
 801aa3a:	970a      	str	r7, [sp, #40]	@ 0x28
 801aa3c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801aa3e:	461c      	mov	r4, r3
 801aa40:	9d06      	ldr	r5, [sp, #24]
 801aa42:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801aa44:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801aa46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801aa48:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801aa4c:	4294      	cmp	r4, r2
 801aa4e:	d219      	bcs.n	801aa84 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801aa50:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801aa54:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801aa58:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801aa5c:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801aa60:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801aa64:	442b      	add	r3, r5
 801aa66:	029b      	lsls	r3, r3, #10
 801aa68:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801aa6c:	6891      	ldr	r1, [r2, #8]
 801aa6e:	6852      	ldr	r2, [r2, #4]
 801aa70:	4319      	orrs	r1, r3
 801aa72:	4638      	mov	r0, r7
 801aa74:	47b0      	blx	r6
                if (res < 0) {
 801aa76:	2800      	cmp	r0, #0
 801aa78:	db66      	blt.n	801ab48 <lfs_dir_traverse+0x308>
                if (res) {
 801aa7a:	2800      	cmp	r0, #0
 801aa7c:	f47f af63 	bne.w	801a946 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801aa80:	3401      	adds	r4, #1
 801aa82:	e7e0      	b.n	801aa46 <lfs_dir_traverse+0x206>
 801aa84:	9d08      	ldr	r5, [sp, #32]
 801aa86:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801aa88:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801aa8a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801aa8c:	e6f1      	b.n	801a872 <lfs_dir_traverse+0x32>
                res = 0;
 801aa8e:	2300      	movs	r3, #0
    if (sp > 0) {
 801aa90:	2d00      	cmp	r5, #0
 801aa92:	d05a      	beq.n	801ab4a <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801aa94:	3d01      	subs	r5, #1
 801aa96:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801aa9a:	aa2e      	add	r2, sp, #184	@ 0xb8
 801aa9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aaa0:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801aaa4:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801aaa8:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801aaac:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801aab0:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801aab4:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801aab8:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801aabc:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801aabe:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801aac2:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801aac4:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801aac8:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801aaca:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801aace:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801aad0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801aad4:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801aad6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801aada:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801aadc:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801aae0:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801aae2:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801aae6:	aa0d      	add	r2, sp, #52	@ 0x34
 801aae8:	3b44      	subs	r3, #68	@ 0x44
 801aaea:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aaee:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801aaf2:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801aaf6:	b153      	cbz	r3, 801ab0e <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801aaf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aafa:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801aafe:	9a04      	ldr	r2, [sp, #16]
 801ab00:	429a      	cmp	r2, r3
 801ab02:	f63f aeb6 	bhi.w	801a872 <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801ab06:	9a05      	ldr	r2, [sp, #20]
 801ab08:	429a      	cmp	r2, r3
 801ab0a:	f67f aeb2 	bls.w	801a872 <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801ab0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ab10:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801ab12:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	f43f aeab 	beq.w	801a872 <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801ab1c:	f240 1201 	movw	r2, #257	@ 0x101
 801ab20:	4293      	cmp	r3, r2
 801ab22:	f43f af3c 	beq.w	801a99e <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801ab26:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801ab2a:	d083      	beq.n	801aa34 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801ab2c:	464a      	mov	r2, r9
 801ab2e:	9b08      	ldr	r3, [sp, #32]
 801ab30:	9906      	ldr	r1, [sp, #24]
 801ab32:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801ab36:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801ab38:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801ab3a:	4798      	blx	r3
            if (res < 0) {
 801ab3c:	1e03      	subs	r3, r0, #0
 801ab3e:	db04      	blt.n	801ab4a <lfs_dir_traverse+0x30a>
            if (res) {
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	f43f ae96 	beq.w	801a872 <lfs_dir_traverse+0x32>
 801ab46:	e7a3      	b.n	801aa90 <lfs_dir_traverse+0x250>
 801ab48:	4603      	mov	r3, r0
}
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	b02f      	add	sp, #188	@ 0xbc
 801ab4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab52:	bf00      	nop
 801ab54:	7ff00000 	.word	0x7ff00000
 801ab58:	0801a175 	.word	0x0801a175
 801ab5c:	08037c88 	.word	0x08037c88
 801ab60:	08038898 	.word	0x08038898
 801ab64:	08037bac 	.word	0x08037bac
 801ab68:	600ffc00 	.word	0x600ffc00

0801ab6c <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab70:	b087      	sub	sp, #28
 801ab72:	4606      	mov	r6, r0
 801ab74:	468a      	mov	sl, r1
 801ab76:	4617      	mov	r7, r2
 801ab78:	461c      	mov	r4, r3
 801ab7a:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801ab7e:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801ab82:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ab84:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801ab88:	eb05 0208 	add.w	r2, r5, r8
 801ab8c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801ab8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab90:	429a      	cmp	r2, r3
 801ab92:	d94d      	bls.n	801ac30 <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801ab94:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801ab98:	e076      	b.n	801ac88 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	68ba      	ldr	r2, [r7, #8]
 801ab9e:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801aba0:	42a9      	cmp	r1, r5
 801aba2:	d91c      	bls.n	801abde <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801aba4:	42ab      	cmp	r3, r5
 801aba6:	d904      	bls.n	801abb2 <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801aba8:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801abaa:	4543      	cmp	r3, r8
 801abac:	bf28      	it	cs
 801abae:	4643      	movcs	r3, r8
 801abb0:	e048      	b.n	801ac44 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801abb2:	1b59      	subs	r1, r3, r5
 801abb4:	440a      	add	r2, r1
 801abb6:	4542      	cmp	r2, r8
 801abb8:	bf28      	it	cs
 801abba:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801abbc:	68f9      	ldr	r1, [r7, #12]
 801abbe:	1aeb      	subs	r3, r5, r3
 801abc0:	9205      	str	r2, [sp, #20]
 801abc2:	4419      	add	r1, r3
 801abc4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801abc6:	f012 f957 	bl	802ce78 <memcpy>
                data += diff;
 801abca:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801abcc:	9b05      	ldr	r3, [sp, #20]
 801abce:	4419      	add	r1, r3
 801abd0:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801abd2:	441d      	add	r5, r3
                size -= diff;
 801abd4:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801abd8:	e02a      	b.n	801ac30 <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801abda:	4643      	mov	r3, r8
 801abdc:	e032      	b.n	801ac44 <lfs_dir_getread+0xd8>
 801abde:	4643      	mov	r3, r8
 801abe0:	e030      	b.n	801ac44 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801abe2:	f06f 0301 	mvn.w	r3, #1
 801abe6:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801abe8:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801abea:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801abec:	fbb5 f2f3 	udiv	r2, r5, r3
 801abf0:	fb03 5212 	mls	r2, r3, r2, r5
 801abf4:	1aaa      	subs	r2, r5, r2
 801abf6:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801abf8:	eb05 030b 	add.w	r3, r5, fp
 801abfc:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801abfe:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801ac00:	4403      	add	r3, r0
 801ac02:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801ac04:	fbb3 fcf0 	udiv	ip, r3, r0
 801ac08:	fb00 301c 	mls	r0, r0, ip, r3
 801ac0c:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801ac0e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801ac10:	428b      	cmp	r3, r1
 801ac12:	bf28      	it	cs
 801ac14:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801ac16:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801ac18:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801ac1a:	9302      	str	r3, [sp, #8]
 801ac1c:	9101      	str	r1, [sp, #4]
 801ac1e:	9200      	str	r2, [sp, #0]
 801ac20:	464b      	mov	r3, r9
 801ac22:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ac24:	4651      	mov	r1, sl
 801ac26:	4630      	mov	r0, r6
 801ac28:	f7ff fcb8 	bl	801a59c <lfs_dir_getslice>
        if (err < 0) {
 801ac2c:	2800      	cmp	r0, #0
 801ac2e:	db2b      	blt.n	801ac88 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801ac30:	f1b8 0f00 	cmp.w	r8, #0
 801ac34:	d027      	beq.n	801ac86 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801ac36:	2f00      	cmp	r7, #0
 801ac38:	d0cf      	beq.n	801abda <lfs_dir_getread+0x6e>
 801ac3a:	683b      	ldr	r3, [r7, #0]
 801ac3c:	f113 0f02 	cmn.w	r3, #2
 801ac40:	d0ab      	beq.n	801ab9a <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801ac42:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801ac44:	6822      	ldr	r2, [r4, #0]
 801ac46:	f112 0f02 	cmn.w	r2, #2
 801ac4a:	d1ca      	bne.n	801abe2 <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801ac4c:	6862      	ldr	r2, [r4, #4]
 801ac4e:	68a1      	ldr	r1, [r4, #8]
 801ac50:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801ac52:	42a8      	cmp	r0, r5
 801ac54:	d9c5      	bls.n	801abe2 <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801ac56:	42aa      	cmp	r2, r5
 801ac58:	d8c3      	bhi.n	801abe2 <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801ac5a:	1b50      	subs	r0, r2, r5
 801ac5c:	4401      	add	r1, r0
 801ac5e:	4608      	mov	r0, r1
 801ac60:	4299      	cmp	r1, r3
 801ac62:	bf28      	it	cs
 801ac64:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801ac66:	68e3      	ldr	r3, [r4, #12]
 801ac68:	1aa9      	subs	r1, r5, r2
 801ac6a:	9005      	str	r0, [sp, #20]
 801ac6c:	4602      	mov	r2, r0
 801ac6e:	4419      	add	r1, r3
 801ac70:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801ac72:	f012 f901 	bl	802ce78 <memcpy>
                data += diff;
 801ac76:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801ac78:	9b05      	ldr	r3, [sp, #20]
 801ac7a:	4419      	add	r1, r3
 801ac7c:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801ac7e:	441d      	add	r5, r3
                size -= diff;
 801ac80:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801ac84:	e7d4      	b.n	801ac30 <lfs_dir_getread+0xc4>
    return 0;
 801ac86:	2000      	movs	r0, #0
}
 801ac88:	b007      	add	sp, #28
 801ac8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac8e <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801ac8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac92:	b089      	sub	sp, #36	@ 0x24
 801ac94:	4682      	mov	sl, r0
 801ac96:	4689      	mov	r9, r1
 801ac98:	9205      	str	r2, [sp, #20]
 801ac9a:	461f      	mov	r7, r3
 801ac9c:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801aca0:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801aca4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801aca6:	2400      	movs	r4, #0
 801aca8:	e002      	b.n	801acb0 <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801acaa:	2301      	movs	r3, #1
 801acac:	e023      	b.n	801acf6 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801acae:	442c      	add	r4, r5
 801acb0:	42b4      	cmp	r4, r6
 801acb2:	d21f      	bcs.n	801acf4 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801acb4:	1b35      	subs	r5, r6, r4
 801acb6:	2d08      	cmp	r5, #8
 801acb8:	bf28      	it	cs
 801acba:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801acbc:	9503      	str	r5, [sp, #12]
 801acbe:	ab06      	add	r3, sp, #24
 801acc0:	9302      	str	r3, [sp, #8]
 801acc2:	eb04 0308 	add.w	r3, r4, r8
 801acc6:	9301      	str	r3, [sp, #4]
 801acc8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801acca:	9300      	str	r3, [sp, #0]
 801accc:	1b3b      	subs	r3, r7, r4
 801acce:	9a05      	ldr	r2, [sp, #20]
 801acd0:	4649      	mov	r1, r9
 801acd2:	4650      	mov	r0, sl
 801acd4:	f7ff fb72 	bl	801a3bc <lfs_bd_read>
        if (err) {
 801acd8:	4603      	mov	r3, r0
 801acda:	b960      	cbnz	r0, 801acf6 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801acdc:	462a      	mov	r2, r5
 801acde:	eb0b 0104 	add.w	r1, fp, r4
 801ace2:	a806      	add	r0, sp, #24
 801ace4:	f010 fdf8 	bl	802b8d8 <memcmp>
        if (res) {
 801ace8:	2800      	cmp	r0, #0
 801acea:	d0e0      	beq.n	801acae <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801acec:	2800      	cmp	r0, #0
 801acee:	dbdc      	blt.n	801acaa <lfs_bd_cmp+0x1c>
 801acf0:	2302      	movs	r3, #2
 801acf2:	e000      	b.n	801acf6 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801acf4:	2300      	movs	r3, #0
}
 801acf6:	4618      	mov	r0, r3
 801acf8:	b009      	add	sp, #36	@ 0x24
 801acfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ad00 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801ad00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad04:	b085      	sub	sp, #20
 801ad06:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801ad08:	6809      	ldr	r1, [r1, #0]
 801ad0a:	f111 0f03 	cmn.w	r1, #3
 801ad0e:	d83f      	bhi.n	801ad90 <lfs_bd_flush+0x90>
 801ad10:	4607      	mov	r7, r0
 801ad12:	4691      	mov	r9, r2
 801ad14:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801ad16:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801ad18:	4299      	cmp	r1, r3
 801ad1a:	d22d      	bcs.n	801ad78 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801ad1c:	68a5      	ldr	r5, [r4, #8]
 801ad1e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ad20:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801ad22:	4415      	add	r5, r2
 801ad24:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801ad26:	fbb5 f3f2 	udiv	r3, r5, r2
 801ad2a:	fb02 5313 	mls	r3, r2, r3, r5
 801ad2e:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801ad30:	6885      	ldr	r5, [r0, #8]
 801ad32:	9600      	str	r6, [sp, #0]
 801ad34:	68e3      	ldr	r3, [r4, #12]
 801ad36:	6862      	ldr	r2, [r4, #4]
 801ad38:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801ad3a:	1e05      	subs	r5, r0, #0
 801ad3c:	dc22      	bgt.n	801ad84 <lfs_bd_flush+0x84>
        if (err) {
 801ad3e:	bb45      	cbnz	r5, 801ad92 <lfs_bd_flush+0x92>
        if (validate) {
 801ad40:	f1b8 0f00 	cmp.w	r8, #0
 801ad44:	d013      	beq.n	801ad6e <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801ad46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ad4a:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801ad4e:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801ad50:	9603      	str	r6, [sp, #12]
 801ad52:	9302      	str	r3, [sp, #8]
 801ad54:	6863      	ldr	r3, [r4, #4]
 801ad56:	9301      	str	r3, [sp, #4]
 801ad58:	6823      	ldr	r3, [r4, #0]
 801ad5a:	9300      	str	r3, [sp, #0]
 801ad5c:	4633      	mov	r3, r6
 801ad5e:	464a      	mov	r2, r9
 801ad60:	2100      	movs	r1, #0
 801ad62:	4638      	mov	r0, r7
 801ad64:	f7ff ff93 	bl	801ac8e <lfs_bd_cmp>
            if (res < 0) {
 801ad68:	2800      	cmp	r0, #0
 801ad6a:	db16      	blt.n	801ad9a <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801ad6c:	b9b8      	cbnz	r0, 801ad9e <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801ad6e:	4621      	mov	r1, r4
 801ad70:	4638      	mov	r0, r7
 801ad72:	f7ff faf9 	bl	801a368 <lfs_cache_zero>
 801ad76:	e00c      	b.n	801ad92 <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801ad78:	4b0a      	ldr	r3, [pc, #40]	@ (801ada4 <lfs_bd_flush+0xa4>)
 801ad7a:	4a0b      	ldr	r2, [pc, #44]	@ (801ada8 <lfs_bd_flush+0xa8>)
 801ad7c:	21b3      	movs	r1, #179	@ 0xb3
 801ad7e:	480b      	ldr	r0, [pc, #44]	@ (801adac <lfs_bd_flush+0xac>)
 801ad80:	f00e f8ec 	bl	8028f5c <__assert_func>
        LFS_ASSERT(err <= 0);
 801ad84:	4b0a      	ldr	r3, [pc, #40]	@ (801adb0 <lfs_bd_flush+0xb0>)
 801ad86:	4a08      	ldr	r2, [pc, #32]	@ (801ada8 <lfs_bd_flush+0xa8>)
 801ad88:	21b7      	movs	r1, #183	@ 0xb7
 801ad8a:	4808      	ldr	r0, [pc, #32]	@ (801adac <lfs_bd_flush+0xac>)
 801ad8c:	f00e f8e6 	bl	8028f5c <__assert_func>
    return 0;
 801ad90:	2500      	movs	r5, #0
}
 801ad92:	4628      	mov	r0, r5
 801ad94:	b005      	add	sp, #20
 801ad96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801ad9a:	4605      	mov	r5, r0
 801ad9c:	e7f9      	b.n	801ad92 <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801ad9e:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801ada2:	e7f6      	b.n	801ad92 <lfs_bd_flush+0x92>
 801ada4:	08037c90 	.word	0x08037c90
 801ada8:	080388dc 	.word	0x080388dc
 801adac:	08037bac 	.word	0x08037bac
 801adb0:	08037bdc 	.word	0x08037bdc

0801adb4 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adb8:	b083      	sub	sp, #12
 801adba:	4607      	mov	r7, r0
 801adbc:	460c      	mov	r4, r1
 801adbe:	9201      	str	r2, [sp, #4]
 801adc0:	469b      	mov	fp, r3
 801adc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801adc4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801adc6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801adca:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801adce:	f116 0f02 	cmn.w	r6, #2
 801add2:	d002      	beq.n	801adda <lfs_bd_prog+0x26>
 801add4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801add6:	42b3      	cmp	r3, r6
 801add8:	d90b      	bls.n	801adf2 <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801adda:	eb05 0308 	add.w	r3, r5, r8
 801adde:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801ade0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801ade2:	4293      	cmp	r3, r2
 801ade4:	d919      	bls.n	801ae1a <lfs_bd_prog+0x66>
 801ade6:	4b2b      	ldr	r3, [pc, #172]	@ (801ae94 <lfs_bd_prog+0xe0>)
 801ade8:	4a2b      	ldr	r2, [pc, #172]	@ (801ae98 <lfs_bd_prog+0xe4>)
 801adea:	21e9      	movs	r1, #233	@ 0xe9
 801adec:	482b      	ldr	r0, [pc, #172]	@ (801ae9c <lfs_bd_prog+0xe8>)
 801adee:	f00e f8b5 	bl	8028f5c <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801adf2:	4b2b      	ldr	r3, [pc, #172]	@ (801aea0 <lfs_bd_prog+0xec>)
 801adf4:	4a28      	ldr	r2, [pc, #160]	@ (801ae98 <lfs_bd_prog+0xe4>)
 801adf6:	21e8      	movs	r1, #232	@ 0xe8
 801adf8:	4828      	ldr	r0, [pc, #160]	@ (801ae9c <lfs_bd_prog+0xe8>)
 801adfa:	f00e f8af 	bl	8028f5c <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801adfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ae02:	d13c      	bne.n	801ae7e <lfs_bd_prog+0xca>
        pcache->block = block;
 801ae04:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801ae06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ae08:	6a1a      	ldr	r2, [r3, #32]
 801ae0a:	fbb5 f3f2 	udiv	r3, r5, r2
 801ae0e:	fb02 5313 	mls	r3, r2, r3, r5
 801ae12:	1aeb      	subs	r3, r5, r3
 801ae14:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801ae16:	2300      	movs	r3, #0
 801ae18:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801ae1a:	f1b8 0f00 	cmp.w	r8, #0
 801ae1e:	d035      	beq.n	801ae8c <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801ae20:	6823      	ldr	r3, [r4, #0]
 801ae22:	42b3      	cmp	r3, r6
 801ae24:	d1eb      	bne.n	801adfe <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801ae26:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801ae28:	42aa      	cmp	r2, r5
 801ae2a:	d8e8      	bhi.n	801adfe <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801ae2c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801ae2e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801ae30:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801ae32:	42a8      	cmp	r0, r5
 801ae34:	d9e3      	bls.n	801adfe <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801ae36:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801ae38:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801ae3c:	45c1      	cmp	r9, r8
 801ae3e:	bf28      	it	cs
 801ae40:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801ae42:	68e3      	ldr	r3, [r4, #12]
 801ae44:	1aa8      	subs	r0, r5, r2
 801ae46:	464a      	mov	r2, r9
 801ae48:	4651      	mov	r1, sl
 801ae4a:	4418      	add	r0, r3
 801ae4c:	f012 f814 	bl	802ce78 <memcpy>
            data += diff;
 801ae50:	44ca      	add	sl, r9
            off += diff;
 801ae52:	444d      	add	r5, r9
            size -= diff;
 801ae54:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801ae58:	68a2      	ldr	r2, [r4, #8]
 801ae5a:	6863      	ldr	r3, [r4, #4]
 801ae5c:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801ae5e:	4293      	cmp	r3, r2
 801ae60:	bf38      	it	cc
 801ae62:	4613      	movcc	r3, r2
 801ae64:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801ae66:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801ae68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801ae6a:	429a      	cmp	r2, r3
 801ae6c:	d1d5      	bne.n	801ae1a <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801ae6e:	465b      	mov	r3, fp
 801ae70:	9a01      	ldr	r2, [sp, #4]
 801ae72:	4621      	mov	r1, r4
 801ae74:	4638      	mov	r0, r7
 801ae76:	f7ff ff43 	bl	801ad00 <lfs_bd_flush>
                if (err) {
 801ae7a:	b940      	cbnz	r0, 801ae8e <lfs_bd_prog+0xda>
 801ae7c:	e7cd      	b.n	801ae1a <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801ae7e:	4b09      	ldr	r3, [pc, #36]	@ (801aea4 <lfs_bd_prog+0xf0>)
 801ae80:	4a05      	ldr	r2, [pc, #20]	@ (801ae98 <lfs_bd_prog+0xe4>)
 801ae82:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801ae86:	4805      	ldr	r0, [pc, #20]	@ (801ae9c <lfs_bd_prog+0xe8>)
 801ae88:	f00e f868 	bl	8028f5c <__assert_func>
    return 0;
 801ae8c:	2000      	movs	r0, #0
}
 801ae8e:	b003      	add	sp, #12
 801ae90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae94:	08037cec 	.word	0x08037cec
 801ae98:	080388ec 	.word	0x080388ec
 801ae9c:	08037bac 	.word	0x08037bac
 801aea0:	08037cb4 	.word	0x08037cb4
 801aea4:	08037d10 	.word	0x08037d10

0801aea8 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801aea8:	b538      	push	{r3, r4, r5, lr}
 801aeaa:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801aeac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801aeb0:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801aeb2:	f7ff ff25 	bl	801ad00 <lfs_bd_flush>
    if (err) {
 801aeb6:	4603      	mov	r3, r0
 801aeb8:	b920      	cbnz	r0, 801aec4 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801aeba:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801aebc:	6903      	ldr	r3, [r0, #16]
 801aebe:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801aec0:	1e03      	subs	r3, r0, #0
 801aec2:	dc01      	bgt.n	801aec8 <lfs_bd_sync+0x20>
}
 801aec4:	4618      	mov	r0, r3
 801aec6:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801aec8:	4b02      	ldr	r3, [pc, #8]	@ (801aed4 <lfs_bd_sync+0x2c>)
 801aeca:	4a03      	ldr	r2, [pc, #12]	@ (801aed8 <lfs_bd_sync+0x30>)
 801aecc:	21dd      	movs	r1, #221	@ 0xdd
 801aece:	4803      	ldr	r0, [pc, #12]	@ (801aedc <lfs_bd_sync+0x34>)
 801aed0:	f00e f844 	bl	8028f5c <__assert_func>
 801aed4:	08037bdc 	.word	0x08037bdc
 801aed8:	0803888c 	.word	0x0803888c
 801aedc:	08037bac 	.word	0x08037bac

0801aee0 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801aee0:	b570      	push	{r4, r5, r6, lr}
 801aee2:	b084      	sub	sp, #16
 801aee4:	4604      	mov	r4, r0
 801aee6:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801aee8:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801aeea:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801aeec:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801aef0:	42ab      	cmp	r3, r5
 801aef2:	bf28      	it	cs
 801aef4:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801aef6:	6812      	ldr	r2, [r2, #0]
 801aef8:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801aefc:	9303      	str	r3, [sp, #12]
 801aefe:	6866      	ldr	r6, [r4, #4]
 801af00:	9602      	str	r6, [sp, #8]
 801af02:	9101      	str	r1, [sp, #4]
 801af04:	9200      	str	r2, [sp, #0]
 801af06:	4602      	mov	r2, r0
 801af08:	2100      	movs	r1, #0
 801af0a:	f7ff fec0 	bl	801ac8e <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801af0e:	b920      	cbnz	r0, 801af1a <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801af10:	68a3      	ldr	r3, [r4, #8]
 801af12:	42ab      	cmp	r3, r5
 801af14:	d001      	beq.n	801af1a <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801af16:	d202      	bcs.n	801af1e <lfs_dir_find_match+0x3e>
 801af18:	2001      	movs	r0, #1
}
 801af1a:	b004      	add	sp, #16
 801af1c:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801af1e:	2002      	movs	r0, #2
 801af20:	e7fb      	b.n	801af1a <lfs_dir_find_match+0x3a>

0801af22 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801af22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af26:	b089      	sub	sp, #36	@ 0x24
 801af28:	9305      	str	r3, [sp, #20]
 801af2a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801af2c:	b953      	cbnz	r3, 801af44 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801af2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801af32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801af34:	6013      	str	r3, [r2, #0]
        *off = 0;
 801af36:	2300      	movs	r3, #0
 801af38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801af3a:	6013      	str	r3, [r2, #0]
}
 801af3c:	4618      	mov	r0, r3
 801af3e:	b009      	add	sp, #36	@ 0x24
 801af40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af44:	4607      	mov	r7, r0
 801af46:	4688      	mov	r8, r1
 801af48:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801af4a:	3b01      	subs	r3, #1
 801af4c:	9307      	str	r3, [sp, #28]
 801af4e:	a907      	add	r1, sp, #28
 801af50:	f7ff fa16 	bl	801a380 <lfs_ctz_index>
 801af54:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801af56:	a911      	add	r1, sp, #68	@ 0x44
 801af58:	4638      	mov	r0, r7
 801af5a:	f7ff fa11 	bl	801a380 <lfs_ctz_index>
 801af5e:	4606      	mov	r6, r0
    while (current > target) {
 801af60:	42b5      	cmp	r5, r6
 801af62:	d91f      	bls.n	801afa4 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801af64:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801af66:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801af6a:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801af6e:	fa95 f3a5 	rbit	r3, r5
 801af72:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801af76:	429c      	cmp	r4, r3
 801af78:	bf28      	it	cs
 801af7a:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801af7c:	2304      	movs	r3, #4
 801af7e:	9303      	str	r3, [sp, #12]
 801af80:	aa05      	add	r2, sp, #20
 801af82:	9202      	str	r2, [sp, #8]
 801af84:	00a2      	lsls	r2, r4, #2
 801af86:	9201      	str	r2, [sp, #4]
 801af88:	9a05      	ldr	r2, [sp, #20]
 801af8a:	9200      	str	r2, [sp, #0]
 801af8c:	464a      	mov	r2, r9
 801af8e:	4641      	mov	r1, r8
 801af90:	4638      	mov	r0, r7
 801af92:	f7ff fa13 	bl	801a3bc <lfs_bd_read>
        if (err) {
 801af96:	4603      	mov	r3, r0
 801af98:	2800      	cmp	r0, #0
 801af9a:	d1cf      	bne.n	801af3c <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801af9c:	2301      	movs	r3, #1
 801af9e:	40a3      	lsls	r3, r4
 801afa0:	1aed      	subs	r5, r5, r3
 801afa2:	e7dd      	b.n	801af60 <lfs_ctz_find+0x3e>
    *block = head;
 801afa4:	9b05      	ldr	r3, [sp, #20]
 801afa6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801afa8:	6013      	str	r3, [r2, #0]
    *off = pos;
 801afaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801afac:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801afae:	6013      	str	r3, [r2, #0]
    return 0;
 801afb0:	2300      	movs	r3, #0
 801afb2:	e7c3      	b.n	801af3c <lfs_ctz_find+0x1a>

0801afb4 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801afb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801afb8:	b087      	sub	sp, #28
 801afba:	460c      	mov	r4, r1
 801afbc:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801afbe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801afc0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801afc2:	4291      	cmp	r1, r2
 801afc4:	d272      	bcs.n	801b0ac <lfs_file_flushedread+0xf8>
 801afc6:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801afc8:	eba2 0901 	sub.w	r9, r2, r1
 801afcc:	4599      	cmp	r9, r3
 801afce:	bf28      	it	cs
 801afd0:	4699      	movcs	r9, r3
    nsize = size;
 801afd2:	464e      	mov	r6, r9
    while (nsize > 0) {
 801afd4:	e037      	b.n	801b046 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801afd6:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801afda:	d041      	beq.n	801b060 <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801afdc:	f06f 0301 	mvn.w	r3, #1
 801afe0:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801afe2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801afe4:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801afe6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801afe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801afec:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801afee:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801aff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aff4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801aff6:	1a9d      	subs	r5, r3, r2
 801aff8:	42b5      	cmp	r5, r6
 801affa:	bf28      	it	cs
 801affc:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801affe:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b000:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801b004:	d041      	beq.n	801b08a <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801b006:	88a1      	ldrh	r1, [r4, #4]
 801b008:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801b00a:	9505      	str	r5, [sp, #20]
 801b00c:	9704      	str	r7, [sp, #16]
 801b00e:	9203      	str	r2, [sp, #12]
 801b010:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801b014:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801b018:	9102      	str	r1, [sp, #8]
 801b01a:	4a27      	ldr	r2, [pc, #156]	@ (801b0b8 <lfs_file_flushedread+0x104>)
 801b01c:	9201      	str	r2, [sp, #4]
 801b01e:	9300      	str	r3, [sp, #0]
 801b020:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801b024:	2200      	movs	r2, #0
 801b026:	f104 0108 	add.w	r1, r4, #8
 801b02a:	4640      	mov	r0, r8
 801b02c:	f7ff fd9e 	bl	801ab6c <lfs_dir_getread>
            if (err) {
 801b030:	4603      	mov	r3, r0
 801b032:	2800      	cmp	r0, #0
 801b034:	d13b      	bne.n	801b0ae <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801b036:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b038:	442b      	add	r3, r5
 801b03a:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801b03c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b03e:	442b      	add	r3, r5
 801b040:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801b042:	442f      	add	r7, r5
        nsize -= diff;
 801b044:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801b046:	2e00      	cmp	r6, #0
 801b048:	d02e      	beq.n	801b0a8 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801b04a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b04c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801b050:	d0c1      	beq.n	801afd6 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801b052:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801b054:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801b058:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801b05a:	4291      	cmp	r1, r2
 801b05c:	d1c7      	bne.n	801afee <lfs_file_flushedread+0x3a>
 801b05e:	e7ba      	b.n	801afd6 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801b060:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801b064:	9303      	str	r3, [sp, #12]
 801b066:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801b06a:	9302      	str	r3, [sp, #8]
 801b06c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b06e:	9301      	str	r3, [sp, #4]
 801b070:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801b072:	9300      	str	r3, [sp, #0]
 801b074:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b076:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801b07a:	2100      	movs	r1, #0
 801b07c:	4640      	mov	r0, r8
 801b07e:	f7ff ff50 	bl	801af22 <lfs_ctz_find>
                if (err) {
 801b082:	4603      	mov	r3, r0
 801b084:	2800      	cmp	r0, #0
 801b086:	d0ae      	beq.n	801afe6 <lfs_file_flushedread+0x32>
 801b088:	e011      	b.n	801b0ae <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801b08a:	9503      	str	r5, [sp, #12]
 801b08c:	9702      	str	r7, [sp, #8]
 801b08e:	9201      	str	r2, [sp, #4]
 801b090:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801b092:	9200      	str	r2, [sp, #0]
 801b094:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801b098:	2100      	movs	r1, #0
 801b09a:	4640      	mov	r0, r8
 801b09c:	f7ff f98e 	bl	801a3bc <lfs_bd_read>
            if (err) {
 801b0a0:	4603      	mov	r3, r0
 801b0a2:	2800      	cmp	r0, #0
 801b0a4:	d0c7      	beq.n	801b036 <lfs_file_flushedread+0x82>
 801b0a6:	e002      	b.n	801b0ae <lfs_file_flushedread+0xfa>
    return size;
 801b0a8:	464b      	mov	r3, r9
 801b0aa:	e000      	b.n	801b0ae <lfs_file_flushedread+0xfa>
        return 0;
 801b0ac:	2300      	movs	r3, #0
}
 801b0ae:	4618      	mov	r0, r3
 801b0b0:	b007      	add	sp, #28
 801b0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0b6:	bf00      	nop
 801b0b8:	fff7fc00 	.word	0xfff7fc00

0801b0bc <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801b0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0c0:	b089      	sub	sp, #36	@ 0x24
 801b0c2:	4683      	mov	fp, r0
 801b0c4:	468a      	mov	sl, r1
 801b0c6:	9205      	str	r2, [sp, #20]
 801b0c8:	4698      	mov	r8, r3
 801b0ca:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801b0ce:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b0d0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b0d2:	2400      	movs	r4, #0
 801b0d4:	e006      	b.n	801b0e4 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801b0d6:	462a      	mov	r2, r5
 801b0d8:	a906      	add	r1, sp, #24
 801b0da:	6838      	ldr	r0, [r7, #0]
 801b0dc:	f003 fd82 	bl	801ebe4 <lfs_crc>
 801b0e0:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b0e2:	442c      	add	r4, r5
 801b0e4:	42b4      	cmp	r4, r6
 801b0e6:	d216      	bcs.n	801b116 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801b0e8:	1b35      	subs	r5, r6, r4
 801b0ea:	2d08      	cmp	r5, #8
 801b0ec:	bf28      	it	cs
 801b0ee:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801b0f0:	9503      	str	r5, [sp, #12]
 801b0f2:	ab06      	add	r3, sp, #24
 801b0f4:	9302      	str	r3, [sp, #8]
 801b0f6:	eb04 0309 	add.w	r3, r4, r9
 801b0fa:	9301      	str	r3, [sp, #4]
 801b0fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b0fe:	9300      	str	r3, [sp, #0]
 801b100:	eba8 0304 	sub.w	r3, r8, r4
 801b104:	9a05      	ldr	r2, [sp, #20]
 801b106:	4651      	mov	r1, sl
 801b108:	4658      	mov	r0, fp
 801b10a:	f7ff f957 	bl	801a3bc <lfs_bd_read>
        if (err) {
 801b10e:	4603      	mov	r3, r0
 801b110:	2800      	cmp	r0, #0
 801b112:	d0e0      	beq.n	801b0d6 <lfs_bd_crc+0x1a>
 801b114:	e000      	b.n	801b118 <lfs_bd_crc+0x5c>
    return 0;
 801b116:	2300      	movs	r3, #0
}
 801b118:	4618      	mov	r0, r3
 801b11a:	b009      	add	sp, #36	@ 0x24
 801b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b120 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b124:	b097      	sub	sp, #92	@ 0x5c
 801b126:	4605      	mov	r5, r0
 801b128:	460e      	mov	r6, r1
 801b12a:	4617      	mov	r7, r2
 801b12c:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801b12e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b130:	b13b      	cbz	r3, 801b142 <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801b132:	6812      	ldr	r2, [r2, #0]
 801b134:	4293      	cmp	r3, r2
 801b136:	f240 825a 	bls.w	801b5ee <lfs_dir_fetchmatch+0x4ce>
 801b13a:	687a      	ldr	r2, [r7, #4]
 801b13c:	4293      	cmp	r3, r2
 801b13e:	f240 8259 	bls.w	801b5f4 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801b142:	2400      	movs	r4, #0
 801b144:	9412      	str	r4, [sp, #72]	@ 0x48
 801b146:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801b148:	46a0      	mov	r8, r4
 801b14a:	e010      	b.n	801b16e <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801b14c:	f118 0301 	adds.w	r3, r8, #1
 801b150:	f003 0301 	and.w	r3, r3, #1
 801b154:	bf48      	it	mi
 801b156:	425b      	negmi	r3, r3
 801b158:	a916      	add	r1, sp, #88	@ 0x58
 801b15a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b15e:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801b162:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801b164:	2a00      	cmp	r2, #0
 801b166:	dd00      	ble.n	801b16a <lfs_dir_fetchmatch+0x4a>
            r = i;
 801b168:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801b16a:	f108 0801 	add.w	r8, r8, #1
 801b16e:	f1b8 0f01 	cmp.w	r8, #1
 801b172:	dc1d      	bgt.n	801b1b0 <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801b174:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801b178:	ab12      	add	r3, sp, #72	@ 0x48
 801b17a:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801b17e:	2304      	movs	r3, #4
 801b180:	9303      	str	r3, [sp, #12]
 801b182:	9202      	str	r2, [sp, #8]
 801b184:	2100      	movs	r1, #0
 801b186:	9101      	str	r1, [sp, #4]
 801b188:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801b18c:	9200      	str	r2, [sp, #0]
 801b18e:	462a      	mov	r2, r5
 801b190:	4628      	mov	r0, r5
 801b192:	f7ff f913 	bl	801a3bc <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801b196:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801b19a:	eb0d 0903 	add.w	r9, sp, r3
 801b19e:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801b1a2:	4683      	mov	fp, r0
 801b1a4:	2800      	cmp	r0, #0
 801b1a6:	d0d1      	beq.n	801b14c <lfs_dir_fetchmatch+0x2c>
 801b1a8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b1ac:	d0dd      	beq.n	801b16a <lfs_dir_fetchmatch+0x4a>
 801b1ae:	e21a      	b.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801b1b0:	2c00      	cmp	r4, #0
 801b1b2:	f004 0301 	and.w	r3, r4, #1
 801b1b6:	bfb8      	it	lt
 801b1b8:	425b      	neglt	r3, r3
 801b1ba:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801b1be:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801b1c0:	f114 0c01 	adds.w	ip, r4, #1
 801b1c4:	f00c 0c01 	and.w	ip, ip, #1
 801b1c8:	bf48      	it	mi
 801b1ca:	f1cc 0c00 	rsbmi	ip, ip, #0
 801b1ce:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801b1d2:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801b1d4:	aa16      	add	r2, sp, #88	@ 0x58
 801b1d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b1da:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801b1de:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801b1e0:	2400      	movs	r4, #0
 801b1e2:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801b1e4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801b1e8:	f8cd c01c 	str.w	ip, [sp, #28]
 801b1ec:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801b1ee:	f1b9 0f01 	cmp.w	r9, #1
 801b1f2:	f300 81eb 	bgt.w	801b5cc <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801b1f6:	4a90      	ldr	r2, [pc, #576]	@ (801b438 <lfs_dir_fetchmatch+0x318>)
 801b1f8:	ab0e      	add	r3, sp, #56	@ 0x38
 801b1fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b1fe:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801b202:	2204      	movs	r2, #4
 801b204:	f106 0108 	add.w	r1, r6, #8
 801b208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b20c:	f003 fcea 	bl	801ebe4 <lfs_crc>
 801b210:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801b212:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801b216:	2300      	movs	r3, #0
 801b218:	461c      	mov	r4, r3
 801b21a:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801b21c:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801b21e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801b222:	461f      	mov	r7, r3
 801b224:	e110      	b.n	801b448 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801b226:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b22a:	d101      	bne.n	801b230 <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801b22c:	2300      	movs	r3, #0
 801b22e:	e01e      	b.n	801b26e <lfs_dir_fetchmatch+0x14e>
                return err;
 801b230:	4683      	mov	fp, r0
 801b232:	e1d8      	b.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801b234:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801b238:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801b23c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801b240:	bf14      	ite	ne
 801b242:	2300      	movne	r3, #0
 801b244:	2301      	moveq	r3, #1
                break;
 801b246:	e012      	b.n	801b26e <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801b248:	2204      	movs	r2, #4
 801b24a:	9203      	str	r2, [sp, #12]
 801b24c:	aa0d      	add	r2, sp, #52	@ 0x34
 801b24e:	9202      	str	r2, [sp, #8]
 801b250:	1d22      	adds	r2, r4, #4
 801b252:	9201      	str	r2, [sp, #4]
 801b254:	6832      	ldr	r2, [r6, #0]
 801b256:	9200      	str	r2, [sp, #0]
 801b258:	462a      	mov	r2, r5
 801b25a:	2100      	movs	r1, #0
 801b25c:	4628      	mov	r0, r5
 801b25e:	f7ff f8ad 	bl	801a3bc <lfs_bd_read>
                if (err) {
 801b262:	bb80      	cbnz	r0, 801b2c6 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801b264:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b268:	429a      	cmp	r2, r3
 801b26a:	d031      	beq.n	801b2d0 <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801b26c:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801b26e:	68f2      	ldr	r2, [r6, #12]
 801b270:	2a00      	cmp	r2, #0
 801b272:	f000 8165 	beq.w	801b540 <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801b276:	2100      	movs	r1, #0
 801b278:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801b27a:	b153      	cbz	r3, 801b292 <lfs_dir_fetchmatch+0x172>
 801b27c:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801b27e:	6a01      	ldr	r1, [r0, #32]
 801b280:	fbb2 f3f1 	udiv	r3, r2, r1
 801b284:	fb01 2313 	mls	r3, r1, r3, r2
 801b288:	b91b      	cbnz	r3, 801b292 <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801b28a:	9b08      	ldr	r3, [sp, #32]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	f040 8165 	bne.w	801b55c <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801b292:	4631      	mov	r1, r6
 801b294:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801b298:	f7fe ff00 	bl	801a09c <lfs_gstate_hasmovehere>
 801b29c:	2800      	cmp	r0, #0
 801b29e:	f000 817d 	beq.w	801b59c <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801b2a2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801b2a4:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801b2a8:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801b2ac:	429a      	cmp	r2, r3
 801b2ae:	f000 8173 	beq.w	801b598 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801b2b2:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801b2b6:	f000 8171 	beq.w	801b59c <lfs_dir_fetchmatch+0x47c>
 801b2ba:	429a      	cmp	r2, r3
 801b2bc:	f240 816e 	bls.w	801b59c <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801b2c0:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801b2c4:	e16a      	b.n	801b59c <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801b2c6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b2ca:	d0cf      	beq.n	801b26c <lfs_dir_fetchmatch+0x14c>
                    return err;
 801b2cc:	4683      	mov	fp, r0
 801b2ce:	e18a      	b.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801b2d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b2d2:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801b2d6:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801b2da:	2204      	movs	r2, #4
 801b2dc:	a90b      	add	r1, sp, #44	@ 0x2c
 801b2de:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801b2e0:	f003 fc80 	bl	801ebe4 <lfs_crc>
 801b2e4:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801b2e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b2e8:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b2ec:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b2f0:	bf08      	it	eq
 801b2f2:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801b2f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b2f8:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801b2fa:	4423      	add	r3, r4
 801b2fc:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801b2fe:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801b302:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801b304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b306:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801b308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b30a:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801b30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b30e:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801b310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b314:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801b316:	f8dd b018 	ldr.w	fp, [sp, #24]
 801b31a:	e095      	b.n	801b448 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801b31c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b320:	d101      	bne.n	801b326 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801b322:	2300      	movs	r3, #0
 801b324:	e7a3      	b.n	801b26e <lfs_dir_fetchmatch+0x14e>
                return err;
 801b326:	4683      	mov	fp, r0
 801b328:	e15d      	b.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801b32a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801b32e:	d021      	beq.n	801b374 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801b330:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801b334:	d046      	beq.n	801b3c4 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801b336:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801b33a:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801b33e:	429a      	cmp	r2, r3
 801b340:	f040 80e3 	bne.w	801b50a <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801b344:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801b346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801b348:	2208      	movs	r2, #8
 801b34a:	9203      	str	r2, [sp, #12]
 801b34c:	aa10      	add	r2, sp, #64	@ 0x40
 801b34e:	9202      	str	r2, [sp, #8]
 801b350:	f8cd 8004 	str.w	r8, [sp, #4]
 801b354:	6832      	ldr	r2, [r6, #0]
 801b356:	9200      	str	r2, [sp, #0]
 801b358:	462a      	mov	r2, r5
 801b35a:	2100      	movs	r1, #0
 801b35c:	4628      	mov	r0, r5
 801b35e:	f7ff f82d 	bl	801a3bc <lfs_bd_read>
                if (err) {
 801b362:	2800      	cmp	r0, #0
 801b364:	d04a      	beq.n	801b3fc <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801b366:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b36a:	f000 80e7 	beq.w	801b53c <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801b36e:	2301      	movs	r3, #1
 801b370:	9308      	str	r3, [sp, #32]
 801b372:	e0ca      	b.n	801b50a <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801b374:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801b376:	fa17 f280 	uxtah	r2, r7, r0
 801b37a:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801b37c:	9a06      	ldr	r2, [sp, #24]
 801b37e:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801b380:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801b384:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801b388:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801b38c:	f022 0203 	bic.w	r2, r2, #3
 801b390:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801b394:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801b398:	4293      	cmp	r3, r2
 801b39a:	d00f      	beq.n	801b3bc <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801b39c:	9a06      	ldr	r2, [sp, #24]
 801b39e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b3a2:	f000 80b2 	beq.w	801b50a <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801b3a6:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801b3aa:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801b3ae:	429a      	cmp	r2, r3
 801b3b0:	f0c0 80ab 	bcc.w	801b50a <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801b3b4:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801b3b8:	9306      	str	r3, [sp, #24]
 801b3ba:	e0a6      	b.n	801b50a <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801b3bc:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801b3c0:	9306      	str	r3, [sp, #24]
 801b3c2:	e0a2      	b.n	801b50a <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801b3c4:	f000 0301 	and.w	r3, r0, #1
 801b3c8:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801b3ca:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801b3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801b3ce:	2208      	movs	r2, #8
 801b3d0:	9203      	str	r2, [sp, #12]
 801b3d2:	aa0e      	add	r2, sp, #56	@ 0x38
 801b3d4:	9202      	str	r2, [sp, #8]
 801b3d6:	f8cd 8004 	str.w	r8, [sp, #4]
 801b3da:	6832      	ldr	r2, [r6, #0]
 801b3dc:	9200      	str	r2, [sp, #0]
 801b3de:	462a      	mov	r2, r5
 801b3e0:	2100      	movs	r1, #0
 801b3e2:	4628      	mov	r0, r5
 801b3e4:	f7fe ffea 	bl	801a3bc <lfs_bd_read>
                if (err) {
 801b3e8:	2800      	cmp	r0, #0
 801b3ea:	f000 808e 	beq.w	801b50a <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801b3ee:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b3f2:	d101      	bne.n	801b3f8 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	e73a      	b.n	801b26e <lfs_dir_fetchmatch+0x14e>
                    return err;
 801b3f8:	4683      	mov	fp, r0
 801b3fa:	e0f4      	b.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801b3fc:	2301      	movs	r3, #1
 801b3fe:	9308      	str	r3, [sp, #32]
 801b400:	e083      	b.n	801b50a <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801b402:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b406:	d101      	bne.n	801b40c <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801b408:	2300      	movs	r3, #0
 801b40a:	e730      	b.n	801b26e <lfs_dir_fetchmatch+0x14e>
                    return res;
 801b40c:	4683      	mov	fp, r0
 801b40e:	e0ea      	b.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801b410:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b412:	9b06      	ldr	r3, [sp, #24]
 801b414:	469c      	mov	ip, r3
 801b416:	ea82 0103 	eor.w	r1, r2, r3
 801b41a:	4b08      	ldr	r3, [pc, #32]	@ (801b43c <lfs_dir_fetchmatch+0x31c>)
 801b41c:	400b      	ands	r3, r1
 801b41e:	b17b      	cbz	r3, 801b440 <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801b420:	2802      	cmp	r0, #2
 801b422:	d110      	bne.n	801b446 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801b424:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801b428:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801b42c:	459c      	cmp	ip, r3
 801b42e:	d30a      	bcc.n	801b446 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801b430:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801b434:	9306      	str	r3, [sp, #24]
 801b436:	e006      	b.n	801b446 <lfs_dir_fetchmatch+0x326>
 801b438:	08034d44 	.word	0x08034d44
 801b43c:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801b440:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b444:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801b446:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b448:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b44c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b450:	bf14      	ite	ne
 801b452:	4643      	movne	r3, r8
 801b454:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801b458:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b45c:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801b45e:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801b460:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801b462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801b464:	2204      	movs	r2, #4
 801b466:	9203      	str	r2, [sp, #12]
 801b468:	aa0c      	add	r2, sp, #48	@ 0x30
 801b46a:	9202      	str	r2, [sp, #8]
 801b46c:	9401      	str	r4, [sp, #4]
 801b46e:	6832      	ldr	r2, [r6, #0]
 801b470:	9200      	str	r2, [sp, #0]
 801b472:	462a      	mov	r2, r5
 801b474:	2100      	movs	r1, #0
 801b476:	4628      	mov	r0, r5
 801b478:	f7fe ffa0 	bl	801a3bc <lfs_bd_read>
            if (err) {
 801b47c:	2800      	cmp	r0, #0
 801b47e:	f47f aed2 	bne.w	801b226 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801b482:	2204      	movs	r2, #4
 801b484:	a90c      	add	r1, sp, #48	@ 0x30
 801b486:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801b488:	f003 fbac 	bl	801ebe4 <lfs_crc>
 801b48c:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801b48e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801b490:	ba1b      	rev	r3, r3
 801b492:	ea88 0a03 	eor.w	sl, r8, r3
 801b496:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801b49a:	f1ba 0f00 	cmp.w	sl, #0
 801b49e:	f6ff aec9 	blt.w	801b234 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b4a2:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b4a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b4aa:	bf14      	ite	ne
 801b4ac:	4652      	movne	r2, sl
 801b4ae:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801b4b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b4b6:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801b4b8:	4421      	add	r1, r4
 801b4ba:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801b4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b4be:	4299      	cmp	r1, r3
 801b4c0:	d83a      	bhi.n	801b538 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801b4c2:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801b4c6:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801b4ca:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801b4ce:	f43f aebb 	beq.w	801b248 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801b4d2:	f104 0804 	add.w	r8, r4, #4
 801b4d6:	a90b      	add	r1, sp, #44	@ 0x2c
 801b4d8:	9103      	str	r1, [sp, #12]
 801b4da:	9202      	str	r2, [sp, #8]
 801b4dc:	f8cd 8004 	str.w	r8, [sp, #4]
 801b4e0:	6832      	ldr	r2, [r6, #0]
 801b4e2:	9200      	str	r2, [sp, #0]
 801b4e4:	462a      	mov	r2, r5
 801b4e6:	2100      	movs	r1, #0
 801b4e8:	4628      	mov	r0, r5
 801b4ea:	f7ff fde7 	bl	801b0bc <lfs_bd_crc>
            if (err) {
 801b4ee:	2800      	cmp	r0, #0
 801b4f0:	f47f af14 	bne.w	801b31c <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801b4f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801b4f6:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801b4f8:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801b4fc:	f47f af15 	bne.w	801b32a <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801b500:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801b504:	429f      	cmp	r7, r3
 801b506:	d800      	bhi.n	801b50a <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801b508:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801b50a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b50c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b50e:	404b      	eors	r3, r1
 801b510:	9a05      	ldr	r2, [sp, #20]
 801b512:	4213      	tst	r3, r2
 801b514:	d197      	bne.n	801b446 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801b516:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801b518:	9314      	str	r3, [sp, #80]	@ 0x50
 801b51a:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801b51e:	aa14      	add	r2, sp, #80	@ 0x50
 801b520:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801b522:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b524:	4798      	blx	r3
                if (res < 0) {
 801b526:	2800      	cmp	r0, #0
 801b528:	f6ff af6b 	blt.w	801b402 <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801b52c:	2800      	cmp	r0, #0
 801b52e:	f47f af6f 	bne.w	801b410 <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801b532:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b534:	9306      	str	r3, [sp, #24]
 801b536:	e786      	b.n	801b446 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801b538:	2300      	movs	r3, #0
 801b53a:	e698      	b.n	801b26e <lfs_dir_fetchmatch+0x14e>
 801b53c:	2300      	movs	r3, #0
 801b53e:	e696      	b.n	801b26e <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801b540:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801b542:	6872      	ldr	r2, [r6, #4]
 801b544:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801b546:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801b548:	aa16      	add	r2, sp, #88	@ 0x58
 801b54a:	9b07      	ldr	r3, [sp, #28]
 801b54c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b550:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801b554:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801b556:	f109 0901 	add.w	r9, r9, #1
 801b55a:	e648      	b.n	801b1ee <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801b55c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b560:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801b562:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801b564:	a90d      	add	r1, sp, #52	@ 0x34
 801b566:	9103      	str	r1, [sp, #12]
 801b568:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801b56a:	9102      	str	r1, [sp, #8]
 801b56c:	9201      	str	r2, [sp, #4]
 801b56e:	6832      	ldr	r2, [r6, #0]
 801b570:	9200      	str	r2, [sp, #0]
 801b572:	462a      	mov	r2, r5
 801b574:	2100      	movs	r1, #0
 801b576:	4628      	mov	r0, r5
 801b578:	f7ff fda0 	bl	801b0bc <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801b57c:	b120      	cbz	r0, 801b588 <lfs_dir_fetchmatch+0x468>
 801b57e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b582:	d001      	beq.n	801b588 <lfs_dir_fetchmatch+0x468>
                    return err;
 801b584:	4683      	mov	fp, r0
 801b586:	e02e      	b.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801b588:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b58a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b58c:	4293      	cmp	r3, r2
 801b58e:	bf14      	ite	ne
 801b590:	2300      	movne	r3, #0
 801b592:	2301      	moveq	r3, #1
 801b594:	75b3      	strb	r3, [r6, #22]
 801b596:	e67c      	b.n	801b292 <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801b598:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801b59c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b59e:	b13b      	cbz	r3, 801b5b0 <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801b5a0:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801b5a4:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801b5a6:	4293      	cmp	r3, r2
 801b5a8:	bf28      	it	cs
 801b5aa:	4613      	movcs	r3, r2
 801b5ac:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b5ae:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801b5b0:	f1bb 0f00 	cmp.w	fp, #0
 801b5b4:	da17      	bge.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801b5b6:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801b5ba:	8ab2      	ldrh	r2, [r6, #20]
 801b5bc:	429a      	cmp	r2, r3
 801b5be:	d902      	bls.n	801b5c6 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801b5c0:	f06f 0b01 	mvn.w	fp, #1
 801b5c4:	e00f      	b.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801b5c6:	f04f 0b00 	mov.w	fp, #0
 801b5ca:	e00c      	b.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801b5cc:	4b0b      	ldr	r3, [pc, #44]	@ (801b5fc <lfs_dir_fetchmatch+0x4dc>)
 801b5ce:	9301      	str	r3, [sp, #4]
 801b5d0:	6873      	ldr	r3, [r6, #4]
 801b5d2:	9300      	str	r3, [sp, #0]
 801b5d4:	6833      	ldr	r3, [r6, #0]
 801b5d6:	f240 5259 	movw	r2, #1369	@ 0x559
 801b5da:	4909      	ldr	r1, [pc, #36]	@ (801b600 <lfs_dir_fetchmatch+0x4e0>)
 801b5dc:	4809      	ldr	r0, [pc, #36]	@ (801b604 <lfs_dir_fetchmatch+0x4e4>)
 801b5de:	f00d fcf1 	bl	8028fc4 <printf>
    return LFS_ERR_CORRUPT;
 801b5e2:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801b5e6:	4658      	mov	r0, fp
 801b5e8:	b017      	add	sp, #92	@ 0x5c
 801b5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801b5ee:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801b5f2:	e7f8      	b.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
 801b5f4:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801b5f8:	e7f5      	b.n	801b5e6 <lfs_dir_fetchmatch+0x4c6>
 801b5fa:	bf00      	nop
 801b5fc:	08035a68 	.word	0x08035a68
 801b600:	08037bac 	.word	0x08037bac
 801b604:	08037d34 	.word	0x08037d34

0801b608 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801b608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b60c:	b08a      	sub	sp, #40	@ 0x28
 801b60e:	4681      	mov	r9, r0
 801b610:	4688      	mov	r8, r1
 801b612:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801b614:	2300      	movs	r3, #0
 801b616:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801b618:	2501      	movs	r5, #1
 801b61a:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801b61c:	4a29      	ldr	r2, [pc, #164]	@ (801b6c4 <lfs_fs_parent+0xbc>)
 801b61e:	ab05      	add	r3, sp, #20
 801b620:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b624:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801b628:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801b62a:	e03a      	b.n	801b6a2 <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801b62c:	4b26      	ldr	r3, [pc, #152]	@ (801b6c8 <lfs_fs_parent+0xc0>)
 801b62e:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801b632:	4926      	ldr	r1, [pc, #152]	@ (801b6cc <lfs_fs_parent+0xc4>)
 801b634:	4826      	ldr	r0, [pc, #152]	@ (801b6d0 <lfs_fs_parent+0xc8>)
 801b636:	f00d fcc5 	bl	8028fc4 <printf>
            return LFS_ERR_CORRUPT;
 801b63a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801b63e:	e03c      	b.n	801b6ba <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801b640:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801b642:	69e3      	ldr	r3, [r4, #28]
 801b644:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801b646:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801b64a:	2500      	movs	r5, #0
 801b64c:	e00d      	b.n	801b66a <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801b64e:	2301      	movs	r3, #1
 801b650:	e000      	b.n	801b654 <lfs_fs_parent+0x4c>
 801b652:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801b654:	bb7b      	cbnz	r3, 801b6b6 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801b656:	f104 0618 	add.w	r6, r4, #24
 801b65a:	a905      	add	r1, sp, #20
 801b65c:	4630      	mov	r0, r6
 801b65e:	f7fe fce7 	bl	801a030 <lfs_pair_issync>
 801b662:	2800      	cmp	r0, #0
 801b664:	d1e2      	bne.n	801b62c <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801b666:	4555      	cmp	r5, sl
 801b668:	d0ea      	beq.n	801b640 <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801b66a:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801b66c:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801b670:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801b674:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801b676:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801b67a:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801b67c:	ab07      	add	r3, sp, #28
 801b67e:	9303      	str	r3, [sp, #12]
 801b680:	4b14      	ldr	r3, [pc, #80]	@ (801b6d4 <lfs_fs_parent+0xcc>)
 801b682:	9302      	str	r3, [sp, #8]
 801b684:	2300      	movs	r3, #0
 801b686:	9301      	str	r3, [sp, #4]
 801b688:	4b13      	ldr	r3, [pc, #76]	@ (801b6d8 <lfs_fs_parent+0xd0>)
 801b68a:	9300      	str	r3, [sp, #0]
 801b68c:	4b13      	ldr	r3, [pc, #76]	@ (801b6dc <lfs_fs_parent+0xd4>)
 801b68e:	4632      	mov	r2, r6
 801b690:	4621      	mov	r1, r4
 801b692:	4648      	mov	r0, r9
 801b694:	f7ff fd44 	bl	801b120 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801b698:	4603      	mov	r3, r0
 801b69a:	b110      	cbz	r0, 801b6a2 <lfs_fs_parent+0x9a>
 801b69c:	f110 0f02 	cmn.w	r0, #2
 801b6a0:	d10b      	bne.n	801b6ba <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801b6a2:	69a7      	ldr	r7, [r4, #24]
 801b6a4:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801b6a8:	d0d3      	beq.n	801b652 <lfs_fs_parent+0x4a>
 801b6aa:	69e3      	ldr	r3, [r4, #28]
 801b6ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b6b0:	d0cd      	beq.n	801b64e <lfs_fs_parent+0x46>
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	e7ce      	b.n	801b654 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801b6b6:	f06f 0301 	mvn.w	r3, #1
}
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	b00a      	add	sp, #40	@ 0x28
 801b6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b6c2:	bf00      	nop
 801b6c4:	08034d44 	.word	0x08034d44
 801b6c8:	08035a68 	.word	0x08035a68
 801b6cc:	08037bac 	.word	0x08037bac
 801b6d0:	08037d6c 	.word	0x08037d6c
 801b6d4:	0801a7f1 	.word	0x0801a7f1
 801b6d8:	20000008 	.word	0x20000008
 801b6dc:	7ff003ff 	.word	0x7ff003ff

0801b6e0 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801b6e0:	b500      	push	{lr}
 801b6e2:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801b6e4:	2300      	movs	r3, #0
 801b6e6:	9303      	str	r3, [sp, #12]
 801b6e8:	9302      	str	r3, [sp, #8]
 801b6ea:	9301      	str	r3, [sp, #4]
 801b6ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b6f0:	9300      	str	r3, [sp, #0]
 801b6f2:	f7ff fd15 	bl	801b120 <lfs_dir_fetchmatch>
}
 801b6f6:	b005      	add	sp, #20
 801b6f8:	f85d fb04 	ldr.w	pc, [sp], #4

0801b6fc <lfs_fs_traverse_>:
        bool includeorphans) {
 801b6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b700:	b093      	sub	sp, #76	@ 0x4c
 801b702:	4606      	mov	r6, r0
 801b704:	460f      	mov	r7, r1
 801b706:	4690      	mov	r8, r2
 801b708:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801b70a:	2220      	movs	r2, #32
 801b70c:	2100      	movs	r1, #0
 801b70e:	a80a      	add	r0, sp, #40	@ 0x28
 801b710:	f010 f976 	bl	802ba00 <memset>
 801b714:	2501      	movs	r5, #1
 801b716:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801b718:	4a62      	ldr	r2, [pc, #392]	@ (801b8a4 <lfs_fs_traverse_+0x1a8>)
 801b71a:	ab08      	add	r3, sp, #32
 801b71c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b720:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801b724:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801b726:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b728:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801b72c:	f000 8081 	beq.w	801b832 <lfs_fs_traverse_+0x136>
 801b730:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b736:	d07a      	beq.n	801b82e <lfs_fs_traverse_+0x132>
 801b738:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d17b      	bne.n	801b836 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801b73e:	a908      	add	r1, sp, #32
 801b740:	a810      	add	r0, sp, #64	@ 0x40
 801b742:	f7fe fc75 	bl	801a030 <lfs_pair_issync>
 801b746:	b988      	cbnz	r0, 801b76c <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801b748:	4555      	cmp	r5, sl
 801b74a:	d019      	beq.n	801b780 <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801b74c:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801b74e:	2400      	movs	r4, #0
 801b750:	2c01      	cmp	r4, #1
 801b752:	dc1c      	bgt.n	801b78e <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801b754:	1da3      	adds	r3, r4, #6
 801b756:	aa12      	add	r2, sp, #72	@ 0x48
 801b758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b75c:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801b760:	4640      	mov	r0, r8
 801b762:	47b8      	blx	r7
            if (err) {
 801b764:	4603      	mov	r3, r0
 801b766:	b9f8      	cbnz	r0, 801b7a8 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801b768:	3401      	adds	r4, #1
 801b76a:	e7f1      	b.n	801b750 <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801b76c:	4b4e      	ldr	r3, [pc, #312]	@ (801b8a8 <lfs_fs_traverse_+0x1ac>)
 801b76e:	f241 2222 	movw	r2, #4642	@ 0x1222
 801b772:	494e      	ldr	r1, [pc, #312]	@ (801b8ac <lfs_fs_traverse_+0x1b0>)
 801b774:	484e      	ldr	r0, [pc, #312]	@ (801b8b0 <lfs_fs_traverse_+0x1b4>)
 801b776:	f00d fc25 	bl	8028fc4 <printf>
            return LFS_ERR_CORRUPT;
 801b77a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801b77e:	e013      	b.n	801b7a8 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801b780:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801b782:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b784:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801b786:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801b78a:	2500      	movs	r5, #0
 801b78c:	e7de      	b.n	801b74c <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801b78e:	aa10      	add	r2, sp, #64	@ 0x40
 801b790:	a90a      	add	r1, sp, #40	@ 0x28
 801b792:	4630      	mov	r0, r6
 801b794:	f7ff ffa4 	bl	801b6e0 <lfs_dir_fetch>
        if (err) {
 801b798:	9005      	str	r0, [sp, #20]
 801b79a:	2800      	cmp	r0, #0
 801b79c:	d17f      	bne.n	801b89e <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801b79e:	2400      	movs	r4, #0
 801b7a0:	e016      	b.n	801b7d0 <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801b7a2:	f113 0f02 	cmn.w	r3, #2
 801b7a6:	d011      	beq.n	801b7cc <lfs_fs_traverse_+0xd0>
}
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	b013      	add	sp, #76	@ 0x4c
 801b7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801b7b0:	f8cd 8008 	str.w	r8, [sp, #8]
 801b7b4:	9701      	str	r7, [sp, #4]
 801b7b6:	9b07      	ldr	r3, [sp, #28]
 801b7b8:	9300      	str	r3, [sp, #0]
 801b7ba:	9b06      	ldr	r3, [sp, #24]
 801b7bc:	4632      	mov	r2, r6
 801b7be:	2100      	movs	r1, #0
 801b7c0:	4630      	mov	r0, r6
 801b7c2:	f7fe ffc9 	bl	801a758 <lfs_ctz_traverse>
                if (err) {
 801b7c6:	4603      	mov	r3, r0
 801b7c8:	2800      	cmp	r0, #0
 801b7ca:	d1ed      	bne.n	801b7a8 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801b7cc:	3401      	adds	r4, #1
 801b7ce:	b2a4      	uxth	r4, r4
 801b7d0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801b7d4:	42a3      	cmp	r3, r4
 801b7d6:	d9a6      	bls.n	801b726 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801b7d8:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801b7da:	aa06      	add	r2, sp, #24
 801b7dc:	9200      	str	r2, [sp, #0]
 801b7de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801b7e2:	f043 0308 	orr.w	r3, r3, #8
 801b7e6:	4a33      	ldr	r2, [pc, #204]	@ (801b8b4 <lfs_fs_traverse_+0x1b8>)
 801b7e8:	a90a      	add	r1, sp, #40	@ 0x28
 801b7ea:	4630      	mov	r0, r6
 801b7ec:	f7fe ff8a 	bl	801a704 <lfs_dir_get>
            if (tag < 0) {
 801b7f0:	1e03      	subs	r3, r0, #0
 801b7f2:	dbd6      	blt.n	801b7a2 <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801b7f4:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801b7f8:	f240 2202 	movw	r2, #514	@ 0x202
 801b7fc:	4293      	cmp	r3, r2
 801b7fe:	d0d7      	beq.n	801b7b0 <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801b800:	f1b9 0f00 	cmp.w	r9, #0
 801b804:	d0e2      	beq.n	801b7cc <lfs_fs_traverse_+0xd0>
 801b806:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b80a:	d1df      	bne.n	801b7cc <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801b80c:	f8dd b014 	ldr.w	fp, [sp, #20]
 801b810:	e001      	b.n	801b816 <lfs_fs_traverse_+0x11a>
 801b812:	f10b 0b01 	add.w	fp, fp, #1
 801b816:	f1bb 0f01 	cmp.w	fp, #1
 801b81a:	dcd7      	bgt.n	801b7cc <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801b81c:	ab06      	add	r3, sp, #24
 801b81e:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801b822:	4640      	mov	r0, r8
 801b824:	47b8      	blx	r7
                    if (err) {
 801b826:	4603      	mov	r3, r0
 801b828:	2800      	cmp	r0, #0
 801b82a:	d0f2      	beq.n	801b812 <lfs_fs_traverse_+0x116>
 801b82c:	e7bc      	b.n	801b7a8 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801b82e:	2301      	movs	r3, #1
 801b830:	e783      	b.n	801b73a <lfs_fs_traverse_+0x3e>
 801b832:	2301      	movs	r3, #1
 801b834:	e781      	b.n	801b73a <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801b836:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801b838:	e00f      	b.n	801b85a <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801b83a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b83c:	f8cd 8008 	str.w	r8, [sp, #8]
 801b840:	9701      	str	r7, [sp, #4]
 801b842:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b844:	9200      	str	r2, [sp, #0]
 801b846:	4632      	mov	r2, r6
 801b848:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801b84c:	4630      	mov	r0, r6
 801b84e:	f7fe ff83 	bl	801a758 <lfs_ctz_traverse>
            if (err) {
 801b852:	4603      	mov	r3, r0
 801b854:	b158      	cbz	r0, 801b86e <lfs_fs_traverse_+0x172>
 801b856:	e7a7      	b.n	801b7a8 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801b858:	6824      	ldr	r4, [r4, #0]
 801b85a:	b1f4      	cbz	r4, 801b89a <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801b85c:	79a3      	ldrb	r3, [r4, #6]
 801b85e:	2b01      	cmp	r3, #1
 801b860:	d1fa      	bne.n	801b858 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801b862:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b864:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801b868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b86c:	d0e5      	beq.n	801b83a <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801b86e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b870:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801b874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801b878:	d1ee      	bne.n	801b858 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801b87a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801b87c:	f8cd 8008 	str.w	r8, [sp, #8]
 801b880:	9701      	str	r7, [sp, #4]
 801b882:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801b884:	9200      	str	r2, [sp, #0]
 801b886:	4632      	mov	r2, r6
 801b888:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801b88c:	4630      	mov	r0, r6
 801b88e:	f7fe ff63 	bl	801a758 <lfs_ctz_traverse>
            if (err) {
 801b892:	4603      	mov	r3, r0
 801b894:	2800      	cmp	r0, #0
 801b896:	d0df      	beq.n	801b858 <lfs_fs_traverse_+0x15c>
 801b898:	e786      	b.n	801b7a8 <lfs_fs_traverse_+0xac>
    return 0;
 801b89a:	2300      	movs	r3, #0
 801b89c:	e784      	b.n	801b7a8 <lfs_fs_traverse_+0xac>
            return err;
 801b89e:	9b05      	ldr	r3, [sp, #20]
 801b8a0:	e782      	b.n	801b7a8 <lfs_fs_traverse_+0xac>
 801b8a2:	bf00      	nop
 801b8a4:	08034d44 	.word	0x08034d44
 801b8a8:	08035a68 	.word	0x08035a68
 801b8ac:	08037bac 	.word	0x08037bac
 801b8b0:	08037d6c 	.word	0x08037d6c
 801b8b4:	700ffc00 	.word	0x700ffc00

0801b8b8 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801b8b8:	b538      	push	{r3, r4, r5, lr}
 801b8ba:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801b8bc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801b8be:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801b8c0:	4413      	add	r3, r2
            % lfs->block_count;
 801b8c2:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801b8c4:	fbb3 f1f2 	udiv	r1, r3, r2
 801b8c8:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801b8cc:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801b8ce:	2100      	movs	r1, #0
 801b8d0:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801b8d2:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801b8d4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801b8d6:	00db      	lsls	r3, r3, #3
 801b8d8:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801b8da:	4283      	cmp	r3, r0
 801b8dc:	bf28      	it	cs
 801b8de:	4603      	movcs	r3, r0
 801b8e0:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801b8e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801b8e4:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801b8e6:	f010 f88b 	bl	802ba00 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801b8ea:	2301      	movs	r3, #1
 801b8ec:	4622      	mov	r2, r4
 801b8ee:	4906      	ldr	r1, [pc, #24]	@ (801b908 <lfs_alloc_scan+0x50>)
 801b8f0:	4620      	mov	r0, r4
 801b8f2:	f7ff ff03 	bl	801b6fc <lfs_fs_traverse_>
    if (err) {
 801b8f6:	4605      	mov	r5, r0
 801b8f8:	b908      	cbnz	r0, 801b8fe <lfs_alloc_scan+0x46>
}
 801b8fa:	4628      	mov	r0, r5
 801b8fc:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801b8fe:	4620      	mov	r0, r4
 801b900:	f7fe fc15 	bl	801a12e <lfs_alloc_drop>
        return err;
 801b904:	e7f9      	b.n	801b8fa <lfs_alloc_scan+0x42>
 801b906:	bf00      	nop
 801b908:	0801a13d 	.word	0x0801a13d

0801b90c <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801b90c:	b530      	push	{r4, r5, lr}
 801b90e:	b083      	sub	sp, #12
 801b910:	4604      	mov	r4, r0
 801b912:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801b914:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801b916:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801b918:	4293      	cmp	r3, r2
 801b91a:	d22b      	bcs.n	801b974 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801b91c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801b91e:	08da      	lsrs	r2, r3, #3
 801b920:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801b922:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801b926:	40ca      	lsrs	r2, r1
 801b928:	f012 0f01 	tst.w	r2, #1
 801b92c:	d005      	beq.n	801b93a <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801b92e:	3301      	adds	r3, #1
 801b930:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801b932:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801b934:	3b01      	subs	r3, #1
 801b936:	6623      	str	r3, [r4, #96]	@ 0x60
 801b938:	e7ec      	b.n	801b914 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801b93a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b93c:	4413      	add	r3, r2
                        % lfs->block_count;
 801b93e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801b940:	fbb3 f1f2 	udiv	r1, r3, r2
 801b944:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801b948:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801b94a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801b94c:	3301      	adds	r3, #1
 801b94e:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801b950:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801b952:	3a01      	subs	r2, #1
 801b954:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801b956:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801b958:	4293      	cmp	r3, r2
 801b95a:	d225      	bcs.n	801b9a8 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801b95c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801b95e:	08da      	lsrs	r2, r3, #3
 801b960:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801b962:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801b966:	fa22 f303 	lsr.w	r3, r2, r3
 801b96a:	f013 0f01 	tst.w	r3, #1
 801b96e:	d1ec      	bne.n	801b94a <lfs_alloc+0x3e>
                        return 0;
 801b970:	2000      	movs	r0, #0
 801b972:	e01a      	b.n	801b9aa <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801b974:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801b976:	b12a      	cbz	r2, 801b984 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801b978:	4620      	mov	r0, r4
 801b97a:	f7ff ff9d 	bl	801b8b8 <lfs_alloc_scan>
        if(err) {
 801b97e:	2800      	cmp	r0, #0
 801b980:	d0c8      	beq.n	801b914 <lfs_alloc+0x8>
 801b982:	e012      	b.n	801b9aa <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801b984:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b986:	4413      	add	r3, r2
 801b988:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801b98a:	fbb3 f1f2 	udiv	r1, r3, r2
 801b98e:	4808      	ldr	r0, [pc, #32]	@ (801b9b0 <lfs_alloc+0xa4>)
 801b990:	9000      	str	r0, [sp, #0]
 801b992:	fb02 3311 	mls	r3, r2, r1, r3
 801b996:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801b99a:	4906      	ldr	r1, [pc, #24]	@ (801b9b4 <lfs_alloc+0xa8>)
 801b99c:	4806      	ldr	r0, [pc, #24]	@ (801b9b8 <lfs_alloc+0xac>)
 801b99e:	f00d fb11 	bl	8028fc4 <printf>
            return LFS_ERR_NOSPC;
 801b9a2:	f06f 001b 	mvn.w	r0, #27
 801b9a6:	e000      	b.n	801b9aa <lfs_alloc+0x9e>
                        return 0;
 801b9a8:	2000      	movs	r0, #0
}
 801b9aa:	b003      	add	sp, #12
 801b9ac:	bd30      	pop	{r4, r5, pc}
 801b9ae:	bf00      	nop
 801b9b0:	08035a68 	.word	0x08035a68
 801b9b4:	08037bac 	.word	0x08037bac
 801b9b8:	08037d98 	.word	0x08037d98

0801b9bc <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801b9bc:	b570      	push	{r4, r5, r6, lr}
 801b9be:	b084      	sub	sp, #16
 801b9c0:	4606      	mov	r6, r0
 801b9c2:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801b9c4:	2500      	movs	r5, #0
 801b9c6:	2d01      	cmp	r5, #1
 801b9c8:	dc0d      	bgt.n	801b9e6 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801b9ca:	3501      	adds	r5, #1
 801b9cc:	f005 0101 	and.w	r1, r5, #1
 801b9d0:	bf48      	it	mi
 801b9d2:	4249      	negmi	r1, r1
 801b9d4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b9d8:	4630      	mov	r0, r6
 801b9da:	f7ff ff97 	bl	801b90c <lfs_alloc>
        if (err) {
 801b9de:	4603      	mov	r3, r0
 801b9e0:	2800      	cmp	r0, #0
 801b9e2:	d0f0      	beq.n	801b9c6 <lfs_dir_alloc+0xa>
 801b9e4:	e02d      	b.n	801ba42 <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801b9e6:	2100      	movs	r1, #0
 801b9e8:	4622      	mov	r2, r4
 801b9ea:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801b9ee:	2304      	movs	r3, #4
 801b9f0:	9303      	str	r3, [sp, #12]
 801b9f2:	9202      	str	r2, [sp, #8]
 801b9f4:	9101      	str	r1, [sp, #4]
 801b9f6:	6822      	ldr	r2, [r4, #0]
 801b9f8:	9200      	str	r2, [sp, #0]
 801b9fa:	4632      	mov	r2, r6
 801b9fc:	4630      	mov	r0, r6
 801b9fe:	f7fe fcdd 	bl	801a3bc <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801ba02:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801ba04:	4603      	mov	r3, r0
 801ba06:	b110      	cbz	r0, 801ba0e <lfs_dir_alloc+0x52>
 801ba08:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801ba0c:	d119      	bne.n	801ba42 <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801ba0e:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801ba10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	dd0a      	ble.n	801ba2c <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801ba16:	3301      	adds	r3, #1
 801ba18:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801ba1c:	1853      	adds	r3, r2, r1
 801ba1e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801ba20:	fbb3 f2f1 	udiv	r2, r3, r1
 801ba24:	fb01 3212 	mls	r2, r1, r2, r3
 801ba28:	1a9b      	subs	r3, r3, r2
 801ba2a:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801ba2c:	2304      	movs	r3, #4
 801ba2e:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801ba30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ba34:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801ba36:	2300      	movs	r3, #0
 801ba38:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801ba3a:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801ba3c:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801ba3e:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801ba40:	75e3      	strb	r3, [r4, #23]
}
 801ba42:	4618      	mov	r0, r3
 801ba44:	b004      	add	sp, #16
 801ba46:	bd70      	pop	{r4, r5, r6, pc}

0801ba48 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801ba48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba4a:	b089      	sub	sp, #36	@ 0x24
 801ba4c:	4605      	mov	r5, r0
 801ba4e:	460e      	mov	r6, r1
 801ba50:	e053      	b.n	801bafa <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801ba52:	2201      	movs	r2, #1
 801ba54:	9203      	str	r2, [sp, #12]
 801ba56:	f10d 021b 	add.w	r2, sp, #27
 801ba5a:	9202      	str	r2, [sp, #8]
 801ba5c:	9401      	str	r4, [sp, #4]
 801ba5e:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801ba60:	9200      	str	r2, [sp, #0]
 801ba62:	1b1b      	subs	r3, r3, r4
 801ba64:	462a      	mov	r2, r5
 801ba66:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801ba6a:	4628      	mov	r0, r5
 801ba6c:	f7fe fca6 	bl	801a3bc <lfs_bd_read>
                if (err) {
 801ba70:	2800      	cmp	r0, #0
 801ba72:	d152      	bne.n	801bb1a <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801ba74:	2301      	movs	r3, #1
 801ba76:	9303      	str	r3, [sp, #12]
 801ba78:	f10d 021b 	add.w	r2, sp, #27
 801ba7c:	9202      	str	r2, [sp, #8]
 801ba7e:	9401      	str	r4, [sp, #4]
 801ba80:	9a07      	ldr	r2, [sp, #28]
 801ba82:	9200      	str	r2, [sp, #0]
 801ba84:	462a      	mov	r2, r5
 801ba86:	f105 0110 	add.w	r1, r5, #16
 801ba8a:	4628      	mov	r0, r5
 801ba8c:	f7ff f992 	bl	801adb4 <lfs_bd_prog>
            if (err) {
 801ba90:	bb20      	cbnz	r0, 801badc <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801ba92:	3401      	adds	r4, #1
 801ba94:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801ba96:	42a3      	cmp	r3, r4
 801ba98:	d945      	bls.n	801bb26 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801ba9a:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801ba9c:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801baa0:	d0d7      	beq.n	801ba52 <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801baa2:	88b2      	ldrh	r2, [r6, #4]
 801baa4:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801baa6:	2101      	movs	r1, #1
 801baa8:	9105      	str	r1, [sp, #20]
 801baaa:	f10d 011b 	add.w	r1, sp, #27
 801baae:	9104      	str	r1, [sp, #16]
 801bab0:	9403      	str	r4, [sp, #12]
 801bab2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801bab6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801baba:	9202      	str	r2, [sp, #8]
 801babc:	4a27      	ldr	r2, [pc, #156]	@ (801bb5c <lfs_file_relocate+0x114>)
 801babe:	9201      	str	r2, [sp, #4]
 801bac0:	1b1b      	subs	r3, r3, r4
 801bac2:	9300      	str	r3, [sp, #0]
 801bac4:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801bac8:	2200      	movs	r2, #0
 801baca:	f106 0108 	add.w	r1, r6, #8
 801bace:	4628      	mov	r0, r5
 801bad0:	f7ff f84c 	bl	801ab6c <lfs_dir_getread>
                if (err) {
 801bad4:	2800      	cmp	r0, #0
 801bad6:	d0cd      	beq.n	801ba74 <lfs_file_relocate+0x2c>
                    return err;
 801bad8:	4607      	mov	r7, r0
 801bada:	e03b      	b.n	801bb54 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801badc:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bae0:	d11d      	bne.n	801bb1e <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801bae2:	4b1f      	ldr	r3, [pc, #124]	@ (801bb60 <lfs_file_relocate+0x118>)
 801bae4:	9300      	str	r3, [sp, #0]
 801bae6:	9b07      	ldr	r3, [sp, #28]
 801bae8:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801baec:	491d      	ldr	r1, [pc, #116]	@ (801bb64 <lfs_file_relocate+0x11c>)
 801baee:	481e      	ldr	r0, [pc, #120]	@ (801bb68 <lfs_file_relocate+0x120>)
 801baf0:	f00d fa68 	bl	8028fc4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801baf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801baf8:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801bafa:	a907      	add	r1, sp, #28
 801bafc:	4628      	mov	r0, r5
 801bafe:	f7ff ff05 	bl	801b90c <lfs_alloc>
        if (err) {
 801bb02:	4607      	mov	r7, r0
 801bb04:	bb30      	cbnz	r0, 801bb54 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801bb06:	9907      	ldr	r1, [sp, #28]
 801bb08:	4628      	mov	r0, r5
 801bb0a:	f7fe fbdd 	bl	801a2c8 <lfs_bd_erase>
        if (err) {
 801bb0e:	4607      	mov	r7, r0
 801bb10:	b138      	cbz	r0, 801bb22 <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801bb12:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bb16:	d0e4      	beq.n	801bae2 <lfs_file_relocate+0x9a>
 801bb18:	e01c      	b.n	801bb54 <lfs_file_relocate+0x10c>
                    return err;
 801bb1a:	4607      	mov	r7, r0
 801bb1c:	e01a      	b.n	801bb54 <lfs_file_relocate+0x10c>
                return err;
 801bb1e:	4607      	mov	r7, r0
 801bb20:	e018      	b.n	801bb54 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801bb22:	2400      	movs	r4, #0
 801bb24:	e7b6      	b.n	801ba94 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801bb26:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801bb28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801bb2a:	69e9      	ldr	r1, [r5, #28]
 801bb2c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801bb2e:	f011 f9a3 	bl	802ce78 <memcpy>
        file->cache.block = lfs->pcache.block;
 801bb32:	692b      	ldr	r3, [r5, #16]
 801bb34:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801bb36:	696b      	ldr	r3, [r5, #20]
 801bb38:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801bb3a:	69ab      	ldr	r3, [r5, #24]
 801bb3c:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801bb3e:	f105 0110 	add.w	r1, r5, #16
 801bb42:	4628      	mov	r0, r5
 801bb44:	f7fe fc10 	bl	801a368 <lfs_cache_zero>
        file->block = nblock;
 801bb48:	9b07      	ldr	r3, [sp, #28]
 801bb4a:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801bb4c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801bb4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bb52:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801bb54:	4638      	mov	r0, r7
 801bb56:	b009      	add	sp, #36	@ 0x24
 801bb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb5a:	bf00      	nop
 801bb5c:	fff7fc00 	.word	0xfff7fc00
 801bb60:	08035a68 	.word	0x08035a68
 801bb64:	08037bac 	.word	0x08037bac
 801bb68:	08037dc4 	.word	0x08037dc4

0801bb6c <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801bb6c:	b538      	push	{r3, r4, r5, lr}
 801bb6e:	4605      	mov	r5, r0
 801bb70:	460c      	mov	r4, r1
    file->off = file->pos;
 801bb72:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801bb74:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801bb76:	f7fe fad7 	bl	801a128 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801bb7a:	4621      	mov	r1, r4
 801bb7c:	4628      	mov	r0, r5
 801bb7e:	f7ff ff63 	bl	801ba48 <lfs_file_relocate>
    if (err) {
 801bb82:	b918      	cbnz	r0, 801bb8c <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801bb84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bb86:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801bb8a:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801bb8c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801bb90 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb94:	b08b      	sub	sp, #44	@ 0x2c
 801bb96:	4605      	mov	r5, r0
 801bb98:	460f      	mov	r7, r1
 801bb9a:	4616      	mov	r6, r2
 801bb9c:	9305      	str	r3, [sp, #20]
 801bb9e:	e04d      	b.n	801bc3c <lfs_ctz_extend+0xac>
            if (size == 0) {
 801bba0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d032      	beq.n	801bc0c <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801bba6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bba8:	3b01      	subs	r3, #1
 801bbaa:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801bbac:	a908      	add	r1, sp, #32
 801bbae:	4628      	mov	r0, r5
 801bbb0:	f7fe fbe6 	bl	801a380 <lfs_ctz_index>
            noff = noff + 1;
 801bbb4:	9b08      	ldr	r3, [sp, #32]
 801bbb6:	3301      	adds	r3, #1
 801bbb8:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801bbba:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801bbbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801bbbe:	4293      	cmp	r3, r2
 801bbc0:	d05b      	beq.n	801bc7a <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801bbc2:	2400      	movs	r4, #0
 801bbc4:	46b9      	mov	r9, r7
 801bbc6:	9f05      	ldr	r7, [sp, #20]
 801bbc8:	9b08      	ldr	r3, [sp, #32]
 801bbca:	42a3      	cmp	r3, r4
 801bbcc:	d94a      	bls.n	801bc64 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801bbce:	2201      	movs	r2, #1
 801bbd0:	9203      	str	r2, [sp, #12]
 801bbd2:	aa09      	add	r2, sp, #36	@ 0x24
 801bbd4:	9202      	str	r2, [sp, #8]
 801bbd6:	9401      	str	r4, [sp, #4]
 801bbd8:	9700      	str	r7, [sp, #0]
 801bbda:	1b1b      	subs	r3, r3, r4
 801bbdc:	4632      	mov	r2, r6
 801bbde:	2100      	movs	r1, #0
 801bbe0:	4628      	mov	r0, r5
 801bbe2:	f7fe fbeb 	bl	801a3bc <lfs_bd_read>
                    if (err) {
 801bbe6:	4603      	mov	r3, r0
 801bbe8:	2800      	cmp	r0, #0
 801bbea:	d139      	bne.n	801bc60 <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801bbec:	2301      	movs	r3, #1
 801bbee:	9303      	str	r3, [sp, #12]
 801bbf0:	aa09      	add	r2, sp, #36	@ 0x24
 801bbf2:	9202      	str	r2, [sp, #8]
 801bbf4:	9401      	str	r4, [sp, #4]
 801bbf6:	9a07      	ldr	r2, [sp, #28]
 801bbf8:	9200      	str	r2, [sp, #0]
 801bbfa:	4632      	mov	r2, r6
 801bbfc:	4649      	mov	r1, r9
 801bbfe:	4628      	mov	r0, r5
 801bc00:	f7ff f8d8 	bl	801adb4 <lfs_bd_prog>
                    if (err) {
 801bc04:	4603      	mov	r3, r0
 801bc06:	b948      	cbnz	r0, 801bc1c <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801bc08:	3401      	adds	r4, #1
 801bc0a:	e7dd      	b.n	801bbc8 <lfs_ctz_extend+0x38>
                *block = nblock;
 801bc0c:	4682      	mov	sl, r0
 801bc0e:	9b07      	ldr	r3, [sp, #28]
 801bc10:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bc12:	6013      	str	r3, [r2, #0]
                *off = 0;
 801bc14:	2300      	movs	r3, #0
 801bc16:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801bc18:	6013      	str	r3, [r2, #0]
                return 0;
 801bc1a:	e02a      	b.n	801bc72 <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801bc1c:	464f      	mov	r7, r9
 801bc1e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bc22:	d11d      	bne.n	801bc60 <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801bc24:	4b36      	ldr	r3, [pc, #216]	@ (801bd00 <lfs_ctz_extend+0x170>)
 801bc26:	9300      	str	r3, [sp, #0]
 801bc28:	9b07      	ldr	r3, [sp, #28]
 801bc2a:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801bc2e:	4935      	ldr	r1, [pc, #212]	@ (801bd04 <lfs_ctz_extend+0x174>)
 801bc30:	4835      	ldr	r0, [pc, #212]	@ (801bd08 <lfs_ctz_extend+0x178>)
 801bc32:	f00d f9c7 	bl	8028fc4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801bc36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bc3a:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801bc3c:	a907      	add	r1, sp, #28
 801bc3e:	4628      	mov	r0, r5
 801bc40:	f7ff fe64 	bl	801b90c <lfs_alloc>
        if (err) {
 801bc44:	2800      	cmp	r0, #0
 801bc46:	d159      	bne.n	801bcfc <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801bc48:	9907      	ldr	r1, [sp, #28]
 801bc4a:	4628      	mov	r0, r5
 801bc4c:	f7fe fb3c 	bl	801a2c8 <lfs_bd_erase>
            if (err) {
 801bc50:	4680      	mov	r8, r0
 801bc52:	2800      	cmp	r0, #0
 801bc54:	d0a4      	beq.n	801bba0 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801bc56:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bc5a:	d0e3      	beq.n	801bc24 <lfs_ctz_extend+0x94>
 801bc5c:	4682      	mov	sl, r0
 801bc5e:	e008      	b.n	801bc72 <lfs_ctz_extend+0xe2>
                        return err;
 801bc60:	469a      	mov	sl, r3
 801bc62:	e006      	b.n	801bc72 <lfs_ctz_extend+0xe2>
                *block = nblock;
 801bc64:	46c2      	mov	sl, r8
 801bc66:	9b07      	ldr	r3, [sp, #28]
 801bc68:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bc6a:	6013      	str	r3, [r2, #0]
                *off = noff;
 801bc6c:	9b08      	ldr	r3, [sp, #32]
 801bc6e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801bc70:	6013      	str	r3, [r2, #0]
}
 801bc72:	4650      	mov	r0, sl
 801bc74:	b00b      	add	sp, #44	@ 0x2c
 801bc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801bc7a:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801bc7c:	fa90 f9a0 	rbit	r9, r0
 801bc80:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801bc84:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801bc88:	9b05      	ldr	r3, [sp, #20]
 801bc8a:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801bc8c:	2400      	movs	r4, #0
 801bc8e:	46ab      	mov	fp, r5
 801bc90:	e006      	b.n	801bca0 <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801bc92:	465d      	mov	r5, fp
 801bc94:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bc98:	d0c4      	beq.n	801bc24 <lfs_ctz_extend+0x94>
                    return err;
 801bc9a:	4682      	mov	sl, r0
 801bc9c:	e7e9      	b.n	801bc72 <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801bc9e:	3401      	adds	r4, #1
 801bca0:	4554      	cmp	r4, sl
 801bca2:	d221      	bcs.n	801bce8 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801bca4:	00a5      	lsls	r5, r4, #2
 801bca6:	2304      	movs	r3, #4
 801bca8:	9303      	str	r3, [sp, #12]
 801bcaa:	ab09      	add	r3, sp, #36	@ 0x24
 801bcac:	9302      	str	r3, [sp, #8]
 801bcae:	9501      	str	r5, [sp, #4]
 801bcb0:	9b07      	ldr	r3, [sp, #28]
 801bcb2:	9300      	str	r3, [sp, #0]
 801bcb4:	2301      	movs	r3, #1
 801bcb6:	4632      	mov	r2, r6
 801bcb8:	4639      	mov	r1, r7
 801bcba:	4658      	mov	r0, fp
 801bcbc:	f7ff f87a 	bl	801adb4 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801bcc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801bcc2:	2800      	cmp	r0, #0
 801bcc4:	d1e5      	bne.n	801bc92 <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801bcc6:	454c      	cmp	r4, r9
 801bcc8:	d0e9      	beq.n	801bc9e <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801bcca:	2304      	movs	r3, #4
 801bccc:	9303      	str	r3, [sp, #12]
 801bcce:	a909      	add	r1, sp, #36	@ 0x24
 801bcd0:	9102      	str	r1, [sp, #8]
 801bcd2:	9501      	str	r5, [sp, #4]
 801bcd4:	9200      	str	r2, [sp, #0]
 801bcd6:	4632      	mov	r2, r6
 801bcd8:	2100      	movs	r1, #0
 801bcda:	4658      	mov	r0, fp
 801bcdc:	f7fe fb6e 	bl	801a3bc <lfs_bd_read>
                    if (err) {
 801bce0:	2800      	cmp	r0, #0
 801bce2:	d0dc      	beq.n	801bc9e <lfs_ctz_extend+0x10e>
                        return err;
 801bce4:	4682      	mov	sl, r0
 801bce6:	e7c4      	b.n	801bc72 <lfs_ctz_extend+0xe2>
            *block = nblock;
 801bce8:	46d1      	mov	r9, sl
 801bcea:	46c2      	mov	sl, r8
 801bcec:	9b07      	ldr	r3, [sp, #28]
 801bcee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bcf0:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801bcf2:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801bcf6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bcf8:	6019      	str	r1, [r3, #0]
            return 0;
 801bcfa:	e7ba      	b.n	801bc72 <lfs_ctz_extend+0xe2>
 801bcfc:	4682      	mov	sl, r0
 801bcfe:	e7b8      	b.n	801bc72 <lfs_ctz_extend+0xe2>
 801bd00:	08035a68 	.word	0x08035a68
 801bd04:	08037bac 	.word	0x08037bac
 801bd08:	08037dc4 	.word	0x08037dc4

0801bd0c <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801bd0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd10:	b087      	sub	sp, #28
 801bd12:	4605      	mov	r5, r0
 801bd14:	460c      	mov	r4, r1
 801bd16:	4617      	mov	r7, r2
 801bd18:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801bd1a:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801bd1c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801bd20:	d008      	beq.n	801bd34 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801bd22:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801bd24:	444b      	add	r3, r9
 801bd26:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801bd28:	4293      	cmp	r3, r2
 801bd2a:	bf38      	it	cc
 801bd2c:	4613      	movcc	r3, r2
 801bd2e:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801bd30:	429a      	cmp	r2, r3
 801bd32:	d32d      	bcc.n	801bd90 <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801bd34:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801bd36:	f1b8 0f00 	cmp.w	r8, #0
 801bd3a:	f000 8094 	beq.w	801be66 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801bd3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bd40:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801bd44:	d004      	beq.n	801bd50 <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801bd46:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801bd48:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801bd4a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801bd4c:	4288      	cmp	r0, r1
 801bd4e:	d150      	bne.n	801bdf2 <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801bd50:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801bd54:	d144      	bne.n	801bde0 <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801bd56:	b90a      	cbnz	r2, 801bd5c <lfs_file_flushedwrite+0x50>
 801bd58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bd5a:	bb1b      	cbnz	r3, 801bda4 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801bd5c:	4628      	mov	r0, r5
 801bd5e:	f7fe f9e3 	bl	801a128 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801bd62:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801bd66:	9302      	str	r3, [sp, #8]
 801bd68:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801bd6c:	9301      	str	r3, [sp, #4]
 801bd6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bd70:	9300      	str	r3, [sp, #0]
 801bd72:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bd74:	462a      	mov	r2, r5
 801bd76:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801bd7a:	4628      	mov	r0, r5
 801bd7c:	f7ff ff08 	bl	801bb90 <lfs_ctz_extend>
                if (err) {
 801bd80:	4601      	mov	r1, r0
 801bd82:	2800      	cmp	r0, #0
 801bd84:	d031      	beq.n	801bdea <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801bd86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bd88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801bd8c:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801bd8e:	e059      	b.n	801be44 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801bd90:	f7ff feec 	bl	801bb6c <lfs_file_outline>
        if (err) {
 801bd94:	4601      	mov	r1, r0
 801bd96:	2800      	cmp	r0, #0
 801bd98:	d0cc      	beq.n	801bd34 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801bd9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bd9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801bda0:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801bda2:	e04f      	b.n	801be44 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801bda4:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801bda8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801bdaa:	2100      	movs	r1, #0
 801bdac:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801bdae:	a805      	add	r0, sp, #20
 801bdb0:	9003      	str	r0, [sp, #12]
 801bdb2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801bdb6:	9002      	str	r0, [sp, #8]
 801bdb8:	3b01      	subs	r3, #1
 801bdba:	9301      	str	r3, [sp, #4]
 801bdbc:	9200      	str	r2, [sp, #0]
 801bdbe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801bdc0:	4632      	mov	r2, r6
 801bdc2:	4628      	mov	r0, r5
 801bdc4:	f7ff f8ad 	bl	801af22 <lfs_ctz_find>
                    if (err) {
 801bdc8:	4601      	mov	r1, r0
 801bdca:	b920      	cbnz	r0, 801bdd6 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801bdcc:	4631      	mov	r1, r6
 801bdce:	4628      	mov	r0, r5
 801bdd0:	f7fe faca 	bl	801a368 <lfs_cache_zero>
 801bdd4:	e7c2      	b.n	801bd5c <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801bdd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bdd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801bddc:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801bdde:	e031      	b.n	801be44 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801bde0:	f06f 0301 	mvn.w	r3, #1
 801bde4:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801bde6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bde8:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801bdea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bdec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bdf0:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801bdf2:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801bdf4:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801bdf6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801bdf8:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801bdfa:	4546      	cmp	r6, r8
 801bdfc:	bf28      	it	cs
 801bdfe:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801be00:	9603      	str	r6, [sp, #12]
 801be02:	9702      	str	r7, [sp, #8]
 801be04:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801be06:	9301      	str	r3, [sp, #4]
 801be08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801be0a:	9300      	str	r3, [sp, #0]
 801be0c:	2301      	movs	r3, #1
 801be0e:	462a      	mov	r2, r5
 801be10:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801be14:	4628      	mov	r0, r5
 801be16:	f7fe ffcd 	bl	801adb4 <lfs_bd_prog>
            if (err) {
 801be1a:	4601      	mov	r1, r0
 801be1c:	b1b0      	cbz	r0, 801be4c <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801be1e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801be22:	d10b      	bne.n	801be3c <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801be24:	4621      	mov	r1, r4
 801be26:	4628      	mov	r0, r5
 801be28:	f7ff fe0e 	bl	801ba48 <lfs_file_relocate>
            if (err) {
 801be2c:	4601      	mov	r1, r0
 801be2e:	2800      	cmp	r0, #0
 801be30:	d0e6      	beq.n	801be00 <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801be32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801be34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801be38:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801be3a:	e003      	b.n	801be44 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801be3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801be3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801be42:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801be44:	4608      	mov	r0, r1
 801be46:	b007      	add	sp, #28
 801be48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801be4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801be4e:	4433      	add	r3, r6
 801be50:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801be52:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801be54:	4433      	add	r3, r6
 801be56:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801be58:	4437      	add	r7, r6
        nsize -= diff;
 801be5a:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801be5e:	4628      	mov	r0, r5
 801be60:	f7fe f962 	bl	801a128 <lfs_alloc_ckpoint>
 801be64:	e767      	b.n	801bd36 <lfs_file_flushedwrite+0x2a>
    return size;
 801be66:	4649      	mov	r1, r9
 801be68:	e7ec      	b.n	801be44 <lfs_file_flushedwrite+0x138>
	...

0801be6c <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801be6c:	b570      	push	{r4, r5, r6, lr}
 801be6e:	b098      	sub	sp, #96	@ 0x60
 801be70:	4605      	mov	r5, r0
 801be72:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801be74:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801be76:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801be7a:	d008      	beq.n	801be8e <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801be7c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801be80:	d102      	bne.n	801be88 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801be82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801be86:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801be88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801be8c:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801be8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801be90:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801be94:	d068      	beq.n	801bf68 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801be96:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801be98:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801be9c:	d151      	bne.n	801bf42 <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801be9e:	2254      	movs	r2, #84	@ 0x54
 801bea0:	2100      	movs	r1, #0
 801bea2:	a803      	add	r0, sp, #12
 801bea4:	f00f fdac 	bl	802ba00 <memset>
                .ctz.head = file->ctz.head,
 801bea8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801beaa:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801beac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801beae:	930e      	str	r3, [sp, #56]	@ 0x38
 801beb0:	2301      	movs	r3, #1
 801beb2:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801beb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801beb6:	9310      	str	r3, [sp, #64]	@ 0x40
 801beb8:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801bebc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801bec0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801bec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bec8:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801beca:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801becc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801bece:	429a      	cmp	r2, r3
 801bed0:	d21a      	bcs.n	801bf08 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801bed2:	2301      	movs	r3, #1
 801bed4:	f10d 020b 	add.w	r2, sp, #11
 801bed8:	a903      	add	r1, sp, #12
 801beda:	4628      	mov	r0, r5
 801bedc:	f7ff f86a 	bl	801afb4 <lfs_file_flushedread>
                if (res < 0) {
 801bee0:	1e03      	subs	r3, r0, #0
 801bee2:	db42      	blt.n	801bf6a <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801bee4:	2301      	movs	r3, #1
 801bee6:	f10d 020b 	add.w	r2, sp, #11
 801beea:	4621      	mov	r1, r4
 801beec:	4628      	mov	r0, r5
 801beee:	f7ff ff0d 	bl	801bd0c <lfs_file_flushedwrite>
                if (res < 0) {
 801bef2:	1e03      	subs	r3, r0, #0
 801bef4:	db39      	blt.n	801bf6a <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801bef6:	682b      	ldr	r3, [r5, #0]
 801bef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801befc:	d0e5      	beq.n	801beca <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801befe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bf02:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bf04:	602b      	str	r3, [r5, #0]
}
 801bf06:	e7e0      	b.n	801beca <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801bf08:	2301      	movs	r3, #1
 801bf0a:	462a      	mov	r2, r5
 801bf0c:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801bf10:	4628      	mov	r0, r5
 801bf12:	f7fe fef5 	bl	801ad00 <lfs_bd_flush>
                if (err) {
 801bf16:	4603      	mov	r3, r0
 801bf18:	b1c0      	cbz	r0, 801bf4c <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801bf1a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bf1e:	d124      	bne.n	801bf6a <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801bf20:	4b13      	ldr	r3, [pc, #76]	@ (801bf70 <lfs_file_flush+0x104>)
 801bf22:	9300      	str	r3, [sp, #0]
 801bf24:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bf26:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801bf2a:	4912      	ldr	r1, [pc, #72]	@ (801bf74 <lfs_file_flush+0x108>)
 801bf2c:	4812      	ldr	r0, [pc, #72]	@ (801bf78 <lfs_file_flush+0x10c>)
 801bf2e:	f00d f849 	bl	8028fc4 <printf>
                err = lfs_file_relocate(lfs, file);
 801bf32:	4621      	mov	r1, r4
 801bf34:	4628      	mov	r0, r5
 801bf36:	f7ff fd87 	bl	801ba48 <lfs_file_relocate>
                if (err) {
 801bf3a:	4603      	mov	r3, r0
 801bf3c:	2800      	cmp	r0, #0
 801bf3e:	d0e3      	beq.n	801bf08 <lfs_file_flush+0x9c>
 801bf40:	e013      	b.n	801bf6a <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801bf42:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801bf44:	42b3      	cmp	r3, r6
 801bf46:	bf38      	it	cc
 801bf48:	4633      	movcc	r3, r6
 801bf4a:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801bf4c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bf4e:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801bf50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bf52:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801bf54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bf56:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801bf5a:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801bf5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801bf60:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801bf62:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801bf64:	2300      	movs	r3, #0
 801bf66:	e000      	b.n	801bf6a <lfs_file_flush+0xfe>
 801bf68:	2300      	movs	r3, #0
}
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	b018      	add	sp, #96	@ 0x60
 801bf6e:	bd70      	pop	{r4, r5, r6, pc}
 801bf70:	08035a68 	.word	0x08035a68
 801bf74:	08037bac 	.word	0x08037bac
 801bf78:	08037dc4 	.word	0x08037dc4

0801bf7c <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf7e:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801bf80:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801bf82:	f013 0f01 	tst.w	r3, #1
 801bf86:	d00f      	beq.n	801bfa8 <lfs_file_read_+0x2c>
 801bf88:	4605      	mov	r5, r0
 801bf8a:	460c      	mov	r4, r1
 801bf8c:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801bf8e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801bf92:	d002      	beq.n	801bf9a <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801bf94:	f7ff ff6a 	bl	801be6c <lfs_file_flush>
        if (err) {
 801bf98:	b928      	cbnz	r0, 801bfa6 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801bf9a:	463b      	mov	r3, r7
 801bf9c:	4632      	mov	r2, r6
 801bf9e:	4621      	mov	r1, r4
 801bfa0:	4628      	mov	r0, r5
 801bfa2:	f7ff f807 	bl	801afb4 <lfs_file_flushedread>
}
 801bfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801bfa8:	4b03      	ldr	r3, [pc, #12]	@ (801bfb8 <lfs_file_read_+0x3c>)
 801bfaa:	4a04      	ldr	r2, [pc, #16]	@ (801bfbc <lfs_file_read_+0x40>)
 801bfac:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801bfb0:	4803      	ldr	r0, [pc, #12]	@ (801bfc0 <lfs_file_read_+0x44>)
 801bfb2:	f00c ffd3 	bl	8028f5c <__assert_func>
 801bfb6:	bf00      	nop
 801bfb8:	08037de8 	.word	0x08037de8
 801bfbc:	08038820 	.word	0x08038820
 801bfc0:	08037bac 	.word	0x08037bac

0801bfc4 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801bfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfc6:	b083      	sub	sp, #12
 801bfc8:	4606      	mov	r6, r0
 801bfca:	460d      	mov	r5, r1
 801bfcc:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801bfce:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801bfd0:	b123      	cbz	r3, 801bfdc <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801bfd2:	2b01      	cmp	r3, #1
 801bfd4:	d021      	beq.n	801c01a <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801bfd6:	2b02      	cmp	r3, #2
 801bfd8:	d023      	beq.n	801c022 <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801bfda:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801bfdc:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801bfde:	42a3      	cmp	r3, r4
 801bfe0:	d339      	bcc.n	801c056 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801bfe2:	42bc      	cmp	r4, r7
 801bfe4:	d023      	beq.n	801c02e <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801bfe6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801bfe8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801bfec:	d10c      	bne.n	801c008 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801bfee:	9701      	str	r7, [sp, #4]
 801bff0:	a901      	add	r1, sp, #4
 801bff2:	4630      	mov	r0, r6
 801bff4:	f7fe f9c4 	bl	801a380 <lfs_ctz_index>
 801bff8:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801bffa:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801bffc:	4669      	mov	r1, sp
 801bffe:	4630      	mov	r0, r6
 801c000:	f7fe f9be 	bl	801a380 <lfs_ctz_index>
        if (oindex == nindex
 801c004:	4287      	cmp	r7, r0
 801c006:	d014      	beq.n	801c032 <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801c008:	4629      	mov	r1, r5
 801c00a:	4630      	mov	r0, r6
 801c00c:	f7ff ff2e 	bl	801be6c <lfs_file_flush>
    if (err) {
 801c010:	b908      	cbnz	r0, 801c016 <lfs_file_seek_+0x52>
    file->pos = npos;
 801c012:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801c014:	4620      	mov	r0, r4
}
 801c016:	b003      	add	sp, #12
 801c018:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801c01a:	42e7      	cmn	r7, r4
 801c01c:	d415      	bmi.n	801c04a <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801c01e:	443c      	add	r4, r7
 801c020:	e7dc      	b.n	801bfdc <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801c022:	f7fe f90e 	bl	801a242 <lfs_file_size_>
        if (res < 0) {
 801c026:	1900      	adds	r0, r0, r4
 801c028:	d412      	bmi.n	801c050 <lfs_file_seek_+0x8c>
            npos = res;
 801c02a:	4604      	mov	r4, r0
 801c02c:	e7d6      	b.n	801bfdc <lfs_file_seek_+0x18>
        return npos;
 801c02e:	4620      	mov	r0, r4
 801c030:	e7f1      	b.n	801c016 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801c032:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801c034:	9a00      	ldr	r2, [sp, #0]
 801c036:	4293      	cmp	r3, r2
 801c038:	d8e6      	bhi.n	801c008 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801c03a:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801c03c:	440b      	add	r3, r1
 801c03e:	429a      	cmp	r2, r3
 801c040:	d2e2      	bcs.n	801c008 <lfs_file_seek_+0x44>
            file->pos = npos;
 801c042:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801c044:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801c046:	4620      	mov	r0, r4
 801c048:	e7e5      	b.n	801c016 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801c04a:	f06f 0015 	mvn.w	r0, #21
 801c04e:	e7e2      	b.n	801c016 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801c050:	f06f 0015 	mvn.w	r0, #21
 801c054:	e7df      	b.n	801c016 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801c056:	f06f 0015 	mvn.w	r0, #21
 801c05a:	e7dc      	b.n	801c016 <lfs_file_seek_+0x52>

0801c05c <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801c05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c060:	b082      	sub	sp, #8
 801c062:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801c064:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801c066:	f013 0f02 	tst.w	r3, #2
 801c06a:	d02a      	beq.n	801c0c2 <lfs_file_write_+0x66>
 801c06c:	4605      	mov	r5, r0
 801c06e:	460c      	mov	r4, r1
 801c070:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801c072:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801c076:	d12b      	bne.n	801c0d0 <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801c078:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c07a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801c07e:	d004      	beq.n	801c08a <lfs_file_write_+0x2e>
 801c080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c082:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c084:	4291      	cmp	r1, r2
 801c086:	d200      	bcs.n	801c08a <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801c088:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801c08a:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801c08c:	19f1      	adds	r1, r6, r7
 801c08e:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801c090:	4291      	cmp	r1, r2
 801c092:	d831      	bhi.n	801c0f8 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801c094:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801c098:	d11f      	bne.n	801c0da <lfs_file_write_+0x7e>
 801c09a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c09c:	429e      	cmp	r6, r3
 801c09e:	d91c      	bls.n	801c0da <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801c0a0:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801c0a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c0a4:	428e      	cmp	r6, r1
 801c0a6:	d918      	bls.n	801c0da <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801c0a8:	2300      	movs	r3, #0
 801c0aa:	f88d 3007 	strb.w	r3, [sp, #7]
 801c0ae:	2301      	movs	r3, #1
 801c0b0:	f10d 0207 	add.w	r2, sp, #7
 801c0b4:	4621      	mov	r1, r4
 801c0b6:	4628      	mov	r0, r5
 801c0b8:	f7ff fe28 	bl	801bd0c <lfs_file_flushedwrite>
            if (res < 0) {
 801c0bc:	2800      	cmp	r0, #0
 801c0be:	daf0      	bge.n	801c0a2 <lfs_file_write_+0x46>
 801c0c0:	e017      	b.n	801c0f2 <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801c0c2:	4b0f      	ldr	r3, [pc, #60]	@ (801c100 <lfs_file_write_+0xa4>)
 801c0c4:	4a0f      	ldr	r2, [pc, #60]	@ (801c104 <lfs_file_write_+0xa8>)
 801c0c6:	f640 6126 	movw	r1, #3622	@ 0xe26
 801c0ca:	480f      	ldr	r0, [pc, #60]	@ (801c108 <lfs_file_write_+0xac>)
 801c0cc:	f00c ff46 	bl	8028f5c <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801c0d0:	f7ff fecc 	bl	801be6c <lfs_file_flush>
        if (err) {
 801c0d4:	2800      	cmp	r0, #0
 801c0d6:	d0cf      	beq.n	801c078 <lfs_file_write_+0x1c>
 801c0d8:	e00b      	b.n	801c0f2 <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801c0da:	463b      	mov	r3, r7
 801c0dc:	4642      	mov	r2, r8
 801c0de:	4621      	mov	r1, r4
 801c0e0:	4628      	mov	r0, r5
 801c0e2:	f7ff fe13 	bl	801bd0c <lfs_file_flushedwrite>
    if (nsize < 0) {
 801c0e6:	2800      	cmp	r0, #0
 801c0e8:	db03      	blt.n	801c0f2 <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801c0ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c0ec:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801c0f0:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801c0f2:	b002      	add	sp, #8
 801c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801c0f8:	f06f 001a 	mvn.w	r0, #26
 801c0fc:	e7f9      	b.n	801c0f2 <lfs_file_write_+0x96>
 801c0fe:	bf00      	nop
 801c100:	08037e18 	.word	0x08037e18
 801c104:	08038800 	.word	0x08038800
 801c108:	08037bac 	.word	0x08037bac

0801c10c <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801c10c:	b500      	push	{lr}
 801c10e:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801c110:	2300      	movs	r3, #0
 801c112:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801c114:	aa01      	add	r2, sp, #4
 801c116:	4904      	ldr	r1, [pc, #16]	@ (801c128 <lfs_fs_size_+0x1c>)
 801c118:	f7ff faf0 	bl	801b6fc <lfs_fs_traverse_>
    if (err) {
 801c11c:	b900      	cbnz	r0, 801c120 <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801c11e:	9801      	ldr	r0, [sp, #4]
}
 801c120:	b003      	add	sp, #12
 801c122:	f85d fb04 	ldr.w	pc, [sp], #4
 801c126:	bf00      	nop
 801c128:	0801a2bd 	.word	0x0801a2bd

0801c12c <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801c12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c130:	b082      	sub	sp, #8
 801c132:	4680      	mov	r8, r0
 801c134:	460e      	mov	r6, r1
 801c136:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801c138:	2300      	movs	r3, #0
 801c13a:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801c13c:	2501      	movs	r5, #1
 801c13e:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c140:	4b27      	ldr	r3, [pc, #156]	@ (801c1e0 <lfs_fs_pred+0xb4>)
 801c142:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c146:	ab02      	add	r3, sp, #8
 801c148:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801c14c:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c14e:	69a7      	ldr	r7, [r4, #24]
 801c150:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801c154:	d035      	beq.n	801c1c2 <lfs_fs_pred+0x96>
 801c156:	69e3      	ldr	r3, [r4, #28]
 801c158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c15c:	d02f      	beq.n	801c1be <lfs_fs_pred+0x92>
 801c15e:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801c160:	bb8b      	cbnz	r3, 801c1c6 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801c162:	f104 0a18 	add.w	sl, r4, #24
 801c166:	4669      	mov	r1, sp
 801c168:	4650      	mov	r0, sl
 801c16a:	f7fd ff61 	bl	801a030 <lfs_pair_issync>
 801c16e:	b9a8      	cbnz	r0, 801c19c <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801c170:	454d      	cmp	r5, r9
 801c172:	d01d      	beq.n	801c1b0 <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801c174:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c176:	6833      	ldr	r3, [r6, #0]
 801c178:	42bb      	cmp	r3, r7
 801c17a:	d027      	beq.n	801c1cc <lfs_fs_pred+0xa0>
 801c17c:	69e1      	ldr	r1, [r4, #28]
 801c17e:	6872      	ldr	r2, [r6, #4]
 801c180:	4291      	cmp	r1, r2
 801c182:	d027      	beq.n	801c1d4 <lfs_fs_pred+0xa8>
 801c184:	42ba      	cmp	r2, r7
 801c186:	d027      	beq.n	801c1d8 <lfs_fs_pred+0xac>
 801c188:	4299      	cmp	r1, r3
 801c18a:	d027      	beq.n	801c1dc <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801c18c:	4652      	mov	r2, sl
 801c18e:	4621      	mov	r1, r4
 801c190:	4640      	mov	r0, r8
 801c192:	f7ff faa5 	bl	801b6e0 <lfs_dir_fetch>
        if (err) {
 801c196:	2800      	cmp	r0, #0
 801c198:	d0d9      	beq.n	801c14e <lfs_fs_pred+0x22>
 801c19a:	e018      	b.n	801c1ce <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801c19c:	4b11      	ldr	r3, [pc, #68]	@ (801c1e4 <lfs_fs_pred+0xb8>)
 801c19e:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801c1a2:	4911      	ldr	r1, [pc, #68]	@ (801c1e8 <lfs_fs_pred+0xbc>)
 801c1a4:	4811      	ldr	r0, [pc, #68]	@ (801c1ec <lfs_fs_pred+0xc0>)
 801c1a6:	f00c ff0d 	bl	8028fc4 <printf>
            return LFS_ERR_CORRUPT;
 801c1aa:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801c1ae:	e00e      	b.n	801c1ce <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801c1b0:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801c1b2:	69e3      	ldr	r3, [r4, #28]
 801c1b4:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801c1b6:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801c1ba:	2500      	movs	r5, #0
 801c1bc:	e7da      	b.n	801c174 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c1be:	2301      	movs	r3, #1
 801c1c0:	e7ce      	b.n	801c160 <lfs_fs_pred+0x34>
 801c1c2:	2301      	movs	r3, #1
 801c1c4:	e7cc      	b.n	801c160 <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801c1c6:	f06f 0001 	mvn.w	r0, #1
 801c1ca:	e000      	b.n	801c1ce <lfs_fs_pred+0xa2>
            return 0;
 801c1cc:	2000      	movs	r0, #0
}
 801c1ce:	b002      	add	sp, #8
 801c1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801c1d4:	2000      	movs	r0, #0
 801c1d6:	e7fa      	b.n	801c1ce <lfs_fs_pred+0xa2>
 801c1d8:	2000      	movs	r0, #0
 801c1da:	e7f8      	b.n	801c1ce <lfs_fs_pred+0xa2>
 801c1dc:	2000      	movs	r0, #0
 801c1de:	e7f6      	b.n	801c1ce <lfs_fs_pred+0xa2>
 801c1e0:	08034d44 	.word	0x08034d44
 801c1e4:	08035a68 	.word	0x08035a68
 801c1e8:	08037bac 	.word	0x08037bac
 801c1ec:	08037d6c 	.word	0x08037d6c

0801c1f0 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801c1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1f2:	b085      	sub	sp, #20
 801c1f4:	460c      	mov	r4, r1
 801c1f6:	4616      	mov	r6, r2
 801c1f8:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801c1fa:	9303      	str	r3, [sp, #12]
 801c1fc:	9202      	str	r2, [sp, #8]
 801c1fe:	684b      	ldr	r3, [r1, #4]
 801c200:	9301      	str	r3, [sp, #4]
 801c202:	680b      	ldr	r3, [r1, #0]
 801c204:	9300      	str	r3, [sp, #0]
 801c206:	2300      	movs	r3, #0
 801c208:	4602      	mov	r2, r0
 801c20a:	f100 0110 	add.w	r1, r0, #16
 801c20e:	f7fe fdd1 	bl	801adb4 <lfs_bd_prog>
    if (err) {
 801c212:	4607      	mov	r7, r0
 801c214:	b110      	cbz	r0, 801c21c <lfs_dir_commitprog+0x2c>
}
 801c216:	4638      	mov	r0, r7
 801c218:	b005      	add	sp, #20
 801c21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801c21c:	462a      	mov	r2, r5
 801c21e:	4631      	mov	r1, r6
 801c220:	68e0      	ldr	r0, [r4, #12]
 801c222:	f002 fcdf 	bl	801ebe4 <lfs_crc>
 801c226:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801c228:	6863      	ldr	r3, [r4, #4]
 801c22a:	442b      	add	r3, r5
 801c22c:	6063      	str	r3, [r4, #4]
    return 0;
 801c22e:	e7f2      	b.n	801c216 <lfs_dir_commitprog+0x26>

0801c230 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c234:	b087      	sub	sp, #28
 801c236:	4614      	mov	r4, r2
 801c238:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c23a:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c23e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c242:	bf14      	ite	ne
 801c244:	4690      	movne	r8, r2
 801c246:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801c24a:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c24e:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801c252:	684b      	ldr	r3, [r1, #4]
 801c254:	444b      	add	r3, r9
 801c256:	694a      	ldr	r2, [r1, #20]
 801c258:	4293      	cmp	r3, r2
 801c25a:	d841      	bhi.n	801c2e0 <lfs_dir_commitattr+0xb0>
 801c25c:	4605      	mov	r5, r0
 801c25e:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801c260:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801c264:	688b      	ldr	r3, [r1, #8]
 801c266:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801c26a:	ba1b      	rev	r3, r3
 801c26c:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801c26e:	2304      	movs	r3, #4
 801c270:	aa05      	add	r2, sp, #20
 801c272:	f7ff ffbd 	bl	801c1f0 <lfs_dir_commitprog>
    if (err) {
 801c276:	4682      	mov	sl, r0
 801c278:	bb60      	cbnz	r0, 801c2d4 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801c27a:	2c00      	cmp	r4, #0
 801c27c:	da21      	bge.n	801c2c2 <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801c27e:	2400      	movs	r4, #0
 801c280:	4544      	cmp	r4, r8
 801c282:	d225      	bcs.n	801c2d0 <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801c284:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801c288:	6839      	ldr	r1, [r7, #0]
 801c28a:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801c28c:	2001      	movs	r0, #1
 801c28e:	9003      	str	r0, [sp, #12]
 801c290:	f10d 0013 	add.w	r0, sp, #19
 801c294:	9002      	str	r0, [sp, #8]
 801c296:	4422      	add	r2, r4
 801c298:	9201      	str	r2, [sp, #4]
 801c29a:	9100      	str	r1, [sp, #0]
 801c29c:	3b04      	subs	r3, #4
 801c29e:	462a      	mov	r2, r5
 801c2a0:	2100      	movs	r1, #0
 801c2a2:	4628      	mov	r0, r5
 801c2a4:	f7fe f88a 	bl	801a3bc <lfs_bd_read>
            if (err) {
 801c2a8:	4603      	mov	r3, r0
 801c2aa:	b9b8      	cbnz	r0, 801c2dc <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801c2ac:	2301      	movs	r3, #1
 801c2ae:	f10d 0213 	add.w	r2, sp, #19
 801c2b2:	4631      	mov	r1, r6
 801c2b4:	4628      	mov	r0, r5
 801c2b6:	f7ff ff9b 	bl	801c1f0 <lfs_dir_commitprog>
            if (err) {
 801c2ba:	4603      	mov	r3, r0
 801c2bc:	b970      	cbnz	r0, 801c2dc <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801c2be:	3401      	adds	r4, #1
 801c2c0:	e7de      	b.n	801c280 <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801c2c2:	4643      	mov	r3, r8
 801c2c4:	463a      	mov	r2, r7
 801c2c6:	4631      	mov	r1, r6
 801c2c8:	4628      	mov	r0, r5
 801c2ca:	f7ff ff91 	bl	801c1f0 <lfs_dir_commitprog>
        if (err) {
 801c2ce:	b950      	cbnz	r0, 801c2e6 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801c2d0:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801c2d4:	4650      	mov	r0, sl
 801c2d6:	b007      	add	sp, #28
 801c2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801c2dc:	469a      	mov	sl, r3
 801c2de:	e7f9      	b.n	801c2d4 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801c2e0:	f06f 0a1b 	mvn.w	sl, #27
 801c2e4:	e7f6      	b.n	801c2d4 <lfs_dir_commitattr+0xa4>
            return err;
 801c2e6:	4682      	mov	sl, r0
 801c2e8:	e7f4      	b.n	801c2d4 <lfs_dir_commitattr+0xa4>

0801c2ea <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801c2ea:	b508      	push	{r3, lr}
 801c2ec:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801c2ee:	460a      	mov	r2, r1
 801c2f0:	6841      	ldr	r1, [r0, #4]
 801c2f2:	6800      	ldr	r0, [r0, #0]
 801c2f4:	f7ff ff9c 	bl	801c230 <lfs_dir_commitattr>
}
 801c2f8:	bd08      	pop	{r3, pc}
	...

0801c2fc <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c300:	b08b      	sub	sp, #44	@ 0x2c
 801c302:	4607      	mov	r7, r0
 801c304:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801c306:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801c308:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801c30a:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801c30c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801c30e:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801c310:	428b      	cmp	r3, r1
 801c312:	bf94      	ite	ls
 801c314:	eb02 0803 	addls.w	r8, r2, r3
 801c318:	eb02 0801 	addhi.w	r8, r2, r1
 801c31c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801c320:	fbb8 f3f2 	udiv	r3, r8, r2
 801c324:	fb02 8313 	mls	r3, r2, r3, r8
 801c328:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801c32c:	2300      	movs	r3, #0
 801c32e:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801c330:	469b      	mov	fp, r3
    while (commit->off < end) {
 801c332:	e03c      	b.n	801c3ae <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801c334:	2201      	movs	r2, #1
 801c336:	9203      	str	r2, [sp, #12]
 801c338:	f10d 021b 	add.w	r2, sp, #27
 801c33c:	9202      	str	r2, [sp, #8]
 801c33e:	9401      	str	r4, [sp, #4]
 801c340:	6832      	ldr	r2, [r6, #0]
 801c342:	9200      	str	r2, [sp, #0]
 801c344:	463a      	mov	r2, r7
 801c346:	2100      	movs	r1, #0
 801c348:	4638      	mov	r0, r7
 801c34a:	f7fe f837 	bl	801a3bc <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801c34e:	4603      	mov	r3, r0
 801c350:	b118      	cbz	r0, 801c35a <lfs_dir_commitcrc+0x5e>
 801c352:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c356:	f040 80c0 	bne.w	801c4da <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801c35a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c35c:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801c35e:	9307      	str	r3, [sp, #28]
 801c360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c364:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801c366:	aa08      	add	r2, sp, #32
 801c368:	9203      	str	r2, [sp, #12]
 801c36a:	9302      	str	r3, [sp, #8]
 801c36c:	9401      	str	r4, [sp, #4]
 801c36e:	6832      	ldr	r2, [r6, #0]
 801c370:	9200      	str	r2, [sp, #0]
 801c372:	463a      	mov	r2, r7
 801c374:	2100      	movs	r1, #0
 801c376:	4638      	mov	r0, r7
 801c378:	f7fe fea0 	bl	801b0bc <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801c37c:	4603      	mov	r3, r0
 801c37e:	b118      	cbz	r0, 801c388 <lfs_dir_commitcrc+0x8c>
 801c380:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c384:	f040 80a9 	bne.w	801c4da <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801c388:	ab07      	add	r3, sp, #28
 801c38a:	4a59      	ldr	r2, [pc, #356]	@ (801c4f0 <lfs_dir_commitcrc+0x1f4>)
 801c38c:	4631      	mov	r1, r6
 801c38e:	4638      	mov	r0, r7
 801c390:	f7ff ff4e 	bl	801c230 <lfs_dir_commitattr>
                if (err) {
 801c394:	4603      	mov	r3, r0
 801c396:	b348      	cbz	r0, 801c3ec <lfs_dir_commitcrc+0xf0>
 801c398:	e09f      	b.n	801c4da <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801c39a:	2300      	movs	r3, #0
 801c39c:	463a      	mov	r2, r7
 801c39e:	4651      	mov	r1, sl
 801c3a0:	4638      	mov	r0, r7
 801c3a2:	f7fe fd81 	bl	801aea8 <lfs_bd_sync>
            if (err) {
 801c3a6:	4603      	mov	r3, r0
 801c3a8:	2800      	cmp	r0, #0
 801c3aa:	f040 8096 	bne.w	801c4da <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801c3ae:	6874      	ldr	r4, [r6, #4]
 801c3b0:	4544      	cmp	r4, r8
 801c3b2:	d268      	bcs.n	801c486 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801c3b4:	eba8 0304 	sub.w	r3, r8, r4
 801c3b8:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801c3ba:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801c3be:	4293      	cmp	r3, r2
 801c3c0:	bf94      	ite	ls
 801c3c2:	18e4      	addls	r4, r4, r3
 801c3c4:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801c3c6:	3404      	adds	r4, #4
        if (noff < end) {
 801c3c8:	4544      	cmp	r4, r8
 801c3ca:	d204      	bcs.n	801c3d6 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801c3cc:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801c3d0:	429c      	cmp	r4, r3
 801c3d2:	bf28      	it	cs
 801c3d4:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801c3d6:	23ff      	movs	r3, #255	@ 0xff
 801c3d8:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801c3dc:	4544      	cmp	r4, r8
 801c3de:	d305      	bcc.n	801c3ec <lfs_dir_commitcrc+0xf0>
 801c3e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c3e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c3e4:	6a1b      	ldr	r3, [r3, #32]
 801c3e6:	1ad2      	subs	r2, r2, r3
 801c3e8:	42a2      	cmp	r2, r4
 801c3ea:	d2a3      	bcs.n	801c334 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801c3ec:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801c3f0:	43d2      	mvns	r2, r2
 801c3f2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801c3f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801c3fa:	6873      	ldr	r3, [r6, #4]
 801c3fc:	1ae5      	subs	r5, r4, r3
 801c3fe:	3d04      	subs	r5, #4
 801c400:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801c404:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801c408:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801c40c:	68b3      	ldr	r3, [r6, #8]
 801c40e:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801c410:	ba1b      	rev	r3, r3
 801c412:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801c414:	f10d 091c 	add.w	r9, sp, #28
 801c418:	2204      	movs	r2, #4
 801c41a:	4649      	mov	r1, r9
 801c41c:	68f0      	ldr	r0, [r6, #12]
 801c41e:	f002 fbe1 	bl	801ebe4 <lfs_crc>
 801c422:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801c424:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801c426:	f107 0a10 	add.w	sl, r7, #16
 801c42a:	2308      	movs	r3, #8
 801c42c:	9303      	str	r3, [sp, #12]
 801c42e:	f8cd 9008 	str.w	r9, [sp, #8]
 801c432:	6873      	ldr	r3, [r6, #4]
 801c434:	9301      	str	r3, [sp, #4]
 801c436:	6833      	ldr	r3, [r6, #0]
 801c438:	9300      	str	r3, [sp, #0]
 801c43a:	2300      	movs	r3, #0
 801c43c:	463a      	mov	r2, r7
 801c43e:	4651      	mov	r1, sl
 801c440:	4638      	mov	r0, r7
 801c442:	f7fe fcb7 	bl	801adb4 <lfs_bd_prog>
        if (err) {
 801c446:	4603      	mov	r3, r0
 801c448:	2800      	cmp	r0, #0
 801c44a:	d146      	bne.n	801c4da <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801c44c:	f1bb 0f00 	cmp.w	fp, #0
 801c450:	d104      	bne.n	801c45c <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801c452:	6873      	ldr	r3, [r6, #4]
 801c454:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801c458:	68f3      	ldr	r3, [r6, #12]
 801c45a:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801c45c:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801c45e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801c462:	43db      	mvns	r3, r3
 801c464:	061b      	lsls	r3, r3, #24
 801c466:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801c46a:	406b      	eors	r3, r5
 801c46c:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801c46e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c472:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801c474:	4544      	cmp	r4, r8
 801c476:	d290      	bcs.n	801c39a <lfs_dir_commitcrc+0x9e>
 801c478:	697b      	ldr	r3, [r7, #20]
 801c47a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c47c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801c47e:	4413      	add	r3, r2
 801c480:	42a3      	cmp	r3, r4
 801c482:	d894      	bhi.n	801c3ae <lfs_dir_commitcrc+0xb2>
 801c484:	e789      	b.n	801c39a <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801c486:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801c488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c48c:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801c48e:	aa09      	add	r2, sp, #36	@ 0x24
 801c490:	9203      	str	r2, [sp, #12]
 801c492:	ebab 0203 	sub.w	r2, fp, r3
 801c496:	9202      	str	r2, [sp, #8]
 801c498:	9301      	str	r3, [sp, #4]
 801c49a:	6833      	ldr	r3, [r6, #0]
 801c49c:	9300      	str	r3, [sp, #0]
 801c49e:	f10b 0304 	add.w	r3, fp, #4
 801c4a2:	463a      	mov	r2, r7
 801c4a4:	2100      	movs	r1, #0
 801c4a6:	4638      	mov	r0, r7
 801c4a8:	f7fe fe08 	bl	801b0bc <lfs_bd_crc>
    if (err) {
 801c4ac:	4603      	mov	r3, r0
 801c4ae:	b9a0      	cbnz	r0, 801c4da <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801c4b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c4b2:	9a05      	ldr	r2, [sp, #20]
 801c4b4:	4293      	cmp	r3, r2
 801c4b6:	d114      	bne.n	801c4e2 <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801c4b8:	ab09      	add	r3, sp, #36	@ 0x24
 801c4ba:	9303      	str	r3, [sp, #12]
 801c4bc:	2304      	movs	r3, #4
 801c4be:	9302      	str	r3, [sp, #8]
 801c4c0:	f8cd b004 	str.w	fp, [sp, #4]
 801c4c4:	6832      	ldr	r2, [r6, #0]
 801c4c6:	9200      	str	r2, [sp, #0]
 801c4c8:	463a      	mov	r2, r7
 801c4ca:	2100      	movs	r1, #0
 801c4cc:	4638      	mov	r0, r7
 801c4ce:	f7fe fdf5 	bl	801b0bc <lfs_bd_crc>
    if (err) {
 801c4d2:	4603      	mov	r3, r0
 801c4d4:	b908      	cbnz	r0, 801c4da <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801c4d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c4d8:	b932      	cbnz	r2, 801c4e8 <lfs_dir_commitcrc+0x1ec>
}
 801c4da:	4618      	mov	r0, r3
 801c4dc:	b00b      	add	sp, #44	@ 0x2c
 801c4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801c4e2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801c4e6:	e7f8      	b.n	801c4da <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801c4e8:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801c4ec:	e7f5      	b.n	801c4da <lfs_dir_commitcrc+0x1de>
 801c4ee:	bf00      	nop
 801c4f0:	5ffffc08 	.word	0x5ffffc08

0801c4f4 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801c4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4f8:	b09b      	sub	sp, #108	@ 0x6c
 801c4fa:	4605      	mov	r5, r0
 801c4fc:	460c      	mov	r4, r1
 801c4fe:	4616      	mov	r6, r2
 801c500:	461f      	mov	r7, r3
 801c502:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801c506:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801c50a:	f7fd fe7f 	bl	801a20c <lfs_dir_needsrelocation>
    dir->rev += 1;
 801c50e:	68a3      	ldr	r3, [r4, #8]
 801c510:	3301      	adds	r3, #1
 801c512:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801c514:	4681      	mov	r9, r0
 801c516:	2800      	cmp	r0, #0
 801c518:	d034      	beq.n	801c584 <lfs_dir_compact+0x90>
 801c51a:	2300      	movs	r3, #0
 801c51c:	9314      	str	r3, [sp, #80]	@ 0x50
 801c51e:	2301      	movs	r3, #1
 801c520:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c522:	6823      	ldr	r3, [r4, #0]
 801c524:	b373      	cbz	r3, 801c584 <lfs_dir_compact+0x90>
 801c526:	6862      	ldr	r2, [r4, #4]
 801c528:	2a01      	cmp	r2, #1
 801c52a:	d02b      	beq.n	801c584 <lfs_dir_compact+0x90>
 801c52c:	2b01      	cmp	r3, #1
 801c52e:	d029      	beq.n	801c584 <lfs_dir_compact+0x90>
 801c530:	b342      	cbz	r2, 801c584 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801c532:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c536:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801c538:	f1b9 0f00 	cmp.w	r9, #0
 801c53c:	f000 810d 	beq.w	801c75a <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801c540:	2300      	movs	r3, #0
 801c542:	9318      	str	r3, [sp, #96]	@ 0x60
 801c544:	2301      	movs	r3, #1
 801c546:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c548:	6823      	ldr	r3, [r4, #0]
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	f000 810f 	beq.w	801c76e <lfs_dir_compact+0x27a>
 801c550:	6862      	ldr	r2, [r4, #4]
 801c552:	2a01      	cmp	r2, #1
 801c554:	f000 810b 	beq.w	801c76e <lfs_dir_compact+0x27a>
 801c558:	2b01      	cmp	r3, #1
 801c55a:	f000 8108 	beq.w	801c76e <lfs_dir_compact+0x27a>
 801c55e:	2a00      	cmp	r2, #0
 801c560:	f000 8105 	beq.w	801c76e <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801c564:	1d21      	adds	r1, r4, #4
 801c566:	4628      	mov	r0, r5
 801c568:	f7ff f9d0 	bl	801b90c <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801c56c:	4603      	mov	r3, r0
 801c56e:	b330      	cbz	r0, 801c5be <lfs_dir_compact+0xca>
 801c570:	f110 0f1c 	cmn.w	r0, #28
 801c574:	d11f      	bne.n	801c5b6 <lfs_dir_compact+0xc2>
 801c576:	f1b9 0f00 	cmp.w	r9, #0
 801c57a:	d01c      	beq.n	801c5b6 <lfs_dir_compact+0xc2>
        relocated = true;
 801c57c:	46cb      	mov	fp, r9
        tired = false;
 801c57e:	f04f 0900 	mov.w	r9, #0
 801c582:	e001      	b.n	801c588 <lfs_dir_compact+0x94>
    bool relocated = false;
 801c584:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801c588:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801c58a:	930e      	str	r3, [sp, #56]	@ 0x38
 801c58c:	2300      	movs	r3, #0
 801c58e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c590:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c594:	9210      	str	r2, [sp, #64]	@ 0x40
 801c596:	9211      	str	r2, [sp, #68]	@ 0x44
 801c598:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801c59a:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801c59c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801c59e:	b19b      	cbz	r3, 801c5c8 <lfs_dir_compact+0xd4>
 801c5a0:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801c5a2:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801c5a4:	6861      	ldr	r1, [r4, #4]
 801c5a6:	4628      	mov	r0, r5
 801c5a8:	f7fd fe8e 	bl	801a2c8 <lfs_bd_erase>
            if (err) {
 801c5ac:	4603      	mov	r3, r0
 801c5ae:	b170      	cbz	r0, 801c5ce <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801c5b0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c5b4:	d0bd      	beq.n	801c532 <lfs_dir_compact+0x3e>
}
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	b01b      	add	sp, #108	@ 0x6c
 801c5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801c5be:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801c5c2:	f04f 0b01 	mov.w	fp, #1
 801c5c6:	e7df      	b.n	801c588 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801c5c8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801c5ca:	3b08      	subs	r3, #8
 801c5cc:	e7e9      	b.n	801c5a2 <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801c5ce:	2304      	movs	r3, #4
 801c5d0:	f104 0208 	add.w	r2, r4, #8
 801c5d4:	a90e      	add	r1, sp, #56	@ 0x38
 801c5d6:	4628      	mov	r0, r5
 801c5d8:	f7ff fe0a 	bl	801c1f0 <lfs_dir_commitprog>
            if (err) {
 801c5dc:	4603      	mov	r3, r0
 801c5de:	b118      	cbz	r0, 801c5e8 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801c5e0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c5e4:	d1e7      	bne.n	801c5b6 <lfs_dir_compact+0xc2>
 801c5e6:	e7a4      	b.n	801c532 <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801c5e8:	9516      	str	r5, [sp, #88]	@ 0x58
 801c5ea:	ab0e      	add	r3, sp, #56	@ 0x38
 801c5ec:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801c5ee:	ab16      	add	r3, sp, #88	@ 0x58
 801c5f0:	9308      	str	r3, [sp, #32]
 801c5f2:	4b65      	ldr	r3, [pc, #404]	@ (801c788 <lfs_dir_compact+0x294>)
 801c5f4:	9307      	str	r3, [sp, #28]
 801c5f6:	f1c8 0300 	rsb	r3, r8, #0
 801c5fa:	b21b      	sxth	r3, r3
 801c5fc:	9306      	str	r3, [sp, #24]
 801c5fe:	f8cd a014 	str.w	sl, [sp, #20]
 801c602:	f8cd 8010 	str.w	r8, [sp, #16]
 801c606:	2200      	movs	r2, #0
 801c608:	9203      	str	r2, [sp, #12]
 801c60a:	4b60      	ldr	r3, [pc, #384]	@ (801c78c <lfs_dir_compact+0x298>)
 801c60c:	9302      	str	r3, [sp, #8]
 801c60e:	9701      	str	r7, [sp, #4]
 801c610:	9600      	str	r6, [sp, #0]
 801c612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c616:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801c618:	4628      	mov	r0, r5
 801c61a:	f7fe f911 	bl	801a840 <lfs_dir_traverse>
            if (err) {
 801c61e:	4603      	mov	r3, r0
 801c620:	b118      	cbz	r0, 801c62a <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801c622:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c626:	d1c6      	bne.n	801c5b6 <lfs_dir_compact+0xc2>
 801c628:	e783      	b.n	801c532 <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c62a:	69a2      	ldr	r2, [r4, #24]
 801c62c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c630:	d02c      	beq.n	801c68c <lfs_dir_compact+0x198>
 801c632:	69e2      	ldr	r2, [r4, #28]
 801c634:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c638:	d026      	beq.n	801c688 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801c63a:	f013 0f01 	tst.w	r3, #1
 801c63e:	d027      	beq.n	801c690 <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801c640:	2300      	movs	r3, #0
 801c642:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c644:	930c      	str	r3, [sp, #48]	@ 0x30
 801c646:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801c648:	f1bb 0f00 	cmp.w	fp, #0
 801c64c:	d033      	beq.n	801c6b6 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801c64e:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801c652:	a80b      	add	r0, sp, #44	@ 0x2c
 801c654:	f7fd fd10 	bl	801a078 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801c658:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c65a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801c65e:	f023 0303 	bic.w	r3, r3, #3
 801c662:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801c664:	aa0b      	add	r2, sp, #44	@ 0x2c
 801c666:	4621      	mov	r1, r4
 801c668:	4628      	mov	r0, r5
 801c66a:	f7fe f859 	bl	801a720 <lfs_dir_getgstate>
            if (err) {
 801c66e:	4603      	mov	r3, r0
 801c670:	2800      	cmp	r0, #0
 801c672:	d1a0      	bne.n	801c5b6 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801c674:	2b02      	cmp	r3, #2
 801c676:	dc29      	bgt.n	801c6cc <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801c678:	aa1a      	add	r2, sp, #104	@ 0x68
 801c67a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801c67e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801c682:	bb92      	cbnz	r2, 801c6ea <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801c684:	3301      	adds	r3, #1
 801c686:	e7f5      	b.n	801c674 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c688:	2301      	movs	r3, #1
 801c68a:	e7d6      	b.n	801c63a <lfs_dir_compact+0x146>
 801c68c:	2301      	movs	r3, #1
 801c68e:	e7d4      	b.n	801c63a <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801c690:	7de2      	ldrb	r2, [r4, #23]
 801c692:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801c696:	f104 0318 	add.w	r3, r4, #24
 801c69a:	493d      	ldr	r1, [pc, #244]	@ (801c790 <lfs_dir_compact+0x29c>)
 801c69c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801c6a0:	a90e      	add	r1, sp, #56	@ 0x38
 801c6a2:	4628      	mov	r0, r5
 801c6a4:	f7ff fdc4 	bl	801c230 <lfs_dir_commitattr>
                if (err) {
 801c6a8:	4603      	mov	r3, r0
 801c6aa:	2800      	cmp	r0, #0
 801c6ac:	d0c8      	beq.n	801c640 <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801c6ae:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c6b2:	d180      	bne.n	801c5b6 <lfs_dir_compact+0xc2>
 801c6b4:	e73d      	b.n	801c532 <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801c6b6:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801c6ba:	a80b      	add	r0, sp, #44	@ 0x2c
 801c6bc:	f7fd fcdc 	bl	801a078 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801c6c0:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801c6c4:	a80b      	add	r0, sp, #44	@ 0x2c
 801c6c6:	f7fd fcd7 	bl	801a078 <lfs_gstate_xor>
 801c6ca:	e7c0      	b.n	801c64e <lfs_dir_compact+0x15a>
    return true;
 801c6cc:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801c6ce:	b973      	cbnz	r3, 801c6ee <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801c6d0:	ab0b      	add	r3, sp, #44	@ 0x2c
 801c6d2:	4a30      	ldr	r2, [pc, #192]	@ (801c794 <lfs_dir_compact+0x2a0>)
 801c6d4:	a90e      	add	r1, sp, #56	@ 0x38
 801c6d6:	4628      	mov	r0, r5
 801c6d8:	f7ff fdaa 	bl	801c230 <lfs_dir_commitattr>
                if (err) {
 801c6dc:	4603      	mov	r3, r0
 801c6de:	b130      	cbz	r0, 801c6ee <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801c6e0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c6e4:	f47f af67 	bne.w	801c5b6 <lfs_dir_compact+0xc2>
 801c6e8:	e723      	b.n	801c532 <lfs_dir_compact+0x3e>
            return false;
 801c6ea:	2300      	movs	r3, #0
 801c6ec:	e7ef      	b.n	801c6ce <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801c6ee:	a90e      	add	r1, sp, #56	@ 0x38
 801c6f0:	4628      	mov	r0, r5
 801c6f2:	f7ff fe03 	bl	801c2fc <lfs_dir_commitcrc>
            if (err) {
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	b120      	cbz	r0, 801c704 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801c6fa:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c6fe:	f47f af5a 	bne.w	801c5b6 <lfs_dir_compact+0xc2>
 801c702:	e716      	b.n	801c532 <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801c704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c706:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801c708:	6a12      	ldr	r2, [r2, #32]
 801c70a:	fbb3 f1f2 	udiv	r1, r3, r2
 801c70e:	fb02 3311 	mls	r3, r2, r1, r3
 801c712:	b9db      	cbnz	r3, 801c74c <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801c714:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801c716:	6862      	ldr	r2, [r4, #4]
 801c718:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801c71a:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801c71c:	ebaa 0808 	sub.w	r8, sl, r8
 801c720:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801c724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c726:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801c728:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c72a:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801c72c:	2200      	movs	r2, #0
 801c72e:	64aa      	str	r2, [r5, #72]	@ 0x48
 801c730:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801c732:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801c734:	f1bb 0f00 	cmp.w	fp, #0
 801c738:	d106      	bne.n	801c748 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801c73a:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801c73e:	3530      	adds	r5, #48	@ 0x30
 801c740:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801c744:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801c748:	465b      	mov	r3, fp
 801c74a:	e734      	b.n	801c5b6 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801c74c:	4b12      	ldr	r3, [pc, #72]	@ (801c798 <lfs_dir_compact+0x2a4>)
 801c74e:	4a13      	ldr	r2, [pc, #76]	@ (801c79c <lfs_dir_compact+0x2a8>)
 801c750:	f640 0106 	movw	r1, #2054	@ 0x806
 801c754:	4812      	ldr	r0, [pc, #72]	@ (801c7a0 <lfs_dir_compact+0x2ac>)
 801c756:	f00c fc01 	bl	8028f5c <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801c75a:	4b12      	ldr	r3, [pc, #72]	@ (801c7a4 <lfs_dir_compact+0x2b0>)
 801c75c:	9300      	str	r3, [sp, #0]
 801c75e:	6863      	ldr	r3, [r4, #4]
 801c760:	f640 0218 	movw	r2, #2072	@ 0x818
 801c764:	490e      	ldr	r1, [pc, #56]	@ (801c7a0 <lfs_dir_compact+0x2ac>)
 801c766:	4810      	ldr	r0, [pc, #64]	@ (801c7a8 <lfs_dir_compact+0x2b4>)
 801c768:	f00c fc2c 	bl	8028fc4 <printf>
 801c76c:	e6e8      	b.n	801c540 <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801c76e:	4b0d      	ldr	r3, [pc, #52]	@ (801c7a4 <lfs_dir_compact+0x2b0>)
 801c770:	9300      	str	r3, [sp, #0]
 801c772:	6863      	ldr	r3, [r4, #4]
 801c774:	f640 021d 	movw	r2, #2077	@ 0x81d
 801c778:	4909      	ldr	r1, [pc, #36]	@ (801c7a0 <lfs_dir_compact+0x2ac>)
 801c77a:	480c      	ldr	r0, [pc, #48]	@ (801c7ac <lfs_dir_compact+0x2b8>)
 801c77c:	f00c fc22 	bl	8028fc4 <printf>
            return LFS_ERR_NOSPC;
 801c780:	f06f 031b 	mvn.w	r3, #27
 801c784:	e717      	b.n	801c5b6 <lfs_dir_compact+0xc2>
 801c786:	bf00      	nop
 801c788:	0801c2eb 	.word	0x0801c2eb
 801c78c:	400ffc00 	.word	0x400ffc00
 801c790:	000ffc08 	.word	0x000ffc08
 801c794:	7ffffc0c 	.word	0x7ffffc0c
 801c798:	08037e48 	.word	0x08037e48
 801c79c:	0803887c 	.word	0x0803887c
 801c7a0:	08037bac 	.word	0x08037bac
 801c7a4:	08035a68 	.word	0x08035a68
 801c7a8:	08037dc4 	.word	0x08037dc4
 801c7ac:	08037e70 	.word	0x08037e70

0801c7b0 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801c7b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c7b4:	b08d      	sub	sp, #52	@ 0x34
 801c7b6:	4605      	mov	r5, r0
 801c7b8:	460c      	mov	r4, r1
 801c7ba:	4691      	mov	r9, r2
 801c7bc:	461e      	mov	r6, r3
 801c7be:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801c7c2:	a904      	add	r1, sp, #16
 801c7c4:	f7ff f8fa 	bl	801b9bc <lfs_dir_alloc>
    if (err) {
 801c7c8:	4607      	mov	r7, r0
 801c7ca:	b118      	cbz	r0, 801c7d4 <lfs_dir_split+0x24>
}
 801c7cc:	4638      	mov	r0, r7
 801c7ce:	b00d      	add	sp, #52	@ 0x34
 801c7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801c7d4:	7de3      	ldrb	r3, [r4, #23]
 801c7d6:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801c7da:	69a3      	ldr	r3, [r4, #24]
 801c7dc:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801c7de:	69e3      	ldr	r3, [r4, #28]
 801c7e0:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801c7e2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801c7e6:	9302      	str	r3, [sp, #8]
 801c7e8:	f8cd 8004 	str.w	r8, [sp, #4]
 801c7ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c7ee:	9300      	str	r3, [sp, #0]
 801c7f0:	4633      	mov	r3, r6
 801c7f2:	464a      	mov	r2, r9
 801c7f4:	a904      	add	r1, sp, #16
 801c7f6:	4628      	mov	r0, r5
 801c7f8:	f7ff fe7c 	bl	801c4f4 <lfs_dir_compact>
    if (res < 0) {
 801c7fc:	2800      	cmp	r0, #0
 801c7fe:	db17      	blt.n	801c830 <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801c800:	9904      	ldr	r1, [sp, #16]
 801c802:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801c804:	9a05      	ldr	r2, [sp, #20]
 801c806:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801c808:	2301      	movs	r3, #1
 801c80a:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c80c:	6823      	ldr	r3, [r4, #0]
 801c80e:	6a28      	ldr	r0, [r5, #32]
 801c810:	4283      	cmp	r3, r0
 801c812:	d007      	beq.n	801c824 <lfs_dir_split+0x74>
 801c814:	6866      	ldr	r6, [r4, #4]
 801c816:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801c818:	42a6      	cmp	r6, r4
 801c81a:	d003      	beq.n	801c824 <lfs_dir_split+0x74>
 801c81c:	42a3      	cmp	r3, r4
 801c81e:	d001      	beq.n	801c824 <lfs_dir_split+0x74>
 801c820:	42b0      	cmp	r0, r6
 801c822:	d1d3      	bne.n	801c7cc <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801c824:	f1b8 0f00 	cmp.w	r8, #0
 801c828:	d1d0      	bne.n	801c7cc <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801c82a:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801c82c:	626a      	str	r2, [r5, #36]	@ 0x24
 801c82e:	e7cd      	b.n	801c7cc <lfs_dir_split+0x1c>
        return res;
 801c830:	4607      	mov	r7, r0
 801c832:	e7cb      	b.n	801c7cc <lfs_dir_split+0x1c>

0801c834 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801c834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c838:	b091      	sub	sp, #68	@ 0x44
 801c83a:	4607      	mov	r7, r0
 801c83c:	4615      	mov	r5, r2
 801c83e:	4699      	mov	r9, r3
 801c840:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801c844:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801c848:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801c84c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c84e:	e04c      	b.n	801c8ea <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801c850:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801c852:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801c854:	4403      	add	r3, r0
 801c856:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801c858:	fbb3 f1f0 	udiv	r1, r3, r0
 801c85c:	fb00 3111 	mls	r1, r0, r1, r3
 801c860:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801c862:	4293      	cmp	r3, r2
 801c864:	bf28      	it	cs
 801c866:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801c868:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c86a:	429a      	cmp	r2, r3
 801c86c:	d92d      	bls.n	801c8ca <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801c86e:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801c872:	eba6 0804 	sub.w	r8, r6, r4
 801c876:	f1b8 0f01 	cmp.w	r8, #1
 801c87a:	d926      	bls.n	801c8ca <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801c87c:	2200      	movs	r2, #0
 801c87e:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801c880:	b2a1      	uxth	r1, r4
 801c882:	ab0d      	add	r3, sp, #52	@ 0x34
 801c884:	9308      	str	r3, [sp, #32]
 801c886:	4b4d      	ldr	r3, [pc, #308]	@ (801c9bc <lfs_dir_splittingcompact+0x188>)
 801c888:	9307      	str	r3, [sp, #28]
 801c88a:	424b      	negs	r3, r1
 801c88c:	b21b      	sxth	r3, r3
 801c88e:	9306      	str	r3, [sp, #24]
 801c890:	9605      	str	r6, [sp, #20]
 801c892:	9104      	str	r1, [sp, #16]
 801c894:	9203      	str	r2, [sp, #12]
 801c896:	4b4a      	ldr	r3, [pc, #296]	@ (801c9c0 <lfs_dir_splittingcompact+0x18c>)
 801c898:	9302      	str	r3, [sp, #8]
 801c89a:	f8cd 9004 	str.w	r9, [sp, #4]
 801c89e:	9500      	str	r5, [sp, #0]
 801c8a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c8a4:	4651      	mov	r1, sl
 801c8a6:	4638      	mov	r0, r7
 801c8a8:	f7fd ffca 	bl	801a840 <lfs_dir_traverse>
            if (err) {
 801c8ac:	4603      	mov	r3, r0
 801c8ae:	2800      	cmp	r0, #0
 801c8b0:	d15b      	bne.n	801c96a <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801c8b2:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801c8b6:	d8da      	bhi.n	801c86e <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801c8b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801c8ba:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801c8bc:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801c8c0:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801c8c2:	2800      	cmp	r0, #0
 801c8c4:	d0c4      	beq.n	801c850 <lfs_dir_splittingcompact+0x1c>
 801c8c6:	0843      	lsrs	r3, r0, #1
 801c8c8:	e7c3      	b.n	801c852 <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801c8ca:	455c      	cmp	r4, fp
 801c8cc:	d022      	beq.n	801c914 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801c8ce:	b2a4      	uxth	r4, r4
 801c8d0:	9602      	str	r6, [sp, #8]
 801c8d2:	9401      	str	r4, [sp, #4]
 801c8d4:	f8cd a000 	str.w	sl, [sp]
 801c8d8:	464b      	mov	r3, r9
 801c8da:	462a      	mov	r2, r5
 801c8dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c8de:	4638      	mov	r0, r7
 801c8e0:	f7ff ff66 	bl	801c7b0 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801c8e4:	4603      	mov	r3, r0
 801c8e6:	b910      	cbnz	r0, 801c8ee <lfs_dir_splittingcompact+0xba>
            end = split;
 801c8e8:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801c8ea:	465c      	mov	r4, fp
        while (end - split > 1) {
 801c8ec:	e7c1      	b.n	801c872 <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801c8ee:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801c8f2:	f110 0f1c 	cmn.w	r0, #28
 801c8f6:	d138      	bne.n	801c96a <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801c8f8:	4b32      	ldr	r3, [pc, #200]	@ (801c9c4 <lfs_dir_splittingcompact+0x190>)
 801c8fa:	9301      	str	r3, [sp, #4]
 801c8fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c900:	9300      	str	r3, [sp, #0]
 801c902:	f8d8 3000 	ldr.w	r3, [r8]
 801c906:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801c90a:	492f      	ldr	r1, [pc, #188]	@ (801c9c8 <lfs_dir_splittingcompact+0x194>)
 801c90c:	482f      	ldr	r0, [pc, #188]	@ (801c9cc <lfs_dir_splittingcompact+0x198>)
 801c90e:	f00c fb59 	bl	8028fc4 <printf>
            break;
 801c912:	e001      	b.n	801c918 <lfs_dir_splittingcompact+0xe4>
 801c914:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801c918:	4641      	mov	r1, r8
 801c91a:	4638      	mov	r0, r7
 801c91c:	f7fd fc76 	bl	801a20c <lfs_dir_needsrelocation>
 801c920:	b1b8      	cbz	r0, 801c952 <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801c922:	2300      	movs	r3, #0
 801c924:	930e      	str	r3, [sp, #56]	@ 0x38
 801c926:	2301      	movs	r3, #1
 801c928:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c92a:	f8d8 2000 	ldr.w	r2, [r8]
 801c92e:	b132      	cbz	r2, 801c93e <lfs_dir_splittingcompact+0x10a>
 801c930:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c934:	2b01      	cmp	r3, #1
 801c936:	d002      	beq.n	801c93e <lfs_dir_splittingcompact+0x10a>
 801c938:	2a01      	cmp	r2, #1
 801c93a:	d000      	beq.n	801c93e <lfs_dir_splittingcompact+0x10a>
 801c93c:	b94b      	cbnz	r3, 801c952 <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801c93e:	4638      	mov	r0, r7
 801c940:	f7ff fbe4 	bl	801c10c <lfs_fs_size_>
        if (size < 0) {
 801c944:	1e03      	subs	r3, r0, #0
 801c946:	db10      	blt.n	801c96a <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801c948:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801c94a:	1ad3      	subs	r3, r2, r3
 801c94c:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801c950:	d80f      	bhi.n	801c972 <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801c952:	9602      	str	r6, [sp, #8]
 801c954:	f8cd b004 	str.w	fp, [sp, #4]
 801c958:	f8cd a000 	str.w	sl, [sp]
 801c95c:	464b      	mov	r3, r9
 801c95e:	462a      	mov	r2, r5
 801c960:	4641      	mov	r1, r8
 801c962:	4638      	mov	r0, r7
 801c964:	f7ff fdc6 	bl	801c4f4 <lfs_dir_compact>
 801c968:	4603      	mov	r3, r0
}
 801c96a:	4618      	mov	r0, r3
 801c96c:	b011      	add	sp, #68	@ 0x44
 801c96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801c972:	4b14      	ldr	r3, [pc, #80]	@ (801c9c4 <lfs_dir_splittingcompact+0x190>)
 801c974:	9300      	str	r3, [sp, #0]
 801c976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c97a:	f640 0286 	movw	r2, #2182	@ 0x886
 801c97e:	4912      	ldr	r1, [pc, #72]	@ (801c9c8 <lfs_dir_splittingcompact+0x194>)
 801c980:	4813      	ldr	r0, [pc, #76]	@ (801c9d0 <lfs_dir_splittingcompact+0x19c>)
 801c982:	f00c fb1f 	bl	8028fc4 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801c986:	9602      	str	r6, [sp, #8]
 801c988:	f8cd b004 	str.w	fp, [sp, #4]
 801c98c:	f8cd a000 	str.w	sl, [sp]
 801c990:	464b      	mov	r3, r9
 801c992:	462a      	mov	r2, r5
 801c994:	4641      	mov	r1, r8
 801c996:	4638      	mov	r0, r7
 801c998:	f7ff ff0a 	bl	801c7b0 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801c99c:	4603      	mov	r3, r0
 801c99e:	b150      	cbz	r0, 801c9b6 <lfs_dir_splittingcompact+0x182>
 801c9a0:	f110 0f1c 	cmn.w	r0, #28
 801c9a4:	d1e1      	bne.n	801c96a <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801c9a6:	4b07      	ldr	r3, [pc, #28]	@ (801c9c4 <lfs_dir_splittingcompact+0x190>)
 801c9a8:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801c9ac:	4906      	ldr	r1, [pc, #24]	@ (801c9c8 <lfs_dir_splittingcompact+0x194>)
 801c9ae:	4809      	ldr	r0, [pc, #36]	@ (801c9d4 <lfs_dir_splittingcompact+0x1a0>)
 801c9b0:	f00c fb08 	bl	8028fc4 <printf>
 801c9b4:	e7cd      	b.n	801c952 <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801c9b6:	2601      	movs	r6, #1
 801c9b8:	e7cb      	b.n	801c952 <lfs_dir_splittingcompact+0x11e>
 801c9ba:	bf00      	nop
 801c9bc:	0801a1f1 	.word	0x0801a1f1
 801c9c0:	400ffc00 	.word	0x400ffc00
 801c9c4:	08035a68 	.word	0x08035a68
 801c9c8:	08037bac 	.word	0x08037bac
 801c9cc:	08037ea8 	.word	0x08037ea8
 801c9d0:	08037ed8 	.word	0x08037ed8
 801c9d4:	08037f08 	.word	0x08037f08

0801c9d8 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801c9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9dc:	b09b      	sub	sp, #108	@ 0x6c
 801c9de:	4607      	mov	r7, r0
 801c9e0:	460e      	mov	r6, r1
 801c9e2:	4691      	mov	r9, r2
 801c9e4:	461d      	mov	r5, r3
 801c9e6:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801c9ea:	2300      	movs	r3, #0
    bool hasdelete = false;
 801c9ec:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801c9ee:	e003      	b.n	801c9f8 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801c9f0:	8ab2      	ldrh	r2, [r6, #20]
 801c9f2:	3201      	adds	r2, #1
 801c9f4:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801c9f6:	3301      	adds	r3, #1
 801c9f8:	4543      	cmp	r3, r8
 801c9fa:	da2d      	bge.n	801ca58 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801c9fc:	00d8      	lsls	r0, r3, #3
 801c9fe:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801ca02:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801ca06:	0d11      	lsrs	r1, r2, #20
 801ca08:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801ca0c:	f240 4e01 	movw	lr, #1025	@ 0x401
 801ca10:	4572      	cmp	r2, lr
 801ca12:	d0ed      	beq.n	801c9f0 <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801ca14:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801ca18:	4572      	cmp	r2, lr
 801ca1a:	d00f      	beq.n	801ca3c <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801ca1c:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801ca20:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801ca24:	d1e7      	bne.n	801c9f6 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801ca26:	6862      	ldr	r2, [r4, #4]
 801ca28:	6812      	ldr	r2, [r2, #0]
 801ca2a:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801ca2c:	6862      	ldr	r2, [r4, #4]
 801ca2e:	6852      	ldr	r2, [r2, #4]
 801ca30:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801ca32:	582a      	ldr	r2, [r5, r0]
 801ca34:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801ca38:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801ca3a:	e7dc      	b.n	801c9f6 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801ca3c:	8ab2      	ldrh	r2, [r6, #20]
 801ca3e:	b122      	cbz	r2, 801ca4a <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801ca40:	3a01      	subs	r2, #1
 801ca42:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801ca44:	f04f 0c01 	mov.w	ip, #1
 801ca48:	e7d5      	b.n	801c9f6 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801ca4a:	4ba0      	ldr	r3, [pc, #640]	@ (801cccc <lfs_dir_relocatingcommit+0x2f4>)
 801ca4c:	4aa0      	ldr	r2, [pc, #640]	@ (801ccd0 <lfs_dir_relocatingcommit+0x2f8>)
 801ca4e:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801ca52:	48a0      	ldr	r0, [pc, #640]	@ (801ccd4 <lfs_dir_relocatingcommit+0x2fc>)
 801ca54:	f00c fa82 	bl	8028f5c <__assert_func>
    if (hasdelete && dir->count == 0) {
 801ca58:	f1bc 0f00 	cmp.w	ip, #0
 801ca5c:	d01b      	beq.n	801ca96 <lfs_dir_relocatingcommit+0xbe>
 801ca5e:	8ab3      	ldrh	r3, [r6, #20]
 801ca60:	b9cb      	cbnz	r3, 801ca96 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801ca62:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ca64:	b15b      	cbz	r3, 801ca7e <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801ca66:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801ca68:	4631      	mov	r1, r6
 801ca6a:	4638      	mov	r0, r7
 801ca6c:	f7ff fb5e 	bl	801c12c <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801ca70:	4682      	mov	sl, r0
 801ca72:	b158      	cbz	r0, 801ca8c <lfs_dir_relocatingcommit+0xb4>
 801ca74:	f110 0f02 	cmn.w	r0, #2
 801ca78:	f040 8159 	bne.w	801cd2e <lfs_dir_relocatingcommit+0x356>
 801ca7c:	e00b      	b.n	801ca96 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801ca7e:	4b96      	ldr	r3, [pc, #600]	@ (801ccd8 <lfs_dir_relocatingcommit+0x300>)
 801ca80:	4a93      	ldr	r2, [pc, #588]	@ (801ccd0 <lfs_dir_relocatingcommit+0x2f8>)
 801ca82:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801ca86:	4893      	ldr	r0, [pc, #588]	@ (801ccd4 <lfs_dir_relocatingcommit+0x2fc>)
 801ca88:	f00c fa68 	bl	8028f5c <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801ca8c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ca8e:	7ddb      	ldrb	r3, [r3, #23]
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	f040 80bf 	bne.w	801cc14 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801ca96:	7db4      	ldrb	r4, [r6, #22]
 801ca98:	2c00      	cmp	r4, #0
 801ca9a:	d02e      	beq.n	801cafa <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801ca9c:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801ca9e:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801caa0:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801caa2:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801caa4:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801caa6:	9212      	str	r2, [sp, #72]	@ 0x48
 801caa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801caac:	9213      	str	r2, [sp, #76]	@ 0x4c
 801caae:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801cab0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801cab2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d03c      	beq.n	801cb32 <lfs_dir_relocatingcommit+0x15a>
 801cab8:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801caba:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801cabc:	9718      	str	r7, [sp, #96]	@ 0x60
 801cabe:	ab10      	add	r3, sp, #64	@ 0x40
 801cac0:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801cac2:	ab18      	add	r3, sp, #96	@ 0x60
 801cac4:	9308      	str	r3, [sp, #32]
 801cac6:	4b85      	ldr	r3, [pc, #532]	@ (801ccdc <lfs_dir_relocatingcommit+0x304>)
 801cac8:	9307      	str	r3, [sp, #28]
 801caca:	2300      	movs	r3, #0
 801cacc:	9306      	str	r3, [sp, #24]
 801cace:	9305      	str	r3, [sp, #20]
 801cad0:	9304      	str	r3, [sp, #16]
 801cad2:	9303      	str	r3, [sp, #12]
 801cad4:	9302      	str	r3, [sp, #8]
 801cad6:	f8cd 8004 	str.w	r8, [sp, #4]
 801cada:	9500      	str	r5, [sp, #0]
 801cadc:	6933      	ldr	r3, [r6, #16]
 801cade:	68f2      	ldr	r2, [r6, #12]
 801cae0:	4631      	mov	r1, r6
 801cae2:	4638      	mov	r0, r7
 801cae4:	f7fd feac 	bl	801a840 <lfs_dir_traverse>
        if (err) {
 801cae8:	4682      	mov	sl, r0
 801caea:	b328      	cbz	r0, 801cb38 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801caec:	f110 0f1c 	cmn.w	r0, #28
 801caf0:	d003      	beq.n	801cafa <lfs_dir_relocatingcommit+0x122>
 801caf2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801caf6:	f040 811a 	bne.w	801cd2e <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801cafa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cafe:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801cb00:	8ab3      	ldrh	r3, [r6, #20]
 801cb02:	9302      	str	r3, [sp, #8]
 801cb04:	2300      	movs	r3, #0
 801cb06:	9301      	str	r3, [sp, #4]
 801cb08:	9600      	str	r6, [sp, #0]
 801cb0a:	4643      	mov	r3, r8
 801cb0c:	462a      	mov	r2, r5
 801cb0e:	4631      	mov	r1, r6
 801cb10:	4638      	mov	r0, r7
 801cb12:	f7ff fe8f 	bl	801c834 <lfs_dir_splittingcompact>
    if (state < 0) {
 801cb16:	1e01      	subs	r1, r0, #0
 801cb18:	f2c0 8106 	blt.w	801cd28 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801cb1c:	f8d9 b000 	ldr.w	fp, [r9]
 801cb20:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801cb24:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801cb28:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801cb2a:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801cb2c:	4692      	mov	sl, r2
 801cb2e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cb30:	e0db      	b.n	801ccea <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801cb32:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801cb34:	3b08      	subs	r3, #8
 801cb36:	e7c0      	b.n	801caba <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801cb38:	2300      	movs	r3, #0
 801cb3a:	930d      	str	r3, [sp, #52]	@ 0x34
 801cb3c:	930e      	str	r3, [sp, #56]	@ 0x38
 801cb3e:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801cb40:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801cb44:	a80d      	add	r0, sp, #52	@ 0x34
 801cb46:	f7fd fa97 	bl	801a078 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801cb4a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801cb4e:	a80d      	add	r0, sp, #52	@ 0x34
 801cb50:	f7fd fa92 	bl	801a078 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801cb54:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801cb58:	a80d      	add	r0, sp, #52	@ 0x34
 801cb5a:	f7fd fa8d 	bl	801a078 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801cb5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb60:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801cb64:	f023 0303 	bic.w	r3, r3, #3
 801cb68:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801cb6a:	e001      	b.n	801cb70 <lfs_dir_relocatingcommit+0x198>
 801cb6c:	f10a 0a01 	add.w	sl, sl, #1
 801cb70:	f1ba 0f02 	cmp.w	sl, #2
 801cb74:	dc07      	bgt.n	801cb86 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801cb76:	ab1a      	add	r3, sp, #104	@ 0x68
 801cb78:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801cb7c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d0f3      	beq.n	801cb6c <lfs_dir_relocatingcommit+0x194>
            return false;
 801cb84:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801cb86:	b9c4      	cbnz	r4, 801cbba <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801cb88:	aa0d      	add	r2, sp, #52	@ 0x34
 801cb8a:	4631      	mov	r1, r6
 801cb8c:	4638      	mov	r0, r7
 801cb8e:	f7fd fdc7 	bl	801a720 <lfs_dir_getgstate>
            if (err) {
 801cb92:	4682      	mov	sl, r0
 801cb94:	2800      	cmp	r0, #0
 801cb96:	f040 80ca 	bne.w	801cd2e <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801cb9a:	ab0d      	add	r3, sp, #52	@ 0x34
 801cb9c:	4a50      	ldr	r2, [pc, #320]	@ (801cce0 <lfs_dir_relocatingcommit+0x308>)
 801cb9e:	a910      	add	r1, sp, #64	@ 0x40
 801cba0:	4638      	mov	r0, r7
 801cba2:	f7ff fb45 	bl	801c230 <lfs_dir_commitattr>
            if (err) {
 801cba6:	4682      	mov	sl, r0
 801cba8:	b138      	cbz	r0, 801cbba <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801cbaa:	f110 0f1c 	cmn.w	r0, #28
 801cbae:	d0a4      	beq.n	801cafa <lfs_dir_relocatingcommit+0x122>
 801cbb0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cbb4:	f040 80bb 	bne.w	801cd2e <lfs_dir_relocatingcommit+0x356>
 801cbb8:	e79f      	b.n	801cafa <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801cbba:	a910      	add	r1, sp, #64	@ 0x40
 801cbbc:	4638      	mov	r0, r7
 801cbbe:	f7ff fb9d 	bl	801c2fc <lfs_dir_commitcrc>
        if (err) {
 801cbc2:	4682      	mov	sl, r0
 801cbc4:	b138      	cbz	r0, 801cbd6 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801cbc6:	f110 0f1c 	cmn.w	r0, #28
 801cbca:	d096      	beq.n	801cafa <lfs_dir_relocatingcommit+0x122>
 801cbcc:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cbd0:	f040 80ad 	bne.w	801cd2e <lfs_dir_relocatingcommit+0x356>
 801cbd4:	e791      	b.n	801cafa <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801cbd6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cbd8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801cbda:	6a11      	ldr	r1, [r2, #32]
 801cbdc:	fbb3 f2f1 	udiv	r2, r3, r1
 801cbe0:	fb01 3212 	mls	r2, r1, r2, r3
 801cbe4:	b97a      	cbnz	r2, 801cc06 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801cbe6:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801cbe8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cbea:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801cbec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801cbf0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801cbf4:	ca07      	ldmia	r2, {r0, r1, r2}
 801cbf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801cbfa:	2200      	movs	r2, #0
 801cbfc:	64ba      	str	r2, [r7, #72]	@ 0x48
 801cbfe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801cc00:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801cc02:	4651      	mov	r1, sl
 801cc04:	e78a      	b.n	801cb1c <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801cc06:	4b37      	ldr	r3, [pc, #220]	@ (801cce4 <lfs_dir_relocatingcommit+0x30c>)
 801cc08:	4a31      	ldr	r2, [pc, #196]	@ (801ccd0 <lfs_dir_relocatingcommit+0x2f8>)
 801cc0a:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801cc0e:	4831      	ldr	r0, [pc, #196]	@ (801ccd4 <lfs_dir_relocatingcommit+0x2fc>)
 801cc10:	f00c f9a4 	bl	8028f5c <__assert_func>
            state = LFS_OK_DROPPED;
 801cc14:	2102      	movs	r1, #2
 801cc16:	e781      	b.n	801cb1c <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801cc18:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801cc1c:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801cc20:	4584      	cmp	ip, r0
 801cc22:	d10e      	bne.n	801cc42 <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801cc24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cc28:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801cc2a:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801cc2c:	3301      	adds	r3, #1
 801cc2e:	4543      	cmp	r3, r8
 801cc30:	da34      	bge.n	801cc9c <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801cc32:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801cc36:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801cc3a:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801cc3e:	4282      	cmp	r2, r0
 801cc40:	d0ea      	beq.n	801cc18 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801cc42:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801cc46:	4282      	cmp	r2, r0
 801cc48:	d011      	beq.n	801cc6e <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801cc4a:	f240 4001 	movw	r0, #1025	@ 0x401
 801cc4e:	4282      	cmp	r2, r0
 801cc50:	d1ec      	bne.n	801cc2c <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801cc52:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801cc54:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801cc58:	428a      	cmp	r2, r1
 801cc5a:	d3e7      	bcc.n	801cc2c <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801cc5c:	3201      	adds	r2, #1
 801cc5e:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801cc60:	79a2      	ldrb	r2, [r4, #6]
 801cc62:	2a02      	cmp	r2, #2
 801cc64:	d1e2      	bne.n	801cc2c <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801cc66:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801cc68:	3201      	adds	r2, #1
 801cc6a:	62a2      	str	r2, [r4, #40]	@ 0x28
 801cc6c:	e7de      	b.n	801cc2c <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801cc6e:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801cc70:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801cc74:	4560      	cmp	r0, ip
 801cc76:	d9e8      	bls.n	801cc4a <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801cc78:	3801      	subs	r0, #1
 801cc7a:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801cc7c:	79a2      	ldrb	r2, [r4, #6]
 801cc7e:	2a02      	cmp	r2, #2
 801cc80:	d1d4      	bne.n	801cc2c <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801cc82:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801cc84:	3a01      	subs	r2, #1
 801cc86:	62a2      	str	r2, [r4, #40]	@ 0x28
 801cc88:	e7d0      	b.n	801cc2c <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801cc8a:	f104 0220 	add.w	r2, r4, #32
 801cc8e:	f104 0108 	add.w	r1, r4, #8
 801cc92:	4638      	mov	r0, r7
 801cc94:	f7fe fd24 	bl	801b6e0 <lfs_dir_fetch>
                if (err) {
 801cc98:	2800      	cmp	r0, #0
 801cc9a:	d147      	bne.n	801cd2c <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801cc9c:	88a3      	ldrh	r3, [r4, #4]
 801cc9e:	8ba1      	ldrh	r1, [r4, #28]
 801cca0:	428b      	cmp	r3, r1
 801cca2:	d321      	bcc.n	801cce8 <lfs_dir_relocatingcommit+0x310>
 801cca4:	7fe2      	ldrb	r2, [r4, #31]
 801cca6:	b1fa      	cbz	r2, 801cce8 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cca8:	6a22      	ldr	r2, [r4, #32]
 801ccaa:	6a38      	ldr	r0, [r7, #32]
 801ccac:	4282      	cmp	r2, r0
 801ccae:	d0ec      	beq.n	801cc8a <lfs_dir_relocatingcommit+0x2b2>
 801ccb0:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801ccb4:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801ccb8:	45e6      	cmp	lr, ip
 801ccba:	d0e6      	beq.n	801cc8a <lfs_dir_relocatingcommit+0x2b2>
 801ccbc:	4562      	cmp	r2, ip
 801ccbe:	d0e4      	beq.n	801cc8a <lfs_dir_relocatingcommit+0x2b2>
 801ccc0:	4570      	cmp	r0, lr
 801ccc2:	d0e2      	beq.n	801cc8a <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801ccc4:	1a5b      	subs	r3, r3, r1
 801ccc6:	80a3      	strh	r3, [r4, #4]
 801ccc8:	e7df      	b.n	801cc8a <lfs_dir_relocatingcommit+0x2b2>
 801ccca:	bf00      	nop
 801cccc:	08037f34 	.word	0x08037f34
 801ccd0:	080388ac 	.word	0x080388ac
 801ccd4:	08037bac 	.word	0x08037bac
 801ccd8:	08037f44 	.word	0x08037f44
 801ccdc:	0801c2eb 	.word	0x0801c2eb
 801cce0:	7ffffc0c 	.word	0x7ffffc0c
 801cce4:	08037e48 	.word	0x08037e48
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801cce8:	6824      	ldr	r4, [r4, #0]
 801ccea:	b1d4      	cbz	r4, 801cd22 <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ccec:	68a3      	ldr	r3, [r4, #8]
 801ccee:	459b      	cmp	fp, r3
 801ccf0:	d006      	beq.n	801cd00 <lfs_dir_relocatingcommit+0x328>
 801ccf2:	68e2      	ldr	r2, [r4, #12]
 801ccf4:	4592      	cmp	sl, r2
 801ccf6:	d003      	beq.n	801cd00 <lfs_dir_relocatingcommit+0x328>
 801ccf8:	459a      	cmp	sl, r3
 801ccfa:	d001      	beq.n	801cd00 <lfs_dir_relocatingcommit+0x328>
 801ccfc:	4593      	cmp	fp, r2
 801ccfe:	d1f3      	bne.n	801cce8 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801cd00:	f104 0c08 	add.w	ip, r4, #8
 801cd04:	46b6      	mov	lr, r6
 801cd06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cd0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cd0e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801cd12:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801cd16:	f104 0308 	add.w	r3, r4, #8
 801cd1a:	454b      	cmp	r3, r9
 801cd1c:	d0be      	beq.n	801cc9c <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801cd1e:	2300      	movs	r3, #0
 801cd20:	e785      	b.n	801cc2e <lfs_dir_relocatingcommit+0x256>
    return state;
 801cd22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cd24:	468a      	mov	sl, r1
 801cd26:	e002      	b.n	801cd2e <lfs_dir_relocatingcommit+0x356>
        return state;
 801cd28:	468a      	mov	sl, r1
 801cd2a:	e000      	b.n	801cd2e <lfs_dir_relocatingcommit+0x356>
 801cd2c:	4682      	mov	sl, r0
}
 801cd2e:	4650      	mov	r0, sl
 801cd30:	b01b      	add	sp, #108	@ 0x6c
 801cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd36:	bf00      	nop

0801cd38 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801cd38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cd3c:	b0a3      	sub	sp, #140	@ 0x8c
 801cd3e:	4605      	mov	r5, r0
 801cd40:	460e      	mov	r6, r1
 801cd42:	4690      	mov	r8, r2
 801cd44:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801cd46:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801cd48:	e003      	b.n	801cd52 <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801cd4a:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801cd4c:	2b01      	cmp	r3, #1
 801cd4e:	d012      	beq.n	801cd76 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801cd50:	6824      	ldr	r4, [r4, #0]
 801cd52:	b34c      	cbz	r4, 801cda8 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801cd54:	f104 0108 	add.w	r1, r4, #8
 801cd58:	42b1      	cmp	r1, r6
 801cd5a:	d0f9      	beq.n	801cd50 <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cd5c:	68a1      	ldr	r1, [r4, #8]
 801cd5e:	6833      	ldr	r3, [r6, #0]
 801cd60:	428b      	cmp	r3, r1
 801cd62:	d0f2      	beq.n	801cd4a <lfs_dir_orphaningcommit+0x12>
 801cd64:	68e0      	ldr	r0, [r4, #12]
 801cd66:	6872      	ldr	r2, [r6, #4]
 801cd68:	4282      	cmp	r2, r0
 801cd6a:	d0ee      	beq.n	801cd4a <lfs_dir_orphaningcommit+0x12>
 801cd6c:	428a      	cmp	r2, r1
 801cd6e:	d0ec      	beq.n	801cd4a <lfs_dir_orphaningcommit+0x12>
 801cd70:	4298      	cmp	r0, r3
 801cd72:	d1ed      	bne.n	801cd50 <lfs_dir_orphaningcommit+0x18>
 801cd74:	e7e9      	b.n	801cd4a <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801cd76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd78:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cd7c:	d0e8      	beq.n	801cd50 <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801cd7e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801cd80:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801cd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801cd84:	429a      	cmp	r2, r3
 801cd86:	d9e3      	bls.n	801cd50 <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801cd88:	4621      	mov	r1, r4
 801cd8a:	4628      	mov	r0, r5
 801cd8c:	f7fe feee 	bl	801bb6c <lfs_file_outline>
            if (err) {
 801cd90:	4607      	mov	r7, r0
 801cd92:	2800      	cmp	r0, #0
 801cd94:	f040 81bc 	bne.w	801d110 <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801cd98:	4621      	mov	r1, r4
 801cd9a:	4628      	mov	r0, r5
 801cd9c:	f7ff f866 	bl	801be6c <lfs_file_flush>
            if (err) {
 801cda0:	4607      	mov	r7, r0
 801cda2:	2800      	cmp	r0, #0
 801cda4:	d0d4      	beq.n	801cd50 <lfs_dir_orphaningcommit+0x18>
 801cda6:	e1b3      	b.n	801d110 <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801cda8:	6833      	ldr	r3, [r6, #0]
 801cdaa:	9316      	str	r3, [sp, #88]	@ 0x58
 801cdac:	6873      	ldr	r3, [r6, #4]
 801cdae:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801cdb0:	ac0e      	add	r4, sp, #56	@ 0x38
 801cdb2:	4637      	mov	r7, r6
 801cdb4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801cdb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cdb8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801cdbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801cdc0:	ab06      	add	r3, sp, #24
 801cdc2:	9301      	str	r3, [sp, #4]
 801cdc4:	f8cd 9000 	str.w	r9, [sp]
 801cdc8:	4643      	mov	r3, r8
 801cdca:	4632      	mov	r2, r6
 801cdcc:	a90e      	add	r1, sp, #56	@ 0x38
 801cdce:	4628      	mov	r0, r5
 801cdd0:	f7ff fe02 	bl	801c9d8 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801cdd4:	1e07      	subs	r7, r0, #0
 801cdd6:	f2c0 819b 	blt.w	801d110 <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cdda:	6833      	ldr	r3, [r6, #0]
 801cddc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cdde:	429a      	cmp	r2, r3
 801cde0:	d007      	beq.n	801cdf2 <lfs_dir_orphaningcommit+0xba>
 801cde2:	6870      	ldr	r0, [r6, #4]
 801cde4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801cde6:	4281      	cmp	r1, r0
 801cde8:	d003      	beq.n	801cdf2 <lfs_dir_orphaningcommit+0xba>
 801cdea:	4299      	cmp	r1, r3
 801cdec:	d001      	beq.n	801cdf2 <lfs_dir_orphaningcommit+0xba>
 801cdee:	4290      	cmp	r0, r2
 801cdf0:	d109      	bne.n	801ce06 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801cdf2:	4634      	mov	r4, r6
 801cdf4:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801cdf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cdfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cdfe:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801ce02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801ce06:	2f02      	cmp	r7, #2
 801ce08:	d001      	beq.n	801ce0e <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801ce0a:	2600      	movs	r6, #0
 801ce0c:	e0b8      	b.n	801cf80 <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801ce0e:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801ce12:	4631      	mov	r1, r6
 801ce14:	4628      	mov	r0, r5
 801ce16:	f7fd fc83 	bl	801a720 <lfs_dir_getgstate>
        if (err) {
 801ce1a:	4607      	mov	r7, r0
 801ce1c:	2800      	cmp	r0, #0
 801ce1e:	f040 8177 	bne.w	801d110 <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801ce22:	9b06      	ldr	r3, [sp, #24]
 801ce24:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801ce26:	9b07      	ldr	r3, [sp, #28]
 801ce28:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801ce2a:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801ce2e:	7df2      	ldrb	r2, [r6, #23]
 801ce30:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801ce34:	4ba2      	ldr	r3, [pc, #648]	@ (801d0c0 <lfs_dir_orphaningcommit+0x388>)
 801ce36:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801ce3a:	9318      	str	r3, [sp, #96]	@ 0x60
 801ce3c:	9119      	str	r1, [sp, #100]	@ 0x64
 801ce3e:	2300      	movs	r3, #0
 801ce40:	9301      	str	r3, [sp, #4]
 801ce42:	2301      	movs	r3, #1
 801ce44:	9300      	str	r3, [sp, #0]
 801ce46:	ab18      	add	r3, sp, #96	@ 0x60
 801ce48:	aa16      	add	r2, sp, #88	@ 0x58
 801ce4a:	a906      	add	r1, sp, #24
 801ce4c:	4628      	mov	r0, r5
 801ce4e:	f7ff fdc3 	bl	801c9d8 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801ce52:	1e07      	subs	r7, r0, #0
 801ce54:	f2c0 815c 	blt.w	801d110 <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801ce58:	ac0e      	add	r4, sp, #56	@ 0x38
 801ce5a:	ae06      	add	r6, sp, #24
 801ce5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801ce5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ce60:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801ce64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801ce68:	e7cf      	b.n	801ce0a <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801ce6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ce6c:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801ce6e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ce70:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801ce72:	799a      	ldrb	r2, [r3, #6]
 801ce74:	2a02      	cmp	r2, #2
 801ce76:	d00d      	beq.n	801ce94 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	b1db      	cbz	r3, 801ceb4 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ce7c:	689a      	ldr	r2, [r3, #8]
 801ce7e:	4291      	cmp	r1, r2
 801ce80:	d0f3      	beq.n	801ce6a <lfs_dir_orphaningcommit+0x132>
 801ce82:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801ce84:	68dc      	ldr	r4, [r3, #12]
 801ce86:	4284      	cmp	r4, r0
 801ce88:	d0ef      	beq.n	801ce6a <lfs_dir_orphaningcommit+0x132>
 801ce8a:	428c      	cmp	r4, r1
 801ce8c:	d0ed      	beq.n	801ce6a <lfs_dir_orphaningcommit+0x132>
 801ce8e:	4290      	cmp	r0, r2
 801ce90:	d1ef      	bne.n	801ce72 <lfs_dir_orphaningcommit+0x13a>
 801ce92:	e7ea      	b.n	801ce6a <lfs_dir_orphaningcommit+0x132>
 801ce94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ce96:	428a      	cmp	r2, r1
 801ce98:	d007      	beq.n	801ceaa <lfs_dir_orphaningcommit+0x172>
 801ce9a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801ce9c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801ce9e:	42a0      	cmp	r0, r4
 801cea0:	d003      	beq.n	801ceaa <lfs_dir_orphaningcommit+0x172>
 801cea2:	4288      	cmp	r0, r1
 801cea4:	d001      	beq.n	801ceaa <lfs_dir_orphaningcommit+0x172>
 801cea6:	4294      	cmp	r4, r2
 801cea8:	d1e6      	bne.n	801ce78 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801ceaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ceac:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801ceae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ceb0:	631a      	str	r2, [r3, #48]	@ 0x30
 801ceb2:	e7e1      	b.n	801ce78 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801ceb4:	aa06      	add	r2, sp, #24
 801ceb6:	a916      	add	r1, sp, #88	@ 0x58
 801ceb8:	4628      	mov	r0, r5
 801ceba:	f7fe fba5 	bl	801b608 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801cebe:	1e04      	subs	r4, r0, #0
 801cec0:	f280 8082 	bge.w	801cfc8 <lfs_dir_orphaningcommit+0x290>
 801cec4:	f114 0f02 	cmn.w	r4, #2
 801cec8:	f040 8128 	bne.w	801d11c <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801cecc:	f114 0802 	adds.w	r8, r4, #2
 801ced0:	bf18      	it	ne
 801ced2:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801ced6:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801ced8:	aa06      	add	r2, sp, #24
 801ceda:	a916      	add	r1, sp, #88	@ 0x58
 801cedc:	4628      	mov	r0, r5
 801cede:	f7ff f925 	bl	801c12c <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801cee2:	4603      	mov	r3, r0
 801cee4:	b118      	cbz	r0, 801ceee <lfs_dir_orphaningcommit+0x1b6>
 801cee6:	f110 0f02 	cmn.w	r0, #2
 801ceea:	f040 8119 	bne.w	801d120 <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801ceee:	f114 0f02 	cmn.w	r4, #2
 801cef2:	f000 80d6 	beq.w	801d0a2 <lfs_dir_orphaningcommit+0x36a>
 801cef6:	f113 0f02 	cmn.w	r3, #2
 801cefa:	f000 80cb 	beq.w	801d094 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801cefe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801cf00:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	f040 80d1 	bne.w	801d0ac <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801cf0a:	a906      	add	r1, sp, #24
 801cf0c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801cf10:	f7fd f8c4 	bl	801a09c <lfs_gstate_hasmovehere>
 801cf14:	2800      	cmp	r0, #0
 801cf16:	f040 80e1 	bne.w	801d0dc <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801cf1a:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801cf1e:	9b06      	ldr	r3, [sp, #24]
 801cf20:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801cf22:	9b07      	ldr	r3, [sp, #28]
 801cf24:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801cf26:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801cf2a:	429c      	cmp	r4, r3
 801cf2c:	f000 80ec 	beq.w	801d108 <lfs_dir_orphaningcommit+0x3d0>
 801cf30:	02a3      	lsls	r3, r4, #10
 801cf32:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801cf36:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801cf3a:	931e      	str	r3, [sp, #120]	@ 0x78
 801cf3c:	2100      	movs	r1, #0
 801cf3e:	911f      	str	r1, [sp, #124]	@ 0x7c
 801cf40:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801cf44:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801cf48:	4b5d      	ldr	r3, [pc, #372]	@ (801d0c0 <lfs_dir_orphaningcommit+0x388>)
 801cf4a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801cf4e:	9320      	str	r3, [sp, #128]	@ 0x80
 801cf50:	ab0e      	add	r3, sp, #56	@ 0x38
 801cf52:	9321      	str	r3, [sp, #132]	@ 0x84
 801cf54:	9101      	str	r1, [sp, #4]
 801cf56:	2302      	movs	r3, #2
 801cf58:	9300      	str	r3, [sp, #0]
 801cf5a:	ab1e      	add	r3, sp, #120	@ 0x78
 801cf5c:	aa16      	add	r2, sp, #88	@ 0x58
 801cf5e:	a906      	add	r1, sp, #24
 801cf60:	4628      	mov	r0, r5
 801cf62:	f7ff fd39 	bl	801c9d8 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801cf66:	1e07      	subs	r7, r0, #0
 801cf68:	f2c0 80d2 	blt.w	801d110 <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801cf6c:	ac0e      	add	r4, sp, #56	@ 0x38
 801cf6e:	f10d 0c18 	add.w	ip, sp, #24
 801cf72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cf76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cf78:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801cf7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801cf80:	2f01      	cmp	r7, #1
 801cf82:	f040 80c3 	bne.w	801d10c <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801cf86:	4b4f      	ldr	r3, [pc, #316]	@ (801d0c4 <lfs_dir_orphaningcommit+0x38c>)
 801cf88:	9303      	str	r3, [sp, #12]
 801cf8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cf8c:	9302      	str	r3, [sp, #8]
 801cf8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cf90:	9301      	str	r3, [sp, #4]
 801cf92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cf94:	9300      	str	r3, [sp, #0]
 801cf96:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cf98:	f640 128c 	movw	r2, #2444	@ 0x98c
 801cf9c:	494a      	ldr	r1, [pc, #296]	@ (801d0c8 <lfs_dir_orphaningcommit+0x390>)
 801cf9e:	484b      	ldr	r0, [pc, #300]	@ (801d0cc <lfs_dir_orphaningcommit+0x394>)
 801cfa0:	f00c f810 	bl	8028fc4 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cfa4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801cfa6:	6a2b      	ldr	r3, [r5, #32]
 801cfa8:	428b      	cmp	r3, r1
 801cfaa:	d007      	beq.n	801cfbc <lfs_dir_orphaningcommit+0x284>
 801cfac:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801cfae:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801cfb0:	4282      	cmp	r2, r0
 801cfb2:	d003      	beq.n	801cfbc <lfs_dir_orphaningcommit+0x284>
 801cfb4:	428a      	cmp	r2, r1
 801cfb6:	d001      	beq.n	801cfbc <lfs_dir_orphaningcommit+0x284>
 801cfb8:	4298      	cmp	r0, r3
 801cfba:	d103      	bne.n	801cfc4 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801cfbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cfbe:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801cfc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cfc2:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801cfc4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801cfc6:	e758      	b.n	801ce7a <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801cfc8:	f114 0802 	adds.w	r8, r4, #2
 801cfcc:	bf18      	it	ne
 801cfce:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801cfd2:	2101      	movs	r1, #1
 801cfd4:	4628      	mov	r0, r5
 801cfd6:	f7fd f997 	bl	801a308 <lfs_fs_preporphans>
            if (err) {
 801cfda:	4607      	mov	r7, r0
 801cfdc:	2800      	cmp	r0, #0
 801cfde:	f040 8097 	bne.w	801d110 <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801cfe2:	a906      	add	r1, sp, #24
 801cfe4:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801cfe8:	f7fd f858 	bl	801a09c <lfs_gstate_hasmovehere>
 801cfec:	2800      	cmp	r0, #0
 801cfee:	d131      	bne.n	801d054 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801cff0:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801cff2:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801cff6:	9b06      	ldr	r3, [sp, #24]
 801cff8:	9304      	str	r3, [sp, #16]
 801cffa:	9b07      	ldr	r3, [sp, #28]
 801cffc:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801cffe:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d002:	429f      	cmp	r7, r3
 801d004:	d044      	beq.n	801d090 <lfs_dir_orphaningcommit+0x358>
 801d006:	02bb      	lsls	r3, r7, #10
 801d008:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d00c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d010:	931a      	str	r3, [sp, #104]	@ 0x68
 801d012:	2300      	movs	r3, #0
 801d014:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d016:	921c      	str	r2, [sp, #112]	@ 0x70
 801d018:	aa0e      	add	r2, sp, #56	@ 0x38
 801d01a:	921d      	str	r2, [sp, #116]	@ 0x74
 801d01c:	9301      	str	r3, [sp, #4]
 801d01e:	2302      	movs	r3, #2
 801d020:	9300      	str	r3, [sp, #0]
 801d022:	ab1a      	add	r3, sp, #104	@ 0x68
 801d024:	aa04      	add	r2, sp, #16
 801d026:	a906      	add	r1, sp, #24
 801d028:	4628      	mov	r0, r5
 801d02a:	f7ff fcd5 	bl	801c9d8 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801d02e:	1e07      	subs	r7, r0, #0
 801d030:	db6e      	blt.n	801d110 <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801d032:	2f01      	cmp	r7, #1
 801d034:	f47f af50 	bne.w	801ced8 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801d038:	9b04      	ldr	r3, [sp, #16]
 801d03a:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801d03c:	9b05      	ldr	r3, [sp, #20]
 801d03e:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801d040:	ac0e      	add	r4, sp, #56	@ 0x38
 801d042:	ae06      	add	r6, sp, #24
 801d044:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d048:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801d04c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801d050:	2601      	movs	r6, #1
 801d052:	e795      	b.n	801cf80 <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801d054:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801d056:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801d05a:	4b1a      	ldr	r3, [pc, #104]	@ (801d0c4 <lfs_dir_orphaningcommit+0x38c>)
 801d05c:	9302      	str	r3, [sp, #8]
 801d05e:	9701      	str	r7, [sp, #4]
 801d060:	9b07      	ldr	r3, [sp, #28]
 801d062:	9300      	str	r3, [sp, #0]
 801d064:	9b06      	ldr	r3, [sp, #24]
 801d066:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801d06a:	4917      	ldr	r1, [pc, #92]	@ (801d0c8 <lfs_dir_orphaningcommit+0x390>)
 801d06c:	4818      	ldr	r0, [pc, #96]	@ (801d0d0 <lfs_dir_orphaningcommit+0x398>)
 801d06e:	f00b ffa9 	bl	8028fc4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801d072:	2200      	movs	r2, #0
 801d074:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801d078:	4628      	mov	r0, r5
 801d07a:	f7fd f8f5 	bl	801a268 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801d07e:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801d082:	42bb      	cmp	r3, r7
 801d084:	d902      	bls.n	801d08c <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801d086:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801d08a:	e7b4      	b.n	801cff6 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801d08c:	4622      	mov	r2, r4
 801d08e:	e7b2      	b.n	801cff6 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801d090:	2300      	movs	r3, #0
 801d092:	e7bd      	b.n	801d010 <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801d094:	4b0f      	ldr	r3, [pc, #60]	@ (801d0d4 <lfs_dir_orphaningcommit+0x39c>)
 801d096:	4a10      	ldr	r2, [pc, #64]	@ (801d0d8 <lfs_dir_orphaningcommit+0x3a0>)
 801d098:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801d09c:	480a      	ldr	r0, [pc, #40]	@ (801d0c8 <lfs_dir_orphaningcommit+0x390>)
 801d09e:	f00b ff5d 	bl	8028f5c <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801d0a2:	f113 0f02 	cmn.w	r3, #2
 801d0a6:	f47f af2a 	bne.w	801cefe <lfs_dir_orphaningcommit+0x1c6>
 801d0aa:	e769      	b.n	801cf80 <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801d0ac:	f1c8 0100 	rsb	r1, r8, #0
 801d0b0:	4628      	mov	r0, r5
 801d0b2:	f7fd f929 	bl	801a308 <lfs_fs_preporphans>
                if (err) {
 801d0b6:	4607      	mov	r7, r0
 801d0b8:	2800      	cmp	r0, #0
 801d0ba:	f43f af26 	beq.w	801cf0a <lfs_dir_orphaningcommit+0x1d2>
 801d0be:	e027      	b.n	801d110 <lfs_dir_orphaningcommit+0x3d8>
 801d0c0:	000ffc08 	.word	0x000ffc08
 801d0c4:	08035a68 	.word	0x08035a68
 801d0c8:	08037bac 	.word	0x08037bac
 801d0cc:	08037f4c 	.word	0x08037f4c
 801d0d0:	08037f88 	.word	0x08037f88
 801d0d4:	08037fcc 	.word	0x08037fcc
 801d0d8:	08038908 	.word	0x08038908
                moveid = lfs_tag_id(lfs->gstate.tag);
 801d0dc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801d0de:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801d0e2:	4b10      	ldr	r3, [pc, #64]	@ (801d124 <lfs_dir_orphaningcommit+0x3ec>)
 801d0e4:	9302      	str	r3, [sp, #8]
 801d0e6:	9401      	str	r4, [sp, #4]
 801d0e8:	9b07      	ldr	r3, [sp, #28]
 801d0ea:	9300      	str	r3, [sp, #0]
 801d0ec:	9b06      	ldr	r3, [sp, #24]
 801d0ee:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801d0f2:	490d      	ldr	r1, [pc, #52]	@ (801d128 <lfs_dir_orphaningcommit+0x3f0>)
 801d0f4:	480d      	ldr	r0, [pc, #52]	@ (801d12c <lfs_dir_orphaningcommit+0x3f4>)
 801d0f6:	f00b ff65 	bl	8028fc4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801d0fa:	2200      	movs	r2, #0
 801d0fc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801d100:	4628      	mov	r0, r5
 801d102:	f7fd f8b1 	bl	801a268 <lfs_fs_prepmove>
 801d106:	e70a      	b.n	801cf1e <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801d108:	2300      	movs	r3, #0
 801d10a:	e716      	b.n	801cf3a <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801d10c:	b926      	cbnz	r6, 801d118 <lfs_dir_orphaningcommit+0x3e0>
 801d10e:	2700      	movs	r7, #0
}
 801d110:	4638      	mov	r0, r7
 801d112:	b023      	add	sp, #140	@ 0x8c
 801d114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801d118:	2703      	movs	r7, #3
 801d11a:	e7f9      	b.n	801d110 <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801d11c:	4627      	mov	r7, r4
 801d11e:	e7f7      	b.n	801d110 <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801d120:	4607      	mov	r7, r0
 801d122:	e7f5      	b.n	801d110 <lfs_dir_orphaningcommit+0x3d8>
 801d124:	08035a68 	.word	0x08035a68
 801d128:	08037bac 	.word	0x08037bac
 801d12c:	08037f88 	.word	0x08037f88

0801d130 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801d130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d134:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801d136:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801d138:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	f000 80ea 	beq.w	801d316 <lfs_fs_deorphan+0x1e6>
 801d142:	4605      	mov	r5, r0
 801d144:	460f      	mov	r7, r1
    int pass = 0;
 801d146:	2600      	movs	r6, #0
    while (pass < 2) {
 801d148:	2e01      	cmp	r6, #1
 801d14a:	f300 80db 	bgt.w	801d304 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801d14e:	2220      	movs	r2, #32
 801d150:	2100      	movs	r1, #0
 801d152:	a806      	add	r0, sp, #24
 801d154:	f00e fc54 	bl	802ba00 <memset>
 801d158:	2301      	movs	r3, #1
 801d15a:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801d15e:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801d160:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801d164:	e0bd      	b.n	801d2e2 <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801d166:	aa16      	add	r2, sp, #88	@ 0x58
 801d168:	a90c      	add	r1, sp, #48	@ 0x30
 801d16a:	4628      	mov	r0, r5
 801d16c:	f7fe fa4c 	bl	801b608 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801d170:	1e04      	subs	r4, r0, #0
 801d172:	db39      	blt.n	801d1e8 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801d174:	b916      	cbnz	r6, 801d17c <lfs_fs_deorphan+0x4c>
 801d176:	f114 0f02 	cmn.w	r4, #2
 801d17a:	d139      	bne.n	801d1f0 <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801d17c:	2e01      	cmp	r6, #1
 801d17e:	f040 80a4 	bne.w	801d2ca <lfs_fs_deorphan+0x19a>
 801d182:	f114 0f02 	cmn.w	r4, #2
 801d186:	f040 80a0 	bne.w	801d2ca <lfs_fs_deorphan+0x19a>
 801d18a:	2f00      	cmp	r7, #0
 801d18c:	f000 809d 	beq.w	801d2ca <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801d190:	4b63      	ldr	r3, [pc, #396]	@ (801d320 <lfs_fs_deorphan+0x1f0>)
 801d192:	9301      	str	r3, [sp, #4]
 801d194:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d196:	9300      	str	r3, [sp, #0]
 801d198:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d19a:	f241 329c 	movw	r2, #5020	@ 0x139c
 801d19e:	4961      	ldr	r1, [pc, #388]	@ (801d324 <lfs_fs_deorphan+0x1f4>)
 801d1a0:	4861      	ldr	r0, [pc, #388]	@ (801d328 <lfs_fs_deorphan+0x1f8>)
 801d1a2:	f00b ff0f 	bl	8028fc4 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801d1a6:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801d1aa:	a90e      	add	r1, sp, #56	@ 0x38
 801d1ac:	4628      	mov	r0, r5
 801d1ae:	f7fd fab7 	bl	801a720 <lfs_dir_getgstate>
                    if (err) {
 801d1b2:	4604      	mov	r4, r0
 801d1b4:	2800      	cmp	r0, #0
 801d1b6:	f040 80af 	bne.w	801d318 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801d1ba:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801d1be:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801d1c2:	4b5a      	ldr	r3, [pc, #360]	@ (801d32c <lfs_fs_deorphan+0x1fc>)
 801d1c4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801d1c8:	9322      	str	r3, [sp, #136]	@ 0x88
 801d1ca:	ab14      	add	r3, sp, #80	@ 0x50
 801d1cc:	9323      	str	r3, [sp, #140]	@ 0x8c
 801d1ce:	2301      	movs	r3, #1
 801d1d0:	aa22      	add	r2, sp, #136	@ 0x88
 801d1d2:	a906      	add	r1, sp, #24
 801d1d4:	4628      	mov	r0, r5
 801d1d6:	f7ff fdaf 	bl	801cd38 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801d1da:	1e04      	subs	r4, r0, #0
 801d1dc:	f2c0 809c 	blt.w	801d318 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801d1e0:	2c03      	cmp	r4, #3
 801d1e2:	d17e      	bne.n	801d2e2 <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801d1e4:	46b8      	mov	r8, r7
                    continue;
 801d1e6:	e07c      	b.n	801d2e2 <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801d1e8:	f114 0f02 	cmn.w	r4, #2
 801d1ec:	d0c2      	beq.n	801d174 <lfs_fs_deorphan+0x44>
 801d1ee:	e093      	b.n	801d318 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801d1f0:	ab04      	add	r3, sp, #16
 801d1f2:	9300      	str	r3, [sp, #0]
 801d1f4:	4623      	mov	r3, r4
 801d1f6:	4a4e      	ldr	r2, [pc, #312]	@ (801d330 <lfs_fs_deorphan+0x200>)
 801d1f8:	a916      	add	r1, sp, #88	@ 0x58
 801d1fa:	4628      	mov	r0, r5
 801d1fc:	f7fd fa82 	bl	801a704 <lfs_dir_get>
                    if (state < 0) {
 801d200:	2800      	cmp	r0, #0
 801d202:	db50      	blt.n	801d2a6 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801d204:	a90c      	add	r1, sp, #48	@ 0x30
 801d206:	a804      	add	r0, sp, #16
 801d208:	f7fc ff12 	bl	801a030 <lfs_pair_issync>
 801d20c:	2800      	cmp	r0, #0
 801d20e:	d1b5      	bne.n	801d17c <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801d210:	4b43      	ldr	r3, [pc, #268]	@ (801d320 <lfs_fs_deorphan+0x1f0>)
 801d212:	9303      	str	r3, [sp, #12]
 801d214:	9b05      	ldr	r3, [sp, #20]
 801d216:	9302      	str	r3, [sp, #8]
 801d218:	9b04      	ldr	r3, [sp, #16]
 801d21a:	9301      	str	r3, [sp, #4]
 801d21c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d21e:	9300      	str	r3, [sp, #0]
 801d220:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d222:	f241 3271 	movw	r2, #4977	@ 0x1371
 801d226:	493f      	ldr	r1, [pc, #252]	@ (801d324 <lfs_fs_deorphan+0x1f4>)
 801d228:	4842      	ldr	r0, [pc, #264]	@ (801d334 <lfs_fs_deorphan+0x204>)
 801d22a:	f00b fecb 	bl	8028fc4 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801d22e:	a906      	add	r1, sp, #24
 801d230:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801d234:	f7fc ff32 	bl	801a09c <lfs_gstate_hasmovehere>
 801d238:	b9a0      	cbnz	r0, 801d264 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801d23a:	2300      	movs	r3, #0
 801d23c:	931e      	str	r3, [sp, #120]	@ 0x78
 801d23e:	2300      	movs	r3, #0
 801d240:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d242:	4b3d      	ldr	r3, [pc, #244]	@ (801d338 <lfs_fs_deorphan+0x208>)
 801d244:	9320      	str	r3, [sp, #128]	@ 0x80
 801d246:	ab04      	add	r3, sp, #16
 801d248:	9321      	str	r3, [sp, #132]	@ 0x84
 801d24a:	2302      	movs	r3, #2
 801d24c:	aa1e      	add	r2, sp, #120	@ 0x78
 801d24e:	a906      	add	r1, sp, #24
 801d250:	4628      	mov	r0, r5
 801d252:	f7ff fd71 	bl	801cd38 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801d256:	1e04      	subs	r4, r0, #0
 801d258:	db5e      	blt.n	801d318 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801d25a:	2c03      	cmp	r4, #3
 801d25c:	d141      	bne.n	801d2e2 <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801d25e:	f04f 0801 	mov.w	r8, #1
                        continue;
 801d262:	e03e      	b.n	801d2e2 <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801d264:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801d266:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801d26a:	4b2d      	ldr	r3, [pc, #180]	@ (801d320 <lfs_fs_deorphan+0x1f0>)
 801d26c:	9302      	str	r3, [sp, #8]
 801d26e:	9401      	str	r4, [sp, #4]
 801d270:	9b07      	ldr	r3, [sp, #28]
 801d272:	9300      	str	r3, [sp, #0]
 801d274:	9b06      	ldr	r3, [sp, #24]
 801d276:	f241 327c 	movw	r2, #4988	@ 0x137c
 801d27a:	492a      	ldr	r1, [pc, #168]	@ (801d324 <lfs_fs_deorphan+0x1f4>)
 801d27c:	482f      	ldr	r0, [pc, #188]	@ (801d33c <lfs_fs_deorphan+0x20c>)
 801d27e:	f00b fea1 	bl	8028fc4 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801d282:	2200      	movs	r2, #0
 801d284:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801d288:	4628      	mov	r0, r5
 801d28a:	f7fc ffed 	bl	801a268 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801d28e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d292:	429c      	cmp	r4, r3
 801d294:	d005      	beq.n	801d2a2 <lfs_fs_deorphan+0x172>
 801d296:	02a3      	lsls	r3, r4, #10
 801d298:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d29c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d2a0:	e7cc      	b.n	801d23c <lfs_fs_deorphan+0x10c>
 801d2a2:	2300      	movs	r3, #0
 801d2a4:	e7ca      	b.n	801d23c <lfs_fs_deorphan+0x10c>
                        return state;
 801d2a6:	4604      	mov	r4, r0
 801d2a8:	e036      	b.n	801d318 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d2aa:	2301      	movs	r3, #1
 801d2ac:	e000      	b.n	801d2b0 <lfs_fs_deorphan+0x180>
 801d2ae:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801d2b0:	bb0b      	cbnz	r3, 801d2f6 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801d2b2:	aa0c      	add	r2, sp, #48	@ 0x30
 801d2b4:	a90e      	add	r1, sp, #56	@ 0x38
 801d2b6:	4628      	mov	r0, r5
 801d2b8:	f7fe fa12 	bl	801b6e0 <lfs_dir_fetch>
            if (err) {
 801d2bc:	4604      	mov	r4, r0
 801d2be:	bb58      	cbnz	r0, 801d318 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801d2c0:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	f43f af4e 	beq.w	801d166 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801d2ca:	f10d 0c18 	add.w	ip, sp, #24
 801d2ce:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801d2d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d2d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d2da:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801d2de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d2e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d2e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d2e8:	d0e1      	beq.n	801d2ae <lfs_fs_deorphan+0x17e>
 801d2ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d2ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d2f0:	d0db      	beq.n	801d2aa <lfs_fs_deorphan+0x17a>
 801d2f2:	2300      	movs	r3, #0
 801d2f4:	e7dc      	b.n	801d2b0 <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801d2f6:	f1b8 0f00 	cmp.w	r8, #0
 801d2fa:	d101      	bne.n	801d300 <lfs_fs_deorphan+0x1d0>
 801d2fc:	3601      	adds	r6, #1
 801d2fe:	e723      	b.n	801d148 <lfs_fs_deorphan+0x18>
 801d300:	2600      	movs	r6, #0
 801d302:	e721      	b.n	801d148 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801d304:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801d308:	4249      	negs	r1, r1
 801d30a:	b249      	sxtb	r1, r1
 801d30c:	4628      	mov	r0, r5
 801d30e:	f7fc fffb 	bl	801a308 <lfs_fs_preporphans>
 801d312:	4604      	mov	r4, r0
 801d314:	e000      	b.n	801d318 <lfs_fs_deorphan+0x1e8>
        return 0;
 801d316:	2400      	movs	r4, #0
}
 801d318:	4620      	mov	r0, r4
 801d31a:	b024      	add	sp, #144	@ 0x90
 801d31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d320:	08035a68 	.word	0x08035a68
 801d324:	08037bac 	.word	0x08037bac
 801d328:	08038080 	.word	0x08038080
 801d32c:	000ffc08 	.word	0x000ffc08
 801d330:	7ffffc00 	.word	0x7ffffc00
 801d334:	08037ff4 	.word	0x08037ff4
 801d338:	600ffc08 	.word	0x600ffc08
 801d33c:	08038038 	.word	0x08038038

0801d340 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801d340:	b510      	push	{r4, lr}
 801d342:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801d344:	f7ff fcf8 	bl	801cd38 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801d348:	2800      	cmp	r0, #0
 801d34a:	db00      	blt.n	801d34e <lfs_dir_commit+0xe>
    if (orphans) {
 801d34c:	b900      	cbnz	r0, 801d350 <lfs_dir_commit+0x10>
}
 801d34e:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801d350:	2100      	movs	r1, #0
 801d352:	4620      	mov	r0, r4
 801d354:	f7ff feec 	bl	801d130 <lfs_fs_deorphan>
        if (err) {
 801d358:	e7f9      	b.n	801d34e <lfs_dir_commit+0xe>
	...

0801d35c <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801d35c:	b530      	push	{r4, r5, lr}
 801d35e:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801d360:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801d362:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801d366:	d103      	bne.n	801d370 <lfs_fs_desuperblock+0x14>
        return 0;
 801d368:	2500      	movs	r5, #0
}
 801d36a:	4628      	mov	r0, r5
 801d36c:	b013      	add	sp, #76	@ 0x4c
 801d36e:	bd30      	pop	{r4, r5, pc}
 801d370:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801d372:	4b1a      	ldr	r3, [pc, #104]	@ (801d3dc <lfs_fs_desuperblock+0x80>)
 801d374:	9301      	str	r3, [sp, #4]
 801d376:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801d378:	9300      	str	r3, [sp, #0]
 801d37a:	6a03      	ldr	r3, [r0, #32]
 801d37c:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801d380:	4917      	ldr	r1, [pc, #92]	@ (801d3e0 <lfs_fs_desuperblock+0x84>)
 801d382:	4818      	ldr	r0, [pc, #96]	@ (801d3e4 <lfs_fs_desuperblock+0x88>)
 801d384:	f00b fe1e 	bl	8028fc4 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801d388:	f104 0220 	add.w	r2, r4, #32
 801d38c:	a908      	add	r1, sp, #32
 801d38e:	4620      	mov	r0, r4
 801d390:	f7fe f9a6 	bl	801b6e0 <lfs_dir_fetch>
    if (err) {
 801d394:	4605      	mov	r5, r0
 801d396:	2800      	cmp	r0, #0
 801d398:	d1e7      	bne.n	801d36a <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801d39a:	4620      	mov	r0, r4
 801d39c:	f7fc feb6 	bl	801a10c <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801d3a0:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801d3a2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801d3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801d3a6:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801d3a8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801d3aa:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801d3ac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801d3ae:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801d3b0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801d3b2:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801d3b4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801d3b6:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801d3b8:	4b0b      	ldr	r3, [pc, #44]	@ (801d3e8 <lfs_fs_desuperblock+0x8c>)
 801d3ba:	9310      	str	r3, [sp, #64]	@ 0x40
 801d3bc:	ab02      	add	r3, sp, #8
 801d3be:	9311      	str	r3, [sp, #68]	@ 0x44
 801d3c0:	2301      	movs	r3, #1
 801d3c2:	aa10      	add	r2, sp, #64	@ 0x40
 801d3c4:	a908      	add	r1, sp, #32
 801d3c6:	4620      	mov	r0, r4
 801d3c8:	f7ff ffba 	bl	801d340 <lfs_dir_commit>
    if (err) {
 801d3cc:	4605      	mov	r5, r0
 801d3ce:	2800      	cmp	r0, #0
 801d3d0:	d1cb      	bne.n	801d36a <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801d3d2:	2100      	movs	r1, #0
 801d3d4:	4620      	mov	r0, r4
 801d3d6:	f7fc ff40 	bl	801a25a <lfs_fs_prepsuperblock>
    return 0;
 801d3da:	e7c6      	b.n	801d36a <lfs_fs_desuperblock+0xe>
 801d3dc:	08035a68 	.word	0x08035a68
 801d3e0:	08037bac 	.word	0x08037bac
 801d3e4:	080380b0 	.word	0x080380b0
 801d3e8:	20100018 	.word	0x20100018

0801d3ec <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801d3ec:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801d3ee:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801d3f0:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801d3f4:	d101      	bne.n	801d3fa <lfs_fs_demove+0xe>
        return 0;
 801d3f6:	2000      	movs	r0, #0
}
 801d3f8:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801d3fa:	b530      	push	{r4, r5, lr}
 801d3fc:	b08f      	sub	sp, #60	@ 0x3c
 801d3fe:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801d400:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801d404:	4a1d      	ldr	r2, [pc, #116]	@ (801d47c <lfs_fs_demove+0x90>)
 801d406:	9202      	str	r2, [sp, #8]
 801d408:	9301      	str	r3, [sp, #4]
 801d40a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801d40c:	9300      	str	r3, [sp, #0]
 801d40e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801d410:	f241 3224 	movw	r2, #4900	@ 0x1324
 801d414:	491a      	ldr	r1, [pc, #104]	@ (801d480 <lfs_fs_demove+0x94>)
 801d416:	481b      	ldr	r0, [pc, #108]	@ (801d484 <lfs_fs_demove+0x98>)
 801d418:	f00b fdd4 	bl	8028fc4 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801d41c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801d41e:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801d422:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801d426:	4293      	cmp	r3, r2
 801d428:	d108      	bne.n	801d43c <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801d42a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801d42e:	a904      	add	r1, sp, #16
 801d430:	4620      	mov	r0, r4
 801d432:	f7fe f955 	bl	801b6e0 <lfs_dir_fetch>
    if (err) {
 801d436:	b140      	cbz	r0, 801d44a <lfs_fs_demove+0x5e>
}
 801d438:	b00f      	add	sp, #60	@ 0x3c
 801d43a:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801d43c:	4b12      	ldr	r3, [pc, #72]	@ (801d488 <lfs_fs_demove+0x9c>)
 801d43e:	4a13      	ldr	r2, [pc, #76]	@ (801d48c <lfs_fs_demove+0xa0>)
 801d440:	f241 312b 	movw	r1, #4907	@ 0x132b
 801d444:	480e      	ldr	r0, [pc, #56]	@ (801d480 <lfs_fs_demove+0x94>)
 801d446:	f00b fd89 	bl	8028f5c <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801d44a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801d44c:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801d450:	2200      	movs	r2, #0
 801d452:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801d456:	4620      	mov	r0, r4
 801d458:	f7fc ff06 	bl	801a268 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801d45c:	02ab      	lsls	r3, r5, #10
 801d45e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d462:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d466:	930c      	str	r3, [sp, #48]	@ 0x30
 801d468:	2300      	movs	r3, #0
 801d46a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d46c:	2301      	movs	r3, #1
 801d46e:	aa0c      	add	r2, sp, #48	@ 0x30
 801d470:	a904      	add	r1, sp, #16
 801d472:	4620      	mov	r0, r4
 801d474:	f7ff ff64 	bl	801d340 <lfs_dir_commit>
    if (err) {
 801d478:	e7de      	b.n	801d438 <lfs_fs_demove+0x4c>
 801d47a:	bf00      	nop
 801d47c:	08035a68 	.word	0x08035a68
 801d480:	08037bac 	.word	0x08037bac
 801d484:	080380e4 	.word	0x080380e4
 801d488:	08038118 	.word	0x08038118
 801d48c:	0803886c 	.word	0x0803886c

0801d490 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801d490:	b510      	push	{r4, lr}
 801d492:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801d494:	f7ff ff62 	bl	801d35c <lfs_fs_desuperblock>
    if (err) {
 801d498:	4603      	mov	r3, r0
 801d49a:	b108      	cbz	r0, 801d4a0 <lfs_fs_forceconsistency+0x10>
}
 801d49c:	4618      	mov	r0, r3
 801d49e:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801d4a0:	4620      	mov	r0, r4
 801d4a2:	f7ff ffa3 	bl	801d3ec <lfs_fs_demove>
    if (err) {
 801d4a6:	4603      	mov	r3, r0
 801d4a8:	2800      	cmp	r0, #0
 801d4aa:	d1f7      	bne.n	801d49c <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801d4ac:	2101      	movs	r1, #1
 801d4ae:	4620      	mov	r0, r4
 801d4b0:	f7ff fe3e 	bl	801d130 <lfs_fs_deorphan>
 801d4b4:	4603      	mov	r3, r0
    if (err) {
 801d4b6:	e7f1      	b.n	801d49c <lfs_fs_forceconsistency+0xc>

0801d4b8 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801d4b8:	b570      	push	{r4, r5, r6, lr}
 801d4ba:	b082      	sub	sp, #8
 801d4bc:	4605      	mov	r5, r0
 801d4be:	460e      	mov	r6, r1
 801d4c0:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801d4c2:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801d4c6:	4621      	mov	r1, r4
 801d4c8:	f7fd f92a 	bl	801a720 <lfs_dir_getgstate>
    if (err) {
 801d4cc:	b108      	cbz	r0, 801d4d2 <lfs_dir_drop+0x1a>
}
 801d4ce:	b002      	add	sp, #8
 801d4d0:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801d4d2:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801d4d6:	7de2      	ldrb	r2, [r4, #23]
 801d4d8:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801d4dc:	4b05      	ldr	r3, [pc, #20]	@ (801d4f4 <lfs_dir_drop+0x3c>)
 801d4de:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801d4e2:	9300      	str	r3, [sp, #0]
 801d4e4:	9101      	str	r1, [sp, #4]
 801d4e6:	2301      	movs	r3, #1
 801d4e8:	466a      	mov	r2, sp
 801d4ea:	4631      	mov	r1, r6
 801d4ec:	4628      	mov	r0, r5
 801d4ee:	f7ff ff27 	bl	801d340 <lfs_dir_commit>
    if (err) {
 801d4f2:	e7ec      	b.n	801d4ce <lfs_dir_drop+0x16>
 801d4f4:	000ffc08 	.word	0x000ffc08

0801d4f8 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801d4f8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801d4fa:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801d4fe:	d001      	beq.n	801d504 <lfs_file_sync_+0xc>
        return 0;
 801d500:	2000      	movs	r0, #0
}
 801d502:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801d504:	b530      	push	{r4, r5, lr}
 801d506:	b087      	sub	sp, #28
 801d508:	4605      	mov	r5, r0
 801d50a:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801d50c:	f7fe fcae 	bl	801be6c <lfs_file_flush>
    if (err) {
 801d510:	2800      	cmp	r0, #0
 801d512:	d136      	bne.n	801d582 <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801d514:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d516:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801d51a:	d036      	beq.n	801d58a <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d51c:	68a2      	ldr	r2, [r4, #8]
 801d51e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d522:	d036      	beq.n	801d592 <lfs_file_sync_+0x9a>
 801d524:	68e2      	ldr	r2, [r4, #12]
 801d526:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d52a:	d030      	beq.n	801d58e <lfs_file_sync_+0x96>
 801d52c:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801d52e:	f012 0f01 	tst.w	r2, #1
 801d532:	d12a      	bne.n	801d58a <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801d534:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d538:	d02d      	beq.n	801d596 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801d53a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d53c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d540:	d033      	beq.n	801d5aa <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801d542:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801d544:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801d546:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801d54a:	88a3      	ldrh	r3, [r4, #4]
 801d54c:	029b      	lsls	r3, r3, #10
 801d54e:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801d552:	4302      	orrs	r2, r0
 801d554:	9202      	str	r2, [sp, #8]
 801d556:	9103      	str	r1, [sp, #12]
 801d558:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801d55a:	6891      	ldr	r1, [r2, #8]
 801d55c:	430b      	orrs	r3, r1
 801d55e:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801d562:	9304      	str	r3, [sp, #16]
 801d564:	6853      	ldr	r3, [r2, #4]
 801d566:	9305      	str	r3, [sp, #20]
 801d568:	2302      	movs	r3, #2
 801d56a:	aa02      	add	r2, sp, #8
 801d56c:	f104 0108 	add.w	r1, r4, #8
 801d570:	4628      	mov	r0, r5
 801d572:	f7ff fee5 	bl	801d340 <lfs_dir_commit>
        if (err) {
 801d576:	bb20      	cbnz	r0, 801d5c2 <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801d578:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d57a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d57e:	6323      	str	r3, [r4, #48]	@ 0x30
 801d580:	e003      	b.n	801d58a <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801d582:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d584:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d588:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801d58a:	b007      	add	sp, #28
 801d58c:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d58e:	2201      	movs	r2, #1
 801d590:	e7cd      	b.n	801d52e <lfs_file_sync_+0x36>
 801d592:	2201      	movs	r2, #1
 801d594:	e7cb      	b.n	801d52e <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801d596:	2300      	movs	r3, #0
 801d598:	462a      	mov	r2, r5
 801d59a:	f105 0110 	add.w	r1, r5, #16
 801d59e:	4628      	mov	r0, r5
 801d5a0:	f7fd fc82 	bl	801aea8 <lfs_bd_sync>
            if (err) {
 801d5a4:	2800      	cmp	r0, #0
 801d5a6:	d0c8      	beq.n	801d53a <lfs_file_sync_+0x42>
 801d5a8:	e7ef      	b.n	801d58a <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801d5aa:	466b      	mov	r3, sp
 801d5ac:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801d5b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d5b4:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801d5b8:	2008      	movs	r0, #8
            buffer = &ctz;
 801d5ba:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801d5bc:	f240 2202 	movw	r2, #514	@ 0x202
 801d5c0:	e7c3      	b.n	801d54a <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801d5c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d5c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d5c8:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801d5ca:	e7de      	b.n	801d58a <lfs_file_sync_+0x92>

0801d5cc <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801d5cc:	b510      	push	{r4, lr}
 801d5ce:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801d5d0:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801d5d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d5d4:	b13b      	cbz	r3, 801d5e6 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801d5d6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801d5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d5da:	b143      	cbz	r3, 801d5ee <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801d5dc:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801d5de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d5e0:	b14b      	cbz	r3, 801d5f6 <lfs_deinit+0x2a>
}
 801d5e2:	2000      	movs	r0, #0
 801d5e4:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801d5e6:	68c0      	ldr	r0, [r0, #12]
 801d5e8:	f7fc fb00 	bl	8019bec <vPortFree>
#else
    (void)p;
#endif
}
 801d5ec:	e7f3      	b.n	801d5d6 <lfs_deinit+0xa>
    free(p);
 801d5ee:	69e0      	ldr	r0, [r4, #28]
 801d5f0:	f7fc fafc 	bl	8019bec <vPortFree>
}
 801d5f4:	e7f2      	b.n	801d5dc <lfs_deinit+0x10>
    free(p);
 801d5f6:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801d5f8:	f7fc faf8 	bl	8019bec <vPortFree>
}
 801d5fc:	e7f1      	b.n	801d5e2 <lfs_deinit+0x16>
	...

0801d600 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801d600:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801d602:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801d604:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801d606:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801d608:	69cb      	ldr	r3, [r1, #28]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	f000 80b1 	beq.w	801d772 <lfs_init+0x172>
 801d610:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801d612:	6a0a      	ldr	r2, [r1, #32]
 801d614:	2a00      	cmp	r2, #0
 801d616:	f000 80b3 	beq.w	801d780 <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801d61a:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801d61c:	2800      	cmp	r0, #0
 801d61e:	f000 80b6 	beq.w	801d78e <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801d622:	fbb0 fcf3 	udiv	ip, r0, r3
 801d626:	fb03 031c 	mls	r3, r3, ip, r0
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	f040 80b6 	bne.w	801d79c <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801d630:	fbb0 f3f2 	udiv	r3, r0, r2
 801d634:	fb02 0313 	mls	r3, r2, r3, r0
 801d638:	2b00      	cmp	r3, #0
 801d63a:	f040 80b6 	bne.w	801d7aa <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801d63e:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801d640:	fbb2 f3f0 	udiv	r3, r2, r0
 801d644:	fb00 2313 	mls	r3, r0, r3, r2
 801d648:	2b00      	cmp	r3, #0
 801d64a:	f040 80b5 	bne.w	801d7b8 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801d64e:	2a7f      	cmp	r2, #127	@ 0x7f
 801d650:	f240 80b9 	bls.w	801d7c6 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801d654:	f1a2 0c08 	sub.w	ip, r2, #8
 801d658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d65c:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801d660:	3b01      	subs	r3, #1
 801d662:	fab3 f383 	clz	r3, r3
 801d666:	f1c3 0320 	rsb	r3, r3, #32
 801d66a:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801d66e:	f0c0 80b1 	bcc.w	801d7d4 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801d672:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801d674:	2b00      	cmp	r3, #0
 801d676:	f000 80b4 	beq.w	801d7e2 <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801d67a:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801d67c:	b11b      	cbz	r3, 801d686 <lfs_init+0x86>
 801d67e:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801d682:	f0c0 80b5 	bcc.w	801d7f0 <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801d686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d68a:	d002      	beq.n	801d692 <lfs_init+0x92>
 801d68c:	429a      	cmp	r2, r3
 801d68e:	f0c0 80b6 	bcc.w	801d7fe <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801d692:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801d694:	2b00      	cmp	r3, #0
 801d696:	f000 80b9 	beq.w	801d80c <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801d69a:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801d69c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801d69e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	f000 80bf 	beq.w	801d824 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801d6a6:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801d6a8:	4621      	mov	r1, r4
 801d6aa:	4620      	mov	r0, r4
 801d6ac:	f7fc fe5c 	bl	801a368 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801d6b0:	f104 0110 	add.w	r1, r4, #16
 801d6b4:	4620      	mov	r0, r4
 801d6b6:	f7fc fe57 	bl	801a368 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801d6ba:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801d6bc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801d6be:	2800      	cmp	r0, #0
 801d6c0:	f000 80b8 	beq.w	801d834 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801d6c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	f000 80bb 	beq.w	801d842 <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801d6cc:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801d6ce:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801d6d0:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801d6d2:	2bff      	cmp	r3, #255	@ 0xff
 801d6d4:	f200 80bc 	bhi.w	801d850 <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801d6d8:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801d6da:	b90b      	cbnz	r3, 801d6e0 <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801d6dc:	23ff      	movs	r3, #255	@ 0xff
 801d6de:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801d6e0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	f2c0 80bb 	blt.w	801d85e <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801d6e8:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801d6ea:	b913      	cbnz	r3, 801d6f2 <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801d6ec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d6f0:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801d6f2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801d6f4:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801d6f8:	428b      	cmp	r3, r1
 801d6fa:	f200 80b7 	bhi.w	801d86c <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801d6fe:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801d700:	b913      	cbnz	r3, 801d708 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801d702:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801d706:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801d708:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801d70a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801d70c:	4288      	cmp	r0, r1
 801d70e:	f200 80b4 	bhi.w	801d87a <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801d712:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801d714:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d718:	d003      	beq.n	801d722 <lfs_init+0x122>
 801d71a:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801d71c:	42ab      	cmp	r3, r5
 801d71e:	f200 80b3 	bhi.w	801d888 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801d722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d726:	d003      	beq.n	801d730 <lfs_init+0x130>
 801d728:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801d72a:	42ab      	cmp	r3, r5
 801d72c:	f200 80b3 	bhi.w	801d896 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801d730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d734:	d006      	beq.n	801d744 <lfs_init+0x144>
 801d736:	2800      	cmp	r0, #0
 801d738:	f000 80b4 	beq.w	801d8a4 <lfs_init+0x2a4>
 801d73c:	08c1      	lsrs	r1, r0, #3
 801d73e:	428b      	cmp	r3, r1
 801d740:	f200 80b2 	bhi.w	801d8a8 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801d744:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801d746:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d74a:	f000 80b4 	beq.w	801d8b6 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801d74e:	2b00      	cmp	r3, #0
 801d750:	f040 80b3 	bne.w	801d8ba <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801d754:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801d756:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801d758:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	f000 80be 	beq.w	801d8dc <lfs_init+0x2dc>
 801d760:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801d762:	4283      	cmp	r3, r0
 801d764:	bf28      	it	cs
 801d766:	4603      	movcs	r3, r0
 801d768:	428b      	cmp	r3, r1
 801d76a:	bf28      	it	cs
 801d76c:	460b      	movcs	r3, r1
 801d76e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801d770:	e0a3      	b.n	801d8ba <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801d772:	4b5c      	ldr	r3, [pc, #368]	@ (801d8e4 <lfs_init+0x2e4>)
 801d774:	4a5c      	ldr	r2, [pc, #368]	@ (801d8e8 <lfs_init+0x2e8>)
 801d776:	f241 0152 	movw	r1, #4178	@ 0x1052
 801d77a:	485c      	ldr	r0, [pc, #368]	@ (801d8ec <lfs_init+0x2ec>)
 801d77c:	f00b fbee 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801d780:	4b5b      	ldr	r3, [pc, #364]	@ (801d8f0 <lfs_init+0x2f0>)
 801d782:	4a59      	ldr	r2, [pc, #356]	@ (801d8e8 <lfs_init+0x2e8>)
 801d784:	f241 0153 	movw	r1, #4179	@ 0x1053
 801d788:	4858      	ldr	r0, [pc, #352]	@ (801d8ec <lfs_init+0x2ec>)
 801d78a:	f00b fbe7 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801d78e:	4b59      	ldr	r3, [pc, #356]	@ (801d8f4 <lfs_init+0x2f4>)
 801d790:	4a55      	ldr	r2, [pc, #340]	@ (801d8e8 <lfs_init+0x2e8>)
 801d792:	f241 0154 	movw	r1, #4180	@ 0x1054
 801d796:	4855      	ldr	r0, [pc, #340]	@ (801d8ec <lfs_init+0x2ec>)
 801d798:	f00b fbe0 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801d79c:	4b56      	ldr	r3, [pc, #344]	@ (801d8f8 <lfs_init+0x2f8>)
 801d79e:	4a52      	ldr	r2, [pc, #328]	@ (801d8e8 <lfs_init+0x2e8>)
 801d7a0:	f241 0158 	movw	r1, #4184	@ 0x1058
 801d7a4:	4851      	ldr	r0, [pc, #324]	@ (801d8ec <lfs_init+0x2ec>)
 801d7a6:	f00b fbd9 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801d7aa:	4b54      	ldr	r3, [pc, #336]	@ (801d8fc <lfs_init+0x2fc>)
 801d7ac:	4a4e      	ldr	r2, [pc, #312]	@ (801d8e8 <lfs_init+0x2e8>)
 801d7ae:	f241 0159 	movw	r1, #4185	@ 0x1059
 801d7b2:	484e      	ldr	r0, [pc, #312]	@ (801d8ec <lfs_init+0x2ec>)
 801d7b4:	f00b fbd2 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801d7b8:	4b51      	ldr	r3, [pc, #324]	@ (801d900 <lfs_init+0x300>)
 801d7ba:	4a4b      	ldr	r2, [pc, #300]	@ (801d8e8 <lfs_init+0x2e8>)
 801d7bc:	f241 015a 	movw	r1, #4186	@ 0x105a
 801d7c0:	484a      	ldr	r0, [pc, #296]	@ (801d8ec <lfs_init+0x2ec>)
 801d7c2:	f00b fbcb 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801d7c6:	4b4f      	ldr	r3, [pc, #316]	@ (801d904 <lfs_init+0x304>)
 801d7c8:	4a47      	ldr	r2, [pc, #284]	@ (801d8e8 <lfs_init+0x2e8>)
 801d7ca:	f241 015d 	movw	r1, #4189	@ 0x105d
 801d7ce:	4847      	ldr	r0, [pc, #284]	@ (801d8ec <lfs_init+0x2ec>)
 801d7d0:	f00b fbc4 	bl	8028f5c <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801d7d4:	4b4c      	ldr	r3, [pc, #304]	@ (801d908 <lfs_init+0x308>)
 801d7d6:	4a44      	ldr	r2, [pc, #272]	@ (801d8e8 <lfs_init+0x2e8>)
 801d7d8:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801d7dc:	4843      	ldr	r0, [pc, #268]	@ (801d8ec <lfs_init+0x2ec>)
 801d7de:	f00b fbbd 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801d7e2:	4b4a      	ldr	r3, [pc, #296]	@ (801d90c <lfs_init+0x30c>)
 801d7e4:	4a40      	ldr	r2, [pc, #256]	@ (801d8e8 <lfs_init+0x2e8>)
 801d7e6:	f241 0169 	movw	r1, #4201	@ 0x1069
 801d7ea:	4840      	ldr	r0, [pc, #256]	@ (801d8ec <lfs_init+0x2ec>)
 801d7ec:	f00b fbb6 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801d7f0:	4b47      	ldr	r3, [pc, #284]	@ (801d910 <lfs_init+0x310>)
 801d7f2:	4a3d      	ldr	r2, [pc, #244]	@ (801d8e8 <lfs_init+0x2e8>)
 801d7f4:	f241 016f 	movw	r1, #4207	@ 0x106f
 801d7f8:	483c      	ldr	r0, [pc, #240]	@ (801d8ec <lfs_init+0x2ec>)
 801d7fa:	f00b fbaf 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801d7fe:	4b45      	ldr	r3, [pc, #276]	@ (801d914 <lfs_init+0x314>)
 801d800:	4a39      	ldr	r2, [pc, #228]	@ (801d8e8 <lfs_init+0x2e8>)
 801d802:	f241 0171 	movw	r1, #4209	@ 0x1071
 801d806:	4839      	ldr	r0, [pc, #228]	@ (801d8ec <lfs_init+0x2ec>)
 801d808:	f00b fba8 	bl	8028f5c <__assert_func>
    return malloc(size);
 801d80c:	f7fc f96c 	bl	8019ae8 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801d810:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801d812:	2800      	cmp	r0, #0
 801d814:	f47f af42 	bne.w	801d69c <lfs_init+0x9c>
    lfs_deinit(lfs);
 801d818:	4620      	mov	r0, r4
 801d81a:	f7ff fed7 	bl	801d5cc <lfs_deinit>
    return err;
 801d81e:	f06f 000b 	mvn.w	r0, #11
 801d822:	e05a      	b.n	801d8da <lfs_init+0x2da>
 801d824:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801d826:	f7fc f95f 	bl	8019ae8 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801d82a:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801d82c:	2800      	cmp	r0, #0
 801d82e:	f47f af3b 	bne.w	801d6a8 <lfs_init+0xa8>
 801d832:	e7f1      	b.n	801d818 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801d834:	4b38      	ldr	r3, [pc, #224]	@ (801d918 <lfs_init+0x318>)
 801d836:	4a2c      	ldr	r2, [pc, #176]	@ (801d8e8 <lfs_init+0x2e8>)
 801d838:	f241 0190 	movw	r1, #4240	@ 0x1090
 801d83c:	482b      	ldr	r0, [pc, #172]	@ (801d8ec <lfs_init+0x2ec>)
 801d83e:	f00b fb8d 	bl	8028f5c <__assert_func>
 801d842:	f7fc f951 	bl	8019ae8 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801d846:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801d848:	2800      	cmp	r0, #0
 801d84a:	f47f af40 	bne.w	801d6ce <lfs_init+0xce>
 801d84e:	e7e3      	b.n	801d818 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801d850:	4b32      	ldr	r3, [pc, #200]	@ (801d91c <lfs_init+0x31c>)
 801d852:	4a25      	ldr	r2, [pc, #148]	@ (801d8e8 <lfs_init+0x2e8>)
 801d854:	f241 019c 	movw	r1, #4252	@ 0x109c
 801d858:	4824      	ldr	r0, [pc, #144]	@ (801d8ec <lfs_init+0x2ec>)
 801d85a:	f00b fb7f 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801d85e:	4b30      	ldr	r3, [pc, #192]	@ (801d920 <lfs_init+0x320>)
 801d860:	4a21      	ldr	r2, [pc, #132]	@ (801d8e8 <lfs_init+0x2e8>)
 801d862:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801d866:	4821      	ldr	r0, [pc, #132]	@ (801d8ec <lfs_init+0x2ec>)
 801d868:	f00b fb78 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801d86c:	4b2d      	ldr	r3, [pc, #180]	@ (801d924 <lfs_init+0x324>)
 801d86e:	4a1e      	ldr	r2, [pc, #120]	@ (801d8e8 <lfs_init+0x2e8>)
 801d870:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801d874:	481d      	ldr	r0, [pc, #116]	@ (801d8ec <lfs_init+0x2ec>)
 801d876:	f00b fb71 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801d87a:	4b2b      	ldr	r3, [pc, #172]	@ (801d928 <lfs_init+0x328>)
 801d87c:	4a1a      	ldr	r2, [pc, #104]	@ (801d8e8 <lfs_init+0x2e8>)
 801d87e:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801d882:	481a      	ldr	r0, [pc, #104]	@ (801d8ec <lfs_init+0x2ec>)
 801d884:	f00b fb6a 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801d888:	4b28      	ldr	r3, [pc, #160]	@ (801d92c <lfs_init+0x32c>)
 801d88a:	4a17      	ldr	r2, [pc, #92]	@ (801d8e8 <lfs_init+0x2e8>)
 801d88c:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801d890:	4816      	ldr	r0, [pc, #88]	@ (801d8ec <lfs_init+0x2ec>)
 801d892:	f00b fb63 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801d896:	4b26      	ldr	r3, [pc, #152]	@ (801d930 <lfs_init+0x330>)
 801d898:	4a13      	ldr	r2, [pc, #76]	@ (801d8e8 <lfs_init+0x2e8>)
 801d89a:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801d89e:	4813      	ldr	r0, [pc, #76]	@ (801d8ec <lfs_init+0x2ec>)
 801d8a0:	f00b fb5c 	bl	8028f5c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801d8a4:	08c9      	lsrs	r1, r1, #3
 801d8a6:	e74a      	b.n	801d73e <lfs_init+0x13e>
 801d8a8:	4b22      	ldr	r3, [pc, #136]	@ (801d934 <lfs_init+0x334>)
 801d8aa:	4a0f      	ldr	r2, [pc, #60]	@ (801d8e8 <lfs_init+0x2e8>)
 801d8ac:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801d8b0:	480e      	ldr	r0, [pc, #56]	@ (801d8ec <lfs_init+0x2ec>)
 801d8b2:	f00b fb53 	bl	8028f5c <__assert_func>
        lfs->inline_max = 0;
 801d8b6:	2300      	movs	r3, #0
 801d8b8:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801d8ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d8be:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801d8c0:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801d8c2:	2000      	movs	r0, #0
 801d8c4:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801d8c6:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801d8c8:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801d8ca:	6420      	str	r0, [r4, #64]	@ 0x40
 801d8cc:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801d8ce:	6320      	str	r0, [r4, #48]	@ 0x30
 801d8d0:	6360      	str	r0, [r4, #52]	@ 0x34
 801d8d2:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801d8d4:	64a0      	str	r0, [r4, #72]	@ 0x48
 801d8d6:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801d8d8:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801d8da:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801d8dc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801d8de:	08db      	lsrs	r3, r3, #3
 801d8e0:	e73f      	b.n	801d762 <lfs_init+0x162>
 801d8e2:	bf00      	nop
 801d8e4:	0803814c 	.word	0x0803814c
 801d8e8:	0803892c 	.word	0x0803892c
 801d8ec:	08037bac 	.word	0x08037bac
 801d8f0:	08038168 	.word	0x08038168
 801d8f4:	08038184 	.word	0x08038184
 801d8f8:	080381a0 	.word	0x080381a0
 801d8fc:	080381d0 	.word	0x080381d0
 801d900:	08038200 	.word	0x08038200
 801d904:	08038234 	.word	0x08038234
 801d908:	08038250 	.word	0x08038250
 801d90c:	0803829c 	.word	0x0803829c
 801d910:	080382b8 	.word	0x080382b8
 801d914:	0803830c 	.word	0x0803830c
 801d918:	0803836c 	.word	0x0803836c
 801d91c:	0803838c 	.word	0x0803838c
 801d920:	080383a8 	.word	0x080383a8
 801d924:	080383cc 	.word	0x080383cc
 801d928:	080383e8 	.word	0x080383e8
 801d92c:	08038418 	.word	0x08038418
 801d930:	08038470 	.word	0x08038470
 801d934:	080384c0 	.word	0x080384c0

0801d938 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801d938:	b570      	push	{r4, r5, r6, lr}
 801d93a:	b096      	sub	sp, #88	@ 0x58
 801d93c:	4604      	mov	r4, r0
 801d93e:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801d940:	f7ff fe5e 	bl	801d600 <lfs_init>
        if (err) {
 801d944:	4606      	mov	r6, r0
 801d946:	b9f0      	cbnz	r0, 801d986 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801d948:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801d94a:	b1fb      	cbz	r3, 801d98c <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801d94c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801d94e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d950:	2100      	movs	r1, #0
 801d952:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801d954:	f00e f854 	bl	802ba00 <memset>
        lfs->lookahead.start = 0;
 801d958:	2200      	movs	r2, #0
 801d95a:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801d95c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801d95e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d960:	00db      	lsls	r3, r3, #3
 801d962:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801d964:	428b      	cmp	r3, r1
 801d966:	bf28      	it	cs
 801d968:	460b      	movcs	r3, r1
 801d96a:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801d96c:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801d96e:	4620      	mov	r0, r4
 801d970:	f7fc fbda 	bl	801a128 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801d974:	a906      	add	r1, sp, #24
 801d976:	4620      	mov	r0, r4
 801d978:	f7fe f820 	bl	801b9bc <lfs_dir_alloc>
        if (err) {
 801d97c:	4606      	mov	r6, r0
 801d97e:	b160      	cbz	r0, 801d99a <lfs_format_+0x62>
    lfs_deinit(lfs);
 801d980:	4620      	mov	r0, r4
 801d982:	f7ff fe23 	bl	801d5cc <lfs_deinit>
}
 801d986:	4630      	mov	r0, r6
 801d988:	b016      	add	sp, #88	@ 0x58
 801d98a:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801d98c:	4b20      	ldr	r3, [pc, #128]	@ (801da10 <lfs_format_+0xd8>)
 801d98e:	4a21      	ldr	r2, [pc, #132]	@ (801da14 <lfs_format_+0xdc>)
 801d990:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801d994:	4820      	ldr	r0, [pc, #128]	@ (801da18 <lfs_format_+0xe0>)
 801d996:	f00b fae1 	bl	8028f5c <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801d99a:	4620      	mov	r0, r4
 801d99c:	f7fc fbb6 	bl	801a10c <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801d9a0:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801d9a2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801d9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801d9a6:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801d9a8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801d9aa:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801d9ac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801d9ae:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801d9b0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801d9b2:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801d9b4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801d9b6:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801d9b8:	4b18      	ldr	r3, [pc, #96]	@ (801da1c <lfs_format_+0xe4>)
 801d9ba:	930e      	str	r3, [sp, #56]	@ 0x38
 801d9bc:	2300      	movs	r3, #0
 801d9be:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d9c0:	4b17      	ldr	r3, [pc, #92]	@ (801da20 <lfs_format_+0xe8>)
 801d9c2:	9310      	str	r3, [sp, #64]	@ 0x40
 801d9c4:	4b17      	ldr	r3, [pc, #92]	@ (801da24 <lfs_format_+0xec>)
 801d9c6:	9311      	str	r3, [sp, #68]	@ 0x44
 801d9c8:	4b17      	ldr	r3, [pc, #92]	@ (801da28 <lfs_format_+0xf0>)
 801d9ca:	9312      	str	r3, [sp, #72]	@ 0x48
 801d9cc:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801d9d0:	2303      	movs	r3, #3
 801d9d2:	aa0e      	add	r2, sp, #56	@ 0x38
 801d9d4:	a906      	add	r1, sp, #24
 801d9d6:	4620      	mov	r0, r4
 801d9d8:	f7ff fcb2 	bl	801d340 <lfs_dir_commit>
        if (err) {
 801d9dc:	4606      	mov	r6, r0
 801d9de:	2800      	cmp	r0, #0
 801d9e0:	d1ce      	bne.n	801d980 <lfs_format_+0x48>
        root.erased = false;
 801d9e2:	2200      	movs	r2, #0
 801d9e4:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801d9e8:	4613      	mov	r3, r2
 801d9ea:	a906      	add	r1, sp, #24
 801d9ec:	4620      	mov	r0, r4
 801d9ee:	f7ff fca7 	bl	801d340 <lfs_dir_commit>
        if (err) {
 801d9f2:	4606      	mov	r6, r0
 801d9f4:	2800      	cmp	r0, #0
 801d9f6:	d1c3      	bne.n	801d980 <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801d9f8:	2300      	movs	r3, #0
 801d9fa:	9314      	str	r3, [sp, #80]	@ 0x50
 801d9fc:	2301      	movs	r3, #1
 801d9fe:	9315      	str	r3, [sp, #84]	@ 0x54
 801da00:	aa14      	add	r2, sp, #80	@ 0x50
 801da02:	a906      	add	r1, sp, #24
 801da04:	4620      	mov	r0, r4
 801da06:	f7fd fe6b 	bl	801b6e0 <lfs_dir_fetch>
 801da0a:	4606      	mov	r6, r0
        if (err) {
 801da0c:	e7b8      	b.n	801d980 <lfs_format_+0x48>
 801da0e:	bf00      	nop
 801da10:	08038550 	.word	0x08038550
 801da14:	08038938 	.word	0x08038938
 801da18:	08037bac 	.word	0x08037bac
 801da1c:	40100000 	.word	0x40100000
 801da20:	0ff00008 	.word	0x0ff00008
 801da24:	08038568 	.word	0x08038568
 801da28:	20100018 	.word	0x20100018

0801da2c <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801da2c:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801da2e:	f7ff fdcd 	bl	801d5cc <lfs_deinit>
}
 801da32:	bd08      	pop	{r3, pc}

0801da34 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da38:	b09b      	sub	sp, #108	@ 0x6c
 801da3a:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801da3c:	f7ff fde0 	bl	801d600 <lfs_init>
    if (err) {
 801da40:	9005      	str	r0, [sp, #20]
 801da42:	b9d8      	cbnz	r0, 801da7c <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801da44:	2220      	movs	r2, #32
 801da46:	2100      	movs	r1, #0
 801da48:	a80f      	add	r0, sp, #60	@ 0x3c
 801da4a:	f00d ffd9 	bl	802ba00 <memset>
 801da4e:	2501      	movs	r5, #1
 801da50:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801da52:	4aa1      	ldr	r2, [pc, #644]	@ (801dcd8 <lfs_mount_+0x2a4>)
 801da54:	ab0d      	add	r3, sp, #52	@ 0x34
 801da56:	e892 0003 	ldmia.w	r2, {r0, r1}
 801da5a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801da5e:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801da60:	e073      	b.n	801db4a <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801da62:	4b9e      	ldr	r3, [pc, #632]	@ (801dcdc <lfs_mount_+0x2a8>)
 801da64:	f241 123d 	movw	r2, #4413	@ 0x113d
 801da68:	499d      	ldr	r1, [pc, #628]	@ (801dce0 <lfs_mount_+0x2ac>)
 801da6a:	489e      	ldr	r0, [pc, #632]	@ (801dce4 <lfs_mount_+0x2b0>)
 801da6c:	f00b faaa 	bl	8028fc4 <printf>
            err = LFS_ERR_CORRUPT;
 801da70:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801da74:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801da76:	4620      	mov	r0, r4
 801da78:	f7ff ffd8 	bl	801da2c <lfs_unmount_>
}
 801da7c:	9805      	ldr	r0, [sp, #20]
 801da7e:	b01b      	add	sp, #108	@ 0x6c
 801da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801da84:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801da86:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801da88:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801da8a:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801da8c:	2500      	movs	r5, #0
 801da8e:	e075      	b.n	801db7c <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801da90:	4620      	mov	r0, r4
 801da92:	f7fc fb44 	bl	801a11e <lfs_fs_disk_version_minor>
 801da96:	4b91      	ldr	r3, [pc, #580]	@ (801dcdc <lfs_mount_+0x2a8>)
 801da98:	9303      	str	r3, [sp, #12]
 801da9a:	9002      	str	r0, [sp, #8]
 801da9c:	f8cd 9004 	str.w	r9, [sp, #4]
 801daa0:	b2bf      	uxth	r7, r7
 801daa2:	9700      	str	r7, [sp, #0]
 801daa4:	4643      	mov	r3, r8
 801daa6:	f241 126b 	movw	r2, #4459	@ 0x116b
 801daaa:	498d      	ldr	r1, [pc, #564]	@ (801dce0 <lfs_mount_+0x2ac>)
 801daac:	488e      	ldr	r0, [pc, #568]	@ (801dce8 <lfs_mount_+0x2b4>)
 801daae:	f00b fa89 	bl	8028fc4 <printf>
                err = LFS_ERR_INVAL;
 801dab2:	f06f 0315 	mvn.w	r3, #21
 801dab6:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801dab8:	e7dd      	b.n	801da76 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801daba:	4b88      	ldr	r3, [pc, #544]	@ (801dcdc <lfs_mount_+0x2a8>)
 801dabc:	9303      	str	r3, [sp, #12]
 801dabe:	9002      	str	r0, [sp, #8]
 801dac0:	f8cd 9004 	str.w	r9, [sp, #4]
 801dac4:	b2bf      	uxth	r7, r7
 801dac6:	9700      	str	r7, [sp, #0]
 801dac8:	4643      	mov	r3, r8
 801daca:	f241 127a 	movw	r2, #4474	@ 0x117a
 801dace:	4984      	ldr	r1, [pc, #528]	@ (801dce0 <lfs_mount_+0x2ac>)
 801dad0:	4886      	ldr	r0, [pc, #536]	@ (801dcec <lfs_mount_+0x2b8>)
 801dad2:	f00b fa77 	bl	8028fc4 <printf>
                needssuperblock = true;
 801dad6:	2301      	movs	r3, #1
 801dad8:	9304      	str	r3, [sp, #16]
 801dada:	e08f      	b.n	801dbfc <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801dadc:	497f      	ldr	r1, [pc, #508]	@ (801dcdc <lfs_mount_+0x2a8>)
 801dade:	9101      	str	r1, [sp, #4]
 801dae0:	9200      	str	r2, [sp, #0]
 801dae2:	f241 1289 	movw	r2, #4489	@ 0x1189
 801dae6:	497e      	ldr	r1, [pc, #504]	@ (801dce0 <lfs_mount_+0x2ac>)
 801dae8:	4881      	ldr	r0, [pc, #516]	@ (801dcf0 <lfs_mount_+0x2bc>)
 801daea:	f00b fa6b 	bl	8028fc4 <printf>
                    err = LFS_ERR_INVAL;
 801daee:	f06f 0315 	mvn.w	r3, #21
 801daf2:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801daf4:	e7bf      	b.n	801da76 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801daf6:	4979      	ldr	r1, [pc, #484]	@ (801dcdc <lfs_mount_+0x2a8>)
 801daf8:	9101      	str	r1, [sp, #4]
 801dafa:	9200      	str	r2, [sp, #0]
 801dafc:	f241 1294 	movw	r2, #4500	@ 0x1194
 801db00:	4977      	ldr	r1, [pc, #476]	@ (801dce0 <lfs_mount_+0x2ac>)
 801db02:	487c      	ldr	r0, [pc, #496]	@ (801dcf4 <lfs_mount_+0x2c0>)
 801db04:	f00b fa5e 	bl	8028fc4 <printf>
                    err = LFS_ERR_INVAL;
 801db08:	f06f 0315 	mvn.w	r3, #21
 801db0c:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801db0e:	e7b2      	b.n	801da76 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801db10:	4972      	ldr	r1, [pc, #456]	@ (801dcdc <lfs_mount_+0x2a8>)
 801db12:	9101      	str	r1, [sp, #4]
 801db14:	9200      	str	r2, [sp, #0]
 801db16:	f241 129f 	movw	r2, #4511	@ 0x119f
 801db1a:	4971      	ldr	r1, [pc, #452]	@ (801dce0 <lfs_mount_+0x2ac>)
 801db1c:	4876      	ldr	r0, [pc, #472]	@ (801dcf8 <lfs_mount_+0x2c4>)
 801db1e:	f00b fa51 	bl	8028fc4 <printf>
                    err = LFS_ERR_INVAL;
 801db22:	f06f 0315 	mvn.w	r3, #21
 801db26:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801db28:	e7a5      	b.n	801da76 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801db2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db2c:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801db2e:	9b08      	ldr	r3, [sp, #32]
 801db30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801db32:	4293      	cmp	r3, r2
 801db34:	f040 8096 	bne.w	801dc64 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801db38:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801db3c:	a90f      	add	r1, sp, #60	@ 0x3c
 801db3e:	4620      	mov	r0, r4
 801db40:	f7fc fdee 	bl	801a720 <lfs_dir_getgstate>
        if (err) {
 801db44:	2800      	cmp	r0, #0
 801db46:	f040 809e 	bne.w	801dc86 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801db4a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801db4c:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801db50:	f000 809d 	beq.w	801dc8e <lfs_mount_+0x25a>
 801db54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801db56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801db5a:	f000 8096 	beq.w	801dc8a <lfs_mount_+0x256>
 801db5e:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801db60:	f013 0301 	ands.w	r3, r3, #1
 801db64:	f040 8095 	bne.w	801dc92 <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801db68:	a90d      	add	r1, sp, #52	@ 0x34
 801db6a:	a815      	add	r0, sp, #84	@ 0x54
 801db6c:	f7fc fa60 	bl	801a030 <lfs_pair_issync>
 801db70:	9004      	str	r0, [sp, #16]
 801db72:	2800      	cmp	r0, #0
 801db74:	f47f af75 	bne.w	801da62 <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801db78:	42b5      	cmp	r5, r6
 801db7a:	d083      	beq.n	801da84 <lfs_mount_+0x50>
        tortoise_i += 1;
 801db7c:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801db7e:	9417      	str	r4, [sp, #92]	@ 0x5c
 801db80:	4b5e      	ldr	r3, [pc, #376]	@ (801dcfc <lfs_mount_+0x2c8>)
 801db82:	9318      	str	r3, [sp, #96]	@ 0x60
 801db84:	2308      	movs	r3, #8
 801db86:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801db88:	ab17      	add	r3, sp, #92	@ 0x5c
 801db8a:	9303      	str	r3, [sp, #12]
 801db8c:	4b5c      	ldr	r3, [pc, #368]	@ (801dd00 <lfs_mount_+0x2cc>)
 801db8e:	9302      	str	r3, [sp, #8]
 801db90:	2300      	movs	r3, #0
 801db92:	9301      	str	r3, [sp, #4]
 801db94:	4b5b      	ldr	r3, [pc, #364]	@ (801dd04 <lfs_mount_+0x2d0>)
 801db96:	9300      	str	r3, [sp, #0]
 801db98:	4b5b      	ldr	r3, [pc, #364]	@ (801dd08 <lfs_mount_+0x2d4>)
 801db9a:	aa15      	add	r2, sp, #84	@ 0x54
 801db9c:	a90f      	add	r1, sp, #60	@ 0x3c
 801db9e:	4620      	mov	r0, r4
 801dba0:	f7fd fabe 	bl	801b120 <lfs_dir_fetchmatch>
        if (tag < 0) {
 801dba4:	2800      	cmp	r0, #0
 801dba6:	db6c      	blt.n	801dc82 <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801dba8:	2800      	cmp	r0, #0
 801dbaa:	d0c5      	beq.n	801db38 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801dbac:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801dbb0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801dbb4:	d0c0      	beq.n	801db38 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801dbb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dbb8:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801dbba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dbbc:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801dbbe:	ab07      	add	r3, sp, #28
 801dbc0:	9300      	str	r3, [sp, #0]
 801dbc2:	4b52      	ldr	r3, [pc, #328]	@ (801dd0c <lfs_mount_+0x2d8>)
 801dbc4:	4a50      	ldr	r2, [pc, #320]	@ (801dd08 <lfs_mount_+0x2d4>)
 801dbc6:	a90f      	add	r1, sp, #60	@ 0x3c
 801dbc8:	4620      	mov	r0, r4
 801dbca:	f7fc fd9b 	bl	801a704 <lfs_dir_get>
            if (tag < 0) {
 801dbce:	2800      	cmp	r0, #0
 801dbd0:	db55      	blt.n	801dc7e <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801dbd2:	9f07      	ldr	r7, [sp, #28]
 801dbd4:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801dbd8:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801dbdc:	4620      	mov	r0, r4
 801dbde:	f7fc fa99 	bl	801a114 <lfs_fs_disk_version_major>
 801dbe2:	4681      	mov	r9, r0
 801dbe4:	4540      	cmp	r0, r8
 801dbe6:	f47f af53 	bne.w	801da90 <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801dbea:	4620      	mov	r0, r4
 801dbec:	f7fc fa97 	bl	801a11e <lfs_fs_disk_version_minor>
 801dbf0:	4550      	cmp	r0, sl
 801dbf2:	f4ff af4d 	bcc.w	801da90 <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801dbf6:	4550      	cmp	r0, sl
 801dbf8:	f63f af5f 	bhi.w	801daba <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801dbfc:	9904      	ldr	r1, [sp, #16]
 801dbfe:	4620      	mov	r0, r4
 801dc00:	f7fc fb2b 	bl	801a25a <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801dc04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc06:	b123      	cbz	r3, 801dc12 <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801dc08:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801dc0a:	4293      	cmp	r3, r2
 801dc0c:	f63f af66 	bhi.w	801dadc <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801dc10:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801dc12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dc14:	b123      	cbz	r3, 801dc20 <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801dc16:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801dc18:	4293      	cmp	r3, r2
 801dc1a:	f63f af6c 	bhi.w	801daf6 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801dc1e:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801dc20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc22:	b14b      	cbz	r3, 801dc38 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801dc24:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dc26:	4293      	cmp	r3, r2
 801dc28:	f63f af72 	bhi.w	801db10 <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801dc2c:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801dc2e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801dc30:	4293      	cmp	r3, r2
 801dc32:	bf28      	it	cs
 801dc34:	4613      	movcs	r3, r2
 801dc36:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801dc38:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801dc3a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801dc3c:	2900      	cmp	r1, #0
 801dc3e:	f43f af74 	beq.w	801db2a <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801dc42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc44:	4299      	cmp	r1, r3
 801dc46:	f43f af70 	beq.w	801db2a <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801dc4a:	4a24      	ldr	r2, [pc, #144]	@ (801dcdc <lfs_mount_+0x2a8>)
 801dc4c:	9201      	str	r2, [sp, #4]
 801dc4e:	9100      	str	r1, [sp, #0]
 801dc50:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801dc54:	4922      	ldr	r1, [pc, #136]	@ (801dce0 <lfs_mount_+0x2ac>)
 801dc56:	482e      	ldr	r0, [pc, #184]	@ (801dd10 <lfs_mount_+0x2dc>)
 801dc58:	f00b f9b4 	bl	8028fc4 <printf>
                err = LFS_ERR_INVAL;
 801dc5c:	f06f 0315 	mvn.w	r3, #21
 801dc60:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801dc62:	e708      	b.n	801da76 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801dc64:	491d      	ldr	r1, [pc, #116]	@ (801dcdc <lfs_mount_+0x2a8>)
 801dc66:	9101      	str	r1, [sp, #4]
 801dc68:	9200      	str	r2, [sp, #0]
 801dc6a:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801dc6e:	491c      	ldr	r1, [pc, #112]	@ (801dce0 <lfs_mount_+0x2ac>)
 801dc70:	4828      	ldr	r0, [pc, #160]	@ (801dd14 <lfs_mount_+0x2e0>)
 801dc72:	f00b f9a7 	bl	8028fc4 <printf>
                err = LFS_ERR_INVAL;
 801dc76:	f06f 0315 	mvn.w	r3, #21
 801dc7a:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801dc7c:	e6fb      	b.n	801da76 <lfs_mount_+0x42>
                err = tag;
 801dc7e:	9005      	str	r0, [sp, #20]
 801dc80:	e6f9      	b.n	801da76 <lfs_mount_+0x42>
            err = tag;
 801dc82:	9005      	str	r0, [sp, #20]
 801dc84:	e6f7      	b.n	801da76 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801dc86:	9005      	str	r0, [sp, #20]
 801dc88:	e6f5      	b.n	801da76 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801dc8a:	2301      	movs	r3, #1
 801dc8c:	e768      	b.n	801db60 <lfs_mount_+0x12c>
 801dc8e:	2301      	movs	r3, #1
 801dc90:	e766      	b.n	801db60 <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801dc92:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801dc96:	9a05      	ldr	r2, [sp, #20]
 801dc98:	2a02      	cmp	r2, #2
 801dc9a:	dc05      	bgt.n	801dca8 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801dc9c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801dca0:	b909      	cbnz	r1, 801dca6 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801dca2:	3201      	adds	r2, #1
 801dca4:	e7f8      	b.n	801dc98 <lfs_mount_+0x264>
            return false;
 801dca6:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801dca8:	b3b3      	cbz	r3, 801dd18 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801dcaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dcac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801dcb0:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801dcb2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801dcb6:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801dcba:	ca07      	ldmia	r2, {r0, r1, r2}
 801dcbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801dcc0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801dcc2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801dcc4:	fbb3 f1f2 	udiv	r1, r3, r2
 801dcc8:	fb02 3311 	mls	r3, r2, r1, r3
 801dccc:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801dcce:	4620      	mov	r0, r4
 801dcd0:	f7fc fa2d 	bl	801a12e <lfs_alloc_drop>
    return 0;
 801dcd4:	e6d2      	b.n	801da7c <lfs_mount_+0x48>
 801dcd6:	bf00      	nop
 801dcd8:	08034d44 	.word	0x08034d44
 801dcdc:	08035a68 	.word	0x08035a68
 801dce0:	08037bac 	.word	0x08037bac
 801dce4:	08037d6c 	.word	0x08037d6c
 801dce8:	08038574 	.word	0x08038574
 801dcec:	080385ac 	.word	0x080385ac
 801dcf0:	080385ec 	.word	0x080385ec
 801dcf4:	08038620 	.word	0x08038620
 801dcf8:	08038654 	.word	0x08038654
 801dcfc:	08038568 	.word	0x08038568
 801dd00:	0801aee1 	.word	0x0801aee1
 801dd04:	0ff00008 	.word	0x0ff00008
 801dd08:	7ffffc00 	.word	0x7ffffc00
 801dd0c:	20100018 	.word	0x20100018
 801dd10:	08038688 	.word	0x08038688
 801dd14:	080386bc 	.word	0x080386bc
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801dd18:	4b06      	ldr	r3, [pc, #24]	@ (801dd34 <lfs_mount_+0x300>)
 801dd1a:	9302      	str	r3, [sp, #8]
 801dd1c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801dd1e:	9301      	str	r3, [sp, #4]
 801dd20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dd22:	9300      	str	r3, [sp, #0]
 801dd24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dd26:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801dd2a:	4903      	ldr	r1, [pc, #12]	@ (801dd38 <lfs_mount_+0x304>)
 801dd2c:	4803      	ldr	r0, [pc, #12]	@ (801dd3c <lfs_mount_+0x308>)
 801dd2e:	f00b f949 	bl	8028fc4 <printf>
 801dd32:	e7ba      	b.n	801dcaa <lfs_mount_+0x276>
 801dd34:	08035a68 	.word	0x08035a68
 801dd38:	08037bac 	.word	0x08037bac
 801dd3c:	080386ec 	.word	0x080386ec

0801dd40 <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801dd40:	b570      	push	{r4, r5, r6, lr}
 801dd42:	4606      	mov	r6, r0
 801dd44:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801dd46:	f7ff fbd7 	bl	801d4f8 <lfs_file_sync_>
 801dd4a:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801dd4c:	4621      	mov	r1, r4
 801dd4e:	4630      	mov	r0, r6
 801dd50:	f7fc f9cd 	bl	801a0ee <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801dd54:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	b10b      	cbz	r3, 801dd5e <lfs_file_close_+0x1e>
}
 801dd5a:	4628      	mov	r0, r5
 801dd5c:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801dd5e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801dd60:	f7fb ff44 	bl	8019bec <vPortFree>
    return err;
 801dd64:	e7f9      	b.n	801dd5a <lfs_file_close_+0x1a>
	...

0801dd68 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801dd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd6c:	b08d      	sub	sp, #52	@ 0x34
 801dd6e:	4682      	mov	sl, r0
 801dd70:	4688      	mov	r8, r1
 801dd72:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801dd74:	6812      	ldr	r2, [r2, #0]
 801dd76:	9205      	str	r2, [sp, #20]
    if (id) {
 801dd78:	9306      	str	r3, [sp, #24]
 801dd7a:	b11b      	cbz	r3, 801dd84 <lfs_dir_find+0x1c>
 801dd7c:	461a      	mov	r2, r3
        *id = 0x3ff;
 801dd7e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801dd82:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801dd84:	f8da 3020 	ldr.w	r3, [sl, #32]
 801dd88:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801dd8c:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801dd90:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801dd94:	4e4d      	ldr	r6, [pc, #308]	@ (801decc <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801dd96:	4d4e      	ldr	r5, [pc, #312]	@ (801ded0 <lfs_dir_find+0x168>)
 801dd98:	4629      	mov	r1, r5
 801dd9a:	9f05      	ldr	r7, [sp, #20]
 801dd9c:	4638      	mov	r0, r7
 801dd9e:	f00d fe9f 	bl	802bae0 <strspn>
 801dda2:	4604      	mov	r4, r0
 801dda4:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801dda8:	4629      	mov	r1, r5
 801ddaa:	4648      	mov	r0, r9
 801ddac:	f00d fe4c 	bl	802ba48 <strcspn>
 801ddb0:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801ddb2:	2801      	cmp	r0, #1
 801ddb4:	d00a      	beq.n	801ddcc <lfs_dir_find+0x64>
 801ddb6:	2d02      	cmp	r5, #2
 801ddb8:	d00c      	beq.n	801ddd4 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801ddba:	eb09 0305 	add.w	r3, r9, r5
 801ddbe:	9305      	str	r3, [sp, #20]
 801ddc0:	469b      	mov	fp, r3
        int depth = 1;
 801ddc2:	2701      	movs	r7, #1
 801ddc4:	e013      	b.n	801ddee <lfs_dir_find+0x86>
 801ddc6:	46b2      	mov	sl, r6
 801ddc8:	4606      	mov	r6, r0
 801ddca:	e7e4      	b.n	801dd96 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801ddcc:	5d3b      	ldrb	r3, [r7, r4]
 801ddce:	2b2e      	cmp	r3, #46	@ 0x2e
 801ddd0:	d1f1      	bne.n	801ddb6 <lfs_dir_find+0x4e>
 801ddd2:	e006      	b.n	801dde2 <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801ddd4:	2202      	movs	r2, #2
 801ddd6:	493f      	ldr	r1, [pc, #252]	@ (801ded4 <lfs_dir_find+0x16c>)
 801ddd8:	4648      	mov	r0, r9
 801ddda:	f00d fd7d 	bl	802b8d8 <memcmp>
 801ddde:	2800      	cmp	r0, #0
 801dde0:	d1eb      	bne.n	801ddba <lfs_dir_find+0x52>
            name += namelen;
 801dde2:	eb09 0305 	add.w	r3, r9, r5
 801dde6:	9305      	str	r3, [sp, #20]
            goto nextname;
 801dde8:	e7d5      	b.n	801dd96 <lfs_dir_find+0x2e>
                depth += 1;
 801ddea:	3701      	adds	r7, #1
            suffix += sufflen;
 801ddec:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801ddee:	4c38      	ldr	r4, [pc, #224]	@ (801ded0 <lfs_dir_find+0x168>)
 801ddf0:	4621      	mov	r1, r4
 801ddf2:	4658      	mov	r0, fp
 801ddf4:	f00d fe74 	bl	802bae0 <strspn>
 801ddf8:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801ddfa:	4621      	mov	r1, r4
 801ddfc:	4658      	mov	r0, fp
 801ddfe:	f00d fe23 	bl	802ba48 <strcspn>
            if (sufflen == 0) {
 801de02:	4604      	mov	r4, r0
 801de04:	b170      	cbz	r0, 801de24 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801de06:	2802      	cmp	r0, #2
 801de08:	d1ef      	bne.n	801ddea <lfs_dir_find+0x82>
 801de0a:	2202      	movs	r2, #2
 801de0c:	4931      	ldr	r1, [pc, #196]	@ (801ded4 <lfs_dir_find+0x16c>)
 801de0e:	4658      	mov	r0, fp
 801de10:	f00d fd62 	bl	802b8d8 <memcmp>
 801de14:	2800      	cmp	r0, #0
 801de16:	d1e8      	bne.n	801ddea <lfs_dir_find+0x82>
                if (depth == 0) {
 801de18:	3f01      	subs	r7, #1
 801de1a:	d1e7      	bne.n	801ddec <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801de1c:	eb0b 0304 	add.w	r3, fp, r4
 801de20:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801de22:	e7b8      	b.n	801dd96 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801de24:	f899 3000 	ldrb.w	r3, [r9]
 801de28:	2b00      	cmp	r3, #0
 801de2a:	d04a      	beq.n	801dec2 <lfs_dir_find+0x15a>
        *path = name;
 801de2c:	9b07      	ldr	r3, [sp, #28]
 801de2e:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801de32:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801de36:	2b02      	cmp	r3, #2
 801de38:	d13f      	bne.n	801deba <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801de3a:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801de3e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801de42:	429e      	cmp	r6, r3
 801de44:	d102      	bne.n	801de4c <lfs_dir_find+0xe4>
 801de46:	464c      	mov	r4, r9
 801de48:	4656      	mov	r6, sl
 801de4a:	e029      	b.n	801dea0 <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801de4c:	02b6      	lsls	r6, r6, #10
 801de4e:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801de52:	9300      	str	r3, [sp, #0]
 801de54:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801de58:	f043 0308 	orr.w	r3, r3, #8
 801de5c:	4a1e      	ldr	r2, [pc, #120]	@ (801ded8 <lfs_dir_find+0x170>)
 801de5e:	4641      	mov	r1, r8
 801de60:	4650      	mov	r0, sl
 801de62:	f7fc fc4f 	bl	801a704 <lfs_dir_get>
            if (res < 0) {
 801de66:	1e06      	subs	r6, r0, #0
 801de68:	db2b      	blt.n	801dec2 <lfs_dir_find+0x15a>
 801de6a:	464c      	mov	r4, r9
 801de6c:	4656      	mov	r6, sl
 801de6e:	e017      	b.n	801dea0 <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801de70:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801de72:	9609      	str	r6, [sp, #36]	@ 0x24
 801de74:	940a      	str	r4, [sp, #40]	@ 0x28
 801de76:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801de78:	aa09      	add	r2, sp, #36	@ 0x24
 801de7a:	9203      	str	r2, [sp, #12]
 801de7c:	4a17      	ldr	r2, [pc, #92]	@ (801dedc <lfs_dir_find+0x174>)
 801de7e:	9202      	str	r2, [sp, #8]
 801de80:	9301      	str	r3, [sp, #4]
 801de82:	9500      	str	r5, [sp, #0]
 801de84:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801de88:	463a      	mov	r2, r7
 801de8a:	4641      	mov	r1, r8
 801de8c:	4630      	mov	r0, r6
 801de8e:	f7fd f947 	bl	801b120 <lfs_dir_fetchmatch>
            if (tag < 0) {
 801de92:	2800      	cmp	r0, #0
 801de94:	db14      	blt.n	801dec0 <lfs_dir_find+0x158>
            if (tag) {
 801de96:	2800      	cmp	r0, #0
 801de98:	d195      	bne.n	801ddc6 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801de9a:	f898 3017 	ldrb.w	r3, [r8, #23]
 801de9e:	b14b      	cbz	r3, 801deb4 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801dea0:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801dea4:	212f      	movs	r1, #47	@ 0x2f
 801dea6:	4620      	mov	r0, r4
 801dea8:	f00d fdc1 	bl	802ba2e <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801deac:	2800      	cmp	r0, #0
 801deae:	d0df      	beq.n	801de70 <lfs_dir_find+0x108>
 801deb0:	2300      	movs	r3, #0
 801deb2:	e7de      	b.n	801de72 <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801deb4:	f06f 0601 	mvn.w	r6, #1
 801deb8:	e003      	b.n	801dec2 <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801deba:	f06f 0613 	mvn.w	r6, #19
 801debe:	e000      	b.n	801dec2 <lfs_dir_find+0x15a>
 801dec0:	4606      	mov	r6, r0
}
 801dec2:	4630      	mov	r0, r6
 801dec4:	b00d      	add	sp, #52	@ 0x34
 801dec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deca:	bf00      	nop
 801decc:	002ffc00 	.word	0x002ffc00
 801ded0:	08038f40 	.word	0x08038f40
 801ded4:	08038724 	.word	0x08038724
 801ded8:	700ffc00 	.word	0x700ffc00
 801dedc:	0801aee1 	.word	0x0801aee1

0801dee0 <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801dee0:	b570      	push	{r4, r5, r6, lr}
 801dee2:	b09a      	sub	sp, #104	@ 0x68
 801dee4:	4604      	mov	r4, r0
 801dee6:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801dee8:	f7ff fad2 	bl	801d490 <lfs_fs_forceconsistency>
    if (err) {
 801deec:	4603      	mov	r3, r0
 801deee:	b110      	cbz	r0, 801def6 <lfs_remove_+0x16>
}
 801def0:	4618      	mov	r0, r3
 801def2:	b01a      	add	sp, #104	@ 0x68
 801def4:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801def6:	2300      	movs	r3, #0
 801def8:	aa03      	add	r2, sp, #12
 801defa:	a910      	add	r1, sp, #64	@ 0x40
 801defc:	4620      	mov	r0, r4
 801defe:	f7ff ff33 	bl	801dd68 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801df02:	1e03      	subs	r3, r0, #0
 801df04:	dbf4      	blt.n	801def0 <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801df06:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801df0a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801df0e:	4295      	cmp	r5, r2
 801df10:	d031      	beq.n	801df76 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801df12:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801df14:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801df16:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801df1a:	2e02      	cmp	r6, #2
 801df1c:	d02e      	beq.n	801df7c <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801df1e:	02ad      	lsls	r5, r5, #10
 801df20:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801df24:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801df28:	9518      	str	r5, [sp, #96]	@ 0x60
 801df2a:	2300      	movs	r3, #0
 801df2c:	9319      	str	r3, [sp, #100]	@ 0x64
 801df2e:	2301      	movs	r3, #1
 801df30:	aa18      	add	r2, sp, #96	@ 0x60
 801df32:	a910      	add	r1, sp, #64	@ 0x40
 801df34:	4620      	mov	r0, r4
 801df36:	f7ff fa03 	bl	801d340 <lfs_dir_commit>
    if (err) {
 801df3a:	4603      	mov	r3, r0
 801df3c:	2800      	cmp	r0, #0
 801df3e:	d142      	bne.n	801dfc6 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801df40:	9a06      	ldr	r2, [sp, #24]
 801df42:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801df44:	2e02      	cmp	r6, #2
 801df46:	d1d3      	bne.n	801def0 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801df48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801df4c:	4620      	mov	r0, r4
 801df4e:	f7fc f9db 	bl	801a308 <lfs_fs_preporphans>
        if (err) {
 801df52:	4603      	mov	r3, r0
 801df54:	2800      	cmp	r0, #0
 801df56:	d1cb      	bne.n	801def0 <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801df58:	aa10      	add	r2, sp, #64	@ 0x40
 801df5a:	a908      	add	r1, sp, #32
 801df5c:	4620      	mov	r0, r4
 801df5e:	f7fe f8e5 	bl	801c12c <lfs_fs_pred>
        if (err) {
 801df62:	4603      	mov	r3, r0
 801df64:	2800      	cmp	r0, #0
 801df66:	d1c3      	bne.n	801def0 <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801df68:	aa08      	add	r2, sp, #32
 801df6a:	a910      	add	r1, sp, #64	@ 0x40
 801df6c:	4620      	mov	r0, r4
 801df6e:	f7ff faa3 	bl	801d4b8 <lfs_dir_drop>
 801df72:	4603      	mov	r3, r0
        if (err) {
 801df74:	e7bc      	b.n	801def0 <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801df76:	f06f 0315 	mvn.w	r3, #21
 801df7a:	e7b9      	b.n	801def0 <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801df7c:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801df7e:	aa04      	add	r2, sp, #16
 801df80:	9200      	str	r2, [sp, #0]
 801df82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801df86:	f043 0308 	orr.w	r3, r3, #8
 801df8a:	4a10      	ldr	r2, [pc, #64]	@ (801dfcc <lfs_remove_+0xec>)
 801df8c:	a910      	add	r1, sp, #64	@ 0x40
 801df8e:	4620      	mov	r0, r4
 801df90:	f7fc fbb8 	bl	801a704 <lfs_dir_get>
        if (res < 0) {
 801df94:	1e03      	subs	r3, r0, #0
 801df96:	dbab      	blt.n	801def0 <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801df98:	aa04      	add	r2, sp, #16
 801df9a:	a908      	add	r1, sp, #32
 801df9c:	4620      	mov	r0, r4
 801df9e:	f7fd fb9f 	bl	801b6e0 <lfs_dir_fetch>
        if (err) {
 801dfa2:	4603      	mov	r3, r0
 801dfa4:	2800      	cmp	r0, #0
 801dfa6:	d1a3      	bne.n	801def0 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801dfa8:	2101      	movs	r1, #1
 801dfaa:	4620      	mov	r0, r4
 801dfac:	f7fc f9ac 	bl	801a308 <lfs_fs_preporphans>
        if (err) {
 801dfb0:	4603      	mov	r3, r0
 801dfb2:	2800      	cmp	r0, #0
 801dfb4:	d19c      	bne.n	801def0 <lfs_remove_+0x10>
        dir.type = 0;
 801dfb6:	2300      	movs	r3, #0
 801dfb8:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801dfbc:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801dfc0:	ab06      	add	r3, sp, #24
 801dfc2:	62a3      	str	r3, [r4, #40]	@ 0x28
 801dfc4:	e7ab      	b.n	801df1e <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801dfc6:	9a06      	ldr	r2, [sp, #24]
 801dfc8:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801dfca:	e791      	b.n	801def0 <lfs_remove_+0x10>
 801dfcc:	700ffc00 	.word	0x700ffc00

0801dfd0 <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801dfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfd2:	b087      	sub	sp, #28
 801dfd4:	4607      	mov	r7, r0
 801dfd6:	460d      	mov	r5, r1
 801dfd8:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801dfda:	f101 0608 	add.w	r6, r1, #8
 801dfde:	2300      	movs	r3, #0
 801dfe0:	aa03      	add	r2, sp, #12
 801dfe2:	4631      	mov	r1, r6
 801dfe4:	f7ff fec0 	bl	801dd68 <lfs_dir_find>
    if (tag < 0) {
 801dfe8:	1e04      	subs	r4, r0, #0
 801dfea:	db14      	blt.n	801e016 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801dfec:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801dff0:	2b02      	cmp	r3, #2
 801dff2:	d130      	bne.n	801e056 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801dff4:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801dff8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801dffc:	429c      	cmp	r4, r3
 801dffe:	d10d      	bne.n	801e01c <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801e000:	6a3b      	ldr	r3, [r7, #32]
 801e002:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801e004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e006:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801e008:	aa04      	add	r2, sp, #16
 801e00a:	4631      	mov	r1, r6
 801e00c:	4638      	mov	r0, r7
 801e00e:	f7fd fb67 	bl	801b6e0 <lfs_dir_fetch>
    if (err) {
 801e012:	4604      	mov	r4, r0
 801e014:	b188      	cbz	r0, 801e03a <lfs_dir_open_+0x6a>
}
 801e016:	4620      	mov	r0, r4
 801e018:	b007      	add	sp, #28
 801e01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801e01c:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801e01e:	ab04      	add	r3, sp, #16
 801e020:	9300      	str	r3, [sp, #0]
 801e022:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801e026:	f043 0308 	orr.w	r3, r3, #8
 801e02a:	4a0c      	ldr	r2, [pc, #48]	@ (801e05c <lfs_dir_open_+0x8c>)
 801e02c:	4631      	mov	r1, r6
 801e02e:	4638      	mov	r0, r7
 801e030:	f7fc fb68 	bl	801a704 <lfs_dir_get>
        if (res < 0) {
 801e034:	1e04      	subs	r4, r0, #0
 801e036:	dae7      	bge.n	801e008 <lfs_dir_open_+0x38>
 801e038:	e7ed      	b.n	801e016 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801e03a:	68ab      	ldr	r3, [r5, #8]
 801e03c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801e03e:	68eb      	ldr	r3, [r5, #12]
 801e040:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801e042:	2300      	movs	r3, #0
 801e044:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801e046:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801e048:	2302      	movs	r3, #2
 801e04a:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801e04c:	4629      	mov	r1, r5
 801e04e:	4638      	mov	r0, r7
 801e050:	f7fc f858 	bl	801a104 <lfs_mlist_append>
    return 0;
 801e054:	e7df      	b.n	801e016 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801e056:	f06f 0413 	mvn.w	r4, #19
 801e05a:	e7dc      	b.n	801e016 <lfs_dir_open_+0x46>
 801e05c:	700ffc00 	.word	0x700ffc00

0801e060 <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e064:	b0ad      	sub	sp, #180	@ 0xb4
 801e066:	4604      	mov	r4, r0
 801e068:	9103      	str	r1, [sp, #12]
 801e06a:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801e06c:	f7ff fa10 	bl	801d490 <lfs_fs_forceconsistency>
    if (err) {
 801e070:	4606      	mov	r6, r0
 801e072:	b118      	cbz	r0, 801e07c <lfs_rename_+0x1c>
}
 801e074:	4630      	mov	r0, r6
 801e076:	b02d      	add	sp, #180	@ 0xb4
 801e078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801e07c:	2300      	movs	r3, #0
 801e07e:	aa03      	add	r2, sp, #12
 801e080:	a922      	add	r1, sp, #136	@ 0x88
 801e082:	4620      	mov	r0, r4
 801e084:	f7ff fe70 	bl	801dd68 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801e088:	2800      	cmp	r0, #0
 801e08a:	f2c0 809e 	blt.w	801e1ca <lfs_rename_+0x16a>
 801e08e:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801e090:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801e094:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e098:	429d      	cmp	r5, r3
 801e09a:	f000 8094 	beq.w	801e1c6 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801e09e:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801e0a2:	aa02      	add	r2, sp, #8
 801e0a4:	a91a      	add	r1, sp, #104	@ 0x68
 801e0a6:	4620      	mov	r0, r4
 801e0a8:	f7ff fe5e 	bl	801dd68 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801e0ac:	f1b0 0900 	subs.w	r9, r0, #0
 801e0b0:	f2c0 808d 	blt.w	801e1ce <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801e0b4:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801e0b8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e0bc:	429a      	cmp	r2, r3
 801e0be:	f000 8086 	beq.w	801e1ce <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e0c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e0c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e0c6:	429a      	cmp	r2, r3
 801e0c8:	d008      	beq.n	801e0dc <lfs_rename_+0x7c>
 801e0ca:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801e0cc:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801e0ce:	4281      	cmp	r1, r0
 801e0d0:	d004      	beq.n	801e0dc <lfs_rename_+0x7c>
 801e0d2:	4299      	cmp	r1, r3
 801e0d4:	d002      	beq.n	801e0dc <lfs_rename_+0x7c>
 801e0d6:	4290      	cmp	r0, r2
 801e0d8:	d000      	beq.n	801e0dc <lfs_rename_+0x7c>
 801e0da:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801e0dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e0de:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801e0e0:	f119 0f02 	cmn.w	r9, #2
 801e0e4:	f000 8085 	beq.w	801e1f2 <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801e0e8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801e0ec:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801e0f0:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801e0f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	f040 808a 	bne.w	801e212 <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801e0fe:	b91e      	cbnz	r6, 801e108 <lfs_rename_+0xa8>
 801e100:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801e104:	42ab      	cmp	r3, r5
 801e106:	d0b5      	beq.n	801e074 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801e108:	2a02      	cmp	r2, #2
 801e10a:	f000 808a 	beq.w	801e222 <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801e10e:	46aa      	mov	sl, r5
    if (!samepair) {
 801e110:	b126      	cbz	r6, 801e11c <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801e112:	aa22      	add	r2, sp, #136	@ 0x88
 801e114:	4651      	mov	r1, sl
 801e116:	4620      	mov	r0, r4
 801e118:	f7fc f8a6 	bl	801a268 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801e11c:	f119 0f02 	cmn.w	r9, #2
 801e120:	f000 80b4 	beq.w	801e28c <lfs_rename_+0x22c>
 801e124:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801e128:	029b      	lsls	r3, r3, #10
 801e12a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e12e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e132:	9305      	str	r3, [sp, #20]
 801e134:	2200      	movs	r2, #0
 801e136:	9206      	str	r2, [sp, #24]
 801e138:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801e13c:	02bf      	lsls	r7, r7, #10
 801e13e:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801e142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e146:	9307      	str	r3, [sp, #28]
 801e148:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801e14a:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801e14e:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801e152:	f8dd b008 	ldr.w	fp, [sp, #8]
 801e156:	4658      	mov	r0, fp
 801e158:	f7f2 f8a2 	bl	80102a0 <strlen>
 801e15c:	ea48 0000 	orr.w	r0, r8, r0
 801e160:	9009      	str	r0, [sp, #36]	@ 0x24
 801e162:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801e166:	432f      	orrs	r7, r5
 801e168:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801e16c:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801e170:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e172:	ab22      	add	r3, sp, #136	@ 0x88
 801e174:	930c      	str	r3, [sp, #48]	@ 0x30
 801e176:	2e00      	cmp	r6, #0
 801e178:	f040 808a 	bne.w	801e290 <lfs_rename_+0x230>
 801e17c:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801e180:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801e184:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e188:	930d      	str	r3, [sp, #52]	@ 0x34
 801e18a:	2300      	movs	r3, #0
 801e18c:	930e      	str	r3, [sp, #56]	@ 0x38
 801e18e:	2305      	movs	r3, #5
 801e190:	aa05      	add	r2, sp, #20
 801e192:	a91a      	add	r1, sp, #104	@ 0x68
 801e194:	4620      	mov	r0, r4
 801e196:	f7ff f8d3 	bl	801d340 <lfs_dir_commit>
    if (err) {
 801e19a:	4607      	mov	r7, r0
 801e19c:	2800      	cmp	r0, #0
 801e19e:	d179      	bne.n	801e294 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801e1a0:	b126      	cbz	r6, 801e1ac <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801e1a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801e1a4:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801e1a6:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801e1aa:	d177      	bne.n	801e29c <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801e1ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e1ae:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801e1b0:	f119 0f02 	cmn.w	r9, #2
 801e1b4:	f000 80a9 	beq.w	801e30a <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801e1b8:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801e1bc:	2802      	cmp	r0, #2
 801e1be:	f000 8088 	beq.w	801e2d2 <lfs_rename_+0x272>
    return 0;
 801e1c2:	463e      	mov	r6, r7
 801e1c4:	e756      	b.n	801e074 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801e1c6:	f06f 0015 	mvn.w	r0, #21
 801e1ca:	4606      	mov	r6, r0
 801e1cc:	e752      	b.n	801e074 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801e1ce:	f119 0f02 	cmn.w	r9, #2
 801e1d2:	d106      	bne.n	801e1e2 <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801e1d4:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801e1d8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e1dc:	429a      	cmp	r2, r3
 801e1de:	f47f af70 	bne.w	801e0c2 <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801e1e2:	f1b9 0f00 	cmp.w	r9, #0
 801e1e6:	db02      	blt.n	801e1ee <lfs_rename_+0x18e>
 801e1e8:	f06f 0615 	mvn.w	r6, #21
 801e1ec:	e742      	b.n	801e074 <lfs_rename_+0x14>
 801e1ee:	464e      	mov	r6, r9
 801e1f0:	e740      	b.n	801e074 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801e1f2:	9802      	ldr	r0, [sp, #8]
 801e1f4:	f7f2 f854 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801e1f8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801e1fa:	4283      	cmp	r3, r0
 801e1fc:	f0c0 8082 	bcc.w	801e304 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801e200:	2e00      	cmp	r6, #0
 801e202:	d141      	bne.n	801e288 <lfs_rename_+0x228>
 801e204:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801e208:	42ab      	cmp	r3, r5
 801e20a:	d83b      	bhi.n	801e284 <lfs_rename_+0x224>
            newoldid += 1;
 801e20c:	f105 0a01 	add.w	sl, r5, #1
 801e210:	e77e      	b.n	801e110 <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801e212:	2a02      	cmp	r2, #2
 801e214:	d002      	beq.n	801e21c <lfs_rename_+0x1bc>
 801e216:	f06f 0613 	mvn.w	r6, #19
 801e21a:	e72b      	b.n	801e074 <lfs_rename_+0x14>
 801e21c:	f06f 0614 	mvn.w	r6, #20
 801e220:	e728      	b.n	801e074 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801e222:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801e226:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801e228:	aa05      	add	r2, sp, #20
 801e22a:	9200      	str	r2, [sp, #0]
 801e22c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801e230:	f043 0308 	orr.w	r3, r3, #8
 801e234:	4a36      	ldr	r2, [pc, #216]	@ (801e310 <lfs_rename_+0x2b0>)
 801e236:	a91a      	add	r1, sp, #104	@ 0x68
 801e238:	4620      	mov	r0, r4
 801e23a:	f7fc fa63 	bl	801a704 <lfs_dir_get>
        if (res < 0) {
 801e23e:	2800      	cmp	r0, #0
 801e240:	db1a      	blt.n	801e278 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801e242:	aa05      	add	r2, sp, #20
 801e244:	a911      	add	r1, sp, #68	@ 0x44
 801e246:	4620      	mov	r0, r4
 801e248:	f7fd fa4a 	bl	801b6e0 <lfs_dir_fetch>
        if (err) {
 801e24c:	b9b0      	cbnz	r0, 801e27c <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 801e24e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e250:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 801e254:	d002      	beq.n	801e25c <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 801e256:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 801e25a:	e70b      	b.n	801e074 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 801e25c:	2101      	movs	r1, #1
 801e25e:	4620      	mov	r0, r4
 801e260:	f7fc f852 	bl	801a308 <lfs_fs_preporphans>
        if (err) {
 801e264:	b960      	cbnz	r0, 801e280 <lfs_rename_+0x220>
        prevdir.type = 0;
 801e266:	2300      	movs	r3, #0
 801e268:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 801e26c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 801e270:	ab0f      	add	r3, sp, #60	@ 0x3c
 801e272:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 801e274:	46aa      	mov	sl, r5
 801e276:	e74b      	b.n	801e110 <lfs_rename_+0xb0>
            return (int)res;
 801e278:	4606      	mov	r6, r0
 801e27a:	e6fb      	b.n	801e074 <lfs_rename_+0x14>
            return err;
 801e27c:	4606      	mov	r6, r0
 801e27e:	e6f9      	b.n	801e074 <lfs_rename_+0x14>
            return err;
 801e280:	4606      	mov	r6, r0
 801e282:	e6f7      	b.n	801e074 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801e284:	46aa      	mov	sl, r5
 801e286:	e743      	b.n	801e110 <lfs_rename_+0xb0>
 801e288:	46aa      	mov	sl, r5
 801e28a:	e742      	b.n	801e112 <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801e28c:	2300      	movs	r3, #0
 801e28e:	e750      	b.n	801e132 <lfs_rename_+0xd2>
 801e290:	2300      	movs	r3, #0
 801e292:	e779      	b.n	801e188 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 801e294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e296:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 801e298:	4606      	mov	r6, r0
 801e29a:	e6eb      	b.n	801e074 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e29c:	2200      	movs	r2, #0
 801e29e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e2a2:	4620      	mov	r0, r4
 801e2a4:	f7fb ffe0 	bl	801a268 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 801e2a8:	02ab      	lsls	r3, r5, #10
 801e2aa:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e2ae:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e2b2:	932a      	str	r3, [sp, #168]	@ 0xa8
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	932b      	str	r3, [sp, #172]	@ 0xac
 801e2b8:	2301      	movs	r3, #1
 801e2ba:	aa2a      	add	r2, sp, #168	@ 0xa8
 801e2bc:	a922      	add	r1, sp, #136	@ 0x88
 801e2be:	4620      	mov	r0, r4
 801e2c0:	f7ff f83e 	bl	801d340 <lfs_dir_commit>
        if (err) {
 801e2c4:	4606      	mov	r6, r0
 801e2c6:	2800      	cmp	r0, #0
 801e2c8:	f43f af70 	beq.w	801e1ac <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 801e2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e2ce:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 801e2d0:	e6d0      	b.n	801e074 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 801e2d2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e2d6:	4620      	mov	r0, r4
 801e2d8:	f7fc f816 	bl	801a308 <lfs_fs_preporphans>
        if (err) {
 801e2dc:	4606      	mov	r6, r0
 801e2de:	2800      	cmp	r0, #0
 801e2e0:	f47f aec8 	bne.w	801e074 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801e2e4:	aa1a      	add	r2, sp, #104	@ 0x68
 801e2e6:	a911      	add	r1, sp, #68	@ 0x44
 801e2e8:	4620      	mov	r0, r4
 801e2ea:	f7fd ff1f 	bl	801c12c <lfs_fs_pred>
        if (err) {
 801e2ee:	4606      	mov	r6, r0
 801e2f0:	2800      	cmp	r0, #0
 801e2f2:	f47f aebf 	bne.w	801e074 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 801e2f6:	aa11      	add	r2, sp, #68	@ 0x44
 801e2f8:	a91a      	add	r1, sp, #104	@ 0x68
 801e2fa:	4620      	mov	r0, r4
 801e2fc:	f7ff f8dc 	bl	801d4b8 <lfs_dir_drop>
 801e300:	4606      	mov	r6, r0
        if (err) {
 801e302:	e6b7      	b.n	801e074 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 801e304:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801e308:	e6b4      	b.n	801e074 <lfs_rename_+0x14>
    return 0;
 801e30a:	463e      	mov	r6, r7
 801e30c:	e6b2      	b.n	801e074 <lfs_rename_+0x14>
 801e30e:	bf00      	nop
 801e310:	700ffc00 	.word	0x700ffc00

0801e314 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 801e314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e318:	b08b      	sub	sp, #44	@ 0x2c
 801e31a:	4607      	mov	r7, r0
 801e31c:	460c      	mov	r4, r1
 801e31e:	9203      	str	r2, [sp, #12]
 801e320:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801e322:	f013 0f02 	tst.w	r3, #2
 801e326:	d005      	beq.n	801e334 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 801e328:	f7ff f8b2 	bl	801d490 <lfs_fs_forceconsistency>
        if (err) {
 801e32c:	4606      	mov	r6, r0
 801e32e:	2800      	cmp	r0, #0
 801e330:	f040 8109 	bne.w	801e546 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 801e334:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e336:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 801e338:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 801e33a:	2300      	movs	r3, #0
 801e33c:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 801e33e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801e340:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801e342:	f104 0808 	add.w	r8, r4, #8
 801e346:	1d23      	adds	r3, r4, #4
 801e348:	aa03      	add	r2, sp, #12
 801e34a:	4641      	mov	r1, r8
 801e34c:	4638      	mov	r0, r7
 801e34e:	f7ff fd0b 	bl	801dd68 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 801e352:	1e06      	subs	r6, r0, #0
 801e354:	da09      	bge.n	801e36a <lfs_file_opencfg_+0x56>
 801e356:	f116 0f02 	cmn.w	r6, #2
 801e35a:	f040 80ec 	bne.w	801e536 <lfs_file_opencfg_+0x222>
 801e35e:	88a2      	ldrh	r2, [r4, #4]
 801e360:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e364:	429a      	cmp	r2, r3
 801e366:	f000 80e6 	beq.w	801e536 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 801e36a:	2301      	movs	r3, #1
 801e36c:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801e36e:	4621      	mov	r1, r4
 801e370:	4638      	mov	r0, r7
 801e372:	f7fb fec7 	bl	801a104 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 801e376:	f116 0f02 	cmn.w	r6, #2
 801e37a:	d019      	beq.n	801e3b0 <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 801e37c:	f415 7f00 	tst.w	r5, #512	@ 0x200
 801e380:	f040 80d7 	bne.w	801e532 <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 801e384:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801e388:	2e01      	cmp	r6, #1
 801e38a:	f040 80e0 	bne.w	801e54e <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 801e38e:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801e392:	d042      	beq.n	801e41a <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801e394:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801e398:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801e39c:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 801e3a0:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 801e3a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e3a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e3aa:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801e3ac:	2500      	movs	r5, #0
 801e3ae:	e064      	b.n	801e47a <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 801e3b0:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801e3b4:	f000 80bf 	beq.w	801e536 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 801e3b8:	9d03      	ldr	r5, [sp, #12]
 801e3ba:	4628      	mov	r0, r5
 801e3bc:	f7f1 ff70 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801e3c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e3c2:	4283      	cmp	r3, r0
 801e3c4:	d202      	bcs.n	801e3cc <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 801e3c6:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801e3ca:	e0b4      	b.n	801e536 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801e3cc:	88a3      	ldrh	r3, [r4, #4]
 801e3ce:	029b      	lsls	r3, r3, #10
 801e3d0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801e3d4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801e3d8:	9204      	str	r2, [sp, #16]
 801e3da:	2200      	movs	r2, #0
 801e3dc:	9205      	str	r2, [sp, #20]
 801e3de:	4318      	orrs	r0, r3
 801e3e0:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801e3e4:	9006      	str	r0, [sp, #24]
 801e3e6:	9507      	str	r5, [sp, #28]
 801e3e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801e3ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e3f0:	9308      	str	r3, [sp, #32]
 801e3f2:	9209      	str	r2, [sp, #36]	@ 0x24
 801e3f4:	2303      	movs	r3, #3
 801e3f6:	aa04      	add	r2, sp, #16
 801e3f8:	4641      	mov	r1, r8
 801e3fa:	4638      	mov	r0, r7
 801e3fc:	f7fe ffa0 	bl	801d340 <lfs_dir_commit>
 801e400:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801e402:	f110 0f1c 	cmn.w	r0, #28
 801e406:	d005      	beq.n	801e414 <lfs_file_opencfg_+0x100>
        if (err) {
 801e408:	2800      	cmp	r0, #0
 801e40a:	f040 8094 	bne.w	801e536 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801e40e:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 801e564 <lfs_file_opencfg_+0x250>
 801e412:	e7cb      	b.n	801e3ac <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801e414:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 801e418:	e08d      	b.n	801e536 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801e41a:	88a3      	ldrh	r3, [r4, #4]
 801e41c:	029b      	lsls	r3, r3, #10
 801e41e:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801e422:	9200      	str	r2, [sp, #0]
 801e424:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801e428:	f043 0308 	orr.w	r3, r3, #8
 801e42c:	4a4b      	ldr	r2, [pc, #300]	@ (801e55c <lfs_file_opencfg_+0x248>)
 801e42e:	4641      	mov	r1, r8
 801e430:	4638      	mov	r0, r7
 801e432:	f7fc f967 	bl	801a704 <lfs_dir_get>
        if (tag < 0) {
 801e436:	f1b0 0900 	subs.w	r9, r0, #0
 801e43a:	dab7      	bge.n	801e3ac <lfs_file_opencfg_+0x98>
            err = tag;
 801e43c:	464e      	mov	r6, r9
 801e43e:	e07a      	b.n	801e536 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801e440:	685b      	ldr	r3, [r3, #4]
 801e442:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801e446:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801e44a:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 801e44e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 801e452:	88a3      	ldrh	r3, [r4, #4]
 801e454:	029b      	lsls	r3, r3, #10
 801e456:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e45a:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801e45c:	6849      	ldr	r1, [r1, #4]
 801e45e:	9100      	str	r1, [sp, #0]
 801e460:	4313      	orrs	r3, r2
 801e462:	4a3f      	ldr	r2, [pc, #252]	@ (801e560 <lfs_file_opencfg_+0x24c>)
 801e464:	4641      	mov	r1, r8
 801e466:	4638      	mov	r0, r7
 801e468:	f7fc f94c 	bl	801a704 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 801e46c:	1e06      	subs	r6, r0, #0
 801e46e:	da0c      	bge.n	801e48a <lfs_file_opencfg_+0x176>
 801e470:	f116 0f02 	cmn.w	r6, #2
 801e474:	d009      	beq.n	801e48a <lfs_file_opencfg_+0x176>
 801e476:	e05e      	b.n	801e536 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801e478:	3501      	adds	r5, #1
 801e47a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801e47c:	689a      	ldr	r2, [r3, #8]
 801e47e:	42aa      	cmp	r2, r5
 801e480:	d915      	bls.n	801e4ae <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801e482:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801e484:	f012 0f01 	tst.w	r2, #1
 801e488:	d1da      	bne.n	801e440 <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801e48a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e48c:	f013 0f02 	tst.w	r3, #2
 801e490:	d0f2      	beq.n	801e478 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801e492:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801e494:	6852      	ldr	r2, [r2, #4]
 801e496:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801e49a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801e49e:	6891      	ldr	r1, [r2, #8]
 801e4a0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801e4a2:	4291      	cmp	r1, r2
 801e4a4:	d856      	bhi.n	801e554 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 801e4a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e4aa:	6323      	str	r3, [r4, #48]	@ 0x30
 801e4ac:	e7e4      	b.n	801e478 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	b16b      	cbz	r3, 801e4ce <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 801e4b2:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 801e4b4:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801e4b8:	4638      	mov	r0, r7
 801e4ba:	f7fb ff55 	bl	801a368 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 801e4be:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801e4c2:	f240 2301 	movw	r3, #513	@ 0x201
 801e4c6:	429a      	cmp	r2, r3
 801e4c8:	d00b      	beq.n	801e4e2 <lfs_file_opencfg_+0x1ce>
    return 0;
 801e4ca:	2600      	movs	r6, #0
 801e4cc:	e03b      	b.n	801e546 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801e4ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 801e4d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801e4d2:	f7fb fb09 	bl	8019ae8 <pvPortMalloc>
 801e4d6:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 801e4d8:	2800      	cmp	r0, #0
 801e4da:	d1eb      	bne.n	801e4b4 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 801e4dc:	f06f 060b 	mvn.w	r6, #11
 801e4e0:	e029      	b.n	801e536 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 801e4e2:	f06f 0101 	mvn.w	r1, #1
 801e4e6:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 801e4e8:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 801e4ec:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 801e4ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e4f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e4f4:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 801e4f6:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 801e4f8:	2300      	movs	r3, #0
 801e4fa:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 801e4fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e4fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e500:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 801e502:	b90a      	cbnz	r2, 801e508 <lfs_file_opencfg_+0x1f4>
    return 0;
 801e504:	2600      	movs	r6, #0
 801e506:	e01e      	b.n	801e546 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801e508:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 801e50a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801e50e:	4293      	cmp	r3, r2
 801e510:	bf28      	it	cs
 801e512:	4613      	movcs	r3, r2
 801e514:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 801e518:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801e51a:	9200      	str	r2, [sp, #0]
 801e51c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801e520:	4a0e      	ldr	r2, [pc, #56]	@ (801e55c <lfs_file_opencfg_+0x248>)
 801e522:	4641      	mov	r1, r8
 801e524:	4638      	mov	r0, r7
 801e526:	f7fc f8ed 	bl	801a704 <lfs_dir_get>
            if (res < 0) {
 801e52a:	1e06      	subs	r6, r0, #0
 801e52c:	db03      	blt.n	801e536 <lfs_file_opencfg_+0x222>
    return 0;
 801e52e:	2600      	movs	r6, #0
 801e530:	e009      	b.n	801e546 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 801e532:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 801e536:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e538:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e53c:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 801e53e:	4621      	mov	r1, r4
 801e540:	4638      	mov	r0, r7
 801e542:	f7ff fbfd 	bl	801dd40 <lfs_file_close_>
}
 801e546:	4630      	mov	r0, r6
 801e548:	b00b      	add	sp, #44	@ 0x2c
 801e54a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 801e54e:	f06f 0614 	mvn.w	r6, #20
 801e552:	e7f0      	b.n	801e536 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 801e554:	f06f 061b 	mvn.w	r6, #27
 801e558:	e7ed      	b.n	801e536 <lfs_file_opencfg_+0x222>
 801e55a:	bf00      	nop
 801e55c:	700ffc00 	.word	0x700ffc00
 801e560:	7ffffc00 	.word	0x7ffffc00
 801e564:	20100000 	.word	0x20100000

0801e568 <lfs_file_open_>:
        const char *path, int flags) {
 801e568:	b510      	push	{r4, lr}
 801e56a:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801e56c:	4c02      	ldr	r4, [pc, #8]	@ (801e578 <lfs_file_open_+0x10>)
 801e56e:	9400      	str	r4, [sp, #0]
 801e570:	f7ff fed0 	bl	801e314 <lfs_file_opencfg_>
}
 801e574:	b002      	add	sp, #8
 801e576:	bd10      	pop	{r4, pc}
 801e578:	08038850 	.word	0x08038850

0801e57c <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801e57c:	b530      	push	{r4, r5, lr}
 801e57e:	b0ab      	sub	sp, #172	@ 0xac
 801e580:	4604      	mov	r4, r0
 801e582:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 801e584:	f7fe ff84 	bl	801d490 <lfs_fs_forceconsistency>
    if (err) {
 801e588:	4603      	mov	r3, r0
 801e58a:	b110      	cbz	r0, 801e592 <lfs_mkdir_+0x16>
}
 801e58c:	4618      	mov	r0, r3
 801e58e:	b02b      	add	sp, #172	@ 0xac
 801e590:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 801e592:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e594:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801e596:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 801e59a:	aa01      	add	r2, sp, #4
 801e59c:	a91e      	add	r1, sp, #120	@ 0x78
 801e59e:	4620      	mov	r0, r4
 801e5a0:	f7ff fbe2 	bl	801dd68 <lfs_dir_find>
 801e5a4:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801e5a6:	f110 0f02 	cmn.w	r0, #2
 801e5aa:	d12f      	bne.n	801e60c <lfs_mkdir_+0x90>
 801e5ac:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 801e5b0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801e5b4:	4291      	cmp	r1, r2
 801e5b6:	d029      	beq.n	801e60c <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 801e5b8:	9801      	ldr	r0, [sp, #4]
 801e5ba:	f7f1 fe71 	bl	80102a0 <strlen>
 801e5be:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 801e5c0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801e5c2:	4283      	cmp	r3, r0
 801e5c4:	f0c0 8089 	bcc.w	801e6da <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 801e5c8:	4620      	mov	r0, r4
 801e5ca:	f7fb fdad 	bl	801a128 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 801e5ce:	a913      	add	r1, sp, #76	@ 0x4c
 801e5d0:	4620      	mov	r0, r4
 801e5d2:	f7fd f9f3 	bl	801b9bc <lfs_dir_alloc>
    if (err) {
 801e5d6:	4603      	mov	r3, r0
 801e5d8:	2800      	cmp	r0, #0
 801e5da:	d1d7      	bne.n	801e58c <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 801e5dc:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801e5e0:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 801e5e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e5e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e5ec:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801e5f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 801e5f4:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 801e5f8:	b16b      	cbz	r3, 801e616 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 801e5fa:	aa11      	add	r2, sp, #68	@ 0x44
 801e5fc:	a90b      	add	r1, sp, #44	@ 0x2c
 801e5fe:	4620      	mov	r0, r4
 801e600:	f7fd f86e 	bl	801b6e0 <lfs_dir_fetch>
        if (err) {
 801e604:	4603      	mov	r3, r0
 801e606:	2800      	cmp	r0, #0
 801e608:	d0f4      	beq.n	801e5f4 <lfs_mkdir_+0x78>
 801e60a:	e7bf      	b.n	801e58c <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	dbbd      	blt.n	801e58c <lfs_mkdir_+0x10>
 801e610:	f06f 0310 	mvn.w	r3, #16
 801e614:	e7ba      	b.n	801e58c <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 801e616:	4b32      	ldr	r3, [pc, #200]	@ (801e6e0 <lfs_mkdir_+0x164>)
 801e618:	9326      	str	r3, [sp, #152]	@ 0x98
 801e61a:	ab11      	add	r3, sp, #68	@ 0x44
 801e61c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e61e:	2301      	movs	r3, #1
 801e620:	aa26      	add	r2, sp, #152	@ 0x98
 801e622:	a913      	add	r1, sp, #76	@ 0x4c
 801e624:	4620      	mov	r0, r4
 801e626:	f7fe fe8b 	bl	801d340 <lfs_dir_commit>
    if (err) {
 801e62a:	4603      	mov	r3, r0
 801e62c:	2800      	cmp	r0, #0
 801e62e:	d1ad      	bne.n	801e58c <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 801e630:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801e634:	bb33      	cbnz	r3, 801e684 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801e636:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 801e63a:	029b      	lsls	r3, r3, #10
 801e63c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801e640:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801e644:	9203      	str	r2, [sp, #12]
 801e646:	2200      	movs	r2, #0
 801e648:	9204      	str	r2, [sp, #16]
 801e64a:	431d      	orrs	r5, r3
 801e64c:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801e650:	9505      	str	r5, [sp, #20]
 801e652:	9a01      	ldr	r2, [sp, #4]
 801e654:	9206      	str	r2, [sp, #24]
 801e656:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801e65a:	f043 0308 	orr.w	r3, r3, #8
 801e65e:	9307      	str	r3, [sp, #28]
 801e660:	ab13      	add	r3, sp, #76	@ 0x4c
 801e662:	9308      	str	r3, [sp, #32]
 801e664:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d134      	bne.n	801e6d6 <lfs_mkdir_+0x15a>
 801e66c:	4b1c      	ldr	r3, [pc, #112]	@ (801e6e0 <lfs_mkdir_+0x164>)
 801e66e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e670:	ab13      	add	r3, sp, #76	@ 0x4c
 801e672:	930a      	str	r3, [sp, #40]	@ 0x28
 801e674:	2304      	movs	r3, #4
 801e676:	aa03      	add	r2, sp, #12
 801e678:	a91e      	add	r1, sp, #120	@ 0x78
 801e67a:	4620      	mov	r0, r4
 801e67c:	f7fe fe60 	bl	801d340 <lfs_dir_commit>
 801e680:	4603      	mov	r3, r0
    if (err) {
 801e682:	e783      	b.n	801e58c <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801e684:	2101      	movs	r1, #1
 801e686:	4620      	mov	r0, r4
 801e688:	f7fb fe3e 	bl	801a308 <lfs_fs_preporphans>
        if (err) {
 801e68c:	4603      	mov	r3, r0
 801e68e:	2800      	cmp	r0, #0
 801e690:	f47f af7c 	bne.w	801e58c <lfs_mkdir_+0x10>
        cwd.type = 0;
 801e694:	2300      	movs	r3, #0
 801e696:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 801e69a:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 801e69e:	ab1c      	add	r3, sp, #112	@ 0x70
 801e6a0:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801e6a2:	4b0f      	ldr	r3, [pc, #60]	@ (801e6e0 <lfs_mkdir_+0x164>)
 801e6a4:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e6a6:	ab13      	add	r3, sp, #76	@ 0x4c
 801e6a8:	9329      	str	r3, [sp, #164]	@ 0xa4
 801e6aa:	2301      	movs	r3, #1
 801e6ac:	aa28      	add	r2, sp, #160	@ 0xa0
 801e6ae:	a90b      	add	r1, sp, #44	@ 0x2c
 801e6b0:	4620      	mov	r0, r4
 801e6b2:	f7fe fe45 	bl	801d340 <lfs_dir_commit>
        if (err) {
 801e6b6:	4603      	mov	r3, r0
 801e6b8:	b110      	cbz	r0, 801e6c0 <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 801e6ba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801e6bc:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 801e6be:	e765      	b.n	801e58c <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 801e6c0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e6c2:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 801e6c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e6c8:	4620      	mov	r0, r4
 801e6ca:	f7fb fe1d 	bl	801a308 <lfs_fs_preporphans>
        if (err) {
 801e6ce:	4603      	mov	r3, r0
 801e6d0:	2800      	cmp	r0, #0
 801e6d2:	d0b0      	beq.n	801e636 <lfs_mkdir_+0xba>
 801e6d4:	e75a      	b.n	801e58c <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801e6d6:	2300      	movs	r3, #0
 801e6d8:	e7c9      	b.n	801e66e <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 801e6da:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 801e6de:	e755      	b.n	801e58c <lfs_mkdir_+0x10>
 801e6e0:	600ffc08 	.word	0x600ffc08

0801e6e4 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 801e6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e6e6:	b085      	sub	sp, #20
 801e6e8:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 801e6ea:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e6ee:	429a      	cmp	r2, r3
 801e6f0:	d02b      	beq.n	801e74a <lfs_dir_getinfo+0x66>
 801e6f2:	4604      	mov	r4, r0
 801e6f4:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801e6f6:	0297      	lsls	r7, r2, #10
 801e6f8:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801e6fa:	3301      	adds	r3, #1
 801e6fc:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801e700:	9100      	str	r1, [sp, #0]
 801e702:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801e706:	4a19      	ldr	r2, [pc, #100]	@ (801e76c <lfs_dir_getinfo+0x88>)
 801e708:	4631      	mov	r1, r6
 801e70a:	f7fb fffb 	bl	801a704 <lfs_dir_get>
    if (tag < 0) {
 801e70e:	2800      	cmp	r0, #0
 801e710:	db21      	blt.n	801e756 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801e712:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 801e716:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801e718:	ab02      	add	r3, sp, #8
 801e71a:	9300      	str	r3, [sp, #0]
 801e71c:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 801e720:	f043 0308 	orr.w	r3, r3, #8
 801e724:	4a12      	ldr	r2, [pc, #72]	@ (801e770 <lfs_dir_getinfo+0x8c>)
 801e726:	4631      	mov	r1, r6
 801e728:	4620      	mov	r0, r4
 801e72a:	f7fb ffeb 	bl	801a704 <lfs_dir_get>
    if (tag < 0) {
 801e72e:	2800      	cmp	r0, #0
 801e730:	db11      	blt.n	801e756 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801e732:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801e736:	f240 2202 	movw	r2, #514	@ 0x202
 801e73a:	4293      	cmp	r3, r2
 801e73c:	d00d      	beq.n	801e75a <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801e73e:	f240 2201 	movw	r2, #513	@ 0x201
 801e742:	4293      	cmp	r3, r2
 801e744:	d00d      	beq.n	801e762 <lfs_dir_getinfo+0x7e>
    return 0;
 801e746:	2000      	movs	r0, #0
 801e748:	e005      	b.n	801e756 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 801e74a:	4b0a      	ldr	r3, [pc, #40]	@ (801e774 <lfs_dir_getinfo+0x90>)
 801e74c:	881b      	ldrh	r3, [r3, #0]
 801e74e:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 801e750:	2302      	movs	r3, #2
 801e752:	702b      	strb	r3, [r5, #0]
        return 0;
 801e754:	2000      	movs	r0, #0
}
 801e756:	b005      	add	sp, #20
 801e758:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 801e75a:	9b03      	ldr	r3, [sp, #12]
 801e75c:	606b      	str	r3, [r5, #4]
    return 0;
 801e75e:	2000      	movs	r0, #0
 801e760:	e7f9      	b.n	801e756 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 801e762:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 801e766:	6068      	str	r0, [r5, #4]
    return 0;
 801e768:	2000      	movs	r0, #0
 801e76a:	e7f4      	b.n	801e756 <lfs_dir_getinfo+0x72>
 801e76c:	780ffc00 	.word	0x780ffc00
 801e770:	700ffc00 	.word	0x700ffc00
 801e774:	08038f40 	.word	0x08038f40

0801e778 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801e778:	b530      	push	{r4, r5, lr}
 801e77a:	b08b      	sub	sp, #44	@ 0x2c
 801e77c:	4604      	mov	r4, r0
 801e77e:	9101      	str	r1, [sp, #4]
 801e780:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801e782:	2300      	movs	r3, #0
 801e784:	aa01      	add	r2, sp, #4
 801e786:	a902      	add	r1, sp, #8
 801e788:	f7ff faee 	bl	801dd68 <lfs_dir_find>
    if (tag < 0) {
 801e78c:	2800      	cmp	r0, #0
 801e78e:	db06      	blt.n	801e79e <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 801e790:	462b      	mov	r3, r5
 801e792:	f3c0 2289 	ubfx	r2, r0, #10, #10
 801e796:	a902      	add	r1, sp, #8
 801e798:	4620      	mov	r0, r4
 801e79a:	f7ff ffa3 	bl	801e6e4 <lfs_dir_getinfo>
}
 801e79e:	b00b      	add	sp, #44	@ 0x2c
 801e7a0:	bd30      	pop	{r4, r5, pc}
	...

0801e7a4 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801e7a4:	b570      	push	{r4, r5, r6, lr}
 801e7a6:	4605      	mov	r5, r0
 801e7a8:	460c      	mov	r4, r1
 801e7aa:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 801e7ac:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801e7b0:	2100      	movs	r1, #0
 801e7b2:	4630      	mov	r0, r6
 801e7b4:	f00d f924 	bl	802ba00 <memset>
    if (dir->pos == 0) {
 801e7b8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e7ba:	b183      	cbz	r3, 801e7de <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 801e7bc:	2b01      	cmp	r3, #1
 801e7be:	d11f      	bne.n	801e800 <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 801e7c0:	4633      	mov	r3, r6
 801e7c2:	2202      	movs	r2, #2
 801e7c4:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 801e7c8:	4a22      	ldr	r2, [pc, #136]	@ (801e854 <lfs_dir_read_+0xb0>)
 801e7ca:	8811      	ldrh	r1, [r2, #0]
 801e7cc:	7892      	ldrb	r2, [r2, #2]
 801e7ce:	8131      	strh	r1, [r6, #8]
 801e7d0:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801e7d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e7d4:	3301      	adds	r3, #1
 801e7d6:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801e7d8:	f04f 0c01 	mov.w	ip, #1
 801e7dc:	e034      	b.n	801e848 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 801e7de:	2302      	movs	r3, #2
 801e7e0:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 801e7e2:	4b1d      	ldr	r3, [pc, #116]	@ (801e858 <lfs_dir_read_+0xb4>)
 801e7e4:	881b      	ldrh	r3, [r3, #0]
 801e7e6:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 801e7e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e7ea:	3301      	adds	r3, #1
 801e7ec:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801e7ee:	f04f 0c01 	mov.w	ip, #1
 801e7f2:	e029      	b.n	801e848 <lfs_dir_read_+0xa4>
        dir->id += 1;
 801e7f4:	88a1      	ldrh	r1, [r4, #4]
 801e7f6:	3101      	adds	r1, #1
 801e7f8:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 801e7fa:	f11c 0f02 	cmn.w	ip, #2
 801e7fe:	d11e      	bne.n	801e83e <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 801e800:	88a3      	ldrh	r3, [r4, #4]
 801e802:	8ba1      	ldrh	r1, [r4, #28]
 801e804:	428b      	cmp	r3, r1
 801e806:	d10c      	bne.n	801e822 <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 801e808:	7fe3      	ldrb	r3, [r4, #31]
 801e80a:	b1fb      	cbz	r3, 801e84c <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801e80c:	f104 0220 	add.w	r2, r4, #32
 801e810:	f104 0108 	add.w	r1, r4, #8
 801e814:	4628      	mov	r0, r5
 801e816:	f7fc ff63 	bl	801b6e0 <lfs_dir_fetch>
            if (err) {
 801e81a:	4684      	mov	ip, r0
 801e81c:	b9a0      	cbnz	r0, 801e848 <lfs_dir_read_+0xa4>
            dir->id = 0;
 801e81e:	2300      	movs	r3, #0
 801e820:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801e822:	4633      	mov	r3, r6
 801e824:	88a2      	ldrh	r2, [r4, #4]
 801e826:	f104 0108 	add.w	r1, r4, #8
 801e82a:	4628      	mov	r0, r5
 801e82c:	f7ff ff5a 	bl	801e6e4 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 801e830:	4684      	mov	ip, r0
 801e832:	2800      	cmp	r0, #0
 801e834:	d0de      	beq.n	801e7f4 <lfs_dir_read_+0x50>
 801e836:	f110 0f02 	cmn.w	r0, #2
 801e83a:	d0db      	beq.n	801e7f4 <lfs_dir_read_+0x50>
 801e83c:	e004      	b.n	801e848 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 801e83e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e840:	3301      	adds	r3, #1
 801e842:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 801e844:	f04f 0c01 	mov.w	ip, #1
}
 801e848:	4660      	mov	r0, ip
 801e84a:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 801e84c:	f04f 0c00 	mov.w	ip, #0
 801e850:	e7fa      	b.n	801e848 <lfs_dir_read_+0xa4>
 801e852:	bf00      	nop
 801e854:	08038724 	.word	0x08038724
 801e858:	080350f8 	.word	0x080350f8

0801e85c <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801e85c:	b570      	push	{r4, r5, r6, lr}
 801e85e:	4605      	mov	r5, r0
 801e860:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801e862:	694b      	ldr	r3, [r1, #20]
 801e864:	4608      	mov	r0, r1
 801e866:	4798      	blx	r3
    if (err) {
 801e868:	4606      	mov	r6, r0
 801e86a:	b108      	cbz	r0, 801e870 <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801e86c:	4630      	mov	r0, r6
 801e86e:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 801e870:	4621      	mov	r1, r4
 801e872:	4628      	mov	r0, r5
 801e874:	f7ff f860 	bl	801d938 <lfs_format_>
 801e878:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801e87a:	69a3      	ldr	r3, [r4, #24]
 801e87c:	4620      	mov	r0, r4
 801e87e:	4798      	blx	r3
    return err;
 801e880:	e7f4      	b.n	801e86c <lfs_format+0x10>

0801e882 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801e882:	b570      	push	{r4, r5, r6, lr}
 801e884:	4605      	mov	r5, r0
 801e886:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801e888:	694b      	ldr	r3, [r1, #20]
 801e88a:	4608      	mov	r0, r1
 801e88c:	4798      	blx	r3
    if (err) {
 801e88e:	4606      	mov	r6, r0
 801e890:	b108      	cbz	r0, 801e896 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801e892:	4630      	mov	r0, r6
 801e894:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 801e896:	4621      	mov	r1, r4
 801e898:	4628      	mov	r0, r5
 801e89a:	f7ff f8cb 	bl	801da34 <lfs_mount_>
 801e89e:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801e8a0:	69a3      	ldr	r3, [r4, #24]
 801e8a2:	4620      	mov	r0, r4
 801e8a4:	4798      	blx	r3
    return err;
 801e8a6:	e7f4      	b.n	801e892 <lfs_mount+0x10>

0801e8a8 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 801e8a8:	b570      	push	{r4, r5, r6, lr}
 801e8aa:	4604      	mov	r4, r0
 801e8ac:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801e8ae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e8b0:	6943      	ldr	r3, [r0, #20]
 801e8b2:	4798      	blx	r3
    if (err) {
 801e8b4:	4606      	mov	r6, r0
 801e8b6:	b108      	cbz	r0, 801e8bc <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e8b8:	4630      	mov	r0, r6
 801e8ba:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 801e8bc:	4629      	mov	r1, r5
 801e8be:	4620      	mov	r0, r4
 801e8c0:	f7ff fb0e 	bl	801dee0 <lfs_remove_>
 801e8c4:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801e8c6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e8c8:	6983      	ldr	r3, [r0, #24]
 801e8ca:	4798      	blx	r3
    return err;
 801e8cc:	e7f4      	b.n	801e8b8 <lfs_remove+0x10>

0801e8ce <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801e8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8d0:	4604      	mov	r4, r0
 801e8d2:	460d      	mov	r5, r1
 801e8d4:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801e8d6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e8d8:	6943      	ldr	r3, [r0, #20]
 801e8da:	4798      	blx	r3
    if (err) {
 801e8dc:	4607      	mov	r7, r0
 801e8de:	b108      	cbz	r0, 801e8e4 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e8e0:	4638      	mov	r0, r7
 801e8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 801e8e4:	4632      	mov	r2, r6
 801e8e6:	4629      	mov	r1, r5
 801e8e8:	4620      	mov	r0, r4
 801e8ea:	f7ff fbb9 	bl	801e060 <lfs_rename_>
 801e8ee:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801e8f0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e8f2:	6983      	ldr	r3, [r0, #24]
 801e8f4:	4798      	blx	r3
    return err;
 801e8f6:	e7f3      	b.n	801e8e0 <lfs_rename+0x12>

0801e8f8 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801e8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8fa:	4604      	mov	r4, r0
 801e8fc:	460d      	mov	r5, r1
 801e8fe:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801e900:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e902:	6943      	ldr	r3, [r0, #20]
 801e904:	4798      	blx	r3
    if (err) {
 801e906:	4607      	mov	r7, r0
 801e908:	b108      	cbz	r0, 801e90e <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e90a:	4638      	mov	r0, r7
 801e90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 801e90e:	4632      	mov	r2, r6
 801e910:	4629      	mov	r1, r5
 801e912:	4620      	mov	r0, r4
 801e914:	f7ff ff30 	bl	801e778 <lfs_stat_>
 801e918:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801e91a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e91c:	6983      	ldr	r3, [r0, #24]
 801e91e:	4798      	blx	r3
    return err;
 801e920:	e7f3      	b.n	801e90a <lfs_stat+0x12>
	...

0801e924 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801e924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e928:	4604      	mov	r4, r0
 801e92a:	460d      	mov	r5, r1
 801e92c:	4616      	mov	r6, r2
 801e92e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801e930:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e932:	6942      	ldr	r2, [r0, #20]
 801e934:	4790      	blx	r2
    if (err) {
 801e936:	4607      	mov	r7, r0
 801e938:	b110      	cbz	r0, 801e940 <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e93a:	4638      	mov	r0, r7
 801e93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e940:	4629      	mov	r1, r5
 801e942:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e944:	f7fb fbc7 	bl	801a0d6 <lfs_mlist_isopen>
 801e948:	b950      	cbnz	r0, 801e960 <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 801e94a:	4643      	mov	r3, r8
 801e94c:	4632      	mov	r2, r6
 801e94e:	4629      	mov	r1, r5
 801e950:	4620      	mov	r0, r4
 801e952:	f7ff fe09 	bl	801e568 <lfs_file_open_>
 801e956:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801e958:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e95a:	6983      	ldr	r3, [r0, #24]
 801e95c:	4798      	blx	r3
    return err;
 801e95e:	e7ec      	b.n	801e93a <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e960:	4b03      	ldr	r3, [pc, #12]	@ (801e970 <lfs_file_open+0x4c>)
 801e962:	4a04      	ldr	r2, [pc, #16]	@ (801e974 <lfs_file_open+0x50>)
 801e964:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801e968:	4803      	ldr	r0, [pc, #12]	@ (801e978 <lfs_file_open+0x54>)
 801e96a:	f00a faf7 	bl	8028f5c <__assert_func>
 801e96e:	bf00      	nop
 801e970:	08038728 	.word	0x08038728
 801e974:	0803885c 	.word	0x0803885c
 801e978:	08037bac 	.word	0x08037bac

0801e97c <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801e97c:	b570      	push	{r4, r5, r6, lr}
 801e97e:	4604      	mov	r4, r0
 801e980:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801e982:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e984:	6943      	ldr	r3, [r0, #20]
 801e986:	4798      	blx	r3
    if (err) {
 801e988:	4606      	mov	r6, r0
 801e98a:	b108      	cbz	r0, 801e990 <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e98c:	4630      	mov	r0, r6
 801e98e:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e990:	4629      	mov	r1, r5
 801e992:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e994:	f7fb fb9f 	bl	801a0d6 <lfs_mlist_isopen>
 801e998:	b140      	cbz	r0, 801e9ac <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 801e99a:	4629      	mov	r1, r5
 801e99c:	4620      	mov	r0, r4
 801e99e:	f7ff f9cf 	bl	801dd40 <lfs_file_close_>
 801e9a2:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801e9a4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e9a6:	6983      	ldr	r3, [r0, #24]
 801e9a8:	4798      	blx	r3
    return err;
 801e9aa:	e7ef      	b.n	801e98c <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e9ac:	4b03      	ldr	r3, [pc, #12]	@ (801e9bc <lfs_file_close+0x40>)
 801e9ae:	4a04      	ldr	r2, [pc, #16]	@ (801e9c0 <lfs_file_close+0x44>)
 801e9b0:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 801e9b4:	4803      	ldr	r0, [pc, #12]	@ (801e9c4 <lfs_file_close+0x48>)
 801e9b6:	f00a fad1 	bl	8028f5c <__assert_func>
 801e9ba:	bf00      	nop
 801e9bc:	08038760 	.word	0x08038760
 801e9c0:	08038840 	.word	0x08038840
 801e9c4:	08037bac 	.word	0x08037bac

0801e9c8 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801e9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9cc:	4604      	mov	r4, r0
 801e9ce:	460d      	mov	r5, r1
 801e9d0:	4616      	mov	r6, r2
 801e9d2:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801e9d4:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e9d6:	6942      	ldr	r2, [r0, #20]
 801e9d8:	4790      	blx	r2
    if (err) {
 801e9da:	4607      	mov	r7, r0
 801e9dc:	b110      	cbz	r0, 801e9e4 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801e9de:	4638      	mov	r0, r7
 801e9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e9e4:	4629      	mov	r1, r5
 801e9e6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e9e8:	f7fb fb75 	bl	801a0d6 <lfs_mlist_isopen>
 801e9ec:	b150      	cbz	r0, 801ea04 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801e9ee:	4643      	mov	r3, r8
 801e9f0:	4632      	mov	r2, r6
 801e9f2:	4629      	mov	r1, r5
 801e9f4:	4620      	mov	r0, r4
 801e9f6:	f7fd fac1 	bl	801bf7c <lfs_file_read_>
 801e9fa:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801e9fc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e9fe:	6983      	ldr	r3, [r0, #24]
 801ea00:	4798      	blx	r3
    return res;
 801ea02:	e7ec      	b.n	801e9de <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ea04:	4b03      	ldr	r3, [pc, #12]	@ (801ea14 <lfs_file_read+0x4c>)
 801ea06:	4a04      	ldr	r2, [pc, #16]	@ (801ea18 <lfs_file_read+0x50>)
 801ea08:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801ea0c:	4803      	ldr	r0, [pc, #12]	@ (801ea1c <lfs_file_read+0x54>)
 801ea0e:	f00a faa5 	bl	8028f5c <__assert_func>
 801ea12:	bf00      	nop
 801ea14:	08038760 	.word	0x08038760
 801ea18:	08038830 	.word	0x08038830
 801ea1c:	08037bac 	.word	0x08037bac

0801ea20 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801ea20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea24:	4604      	mov	r4, r0
 801ea26:	460d      	mov	r5, r1
 801ea28:	4616      	mov	r6, r2
 801ea2a:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801ea2c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ea2e:	6942      	ldr	r2, [r0, #20]
 801ea30:	4790      	blx	r2
    if (err) {
 801ea32:	4607      	mov	r7, r0
 801ea34:	b110      	cbz	r0, 801ea3c <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801ea36:	4638      	mov	r0, r7
 801ea38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ea3c:	4629      	mov	r1, r5
 801ea3e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ea40:	f7fb fb49 	bl	801a0d6 <lfs_mlist_isopen>
 801ea44:	b150      	cbz	r0, 801ea5c <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 801ea46:	4643      	mov	r3, r8
 801ea48:	4632      	mov	r2, r6
 801ea4a:	4629      	mov	r1, r5
 801ea4c:	4620      	mov	r0, r4
 801ea4e:	f7fd fb05 	bl	801c05c <lfs_file_write_>
 801ea52:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801ea54:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ea56:	6983      	ldr	r3, [r0, #24]
 801ea58:	4798      	blx	r3
    return res;
 801ea5a:	e7ec      	b.n	801ea36 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ea5c:	4b03      	ldr	r3, [pc, #12]	@ (801ea6c <lfs_file_write+0x4c>)
 801ea5e:	4a04      	ldr	r2, [pc, #16]	@ (801ea70 <lfs_file_write+0x50>)
 801ea60:	f641 0105 	movw	r1, #6149	@ 0x1805
 801ea64:	4803      	ldr	r0, [pc, #12]	@ (801ea74 <lfs_file_write+0x54>)
 801ea66:	f00a fa79 	bl	8028f5c <__assert_func>
 801ea6a:	bf00      	nop
 801ea6c:	08038760 	.word	0x08038760
 801ea70:	08038810 	.word	0x08038810
 801ea74:	08037bac 	.word	0x08037bac

0801ea78 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801ea78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea7c:	4604      	mov	r4, r0
 801ea7e:	460d      	mov	r5, r1
 801ea80:	4616      	mov	r6, r2
 801ea82:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801ea84:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ea86:	6942      	ldr	r2, [r0, #20]
 801ea88:	4790      	blx	r2
    if (err) {
 801ea8a:	4607      	mov	r7, r0
 801ea8c:	b110      	cbz	r0, 801ea94 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801ea8e:	4638      	mov	r0, r7
 801ea90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ea94:	4629      	mov	r1, r5
 801ea96:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ea98:	f7fb fb1d 	bl	801a0d6 <lfs_mlist_isopen>
 801ea9c:	b150      	cbz	r0, 801eab4 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 801ea9e:	4643      	mov	r3, r8
 801eaa0:	4632      	mov	r2, r6
 801eaa2:	4629      	mov	r1, r5
 801eaa4:	4620      	mov	r0, r4
 801eaa6:	f7fd fa8d 	bl	801bfc4 <lfs_file_seek_>
 801eaaa:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801eaac:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801eaae:	6983      	ldr	r3, [r0, #24]
 801eab0:	4798      	blx	r3
    return res;
 801eab2:	e7ec      	b.n	801ea8e <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801eab4:	4b03      	ldr	r3, [pc, #12]	@ (801eac4 <lfs_file_seek+0x4c>)
 801eab6:	4a04      	ldr	r2, [pc, #16]	@ (801eac8 <lfs_file_seek+0x50>)
 801eab8:	f641 0117 	movw	r1, #6167	@ 0x1817
 801eabc:	4803      	ldr	r0, [pc, #12]	@ (801eacc <lfs_file_seek+0x54>)
 801eabe:	f00a fa4d 	bl	8028f5c <__assert_func>
 801eac2:	bf00      	nop
 801eac4:	08038760 	.word	0x08038760
 801eac8:	080387f0 	.word	0x080387f0
 801eacc:	08037bac 	.word	0x08037bac

0801ead0 <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801ead0:	b570      	push	{r4, r5, r6, lr}
 801ead2:	4604      	mov	r4, r0
 801ead4:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801ead6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ead8:	6943      	ldr	r3, [r0, #20]
 801eada:	4798      	blx	r3
    if (err) {
 801eadc:	4606      	mov	r6, r0
 801eade:	b108      	cbz	r0, 801eae4 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801eae0:	4630      	mov	r0, r6
 801eae2:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801eae4:	4629      	mov	r1, r5
 801eae6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801eae8:	f7fb faf5 	bl	801a0d6 <lfs_mlist_isopen>
 801eaec:	b140      	cbz	r0, 801eb00 <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 801eaee:	4629      	mov	r1, r5
 801eaf0:	4620      	mov	r0, r4
 801eaf2:	f7fb fba4 	bl	801a23e <lfs_file_tell_>
 801eaf6:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801eaf8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801eafa:	6983      	ldr	r3, [r0, #24]
 801eafc:	4798      	blx	r3
    return res;
 801eafe:	e7ef      	b.n	801eae0 <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801eb00:	4b03      	ldr	r3, [pc, #12]	@ (801eb10 <lfs_file_tell+0x40>)
 801eb02:	4a04      	ldr	r2, [pc, #16]	@ (801eb14 <lfs_file_tell+0x44>)
 801eb04:	f641 0138 	movw	r1, #6200	@ 0x1838
 801eb08:	4803      	ldr	r0, [pc, #12]	@ (801eb18 <lfs_file_tell+0x48>)
 801eb0a:	f00a fa27 	bl	8028f5c <__assert_func>
 801eb0e:	bf00      	nop
 801eb10:	08038760 	.word	0x08038760
 801eb14:	080387e0 	.word	0x080387e0
 801eb18:	08037bac 	.word	0x08037bac

0801eb1c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801eb1c:	b570      	push	{r4, r5, r6, lr}
 801eb1e:	4604      	mov	r4, r0
 801eb20:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801eb22:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801eb24:	6943      	ldr	r3, [r0, #20]
 801eb26:	4798      	blx	r3
    if (err) {
 801eb28:	4606      	mov	r6, r0
 801eb2a:	b108      	cbz	r0, 801eb30 <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801eb2c:	4630      	mov	r0, r6
 801eb2e:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 801eb30:	4629      	mov	r1, r5
 801eb32:	4620      	mov	r0, r4
 801eb34:	f7ff fd22 	bl	801e57c <lfs_mkdir_>
 801eb38:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801eb3a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801eb3c:	6983      	ldr	r3, [r0, #24]
 801eb3e:	4798      	blx	r3
    return err;
 801eb40:	e7f4      	b.n	801eb2c <lfs_mkdir+0x10>
	...

0801eb44 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801eb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb46:	4604      	mov	r4, r0
 801eb48:	460f      	mov	r7, r1
 801eb4a:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 801eb4c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801eb4e:	6943      	ldr	r3, [r0, #20]
 801eb50:	4798      	blx	r3
    if (err) {
 801eb52:	4606      	mov	r6, r0
 801eb54:	b108      	cbz	r0, 801eb5a <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801eb56:	4630      	mov	r0, r6
 801eb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801eb5a:	4639      	mov	r1, r7
 801eb5c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801eb5e:	f7fb faba 	bl	801a0d6 <lfs_mlist_isopen>
 801eb62:	b948      	cbnz	r0, 801eb78 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 801eb64:	462a      	mov	r2, r5
 801eb66:	4639      	mov	r1, r7
 801eb68:	4620      	mov	r0, r4
 801eb6a:	f7ff fa31 	bl	801dfd0 <lfs_dir_open_>
 801eb6e:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801eb70:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801eb72:	6983      	ldr	r3, [r0, #24]
 801eb74:	4798      	blx	r3
    return err;
 801eb76:	e7ee      	b.n	801eb56 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801eb78:	4b03      	ldr	r3, [pc, #12]	@ (801eb88 <lfs_dir_open+0x44>)
 801eb7a:	4a04      	ldr	r2, [pc, #16]	@ (801eb8c <lfs_dir_open+0x48>)
 801eb7c:	f641 0174 	movw	r1, #6260	@ 0x1874
 801eb80:	4803      	ldr	r0, [pc, #12]	@ (801eb90 <lfs_dir_open+0x4c>)
 801eb82:	f00a f9eb 	bl	8028f5c <__assert_func>
 801eb86:	bf00      	nop
 801eb88:	08038798 	.word	0x08038798
 801eb8c:	080387d0 	.word	0x080387d0
 801eb90:	08037bac 	.word	0x08037bac

0801eb94 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 801eb94:	b570      	push	{r4, r5, r6, lr}
 801eb96:	4604      	mov	r4, r0
 801eb98:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801eb9a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801eb9c:	6943      	ldr	r3, [r0, #20]
 801eb9e:	4798      	blx	r3
    if (err) {
 801eba0:	4606      	mov	r6, r0
 801eba2:	b108      	cbz	r0, 801eba8 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801eba4:	4630      	mov	r0, r6
 801eba6:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 801eba8:	4629      	mov	r1, r5
 801ebaa:	4620      	mov	r0, r4
 801ebac:	f7fb fb42 	bl	801a234 <lfs_dir_close_>
 801ebb0:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801ebb2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ebb4:	6983      	ldr	r3, [r0, #24]
 801ebb6:	4798      	blx	r3
    return err;
 801ebb8:	e7f4      	b.n	801eba4 <lfs_dir_close+0x10>

0801ebba <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801ebba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebbc:	4604      	mov	r4, r0
 801ebbe:	460d      	mov	r5, r1
 801ebc0:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801ebc2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ebc4:	6943      	ldr	r3, [r0, #20]
 801ebc6:	4798      	blx	r3
    if (err) {
 801ebc8:	4607      	mov	r7, r0
 801ebca:	b108      	cbz	r0, 801ebd0 <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801ebcc:	4638      	mov	r0, r7
 801ebce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 801ebd0:	4632      	mov	r2, r6
 801ebd2:	4629      	mov	r1, r5
 801ebd4:	4620      	mov	r0, r4
 801ebd6:	f7ff fde5 	bl	801e7a4 <lfs_dir_read_>
 801ebda:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801ebdc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ebde:	6983      	ldr	r3, [r0, #24]
 801ebe0:	4798      	blx	r3
    return err;
 801ebe2:	e7f3      	b.n	801ebcc <lfs_dir_read+0x12>

0801ebe4 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 801ebe4:	f04f 0c00 	mov.w	ip, #0
 801ebe8:	4594      	cmp	ip, r2
 801ebea:	d218      	bcs.n	801ec1e <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 801ebec:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801ebee:	f811 300c 	ldrb.w	r3, [r1, ip]
 801ebf2:	ea83 0e00 	eor.w	lr, r3, r0
 801ebf6:	f00e 0e0f 	and.w	lr, lr, #15
 801ebfa:	4c09      	ldr	r4, [pc, #36]	@ (801ec20 <lfs_crc+0x3c>)
 801ebfc:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 801ec00:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 801ec04:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 801ec08:	f003 030f 	and.w	r3, r3, #15
 801ec0c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801ec10:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 801ec14:	f10c 0c01 	add.w	ip, ip, #1
 801ec18:	4594      	cmp	ip, r2
 801ec1a:	d3e8      	bcc.n	801ebee <lfs_crc+0xa>
    }

    return crc;
}
 801ec1c:	bd30      	pop	{r4, r5, pc}
 801ec1e:	4770      	bx	lr
 801ec20:	08038944 	.word	0x08038944

0801ec24 <mg_base64_decode_single>:
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
  if (c >= 'A' && c <= 'Z') {
 801ec24:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801ec28:	2b19      	cmp	r3, #25
 801ec2a:	d913      	bls.n	801ec54 <mg_base64_decode_single+0x30>
    return c - 'A';
  } else if (c >= 'a' && c <= 'z') {
 801ec2c:	283d      	cmp	r0, #61	@ 0x3d
 801ec2e:	dc18      	bgt.n	801ec62 <mg_base64_decode_single+0x3e>
 801ec30:	282b      	cmp	r0, #43	@ 0x2b
 801ec32:	db20      	blt.n	801ec76 <mg_base64_decode_single+0x52>
 801ec34:	f1a0 032b 	sub.w	r3, r0, #43	@ 0x2b
 801ec38:	2b12      	cmp	r3, #18
 801ec3a:	d80f      	bhi.n	801ec5c <mg_base64_decode_single+0x38>
 801ec3c:	e8df f003 	tbb	[pc, r3]
 801ec40:	0e0e0e0c 	.word	0x0e0e0e0c
 801ec44:	1717171e 	.word	0x1717171e
 801ec48:	17171717 	.word	0x17171717
 801ec4c:	0e171717 	.word	0x0e171717
 801ec50:	0e0e      	.short	0x0e0e
 801ec52:	19          	.byte	0x19
 801ec53:	00          	.byte	0x00
    return c - 'A';
 801ec54:	4618      	mov	r0, r3
 801ec56:	4770      	bx	lr
  if (c >= 'A' && c <= 'Z') {
 801ec58:	203e      	movs	r0, #62	@ 0x3e
 801ec5a:	4770      	bx	lr
  } else if (c == '/') {
    return 63;
  } else if (c == '=') {
    return 64;
  } else {
    return -1;
 801ec5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ec60:	4770      	bx	lr
 801ec62:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ec66:	2b19      	cmp	r3, #25
 801ec68:	d80a      	bhi.n	801ec80 <mg_base64_decode_single+0x5c>
    return c + 26 - 'a';
 801ec6a:	3847      	subs	r0, #71	@ 0x47
 801ec6c:	4770      	bx	lr
    return c + 52 - '0';
 801ec6e:	3004      	adds	r0, #4
 801ec70:	4770      	bx	lr
    return 64;
 801ec72:	2040      	movs	r0, #64	@ 0x40
 801ec74:	4770      	bx	lr
    return -1;
 801ec76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ec7a:	4770      	bx	lr
    return 63;
 801ec7c:	203f      	movs	r0, #63	@ 0x3f
 801ec7e:	4770      	bx	lr
    return -1;
 801ec80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  }
}
 801ec84:	4770      	bx	lr

0801ec86 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 801ec86:	3830      	subs	r0, #48	@ 0x30
}
 801ec88:	2809      	cmp	r0, #9
 801ec8a:	bf8c      	ite	hi
 801ec8c:	2000      	movhi	r0, #0
 801ec8e:	2001      	movls	r0, #1
 801ec90:	4770      	bx	lr
	...

0801ec94 <addexp>:

static int addexp(char *buf, int e, int sign) {
 801ec94:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 801ec96:	2365      	movs	r3, #101	@ 0x65
 801ec98:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 801ec9a:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 801ec9c:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 801eca0:	dc2c      	bgt.n	801ecfc <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 801eca2:	2909      	cmp	r1, #9
 801eca4:	dc03      	bgt.n	801ecae <addexp+0x1a>
 801eca6:	2330      	movs	r3, #48	@ 0x30
 801eca8:	7083      	strb	r3, [r0, #2]
 801ecaa:	2303      	movs	r3, #3
 801ecac:	e000      	b.n	801ecb0 <addexp+0x1c>
  buf[n++] = (char) sign;
 801ecae:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 801ecb0:	2963      	cmp	r1, #99	@ 0x63
 801ecb2:	dd0d      	ble.n	801ecd0 <addexp+0x3c>
 801ecb4:	4812      	ldr	r0, [pc, #72]	@ (801ed00 <addexp+0x6c>)
 801ecb6:	fb80 2001 	smull	r2, r0, r0, r1
 801ecba:	17ca      	asrs	r2, r1, #31
 801ecbc:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 801ecc0:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801ecc4:	f80c 0003 	strb.w	r0, [ip, r3]
 801ecc8:	2064      	movs	r0, #100	@ 0x64
 801ecca:	fb00 1112 	mls	r1, r0, r2, r1
 801ecce:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 801ecd0:	2909      	cmp	r1, #9
 801ecd2:	dd0e      	ble.n	801ecf2 <addexp+0x5e>
 801ecd4:	480b      	ldr	r0, [pc, #44]	@ (801ed04 <addexp+0x70>)
 801ecd6:	fb80 2001 	smull	r2, r0, r0, r1
 801ecda:	17ca      	asrs	r2, r1, #31
 801ecdc:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 801ece0:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801ece4:	f80c 0003 	strb.w	r0, [ip, r3]
 801ece8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ecec:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 801ecf0:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 801ecf2:	1c58      	adds	r0, r3, #1
 801ecf4:	3130      	adds	r1, #48	@ 0x30
 801ecf6:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 801ecfa:	4770      	bx	lr
  if (e > 400) return 0;
 801ecfc:	2000      	movs	r0, #0
}
 801ecfe:	4770      	bx	lr
 801ed00:	51eb851f 	.word	0x51eb851f
 801ed04:	66666667 	.word	0x66666667

0801ed08 <xisinf>:

static int xisinf(double x) {
 801ed08:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 801ed0c:	4611      	mov	r1, r2
 801ed0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ed12:	4a05      	ldr	r2, [pc, #20]	@ (801ed28 <xisinf+0x20>)
 801ed14:	4293      	cmp	r3, r2
 801ed16:	d001      	beq.n	801ed1c <xisinf+0x14>
 801ed18:	2000      	movs	r0, #0
 801ed1a:	4770      	bx	lr
 801ed1c:	b109      	cbz	r1, 801ed22 <xisinf+0x1a>
 801ed1e:	2000      	movs	r0, #0
 801ed20:	4770      	bx	lr
 801ed22:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 801ed24:	4770      	bx	lr
 801ed26:	bf00      	nop
 801ed28:	7ff00000 	.word	0x7ff00000

0801ed2c <xisnan>:

static int xisnan(double x) {
 801ed2c:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 801ed30:	4602      	mov	r2, r0
 801ed32:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 801ed36:	2a00      	cmp	r2, #0
 801ed38:	bf18      	it	ne
 801ed3a:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 801ed3c:	4b02      	ldr	r3, [pc, #8]	@ (801ed48 <xisnan+0x1c>)
 801ed3e:	4298      	cmp	r0, r3
 801ed40:	bf94      	ite	ls
 801ed42:	2000      	movls	r0, #0
 801ed44:	2001      	movhi	r0, #1
 801ed46:	4770      	bx	lr
 801ed48:	7ff00000 	.word	0x7ff00000

0801ed4c <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 801ed4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed50:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801ed54:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 801ed58:	4694      	mov	ip, r2
 801ed5a:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801ed5c:	b15c      	cbz	r4, 801ed76 <mg_lld+0x2a>
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	db01      	blt.n	801ed66 <mg_lld+0x1a>
  size_t s = 0, n, i;
 801ed62:	2500      	movs	r5, #0
 801ed64:	e008      	b.n	801ed78 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801ed66:	242d      	movs	r4, #45	@ 0x2d
 801ed68:	7004      	strb	r4, [r0, #0]
 801ed6a:	f1d2 0c00 	rsbs	ip, r2, #0
 801ed6e:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 801ed72:	2501      	movs	r5, #1
 801ed74:	e000      	b.n	801ed78 <mg_lld+0x2c>
  size_t s = 0, n, i;
 801ed76:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 801ed78:	b909      	cbnz	r1, 801ed7e <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801ed7a:	2400      	movs	r4, #0
 801ed7c:	e02f      	b.n	801edde <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 801ed7e:	2400      	movs	r4, #0
 801ed80:	ea5c 010e 	orrs.w	r1, ip, lr
 801ed84:	d05a      	beq.n	801ee3c <mg_lld+0xf0>
 801ed86:	f00c 060f 	and.w	r6, ip, #15
 801ed8a:	1929      	adds	r1, r5, r4
 801ed8c:	4f38      	ldr	r7, [pc, #224]	@ (801ee70 <mg_lld+0x124>)
 801ed8e:	5dbe      	ldrb	r6, [r7, r6]
 801ed90:	5446      	strb	r6, [r0, r1]
 801ed92:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801ed96:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 801ed9a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801ed9e:	3401      	adds	r4, #1
 801eda0:	e7ee      	b.n	801ed80 <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801eda2:	2601      	movs	r6, #1
 801eda4:	e022      	b.n	801edec <mg_lld+0xa0>
 801eda6:	4421      	add	r1, r4
 801eda8:	4f32      	ldr	r7, [pc, #200]	@ (801ee74 <mg_lld+0x128>)
 801edaa:	fba7 4801 	umull	r4, r8, r7, r1
 801edae:	f028 0403 	bic.w	r4, r8, #3
 801edb2:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 801edb6:	1b09      	subs	r1, r1, r4
 801edb8:	ebbc 0101 	subs.w	r1, ip, r1
 801edbc:	f16e 0e00 	sbc.w	lr, lr, #0
 801edc0:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 801edc4:	fb01 f404 	mul.w	r4, r1, r4
 801edc8:	fb07 440e 	mla	r4, r7, lr, r4
 801edcc:	fba1 1707 	umull	r1, r7, r1, r7
 801edd0:	443c      	add	r4, r7
 801edd2:	0849      	lsrs	r1, r1, #1
 801edd4:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 801edd8:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 801eddc:	4634      	mov	r4, r6
 801edde:	ea5c 010e 	orrs.w	r1, ip, lr
 801ede2:	d02b      	beq.n	801ee3c <mg_lld+0xf0>
 801ede4:	2600      	movs	r6, #0
 801ede6:	eb1c 010e 	adds.w	r1, ip, lr
 801edea:	d2da      	bcs.n	801eda2 <mg_lld+0x56>
 801edec:	4431      	add	r1, r6
 801edee:	4f21      	ldr	r7, [pc, #132]	@ (801ee74 <mg_lld+0x128>)
 801edf0:	fba7 6801 	umull	r6, r8, r7, r1
 801edf4:	f028 0603 	bic.w	r6, r8, #3
 801edf8:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 801edfc:	1b89      	subs	r1, r1, r6
 801edfe:	ebbc 0101 	subs.w	r1, ip, r1
 801ee02:	f16e 0800 	sbc.w	r8, lr, #0
 801ee06:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 801ee0a:	fb01 f606 	mul.w	r6, r1, r6
 801ee0e:	fb07 6608 	mla	r6, r7, r8, r6
 801ee12:	fba1 1707 	umull	r1, r7, r1, r7
 801ee16:	443e      	add	r6, r7
 801ee18:	0849      	lsrs	r1, r1, #1
 801ee1a:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 801ee1e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801ee22:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 801ee26:	1c66      	adds	r6, r4, #1
 801ee28:	442c      	add	r4, r5
 801ee2a:	4f11      	ldr	r7, [pc, #68]	@ (801ee70 <mg_lld+0x124>)
 801ee2c:	5c79      	ldrb	r1, [r7, r1]
 801ee2e:	5501      	strb	r1, [r0, r4]
 801ee30:	2400      	movs	r4, #0
 801ee32:	eb1c 010e 	adds.w	r1, ip, lr
 801ee36:	d3b6      	bcc.n	801eda6 <mg_lld+0x5a>
 801ee38:	2401      	movs	r4, #1
 801ee3a:	e7b4      	b.n	801eda6 <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 801ee3c:	2600      	movs	r6, #0
 801ee3e:	e00c      	b.n	801ee5a <mg_lld+0x10e>
    char t = buf[s + i];
 801ee40:	19af      	adds	r7, r5, r6
 801ee42:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 801ee46:	1929      	adds	r1, r5, r4
 801ee48:	1b89      	subs	r1, r1, r6
 801ee4a:	3901      	subs	r1, #1
 801ee4c:	f810 e001 	ldrb.w	lr, [r0, r1]
 801ee50:	f800 e007 	strb.w	lr, [r0, r7]
 801ee54:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 801ee58:	3601      	adds	r6, #1
 801ee5a:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 801ee5e:	d3ef      	bcc.n	801ee40 <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 801ee60:	4313      	orrs	r3, r2
 801ee62:	d102      	bne.n	801ee6a <mg_lld+0x11e>
 801ee64:	2330      	movs	r3, #48	@ 0x30
 801ee66:	5503      	strb	r3, [r0, r4]
 801ee68:	3401      	adds	r4, #1
  return n + s;
}
 801ee6a:	1928      	adds	r0, r5, r4
 801ee6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee70:	08038984 	.word	0x08038984
 801ee74:	cccccccd 	.word	0xcccccccd

0801ee78 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 801ee78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee7c:	4680      	mov	r8, r0
 801ee7e:	460f      	mov	r7, r1
 801ee80:	4616      	mov	r6, r2
 801ee82:	461d      	mov	r5, r3
  size_t i = 0;
 801ee84:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801ee86:	e002      	b.n	801ee8e <scpy+0x16>
 801ee88:	3401      	adds	r4, #1
 801ee8a:	4639      	mov	r1, r7
 801ee8c:	47c0      	blx	r8
 801ee8e:	42ac      	cmp	r4, r5
 801ee90:	d202      	bcs.n	801ee98 <scpy+0x20>
 801ee92:	5d30      	ldrb	r0, [r6, r4]
 801ee94:	2800      	cmp	r0, #0
 801ee96:	d1f7      	bne.n	801ee88 <scpy+0x10>
  return i;
}
 801ee98:	4620      	mov	r0, r4
 801ee9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ee9e <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 801ee9e:	2000      	movs	r0, #0
 801eea0:	4770      	bx	lr

0801eea2 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 801eea2:	4770      	bx	lr

0801eea4 <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 801eea4:	2000      	movs	r0, #0
 801eea6:	4770      	bx	lr

0801eea8 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 801eea8:	4770      	bx	lr

0801eeaa <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801eeaa:	2000      	movs	r0, #0
 801eeac:	4770      	bx	lr

0801eeae <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801eeae:	2000      	movs	r0, #0
 801eeb0:	4770      	bx	lr

0801eeb2 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 801eeb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801eeb6:	4770      	bx	lr

0801eeb8 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 801eeb8:	2000      	movs	r0, #0
 801eeba:	4770      	bx	lr

0801eebc <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 801eebc:	2000      	movs	r0, #0
 801eebe:	4770      	bx	lr

0801eec0 <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 801eec0:	2000      	movs	r0, #0
 801eec2:	4770      	bx	lr

0801eec4 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 801eec4:	b530      	push	{r4, r5, lr}
 801eec6:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 801eec8:	4614      	mov	r4, r2
 801eeca:	b94a      	cbnz	r2, 801eee0 <mg_ncasecmp+0x1c>
  int diff = 0;
 801eecc:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 801eece:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801eed0:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 801eed4:	1a18      	subs	r0, r3, r0
 801eed6:	d1fa      	bne.n	801eece <mg_ncasecmp+0xa>
 801eed8:	2a00      	cmp	r2, #0
 801eeda:	d0f8      	beq.n	801eece <mg_ncasecmp+0xa>
 801eedc:	3c01      	subs	r4, #1
 801eede:	d0f6      	beq.n	801eece <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 801eee0:	f89e 2000 	ldrb.w	r2, [lr]
 801eee4:	f10e 0e01 	add.w	lr, lr, #1
 801eee8:	4613      	mov	r3, r2
 801eeea:	f891 c000 	ldrb.w	ip, [r1]
 801eeee:	3101      	adds	r1, #1
 801eef0:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 801eef2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801eef6:	2d19      	cmp	r5, #25
 801eef8:	d801      	bhi.n	801eefe <mg_ncasecmp+0x3a>
 801eefa:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801eefe:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 801ef02:	2d19      	cmp	r5, #25
 801ef04:	d8e6      	bhi.n	801eed4 <mg_ncasecmp+0x10>
 801ef06:	e7e3      	b.n	801eed0 <mg_ncasecmp+0xc>

0801ef08 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801ef08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801ef0c:	2b09      	cmp	r3, #9
 801ef0e:	d908      	bls.n	801ef22 <isx+0x1a>
 801ef10:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ef14:	2b05      	cmp	r3, #5
 801ef16:	d906      	bls.n	801ef26 <isx+0x1e>
         (c >= 'A' && c <= 'F');
 801ef18:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801ef1a:	2805      	cmp	r0, #5
 801ef1c:	d805      	bhi.n	801ef2a <isx+0x22>
 801ef1e:	2001      	movs	r0, #1
 801ef20:	4770      	bx	lr
 801ef22:	2001      	movs	r0, #1
 801ef24:	4770      	bx	lr
 801ef26:	2001      	movs	r0, #1
 801ef28:	4770      	bx	lr
 801ef2a:	2000      	movs	r0, #0
}
 801ef2c:	4770      	bx	lr

0801ef2e <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 801ef2e:	280a      	cmp	r0, #10
 801ef30:	d007      	beq.n	801ef42 <isok+0x14>
 801ef32:	280d      	cmp	r0, #13
 801ef34:	d007      	beq.n	801ef46 <isok+0x18>
 801ef36:	2809      	cmp	r0, #9
 801ef38:	d007      	beq.n	801ef4a <isok+0x1c>
 801ef3a:	281f      	cmp	r0, #31
 801ef3c:	d907      	bls.n	801ef4e <isok+0x20>
 801ef3e:	2001      	movs	r0, #1
 801ef40:	4770      	bx	lr
 801ef42:	2001      	movs	r0, #1
 801ef44:	4770      	bx	lr
 801ef46:	2001      	movs	r0, #1
 801ef48:	4770      	bx	lr
 801ef4a:	2001      	movs	r0, #1
 801ef4c:	4770      	bx	lr
 801ef4e:	2000      	movs	r0, #0
}
 801ef50:	4770      	bx	lr

0801ef52 <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 801ef52:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 801ef56:	2880      	cmp	r0, #128	@ 0x80
 801ef58:	bf14      	ite	ne
 801ef5a:	2000      	movne	r0, #0
 801ef5c:	2001      	moveq	r0, #1
 801ef5e:	4770      	bx	lr

0801ef60 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 801ef60:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 801ef62:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 801ef64:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801ef66:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 801ef6a:	b2db      	uxtb	r3, r3
 801ef6c:	2b5c      	cmp	r3, #92	@ 0x5c
 801ef6e:	d936      	bls.n	801efde <clen+0x7e>
 801ef70:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801ef72:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 801ef76:	2bc0      	cmp	r3, #192	@ 0xc0
 801ef78:	d009      	beq.n	801ef8e <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801ef7a:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 801ef7e:	2be0      	cmp	r3, #224	@ 0xe0
 801ef80:	d00e      	beq.n	801efa0 <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801ef82:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801ef86:	2df0      	cmp	r5, #240	@ 0xf0
 801ef88:	d018      	beq.n	801efbc <clen+0x5c>
    return 4;
  return 0;
 801ef8a:	2000      	movs	r0, #0
}
 801ef8c:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801ef8e:	2e01      	cmp	r6, #1
 801ef90:	ddf3      	ble.n	801ef7a <clen+0x1a>
 801ef92:	7840      	ldrb	r0, [r0, #1]
 801ef94:	f7ff ffdd 	bl	801ef52 <vcb>
 801ef98:	2800      	cmp	r0, #0
 801ef9a:	d0ee      	beq.n	801ef7a <clen+0x1a>
 801ef9c:	2002      	movs	r0, #2
 801ef9e:	e7f5      	b.n	801ef8c <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801efa0:	2e02      	cmp	r6, #2
 801efa2:	ddee      	ble.n	801ef82 <clen+0x22>
 801efa4:	7860      	ldrb	r0, [r4, #1]
 801efa6:	f7ff ffd4 	bl	801ef52 <vcb>
 801efaa:	2800      	cmp	r0, #0
 801efac:	d0e9      	beq.n	801ef82 <clen+0x22>
 801efae:	78a0      	ldrb	r0, [r4, #2]
 801efb0:	f7ff ffcf 	bl	801ef52 <vcb>
 801efb4:	2800      	cmp	r0, #0
 801efb6:	d0e4      	beq.n	801ef82 <clen+0x22>
 801efb8:	2003      	movs	r0, #3
 801efba:	e7e7      	b.n	801ef8c <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801efbc:	2e03      	cmp	r6, #3
 801efbe:	dd10      	ble.n	801efe2 <clen+0x82>
 801efc0:	7860      	ldrb	r0, [r4, #1]
 801efc2:	f7ff ffc6 	bl	801ef52 <vcb>
 801efc6:	b170      	cbz	r0, 801efe6 <clen+0x86>
 801efc8:	78a0      	ldrb	r0, [r4, #2]
 801efca:	f7ff ffc2 	bl	801ef52 <vcb>
 801efce:	b160      	cbz	r0, 801efea <clen+0x8a>
 801efd0:	78e0      	ldrb	r0, [r4, #3]
 801efd2:	f7ff ffbe 	bl	801ef52 <vcb>
 801efd6:	2800      	cmp	r0, #0
 801efd8:	d0d8      	beq.n	801ef8c <clen+0x2c>
    return 4;
 801efda:	2004      	movs	r0, #4
 801efdc:	e7d6      	b.n	801ef8c <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801efde:	2001      	movs	r0, #1
 801efe0:	e7d4      	b.n	801ef8c <clen+0x2c>
  return 0;
 801efe2:	2000      	movs	r0, #0
 801efe4:	e7d2      	b.n	801ef8c <clen+0x2c>
 801efe6:	2000      	movs	r0, #0
 801efe8:	e7d0      	b.n	801ef8c <clen+0x2c>
 801efea:	2000      	movs	r0, #0
 801efec:	e7ce      	b.n	801ef8c <clen+0x2c>

0801efee <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 801efee:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 801eff0:	e003      	b.n	801effa <skiptorn+0xc>
 801eff2:	3001      	adds	r0, #1
 801eff4:	6853      	ldr	r3, [r2, #4]
 801eff6:	3301      	adds	r3, #1
 801eff8:	6053      	str	r3, [r2, #4]
 801effa:	4288      	cmp	r0, r1
 801effc:	d204      	bcs.n	801f008 <skiptorn+0x1a>
 801effe:	7803      	ldrb	r3, [r0, #0]
 801f000:	2b0a      	cmp	r3, #10
 801f002:	d001      	beq.n	801f008 <skiptorn+0x1a>
 801f004:	2b0d      	cmp	r3, #13
 801f006:	d1f4      	bne.n	801eff2 <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801f008:	4288      	cmp	r0, r1
 801f00a:	d212      	bcs.n	801f032 <skiptorn+0x44>
 801f00c:	7803      	ldrb	r3, [r0, #0]
 801f00e:	2b0d      	cmp	r3, #13
 801f010:	d008      	beq.n	801f024 <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801f012:	2b0d      	cmp	r3, #13
 801f014:	d00b      	beq.n	801f02e <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801f016:	4288      	cmp	r0, r1
 801f018:	d20d      	bcs.n	801f036 <skiptorn+0x48>
 801f01a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f01e:	2b0a      	cmp	r3, #10
 801f020:	d10b      	bne.n	801f03a <skiptorn+0x4c>
  return s;
}
 801f022:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801f024:	7842      	ldrb	r2, [r0, #1]
 801f026:	2a0a      	cmp	r2, #10
 801f028:	d0f3      	beq.n	801f012 <skiptorn+0x24>
 801f02a:	2000      	movs	r0, #0
 801f02c:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801f02e:	3001      	adds	r0, #1
 801f030:	e7f1      	b.n	801f016 <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801f032:	2000      	movs	r0, #0
 801f034:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801f036:	2000      	movs	r0, #0
 801f038:	4770      	bx	lr
 801f03a:	2000      	movs	r0, #0
 801f03c:	e7f1      	b.n	801f022 <skiptorn+0x34>

0801f03e <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 801f03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f042:	b084      	sub	sp, #16
 801f044:	4604      	mov	r4, r0
 801f046:	460d      	mov	r5, r1
 801f048:	4690      	mov	r8, r2
 801f04a:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 801f04c:	2600      	movs	r6, #0
 801f04e:	e04d      	b.n	801f0ec <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801f050:	7863      	ldrb	r3, [r4, #1]
 801f052:	2b0a      	cmp	r3, #10
 801f054:	d158      	bne.n	801f108 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 801f056:	2001      	movs	r0, #1
 801f058:	e01e      	b.n	801f098 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801f05a:	4414      	add	r4, r2
 801f05c:	9b01      	ldr	r3, [sp, #4]
 801f05e:	4413      	add	r3, r2
 801f060:	9301      	str	r3, [sp, #4]
 801f062:	42ac      	cmp	r4, r5
 801f064:	d209      	bcs.n	801f07a <mg_http_parse_headers+0x3c>
 801f066:	7823      	ldrb	r3, [r4, #0]
 801f068:	2b3a      	cmp	r3, #58	@ 0x3a
 801f06a:	d006      	beq.n	801f07a <mg_http_parse_headers+0x3c>
 801f06c:	4629      	mov	r1, r5
 801f06e:	4620      	mov	r0, r4
 801f070:	f7ff ff76 	bl	801ef60 <clen>
 801f074:	4602      	mov	r2, r0
 801f076:	2800      	cmp	r0, #0
 801f078:	d1ef      	bne.n	801f05a <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 801f07a:	9b01      	ldr	r3, [sp, #4]
 801f07c:	b15b      	cbz	r3, 801f096 <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 801f07e:	42ac      	cmp	r4, r5
 801f080:	d209      	bcs.n	801f096 <mg_http_parse_headers+0x58>
 801f082:	4629      	mov	r1, r5
 801f084:	4620      	mov	r0, r4
 801f086:	f7ff ff6b 	bl	801ef60 <clen>
 801f08a:	b120      	cbz	r0, 801f096 <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 801f08c:	4620      	mov	r0, r4
 801f08e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f092:	2b3a      	cmp	r3, #58	@ 0x3a
 801f094:	d004      	beq.n	801f0a0 <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 801f096:	2000      	movs	r0, #0
}
 801f098:	b004      	add	sp, #16
 801f09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 801f09e:	3001      	adds	r0, #1
 801f0a0:	42a8      	cmp	r0, r5
 801f0a2:	d204      	bcs.n	801f0ae <mg_http_parse_headers+0x70>
 801f0a4:	7803      	ldrb	r3, [r0, #0]
 801f0a6:	2b20      	cmp	r3, #32
 801f0a8:	d0f9      	beq.n	801f09e <mg_http_parse_headers+0x60>
 801f0aa:	2b09      	cmp	r3, #9
 801f0ac:	d0f7      	beq.n	801f09e <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 801f0ae:	aa02      	add	r2, sp, #8
 801f0b0:	4629      	mov	r1, r5
 801f0b2:	f7ff ff9c 	bl	801efee <skiptorn>
 801f0b6:	4604      	mov	r4, r0
 801f0b8:	b908      	cbnz	r0, 801f0be <mg_http_parse_headers+0x80>
 801f0ba:	e7ec      	b.n	801f096 <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 801f0bc:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 801f0be:	9803      	ldr	r0, [sp, #12]
 801f0c0:	b130      	cbz	r0, 801f0d0 <mg_http_parse_headers+0x92>
 801f0c2:	3801      	subs	r0, #1
 801f0c4:	9b02      	ldr	r3, [sp, #8]
 801f0c6:	5c1b      	ldrb	r3, [r3, r0]
 801f0c8:	2b20      	cmp	r3, #32
 801f0ca:	d0f7      	beq.n	801f0bc <mg_http_parse_headers+0x7e>
 801f0cc:	2b09      	cmp	r3, #9
 801f0ce:	d0f5      	beq.n	801f0bc <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 801f0d0:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 801f0d4:	466a      	mov	r2, sp
 801f0d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f0da:	e883 0003 	stmia.w	r3, {r0, r1}
 801f0de:	3308      	adds	r3, #8
 801f0e0:	aa04      	add	r2, sp, #16
 801f0e2:	e912 0003 	ldmdb	r2, {r0, r1}
 801f0e6:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 801f0ea:	3601      	adds	r6, #1
 801f0ec:	42be      	cmp	r6, r7
 801f0ee:	d20d      	bcs.n	801f10c <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 801f0f0:	2300      	movs	r3, #0
 801f0f2:	9300      	str	r3, [sp, #0]
 801f0f4:	9301      	str	r3, [sp, #4]
 801f0f6:	9302      	str	r3, [sp, #8]
 801f0f8:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 801f0fa:	42ac      	cmp	r4, r5
 801f0fc:	d2cb      	bcs.n	801f096 <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801f0fe:	7823      	ldrb	r3, [r4, #0]
 801f100:	2b0a      	cmp	r3, #10
 801f102:	d0a8      	beq.n	801f056 <mg_http_parse_headers+0x18>
 801f104:	2b0d      	cmp	r3, #13
 801f106:	d0a3      	beq.n	801f050 <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 801f108:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801f10a:	e7aa      	b.n	801f062 <mg_http_parse_headers+0x24>
  return true;
 801f10c:	2001      	movs	r0, #1
 801f10e:	e7c3      	b.n	801f098 <mg_http_parse_headers+0x5a>

0801f110 <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 801f110:	3864      	subs	r0, #100	@ 0x64
 801f112:	f240 13f3 	movw	r3, #499	@ 0x1f3
 801f116:	4298      	cmp	r0, r3
 801f118:	f200 8272 	bhi.w	801f600 <mg_http_status_code_str+0x4f0>
 801f11c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801f120:	027201f4 	.word	0x027201f4
 801f124:	027001f6 	.word	0x027001f6
 801f128:	02700270 	.word	0x02700270
 801f12c:	02700270 	.word	0x02700270
 801f130:	02700270 	.word	0x02700270
 801f134:	02700270 	.word	0x02700270
 801f138:	02700270 	.word	0x02700270
 801f13c:	02700270 	.word	0x02700270
 801f140:	02700270 	.word	0x02700270
 801f144:	02700270 	.word	0x02700270
 801f148:	02700270 	.word	0x02700270
 801f14c:	02700270 	.word	0x02700270
 801f150:	02700270 	.word	0x02700270
 801f154:	02700270 	.word	0x02700270
 801f158:	02700270 	.word	0x02700270
 801f15c:	02700270 	.word	0x02700270
 801f160:	02700270 	.word	0x02700270
 801f164:	02700270 	.word	0x02700270
 801f168:	02700270 	.word	0x02700270
 801f16c:	02700270 	.word	0x02700270
 801f170:	02700270 	.word	0x02700270
 801f174:	02700270 	.word	0x02700270
 801f178:	02700270 	.word	0x02700270
 801f17c:	02700270 	.word	0x02700270
 801f180:	02700270 	.word	0x02700270
 801f184:	02700270 	.word	0x02700270
 801f188:	02700270 	.word	0x02700270
 801f18c:	02700270 	.word	0x02700270
 801f190:	02700270 	.word	0x02700270
 801f194:	02700270 	.word	0x02700270
 801f198:	02700270 	.word	0x02700270
 801f19c:	02700270 	.word	0x02700270
 801f1a0:	02700270 	.word	0x02700270
 801f1a4:	02700270 	.word	0x02700270
 801f1a8:	02700270 	.word	0x02700270
 801f1ac:	02700270 	.word	0x02700270
 801f1b0:	02700270 	.word	0x02700270
 801f1b4:	02700270 	.word	0x02700270
 801f1b8:	02700270 	.word	0x02700270
 801f1bc:	02700270 	.word	0x02700270
 801f1c0:	02700270 	.word	0x02700270
 801f1c4:	02700270 	.word	0x02700270
 801f1c8:	02700270 	.word	0x02700270
 801f1cc:	02700270 	.word	0x02700270
 801f1d0:	02700270 	.word	0x02700270
 801f1d4:	02700270 	.word	0x02700270
 801f1d8:	02700270 	.word	0x02700270
 801f1dc:	02700270 	.word	0x02700270
 801f1e0:	02700270 	.word	0x02700270
 801f1e4:	02700270 	.word	0x02700270
 801f1e8:	01fa01f8 	.word	0x01fa01f8
 801f1ec:	01fe01fc 	.word	0x01fe01fc
 801f1f0:	02020200 	.word	0x02020200
 801f1f4:	02060204 	.word	0x02060204
 801f1f8:	02700208 	.word	0x02700208
 801f1fc:	02700270 	.word	0x02700270
 801f200:	02700270 	.word	0x02700270
 801f204:	02700270 	.word	0x02700270
 801f208:	02700270 	.word	0x02700270
 801f20c:	02700270 	.word	0x02700270
 801f210:	02700270 	.word	0x02700270
 801f214:	02700270 	.word	0x02700270
 801f218:	02700270 	.word	0x02700270
 801f21c:	0270020a 	.word	0x0270020a
 801f220:	02700270 	.word	0x02700270
 801f224:	02700270 	.word	0x02700270
 801f228:	02700270 	.word	0x02700270
 801f22c:	02700270 	.word	0x02700270
 801f230:	02700270 	.word	0x02700270
 801f234:	02700270 	.word	0x02700270
 801f238:	02700270 	.word	0x02700270
 801f23c:	02700270 	.word	0x02700270
 801f240:	02700270 	.word	0x02700270
 801f244:	02700270 	.word	0x02700270
 801f248:	02700270 	.word	0x02700270
 801f24c:	02700270 	.word	0x02700270
 801f250:	02700270 	.word	0x02700270
 801f254:	02700270 	.word	0x02700270
 801f258:	02700270 	.word	0x02700270
 801f25c:	02700270 	.word	0x02700270
 801f260:	02700270 	.word	0x02700270
 801f264:	02700270 	.word	0x02700270
 801f268:	02700270 	.word	0x02700270
 801f26c:	02700270 	.word	0x02700270
 801f270:	02700270 	.word	0x02700270
 801f274:	02700270 	.word	0x02700270
 801f278:	02700270 	.word	0x02700270
 801f27c:	02700270 	.word	0x02700270
 801f280:	02700270 	.word	0x02700270
 801f284:	02700270 	.word	0x02700270
 801f288:	02700270 	.word	0x02700270
 801f28c:	02700270 	.word	0x02700270
 801f290:	02700270 	.word	0x02700270
 801f294:	02700270 	.word	0x02700270
 801f298:	02700270 	.word	0x02700270
 801f29c:	02700270 	.word	0x02700270
 801f2a0:	02700270 	.word	0x02700270
 801f2a4:	02700270 	.word	0x02700270
 801f2a8:	02700270 	.word	0x02700270
 801f2ac:	02700270 	.word	0x02700270
 801f2b0:	020e020c 	.word	0x020e020c
 801f2b4:	02120210 	.word	0x02120210
 801f2b8:	02160214 	.word	0x02160214
 801f2bc:	02180270 	.word	0x02180270
 801f2c0:	0270021a 	.word	0x0270021a
 801f2c4:	02700270 	.word	0x02700270
 801f2c8:	02700270 	.word	0x02700270
 801f2cc:	02700270 	.word	0x02700270
 801f2d0:	02700270 	.word	0x02700270
 801f2d4:	02700270 	.word	0x02700270
 801f2d8:	02700270 	.word	0x02700270
 801f2dc:	02700270 	.word	0x02700270
 801f2e0:	02700270 	.word	0x02700270
 801f2e4:	02700270 	.word	0x02700270
 801f2e8:	02700270 	.word	0x02700270
 801f2ec:	02700270 	.word	0x02700270
 801f2f0:	02700270 	.word	0x02700270
 801f2f4:	02700270 	.word	0x02700270
 801f2f8:	02700270 	.word	0x02700270
 801f2fc:	02700270 	.word	0x02700270
 801f300:	02700270 	.word	0x02700270
 801f304:	02700270 	.word	0x02700270
 801f308:	02700270 	.word	0x02700270
 801f30c:	02700270 	.word	0x02700270
 801f310:	02700270 	.word	0x02700270
 801f314:	02700270 	.word	0x02700270
 801f318:	02700270 	.word	0x02700270
 801f31c:	02700270 	.word	0x02700270
 801f320:	02700270 	.word	0x02700270
 801f324:	02700270 	.word	0x02700270
 801f328:	02700270 	.word	0x02700270
 801f32c:	02700270 	.word	0x02700270
 801f330:	02700270 	.word	0x02700270
 801f334:	02700270 	.word	0x02700270
 801f338:	02700270 	.word	0x02700270
 801f33c:	02700270 	.word	0x02700270
 801f340:	02700270 	.word	0x02700270
 801f344:	02700270 	.word	0x02700270
 801f348:	02700270 	.word	0x02700270
 801f34c:	02700270 	.word	0x02700270
 801f350:	02700270 	.word	0x02700270
 801f354:	02700270 	.word	0x02700270
 801f358:	02700270 	.word	0x02700270
 801f35c:	02700270 	.word	0x02700270
 801f360:	02700270 	.word	0x02700270
 801f364:	02700270 	.word	0x02700270
 801f368:	02700270 	.word	0x02700270
 801f36c:	02700270 	.word	0x02700270
 801f370:	02700270 	.word	0x02700270
 801f374:	02700270 	.word	0x02700270
 801f378:	021e021c 	.word	0x021e021c
 801f37c:	02220220 	.word	0x02220220
 801f380:	02260224 	.word	0x02260224
 801f384:	022a0228 	.word	0x022a0228
 801f388:	022e022c 	.word	0x022e022c
 801f38c:	02320230 	.word	0x02320230
 801f390:	02360234 	.word	0x02360234
 801f394:	023a0238 	.word	0x023a0238
 801f398:	023e023c 	.word	0x023e023c
 801f39c:	02700240 	.word	0x02700240
 801f3a0:	02420270 	.word	0x02420270
 801f3a4:	02460244 	.word	0x02460244
 801f3a8:	02700248 	.word	0x02700248
 801f3ac:	0270024a 	.word	0x0270024a
 801f3b0:	024e024c 	.word	0x024e024c
 801f3b4:	02500270 	.word	0x02500270
 801f3b8:	02700270 	.word	0x02700270
 801f3bc:	02700270 	.word	0x02700270
 801f3c0:	02700270 	.word	0x02700270
 801f3c4:	02700270 	.word	0x02700270
 801f3c8:	02700270 	.word	0x02700270
 801f3cc:	02700270 	.word	0x02700270
 801f3d0:	02700252 	.word	0x02700252
 801f3d4:	02700270 	.word	0x02700270
 801f3d8:	02700270 	.word	0x02700270
 801f3dc:	02540270 	.word	0x02540270
 801f3e0:	02700270 	.word	0x02700270
 801f3e4:	02700270 	.word	0x02700270
 801f3e8:	02700270 	.word	0x02700270
 801f3ec:	02700270 	.word	0x02700270
 801f3f0:	02700270 	.word	0x02700270
 801f3f4:	02700270 	.word	0x02700270
 801f3f8:	02700270 	.word	0x02700270
 801f3fc:	02700270 	.word	0x02700270
 801f400:	02700270 	.word	0x02700270
 801f404:	02700270 	.word	0x02700270
 801f408:	02700270 	.word	0x02700270
 801f40c:	02700270 	.word	0x02700270
 801f410:	02700270 	.word	0x02700270
 801f414:	02700270 	.word	0x02700270
 801f418:	02700270 	.word	0x02700270
 801f41c:	02700270 	.word	0x02700270
 801f420:	02700270 	.word	0x02700270
 801f424:	02700270 	.word	0x02700270
 801f428:	02700270 	.word	0x02700270
 801f42c:	02700270 	.word	0x02700270
 801f430:	02700270 	.word	0x02700270
 801f434:	02700270 	.word	0x02700270
 801f438:	02700270 	.word	0x02700270
 801f43c:	02560270 	.word	0x02560270
 801f440:	025a0258 	.word	0x025a0258
 801f444:	025e025c 	.word	0x025e025c
 801f448:	02620260 	.word	0x02620260
 801f44c:	02660264 	.word	0x02660264
 801f450:	02700268 	.word	0x02700268
 801f454:	026c026a 	.word	0x026c026a
 801f458:	02700270 	.word	0x02700270
 801f45c:	02700270 	.word	0x02700270
 801f460:	02700270 	.word	0x02700270
 801f464:	02700270 	.word	0x02700270
 801f468:	02700270 	.word	0x02700270
 801f46c:	02700270 	.word	0x02700270
 801f470:	02700270 	.word	0x02700270
 801f474:	02700270 	.word	0x02700270
 801f478:	02700270 	.word	0x02700270
 801f47c:	02700270 	.word	0x02700270
 801f480:	02700270 	.word	0x02700270
 801f484:	02700270 	.word	0x02700270
 801f488:	02700270 	.word	0x02700270
 801f48c:	02700270 	.word	0x02700270
 801f490:	02700270 	.word	0x02700270
 801f494:	02700270 	.word	0x02700270
 801f498:	02700270 	.word	0x02700270
 801f49c:	02700270 	.word	0x02700270
 801f4a0:	02700270 	.word	0x02700270
 801f4a4:	02700270 	.word	0x02700270
 801f4a8:	02700270 	.word	0x02700270
 801f4ac:	02700270 	.word	0x02700270
 801f4b0:	02700270 	.word	0x02700270
 801f4b4:	02700270 	.word	0x02700270
 801f4b8:	02700270 	.word	0x02700270
 801f4bc:	02700270 	.word	0x02700270
 801f4c0:	02700270 	.word	0x02700270
 801f4c4:	02700270 	.word	0x02700270
 801f4c8:	02700270 	.word	0x02700270
 801f4cc:	02700270 	.word	0x02700270
 801f4d0:	02700270 	.word	0x02700270
 801f4d4:	02700270 	.word	0x02700270
 801f4d8:	02700270 	.word	0x02700270
 801f4dc:	02700270 	.word	0x02700270
 801f4e0:	02700270 	.word	0x02700270
 801f4e4:	02700270 	.word	0x02700270
 801f4e8:	02700270 	.word	0x02700270
 801f4ec:	02700270 	.word	0x02700270
 801f4f0:	02700270 	.word	0x02700270
 801f4f4:	02700270 	.word	0x02700270
 801f4f8:	02700270 	.word	0x02700270
 801f4fc:	02700270 	.word	0x02700270
 801f500:	02700270 	.word	0x02700270
 801f504:	026e0270 	.word	0x026e0270
 801f508:	483f      	ldr	r0, [pc, #252]	@ (801f608 <mg_http_status_code_str+0x4f8>)
 801f50a:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 801f50c:	483f      	ldr	r0, [pc, #252]	@ (801f60c <mg_http_status_code_str+0x4fc>)
 801f50e:	4770      	bx	lr
    case 200: return "OK";
 801f510:	483f      	ldr	r0, [pc, #252]	@ (801f610 <mg_http_status_code_str+0x500>)
 801f512:	4770      	bx	lr
    case 201: return "Created";
 801f514:	483f      	ldr	r0, [pc, #252]	@ (801f614 <mg_http_status_code_str+0x504>)
 801f516:	4770      	bx	lr
    case 202: return "Accepted";
 801f518:	483f      	ldr	r0, [pc, #252]	@ (801f618 <mg_http_status_code_str+0x508>)
 801f51a:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 801f51c:	483f      	ldr	r0, [pc, #252]	@ (801f61c <mg_http_status_code_str+0x50c>)
 801f51e:	4770      	bx	lr
    case 204: return "No Content";
 801f520:	483f      	ldr	r0, [pc, #252]	@ (801f620 <mg_http_status_code_str+0x510>)
 801f522:	4770      	bx	lr
    case 205: return "Reset Content";
 801f524:	483f      	ldr	r0, [pc, #252]	@ (801f624 <mg_http_status_code_str+0x514>)
 801f526:	4770      	bx	lr
    case 206: return "Partial Content";
 801f528:	483f      	ldr	r0, [pc, #252]	@ (801f628 <mg_http_status_code_str+0x518>)
 801f52a:	4770      	bx	lr
    case 207: return "Multi-Status";
 801f52c:	483f      	ldr	r0, [pc, #252]	@ (801f62c <mg_http_status_code_str+0x51c>)
 801f52e:	4770      	bx	lr
    case 208: return "Already Reported";
 801f530:	483f      	ldr	r0, [pc, #252]	@ (801f630 <mg_http_status_code_str+0x520>)
 801f532:	4770      	bx	lr
    case 226: return "IM Used";
 801f534:	483f      	ldr	r0, [pc, #252]	@ (801f634 <mg_http_status_code_str+0x524>)
 801f536:	4770      	bx	lr
    case 300: return "Multiple Choices";
 801f538:	483f      	ldr	r0, [pc, #252]	@ (801f638 <mg_http_status_code_str+0x528>)
 801f53a:	4770      	bx	lr
    case 301: return "Moved Permanently";
 801f53c:	483f      	ldr	r0, [pc, #252]	@ (801f63c <mg_http_status_code_str+0x52c>)
 801f53e:	4770      	bx	lr
    case 302: return "Found";
 801f540:	483f      	ldr	r0, [pc, #252]	@ (801f640 <mg_http_status_code_str+0x530>)
 801f542:	4770      	bx	lr
    case 303: return "See Other";
 801f544:	483f      	ldr	r0, [pc, #252]	@ (801f644 <mg_http_status_code_str+0x534>)
 801f546:	4770      	bx	lr
    case 304: return "Not Modified";
 801f548:	483f      	ldr	r0, [pc, #252]	@ (801f648 <mg_http_status_code_str+0x538>)
 801f54a:	4770      	bx	lr
    case 305: return "Use Proxy";
 801f54c:	483f      	ldr	r0, [pc, #252]	@ (801f64c <mg_http_status_code_str+0x53c>)
 801f54e:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 801f550:	483f      	ldr	r0, [pc, #252]	@ (801f650 <mg_http_status_code_str+0x540>)
 801f552:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 801f554:	483f      	ldr	r0, [pc, #252]	@ (801f654 <mg_http_status_code_str+0x544>)
 801f556:	4770      	bx	lr
    case 400: return "Bad Request";
 801f558:	483f      	ldr	r0, [pc, #252]	@ (801f658 <mg_http_status_code_str+0x548>)
 801f55a:	4770      	bx	lr
    case 401: return "Unauthorized";
 801f55c:	483f      	ldr	r0, [pc, #252]	@ (801f65c <mg_http_status_code_str+0x54c>)
 801f55e:	4770      	bx	lr
    case 402: return "Payment Required";
 801f560:	483f      	ldr	r0, [pc, #252]	@ (801f660 <mg_http_status_code_str+0x550>)
 801f562:	4770      	bx	lr
    case 403: return "Forbidden";
 801f564:	483f      	ldr	r0, [pc, #252]	@ (801f664 <mg_http_status_code_str+0x554>)
 801f566:	4770      	bx	lr
    case 404: return "Not Found";
 801f568:	483f      	ldr	r0, [pc, #252]	@ (801f668 <mg_http_status_code_str+0x558>)
 801f56a:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 801f56c:	483f      	ldr	r0, [pc, #252]	@ (801f66c <mg_http_status_code_str+0x55c>)
 801f56e:	4770      	bx	lr
    case 406: return "Not Acceptable";
 801f570:	483f      	ldr	r0, [pc, #252]	@ (801f670 <mg_http_status_code_str+0x560>)
 801f572:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 801f574:	483f      	ldr	r0, [pc, #252]	@ (801f674 <mg_http_status_code_str+0x564>)
 801f576:	4770      	bx	lr
    case 408: return "Request Timeout";
 801f578:	483f      	ldr	r0, [pc, #252]	@ (801f678 <mg_http_status_code_str+0x568>)
 801f57a:	4770      	bx	lr
    case 409: return "Conflict";
 801f57c:	483f      	ldr	r0, [pc, #252]	@ (801f67c <mg_http_status_code_str+0x56c>)
 801f57e:	4770      	bx	lr
    case 410: return "Gone";
 801f580:	483f      	ldr	r0, [pc, #252]	@ (801f680 <mg_http_status_code_str+0x570>)
 801f582:	4770      	bx	lr
    case 411: return "Length Required";
 801f584:	483f      	ldr	r0, [pc, #252]	@ (801f684 <mg_http_status_code_str+0x574>)
 801f586:	4770      	bx	lr
    case 412: return "Precondition Failed";
 801f588:	483f      	ldr	r0, [pc, #252]	@ (801f688 <mg_http_status_code_str+0x578>)
 801f58a:	4770      	bx	lr
    case 413: return "Payload Too Large";
 801f58c:	483f      	ldr	r0, [pc, #252]	@ (801f68c <mg_http_status_code_str+0x57c>)
 801f58e:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 801f590:	483f      	ldr	r0, [pc, #252]	@ (801f690 <mg_http_status_code_str+0x580>)
 801f592:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 801f594:	483f      	ldr	r0, [pc, #252]	@ (801f694 <mg_http_status_code_str+0x584>)
 801f596:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 801f598:	483f      	ldr	r0, [pc, #252]	@ (801f698 <mg_http_status_code_str+0x588>)
 801f59a:	4770      	bx	lr
    case 417: return "Expectation Failed";
 801f59c:	483f      	ldr	r0, [pc, #252]	@ (801f69c <mg_http_status_code_str+0x58c>)
 801f59e:	4770      	bx	lr
    case 418: return "I'm a teapot";
 801f5a0:	483f      	ldr	r0, [pc, #252]	@ (801f6a0 <mg_http_status_code_str+0x590>)
 801f5a2:	4770      	bx	lr
    case 421: return "Misdirected Request";
 801f5a4:	483f      	ldr	r0, [pc, #252]	@ (801f6a4 <mg_http_status_code_str+0x594>)
 801f5a6:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 801f5a8:	483f      	ldr	r0, [pc, #252]	@ (801f6a8 <mg_http_status_code_str+0x598>)
 801f5aa:	4770      	bx	lr
    case 423: return "Locked";
 801f5ac:	483f      	ldr	r0, [pc, #252]	@ (801f6ac <mg_http_status_code_str+0x59c>)
 801f5ae:	4770      	bx	lr
    case 424: return "Failed Dependency";
 801f5b0:	483f      	ldr	r0, [pc, #252]	@ (801f6b0 <mg_http_status_code_str+0x5a0>)
 801f5b2:	4770      	bx	lr
    case 426: return "Upgrade Required";
 801f5b4:	483f      	ldr	r0, [pc, #252]	@ (801f6b4 <mg_http_status_code_str+0x5a4>)
 801f5b6:	4770      	bx	lr
    case 428: return "Precondition Required";
 801f5b8:	483f      	ldr	r0, [pc, #252]	@ (801f6b8 <mg_http_status_code_str+0x5a8>)
 801f5ba:	4770      	bx	lr
    case 429: return "Too Many Requests";
 801f5bc:	483f      	ldr	r0, [pc, #252]	@ (801f6bc <mg_http_status_code_str+0x5ac>)
 801f5be:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 801f5c0:	483f      	ldr	r0, [pc, #252]	@ (801f6c0 <mg_http_status_code_str+0x5b0>)
 801f5c2:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 801f5c4:	483f      	ldr	r0, [pc, #252]	@ (801f6c4 <mg_http_status_code_str+0x5b4>)
 801f5c6:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 801f5c8:	483f      	ldr	r0, [pc, #252]	@ (801f6c8 <mg_http_status_code_str+0x5b8>)
 801f5ca:	4770      	bx	lr
    case 499: return "Client Closed Request";
 801f5cc:	483f      	ldr	r0, [pc, #252]	@ (801f6cc <mg_http_status_code_str+0x5bc>)
 801f5ce:	4770      	bx	lr
    case 500: return "Internal Server Error";
 801f5d0:	483f      	ldr	r0, [pc, #252]	@ (801f6d0 <mg_http_status_code_str+0x5c0>)
 801f5d2:	4770      	bx	lr
    case 501: return "Not Implemented";
 801f5d4:	483f      	ldr	r0, [pc, #252]	@ (801f6d4 <mg_http_status_code_str+0x5c4>)
 801f5d6:	4770      	bx	lr
    case 502: return "Bad Gateway";
 801f5d8:	483f      	ldr	r0, [pc, #252]	@ (801f6d8 <mg_http_status_code_str+0x5c8>)
 801f5da:	4770      	bx	lr
    case 503: return "Service Unavailable";
 801f5dc:	483f      	ldr	r0, [pc, #252]	@ (801f6dc <mg_http_status_code_str+0x5cc>)
 801f5de:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 801f5e0:	483f      	ldr	r0, [pc, #252]	@ (801f6e0 <mg_http_status_code_str+0x5d0>)
 801f5e2:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 801f5e4:	483f      	ldr	r0, [pc, #252]	@ (801f6e4 <mg_http_status_code_str+0x5d4>)
 801f5e6:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 801f5e8:	483f      	ldr	r0, [pc, #252]	@ (801f6e8 <mg_http_status_code_str+0x5d8>)
 801f5ea:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 801f5ec:	483f      	ldr	r0, [pc, #252]	@ (801f6ec <mg_http_status_code_str+0x5dc>)
 801f5ee:	4770      	bx	lr
    case 508: return "Loop Detected";
 801f5f0:	483f      	ldr	r0, [pc, #252]	@ (801f6f0 <mg_http_status_code_str+0x5e0>)
 801f5f2:	4770      	bx	lr
    case 510: return "Not Extended";
 801f5f4:	483f      	ldr	r0, [pc, #252]	@ (801f6f4 <mg_http_status_code_str+0x5e4>)
 801f5f6:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 801f5f8:	483f      	ldr	r0, [pc, #252]	@ (801f6f8 <mg_http_status_code_str+0x5e8>)
 801f5fa:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 801f5fc:	483f      	ldr	r0, [pc, #252]	@ (801f6fc <mg_http_status_code_str+0x5ec>)
 801f5fe:	4770      	bx	lr
    default: return "";
 801f600:	483f      	ldr	r0, [pc, #252]	@ (801f700 <mg_http_status_code_str+0x5f0>)
 801f602:	4770      	bx	lr
    case 101: return "Switching Protocols";
 801f604:	483f      	ldr	r0, [pc, #252]	@ (801f704 <mg_http_status_code_str+0x5f4>)
  }
}
 801f606:	4770      	bx	lr
 801f608:	08038998 	.word	0x08038998
 801f60c:	080389b8 	.word	0x080389b8
 801f610:	080389c4 	.word	0x080389c4
 801f614:	080389c8 	.word	0x080389c8
 801f618:	080389d0 	.word	0x080389d0
 801f61c:	080389dc 	.word	0x080389dc
 801f620:	080389fc 	.word	0x080389fc
 801f624:	08038a08 	.word	0x08038a08
 801f628:	08038a18 	.word	0x08038a18
 801f62c:	08038a28 	.word	0x08038a28
 801f630:	08038a38 	.word	0x08038a38
 801f634:	08038a4c 	.word	0x08038a4c
 801f638:	08038a54 	.word	0x08038a54
 801f63c:	08038a68 	.word	0x08038a68
 801f640:	08038b0c 	.word	0x08038b0c
 801f644:	08038a7c 	.word	0x08038a7c
 801f648:	08038a88 	.word	0x08038a88
 801f64c:	08038a98 	.word	0x08038a98
 801f650:	08038aa4 	.word	0x08038aa4
 801f654:	08038ab8 	.word	0x08038ab8
 801f658:	08038acc 	.word	0x08038acc
 801f65c:	08038ad8 	.word	0x08038ad8
 801f660:	08038ae8 	.word	0x08038ae8
 801f664:	08038afc 	.word	0x08038afc
 801f668:	08038b08 	.word	0x08038b08
 801f66c:	08038b14 	.word	0x08038b14
 801f670:	08038b28 	.word	0x08038b28
 801f674:	08038b38 	.word	0x08038b38
 801f678:	08038b58 	.word	0x08038b58
 801f67c:	08038b68 	.word	0x08038b68
 801f680:	08038b74 	.word	0x08038b74
 801f684:	08038b7c 	.word	0x08038b7c
 801f688:	08038b8c 	.word	0x08038b8c
 801f68c:	08038ba0 	.word	0x08038ba0
 801f690:	08038bb4 	.word	0x08038bb4
 801f694:	08038bcc 	.word	0x08038bcc
 801f698:	08038be4 	.word	0x08038be4
 801f69c:	08038c04 	.word	0x08038c04
 801f6a0:	08038c18 	.word	0x08038c18
 801f6a4:	08038c28 	.word	0x08038c28
 801f6a8:	08038c3c 	.word	0x08038c3c
 801f6ac:	08038c54 	.word	0x08038c54
 801f6b0:	08038c5c 	.word	0x08038c5c
 801f6b4:	08038c70 	.word	0x08038c70
 801f6b8:	08038c84 	.word	0x08038c84
 801f6bc:	08038c9c 	.word	0x08038c9c
 801f6c0:	08038cb0 	.word	0x08038cb0
 801f6c4:	08038cd0 	.word	0x08038cd0
 801f6c8:	08038cf4 	.word	0x08038cf4
 801f6cc:	08038d14 	.word	0x08038d14
 801f6d0:	08038d2c 	.word	0x08038d2c
 801f6d4:	08038d44 	.word	0x08038d44
 801f6d8:	08038d54 	.word	0x08038d54
 801f6dc:	08038d60 	.word	0x08038d60
 801f6e0:	08038d74 	.word	0x08038d74
 801f6e4:	08038d84 	.word	0x08038d84
 801f6e8:	08038da0 	.word	0x08038da0
 801f6ec:	08038db8 	.word	0x08038db8
 801f6f0:	08038dd0 	.word	0x08038dd0
 801f6f4:	08038de0 	.word	0x08038de0
 801f6f8:	08038df0 	.word	0x08038df0
 801f6fc:	08038e10 	.word	0x08038e10
 801f700:	08035a68 	.word	0x08035a68
 801f704:	080389a4 	.word	0x080389a4

0801f708 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 801f708:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 801f70c:	2b09      	cmp	r3, #9
 801f70e:	d91c      	bls.n	801f74a <mg_is_url_safe+0x42>
 801f710:	285f      	cmp	r0, #95	@ 0x5f
 801f712:	d01c      	beq.n	801f74e <mg_is_url_safe+0x46>
 801f714:	dc0d      	bgt.n	801f732 <mg_is_url_safe+0x2a>
 801f716:	282e      	cmp	r0, #46	@ 0x2e
 801f718:	d01b      	beq.n	801f752 <mg_is_url_safe+0x4a>
 801f71a:	dd04      	ble.n	801f726 <mg_is_url_safe+0x1e>
 801f71c:	3841      	subs	r0, #65	@ 0x41
 801f71e:	2819      	cmp	r0, #25
 801f720:	d805      	bhi.n	801f72e <mg_is_url_safe+0x26>
 801f722:	2001      	movs	r0, #1
 801f724:	4770      	bx	lr
 801f726:	282d      	cmp	r0, #45	@ 0x2d
 801f728:	d115      	bne.n	801f756 <mg_is_url_safe+0x4e>
 801f72a:	2001      	movs	r0, #1
 801f72c:	4770      	bx	lr
 801f72e:	2000      	movs	r0, #0
 801f730:	4770      	bx	lr
 801f732:	287a      	cmp	r0, #122	@ 0x7a
 801f734:	dd03      	ble.n	801f73e <mg_is_url_safe+0x36>
 801f736:	287e      	cmp	r0, #126	@ 0x7e
 801f738:	d10f      	bne.n	801f75a <mg_is_url_safe+0x52>
 801f73a:	2001      	movs	r0, #1
 801f73c:	4770      	bx	lr
 801f73e:	2861      	cmp	r0, #97	@ 0x61
 801f740:	da01      	bge.n	801f746 <mg_is_url_safe+0x3e>
 801f742:	2000      	movs	r0, #0
 801f744:	4770      	bx	lr
 801f746:	2001      	movs	r0, #1
 801f748:	4770      	bx	lr
 801f74a:	2001      	movs	r0, #1
 801f74c:	4770      	bx	lr
 801f74e:	2001      	movs	r0, #1
 801f750:	4770      	bx	lr
 801f752:	2001      	movs	r0, #1
 801f754:	4770      	bx	lr
 801f756:	2000      	movs	r0, #0
 801f758:	4770      	bx	lr
 801f75a:	2000      	movs	r0, #0
}
 801f75c:	4770      	bx	lr

0801f75e <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801f75e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801f762:	2b09      	cmp	r3, #9
 801f764:	d908      	bls.n	801f778 <is_hex_digit+0x1a>
 801f766:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801f76a:	2b05      	cmp	r3, #5
 801f76c:	d906      	bls.n	801f77c <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 801f76e:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801f770:	2805      	cmp	r0, #5
 801f772:	d805      	bhi.n	801f780 <is_hex_digit+0x22>
 801f774:	2001      	movs	r0, #1
 801f776:	4770      	bx	lr
 801f778:	2001      	movs	r0, #1
 801f77a:	4770      	bx	lr
 801f77c:	2001      	movs	r0, #1
 801f77e:	4770      	bx	lr
 801f780:	2000      	movs	r0, #0
}
 801f782:	4770      	bx	lr

0801f784 <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 801f784:	b129      	cbz	r1, 801f792 <roundup+0xe>
 801f786:	4408      	add	r0, r1
 801f788:	3801      	subs	r0, #1
 801f78a:	fbb0 f0f1 	udiv	r0, r0, r1
 801f78e:	fb01 f000 	mul.w	r0, r1, r0
}
 801f792:	4770      	bx	lr

0801f794 <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 801f794:	b108      	cbz	r0, 801f79a <escapeseq+0x6>
 801f796:	4802      	ldr	r0, [pc, #8]	@ (801f7a0 <escapeseq+0xc>)
 801f798:	4770      	bx	lr
 801f79a:	4802      	ldr	r0, [pc, #8]	@ (801f7a4 <escapeseq+0x10>)
}
 801f79c:	4770      	bx	lr
 801f79e:	bf00      	nop
 801f7a0:	08038e30 	.word	0x08038e30
 801f7a4:	08038e38 	.word	0x08038e38

0801f7a8 <json_esc>:

static char json_esc(int c, int esc) {
 801f7a8:	b570      	push	{r4, r5, r6, lr}
 801f7aa:	4604      	mov	r4, r0
 801f7ac:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 801f7ae:	4608      	mov	r0, r1
 801f7b0:	f7ff fff0 	bl	801f794 <escapeseq>
 801f7b4:	4606      	mov	r6, r0
 801f7b6:	fab5 f085 	clz	r0, r5
 801f7ba:	0940      	lsrs	r0, r0, #5
 801f7bc:	f7ff ffea 	bl	801f794 <escapeseq>
 801f7c0:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 801f7c2:	4633      	mov	r3, r6
 801f7c4:	e000      	b.n	801f7c8 <json_esc+0x20>
 801f7c6:	3301      	adds	r3, #1
 801f7c8:	7818      	ldrb	r0, [r3, #0]
 801f7ca:	b118      	cbz	r0, 801f7d4 <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 801f7cc:	42a0      	cmp	r0, r4
 801f7ce:	d1fa      	bne.n	801f7c6 <json_esc+0x1e>
 801f7d0:	1b9b      	subs	r3, r3, r6
 801f7d2:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 801f7d4:	bd70      	pop	{r4, r5, r6, pc}

0801f7d6 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 801f7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7da:	4607      	mov	r7, r0
 801f7dc:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 801f7de:	2400      	movs	r4, #0
 801f7e0:	e003      	b.n	801f7ea <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 801f7e2:	b1d5      	cbz	r5, 801f81a <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 801f7e4:	2d22      	cmp	r5, #34	@ 0x22
 801f7e6:	d015      	beq.n	801f814 <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 801f7e8:	3401      	adds	r4, #1
 801f7ea:	42b4      	cmp	r4, r6
 801f7ec:	da10      	bge.n	801f810 <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 801f7ee:	4623      	mov	r3, r4
 801f7f0:	5d3d      	ldrb	r5, [r7, r4]
 801f7f2:	2d5c      	cmp	r5, #92	@ 0x5c
 801f7f4:	d1f5      	bne.n	801f7e2 <mg_pass_string+0xc>
 801f7f6:	f104 0801 	add.w	r8, r4, #1
 801f7fa:	45b0      	cmp	r8, r6
 801f7fc:	daf1      	bge.n	801f7e2 <mg_pass_string+0xc>
 801f7fe:	443b      	add	r3, r7
 801f800:	2101      	movs	r1, #1
 801f802:	7858      	ldrb	r0, [r3, #1]
 801f804:	f7ff ffd0 	bl	801f7a8 <json_esc>
 801f808:	2800      	cmp	r0, #0
 801f80a:	d0ea      	beq.n	801f7e2 <mg_pass_string+0xc>
      i++;
 801f80c:	4644      	mov	r4, r8
 801f80e:	e7eb      	b.n	801f7e8 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 801f810:	f06f 0401 	mvn.w	r4, #1
}
 801f814:	4620      	mov	r0, r4
 801f816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 801f81a:	f06f 0401 	mvn.w	r4, #1
 801f81e:	e7f9      	b.n	801f814 <mg_pass_string+0x3e>

0801f820 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 801f820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f824:	ed2d 8b02 	vpush	{d8}
 801f828:	b085      	sub	sp, #20
 801f82a:	4681      	mov	r9, r0
 801f82c:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 801f82e:	f1b1 0800 	subs.w	r8, r1, #0
 801f832:	dd49      	ble.n	801f8c8 <mg_atod+0xa8>
 801f834:	7803      	ldrb	r3, [r0, #0]
 801f836:	2b2d      	cmp	r3, #45	@ 0x2d
 801f838:	d04c      	beq.n	801f8d4 <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 801f83a:	2b2b      	cmp	r3, #43	@ 0x2b
 801f83c:	d04e      	beq.n	801f8dc <mg_atod+0xbc>
  int i = 0, sign = 1;
 801f83e:	f04f 0a01 	mov.w	sl, #1
 801f842:	2400      	movs	r4, #0
 801f844:	e043      	b.n	801f8ce <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 801f846:	2200      	movs	r2, #0
 801f848:	4b71      	ldr	r3, [pc, #452]	@ (801fa10 <mg_atod+0x1f0>)
 801f84a:	4630      	mov	r0, r6
 801f84c:	4639      	mov	r1, r7
 801f84e:	f7f0 feeb 	bl	8010628 <__aeabi_dmul>
 801f852:	4606      	mov	r6, r0
 801f854:	460f      	mov	r7, r1
    d += p[i] - '0';
 801f856:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 801f85a:	f7f0 fe7b 	bl	8010554 <__aeabi_i2d>
 801f85e:	4632      	mov	r2, r6
 801f860:	463b      	mov	r3, r7
 801f862:	f7f0 fd2b 	bl	80102bc <__adddf3>
 801f866:	4606      	mov	r6, r0
 801f868:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801f86a:	3401      	adds	r4, #1
 801f86c:	4544      	cmp	r4, r8
 801f86e:	da05      	bge.n	801f87c <mg_atod+0x5c>
 801f870:	f819 5004 	ldrb.w	r5, [r9, r4]
 801f874:	2d2f      	cmp	r5, #47	@ 0x2f
 801f876:	d901      	bls.n	801f87c <mg_atod+0x5c>
 801f878:	2d39      	cmp	r5, #57	@ 0x39
 801f87a:	d9e4      	bls.n	801f846 <mg_atod+0x26>
  }
  d *= sign;
 801f87c:	4650      	mov	r0, sl
 801f87e:	f7f0 fe69 	bl	8010554 <__aeabi_i2d>
 801f882:	4602      	mov	r2, r0
 801f884:	460b      	mov	r3, r1
 801f886:	ec43 2b18 	vmov	d8, r2, r3
 801f88a:	4632      	mov	r2, r6
 801f88c:	463b      	mov	r3, r7
 801f88e:	f7f0 fecb 	bl	8010628 <__aeabi_dmul>
 801f892:	4606      	mov	r6, r0
 801f894:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 801f896:	4544      	cmp	r4, r8
 801f898:	da03      	bge.n	801f8a2 <mg_atod+0x82>
 801f89a:	f819 3004 	ldrb.w	r3, [r9, r4]
 801f89e:	2b2e      	cmp	r3, #46	@ 0x2e
 801f8a0:	d020      	beq.n	801f8e4 <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 801f8a2:	4544      	cmp	r4, r8
 801f8a4:	f280 80a1 	bge.w	801f9ea <mg_atod+0x1ca>
 801f8a8:	f819 3004 	ldrb.w	r3, [r9, r4]
 801f8ac:	2b65      	cmp	r3, #101	@ 0x65
 801f8ae:	d002      	beq.n	801f8b6 <mg_atod+0x96>
 801f8b0:	2b45      	cmp	r3, #69	@ 0x45
 801f8b2:	f040 809a 	bne.w	801f9ea <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 801f8b6:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 801f8b8:	4598      	cmp	r8, r3
 801f8ba:	dd58      	ble.n	801f96e <mg_atod+0x14e>
 801f8bc:	f819 2003 	ldrb.w	r2, [r9, r3]
 801f8c0:	2a2d      	cmp	r2, #45	@ 0x2d
 801f8c2:	d051      	beq.n	801f968 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 801f8c4:	2200      	movs	r2, #0
 801f8c6:	e053      	b.n	801f970 <mg_atod+0x150>
  int i = 0, sign = 1;
 801f8c8:	f04f 0a01 	mov.w	sl, #1
 801f8cc:	2400      	movs	r4, #0
    i++;
 801f8ce:	2600      	movs	r6, #0
 801f8d0:	2700      	movs	r7, #0
 801f8d2:	e7cb      	b.n	801f86c <mg_atod+0x4c>
    sign = -1, i++;
 801f8d4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801f8d8:	2401      	movs	r4, #1
 801f8da:	e7f8      	b.n	801f8ce <mg_atod+0xae>
  int i = 0, sign = 1;
 801f8dc:	f04f 0a01 	mov.w	sl, #1
    i++;
 801f8e0:	4654      	mov	r4, sl
 801f8e2:	e7f4      	b.n	801f8ce <mg_atod+0xae>
    i++;
 801f8e4:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 801f8e6:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 801f8ea:	e9db ab00 	ldrd	sl, fp, [fp]
 801f8ee:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 801fa08 <mg_atod+0x1e8>
 801f8f2:	ec53 2b17 	vmov	r2, r3, d7
 801f8f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801f8fa:	464f      	mov	r7, r9
 801f8fc:	4645      	mov	r5, r8
 801f8fe:	4690      	mov	r8, r2
 801f900:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801f902:	e017      	b.n	801f934 <mg_atod+0x114>
      frac += base * (p[i] - '0');
 801f904:	3830      	subs	r0, #48	@ 0x30
 801f906:	f7f0 fe25 	bl	8010554 <__aeabi_i2d>
 801f90a:	4652      	mov	r2, sl
 801f90c:	465b      	mov	r3, fp
 801f90e:	f7f0 fe8b 	bl	8010628 <__aeabi_dmul>
 801f912:	4602      	mov	r2, r0
 801f914:	460b      	mov	r3, r1
 801f916:	4640      	mov	r0, r8
 801f918:	4649      	mov	r1, r9
 801f91a:	f7f0 fccf 	bl	80102bc <__adddf3>
 801f91e:	4680      	mov	r8, r0
 801f920:	4689      	mov	r9, r1
      base /= 10.0;
 801f922:	2200      	movs	r2, #0
 801f924:	4b3a      	ldr	r3, [pc, #232]	@ (801fa10 <mg_atod+0x1f0>)
 801f926:	4650      	mov	r0, sl
 801f928:	4659      	mov	r1, fp
 801f92a:	f7f0 ffa7 	bl	801087c <__aeabi_ddiv>
 801f92e:	4682      	mov	sl, r0
 801f930:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801f932:	3401      	adds	r4, #1
 801f934:	42ac      	cmp	r4, r5
 801f936:	da04      	bge.n	801f942 <mg_atod+0x122>
 801f938:	5d38      	ldrb	r0, [r7, r4]
 801f93a:	282f      	cmp	r0, #47	@ 0x2f
 801f93c:	d901      	bls.n	801f942 <mg_atod+0x122>
 801f93e:	2839      	cmp	r0, #57	@ 0x39
 801f940:	d9e0      	bls.n	801f904 <mg_atod+0xe4>
    d += frac * sign;
 801f942:	4642      	mov	r2, r8
 801f944:	464b      	mov	r3, r9
 801f946:	46b9      	mov	r9, r7
 801f948:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f94c:	46a8      	mov	r8, r5
 801f94e:	ec51 0b18 	vmov	r0, r1, d8
 801f952:	f7f0 fe69 	bl	8010628 <__aeabi_dmul>
 801f956:	4602      	mov	r2, r0
 801f958:	460b      	mov	r3, r1
 801f95a:	4630      	mov	r0, r6
 801f95c:	4639      	mov	r1, r7
 801f95e:	f7f0 fcad 	bl	80102bc <__adddf3>
 801f962:	4606      	mov	r6, r0
 801f964:	460f      	mov	r7, r1
 801f966:	e79c      	b.n	801f8a2 <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 801f968:	1ca3      	adds	r3, r4, #2
 801f96a:	2201      	movs	r2, #1
 801f96c:	e000      	b.n	801f970 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 801f96e:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 801f970:	4543      	cmp	r3, r8
 801f972:	da03      	bge.n	801f97c <mg_atod+0x15c>
 801f974:	f819 1003 	ldrb.w	r1, [r9, r3]
 801f978:	292b      	cmp	r1, #43	@ 0x2b
 801f97a:	d013      	beq.n	801f9a4 <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 801f97c:	461c      	mov	r4, r3
 801f97e:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 801f980:	4544      	cmp	r4, r8
 801f982:	da11      	bge.n	801f9a8 <mg_atod+0x188>
 801f984:	f819 3004 	ldrb.w	r3, [r9, r4]
 801f988:	2b2f      	cmp	r3, #47	@ 0x2f
 801f98a:	d90d      	bls.n	801f9a8 <mg_atod+0x188>
 801f98c:	2b39      	cmp	r3, #57	@ 0x39
 801f98e:	d80b      	bhi.n	801f9a8 <mg_atod+0x188>
 801f990:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 801f994:	da08      	bge.n	801f9a8 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 801f996:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801f99a:	3401      	adds	r4, #1
 801f99c:	3b30      	subs	r3, #48	@ 0x30
 801f99e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801f9a2:	e7ed      	b.n	801f980 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 801f9a4:	3301      	adds	r3, #1
 801f9a6:	e7e9      	b.n	801f97c <mg_atod+0x15c>
    if (minus) exp = -exp;
 801f9a8:	b102      	cbz	r2, 801f9ac <mg_atod+0x18c>
 801f9aa:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 801f9ac:	f04f 0800 	mov.w	r8, #0
 801f9b0:	e009      	b.n	801f9c6 <mg_atod+0x1a6>
 801f9b2:	2200      	movs	r2, #0
 801f9b4:	4b16      	ldr	r3, [pc, #88]	@ (801fa10 <mg_atod+0x1f0>)
 801f9b6:	4630      	mov	r0, r6
 801f9b8:	4639      	mov	r1, r7
 801f9ba:	f7f0 fe35 	bl	8010628 <__aeabi_dmul>
 801f9be:	4606      	mov	r6, r0
 801f9c0:	460f      	mov	r7, r1
 801f9c2:	f108 0801 	add.w	r8, r8, #1
 801f9c6:	45a8      	cmp	r8, r5
 801f9c8:	dbf3      	blt.n	801f9b2 <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 801f9ca:	f04f 0800 	mov.w	r8, #0
 801f9ce:	e009      	b.n	801f9e4 <mg_atod+0x1c4>
 801f9d0:	2200      	movs	r2, #0
 801f9d2:	4b0f      	ldr	r3, [pc, #60]	@ (801fa10 <mg_atod+0x1f0>)
 801f9d4:	4630      	mov	r0, r6
 801f9d6:	4639      	mov	r1, r7
 801f9d8:	f7f0 ff50 	bl	801087c <__aeabi_ddiv>
 801f9dc:	4606      	mov	r6, r0
 801f9de:	460f      	mov	r7, r1
 801f9e0:	f108 0801 	add.w	r8, r8, #1
 801f9e4:	426b      	negs	r3, r5
 801f9e6:	4543      	cmp	r3, r8
 801f9e8:	dcf2      	bgt.n	801f9d0 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 801f9ea:	9b01      	ldr	r3, [sp, #4]
 801f9ec:	b103      	cbz	r3, 801f9f0 <mg_atod+0x1d0>
 801f9ee:	601c      	str	r4, [r3, #0]
  return d;
}
 801f9f0:	ec47 6b10 	vmov	d0, r6, r7
 801f9f4:	b005      	add	sp, #20
 801f9f6:	ecbd 8b02 	vpop	{d8}
 801f9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9fe:	bf00      	nop
 801fa00:	9999999a 	.word	0x9999999a
 801fa04:	3fb99999 	.word	0x3fb99999
	...
 801fa10:	40240000 	.word	0x40240000

0801fa14 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 801fa14:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 801fa16:	4b03      	ldr	r3, [pc, #12]	@ (801fa24 <logc+0x10>)
 801fa18:	681b      	ldr	r3, [r3, #0]
 801fa1a:	4a03      	ldr	r2, [pc, #12]	@ (801fa28 <logc+0x14>)
 801fa1c:	6811      	ldr	r1, [r2, #0]
 801fa1e:	4798      	blx	r3
}
 801fa20:	bd08      	pop	{r3, pc}
 801fa22:	bf00      	nop
 801fa24:	200000a4 	.word	0x200000a4
 801fa28:	20018df0 	.word	0x20018df0

0801fa2c <logs>:

static void logs(const char *buf, size_t len) {
 801fa2c:	b570      	push	{r4, r5, r6, lr}
 801fa2e:	4606      	mov	r6, r0
 801fa30:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 801fa32:	2400      	movs	r4, #0
 801fa34:	e003      	b.n	801fa3e <logs+0x12>
 801fa36:	5d30      	ldrb	r0, [r6, r4]
 801fa38:	f7ff ffec 	bl	801fa14 <logc>
 801fa3c:	3401      	adds	r4, #1
 801fa3e:	42ac      	cmp	r4, r5
 801fa40:	d3f9      	bcc.n	801fa36 <logs+0xa>
}
 801fa42:	bd70      	pop	{r4, r5, r6, pc}

0801fa44 <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 801fa44:	2809      	cmp	r0, #9
 801fa46:	d803      	bhi.n	801fa50 <nibble+0xc>
 801fa48:	b2c0      	uxtb	r0, r0
 801fa4a:	3030      	adds	r0, #48	@ 0x30
 801fa4c:	b2c0      	uxtb	r0, r0
 801fa4e:	4770      	bx	lr
 801fa50:	b2c0      	uxtb	r0, r0
 801fa52:	3057      	adds	r0, #87	@ 0x57
 801fa54:	b2c0      	uxtb	r0, r0
}
 801fa56:	4770      	bx	lr

0801fa58 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 801fa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa5c:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 801fa5e:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 801fa60:	6883      	ldr	r3, [r0, #8]
 801fa62:	68c2      	ldr	r2, [r0, #12]
 801fa64:	4053      	eors	r3, r2
 801fa66:	4033      	ands	r3, r6
 801fa68:	4053      	eors	r3, r2
 801fa6a:	f8d1 a000 	ldr.w	sl, [r1]
 801fa6e:	4453      	add	r3, sl
 801fa70:	6802      	ldr	r2, [r0, #0]
 801fa72:	4413      	add	r3, r2
 801fa74:	4ae0      	ldr	r2, [pc, #896]	@ (801fdf8 <mg_md5_transform+0x3a0>)
 801fa76:	441a      	add	r2, r3
 801fa78:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 801fa7c:	6883      	ldr	r3, [r0, #8]
 801fa7e:	ea86 0503 	eor.w	r5, r6, r3
 801fa82:	4015      	ands	r5, r2
 801fa84:	405d      	eors	r5, r3
 801fa86:	684b      	ldr	r3, [r1, #4]
 801fa88:	9301      	str	r3, [sp, #4]
 801fa8a:	441d      	add	r5, r3
 801fa8c:	68c4      	ldr	r4, [r0, #12]
 801fa8e:	4425      	add	r5, r4
 801fa90:	4bda      	ldr	r3, [pc, #872]	@ (801fdfc <mg_md5_transform+0x3a4>)
 801fa92:	442b      	add	r3, r5
 801fa94:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 801fa98:	ea86 0502 	eor.w	r5, r6, r2
 801fa9c:	401d      	ands	r5, r3
 801fa9e:	960b      	str	r6, [sp, #44]	@ 0x2c
 801faa0:	4075      	eors	r5, r6
 801faa2:	688c      	ldr	r4, [r1, #8]
 801faa4:	4425      	add	r5, r4
 801faa6:	6886      	ldr	r6, [r0, #8]
 801faa8:	4435      	add	r5, r6
 801faaa:	4ed5      	ldr	r6, [pc, #852]	@ (801fe00 <mg_md5_transform+0x3a8>)
 801faac:	442e      	add	r6, r5
 801faae:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 801fab2:	ea82 0703 	eor.w	r7, r2, r3
 801fab6:	ea07 070c 	and.w	r7, r7, ip
 801faba:	4057      	eors	r7, r2
 801fabc:	68cd      	ldr	r5, [r1, #12]
 801fabe:	950a      	str	r5, [sp, #40]	@ 0x28
 801fac0:	442f      	add	r7, r5
 801fac2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fac4:	4437      	add	r7, r6
 801fac6:	4dcf      	ldr	r5, [pc, #828]	@ (801fe04 <mg_md5_transform+0x3ac>)
 801fac8:	443d      	add	r5, r7
 801faca:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 801face:	ea83 070c 	eor.w	r7, r3, ip
 801fad2:	402f      	ands	r7, r5
 801fad4:	405f      	eors	r7, r3
 801fad6:	690e      	ldr	r6, [r1, #16]
 801fad8:	9602      	str	r6, [sp, #8]
 801fada:	4437      	add	r7, r6
 801fadc:	4417      	add	r7, r2
 801fade:	4aca      	ldr	r2, [pc, #808]	@ (801fe08 <mg_md5_transform+0x3b0>)
 801fae0:	443a      	add	r2, r7
 801fae2:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 801fae6:	ea8c 0705 	eor.w	r7, ip, r5
 801faea:	4017      	ands	r7, r2
 801faec:	ea87 070c 	eor.w	r7, r7, ip
 801faf0:	694e      	ldr	r6, [r1, #20]
 801faf2:	9603      	str	r6, [sp, #12]
 801faf4:	4437      	add	r7, r6
 801faf6:	441f      	add	r7, r3
 801faf8:	4bc4      	ldr	r3, [pc, #784]	@ (801fe0c <mg_md5_transform+0x3b4>)
 801fafa:	443b      	add	r3, r7
 801fafc:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 801fb00:	ea85 0702 	eor.w	r7, r5, r2
 801fb04:	401f      	ands	r7, r3
 801fb06:	406f      	eors	r7, r5
 801fb08:	698e      	ldr	r6, [r1, #24]
 801fb0a:	9604      	str	r6, [sp, #16]
 801fb0c:	4437      	add	r7, r6
 801fb0e:	eb0c 0607 	add.w	r6, ip, r7
 801fb12:	4fbf      	ldr	r7, [pc, #764]	@ (801fe10 <mg_md5_transform+0x3b8>)
 801fb14:	4437      	add	r7, r6
 801fb16:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 801fb1a:	ea82 0603 	eor.w	r6, r2, r3
 801fb1e:	ea06 060c 	and.w	r6, r6, ip
 801fb22:	4056      	eors	r6, r2
 801fb24:	f8d1 901c 	ldr.w	r9, [r1, #28]
 801fb28:	444e      	add	r6, r9
 801fb2a:	4435      	add	r5, r6
 801fb2c:	4fb9      	ldr	r7, [pc, #740]	@ (801fe14 <mg_md5_transform+0x3bc>)
 801fb2e:	442f      	add	r7, r5
 801fb30:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 801fb34:	ea83 050c 	eor.w	r5, r3, ip
 801fb38:	403d      	ands	r5, r7
 801fb3a:	405d      	eors	r5, r3
 801fb3c:	6a0e      	ldr	r6, [r1, #32]
 801fb3e:	9605      	str	r6, [sp, #20]
 801fb40:	4435      	add	r5, r6
 801fb42:	442a      	add	r2, r5
 801fb44:	4eb4      	ldr	r6, [pc, #720]	@ (801fe18 <mg_md5_transform+0x3c0>)
 801fb46:	4416      	add	r6, r2
 801fb48:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 801fb4c:	ea8c 0207 	eor.w	r2, ip, r7
 801fb50:	4032      	ands	r2, r6
 801fb52:	ea82 020c 	eor.w	r2, r2, ip
 801fb56:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 801fb58:	9506      	str	r5, [sp, #24]
 801fb5a:	442a      	add	r2, r5
 801fb5c:	4413      	add	r3, r2
 801fb5e:	4daf      	ldr	r5, [pc, #700]	@ (801fe1c <mg_md5_transform+0x3c4>)
 801fb60:	441d      	add	r5, r3
 801fb62:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 801fb66:	ea87 0306 	eor.w	r3, r7, r6
 801fb6a:	402b      	ands	r3, r5
 801fb6c:	407b      	eors	r3, r7
 801fb6e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 801fb70:	9207      	str	r2, [sp, #28]
 801fb72:	4413      	add	r3, r2
 801fb74:	4463      	add	r3, ip
 801fb76:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 801fb7a:	3b4f      	subs	r3, #79	@ 0x4f
 801fb7c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 801fb80:	ea86 0c05 	eor.w	ip, r6, r5
 801fb84:	ea0c 0c03 	and.w	ip, ip, r3
 801fb88:	ea8c 0c06 	eor.w	ip, ip, r6
 801fb8c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801fb8e:	9208      	str	r2, [sp, #32]
 801fb90:	4494      	add	ip, r2
 801fb92:	4467      	add	r7, ip
 801fb94:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 801fe40 <mg_md5_transform+0x3e8>
 801fb98:	44be      	add	lr, r7
 801fb9a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 801fb9e:	ea85 0c03 	eor.w	ip, r5, r3
 801fba2:	ea0c 0c0e 	and.w	ip, ip, lr
 801fba6:	ea8c 0c05 	eor.w	ip, ip, r5
 801fbaa:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 801fbac:	44bc      	add	ip, r7
 801fbae:	4466      	add	r6, ip
 801fbb0:	f8df c290 	ldr.w	ip, [pc, #656]	@ 801fe44 <mg_md5_transform+0x3ec>
 801fbb4:	44b4      	add	ip, r6
 801fbb6:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 801fbba:	ea83 080e 	eor.w	r8, r3, lr
 801fbbe:	ea08 080c 	and.w	r8, r8, ip
 801fbc2:	ea88 0803 	eor.w	r8, r8, r3
 801fbc6:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 801fbc8:	44b0      	add	r8, r6
 801fbca:	44a8      	add	r8, r5
 801fbcc:	4d94      	ldr	r5, [pc, #592]	@ (801fe20 <mg_md5_transform+0x3c8>)
 801fbce:	4445      	add	r5, r8
 801fbd0:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 801fbd4:	ea8e 0b0c 	eor.w	fp, lr, ip
 801fbd8:	ea0b 0b05 	and.w	fp, fp, r5
 801fbdc:	ea8b 0b0e 	eor.w	fp, fp, lr
 801fbe0:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 801fbe4:	44c3      	add	fp, r8
 801fbe6:	449b      	add	fp, r3
 801fbe8:	4b8e      	ldr	r3, [pc, #568]	@ (801fe24 <mg_md5_transform+0x3cc>)
 801fbea:	445b      	add	r3, fp
 801fbec:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 801fbf0:	ea8c 0b05 	eor.w	fp, ip, r5
 801fbf4:	ea0b 0b03 	and.w	fp, fp, r3
 801fbf8:	ea8b 0b0c 	eor.w	fp, fp, ip
 801fbfc:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 801fbfe:	9109      	str	r1, [sp, #36]	@ 0x24
 801fc00:	448b      	add	fp, r1
 801fc02:	44f3      	add	fp, lr
 801fc04:	f8df e240 	ldr.w	lr, [pc, #576]	@ 801fe48 <mg_md5_transform+0x3f0>
 801fc08:	44de      	add	lr, fp
 801fc0a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 801fc0e:	ea83 0b0e 	eor.w	fp, r3, lr
 801fc12:	ea0b 0b05 	and.w	fp, fp, r5
 801fc16:	ea8b 0b03 	eor.w	fp, fp, r3
 801fc1a:	9a01      	ldr	r2, [sp, #4]
 801fc1c:	4493      	add	fp, r2
 801fc1e:	44e3      	add	fp, ip
 801fc20:	f8df c228 	ldr.w	ip, [pc, #552]	@ 801fe4c <mg_md5_transform+0x3f4>
 801fc24:	44dc      	add	ip, fp
 801fc26:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 801fc2a:	ea8e 0b0c 	eor.w	fp, lr, ip
 801fc2e:	ea0b 0b03 	and.w	fp, fp, r3
 801fc32:	ea8b 0b0e 	eor.w	fp, fp, lr
 801fc36:	9a04      	ldr	r2, [sp, #16]
 801fc38:	4493      	add	fp, r2
 801fc3a:	44ab      	add	fp, r5
 801fc3c:	4d7a      	ldr	r5, [pc, #488]	@ (801fe28 <mg_md5_transform+0x3d0>)
 801fc3e:	445d      	add	r5, fp
 801fc40:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 801fc44:	ea8c 0b05 	eor.w	fp, ip, r5
 801fc48:	ea0b 0b0e 	and.w	fp, fp, lr
 801fc4c:	ea8b 0b0c 	eor.w	fp, fp, ip
 801fc50:	9908      	ldr	r1, [sp, #32]
 801fc52:	448b      	add	fp, r1
 801fc54:	445b      	add	r3, fp
 801fc56:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 801fe50 <mg_md5_transform+0x3f8>
 801fc5a:	449b      	add	fp, r3
 801fc5c:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 801fc60:	ea85 030b 	eor.w	r3, r5, fp
 801fc64:	ea03 030c 	and.w	r3, r3, ip
 801fc68:	406b      	eors	r3, r5
 801fc6a:	4453      	add	r3, sl
 801fc6c:	4473      	add	r3, lr
 801fc6e:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 801fe54 <mg_md5_transform+0x3fc>
 801fc72:	449e      	add	lr, r3
 801fc74:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 801fc78:	ea8b 030e 	eor.w	r3, fp, lr
 801fc7c:	402b      	ands	r3, r5
 801fc7e:	ea83 030b 	eor.w	r3, r3, fp
 801fc82:	9a03      	ldr	r2, [sp, #12]
 801fc84:	4413      	add	r3, r2
 801fc86:	449c      	add	ip, r3
 801fc88:	4b68      	ldr	r3, [pc, #416]	@ (801fe2c <mg_md5_transform+0x3d4>)
 801fc8a:	4463      	add	r3, ip
 801fc8c:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 801fc90:	ea8e 0c03 	eor.w	ip, lr, r3
 801fc94:	ea0c 0c0b 	and.w	ip, ip, fp
 801fc98:	ea8c 0c0e 	eor.w	ip, ip, lr
 801fc9c:	9a07      	ldr	r2, [sp, #28]
 801fc9e:	4494      	add	ip, r2
 801fca0:	4465      	add	r5, ip
 801fca2:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 801fe58 <mg_md5_transform+0x400>
 801fca6:	44ac      	add	ip, r5
 801fca8:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 801fcac:	ea83 050c 	eor.w	r5, r3, ip
 801fcb0:	ea05 050e 	and.w	r5, r5, lr
 801fcb4:	405d      	eors	r5, r3
 801fcb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fcb8:	440d      	add	r5, r1
 801fcba:	445d      	add	r5, fp
 801fcbc:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 801fe5c <mg_md5_transform+0x404>
 801fcc0:	44ab      	add	fp, r5
 801fcc2:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 801fcc6:	ea8c 050b 	eor.w	r5, ip, fp
 801fcca:	401d      	ands	r5, r3
 801fccc:	ea85 050c 	eor.w	r5, r5, ip
 801fcd0:	9a02      	ldr	r2, [sp, #8]
 801fcd2:	4415      	add	r5, r2
 801fcd4:	44ae      	add	lr, r5
 801fcd6:	4d56      	ldr	r5, [pc, #344]	@ (801fe30 <mg_md5_transform+0x3d8>)
 801fcd8:	4475      	add	r5, lr
 801fcda:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 801fcde:	ea8b 0e05 	eor.w	lr, fp, r5
 801fce2:	ea0e 0e0c 	and.w	lr, lr, ip
 801fce6:	ea8e 0e0b 	eor.w	lr, lr, fp
 801fcea:	9906      	ldr	r1, [sp, #24]
 801fcec:	448e      	add	lr, r1
 801fcee:	4473      	add	r3, lr
 801fcf0:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 801fe60 <mg_md5_transform+0x408>
 801fcf4:	449e      	add	lr, r3
 801fcf6:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 801fcfa:	ea85 030e 	eor.w	r3, r5, lr
 801fcfe:	ea03 030b 	and.w	r3, r3, fp
 801fd02:	406b      	eors	r3, r5
 801fd04:	4443      	add	r3, r8
 801fd06:	4463      	add	r3, ip
 801fd08:	f8df c158 	ldr.w	ip, [pc, #344]	@ 801fe64 <mg_md5_transform+0x40c>
 801fd0c:	449c      	add	ip, r3
 801fd0e:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 801fd12:	ea8e 030c 	eor.w	r3, lr, ip
 801fd16:	402b      	ands	r3, r5
 801fd18:	ea83 030e 	eor.w	r3, r3, lr
 801fd1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fd1e:	4413      	add	r3, r2
 801fd20:	449b      	add	fp, r3
 801fd22:	4b44      	ldr	r3, [pc, #272]	@ (801fe34 <mg_md5_transform+0x3dc>)
 801fd24:	445b      	add	r3, fp
 801fd26:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 801fd2a:	ea8c 0b03 	eor.w	fp, ip, r3
 801fd2e:	ea0b 0b0e 	and.w	fp, fp, lr
 801fd32:	ea8b 0b0c 	eor.w	fp, fp, ip
 801fd36:	9905      	ldr	r1, [sp, #20]
 801fd38:	448b      	add	fp, r1
 801fd3a:	445d      	add	r5, fp
 801fd3c:	f8df b128 	ldr.w	fp, [pc, #296]	@ 801fe68 <mg_md5_transform+0x410>
 801fd40:	44ab      	add	fp, r5
 801fd42:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 801fd46:	ea83 050b 	eor.w	r5, r3, fp
 801fd4a:	ea05 050c 	and.w	r5, r5, ip
 801fd4e:	405d      	eors	r5, r3
 801fd50:	4435      	add	r5, r6
 801fd52:	4475      	add	r5, lr
 801fd54:	f8df e114 	ldr.w	lr, [pc, #276]	@ 801fe6c <mg_md5_transform+0x414>
 801fd58:	44ae      	add	lr, r5
 801fd5a:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 801fd5e:	ea8b 050e 	eor.w	r5, fp, lr
 801fd62:	401d      	ands	r5, r3
 801fd64:	ea85 050b 	eor.w	r5, r5, fp
 801fd68:	4425      	add	r5, r4
 801fd6a:	44ac      	add	ip, r5
 801fd6c:	4d32      	ldr	r5, [pc, #200]	@ (801fe38 <mg_md5_transform+0x3e0>)
 801fd6e:	4465      	add	r5, ip
 801fd70:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 801fd74:	ea8e 0c05 	eor.w	ip, lr, r5
 801fd78:	ea0c 0c0b 	and.w	ip, ip, fp
 801fd7c:	ea8c 0c0e 	eor.w	ip, ip, lr
 801fd80:	44cc      	add	ip, r9
 801fd82:	4463      	add	r3, ip
 801fd84:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 801fe70 <mg_md5_transform+0x418>
 801fd88:	449c      	add	ip, r3
 801fd8a:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 801fd8e:	ea85 030c 	eor.w	r3, r5, ip
 801fd92:	ea03 030e 	and.w	r3, r3, lr
 801fd96:	406b      	eors	r3, r5
 801fd98:	443b      	add	r3, r7
 801fd9a:	445b      	add	r3, fp
 801fd9c:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 801fe74 <mg_md5_transform+0x41c>
 801fda0:	449b      	add	fp, r3
 801fda2:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 801fda6:	ea8c 030b 	eor.w	r3, ip, fp
 801fdaa:	406b      	eors	r3, r5
 801fdac:	9a03      	ldr	r2, [sp, #12]
 801fdae:	4413      	add	r3, r2
 801fdb0:	4473      	add	r3, lr
 801fdb2:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 801fdb6:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 801fdba:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 801fdbe:	ea8b 0e03 	eor.w	lr, fp, r3
 801fdc2:	ea8e 0e0c 	eor.w	lr, lr, ip
 801fdc6:	448e      	add	lr, r1
 801fdc8:	44ae      	add	lr, r5
 801fdca:	4d1c      	ldr	r5, [pc, #112]	@ (801fe3c <mg_md5_transform+0x3e4>)
 801fdcc:	4475      	add	r5, lr
 801fdce:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 801fdd2:	ea83 0e05 	eor.w	lr, r3, r5
 801fdd6:	ea8e 0e0b 	eor.w	lr, lr, fp
 801fdda:	9908      	ldr	r1, [sp, #32]
 801fddc:	448e      	add	lr, r1
 801fdde:	44f4      	add	ip, lr
 801fde0:	f8df e094 	ldr.w	lr, [pc, #148]	@ 801fe78 <mg_md5_transform+0x420>
 801fde4:	44e6      	add	lr, ip
 801fde6:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 801fdea:	ea85 0c0e 	eor.w	ip, r5, lr
 801fdee:	ea8c 0c03 	eor.w	ip, ip, r3
 801fdf2:	44c4      	add	ip, r8
 801fdf4:	44e3      	add	fp, ip
 801fdf6:	e041      	b.n	801fe7c <mg_md5_transform+0x424>
 801fdf8:	d76aa478 	.word	0xd76aa478
 801fdfc:	e8c7b756 	.word	0xe8c7b756
 801fe00:	242070db 	.word	0x242070db
 801fe04:	c1bdceee 	.word	0xc1bdceee
 801fe08:	f57c0faf 	.word	0xf57c0faf
 801fe0c:	4787c62a 	.word	0x4787c62a
 801fe10:	a8304613 	.word	0xa8304613
 801fe14:	fd469501 	.word	0xfd469501
 801fe18:	698098d8 	.word	0x698098d8
 801fe1c:	8b44f7af 	.word	0x8b44f7af
 801fe20:	fd987193 	.word	0xfd987193
 801fe24:	a679438e 	.word	0xa679438e
 801fe28:	c040b340 	.word	0xc040b340
 801fe2c:	d62f105d 	.word	0xd62f105d
 801fe30:	e7d3fbc8 	.word	0xe7d3fbc8
 801fe34:	f4d50d87 	.word	0xf4d50d87
 801fe38:	fcefa3f8 	.word	0xfcefa3f8
 801fe3c:	8771f681 	.word	0x8771f681
 801fe40:	895cd7be 	.word	0x895cd7be
 801fe44:	6b901122 	.word	0x6b901122
 801fe48:	49b40821 	.word	0x49b40821
 801fe4c:	f61e2562 	.word	0xf61e2562
 801fe50:	265e5a51 	.word	0x265e5a51
 801fe54:	e9b6c7aa 	.word	0xe9b6c7aa
 801fe58:	02441453 	.word	0x02441453
 801fe5c:	d8a1e681 	.word	0xd8a1e681
 801fe60:	21e1cde6 	.word	0x21e1cde6
 801fe64:	c33707d6 	.word	0xc33707d6
 801fe68:	455a14ed 	.word	0x455a14ed
 801fe6c:	a9e3e905 	.word	0xa9e3e905
 801fe70:	676f02d9 	.word	0x676f02d9
 801fe74:	8d2a4c8a 	.word	0x8d2a4c8a
 801fe78:	6d9d6122 	.word	0x6d9d6122
 801fe7c:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8020144 <mg_md5_transform+0x6ec>
 801fe80:	44dc      	add	ip, fp
 801fe82:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 801fe86:	ea8e 0b0c 	eor.w	fp, lr, ip
 801fe8a:	ea8b 0b05 	eor.w	fp, fp, r5
 801fe8e:	9a01      	ldr	r2, [sp, #4]
 801fe90:	4493      	add	fp, r2
 801fe92:	449b      	add	fp, r3
 801fe94:	4b99      	ldr	r3, [pc, #612]	@ (80200fc <mg_md5_transform+0x6a4>)
 801fe96:	445b      	add	r3, fp
 801fe98:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 801fe9c:	ea8c 0b03 	eor.w	fp, ip, r3
 801fea0:	ea8b 0b0e 	eor.w	fp, fp, lr
 801fea4:	9a02      	ldr	r2, [sp, #8]
 801fea6:	4493      	add	fp, r2
 801fea8:	445d      	add	r5, fp
 801feaa:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 8020148 <mg_md5_transform+0x6f0>
 801feae:	44ab      	add	fp, r5
 801feb0:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 801feb4:	ea83 050b 	eor.w	r5, r3, fp
 801feb8:	ea85 050c 	eor.w	r5, r5, ip
 801febc:	444d      	add	r5, r9
 801febe:	44ae      	add	lr, r5
 801fec0:	4d8f      	ldr	r5, [pc, #572]	@ (8020100 <mg_md5_transform+0x6a8>)
 801fec2:	4475      	add	r5, lr
 801fec4:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 801fec8:	ea8b 0e05 	eor.w	lr, fp, r5
 801fecc:	ea8e 0e03 	eor.w	lr, lr, r3
 801fed0:	9a07      	ldr	r2, [sp, #28]
 801fed2:	4496      	add	lr, r2
 801fed4:	44e6      	add	lr, ip
 801fed6:	f8df c274 	ldr.w	ip, [pc, #628]	@ 802014c <mg_md5_transform+0x6f4>
 801feda:	44f4      	add	ip, lr
 801fedc:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 801fee0:	ea85 0e0c 	eor.w	lr, r5, ip
 801fee4:	ea8e 0e0b 	eor.w	lr, lr, fp
 801fee8:	44b6      	add	lr, r6
 801feea:	4473      	add	r3, lr
 801feec:	f8df e260 	ldr.w	lr, [pc, #608]	@ 8020150 <mg_md5_transform+0x6f8>
 801fef0:	449e      	add	lr, r3
 801fef2:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 801fef6:	ea8c 030e 	eor.w	r3, ip, lr
 801fefa:	406b      	eors	r3, r5
 801fefc:	4453      	add	r3, sl
 801fefe:	449b      	add	fp, r3
 801ff00:	4b80      	ldr	r3, [pc, #512]	@ (8020104 <mg_md5_transform+0x6ac>)
 801ff02:	445b      	add	r3, fp
 801ff04:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 801ff08:	ea8e 0b03 	eor.w	fp, lr, r3
 801ff0c:	ea8b 0b0c 	eor.w	fp, fp, ip
 801ff10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ff12:	4493      	add	fp, r2
 801ff14:	445d      	add	r5, fp
 801ff16:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 8020154 <mg_md5_transform+0x6fc>
 801ff1a:	44ab      	add	fp, r5
 801ff1c:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 801ff20:	ea83 050b 	eor.w	r5, r3, fp
 801ff24:	ea85 050e 	eor.w	r5, r5, lr
 801ff28:	9904      	ldr	r1, [sp, #16]
 801ff2a:	440d      	add	r5, r1
 801ff2c:	4465      	add	r5, ip
 801ff2e:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8020158 <mg_md5_transform+0x700>
 801ff32:	44ac      	add	ip, r5
 801ff34:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 801ff38:	ea8b 050c 	eor.w	r5, fp, ip
 801ff3c:	405d      	eors	r5, r3
 801ff3e:	9906      	ldr	r1, [sp, #24]
 801ff40:	440d      	add	r5, r1
 801ff42:	44ae      	add	lr, r5
 801ff44:	4d70      	ldr	r5, [pc, #448]	@ (8020108 <mg_md5_transform+0x6b0>)
 801ff46:	4475      	add	r5, lr
 801ff48:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 801ff4c:	ea8c 0e05 	eor.w	lr, ip, r5
 801ff50:	ea8e 0e0b 	eor.w	lr, lr, fp
 801ff54:	44be      	add	lr, r7
 801ff56:	4473      	add	r3, lr
 801ff58:	f8df e200 	ldr.w	lr, [pc, #512]	@ 802015c <mg_md5_transform+0x704>
 801ff5c:	449e      	add	lr, r3
 801ff5e:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 801ff62:	ea85 030e 	eor.w	r3, r5, lr
 801ff66:	ea83 030c 	eor.w	r3, r3, ip
 801ff6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ff6c:	440b      	add	r3, r1
 801ff6e:	445b      	add	r3, fp
 801ff70:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 8020160 <mg_md5_transform+0x708>
 801ff74:	449b      	add	fp, r3
 801ff76:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 801ff7a:	ea8e 030b 	eor.w	r3, lr, fp
 801ff7e:	406b      	eors	r3, r5
 801ff80:	940a      	str	r4, [sp, #40]	@ 0x28
 801ff82:	4423      	add	r3, r4
 801ff84:	449c      	add	ip, r3
 801ff86:	4b61      	ldr	r3, [pc, #388]	@ (802010c <mg_md5_transform+0x6b4>)
 801ff88:	4463      	add	r3, ip
 801ff8a:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 801ff8e:	ea63 0c0e 	orn	ip, r3, lr
 801ff92:	ea8c 0c0b 	eor.w	ip, ip, fp
 801ff96:	44e2      	add	sl, ip
 801ff98:	44aa      	add	sl, r5
 801ff9a:	4d5d      	ldr	r5, [pc, #372]	@ (8020110 <mg_md5_transform+0x6b8>)
 801ff9c:	4455      	add	r5, sl
 801ff9e:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 801ffa2:	ea65 0c0b 	orn	ip, r5, fp
 801ffa6:	ea8c 0c03 	eor.w	ip, ip, r3
 801ffaa:	44e1      	add	r9, ip
 801ffac:	44f1      	add	r9, lr
 801ffae:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8020164 <mg_md5_transform+0x70c>
 801ffb2:	44cc      	add	ip, r9
 801ffb4:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 801ffb8:	ea6c 0e03 	orn	lr, ip, r3
 801ffbc:	ea8e 0e05 	eor.w	lr, lr, r5
 801ffc0:	44f0      	add	r8, lr
 801ffc2:	44d8      	add	r8, fp
 801ffc4:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 8020168 <mg_md5_transform+0x710>
 801ffc8:	44c6      	add	lr, r8
 801ffca:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 801ffce:	ea6e 0805 	orn	r8, lr, r5
 801ffd2:	ea88 080c 	eor.w	r8, r8, ip
 801ffd6:	9c03      	ldr	r4, [sp, #12]
 801ffd8:	44a0      	add	r8, r4
 801ffda:	4498      	add	r8, r3
 801ffdc:	4b4d      	ldr	r3, [pc, #308]	@ (8020114 <mg_md5_transform+0x6bc>)
 801ffde:	4443      	add	r3, r8
 801ffe0:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 801ffe4:	ea63 080c 	orn	r8, r3, ip
 801ffe8:	ea88 080e 	eor.w	r8, r8, lr
 801ffec:	4447      	add	r7, r8
 801ffee:	442f      	add	r7, r5
 801fff0:	4d49      	ldr	r5, [pc, #292]	@ (8020118 <mg_md5_transform+0x6c0>)
 801fff2:	443d      	add	r5, r7
 801fff4:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 801fff8:	ea65 070e 	orn	r7, r5, lr
 801fffc:	405f      	eors	r7, r3
 801fffe:	4417      	add	r7, r2
 8020000:	44bc      	add	ip, r7
 8020002:	4f46      	ldr	r7, [pc, #280]	@ (802011c <mg_md5_transform+0x6c4>)
 8020004:	4467      	add	r7, ip
 8020006:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 802000a:	ea67 0c03 	orn	ip, r7, r3
 802000e:	ea8c 0c05 	eor.w	ip, ip, r5
 8020012:	9a07      	ldr	r2, [sp, #28]
 8020014:	4462      	add	r2, ip
 8020016:	4472      	add	r2, lr
 8020018:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 802001c:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 8020020:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 8020024:	ea62 0c05 	orn	ip, r2, r5
 8020028:	ea8c 0c07 	eor.w	ip, ip, r7
 802002c:	9c01      	ldr	r4, [sp, #4]
 802002e:	44a4      	add	ip, r4
 8020030:	449c      	add	ip, r3
 8020032:	4b3b      	ldr	r3, [pc, #236]	@ (8020120 <mg_md5_transform+0x6c8>)
 8020034:	4463      	add	r3, ip
 8020036:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 802003a:	ea63 0c07 	orn	ip, r3, r7
 802003e:	ea8c 0c02 	eor.w	ip, ip, r2
 8020042:	9905      	ldr	r1, [sp, #20]
 8020044:	448c      	add	ip, r1
 8020046:	44ac      	add	ip, r5
 8020048:	4d36      	ldr	r5, [pc, #216]	@ (8020124 <mg_md5_transform+0x6cc>)
 802004a:	4465      	add	r5, ip
 802004c:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 8020050:	ea65 0c02 	orn	ip, r5, r2
 8020054:	ea8c 0c03 	eor.w	ip, ip, r3
 8020058:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802005a:	4461      	add	r1, ip
 802005c:	440f      	add	r7, r1
 802005e:	4932      	ldr	r1, [pc, #200]	@ (8020128 <mg_md5_transform+0x6d0>)
 8020060:	4439      	add	r1, r7
 8020062:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 8020066:	ea61 0703 	orn	r7, r1, r3
 802006a:	406f      	eors	r7, r5
 802006c:	9c04      	ldr	r4, [sp, #16]
 802006e:	4427      	add	r7, r4
 8020070:	4417      	add	r7, r2
 8020072:	4a2e      	ldr	r2, [pc, #184]	@ (802012c <mg_md5_transform+0x6d4>)
 8020074:	443a      	add	r2, r7
 8020076:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 802007a:	ea62 0705 	orn	r7, r2, r5
 802007e:	404f      	eors	r7, r1
 8020080:	443e      	add	r6, r7
 8020082:	4433      	add	r3, r6
 8020084:	4e2a      	ldr	r6, [pc, #168]	@ (8020130 <mg_md5_transform+0x6d8>)
 8020086:	441e      	add	r6, r3
 8020088:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 802008c:	ea66 0301 	orn	r3, r6, r1
 8020090:	4053      	eors	r3, r2
 8020092:	9f02      	ldr	r7, [sp, #8]
 8020094:	443b      	add	r3, r7
 8020096:	441d      	add	r5, r3
 8020098:	4b26      	ldr	r3, [pc, #152]	@ (8020134 <mg_md5_transform+0x6dc>)
 802009a:	442b      	add	r3, r5
 802009c:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 80200a0:	ea63 0502 	orn	r5, r3, r2
 80200a4:	4075      	eors	r5, r6
 80200a6:	9f08      	ldr	r7, [sp, #32]
 80200a8:	443d      	add	r5, r7
 80200aa:	440d      	add	r5, r1
 80200ac:	4922      	ldr	r1, [pc, #136]	@ (8020138 <mg_md5_transform+0x6e0>)
 80200ae:	4429      	add	r1, r5
 80200b0:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 80200b4:	ea61 0506 	orn	r5, r1, r6
 80200b8:	405d      	eors	r5, r3
 80200ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80200bc:	4425      	add	r5, r4
 80200be:	442a      	add	r2, r5
 80200c0:	4d1e      	ldr	r5, [pc, #120]	@ (802013c <mg_md5_transform+0x6e4>)
 80200c2:	4415      	add	r5, r2
 80200c4:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 80200c8:	ea65 0203 	orn	r2, r5, r3
 80200cc:	404a      	eors	r2, r1
 80200ce:	9c06      	ldr	r4, [sp, #24]
 80200d0:	4422      	add	r2, r4
 80200d2:	4432      	add	r2, r6
 80200d4:	4e1a      	ldr	r6, [pc, #104]	@ (8020140 <mg_md5_transform+0x6e8>)
 80200d6:	4416      	add	r6, r2
 80200d8:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 80200dc:	6802      	ldr	r2, [r0, #0]
 80200de:	4413      	add	r3, r2
 80200e0:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 80200e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80200e4:	4434      	add	r4, r6
 80200e6:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 80200e8:	6883      	ldr	r3, [r0, #8]
 80200ea:	441d      	add	r5, r3
 80200ec:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 80200ee:	68c3      	ldr	r3, [r0, #12]
 80200f0:	4419      	add	r1, r3
 80200f2:	60c1      	str	r1, [r0, #12]
}
 80200f4:	b00d      	add	sp, #52	@ 0x34
 80200f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200fa:	bf00      	nop
 80200fc:	a4beea44 	.word	0xa4beea44
 8020100:	f6bb4b60 	.word	0xf6bb4b60
 8020104:	eaa127fa 	.word	0xeaa127fa
 8020108:	d9d4d039 	.word	0xd9d4d039
 802010c:	c4ac5665 	.word	0xc4ac5665
 8020110:	f4292244 	.word	0xf4292244
 8020114:	fc93a039 	.word	0xfc93a039
 8020118:	655b59c3 	.word	0x655b59c3
 802011c:	8f0ccc92 	.word	0x8f0ccc92
 8020120:	85845dd1 	.word	0x85845dd1
 8020124:	6fa87e4f 	.word	0x6fa87e4f
 8020128:	fe2ce6e0 	.word	0xfe2ce6e0
 802012c:	a3014314 	.word	0xa3014314
 8020130:	4e0811a1 	.word	0x4e0811a1
 8020134:	f7537e82 	.word	0xf7537e82
 8020138:	bd3af235 	.word	0xbd3af235
 802013c:	2ad7d2bb 	.word	0x2ad7d2bb
 8020140:	eb86d391 	.word	0xeb86d391
 8020144:	fde5380c 	.word	0xfde5380c
 8020148:	4bdecfa9 	.word	0x4bdecfa9
 802014c:	bebfbc70 	.word	0xbebfbc70
 8020150:	289b7ec6 	.word	0x289b7ec6
 8020154:	d4ef3085 	.word	0xd4ef3085
 8020158:	04881d05 	.word	0x04881d05
 802015c:	e6db99e5 	.word	0xe6db99e5
 8020160:	1fa27cf8 	.word	0x1fa27cf8
 8020164:	432aff97 	.word	0x432aff97
 8020168:	ab9423a7 	.word	0xab9423a7

0802016c <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 802016c:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 802016e:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 8020170:	3001      	adds	r0, #1
 8020172:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 8020174:	2a7f      	cmp	r2, #127	@ 0x7f
 8020176:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 802017a:	d8f9      	bhi.n	8020170 <varint_size+0x4>
  return bytes_needed;
}
 802017c:	4770      	bx	lr

0802017e <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 802017e:	b500      	push	{lr}
 8020180:	4686      	mov	lr, r0
  size_t len = 0;
 8020182:	2300      	movs	r3, #0
 8020184:	e007      	b.n	8020196 <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 8020186:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 802018a:	1c58      	adds	r0, r3, #1
 802018c:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 8020190:	2a7f      	cmp	r2, #127	@ 0x7f
 8020192:	d907      	bls.n	80201a4 <encode_varint+0x26>
    buf[len++] = b;
 8020194:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 8020196:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 802019a:	460a      	mov	r2, r1
 802019c:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 802019e:	2a7f      	cmp	r2, #127	@ 0x7f
 80201a0:	d9f3      	bls.n	802018a <encode_varint+0xc>
 80201a2:	e7f0      	b.n	8020186 <encode_varint+0x8>

  return len;
}
 80201a4:	f85d fb04 	ldr.w	pc, [sp], #4

080201a8 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 80201a8:	2300      	movs	r3, #0
 80201aa:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 80201ac:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 80201b0:	2b03      	cmp	r3, #3
 80201b2:	d81d      	bhi.n	80201f0 <decode_varint+0x48>
 80201b4:	428b      	cmp	r3, r1
 80201b6:	d219      	bcs.n	80201ec <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 80201b8:	b530      	push	{r4, r5, lr}
 80201ba:	e003      	b.n	80201c4 <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 80201bc:	1c58      	adds	r0, r3, #1
 80201be:	e012      	b.n	80201e6 <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 80201c0:	428b      	cmp	r3, r1
 80201c2:	d211      	bcs.n	80201e8 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 80201c4:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 80201c8:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 80201cc:	6815      	ldr	r5, [r2, #0]
 80201ce:	fb0c 5404 	mla	r4, ip, r4, r5
 80201d2:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 80201d4:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 80201d8:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 80201dc:	d0ee      	beq.n	80201bc <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 80201de:	3301      	adds	r3, #1
 80201e0:	2b03      	cmp	r3, #3
 80201e2:	d9ed      	bls.n	80201c0 <decode_varint+0x18>
  }

  return 0;
 80201e4:	2000      	movs	r0, #0
}
 80201e6:	bd30      	pop	{r4, r5, pc}
  return 0;
 80201e8:	2000      	movs	r0, #0
 80201ea:	e7fc      	b.n	80201e6 <decode_varint+0x3e>
 80201ec:	2000      	movs	r0, #0
 80201ee:	4770      	bx	lr
 80201f0:	2000      	movs	r0, #0
}
 80201f2:	4770      	bx	lr

080201f4 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 80201f4:	2300      	movs	r3, #0
 80201f6:	2b1a      	cmp	r3, #26
 80201f8:	d80b      	bhi.n	8020212 <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 80201fa:	4a07      	ldr	r2, [pc, #28]	@ (8020218 <mqtt_prop_type_by_id+0x24>)
 80201fc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8020200:	4282      	cmp	r2, r0
 8020202:	d001      	beq.n	8020208 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 8020204:	3301      	adds	r3, #1
 8020206:	e7f6      	b.n	80201f6 <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8020208:	4a03      	ldr	r2, [pc, #12]	@ (8020218 <mqtt_prop_type_by_id+0x24>)
 802020a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802020e:	7858      	ldrb	r0, [r3, #1]
 8020210:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 8020212:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8020216:	4770      	bx	lr
 8020218:	0803a1d4 	.word	0x0803a1d4

0802021c <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 802021c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020220:	4606      	mov	r6, r0
 8020222:	4688      	mov	r8, r1
  size_t i, size = 0;
 8020224:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 8020226:	462c      	mov	r4, r5
 8020228:	e005      	b.n	8020236 <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 802022a:	697d      	ldr	r5, [r7, #20]
 802022c:	68fb      	ldr	r3, [r7, #12]
 802022e:	441d      	add	r5, r3
 8020230:	444d      	add	r5, r9
 8020232:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 8020234:	3401      	adds	r4, #1
 8020236:	4544      	cmp	r4, r8
 8020238:	d231      	bcs.n	802029e <get_properties_length+0x82>
    size++;  // identifier
 802023a:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802023e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8020242:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 8020246:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 802024a:	f7ff ffd3 	bl	80201f4 <mqtt_prop_type_by_id>
 802024e:	2806      	cmp	r0, #6
 8020250:	d824      	bhi.n	802029c <get_properties_length+0x80>
 8020252:	a301      	add	r3, pc, #4	@ (adr r3, 8020258 <get_properties_length+0x3c>)
 8020254:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8020258:	08020299 	.word	0x08020299
 802025c:	08020275 	.word	0x08020275
 8020260:	0802022b 	.word	0x0802022b
 8020264:	0802027d 	.word	0x0802027d
 8020268:	08020285 	.word	0x08020285
 802026c:	08020291 	.word	0x08020291
 8020270:	08020295 	.word	0x08020295
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8020274:	697d      	ldr	r5, [r7, #20]
 8020276:	444d      	add	r5, r9
 8020278:	3502      	adds	r5, #2
        break;
 802027a:	e7db      	b.n	8020234 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802027c:	697d      	ldr	r5, [r7, #20]
 802027e:	444d      	add	r5, r9
 8020280:	3502      	adds	r5, #2
        break;
 8020282:	e7d7      	b.n	8020234 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8020284:	6878      	ldr	r0, [r7, #4]
 8020286:	f7ff ff71 	bl	802016c <varint_size>
 802028a:	eb00 0509 	add.w	r5, r0, r9
        break;
 802028e:	e7d1      	b.n	8020234 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8020290:	3505      	adds	r5, #5
        break;
 8020292:	e7cf      	b.n	8020234 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8020294:	3503      	adds	r5, #3
        break;
 8020296:	e7cd      	b.n	8020234 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 8020298:	3502      	adds	r5, #2
        break;
 802029a:	e7cb      	b.n	8020234 <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802029c:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 802029e:	4628      	mov	r0, r5
 80202a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080202a4 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 80202a4:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 80202a6:	f7ff ffb9 	bl	802021c <get_properties_length>
 80202aa:	4604      	mov	r4, r0
  size += varint_size(size);
 80202ac:	f7ff ff5e 	bl	802016c <varint_size>
  return size;
}
 80202b0:	4420      	add	r0, r4
 80202b2:	bd10      	pop	{r4, pc}

080202b4 <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 80202b4:	b410      	push	{r4}
 80202b6:	b085      	sub	sp, #20
 80202b8:	466b      	mov	r3, sp
 80202ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 80202be:	2300      	movs	r3, #0
 80202c0:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 80202c2:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 80202c4:	9901      	ldr	r1, [sp, #4]
 80202c6:	4299      	cmp	r1, r3
 80202c8:	d92c      	bls.n	8020324 <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 80202ca:	9c00      	ldr	r4, [sp, #0]
 80202cc:	5ce1      	ldrb	r1, [r4, r3]
 80202ce:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 80202d2:	b2c0      	uxtb	r0, r0
 80202d4:	2809      	cmp	r0, #9
 80202d6:	d812      	bhi.n	80202fe <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 80202d8:	f10c 0010 	add.w	r0, ip, #16
 80202dc:	4468      	add	r0, sp
 80202de:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 80202e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80202e6:	3930      	subs	r1, #48	@ 0x30
 80202e8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 80202ec:	29ff      	cmp	r1, #255	@ 0xff
 80202ee:	dc28      	bgt.n	8020342 <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 80202f0:	f10c 0010 	add.w	r0, ip, #16
 80202f4:	4468      	add	r0, sp
 80202f6:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 80202fa:	3301      	adds	r3, #1
 80202fc:	e7e2      	b.n	80202c4 <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 80202fe:	292e      	cmp	r1, #46	@ 0x2e
 8020300:	d121      	bne.n	8020346 <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8020302:	f1bc 0f02 	cmp.w	ip, #2
 8020306:	d820      	bhi.n	802034a <mg_aton4+0x96>
 8020308:	b923      	cbnz	r3, 8020314 <mg_aton4+0x60>
 802030a:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 802030c:	b005      	add	sp, #20
 802030e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020312:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8020314:	441c      	add	r4, r3
 8020316:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802031a:	292e      	cmp	r1, #46	@ 0x2e
 802031c:	d017      	beq.n	802034e <mg_aton4+0x9a>
      num_dots++;
 802031e:	f10c 0c01 	add.w	ip, ip, #1
 8020322:	e7ea      	b.n	80202fa <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8020324:	f1bc 0f03 	cmp.w	ip, #3
 8020328:	d113      	bne.n	8020352 <mg_aton4+0x9e>
 802032a:	9900      	ldr	r1, [sp, #0]
 802032c:	4419      	add	r1, r3
 802032e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8020332:	2b2e      	cmp	r3, #46	@ 0x2e
 8020334:	d00f      	beq.n	8020356 <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 8020336:	9b03      	ldr	r3, [sp, #12]
 8020338:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 802033a:	2300      	movs	r3, #0
 802033c:	74d3      	strb	r3, [r2, #19]
  return true;
 802033e:	2001      	movs	r0, #1
 8020340:	e7e4      	b.n	802030c <mg_aton4+0x58>
      if (octet > 255) return false;
 8020342:	2000      	movs	r0, #0
 8020344:	e7e2      	b.n	802030c <mg_aton4+0x58>
      return false;
 8020346:	2000      	movs	r0, #0
 8020348:	e7e0      	b.n	802030c <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 802034a:	2000      	movs	r0, #0
 802034c:	e7de      	b.n	802030c <mg_aton4+0x58>
 802034e:	2000      	movs	r0, #0
 8020350:	e7dc      	b.n	802030c <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8020352:	2000      	movs	r0, #0
 8020354:	e7da      	b.n	802030c <mg_aton4+0x58>
 8020356:	2000      	movs	r0, #0
 8020358:	e7d8      	b.n	802030c <mg_aton4+0x58>

0802035a <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 802035a:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 802035c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 802035e:	b103      	cbz	r3, 8020362 <mg_tcpip_call+0x8>
 8020360:	4798      	blx	r3
}
 8020362:	bd08      	pop	{r3, pc}

08020364 <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8020364:	2300      	movs	r3, #0
 8020366:	e005      	b.n	8020374 <csumup+0x10>
 8020368:	f811 c003 	ldrb.w	ip, [r1, r3]
 802036c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8020370:	4460      	add	r0, ip
 8020372:	3301      	adds	r3, #1
 8020374:	4293      	cmp	r3, r2
 8020376:	d205      	bcs.n	8020384 <csumup+0x20>
 8020378:	f013 0f01 	tst.w	r3, #1
 802037c:	d0f4      	beq.n	8020368 <csumup+0x4>
 802037e:	f811 c003 	ldrb.w	ip, [r1, r3]
 8020382:	e7f5      	b.n	8020370 <csumup+0xc>
  return sum;
}
 8020384:	4770      	bx	lr

08020386 <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8020386:	b538      	push	{r3, r4, r5, lr}
 8020388:	4604      	mov	r4, r0
 802038a:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 802038c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 802038e:	685b      	ldr	r3, [r3, #4]
 8020390:	4602      	mov	r2, r0
 8020392:	6940      	ldr	r0, [r0, #20]
 8020394:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 8020396:	4285      	cmp	r5, r0
 8020398:	d000      	beq.n	802039c <ether_output+0x16>
  return n;
}
 802039a:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 802039c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 802039e:	3301      	adds	r3, #1
 80203a0:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 80203a2:	e7fa      	b.n	802039a <ether_output+0x14>

080203a4 <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80203a4:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80203a8:	f013 0f28 	tst.w	r3, #40	@ 0x28
 80203ac:	d106      	bne.n	80203bc <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80203ae:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80203b0:	b132      	cbz	r2, 80203c0 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80203b2:	f013 0f90 	tst.w	r3, #144	@ 0x90
 80203b6:	d005      	beq.n	80203c4 <can_write+0x20>
 80203b8:	2000      	movs	r0, #0
 80203ba:	4770      	bx	lr
 80203bc:	2000      	movs	r0, #0
 80203be:	4770      	bx	lr
 80203c0:	2000      	movs	r0, #0
 80203c2:	4770      	bx	lr
 80203c4:	2001      	movs	r0, #1
}
 80203c6:	4770      	bx	lr

080203c8 <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 80203c8:	b410      	push	{r4}
 80203ca:	4602      	mov	r2, r0
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80203cc:	460c      	mov	r4, r1
 80203ce:	b109      	cbz	r1, 80203d4 <mg_esc+0xc>
 80203d0:	4b0b      	ldr	r3, [pc, #44]	@ (8020400 <mg_esc+0x38>)
 80203d2:	e007      	b.n	80203e4 <mg_esc+0x1c>
 80203d4:	4b0b      	ldr	r3, [pc, #44]	@ (8020404 <mg_esc+0x3c>)
 80203d6:	e005      	b.n	80203e4 <mg_esc+0x1c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80203d8:	4a0a      	ldr	r2, [pc, #40]	@ (8020404 <mg_esc+0x3c>)
 80203da:	1a9b      	subs	r3, r3, r2
 80203dc:	4a08      	ldr	r2, [pc, #32]	@ (8020400 <mg_esc+0x38>)
 80203de:	5cd0      	ldrb	r0, [r2, r3]
 80203e0:	e00a      	b.n	80203f8 <mg_esc+0x30>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80203e2:	3301      	adds	r3, #1
 80203e4:	7818      	ldrb	r0, [r3, #0]
 80203e6:	b138      	cbz	r0, 80203f8 <mg_esc+0x30>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80203e8:	4290      	cmp	r0, r2
 80203ea:	d1fa      	bne.n	80203e2 <mg_esc+0x1a>
 80203ec:	2c00      	cmp	r4, #0
 80203ee:	d0f3      	beq.n	80203d8 <mg_esc+0x10>
 80203f0:	4a03      	ldr	r2, [pc, #12]	@ (8020400 <mg_esc+0x38>)
 80203f2:	1a9b      	subs	r3, r3, r2
 80203f4:	4a03      	ldr	r2, [pc, #12]	@ (8020404 <mg_esc+0x3c>)
 80203f6:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 80203f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80203fc:	4770      	bx	lr
 80203fe:	bf00      	nop
 8020400:	08038e30 	.word	0x08038e30
 8020404:	08038e38 	.word	0x08038e38

08020408 <mg_escape>:

static char mg_escape(int c) {
 8020408:	b508      	push	{r3, lr}
  return mg_esc(c, true);
 802040a:	2101      	movs	r1, #1
 802040c:	f7ff ffdc 	bl	80203c8 <mg_esc>
}
 8020410:	bd08      	pop	{r3, pc}

08020412 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8020412:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020416:	4607      	mov	r7, r0
 8020418:	460e      	mov	r6, r1
 802041a:	4692      	mov	sl, r2
 802041c:	4699      	mov	r9, r3
  size_t i = 0, extra = 0;
 802041e:	f04f 0b00 	mov.w	fp, #0
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8020422:	465c      	mov	r4, fp
 8020424:	e003      	b.n	802042e <qcpy+0x1c>
    char c = mg_escape(buf[i]);
    if (c) {
      out('\\', ptr), out(c, ptr), extra++;
    } else {
      out(buf[i], ptr);
 8020426:	4631      	mov	r1, r6
 8020428:	4628      	mov	r0, r5
 802042a:	47b8      	blx	r7
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 802042c:	3401      	adds	r4, #1
 802042e:	454c      	cmp	r4, r9
 8020430:	d211      	bcs.n	8020456 <qcpy+0x44>
 8020432:	f81a 5004 	ldrb.w	r5, [sl, r4]
 8020436:	b175      	cbz	r5, 8020456 <qcpy+0x44>
    char c = mg_escape(buf[i]);
 8020438:	4628      	mov	r0, r5
 802043a:	f7ff ffe5 	bl	8020408 <mg_escape>
    if (c) {
 802043e:	4680      	mov	r8, r0
 8020440:	2800      	cmp	r0, #0
 8020442:	d0f0      	beq.n	8020426 <qcpy+0x14>
      out('\\', ptr), out(c, ptr), extra++;
 8020444:	4631      	mov	r1, r6
 8020446:	205c      	movs	r0, #92	@ 0x5c
 8020448:	47b8      	blx	r7
 802044a:	4631      	mov	r1, r6
 802044c:	4640      	mov	r0, r8
 802044e:	47b8      	blx	r7
 8020450:	f10b 0b01 	add.w	fp, fp, #1
 8020454:	e7ea      	b.n	802042c <qcpy+0x1a>
    }
  }
  return i + extra;
}
 8020456:	eb04 000b 	add.w	r0, r4, fp
 802045a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020460 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8020460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020464:	4607      	mov	r7, r0
 8020466:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 8020468:	6811      	ldr	r1, [r2, #0]
 802046a:	1d0b      	adds	r3, r1, #4
 802046c:	6013      	str	r3, [r2, #0]
 802046e:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8020472:	f101 0308 	add.w	r3, r1, #8
 8020476:	6013      	str	r3, [r2, #0]
 8020478:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 802047c:	2400      	movs	r4, #0
 802047e:	e00e      	b.n	802049e <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8020480:	f818 3004 	ldrb.w	r3, [r8, r4]
 8020484:	091b      	lsrs	r3, r3, #4
 8020486:	4d09      	ldr	r5, [pc, #36]	@ (80204ac <mg_print_hex+0x4c>)
 8020488:	4631      	mov	r1, r6
 802048a:	5ce8      	ldrb	r0, [r5, r3]
 802048c:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 802048e:	f818 3004 	ldrb.w	r3, [r8, r4]
 8020492:	f003 030f 	and.w	r3, r3, #15
 8020496:	4631      	mov	r1, r6
 8020498:	5ce8      	ldrb	r0, [r5, r3]
 802049a:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 802049c:	3401      	adds	r4, #1
 802049e:	454c      	cmp	r4, r9
 80204a0:	d3ee      	bcc.n	8020480 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 80204a2:	ea4f 0049 	mov.w	r0, r9, lsl #1
 80204a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80204aa:	bf00      	nop
 80204ac:	08038984 	.word	0x08038984

080204b0 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 80204b0:	4684      	mov	ip, r0
  if (MG_BIG_ENDIAN) {
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80204b2:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 80204b6:	ea4f 2332 	mov.w	r3, r2, ror #8
 80204ba:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 80204be:	ea4f 6232 	mov.w	r2, r2, ror #24
 80204c2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80204c6:	ea43 0002 	orr.w	r0, r3, r2
 80204ca:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
  }
  return block->l[i];
}
 80204ce:	4770      	bx	lr

080204d0 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 80204d0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80204d4:	b2db      	uxtb	r3, r3
 80204d6:	2b19      	cmp	r3, #25
 80204d8:	d800      	bhi.n	80204dc <mg_tolc+0xc>
 80204da:	3020      	adds	r0, #32
}
 80204dc:	4770      	bx	lr

080204de <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 80204de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204e2:	b082      	sub	sp, #8
 80204e4:	4605      	mov	r5, r0
 80204e6:	9e08      	ldr	r6, [sp, #32]
 80204e8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 80204ea:	0a10      	lsrs	r0, r2, #8
 80204ec:	f88d 0004 	strb.w	r0, [sp, #4]
 80204f0:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 80204f4:	00c9      	lsls	r1, r1, #3
 80204f6:	b249      	sxtb	r1, r1
 80204f8:	4698      	mov	r8, r3
 80204fa:	b143      	cbz	r3, 802050e <w5500_txn+0x30>
 80204fc:	2304      	movs	r3, #4
 80204fe:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8020500:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 8020504:	686b      	ldr	r3, [r5, #4]
 8020506:	6828      	ldr	r0, [r5, #0]
 8020508:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 802050a:	2400      	movs	r4, #0
 802050c:	e00a      	b.n	8020524 <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 802050e:	2300      	movs	r3, #0
 8020510:	e7f5      	b.n	80204fe <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8020512:	68eb      	ldr	r3, [r5, #12]
 8020514:	f104 0208 	add.w	r2, r4, #8
 8020518:	446a      	add	r2, sp
 802051a:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 802051e:	6828      	ldr	r0, [r5, #0]
 8020520:	4798      	blx	r3
 8020522:	3401      	adds	r4, #1
 8020524:	2c02      	cmp	r4, #2
 8020526:	d9f4      	bls.n	8020512 <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 8020528:	2400      	movs	r4, #0
 802052a:	e000      	b.n	802052e <w5500_txn+0x50>
 802052c:	3401      	adds	r4, #1
 802052e:	42bc      	cmp	r4, r7
 8020530:	d208      	bcs.n	8020544 <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 8020532:	68eb      	ldr	r3, [r5, #12]
 8020534:	5d31      	ldrb	r1, [r6, r4]
 8020536:	6828      	ldr	r0, [r5, #0]
 8020538:	4798      	blx	r3
    if (!wr) p[i] = r;
 802053a:	f1b8 0f00 	cmp.w	r8, #0
 802053e:	d1f5      	bne.n	802052c <w5500_txn+0x4e>
 8020540:	5530      	strb	r0, [r6, r4]
 8020542:	e7f3      	b.n	802052c <w5500_txn+0x4e>
  }
  s->end(s->spi);
 8020544:	68ab      	ldr	r3, [r5, #8]
 8020546:	6828      	ldr	r0, [r5, #0]
 8020548:	4798      	blx	r3
}
 802054a:	b002      	add	sp, #8
 802054c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020550 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8020550:	b510      	push	{r4, lr}
 8020552:	b082      	sub	sp, #8
 8020554:	9c04      	ldr	r4, [sp, #16]
 8020556:	9401      	str	r4, [sp, #4]
 8020558:	9300      	str	r3, [sp, #0]
 802055a:	2301      	movs	r3, #1
 802055c:	f7ff ffbf 	bl	80204de <w5500_txn>
 8020560:	b002      	add	sp, #8
 8020562:	bd10      	pop	{r4, pc}

08020564 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 8020564:	b500      	push	{lr}
 8020566:	b085      	sub	sp, #20
 8020568:	f88d 300f 	strb.w	r3, [sp, #15]
 802056c:	2301      	movs	r3, #1
 802056e:	9300      	str	r3, [sp, #0]
 8020570:	f10d 030f 	add.w	r3, sp, #15
 8020574:	f7ff ffec 	bl	8020550 <w5500_wn>
 8020578:	b005      	add	sp, #20
 802057a:	f85d fb04 	ldr.w	pc, [sp], #4

0802057e <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 802057e:	b500      	push	{lr}
 8020580:	b085      	sub	sp, #20
 8020582:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8020586:	f88d c00c 	strb.w	ip, [sp, #12]
 802058a:	f88d 300d 	strb.w	r3, [sp, #13]
 802058e:	2302      	movs	r3, #2
 8020590:	9300      	str	r3, [sp, #0]
 8020592:	ab03      	add	r3, sp, #12
 8020594:	f7ff ffdc 	bl	8020550 <w5500_wn>
 8020598:	b005      	add	sp, #20
 802059a:	f85d fb04 	ldr.w	pc, [sp], #4

0802059e <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 802059e:	b510      	push	{r4, lr}
 80205a0:	b082      	sub	sp, #8
 80205a2:	9c04      	ldr	r4, [sp, #16]
 80205a4:	9401      	str	r4, [sp, #4]
 80205a6:	9300      	str	r3, [sp, #0]
 80205a8:	2300      	movs	r3, #0
 80205aa:	f7ff ff98 	bl	80204de <w5500_txn>
 80205ae:	b002      	add	sp, #8
 80205b0:	bd10      	pop	{r4, pc}

080205b2 <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 80205b2:	b500      	push	{lr}
 80205b4:	b085      	sub	sp, #20
 80205b6:	2300      	movs	r3, #0
 80205b8:	f88d 300f 	strb.w	r3, [sp, #15]
 80205bc:	2301      	movs	r3, #1
 80205be:	9300      	str	r3, [sp, #0]
 80205c0:	f10d 030f 	add.w	r3, sp, #15
 80205c4:	f7ff ffeb 	bl	802059e <w5500_rn>
 80205c8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80205cc:	b005      	add	sp, #20
 80205ce:	f85d fb04 	ldr.w	pc, [sp], #4

080205d2 <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 80205d2:	b500      	push	{lr}
 80205d4:	b085      	sub	sp, #20
 80205d6:	2300      	movs	r3, #0
 80205d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80205dc:	2302      	movs	r3, #2
 80205de:	9300      	str	r3, [sp, #0]
 80205e0:	ab03      	add	r3, sp, #12
 80205e2:	f7ff ffdc 	bl	802059e <w5500_rn>
 80205e6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80205ea:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80205ee:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80205f2:	b005      	add	sp, #20
 80205f4:	f85d fb04 	ldr.w	pc, [sp], #4

080205f8 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 80205f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80205fc:	b083      	sub	sp, #12
 80205fe:	4606      	mov	r6, r0
 8020600:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8020602:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8020604:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8020606:	4604      	mov	r4, r0
 8020608:	2226      	movs	r2, #38	@ 0x26
 802060a:	2101      	movs	r1, #1
 802060c:	4628      	mov	r0, r5
 802060e:	f7ff ffe0 	bl	80205d2 <w5500_r2>
 8020612:	4284      	cmp	r4, r0
 8020614:	d3f7      	bcc.n	8020606 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8020616:	b91c      	cbnz	r4, 8020620 <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 8020618:	4620      	mov	r0, r4
 802061a:	b003      	add	sp, #12
 802061c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8020620:	2228      	movs	r2, #40	@ 0x28
 8020622:	2101      	movs	r1, #1
 8020624:	4628      	mov	r0, r5
 8020626:	f7ff ffd4 	bl	80205d2 <w5500_r2>
 802062a:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 802062c:	4602      	mov	r2, r0
 802062e:	2103      	movs	r1, #3
 8020630:	4628      	mov	r0, r5
 8020632:	f7ff ffce 	bl	80205d2 <w5500_r2>
 8020636:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 8020638:	fa1f f188 	uxth.w	r1, r8
 802063c:	3102      	adds	r1, #2
 802063e:	4288      	cmp	r0, r1
 8020640:	dc0e      	bgt.n	8020660 <w5500_rx+0x68>
 8020642:	2801      	cmp	r0, #1
 8020644:	d801      	bhi.n	802064a <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8020646:	2400      	movs	r4, #0
 8020648:	e00b      	b.n	8020662 <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 802064a:	1e84      	subs	r4, r0, #2
 802064c:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 802064e:	1cba      	adds	r2, r7, #2
 8020650:	9400      	str	r4, [sp, #0]
 8020652:	4633      	mov	r3, r6
 8020654:	b292      	uxth	r2, r2
 8020656:	2103      	movs	r1, #3
 8020658:	4628      	mov	r0, r5
 802065a:	f7ff ffa0 	bl	802059e <w5500_rn>
 802065e:	e000      	b.n	8020662 <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8020660:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8020662:	eb07 0309 	add.w	r3, r7, r9
 8020666:	b29b      	uxth	r3, r3
 8020668:	2228      	movs	r2, #40	@ 0x28
 802066a:	2101      	movs	r1, #1
 802066c:	4628      	mov	r0, r5
 802066e:	f7ff ff86 	bl	802057e <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8020672:	2340      	movs	r3, #64	@ 0x40
 8020674:	2201      	movs	r2, #1
 8020676:	4611      	mov	r1, r2
 8020678:	4628      	mov	r0, r5
 802067a:	f7ff ff73 	bl	8020564 <w5500_w1>
 802067e:	e7cb      	b.n	8020618 <w5500_rx+0x20>

08020680 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 8020680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020684:	b082      	sub	sp, #8
 8020686:	4680      	mov	r8, r0
 8020688:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 802068a:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 802068c:	b28f      	uxth	r7, r1
 802068e:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 8020690:	e004      	b.n	802069c <w5500_tx+0x1c>
 8020692:	2220      	movs	r2, #32
 8020694:	2101      	movs	r1, #1
 8020696:	4630      	mov	r0, r6
 8020698:	f7ff ff9b 	bl	80205d2 <w5500_r2>
 802069c:	42b8      	cmp	r0, r7
 802069e:	d3f8      	bcc.n	8020692 <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 80206a0:	2224      	movs	r2, #36	@ 0x24
 80206a2:	2101      	movs	r1, #1
 80206a4:	4630      	mov	r0, r6
 80206a6:	f7ff ff94 	bl	80205d2 <w5500_r2>
 80206aa:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 80206ac:	b2ad      	uxth	r5, r5
 80206ae:	9500      	str	r5, [sp, #0]
 80206b0:	4643      	mov	r3, r8
 80206b2:	4602      	mov	r2, r0
 80206b4:	2102      	movs	r1, #2
 80206b6:	4630      	mov	r0, r6
 80206b8:	f7ff ff4a 	bl	8020550 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 80206bc:	193b      	adds	r3, r7, r4
 80206be:	b29b      	uxth	r3, r3
 80206c0:	2224      	movs	r2, #36	@ 0x24
 80206c2:	2101      	movs	r1, #1
 80206c4:	4630      	mov	r0, r6
 80206c6:	f7ff ff5a 	bl	802057e <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 80206ca:	2320      	movs	r3, #32
 80206cc:	2201      	movs	r2, #1
 80206ce:	4611      	mov	r1, r2
 80206d0:	4630      	mov	r0, r6
 80206d2:	f7ff ff47 	bl	8020564 <w5500_w1>
  for (i = 0; i < 40; i++) {
 80206d6:	2400      	movs	r4, #0
 80206d8:	e004      	b.n	80206e4 <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 80206da:	f015 0f18 	tst.w	r5, #24
 80206de:	d116      	bne.n	802070e <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 80206e0:	3401      	adds	r4, #1
 80206e2:	b2a4      	uxth	r4, r4
 80206e4:	2c27      	cmp	r4, #39	@ 0x27
 80206e6:	d812      	bhi.n	802070e <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 80206e8:	2202      	movs	r2, #2
 80206ea:	2101      	movs	r1, #1
 80206ec:	4630      	mov	r0, r6
 80206ee:	f7ff ff60 	bl	80205b2 <w5500_r1>
    if (ir == 0) continue;
 80206f2:	4605      	mov	r5, r0
 80206f4:	2800      	cmp	r0, #0
 80206f6:	d0f3      	beq.n	80206e0 <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 80206f8:	4603      	mov	r3, r0
 80206fa:	2202      	movs	r2, #2
 80206fc:	2101      	movs	r1, #1
 80206fe:	4630      	mov	r0, r6
 8020700:	f7ff ff30 	bl	8020564 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 8020704:	f015 0f08 	tst.w	r5, #8
 8020708:	d0e7      	beq.n	80206da <w5500_tx+0x5a>
 802070a:	2700      	movs	r7, #0
 802070c:	e7e5      	b.n	80206da <w5500_tx+0x5a>
  }
  return len;
}
 802070e:	4638      	mov	r0, r7
 8020710:	b002      	add	sp, #8
 8020712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020716 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8020716:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8020718:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 802071a:	68a3      	ldr	r3, [r4, #8]
 802071c:	6820      	ldr	r0, [r4, #0]
 802071e:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 8020720:	2380      	movs	r3, #128	@ 0x80
 8020722:	2200      	movs	r2, #0
 8020724:	4611      	mov	r1, r2
 8020726:	4620      	mov	r0, r4
 8020728:	f7ff ff1c 	bl	8020564 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 802072c:	2300      	movs	r3, #0
 802072e:	222e      	movs	r2, #46	@ 0x2e
 8020730:	4619      	mov	r1, r3
 8020732:	4620      	mov	r0, r4
 8020734:	f7ff ff16 	bl	8020564 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8020738:	23f8      	movs	r3, #248	@ 0xf8
 802073a:	222e      	movs	r2, #46	@ 0x2e
 802073c:	2100      	movs	r1, #0
 802073e:	4620      	mov	r0, r4
 8020740:	f7ff ff10 	bl	8020564 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 8020744:	2310      	movs	r3, #16
 8020746:	221e      	movs	r2, #30
 8020748:	2101      	movs	r1, #1
 802074a:	4620      	mov	r0, r4
 802074c:	f7ff ff0a 	bl	8020564 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 8020750:	2310      	movs	r3, #16
 8020752:	221f      	movs	r2, #31
 8020754:	2101      	movs	r1, #1
 8020756:	4620      	mov	r0, r4
 8020758:	f7ff ff04 	bl	8020564 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 802075c:	2304      	movs	r3, #4
 802075e:	2200      	movs	r2, #0
 8020760:	2101      	movs	r1, #1
 8020762:	4620      	mov	r0, r4
 8020764:	f7ff fefe 	bl	8020564 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8020768:	2301      	movs	r3, #1
 802076a:	461a      	mov	r2, r3
 802076c:	4619      	mov	r1, r3
 802076e:	4620      	mov	r0, r4
 8020770:	f7ff fef8 	bl	8020564 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 8020774:	2203      	movs	r2, #3
 8020776:	2101      	movs	r1, #1
 8020778:	4620      	mov	r0, r4
 802077a:	f7ff ff1a 	bl	80205b2 <w5500_r1>
}
 802077e:	2842      	cmp	r0, #66	@ 0x42
 8020780:	bf14      	ite	ne
 8020782:	2000      	movne	r0, #0
 8020784:	2001      	moveq	r0, #1
 8020786:	bd10      	pop	{r4, pc}

08020788 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8020788:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 802078a:	222e      	movs	r2, #46	@ 0x2e
 802078c:	2100      	movs	r1, #0
 802078e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8020790:	f7ff ff0f 	bl	80205b2 <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 8020794:	f000 0001 	and.w	r0, r0, #1
 8020798:	bd08      	pop	{r3, pc}

0802079a <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 802079a:	b508      	push	{r3, lr}
 802079c:	4602      	mov	r2, r0
 802079e:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 80207a0:	e000      	b.n	80207a4 <mg_dns_free+0xa>
 80207a2:	461a      	mov	r2, r3
 80207a4:	6813      	ldr	r3, [r2, #0]
 80207a6:	4283      	cmp	r3, r0
 80207a8:	d1fb      	bne.n	80207a2 <mg_dns_free+0x8>
 80207aa:	6803      	ldr	r3, [r0, #0]
 80207ac:	6013      	str	r3, [r2, #0]
  free(d);
 80207ae:	f7f9 fa1d 	bl	8019bec <vPortFree>
}
 80207b2:	bd08      	pop	{r3, pc}

080207b4 <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 80207b4:	b082      	sub	sp, #8
 80207b6:	ab02      	add	r3, sp, #8
 80207b8:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 80207bc:	b111      	cbz	r1, 80207c4 <mg_atone+0x10>
 80207be:	2000      	movs	r0, #0
}
 80207c0:	b002      	add	sp, #8
 80207c2:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 80207c4:	6011      	str	r1, [r2, #0]
 80207c6:	6051      	str	r1, [r2, #4]
 80207c8:	6091      	str	r1, [r2, #8]
 80207ca:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 80207cc:	74d1      	strb	r1, [r2, #19]
  return true;
 80207ce:	2001      	movs	r0, #1
 80207d0:	e7f6      	b.n	80207c0 <mg_atone+0xc>

080207d2 <urlparse>:
static struct url urlparse(const char *url) {
 80207d2:	b510      	push	{r4, lr}
 80207d4:	b088      	sub	sp, #32
 80207d6:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 80207d8:	2200      	movs	r2, #0
 80207da:	9201      	str	r2, [sp, #4]
 80207dc:	9202      	str	r2, [sp, #8]
 80207de:	9203      	str	r2, [sp, #12]
 80207e0:	9204      	str	r2, [sp, #16]
 80207e2:	9205      	str	r2, [sp, #20]
 80207e4:	9206      	str	r2, [sp, #24]
 80207e6:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 80207e8:	e00f      	b.n	802080a <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 80207ea:	b19a      	cbz	r2, 8020814 <urlparse+0x42>
 80207ec:	9804      	ldr	r0, [sp, #16]
 80207ee:	b988      	cbnz	r0, 8020814 <urlparse+0x42>
 80207f0:	1888      	adds	r0, r1, r2
 80207f2:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 80207f6:	282f      	cmp	r0, #47	@ 0x2f
 80207f8:	d10c      	bne.n	8020814 <urlparse+0x42>
      u.host = i + 1;
 80207fa:	1c53      	adds	r3, r2, #1
 80207fc:	9304      	str	r3, [sp, #16]
      u.port = 0;
 80207fe:	2300      	movs	r3, #0
 8020800:	9305      	str	r3, [sp, #20]
 8020802:	e001      	b.n	8020808 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8020804:	2300      	movs	r3, #0
 8020806:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 8020808:	3201      	adds	r2, #1
 802080a:	5c8b      	ldrb	r3, [r1, r2]
 802080c:	2b00      	cmp	r3, #0
 802080e:	d02c      	beq.n	802086a <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8020810:	2b2f      	cmp	r3, #47	@ 0x2f
 8020812:	d0ea      	beq.n	80207ea <urlparse+0x18>
    } else if (url[i] == ']') {
 8020814:	2b5d      	cmp	r3, #93	@ 0x5d
 8020816:	d0f5      	beq.n	8020804 <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8020818:	2b3a      	cmp	r3, #58	@ 0x3a
 802081a:	d00b      	beq.n	8020834 <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 802081c:	2b40      	cmp	r3, #64	@ 0x40
 802081e:	d012      	beq.n	8020846 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8020820:	2b2f      	cmp	r3, #47	@ 0x2f
 8020822:	d1f1      	bne.n	8020808 <urlparse+0x36>
 8020824:	9b04      	ldr	r3, [sp, #16]
 8020826:	2b00      	cmp	r3, #0
 8020828:	d0ee      	beq.n	8020808 <urlparse+0x36>
 802082a:	9b06      	ldr	r3, [sp, #24]
 802082c:	2b00      	cmp	r3, #0
 802082e:	d1eb      	bne.n	8020808 <urlparse+0x36>
      u.uri = i;
 8020830:	9206      	str	r2, [sp, #24]
 8020832:	e7e9      	b.n	8020808 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8020834:	9805      	ldr	r0, [sp, #20]
 8020836:	2800      	cmp	r0, #0
 8020838:	d1f0      	bne.n	802081c <urlparse+0x4a>
 802083a:	9806      	ldr	r0, [sp, #24]
 802083c:	2800      	cmp	r0, #0
 802083e:	d1ed      	bne.n	802081c <urlparse+0x4a>
      u.port = i + 1;
 8020840:	1c53      	adds	r3, r2, #1
 8020842:	9305      	str	r3, [sp, #20]
 8020844:	e7e0      	b.n	8020808 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8020846:	9802      	ldr	r0, [sp, #8]
 8020848:	2800      	cmp	r0, #0
 802084a:	d1e9      	bne.n	8020820 <urlparse+0x4e>
 802084c:	9803      	ldr	r0, [sp, #12]
 802084e:	2800      	cmp	r0, #0
 8020850:	d1e6      	bne.n	8020820 <urlparse+0x4e>
 8020852:	9806      	ldr	r0, [sp, #24]
 8020854:	2800      	cmp	r0, #0
 8020856:	d1e3      	bne.n	8020820 <urlparse+0x4e>
      u.user = u.host;
 8020858:	9b04      	ldr	r3, [sp, #16]
 802085a:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 802085c:	9b05      	ldr	r3, [sp, #20]
 802085e:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 8020860:	1c53      	adds	r3, r2, #1
 8020862:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8020864:	2300      	movs	r3, #0
 8020866:	9305      	str	r3, [sp, #20]
 8020868:	e7ce      	b.n	8020808 <urlparse+0x36>
  u.end = i;
 802086a:	9207      	str	r2, [sp, #28]
  return u;
 802086c:	46a4      	mov	ip, r4
 802086e:	f10d 0e04 	add.w	lr, sp, #4
 8020872:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8020876:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802087a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 802087e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 8020882:	4620      	mov	r0, r4
 8020884:	b008      	add	sp, #32
 8020886:	bd10      	pop	{r4, pc}

08020888 <mg_dns_parse_name_depth>:
                                      int depth) {
 8020888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802088c:	b085      	sub	sp, #20
 802088e:	4681      	mov	r9, r0
 8020890:	4688      	mov	r8, r1
 8020892:	4693      	mov	fp, r2
 8020894:	469a      	mov	sl, r3
 8020896:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8020898:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 802089a:	b11f      	cbz	r7, 80208a4 <mg_dns_parse_name_depth+0x1c>
 802089c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802089e:	b90b      	cbnz	r3, 80208a4 <mg_dns_parse_name_depth+0x1c>
 80208a0:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 80208a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80208a6:	2b05      	cmp	r3, #5
 80208a8:	dc4f      	bgt.n	802094a <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 80208aa:	2600      	movs	r6, #0
 80208ac:	e02f      	b.n	802090e <mg_dns_parse_name_depth+0x86>
      i++;
 80208ae:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 80208b0:	2f00      	cmp	r7, #0
 80208b2:	d04b      	beq.n	802094c <mg_dns_parse_name_depth+0xc4>
 80208b4:	3f01      	subs	r7, #1
 80208b6:	2300      	movs	r3, #0
 80208b8:	f80a 3007 	strb.w	r3, [sl, r7]
 80208bc:	e046      	b.n	802094c <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 80208be:	0222      	lsls	r2, r4, #8
 80208c0:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 80208c4:	f819 3001 	ldrb.w	r3, [r9, r1]
 80208c8:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80208ca:	1c53      	adds	r3, r2, #1
 80208cc:	4543      	cmp	r3, r8
 80208ce:	d203      	bcs.n	80208d8 <mg_dns_parse_name_depth+0x50>
 80208d0:	f819 3002 	ldrb.w	r3, [r9, r2]
 80208d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80208d6:	d901      	bls.n	80208dc <mg_dns_parse_name_depth+0x54>
      i += 2;
 80208d8:	3602      	adds	r6, #2
      break;
 80208da:	e7e9      	b.n	80208b0 <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 80208dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80208de:	3301      	adds	r3, #1
 80208e0:	9302      	str	r3, [sp, #8]
 80208e2:	9501      	str	r5, [sp, #4]
 80208e4:	9700      	str	r7, [sp, #0]
 80208e6:	4653      	mov	r3, sl
 80208e8:	4641      	mov	r1, r8
 80208ea:	4648      	mov	r0, r9
 80208ec:	f7ff ffcc 	bl	8020888 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80208f0:	2800      	cmp	r0, #0
 80208f2:	d1f1      	bne.n	80208d8 <mg_dns_parse_name_depth+0x50>
        return 0;
 80208f4:	4606      	mov	r6, r0
 80208f6:	e029      	b.n	802094c <mg_dns_parse_name_depth+0xc4>
 80208f8:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 80208fa:	1905      	adds	r5, r0, r4
 80208fc:	42bd      	cmp	r5, r7
 80208fe:	d31e      	bcc.n	802093e <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 8020900:	4426      	add	r6, r4
 8020902:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8020904:	42bd      	cmp	r5, r7
 8020906:	d202      	bcs.n	802090e <mg_dns_parse_name_depth+0x86>
 8020908:	2300      	movs	r3, #0
 802090a:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 802090e:	eb06 030b 	add.w	r3, r6, fp
 8020912:	1c59      	adds	r1, r3, #1
 8020914:	4541      	cmp	r1, r8
 8020916:	d2cb      	bcs.n	80208b0 <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 8020918:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 802091c:	2c00      	cmp	r4, #0
 802091e:	d0c6      	beq.n	80208ae <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 8020920:	2c3f      	cmp	r4, #63	@ 0x3f
 8020922:	d8cc      	bhi.n	80208be <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 8020924:	4423      	add	r3, r4
 8020926:	3301      	adds	r3, #1
 8020928:	4543      	cmp	r3, r8
 802092a:	d213      	bcs.n	8020954 <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 802092c:	2d00      	cmp	r5, #0
 802092e:	d0e3      	beq.n	80208f8 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 8020930:	42bd      	cmp	r5, r7
 8020932:	d202      	bcs.n	802093a <mg_dns_parse_name_depth+0xb2>
 8020934:	232e      	movs	r3, #46	@ 0x2e
 8020936:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 802093a:	1c68      	adds	r0, r5, #1
 802093c:	e7dd      	b.n	80208fa <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 802093e:	4622      	mov	r2, r4
 8020940:	4449      	add	r1, r9
 8020942:	4450      	add	r0, sl
 8020944:	f00c fa98 	bl	802ce78 <memcpy>
 8020948:	e7da      	b.n	8020900 <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 802094a:	2600      	movs	r6, #0
}
 802094c:	4630      	mov	r0, r6
 802094e:	b005      	add	sp, #20
 8020950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 8020954:	2600      	movs	r6, #0
 8020956:	e7f9      	b.n	802094c <mg_dns_parse_name_depth+0xc4>

08020958 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 8020958:	b510      	push	{r4, lr}
 802095a:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 802095c:	2400      	movs	r4, #0
 802095e:	9402      	str	r4, [sp, #8]
 8020960:	9401      	str	r4, [sp, #4]
 8020962:	9c06      	ldr	r4, [sp, #24]
 8020964:	9400      	str	r4, [sp, #0]
 8020966:	f7ff ff8f 	bl	8020888 <mg_dns_parse_name_depth>
}
 802096a:	b004      	add	sp, #16
 802096c:	bd10      	pop	{r4, pc}
	...

08020970 <mg_sha1_transform>:
                              const unsigned char *buffer) {
 8020970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020974:	b09f      	sub	sp, #124	@ 0x7c
 8020976:	900d      	str	r0, [sp, #52]	@ 0x34
  memcpy(block, buffer, 64);
 8020978:	460c      	mov	r4, r1
 802097a:	af0e      	add	r7, sp, #56	@ 0x38
 802097c:	f101 0540 	add.w	r5, r1, #64	@ 0x40
 8020980:	463e      	mov	r6, r7
 8020982:	6820      	ldr	r0, [r4, #0]
 8020984:	6861      	ldr	r1, [r4, #4]
 8020986:	68a2      	ldr	r2, [r4, #8]
 8020988:	68e3      	ldr	r3, [r4, #12]
 802098a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 802098c:	3410      	adds	r4, #16
 802098e:	4637      	mov	r7, r6
 8020990:	42ac      	cmp	r4, r5
 8020992:	d1f5      	bne.n	8020980 <mg_sha1_transform+0x10>
  a = state[0];
 8020994:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020996:	6805      	ldr	r5, [r0, #0]
  b = state[1];
 8020998:	6847      	ldr	r7, [r0, #4]
  c = state[2];
 802099a:	6884      	ldr	r4, [r0, #8]
  d = state[3];
 802099c:	f8d0 800c 	ldr.w	r8, [r0, #12]
  e = state[4];
 80209a0:	f8d0 9010 	ldr.w	r9, [r0, #16]
  R0(a, b, c, d, e, 0);
 80209a4:	ea84 0608 	eor.w	r6, r4, r8
 80209a8:	403e      	ands	r6, r7
 80209aa:	ea86 0608 	eor.w	r6, r6, r8
 80209ae:	2100      	movs	r1, #0
 80209b0:	a80e      	add	r0, sp, #56	@ 0x38
 80209b2:	f7ff fd7d 	bl	80204b0 <blk0>
 80209b6:	1833      	adds	r3, r6, r0
 80209b8:	eb03 63f5 	add.w	r3, r3, r5, ror #27
 80209bc:	4ee4      	ldr	r6, [pc, #912]	@ (8020d50 <mg_sha1_transform+0x3e0>)
 80209be:	4433      	add	r3, r6
 80209c0:	4499      	add	r9, r3
 80209c2:	ea4f 0ab7 	mov.w	sl, r7, ror #2
  R0(e, a, b, c, d, 1);
 80209c6:	ea84 07b7 	eor.w	r7, r4, r7, ror #2
 80209ca:	402f      	ands	r7, r5
 80209cc:	4067      	eors	r7, r4
 80209ce:	2101      	movs	r1, #1
 80209d0:	a80e      	add	r0, sp, #56	@ 0x38
 80209d2:	f7ff fd6d 	bl	80204b0 <blk0>
 80209d6:	4407      	add	r7, r0
 80209d8:	eb07 67f9 	add.w	r7, r7, r9, ror #27
 80209dc:	4437      	add	r7, r6
 80209de:	4447      	add	r7, r8
 80209e0:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(d, e, a, b, c, 2);
 80209e4:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 80209e8:	ea05 0509 	and.w	r5, r5, r9
 80209ec:	ea85 050a 	eor.w	r5, r5, sl
 80209f0:	2102      	movs	r1, #2
 80209f2:	a80e      	add	r0, sp, #56	@ 0x38
 80209f4:	f7ff fd5c 	bl	80204b0 <blk0>
 80209f8:	4405      	add	r5, r0
 80209fa:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 80209fe:	4435      	add	r5, r6
 8020a00:	442c      	add	r4, r5
 8020a02:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(c, d, e, a, b, 3);
 8020a06:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8020a0a:	ea09 0907 	and.w	r9, r9, r7
 8020a0e:	ea89 0908 	eor.w	r9, r9, r8
 8020a12:	2103      	movs	r1, #3
 8020a14:	a80e      	add	r0, sp, #56	@ 0x38
 8020a16:	f7ff fd4b 	bl	80204b0 <blk0>
 8020a1a:	4481      	add	r9, r0
 8020a1c:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8020a20:	44b1      	add	r9, r6
 8020a22:	44ca      	add	sl, r9
 8020a24:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(b, c, d, e, a, 4);
 8020a28:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 8020a2c:	4027      	ands	r7, r4
 8020a2e:	406f      	eors	r7, r5
 8020a30:	2104      	movs	r1, #4
 8020a32:	a80e      	add	r0, sp, #56	@ 0x38
 8020a34:	f7ff fd3c 	bl	80204b0 <blk0>
 8020a38:	4407      	add	r7, r0
 8020a3a:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 8020a3e:	4437      	add	r7, r6
 8020a40:	44b8      	add	r8, r7
 8020a42:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(a, b, c, d, e, 5);
 8020a46:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8020a4a:	ea04 040a 	and.w	r4, r4, sl
 8020a4e:	ea84 0409 	eor.w	r4, r4, r9
 8020a52:	2105      	movs	r1, #5
 8020a54:	a80e      	add	r0, sp, #56	@ 0x38
 8020a56:	f7ff fd2b 	bl	80204b0 <blk0>
 8020a5a:	4404      	add	r4, r0
 8020a5c:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8020a60:	4434      	add	r4, r6
 8020a62:	4425      	add	r5, r4
 8020a64:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(e, a, b, c, d, 6);
 8020a68:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 8020a6c:	ea0a 0a08 	and.w	sl, sl, r8
 8020a70:	ea8a 0a07 	eor.w	sl, sl, r7
 8020a74:	2106      	movs	r1, #6
 8020a76:	a80e      	add	r0, sp, #56	@ 0x38
 8020a78:	f7ff fd1a 	bl	80204b0 <blk0>
 8020a7c:	4482      	add	sl, r0
 8020a7e:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 8020a82:	44b2      	add	sl, r6
 8020a84:	44d1      	add	r9, sl
 8020a86:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(d, e, a, b, c, 7);
 8020a8a:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8020a8e:	ea08 0805 	and.w	r8, r8, r5
 8020a92:	ea88 0804 	eor.w	r8, r8, r4
 8020a96:	2107      	movs	r1, #7
 8020a98:	a80e      	add	r0, sp, #56	@ 0x38
 8020a9a:	f7ff fd09 	bl	80204b0 <blk0>
 8020a9e:	4480      	add	r8, r0
 8020aa0:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8020aa4:	44b0      	add	r8, r6
 8020aa6:	4447      	add	r7, r8
 8020aa8:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(c, d, e, a, b, 8);
 8020aac:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8020ab0:	ea05 0509 	and.w	r5, r5, r9
 8020ab4:	ea85 050a 	eor.w	r5, r5, sl
 8020ab8:	2108      	movs	r1, #8
 8020aba:	a80e      	add	r0, sp, #56	@ 0x38
 8020abc:	f7ff fcf8 	bl	80204b0 <blk0>
 8020ac0:	4405      	add	r5, r0
 8020ac2:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8020ac6:	4435      	add	r5, r6
 8020ac8:	442c      	add	r4, r5
 8020aca:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(b, c, d, e, a, 9);
 8020ace:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8020ad2:	ea09 0907 	and.w	r9, r9, r7
 8020ad6:	ea89 0908 	eor.w	r9, r9, r8
 8020ada:	2109      	movs	r1, #9
 8020adc:	a80e      	add	r0, sp, #56	@ 0x38
 8020ade:	f7ff fce7 	bl	80204b0 <blk0>
 8020ae2:	4481      	add	r9, r0
 8020ae4:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8020ae8:	44b1      	add	r9, r6
 8020aea:	44ca      	add	sl, r9
 8020aec:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(a, b, c, d, e, 10);
 8020af0:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 8020af4:	4027      	ands	r7, r4
 8020af6:	406f      	eors	r7, r5
 8020af8:	210a      	movs	r1, #10
 8020afa:	a80e      	add	r0, sp, #56	@ 0x38
 8020afc:	f7ff fcd8 	bl	80204b0 <blk0>
 8020b00:	4407      	add	r7, r0
 8020b02:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 8020b06:	4437      	add	r7, r6
 8020b08:	44b8      	add	r8, r7
 8020b0a:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(e, a, b, c, d, 11);
 8020b0e:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8020b12:	ea04 040a 	and.w	r4, r4, sl
 8020b16:	ea84 0409 	eor.w	r4, r4, r9
 8020b1a:	210b      	movs	r1, #11
 8020b1c:	a80e      	add	r0, sp, #56	@ 0x38
 8020b1e:	f7ff fcc7 	bl	80204b0 <blk0>
 8020b22:	4404      	add	r4, r0
 8020b24:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8020b28:	4434      	add	r4, r6
 8020b2a:	4425      	add	r5, r4
 8020b2c:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(d, e, a, b, c, 12);
 8020b30:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 8020b34:	ea0a 0a08 	and.w	sl, sl, r8
 8020b38:	ea8a 0a07 	eor.w	sl, sl, r7
 8020b3c:	210c      	movs	r1, #12
 8020b3e:	a80e      	add	r0, sp, #56	@ 0x38
 8020b40:	f7ff fcb6 	bl	80204b0 <blk0>
 8020b44:	4482      	add	sl, r0
 8020b46:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 8020b4a:	44b2      	add	sl, r6
 8020b4c:	44d1      	add	r9, sl
 8020b4e:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(c, d, e, a, b, 13);
 8020b52:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8020b56:	ea08 0805 	and.w	r8, r8, r5
 8020b5a:	ea88 0804 	eor.w	r8, r8, r4
 8020b5e:	210d      	movs	r1, #13
 8020b60:	a80e      	add	r0, sp, #56	@ 0x38
 8020b62:	f7ff fca5 	bl	80204b0 <blk0>
 8020b66:	4480      	add	r8, r0
 8020b68:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8020b6c:	44b0      	add	r8, r6
 8020b6e:	4447      	add	r7, r8
 8020b70:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(b, c, d, e, a, 14);
 8020b74:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8020b78:	ea05 0509 	and.w	r5, r5, r9
 8020b7c:	ea85 050a 	eor.w	r5, r5, sl
 8020b80:	210e      	movs	r1, #14
 8020b82:	a80e      	add	r0, sp, #56	@ 0x38
 8020b84:	f7ff fc94 	bl	80204b0 <blk0>
 8020b88:	4405      	add	r5, r0
 8020b8a:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8020b8e:	4435      	add	r5, r6
 8020b90:	442c      	add	r4, r5
 8020b92:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(a, b, c, d, e, 15);
 8020b96:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8020b9a:	ea09 0907 	and.w	r9, r9, r7
 8020b9e:	ea89 0908 	eor.w	r9, r9, r8
 8020ba2:	210f      	movs	r1, #15
 8020ba4:	a80e      	add	r0, sp, #56	@ 0x38
 8020ba6:	f7ff fc83 	bl	80204b0 <blk0>
 8020baa:	4481      	add	r9, r0
 8020bac:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8020bb0:	44b1      	add	r9, r6
 8020bb2:	eb0a 0109 	add.w	r1, sl, r9
  R1(e, a, b, c, d, 16);
 8020bb6:	ea85 03b7 	eor.w	r3, r5, r7, ror #2
 8020bba:	4023      	ands	r3, r4
 8020bbc:	ea83 0205 	eor.w	r2, r3, r5
 8020bc0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020bc2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020bc4:	4043      	eors	r3, r0
 8020bc6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8020bc8:	ea83 0c00 	eor.w	ip, r3, r0
 8020bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020bce:	ea8c 0303 	eor.w	r3, ip, r3
 8020bd2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8020bd6:	930e      	str	r3, [sp, #56]	@ 0x38
 8020bd8:	9300      	str	r3, [sp, #0]
 8020bda:	18d3      	adds	r3, r2, r3
 8020bdc:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8020be0:	4433      	add	r3, r6
 8020be2:	eb08 0203 	add.w	r2, r8, r3
 8020be6:	ea4f 08b4 	mov.w	r8, r4, ror #2
  R1(d, e, a, b, c, 17);
 8020bea:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 8020bee:	ea0c 0c01 	and.w	ip, ip, r1
 8020bf2:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8020bf6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020bf8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8020bfa:	ea83 0e04 	eor.w	lr, r3, r4
 8020bfe:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8020c02:	ea8e 0e09 	eor.w	lr, lr, r9
 8020c06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c08:	ea8e 0e03 	eor.w	lr, lr, r3
 8020c0c:	ea4f 74fe 	mov.w	r4, lr, ror #31
 8020c10:	940f      	str	r4, [sp, #60]	@ 0x3c
 8020c12:	9401      	str	r4, [sp, #4]
 8020c14:	44a4      	add	ip, r4
 8020c16:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 8020c1a:	44b4      	add	ip, r6
 8020c1c:	44ac      	add	ip, r5
  R1(c, d, e, a, b, 18);
 8020c1e:	ea88 05b1 	eor.w	r5, r8, r1, ror #2
 8020c22:	4015      	ands	r5, r2
 8020c24:	ea85 0508 	eor.w	r5, r5, r8
 8020c28:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8020c2a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020c2c:	ea84 0e03 	eor.w	lr, r4, r3
 8020c30:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020c32:	ea8e 0e03 	eor.w	lr, lr, r3
 8020c36:	ea80 000e 	eor.w	r0, r0, lr
 8020c3a:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8020c3e:	9010      	str	r0, [sp, #64]	@ 0x40
 8020c40:	9002      	str	r0, [sp, #8]
 8020c42:	4405      	add	r5, r0
 8020c44:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8020c48:	4435      	add	r5, r6
 8020c4a:	eb05 05b7 	add.w	r5, r5, r7, ror #2
 8020c4e:	ea4f 02b2 	mov.w	r2, r2, ror #2
  R1(b, c, d, e, a, 19);
 8020c52:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8020c56:	ea00 000c 	and.w	r0, r0, ip
 8020c5a:	ea80 00b1 	eor.w	r0, r0, r1, ror #2
 8020c5e:	9f00      	ldr	r7, [sp, #0]
 8020c60:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8020c62:	4067      	eors	r7, r4
 8020c64:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8020c68:	ea87 070e 	eor.w	r7, r7, lr
 8020c6c:	ea89 0907 	eor.w	r9, r9, r7
 8020c70:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8020c74:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8020c78:	4448      	add	r0, r9
 8020c7a:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8020c7e:	4430      	add	r0, r6
 8020c80:	eb08 0400 	add.w	r4, r8, r0
  R2(a, b, c, d, e, 20);
 8020c84:	ea85 00bc 	eor.w	r0, r5, ip, ror #2
 8020c88:	4050      	eors	r0, r2
 8020c8a:	9e01      	ldr	r6, [sp, #4]
 8020c8c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8020c8e:	ea86 0807 	eor.w	r8, r6, r7
 8020c92:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8020c96:	ea88 080a 	eor.w	r8, r8, sl
 8020c9a:	ea83 0808 	eor.w	r8, r3, r8
 8020c9e:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8020ca2:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8020ca6:	4440      	add	r0, r8
 8020ca8:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8020cac:	4b29      	ldr	r3, [pc, #164]	@ (8020d54 <mg_sha1_transform+0x3e4>)
 8020cae:	4418      	add	r0, r3
 8020cb0:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(e, a, b, c, d, 21);
 8020cb4:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8020cb8:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8020cbc:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8020cbe:	9f02      	ldr	r7, [sp, #8]
 8020cc0:	4077      	eors	r7, r6
 8020cc2:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8020cc4:	4077      	eors	r7, r6
 8020cc6:	ea8e 0707 	eor.w	r7, lr, r7
 8020cca:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8020cce:	9713      	str	r7, [sp, #76]	@ 0x4c
 8020cd0:	9703      	str	r7, [sp, #12]
 8020cd2:	4439      	add	r1, r7
 8020cd4:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8020cd8:	4419      	add	r1, r3
 8020cda:	440a      	add	r2, r1
  R2(d, e, a, b, c, 22);
 8020cdc:	ea80 01b4 	eor.w	r1, r0, r4, ror #2
 8020ce0:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8020ce4:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8020ce6:	ea87 0e09 	eor.w	lr, r7, r9
 8020cea:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 8020cec:	ea87 0e0e 	eor.w	lr, r7, lr
 8020cf0:	ea8a 0e0e 	eor.w	lr, sl, lr
 8020cf4:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8020cf8:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8020cfc:	4471      	add	r1, lr
 8020cfe:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 8020d02:	4419      	add	r1, r3
 8020d04:	eb01 01bc 	add.w	r1, r1, ip, ror #2
  R2(c, d, e, a, b, 23);
 8020d08:	ea82 0bb0 	eor.w	fp, r2, r0, ror #2
 8020d0c:	ea8b 0bb4 	eor.w	fp, fp, r4, ror #2
 8020d10:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8020d12:	ea87 0c08 	eor.w	ip, r7, r8
 8020d16:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8020d18:	ea87 0c0c 	eor.w	ip, r7, ip
 8020d1c:	ea86 0c0c 	eor.w	ip, r6, ip
 8020d20:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8020d24:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8020d28:	44e3      	add	fp, ip
 8020d2a:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 8020d2e:	449b      	add	fp, r3
 8020d30:	eb0b 0bb5 	add.w	fp, fp, r5, ror #2
  R2(b, c, d, e, a, 24);
 8020d34:	ea81 0ab2 	eor.w	sl, r1, r2, ror #2
 8020d38:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 8020d3c:	9d00      	ldr	r5, [sp, #0]
 8020d3e:	9e03      	ldr	r6, [sp, #12]
 8020d40:	406e      	eors	r6, r5
 8020d42:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8020d44:	406e      	eors	r6, r5
 8020d46:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8020d48:	406e      	eors	r6, r5
 8020d4a:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8020d4e:	e003      	b.n	8020d58 <mg_sha1_transform+0x3e8>
 8020d50:	5a827999 	.word	0x5a827999
 8020d54:	6ed9eba1 	.word	0x6ed9eba1
 8020d58:	9716      	str	r7, [sp, #88]	@ 0x58
 8020d5a:	9704      	str	r7, [sp, #16]
 8020d5c:	44ba      	add	sl, r7
 8020d5e:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
 8020d62:	449a      	add	sl, r3
 8020d64:	eb0a 0ab4 	add.w	sl, sl, r4, ror #2
  R2(a, b, c, d, e, 25);
 8020d68:	ea8b 05b1 	eor.w	r5, fp, r1, ror #2
 8020d6c:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
 8020d70:	9e01      	ldr	r6, [sp, #4]
 8020d72:	ea86 040e 	eor.w	r4, r6, lr
 8020d76:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8020d78:	407c      	eors	r4, r7
 8020d7a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8020d7c:	407c      	eors	r4, r7
 8020d7e:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8020d82:	9417      	str	r4, [sp, #92]	@ 0x5c
 8020d84:	9405      	str	r4, [sp, #20]
 8020d86:	4425      	add	r5, r4
 8020d88:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8020d8c:	441d      	add	r5, r3
 8020d8e:	eb05 05b0 	add.w	r5, r5, r0, ror #2
  R2(e, a, b, c, d, 26);
 8020d92:	ea8a 04bb 	eor.w	r4, sl, fp, ror #2
 8020d96:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8020d9a:	9e02      	ldr	r6, [sp, #8]
 8020d9c:	ea86 000c 	eor.w	r0, r6, ip
 8020da0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8020da2:	4078      	eors	r0, r7
 8020da4:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8020da6:	4078      	eors	r0, r7
 8020da8:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8020dac:	4606      	mov	r6, r0
 8020dae:	9018      	str	r0, [sp, #96]	@ 0x60
 8020db0:	4404      	add	r4, r0
 8020db2:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8020db6:	441c      	add	r4, r3
 8020db8:	eb04 04b2 	add.w	r4, r4, r2, ror #2
  R2(d, e, a, b, c, 27);
 8020dbc:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8020dc0:	ea80 00bb 	eor.w	r0, r0, fp, ror #2
 8020dc4:	9f04      	ldr	r7, [sp, #16]
 8020dc6:	ea89 0207 	eor.w	r2, r9, r7
 8020dca:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8020dcc:	407a      	eors	r2, r7
 8020dce:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8020dd0:	407a      	eors	r2, r7
 8020dd2:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8020dd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8020dd8:	9206      	str	r2, [sp, #24]
 8020dda:	4410      	add	r0, r2
 8020ddc:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8020de0:	4418      	add	r0, r3
 8020de2:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(c, d, e, a, b, 28);
 8020de6:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8020dea:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8020dee:	9a05      	ldr	r2, [sp, #20]
 8020df0:	ea88 0202 	eor.w	r2, r8, r2
 8020df4:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8020df6:	407a      	eors	r2, r7
 8020df8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8020dfa:	407a      	eors	r2, r7
 8020dfc:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8020e00:	921a      	str	r2, [sp, #104]	@ 0x68
 8020e02:	9207      	str	r2, [sp, #28]
 8020e04:	4411      	add	r1, r2
 8020e06:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8020e0a:	4419      	add	r1, r3
 8020e0c:	eb01 01bb 	add.w	r1, r1, fp, ror #2
  R2(b, c, d, e, a, 29);
 8020e10:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8020e14:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8020e18:	960b      	str	r6, [sp, #44]	@ 0x2c
 8020e1a:	9f03      	ldr	r7, [sp, #12]
 8020e1c:	ea87 0b06 	eor.w	fp, r7, r6
 8020e20:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8020e22:	ea87 0b0b 	eor.w	fp, r7, fp
 8020e26:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8020e28:	ea87 0b0b 	eor.w	fp, r7, fp
 8020e2c:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8020e30:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 8020e34:	f8cd b020 	str.w	fp, [sp, #32]
 8020e38:	445a      	add	r2, fp
 8020e3a:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8020e3e:	441a      	add	r2, r3
 8020e40:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(a, b, c, d, e, 30);
 8020e44:	ea81 0ab0 	eor.w	sl, r1, r0, ror #2
 8020e48:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
 8020e4c:	9e06      	ldr	r6, [sp, #24]
 8020e4e:	ea8e 0b06 	eor.w	fp, lr, r6
 8020e52:	9e00      	ldr	r6, [sp, #0]
 8020e54:	ea86 0b0b 	eor.w	fp, r6, fp
 8020e58:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8020e5a:	ea87 0b0b 	eor.w	fp, r7, fp
 8020e5e:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8020e62:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 8020e66:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8020e6a:	44da      	add	sl, fp
 8020e6c:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8020e70:	449a      	add	sl, r3
 8020e72:	eb0a 0ab5 	add.w	sl, sl, r5, ror #2
  R2(e, a, b, c, d, 31);
 8020e76:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8020e7a:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8020e7e:	9e07      	ldr	r6, [sp, #28]
 8020e80:	ea8c 0b06 	eor.w	fp, ip, r6
 8020e84:	9e01      	ldr	r6, [sp, #4]
 8020e86:	ea86 0b0b 	eor.w	fp, r6, fp
 8020e8a:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8020e8c:	ea87 0b0b 	eor.w	fp, r7, fp
 8020e90:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8020e94:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 8020e98:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8020e9c:	445d      	add	r5, fp
 8020e9e:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8020ea2:	441d      	add	r5, r3
 8020ea4:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(d, e, a, b, c, 32);
 8020ea8:	ea8a 04b2 	eor.w	r4, sl, r2, ror #2
 8020eac:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8020eb0:	9e08      	ldr	r6, [sp, #32]
 8020eb2:	9f04      	ldr	r7, [sp, #16]
 8020eb4:	ea87 0b06 	eor.w	fp, r7, r6
 8020eb8:	9e02      	ldr	r6, [sp, #8]
 8020eba:	ea86 0b0b 	eor.w	fp, r6, fp
 8020ebe:	9e00      	ldr	r6, [sp, #0]
 8020ec0:	ea86 0b0b 	eor.w	fp, r6, fp
 8020ec4:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8020ec8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020ecc:	f8cd b000 	str.w	fp, [sp]
 8020ed0:	445c      	add	r4, fp
 8020ed2:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8020ed6:	441c      	add	r4, r3
 8020ed8:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(c, d, e, a, b, 33);
 8020edc:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8020ee0:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8020ee4:	9e05      	ldr	r6, [sp, #20]
 8020ee6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8020ee8:	ea86 0b07 	eor.w	fp, r6, r7
 8020eec:	ea89 0b0b 	eor.w	fp, r9, fp
 8020ef0:	9e01      	ldr	r6, [sp, #4]
 8020ef2:	ea86 0b0b 	eor.w	fp, r6, fp
 8020ef6:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8020efa:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8020efe:	f8cd b004 	str.w	fp, [sp, #4]
 8020f02:	4458      	add	r0, fp
 8020f04:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8020f08:	4418      	add	r0, r3
 8020f0a:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(b, c, d, e, a, 34);
 8020f0e:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8020f12:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8020f16:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8020f18:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8020f1a:	ea86 0b07 	eor.w	fp, r6, r7
 8020f1e:	ea88 0b0b 	eor.w	fp, r8, fp
 8020f22:	9e02      	ldr	r6, [sp, #8]
 8020f24:	ea86 0b0b 	eor.w	fp, r6, fp
 8020f28:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8020f2c:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8020f30:	f8cd b008 	str.w	fp, [sp, #8]
 8020f34:	4459      	add	r1, fp
 8020f36:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8020f3a:	4419      	add	r1, r3
 8020f3c:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R2(a, b, c, d, e, 35);
 8020f40:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8020f44:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8020f48:	9e06      	ldr	r6, [sp, #24]
 8020f4a:	9f00      	ldr	r7, [sp, #0]
 8020f4c:	ea86 0b07 	eor.w	fp, r6, r7
 8020f50:	9e03      	ldr	r6, [sp, #12]
 8020f52:	ea86 0b0b 	eor.w	fp, r6, fp
 8020f56:	ea89 090b 	eor.w	r9, r9, fp
 8020f5a:	ea4f 7bf9 	mov.w	fp, r9, ror #31
 8020f5e:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8020f62:	445a      	add	r2, fp
 8020f64:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8020f68:	441a      	add	r2, r3
 8020f6a:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(e, a, b, c, d, 36);
 8020f6e:	ea81 09b0 	eor.w	r9, r1, r0, ror #2
 8020f72:	ea89 09b4 	eor.w	r9, r9, r4, ror #2
 8020f76:	9e07      	ldr	r6, [sp, #28]
 8020f78:	9f01      	ldr	r7, [sp, #4]
 8020f7a:	ea86 0a07 	eor.w	sl, r6, r7
 8020f7e:	ea8e 0a0a 	eor.w	sl, lr, sl
 8020f82:	ea88 080a 	eor.w	r8, r8, sl
 8020f86:	ea4f 7af8 	mov.w	sl, r8, ror #31
 8020f8a:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 8020f8e:	44d1      	add	r9, sl
 8020f90:	eb09 69f2 	add.w	r9, r9, r2, ror #27
 8020f94:	4499      	add	r9, r3
 8020f96:	eb09 08b5 	add.w	r8, r9, r5, ror #2
  R2(d, e, a, b, c, 37);
 8020f9a:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8020f9e:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8020fa2:	9e08      	ldr	r6, [sp, #32]
 8020fa4:	9f02      	ldr	r7, [sp, #8]
 8020fa6:	ea86 0907 	eor.w	r9, r6, r7
 8020faa:	ea8c 0909 	eor.w	r9, ip, r9
 8020fae:	9e03      	ldr	r6, [sp, #12]
 8020fb0:	ea86 0709 	eor.w	r7, r6, r9
 8020fb4:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8020fb8:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8020fbc:	444d      	add	r5, r9
 8020fbe:	eb05 65f8 	add.w	r5, r5, r8, ror #27
 8020fc2:	441d      	add	r5, r3
 8020fc4:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(c, d, e, a, b, 38);
 8020fc8:	ea88 04b2 	eor.w	r4, r8, r2, ror #2
 8020fcc:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8020fd0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8020fd2:	ea87 070b 	eor.w	r7, r7, fp
 8020fd6:	9e04      	ldr	r6, [sp, #16]
 8020fd8:	4077      	eors	r7, r6
 8020fda:	ea8e 0e07 	eor.w	lr, lr, r7
 8020fde:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8020fe2:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8020fe6:	4474      	add	r4, lr
 8020fe8:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8020fec:	441c      	add	r4, r3
 8020fee:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(b, c, d, e, a, 39);
 8020ff2:	ea85 00b8 	eor.w	r0, r5, r8, ror #2
 8020ff6:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8020ffa:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8020ffc:	ea87 070a 	eor.w	r7, r7, sl
 8021000:	9e05      	ldr	r6, [sp, #20]
 8021002:	4077      	eors	r7, r6
 8021004:	ea8c 0c07 	eor.w	ip, ip, r7
 8021008:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 802100c:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8021010:	f8cd c00c 	str.w	ip, [sp, #12]
 8021014:	4460      	add	r0, ip
 8021016:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 802101a:	4418      	add	r0, r3
 802101c:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(a, b, c, d, e, 40);
 8021020:	ea44 01b5 	orr.w	r1, r4, r5, ror #2
 8021024:	ea01 01b8 	and.w	r1, r1, r8, ror #2
 8021028:	ea04 03b5 	and.w	r3, r4, r5, ror #2
 802102c:	4319      	orrs	r1, r3
 802102e:	9b00      	ldr	r3, [sp, #0]
 8021030:	ea83 0309 	eor.w	r3, r3, r9
 8021034:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021036:	4073      	eors	r3, r6
 8021038:	9e04      	ldr	r6, [sp, #16]
 802103a:	405e      	eors	r6, r3
 802103c:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8021040:	9316      	str	r3, [sp, #88]	@ 0x58
 8021042:	9304      	str	r3, [sp, #16]
 8021044:	4419      	add	r1, r3
 8021046:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 802104a:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 802104e:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8021052:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8021056:	311c      	adds	r1, #28
 8021058:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(e, a, b, c, d, 41);
 802105c:	ea40 02b4 	orr.w	r2, r0, r4, ror #2
 8021060:	ea02 02b5 	and.w	r2, r2, r5, ror #2
 8021064:	ea00 06b4 	and.w	r6, r0, r4, ror #2
 8021068:	4332      	orrs	r2, r6
 802106a:	9b01      	ldr	r3, [sp, #4]
 802106c:	ea83 060e 	eor.w	r6, r3, lr
 8021070:	9b06      	ldr	r3, [sp, #24]
 8021072:	405e      	eors	r6, r3
 8021074:	9f05      	ldr	r7, [sp, #20]
 8021076:	407e      	eors	r6, r7
 8021078:	ea4f 77f6 	mov.w	r7, r6, ror #31
 802107c:	9717      	str	r7, [sp, #92]	@ 0x5c
 802107e:	9705      	str	r7, [sp, #20]
 8021080:	443a      	add	r2, r7
 8021082:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021086:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802108a:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 802108e:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8021092:	321c      	adds	r2, #28
 8021094:	eb02 02b8 	add.w	r2, r2, r8, ror #2
  R3(d, e, a, b, c, 42);
 8021098:	ea41 06b0 	orr.w	r6, r1, r0, ror #2
 802109c:	ea06 06b4 	and.w	r6, r6, r4, ror #2
 80210a0:	ea01 07b0 	and.w	r7, r1, r0, ror #2
 80210a4:	433e      	orrs	r6, r7
 80210a6:	9f02      	ldr	r7, [sp, #8]
 80210a8:	4663      	mov	r3, ip
 80210aa:	405f      	eors	r7, r3
 80210ac:	9b07      	ldr	r3, [sp, #28]
 80210ae:	405f      	eors	r7, r3
 80210b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80210b2:	405f      	eors	r7, r3
 80210b4:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80210b8:	9718      	str	r7, [sp, #96]	@ 0x60
 80210ba:	970b      	str	r7, [sp, #44]	@ 0x2c
 80210bc:	443e      	add	r6, r7
 80210be:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 80210c2:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80210c6:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80210ca:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80210ce:	361c      	adds	r6, #28
 80210d0:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R3(c, d, e, a, b, 43);
 80210d4:	ea42 07b1 	orr.w	r7, r2, r1, ror #2
 80210d8:	ea07 07b0 	and.w	r7, r7, r0, ror #2
 80210dc:	ea02 05b1 	and.w	r5, r2, r1, ror #2
 80210e0:	432f      	orrs	r7, r5
 80210e2:	9d04      	ldr	r5, [sp, #16]
 80210e4:	ea8b 0505 	eor.w	r5, fp, r5
 80210e8:	9b08      	ldr	r3, [sp, #32]
 80210ea:	405d      	eors	r5, r3
 80210ec:	9b06      	ldr	r3, [sp, #24]
 80210ee:	405d      	eors	r5, r3
 80210f0:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80210f4:	9519      	str	r5, [sp, #100]	@ 0x64
 80210f6:	9506      	str	r5, [sp, #24]
 80210f8:	442f      	add	r7, r5
 80210fa:	eb07 67f6 	add.w	r7, r7, r6, ror #27
 80210fe:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 8021102:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 8021106:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 802110a:	371c      	adds	r7, #28
 802110c:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R3(b, c, d, e, a, 44);
 8021110:	ea46 0cb2 	orr.w	ip, r6, r2, ror #2
 8021114:	ea0c 0cb1 	and.w	ip, ip, r1, ror #2
 8021118:	ea06 04b2 	and.w	r4, r6, r2, ror #2
 802111c:	ea4c 0c04 	orr.w	ip, ip, r4
 8021120:	9c05      	ldr	r4, [sp, #20]
 8021122:	ea8a 0404 	eor.w	r4, sl, r4
 8021126:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021128:	406c      	eors	r4, r5
 802112a:	9b07      	ldr	r3, [sp, #28]
 802112c:	405c      	eors	r4, r3
 802112e:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021132:	941a      	str	r4, [sp, #104]	@ 0x68
 8021134:	9407      	str	r4, [sp, #28]
 8021136:	44a4      	add	ip, r4
 8021138:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
 802113c:	f10c 4c0f 	add.w	ip, ip, #2399141888	@ 0x8f000000
 8021140:	f50c 1cdd 	add.w	ip, ip, #1810432	@ 0x1ba000
 8021144:	f50c 5ce6 	add.w	ip, ip, #7360	@ 0x1cc0
 8021148:	f10c 0c1c 	add.w	ip, ip, #28
 802114c:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R3(a, b, c, d, e, 45);
 8021150:	ea47 00b6 	orr.w	r0, r7, r6, ror #2
 8021154:	ea00 00b2 	and.w	r0, r0, r2, ror #2
 8021158:	ea07 04b6 	and.w	r4, r7, r6, ror #2
 802115c:	4320      	orrs	r0, r4
 802115e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021160:	ea89 0404 	eor.w	r4, r9, r4
 8021164:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021166:	406c      	eors	r4, r5
 8021168:	9b08      	ldr	r3, [sp, #32]
 802116a:	405c      	eors	r4, r3
 802116c:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021170:	941b      	str	r4, [sp, #108]	@ 0x6c
 8021172:	9408      	str	r4, [sp, #32]
 8021174:	4420      	add	r0, r4
 8021176:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 802117a:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 802117e:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8021182:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8021186:	301c      	adds	r0, #28
 8021188:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(e, a, b, c, d, 46);
 802118c:	ea4c 05b7 	orr.w	r5, ip, r7, ror #2
 8021190:	ea05 05b6 	and.w	r5, r5, r6, ror #2
 8021194:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 8021198:	430d      	orrs	r5, r1
 802119a:	9906      	ldr	r1, [sp, #24]
 802119c:	ea8e 0101 	eor.w	r1, lr, r1
 80211a0:	9c00      	ldr	r4, [sp, #0]
 80211a2:	4061      	eors	r1, r4
 80211a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80211a6:	4059      	eors	r1, r3
 80211a8:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80211ac:	911c      	str	r1, [sp, #112]	@ 0x70
 80211ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80211b0:	440d      	add	r5, r1
 80211b2:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 80211b6:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 80211ba:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 80211be:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 80211c2:	351c      	adds	r5, #28
 80211c4:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R3(d, e, a, b, c, 47);
 80211c8:	ea40 04bc 	orr.w	r4, r0, ip, ror #2
 80211cc:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 80211d0:	ea00 02bc 	and.w	r2, r0, ip, ror #2
 80211d4:	4314      	orrs	r4, r2
 80211d6:	9903      	ldr	r1, [sp, #12]
 80211d8:	9a07      	ldr	r2, [sp, #28]
 80211da:	404a      	eors	r2, r1
 80211dc:	9901      	ldr	r1, [sp, #4]
 80211de:	404a      	eors	r2, r1
 80211e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80211e2:	405a      	eors	r2, r3
 80211e4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80211e8:	921d      	str	r2, [sp, #116]	@ 0x74
 80211ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80211ec:	4414      	add	r4, r2
 80211ee:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80211f2:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 80211f6:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 80211fa:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 80211fe:	341c      	adds	r4, #28
 8021200:	eb04 04b6 	add.w	r4, r4, r6, ror #2
  R3(c, d, e, a, b, 48);
 8021204:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8021208:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 802120c:	ea05 02b0 	and.w	r2, r5, r0, ror #2
 8021210:	4311      	orrs	r1, r2
 8021212:	9a04      	ldr	r2, [sp, #16]
 8021214:	9e08      	ldr	r6, [sp, #32]
 8021216:	4072      	eors	r2, r6
 8021218:	9e02      	ldr	r6, [sp, #8]
 802121a:	4072      	eors	r2, r6
 802121c:	9b00      	ldr	r3, [sp, #0]
 802121e:	405a      	eors	r2, r3
 8021220:	ea4f 76f2 	mov.w	r6, r2, ror #31
 8021224:	960e      	str	r6, [sp, #56]	@ 0x38
 8021226:	9600      	str	r6, [sp, #0]
 8021228:	4431      	add	r1, r6
 802122a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 802122e:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8021232:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8021236:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 802123a:	311c      	adds	r1, #28
 802123c:	eb01 01b7 	add.w	r1, r1, r7, ror #2
  R3(b, c, d, e, a, 49);
 8021240:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 8021244:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8021248:	ea04 06b5 	and.w	r6, r4, r5, ror #2
 802124c:	4332      	orrs	r2, r6
 802124e:	9f05      	ldr	r7, [sp, #20]
 8021250:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8021252:	407e      	eors	r6, r7
 8021254:	ea8b 0606 	eor.w	r6, fp, r6
 8021258:	9b01      	ldr	r3, [sp, #4]
 802125a:	405e      	eors	r6, r3
 802125c:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8021260:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021262:	9301      	str	r3, [sp, #4]
 8021264:	441a      	add	r2, r3
 8021266:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802126a:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802126e:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8021272:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8021276:	321c      	adds	r2, #28
 8021278:	eb02 02bc 	add.w	r2, r2, ip, ror #2
  R3(a, b, c, d, e, 50);
 802127c:	ea41 06b4 	orr.w	r6, r1, r4, ror #2
 8021280:	ea06 06b5 	and.w	r6, r6, r5, ror #2
 8021284:	ea01 07b4 	and.w	r7, r1, r4, ror #2
 8021288:	433e      	orrs	r6, r7
 802128a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802128c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802128e:	405f      	eors	r7, r3
 8021290:	ea8a 0707 	eor.w	r7, sl, r7
 8021294:	9b02      	ldr	r3, [sp, #8]
 8021296:	405f      	eors	r7, r3
 8021298:	ea4f 77f7 	mov.w	r7, r7, ror #31
 802129c:	9710      	str	r7, [sp, #64]	@ 0x40
 802129e:	9702      	str	r7, [sp, #8]
 80212a0:	443e      	add	r6, r7
 80212a2:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 80212a6:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80212aa:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80212ae:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80212b2:	361c      	adds	r6, #28
 80212b4:	eb06 06b0 	add.w	r6, r6, r0, ror #2
  R3(e, a, b, c, d, 51);
 80212b8:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 80212bc:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 80212c0:	ea02 07b1 	and.w	r7, r2, r1, ror #2
 80212c4:	4338      	orrs	r0, r7
 80212c6:	9b06      	ldr	r3, [sp, #24]
 80212c8:	9f00      	ldr	r7, [sp, #0]
 80212ca:	405f      	eors	r7, r3
 80212cc:	ea89 0707 	eor.w	r7, r9, r7
 80212d0:	ea8b 0b07 	eor.w	fp, fp, r7
 80212d4:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 80212d8:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80212dc:	4460      	add	r0, ip
 80212de:	eb00 60f6 	add.w	r0, r0, r6, ror #27
 80212e2:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 80212e6:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 80212ea:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 80212ee:	301c      	adds	r0, #28
 80212f0:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(d, e, a, b, c, 52);
 80212f4:	ea46 05b2 	orr.w	r5, r6, r2, ror #2
 80212f8:	ea05 05b1 	and.w	r5, r5, r1, ror #2
 80212fc:	ea06 07b2 	and.w	r7, r6, r2, ror #2
 8021300:	433d      	orrs	r5, r7
 8021302:	9f07      	ldr	r7, [sp, #28]
 8021304:	9b01      	ldr	r3, [sp, #4]
 8021306:	405f      	eors	r7, r3
 8021308:	ea8e 0707 	eor.w	r7, lr, r7
 802130c:	ea8a 0a07 	eor.w	sl, sl, r7
 8021310:	ea4f 78fa 	mov.w	r8, sl, ror #31
 8021314:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8021318:	4445      	add	r5, r8
 802131a:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 802131e:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 8021322:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 8021326:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 802132a:	351c      	adds	r5, #28
 802132c:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R3(c, d, e, a, b, 53);
 8021330:	ea40 04b6 	orr.w	r4, r0, r6, ror #2
 8021334:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8021338:	ea00 07b6 	and.w	r7, r0, r6, ror #2
 802133c:	433c      	orrs	r4, r7
 802133e:	9b08      	ldr	r3, [sp, #32]
 8021340:	9f02      	ldr	r7, [sp, #8]
 8021342:	405f      	eors	r7, r3
 8021344:	9b03      	ldr	r3, [sp, #12]
 8021346:	405f      	eors	r7, r3
 8021348:	ea89 0707 	eor.w	r7, r9, r7
 802134c:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8021350:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8021354:	444c      	add	r4, r9
 8021356:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 802135a:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 802135e:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8021362:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8021366:	341c      	adds	r4, #28
 8021368:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R3(b, c, d, e, a, 54);
 802136c:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8021370:	ea01 01b6 	and.w	r1, r1, r6, ror #2
 8021374:	ea05 07b0 	and.w	r7, r5, r0, ror #2
 8021378:	4339      	orrs	r1, r7
 802137a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802137c:	ea83 070c 	eor.w	r7, r3, ip
 8021380:	9b04      	ldr	r3, [sp, #16]
 8021382:	405f      	eors	r7, r3
 8021384:	ea8e 0707 	eor.w	r7, lr, r7
 8021388:	ea4f 77f7 	mov.w	r7, r7, ror #31
 802138c:	9714      	str	r7, [sp, #80]	@ 0x50
 802138e:	970c      	str	r7, [sp, #48]	@ 0x30
 8021390:	4439      	add	r1, r7
 8021392:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8021396:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 802139a:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 802139e:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 80213a2:	311c      	adds	r1, #28
 80213a4:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(a, b, c, d, e, 55);
 80213a8:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 80213ac:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 80213b0:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 80213b4:	433a      	orrs	r2, r7
 80213b6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80213b8:	ea87 0708 	eor.w	r7, r7, r8
 80213bc:	9b05      	ldr	r3, [sp, #20]
 80213be:	405f      	eors	r7, r3
 80213c0:	9b03      	ldr	r3, [sp, #12]
 80213c2:	405f      	eors	r7, r3
 80213c4:	ea4f 7bf7 	mov.w	fp, r7, ror #31
 80213c8:	f8cd b054 	str.w	fp, [sp, #84]	@ 0x54
 80213cc:	445a      	add	r2, fp
 80213ce:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80213d2:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 80213d6:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 80213da:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 80213de:	321c      	adds	r2, #28
 80213e0:	eb02 02b6 	add.w	r2, r2, r6, ror #2
  R3(e, a, b, c, d, 56);
 80213e4:	ea41 07b4 	orr.w	r7, r1, r4, ror #2
 80213e8:	ea07 07b5 	and.w	r7, r7, r5, ror #2
 80213ec:	ea01 06b4 	and.w	r6, r1, r4, ror #2
 80213f0:	4337      	orrs	r7, r6
 80213f2:	9e00      	ldr	r6, [sp, #0]
 80213f4:	ea86 0609 	eor.w	r6, r6, r9
 80213f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80213fa:	405e      	eors	r6, r3
 80213fc:	9b04      	ldr	r3, [sp, #16]
 80213fe:	405e      	eors	r6, r3
 8021400:	ea4f 7af6 	mov.w	sl, r6, ror #31
 8021404:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 8021408:	4457      	add	r7, sl
 802140a:	eb07 67f2 	add.w	r7, r7, r2, ror #27
 802140e:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 8021412:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 8021416:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 802141a:	371c      	adds	r7, #28
 802141c:	eb07 07b0 	add.w	r7, r7, r0, ror #2
  R3(d, e, a, b, c, 57);
 8021420:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 8021424:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8021428:	ea02 06b1 	and.w	r6, r2, r1, ror #2
 802142c:	4330      	orrs	r0, r6
 802142e:	9e01      	ldr	r6, [sp, #4]
 8021430:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021432:	405e      	eors	r6, r3
 8021434:	9b06      	ldr	r3, [sp, #24]
 8021436:	405e      	eors	r6, r3
 8021438:	9b05      	ldr	r3, [sp, #20]
 802143a:	405e      	eors	r6, r3
 802143c:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8021440:	9617      	str	r6, [sp, #92]	@ 0x5c
 8021442:	9603      	str	r6, [sp, #12]
 8021444:	4430      	add	r0, r6
 8021446:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 802144a:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 802144e:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8021452:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8021456:	301c      	adds	r0, #28
 8021458:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(c, d, e, a, b, 58);
 802145c:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 8021460:	ea06 06b1 	and.w	r6, r6, r1, ror #2
 8021464:	ea07 05b2 	and.w	r5, r7, r2, ror #2
 8021468:	432e      	orrs	r6, r5
 802146a:	9d02      	ldr	r5, [sp, #8]
 802146c:	ea85 050b 	eor.w	r5, r5, fp
 8021470:	9b07      	ldr	r3, [sp, #28]
 8021472:	405d      	eors	r5, r3
 8021474:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021476:	405d      	eors	r5, r3
 8021478:	ea4f 75f5 	mov.w	r5, r5, ror #31
 802147c:	9518      	str	r5, [sp, #96]	@ 0x60
 802147e:	9504      	str	r5, [sp, #16]
 8021480:	442e      	add	r6, r5
 8021482:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 8021486:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 802148a:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 802148e:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 8021492:	361c      	adds	r6, #28
 8021494:	eb06 06b4 	add.w	r6, r6, r4, ror #2
  R3(b, c, d, e, a, 59);
 8021498:	ea40 04b7 	orr.w	r4, r0, r7, ror #2
 802149c:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 80214a0:	ea00 05b7 	and.w	r5, r0, r7, ror #2
 80214a4:	432c      	orrs	r4, r5
 80214a6:	ea8c 050a 	eor.w	r5, ip, sl
 80214aa:	9b08      	ldr	r3, [sp, #32]
 80214ac:	405d      	eors	r5, r3
 80214ae:	9b06      	ldr	r3, [sp, #24]
 80214b0:	405d      	eors	r5, r3
 80214b2:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80214b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80214b8:	9505      	str	r5, [sp, #20]
 80214ba:	442c      	add	r4, r5
 80214bc:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 80214c0:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 80214c4:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 80214c8:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 80214cc:	341c      	adds	r4, #28
 80214ce:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R4(a, b, c, d, e, 60);
 80214d2:	ea86 01b0 	eor.w	r1, r6, r0, ror #2
 80214d6:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 80214da:	9d03      	ldr	r5, [sp, #12]
 80214dc:	ea88 0305 	eor.w	r3, r8, r5
 80214e0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80214e2:	406b      	eors	r3, r5
 80214e4:	9d07      	ldr	r5, [sp, #28]
 80214e6:	406b      	eors	r3, r5
 80214e8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80214ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80214ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80214f0:	4419      	add	r1, r3
 80214f2:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80214f6:	f8df e3fc 	ldr.w	lr, [pc, #1020]	@ 80218f4 <mg_sha1_transform+0xf84>
 80214fa:	4471      	add	r1, lr
 80214fc:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R4(e, a, b, c, d, 61);
 8021500:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 8021504:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8021508:	9b04      	ldr	r3, [sp, #16]
 802150a:	ea89 0303 	eor.w	r3, r9, r3
 802150e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021510:	406b      	eors	r3, r5
 8021512:	9d08      	ldr	r5, [sp, #32]
 8021514:	406b      	eors	r3, r5
 8021516:	ea4f 73f3 	mov.w	r3, r3, ror #31
 802151a:	931b      	str	r3, [sp, #108]	@ 0x6c
 802151c:	9306      	str	r3, [sp, #24]
 802151e:	441a      	add	r2, r3
 8021520:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021524:	4472      	add	r2, lr
 8021526:	eb02 02b7 	add.w	r2, r2, r7, ror #2
  R4(d, e, a, b, c, 62);
 802152a:	ea81 03b4 	eor.w	r3, r1, r4, ror #2
 802152e:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 8021532:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021534:	9d05      	ldr	r5, [sp, #20]
 8021536:	406f      	eors	r7, r5
 8021538:	9d00      	ldr	r5, [sp, #0]
 802153a:	406f      	eors	r7, r5
 802153c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802153e:	406f      	eors	r7, r5
 8021540:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021544:	971c      	str	r7, [sp, #112]	@ 0x70
 8021546:	9707      	str	r7, [sp, #28]
 8021548:	443b      	add	r3, r7
 802154a:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 802154e:	4473      	add	r3, lr
 8021550:	eb03 03b0 	add.w	r3, r3, r0, ror #2
  R4(c, d, e, a, b, 63);
 8021554:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8021558:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 802155c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802155e:	ea8b 0707 	eor.w	r7, fp, r7
 8021562:	9d01      	ldr	r5, [sp, #4]
 8021564:	406f      	eors	r7, r5
 8021566:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021568:	406f      	eors	r7, r5
 802156a:	ea4f 77f7 	mov.w	r7, r7, ror #31
 802156e:	971d      	str	r7, [sp, #116]	@ 0x74
 8021570:	9708      	str	r7, [sp, #32]
 8021572:	4438      	add	r0, r7
 8021574:	eb00 60f3 	add.w	r0, r0, r3, ror #27
 8021578:	4470      	add	r0, lr
 802157a:	eb00 00b6 	add.w	r0, r0, r6, ror #2
  R4(b, c, d, e, a, 64);
 802157e:	ea83 07b2 	eor.w	r7, r3, r2, ror #2
 8021582:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 8021586:	9e06      	ldr	r6, [sp, #24]
 8021588:	ea8a 0606 	eor.w	r6, sl, r6
 802158c:	9d02      	ldr	r5, [sp, #8]
 802158e:	406e      	eors	r6, r5
 8021590:	9d00      	ldr	r5, [sp, #0]
 8021592:	406e      	eors	r6, r5
 8021594:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8021598:	960e      	str	r6, [sp, #56]	@ 0x38
 802159a:	9600      	str	r6, [sp, #0]
 802159c:	4437      	add	r7, r6
 802159e:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 80215a2:	4477      	add	r7, lr
 80215a4:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R4(a, b, c, d, e, 65);
 80215a8:	ea80 06b3 	eor.w	r6, r0, r3, ror #2
 80215ac:	ea86 06b2 	eor.w	r6, r6, r2, ror #2
 80215b0:	9c03      	ldr	r4, [sp, #12]
 80215b2:	9d07      	ldr	r5, [sp, #28]
 80215b4:	406c      	eors	r4, r5
 80215b6:	ea8c 0404 	eor.w	r4, ip, r4
 80215ba:	9d01      	ldr	r5, [sp, #4]
 80215bc:	406c      	eors	r4, r5
 80215be:	ea4f 74f4 	mov.w	r4, r4, ror #31
 80215c2:	940f      	str	r4, [sp, #60]	@ 0x3c
 80215c4:	9401      	str	r4, [sp, #4]
 80215c6:	4426      	add	r6, r4
 80215c8:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 80215cc:	4476      	add	r6, lr
 80215ce:	eb06 06b1 	add.w	r6, r6, r1, ror #2
  R4(e, a, b, c, d, 66);
 80215d2:	ea87 05b0 	eor.w	r5, r7, r0, ror #2
 80215d6:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 80215da:	9904      	ldr	r1, [sp, #16]
 80215dc:	9c08      	ldr	r4, [sp, #32]
 80215de:	4061      	eors	r1, r4
 80215e0:	ea88 0101 	eor.w	r1, r8, r1
 80215e4:	9c02      	ldr	r4, [sp, #8]
 80215e6:	4061      	eors	r1, r4
 80215e8:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80215ec:	9110      	str	r1, [sp, #64]	@ 0x40
 80215ee:	440d      	add	r5, r1
 80215f0:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 80215f4:	4475      	add	r5, lr
 80215f6:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R4(d, e, a, b, c, 67);
 80215fa:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 80215fe:	ea8e 0eb0 	eor.w	lr, lr, r0, ror #2
 8021602:	9a05      	ldr	r2, [sp, #20]
 8021604:	9c00      	ldr	r4, [sp, #0]
 8021606:	4062      	eors	r2, r4
 8021608:	ea89 0202 	eor.w	r2, r9, r2
 802160c:	ea8c 0202 	eor.w	r2, ip, r2
 8021610:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021614:	9211      	str	r2, [sp, #68]	@ 0x44
 8021616:	4496      	add	lr, r2
 8021618:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 802161c:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8021620:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8021624:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8021628:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 802162c:	eb0e 0eb3 	add.w	lr, lr, r3, ror #2
  R4(c, d, e, a, b, 68);
 8021630:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8021634:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8021638:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802163a:	9c01      	ldr	r4, [sp, #4]
 802163c:	4063      	eors	r3, r4
 802163e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021640:	4063      	eors	r3, r4
 8021642:	ea88 0303 	eor.w	r3, r8, r3
 8021646:	ea4f 73f3 	mov.w	r3, r3, ror #31
 802164a:	9312      	str	r3, [sp, #72]	@ 0x48
 802164c:	449c      	add	ip, r3
 802164e:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8021652:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8021656:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 802165a:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 802165e:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8021662:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R4(b, c, d, e, a, 69);
 8021666:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 802166a:	ea88 08b6 	eor.w	r8, r8, r6, ror #2
 802166e:	9806      	ldr	r0, [sp, #24]
 8021670:	4048      	eors	r0, r1
 8021672:	ea8b 0000 	eor.w	r0, fp, r0
 8021676:	ea89 0000 	eor.w	r0, r9, r0
 802167a:	ea4f 70f0 	mov.w	r0, r0, ror #31
 802167e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021680:	4480      	add	r8, r0
 8021682:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8021686:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 802168a:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 802168e:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8021692:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8021696:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(a, b, c, d, e, 70);
 802169a:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 802169e:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 80216a2:	9702      	str	r7, [sp, #8]
 80216a4:	9f07      	ldr	r7, [sp, #28]
 80216a6:	ea87 0902 	eor.w	r9, r7, r2
 80216aa:	ea8a 0909 	eor.w	r9, sl, r9
 80216ae:	ea84 0909 	eor.w	r9, r4, r9
 80216b2:	ea4f 79f9 	mov.w	r9, r9, ror #31
 80216b6:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 80216ba:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80216be:	9c02      	ldr	r4, [sp, #8]
 80216c0:	444c      	add	r4, r9
 80216c2:	eb04 67f8 	add.w	r7, r4, r8, ror #27
 80216c6:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 80216ca:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 80216ce:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 80216d2:	3756      	adds	r7, #86	@ 0x56
 80216d4:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(e, a, b, c, d, 71);
 80216d8:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 80216dc:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 80216e0:	9c08      	ldr	r4, [sp, #32]
 80216e2:	ea84 0903 	eor.w	r9, r4, r3
 80216e6:	9c03      	ldr	r4, [sp, #12]
 80216e8:	ea84 0909 	eor.w	r9, r4, r9
 80216ec:	ea8b 0909 	eor.w	r9, fp, r9
 80216f0:	ea4f 79f9 	mov.w	r9, r9, ror #31
 80216f4:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
 80216f8:	444e      	add	r6, r9
 80216fa:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 80216fe:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8021702:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8021706:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 802170a:	3656      	adds	r6, #86	@ 0x56
 802170c:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(d, e, a, b, c, 72);
 8021710:	ea87 05b8 	eor.w	r5, r7, r8, ror #2
 8021714:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8021718:	9c00      	ldr	r4, [sp, #0]
 802171a:	ea84 0b00 	eor.w	fp, r4, r0
 802171e:	9c04      	ldr	r4, [sp, #16]
 8021720:	ea84 0b0b 	eor.w	fp, r4, fp
 8021724:	ea8a 0b0b 	eor.w	fp, sl, fp
 8021728:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 802172c:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 8021730:	445d      	add	r5, fp
 8021732:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8021736:	f105 454a 	add.w	r5, r5, #3388997632	@ 0xca000000
 802173a:	f505 05c5 	add.w	r5, r5, #6455296	@ 0x628000
 802173e:	f505 4583 	add.w	r5, r5, #16768	@ 0x4180
 8021742:	3556      	adds	r5, #86	@ 0x56
 8021744:	eb05 05be 	add.w	r5, r5, lr, ror #2
  R4(c, d, e, a, b, 73);
 8021748:	9602      	str	r6, [sp, #8]
 802174a:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 802174e:	ea8e 0eb8 	eor.w	lr, lr, r8, ror #2
 8021752:	9c01      	ldr	r4, [sp, #4]
 8021754:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8021756:	ea84 0a06 	eor.w	sl, r4, r6
 802175a:	9c05      	ldr	r4, [sp, #20]
 802175c:	ea84 0a0a 	eor.w	sl, r4, sl
 8021760:	9c03      	ldr	r4, [sp, #12]
 8021762:	ea84 0a0a 	eor.w	sl, r4, sl
 8021766:	ea4f 7afa 	mov.w	sl, sl, ror #31
 802176a:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
 802176e:	44d6      	add	lr, sl
 8021770:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8021774:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8021778:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 802177c:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8021780:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8021784:	eb0e 0ebc 	add.w	lr, lr, ip, ror #2
  R4(b, c, d, e, a, 74);
 8021788:	9e02      	ldr	r6, [sp, #8]
 802178a:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 802178e:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8021792:	ea81 0109 	eor.w	r1, r1, r9
 8021796:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021798:	4071      	eors	r1, r6
 802179a:	9c04      	ldr	r4, [sp, #16]
 802179c:	4061      	eors	r1, r4
 802179e:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80217a2:	9118      	str	r1, [sp, #96]	@ 0x60
 80217a4:	448c      	add	ip, r1
 80217a6:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 80217aa:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 80217ae:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 80217b2:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 80217b6:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 80217ba:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
  R4(a, b, c, d, e, 75);
 80217be:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 80217c2:	9c02      	ldr	r4, [sp, #8]
 80217c4:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 80217c8:	ea82 020b 	eor.w	r2, r2, fp
 80217cc:	9c06      	ldr	r4, [sp, #24]
 80217ce:	4062      	eors	r2, r4
 80217d0:	9c05      	ldr	r4, [sp, #20]
 80217d2:	4062      	eors	r2, r4
 80217d4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80217d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80217da:	4490      	add	r8, r2
 80217dc:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 80217e0:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 80217e4:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 80217e8:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 80217ec:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 80217f0:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(e, a, b, c, d, 76);
 80217f4:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 80217f8:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 80217fc:	ea83 030a 	eor.w	r3, r3, sl
 8021800:	9c07      	ldr	r4, [sp, #28]
 8021802:	4063      	eors	r3, r4
 8021804:	4073      	eors	r3, r6
 8021806:	ea4f 73f3 	mov.w	r3, r3, ror #31
 802180a:	931a      	str	r3, [sp, #104]	@ 0x68
 802180c:	441f      	add	r7, r3
 802180e:	eb07 67f8 	add.w	r7, r7, r8, ror #27
 8021812:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8021816:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 802181a:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 802181e:	3756      	adds	r7, #86	@ 0x56
 8021820:	9e02      	ldr	r6, [sp, #8]
 8021822:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(d, e, a, b, c, 77);
 8021826:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 802182a:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 802182e:	4048      	eors	r0, r1
 8021830:	9908      	ldr	r1, [sp, #32]
 8021832:	4048      	eors	r0, r1
 8021834:	9c06      	ldr	r4, [sp, #24]
 8021836:	4060      	eors	r0, r4
 8021838:	ea4f 70f0 	mov.w	r0, r0, ror #31
 802183c:	901b      	str	r0, [sp, #108]	@ 0x6c
 802183e:	4406      	add	r6, r0
 8021840:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8021844:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8021848:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 802184c:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8021850:	3656      	adds	r6, #86	@ 0x56
 8021852:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(c, d, e, a, b, 78);
 8021856:	ea87 01b8 	eor.w	r1, r7, r8, ror #2
 802185a:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 802185e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021860:	406a      	eors	r2, r5
 8021862:	9d00      	ldr	r5, [sp, #0]
 8021864:	406a      	eors	r2, r5
 8021866:	9c07      	ldr	r4, [sp, #28]
 8021868:	4062      	eors	r2, r4
 802186a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 802186e:	921c      	str	r2, [sp, #112]	@ 0x70
 8021870:	4411      	add	r1, r2
 8021872:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 8021876:	f101 414a 	add.w	r1, r1, #3388997632	@ 0xca000000
 802187a:	f501 01c5 	add.w	r1, r1, #6455296	@ 0x628000
 802187e:	f501 4183 	add.w	r1, r1, #16768	@ 0x4180
 8021882:	3156      	adds	r1, #86	@ 0x56
 8021884:	eb01 01be 	add.w	r1, r1, lr, ror #2
  R4(b, c, d, e, a, 79);
 8021888:	ea86 02b7 	eor.w	r2, r6, r7, ror #2
 802188c:	ea82 02b8 	eor.w	r2, r2, r8, ror #2
 8021890:	ea89 0903 	eor.w	r9, r9, r3
 8021894:	9b01      	ldr	r3, [sp, #4]
 8021896:	ea83 0909 	eor.w	r9, r3, r9
 802189a:	9c08      	ldr	r4, [sp, #32]
 802189c:	ea84 0309 	eor.w	r3, r4, r9
 80218a0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80218a4:	931d      	str	r3, [sp, #116]	@ 0x74
 80218a6:	4413      	add	r3, r2
 80218a8:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80218ac:	f103 434a 	add.w	r3, r3, #3388997632	@ 0xca000000
 80218b0:	f503 03c5 	add.w	r3, r3, #6455296	@ 0x628000
 80218b4:	f503 4383 	add.w	r3, r3, #16768	@ 0x4180
 80218b8:	3356      	adds	r3, #86	@ 0x56
 80218ba:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  state[0] += a;
 80218be:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80218c0:	6802      	ldr	r2, [r0, #0]
 80218c2:	441a      	add	r2, r3
 80218c4:	6002      	str	r2, [r0, #0]
  state[1] += b;
 80218c6:	6843      	ldr	r3, [r0, #4]
 80218c8:	440b      	add	r3, r1
 80218ca:	6043      	str	r3, [r0, #4]
  state[2] += c;
 80218cc:	6883      	ldr	r3, [r0, #8]
 80218ce:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 80218d2:	6083      	str	r3, [r0, #8]
  state[3] += d;
 80218d4:	68c3      	ldr	r3, [r0, #12]
 80218d6:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 80218da:	60c3      	str	r3, [r0, #12]
  state[4] += e;
 80218dc:	6903      	ldr	r3, [r0, #16]
 80218de:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 80218e2:	6103      	str	r3, [r0, #16]
  memset(block, 0, sizeof(block));
 80218e4:	2240      	movs	r2, #64	@ 0x40
 80218e6:	2100      	movs	r1, #0
 80218e8:	a80e      	add	r0, sp, #56	@ 0x38
 80218ea:	f00a f889 	bl	802ba00 <memset>
}
 80218ee:	b01f      	add	sp, #124	@ 0x7c
 80218f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218f4:	ca62c1d6 	.word	0xca62c1d6

080218f8 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 80218f8:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80218fa:	fb01 f400 	mul.w	r4, r1, r0
 80218fe:	4620      	mov	r0, r4
 8021900:	f7f8 f8f2 	bl	8019ae8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8021904:	4605      	mov	r5, r0
 8021906:	b118      	cbz	r0, 8021910 <mg_calloc+0x18>
 8021908:	4622      	mov	r2, r4
 802190a:	2100      	movs	r1, #0
 802190c:	f00a f878 	bl	802ba00 <memset>
}
 8021910:	4628      	mov	r0, r5
 8021912:	bd38      	pop	{r3, r4, r5, pc}

08021914 <mg_print_esc>:
size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8021914:	b570      	push	{r4, r5, r6, lr}
 8021916:	4605      	mov	r5, r0
 8021918:	460e      	mov	r6, r1
  size_t len = (size_t) va_arg(*ap, int);
 802191a:	6811      	ldr	r1, [r2, #0]
 802191c:	1d0c      	adds	r4, r1, #4
 802191e:	6014      	str	r4, [r2, #0]
 8021920:	680b      	ldr	r3, [r1, #0]
  char *p = va_arg(*ap, char *);
 8021922:	f101 0408 	add.w	r4, r1, #8
 8021926:	6014      	str	r4, [r2, #0]
 8021928:	684c      	ldr	r4, [r1, #4]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 802192a:	b923      	cbnz	r3, 8021936 <mg_print_esc+0x22>
 802192c:	b11c      	cbz	r4, 8021936 <mg_print_esc+0x22>
 802192e:	4620      	mov	r0, r4
 8021930:	f7ee fcb6 	bl	80102a0 <strlen>
 8021934:	4603      	mov	r3, r0
  return qcpy(out, arg, p, len);
 8021936:	4622      	mov	r2, r4
 8021938:	4631      	mov	r1, r6
 802193a:	4628      	mov	r0, r5
 802193c:	f7fe fd69 	bl	8020412 <qcpy>
}
 8021940:	bd70      	pop	{r4, r5, r6, pc}

08021942 <getpeer>:
                                     bool lsn) {
 8021942:	b570      	push	{r4, r5, r6, lr}
 8021944:	460d      	mov	r5, r1
 8021946:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 8021948:	6804      	ldr	r4, [r0, #0]
 802194a:	e000      	b.n	802194e <getpeer+0xc>
 802194c:	6824      	ldr	r4, [r4, #0]
 802194e:	b364      	cbz	r4, 80219aa <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 8021950:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8021954:	f013 0f10 	tst.w	r3, #16
 8021958:	d008      	beq.n	802196c <getpeer+0x2a>
 802195a:	69a8      	ldr	r0, [r5, #24]
 802195c:	b130      	cbz	r0, 802196c <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 802195e:	2204      	movs	r2, #4
 8021960:	f104 011c 	add.w	r1, r4, #28
 8021964:	300e      	adds	r0, #14
 8021966:	f009 ffb7 	bl	802b8d8 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 802196a:	b1f0      	cbz	r0, 80219aa <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 802196c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8021970:	f013 0301 	ands.w	r3, r3, #1
 8021974:	d005      	beq.n	8021982 <getpeer+0x40>
 8021976:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8021978:	b11a      	cbz	r2, 8021982 <getpeer+0x40>
 802197a:	8b21      	ldrh	r1, [r4, #24]
 802197c:	8852      	ldrh	r2, [r2, #2]
 802197e:	4291      	cmp	r1, r2
 8021980:	d013      	beq.n	80219aa <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8021982:	2b00      	cmp	r3, #0
 8021984:	d1e2      	bne.n	802194c <getpeer+0xa>
 8021986:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8021988:	2b00      	cmp	r3, #0
 802198a:	d0df      	beq.n	802194c <getpeer+0xa>
 802198c:	8b21      	ldrh	r1, [r4, #24]
 802198e:	885a      	ldrh	r2, [r3, #2]
 8021990:	4291      	cmp	r1, r2
 8021992:	d1db      	bne.n	802194c <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8021994:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 8021998:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 802199c:	42b2      	cmp	r2, r6
 802199e:	d1d5      	bne.n	802194c <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 80219a0:	b91e      	cbnz	r6, 80219aa <getpeer+0x68>
 80219a2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80219a4:	881b      	ldrh	r3, [r3, #0]
 80219a6:	429a      	cmp	r2, r3
 80219a8:	d1d0      	bne.n	802194c <getpeer+0xa>
}
 80219aa:	4620      	mov	r0, r4
 80219ac:	bd70      	pop	{r4, r5, r6, pc}

080219ae <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 80219ae:	b508      	push	{r3, lr}
  putchar(c);
 80219b0:	f009 fa80 	bl	802aeb4 <putchar>
}
 80219b4:	bd08      	pop	{r3, pc}

080219b6 <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 80219b6:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 80219ba:	6802      	ldr	r2, [r0, #0]
 80219bc:	6883      	ldr	r3, [r0, #8]
}
 80219be:	58d0      	ldr	r0, [r2, r3]
 80219c0:	4770      	bx	lr

080219c2 <mg_base64_decode>:
size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 80219c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219c6:	4691      	mov	r9, r2
 80219c8:	469b      	mov	fp, r3
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 80219ca:	4604      	mov	r4, r0
 80219cc:	b150      	cbz	r0, 80219e4 <mg_base64_decode+0x22>
 80219ce:	eb00 0a01 	add.w	sl, r0, r1
  if (dl < n / 4 * 3 + 1) goto fail;
 80219d2:	0889      	lsrs	r1, r1, #2
 80219d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80219d8:	3101      	adds	r1, #1
 80219da:	4559      	cmp	r1, fp
 80219dc:	d847      	bhi.n	8021a6e <mg_base64_decode+0xac>
  size_t len = 0;
 80219de:	f04f 0800 	mov.w	r8, #0
 80219e2:	e003      	b.n	80219ec <mg_base64_decode+0x2a>
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 80219e4:	4682      	mov	sl, r0
 80219e6:	e7f4      	b.n	80219d2 <mg_base64_decode+0x10>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 80219e8:	4690      	mov	r8, r2
    src += 4;
 80219ea:	3404      	adds	r4, #4
  while (src != NULL && src + 3 < end) {
 80219ec:	2c00      	cmp	r4, #0
 80219ee:	d03a      	beq.n	8021a66 <mg_base64_decode+0xa4>
 80219f0:	1ce3      	adds	r3, r4, #3
 80219f2:	4553      	cmp	r3, sl
 80219f4:	d237      	bcs.n	8021a66 <mg_base64_decode+0xa4>
    int a = mg_base64_decode_single(src[0]),
 80219f6:	7820      	ldrb	r0, [r4, #0]
 80219f8:	f7fd f914 	bl	801ec24 <mg_base64_decode_single>
 80219fc:	4606      	mov	r6, r0
        b = mg_base64_decode_single(src[1]),
 80219fe:	7860      	ldrb	r0, [r4, #1]
 8021a00:	f7fd f910 	bl	801ec24 <mg_base64_decode_single>
 8021a04:	4605      	mov	r5, r0
        c = mg_base64_decode_single(src[2]),
 8021a06:	78a0      	ldrb	r0, [r4, #2]
 8021a08:	f7fd f90c 	bl	801ec24 <mg_base64_decode_single>
 8021a0c:	4607      	mov	r7, r0
        d = mg_base64_decode_single(src[3]);
 8021a0e:	78e0      	ldrb	r0, [r4, #3]
 8021a10:	f7fd f908 	bl	801ec24 <mg_base64_decode_single>
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8021a14:	2e40      	cmp	r6, #64	@ 0x40
 8021a16:	d02a      	beq.n	8021a6e <mg_base64_decode+0xac>
 8021a18:	2e00      	cmp	r6, #0
 8021a1a:	db28      	blt.n	8021a6e <mg_base64_decode+0xac>
 8021a1c:	2d40      	cmp	r5, #64	@ 0x40
 8021a1e:	d026      	beq.n	8021a6e <mg_base64_decode+0xac>
 8021a20:	2d00      	cmp	r5, #0
 8021a22:	db24      	blt.n	8021a6e <mg_base64_decode+0xac>
 8021a24:	2f00      	cmp	r7, #0
 8021a26:	db22      	blt.n	8021a6e <mg_base64_decode+0xac>
 8021a28:	2800      	cmp	r0, #0
 8021a2a:	db20      	blt.n	8021a6e <mg_base64_decode+0xac>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8021a2c:	112b      	asrs	r3, r5, #4
 8021a2e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
 8021a32:	f108 0201 	add.w	r2, r8, #1
 8021a36:	f809 3008 	strb.w	r3, [r9, r8]
    if (src[2] != '=') {
 8021a3a:	78a3      	ldrb	r3, [r4, #2]
 8021a3c:	2b3d      	cmp	r3, #61	@ 0x3d
 8021a3e:	d0d3      	beq.n	80219e8 <mg_base64_decode+0x26>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8021a40:	10bb      	asrs	r3, r7, #2
 8021a42:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8021a46:	f108 0102 	add.w	r1, r8, #2
 8021a4a:	f809 3002 	strb.w	r3, [r9, r2]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 8021a4e:	78e3      	ldrb	r3, [r4, #3]
 8021a50:	2b3d      	cmp	r3, #61	@ 0x3d
 8021a52:	d006      	beq.n	8021a62 <mg_base64_decode+0xa0>
 8021a54:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
 8021a58:	f108 0803 	add.w	r8, r8, #3
 8021a5c:	f809 0001 	strb.w	r0, [r9, r1]
 8021a60:	e7c3      	b.n	80219ea <mg_base64_decode+0x28>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8021a62:	4688      	mov	r8, r1
 8021a64:	e7c1      	b.n	80219ea <mg_base64_decode+0x28>
  dst[len] = '\0';
 8021a66:	2300      	movs	r3, #0
 8021a68:	f809 3008 	strb.w	r3, [r9, r8]
  return len;
 8021a6c:	e006      	b.n	8021a7c <mg_base64_decode+0xba>
  if (dl > 0) dst[0] = '\0';
 8021a6e:	f1bb 0f00 	cmp.w	fp, #0
 8021a72:	d006      	beq.n	8021a82 <mg_base64_decode+0xc0>
 8021a74:	f04f 0800 	mov.w	r8, #0
 8021a78:	f889 8000 	strb.w	r8, [r9]
}
 8021a7c:	4640      	mov	r0, r8
 8021a7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 0;
 8021a82:	46d8      	mov	r8, fp
 8021a84:	e7fa      	b.n	8021a7c <mg_base64_decode+0xba>

08021a86 <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 8021a86:	b570      	push	{r4, r5, r6, lr}
 8021a88:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8021a8a:	6843      	ldr	r3, [r0, #4]
 8021a8c:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 8021a90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8021a92:	e000      	b.n	8021a96 <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 8021a94:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 8021a96:	b139      	cbz	r1, 8021aa8 <mg_resolve_cancel+0x22>
    tmp = d->next;
 8021a98:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 8021a9a:	684b      	ldr	r3, [r1, #4]
 8021a9c:	42ab      	cmp	r3, r5
 8021a9e:	d1f9      	bne.n	8021a94 <mg_resolve_cancel+0xe>
 8021aa0:	4630      	mov	r0, r6
 8021aa2:	f7fe fe7a 	bl	802079a <mg_dns_free>
 8021aa6:	e7f5      	b.n	8021a94 <mg_resolve_cancel+0xe>
}
 8021aa8:	bd70      	pop	{r4, r5, r6, pc}

08021aaa <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 8021aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021aac:	b083      	sub	sp, #12
 8021aae:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8021ab0:	1886      	adds	r6, r0, r2
 8021ab2:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 8021ab4:	f04f 0c00 	mov.w	ip, #0
 8021ab8:	f8c4 c000 	str.w	ip, [r4]
 8021abc:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8021ac0:	290b      	cmp	r1, #11
 8021ac2:	d934      	bls.n	8021b2e <mg_dns_parse_rr+0x84>
 8021ac4:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 8021ac6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021aca:	d833      	bhi.n	8021b34 <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 8021acc:	42be      	cmp	r6, r7
 8021ace:	d301      	bcc.n	8021ad4 <mg_dns_parse_rr+0x2a>
 8021ad0:	2000      	movs	r0, #0
 8021ad2:	e02d      	b.n	8021b30 <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8021ad4:	4663      	mov	r3, ip
 8021ad6:	f8cd c000 	str.w	ip, [sp]
 8021ada:	f7fe ff3d 	bl	8020958 <mg_dns_parse_name>
 8021ade:	b283      	uxth	r3, r0
 8021ae0:	8023      	strh	r3, [r4, #0]
 8021ae2:	b34b      	cbz	r3, 8021b38 <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 8021ae4:	3304      	adds	r3, #4
 8021ae6:	441e      	add	r6, r3
  if (s > e) return 0;
 8021ae8:	42b7      	cmp	r7, r6
 8021aea:	d327      	bcc.n	8021b3c <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8021aec:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 8021af0:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 8021af4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021af8:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8021afa:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 8021afe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8021b02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021b06:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8021b08:	b975      	cbnz	r5, 8021b28 <mg_dns_parse_rr+0x7e>
  s += 6;
 8021b0a:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 8021b0c:	429f      	cmp	r7, r3
 8021b0e:	d317      	bcc.n	8021b40 <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8021b10:	7931      	ldrb	r1, [r6, #4]
 8021b12:	7972      	ldrb	r2, [r6, #5]
 8021b14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8021b18:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 8021b1a:	4413      	add	r3, r2
 8021b1c:	42bb      	cmp	r3, r7
 8021b1e:	d811      	bhi.n	8021b44 <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 8021b20:	fa12 f080 	uxtah	r0, r2, r0
 8021b24:	300a      	adds	r0, #10
 8021b26:	e003      	b.n	8021b30 <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 8021b28:	b280      	uxth	r0, r0
 8021b2a:	3004      	adds	r0, #4
 8021b2c:	e000      	b.n	8021b30 <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8021b2e:	2000      	movs	r0, #0
}
 8021b30:	b003      	add	sp, #12
 8021b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 8021b34:	2000      	movs	r0, #0
 8021b36:	e7fb      	b.n	8021b30 <mg_dns_parse_rr+0x86>
    return 0;
 8021b38:	2000      	movs	r0, #0
 8021b3a:	e7f9      	b.n	8021b30 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8021b3c:	2000      	movs	r0, #0
 8021b3e:	e7f7      	b.n	8021b30 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8021b40:	2000      	movs	r0, #0
 8021b42:	e7f5      	b.n	8021b30 <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 8021b44:	2000      	movs	r0, #0
 8021b46:	e7f3      	b.n	8021b30 <mg_dns_parse_rr+0x86>

08021b48 <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8021b48:	b570      	push	{r4, r5, r6, lr}
 8021b4a:	4604      	mov	r4, r0
 8021b4c:	460d      	mov	r5, r1
 8021b4e:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8021b50:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8021b54:	b103      	cbz	r3, 8021b58 <mg_call+0x10>
 8021b56:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8021b58:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8021b5a:	b11b      	cbz	r3, 8021b64 <mg_call+0x1c>
 8021b5c:	4632      	mov	r2, r6
 8021b5e:	4629      	mov	r1, r5
 8021b60:	4620      	mov	r0, r4
 8021b62:	4798      	blx	r3
}
 8021b64:	bd70      	pop	{r4, r5, r6, pc}

08021b66 <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8021b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b68:	4604      	mov	r4, r0
 8021b6a:	460d      	mov	r5, r1
 8021b6c:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8021b6e:	2108      	movs	r1, #8
 8021b70:	2001      	movs	r0, #1
 8021b72:	f7ff fec1 	bl	80218f8 <mg_calloc>
  if (fd != NULL) {
 8021b76:	4607      	mov	r7, r0
 8021b78:	b138      	cbz	r0, 8021b8a <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 8021b7a:	68a3      	ldr	r3, [r4, #8]
 8021b7c:	4631      	mov	r1, r6
 8021b7e:	4628      	mov	r0, r5
 8021b80:	4798      	blx	r3
 8021b82:	4605      	mov	r5, r0
 8021b84:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 8021b86:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 8021b88:	b108      	cbz	r0, 8021b8e <mg_fs_open+0x28>
}
 8021b8a:	4638      	mov	r0, r7
 8021b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 8021b8e:	4638      	mov	r0, r7
 8021b90:	f7f8 f82c 	bl	8019bec <vPortFree>
      fd = NULL;
 8021b94:	462f      	mov	r7, r5
  return fd;
 8021b96:	e7f8      	b.n	8021b8a <mg_fs_open+0x24>

08021b98 <mg_fs_close>:
  if (fd != NULL) {
 8021b98:	b148      	cbz	r0, 8021bae <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 8021b9a:	b510      	push	{r4, lr}
 8021b9c:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 8021b9e:	6843      	ldr	r3, [r0, #4]
 8021ba0:	68db      	ldr	r3, [r3, #12]
 8021ba2:	6800      	ldr	r0, [r0, #0]
 8021ba4:	4798      	blx	r3
    free(fd);
 8021ba6:	4620      	mov	r0, r4
 8021ba8:	f7f8 f820 	bl	8019bec <vPortFree>
}
 8021bac:	bd10      	pop	{r4, pc}
 8021bae:	4770      	bx	lr

08021bb0 <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 8021bb0:	b510      	push	{r4, lr}
 8021bb2:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8021bb4:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8021bb8:	f7ff ffee 	bl	8021b98 <mg_fs_close>
  c->pfn_data = NULL;
 8021bbc:	2200      	movs	r2, #0
 8021bbe:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 8021bc2:	4b05      	ldr	r3, [pc, #20]	@ (8021bd8 <restore_http_cb+0x28>)
 8021bc4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 8021bc8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8021bcc:	f362 13c7 	bfi	r3, r2, #7, #1
 8021bd0:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8021bd4:	bd10      	pop	{r4, pc}
 8021bd6:	bf00      	nop
 8021bd8:	0802548d 	.word	0x0802548d

08021bdc <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8021bdc:	b470      	push	{r4, r5, r6}
 8021bde:	b083      	sub	sp, #12
 8021be0:	ab02      	add	r3, sp, #8
 8021be2:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8021be6:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8021be8:	e000      	b.n	8021bec <mg_to_size_t+0x10>
 8021bea:	3301      	adds	r3, #1
 8021bec:	9c01      	ldr	r4, [sp, #4]
 8021bee:	429c      	cmp	r4, r3
 8021bf0:	d905      	bls.n	8021bfe <mg_to_size_t+0x22>
 8021bf2:	9900      	ldr	r1, [sp, #0]
 8021bf4:	5cc9      	ldrb	r1, [r1, r3]
 8021bf6:	2920      	cmp	r1, #32
 8021bf8:	d0f7      	beq.n	8021bea <mg_to_size_t+0xe>
 8021bfa:	2909      	cmp	r1, #9
 8021bfc:	d0f5      	beq.n	8021bea <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 8021bfe:	429c      	cmp	r4, r3
 8021c00:	d906      	bls.n	8021c10 <mg_to_size_t+0x34>
 8021c02:	9900      	ldr	r1, [sp, #0]
 8021c04:	5cc9      	ldrb	r1, [r1, r3]
 8021c06:	292d      	cmp	r1, #45	@ 0x2d
 8021c08:	d02c      	beq.n	8021c64 <mg_to_size_t+0x88>
 8021c0a:	2500      	movs	r5, #0
 8021c0c:	4628      	mov	r0, r5
 8021c0e:	e001      	b.n	8021c14 <mg_to_size_t+0x38>
 8021c10:	2500      	movs	r5, #0
 8021c12:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8021c14:	429c      	cmp	r4, r3
 8021c16:	d917      	bls.n	8021c48 <mg_to_size_t+0x6c>
 8021c18:	9900      	ldr	r1, [sp, #0]
 8021c1a:	5cc9      	ldrb	r1, [r1, r3]
 8021c1c:	292f      	cmp	r1, #47	@ 0x2f
 8021c1e:	d913      	bls.n	8021c48 <mg_to_size_t+0x6c>
 8021c20:	2939      	cmp	r1, #57	@ 0x39
 8021c22:	d811      	bhi.n	8021c48 <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 8021c24:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 8021c26:	4e15      	ldr	r6, [pc, #84]	@ (8021c7c <mg_to_size_t+0xa0>)
 8021c28:	42b0      	cmp	r0, r6
 8021c2a:	d81d      	bhi.n	8021c68 <mg_to_size_t+0x8c>
    result *= 10;
 8021c2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021c30:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 8021c34:	43ce      	mvns	r6, r1
 8021c36:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 8021c3a:	d317      	bcc.n	8021c6c <mg_to_size_t+0x90>
    result += digit;
 8021c3c:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 8021c40:	3301      	adds	r3, #1
 8021c42:	3501      	adds	r5, #1
 8021c44:	e7e6      	b.n	8021c14 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8021c46:	3301      	adds	r3, #1
 8021c48:	429c      	cmp	r4, r3
 8021c4a:	d905      	bls.n	8021c58 <mg_to_size_t+0x7c>
 8021c4c:	9900      	ldr	r1, [sp, #0]
 8021c4e:	5cc9      	ldrb	r1, [r1, r3]
 8021c50:	2920      	cmp	r1, #32
 8021c52:	d0f8      	beq.n	8021c46 <mg_to_size_t+0x6a>
 8021c54:	2909      	cmp	r1, #9
 8021c56:	d0f6      	beq.n	8021c46 <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8021c58:	b155      	cbz	r5, 8021c70 <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 8021c5a:	429c      	cmp	r4, r3
 8021c5c:	d10c      	bne.n	8021c78 <mg_to_size_t+0x9c>
  *val = (size_t) result;
 8021c5e:	6010      	str	r0, [r2, #0]
  return true;
 8021c60:	2001      	movs	r0, #1
 8021c62:	e006      	b.n	8021c72 <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 8021c64:	2000      	movs	r0, #0
 8021c66:	e004      	b.n	8021c72 <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 8021c68:	2000      	movs	r0, #0
 8021c6a:	e002      	b.n	8021c72 <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 8021c6c:	2000      	movs	r0, #0
 8021c6e:	e000      	b.n	8021c72 <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8021c70:	2000      	movs	r0, #0
}
 8021c72:	b003      	add	sp, #12
 8021c74:	bc70      	pop	{r4, r5, r6}
 8021c76:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 8021c78:	2000      	movs	r0, #0
 8021c7a:	e7fa      	b.n	8021c72 <mg_to_size_t+0x96>
 8021c7c:	19999999 	.word	0x19999999

08021c80 <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8021c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c82:	4606      	mov	r6, r0
 8021c84:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 8021c86:	2400      	movs	r4, #0
 8021c88:	e007      	b.n	8021c9a <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8021c8a:	1933      	adds	r3, r6, r4
 8021c8c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8021c90:	2b0a      	cmp	r3, #10
 8021c92:	d10d      	bne.n	8021cb0 <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8021c94:	1c60      	adds	r0, r4, #1
 8021c96:	e01b      	b.n	8021cd0 <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 8021c98:	3401      	adds	r4, #1
 8021c9a:	42bc      	cmp	r4, r7
 8021c9c:	d217      	bcs.n	8021cce <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 8021c9e:	5d35      	ldrb	r5, [r6, r4]
 8021ca0:	4628      	mov	r0, r5
 8021ca2:	f7fd f944 	bl	801ef2e <isok>
 8021ca6:	b1a0      	cbz	r0, 8021cd2 <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8021ca8:	2c00      	cmp	r4, #0
 8021caa:	d0f5      	beq.n	8021c98 <mg_http_get_request_len+0x18>
 8021cac:	2d0a      	cmp	r5, #10
 8021cae:	d0ec      	beq.n	8021c8a <mg_http_get_request_len+0xa>
 8021cb0:	2c03      	cmp	r4, #3
 8021cb2:	d9f1      	bls.n	8021c98 <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8021cb4:	2d0a      	cmp	r5, #10
 8021cb6:	d1ef      	bne.n	8021c98 <mg_http_get_request_len+0x18>
 8021cb8:	1933      	adds	r3, r6, r4
 8021cba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8021cbe:	2b0d      	cmp	r3, #13
 8021cc0:	d1ea      	bne.n	8021c98 <mg_http_get_request_len+0x18>
 8021cc2:	1933      	adds	r3, r6, r4
 8021cc4:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8021cc8:	2b0a      	cmp	r3, #10
 8021cca:	d1e5      	bne.n	8021c98 <mg_http_get_request_len+0x18>
 8021ccc:	e7e2      	b.n	8021c94 <mg_http_get_request_len+0x14>
  return 0;
 8021cce:	2000      	movs	r0, #0
}
 8021cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 8021cd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021cd6:	e7fb      	b.n	8021cd0 <mg_http_get_request_len+0x50>

08021cd8 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8021cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021cdc:	4605      	mov	r5, r0
 8021cde:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8021ce0:	4608      	mov	r0, r1
 8021ce2:	f7ee fadd 	bl	80102a0 <strlen>
 8021ce6:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8021ce8:	2400      	movs	r4, #0
 8021cea:	e000      	b.n	8021cee <mg_http_get_header+0x16>
 8021cec:	3401      	adds	r4, #1
 8021cee:	2c1d      	cmp	r4, #29
 8021cf0:	d819      	bhi.n	8021d26 <mg_http_get_header+0x4e>
 8021cf2:	1ca3      	adds	r3, r4, #2
 8021cf4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8021cf8:	685a      	ldr	r2, [r3, #4]
 8021cfa:	b17a      	cbz	r2, 8021d1c <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8021cfc:	0123      	lsls	r3, r4, #4
 8021cfe:	3328      	adds	r3, #40	@ 0x28
 8021d00:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8021d04:	42b2      	cmp	r2, r6
 8021d06:	d1f1      	bne.n	8021cec <mg_http_get_header+0x14>
 8021d08:	1ca3      	adds	r3, r4, #2
 8021d0a:	011b      	lsls	r3, r3, #4
 8021d0c:	4632      	mov	r2, r6
 8021d0e:	4639      	mov	r1, r7
 8021d10:	58e8      	ldr	r0, [r5, r3]
 8021d12:	f7fd f8d7 	bl	801eec4 <mg_ncasecmp>
 8021d16:	2800      	cmp	r0, #0
 8021d18:	d1e8      	bne.n	8021cec <mg_http_get_header+0x14>
 8021d1a:	e001      	b.n	8021d20 <mg_http_get_header+0x48>
  return NULL;
 8021d1c:	f04f 0800 	mov.w	r8, #0
}
 8021d20:	4640      	mov	r0, r8
 8021d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8021d26:	f04f 0800 	mov.w	r8, #0
 8021d2a:	e7f9      	b.n	8021d20 <mg_http_get_header+0x48>

08021d2c <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 8021d2c:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 8021d2e:	6880      	ldr	r0, [r0, #8]
 8021d30:	f007 f932 	bl	8028f98 <atoi>
}
 8021d34:	bd08      	pop	{r3, pc}
	...

08021d38 <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8021d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d3c:	b095      	sub	sp, #84	@ 0x54
 8021d3e:	ac08      	add	r4, sp, #32
 8021d40:	e884 0003 	stmia.w	r4, {r0, r1}
 8021d44:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 8021d46:	4606      	mov	r6, r0
  int len = (int) json.len;
 8021d48:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 8021d4a:	469a      	mov	sl, r3
 8021d4c:	b113      	cbz	r3, 8021d54 <mg_json_get+0x1c>
 8021d4e:	2300      	movs	r3, #0
 8021d50:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 8021d54:	9b02      	ldr	r3, [sp, #8]
 8021d56:	781b      	ldrb	r3, [r3, #0]
 8021d58:	2b24      	cmp	r3, #36	@ 0x24
 8021d5a:	f040 8232 	bne.w	80221c2 <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 8021d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021d62:	9303      	str	r3, [sp, #12]
 8021d64:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 8021d66:	2301      	movs	r3, #1
 8021d68:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 8021d6a:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 8021d6e:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 8021d70:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 8021d74:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8021d76:	465b      	mov	r3, fp
 8021d78:	f8cd a018 	str.w	sl, [sp, #24]
 8021d7c:	e190      	b.n	80220a0 <mg_json_get+0x368>
        if (depth == ed) j = i;
 8021d7e:	455f      	cmp	r7, fp
 8021d80:	d029      	beq.n	8021dd6 <mg_json_get+0x9e>
        if (c == '{') {
 8021d82:	2d7b      	cmp	r5, #123	@ 0x7b
 8021d84:	d029      	beq.n	8021dda <mg_json_get+0xa2>
        } else if (c == '[') {
 8021d86:	2d5b      	cmp	r5, #91	@ 0x5b
 8021d88:	d047      	beq.n	8021e1a <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 8021d8a:	2d5d      	cmp	r5, #93	@ 0x5d
 8021d8c:	d07a      	beq.n	8021e84 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8021d8e:	2d74      	cmp	r5, #116	@ 0x74
 8021d90:	f000 80a4 	beq.w	8021edc <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8021d94:	2d6e      	cmp	r5, #110	@ 0x6e
 8021d96:	f000 80b0 	beq.w	8021efa <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8021d9a:	2d66      	cmp	r5, #102	@ 0x66
 8021d9c:	f000 80bc 	beq.w	8021f18 <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8021da0:	2d2d      	cmp	r5, #45	@ 0x2d
 8021da2:	d005      	beq.n	8021db0 <mg_json_get+0x78>
 8021da4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8021da8:	b2db      	uxtb	r3, r3
 8021daa:	2b09      	cmp	r3, #9
 8021dac:	f200 80c3 	bhi.w	8021f36 <mg_json_get+0x1fe>
          int numlen = 0;
 8021db0:	2300      	movs	r3, #0
 8021db2:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 8021db4:	aa0b      	add	r2, sp, #44	@ 0x2c
 8021db6:	eba8 0104 	sub.w	r1, r8, r4
 8021dba:	4648      	mov	r0, r9
 8021dbc:	f7fd fd30 	bl	801f820 <mg_atod>
          i += numlen - 1;
 8021dc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021dc2:	3b01      	subs	r3, #1
 8021dc4:	441c      	add	r4, r3
        MG_CHECKRET('V');
 8021dc6:	455f      	cmp	r7, fp
 8021dc8:	f000 80c6 	beq.w	8021f58 <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 8021dcc:	455f      	cmp	r7, fp
 8021dce:	f000 80da 	beq.w	8021f86 <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 8021dd2:	2303      	movs	r3, #3
 8021dd4:	e163      	b.n	802209e <mg_json_get+0x366>
        if (depth == ed) j = i;
 8021dd6:	9405      	str	r4, [sp, #20]
 8021dd8:	e7d3      	b.n	8021d82 <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8021dda:	2f1d      	cmp	r7, #29
 8021ddc:	f300 81f4 	bgt.w	80221c8 <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8021de0:	455f      	cmp	r7, fp
 8021de2:	d007      	beq.n	8021df4 <mg_json_get+0xbc>
          nesting[depth++] = c;
 8021de4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8021de8:	446b      	add	r3, sp
 8021dea:	f803 5c20 	strb.w	r5, [r3, #-32]
 8021dee:	3701      	adds	r7, #1
          expecting = S_KEY;
 8021df0:	2301      	movs	r3, #1
          break;
 8021df2:	e154      	b.n	802209e <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8021df4:	9b02      	ldr	r3, [sp, #8]
 8021df6:	9a04      	ldr	r2, [sp, #16]
 8021df8:	5c9b      	ldrb	r3, [r3, r2]
 8021dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8021dfc:	d1f2      	bne.n	8021de4 <mg_json_get+0xac>
 8021dfe:	9b01      	ldr	r3, [sp, #4]
 8021e00:	9a03      	ldr	r2, [sp, #12]
 8021e02:	4293      	cmp	r3, r2
 8021e04:	d1ee      	bne.n	8021de4 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 8021e06:	f10b 0b01 	add.w	fp, fp, #1
 8021e0a:	9b04      	ldr	r3, [sp, #16]
 8021e0c:	3301      	adds	r3, #1
 8021e0e:	9304      	str	r3, [sp, #16]
 8021e10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021e14:	9303      	str	r3, [sp, #12]
 8021e16:	9301      	str	r3, [sp, #4]
 8021e18:	e7e4      	b.n	8021de4 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8021e1a:	2f1d      	cmp	r7, #29
 8021e1c:	f300 81d7 	bgt.w	80221ce <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8021e20:	455f      	cmp	r7, fp
 8021e22:	d006      	beq.n	8021e32 <mg_json_get+0xfa>
          nesting[depth++] = c;
 8021e24:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8021e28:	446a      	add	r2, sp
 8021e2a:	f802 5c20 	strb.w	r5, [r2, #-32]
 8021e2e:	3701      	adds	r7, #1
          break;
 8021e30:	e135      	b.n	802209e <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8021e32:	9a02      	ldr	r2, [sp, #8]
 8021e34:	9904      	ldr	r1, [sp, #16]
 8021e36:	5c52      	ldrb	r2, [r2, r1]
 8021e38:	2a5b      	cmp	r2, #91	@ 0x5b
 8021e3a:	d1f3      	bne.n	8021e24 <mg_json_get+0xec>
 8021e3c:	9a01      	ldr	r2, [sp, #4]
 8021e3e:	9903      	ldr	r1, [sp, #12]
 8021e40:	428a      	cmp	r2, r1
 8021e42:	d1ef      	bne.n	8021e24 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 8021e44:	f10b 0b01 	add.w	fp, fp, #1
 8021e48:	9804      	ldr	r0, [sp, #16]
 8021e4a:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8021e4c:	2100      	movs	r1, #0
 8021e4e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8021e52:	e005      	b.n	8021e60 <mg_json_get+0x128>
              ei *= 10;
 8021e54:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 8021e58:	3a30      	subs	r2, #48	@ 0x30
 8021e5a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8021e5e:	3001      	adds	r0, #1
 8021e60:	f81c 2000 	ldrb.w	r2, [ip, r0]
 8021e64:	2a5d      	cmp	r2, #93	@ 0x5d
 8021e66:	d001      	beq.n	8021e6c <mg_json_get+0x134>
 8021e68:	2a00      	cmp	r2, #0
 8021e6a:	d1f3      	bne.n	8021e54 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 8021e6c:	9004      	str	r0, [sp, #16]
 8021e6e:	9103      	str	r1, [sp, #12]
 8021e70:	b12a      	cbz	r2, 8021e7e <mg_json_get+0x146>
 8021e72:	4602      	mov	r2, r0
 8021e74:	3201      	adds	r2, #1
 8021e76:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 8021e78:	2200      	movs	r2, #0
 8021e7a:	9201      	str	r2, [sp, #4]
 8021e7c:	e7d2      	b.n	8021e24 <mg_json_get+0xec>
 8021e7e:	2200      	movs	r2, #0
 8021e80:	9201      	str	r2, [sp, #4]
 8021e82:	e7cf      	b.n	8021e24 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 8021e84:	2f00      	cmp	r7, #0
 8021e86:	dd82      	ble.n	8021d8e <mg_json_get+0x56>
          MG_EOO(']');
 8021e88:	455f      	cmp	r7, fp
 8021e8a:	d020      	beq.n	8021ece <mg_json_get+0x196>
 8021e8c:	3f01      	subs	r7, #1
 8021e8e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8021e92:	446b      	add	r3, sp
 8021e94:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8021e98:	3302      	adds	r3, #2
 8021e9a:	429d      	cmp	r5, r3
 8021e9c:	f040 819a 	bne.w	80221d4 <mg_json_get+0x49c>
 8021ea0:	455f      	cmp	r7, fp
 8021ea2:	d190      	bne.n	8021dc6 <mg_json_get+0x8e>
 8021ea4:	9b02      	ldr	r3, [sp, #8]
 8021ea6:	9a04      	ldr	r2, [sp, #16]
 8021ea8:	5c9b      	ldrb	r3, [r3, r2]
 8021eaa:	2b00      	cmp	r3, #0
 8021eac:	d18b      	bne.n	8021dc6 <mg_json_get+0x8e>
 8021eae:	9b01      	ldr	r3, [sp, #4]
 8021eb0:	9a03      	ldr	r2, [sp, #12]
 8021eb2:	4293      	cmp	r3, r2
 8021eb4:	d187      	bne.n	8021dc6 <mg_json_get+0x8e>
 8021eb6:	f8dd a018 	ldr.w	sl, [sp, #24]
 8021eba:	f1ba 0f00 	cmp.w	sl, #0
 8021ebe:	d004      	beq.n	8021eca <mg_json_get+0x192>
 8021ec0:	9b05      	ldr	r3, [sp, #20]
 8021ec2:	1ae3      	subs	r3, r4, r3
 8021ec4:	3301      	adds	r3, #1
 8021ec6:	f8ca 3000 	str.w	r3, [sl]
 8021eca:	9d05      	ldr	r5, [sp, #20]
 8021ecc:	e175      	b.n	80221ba <mg_json_get+0x482>
 8021ece:	9b01      	ldr	r3, [sp, #4]
 8021ed0:	9a03      	ldr	r2, [sp, #12]
 8021ed2:	4293      	cmp	r3, r2
 8021ed4:	d0da      	beq.n	8021e8c <mg_json_get+0x154>
 8021ed6:	f06f 0502 	mvn.w	r5, #2
 8021eda:	e16e      	b.n	80221ba <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8021edc:	1ce3      	adds	r3, r4, #3
 8021ede:	9307      	str	r3, [sp, #28]
 8021ee0:	4543      	cmp	r3, r8
 8021ee2:	f6bf af57 	bge.w	8021d94 <mg_json_get+0x5c>
 8021ee6:	2204      	movs	r2, #4
 8021ee8:	49a3      	ldr	r1, [pc, #652]	@ (8022178 <mg_json_get+0x440>)
 8021eea:	4648      	mov	r0, r9
 8021eec:	f009 fcf4 	bl	802b8d8 <memcmp>
 8021ef0:	2800      	cmp	r0, #0
 8021ef2:	f47f af4f 	bne.w	8021d94 <mg_json_get+0x5c>
          i += 3;
 8021ef6:	9c07      	ldr	r4, [sp, #28]
 8021ef8:	e765      	b.n	8021dc6 <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8021efa:	1ce3      	adds	r3, r4, #3
 8021efc:	9307      	str	r3, [sp, #28]
 8021efe:	4543      	cmp	r3, r8
 8021f00:	f6bf af4b 	bge.w	8021d9a <mg_json_get+0x62>
 8021f04:	2204      	movs	r2, #4
 8021f06:	499d      	ldr	r1, [pc, #628]	@ (802217c <mg_json_get+0x444>)
 8021f08:	4648      	mov	r0, r9
 8021f0a:	f009 fce5 	bl	802b8d8 <memcmp>
 8021f0e:	2800      	cmp	r0, #0
 8021f10:	f47f af43 	bne.w	8021d9a <mg_json_get+0x62>
          i += 3;
 8021f14:	9c07      	ldr	r4, [sp, #28]
 8021f16:	e756      	b.n	8021dc6 <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8021f18:	1d23      	adds	r3, r4, #4
 8021f1a:	9307      	str	r3, [sp, #28]
 8021f1c:	4543      	cmp	r3, r8
 8021f1e:	f6bf af3f 	bge.w	8021da0 <mg_json_get+0x68>
 8021f22:	2205      	movs	r2, #5
 8021f24:	4996      	ldr	r1, [pc, #600]	@ (8022180 <mg_json_get+0x448>)
 8021f26:	4648      	mov	r0, r9
 8021f28:	f009 fcd6 	bl	802b8d8 <memcmp>
 8021f2c:	2800      	cmp	r0, #0
 8021f2e:	f47f af37 	bne.w	8021da0 <mg_json_get+0x68>
          i += 4;
 8021f32:	9c07      	ldr	r4, [sp, #28]
 8021f34:	e747      	b.n	8021dc6 <mg_json_get+0x8e>
        } else if (c == '"') {
 8021f36:	2d22      	cmp	r5, #34	@ 0x22
 8021f38:	f040 814f 	bne.w	80221da <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8021f3c:	f10a 0001 	add.w	r0, sl, #1
 8021f40:	eba8 0104 	sub.w	r1, r8, r4
 8021f44:	3901      	subs	r1, #1
 8021f46:	4430      	add	r0, r6
 8021f48:	f7fd fc45 	bl	801f7d6 <mg_pass_string>
          if (n < 0) return n;
 8021f4c:	1e05      	subs	r5, r0, #0
 8021f4e:	f2c0 8134 	blt.w	80221ba <mg_json_get+0x482>
          i += n + 1;
 8021f52:	3501      	adds	r5, #1
 8021f54:	442c      	add	r4, r5
 8021f56:	e736      	b.n	8021dc6 <mg_json_get+0x8e>
        MG_CHECKRET('V');
 8021f58:	9b02      	ldr	r3, [sp, #8]
 8021f5a:	9a04      	ldr	r2, [sp, #16]
 8021f5c:	5c9b      	ldrb	r3, [r3, r2]
 8021f5e:	2b00      	cmp	r3, #0
 8021f60:	f47f af34 	bne.w	8021dcc <mg_json_get+0x94>
 8021f64:	9b01      	ldr	r3, [sp, #4]
 8021f66:	9a03      	ldr	r2, [sp, #12]
 8021f68:	4293      	cmp	r3, r2
 8021f6a:	f47f af2f 	bne.w	8021dcc <mg_json_get+0x94>
 8021f6e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8021f72:	f1ba 0f00 	cmp.w	sl, #0
 8021f76:	d004      	beq.n	8021f82 <mg_json_get+0x24a>
 8021f78:	9b05      	ldr	r3, [sp, #20]
 8021f7a:	1ae3      	subs	r3, r4, r3
 8021f7c:	3301      	adds	r3, #1
 8021f7e:	f8ca 3000 	str.w	r3, [sl]
 8021f82:	9d05      	ldr	r5, [sp, #20]
 8021f84:	e119      	b.n	80221ba <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 8021f86:	9b03      	ldr	r3, [sp, #12]
 8021f88:	2b00      	cmp	r3, #0
 8021f8a:	f2c0 8110 	blt.w	80221ae <mg_json_get+0x476>
 8021f8e:	9b01      	ldr	r3, [sp, #4]
 8021f90:	3301      	adds	r3, #1
 8021f92:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 8021f94:	2303      	movs	r3, #3
 8021f96:	e082      	b.n	802209e <mg_json_get+0x366>
        if (c == '"') {
 8021f98:	2d22      	cmp	r5, #34	@ 0x22
 8021f9a:	d014      	beq.n	8021fc6 <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 8021f9c:	2d7d      	cmp	r5, #125	@ 0x7d
 8021f9e:	f040 8125 	bne.w	80221ec <mg_json_get+0x4b4>
          MG_EOO('}');
 8021fa2:	455f      	cmp	r7, fp
 8021fa4:	d053      	beq.n	802204e <mg_json_get+0x316>
 8021fa6:	3f01      	subs	r7, #1
 8021fa8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8021fac:	446b      	add	r3, sp
 8021fae:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8021fb2:	3302      	adds	r3, #2
 8021fb4:	429d      	cmp	r5, r3
 8021fb6:	f040 811c 	bne.w	80221f2 <mg_json_get+0x4ba>
 8021fba:	455f      	cmp	r7, fp
 8021fbc:	d04e      	beq.n	802205c <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 8021fbe:	455f      	cmp	r7, fp
 8021fc0:	d061      	beq.n	8022086 <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 8021fc2:	2303      	movs	r3, #3
 8021fc4:	e06b      	b.n	802209e <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8021fc6:	f104 0901 	add.w	r9, r4, #1
 8021fca:	44b1      	add	r9, r6
 8021fcc:	eba8 0104 	sub.w	r1, r8, r4
 8021fd0:	3901      	subs	r1, #1
 8021fd2:	4648      	mov	r0, r9
 8021fd4:	f7fd fbff 	bl	801f7d6 <mg_pass_string>
          if (n < 0) return n;
 8021fd8:	1e05      	subs	r5, r0, #0
 8021fda:	f2c0 80ee 	blt.w	80221ba <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8021fde:	1c63      	adds	r3, r4, #1
 8021fe0:	442b      	add	r3, r5
 8021fe2:	4543      	cmp	r3, r8
 8021fe4:	f280 80fc 	bge.w	80221e0 <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8021fe8:	455f      	cmp	r7, fp
 8021fea:	f2c0 80fc 	blt.w	80221e6 <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8021fee:	d005      	beq.n	8021ffc <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 8021ff0:	455f      	cmp	r7, fp
 8021ff2:	d00d      	beq.n	8022010 <mg_json_get+0x2d8>
          i += n + 1;
 8021ff4:	3501      	adds	r5, #1
 8021ff6:	442c      	add	r4, r5
          expecting = S_COLON;
 8021ff8:	2302      	movs	r3, #2
 8021ffa:	e050      	b.n	802209e <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8021ffc:	9b02      	ldr	r3, [sp, #8]
 8021ffe:	9a04      	ldr	r2, [sp, #16]
 8022000:	4413      	add	r3, r2
 8022002:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022006:	2b2e      	cmp	r3, #46	@ 0x2e
 8022008:	d0f2      	beq.n	8021ff0 <mg_json_get+0x2b8>
 802200a:	f06f 0502 	mvn.w	r5, #2
 802200e:	e0d4      	b.n	80221ba <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 8022010:	9b02      	ldr	r3, [sp, #8]
 8022012:	9a04      	ldr	r2, [sp, #16]
 8022014:	4413      	add	r3, r2
 8022016:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802201a:	2b2e      	cmp	r3, #46	@ 0x2e
 802201c:	d1ea      	bne.n	8021ff4 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802201e:	462a      	mov	r2, r5
 8022020:	9b02      	ldr	r3, [sp, #8]
 8022022:	9904      	ldr	r1, [sp, #16]
 8022024:	1859      	adds	r1, r3, r1
 8022026:	4648      	mov	r0, r9
 8022028:	f009 fd1f 	bl	802ba6a <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 802202c:	2800      	cmp	r0, #0
 802202e:	d1e1      	bne.n	8021ff4 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8022030:	9904      	ldr	r1, [sp, #16]
 8022032:	194b      	adds	r3, r1, r5
 8022034:	9a02      	ldr	r2, [sp, #8]
 8022036:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8022038:	b12a      	cbz	r2, 8022046 <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802203a:	2a2e      	cmp	r2, #46	@ 0x2e
 802203c:	d005      	beq.n	802204a <mg_json_get+0x312>
 802203e:	2a5b      	cmp	r2, #91	@ 0x5b
 8022040:	d1d8      	bne.n	8021ff4 <mg_json_get+0x2bc>
            pos += n;
 8022042:	9304      	str	r3, [sp, #16]
 8022044:	e7d6      	b.n	8021ff4 <mg_json_get+0x2bc>
 8022046:	9304      	str	r3, [sp, #16]
 8022048:	e7d4      	b.n	8021ff4 <mg_json_get+0x2bc>
 802204a:	9304      	str	r3, [sp, #16]
 802204c:	e7d2      	b.n	8021ff4 <mg_json_get+0x2bc>
          MG_EOO('}');
 802204e:	9b01      	ldr	r3, [sp, #4]
 8022050:	9a03      	ldr	r2, [sp, #12]
 8022052:	4293      	cmp	r3, r2
 8022054:	d0a7      	beq.n	8021fa6 <mg_json_get+0x26e>
 8022056:	f06f 0502 	mvn.w	r5, #2
 802205a:	e0ae      	b.n	80221ba <mg_json_get+0x482>
 802205c:	9b02      	ldr	r3, [sp, #8]
 802205e:	9a04      	ldr	r2, [sp, #16]
 8022060:	5c9b      	ldrb	r3, [r3, r2]
 8022062:	2b00      	cmp	r3, #0
 8022064:	d1ab      	bne.n	8021fbe <mg_json_get+0x286>
 8022066:	9b01      	ldr	r3, [sp, #4]
 8022068:	9a03      	ldr	r2, [sp, #12]
 802206a:	4293      	cmp	r3, r2
 802206c:	d1a7      	bne.n	8021fbe <mg_json_get+0x286>
 802206e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022072:	f1ba 0f00 	cmp.w	sl, #0
 8022076:	d004      	beq.n	8022082 <mg_json_get+0x34a>
 8022078:	9b05      	ldr	r3, [sp, #20]
 802207a:	1ae3      	subs	r3, r4, r3
 802207c:	3301      	adds	r3, #1
 802207e:	f8ca 3000 	str.w	r3, [sl]
 8022082:	9d05      	ldr	r5, [sp, #20]
 8022084:	e099      	b.n	80221ba <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 8022086:	9b03      	ldr	r3, [sp, #12]
 8022088:	2b00      	cmp	r3, #0
 802208a:	f2c0 8092 	blt.w	80221b2 <mg_json_get+0x47a>
 802208e:	9b01      	ldr	r3, [sp, #4]
 8022090:	3301      	adds	r3, #1
 8022092:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 8022094:	2303      	movs	r3, #3
 8022096:	e002      	b.n	802209e <mg_json_get+0x366>
        if (c == ':') {
 8022098:	2d3a      	cmp	r5, #58	@ 0x3a
 802209a:	d11d      	bne.n	80220d8 <mg_json_get+0x3a0>
          expecting = S_VALUE;
 802209c:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 802209e:	3401      	adds	r4, #1
 80220a0:	4544      	cmp	r4, r8
 80220a2:	f280 8088 	bge.w	80221b6 <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 80220a6:	46a2      	mov	sl, r4
 80220a8:	eb06 0904 	add.w	r9, r6, r4
 80220ac:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 80220ae:	2d20      	cmp	r5, #32
 80220b0:	d0f5      	beq.n	802209e <mg_json_get+0x366>
 80220b2:	2d09      	cmp	r5, #9
 80220b4:	d0f3      	beq.n	802209e <mg_json_get+0x366>
 80220b6:	2d0a      	cmp	r5, #10
 80220b8:	d0f1      	beq.n	802209e <mg_json_get+0x366>
 80220ba:	2d0d      	cmp	r5, #13
 80220bc:	d0ef      	beq.n	802209e <mg_json_get+0x366>
    switch (expecting) {
 80220be:	2b03      	cmp	r3, #3
 80220c0:	d8ed      	bhi.n	802209e <mg_json_get+0x366>
 80220c2:	a201      	add	r2, pc, #4	@ (adr r2, 80220c8 <mg_json_get+0x390>)
 80220c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80220c8:	08021d7f 	.word	0x08021d7f
 80220cc:	08021f99 	.word	0x08021f99
 80220d0:	08022099 	.word	0x08022099
 80220d4:	080220df 	.word	0x080220df
          return MG_JSON_INVALID;
 80220d8:	f06f 0501 	mvn.w	r5, #1
 80220dc:	e06d      	b.n	80221ba <mg_json_get+0x482>
        if (depth <= 0) {
 80220de:	2f00      	cmp	r7, #0
 80220e0:	f340 808a 	ble.w	80221f8 <mg_json_get+0x4c0>
        } else if (c == ',') {
 80220e4:	2d2c      	cmp	r5, #44	@ 0x2c
 80220e6:	d01e      	beq.n	8022126 <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 80220e8:	2d5d      	cmp	r5, #93	@ 0x5d
 80220ea:	d002      	beq.n	80220f2 <mg_json_get+0x3ba>
 80220ec:	2d7d      	cmp	r5, #125	@ 0x7d
 80220ee:	f040 8086 	bne.w	80221fe <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 80220f2:	455f      	cmp	r7, fp
 80220f4:	d021      	beq.n	802213a <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 80220f6:	455f      	cmp	r7, fp
 80220f8:	d02b      	beq.n	8022152 <mg_json_get+0x41a>
          MG_EOO('O');
 80220fa:	455f      	cmp	r7, fp
 80220fc:	d035      	beq.n	802216a <mg_json_get+0x432>
 80220fe:	3f01      	subs	r7, #1
 8022100:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8022104:	446a      	add	r2, sp
 8022106:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 802210a:	3202      	adds	r2, #2
 802210c:	4295      	cmp	r5, r2
 802210e:	d179      	bne.n	8022204 <mg_json_get+0x4cc>
 8022110:	455f      	cmp	r7, fp
 8022112:	d037      	beq.n	8022184 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 8022114:	455f      	cmp	r7, fp
 8022116:	d1c2      	bne.n	802209e <mg_json_get+0x366>
 8022118:	9a03      	ldr	r2, [sp, #12]
 802211a:	2a00      	cmp	r2, #0
 802211c:	dbbf      	blt.n	802209e <mg_json_get+0x366>
 802211e:	9a01      	ldr	r2, [sp, #4]
 8022120:	3201      	adds	r2, #1
 8022122:	9201      	str	r2, [sp, #4]
 8022124:	e7bb      	b.n	802209e <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8022126:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 802212a:	446b      	add	r3, sp
 802212c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022130:	2b7b      	cmp	r3, #123	@ 0x7b
 8022132:	bf14      	ite	ne
 8022134:	2300      	movne	r3, #0
 8022136:	2301      	moveq	r3, #1
 8022138:	e7b1      	b.n	802209e <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 802213a:	2d7d      	cmp	r5, #125	@ 0x7d
 802213c:	d1db      	bne.n	80220f6 <mg_json_get+0x3be>
 802213e:	9a02      	ldr	r2, [sp, #8]
 8022140:	9904      	ldr	r1, [sp, #16]
 8022142:	440a      	add	r2, r1
 8022144:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8022148:	2a2e      	cmp	r2, #46	@ 0x2e
 802214a:	d1d4      	bne.n	80220f6 <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 802214c:	f06f 0502 	mvn.w	r5, #2
 8022150:	e033      	b.n	80221ba <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8022152:	2d5d      	cmp	r5, #93	@ 0x5d
 8022154:	d1d1      	bne.n	80220fa <mg_json_get+0x3c2>
 8022156:	9a02      	ldr	r2, [sp, #8]
 8022158:	9904      	ldr	r1, [sp, #16]
 802215a:	440a      	add	r2, r1
 802215c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8022160:	2a2c      	cmp	r2, #44	@ 0x2c
 8022162:	d1ca      	bne.n	80220fa <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 8022164:	f06f 0502 	mvn.w	r5, #2
 8022168:	e027      	b.n	80221ba <mg_json_get+0x482>
          MG_EOO('O');
 802216a:	9a01      	ldr	r2, [sp, #4]
 802216c:	9903      	ldr	r1, [sp, #12]
 802216e:	428a      	cmp	r2, r1
 8022170:	d0c5      	beq.n	80220fe <mg_json_get+0x3c6>
 8022172:	f06f 0502 	mvn.w	r5, #2
 8022176:	e020      	b.n	80221ba <mg_json_get+0x482>
 8022178:	08035bbc 	.word	0x08035bbc
 802217c:	08038e40 	.word	0x08038e40
 8022180:	08035bc4 	.word	0x08035bc4
 8022184:	9a02      	ldr	r2, [sp, #8]
 8022186:	9904      	ldr	r1, [sp, #16]
 8022188:	5c52      	ldrb	r2, [r2, r1]
 802218a:	2a00      	cmp	r2, #0
 802218c:	d1c2      	bne.n	8022114 <mg_json_get+0x3dc>
 802218e:	9a01      	ldr	r2, [sp, #4]
 8022190:	9903      	ldr	r1, [sp, #12]
 8022192:	428a      	cmp	r2, r1
 8022194:	d1be      	bne.n	8022114 <mg_json_get+0x3dc>
 8022196:	f8dd a018 	ldr.w	sl, [sp, #24]
 802219a:	f1ba 0f00 	cmp.w	sl, #0
 802219e:	d004      	beq.n	80221aa <mg_json_get+0x472>
 80221a0:	9b05      	ldr	r3, [sp, #20]
 80221a2:	1ae3      	subs	r3, r4, r3
 80221a4:	3301      	adds	r3, #1
 80221a6:	f8ca 3000 	str.w	r3, [sl]
 80221aa:	9d05      	ldr	r5, [sp, #20]
 80221ac:	e005      	b.n	80221ba <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 80221ae:	2303      	movs	r3, #3
 80221b0:	e775      	b.n	802209e <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 80221b2:	2303      	movs	r3, #3
 80221b4:	e773      	b.n	802209e <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 80221b6:	f06f 0502 	mvn.w	r5, #2
}
 80221ba:	4628      	mov	r0, r5
 80221bc:	b015      	add	sp, #84	@ 0x54
 80221be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 80221c2:	f06f 0501 	mvn.w	r5, #1
 80221c6:	e7f8      	b.n	80221ba <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80221c8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80221cc:	e7f5      	b.n	80221ba <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80221ce:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80221d2:	e7f2      	b.n	80221ba <mg_json_get+0x482>
          MG_EOO(']');
 80221d4:	f06f 0501 	mvn.w	r5, #1
 80221d8:	e7ef      	b.n	80221ba <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80221da:	f06f 0501 	mvn.w	r5, #1
 80221de:	e7ec      	b.n	80221ba <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80221e0:	f06f 0502 	mvn.w	r5, #2
 80221e4:	e7e9      	b.n	80221ba <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80221e6:	f06f 0502 	mvn.w	r5, #2
 80221ea:	e7e6      	b.n	80221ba <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80221ec:	f06f 0501 	mvn.w	r5, #1
 80221f0:	e7e3      	b.n	80221ba <mg_json_get+0x482>
          MG_EOO('}');
 80221f2:	f06f 0501 	mvn.w	r5, #1
 80221f6:	e7e0      	b.n	80221ba <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80221f8:	f06f 0501 	mvn.w	r5, #1
 80221fc:	e7dd      	b.n	80221ba <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80221fe:	f06f 0501 	mvn.w	r5, #1
 8022202:	e7da      	b.n	80221ba <mg_json_get+0x482>
          MG_EOO('O');
 8022204:	f06f 0501 	mvn.w	r5, #1
 8022208:	e7d7      	b.n	80221ba <mg_json_get+0x482>
 802220a:	bf00      	nop

0802220c <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 802220c:	b510      	push	{r4, lr}
 802220e:	b084      	sub	sp, #16
 8022210:	46ec      	mov	ip, sp
 8022212:	e88c 0003 	stmia.w	ip, {r0, r1}
 8022216:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8022218:	ab03      	add	r3, sp, #12
 802221a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802221e:	f7ff fd8b 	bl	8021d38 <mg_json_get>
 8022222:	1e02      	subs	r2, r0, #0
 8022224:	db11      	blt.n	802224a <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8022226:	9b00      	ldr	r3, [sp, #0]
 8022228:	1898      	adds	r0, r3, r2
 802222a:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 802222c:	2a2d      	cmp	r2, #45	@ 0x2d
 802222e:	d003      	beq.n	8022238 <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8022230:	3a30      	subs	r2, #48	@ 0x30
 8022232:	b2d2      	uxtb	r2, r2
 8022234:	2a09      	cmp	r2, #9
 8022236:	d80b      	bhi.n	8022250 <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8022238:	b164      	cbz	r4, 8022254 <mg_json_get_num+0x48>
 802223a:	2200      	movs	r2, #0
 802223c:	9903      	ldr	r1, [sp, #12]
 802223e:	f7fd faef 	bl	801f820 <mg_atod>
 8022242:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 8022246:	2001      	movs	r0, #1
 8022248:	e000      	b.n	802224c <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 802224a:	2000      	movs	r0, #0
}
 802224c:	b004      	add	sp, #16
 802224e:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 8022250:	2000      	movs	r0, #0
 8022252:	e7fb      	b.n	802224c <mg_json_get_num+0x40>
    found = 1;
 8022254:	2001      	movs	r0, #1
 8022256:	e7f9      	b.n	802224c <mg_json_get_num+0x40>

08022258 <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8022258:	b510      	push	{r4, lr}
 802225a:	b082      	sub	sp, #8
 802225c:	46ec      	mov	ip, sp
 802225e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8022262:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 8022264:	2300      	movs	r3, #0
 8022266:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802226a:	f7ff fd65 	bl	8021d38 <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 802226e:	2800      	cmp	r0, #0
 8022270:	db0f      	blt.n	8022292 <mg_json_get_bool+0x3a>
 8022272:	9b00      	ldr	r3, [sp, #0]
 8022274:	5c1b      	ldrb	r3, [r3, r0]
 8022276:	2b74      	cmp	r3, #116	@ 0x74
 8022278:	d003      	beq.n	8022282 <mg_json_get_bool+0x2a>
 802227a:	2b66      	cmp	r3, #102	@ 0x66
 802227c:	d001      	beq.n	8022282 <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 802227e:	2000      	movs	r0, #0
 8022280:	e008      	b.n	8022294 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 8022282:	b14c      	cbz	r4, 8022298 <mg_json_get_bool+0x40>
 8022284:	2b74      	cmp	r3, #116	@ 0x74
 8022286:	bf14      	ite	ne
 8022288:	2300      	movne	r3, #0
 802228a:	2301      	moveq	r3, #1
 802228c:	7023      	strb	r3, [r4, #0]
    found = 1;
 802228e:	2001      	movs	r0, #1
 8022290:	e000      	b.n	8022294 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 8022292:	2000      	movs	r0, #0
}
 8022294:	b002      	add	sp, #8
 8022296:	bd10      	pop	{r4, pc}
    found = 1;
 8022298:	2001      	movs	r0, #1
 802229a:	e7fb      	b.n	8022294 <mg_json_get_bool+0x3c>

0802229c <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 802229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802229e:	b085      	sub	sp, #20
 80222a0:	4606      	mov	r6, r0
 80222a2:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 80222a4:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 80222a6:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 80222a8:	e038      	b.n	802231c <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 80222aa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80222ae:	f7fd fbc9 	bl	801fa44 <nibble>
 80222b2:	f7fd fbaf 	bl	801fa14 <logc>
 80222b6:	f3c5 2003 	ubfx	r0, r5, #8, #4
 80222ba:	f7fd fbc3 	bl	801fa44 <nibble>
 80222be:	f7fd fba9 	bl	801fa14 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80222c2:	f3c5 1003 	ubfx	r0, r5, #4, #4
 80222c6:	f7fd fbbd 	bl	801fa44 <nibble>
 80222ca:	f7fd fba3 	bl	801fa14 <logc>
 80222ce:	2030      	movs	r0, #48	@ 0x30
 80222d0:	f7fd fba0 	bl	801fa14 <logc>
 80222d4:	2103      	movs	r1, #3
 80222d6:	4829      	ldr	r0, [pc, #164]	@ (802237c <mg_hexdump+0xe0>)
 80222d8:	f7fd fba8 	bl	801fa2c <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80222dc:	5d70      	ldrb	r0, [r6, r5]
 80222de:	0900      	lsrs	r0, r0, #4
 80222e0:	f7fd fbb0 	bl	801fa44 <nibble>
 80222e4:	f7fd fb96 	bl	801fa14 <logc>
 80222e8:	5d70      	ldrb	r0, [r6, r5]
 80222ea:	f000 000f 	and.w	r0, r0, #15
 80222ee:	f7fd fba9 	bl	801fa44 <nibble>
 80222f2:	f7fd fb8f 	bl	801fa14 <logc>
    logc(' ');                                         // Space after hex number
 80222f6:	2020      	movs	r0, #32
 80222f8:	f7fd fb8c 	bl	801fa14 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80222fc:	5d72      	ldrb	r2, [r6, r5]
 80222fe:	f1a2 0320 	sub.w	r3, r2, #32
 8022302:	b2db      	uxtb	r3, r3
 8022304:	2b5e      	cmp	r3, #94	@ 0x5e
 8022306:	d900      	bls.n	802230a <mg_hexdump+0x6e>
 8022308:	222e      	movs	r2, #46	@ 0x2e
 802230a:	1c63      	adds	r3, r4, #1
 802230c:	f104 0110 	add.w	r1, r4, #16
 8022310:	eb0d 0401 	add.w	r4, sp, r1
 8022314:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 8022318:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 802231a:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 802231c:	42bd      	cmp	r5, r7
 802231e:	d21e      	bcs.n	802235e <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 8022320:	f015 0f0f 	tst.w	r5, #15
 8022324:	d1da      	bne.n	80222dc <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8022326:	2d00      	cmp	r5, #0
 8022328:	d0bf      	beq.n	80222aa <mg_hexdump+0xe>
 802232a:	2102      	movs	r1, #2
 802232c:	4814      	ldr	r0, [pc, #80]	@ (8022380 <mg_hexdump+0xe4>)
 802232e:	f7fd fb7d 	bl	801fa2c <logs>
 8022332:	2110      	movs	r1, #16
 8022334:	4668      	mov	r0, sp
 8022336:	f7fd fb79 	bl	801fa2c <logs>
 802233a:	200a      	movs	r0, #10
 802233c:	f7fd fb6a 	bl	801fa14 <logc>
 8022340:	2400      	movs	r4, #0
 8022342:	e7b2      	b.n	80222aa <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8022344:	2103      	movs	r1, #3
 8022346:	480d      	ldr	r0, [pc, #52]	@ (802237c <mg_hexdump+0xe0>)
 8022348:	f7fd fb70 	bl	801fa2c <logs>
 802234c:	1c63      	adds	r3, r4, #1
 802234e:	f104 0210 	add.w	r2, r4, #16
 8022352:	eb0d 0402 	add.w	r4, sp, r2
 8022356:	2220      	movs	r2, #32
 8022358:	f804 2c10 	strb.w	r2, [r4, #-16]
 802235c:	b2dc      	uxtb	r4, r3
 802235e:	2c0f      	cmp	r4, #15
 8022360:	d9f0      	bls.n	8022344 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8022362:	2102      	movs	r1, #2
 8022364:	4806      	ldr	r0, [pc, #24]	@ (8022380 <mg_hexdump+0xe4>)
 8022366:	f7fd fb61 	bl	801fa2c <logs>
 802236a:	2110      	movs	r1, #16
 802236c:	4668      	mov	r0, sp
 802236e:	f7fd fb5d 	bl	801fa2c <logs>
 8022372:	200a      	movs	r0, #10
 8022374:	f7fd fb4e 	bl	801fa14 <logc>
}
 8022378:	b005      	add	sp, #20
 802237a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802237c:	08038e4c 	.word	0x08038e4c
 8022380:	08038e48 	.word	0x08038e48

08022384 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 8022384:	4b09      	ldr	r3, [pc, #36]	@ (80223ac <mg_md5_init+0x28>)
 8022386:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 8022388:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 802238c:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 802238e:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 8022392:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8022396:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 802239a:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 802239c:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 80223a0:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 80223a2:	2300      	movs	r3, #0
 80223a4:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 80223a6:	6143      	str	r3, [r0, #20]
}
 80223a8:	4770      	bx	lr
 80223aa:	bf00      	nop
 80223ac:	67452301 	.word	0x67452301

080223b0 <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 80223b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80223b4:	4606      	mov	r6, r0
 80223b6:	460c      	mov	r4, r1
 80223b8:	4615      	mov	r5, r2
  t = ctx->bits[0];
 80223ba:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 80223bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80223c0:	6102      	str	r2, [r0, #16]
 80223c2:	429a      	cmp	r2, r3
 80223c4:	d202      	bcs.n	80223cc <mg_md5_update+0x1c>
 80223c6:	6942      	ldr	r2, [r0, #20]
 80223c8:	3201      	adds	r2, #1
 80223ca:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 80223cc:	6972      	ldr	r2, [r6, #20]
 80223ce:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 80223d2:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 80223d4:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 80223d8:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 80223dc:	d035      	beq.n	802244a <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 80223de:	f106 0918 	add.w	r9, r6, #24
 80223e2:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 80223e6:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 80223ea:	4545      	cmp	r5, r8
 80223ec:	d30b      	bcc.n	8022406 <mg_md5_update+0x56>
    memcpy(p, buf, t);
 80223ee:	4642      	mov	r2, r8
 80223f0:	4621      	mov	r1, r4
 80223f2:	f00a fd41 	bl	802ce78 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80223f6:	4649      	mov	r1, r9
 80223f8:	4630      	mov	r0, r6
 80223fa:	f7fd fb2d 	bl	801fa58 <mg_md5_transform>
    buf += t;
 80223fe:	4444      	add	r4, r8
    len -= t;
 8022400:	3f40      	subs	r7, #64	@ 0x40
 8022402:	443d      	add	r5, r7
 8022404:	e021      	b.n	802244a <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 8022406:	462a      	mov	r2, r5
 8022408:	4621      	mov	r1, r4
 802240a:	f00a fd35 	bl	802ce78 <memcpy>
      return;
 802240e:	e024      	b.n	802245a <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 8022410:	f106 0118 	add.w	r1, r6, #24
 8022414:	4623      	mov	r3, r4
 8022416:	468c      	mov	ip, r1
 8022418:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 802241c:	681f      	ldr	r7, [r3, #0]
 802241e:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8022422:	6898      	ldr	r0, [r3, #8]
 8022424:	68da      	ldr	r2, [r3, #12]
 8022426:	f8cc 7000 	str.w	r7, [ip]
 802242a:	f8cc e004 	str.w	lr, [ip, #4]
 802242e:	f8cc 0008 	str.w	r0, [ip, #8]
 8022432:	f8cc 200c 	str.w	r2, [ip, #12]
 8022436:	3310      	adds	r3, #16
 8022438:	f10c 0c10 	add.w	ip, ip, #16
 802243c:	4543      	cmp	r3, r8
 802243e:	d1ed      	bne.n	802241c <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8022440:	4630      	mov	r0, r6
 8022442:	f7fd fb09 	bl	801fa58 <mg_md5_transform>
    buf += 64;
 8022446:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 8022448:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 802244a:	2d3f      	cmp	r5, #63	@ 0x3f
 802244c:	d8e0      	bhi.n	8022410 <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 802244e:	462a      	mov	r2, r5
 8022450:	4621      	mov	r1, r4
 8022452:	f106 0018 	add.w	r0, r6, #24
 8022456:	f00a fd0f 	bl	802ce78 <memcpy>
}
 802245a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0802245e <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 802245e:	b570      	push	{r4, r5, r6, lr}
 8022460:	4604      	mov	r4, r0
 8022462:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 8022464:	6903      	ldr	r3, [r0, #16]
 8022466:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 802246a:	f100 0618 	add.w	r6, r0, #24
 802246e:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 8022470:	3001      	adds	r0, #1
 8022472:	2280      	movs	r2, #128	@ 0x80
 8022474:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 8022476:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 802247a:	2a07      	cmp	r2, #7
 802247c:	d821      	bhi.n	80224c2 <mg_md5_final+0x64>
    memset(p, 0, count);
 802247e:	2100      	movs	r1, #0
 8022480:	f009 fabe 	bl	802ba00 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8022484:	4631      	mov	r1, r6
 8022486:	4620      	mov	r0, r4
 8022488:	f7fd fae6 	bl	801fa58 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 802248c:	2238      	movs	r2, #56	@ 0x38
 802248e:	2100      	movs	r1, #0
 8022490:	4630      	mov	r0, r6
 8022492:	f009 fab5 	bl	802ba00 <memset>
  a[14] = ctx->bits[0];
 8022496:	6923      	ldr	r3, [r4, #16]
 8022498:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 802249a:	6963      	ldr	r3, [r4, #20]
 802249c:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802249e:	4631      	mov	r1, r6
 80224a0:	4620      	mov	r0, r4
 80224a2:	f7fd fad9 	bl	801fa58 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 80224a6:	6820      	ldr	r0, [r4, #0]
 80224a8:	6861      	ldr	r1, [r4, #4]
 80224aa:	68a2      	ldr	r2, [r4, #8]
 80224ac:	68e3      	ldr	r3, [r4, #12]
 80224ae:	6028      	str	r0, [r5, #0]
 80224b0:	6069      	str	r1, [r5, #4]
 80224b2:	60aa      	str	r2, [r5, #8]
 80224b4:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 80224b6:	2258      	movs	r2, #88	@ 0x58
 80224b8:	2100      	movs	r1, #0
 80224ba:	4620      	mov	r0, r4
 80224bc:	f009 faa0 	bl	802ba00 <memset>
}
 80224c0:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 80224c2:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 80224c6:	2100      	movs	r1, #0
 80224c8:	f009 fa9a 	bl	802ba00 <memset>
 80224cc:	e7e3      	b.n	8022496 <mg_md5_final+0x38>

080224ce <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 80224ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80224d2:	4604      	mov	r4, r0
 80224d4:	460d      	mov	r5, r1
 80224d6:	4617      	mov	r7, r2
 80224d8:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 80224da:	2228      	movs	r2, #40	@ 0x28
 80224dc:	2100      	movs	r1, #0
 80224de:	4618      	mov	r0, r3
 80224e0:	f009 fa8e 	bl	802ba00 <memset>
  m->dgram.buf = (char *) buf;
 80224e4:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 80224e6:	2d01      	cmp	r5, #1
 80224e8:	f240 8088 	bls.w	80225fc <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 80224ec:	7820      	ldrb	r0, [r4, #0]
 80224ee:	0900      	lsrs	r0, r0, #4
 80224f0:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 80224f2:	46a4      	mov	ip, r4
 80224f4:	f81c 9b01 	ldrb.w	r9, [ip], #1
 80224f8:	f3c9 0941 	ubfx	r9, r9, #1, #2
 80224fc:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 8022500:	2300      	movs	r3, #0
 8022502:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 8022504:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 8022506:	ebac 0e04 	sub.w	lr, ip, r4
 802250a:	45ae      	cmp	lr, r5
 802250c:	d211      	bcs.n	8022532 <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 802250e:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8022512:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 8022516:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 802251a:	fa0e fe08 	lsl.w	lr, lr, r8
 802251e:	4471      	add	r1, lr
    len_len++;
 8022520:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 8022522:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8022526:	d004      	beq.n	8022532 <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 8022528:	2b03      	cmp	r3, #3
 802252a:	d9ec      	bls.n	8022506 <mg_mqtt_parse+0x38>
 802252c:	2002      	movs	r0, #2
}
 802252e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 8022532:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8022536:	f012 0f80 	tst.w	r2, #128	@ 0x80
 802253a:	d161      	bne.n	8022600 <mg_mqtt_parse+0x132>
 802253c:	4425      	add	r5, r4
 802253e:	4545      	cmp	r5, r8
 8022540:	d360      	bcc.n	8022604 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 8022542:	eba8 0304 	sub.w	r3, r8, r4
 8022546:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 8022548:	2803      	cmp	r0, #3
 802254a:	d01c      	beq.n	8022586 <mg_mqtt_parse+0xb8>
 802254c:	d80a      	bhi.n	8022564 <mg_mqtt_parse+0x96>
 802254e:	2802      	cmp	r0, #2
 8022550:	d106      	bne.n	8022560 <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 8022552:	2901      	cmp	r1, #1
 8022554:	dd5a      	ble.n	802260c <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 8022556:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802255a:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 802255c:	2000      	movs	r0, #0
      break;
 802255e:	e7e6      	b.n	802252e <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8022560:	2000      	movs	r0, #0
 8022562:	e7e4      	b.n	802252e <mg_mqtt_parse+0x60>
 8022564:	3804      	subs	r0, #4
 8022566:	b2c0      	uxtb	r0, r0
 8022568:	2807      	cmp	r0, #7
 802256a:	d84d      	bhi.n	8022608 <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 802256c:	f10c 0302 	add.w	r3, ip, #2
 8022570:	4543      	cmp	r3, r8
 8022572:	d84d      	bhi.n	8022610 <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8022574:	f89c 2000 	ldrb.w	r2, [ip]
 8022578:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802257c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022580:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 8022582:	2000      	movs	r0, #0
      break;
 8022584:	e7d3      	b.n	802252e <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8022586:	f10c 0202 	add.w	r2, ip, #2
 802258a:	4542      	cmp	r2, r8
 802258c:	d842      	bhi.n	8022614 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 802258e:	f89c 1000 	ldrb.w	r1, [ip]
 8022592:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022596:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 802259a:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 802259c:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 802259e:	3302      	adds	r3, #2
 80225a0:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 80225a4:	45a8      	cmp	r8, r5
 80225a6:	d337      	bcc.n	8022618 <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 80225a8:	f1b9 0f00 	cmp.w	r9, #0
 80225ac:	d008      	beq.n	80225c0 <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 80225ae:	1caa      	adds	r2, r5, #2
 80225b0:	4542      	cmp	r2, r8
 80225b2:	d833      	bhi.n	802261c <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80225b4:	7829      	ldrb	r1, [r5, #0]
 80225b6:	786b      	ldrb	r3, [r5, #1]
 80225b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80225bc:	8333      	strh	r3, [r6, #24]
        p += 2;
 80225be:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 80225c0:	4545      	cmp	r5, r8
 80225c2:	d82d      	bhi.n	8022620 <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 80225c4:	2f05      	cmp	r7, #5
 80225c6:	d007      	beq.n	80225d8 <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 80225c8:	4545      	cmp	r5, r8
 80225ca:	d82d      	bhi.n	8022628 <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 80225cc:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 80225ce:	eba8 0505 	sub.w	r5, r8, r5
 80225d2:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 80225d4:	2000      	movs	r0, #0
      break;
 80225d6:	e7aa      	b.n	802252e <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 80225d8:	1cab      	adds	r3, r5, #2
 80225da:	4543      	cmp	r3, r8
 80225dc:	d2f4      	bcs.n	80225c8 <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 80225de:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 80225e2:	eba8 0105 	sub.w	r1, r8, r5
 80225e6:	4628      	mov	r0, r5
 80225e8:	f7fd fdde 	bl	80201a8 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 80225ec:	b1d0      	cbz	r0, 8022624 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 80225ee:	182b      	adds	r3, r5, r0
 80225f0:	1b1b      	subs	r3, r3, r4
 80225f2:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 80225f4:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80225f6:	4403      	add	r3, r0
 80225f8:	441d      	add	r5, r3
 80225fa:	e7e5      	b.n	80225c8 <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 80225fc:	2001      	movs	r0, #1
 80225fe:	e796      	b.n	802252e <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8022600:	2001      	movs	r0, #1
 8022602:	e794      	b.n	802252e <mg_mqtt_parse+0x60>
 8022604:	2001      	movs	r0, #1
 8022606:	e792      	b.n	802252e <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8022608:	2000      	movs	r0, #0
 802260a:	e790      	b.n	802252e <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 802260c:	2002      	movs	r0, #2
 802260e:	e78e      	b.n	802252e <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8022610:	2002      	movs	r0, #2
 8022612:	e78c      	b.n	802252e <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8022614:	2002      	movs	r0, #2
 8022616:	e78a      	b.n	802252e <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8022618:	2002      	movs	r0, #2
 802261a:	e788      	b.n	802252e <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 802261c:	2002      	movs	r0, #2
 802261e:	e786      	b.n	802252e <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8022620:	2002      	movs	r0, #2
 8022622:	e784      	b.n	802252e <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 8022624:	2002      	movs	r0, #2
 8022626:	e782      	b.n	802252e <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8022628:	2002      	movs	r0, #2
 802262a:	e780      	b.n	802252e <mg_mqtt_parse+0x60>

0802262c <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 802262c:	b510      	push	{r4, lr}
 802262e:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8022630:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8022632:	31b0      	adds	r1, #176	@ 0xb0
 8022634:	2001      	movs	r0, #1
 8022636:	f7ff f95f 	bl	80218f8 <mg_calloc>
  if (c != NULL) {
 802263a:	4603      	mov	r3, r0
 802263c:	b148      	cbz	r0, 8022652 <mg_alloc_conn+0x26>
    c->mgr = mgr;
 802263e:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 8022640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022644:	6742      	str	r2, [r0, #116]	@ 0x74
 8022646:	6442      	str	r2, [r0, #68]	@ 0x44
 8022648:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 802264a:	69e2      	ldr	r2, [r4, #28]
 802264c:	3201      	adds	r2, #1
 802264e:	61e2      	str	r2, [r4, #28]
 8022650:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8022652:	4618      	mov	r0, r3
 8022654:	bd10      	pop	{r4, pc}
	...

08022658 <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 8022658:	b510      	push	{r4, lr}
 802265a:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 802265c:	2248      	movs	r2, #72	@ 0x48
 802265e:	2100      	movs	r1, #0
 8022660:	f009 f9ce 	bl	802ba00 <memset>
  mgr->epoll_fd = -1;
 8022664:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022668:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 802266a:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 802266c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8022670:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8022672:	4b02      	ldr	r3, [pc, #8]	@ (802267c <mg_mgr_init+0x24>)
 8022674:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8022676:	4b02      	ldr	r3, [pc, #8]	@ (8022680 <mg_mgr_init+0x28>)
 8022678:	60e3      	str	r3, [r4, #12]
}
 802267a:	bd10      	pop	{r4, pc}
 802267c:	08038e50 	.word	0x08038e50
 8022680:	08038e64 	.word	0x08038e64

08022684 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8022684:	b40c      	push	{r2, r3}
 8022686:	b500      	push	{lr}
 8022688:	b083      	sub	sp, #12
 802268a:	ab04      	add	r3, sp, #16
 802268c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8022690:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8022692:	ab01      	add	r3, sp, #4
 8022694:	f000 fce0 	bl	8023058 <mg_vsnprintf>
}
 8022698:	b003      	add	sp, #12
 802269a:	f85d eb04 	ldr.w	lr, [sp], #4
 802269e:	b002      	add	sp, #8
 80226a0:	4770      	bx	lr
 80226a2:	0000      	movs	r0, r0
 80226a4:	0000      	movs	r0, r0
	...

080226a8 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 80226a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226ac:	b093      	sub	sp, #76	@ 0x4c
 80226ae:	9005      	str	r0, [sp, #20]
 80226b0:	9106      	str	r1, [sp, #24]
 80226b2:	ec51 0b10 	vmov	r0, r1, d0
 80226b6:	ed8d 0b02 	vstr	d0, [sp, #8]
 80226ba:	4690      	mov	r8, r2
 80226bc:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80226be:	2200      	movs	r2, #0
 80226c0:	2300      	movs	r3, #0
 80226c2:	f7ee fa19 	bl	8010af8 <__aeabi_dcmpeq>
 80226c6:	b9c8      	cbnz	r0, 80226fc <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 80226c8:	ed9d 0b02 	vldr	d0, [sp, #8]
 80226cc:	f7fc fb1c 	bl	801ed08 <xisinf>
 80226d0:	b9d8      	cbnz	r0, 802270a <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 80226d2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80226d6:	f7fc fb29 	bl	801ed2c <xisnan>
 80226da:	4606      	mov	r6, r0
 80226dc:	bb28      	cbnz	r0, 802272a <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80226de:	2200      	movs	r2, #0
 80226e0:	2300      	movs	r3, #0
 80226e2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80226e6:	4620      	mov	r0, r4
 80226e8:	4629      	mov	r1, r5
 80226ea:	f7ee fa0f 	bl	8010b0c <__aeabi_dcmplt>
 80226ee:	bb18      	cbnz	r0, 8022738 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 80226f0:	4637      	mov	r7, r6
  mul = 1.0;
 80226f2:	2400      	movs	r4, #0
 80226f4:	4dba      	ldr	r5, [pc, #744]	@ (80229e0 <mg_dtoa+0x338>)
 80226f6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80226fa:	e02f      	b.n	802275c <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80226fc:	4bb9      	ldr	r3, [pc, #740]	@ (80229e4 <mg_dtoa+0x33c>)
 80226fe:	4aba      	ldr	r2, [pc, #744]	@ (80229e8 <mg_dtoa+0x340>)
 8022700:	9906      	ldr	r1, [sp, #24]
 8022702:	9805      	ldr	r0, [sp, #20]
 8022704:	f7ff ffbe 	bl	8022684 <mg_snprintf>
 8022708:	e1d3      	b.n	8022ab2 <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 802270a:	2200      	movs	r2, #0
 802270c:	2300      	movs	r3, #0
 802270e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022712:	f7ee fa19 	bl	8010b48 <__aeabi_dcmpgt>
 8022716:	b130      	cbz	r0, 8022726 <mg_dtoa+0x7e>
 8022718:	4bb4      	ldr	r3, [pc, #720]	@ (80229ec <mg_dtoa+0x344>)
 802271a:	4ab3      	ldr	r2, [pc, #716]	@ (80229e8 <mg_dtoa+0x340>)
 802271c:	9906      	ldr	r1, [sp, #24]
 802271e:	9805      	ldr	r0, [sp, #20]
 8022720:	f7ff ffb0 	bl	8022684 <mg_snprintf>
 8022724:	e1c5      	b.n	8022ab2 <mg_dtoa+0x40a>
 8022726:	4bb2      	ldr	r3, [pc, #712]	@ (80229f0 <mg_dtoa+0x348>)
 8022728:	e7f7      	b.n	802271a <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 802272a:	4bb2      	ldr	r3, [pc, #712]	@ (80229f4 <mg_dtoa+0x34c>)
 802272c:	4aae      	ldr	r2, [pc, #696]	@ (80229e8 <mg_dtoa+0x340>)
 802272e:	9906      	ldr	r1, [sp, #24]
 8022730:	9805      	ldr	r0, [sp, #20]
 8022732:	f7ff ffa7 	bl	8022684 <mg_snprintf>
 8022736:	e1bc      	b.n	8022ab2 <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8022738:	4622      	mov	r2, r4
 802273a:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 802273e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022742:	232d      	movs	r3, #45	@ 0x2d
 8022744:	f88d 3020 	strb.w	r3, [sp, #32]
 8022748:	2701      	movs	r7, #1
 802274a:	e7d2      	b.n	80226f2 <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 802274c:	2200      	movs	r2, #0
 802274e:	4baa      	ldr	r3, [pc, #680]	@ (80229f8 <mg_dtoa+0x350>)
 8022750:	4620      	mov	r0, r4
 8022752:	4629      	mov	r1, r5
 8022754:	f7ed ff68 	bl	8010628 <__aeabi_dmul>
 8022758:	4604      	mov	r4, r0
 802275a:	460d      	mov	r5, r1
 802275c:	2200      	movs	r2, #0
 802275e:	4ba6      	ldr	r3, [pc, #664]	@ (80229f8 <mg_dtoa+0x350>)
 8022760:	4650      	mov	r0, sl
 8022762:	4659      	mov	r1, fp
 8022764:	f7ee f9e6 	bl	8010b34 <__aeabi_dcmpge>
 8022768:	b1b0      	cbz	r0, 8022798 <mg_dtoa+0xf0>
 802276a:	4622      	mov	r2, r4
 802276c:	462b      	mov	r3, r5
 802276e:	4650      	mov	r0, sl
 8022770:	4659      	mov	r1, fp
 8022772:	f7ee f883 	bl	801087c <__aeabi_ddiv>
 8022776:	2200      	movs	r2, #0
 8022778:	4b9f      	ldr	r3, [pc, #636]	@ (80229f8 <mg_dtoa+0x350>)
 802277a:	f7ee f9db 	bl	8010b34 <__aeabi_dcmpge>
 802277e:	2800      	cmp	r0, #0
 8022780:	d1e4      	bne.n	802274c <mg_dtoa+0xa4>
 8022782:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8022786:	e007      	b.n	8022798 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8022788:	2200      	movs	r2, #0
 802278a:	4b9b      	ldr	r3, [pc, #620]	@ (80229f8 <mg_dtoa+0x350>)
 802278c:	4620      	mov	r0, r4
 802278e:	4629      	mov	r1, r5
 8022790:	f7ee f874 	bl	801087c <__aeabi_ddiv>
 8022794:	4604      	mov	r4, r0
 8022796:	460d      	mov	r5, r1
 8022798:	2200      	movs	r2, #0
 802279a:	4b91      	ldr	r3, [pc, #580]	@ (80229e0 <mg_dtoa+0x338>)
 802279c:	4650      	mov	r0, sl
 802279e:	4659      	mov	r1, fp
 80227a0:	f7ee f9be 	bl	8010b20 <__aeabi_dcmple>
 80227a4:	b158      	cbz	r0, 80227be <mg_dtoa+0x116>
 80227a6:	4622      	mov	r2, r4
 80227a8:	462b      	mov	r3, r5
 80227aa:	4650      	mov	r0, sl
 80227ac:	4659      	mov	r1, fp
 80227ae:	f7ee f865 	bl	801087c <__aeabi_ddiv>
 80227b2:	2200      	movs	r2, #0
 80227b4:	4b8a      	ldr	r3, [pc, #552]	@ (80229e0 <mg_dtoa+0x338>)
 80227b6:	f7ee f9b3 	bl	8010b20 <__aeabi_dcmple>
 80227ba:	2800      	cmp	r0, #0
 80227bc:	d1e4      	bne.n	8022788 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 80227be:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80227c2:	2200      	movs	r2, #0
 80227c4:	4b8d      	ldr	r3, [pc, #564]	@ (80229fc <mg_dtoa+0x354>)
 80227c6:	4620      	mov	r0, r4
 80227c8:	4629      	mov	r1, r5
 80227ca:	f7ed ff2d 	bl	8010628 <__aeabi_dmul>
 80227ce:	4634      	mov	r4, r6
 80227d0:	e004      	b.n	80227dc <mg_dtoa+0x134>
 80227d2:	2200      	movs	r2, #0
 80227d4:	4b88      	ldr	r3, [pc, #544]	@ (80229f8 <mg_dtoa+0x350>)
 80227d6:	f7ee f851 	bl	801087c <__aeabi_ddiv>
 80227da:	3401      	adds	r4, #1
 80227dc:	4544      	cmp	r4, r8
 80227de:	dbf8      	blt.n	80227d2 <mg_dtoa+0x12a>
  d += t;
 80227e0:	4602      	mov	r2, r0
 80227e2:	460b      	mov	r3, r1
 80227e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80227e8:	f7ed fd68 	bl	80102bc <__adddf3>
 80227ec:	4682      	mov	sl, r0
 80227ee:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 80227f0:	46b1      	mov	r9, r6
  mul = 1.0;
 80227f2:	2400      	movs	r4, #0
 80227f4:	4d7a      	ldr	r5, [pc, #488]	@ (80229e0 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 80227f6:	e009      	b.n	802280c <mg_dtoa+0x164>
 80227f8:	2200      	movs	r2, #0
 80227fa:	4b7f      	ldr	r3, [pc, #508]	@ (80229f8 <mg_dtoa+0x350>)
 80227fc:	4620      	mov	r0, r4
 80227fe:	4629      	mov	r1, r5
 8022800:	f7ed ff12 	bl	8010628 <__aeabi_dmul>
 8022804:	4604      	mov	r4, r0
 8022806:	460d      	mov	r5, r1
 8022808:	f109 0901 	add.w	r9, r9, #1
 802280c:	2200      	movs	r2, #0
 802280e:	4b7a      	ldr	r3, [pc, #488]	@ (80229f8 <mg_dtoa+0x350>)
 8022810:	4650      	mov	r0, sl
 8022812:	4659      	mov	r1, fp
 8022814:	f7ee f98e 	bl	8010b34 <__aeabi_dcmpge>
 8022818:	b1b0      	cbz	r0, 8022848 <mg_dtoa+0x1a0>
 802281a:	4622      	mov	r2, r4
 802281c:	462b      	mov	r3, r5
 802281e:	4650      	mov	r0, sl
 8022820:	4659      	mov	r1, fp
 8022822:	f7ee f82b 	bl	801087c <__aeabi_ddiv>
 8022826:	2200      	movs	r2, #0
 8022828:	4b73      	ldr	r3, [pc, #460]	@ (80229f8 <mg_dtoa+0x350>)
 802282a:	f7ee f983 	bl	8010b34 <__aeabi_dcmpge>
 802282e:	2800      	cmp	r0, #0
 8022830:	d1e2      	bne.n	80227f8 <mg_dtoa+0x150>
 8022832:	e009      	b.n	8022848 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8022834:	2200      	movs	r2, #0
 8022836:	4b70      	ldr	r3, [pc, #448]	@ (80229f8 <mg_dtoa+0x350>)
 8022838:	4620      	mov	r0, r4
 802283a:	4629      	mov	r1, r5
 802283c:	f7ee f81e 	bl	801087c <__aeabi_ddiv>
 8022840:	4604      	mov	r4, r0
 8022842:	460d      	mov	r5, r1
 8022844:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8022848:	2200      	movs	r2, #0
 802284a:	4b65      	ldr	r3, [pc, #404]	@ (80229e0 <mg_dtoa+0x338>)
 802284c:	4650      	mov	r0, sl
 802284e:	4659      	mov	r1, fp
 8022850:	f7ee f95c 	bl	8010b0c <__aeabi_dcmplt>
 8022854:	b158      	cbz	r0, 802286e <mg_dtoa+0x1c6>
 8022856:	4622      	mov	r2, r4
 8022858:	462b      	mov	r3, r5
 802285a:	4650      	mov	r0, sl
 802285c:	4659      	mov	r1, fp
 802285e:	f7ee f80d 	bl	801087c <__aeabi_ddiv>
 8022862:	2200      	movs	r2, #0
 8022864:	4b5e      	ldr	r3, [pc, #376]	@ (80229e0 <mg_dtoa+0x338>)
 8022866:	f7ee f951 	bl	8010b0c <__aeabi_dcmplt>
 802286a:	2800      	cmp	r0, #0
 802286c:	d1e2      	bne.n	8022834 <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 802286e:	45c1      	cmp	r9, r8
 8022870:	db02      	blt.n	8022878 <mg_dtoa+0x1d0>
 8022872:	f1b8 0f01 	cmp.w	r8, #1
 8022876:	dc25      	bgt.n	80228c4 <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 8022878:	f1c8 0300 	rsb	r3, r8, #0
 802287c:	454b      	cmp	r3, r9
 802287e:	db5e      	blt.n	802293e <mg_dtoa+0x296>
 8022880:	f1b8 0f01 	cmp.w	r8, #1
 8022884:	dd5b      	ble.n	802293e <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8022886:	4622      	mov	r2, r4
 8022888:	462b      	mov	r3, r5
 802288a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802288e:	f7ed fff5 	bl	801087c <__aeabi_ddiv>
 8022892:	ad08      	add	r5, sp, #32
 8022894:	9b07      	ldr	r3, [sp, #28]
 8022896:	4642      	mov	r2, r8
 8022898:	ec41 0b10 	vmov	d0, r0, r1
 802289c:	2128      	movs	r1, #40	@ 0x28
 802289e:	4628      	mov	r0, r5
 80228a0:	f7ff ff02 	bl	80226a8 <mg_dtoa>
 80228a4:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 80228a6:	1838      	adds	r0, r7, r0
 80228a8:	222d      	movs	r2, #45	@ 0x2d
 80228aa:	f1c9 0100 	rsb	r1, r9, #0
 80228ae:	4428      	add	r0, r5
 80228b0:	f7fc f9f0 	bl	801ec94 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80228b4:	9500      	str	r5, [sp, #0]
 80228b6:	1823      	adds	r3, r4, r0
 80228b8:	4a51      	ldr	r2, [pc, #324]	@ (8022a00 <mg_dtoa+0x358>)
 80228ba:	9906      	ldr	r1, [sp, #24]
 80228bc:	9805      	ldr	r0, [sp, #20]
 80228be:	f7ff fee1 	bl	8022684 <mg_snprintf>
 80228c2:	e0f6      	b.n	8022ab2 <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80228c4:	4622      	mov	r2, r4
 80228c6:	462b      	mov	r3, r5
 80228c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80228cc:	f7ed ffd6 	bl	801087c <__aeabi_ddiv>
 80228d0:	ad08      	add	r5, sp, #32
 80228d2:	9b07      	ldr	r3, [sp, #28]
 80228d4:	4642      	mov	r2, r8
 80228d6:	ec41 0b10 	vmov	d0, r0, r1
 80228da:	2128      	movs	r1, #40	@ 0x28
 80228dc:	4628      	mov	r0, r5
 80228de:	f7ff fee3 	bl	80226a8 <mg_dtoa>
 80228e2:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 80228e4:	1838      	adds	r0, r7, r0
 80228e6:	222b      	movs	r2, #43	@ 0x2b
 80228e8:	4649      	mov	r1, r9
 80228ea:	4428      	add	r0, r5
 80228ec:	f7fc f9d2 	bl	801ec94 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80228f0:	9500      	str	r5, [sp, #0]
 80228f2:	1823      	adds	r3, r4, r0
 80228f4:	4a42      	ldr	r2, [pc, #264]	@ (8022a00 <mg_dtoa+0x358>)
 80228f6:	9906      	ldr	r1, [sp, #24]
 80228f8:	9805      	ldr	r0, [sp, #20]
 80228fa:	f7ff fec3 	bl	8022684 <mg_snprintf>
 80228fe:	e0d8      	b.n	8022ab2 <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8022900:	3601      	adds	r6, #1
 8022902:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8022906:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 802290a:	eb0d 0902 	add.w	r9, sp, r2
 802290e:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8022912:	f7ed fe1f 	bl	8010554 <__aeabi_i2d>
 8022916:	4622      	mov	r2, r4
 8022918:	462b      	mov	r3, r5
 802291a:	f7ed fe85 	bl	8010628 <__aeabi_dmul>
 802291e:	4602      	mov	r2, r0
 8022920:	460b      	mov	r3, r1
 8022922:	4650      	mov	r0, sl
 8022924:	4659      	mov	r1, fp
 8022926:	f7ed fcc7 	bl	80102b8 <__aeabi_dsub>
 802292a:	4682      	mov	sl, r0
 802292c:	468b      	mov	fp, r1
      t /= 10.0;
 802292e:	2200      	movs	r2, #0
 8022930:	4b31      	ldr	r3, [pc, #196]	@ (80229f8 <mg_dtoa+0x350>)
 8022932:	4620      	mov	r0, r4
 8022934:	4629      	mov	r1, r5
 8022936:	f7ed ffa1 	bl	801087c <__aeabi_ddiv>
 802293a:	4604      	mov	r4, r0
 802293c:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 802293e:	2200      	movs	r2, #0
 8022940:	4b27      	ldr	r3, [pc, #156]	@ (80229e0 <mg_dtoa+0x338>)
 8022942:	4620      	mov	r0, r4
 8022944:	4629      	mov	r1, r5
 8022946:	f7ee f8f5 	bl	8010b34 <__aeabi_dcmpge>
 802294a:	b188      	cbz	r0, 8022970 <mg_dtoa+0x2c8>
 802294c:	eb07 0906 	add.w	r9, r7, r6
 8022950:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8022954:	dc0c      	bgt.n	8022970 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 8022956:	4622      	mov	r2, r4
 8022958:	462b      	mov	r3, r5
 802295a:	4650      	mov	r0, sl
 802295c:	4659      	mov	r1, fp
 802295e:	f7ed ff8d 	bl	801087c <__aeabi_ddiv>
 8022962:	f7ee f911 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8022966:	2e00      	cmp	r6, #0
 8022968:	dcca      	bgt.n	8022900 <mg_dtoa+0x258>
 802296a:	2800      	cmp	r0, #0
 802296c:	dcc8      	bgt.n	8022900 <mg_dtoa+0x258>
 802296e:	e7d0      	b.n	8022912 <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 8022970:	b9ce      	cbnz	r6, 80229a6 <mg_dtoa+0x2fe>
 8022972:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8022976:	446b      	add	r3, sp
 8022978:	2230      	movs	r2, #48	@ 0x30
 802297a:	f803 2c28 	strb.w	r2, [r3, #-40]
 802297e:	3701      	adds	r7, #1
 8022980:	e011      	b.n	80229a6 <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8022982:	f106 0901 	add.w	r9, r6, #1
 8022986:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 802298a:	eb0d 0603 	add.w	r6, sp, r3
 802298e:	2330      	movs	r3, #48	@ 0x30
 8022990:	f806 3c28 	strb.w	r3, [r6, #-40]
 8022994:	2200      	movs	r2, #0
 8022996:	4b18      	ldr	r3, [pc, #96]	@ (80229f8 <mg_dtoa+0x350>)
 8022998:	4620      	mov	r0, r4
 802299a:	4629      	mov	r1, r5
 802299c:	f7ed ff6e 	bl	801087c <__aeabi_ddiv>
 80229a0:	4604      	mov	r4, r0
 80229a2:	460d      	mov	r5, r1
 80229a4:	464e      	mov	r6, r9
 80229a6:	2200      	movs	r2, #0
 80229a8:	4b0d      	ldr	r3, [pc, #52]	@ (80229e0 <mg_dtoa+0x338>)
 80229aa:	4620      	mov	r0, r4
 80229ac:	4629      	mov	r1, r5
 80229ae:	f7ee f8c1 	bl	8010b34 <__aeabi_dcmpge>
 80229b2:	b110      	cbz	r0, 80229ba <mg_dtoa+0x312>
 80229b4:	19f3      	adds	r3, r6, r7
 80229b6:	2b27      	cmp	r3, #39	@ 0x27
 80229b8:	dde3      	ble.n	8022982 <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 80229ba:	19f3      	adds	r3, r6, r7
 80229bc:	2b27      	cmp	r3, #39	@ 0x27
 80229be:	dc05      	bgt.n	80229cc <mg_dtoa+0x324>
 80229c0:	3701      	adds	r7, #1
 80229c2:	3348      	adds	r3, #72	@ 0x48
 80229c4:	446b      	add	r3, sp
 80229c6:	222e      	movs	r2, #46	@ 0x2e
 80229c8:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80229cc:	a502      	add	r5, pc, #8	@ (adr r5, 80229d8 <mg_dtoa+0x330>)
 80229ce:	e9d5 4500 	ldrd	r4, r5, [r5]
 80229d2:	e03e      	b.n	8022a52 <mg_dtoa+0x3aa>
 80229d4:	f3af 8000 	nop.w
 80229d8:	9999999a 	.word	0x9999999a
 80229dc:	3fb99999 	.word	0x3fb99999
 80229e0:	3ff00000 	.word	0x3ff00000
 80229e4:	0803819c 	.word	0x0803819c
 80229e8:	08039a5c 	.word	0x08039a5c
 80229ec:	08038e84 	.word	0x08038e84
 80229f0:	08038e88 	.word	0x08038e88
 80229f4:	08038e90 	.word	0x08038e90
 80229f8:	40240000 	.word	0x40240000
 80229fc:	40140000 	.word	0x40140000
 8022a00:	08038e94 	.word	0x08038e94
      int ch = (int) (d / t);
 8022a04:	4622      	mov	r2, r4
 8022a06:	462b      	mov	r3, r5
 8022a08:	4650      	mov	r0, sl
 8022a0a:	4659      	mov	r1, fp
 8022a0c:	f7ed ff36 	bl	801087c <__aeabi_ddiv>
 8022a10:	f7ee f8ba 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 8022a14:	3601      	adds	r6, #1
 8022a16:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8022a1a:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8022a1e:	eb0d 0902 	add.w	r9, sp, r2
 8022a22:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8022a26:	f7ed fd95 	bl	8010554 <__aeabi_i2d>
 8022a2a:	4622      	mov	r2, r4
 8022a2c:	462b      	mov	r3, r5
 8022a2e:	f7ed fdfb 	bl	8010628 <__aeabi_dmul>
 8022a32:	4602      	mov	r2, r0
 8022a34:	460b      	mov	r3, r1
 8022a36:	4650      	mov	r0, sl
 8022a38:	4659      	mov	r1, fp
 8022a3a:	f7ed fc3d 	bl	80102b8 <__aeabi_dsub>
 8022a3e:	4682      	mov	sl, r0
 8022a40:	468b      	mov	fp, r1
      t /= 10.0;
 8022a42:	2200      	movs	r2, #0
 8022a44:	4b1d      	ldr	r3, [pc, #116]	@ (8022abc <mg_dtoa+0x414>)
 8022a46:	4620      	mov	r0, r4
 8022a48:	4629      	mov	r1, r5
 8022a4a:	f7ed ff17 	bl	801087c <__aeabi_ddiv>
 8022a4e:	4604      	mov	r4, r0
 8022a50:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8022a52:	eb07 0906 	add.w	r9, r7, r6
 8022a56:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8022a5a:	dc03      	bgt.n	8022a64 <mg_dtoa+0x3bc>
 8022a5c:	4546      	cmp	r6, r8
 8022a5e:	dbd1      	blt.n	8022a04 <mg_dtoa+0x35c>
 8022a60:	9a07      	ldr	r2, [sp, #28]
 8022a62:	e000      	b.n	8022a66 <mg_dtoa+0x3be>
 8022a64:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8022a66:	b152      	cbz	r2, 8022a7e <mg_dtoa+0x3d6>
 8022a68:	2e00      	cmp	r6, #0
 8022a6a:	dd08      	ble.n	8022a7e <mg_dtoa+0x3d6>
 8022a6c:	19bb      	adds	r3, r7, r6
 8022a6e:	3347      	adds	r3, #71	@ 0x47
 8022a70:	446b      	add	r3, sp
 8022a72:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8022a76:	2b30      	cmp	r3, #48	@ 0x30
 8022a78:	d101      	bne.n	8022a7e <mg_dtoa+0x3d6>
 8022a7a:	3e01      	subs	r6, #1
 8022a7c:	e7f3      	b.n	8022a66 <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8022a7e:	2e00      	cmp	r6, #0
 8022a80:	dd06      	ble.n	8022a90 <mg_dtoa+0x3e8>
 8022a82:	19bb      	adds	r3, r7, r6
 8022a84:	3347      	adds	r3, #71	@ 0x47
 8022a86:	446b      	add	r3, sp
 8022a88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8022a8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8022a8e:	d013      	beq.n	8022ab8 <mg_dtoa+0x410>
  n += s;
 8022a90:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8022a92:	2f27      	cmp	r7, #39	@ 0x27
 8022a94:	dd00      	ble.n	8022a98 <mg_dtoa+0x3f0>
 8022a96:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 8022a98:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8022a9c:	eb0d 0703 	add.w	r7, sp, r3
 8022aa0:	2300      	movs	r3, #0
 8022aa2:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8022aa6:	ab08      	add	r3, sp, #32
 8022aa8:	4a05      	ldr	r2, [pc, #20]	@ (8022ac0 <mg_dtoa+0x418>)
 8022aaa:	9906      	ldr	r1, [sp, #24]
 8022aac:	9805      	ldr	r0, [sp, #20]
 8022aae:	f7ff fde9 	bl	8022684 <mg_snprintf>
}
 8022ab2:	b013      	add	sp, #76	@ 0x4c
 8022ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8022ab8:	3e01      	subs	r6, #1
 8022aba:	e7e9      	b.n	8022a90 <mg_dtoa+0x3e8>
 8022abc:	40240000 	.word	0x40240000
 8022ac0:	08039a5c 	.word	0x08039a5c

08022ac4 <mg_vxprintf>:
                   va_list *ap) {
 8022ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ac8:	b093      	sub	sp, #76	@ 0x4c
 8022aca:	4681      	mov	r9, r0
 8022acc:	468a      	mov	sl, r1
 8022ace:	4693      	mov	fp, r2
 8022ad0:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 8022ad2:	2700      	movs	r7, #0
 8022ad4:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 8022ad6:	e1bc      	b.n	8022e52 <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 8022ad8:	2320      	movs	r3, #32
 8022ada:	f88d 301f 	strb.w	r3, [sp, #31]
 8022ade:	1c66      	adds	r6, r4, #1
 8022ae0:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 8022ae4:	2d23      	cmp	r5, #35	@ 0x23
 8022ae6:	d00c      	beq.n	8022b02 <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8022ae8:	2300      	movs	r3, #0
 8022aea:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 8022aec:	2d2d      	cmp	r5, #45	@ 0x2d
 8022aee:	d10e      	bne.n	8022b0e <mg_vxprintf+0x4a>
 8022af0:	3601      	adds	r6, #1
 8022af2:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8022af6:	2301      	movs	r3, #1
 8022af8:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 8022afa:	2d30      	cmp	r5, #48	@ 0x30
 8022afc:	d00a      	beq.n	8022b14 <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 8022afe:	2400      	movs	r4, #0
 8022b00:	e017      	b.n	8022b32 <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 8022b02:	1ca6      	adds	r6, r4, #2
 8022b04:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8022b08:	2301      	movs	r3, #1
 8022b0a:	9302      	str	r3, [sp, #8]
 8022b0c:	e7ee      	b.n	8022aec <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 8022b0e:	2300      	movs	r3, #0
 8022b10:	9304      	str	r3, [sp, #16]
 8022b12:	e7f2      	b.n	8022afa <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 8022b14:	2330      	movs	r3, #48	@ 0x30
 8022b16:	f88d 301f 	strb.w	r3, [sp, #31]
 8022b1a:	3601      	adds	r6, #1
 8022b1c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8022b20:	e7ed      	b.n	8022afe <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8022b22:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8022b26:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8022b2a:	3c30      	subs	r4, #48	@ 0x30
 8022b2c:	3601      	adds	r6, #1
 8022b2e:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8022b32:	4628      	mov	r0, r5
 8022b34:	f7fc f8a7 	bl	801ec86 <is_digit>
 8022b38:	4601      	mov	r1, r0
 8022b3a:	2800      	cmp	r0, #0
 8022b3c:	d1f1      	bne.n	8022b22 <mg_vxprintf+0x5e>
      if (c == '.') {
 8022b3e:	2d2e      	cmp	r5, #46	@ 0x2e
 8022b40:	d002      	beq.n	8022b48 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8022b42:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8022b46:	e026      	b.n	8022b96 <mg_vxprintf+0xd2>
        c = fmt[++i];
 8022b48:	1c73      	adds	r3, r6, #1
 8022b4a:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 8022b4e:	2d2a      	cmp	r5, #42	@ 0x2a
 8022b50:	d119      	bne.n	8022b86 <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 8022b52:	9803      	ldr	r0, [sp, #12]
 8022b54:	6803      	ldr	r3, [r0, #0]
 8022b56:	1d1a      	adds	r2, r3, #4
 8022b58:	6002      	str	r2, [r0, #0]
 8022b5a:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 8022b5e:	3602      	adds	r6, #2
 8022b60:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8022b64:	e017      	b.n	8022b96 <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8022b66:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8022b6a:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 8022b6e:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 8022b72:	3601      	adds	r6, #1
 8022b74:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8022b78:	4628      	mov	r0, r5
 8022b7a:	f7fc f884 	bl	801ec86 <is_digit>
 8022b7e:	2800      	cmp	r0, #0
 8022b80:	d1f1      	bne.n	8022b66 <mg_vxprintf+0xa2>
 8022b82:	9905      	ldr	r1, [sp, #20]
 8022b84:	e007      	b.n	8022b96 <mg_vxprintf+0xd2>
          pr = 0;
 8022b86:	f04f 0800 	mov.w	r8, #0
 8022b8a:	461e      	mov	r6, r3
 8022b8c:	9005      	str	r0, [sp, #20]
 8022b8e:	e7f3      	b.n	8022b78 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8022b90:	3601      	adds	r6, #1
 8022b92:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8022b96:	2d68      	cmp	r5, #104	@ 0x68
 8022b98:	d0fa      	beq.n	8022b90 <mg_vxprintf+0xcc>
      if (c == 'l') {
 8022b9a:	2d6c      	cmp	r5, #108	@ 0x6c
 8022b9c:	d05f      	beq.n	8022c5e <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8022b9e:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8022ba0:	2d70      	cmp	r5, #112	@ 0x70
 8022ba2:	d069      	beq.n	8022c78 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8022ba4:	2d64      	cmp	r5, #100	@ 0x64
 8022ba6:	d06a      	beq.n	8022c7e <mg_vxprintf+0x1ba>
 8022ba8:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 8022bac:	2b53      	cmp	r3, #83	@ 0x53
 8022bae:	f200 81bc 	bhi.w	8022f2a <mg_vxprintf+0x466>
 8022bb2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8022bb6:	01b5      	.short	0x01b5
 8022bb8:	01ba01ba 	.word	0x01ba01ba
 8022bbc:	01ba01ba 	.word	0x01ba01ba
 8022bc0:	01ba01ba 	.word	0x01ba01ba
 8022bc4:	01ba01ba 	.word	0x01ba01ba
 8022bc8:	01ba01ba 	.word	0x01ba01ba
 8022bcc:	01ba01ba 	.word	0x01ba01ba
 8022bd0:	01ba01ba 	.word	0x01ba01ba
 8022bd4:	01ba01ba 	.word	0x01ba01ba
 8022bd8:	01ba01ba 	.word	0x01ba01ba
 8022bdc:	01ba01ba 	.word	0x01ba01ba
 8022be0:	01ba01ba 	.word	0x01ba01ba
 8022be4:	01ba01ba 	.word	0x01ba01ba
 8022be8:	01ba01ba 	.word	0x01ba01ba
 8022bec:	01ba01ba 	.word	0x01ba01ba
 8022bf0:	01ba01ba 	.word	0x01ba01ba
 8022bf4:	01ba01ba 	.word	0x01ba01ba
 8022bf8:	01ba01ba 	.word	0x01ba01ba
 8022bfc:	01ba01ba 	.word	0x01ba01ba
 8022c00:	01ba01ba 	.word	0x01ba01ba
 8022c04:	014101ba 	.word	0x014101ba
 8022c08:	01ba01ba 	.word	0x01ba01ba
 8022c0c:	01ba01ba 	.word	0x01ba01ba
 8022c10:	01ba01ba 	.word	0x01ba01ba
 8022c14:	01ba01ba 	.word	0x01ba01ba
 8022c18:	01ba01ba 	.word	0x01ba01ba
 8022c1c:	01ba0065 	.word	0x01ba0065
 8022c20:	01ba01ba 	.word	0x01ba01ba
 8022c24:	01ba01ba 	.word	0x01ba01ba
 8022c28:	01ba01ba 	.word	0x01ba01ba
 8022c2c:	01ba01ba 	.word	0x01ba01ba
 8022c30:	016801ba 	.word	0x016801ba
 8022c34:	01ba01ba 	.word	0x01ba01ba
 8022c38:	00650065 	.word	0x00650065
 8022c3c:	01ba01ba 	.word	0x01ba01ba
 8022c40:	01ba01ba 	.word	0x01ba01ba
 8022c44:	015a01ba 	.word	0x015a01ba
 8022c48:	01ba01ba 	.word	0x01ba01ba
 8022c4c:	01ba0065 	.word	0x01ba0065
 8022c50:	017101ba 	.word	0x017101ba
 8022c54:	006501ba 	.word	0x006501ba
 8022c58:	01ba01ba 	.word	0x01ba01ba
 8022c5c:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 8022c5e:	1c73      	adds	r3, r6, #1
 8022c60:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 8022c64:	2d6c      	cmp	r5, #108	@ 0x6c
 8022c66:	d002      	beq.n	8022c6e <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 8022c68:	461e      	mov	r6, r3
 8022c6a:	2201      	movs	r2, #1
 8022c6c:	e798      	b.n	8022ba0 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 8022c6e:	3602      	adds	r6, #2
 8022c70:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8022c74:	2202      	movs	r2, #2
 8022c76:	e793      	b.n	8022ba0 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 8022c78:	2201      	movs	r2, #1
 8022c7a:	9202      	str	r2, [sp, #8]
 8022c7c:	e792      	b.n	8022ba4 <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8022c7e:	2101      	movs	r1, #1
 8022c80:	2d58      	cmp	r5, #88	@ 0x58
 8022c82:	d027      	beq.n	8022cd4 <mg_vxprintf+0x210>
 8022c84:	2d70      	cmp	r5, #112	@ 0x70
 8022c86:	d021      	beq.n	8022ccc <mg_vxprintf+0x208>
 8022c88:	2300      	movs	r3, #0
 8022c8a:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 8022c8c:	9b02      	ldr	r3, [sp, #8]
 8022c8e:	b10b      	cbz	r3, 8022c94 <mg_vxprintf+0x1d0>
 8022c90:	2302      	movs	r3, #2
 8022c92:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 8022c94:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 8022c98:	b2db      	uxtb	r3, r3
 8022c9a:	2b01      	cmp	r3, #1
 8022c9c:	d91c      	bls.n	8022cd8 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 8022c9e:	2a02      	cmp	r2, #2
 8022ca0:	d037      	beq.n	8022d12 <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 8022ca2:	2a01      	cmp	r2, #1
 8022ca4:	d046      	beq.n	8022d34 <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 8022ca6:	9b03      	ldr	r3, [sp, #12]
 8022ca8:	f8d3 c000 	ldr.w	ip, [r3]
 8022cac:	f10c 0204 	add.w	r2, ip, #4
 8022cb0:	601a      	str	r2, [r3, #0]
 8022cb2:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8022cb6:	2d64      	cmp	r5, #100	@ 0x64
 8022cb8:	d052      	beq.n	8022d60 <mg_vxprintf+0x29c>
 8022cba:	461a      	mov	r2, r3
 8022cbc:	2300      	movs	r3, #0
 8022cbe:	9001      	str	r0, [sp, #4]
 8022cc0:	9100      	str	r1, [sp, #0]
 8022cc2:	a808      	add	r0, sp, #32
 8022cc4:	f7fc f842 	bl	801ed4c <mg_lld>
 8022cc8:	4605      	mov	r5, r0
 8022cca:	e01c      	b.n	8022d06 <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8022ccc:	2301      	movs	r3, #1
 8022cce:	e7dc      	b.n	8022c8a <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8022cd0:	2301      	movs	r3, #1
 8022cd2:	e7da      	b.n	8022c8a <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8022cd4:	2301      	movs	r3, #1
 8022cd6:	e7d8      	b.n	8022c8a <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 8022cd8:	9903      	ldr	r1, [sp, #12]
 8022cda:	680b      	ldr	r3, [r1, #0]
 8022cdc:	3307      	adds	r3, #7
 8022cde:	f023 0307 	bic.w	r3, r3, #7
 8022ce2:	f103 0208 	add.w	r2, r3, #8
 8022ce6:	600a      	str	r2, [r1, #0]
 8022ce8:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 8022cec:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8022cf0:	d00c      	beq.n	8022d0c <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8022cf2:	2d67      	cmp	r5, #103	@ 0x67
 8022cf4:	bf14      	ite	ne
 8022cf6:	2300      	movne	r3, #0
 8022cf8:	2301      	moveq	r3, #1
 8022cfa:	4642      	mov	r2, r8
 8022cfc:	2128      	movs	r1, #40	@ 0x28
 8022cfe:	a808      	add	r0, sp, #32
 8022d00:	f7ff fcd2 	bl	80226a8 <mg_dtoa>
 8022d04:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 8022d06:	2300      	movs	r3, #0
 8022d08:	9a02      	ldr	r2, [sp, #8]
 8022d0a:	e02e      	b.n	8022d6a <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 8022d0c:	f04f 0806 	mov.w	r8, #6
 8022d10:	e7ef      	b.n	8022cf2 <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 8022d12:	9d03      	ldr	r5, [sp, #12]
 8022d14:	682b      	ldr	r3, [r5, #0]
 8022d16:	3307      	adds	r3, #7
 8022d18:	f023 0307 	bic.w	r3, r3, #7
 8022d1c:	f103 0208 	add.w	r2, r3, #8
 8022d20:	602a      	str	r2, [r5, #0]
 8022d22:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 8022d26:	9001      	str	r0, [sp, #4]
 8022d28:	9100      	str	r1, [sp, #0]
 8022d2a:	a808      	add	r0, sp, #32
 8022d2c:	f7fc f80e 	bl	801ed4c <mg_lld>
 8022d30:	4605      	mov	r5, r0
 8022d32:	e7e8      	b.n	8022d06 <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 8022d34:	9b03      	ldr	r3, [sp, #12]
 8022d36:	f8d3 c000 	ldr.w	ip, [r3]
 8022d3a:	f10c 0204 	add.w	r2, ip, #4
 8022d3e:	601a      	str	r2, [r3, #0]
 8022d40:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8022d44:	2d64      	cmp	r5, #100	@ 0x64
 8022d46:	d008      	beq.n	8022d5a <mg_vxprintf+0x296>
 8022d48:	461a      	mov	r2, r3
 8022d4a:	2300      	movs	r3, #0
 8022d4c:	9001      	str	r0, [sp, #4]
 8022d4e:	9100      	str	r1, [sp, #0]
 8022d50:	a808      	add	r0, sp, #32
 8022d52:	f7fb fffb 	bl	801ed4c <mg_lld>
 8022d56:	4605      	mov	r5, r0
 8022d58:	e7d5      	b.n	8022d06 <mg_vxprintf+0x242>
 8022d5a:	461a      	mov	r2, r3
 8022d5c:	17db      	asrs	r3, r3, #31
 8022d5e:	e7f5      	b.n	8022d4c <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8022d60:	461a      	mov	r2, r3
 8022d62:	17db      	asrs	r3, r3, #31
 8022d64:	e7ab      	b.n	8022cbe <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 8022d66:	3c01      	subs	r4, #1
 8022d68:	3301      	adds	r3, #1
 8022d6a:	4293      	cmp	r3, r2
 8022d6c:	d225      	bcs.n	8022dba <mg_vxprintf+0x2f6>
 8022d6e:	2c00      	cmp	r4, #0
 8022d70:	d1f9      	bne.n	8022d66 <mg_vxprintf+0x2a2>
 8022d72:	46a0      	mov	r8, r4
 8022d74:	9605      	str	r6, [sp, #20]
 8022d76:	9e04      	ldr	r6, [sp, #16]
 8022d78:	e009      	b.n	8022d8e <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8022d7a:	2301      	movs	r3, #1
 8022d7c:	f10d 021f 	add.w	r2, sp, #31
 8022d80:	4651      	mov	r1, sl
 8022d82:	4648      	mov	r0, r9
 8022d84:	f7fc f878 	bl	801ee78 <scpy>
 8022d88:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8022d8a:	f108 0801 	add.w	r8, r8, #1
 8022d8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8022d92:	2b20      	cmp	r3, #32
 8022d94:	d106      	bne.n	8022da4 <mg_vxprintf+0x2e0>
 8022d96:	b92e      	cbnz	r6, 8022da4 <mg_vxprintf+0x2e0>
 8022d98:	42a5      	cmp	r5, r4
 8022d9a:	d203      	bcs.n	8022da4 <mg_vxprintf+0x2e0>
 8022d9c:	eb08 0305 	add.w	r3, r8, r5
 8022da0:	42a3      	cmp	r3, r4
 8022da2:	d3ea      	bcc.n	8022d7a <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 8022da4:	9e05      	ldr	r6, [sp, #20]
 8022da6:	9b02      	ldr	r3, [sp, #8]
 8022da8:	4a6b      	ldr	r2, [pc, #428]	@ (8022f58 <mg_vxprintf+0x494>)
 8022daa:	4651      	mov	r1, sl
 8022dac:	4648      	mov	r0, r9
 8022dae:	f7fc f863 	bl	801ee78 <scpy>
 8022db2:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8022db6:	2700      	movs	r7, #0
 8022db8:	e00d      	b.n	8022dd6 <mg_vxprintf+0x312>
 8022dba:	f04f 0800 	mov.w	r8, #0
 8022dbe:	9605      	str	r6, [sp, #20]
 8022dc0:	9e04      	ldr	r6, [sp, #16]
 8022dc2:	e7e4      	b.n	8022d8e <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8022dc4:	2301      	movs	r3, #1
 8022dc6:	f10d 021f 	add.w	r2, sp, #31
 8022dca:	4651      	mov	r1, sl
 8022dcc:	4648      	mov	r0, r9
 8022dce:	f7fc f853 	bl	801ee78 <scpy>
 8022dd2:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8022dd4:	3701      	adds	r7, #1
 8022dd6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8022dda:	2b30      	cmp	r3, #48	@ 0x30
 8022ddc:	d104      	bne.n	8022de8 <mg_vxprintf+0x324>
 8022dde:	42a5      	cmp	r5, r4
 8022de0:	d202      	bcs.n	8022de8 <mg_vxprintf+0x324>
 8022de2:	197b      	adds	r3, r7, r5
 8022de4:	42a3      	cmp	r3, r4
 8022de6:	d3ed      	bcc.n	8022dc4 <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 8022de8:	462b      	mov	r3, r5
 8022dea:	aa08      	add	r2, sp, #32
 8022dec:	4651      	mov	r1, sl
 8022dee:	4648      	mov	r0, r9
 8022df0:	f7fc f842 	bl	801ee78 <scpy>
 8022df4:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8022df8:	f04f 0800 	mov.w	r8, #0
 8022dfc:	9602      	str	r6, [sp, #8]
 8022dfe:	9e04      	ldr	r6, [sp, #16]
 8022e00:	e009      	b.n	8022e16 <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 8022e02:	2301      	movs	r3, #1
 8022e04:	f10d 021f 	add.w	r2, sp, #31
 8022e08:	4651      	mov	r1, sl
 8022e0a:	4648      	mov	r0, r9
 8022e0c:	f7fc f834 	bl	801ee78 <scpy>
 8022e10:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8022e12:	f108 0801 	add.w	r8, r8, #1
 8022e16:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8022e1a:	2b20      	cmp	r3, #32
 8022e1c:	f040 808d 	bne.w	8022f3a <mg_vxprintf+0x476>
 8022e20:	2e00      	cmp	r6, #0
 8022e22:	f000 808c 	beq.w	8022f3e <mg_vxprintf+0x47a>
 8022e26:	42a5      	cmp	r5, r4
 8022e28:	f080 808b 	bcs.w	8022f42 <mg_vxprintf+0x47e>
 8022e2c:	eb08 0305 	add.w	r3, r8, r5
 8022e30:	42a3      	cmp	r3, r4
 8022e32:	d3e6      	bcc.n	8022e02 <mg_vxprintf+0x33e>
 8022e34:	9e02      	ldr	r6, [sp, #8]
 8022e36:	e00b      	b.n	8022e50 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8022e38:	9903      	ldr	r1, [sp, #12]
 8022e3a:	680b      	ldr	r3, [r1, #0]
 8022e3c:	1d1a      	adds	r2, r3, #4
 8022e3e:	600a      	str	r2, [r1, #0]
 8022e40:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 8022e42:	9a03      	ldr	r2, [sp, #12]
 8022e44:	4651      	mov	r1, sl
 8022e46:	4648      	mov	r0, r9
 8022e48:	47a0      	blx	r4
 8022e4a:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 8022e4c:	2d6d      	cmp	r5, #109	@ 0x6d
 8022e4e:	d015      	beq.n	8022e7c <mg_vxprintf+0x3b8>
      i++;
 8022e50:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 8022e52:	f81b 0004 	ldrb.w	r0, [fp, r4]
 8022e56:	2800      	cmp	r0, #0
 8022e58:	d079      	beq.n	8022f4e <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 8022e5a:	2825      	cmp	r0, #37	@ 0x25
 8022e5c:	f43f ae3c 	beq.w	8022ad8 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 8022e60:	4651      	mov	r1, sl
 8022e62:	47c8      	blx	r9
 8022e64:	3701      	adds	r7, #1
 8022e66:	3401      	adds	r4, #1
 8022e68:	e7f3      	b.n	8022e52 <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8022e6a:	9903      	ldr	r1, [sp, #12]
 8022e6c:	680b      	ldr	r3, [r1, #0]
 8022e6e:	1d1a      	adds	r2, r3, #4
 8022e70:	600a      	str	r2, [r1, #0]
 8022e72:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 8022e74:	4651      	mov	r1, sl
 8022e76:	2022      	movs	r0, #34	@ 0x22
 8022e78:	47c8      	blx	r9
 8022e7a:	e7e2      	b.n	8022e42 <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 8022e7c:	3702      	adds	r7, #2
 8022e7e:	4651      	mov	r1, sl
 8022e80:	2022      	movs	r0, #34	@ 0x22
 8022e82:	47c8      	blx	r9
 8022e84:	e7e4      	b.n	8022e50 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 8022e86:	9903      	ldr	r1, [sp, #12]
 8022e88:	680b      	ldr	r3, [r1, #0]
 8022e8a:	1d1a      	adds	r2, r3, #4
 8022e8c:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 8022e8e:	4651      	mov	r1, sl
 8022e90:	7818      	ldrb	r0, [r3, #0]
 8022e92:	47c8      	blx	r9
        n++;
 8022e94:	3701      	adds	r7, #1
 8022e96:	e7db      	b.n	8022e50 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 8022e98:	9903      	ldr	r1, [sp, #12]
 8022e9a:	680b      	ldr	r3, [r1, #0]
 8022e9c:	1d1a      	adds	r2, r3, #4
 8022e9e:	600a      	str	r2, [r1, #0]
 8022ea0:	681b      	ldr	r3, [r3, #0]
 8022ea2:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8022ea4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8022ea8:	d003      	beq.n	8022eb2 <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8022eaa:	2500      	movs	r5, #0
 8022eac:	9605      	str	r6, [sp, #20]
 8022eae:	9e04      	ldr	r6, [sp, #16]
 8022eb0:	e011      	b.n	8022ed6 <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8022eb2:	4618      	mov	r0, r3
 8022eb4:	b11b      	cbz	r3, 8022ebe <mg_vxprintf+0x3fa>
 8022eb6:	f7ed f9f3 	bl	80102a0 <strlen>
 8022eba:	4680      	mov	r8, r0
 8022ebc:	e7f5      	b.n	8022eaa <mg_vxprintf+0x3e6>
 8022ebe:	f04f 0800 	mov.w	r8, #0
 8022ec2:	e7f2      	b.n	8022eaa <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 8022ec4:	2301      	movs	r3, #1
 8022ec6:	f10d 021f 	add.w	r2, sp, #31
 8022eca:	4651      	mov	r1, sl
 8022ecc:	4648      	mov	r0, r9
 8022ece:	f7fb ffd3 	bl	801ee78 <scpy>
 8022ed2:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8022ed4:	3501      	adds	r5, #1
 8022ed6:	b92e      	cbnz	r6, 8022ee4 <mg_vxprintf+0x420>
 8022ed8:	4544      	cmp	r4, r8
 8022eda:	d903      	bls.n	8022ee4 <mg_vxprintf+0x420>
 8022edc:	eb05 0308 	add.w	r3, r5, r8
 8022ee0:	42a3      	cmp	r3, r4
 8022ee2:	d3ef      	bcc.n	8022ec4 <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 8022ee4:	9e05      	ldr	r6, [sp, #20]
 8022ee6:	4643      	mov	r3, r8
 8022ee8:	9a02      	ldr	r2, [sp, #8]
 8022eea:	4651      	mov	r1, sl
 8022eec:	4648      	mov	r0, r9
 8022eee:	f7fb ffc3 	bl	801ee78 <scpy>
 8022ef2:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8022ef4:	2500      	movs	r5, #0
 8022ef6:	9602      	str	r6, [sp, #8]
 8022ef8:	9e04      	ldr	r6, [sp, #16]
 8022efa:	e008      	b.n	8022f0e <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 8022efc:	2301      	movs	r3, #1
 8022efe:	f10d 021f 	add.w	r2, sp, #31
 8022f02:	4651      	mov	r1, sl
 8022f04:	4648      	mov	r0, r9
 8022f06:	f7fb ffb7 	bl	801ee78 <scpy>
 8022f0a:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8022f0c:	3501      	adds	r5, #1
 8022f0e:	b1d6      	cbz	r6, 8022f46 <mg_vxprintf+0x482>
 8022f10:	4544      	cmp	r4, r8
 8022f12:	d91a      	bls.n	8022f4a <mg_vxprintf+0x486>
 8022f14:	eb05 0308 	add.w	r3, r5, r8
 8022f18:	42a3      	cmp	r3, r4
 8022f1a:	d3ef      	bcc.n	8022efc <mg_vxprintf+0x438>
 8022f1c:	9e02      	ldr	r6, [sp, #8]
 8022f1e:	e797      	b.n	8022e50 <mg_vxprintf+0x38c>
        out('%', param);
 8022f20:	4651      	mov	r1, sl
 8022f22:	2025      	movs	r0, #37	@ 0x25
 8022f24:	47c8      	blx	r9
        n++;
 8022f26:	3701      	adds	r7, #1
 8022f28:	e792      	b.n	8022e50 <mg_vxprintf+0x38c>
        out('%', param);
 8022f2a:	4651      	mov	r1, sl
 8022f2c:	2025      	movs	r0, #37	@ 0x25
 8022f2e:	47c8      	blx	r9
        out(c, param);
 8022f30:	4651      	mov	r1, sl
 8022f32:	4628      	mov	r0, r5
 8022f34:	47c8      	blx	r9
        n += 2;
 8022f36:	3702      	adds	r7, #2
 8022f38:	e78a      	b.n	8022e50 <mg_vxprintf+0x38c>
 8022f3a:	9e02      	ldr	r6, [sp, #8]
 8022f3c:	e788      	b.n	8022e50 <mg_vxprintf+0x38c>
 8022f3e:	9e02      	ldr	r6, [sp, #8]
 8022f40:	e786      	b.n	8022e50 <mg_vxprintf+0x38c>
 8022f42:	9e02      	ldr	r6, [sp, #8]
 8022f44:	e784      	b.n	8022e50 <mg_vxprintf+0x38c>
 8022f46:	9e02      	ldr	r6, [sp, #8]
 8022f48:	e782      	b.n	8022e50 <mg_vxprintf+0x38c>
 8022f4a:	9e02      	ldr	r6, [sp, #8]
 8022f4c:	e780      	b.n	8022e50 <mg_vxprintf+0x38c>
}
 8022f4e:	4638      	mov	r0, r7
 8022f50:	b013      	add	sp, #76	@ 0x4c
 8022f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f56:	bf00      	nop
 8022f58:	08038e9c 	.word	0x08038e9c

08022f5c <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8022f5c:	b40c      	push	{r2, r3}
 8022f5e:	b500      	push	{lr}
 8022f60:	b083      	sub	sp, #12
 8022f62:	ab04      	add	r3, sp, #16
 8022f64:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8022f68:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8022f6a:	ab01      	add	r3, sp, #4
 8022f6c:	f7ff fdaa 	bl	8022ac4 <mg_vxprintf>
}
 8022f70:	b003      	add	sp, #12
 8022f72:	f85d eb04 	ldr.w	lr, [sp], #4
 8022f76:	b002      	add	sp, #8
 8022f78:	4770      	bx	lr
	...

08022f7c <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8022f7c:	b530      	push	{r4, r5, lr}
 8022f7e:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8022f80:	7853      	ldrb	r3, [r2, #1]
 8022f82:	7894      	ldrb	r4, [r2, #2]
 8022f84:	78d5      	ldrb	r5, [r2, #3]
 8022f86:	9502      	str	r5, [sp, #8]
 8022f88:	9401      	str	r4, [sp, #4]
 8022f8a:	9300      	str	r3, [sp, #0]
 8022f8c:	7813      	ldrb	r3, [r2, #0]
 8022f8e:	4a02      	ldr	r2, [pc, #8]	@ (8022f98 <print_ip4+0x1c>)
 8022f90:	f7ff ffe4 	bl	8022f5c <mg_xprintf>
}
 8022f94:	b005      	add	sp, #20
 8022f96:	bd30      	pop	{r4, r5, pc}
 8022f98:	08038ea0 	.word	0x08038ea0

08022f9c <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8022f9c:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 8022f9e:	6813      	ldr	r3, [r2, #0]
 8022fa0:	1d1c      	adds	r4, r3, #4
 8022fa2:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 8022fa4:	681a      	ldr	r2, [r3, #0]
 8022fa6:	f7ff ffe9 	bl	8022f7c <print_ip4>
}
 8022faa:	bd10      	pop	{r4, pc}

08022fac <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8022fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022fae:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 8022fb0:	6813      	ldr	r3, [r2, #0]
 8022fb2:	1d1c      	adds	r4, r3, #4
 8022fb4:	6014      	str	r4, [r2, #0]
 8022fb6:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8022fb8:	7813      	ldrb	r3, [r2, #0]
 8022fba:	7854      	ldrb	r4, [r2, #1]
 8022fbc:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 8022fbe:	78d6      	ldrb	r6, [r2, #3]
 8022fc0:	7917      	ldrb	r7, [r2, #4]
 8022fc2:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8022fc4:	9204      	str	r2, [sp, #16]
 8022fc6:	9703      	str	r7, [sp, #12]
 8022fc8:	9602      	str	r6, [sp, #8]
 8022fca:	9501      	str	r5, [sp, #4]
 8022fcc:	9400      	str	r4, [sp, #0]
 8022fce:	4a02      	ldr	r2, [pc, #8]	@ (8022fd8 <mg_print_mac+0x2c>)
 8022fd0:	f7ff ffc4 	bl	8022f5c <mg_xprintf>
}
 8022fd4:	b007      	add	sp, #28
 8022fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022fd8:	08038eac 	.word	0x08038eac

08022fdc <mg_log>:
void mg_log(const char *fmt, ...) {
 8022fdc:	b40f      	push	{r0, r1, r2, r3}
 8022fde:	b500      	push	{lr}
 8022fe0:	b083      	sub	sp, #12
 8022fe2:	ab04      	add	r3, sp, #16
 8022fe4:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8022fe8:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8022fea:	ab01      	add	r3, sp, #4
 8022fec:	4907      	ldr	r1, [pc, #28]	@ (802300c <mg_log+0x30>)
 8022fee:	6809      	ldr	r1, [r1, #0]
 8022ff0:	4807      	ldr	r0, [pc, #28]	@ (8023010 <mg_log+0x34>)
 8022ff2:	6800      	ldr	r0, [r0, #0]
 8022ff4:	f7ff fd66 	bl	8022ac4 <mg_vxprintf>
  logs("\r\n", 2);
 8022ff8:	2102      	movs	r1, #2
 8022ffa:	4806      	ldr	r0, [pc, #24]	@ (8023014 <mg_log+0x38>)
 8022ffc:	f7fc fd16 	bl	801fa2c <logs>
}
 8023000:	b003      	add	sp, #12
 8023002:	f85d eb04 	ldr.w	lr, [sp], #4
 8023006:	b004      	add	sp, #16
 8023008:	4770      	bx	lr
 802300a:	bf00      	nop
 802300c:	20018df0 	.word	0x20018df0
 8023010:	200000a4 	.word	0x200000a4
 8023014:	080398c0 	.word	0x080398c0

08023018 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8023018:	b538      	push	{r3, r4, r5, lr}
 802301a:	4604      	mov	r4, r0
 802301c:	4613      	mov	r3, r2
  size_t old = c->send.len;
 802301e:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8023020:	460a      	mov	r2, r1
 8023022:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 8023026:	4803      	ldr	r0, [pc, #12]	@ (8023034 <mg_vprintf+0x1c>)
 8023028:	f7ff fd4c 	bl	8022ac4 <mg_vxprintf>
  return c->send.len - old;
 802302c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 802302e:	1b40      	subs	r0, r0, r5
 8023030:	bd38      	pop	{r3, r4, r5, pc}
 8023032:	bf00      	nop
 8023034:	080260d7 	.word	0x080260d7

08023038 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8023038:	b40e      	push	{r1, r2, r3}
 802303a:	b500      	push	{lr}
 802303c:	b082      	sub	sp, #8
 802303e:	ab03      	add	r3, sp, #12
 8023040:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 8023044:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 8023046:	aa01      	add	r2, sp, #4
 8023048:	f7ff ffe6 	bl	8023018 <mg_vprintf>
}
 802304c:	b002      	add	sp, #8
 802304e:	f85d eb04 	ldr.w	lr, [sp], #4
 8023052:	b003      	add	sp, #12
 8023054:	4770      	bx	lr
	...

08023058 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8023058:	b530      	push	{r4, r5, lr}
 802305a:	b085      	sub	sp, #20
 802305c:	4605      	mov	r5, r0
 802305e:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8023060:	9000      	str	r0, [sp, #0]
 8023062:	9101      	str	r1, [sp, #4]
 8023064:	2100      	movs	r1, #0
 8023066:	9102      	str	r1, [sp, #8]
 8023068:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 802306a:	4669      	mov	r1, sp
 802306c:	4804      	ldr	r0, [pc, #16]	@ (8023080 <mg_vsnprintf+0x28>)
 802306e:	f7ff fd29 	bl	8022ac4 <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 8023072:	4284      	cmp	r4, r0
 8023074:	d901      	bls.n	802307a <mg_vsnprintf+0x22>
 8023076:	2300      	movs	r3, #0
 8023078:	542b      	strb	r3, [r5, r0]
}
 802307a:	b005      	add	sp, #20
 802307c:	bd30      	pop	{r4, r5, pc}
 802307e:	bf00      	nop
 8023080:	080260e1 	.word	0x080260e1

08023084 <mg_http_reply>:
                   const char *fmt, ...) {
 8023084:	b408      	push	{r3}
 8023086:	b570      	push	{r4, r5, r6, lr}
 8023088:	b085      	sub	sp, #20
 802308a:	4604      	mov	r4, r0
 802308c:	460e      	mov	r6, r1
 802308e:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8023090:	4608      	mov	r0, r1
 8023092:	f7fc f83d 	bl	801f110 <mg_http_status_code_str>
 8023096:	4603      	mov	r3, r0
 8023098:	b1ed      	cbz	r5, 80230d6 <mg_http_reply+0x52>
 802309a:	9500      	str	r5, [sp, #0]
 802309c:	4632      	mov	r2, r6
 802309e:	4916      	ldr	r1, [pc, #88]	@ (80230f8 <mg_http_reply+0x74>)
 80230a0:	4620      	mov	r0, r4
 80230a2:	f7ff ffc9 	bl	8023038 <mg_printf>
  len = c->send.len;
 80230a6:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 80230a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80230aa:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 80230ac:	ab03      	add	r3, sp, #12
 80230ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80230b0:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 80230b4:	4811      	ldr	r0, [pc, #68]	@ (80230fc <mg_http_reply+0x78>)
 80230b6:	f7ff fd05 	bl	8022ac4 <mg_vxprintf>
  if (c->send.len > 16) {
 80230ba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80230bc:	2b10      	cmp	r3, #16
 80230be:	d80c      	bhi.n	80230da <mg_http_reply+0x56>
  c->is_resp = 0;
 80230c0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80230c4:	f36f 13c7 	bfc	r3, #7, #1
 80230c8:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80230cc:	b005      	add	sp, #20
 80230ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80230d2:	b001      	add	sp, #4
 80230d4:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80230d6:	4d0a      	ldr	r5, [pc, #40]	@ (8023100 <mg_http_reply+0x7c>)
 80230d8:	e7df      	b.n	802309a <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80230da:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 80230dc:	f1a5 000f 	sub.w	r0, r5, #15
 80230e0:	1b5b      	subs	r3, r3, r5
 80230e2:	4a08      	ldr	r2, [pc, #32]	@ (8023104 <mg_http_reply+0x80>)
 80230e4:	210b      	movs	r1, #11
 80230e6:	4430      	add	r0, r6
 80230e8:	f7ff facc 	bl	8022684 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80230ec:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80230ee:	4405      	add	r5, r0
 80230f0:	3d0f      	subs	r5, #15
 80230f2:	2220      	movs	r2, #32
 80230f4:	555a      	strb	r2, [r3, r5]
 80230f6:	e7e3      	b.n	80230c0 <mg_http_reply+0x3c>
 80230f8:	08038ecc 	.word	0x08038ecc
 80230fc:	080260d7 	.word	0x080260d7
 8023100:	08035a68 	.word	0x08035a68
 8023104:	08038f00 	.word	0x08038f00

08023108 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8023108:	b510      	push	{r4, lr}
 802310a:	b084      	sub	sp, #16
 802310c:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 802310e:	9202      	str	r2, [sp, #8]
 8023110:	2300      	movs	r3, #0
 8023112:	9303      	str	r3, [sp, #12]
 8023114:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023118:	e9cd 2300 	strd	r2, r3, [sp]
 802311c:	4a02      	ldr	r2, [pc, #8]	@ (8023128 <mg_http_etag+0x20>)
 802311e:	f7ff fab1 	bl	8022684 <mg_snprintf>
}
 8023122:	4620      	mov	r0, r4
 8023124:	b004      	add	sp, #16
 8023126:	bd10      	pop	{r4, pc}
 8023128:	08038f08 	.word	0x08038f08

0802312c <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 802312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023130:	b083      	sub	sp, #12
 8023132:	4607      	mov	r7, r0
 8023134:	4689      	mov	r9, r1
 8023136:	4692      	mov	sl, r2
 8023138:	4698      	mov	r8, r3
  size_t i, n = 0;
 802313a:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 802313c:	462c      	mov	r4, r5
 802313e:	e00c      	b.n	802315a <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8023140:	f8cd b004 	str.w	fp, [sp, #4]
 8023144:	2301      	movs	r3, #1
 8023146:	9300      	str	r3, [sp, #0]
 8023148:	4b16      	ldr	r3, [pc, #88]	@ (80231a4 <mg_url_encode+0x78>)
 802314a:	4a17      	ldr	r2, [pc, #92]	@ (80231a8 <mg_url_encode+0x7c>)
 802314c:	2104      	movs	r1, #4
 802314e:	eb0a 0005 	add.w	r0, sl, r5
 8023152:	f7ff fa97 	bl	8022684 <mg_snprintf>
      n += 3;
 8023156:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 8023158:	3401      	adds	r4, #1
 802315a:	454c      	cmp	r4, r9
 802315c:	d20e      	bcs.n	802317c <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 802315e:	eb07 0b04 	add.w	fp, r7, r4
 8023162:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 8023164:	1d2b      	adds	r3, r5, #4
 8023166:	4543      	cmp	r3, r8
 8023168:	d216      	bcs.n	8023198 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 802316a:	4630      	mov	r0, r6
 802316c:	f7fc facc 	bl	801f708 <mg_is_url_safe>
 8023170:	2800      	cmp	r0, #0
 8023172:	d0e5      	beq.n	8023140 <mg_url_encode+0x14>
      buf[n++] = s[i];
 8023174:	f80a 6005 	strb.w	r6, [sl, r5]
 8023178:	3501      	adds	r5, #1
 802317a:	e7ed      	b.n	8023158 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 802317c:	f1b8 0f00 	cmp.w	r8, #0
 8023180:	d00b      	beq.n	802319a <mg_url_encode+0x6e>
 8023182:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8023186:	45a8      	cmp	r8, r5
 8023188:	d902      	bls.n	8023190 <mg_url_encode+0x64>
 802318a:	2300      	movs	r3, #0
 802318c:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8023190:	2300      	movs	r3, #0
 8023192:	f80a 3008 	strb.w	r3, [sl, r8]
 8023196:	e000      	b.n	802319a <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 8023198:	2500      	movs	r5, #0
}
 802319a:	4628      	mov	r0, r5
 802319c:	b003      	add	sp, #12
 802319e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231a2:	bf00      	nop
 80231a4:	08020461 	.word	0x08020461
 80231a8:	08038f14 	.word	0x08038f14

080231ac <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 80231ac:	b510      	push	{r4, lr}
 80231ae:	b084      	sub	sp, #16
 80231b0:	4602      	mov	r2, r0
 80231b2:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 80231b4:	2400      	movs	r4, #0
 80231b6:	9400      	str	r4, [sp, #0]
 80231b8:	9401      	str	r4, [sp, #4]
 80231ba:	9402      	str	r4, [sp, #8]
 80231bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80231c0:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 80231c2:	4669      	mov	r1, sp
 80231c4:	4802      	ldr	r0, [pc, #8]	@ (80231d0 <mg_vmprintf+0x24>)
 80231c6:	f7ff fc7d 	bl	8022ac4 <mg_vxprintf>
}
 80231ca:	9800      	ldr	r0, [sp, #0]
 80231cc:	b004      	add	sp, #16
 80231ce:	bd10      	pop	{r4, pc}
 80231d0:	080260d7 	.word	0x080260d7

080231d4 <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 80231d4:	b40f      	push	{r0, r1, r2, r3}
 80231d6:	b500      	push	{lr}
 80231d8:	b083      	sub	sp, #12
 80231da:	ab04      	add	r3, sp, #16
 80231dc:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 80231e0:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 80231e2:	a901      	add	r1, sp, #4
 80231e4:	f7ff ffe2 	bl	80231ac <mg_vmprintf>
}
 80231e8:	b003      	add	sp, #12
 80231ea:	f85d eb04 	ldr.w	lr, [sp], #4
 80231ee:	b004      	add	sp, #16
 80231f0:	4770      	bx	lr

080231f2 <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 80231f2:	b538      	push	{r3, r4, r5, lr}
 80231f4:	4604      	mov	r4, r0
 80231f6:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 80231f8:	6882      	ldr	r2, [r0, #8]
 80231fa:	68c3      	ldr	r3, [r0, #12]
 80231fc:	429a      	cmp	r2, r3
 80231fe:	d107      	bne.n	8023210 <mg_queue_next+0x1e>
  size_t len = 0;
 8023200:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8023202:	b125      	cbz	r5, 802320e <mg_queue_next+0x1c>
 8023204:	6823      	ldr	r3, [r4, #0]
 8023206:	68a2      	ldr	r2, [r4, #8]
 8023208:	3204      	adds	r2, #4
 802320a:	4413      	add	r3, r2
 802320c:	602b      	str	r3, [r5, #0]
}
 802320e:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 8023210:	f7fe fbd1 	bl	80219b6 <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 8023214:	2800      	cmp	r0, #0
 8023216:	d1f4      	bne.n	8023202 <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 8023218:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 802321a:	68e2      	ldr	r2, [r4, #12]
 802321c:	68a3      	ldr	r3, [r4, #8]
 802321e:	429a      	cmp	r2, r3
 8023220:	d9ef      	bls.n	8023202 <mg_queue_next+0x10>
 8023222:	4620      	mov	r0, r4
 8023224:	f7fe fbc7 	bl	80219b6 <mg_queue_read_len>
 8023228:	e7eb      	b.n	8023202 <mg_queue_next+0x10>

0802322a <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 802322a:	6883      	ldr	r3, [r0, #8]
 802322c:	440b      	add	r3, r1
 802322e:	3304      	adds	r3, #4
 8023230:	6083      	str	r3, [r0, #8]
}
 8023232:	4770      	bx	lr

08023234 <mg_sha1_init>:
  context->state[0] = 0x67452301;
 8023234:	4b0a      	ldr	r3, [pc, #40]	@ (8023260 <mg_sha1_init+0x2c>)
 8023236:	6003      	str	r3, [r0, #0]
  context->state[1] = 0xEFCDAB89;
 8023238:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 802323c:	6043      	str	r3, [r0, #4]
  context->state[2] = 0x98BADCFE;
 802323e:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 8023242:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8023246:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 802324a:	6083      	str	r3, [r0, #8]
  context->state[3] = 0x10325476;
 802324c:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8023250:	60c3      	str	r3, [r0, #12]
  context->state[4] = 0xC3D2E1F0;
 8023252:	4b04      	ldr	r3, [pc, #16]	@ (8023264 <mg_sha1_init+0x30>)
 8023254:	6103      	str	r3, [r0, #16]
  context->count[0] = context->count[1] = 0;
 8023256:	2300      	movs	r3, #0
 8023258:	6183      	str	r3, [r0, #24]
 802325a:	6143      	str	r3, [r0, #20]
}
 802325c:	4770      	bx	lr
 802325e:	bf00      	nop
 8023260:	67452301 	.word	0x67452301
 8023264:	c3d2e1f0 	.word	0xc3d2e1f0

08023268 <mg_sha1_update>:
                    size_t len) {
 8023268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802326a:	4604      	mov	r4, r0
 802326c:	460f      	mov	r7, r1
 802326e:	4616      	mov	r6, r2
  j = context->count[0];
 8023270:	6943      	ldr	r3, [r0, #20]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 8023272:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8023276:	6142      	str	r2, [r0, #20]
 8023278:	429a      	cmp	r2, r3
 802327a:	d202      	bcs.n	8023282 <mg_sha1_update+0x1a>
 802327c:	6982      	ldr	r2, [r0, #24]
 802327e:	3201      	adds	r2, #1
 8023280:	6182      	str	r2, [r0, #24]
  context->count[1] += (uint32_t) (len >> 29);
 8023282:	69a2      	ldr	r2, [r4, #24]
 8023284:	eb02 7256 	add.w	r2, r2, r6, lsr #29
 8023288:	61a2      	str	r2, [r4, #24]
  j = (j >> 3) & 63;
 802328a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  if ((j + len) > 63) {
 802328e:	18f2      	adds	r2, r6, r3
 8023290:	2a3f      	cmp	r2, #63	@ 0x3f
 8023292:	d808      	bhi.n	80232a6 <mg_sha1_update+0x3e>
    i = 0;
 8023294:	2500      	movs	r5, #0
  memcpy(&context->buffer[j], &data[i], len - i);
 8023296:	3318      	adds	r3, #24
 8023298:	18e0      	adds	r0, r4, r3
 802329a:	1b72      	subs	r2, r6, r5
 802329c:	1979      	adds	r1, r7, r5
 802329e:	3004      	adds	r0, #4
 80232a0:	f009 fdea 	bl	802ce78 <memcpy>
}
 80232a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(&context->buffer[j], data, (i = 64 - j));
 80232a6:	f103 0018 	add.w	r0, r3, #24
 80232aa:	4420      	add	r0, r4
 80232ac:	f1c3 0540 	rsb	r5, r3, #64	@ 0x40
 80232b0:	462a      	mov	r2, r5
 80232b2:	4639      	mov	r1, r7
 80232b4:	3004      	adds	r0, #4
 80232b6:	f009 fddf 	bl	802ce78 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 80232ba:	f104 011c 	add.w	r1, r4, #28
 80232be:	4620      	mov	r0, r4
 80232c0:	f7fd fb56 	bl	8020970 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80232c4:	e004      	b.n	80232d0 <mg_sha1_update+0x68>
      mg_sha1_transform(context->state, &data[i]);
 80232c6:	1979      	adds	r1, r7, r5
 80232c8:	4620      	mov	r0, r4
 80232ca:	f7fd fb51 	bl	8020970 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80232ce:	3540      	adds	r5, #64	@ 0x40
 80232d0:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 80232d4:	42b3      	cmp	r3, r6
 80232d6:	d3f6      	bcc.n	80232c6 <mg_sha1_update+0x5e>
    j = 0;
 80232d8:	2300      	movs	r3, #0
 80232da:	e7dc      	b.n	8023296 <mg_sha1_update+0x2e>

080232dc <mg_sha1_final>:
void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 80232dc:	b570      	push	{r4, r5, r6, lr}
 80232de:	b084      	sub	sp, #16
 80232e0:	4606      	mov	r6, r0
 80232e2:	460d      	mov	r5, r1
  for (i = 0; i < 8; i++) {
 80232e4:	2300      	movs	r3, #0
 80232e6:	e013      	b.n	8023310 <mg_sha1_final+0x34>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 80232e8:	2b03      	cmp	r3, #3
 80232ea:	bf8c      	ite	hi
 80232ec:	2200      	movhi	r2, #0
 80232ee:	2201      	movls	r2, #1
 80232f0:	3204      	adds	r2, #4
 80232f2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80232f6:	6851      	ldr	r1, [r2, #4]
                                      ((3 - (i & 3)) * 8)) &
 80232f8:	43da      	mvns	r2, r3
 80232fa:	f002 0203 	and.w	r2, r2, #3
 80232fe:	00d2      	lsls	r2, r2, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8023300:	fa21 f202 	lsr.w	r2, r1, r2
 8023304:	f103 0110 	add.w	r1, r3, #16
 8023308:	4469      	add	r1, sp
 802330a:	f801 2c08 	strb.w	r2, [r1, #-8]
  for (i = 0; i < 8; i++) {
 802330e:	3301      	adds	r3, #1
 8023310:	2b07      	cmp	r3, #7
 8023312:	d9e9      	bls.n	80232e8 <mg_sha1_final+0xc>
  c = 0200;
 8023314:	2380      	movs	r3, #128	@ 0x80
 8023316:	f88d 3007 	strb.w	r3, [sp, #7]
  mg_sha1_update(context, &c, 1);
 802331a:	2201      	movs	r2, #1
 802331c:	f10d 0107 	add.w	r1, sp, #7
 8023320:	4628      	mov	r0, r5
 8023322:	f7ff ffa1 	bl	8023268 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8023326:	e008      	b.n	802333a <mg_sha1_final+0x5e>
    c = 0000;
 8023328:	2300      	movs	r3, #0
 802332a:	f88d 3007 	strb.w	r3, [sp, #7]
    mg_sha1_update(context, &c, 1);
 802332e:	2201      	movs	r2, #1
 8023330:	f10d 0107 	add.w	r1, sp, #7
 8023334:	4628      	mov	r0, r5
 8023336:	f7ff ff97 	bl	8023268 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 802333a:	696b      	ldr	r3, [r5, #20]
 802333c:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8023340:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8023344:	d1f0      	bne.n	8023328 <mg_sha1_final+0x4c>
  mg_sha1_update(context, finalcount, 8);
 8023346:	2208      	movs	r2, #8
 8023348:	eb0d 0102 	add.w	r1, sp, r2
 802334c:	4628      	mov	r0, r5
 802334e:	f7ff ff8b 	bl	8023268 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 8023352:	2300      	movs	r3, #0
 8023354:	e00a      	b.n	802336c <mg_sha1_final+0x90>
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8023356:	089a      	lsrs	r2, r3, #2
 8023358:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 802335c:	43da      	mvns	r2, r3
 802335e:	f002 0203 	and.w	r2, r2, #3
 8023362:	00d2      	lsls	r2, r2, #3
 8023364:	fa24 f202 	lsr.w	r2, r4, r2
    digest[i] =
 8023368:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < 20; i++) {
 802336a:	3301      	adds	r3, #1
 802336c:	2b13      	cmp	r3, #19
 802336e:	d9f2      	bls.n	8023356 <mg_sha1_final+0x7a>
  memset(context, '\0', sizeof(*context));
 8023370:	225c      	movs	r2, #92	@ 0x5c
 8023372:	2100      	movs	r1, #0
 8023374:	4628      	mov	r0, r5
 8023376:	f008 fb43 	bl	802ba00 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 802337a:	2300      	movs	r3, #0
 802337c:	9302      	str	r3, [sp, #8]
 802337e:	9303      	str	r3, [sp, #12]
}
 8023380:	b004      	add	sp, #16
 8023382:	bd70      	pop	{r4, r5, r6, pc}

08023384 <mg_http_serve_ssi>:
                       const char *fullpath) {
 8023384:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8023386:	4b03      	ldr	r3, [pc, #12]	@ (8023394 <mg_http_serve_ssi+0x10>)
 8023388:	2200      	movs	r2, #0
 802338a:	f240 11f5 	movw	r1, #501	@ 0x1f5
 802338e:	f7ff fe79 	bl	8023084 <mg_http_reply>
}
 8023392:	bd08      	pop	{r3, pc}
 8023394:	08038f1c 	.word	0x08038f1c

08023398 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 8023398:	b510      	push	{r4, lr}
 802339a:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 802339c:	6001      	str	r1, [r0, #0]
 802339e:	b129      	cbz	r1, 80233ac <mg_str_s+0x14>
 80233a0:	4608      	mov	r0, r1
 80233a2:	f7ec ff7d 	bl	80102a0 <strlen>
 80233a6:	6060      	str	r0, [r4, #4]
}
 80233a8:	4620      	mov	r0, r4
 80233aa:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 80233ac:	2000      	movs	r0, #0
 80233ae:	e7fa      	b.n	80233a6 <mg_str_s+0xe>

080233b0 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 80233b0:	6001      	str	r1, [r0, #0]
 80233b2:	6042      	str	r2, [r0, #4]
}
 80233b4:	4770      	bx	lr

080233b6 <stripquotes>:
static struct mg_str stripquotes(struct mg_str s) {
 80233b6:	b510      	push	{r4, lr}
 80233b8:	b082      	sub	sp, #8
 80233ba:	4604      	mov	r4, r0
 80233bc:	ab02      	add	r3, sp, #8
 80233be:	e903 0006 	stmdb	r3, {r1, r2}
             : s;
 80233c2:	2a01      	cmp	r2, #1
 80233c4:	d902      	bls.n	80233cc <stripquotes+0x16>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80233c6:	780b      	ldrb	r3, [r1, #0]
 80233c8:	2b22      	cmp	r3, #34	@ 0x22
 80233ca:	d007      	beq.n	80233dc <stripquotes+0x26>
             : s;
 80233cc:	ab02      	add	r3, sp, #8
 80233ce:	e913 0003 	ldmdb	r3, {r0, r1}
 80233d2:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80233d6:	4620      	mov	r0, r4
 80233d8:	b002      	add	sp, #8
 80233da:	bd10      	pop	{r4, pc}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80233dc:	188b      	adds	r3, r1, r2
 80233de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80233e2:	2b22      	cmp	r3, #34	@ 0x22
 80233e4:	d1f2      	bne.n	80233cc <stripquotes+0x16>
             ? mg_str_n(s.buf + 1, s.len - 2)
 80233e6:	3a02      	subs	r2, #2
 80233e8:	3101      	adds	r1, #1
 80233ea:	f7ff ffe1 	bl	80233b0 <mg_str_n>
             : s;
 80233ee:	e7f2      	b.n	80233d6 <stripquotes+0x20>

080233f0 <mg_http_get_header_var>:
struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 80233f0:	b082      	sub	sp, #8
 80233f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80233f6:	b084      	sub	sp, #16
 80233f8:	4680      	mov	r8, r0
 80233fa:	4668      	mov	r0, sp
 80233fc:	e880 0006 	stmia.w	r0, {r1, r2}
 8023400:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8023402:	2400      	movs	r4, #0
 8023404:	e01f      	b.n	8023446 <mg_http_get_header_var+0x56>
      int q = p < x && *p == '"' ? 1 : 0;
 8023406:	2201      	movs	r2, #1
 8023408:	e037      	b.n	802347a <mg_http_get_header_var+0x8a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 802340a:	7818      	ldrb	r0, [r3, #0]
 802340c:	283b      	cmp	r0, #59	@ 0x3b
 802340e:	d00d      	beq.n	802342c <mg_http_get_header_var+0x3c>
 8023410:	2820      	cmp	r0, #32
 8023412:	d00b      	beq.n	802342c <mg_http_get_header_var+0x3c>
 8023414:	282c      	cmp	r0, #44	@ 0x2c
 8023416:	d009      	beq.n	802342c <mg_http_get_header_var+0x3c>
        p++;
 8023418:	3301      	adds	r3, #1
      while (p < x &&
 802341a:	42bb      	cmp	r3, r7
 802341c:	d206      	bcs.n	802342c <mg_http_get_header_var+0x3c>
 802341e:	2a00      	cmp	r2, #0
 8023420:	d0f3      	beq.n	802340a <mg_http_get_header_var+0x1a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8023422:	428b      	cmp	r3, r1
 8023424:	d0f8      	beq.n	8023418 <mg_http_get_header_var+0x28>
 8023426:	7818      	ldrb	r0, [r3, #0]
 8023428:	2822      	cmp	r0, #34	@ 0x22
 802342a:	d1f5      	bne.n	8023418 <mg_http_get_header_var+0x28>
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 802342c:	1a5b      	subs	r3, r3, r1
 802342e:	ac02      	add	r4, sp, #8
 8023430:	441a      	add	r2, r3
 8023432:	4620      	mov	r0, r4
 8023434:	f7ff ffbc 	bl	80233b0 <mg_str_n>
 8023438:	e894 0006 	ldmia.w	r4, {r1, r2}
 802343c:	4640      	mov	r0, r8
 802343e:	f7ff ffba 	bl	80233b6 <stripquotes>
 8023442:	e021      	b.n	8023488 <mg_http_get_header_var+0x98>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8023444:	3401      	adds	r4, #1
 8023446:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023448:	b1ca      	cbz	r2, 802347e <mg_http_get_header_var+0x8e>
 802344a:	1915      	adds	r5, r2, r4
 802344c:	1cab      	adds	r3, r5, #2
 802344e:	9f01      	ldr	r7, [sp, #4]
 8023450:	42bb      	cmp	r3, r7
 8023452:	d214      	bcs.n	802347e <mg_http_get_header_var+0x8e>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 8023454:	9e00      	ldr	r6, [sp, #0]
 8023456:	5d73      	ldrb	r3, [r6, r5]
 8023458:	2b3d      	cmp	r3, #61	@ 0x3d
 802345a:	d1f3      	bne.n	8023444 <mg_http_get_header_var+0x54>
 802345c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802345e:	1930      	adds	r0, r6, r4
 8023460:	f008 fa3a 	bl	802b8d8 <memcmp>
 8023464:	4602      	mov	r2, r0
 8023466:	2800      	cmp	r0, #0
 8023468:	d1ec      	bne.n	8023444 <mg_http_get_header_var+0x54>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 802346a:	3501      	adds	r5, #1
 802346c:	1971      	adds	r1, r6, r5
 802346e:	4437      	add	r7, r6
      int q = p < x && *p == '"' ? 1 : 0;
 8023470:	42b9      	cmp	r1, r7
 8023472:	d202      	bcs.n	802347a <mg_http_get_header_var+0x8a>
 8023474:	5d73      	ldrb	r3, [r6, r5]
 8023476:	2b22      	cmp	r3, #34	@ 0x22
 8023478:	d0c5      	beq.n	8023406 <mg_http_get_header_var+0x16>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 802347a:	460b      	mov	r3, r1
      while (p < x &&
 802347c:	e7cd      	b.n	802341a <mg_http_get_header_var+0x2a>
  return mg_str_n(NULL, 0);
 802347e:	2200      	movs	r2, #0
 8023480:	4611      	mov	r1, r2
 8023482:	4640      	mov	r0, r8
 8023484:	f7ff ff94 	bl	80233b0 <mg_str_n>
}
 8023488:	4640      	mov	r0, r8
 802348a:	b004      	add	sp, #16
 802348c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023490:	b002      	add	sp, #8
 8023492:	4770      	bx	lr

08023494 <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 8023494:	b530      	push	{r4, r5, lr}
 8023496:	b085      	sub	sp, #20
 8023498:	466b      	mov	r3, sp
 802349a:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 802349e:	290d      	cmp	r1, #13
 80234a0:	d930      	bls.n	8023504 <mg_v4mapped+0x70>
 80234a2:	4614      	mov	r4, r2
 80234a4:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 80234a6:	4601      	mov	r1, r0
 80234a8:	7802      	ldrb	r2, [r0, #0]
 80234aa:	2a3a      	cmp	r2, #58	@ 0x3a
 80234ac:	d12d      	bne.n	802350a <mg_v4mapped+0x76>
 80234ae:	7842      	ldrb	r2, [r0, #1]
 80234b0:	2a3a      	cmp	r2, #58	@ 0x3a
 80234b2:	d12c      	bne.n	802350e <mg_v4mapped+0x7a>
 80234b4:	7982      	ldrb	r2, [r0, #6]
 80234b6:	2a3a      	cmp	r2, #58	@ 0x3a
 80234b8:	d12b      	bne.n	8023512 <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 80234ba:	2202      	movs	r2, #2
 80234bc:	e000      	b.n	80234c0 <mg_v4mapped+0x2c>
 80234be:	3201      	adds	r2, #1
 80234c0:	2a05      	cmp	r2, #5
 80234c2:	dc06      	bgt.n	80234d2 <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 80234c4:	5c88      	ldrb	r0, [r1, r2]
 80234c6:	2866      	cmp	r0, #102	@ 0x66
 80234c8:	d0f9      	beq.n	80234be <mg_v4mapped+0x2a>
 80234ca:	2846      	cmp	r0, #70	@ 0x46
 80234cc:	d0f7      	beq.n	80234be <mg_v4mapped+0x2a>
 80234ce:	2000      	movs	r0, #0
 80234d0:	e019      	b.n	8023506 <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 80234d2:	ad02      	add	r5, sp, #8
 80234d4:	1fda      	subs	r2, r3, #7
 80234d6:	3107      	adds	r1, #7
 80234d8:	4628      	mov	r0, r5
 80234da:	f7ff ff69 	bl	80233b0 <mg_str_n>
 80234de:	4622      	mov	r2, r4
 80234e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80234e4:	f7fc fee6 	bl	80202b4 <mg_aton4>
 80234e8:	b168      	cbz	r0, 8023506 <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 80234ea:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 80234ec:	2300      	movs	r3, #0
 80234ee:	6023      	str	r3, [r4, #0]
 80234f0:	6063      	str	r3, [r4, #4]
 80234f2:	60a3      	str	r3, [r4, #8]
 80234f4:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 80234f6:	23ff      	movs	r3, #255	@ 0xff
 80234f8:	72e3      	strb	r3, [r4, #11]
 80234fa:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 80234fc:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 80234fe:	2301      	movs	r3, #1
 8023500:	74e3      	strb	r3, [r4, #19]
  return true;
 8023502:	e000      	b.n	8023506 <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 8023504:	2000      	movs	r0, #0
}
 8023506:	b005      	add	sp, #20
 8023508:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 802350a:	2000      	movs	r0, #0
 802350c:	e7fb      	b.n	8023506 <mg_v4mapped+0x72>
 802350e:	2000      	movs	r0, #0
 8023510:	e7f9      	b.n	8023506 <mg_v4mapped+0x72>
 8023512:	2000      	movs	r0, #0
 8023514:	e7f7      	b.n	8023506 <mg_v4mapped+0x72>

08023516 <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 8023516:	b530      	push	{r4, r5, lr}
 8023518:	b083      	sub	sp, #12
 802351a:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 802351c:	6803      	ldr	r3, [r0, #0]
 802351e:	6842      	ldr	r2, [r0, #4]
 8023520:	441a      	add	r2, r3
 8023522:	466d      	mov	r5, sp
 8023524:	1a52      	subs	r2, r2, r1
 8023526:	4628      	mov	r0, r5
 8023528:	f7ff ff42 	bl	80233b0 <mg_str_n>
 802352c:	3408      	adds	r4, #8
 802352e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8023532:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8023536:	b003      	add	sp, #12
 8023538:	bd30      	pop	{r4, r5, pc}

0802353a <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 802353a:	b084      	sub	sp, #16
 802353c:	f10d 0c10 	add.w	ip, sp, #16
 8023540:	e90c 0003 	stmdb	ip, {r0, r1}
 8023544:	4669      	mov	r1, sp
 8023546:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 802354a:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 802354c:	9a03      	ldr	r2, [sp, #12]
 802354e:	429a      	cmp	r2, r3
 8023550:	d90b      	bls.n	802356a <mg_strcmp+0x30>
 8023552:	9901      	ldr	r1, [sp, #4]
 8023554:	4299      	cmp	r1, r3
 8023556:	d908      	bls.n	802356a <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 8023558:	9a02      	ldr	r2, [sp, #8]
 802355a:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 802355c:	9a00      	ldr	r2, [sp, #0]
 802355e:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 8023560:	4291      	cmp	r1, r2
 8023562:	db09      	blt.n	8023578 <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 8023564:	dc0c      	bgt.n	8023580 <mg_strcmp+0x46>
    i++;
 8023566:	3301      	adds	r3, #1
 8023568:	e7f0      	b.n	802354c <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 802356a:	429a      	cmp	r2, r3
 802356c:	d80a      	bhi.n	8023584 <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 802356e:	9a01      	ldr	r2, [sp, #4]
 8023570:	429a      	cmp	r2, r3
 8023572:	d809      	bhi.n	8023588 <mg_strcmp+0x4e>
  return 0;
 8023574:	2000      	movs	r0, #0
 8023576:	e001      	b.n	802357c <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 8023578:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 802357c:	b004      	add	sp, #16
 802357e:	4770      	bx	lr
    if (c1 > c2) return 1;
 8023580:	2001      	movs	r0, #1
 8023582:	e7fb      	b.n	802357c <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 8023584:	2001      	movs	r0, #1
 8023586:	e7f9      	b.n	802357c <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 8023588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802358c:	e7f6      	b.n	802357c <mg_strcmp+0x42>

0802358e <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 802358e:	b530      	push	{r4, r5, lr}
 8023590:	b085      	sub	sp, #20
 8023592:	ac04      	add	r4, sp, #16
 8023594:	e904 0003 	stmdb	r4, {r0, r1}
 8023598:	4669      	mov	r1, sp
 802359a:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 802359e:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 80235a0:	9b03      	ldr	r3, [sp, #12]
 80235a2:	42a3      	cmp	r3, r4
 80235a4:	d910      	bls.n	80235c8 <mg_strcasecmp+0x3a>
 80235a6:	9a01      	ldr	r2, [sp, #4]
 80235a8:	42a2      	cmp	r2, r4
 80235aa:	d90d      	bls.n	80235c8 <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 80235ac:	9b02      	ldr	r3, [sp, #8]
 80235ae:	5d18      	ldrb	r0, [r3, r4]
 80235b0:	f7fc ff8e 	bl	80204d0 <mg_tolc>
 80235b4:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 80235b6:	9b00      	ldr	r3, [sp, #0]
 80235b8:	5d18      	ldrb	r0, [r3, r4]
 80235ba:	f7fc ff89 	bl	80204d0 <mg_tolc>
    if (c1 < c2) return -1;
 80235be:	4285      	cmp	r5, r0
 80235c0:	db09      	blt.n	80235d6 <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 80235c2:	dc0c      	bgt.n	80235de <mg_strcasecmp+0x50>
    i++;
 80235c4:	3401      	adds	r4, #1
 80235c6:	e7eb      	b.n	80235a0 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 80235c8:	42a3      	cmp	r3, r4
 80235ca:	d80a      	bhi.n	80235e2 <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 80235cc:	9b01      	ldr	r3, [sp, #4]
 80235ce:	42a3      	cmp	r3, r4
 80235d0:	d809      	bhi.n	80235e6 <mg_strcasecmp+0x58>
  return 0;
 80235d2:	2000      	movs	r0, #0
 80235d4:	e001      	b.n	80235da <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 80235d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80235da:	b005      	add	sp, #20
 80235dc:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 80235de:	2001      	movs	r0, #1
 80235e0:	e7fb      	b.n	80235da <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 80235e2:	2001      	movs	r0, #1
 80235e4:	e7f9      	b.n	80235da <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 80235e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80235ea:	e7f6      	b.n	80235da <mg_strcasecmp+0x4c>

080235ec <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 80235ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80235f0:	b086      	sub	sp, #24
 80235f2:	4604      	mov	r4, r0
 80235f4:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 80235f6:	f7fe fb43 	bl	8021c80 <mg_http_get_request_len>
 80235fa:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 80235fc:	b1d4      	cbz	r4, 8023634 <mg_http_parse+0x48>
 80235fe:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 8023600:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8023604:	2100      	movs	r1, #0
 8023606:	4630      	mov	r0, r6
 8023608:	f008 f9fa 	bl	802ba00 <memset>
  if (req_len <= 0) return req_len;
 802360c:	2f00      	cmp	r7, #0
 802360e:	f340 808d 	ble.w	802372c <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 8023612:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 8023616:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 802361a:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 802361e:	46b8      	mov	r8, r7
 8023620:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8023624:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023628:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 802362c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 8023630:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8023632:	e005      	b.n	8023640 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8023634:	4625      	mov	r5, r4
 8023636:	e7e3      	b.n	8023600 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8023638:	4414      	add	r4, r2
 802363a:	6873      	ldr	r3, [r6, #4]
 802363c:	4413      	add	r3, r2
 802363e:	6073      	str	r3, [r6, #4]
 8023640:	42ac      	cmp	r4, r5
 8023642:	d208      	bcs.n	8023656 <mg_http_parse+0x6a>
 8023644:	4629      	mov	r1, r5
 8023646:	4620      	mov	r0, r4
 8023648:	f7fb fc8a 	bl	801ef60 <clen>
 802364c:	4602      	mov	r2, r0
 802364e:	2800      	cmp	r0, #0
 8023650:	d1f2      	bne.n	8023638 <mg_http_parse+0x4c>
 8023652:	e000      	b.n	8023656 <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8023654:	3401      	adds	r4, #1
 8023656:	42ac      	cmp	r4, r5
 8023658:	d202      	bcs.n	8023660 <mg_http_parse+0x74>
 802365a:	7823      	ldrb	r3, [r4, #0]
 802365c:	2b20      	cmp	r3, #32
 802365e:	d0f9      	beq.n	8023654 <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 8023660:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8023662:	e003      	b.n	802366c <mg_http_parse+0x80>
 8023664:	4414      	add	r4, r2
 8023666:	68f3      	ldr	r3, [r6, #12]
 8023668:	4413      	add	r3, r2
 802366a:	60f3      	str	r3, [r6, #12]
 802366c:	42ac      	cmp	r4, r5
 802366e:	d208      	bcs.n	8023682 <mg_http_parse+0x96>
 8023670:	4629      	mov	r1, r5
 8023672:	4620      	mov	r0, r4
 8023674:	f7fb fc74 	bl	801ef60 <clen>
 8023678:	4602      	mov	r2, r0
 802367a:	2800      	cmp	r0, #0
 802367c:	d1f2      	bne.n	8023664 <mg_http_parse+0x78>
 802367e:	e000      	b.n	8023682 <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8023680:	3401      	adds	r4, #1
 8023682:	42ac      	cmp	r4, r5
 8023684:	d202      	bcs.n	802368c <mg_http_parse+0xa0>
 8023686:	7823      	ldrb	r3, [r4, #0]
 8023688:	2b20      	cmp	r3, #32
 802368a:	d0f9      	beq.n	8023680 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 802368c:	f106 0218 	add.w	r2, r6, #24
 8023690:	4629      	mov	r1, r5
 8023692:	4620      	mov	r0, r4
 8023694:	f7fb fcab 	bl	801efee <skiptorn>
 8023698:	4682      	mov	sl, r0
 802369a:	2800      	cmp	r0, #0
 802369c:	f000 8082 	beq.w	80237a4 <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 80236a0:	f8d6 9008 	ldr.w	r9, [r6, #8]
 80236a4:	68f4      	ldr	r4, [r6, #12]
 80236a6:	4622      	mov	r2, r4
 80236a8:	213f      	movs	r1, #63	@ 0x3f
 80236aa:	4648      	mov	r0, r9
 80236ac:	f7ec fda8 	bl	8010200 <memchr>
 80236b0:	b138      	cbz	r0, 80236c2 <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 80236b2:	1c42      	adds	r2, r0, #1
 80236b4:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 80236b6:	444c      	add	r4, r9
 80236b8:	1aa4      	subs	r4, r4, r2
 80236ba:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 80236bc:	eba0 0309 	sub.w	r3, r0, r9
 80236c0:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 80236c2:	6873      	ldr	r3, [r6, #4]
 80236c4:	2b00      	cmp	r3, #0
 80236c6:	d06f      	beq.n	80237a8 <mg_http_parse+0x1bc>
 80236c8:	68f3      	ldr	r3, [r6, #12]
 80236ca:	2b00      	cmp	r3, #0
 80236cc:	d06f      	beq.n	80237ae <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 80236ce:	231e      	movs	r3, #30
 80236d0:	f106 0220 	add.w	r2, r6, #32
 80236d4:	4629      	mov	r1, r5
 80236d6:	4650      	mov	r0, sl
 80236d8:	f7fb fcb1 	bl	801f03e <mg_http_parse_headers>
 80236dc:	2800      	cmp	r0, #0
 80236de:	d069      	beq.n	80237b4 <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80236e0:	4939      	ldr	r1, [pc, #228]	@ (80237c8 <mg_http_parse+0x1dc>)
 80236e2:	4630      	mov	r0, r6
 80236e4:	f7fe faf8 	bl	8021cd8 <mg_http_get_header>
 80236e8:	b160      	cbz	r0, 8023704 <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80236ea:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 80236ee:	e9d0 0100 	ldrd	r0, r1, [r0]
 80236f2:	f7fe fa73 	bl	8021bdc <mg_to_size_t>
 80236f6:	2800      	cmp	r0, #0
 80236f8:	d05f      	beq.n	80237ba <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 80236fa:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 80236fe:	4443      	add	r3, r8
 8023700:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8023704:	2205      	movs	r2, #5
 8023706:	4931      	ldr	r1, [pc, #196]	@ (80237cc <mg_http_parse+0x1e0>)
 8023708:	6830      	ldr	r0, [r6, #0]
 802370a:	f7fb fbdb 	bl	801eec4 <mg_ncasecmp>
 802370e:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8023710:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8023714:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8023718:	d00c      	beq.n	8023734 <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 802371a:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 802371e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8023722:	d029      	beq.n	8023778 <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8023724:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 8023728:	4598      	cmp	r8, r3
 802372a:	d849      	bhi.n	80237c0 <mg_http_parse+0x1d4>
}
 802372c:	4638      	mov	r0, r7
 802372e:	b006      	add	sp, #24
 8023730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8023734:	2800      	cmp	r0, #0
 8023736:	d0f0      	beq.n	802371a <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8023738:	466d      	mov	r5, sp
 802373a:	4925      	ldr	r1, [pc, #148]	@ (80237d0 <mg_http_parse+0x1e4>)
 802373c:	4628      	mov	r0, r5
 802373e:	f7ff fe2b 	bl	8023398 <mg_str_s>
 8023742:	e895 000c 	ldmia.w	r5, {r2, r3}
 8023746:	e896 0003 	ldmia.w	r6, {r0, r1}
 802374a:	f7ff ff20 	bl	802358e <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 802374e:	2800      	cmp	r0, #0
 8023750:	d0e3      	beq.n	802371a <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8023752:	ad02      	add	r5, sp, #8
 8023754:	491f      	ldr	r1, [pc, #124]	@ (80237d4 <mg_http_parse+0x1e8>)
 8023756:	4628      	mov	r0, r5
 8023758:	f7ff fe1e 	bl	8023398 <mg_str_s>
 802375c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8023760:	e896 0003 	ldmia.w	r6, {r0, r1}
 8023764:	f7ff ff13 	bl	802358e <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8023768:	2800      	cmp	r0, #0
 802376a:	d0d6      	beq.n	802371a <mg_http_parse+0x12e>
    hm->body.len = 0;
 802376c:	2300      	movs	r3, #0
 802376e:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8023772:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8023776:	e7d0      	b.n	802371a <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8023778:	2c00      	cmp	r4, #0
 802377a:	d1d3      	bne.n	8023724 <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 802377c:	ac04      	add	r4, sp, #16
 802377e:	4916      	ldr	r1, [pc, #88]	@ (80237d8 <mg_http_parse+0x1ec>)
 8023780:	4620      	mov	r0, r4
 8023782:	f7ff fe09 	bl	8023398 <mg_str_s>
 8023786:	e894 000c 	ldmia.w	r4, {r2, r3}
 802378a:	f106 0108 	add.w	r1, r6, #8
 802378e:	c903      	ldmia	r1, {r0, r1}
 8023790:	f7ff fefd 	bl	802358e <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8023794:	2800      	cmp	r0, #0
 8023796:	d1c5      	bne.n	8023724 <mg_http_parse+0x138>
    hm->body.len = 0;
 8023798:	2300      	movs	r3, #0
 802379a:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 802379e:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 80237a2:	e7bf      	b.n	8023724 <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 80237a4:	2700      	movs	r7, #0
 80237a6:	e7c1      	b.n	802372c <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 80237a8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80237ac:	e7be      	b.n	802372c <mg_http_parse+0x140>
 80237ae:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80237b2:	e7bb      	b.n	802372c <mg_http_parse+0x140>
    return -1;  // error when parsing
 80237b4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80237b8:	e7b8      	b.n	802372c <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80237ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80237be:	e7b5      	b.n	802372c <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80237c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80237c4:	e7b2      	b.n	802372c <mg_http_parse+0x140>
 80237c6:	bf00      	nop
 80237c8:	08038f2c 	.word	0x08038f2c
 80237cc:	08038f3c 	.word	0x08038f3c
 80237d0:	080360e4 	.word	0x080360e4
 80237d4:	08035520 	.word	0x08035520
 80237d8:	08038f44 	.word	0x08038f44

080237dc <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 80237dc:	b530      	push	{r4, r5, lr}
 80237de:	b085      	sub	sp, #20
 80237e0:	ac04      	add	r4, sp, #16
 80237e2:	e904 0003 	stmdb	r4, {r0, r1}
 80237e6:	4669      	mov	r1, sp
 80237e8:	e881 000c 	stmia.w	r1, {r2, r3}
 80237ec:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 80237ee:	b110      	cbz	r0, 80237f6 <mg_match+0x1a>
 80237f0:	2300      	movs	r3, #0
 80237f2:	6003      	str	r3, [r0, #0]
 80237f4:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 80237f6:	2400      	movs	r4, #0
 80237f8:	46a4      	mov	ip, r4
 80237fa:	4621      	mov	r1, r4
 80237fc:	4623      	mov	r3, r4
 80237fe:	e028      	b.n	8023852 <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8023800:	9a02      	ldr	r2, [sp, #8]
 8023802:	440a      	add	r2, r1
 8023804:	6002      	str	r2, [r0, #0]
 8023806:	2201      	movs	r2, #1
 8023808:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 802380a:	2200      	movs	r2, #0
 802380c:	6082      	str	r2, [r0, #8]
 802380e:	60c2      	str	r2, [r0, #12]
 8023810:	3008      	adds	r0, #8
      i++, j++;
 8023812:	3301      	adds	r3, #1
 8023814:	3101      	adds	r1, #1
 8023816:	e01c      	b.n	8023852 <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8023818:	429a      	cmp	r2, r3
 802381a:	d905      	bls.n	8023828 <mg_match+0x4c>
 802381c:	9a00      	ldr	r2, [sp, #0]
 802381e:	5cd2      	ldrb	r2, [r2, r3]
 8023820:	2a2a      	cmp	r2, #42	@ 0x2a
 8023822:	d045      	beq.n	80238b0 <mg_match+0xd4>
 8023824:	2a23      	cmp	r2, #35	@ 0x23
 8023826:	d043      	beq.n	80238b0 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8023828:	2c00      	cmp	r4, #0
 802382a:	d065      	beq.n	80238f8 <mg_match+0x11c>
 802382c:	9b03      	ldr	r3, [sp, #12]
 802382e:	42a3      	cmp	r3, r4
 8023830:	d365      	bcc.n	80238fe <mg_match+0x122>
 8023832:	9b00      	ldr	r3, [sp, #0]
 8023834:	f813 300c 	ldrb.w	r3, [r3, ip]
 8023838:	2b23      	cmp	r3, #35	@ 0x23
 802383a:	d003      	beq.n	8023844 <mg_match+0x68>
 802383c:	9b02      	ldr	r3, [sp, #8]
 802383e:	5c5b      	ldrb	r3, [r3, r1]
 8023840:	2b2f      	cmp	r3, #47	@ 0x2f
 8023842:	d05e      	beq.n	8023902 <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8023844:	2800      	cmp	r0, #0
 8023846:	d046      	beq.n	80238d6 <mg_match+0xfa>
 8023848:	6803      	ldr	r3, [r0, #0]
 802384a:	2b00      	cmp	r3, #0
 802384c:	d03c      	beq.n	80238c8 <mg_match+0xec>
      i = ni, j = nj;
 802384e:	4621      	mov	r1, r4
 8023850:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 8023852:	9a01      	ldr	r2, [sp, #4]
 8023854:	429a      	cmp	r2, r3
 8023856:	d802      	bhi.n	802385e <mg_match+0x82>
 8023858:	9d03      	ldr	r5, [sp, #12]
 802385a:	428d      	cmp	r5, r1
 802385c:	d941      	bls.n	80238e2 <mg_match+0x106>
    if (i < p.len && j < s.len &&
 802385e:	429a      	cmp	r2, r3
 8023860:	d9da      	bls.n	8023818 <mg_match+0x3c>
 8023862:	9d03      	ldr	r5, [sp, #12]
 8023864:	428d      	cmp	r5, r1
 8023866:	d9d7      	bls.n	8023818 <mg_match+0x3c>
        (p.buf[i] == '?' ||
 8023868:	9d00      	ldr	r5, [sp, #0]
 802386a:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 802386e:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8023872:	d009      	beq.n	8023888 <mg_match+0xac>
        (p.buf[i] == '?' ||
 8023874:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 8023878:	d0ce      	beq.n	8023818 <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 802387a:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 802387e:	d0cb      	beq.n	8023818 <mg_match+0x3c>
 8023880:	9d02      	ldr	r5, [sp, #8]
 8023882:	5c6d      	ldrb	r5, [r5, r1]
 8023884:	45ae      	cmp	lr, r5
 8023886:	d1c7      	bne.n	8023818 <mg_match+0x3c>
      if (caps == NULL) {
 8023888:	2800      	cmp	r0, #0
 802388a:	d0c2      	beq.n	8023812 <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 802388c:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8023890:	d0b6      	beq.n	8023800 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 8023892:	6802      	ldr	r2, [r0, #0]
 8023894:	2a00      	cmp	r2, #0
 8023896:	d0bc      	beq.n	8023812 <mg_match+0x36>
 8023898:	6845      	ldr	r5, [r0, #4]
 802389a:	2d00      	cmp	r5, #0
 802389c:	d1b9      	bne.n	8023812 <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 802389e:	9d02      	ldr	r5, [sp, #8]
 80238a0:	440d      	add	r5, r1
 80238a2:	1aad      	subs	r5, r5, r2
 80238a4:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 80238a6:	2200      	movs	r2, #0
 80238a8:	60c2      	str	r2, [r0, #12]
 80238aa:	6082      	str	r2, [r0, #8]
 80238ac:	3008      	adds	r0, #8
 80238ae:	e7b0      	b.n	8023812 <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 80238b0:	b108      	cbz	r0, 80238b6 <mg_match+0xda>
 80238b2:	6802      	ldr	r2, [r0, #0]
 80238b4:	b11a      	cbz	r2, 80238be <mg_match+0xe2>
      ni = i++, nj = j + 1;
 80238b6:	1c4c      	adds	r4, r1, #1
 80238b8:	469c      	mov	ip, r3
 80238ba:	3301      	adds	r3, #1
 80238bc:	e7c9      	b.n	8023852 <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 80238be:	6042      	str	r2, [r0, #4]
 80238c0:	9a02      	ldr	r2, [sp, #8]
 80238c2:	440a      	add	r2, r1
 80238c4:	6002      	str	r2, [r0, #0]
 80238c6:	e7f6      	b.n	80238b6 <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 80238c8:	6843      	ldr	r3, [r0, #4]
 80238ca:	b93b      	cbnz	r3, 80238dc <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 80238cc:	3808      	subs	r0, #8
 80238ce:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 80238d0:	4621      	mov	r1, r4
 80238d2:	4663      	mov	r3, ip
 80238d4:	e7bd      	b.n	8023852 <mg_match+0x76>
 80238d6:	4621      	mov	r1, r4
 80238d8:	4663      	mov	r3, ip
 80238da:	e7ba      	b.n	8023852 <mg_match+0x76>
 80238dc:	4621      	mov	r1, r4
 80238de:	4663      	mov	r3, ip
 80238e0:	e7b7      	b.n	8023852 <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 80238e2:	b180      	cbz	r0, 8023906 <mg_match+0x12a>
 80238e4:	6803      	ldr	r3, [r0, #0]
 80238e6:	b183      	cbz	r3, 802390a <mg_match+0x12e>
 80238e8:	6842      	ldr	r2, [r0, #4]
 80238ea:	b982      	cbnz	r2, 802390e <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 80238ec:	9a02      	ldr	r2, [sp, #8]
 80238ee:	440a      	add	r2, r1
 80238f0:	1ad3      	subs	r3, r2, r3
 80238f2:	6043      	str	r3, [r0, #4]
  return true;
 80238f4:	2001      	movs	r0, #1
 80238f6:	e000      	b.n	80238fa <mg_match+0x11e>
      return false;
 80238f8:	2000      	movs	r0, #0
}
 80238fa:	b005      	add	sp, #20
 80238fc:	bd30      	pop	{r4, r5, pc}
      return false;
 80238fe:	2000      	movs	r0, #0
 8023900:	e7fb      	b.n	80238fa <mg_match+0x11e>
 8023902:	2000      	movs	r0, #0
 8023904:	e7f9      	b.n	80238fa <mg_match+0x11e>
  return true;
 8023906:	2001      	movs	r0, #1
 8023908:	e7f7      	b.n	80238fa <mg_match+0x11e>
 802390a:	2001      	movs	r0, #1
 802390c:	e7f5      	b.n	80238fa <mg_match+0x11e>
 802390e:	2001      	movs	r0, #1
 8023910:	e7f3      	b.n	80238fa <mg_match+0x11e>

08023912 <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8023912:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023916:	b085      	sub	sp, #20
 8023918:	ac04      	add	r4, sp, #16
 802391a:	e904 0003 	stmdb	r4, {r0, r1}
 802391e:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 8023922:	b379      	cbz	r1, 8023984 <mg_span+0x72>
 8023924:	4690      	mov	r8, r2
 8023926:	461f      	mov	r7, r3
 8023928:	460d      	mov	r5, r1
 802392a:	9e02      	ldr	r6, [sp, #8]
 802392c:	b366      	cbz	r6, 8023988 <mg_span+0x76>
    size_t len = 0;
 802392e:	2400      	movs	r4, #0
 8023930:	e000      	b.n	8023934 <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8023932:	3401      	adds	r4, #1
 8023934:	42a5      	cmp	r5, r4
 8023936:	d902      	bls.n	802393e <mg_span+0x2c>
 8023938:	5d31      	ldrb	r1, [r6, r4]
 802393a:	4281      	cmp	r1, r0
 802393c:	d1f9      	bne.n	8023932 <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 802393e:	f1b8 0f00 	cmp.w	r8, #0
 8023942:	d009      	beq.n	8023958 <mg_span+0x46>
 8023944:	46e9      	mov	r9, sp
 8023946:	4622      	mov	r2, r4
 8023948:	4631      	mov	r1, r6
 802394a:	4648      	mov	r0, r9
 802394c:	f7ff fd30 	bl	80233b0 <mg_str_n>
 8023950:	e899 0003 	ldmia.w	r9, {r0, r1}
 8023954:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8023958:	b187      	cbz	r7, 802397c <mg_span+0x6a>
 802395a:	46e8      	mov	r8, sp
 802395c:	1b2a      	subs	r2, r5, r4
 802395e:	1931      	adds	r1, r6, r4
 8023960:	4640      	mov	r0, r8
 8023962:	f7ff fd25 	bl	80233b0 <mg_str_n>
 8023966:	e898 0003 	ldmia.w	r8, {r0, r1}
 802396a:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 802396e:	42a5      	cmp	r5, r4
 8023970:	d904      	bls.n	802397c <mg_span+0x6a>
 8023972:	4603      	mov	r3, r0
 8023974:	3301      	adds	r3, #1
 8023976:	603b      	str	r3, [r7, #0]
 8023978:	1e4b      	subs	r3, r1, #1
 802397a:	607b      	str	r3, [r7, #4]
    return true;
 802397c:	2001      	movs	r0, #1
}
 802397e:	b005      	add	sp, #20
 8023980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 8023984:	2000      	movs	r0, #0
 8023986:	e7fa      	b.n	802397e <mg_span+0x6c>
 8023988:	2000      	movs	r0, #0
 802398a:	e7f8      	b.n	802397e <mg_span+0x6c>

0802398c <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 802398c:	b082      	sub	sp, #8
 802398e:	b510      	push	{r4, lr}
 8023990:	b08a      	sub	sp, #40	@ 0x28
 8023992:	4604      	mov	r4, r0
 8023994:	f10d 0c08 	add.w	ip, sp, #8
 8023998:	e88c 0006 	stmia.w	ip, {r1, r2}
 802399c:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 802399e:	2200      	movs	r2, #0
 80239a0:	4611      	mov	r1, r2
 80239a2:	f7ff fd05 	bl	80233b0 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 80239a6:	ab02      	add	r3, sp, #8
 80239a8:	2226      	movs	r2, #38	@ 0x26
 80239aa:	9200      	str	r2, [sp, #0]
 80239ac:	aa08      	add	r2, sp, #32
 80239ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80239b2:	f7ff ffae 	bl	8023912 <mg_span>
 80239b6:	b1c8      	cbz	r0, 80239ec <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 80239b8:	233d      	movs	r3, #61	@ 0x3d
 80239ba:	9300      	str	r3, [sp, #0]
 80239bc:	ab04      	add	r3, sp, #16
 80239be:	aa06      	add	r2, sp, #24
 80239c0:	a90a      	add	r1, sp, #40	@ 0x28
 80239c2:	e911 0003 	ldmdb	r1, {r0, r1}
 80239c6:	f7ff ffa4 	bl	8023912 <mg_span>
 80239ca:	2800      	cmp	r0, #0
 80239cc:	d0eb      	beq.n	80239a6 <mg_http_var+0x1a>
 80239ce:	9a07      	ldr	r2, [sp, #28]
 80239d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80239d2:	4293      	cmp	r3, r2
 80239d4:	d1e7      	bne.n	80239a6 <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 80239d6:	9906      	ldr	r1, [sp, #24]
 80239d8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80239da:	f7fb fa73 	bl	801eec4 <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 80239de:	2800      	cmp	r0, #0
 80239e0:	d1e1      	bne.n	80239a6 <mg_http_var+0x1a>
      result = v;
 80239e2:	ab04      	add	r3, sp, #16
 80239e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80239e8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80239ec:	4620      	mov	r0, r4
 80239ee:	b00a      	add	sp, #40	@ 0x28
 80239f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239f4:	b002      	add	sp, #8
 80239f6:	4770      	bx	lr

080239f8 <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 80239f8:	b530      	push	{r4, r5, lr}
 80239fa:	b08d      	sub	sp, #52	@ 0x34
 80239fc:	4604      	mov	r4, r0
 80239fe:	a802      	add	r0, sp, #8
 8023a00:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 8023a04:	4619      	mov	r1, r3
 8023a06:	a804      	add	r0, sp, #16
 8023a08:	f7ff fcc6 	bl	8023398 <mg_str_s>
  size_t i = 0;
 8023a0c:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8023a0e:	e000      	b.n	8023a12 <guess_content_type+0x1a>
 8023a10:	3301      	adds	r3, #1
 8023a12:	9803      	ldr	r0, [sp, #12]
 8023a14:	4298      	cmp	r0, r3
 8023a16:	d906      	bls.n	8023a26 <guess_content_type+0x2e>
 8023a18:	1ac1      	subs	r1, r0, r3
 8023a1a:	9a02      	ldr	r2, [sp, #8]
 8023a1c:	440a      	add	r2, r1
 8023a1e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8023a22:	2a2e      	cmp	r2, #46	@ 0x2e
 8023a24:	d1f4      	bne.n	8023a10 <guess_content_type+0x18>
  path.buf += path.len - i;
 8023a26:	1ac0      	subs	r0, r0, r3
 8023a28:	9a02      	ldr	r2, [sp, #8]
 8023a2a:	4402      	add	r2, r0
 8023a2c:	9202      	str	r2, [sp, #8]
  path.len = i;
 8023a2e:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 8023a30:	ab04      	add	r3, sp, #16
 8023a32:	222c      	movs	r2, #44	@ 0x2c
 8023a34:	9200      	str	r2, [sp, #0]
 8023a36:	aa0a      	add	r2, sp, #40	@ 0x28
 8023a38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023a3c:	f7ff ff69 	bl	8023912 <mg_span>
 8023a40:	b1c0      	cbz	r0, 8023a74 <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 8023a42:	233d      	movs	r3, #61	@ 0x3d
 8023a44:	9300      	str	r3, [sp, #0]
 8023a46:	ab06      	add	r3, sp, #24
 8023a48:	aa08      	add	r2, sp, #32
 8023a4a:	a90c      	add	r1, sp, #48	@ 0x30
 8023a4c:	e911 0003 	ldmdb	r1, {r0, r1}
 8023a50:	f7ff ff5f 	bl	8023912 <mg_span>
 8023a54:	2800      	cmp	r0, #0
 8023a56:	d0eb      	beq.n	8023a30 <guess_content_type+0x38>
 8023a58:	ab08      	add	r3, sp, #32
 8023a5a:	cb0c      	ldmia	r3, {r2, r3}
 8023a5c:	a902      	add	r1, sp, #8
 8023a5e:	c903      	ldmia	r1, {r0, r1}
 8023a60:	f7ff fd6b 	bl	802353a <mg_strcmp>
 8023a64:	2800      	cmp	r0, #0
 8023a66:	d1e3      	bne.n	8023a30 <guess_content_type+0x38>
 8023a68:	ab06      	add	r3, sp, #24
 8023a6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023a6e:	e884 0003 	stmia.w	r4, {r0, r1}
 8023a72:	e01c      	b.n	8023aae <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8023a74:	2500      	movs	r5, #0
 8023a76:	4b0f      	ldr	r3, [pc, #60]	@ (8023ab4 <guess_content_type+0xbc>)
 8023a78:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8023a7c:	b19b      	cbz	r3, 8023aa6 <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8023a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8023ab4 <guess_content_type+0xbc>)
 8023a80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8023a84:	cb0c      	ldmia	r3, {r2, r3}
 8023a86:	a902      	add	r1, sp, #8
 8023a88:	c903      	ldmia	r1, {r0, r1}
 8023a8a:	f7ff fd56 	bl	802353a <mg_strcmp>
 8023a8e:	b108      	cbz	r0, 8023a94 <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8023a90:	3502      	adds	r5, #2
 8023a92:	e7f0      	b.n	8023a76 <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8023a94:	3501      	adds	r5, #1
 8023a96:	4b07      	ldr	r3, [pc, #28]	@ (8023ab4 <guess_content_type+0xbc>)
 8023a98:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8023a9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023aa0:	e884 0003 	stmia.w	r4, {r0, r1}
 8023aa4:	e003      	b.n	8023aae <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 8023aa6:	4904      	ldr	r1, [pc, #16]	@ (8023ab8 <guess_content_type+0xc0>)
 8023aa8:	4620      	mov	r0, r4
 8023aaa:	f7ff fc75 	bl	8023398 <mg_str_s>
}
 8023aae:	4620      	mov	r0, r4
 8023ab0:	b00d      	add	sp, #52	@ 0x34
 8023ab2:	bd30      	pop	{r4, r5, pc}
 8023ab4:	0803a434 	.word	0x0803a434
 8023ab8:	08038f48 	.word	0x08038f48

08023abc <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8023abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023abe:	b087      	sub	sp, #28
 8023ac0:	4604      	mov	r4, r0
 8023ac2:	460e      	mov	r6, r1
 8023ac4:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 8023ac6:	2500      	movs	r5, #0
 8023ac8:	1da8      	adds	r0, r5, #6
 8023aca:	6863      	ldr	r3, [r4, #4]
 8023acc:	4298      	cmp	r0, r3
 8023ace:	d23c      	bcs.n	8023b4a <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8023ad0:	6821      	ldr	r1, [r4, #0]
 8023ad2:	1b5b      	subs	r3, r3, r5
 8023ad4:	1f9a      	subs	r2, r3, #6
 8023ad6:	4401      	add	r1, r0
 8023ad8:	a804      	add	r0, sp, #16
 8023ada:	f7ff fc69 	bl	80233b0 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8023ade:	6820      	ldr	r0, [r4, #0]
 8023ae0:	2206      	movs	r2, #6
 8023ae2:	491b      	ldr	r1, [pc, #108]	@ (8023b50 <getrange+0x94>)
 8023ae4:	4428      	add	r0, r5
 8023ae6:	f007 fef7 	bl	802b8d8 <memcmp>
 8023aea:	b108      	cbz	r0, 8023af0 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 8023aec:	3501      	adds	r5, #1
 8023aee:	e7eb      	b.n	8023ac8 <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 8023af0:	ab04      	add	r3, sp, #16
 8023af2:	222d      	movs	r2, #45	@ 0x2d
 8023af4:	9200      	str	r2, [sp, #0]
 8023af6:	aa02      	add	r2, sp, #8
 8023af8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023afc:	f7ff ff09 	bl	8023912 <mg_span>
 8023b00:	b1c0      	cbz	r0, 8023b34 <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 8023b02:	4632      	mov	r2, r6
 8023b04:	ab02      	add	r3, sp, #8
 8023b06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023b0a:	f7fe f867 	bl	8021bdc <mg_to_size_t>
 8023b0e:	b928      	cbnz	r0, 8023b1c <getrange+0x60>
  size_t i, numparsed = 0;
 8023b10:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8023b12:	9b05      	ldr	r3, [sp, #20]
 8023b14:	b923      	cbnz	r3, 8023b20 <getrange+0x64>
}
 8023b16:	4620      	mov	r0, r4
 8023b18:	b007      	add	sp, #28
 8023b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 8023b1c:	2401      	movs	r4, #1
 8023b1e:	e7f8      	b.n	8023b12 <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8023b20:	463a      	mov	r2, r7
 8023b22:	ab06      	add	r3, sp, #24
 8023b24:	e913 0003 	ldmdb	r3, {r0, r1}
 8023b28:	f7fe f858 	bl	8021bdc <mg_to_size_t>
 8023b2c:	2800      	cmp	r0, #0
 8023b2e:	d0f2      	beq.n	8023b16 <getrange+0x5a>
 8023b30:	3401      	adds	r4, #1
 8023b32:	e7f0      	b.n	8023b16 <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8023b34:	4632      	mov	r2, r6
 8023b36:	ab06      	add	r3, sp, #24
 8023b38:	e913 0003 	ldmdb	r3, {r0, r1}
 8023b3c:	f7fe f84e 	bl	8021bdc <mg_to_size_t>
 8023b40:	b908      	cbnz	r0, 8023b46 <getrange+0x8a>
  size_t i, numparsed = 0;
 8023b42:	2400      	movs	r4, #0
 8023b44:	e7e7      	b.n	8023b16 <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8023b46:	2401      	movs	r4, #1
    break;
 8023b48:	e7e5      	b.n	8023b16 <getrange+0x5a>
  size_t i, numparsed = 0;
 8023b4a:	2400      	movs	r4, #0
 8023b4c:	e7e3      	b.n	8023b16 <getrange+0x5a>
 8023b4e:	bf00      	nop
 8023b50:	08038f64 	.word	0x08038f64

08023b54 <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 8023b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b58:	b0e7      	sub	sp, #412	@ 0x19c
 8023b5a:	4607      	mov	r7, r0
 8023b5c:	4688      	mov	r8, r1
 8023b5e:	4614      	mov	r4, r2
 8023b60:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8023b62:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8023b66:	f1b9 0f00 	cmp.w	r9, #0
 8023b6a:	d036      	beq.n	8023bda <mg_http_serve_file+0x86>
  size_t size = 0;
 8023b6c:	2300      	movs	r3, #0
 8023b6e:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 8023b70:	2200      	movs	r2, #0
 8023b72:	2300      	movs	r3, #0
 8023b74:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8023b78:	ae5e      	add	r6, sp, #376	@ 0x178
 8023b7a:	4621      	mov	r1, r4
 8023b7c:	4630      	mov	r0, r6
 8023b7e:	f7ff fc0b 	bl	8023398 <mg_str_s>
 8023b82:	68eb      	ldr	r3, [r5, #12]
 8023b84:	e896 0006 	ldmia.w	r6, {r1, r2}
 8023b88:	a828      	add	r0, sp, #160	@ 0xa0
 8023b8a:	f7ff ff35 	bl	80239f8 <guess_content_type>
  if (path != NULL) {
 8023b8e:	2c00      	cmp	r4, #0
 8023b90:	d053      	beq.n	8023c3a <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8023b92:	4995      	ldr	r1, [pc, #596]	@ (8023de8 <mg_http_serve_file+0x294>)
 8023b94:	4640      	mov	r0, r8
 8023b96:	f7fe f89f 	bl	8021cd8 <mg_http_get_header>
    if (ae != NULL) {
 8023b9a:	4606      	mov	r6, r0
 8023b9c:	2800      	cmp	r0, #0
 8023b9e:	d042      	beq.n	8023c26 <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8023ba0:	6802      	ldr	r2, [r0, #0]
 8023ba2:	6841      	ldr	r1, [r0, #4]
 8023ba4:	4891      	ldr	r0, [pc, #580]	@ (8023dec <mg_http_serve_file+0x298>)
 8023ba6:	f7ff fb15 	bl	80231d4 <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8023baa:	4683      	mov	fp, r0
 8023bac:	b1d8      	cbz	r0, 8023be6 <mg_http_serve_file+0x92>
 8023bae:	4990      	ldr	r1, [pc, #576]	@ (8023df0 <mg_http_serve_file+0x29c>)
 8023bb0:	f007 ffa6 	bl	802bb00 <strstr>
 8023bb4:	4606      	mov	r6, r0
 8023bb6:	b1d0      	cbz	r0, 8023bee <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8023bb8:	4623      	mov	r3, r4
 8023bba:	4a8e      	ldr	r2, [pc, #568]	@ (8023df4 <mg_http_serve_file+0x2a0>)
 8023bbc:	2180      	movs	r1, #128	@ 0x80
 8023bbe:	a82e      	add	r0, sp, #184	@ 0xb8
 8023bc0:	f7fe fd60 	bl	8022684 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8023bc4:	2201      	movs	r2, #1
 8023bc6:	a92e      	add	r1, sp, #184	@ 0xb8
 8023bc8:	4648      	mov	r0, r9
 8023bca:	f7fd ffcc 	bl	8021b66 <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 8023bce:	4606      	mov	r6, r0
 8023bd0:	b130      	cbz	r0, 8023be0 <mg_http_serve_file+0x8c>
 8023bd2:	f04f 0a01 	mov.w	sl, #1
 8023bd6:	ac2e      	add	r4, sp, #184	@ 0xb8
 8023bd8:	e00b      	b.n	8023bf2 <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8023bda:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 8023e1c <mg_http_serve_file+0x2c8>
 8023bde:	e7c5      	b.n	8023b6c <mg_http_serve_file+0x18>
  bool gzip = false;
 8023be0:	f04f 0a00 	mov.w	sl, #0
 8023be4:	e005      	b.n	8023bf2 <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 8023be6:	4606      	mov	r6, r0
  bool gzip = false;
 8023be8:	f04f 0a00 	mov.w	sl, #0
 8023bec:	e001      	b.n	8023bf2 <mg_http_serve_file+0x9e>
 8023bee:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 8023bf2:	4658      	mov	r0, fp
 8023bf4:	f7f5 fffa 	bl	8019bec <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8023bf8:	b1c6      	cbz	r6, 8023c2c <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 8023bfa:	b316      	cbz	r6, 8023c42 <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8023bfc:	f8d9 3000 	ldr.w	r3, [r9]
 8023c00:	aa2a      	add	r2, sp, #168	@ 0xa8
 8023c02:	a92d      	add	r1, sp, #180	@ 0xb4
 8023c04:	4620      	mov	r0, r4
 8023c06:	4798      	blx	r3
 8023c08:	2800      	cmp	r0, #0
 8023c0a:	d137      	bne.n	8023c7c <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8023c0c:	4b7a      	ldr	r3, [pc, #488]	@ (8023df8 <mg_http_serve_file+0x2a4>)
 8023c0e:	68aa      	ldr	r2, [r5, #8]
 8023c10:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8023c14:	4638      	mov	r0, r7
 8023c16:	f7ff fa35 	bl	8023084 <mg_http_reply>
    mg_fs_close(fd);
 8023c1a:	4630      	mov	r0, r6
 8023c1c:	f7fd ffbc 	bl	8021b98 <mg_fs_close>
}
 8023c20:	b067      	add	sp, #412	@ 0x19c
 8023c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 8023c26:	f04f 0a00 	mov.w	sl, #0
 8023c2a:	e7e5      	b.n	8023bf8 <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8023c2c:	2201      	movs	r2, #1
 8023c2e:	4621      	mov	r1, r4
 8023c30:	4648      	mov	r0, r9
 8023c32:	f7fd ff98 	bl	8021b66 <mg_fs_open>
 8023c36:	4606      	mov	r6, r0
 8023c38:	e7df      	b.n	8023bfa <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 8023c3a:	4626      	mov	r6, r4
  bool gzip = false;
 8023c3c:	f04f 0a00 	mov.w	sl, #0
 8023c40:	e7db      	b.n	8023bfa <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 8023c42:	6929      	ldr	r1, [r5, #16]
 8023c44:	b1b9      	cbz	r1, 8023c76 <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8023c46:	2201      	movs	r2, #1
 8023c48:	4648      	mov	r0, r9
 8023c4a:	f7fd ff8c 	bl	8021b66 <mg_fs_open>
 8023c4e:	4606      	mov	r6, r0
    path = opts->page404;
 8023c50:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8023c52:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 8023c56:	4621      	mov	r1, r4
 8023c58:	4658      	mov	r0, fp
 8023c5a:	f7ff fb9d 	bl	8023398 <mg_str_s>
 8023c5e:	68eb      	ldr	r3, [r5, #12]
 8023c60:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8023c64:	a80a      	add	r0, sp, #40	@ 0x28
 8023c66:	f7ff fec7 	bl	80239f8 <guess_content_type>
 8023c6a:	ab28      	add	r3, sp, #160	@ 0xa0
 8023c6c:	aa0a      	add	r2, sp, #40	@ 0x28
 8023c6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023c72:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8023c76:	2e00      	cmp	r6, #0
 8023c78:	d1c0      	bne.n	8023bfc <mg_http_serve_file+0xa8>
 8023c7a:	e7c7      	b.n	8023c0c <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8023c7c:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8023c80:	e9cd 2300 	strd	r2, r3, [sp]
 8023c84:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8023c86:	2140      	movs	r1, #64	@ 0x40
 8023c88:	a84e      	add	r0, sp, #312	@ 0x138
 8023c8a:	f7ff fa3d 	bl	8023108 <mg_http_etag>
 8023c8e:	b190      	cbz	r0, 8023cb6 <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8023c90:	495a      	ldr	r1, [pc, #360]	@ (8023dfc <mg_http_serve_file+0x2a8>)
 8023c92:	4640      	mov	r0, r8
 8023c94:	f7fe f820 	bl	8021cd8 <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8023c98:	4604      	mov	r4, r0
 8023c9a:	b160      	cbz	r0, 8023cb6 <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8023c9c:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8023ca0:	a94e      	add	r1, sp, #312	@ 0x138
 8023ca2:	4658      	mov	r0, fp
 8023ca4:	f7ff fb78 	bl	8023398 <mg_str_s>
 8023ca8:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8023cac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023cb0:	f7ff fc6d 	bl	802358e <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8023cb4:	b340      	cbz	r0, 8023d08 <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 8023cb6:	f04f 0b00 	mov.w	fp, #0
 8023cba:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8023cbe:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8023cc2:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8023cc4:	494e      	ldr	r1, [pc, #312]	@ (8023e00 <mg_http_serve_file+0x2ac>)
 8023cc6:	4640      	mov	r0, r8
 8023cc8:	f7fe f806 	bl	8021cd8 <mg_http_get_header>
    range[0] = '\0';
 8023ccc:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8023cd0:	2800      	cmp	r0, #0
 8023cd2:	d040      	beq.n	8023d56 <mg_http_serve_file+0x202>
 8023cd4:	aa0e      	add	r2, sp, #56	@ 0x38
 8023cd6:	a90d      	add	r1, sp, #52	@ 0x34
 8023cd8:	f7ff fef0 	bl	8023abc <getrange>
 8023cdc:	2800      	cmp	r0, #0
 8023cde:	dd70      	ble.n	8023dc2 <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 8023ce0:	2801      	cmp	r0, #1
 8023ce2:	d01c      	beq.n	8023d1e <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 8023ce4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023ce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023ce8:	429a      	cmp	r2, r3
 8023cea:	d801      	bhi.n	8023cf0 <mg_http_serve_file+0x19c>
 8023cec:	42a3      	cmp	r3, r4
 8023cee:	d319      	bcc.n	8023d24 <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8023cf0:	2400      	movs	r4, #0
 8023cf2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8023cf4:	9300      	str	r3, [sp, #0]
 8023cf6:	9401      	str	r4, [sp, #4]
 8023cf8:	4a42      	ldr	r2, [pc, #264]	@ (8023e04 <mg_http_serve_file+0x2b0>)
 8023cfa:	2164      	movs	r1, #100	@ 0x64
 8023cfc:	a80f      	add	r0, sp, #60	@ 0x3c
 8023cfe:	f7fe fcc1 	bl	8022684 <mg_snprintf>
        status = 416;
 8023d02:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8023d06:	e028      	b.n	8023d5a <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 8023d08:	4630      	mov	r0, r6
 8023d0a:	f7fd ff45 	bl	8021b98 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8023d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8023e08 <mg_http_serve_file+0x2b4>)
 8023d10:	68aa      	ldr	r2, [r5, #8]
 8023d12:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8023d16:	4638      	mov	r0, r7
 8023d18:	f7ff f9b4 	bl	8023084 <mg_http_reply>
 8023d1c:	e780      	b.n	8023c20 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 8023d1e:	1e63      	subs	r3, r4, #1
 8023d20:	930e      	str	r3, [sp, #56]	@ 0x38
 8023d22:	e7df      	b.n	8023ce4 <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 8023d24:	1a9b      	subs	r3, r3, r2
 8023d26:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8023d28:	1911      	adds	r1, r2, r4
 8023d2a:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 8023d2c:	2300      	movs	r3, #0
 8023d2e:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8023d30:	9004      	str	r0, [sp, #16]
 8023d32:	9305      	str	r3, [sp, #20]
 8023d34:	9102      	str	r1, [sp, #8]
 8023d36:	9303      	str	r3, [sp, #12]
 8023d38:	9200      	str	r2, [sp, #0]
 8023d3a:	9301      	str	r3, [sp, #4]
 8023d3c:	4a33      	ldr	r2, [pc, #204]	@ (8023e0c <mg_http_serve_file+0x2b8>)
 8023d3e:	2164      	movs	r1, #100	@ 0x64
 8023d40:	a80f      	add	r0, sp, #60	@ 0x3c
 8023d42:	f7fe fc9f 	bl	8022684 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8023d46:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8023d4a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023d4c:	6830      	ldr	r0, [r6, #0]
 8023d4e:	4798      	blx	r3
        status = 206;
 8023d50:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 8023d54:	e001      	b.n	8023d5a <mg_http_serve_file+0x206>
    int n, status = 200;
 8023d56:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 8023d5a:	4648      	mov	r0, r9
 8023d5c:	f7fb f9d8 	bl	801f110 <mg_http_status_code_str>
 8023d60:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8023d62:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 8023d64:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8023d66:	46a4      	mov	ip, r4
 8023d68:	f1ba 0f00 	cmp.w	sl, #0
 8023d6c:	d02c      	beq.n	8023dc8 <mg_http_serve_file+0x274>
 8023d6e:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8023e20 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 8023d72:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 8023d74:	b35a      	cbz	r2, 8023dce <mg_http_serve_file+0x27a>
 8023d76:	9208      	str	r2, [sp, #32]
 8023d78:	aa0f      	add	r2, sp, #60	@ 0x3c
 8023d7a:	9207      	str	r2, [sp, #28]
 8023d7c:	f8cd e018 	str.w	lr, [sp, #24]
 8023d80:	f8cd c010 	str.w	ip, [sp, #16]
 8023d84:	2200      	movs	r2, #0
 8023d86:	9205      	str	r2, [sp, #20]
 8023d88:	aa4e      	add	r2, sp, #312	@ 0x138
 8023d8a:	9202      	str	r2, [sp, #8]
 8023d8c:	9001      	str	r0, [sp, #4]
 8023d8e:	9100      	str	r1, [sp, #0]
 8023d90:	464a      	mov	r2, r9
 8023d92:	491f      	ldr	r1, [pc, #124]	@ (8023e10 <mg_http_serve_file+0x2bc>)
 8023d94:	4638      	mov	r0, r7
 8023d96:	f7ff f94f 	bl	8023038 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8023d9a:	ad64      	add	r5, sp, #400	@ 0x190
 8023d9c:	491d      	ldr	r1, [pc, #116]	@ (8023e14 <mg_http_serve_file+0x2c0>)
 8023d9e:	4628      	mov	r0, r5
 8023da0:	f7ff fafa 	bl	8023398 <mg_str_s>
 8023da4:	e895 000c 	ldmia.w	r5, {r2, r3}
 8023da8:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023dac:	f7ff fbef 	bl	802358e <mg_strcasecmp>
 8023db0:	b178      	cbz	r0, 8023dd2 <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 8023db2:	4b19      	ldr	r3, [pc, #100]	@ (8023e18 <mg_http_serve_file+0x2c4>)
 8023db4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 8023db8:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 8023dbc:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 8023dc0:	e72e      	b.n	8023c20 <mg_http_serve_file+0xcc>
    int n, status = 200;
 8023dc2:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8023dc6:	e7c8      	b.n	8023d5a <mg_http_serve_file+0x206>
    mg_printf(c,
 8023dc8:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8023e08 <mg_http_serve_file+0x2b4>
 8023dcc:	e7d1      	b.n	8023d72 <mg_http_serve_file+0x21e>
 8023dce:	4a0e      	ldr	r2, [pc, #56]	@ (8023e08 <mg_http_serve_file+0x2b4>)
 8023dd0:	e7d1      	b.n	8023d76 <mg_http_serve_file+0x222>
      c->is_resp = 0;
 8023dd2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8023dd6:	f36f 13c7 	bfc	r3, #7, #1
 8023dda:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 8023dde:	4630      	mov	r0, r6
 8023de0:	f7fd feda 	bl	8021b98 <mg_fs_close>
 8023de4:	e71c      	b.n	8023c20 <mg_http_serve_file+0xcc>
 8023de6:	bf00      	nop
 8023de8:	08038f88 	.word	0x08038f88
 8023dec:	08038e94 	.word	0x08038e94
 8023df0:	0803a348 	.word	0x0803a348
 8023df4:	08038f98 	.word	0x08038f98
 8023df8:	08038fa0 	.word	0x08038fa0
 8023dfc:	08038fac 	.word	0x08038fac
 8023e00:	08038fbc 	.word	0x08038fbc
 8023e04:	08038fc4 	.word	0x08038fc4
 8023e08:	08035a68 	.word	0x08035a68
 8023e0c:	08038fe4 	.word	0x08038fe4
 8023e10:	0803900c 	.word	0x0803900c
 8023e14:	0803905c 	.word	0x0803905c
 8023e18:	08025f2d 	.word	0x08025f2d
 8023e1c:	200000ac 	.word	0x200000ac
 8023e20:	08038f6c 	.word	0x08038f6c

08023e24 <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8023e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e28:	b083      	sub	sp, #12
 8023e2a:	ac02      	add	r4, sp, #8
 8023e2c:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8023e30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023e32:	3901      	subs	r1, #1
 8023e34:	2907      	cmp	r1, #7
 8023e36:	f200 8128 	bhi.w	802408a <mg_str_to_num+0x266>
 8023e3a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8023e3e:	0008      	.short	0x0008
 8023e40:	01260020 	.word	0x01260020
 8023e44:	0126000c 	.word	0x0126000c
 8023e48:	01260126 	.word	0x01260126
 8023e4c:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8023e4e:	20ff      	movs	r0, #255	@ 0xff
 8023e50:	f04f 0e00 	mov.w	lr, #0
 8023e54:	e003      	b.n	8023e5e <mg_str_to_num+0x3a>
 8023e56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023e5a:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 8023e5e:	b9e2      	cbnz	r2, 8023e9a <mg_str_to_num+0x76>
 8023e60:	9901      	ldr	r1, [sp, #4]
 8023e62:	2901      	cmp	r1, #1
 8023e64:	d926      	bls.n	8023eb4 <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 8023e66:	9a00      	ldr	r2, [sp, #0]
 8023e68:	7811      	ldrb	r1, [r2, #0]
 8023e6a:	2930      	cmp	r1, #48	@ 0x30
 8023e6c:	d00c      	beq.n	8023e88 <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 8023e6e:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 8023e72:	220a      	movs	r2, #10
 8023e74:	e013      	b.n	8023e9e <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8023e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023e7a:	4686      	mov	lr, r0
 8023e7c:	e7ef      	b.n	8023e5e <mg_str_to_num+0x3a>
 8023e7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8023e82:	f04f 0e00 	mov.w	lr, #0
 8023e86:	e7ea      	b.n	8023e5e <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8023e88:	7852      	ldrb	r2, [r2, #1]
 8023e8a:	2a62      	cmp	r2, #98	@ 0x62
 8023e8c:	d015      	beq.n	8023eba <mg_str_to_num+0x96>
 8023e8e:	2a78      	cmp	r2, #120	@ 0x78
 8023e90:	d017      	beq.n	8023ec2 <mg_str_to_num+0x9e>
      i++;
 8023e92:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8023e96:	220a      	movs	r2, #10
 8023e98:	e001      	b.n	8023e9e <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 8023e9a:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 8023e9e:	2a0a      	cmp	r2, #10
 8023ea0:	d044      	beq.n	8023f2c <mg_str_to_num+0x108>
 8023ea2:	2a10      	cmp	r2, #16
 8023ea4:	f000 80d4 	beq.w	8024050 <mg_str_to_num+0x22c>
 8023ea8:	2a02      	cmp	r2, #2
 8023eaa:	d00e      	beq.n	8023eca <mg_str_to_num+0xa6>
 8023eac:	2000      	movs	r0, #0
}
 8023eae:	b003      	add	sp, #12
 8023eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 8023eb4:	f04f 0c00 	mov.w	ip, #0
 8023eb8:	e7f1      	b.n	8023e9e <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8023eba:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8023ebe:	4662      	mov	r2, ip
 8023ec0:	e7ed      	b.n	8023e9e <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8023ec2:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8023ec6:	2210      	movs	r2, #16
 8023ec8:	e7e9      	b.n	8023e9e <mg_str_to_num+0x7a>
  switch (base) {
 8023eca:	2200      	movs	r2, #0
 8023ecc:	4611      	mov	r1, r2
 8023ece:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8023ed0:	9d01      	ldr	r5, [sp, #4]
 8023ed2:	4565      	cmp	r5, ip
 8023ed4:	f240 80c0 	bls.w	8024058 <mg_str_to_num+0x234>
 8023ed8:	9d00      	ldr	r5, [sp, #0]
 8023eda:	f815 600c 	ldrb.w	r6, [r5, ip]
 8023ede:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8023ee2:	b2ff      	uxtb	r7, r7
 8023ee4:	2f01      	cmp	r7, #1
 8023ee6:	f200 80b7 	bhi.w	8024058 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8023eea:	3e30      	subs	r6, #48	@ 0x30
 8023eec:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 8023ef0:	ea4f 0950 	mov.w	r9, r0, lsr #1
 8023ef4:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 8023ef8:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8023efc:	4591      	cmp	r9, r2
 8023efe:	418f      	sbcs	r7, r1
 8023f00:	f0c0 80c5 	bcc.w	802408e <mg_str_to_num+0x26a>
        result *= 2;
 8023f04:	1892      	adds	r2, r2, r2
 8023f06:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 8023f08:	ebb0 0a06 	subs.w	sl, r0, r6
 8023f0c:	eb6e 0708 	sbc.w	r7, lr, r8
 8023f10:	4592      	cmp	sl, r2
 8023f12:	418f      	sbcs	r7, r1
 8023f14:	f0c0 80bd 	bcc.w	8024092 <mg_str_to_num+0x26e>
        result += digit;
 8023f18:	18b2      	adds	r2, r6, r2
 8023f1a:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 8023f1e:	f10c 0c01 	add.w	ip, ip, #1
 8023f22:	3401      	adds	r4, #1
 8023f24:	e7d4      	b.n	8023ed0 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 8023f26:	f04f 0901 	mov.w	r9, #1
 8023f2a:	e017      	b.n	8023f5c <mg_str_to_num+0x138>
  switch (base) {
 8023f2c:	2200      	movs	r2, #0
 8023f2e:	4611      	mov	r1, r2
 8023f30:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8023f32:	9d01      	ldr	r5, [sp, #4]
 8023f34:	4565      	cmp	r5, ip
 8023f36:	f240 808f 	bls.w	8024058 <mg_str_to_num+0x234>
 8023f3a:	9d00      	ldr	r5, [sp, #0]
 8023f3c:	f815 700c 	ldrb.w	r7, [r5, ip]
 8023f40:	2f2f      	cmp	r7, #47	@ 0x2f
 8023f42:	f240 8089 	bls.w	8024058 <mg_str_to_num+0x234>
 8023f46:	2f39      	cmp	r7, #57	@ 0x39
 8023f48:	f200 8086 	bhi.w	8024058 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8023f4c:	3f30      	subs	r7, #48	@ 0x30
 8023f4e:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 8023f52:	f04f 0900 	mov.w	r9, #0
 8023f56:	eb10 060e 	adds.w	r6, r0, lr
 8023f5a:	d2e4      	bcs.n	8023f26 <mg_str_to_num+0x102>
 8023f5c:	444e      	add	r6, r9
 8023f5e:	4d54      	ldr	r5, [pc, #336]	@ (80240b0 <mg_str_to_num+0x28c>)
 8023f60:	fba5 9b06 	umull	r9, fp, r5, r6
 8023f64:	f02b 0903 	bic.w	r9, fp, #3
 8023f68:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 8023f6c:	eba6 0609 	sub.w	r6, r6, r9
 8023f70:	1b86      	subs	r6, r0, r6
 8023f72:	f16e 0b00 	sbc.w	fp, lr, #0
 8023f76:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 8023f7a:	fb09 f906 	mul.w	r9, r9, r6
 8023f7e:	fb05 990b 	mla	r9, r5, fp, r9
 8023f82:	fba6 6a05 	umull	r6, sl, r6, r5
 8023f86:	44d1      	add	r9, sl
 8023f88:	0876      	lsrs	r6, r6, #1
 8023f8a:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 8023f8e:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8023f92:	4296      	cmp	r6, r2
 8023f94:	eb79 0901 	sbcs.w	r9, r9, r1
 8023f98:	d37d      	bcc.n	8024096 <mg_str_to_num+0x272>
        result *= 10;
 8023f9a:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8023f9e:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 8023fa2:	0096      	lsls	r6, r2, #2
 8023fa4:	18b2      	adds	r2, r6, r2
 8023fa6:	eb41 0909 	adc.w	r9, r1, r9
 8023faa:	1892      	adds	r2, r2, r2
 8023fac:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 8023fb0:	ebb0 0a07 	subs.w	sl, r0, r7
 8023fb4:	eb6e 0108 	sbc.w	r1, lr, r8
 8023fb8:	4592      	cmp	sl, r2
 8023fba:	eb71 0109 	sbcs.w	r1, r1, r9
 8023fbe:	d36c      	bcc.n	802409a <mg_str_to_num+0x276>
        result += digit;
 8023fc0:	18ba      	adds	r2, r7, r2
 8023fc2:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 8023fc6:	f10c 0c01 	add.w	ip, ip, #1
 8023fca:	3401      	adds	r4, #1
 8023fcc:	e7b1      	b.n	8023f32 <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8023fce:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 8023fd2:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8023fd4:	2f05      	cmp	r7, #5
 8023fd6:	d832      	bhi.n	802403e <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8023fd8:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8023fda:	46b0      	mov	r8, r6
 8023fdc:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 8023fde:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8023fe2:	bf08      	it	eq
 8023fe4:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 8023fe8:	d036      	beq.n	8024058 <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 8023fea:	ea4f 1910 	mov.w	r9, r0, lsr #4
 8023fee:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 8023ff2:	ea4f 171e 	mov.w	r7, lr, lsr #4
 8023ff6:	4591      	cmp	r9, r2
 8023ff8:	418f      	sbcs	r7, r1
 8023ffa:	d350      	bcc.n	802409e <mg_str_to_num+0x27a>
        result *= 16;
 8023ffc:	0109      	lsls	r1, r1, #4
 8023ffe:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8024002:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 8024004:	ebb0 0908 	subs.w	r9, r0, r8
 8024008:	eb6e 0706 	sbc.w	r7, lr, r6
 802400c:	4591      	cmp	r9, r2
 802400e:	418f      	sbcs	r7, r1
 8024010:	d347      	bcc.n	80240a2 <mg_str_to_num+0x27e>
        result += digit;
 8024012:	eb18 0202 	adds.w	r2, r8, r2
 8024016:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 802401a:	f10c 0c01 	add.w	ip, ip, #1
 802401e:	3401      	adds	r4, #1
      while (i < str.len) {
 8024020:	9d01      	ldr	r5, [sp, #4]
 8024022:	4565      	cmp	r5, ip
 8024024:	d918      	bls.n	8024058 <mg_str_to_num+0x234>
        char c = str.buf[i];
 8024026:	9d00      	ldr	r5, [sp, #0]
 8024028:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 802402c:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8024030:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024032:	2f09      	cmp	r7, #9
 8024034:	d8cb      	bhi.n	8023fce <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8024036:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024038:	46b0      	mov	r8, r6
 802403a:	17f6      	asrs	r6, r6, #31
 802403c:	e7cf      	b.n	8023fde <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 802403e:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 8024042:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 8024044:	2f05      	cmp	r7, #5
 8024046:	d807      	bhi.n	8024058 <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024048:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 802404a:	46b0      	mov	r8, r6
 802404c:	17f6      	asrs	r6, r6, #31
 802404e:	e7c6      	b.n	8023fde <mg_str_to_num+0x1ba>
  switch (base) {
 8024050:	2200      	movs	r2, #0
 8024052:	4611      	mov	r1, r2
 8024054:	4614      	mov	r4, r2
 8024056:	e7e3      	b.n	8024020 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 8024058:	b32c      	cbz	r4, 80240a6 <mg_str_to_num+0x282>
  if (i != str.len) return false;
 802405a:	9801      	ldr	r0, [sp, #4]
 802405c:	4560      	cmp	r0, ip
 802405e:	d124      	bne.n	80240aa <mg_str_to_num+0x286>
  if (val_len == 1) {
 8024060:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024062:	2801      	cmp	r0, #1
 8024064:	d009      	beq.n	802407a <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 8024066:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024068:	2802      	cmp	r0, #2
 802406a:	d008      	beq.n	802407e <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 802406c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802406e:	2804      	cmp	r0, #4
 8024070:	d008      	beq.n	8024084 <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 8024072:	601a      	str	r2, [r3, #0]
 8024074:	6059      	str	r1, [r3, #4]
  return true;
 8024076:	2001      	movs	r0, #1
 8024078:	e719      	b.n	8023eae <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 802407a:	701a      	strb	r2, [r3, #0]
 802407c:	e717      	b.n	8023eae <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 802407e:	801a      	strh	r2, [r3, #0]
  return true;
 8024080:	2001      	movs	r0, #1
 8024082:	e714      	b.n	8023eae <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 8024084:	601a      	str	r2, [r3, #0]
  return true;
 8024086:	2001      	movs	r0, #1
 8024088:	e711      	b.n	8023eae <mg_str_to_num+0x8a>
  switch (base) {
 802408a:	2000      	movs	r0, #0
 802408c:	e70f      	b.n	8023eae <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 802408e:	2000      	movs	r0, #0
 8024090:	e70d      	b.n	8023eae <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024092:	2000      	movs	r0, #0
 8024094:	e70b      	b.n	8023eae <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 8024096:	2000      	movs	r0, #0
 8024098:	e709      	b.n	8023eae <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802409a:	2000      	movs	r0, #0
 802409c:	e707      	b.n	8023eae <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 802409e:	2000      	movs	r0, #0
 80240a0:	e705      	b.n	8023eae <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 80240a2:	2000      	movs	r0, #0
 80240a4:	e703      	b.n	8023eae <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 80240a6:	2000      	movs	r0, #0
 80240a8:	e701      	b.n	8023eae <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 80240aa:	2000      	movs	r0, #0
 80240ac:	e6ff      	b.n	8023eae <mg_str_to_num+0x8a>
 80240ae:	bf00      	nop
 80240b0:	cccccccd 	.word	0xcccccccd

080240b4 <mg_url_decode>:
                  int is_form_url_encoded) {
 80240b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240b8:	b087      	sub	sp, #28
 80240ba:	4606      	mov	r6, r0
 80240bc:	460f      	mov	r7, r1
 80240be:	4693      	mov	fp, r2
 80240c0:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80240c2:	2400      	movs	r4, #0
 80240c4:	4623      	mov	r3, r4
 80240c6:	e027      	b.n	8024118 <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 80240c8:	f103 0802 	add.w	r8, r3, #2
 80240cc:	45b8      	cmp	r8, r7
 80240ce:	d241      	bcs.n	8024154 <mg_url_decode+0xa0>
 80240d0:	3301      	adds	r3, #1
 80240d2:	18f2      	adds	r2, r6, r3
 80240d4:	9203      	str	r2, [sp, #12]
 80240d6:	5cf0      	ldrb	r0, [r6, r3]
 80240d8:	f7fa ff16 	bl	801ef08 <isx>
 80240dc:	2800      	cmp	r0, #0
 80240de:	d03c      	beq.n	802415a <mg_url_decode+0xa6>
 80240e0:	f816 0008 	ldrb.w	r0, [r6, r8]
 80240e4:	f7fa ff10 	bl	801ef08 <isx>
 80240e8:	2800      	cmp	r0, #0
 80240ea:	d039      	beq.n	8024160 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 80240ec:	f10d 0a10 	add.w	sl, sp, #16
 80240f0:	2202      	movs	r2, #2
 80240f2:	9903      	ldr	r1, [sp, #12]
 80240f4:	4650      	mov	r0, sl
 80240f6:	f7ff f95b 	bl	80233b0 <mg_str_n>
 80240fa:	2301      	movs	r3, #1
 80240fc:	9300      	str	r3, [sp, #0]
 80240fe:	eb0b 0304 	add.w	r3, fp, r4
 8024102:	2210      	movs	r2, #16
 8024104:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8024108:	f7ff fe8c 	bl	8023e24 <mg_str_to_num>
        i += 2;
 802410c:	4643      	mov	r3, r8
 802410e:	e001      	b.n	8024114 <mg_url_decode+0x60>
      dst[j] = src[i];
 8024110:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8024114:	3301      	adds	r3, #1
 8024116:	462c      	mov	r4, r5
 8024118:	42bb      	cmp	r3, r7
 802411a:	d20e      	bcs.n	802413a <mg_url_decode+0x86>
 802411c:	1c65      	adds	r5, r4, #1
 802411e:	454d      	cmp	r5, r9
 8024120:	d20b      	bcs.n	802413a <mg_url_decode+0x86>
    if (src[i] == '%') {
 8024122:	5cf2      	ldrb	r2, [r6, r3]
 8024124:	2a25      	cmp	r2, #37	@ 0x25
 8024126:	d0cf      	beq.n	80240c8 <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 8024128:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802412a:	2900      	cmp	r1, #0
 802412c:	d0f0      	beq.n	8024110 <mg_url_decode+0x5c>
 802412e:	2a2b      	cmp	r2, #43	@ 0x2b
 8024130:	d1ee      	bne.n	8024110 <mg_url_decode+0x5c>
      dst[j] = ' ';
 8024132:	2220      	movs	r2, #32
 8024134:	f80b 2004 	strb.w	r2, [fp, r4]
 8024138:	e7ec      	b.n	8024114 <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 802413a:	454c      	cmp	r4, r9
 802413c:	d202      	bcs.n	8024144 <mg_url_decode+0x90>
 802413e:	2200      	movs	r2, #0
 8024140:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8024144:	42bb      	cmp	r3, r7
 8024146:	d30e      	bcc.n	8024166 <mg_url_decode+0xb2>
 8024148:	454c      	cmp	r4, r9
 802414a:	d20f      	bcs.n	802416c <mg_url_decode+0xb8>
 802414c:	4620      	mov	r0, r4
}
 802414e:	b007      	add	sp, #28
 8024150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8024154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024158:	e7f9      	b.n	802414e <mg_url_decode+0x9a>
 802415a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802415e:	e7f6      	b.n	802414e <mg_url_decode+0x9a>
 8024160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024164:	e7f3      	b.n	802414e <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 8024166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802416a:	e7f0      	b.n	802414e <mg_url_decode+0x9a>
 802416c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024170:	e7ed      	b.n	802414e <mg_url_decode+0x9a>

08024172 <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 8024172:	b352      	cbz	r2, 80241ca <mg_http_get_var+0x58>
                    size_t dst_len) {
 8024174:	b570      	push	{r4, r5, r6, lr}
 8024176:	b086      	sub	sp, #24
 8024178:	4604      	mov	r4, r0
 802417a:	461d      	mov	r5, r3
 802417c:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 802417e:	b10b      	cbz	r3, 8024184 <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8024180:	2300      	movs	r3, #0
 8024182:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 8024184:	b325      	cbz	r5, 80241d0 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8024186:	6823      	ldr	r3, [r4, #0]
 8024188:	b32b      	cbz	r3, 80241d6 <mg_http_get_var+0x64>
 802418a:	b339      	cbz	r1, 80241dc <mg_http_get_var+0x6a>
 802418c:	6863      	ldr	r3, [r4, #4]
 802418e:	b343      	cbz	r3, 80241e2 <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8024190:	a804      	add	r0, sp, #16
 8024192:	f7ff f901 	bl	8023398 <mg_str_s>
 8024196:	9b05      	ldr	r3, [sp, #20]
 8024198:	9300      	str	r3, [sp, #0]
 802419a:	9b04      	ldr	r3, [sp, #16]
 802419c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80241a0:	a802      	add	r0, sp, #8
 80241a2:	f7ff fbf3 	bl	802398c <mg_http_var>
    if (v.buf == NULL) {
 80241a6:	9802      	ldr	r0, [sp, #8]
 80241a8:	b158      	cbz	r0, 80241c2 <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 80241aa:	2301      	movs	r3, #1
 80241ac:	9300      	str	r3, [sp, #0]
 80241ae:	462b      	mov	r3, r5
 80241b0:	4632      	mov	r2, r6
 80241b2:	9903      	ldr	r1, [sp, #12]
 80241b4:	f7ff ff7e 	bl	80240b4 <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 80241b8:	2800      	cmp	r0, #0
 80241ba:	da04      	bge.n	80241c6 <mg_http_get_var+0x54>
 80241bc:	f06f 0002 	mvn.w	r0, #2
 80241c0:	e001      	b.n	80241c6 <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 80241c2:	f06f 0003 	mvn.w	r0, #3
}
 80241c6:	b006      	add	sp, #24
 80241c8:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 80241ca:	f06f 0001 	mvn.w	r0, #1
}
 80241ce:	4770      	bx	lr
    len = -2;  // Bad destination
 80241d0:	f06f 0001 	mvn.w	r0, #1
 80241d4:	e7f7      	b.n	80241c6 <mg_http_get_var+0x54>
    len = -1;  // Bad source
 80241d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80241da:	e7f4      	b.n	80241c6 <mg_http_get_var+0x54>
 80241dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80241e0:	e7f1      	b.n	80241c6 <mg_http_get_var+0x54>
 80241e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 80241e6:	e7ee      	b.n	80241c6 <mg_http_get_var+0x54>

080241e8 <mg_http_creds>:
                   char *pass, size_t passlen) {
 80241e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80241ec:	b0c4      	sub	sp, #272	@ 0x110
 80241ee:	4606      	mov	r6, r0
 80241f0:	460d      	mov	r5, r1
 80241f2:	4617      	mov	r7, r2
 80241f4:	461c      	mov	r4, r3
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 80241f6:	493f      	ldr	r1, [pc, #252]	@ (80242f4 <mg_http_creds+0x10c>)
 80241f8:	f7fd fd6e 	bl	8021cd8 <mg_http_get_header>
  user[0] = pass[0] = '\0';
 80241fc:	2300      	movs	r3, #0
 80241fe:	7023      	strb	r3, [r4, #0]
 8024200:	702b      	strb	r3, [r5, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8024202:	b1c8      	cbz	r0, 8024238 <mg_http_creds+0x50>
 8024204:	4680      	mov	r8, r0
 8024206:	f8d0 9004 	ldr.w	r9, [r0, #4]
 802420a:	f1b9 0f06 	cmp.w	r9, #6
 802420e:	d907      	bls.n	8024220 <mg_http_creds+0x38>
 8024210:	f8d0 a000 	ldr.w	sl, [r0]
 8024214:	2206      	movs	r2, #6
 8024216:	4938      	ldr	r1, [pc, #224]	@ (80242f8 <mg_http_creds+0x110>)
 8024218:	4650      	mov	r0, sl
 802421a:	f007 fb5d 	bl	802b8d8 <memcmp>
 802421e:	b328      	cbz	r0, 802426c <mg_http_creds+0x84>
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8024220:	f1b9 0f07 	cmp.w	r9, #7
 8024224:	d908      	bls.n	8024238 <mg_http_creds+0x50>
 8024226:	f8d8 5000 	ldr.w	r5, [r8]
 802422a:	2207      	movs	r2, #7
 802422c:	4933      	ldr	r1, [pc, #204]	@ (80242fc <mg_http_creds+0x114>)
 802422e:	4628      	mov	r0, r5
 8024230:	f007 fb52 	bl	802b8d8 <memcmp>
 8024234:	2800      	cmp	r0, #0
 8024236:	d043      	beq.n	80242c0 <mg_http_creds+0xd8>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8024238:	4931      	ldr	r1, [pc, #196]	@ (8024300 <mg_http_creds+0x118>)
 802423a:	4630      	mov	r0, r6
 802423c:	f7fd fd4c 	bl	8021cd8 <mg_http_get_header>
 8024240:	4605      	mov	r5, r0
 8024242:	2800      	cmp	r0, #0
 8024244:	d04e      	beq.n	80242e4 <mg_http_creds+0xfc>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 8024246:	220c      	movs	r2, #12
 8024248:	492e      	ldr	r1, [pc, #184]	@ (8024304 <mg_http_creds+0x11c>)
 802424a:	a842      	add	r0, sp, #264	@ 0x108
 802424c:	f7ff f8b0 	bl	80233b0 <mg_str_n>
 8024250:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8024252:	9300      	str	r3, [sp, #0]
 8024254:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8024256:	e895 0006 	ldmia.w	r5, {r1, r2}
 802425a:	a802      	add	r0, sp, #8
 802425c:	f7ff f8c8 	bl	80233f0 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 8024260:	9b03      	ldr	r3, [sp, #12]
 8024262:	2b00      	cmp	r3, #0
 8024264:	d136      	bne.n	80242d4 <mg_http_creds+0xec>
}
 8024266:	b044      	add	sp, #272	@ 0x110
 8024268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 802426c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8024270:	aa02      	add	r2, sp, #8
 8024272:	f1a9 0106 	sub.w	r1, r9, #6
 8024276:	f10a 0006 	add.w	r0, sl, #6
 802427a:	f7fd fba2 	bl	80219c2 <mg_base64_decode>
 802427e:	4606      	mov	r6, r0
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 8024280:	4602      	mov	r2, r0
 8024282:	213a      	movs	r1, #58	@ 0x3a
 8024284:	a802      	add	r0, sp, #8
 8024286:	f7eb ffbb 	bl	8010200 <memchr>
    if (p != NULL) {
 802428a:	4680      	mov	r8, r0
 802428c:	2800      	cmp	r0, #0
 802428e:	d0ea      	beq.n	8024266 <mg_http_creds+0x7e>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 8024290:	ab02      	add	r3, sp, #8
 8024292:	eba0 0a03 	sub.w	sl, r0, r3
 8024296:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8024308 <mg_http_creds+0x120>
 802429a:	9300      	str	r3, [sp, #0]
 802429c:	4653      	mov	r3, sl
 802429e:	464a      	mov	r2, r9
 80242a0:	4639      	mov	r1, r7
 80242a2:	4628      	mov	r0, r5
 80242a4:	f7fe f9ee 	bl	8022684 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 80242a8:	eba6 030a 	sub.w	r3, r6, sl
 80242ac:	f108 0201 	add.w	r2, r8, #1
 80242b0:	9200      	str	r2, [sp, #0]
 80242b2:	3b01      	subs	r3, #1
 80242b4:	464a      	mov	r2, r9
 80242b6:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80242b8:	4620      	mov	r0, r4
 80242ba:	f7fe f9e3 	bl	8022684 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 80242be:	e7d2      	b.n	8024266 <mg_http_creds+0x7e>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 80242c0:	3507      	adds	r5, #7
 80242c2:	9500      	str	r5, [sp, #0]
 80242c4:	f1a9 0307 	sub.w	r3, r9, #7
 80242c8:	4a0f      	ldr	r2, [pc, #60]	@ (8024308 <mg_http_creds+0x120>)
 80242ca:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80242cc:	4620      	mov	r0, r4
 80242ce:	f7fe f9d9 	bl	8022684 <mg_snprintf>
 80242d2:	e7c8      	b.n	8024266 <mg_http_creds+0x7e>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80242d4:	9a02      	ldr	r2, [sp, #8]
 80242d6:	9200      	str	r2, [sp, #0]
 80242d8:	4a0b      	ldr	r2, [pc, #44]	@ (8024308 <mg_http_creds+0x120>)
 80242da:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80242dc:	4620      	mov	r0, r4
 80242de:	f7fe f9d1 	bl	8022684 <mg_snprintf>
 80242e2:	e7c0      	b.n	8024266 <mg_http_creds+0x7e>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 80242e4:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 80242e6:	4622      	mov	r2, r4
 80242e8:	4906      	ldr	r1, [pc, #24]	@ (8024304 <mg_http_creds+0x11c>)
 80242ea:	f106 0010 	add.w	r0, r6, #16
 80242ee:	f7ff ff40 	bl	8024172 <mg_http_get_var>
}
 80242f2:	e7b8      	b.n	8024266 <mg_http_creds+0x7e>
 80242f4:	08039064 	.word	0x08039064
 80242f8:	08039074 	.word	0x08039074
 80242fc:	0803907c 	.word	0x0803907c
 8024300:	08039084 	.word	0x08039084
 8024304:	0803582c 	.word	0x0803582c
 8024308:	08038e94 	.word	0x08038e94

0802430c <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 802430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024310:	b0ae      	sub	sp, #184	@ 0xb8
 8024312:	4604      	mov	r4, r0
 8024314:	460d      	mov	r5, r1
 8024316:	4616      	mov	r6, r2
 8024318:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 802431a:	f8d2 8014 	ldr.w	r8, [r2, #20]
 802431e:	f1b8 0f00 	cmp.w	r8, #0
 8024322:	d04f      	beq.n	80243c4 <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 8024324:	942a      	str	r4, [sp, #168]	@ 0xa8
 8024326:	952b      	str	r5, [sp, #172]	@ 0xac
 8024328:	962c      	str	r6, [sp, #176]	@ 0xb0
 802432a:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 802432c:	2300      	movs	r3, #0
 802432e:	9300      	str	r3, [sp, #0]
 8024330:	2380      	movs	r3, #128	@ 0x80
 8024332:	aa07      	add	r2, sp, #28
 8024334:	68e9      	ldr	r1, [r5, #12]
 8024336:	68a8      	ldr	r0, [r5, #8]
 8024338:	f7ff febc 	bl	80240b4 <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 802433c:	1e02      	subs	r2, r0, #0
 802433e:	dd44      	ble.n	80243ca <listdir+0xbe>
 8024340:	a907      	add	r1, sp, #28
 8024342:	a805      	add	r0, sp, #20
 8024344:	f7ff f834 	bl	80233b0 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8024348:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 802434a:	2a00      	cmp	r2, #0
 802434c:	d044      	beq.n	80243d8 <listdir+0xcc>
 802434e:	4923      	ldr	r1, [pc, #140]	@ (80243dc <listdir+0xd0>)
 8024350:	4620      	mov	r0, r4
 8024352:	f7fe fe71 	bl	8023038 <mg_printf>
  off = c->send.len;  // Start of body
 8024356:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8024358:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 802435a:	9b05      	ldr	r3, [sp, #20]
 802435c:	9303      	str	r3, [sp, #12]
 802435e:	9202      	str	r2, [sp, #8]
 8024360:	491f      	ldr	r1, [pc, #124]	@ (80243e0 <listdir+0xd4>)
 8024362:	9101      	str	r1, [sp, #4]
 8024364:	491f      	ldr	r1, [pc, #124]	@ (80243e4 <listdir+0xd8>)
 8024366:	9100      	str	r1, [sp, #0]
 8024368:	491f      	ldr	r1, [pc, #124]	@ (80243e8 <listdir+0xdc>)
 802436a:	4620      	mov	r0, r4
 802436c:	f7fe fe64 	bl	8023038 <mg_printf>
  mg_printf(c, "%s",
 8024370:	4a1e      	ldr	r2, [pc, #120]	@ (80243ec <listdir+0xe0>)
 8024372:	491f      	ldr	r1, [pc, #124]	@ (80243f0 <listdir+0xe4>)
 8024374:	4620      	mov	r0, r4
 8024376:	f7fe fe5f 	bl	8023038 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 802437a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802437e:	aa2a      	add	r2, sp, #168	@ 0xa8
 8024380:	491c      	ldr	r1, [pc, #112]	@ (80243f4 <listdir+0xe8>)
 8024382:	4638      	mov	r0, r7
 8024384:	4798      	blx	r3
  mg_printf(c,
 8024386:	4a1c      	ldr	r2, [pc, #112]	@ (80243f8 <listdir+0xec>)
 8024388:	491c      	ldr	r1, [pc, #112]	@ (80243fc <listdir+0xf0>)
 802438a:	4620      	mov	r0, r4
 802438c:	f7fe fe54 	bl	8023038 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8024390:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024392:	1b5b      	subs	r3, r3, r5
 8024394:	4a1a      	ldr	r2, [pc, #104]	@ (8024400 <listdir+0xf4>)
 8024396:	210a      	movs	r1, #10
 8024398:	a827      	add	r0, sp, #156	@ 0x9c
 802439a:	f7fe f973 	bl	8022684 <mg_snprintf>
 802439e:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 80243a0:	280a      	cmp	r0, #10
 80243a2:	d900      	bls.n	80243a6 <listdir+0x9a>
 80243a4:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 80243a6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80243a8:	3d0c      	subs	r5, #12
 80243aa:	a927      	add	r1, sp, #156	@ 0x9c
 80243ac:	4428      	add	r0, r5
 80243ae:	f008 fd63 	bl	802ce78 <memcpy>
  c->is_resp = 0;                          // Mark response end
 80243b2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80243b6:	f36f 13c7 	bfc	r3, #7, #1
 80243ba:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80243be:	b02e      	add	sp, #184	@ 0xb8
 80243c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80243c4:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8024408 <listdir+0xfc>
 80243c8:	e7ac      	b.n	8024324 <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 80243ca:	ab05      	add	r3, sp, #20
 80243cc:	3508      	adds	r5, #8
 80243ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80243d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80243d6:	e7b7      	b.n	8024348 <listdir+0x3c>
  mg_printf(c,
 80243d8:	4a0a      	ldr	r2, [pc, #40]	@ (8024404 <listdir+0xf8>)
 80243da:	e7b8      	b.n	802434e <listdir+0x42>
 80243dc:	0803908c 	.word	0x0803908c
 80243e0:	0803926c 	.word	0x0803926c
 80243e4:	08039430 	.word	0x08039430
 80243e8:	080390e4 	.word	0x080390e4
 80243ec:	080395f8 	.word	0x080395f8
 80243f0:	08039a5c 	.word	0x08039a5c
 80243f4:	08025b3d 	.word	0x08025b3d
 80243f8:	08036fa4 	.word	0x08036fa4
 80243fc:	08039648 	.word	0x08039648
 8024400:	08039d0c 	.word	0x08039d0c
 8024404:	08035a68 	.word	0x08035a68
 8024408:	200000ac 	.word	0x200000ac

0802440c <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 802440c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024410:	b087      	sub	sp, #28
 8024412:	461f      	mov	r7, r3
  int i = 0, n = 0;
 8024414:	2300      	movs	r3, #0
 8024416:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 8024418:	2902      	cmp	r1, #2
 802441a:	dd42      	ble.n	80244a2 <skip_chunk+0x96>
 802441c:	4606      	mov	r6, r0
 802441e:	460d      	mov	r5, r1
 8024420:	4690      	mov	r8, r2
  int i = 0, n = 0;
 8024422:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 8024424:	42ac      	cmp	r4, r5
 8024426:	da05      	bge.n	8024434 <skip_chunk+0x28>
 8024428:	5d30      	ldrb	r0, [r6, r4]
 802442a:	f7fb f998 	bl	801f75e <is_hex_digit>
 802442e:	b108      	cbz	r0, 8024434 <skip_chunk+0x28>
 8024430:	3401      	adds	r4, #1
 8024432:	e7f7      	b.n	8024424 <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 8024434:	2c00      	cmp	r4, #0
 8024436:	d036      	beq.n	80244a6 <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8024438:	2c08      	cmp	r4, #8
 802443a:	dc37      	bgt.n	80244ac <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 802443c:	42ac      	cmp	r4, r5
 802443e:	da38      	bge.n	80244b2 <skip_chunk+0xa6>
 8024440:	4622      	mov	r2, r4
 8024442:	5d33      	ldrb	r3, [r6, r4]
 8024444:	2b0d      	cmp	r3, #13
 8024446:	d137      	bne.n	80244b8 <skip_chunk+0xac>
 8024448:	1933      	adds	r3, r6, r4
 802444a:	785b      	ldrb	r3, [r3, #1]
 802444c:	2b0a      	cmp	r3, #10
 802444e:	d136      	bne.n	80244be <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8024450:	f10d 0910 	add.w	r9, sp, #16
 8024454:	4631      	mov	r1, r6
 8024456:	4648      	mov	r0, r9
 8024458:	f7fe ffaa 	bl	80233b0 <mg_str_n>
 802445c:	2304      	movs	r3, #4
 802445e:	9300      	str	r3, [sp, #0]
 8024460:	ab03      	add	r3, sp, #12
 8024462:	2210      	movs	r2, #16
 8024464:	e899 0003 	ldmia.w	r9, {r0, r1}
 8024468:	f7ff fcdc 	bl	8023e24 <mg_str_to_num>
 802446c:	b350      	cbz	r0, 80244c4 <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 802446e:	9b03      	ldr	r3, [sp, #12]
 8024470:	2b00      	cmp	r3, #0
 8024472:	db2a      	blt.n	80244ca <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8024474:	1b2d      	subs	r5, r5, r4
 8024476:	3d03      	subs	r5, #3
 8024478:	42ab      	cmp	r3, r5
 802447a:	da29      	bge.n	80244d0 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 802447c:	4423      	add	r3, r4
 802447e:	18f2      	adds	r2, r6, r3
 8024480:	7892      	ldrb	r2, [r2, #2]
 8024482:	2a0d      	cmp	r2, #13
 8024484:	d126      	bne.n	80244d4 <skip_chunk+0xc8>
 8024486:	441e      	add	r6, r3
 8024488:	78f3      	ldrb	r3, [r6, #3]
 802448a:	2b0a      	cmp	r3, #10
 802448c:	d125      	bne.n	80244da <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 802448e:	3402      	adds	r4, #2
 8024490:	f8c8 4000 	str.w	r4, [r8]
 8024494:	9b03      	ldr	r3, [sp, #12]
 8024496:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 8024498:	441c      	add	r4, r3
 802449a:	1ca0      	adds	r0, r4, #2
}
 802449c:	b007      	add	sp, #28
 802449e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 80244a2:	2000      	movs	r0, #0
 80244a4:	e7fa      	b.n	802449c <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 80244a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80244aa:	e7f7      	b.n	802449c <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 80244ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80244b0:	e7f4      	b.n	802449c <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 80244b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80244b6:	e7f1      	b.n	802449c <skip_chunk+0x90>
 80244b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80244bc:	e7ee      	b.n	802449c <skip_chunk+0x90>
 80244be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80244c2:	e7eb      	b.n	802449c <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 80244c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80244c8:	e7e8      	b.n	802449c <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80244ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80244ce:	e7e5      	b.n	802449c <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80244d0:	2000      	movs	r0, #0
 80244d2:	e7e3      	b.n	802449c <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 80244d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80244d8:	e7e0      	b.n	802449c <skip_chunk+0x90>
 80244da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80244de:	e7dd      	b.n	802449c <skip_chunk+0x90>

080244e0 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 80244e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80244e4:	b086      	sub	sp, #24
 80244e6:	ac02      	add	r4, sp, #8
 80244e8:	e884 0003 	stmia.w	r4, {r0, r1}
 80244ec:	4617      	mov	r7, r2
 80244ee:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 80244f0:	2400      	movs	r4, #0
 80244f2:	4621      	mov	r1, r4
 80244f4:	e01c      	b.n	8024530 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 80244f6:	f101 0805 	add.w	r8, r1, #5
 80244fa:	45a8      	cmp	r8, r5
 80244fc:	d221      	bcs.n	8024542 <mg_json_unescape+0x62>
 80244fe:	185a      	adds	r2, r3, r1
 8024500:	7852      	ldrb	r2, [r2, #1]
 8024502:	2a75      	cmp	r2, #117	@ 0x75
 8024504:	d11d      	bne.n	8024542 <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8024506:	3102      	adds	r1, #2
 8024508:	ad04      	add	r5, sp, #16
 802450a:	2204      	movs	r2, #4
 802450c:	4419      	add	r1, r3
 802450e:	4628      	mov	r0, r5
 8024510:	f7fe ff4e 	bl	80233b0 <mg_str_n>
 8024514:	2301      	movs	r3, #1
 8024516:	9300      	str	r3, [sp, #0]
 8024518:	193b      	adds	r3, r7, r4
 802451a:	2210      	movs	r2, #16
 802451c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024520:	f7ff fc80 	bl	8023e24 <mg_str_to_num>
 8024524:	b308      	cbz	r0, 802456a <mg_json_unescape+0x8a>
      i += 5;
 8024526:	4641      	mov	r1, r8
 8024528:	e000      	b.n	802452c <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 802452a:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 802452c:	3101      	adds	r1, #1
 802452e:	3401      	adds	r4, #1
 8024530:	9d03      	ldr	r5, [sp, #12]
 8024532:	428d      	cmp	r5, r1
 8024534:	d914      	bls.n	8024560 <mg_json_unescape+0x80>
 8024536:	42b4      	cmp	r4, r6
 8024538:	d212      	bcs.n	8024560 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 802453a:	9b02      	ldr	r3, [sp, #8]
 802453c:	5c58      	ldrb	r0, [r3, r1]
 802453e:	285c      	cmp	r0, #92	@ 0x5c
 8024540:	d0d9      	beq.n	80244f6 <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8024542:	285c      	cmp	r0, #92	@ 0x5c
 8024544:	d1f1      	bne.n	802452a <mg_json_unescape+0x4a>
 8024546:	f101 0801 	add.w	r8, r1, #1
 802454a:	45a8      	cmp	r8, r5
 802454c:	d2ed      	bcs.n	802452a <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 802454e:	2100      	movs	r1, #0
 8024550:	f813 0008 	ldrb.w	r0, [r3, r8]
 8024554:	f7fb f928 	bl	801f7a8 <json_esc>
      if (c == 0) return false;
 8024558:	b150      	cbz	r0, 8024570 <mg_json_unescape+0x90>
      to[j] = c;
 802455a:	5538      	strb	r0, [r7, r4]
      i++;
 802455c:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 802455e:	e7e5      	b.n	802452c <mg_json_unescape+0x4c>
  if (j >= n) return false;
 8024560:	42b4      	cmp	r4, r6
 8024562:	d207      	bcs.n	8024574 <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 8024564:	2300      	movs	r3, #0
 8024566:	553b      	strb	r3, [r7, r4]
  return true;
 8024568:	2001      	movs	r0, #1
}
 802456a:	b006      	add	sp, #24
 802456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 8024570:	2000      	movs	r0, #0
 8024572:	e7fa      	b.n	802456a <mg_json_unescape+0x8a>
  if (j >= n) return false;
 8024574:	2000      	movs	r0, #0
 8024576:	e7f8      	b.n	802456a <mg_json_unescape+0x8a>

08024578 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 8024578:	b5f0      	push	{r4, r5, r6, r7, lr}
 802457a:	b087      	sub	sp, #28
 802457c:	46ec      	mov	ip, sp
 802457e:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 8024582:	2300      	movs	r3, #0
 8024584:	9303      	str	r3, [sp, #12]
 8024586:	ab03      	add	r3, sp, #12
 8024588:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802458c:	f7fd fbd4 	bl	8021d38 <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8024590:	1e04      	subs	r4, r0, #0
 8024592:	db25      	blt.n	80245e0 <mg_json_get_str+0x68>
 8024594:	9903      	ldr	r1, [sp, #12]
 8024596:	2901      	cmp	r1, #1
 8024598:	dd24      	ble.n	80245e4 <mg_json_get_str+0x6c>
 802459a:	9e00      	ldr	r6, [sp, #0]
 802459c:	5d33      	ldrb	r3, [r6, r4]
 802459e:	2b22      	cmp	r3, #34	@ 0x22
 80245a0:	d003      	beq.n	80245aa <mg_json_get_str+0x32>
  char *result = NULL;
 80245a2:	2500      	movs	r5, #0
}
 80245a4:	4628      	mov	r0, r5
 80245a6:	b007      	add	sp, #28
 80245a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 80245aa:	2001      	movs	r0, #1
 80245ac:	f7fd f9a4 	bl	80218f8 <mg_calloc>
 80245b0:	4605      	mov	r5, r0
 80245b2:	2800      	cmp	r0, #0
 80245b4:	d0f6      	beq.n	80245a4 <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 80245b6:	1c61      	adds	r1, r4, #1
 80245b8:	9f03      	ldr	r7, [sp, #12]
 80245ba:	ac04      	add	r4, sp, #16
 80245bc:	1eba      	subs	r2, r7, #2
 80245be:	4431      	add	r1, r6
 80245c0:	4620      	mov	r0, r4
 80245c2:	f7fe fef5 	bl	80233b0 <mg_str_n>
 80245c6:	463b      	mov	r3, r7
 80245c8:	462a      	mov	r2, r5
 80245ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80245ce:	f7ff ff87 	bl	80244e0 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 80245d2:	2800      	cmp	r0, #0
 80245d4:	d1e6      	bne.n	80245a4 <mg_json_get_str+0x2c>
      free(result);
 80245d6:	4628      	mov	r0, r5
 80245d8:	f7f5 fb08 	bl	8019bec <vPortFree>
      result = NULL;
 80245dc:	2500      	movs	r5, #0
 80245de:	e7e1      	b.n	80245a4 <mg_json_get_str+0x2c>
  char *result = NULL;
 80245e0:	2500      	movs	r5, #0
 80245e2:	e7df      	b.n	80245a4 <mg_json_get_str+0x2c>
 80245e4:	2500      	movs	r5, #0
 80245e6:	e7dd      	b.n	80245a4 <mg_json_get_str+0x2c>

080245e8 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 80245e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80245ec:	b08a      	sub	sp, #40	@ 0x28
 80245ee:	ab02      	add	r3, sp, #8
 80245f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80245f4:	4617      	mov	r7, r2
  addr->scope_id = 0;
 80245f6:	2300      	movs	r3, #0
 80245f8:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 80245fa:	2902      	cmp	r1, #2
 80245fc:	d904      	bls.n	8024608 <mg_aton6+0x20>
 80245fe:	460b      	mov	r3, r1
 8024600:	4602      	mov	r2, r0
 8024602:	7801      	ldrb	r1, [r0, #0]
 8024604:	295b      	cmp	r1, #91	@ 0x5b
 8024606:	d00f      	beq.n	8024628 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 8024608:	463a      	mov	r2, r7
 802460a:	ab02      	add	r3, sp, #8
 802460c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024610:	f7fe ff40 	bl	8023494 <mg_v4mapped>
 8024614:	4680      	mov	r8, r0
 8024616:	2800      	cmp	r0, #0
 8024618:	f040 8087 	bne.w	802472a <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 802461c:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 8024620:	2600      	movs	r6, #0
 8024622:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 8024624:	4634      	mov	r4, r6
 8024626:	e020      	b.n	802466a <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8024628:	3201      	adds	r2, #1
 802462a:	9202      	str	r2, [sp, #8]
 802462c:	3b02      	subs	r3, #2
 802462e:	9303      	str	r3, [sp, #12]
 8024630:	e7ea      	b.n	8024608 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 8024632:	2300      	movs	r3, #0
 8024634:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 8024636:	1ceb      	adds	r3, r5, #3
 8024638:	42a3      	cmp	r3, r4
 802463a:	d376      	bcc.n	802472a <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 802463c:	1b62      	subs	r2, r4, r5
 802463e:	f10d 0a18 	add.w	sl, sp, #24
 8024642:	3201      	adds	r2, #1
 8024644:	4429      	add	r1, r5
 8024646:	4650      	mov	r0, sl
 8024648:	f7fe feb2 	bl	80233b0 <mg_str_n>
 802464c:	2304      	movs	r3, #4
 802464e:	9300      	str	r3, [sp, #0]
 8024650:	ab05      	add	r3, sp, #20
 8024652:	2210      	movs	r2, #16
 8024654:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8024658:	f7ff fbe4 	bl	8023e24 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 802465c:	9b05      	ldr	r3, [sp, #20]
 802465e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8024662:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 8024664:	1c72      	adds	r2, r6, #1
 8024666:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 8024668:	3401      	adds	r4, #1
 802466a:	9803      	ldr	r0, [sp, #12]
 802466c:	42a0      	cmp	r0, r4
 802466e:	d941      	bls.n	80246f4 <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8024670:	9902      	ldr	r1, [sp, #8]
 8024672:	5d0a      	ldrb	r2, [r1, r4]
 8024674:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8024678:	b2db      	uxtb	r3, r3
 802467a:	2b09      	cmp	r3, #9
 802467c:	d9d9      	bls.n	8024632 <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 802467e:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 8024682:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8024684:	2b05      	cmp	r3, #5
 8024686:	d9d4      	bls.n	8024632 <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8024688:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 802468c:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 802468e:	2b05      	cmp	r3, #5
 8024690:	d9cf      	bls.n	8024632 <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 8024692:	2a3a      	cmp	r2, #58	@ 0x3a
 8024694:	d119      	bne.n	80246ca <mg_aton6+0xe2>
      j = i + 1;
 8024696:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 8024698:	b12c      	cbz	r4, 80246a6 <mg_aton6+0xbe>
 802469a:	190b      	adds	r3, r1, r4
 802469c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80246a0:	2b3a      	cmp	r3, #58	@ 0x3a
 80246a2:	d007      	beq.n	80246b4 <mg_aton6+0xcc>
        n += 2;
 80246a4:	3602      	adds	r6, #2
      if (n > 14) return false;
 80246a6:	2e0e      	cmp	r6, #14
 80246a8:	d83f      	bhi.n	802472a <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 80246aa:	1c73      	adds	r3, r6, #1
 80246ac:	2200      	movs	r2, #0
 80246ae:	54fa      	strb	r2, [r7, r3]
 80246b0:	55ba      	strb	r2, [r7, r6]
 80246b2:	e7d9      	b.n	8024668 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 80246b4:	2c01      	cmp	r4, #1
 80246b6:	d906      	bls.n	80246c6 <mg_aton6+0xde>
 80246b8:	4421      	add	r1, r4
 80246ba:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80246be:	2b3a      	cmp	r3, #58	@ 0x3a
 80246c0:	d033      	beq.n	802472a <mg_aton6+0x142>
        dc = n;  // Double colon
 80246c2:	46b1      	mov	r9, r6
 80246c4:	e7ef      	b.n	80246a6 <mg_aton6+0xbe>
 80246c6:	46b1      	mov	r9, r6
 80246c8:	e7ed      	b.n	80246a6 <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 80246ca:	2a25      	cmp	r2, #37	@ 0x25
 80246cc:	d12d      	bne.n	802472a <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 80246ce:	1c63      	adds	r3, r4, #1
 80246d0:	1b02      	subs	r2, r0, r4
 80246d2:	ac08      	add	r4, sp, #32
 80246d4:	3a01      	subs	r2, #1
 80246d6:	4419      	add	r1, r3
 80246d8:	4620      	mov	r0, r4
 80246da:	f7fe fe69 	bl	80233b0 <mg_str_n>
 80246de:	2301      	movs	r3, #1
 80246e0:	9300      	str	r3, [sp, #0]
 80246e2:	f107 0312 	add.w	r3, r7, #18
 80246e6:	220a      	movs	r2, #10
 80246e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80246ec:	f7ff fb9a 	bl	8023e24 <mg_str_to_num>
 80246f0:	4680      	mov	r8, r0
 80246f2:	e01a      	b.n	802472a <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 80246f4:	2e0d      	cmp	r6, #13
 80246f6:	d814      	bhi.n	8024722 <mg_aton6+0x13a>
 80246f8:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 80246fc:	d015      	beq.n	802472a <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 80246fe:	eba9 0006 	sub.w	r0, r9, r6
 8024702:	300e      	adds	r0, #14
 8024704:	eb07 0409 	add.w	r4, r7, r9
 8024708:	eba6 0209 	sub.w	r2, r6, r9
 802470c:	3202      	adds	r2, #2
 802470e:	4621      	mov	r1, r4
 8024710:	4438      	add	r0, r7
 8024712:	f007 f95b 	bl	802b9cc <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 8024716:	f1c6 020e 	rsb	r2, r6, #14
 802471a:	2100      	movs	r1, #0
 802471c:	4620      	mov	r0, r4
 802471e:	f007 f96f 	bl	802ba00 <memset>
  addr->is_ip6 = true;
 8024722:	f04f 0801 	mov.w	r8, #1
 8024726:	f887 8013 	strb.w	r8, [r7, #19]
}
 802472a:	4640      	mov	r0, r8
 802472c:	b00a      	add	sp, #40	@ 0x28
 802472e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08024732 <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 8024732:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8024734:	2400      	movs	r4, #0
 8024736:	600c      	str	r4, [r1, #0]
 8024738:	e9c1 2302 	strd	r2, r3, [r1, #8]
 802473c:	2200      	movs	r2, #0
 802473e:	2300      	movs	r3, #0
 8024740:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8024744:	9b01      	ldr	r3, [sp, #4]
 8024746:	618b      	str	r3, [r1, #24]
 8024748:	9b02      	ldr	r3, [sp, #8]
 802474a:	61cb      	str	r3, [r1, #28]
 802474c:	9b03      	ldr	r3, [sp, #12]
 802474e:	620b      	str	r3, [r1, #32]
 8024750:	6803      	ldr	r3, [r0, #0]
 8024752:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 8024754:	6001      	str	r1, [r0, #0]
}
 8024756:	f85d 4b04 	ldr.w	r4, [sp], #4
 802475a:	4770      	bx	lr

0802475c <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 802475c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802475e:	b085      	sub	sp, #20
 8024760:	4604      	mov	r4, r0
 8024762:	4616      	mov	r6, r2
 8024764:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8024766:	2128      	movs	r1, #40	@ 0x28
 8024768:	2001      	movs	r0, #1
 802476a:	f7fd f8c5 	bl	80218f8 <mg_calloc>
  if (t != NULL) {
 802476e:	4607      	mov	r7, r0
 8024770:	b180      	cbz	r0, 8024794 <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8024772:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024774:	9302      	str	r3, [sp, #8]
 8024776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024778:	9301      	str	r3, [sp, #4]
 802477a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802477c:	9300      	str	r3, [sp, #0]
 802477e:	4632      	mov	r2, r6
 8024780:	462b      	mov	r3, r5
 8024782:	4601      	mov	r1, r0
 8024784:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8024788:	f7ff ffd3 	bl	8024732 <mg_timer_init>
    t->id = mgr->timerid++;
 802478c:	6a23      	ldr	r3, [r4, #32]
 802478e:	1c5a      	adds	r2, r3, #1
 8024790:	6222      	str	r2, [r4, #32]
 8024792:	603b      	str	r3, [r7, #0]
}
 8024794:	4638      	mov	r0, r7
 8024796:	b005      	add	sp, #20
 8024798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802479a:	0000      	movs	r0, r0
 802479c:	0000      	movs	r0, r0
	...

080247a0 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 80247a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80247a4:	4698      	mov	r8, r3
 80247a6:	9906      	ldr	r1, [sp, #24]
 80247a8:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 80247aa:	188e      	adds	r6, r1, r2
 80247ac:	eb43 0504 	adc.w	r5, r3, r4
 80247b0:	6847      	ldr	r7, [r0, #4]
 80247b2:	6803      	ldr	r3, [r0, #0]
 80247b4:	429e      	cmp	r6, r3
 80247b6:	eb75 0707 	sbcs.w	r7, r5, r7
 80247ba:	d203      	bcs.n	80247c4 <mg_timer_expired+0x24>
 80247bc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8024800 <mg_timer_expired+0x60>
 80247c0:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 80247c4:	6847      	ldr	r7, [r0, #4]
 80247c6:	6803      	ldr	r3, [r0, #0]
 80247c8:	431f      	orrs	r7, r3
 80247ca:	d101      	bne.n	80247d0 <mg_timer_expired+0x30>
 80247cc:	6006      	str	r6, [r0, #0]
 80247ce:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 80247d0:	6807      	ldr	r7, [r0, #0]
 80247d2:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80247d6:	42b9      	cmp	r1, r7
 80247d8:	eb74 0e0c 	sbcs.w	lr, r4, ip
 80247dc:	d30e      	bcc.n	80247fc <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80247de:	1bc9      	subs	r1, r1, r7
 80247e0:	eb64 040c 	sbc.w	r4, r4, ip
 80247e4:	428a      	cmp	r2, r1
 80247e6:	eb78 0404 	sbcs.w	r4, r8, r4
 80247ea:	d302      	bcc.n	80247f2 <mg_timer_expired+0x52>
 80247ec:	18be      	adds	r6, r7, r2
 80247ee:	eb4c 0508 	adc.w	r5, ip, r8
 80247f2:	6006      	str	r6, [r0, #0]
 80247f4:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 80247f6:	2001      	movs	r0, #1
}
 80247f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 80247fc:	2000      	movs	r0, #0
 80247fe:	e7fb      	b.n	80247f8 <mg_timer_expired+0x58>
	...

08024808 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8024808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802480c:	b082      	sub	sp, #8
 802480e:	4617      	mov	r7, r2
 8024810:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 8024812:	6804      	ldr	r4, [r0, #0]
 8024814:	e019      	b.n	802484a <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8024816:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8024818:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 802481c:	9700      	str	r7, [sp, #0]
 802481e:	9601      	str	r6, [sp, #4]
 8024820:	f104 0010 	add.w	r0, r4, #16
 8024824:	f7ff ffbc 	bl	80247a0 <mg_timer_expired>
    tmp = t->next;
 8024828:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 802482c:	b905      	cbnz	r5, 8024830 <mg_timer_poll+0x28>
 802482e:	b158      	cbz	r0, 8024848 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8024830:	69a3      	ldr	r3, [r4, #24]
 8024832:	f003 0305 	and.w	r3, r3, #5
 8024836:	2b04      	cmp	r3, #4
 8024838:	d002      	beq.n	8024840 <mg_timer_poll+0x38>
      t->fn(t->arg);
 802483a:	69e3      	ldr	r3, [r4, #28]
 802483c:	6a20      	ldr	r0, [r4, #32]
 802483e:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 8024840:	69a1      	ldr	r1, [r4, #24]
 8024842:	f041 0104 	orr.w	r1, r1, #4
 8024846:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8024848:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 802484a:	b164      	cbz	r4, 8024866 <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 802484c:	6923      	ldr	r3, [r4, #16]
 802484e:	6962      	ldr	r2, [r4, #20]
 8024850:	4313      	orrs	r3, r2
 8024852:	d1e0      	bne.n	8024816 <mg_timer_poll+0xe>
 8024854:	69a3      	ldr	r3, [r4, #24]
 8024856:	f003 0306 	and.w	r3, r3, #6
 802485a:	2b02      	cmp	r3, #2
 802485c:	d001      	beq.n	8024862 <mg_timer_poll+0x5a>
 802485e:	2500      	movs	r5, #0
 8024860:	e7da      	b.n	8024818 <mg_timer_poll+0x10>
 8024862:	2501      	movs	r5, #1
 8024864:	e7d8      	b.n	8024818 <mg_timer_poll+0x10>
}
 8024866:	b002      	add	sp, #8
 8024868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802486c <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 802486c:	b118      	cbz	r0, 8024876 <mg_tls_recv+0xa>
 802486e:	b121      	cbz	r1, 802487a <mg_tls_recv+0xe>
 8024870:	b92a      	cbnz	r2, 802487e <mg_tls_recv+0x12>
 8024872:	2000      	movs	r0, #0
 8024874:	4770      	bx	lr
 8024876:	2000      	movs	r0, #0
 8024878:	4770      	bx	lr
 802487a:	2000      	movs	r0, #0
 802487c:	4770      	bx	lr
 802487e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8024882:	4770      	bx	lr

08024884 <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8024884:	b118      	cbz	r0, 802488e <mg_tls_send+0xa>
 8024886:	b121      	cbz	r1, 8024892 <mg_tls_send+0xe>
 8024888:	b92a      	cbnz	r2, 8024896 <mg_tls_send+0x12>
 802488a:	2000      	movs	r0, #0
 802488c:	4770      	bx	lr
 802488e:	2000      	movs	r0, #0
 8024890:	4770      	bx	lr
 8024892:	2000      	movs	r0, #0
 8024894:	4770      	bx	lr
 8024896:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 802489a:	4770      	bx	lr

0802489c <mg_tls_pending>:
}
 802489c:	2000      	movs	r0, #0
 802489e:	4770      	bx	lr

080248a0 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 80248a0:	b510      	push	{r4, lr}
 80248a2:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80248a4:	2204      	movs	r2, #4
 80248a6:	4918      	ldr	r1, [pc, #96]	@ (8024908 <mg_url_is_ssl+0x68>)
 80248a8:	f007 f8df 	bl	802ba6a <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80248ac:	b1f8      	cbz	r0, 80248ee <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80248ae:	2206      	movs	r2, #6
 80248b0:	4916      	ldr	r1, [pc, #88]	@ (802490c <mg_url_is_ssl+0x6c>)
 80248b2:	4620      	mov	r0, r4
 80248b4:	f007 f8d9 	bl	802ba6a <strncmp>
 80248b8:	b1d8      	cbz	r0, 80248f2 <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80248ba:	2206      	movs	r2, #6
 80248bc:	4914      	ldr	r1, [pc, #80]	@ (8024910 <mg_url_is_ssl+0x70>)
 80248be:	4620      	mov	r0, r4
 80248c0:	f007 f8d3 	bl	802ba6a <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80248c4:	b1b8      	cbz	r0, 80248f6 <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80248c6:	2204      	movs	r2, #4
 80248c8:	4912      	ldr	r1, [pc, #72]	@ (8024914 <mg_url_is_ssl+0x74>)
 80248ca:	4620      	mov	r0, r4
 80248cc:	f007 f8cd 	bl	802ba6a <strncmp>
 80248d0:	b198      	cbz	r0, 80248fa <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80248d2:	2204      	movs	r2, #4
 80248d4:	4910      	ldr	r1, [pc, #64]	@ (8024918 <mg_url_is_ssl+0x78>)
 80248d6:	4620      	mov	r0, r4
 80248d8:	f007 f8c7 	bl	802ba6a <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80248dc:	b178      	cbz	r0, 80248fe <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80248de:	2205      	movs	r2, #5
 80248e0:	490e      	ldr	r1, [pc, #56]	@ (802491c <mg_url_is_ssl+0x7c>)
 80248e2:	4620      	mov	r0, r4
 80248e4:	f007 f8c1 	bl	802ba6a <strncmp>
 80248e8:	b958      	cbnz	r0, 8024902 <mg_url_is_ssl+0x62>
 80248ea:	2001      	movs	r0, #1
 80248ec:	e000      	b.n	80248f0 <mg_url_is_ssl+0x50>
 80248ee:	2001      	movs	r0, #1
}
 80248f0:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80248f2:	2001      	movs	r0, #1
 80248f4:	e7fc      	b.n	80248f0 <mg_url_is_ssl+0x50>
 80248f6:	2001      	movs	r0, #1
 80248f8:	e7fa      	b.n	80248f0 <mg_url_is_ssl+0x50>
 80248fa:	2001      	movs	r0, #1
 80248fc:	e7f8      	b.n	80248f0 <mg_url_is_ssl+0x50>
 80248fe:	2001      	movs	r0, #1
 8024900:	e7f6      	b.n	80248f0 <mg_url_is_ssl+0x50>
 8024902:	2000      	movs	r0, #0
 8024904:	e7f4      	b.n	80248f0 <mg_url_is_ssl+0x50>
 8024906:	bf00      	nop
 8024908:	080396bc 	.word	0x080396bc
 802490c:	080396c4 	.word	0x080396c4
 8024910:	080396cc 	.word	0x080396cc
 8024914:	080396d4 	.word	0x080396d4
 8024918:	080396dc 	.word	0x080396dc
 802491c:	080396e4 	.word	0x080396e4

08024920 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 8024920:	b530      	push	{r4, r5, lr}
 8024922:	b089      	sub	sp, #36	@ 0x24
 8024924:	4604      	mov	r4, r0
 8024926:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 8024928:	a801      	add	r0, sp, #4
 802492a:	f7fb ff52 	bl	80207d2 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 802492e:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 8024930:	b152      	cbz	r2, 8024948 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 8024932:	9b04      	ldr	r3, [sp, #16]
 8024934:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 8024936:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 8024938:	9904      	ldr	r1, [sp, #16]
 802493a:	4429      	add	r1, r5
 802493c:	4620      	mov	r0, r4
 802493e:	f7fe fd37 	bl	80233b0 <mg_str_n>
}
 8024942:	4620      	mov	r0, r4
 8024944:	b009      	add	sp, #36	@ 0x24
 8024946:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 8024948:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 802494a:	b112      	cbz	r2, 8024952 <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 802494c:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 802494e:	1ad2      	subs	r2, r2, r3
 8024950:	e7f2      	b.n	8024938 <mg_url_host+0x18>
 8024952:	9a07      	ldr	r2, [sp, #28]
 8024954:	9b04      	ldr	r3, [sp, #16]
 8024956:	1ad2      	subs	r2, r2, r3
 8024958:	e7ee      	b.n	8024938 <mg_url_host+0x18>
	...

0802495c <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 802495c:	b530      	push	{r4, r5, lr}
 802495e:	b089      	sub	sp, #36	@ 0x24
 8024960:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 8024962:	4601      	mov	r1, r0
 8024964:	a801      	add	r0, sp, #4
 8024966:	f7fb ff34 	bl	80207d2 <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 802496a:	2205      	movs	r2, #5
 802496c:	491d      	ldr	r1, [pc, #116]	@ (80249e4 <mg_url_port+0x88>)
 802496e:	4620      	mov	r0, r4
 8024970:	f007 f87b 	bl	802ba6a <strncmp>
 8024974:	b138      	cbz	r0, 8024986 <mg_url_port+0x2a>
 8024976:	2203      	movs	r2, #3
 8024978:	491b      	ldr	r1, [pc, #108]	@ (80249e8 <mg_url_port+0x8c>)
 802497a:	4620      	mov	r0, r4
 802497c:	f007 f875 	bl	802ba6a <strncmp>
 8024980:	b188      	cbz	r0, 80249a6 <mg_url_port+0x4a>
  unsigned short port = 0;
 8024982:	2500      	movs	r5, #0
 8024984:	e000      	b.n	8024988 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8024986:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8024988:	2204      	movs	r2, #4
 802498a:	4918      	ldr	r1, [pc, #96]	@ (80249ec <mg_url_port+0x90>)
 802498c:	4620      	mov	r0, r4
 802498e:	f007 f86c 	bl	802ba6a <strncmp>
 8024992:	b150      	cbz	r0, 80249aa <mg_url_port+0x4e>
 8024994:	2206      	movs	r2, #6
 8024996:	4916      	ldr	r1, [pc, #88]	@ (80249f0 <mg_url_port+0x94>)
 8024998:	4620      	mov	r0, r4
 802499a:	f007 f866 	bl	802ba6a <strncmp>
 802499e:	b930      	cbnz	r0, 80249ae <mg_url_port+0x52>
    port = 443;
 80249a0:	f240 15bb 	movw	r5, #443	@ 0x1bb
 80249a4:	e003      	b.n	80249ae <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80249a6:	2550      	movs	r5, #80	@ 0x50
 80249a8:	e7ee      	b.n	8024988 <mg_url_port+0x2c>
    port = 443;
 80249aa:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 80249ae:	2205      	movs	r2, #5
 80249b0:	4910      	ldr	r1, [pc, #64]	@ (80249f4 <mg_url_port+0x98>)
 80249b2:	4620      	mov	r0, r4
 80249b4:	f007 f859 	bl	802ba6a <strncmp>
 80249b8:	b908      	cbnz	r0, 80249be <mg_url_port+0x62>
 80249ba:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 80249be:	2206      	movs	r2, #6
 80249c0:	490d      	ldr	r1, [pc, #52]	@ (80249f8 <mg_url_port+0x9c>)
 80249c2:	4620      	mov	r0, r4
 80249c4:	f007 f851 	bl	802ba6a <strncmp>
 80249c8:	b908      	cbnz	r0, 80249ce <mg_url_port+0x72>
 80249ca:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 80249ce:	9805      	ldr	r0, [sp, #20]
 80249d0:	b910      	cbnz	r0, 80249d8 <mg_url_port+0x7c>
}
 80249d2:	4628      	mov	r0, r5
 80249d4:	b009      	add	sp, #36	@ 0x24
 80249d6:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 80249d8:	4420      	add	r0, r4
 80249da:	f004 fadd 	bl	8028f98 <atoi>
 80249de:	b285      	uxth	r5, r0
 80249e0:	e7f7      	b.n	80249d2 <mg_url_port+0x76>
 80249e2:	bf00      	nop
 80249e4:	080396ec 	.word	0x080396ec
 80249e8:	080396f4 	.word	0x080396f4
 80249ec:	080396bc 	.word	0x080396bc
 80249f0:	080396c4 	.word	0x080396c4
 80249f4:	080396f8 	.word	0x080396f8
 80249f8:	080396cc 	.word	0x080396cc

080249fc <mg_bzero>:
  if (buf != NULL) {
 80249fc:	4603      	mov	r3, r0
 80249fe:	b920      	cbnz	r0, 8024a0a <mg_bzero+0xe>
 8024a00:	4770      	bx	lr
    while (len--) *buf++ = 0;
 8024a02:	2100      	movs	r1, #0
 8024a04:	f803 1b01 	strb.w	r1, [r3], #1
 8024a08:	4611      	mov	r1, r2
 8024a0a:	1e4a      	subs	r2, r1, #1
 8024a0c:	2900      	cmp	r1, #0
 8024a0e:	d1f8      	bne.n	8024a02 <mg_bzero+0x6>
}
 8024a10:	4770      	bx	lr

08024a12 <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8024a12:	b538      	push	{r3, r4, r5, lr}
 8024a14:	4605      	mov	r5, r0
 8024a16:	4608      	mov	r0, r1
 8024a18:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 8024a1a:	68aa      	ldr	r2, [r5, #8]
 8024a1c:	428a      	cmp	r2, r1
 8024a1e:	d200      	bcs.n	8024a22 <mg_iobuf_del+0x10>
 8024a20:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 8024a22:	1903      	adds	r3, r0, r4
 8024a24:	429a      	cmp	r2, r3
 8024a26:	d200      	bcs.n	8024a2a <mg_iobuf_del+0x18>
 8024a28:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8024a2a:	682b      	ldr	r3, [r5, #0]
 8024a2c:	b133      	cbz	r3, 8024a3c <mg_iobuf_del+0x2a>
 8024a2e:	1901      	adds	r1, r0, r4
 8024a30:	1a12      	subs	r2, r2, r0
 8024a32:	1b12      	subs	r2, r2, r4
 8024a34:	4419      	add	r1, r3
 8024a36:	4418      	add	r0, r3
 8024a38:	f006 ffc8 	bl	802b9cc <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8024a3c:	682b      	ldr	r3, [r5, #0]
 8024a3e:	b12b      	cbz	r3, 8024a4c <mg_iobuf_del+0x3a>
 8024a40:	68a8      	ldr	r0, [r5, #8]
 8024a42:	1b00      	subs	r0, r0, r4
 8024a44:	4621      	mov	r1, r4
 8024a46:	4418      	add	r0, r3
 8024a48:	f7ff ffd8 	bl	80249fc <mg_bzero>
  io->len -= len;
 8024a4c:	68ab      	ldr	r3, [r5, #8]
 8024a4e:	1b1b      	subs	r3, r3, r4
 8024a50:	60ab      	str	r3, [r5, #8]
}
 8024a52:	4620      	mov	r0, r4
 8024a54:	bd38      	pop	{r3, r4, r5, pc}

08024a56 <mg_random>:
void mg_random(void *buf, size_t len) {
 8024a56:	b538      	push	{r3, r4, r5, lr}
 8024a58:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 8024a5a:	e006      	b.n	8024a6a <mg_random+0x14>
 8024a5c:	f006 fa8a 	bl	802af74 <rand>
 8024a60:	4623      	mov	r3, r4
 8024a62:	f803 0b01 	strb.w	r0, [r3], #1
 8024a66:	461c      	mov	r4, r3
 8024a68:	4629      	mov	r1, r5
 8024a6a:	1e4d      	subs	r5, r1, #1
 8024a6c:	2900      	cmp	r1, #0
 8024a6e:	d1f5      	bne.n	8024a5c <mg_random+0x6>
}
 8024a70:	bd38      	pop	{r3, r4, r5, pc}
	...

08024a74 <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 8024a74:	b570      	push	{r4, r5, r6, lr}
 8024a76:	4604      	mov	r4, r0
 8024a78:	460d      	mov	r5, r1
  mg_random(buf, len);
 8024a7a:	f7ff ffec 	bl	8024a56 <mg_random>
  for (i = 0; i < len; i++) {
 8024a7e:	2100      	movs	r1, #0
 8024a80:	e00a      	b.n	8024a98 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8024a82:	2b33      	cmp	r3, #51	@ 0x33
 8024a84:	d802      	bhi.n	8024a8c <mg_random_str+0x18>
 8024a86:	3327      	adds	r3, #39	@ 0x27
 8024a88:	b2db      	uxtb	r3, r3
 8024a8a:	e003      	b.n	8024a94 <mg_random_str+0x20>
 8024a8c:	3b04      	subs	r3, #4
 8024a8e:	b2db      	uxtb	r3, r3
 8024a90:	e000      	b.n	8024a94 <mg_random_str+0x20>
 8024a92:	2300      	movs	r3, #0
 8024a94:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 8024a96:	3101      	adds	r1, #1
 8024a98:	42a9      	cmp	r1, r5
 8024a9a:	d213      	bcs.n	8024ac4 <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8024a9c:	1860      	adds	r0, r4, r1
 8024a9e:	5c63      	ldrb	r3, [r4, r1]
 8024aa0:	085a      	lsrs	r2, r3, #1
 8024aa2:	4e09      	ldr	r6, [pc, #36]	@ (8024ac8 <mg_random_str+0x54>)
 8024aa4:	fba6 6202 	umull	r6, r2, r6, r2
 8024aa8:	0912      	lsrs	r2, r2, #4
 8024aaa:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8024aae:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8024ab2:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8024ab4:	1e6a      	subs	r2, r5, #1
 8024ab6:	428a      	cmp	r2, r1
 8024ab8:	d0eb      	beq.n	8024a92 <mg_random_str+0x1e>
 8024aba:	2b19      	cmp	r3, #25
 8024abc:	d8e1      	bhi.n	8024a82 <mg_random_str+0xe>
 8024abe:	3361      	adds	r3, #97	@ 0x61
 8024ac0:	b2db      	uxtb	r3, r3
 8024ac2:	e7e7      	b.n	8024a94 <mg_random_str+0x20>
}
 8024ac4:	4620      	mov	r0, r4
 8024ac6:	bd70      	pop	{r4, r5, r6, pc}
 8024ac8:	84210843 	.word	0x84210843

08024acc <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 8024acc:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 8024ace:	2300      	movs	r3, #0
 8024ad0:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8024ad2:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8024ad4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8024ad8:	021b      	lsls	r3, r3, #8
 8024ada:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8024ade:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8024ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 8024ae6:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8024aea:	b002      	add	sp, #8
 8024aec:	4770      	bx	lr
	...

08024af0 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8024af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024af2:	b085      	sub	sp, #20
 8024af4:	466c      	mov	r4, sp
 8024af6:	e884 0003 	stmia.w	r4, {r0, r1}
 8024afa:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 8024afc:	480b      	ldr	r0, [pc, #44]	@ (8024b2c <mg_atonl+0x3c>)
 8024afe:	f7ff ffe5 	bl	8024acc <mg_ntohl>
 8024b02:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8024b04:	ae02      	add	r6, sp, #8
 8024b06:	490a      	ldr	r1, [pc, #40]	@ (8024b30 <mg_atonl+0x40>)
 8024b08:	4630      	mov	r0, r6
 8024b0a:	f7fe fc45 	bl	8023398 <mg_str_s>
 8024b0e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8024b12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024b16:	f7fe fd3a 	bl	802358e <mg_strcasecmp>
 8024b1a:	b928      	cbnz	r0, 8024b28 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 8024b1c:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 8024b1e:	2300      	movs	r3, #0
 8024b20:	74eb      	strb	r3, [r5, #19]
  return true;
 8024b22:	2001      	movs	r0, #1
}
 8024b24:	b005      	add	sp, #20
 8024b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8024b28:	2000      	movs	r0, #0
 8024b2a:	e7fb      	b.n	8024b24 <mg_atonl+0x34>
 8024b2c:	7f000001 	.word	0x7f000001
 8024b30:	08039700 	.word	0x08039700

08024b34 <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 8024b34:	b510      	push	{r4, lr}
 8024b36:	b082      	sub	sp, #8
 8024b38:	466b      	mov	r3, sp
 8024b3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8024b3e:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8024b40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024b44:	f7fb fe36 	bl	80207b4 <mg_atone>
 8024b48:	b110      	cbz	r0, 8024b50 <mg_aton+0x1c>
 8024b4a:	2001      	movs	r0, #1
}
 8024b4c:	b002      	add	sp, #8
 8024b4e:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8024b50:	4622      	mov	r2, r4
 8024b52:	ab02      	add	r3, sp, #8
 8024b54:	e913 0003 	ldmdb	r3, {r0, r1}
 8024b58:	f7ff ffca 	bl	8024af0 <mg_atonl>
 8024b5c:	b108      	cbz	r0, 8024b62 <mg_aton+0x2e>
 8024b5e:	2001      	movs	r0, #1
 8024b60:	e7f4      	b.n	8024b4c <mg_aton+0x18>
 8024b62:	4622      	mov	r2, r4
 8024b64:	ab02      	add	r3, sp, #8
 8024b66:	e913 0003 	ldmdb	r3, {r0, r1}
 8024b6a:	f7fb fba3 	bl	80202b4 <mg_aton4>
 8024b6e:	b108      	cbz	r0, 8024b74 <mg_aton+0x40>
 8024b70:	2001      	movs	r0, #1
 8024b72:	e7eb      	b.n	8024b4c <mg_aton+0x18>
         mg_aton6(str, addr);
 8024b74:	4622      	mov	r2, r4
 8024b76:	ab02      	add	r3, sp, #8
 8024b78:	e913 0003 	ldmdb	r3, {r0, r1}
 8024b7c:	f7ff fd34 	bl	80245e8 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8024b80:	2800      	cmp	r0, #0
 8024b82:	d0e3      	beq.n	8024b4c <mg_aton+0x18>
 8024b84:	2001      	movs	r0, #1
 8024b86:	e7e1      	b.n	8024b4c <mg_aton+0x18>

08024b88 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8024b88:	b570      	push	{r4, r5, r6, lr}
 8024b8a:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8024b8c:	6800      	ldr	r0, [r0, #0]
 8024b8e:	f7ff ff9d 	bl	8024acc <mg_ntohl>
 8024b92:	4606      	mov	r6, r0
 8024b94:	6860      	ldr	r0, [r4, #4]
 8024b96:	f7ff ff99 	bl	8024acc <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 8024b9a:	b12e      	cbz	r6, 8024ba8 <gettimestamp+0x20>
 8024b9c:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 8024ba0:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 8024ba4:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8024ba8:	0ef5      	lsrs	r5, r6, #27
 8024baa:	0174      	lsls	r4, r6, #5
 8024bac:	1ba4      	subs	r4, r4, r6
 8024bae:	f165 0500 	sbc.w	r5, r5, #0
 8024bb2:	00ad      	lsls	r5, r5, #2
 8024bb4:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 8024bb8:	00a4      	lsls	r4, r4, #2
 8024bba:	19a4      	adds	r4, r4, r6
 8024bbc:	f145 0500 	adc.w	r5, r5, #0
 8024bc0:	00ed      	lsls	r5, r5, #3
 8024bc2:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 8024bc6:	00e4      	lsls	r4, r4, #3
 8024bc8:	f7eb fcb4 	bl	8010534 <__aeabi_ui2d>
 8024bcc:	a309      	add	r3, pc, #36	@ (adr r3, 8024bf4 <gettimestamp+0x6c>)
 8024bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bd2:	f7eb fe53 	bl	801087c <__aeabi_ddiv>
 8024bd6:	2200      	movs	r2, #0
 8024bd8:	4b05      	ldr	r3, [pc, #20]	@ (8024bf0 <gettimestamp+0x68>)
 8024bda:	f7eb fd25 	bl	8010628 <__aeabi_dmul>
 8024bde:	f7ec f8e7 	bl	8010db0 <__aeabi_d2lz>
 8024be2:	1820      	adds	r0, r4, r0
}
 8024be4:	eb45 0101 	adc.w	r1, r5, r1
 8024be8:	bd70      	pop	{r4, r5, r6, pc}
 8024bea:	bf00      	nop
 8024bec:	f3af 8000 	nop.w
 8024bf0:	408f4000 	.word	0x408f4000
 8024bf4:	ffe00000 	.word	0xffe00000
 8024bf8:	41efffff 	.word	0x41efffff

08024bfc <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 8024bfc:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 8024bfe:	2300      	movs	r3, #0
 8024c00:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8024c04:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8024c08:	b2c3      	uxtb	r3, r0
 8024c0a:	021b      	lsls	r3, r3, #8
}
 8024c0c:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8024c10:	b002      	add	sp, #8
 8024c12:	4770      	bx	lr

08024c14 <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 8024c14:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8024c16:	e001      	b.n	8024c1c <csumfin+0x8>
 8024c18:	fa13 f080 	uxtah	r0, r3, r0
 8024c1c:	0c03      	lsrs	r3, r0, #16
 8024c1e:	d1fb      	bne.n	8024c18 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8024c20:	43c0      	mvns	r0, r0
 8024c22:	b280      	uxth	r0, r0
 8024c24:	f7ff ffea 	bl	8024bfc <mg_ntohs>
}
 8024c28:	bd08      	pop	{r3, pc}

08024c2a <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 8024c2a:	b508      	push	{r3, lr}
 8024c2c:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 8024c2e:	4601      	mov	r1, r0
 8024c30:	2000      	movs	r0, #0
 8024c32:	f7fb fb97 	bl	8020364 <csumup>
  return csumfin(sum);
 8024c36:	f7ff ffed 	bl	8024c14 <csumfin>
}
 8024c3a:	bd08      	pop	{r3, pc}

08024c3c <tx_ip>:
                        size_t plen) {
 8024c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c3e:	4617      	mov	r7, r2
 8024c40:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8024c42:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8024c44:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8024c46:	680b      	ldr	r3, [r1, #0]
 8024c48:	f845 3b0e 	str.w	r3, [r5], #14
 8024c4c:	888b      	ldrh	r3, [r1, #4]
 8024c4e:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8024c50:	6803      	ldr	r3, [r0, #0]
 8024c52:	f8c4 3006 	str.w	r3, [r4, #6]
 8024c56:	8883      	ldrh	r3, [r0, #4]
 8024c58:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 8024c5a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8024c5e:	f7ff ffcd 	bl	8024bfc <mg_ntohs>
 8024c62:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 8024c64:	2100      	movs	r1, #0
 8024c66:	f8c4 100e 	str.w	r1, [r4, #14]
 8024c6a:	6069      	str	r1, [r5, #4]
 8024c6c:	60a9      	str	r1, [r5, #8]
 8024c6e:	60e9      	str	r1, [r5, #12]
 8024c70:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 8024c72:	2345      	movs	r3, #69	@ 0x45
 8024c74:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 8024c76:	2340      	movs	r3, #64	@ 0x40
 8024c78:	7523      	strb	r3, [r4, #20]
 8024c7a:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8024c7c:	9807      	ldr	r0, [sp, #28]
 8024c7e:	3014      	adds	r0, #20
 8024c80:	b280      	uxth	r0, r0
 8024c82:	f7ff ffbb 	bl	8024bfc <mg_ntohs>
 8024c86:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8024c88:	2340      	movs	r3, #64	@ 0x40
 8024c8a:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 8024c8c:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 8024c8e:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 8024c92:	9b06      	ldr	r3, [sp, #24]
 8024c94:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8024c98:	2114      	movs	r1, #20
 8024c9a:	4628      	mov	r0, r5
 8024c9c:	f7ff ffc5 	bl	8024c2a <ipcsum>
 8024ca0:	8320      	strh	r0, [r4, #24]
}
 8024ca2:	4628      	mov	r0, r5
 8024ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024ca6 <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8024ca6:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8024ca8:	781b      	ldrb	r3, [r3, #0]
 8024caa:	2b08      	cmp	r3, #8
 8024cac:	d000      	beq.n	8024cb0 <rx_icmp+0xa>
 8024cae:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8024cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024cb4:	b083      	sub	sp, #12
 8024cb6:	4605      	mov	r5, r0
 8024cb8:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8024cba:	69ca      	ldr	r2, [r1, #28]
 8024cbc:	b11a      	cbz	r2, 8024cc6 <rx_icmp+0x20>
 8024cbe:	6911      	ldr	r1, [r2, #16]
 8024cc0:	6883      	ldr	r3, [r0, #8]
 8024cc2:	4299      	cmp	r1, r3
 8024cc4:	d002      	beq.n	8024ccc <rx_icmp+0x26>
}
 8024cc6:	b003      	add	sp, #12
 8024cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8024ccc:	6986      	ldr	r6, [r0, #24]
 8024cce:	3e26      	subs	r6, #38	@ 0x26
 8024cd0:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 8024cd2:	428e      	cmp	r6, r1
 8024cd4:	d300      	bcc.n	8024cd8 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8024cd6:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8024cd8:	6921      	ldr	r1, [r4, #16]
 8024cda:	f106 0804 	add.w	r8, r6, #4
 8024cde:	f8cd 8004 	str.w	r8, [sp, #4]
 8024ce2:	68d2      	ldr	r2, [r2, #12]
 8024ce4:	9200      	str	r2, [sp, #0]
 8024ce6:	2201      	movs	r2, #1
 8024ce8:	3106      	adds	r1, #6
 8024cea:	4628      	mov	r0, r5
 8024cec:	f7ff ffa6 	bl	8024c3c <tx_ip>
 8024cf0:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8024cf2:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8024cf6:	2300      	movs	r3, #0
 8024cf8:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8024cfa:	4632      	mov	r2, r6
 8024cfc:	68a1      	ldr	r1, [r4, #8]
 8024cfe:	3018      	adds	r0, #24
 8024d00:	f008 f8ba 	bl	802ce78 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8024d04:	4641      	mov	r1, r8
 8024d06:	4648      	mov	r0, r9
 8024d08:	f7ff ff8f 	bl	8024c2a <ipcsum>
 8024d0c:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 8024d0e:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 8024d12:	4628      	mov	r0, r5
 8024d14:	f7fb fb37 	bl	8020386 <ether_output>
}
 8024d18:	e7d5      	b.n	8024cc6 <rx_icmp+0x20>

08024d1a <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8024d1a:	b538      	push	{r3, r4, r5, lr}
 8024d1c:	4605      	mov	r5, r0
 8024d1e:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8024d20:	6a09      	ldr	r1, [r1, #32]
 8024d22:	798b      	ldrb	r3, [r1, #6]
 8024d24:	2b01      	cmp	r3, #1
 8024d26:	d00e      	beq.n	8024d46 <rx_ip6+0x2c>
 8024d28:	2b3a      	cmp	r3, #58	@ 0x3a
 8024d2a:	d00c      	beq.n	8024d46 <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 8024d2c:	2b11      	cmp	r3, #17
 8024d2e:	d110      	bne.n	8024d52 <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8024d30:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8024d34:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8024d36:	68e3      	ldr	r3, [r4, #12]
 8024d38:	2b07      	cmp	r3, #7
 8024d3a:	d90a      	bls.n	8024d52 <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 8024d3c:	3130      	adds	r1, #48	@ 0x30
 8024d3e:	4620      	mov	r0, r4
 8024d40:	f7fe fbe9 	bl	8023516 <mkpay>
 8024d44:	e005      	b.n	8024d52 <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8024d46:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8024d4a:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8024d4c:	68e3      	ldr	r3, [r4, #12]
 8024d4e:	2b03      	cmp	r3, #3
 8024d50:	d800      	bhi.n	8024d54 <rx_ip6+0x3a>
}
 8024d52:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 8024d54:	312c      	adds	r1, #44	@ 0x2c
 8024d56:	4620      	mov	r0, r4
 8024d58:	f7fe fbdd 	bl	8023516 <mkpay>
    rx_icmp(ifp, pkt);
 8024d5c:	4621      	mov	r1, r4
 8024d5e:	4628      	mov	r0, r5
 8024d60:	f7ff ffa1 	bl	8024ca6 <rx_icmp>
 8024d64:	e7f5      	b.n	8024d52 <rx_ip6+0x38>

08024d66 <tx_udp>:
                   const void *buf, size_t len) {
 8024d66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024d6a:	b083      	sub	sp, #12
 8024d6c:	4606      	mov	r6, r0
 8024d6e:	4698      	mov	r8, r3
 8024d70:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8024d72:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8024d74:	f105 0308 	add.w	r3, r5, #8
 8024d78:	9301      	str	r3, [sp, #4]
 8024d7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024d7c:	9300      	str	r3, [sp, #0]
 8024d7e:	4613      	mov	r3, r2
 8024d80:	2211      	movs	r2, #17
 8024d82:	f7ff ff5b 	bl	8024c3c <tx_ip>
 8024d86:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8024d88:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 8024d8c:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8024d90:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8024d94:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8024d96:	f105 0008 	add.w	r0, r5, #8
 8024d9a:	b280      	uxth	r0, r0
 8024d9c:	f7ff ff2e 	bl	8024bfc <mg_ntohs>
 8024da0:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 8024da2:	2000      	movs	r0, #0
 8024da4:	76a0      	strb	r0, [r4, #26]
 8024da6:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8024da8:	2208      	movs	r2, #8
 8024daa:	4649      	mov	r1, r9
 8024dac:	f7fb fada 	bl	8020364 <csumup>
  cs = csumup(cs, buf, len);
 8024db0:	462a      	mov	r2, r5
 8024db2:	4639      	mov	r1, r7
 8024db4:	f7fb fad6 	bl	8020364 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8024db8:	2204      	movs	r2, #4
 8024dba:	f104 010c 	add.w	r1, r4, #12
 8024dbe:	f7fb fad1 	bl	8020364 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8024dc2:	2204      	movs	r2, #4
 8024dc4:	f104 0110 	add.w	r1, r4, #16
 8024dc8:	f7fb facc 	bl	8020364 <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8024dcc:	7a63      	ldrb	r3, [r4, #9]
 8024dce:	442b      	add	r3, r5
 8024dd0:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 8024dd2:	3008      	adds	r0, #8
 8024dd4:	f7ff ff1e 	bl	8024c14 <csumfin>
 8024dd8:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 8024dda:	462a      	mov	r2, r5
 8024ddc:	4639      	mov	r1, r7
 8024dde:	f104 001c 	add.w	r0, r4, #28
 8024de2:	f006 fdf3 	bl	802b9cc <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8024de6:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 8024dea:	4630      	mov	r0, r6
 8024dec:	f7fb facb 	bl	8020386 <ether_output>
}
 8024df0:	b003      	add	sp, #12
 8024df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08024df6 <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8024df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024df8:	4605      	mov	r5, r0
 8024dfa:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8024dfc:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8024dfe:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 8024e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024e04:	f846 3b0e 	str.w	r3, [r6], #14
 8024e08:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8024e0a:	6803      	ldr	r3, [r0, #0]
 8024e0c:	f8c4 3006 	str.w	r3, [r4, #6]
 8024e10:	8883      	ldrh	r3, [r0, #4]
 8024e12:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 8024e14:	f640 0006 	movw	r0, #2054	@ 0x806
 8024e18:	f7ff fef0 	bl	8024bfc <mg_ntohs>
 8024e1c:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 8024e1e:	2300      	movs	r3, #0
 8024e20:	f8c4 300e 	str.w	r3, [r4, #14]
 8024e24:	6073      	str	r3, [r6, #4]
 8024e26:	60b3      	str	r3, [r6, #8]
 8024e28:	60f3      	str	r3, [r6, #12]
 8024e2a:	6133      	str	r3, [r6, #16]
 8024e2c:	6173      	str	r3, [r6, #20]
 8024e2e:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8024e30:	2001      	movs	r0, #1
 8024e32:	f7ff fee3 	bl	8024bfc <mg_ntohs>
 8024e36:	4606      	mov	r6, r0
 8024e38:	81e0      	strh	r0, [r4, #14]
 8024e3a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8024e3e:	f7ff fedd 	bl	8024bfc <mg_ntohs>
 8024e42:	8220      	strh	r0, [r4, #16]
 8024e44:	2306      	movs	r3, #6
 8024e46:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 8024e48:	2304      	movs	r3, #4
 8024e4a:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8024e4c:	82a6      	strh	r6, [r4, #20]
 8024e4e:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 8024e52:	68ab      	ldr	r3, [r5, #8]
 8024e54:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8024e56:	682b      	ldr	r3, [r5, #0]
 8024e58:	f8c4 3016 	str.w	r3, [r4, #22]
 8024e5c:	88ab      	ldrh	r3, [r5, #4]
 8024e5e:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 8024e60:	212a      	movs	r1, #42	@ 0x2a
 8024e62:	4628      	mov	r0, r5
 8024e64:	f7fb fa8f 	bl	8020386 <ether_output>
}
 8024e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024e6a <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 8024e6a:	b510      	push	{r4, lr}
 8024e6c:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 8024e6e:	4608      	mov	r0, r1
 8024e70:	f7ff fd74 	bl	802495c <mg_url_port>
 8024e74:	f7ff fec2 	bl	8024bfc <mg_ntohs>
 8024e78:	8320      	strh	r0, [r4, #24]
}
 8024e7a:	2001      	movs	r0, #1
 8024e7c:	bd10      	pop	{r4, pc}
	...

08024e80 <tx_dhcp>:
                    bool ciaddr) {
 8024e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024e84:	b0c8      	sub	sp, #288	@ 0x120
 8024e86:	4604      	mov	r4, r0
 8024e88:	460e      	mov	r6, r1
 8024e8a:	4615      	mov	r5, r2
 8024e8c:	4698      	mov	r8, r3
 8024e8e:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8024e92:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8024e96:	4917      	ldr	r1, [pc, #92]	@ (8024ef4 <tx_dhcp+0x74>)
 8024e98:	a804      	add	r0, sp, #16
 8024e9a:	f007 ffed 	bl	802ce78 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8024e9e:	4816      	ldr	r0, [pc, #88]	@ (8024ef8 <tx_dhcp+0x78>)
 8024ea0:	f7ff fe14 	bl	8024acc <mg_ntohl>
 8024ea4:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8024ea6:	6820      	ldr	r0, [r4, #0]
 8024ea8:	900b      	str	r0, [sp, #44]	@ 0x2c
 8024eaa:	88a3      	ldrh	r3, [r4, #4]
 8024eac:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8024eb0:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8024eb4:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 8024eb6:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8024eb8:	994e      	ldr	r1, [sp, #312]	@ 0x138
 8024eba:	a840      	add	r0, sp, #256	@ 0x100
 8024ebc:	f007 ffdc 	bl	802ce78 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8024ec0:	b107      	cbz	r7, 8024ec4 <tx_dhcp+0x44>
 8024ec2:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8024ec4:	2044      	movs	r0, #68	@ 0x44
 8024ec6:	f7ff fe99 	bl	8024bfc <mg_ntohs>
 8024eca:	4607      	mov	r7, r0
 8024ecc:	2043      	movs	r0, #67	@ 0x43
 8024ece:	f7ff fe95 	bl	8024bfc <mg_ntohs>
 8024ed2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8024ed6:	9303      	str	r3, [sp, #12]
 8024ed8:	ab04      	add	r3, sp, #16
 8024eda:	9302      	str	r3, [sp, #8]
 8024edc:	9001      	str	r0, [sp, #4]
 8024ede:	f8cd 8000 	str.w	r8, [sp]
 8024ee2:	463b      	mov	r3, r7
 8024ee4:	462a      	mov	r2, r5
 8024ee6:	4631      	mov	r1, r6
 8024ee8:	4620      	mov	r0, r4
 8024eea:	f7ff ff3c 	bl	8024d66 <tx_udp>
}
 8024eee:	b048      	add	sp, #288	@ 0x120
 8024ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ef4:	08034d4c 	.word	0x08034d4c
 8024ef8:	63825363 	.word	0x63825363

08024efc <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8024efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024f00:	b0d0      	sub	sp, #320	@ 0x140
 8024f02:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 8024f04:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8024f06:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8024f0a:	6809      	ldr	r1, [r1, #0]
 8024f0c:	686a      	ldr	r2, [r5, #4]
 8024f0e:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8024f12:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8024f16:	4543      	cmp	r3, r8
 8024f18:	d827      	bhi.n	8024f6a <rx_dhcp_server+0x6e>
 8024f1a:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8024f1c:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8024f20:	495e      	ldr	r1, [pc, #376]	@ (802509c <rx_dhcp_server+0x1a0>)
 8024f22:	a80c      	add	r0, sp, #48	@ 0x30
 8024f24:	f007 ffa8 	bl	802ce78 <memcpy>
  res.yiaddr = ifp->ip;
 8024f28:	68b3      	ldr	r3, [r6, #8]
 8024f2a:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 8024f2c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8024f30:	3301      	adds	r3, #1
 8024f32:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 8024f36:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8024f38:	e002      	b.n	8024f40 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 8024f3a:	7863      	ldrb	r3, [r4, #1]
 8024f3c:	3302      	adds	r3, #2
 8024f3e:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8024f40:	1c63      	adds	r3, r4, #1
 8024f42:	4543      	cmp	r3, r8
 8024f44:	d20c      	bcs.n	8024f60 <rx_dhcp_server+0x64>
 8024f46:	7823      	ldrb	r3, [r4, #0]
 8024f48:	2bff      	cmp	r3, #255	@ 0xff
 8024f4a:	d009      	beq.n	8024f60 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8024f4c:	2b35      	cmp	r3, #53	@ 0x35
 8024f4e:	d1f4      	bne.n	8024f3a <rx_dhcp_server+0x3e>
 8024f50:	7863      	ldrb	r3, [r4, #1]
 8024f52:	2b01      	cmp	r3, #1
 8024f54:	d1f1      	bne.n	8024f3a <rx_dhcp_server+0x3e>
 8024f56:	1ca3      	adds	r3, r4, #2
 8024f58:	4543      	cmp	r3, r8
 8024f5a:	d2ee      	bcs.n	8024f3a <rx_dhcp_server+0x3e>
      op = p[2];
 8024f5c:	78a7      	ldrb	r7, [r4, #2]
 8024f5e:	e7ec      	b.n	8024f3a <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8024f60:	2f01      	cmp	r7, #1
 8024f62:	f000 808a 	beq.w	802507a <rx_dhcp_server+0x17e>
 8024f66:	2f03      	cmp	r7, #3
 8024f68:	d002      	beq.n	8024f70 <rx_dhcp_server+0x74>
}
 8024f6a:	b050      	add	sp, #320	@ 0x140
 8024f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8024f70:	2205      	movs	r2, #5
    uint8_t opts[] = {
 8024f72:	2335      	movs	r3, #53	@ 0x35
 8024f74:	f88d 3014 	strb.w	r3, [sp, #20]
 8024f78:	2301      	movs	r3, #1
 8024f7a:	f88d 3015 	strb.w	r3, [sp, #21]
 8024f7e:	f88d 2016 	strb.w	r2, [sp, #22]
 8024f82:	f88d 3017 	strb.w	r3, [sp, #23]
 8024f86:	2204      	movs	r2, #4
 8024f88:	f88d 2018 	strb.w	r2, [sp, #24]
 8024f8c:	2300      	movs	r3, #0
 8024f8e:	f88d 3019 	strb.w	r3, [sp, #25]
 8024f92:	f88d 301a 	strb.w	r3, [sp, #26]
 8024f96:	f88d 301b 	strb.w	r3, [sp, #27]
 8024f9a:	f88d 301c 	strb.w	r3, [sp, #28]
 8024f9e:	2136      	movs	r1, #54	@ 0x36
 8024fa0:	f88d 101d 	strb.w	r1, [sp, #29]
 8024fa4:	f88d 201e 	strb.w	r2, [sp, #30]
 8024fa8:	f88d 301f 	strb.w	r3, [sp, #31]
 8024fac:	f88d 3020 	strb.w	r3, [sp, #32]
 8024fb0:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8024fb4:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8024fb8:	230c      	movs	r3, #12
 8024fba:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8024fbe:	2303      	movs	r3, #3
 8024fc0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8024fc4:	236d      	movs	r3, #109	@ 0x6d
 8024fc6:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 8024fca:	2369      	movs	r3, #105	@ 0x69
 8024fcc:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8024fd0:	2370      	movs	r3, #112	@ 0x70
 8024fd2:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8024fd6:	2333      	movs	r3, #51	@ 0x33
 8024fd8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8024fdc:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 8024fe0:	23ff      	movs	r3, #255	@ 0xff
 8024fe2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8024fe6:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8024fea:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8024fee:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 8024ff2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8024ff6:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 8024ffa:	f8de 001c 	ldr.w	r0, [lr, #28]
 8024ffe:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025000:	f8be 3020 	ldrh.w	r3, [lr, #32]
 8025004:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8025008:	68f3      	ldr	r3, [r6, #12]
 802500a:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 802500e:	68b3      	ldr	r3, [r6, #8]
 8025010:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 8025014:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8025018:	ac05      	add	r4, sp, #20
 802501a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802501c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8025020:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8025024:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8025028:	f82c 2b02 	strh.w	r2, [ip], #2
 802502c:	0c12      	lsrs	r2, r2, #16
 802502e:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 8025032:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 8025036:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 8025038:	f8de 3004 	ldr.w	r3, [lr, #4]
 802503c:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 802503e:	7fb3      	ldrb	r3, [r6, #30]
 8025040:	b9eb      	cbnz	r3, 802507e <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8025042:	692c      	ldr	r4, [r5, #16]
 8025044:	3406      	adds	r4, #6
 8025046:	f8d6 8008 	ldr.w	r8, [r6, #8]
 802504a:	2043      	movs	r0, #67	@ 0x43
 802504c:	f7ff fdd6 	bl	8024bfc <mg_ntohs>
 8025050:	4605      	mov	r5, r0
 8025052:	2f01      	cmp	r7, #1
 8025054:	d01e      	beq.n	8025094 <rx_dhcp_server+0x198>
 8025056:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8025058:	2044      	movs	r0, #68	@ 0x44
 802505a:	f7ff fdcf 	bl	8024bfc <mg_ntohs>
 802505e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8025062:	9303      	str	r3, [sp, #12]
 8025064:	ab0c      	add	r3, sp, #48	@ 0x30
 8025066:	9302      	str	r3, [sp, #8]
 8025068:	9001      	str	r0, [sp, #4]
 802506a:	9700      	str	r7, [sp, #0]
 802506c:	462b      	mov	r3, r5
 802506e:	4642      	mov	r2, r8
 8025070:	4621      	mov	r1, r4
 8025072:	4630      	mov	r0, r6
 8025074:	f7ff fe77 	bl	8024d66 <tx_udp>
 8025078:	e777      	b.n	8024f6a <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 802507a:	2202      	movs	r2, #2
 802507c:	e779      	b.n	8024f72 <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 802507e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025080:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8025082:	692b      	ldr	r3, [r5, #16]
 8025084:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8025088:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 802508c:	895b      	ldrh	r3, [r3, #10]
 802508e:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8025092:	e7d6      	b.n	8025042 <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8025094:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025098:	e7de      	b.n	8025058 <rx_dhcp_server+0x15c>
 802509a:	bf00      	nop
 802509c:	08034e5c 	.word	0x08034e5c

080250a0 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 80250a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250a4:	b08b      	sub	sp, #44	@ 0x2c
 80250a6:	4605      	mov	r5, r0
 80250a8:	9108      	str	r1, [sp, #32]
 80250aa:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80250ac:	8810      	ldrh	r0, [r2, #0]
 80250ae:	f7ff fda5 	bl	8024bfc <mg_ntohs>
 80250b2:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80250b4:	8860      	ldrh	r0, [r4, #2]
 80250b6:	f7ff fda1 	bl	8024bfc <mg_ntohs>
 80250ba:	4606      	mov	r6, r0
 80250bc:	88a0      	ldrh	r0, [r4, #4]
 80250be:	f7ff fd9d 	bl	8024bfc <mg_ntohs>
 80250c2:	4607      	mov	r7, r0
 80250c4:	88e0      	ldrh	r0, [r4, #6]
 80250c6:	f7ff fd99 	bl	8024bfc <mg_ntohs>
 80250ca:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80250cc:	8920      	ldrh	r0, [r4, #8]
 80250ce:	f7ff fd95 	bl	8024bfc <mg_ntohs>
 80250d2:	4681      	mov	r9, r0
 80250d4:	8960      	ldrh	r0, [r4, #10]
 80250d6:	f7ff fd91 	bl	8024bfc <mg_ntohs>
 80250da:	4682      	mov	sl, r0
 80250dc:	89a0      	ldrh	r0, [r4, #12]
 80250de:	f7ff fd8d 	bl	8024bfc <mg_ntohs>
 80250e2:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 80250e4:	89e0      	ldrh	r0, [r4, #14]
 80250e6:	f7ff fd89 	bl	8024bfc <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80250ea:	9006      	str	r0, [sp, #24]
 80250ec:	f8cd b014 	str.w	fp, [sp, #20]
 80250f0:	f8cd a010 	str.w	sl, [sp, #16]
 80250f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80250f8:	f8cd 8008 	str.w	r8, [sp, #8]
 80250fc:	9701      	str	r7, [sp, #4]
 80250fe:	9600      	str	r6, [sp, #0]
 8025100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025102:	4a04      	ldr	r2, [pc, #16]	@ (8025114 <print_ip6+0x74>)
 8025104:	9908      	ldr	r1, [sp, #32]
 8025106:	4628      	mov	r0, r5
 8025108:	f7fd ff28 	bl	8022f5c <mg_xprintf>
}
 802510c:	b00b      	add	sp, #44	@ 0x2c
 802510e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025112:	bf00      	nop
 8025114:	0803970c 	.word	0x0803970c

08025118 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8025118:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 802511a:	6813      	ldr	r3, [r2, #0]
 802511c:	1d1c      	adds	r4, r3, #4
 802511e:	6014      	str	r4, [r2, #0]
 8025120:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8025122:	7cd3      	ldrb	r3, [r2, #19]
 8025124:	b913      	cbnz	r3, 802512c <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8025126:	f7fd ff29 	bl	8022f7c <print_ip4>
}
 802512a:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 802512c:	f7ff ffb8 	bl	80250a0 <print_ip6>
 8025130:	e7fb      	b.n	802512a <mg_print_ip+0x12>
	...

08025134 <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8025134:	b570      	push	{r4, r5, r6, lr}
 8025136:	b082      	sub	sp, #8
 8025138:	4604      	mov	r4, r0
 802513a:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 802513c:	6813      	ldr	r3, [r2, #0]
 802513e:	1d19      	adds	r1, r3, #4
 8025140:	6011      	str	r1, [r2, #0]
 8025142:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8025144:	8a30      	ldrh	r0, [r6, #16]
 8025146:	f7ff fd59 	bl	8024bfc <mg_ntohs>
 802514a:	9001      	str	r0, [sp, #4]
 802514c:	9600      	str	r6, [sp, #0]
 802514e:	4b04      	ldr	r3, [pc, #16]	@ (8025160 <mg_print_ip_port+0x2c>)
 8025150:	4a04      	ldr	r2, [pc, #16]	@ (8025164 <mg_print_ip_port+0x30>)
 8025152:	4629      	mov	r1, r5
 8025154:	4620      	mov	r0, r4
 8025156:	f7fd ff01 	bl	8022f5c <mg_xprintf>
}
 802515a:	b002      	add	sp, #8
 802515c:	bd70      	pop	{r4, r5, r6, pc}
 802515e:	bf00      	nop
 8025160:	08025119 	.word	0x08025119
 8025164:	08039728 	.word	0x08039728

08025168 <mg_crc32>:
  crc = ~crc;
 8025168:	43c0      	mvns	r0, r0
  while (len--) {
 802516a:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 802516e:	b1e2      	cbz	r2, 80251aa <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8025170:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 8025172:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8025176:	ea83 0200 	eor.w	r2, r3, r0
 802517a:	f002 020f 	and.w	r2, r2, #15
 802517e:	4c0c      	ldr	r4, [pc, #48]	@ (80251b0 <mg_crc32+0x48>)
 8025180:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8025184:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8025188:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 802518c:	f003 030f 	and.w	r3, r3, #15
 8025190:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025194:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 8025198:	4662      	mov	r2, ip
 802519a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802519e:	2a00      	cmp	r2, #0
 80251a0:	d1e7      	bne.n	8025172 <mg_crc32+0xa>
}
 80251a2:	43c0      	mvns	r0, r0
 80251a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80251a8:	4770      	bx	lr
 80251aa:	43c0      	mvns	r0, r0
 80251ac:	4770      	bx	lr
 80251ae:	bf00      	nop
 80251b0:	08039fbc 	.word	0x08039fbc

080251b4 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 80251b4:	b082      	sub	sp, #8
 80251b6:	ab02      	add	r3, sp, #8
 80251b8:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 80251bc:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 80251be:	7803      	ldrb	r3, [r0, #0]
 80251c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80251c2:	d106      	bne.n	80251d2 <mg_path_is_sane+0x1e>
 80251c4:	7843      	ldrb	r3, [r0, #1]
 80251c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80251c8:	d103      	bne.n	80251d2 <mg_path_is_sane+0x1e>
 80251ca:	2000      	movs	r0, #0
 80251cc:	e015      	b.n	80251fa <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 80251ce:	3201      	adds	r2, #1
 80251d0:	3901      	subs	r1, #1
 80251d2:	7813      	ldrb	r3, [r2, #0]
 80251d4:	b183      	cbz	r3, 80251f8 <mg_path_is_sane+0x44>
 80251d6:	b169      	cbz	r1, 80251f4 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 80251d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80251da:	d001      	beq.n	80251e0 <mg_path_is_sane+0x2c>
 80251dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80251de:	d1f6      	bne.n	80251ce <mg_path_is_sane+0x1a>
 80251e0:	2901      	cmp	r1, #1
 80251e2:	d9f4      	bls.n	80251ce <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80251e4:	7853      	ldrb	r3, [r2, #1]
 80251e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80251e8:	d1f1      	bne.n	80251ce <mg_path_is_sane+0x1a>
 80251ea:	7893      	ldrb	r3, [r2, #2]
 80251ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80251ee:	d1ee      	bne.n	80251ce <mg_path_is_sane+0x1a>
 80251f0:	2000      	movs	r0, #0
 80251f2:	e002      	b.n	80251fa <mg_path_is_sane+0x46>
  return true;
 80251f4:	2001      	movs	r0, #1
 80251f6:	e000      	b.n	80251fa <mg_path_is_sane+0x46>
 80251f8:	2001      	movs	r0, #1
}
 80251fa:	b002      	add	sp, #8
 80251fc:	4770      	bx	lr

080251fe <mg_millis>:
uint64_t mg_millis(void) {
 80251fe:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 8025200:	f7f3 fcc6 	bl	8018b90 <xTaskGetTickCount>
}
 8025204:	2100      	movs	r1, #0
 8025206:	bd08      	pop	{r3, pc}

08025208 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8025208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802520c:	b092      	sub	sp, #72	@ 0x48
 802520e:	4605      	mov	r5, r0
 8025210:	460c      	mov	r4, r1
 8025212:	4616      	mov	r6, r2
 8025214:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 8025216:	212f      	movs	r1, #47	@ 0x2f
 8025218:	4620      	mov	r0, r4
 802521a:	f006 fc4b 	bl	802bab4 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 802521e:	4680      	mov	r8, r0
 8025220:	b1a8      	cbz	r0, 802524e <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8025222:	f7ff ffec 	bl	80251fe <mg_millis>
 8025226:	f1b8 0f00 	cmp.w	r8, #0
 802522a:	d001      	beq.n	8025230 <mg_log_prefix+0x28>
 802522c:	f108 0401 	add.w	r4, r8, #1
 8025230:	9705      	str	r7, [sp, #20]
 8025232:	9604      	str	r6, [sp, #16]
 8025234:	9403      	str	r4, [sp, #12]
 8025236:	9502      	str	r5, [sp, #8]
 8025238:	9000      	str	r0, [sp, #0]
 802523a:	9101      	str	r1, [sp, #4]
 802523c:	4a0f      	ldr	r2, [pc, #60]	@ (802527c <mg_log_prefix+0x74>)
 802523e:	2129      	movs	r1, #41	@ 0x29
 8025240:	a807      	add	r0, sp, #28
 8025242:	f7fd fa1f 	bl	8022684 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8025246:	2827      	cmp	r0, #39	@ 0x27
 8025248:	d90e      	bls.n	8025268 <mg_log_prefix+0x60>
 802524a:	2027      	movs	r0, #39	@ 0x27
 802524c:	e00c      	b.n	8025268 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 802524e:	215c      	movs	r1, #92	@ 0x5c
 8025250:	4620      	mov	r0, r4
 8025252:	f006 fc2f 	bl	802bab4 <strrchr>
 8025256:	4680      	mov	r8, r0
 8025258:	e7e3      	b.n	8025222 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 802525a:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 802525e:	446b      	add	r3, sp
 8025260:	2220      	movs	r2, #32
 8025262:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8025266:	3001      	adds	r0, #1
 8025268:	2828      	cmp	r0, #40	@ 0x28
 802526a:	d9f6      	bls.n	802525a <mg_log_prefix+0x52>
  logs(buf, n - 1);
 802526c:	1e41      	subs	r1, r0, #1
 802526e:	a807      	add	r0, sp, #28
 8025270:	f7fa fbdc 	bl	801fa2c <logs>
}
 8025274:	b012      	add	sp, #72	@ 0x48
 8025276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802527a:	bf00      	nop
 802527c:	08039730 	.word	0x08039730

08025280 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8025280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025284:	b084      	sub	sp, #16
 8025286:	4605      	mov	r5, r0
 8025288:	460e      	mov	r6, r1
 802528a:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 802528c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8025290:	2100      	movs	r1, #0
 8025292:	4640      	mov	r0, r8
 8025294:	f006 fbb4 	bl	802ba00 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8025298:	2e0b      	cmp	r6, #11
 802529a:	f240 808b 	bls.w	80253b4 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802529e:	88a8      	ldrh	r0, [r5, #4]
 80252a0:	f7ff fcac 	bl	8024bfc <mg_ntohs>
 80252a4:	2801      	cmp	r0, #1
 80252a6:	f200 8089 	bhi.w	80253bc <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 80252aa:	88e8      	ldrh	r0, [r5, #6]
 80252ac:	f7ff fca6 	bl	8024bfc <mg_ntohs>
 80252b0:	4604      	mov	r4, r0
 80252b2:	4681      	mov	r9, r0
  if (num_answers > 10) {
 80252b4:	280a      	cmp	r0, #10
 80252b6:	d905      	bls.n	80252c4 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80252b8:	4b43      	ldr	r3, [pc, #268]	@ (80253c8 <mg_dns_parse+0x148>)
 80252ba:	681b      	ldr	r3, [r3, #0]
 80252bc:	2b02      	cmp	r3, #2
 80252be:	dc1a      	bgt.n	80252f6 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 80252c0:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 80252c4:	8828      	ldrh	r0, [r5, #0]
 80252c6:	f7ff fc99 	bl	8024bfc <mg_ntohs>
 80252ca:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 80252ce:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80252d0:	2700      	movs	r7, #0
 80252d2:	88a8      	ldrh	r0, [r5, #4]
 80252d4:	f7ff fc92 	bl	8024bfc <mg_ntohs>
 80252d8:	42b8      	cmp	r0, r7
 80252da:	d91a      	bls.n	8025312 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80252dc:	ab02      	add	r3, sp, #8
 80252de:	9300      	str	r3, [sp, #0]
 80252e0:	2301      	movs	r3, #1
 80252e2:	4622      	mov	r2, r4
 80252e4:	4631      	mov	r1, r6
 80252e6:	4628      	mov	r0, r5
 80252e8:	f7fc fbdf 	bl	8021aaa <mg_dns_parse_rr>
 80252ec:	2800      	cmp	r0, #0
 80252ee:	d067      	beq.n	80253c0 <mg_dns_parse+0x140>
    ofs += n;
 80252f0:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80252f2:	3701      	adds	r7, #1
 80252f4:	e7ed      	b.n	80252d2 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80252f6:	4b35      	ldr	r3, [pc, #212]	@ (80253cc <mg_dns_parse+0x14c>)
 80252f8:	f240 4293 	movw	r2, #1171	@ 0x493
 80252fc:	4934      	ldr	r1, [pc, #208]	@ (80253d0 <mg_dns_parse+0x150>)
 80252fe:	2003      	movs	r0, #3
 8025300:	f7ff ff82 	bl	8025208 <mg_log_prefix>
 8025304:	4621      	mov	r1, r4
 8025306:	4833      	ldr	r0, [pc, #204]	@ (80253d4 <mg_dns_parse+0x154>)
 8025308:	f7fd fe68 	bl	8022fdc <mg_log>
    num_answers = 10;  // Sanity cap
 802530c:	f04f 090a 	mov.w	r9, #10
 8025310:	e7d8      	b.n	80252c4 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 8025312:	2700      	movs	r7, #0
 8025314:	e013      	b.n	802533e <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8025316:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802531a:	2a01      	cmp	r2, #1
 802531c:	d12a      	bne.n	8025374 <mg_dns_parse+0xf4>
 802531e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8025322:	2a01      	cmp	r2, #1
 8025324:	d126      	bne.n	8025374 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 8025326:	2300      	movs	r3, #0
 8025328:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 802532c:	3c04      	subs	r4, #4
 802532e:	592b      	ldr	r3, [r5, r4]
 8025330:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 8025334:	2001      	movs	r0, #1
 8025336:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802533a:	e03c      	b.n	80253b6 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 802533c:	3701      	adds	r7, #1
 802533e:	454f      	cmp	r7, r9
 8025340:	d236      	bcs.n	80253b0 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8025342:	ab02      	add	r3, sp, #8
 8025344:	9300      	str	r3, [sp, #0]
 8025346:	2300      	movs	r3, #0
 8025348:	4622      	mov	r2, r4
 802534a:	4631      	mov	r1, r6
 802534c:	4628      	mov	r0, r5
 802534e:	f7fc fbac 	bl	8021aaa <mg_dns_parse_rr>
 8025352:	4682      	mov	sl, r0
 8025354:	b3b0      	cbz	r0, 80253c4 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8025356:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802535a:	9300      	str	r3, [sp, #0]
 802535c:	f108 0318 	add.w	r3, r8, #24
 8025360:	4622      	mov	r2, r4
 8025362:	4631      	mov	r1, r6
 8025364:	4628      	mov	r0, r5
 8025366:	f7fb faf7 	bl	8020958 <mg_dns_parse_name>
    ofs += n;
 802536a:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 802536c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8025370:	2b04      	cmp	r3, #4
 8025372:	d0d0      	beq.n	8025316 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8025374:	2b10      	cmp	r3, #16
 8025376:	d1e1      	bne.n	802533c <mg_dns_parse+0xbc>
 8025378:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802537c:	2b1c      	cmp	r3, #28
 802537e:	d1dd      	bne.n	802533c <mg_dns_parse+0xbc>
 8025380:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8025384:	2b01      	cmp	r3, #1
 8025386:	d1d9      	bne.n	802533c <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 8025388:	2001      	movs	r0, #1
 802538a:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 802538e:	3c10      	subs	r4, #16
 8025390:	192b      	adds	r3, r5, r4
 8025392:	592c      	ldr	r4, [r5, r4]
 8025394:	6859      	ldr	r1, [r3, #4]
 8025396:	689a      	ldr	r2, [r3, #8]
 8025398:	68db      	ldr	r3, [r3, #12]
 802539a:	f8c8 4004 	str.w	r4, [r8, #4]
 802539e:	f8c8 1008 	str.w	r1, [r8, #8]
 80253a2:	f8c8 200c 	str.w	r2, [r8, #12]
 80253a6:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 80253aa:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 80253ae:	e002      	b.n	80253b6 <mg_dns_parse+0x136>
  return true;
 80253b0:	2001      	movs	r0, #1
 80253b2:	e000      	b.n	80253b6 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80253b4:	2000      	movs	r0, #0
}
 80253b6:	b004      	add	sp, #16
 80253b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80253bc:	2000      	movs	r0, #0
 80253be:	e7fa      	b.n	80253b6 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80253c0:	2000      	movs	r0, #0
 80253c2:	e7f8      	b.n	80253b6 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80253c4:	2000      	movs	r0, #0
 80253c6:	e7f6      	b.n	80253b6 <mg_dns_parse+0x136>
 80253c8:	200000a8 	.word	0x200000a8
 80253cc:	0803a1bc 	.word	0x0803a1bc
 80253d0:	08039744 	.word	0x08039744
 80253d4:	08039774 	.word	0x08039774

080253d8 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80253d8:	b40e      	push	{r1, r2, r3}
 80253da:	b510      	push	{r4, lr}
 80253dc:	b093      	sub	sp, #76	@ 0x4c
 80253de:	4604      	mov	r4, r0
 80253e0:	ab15      	add	r3, sp, #84	@ 0x54
 80253e2:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80253e6:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80253e8:	ab01      	add	r3, sp, #4
 80253ea:	2140      	movs	r1, #64	@ 0x40
 80253ec:	a802      	add	r0, sp, #8
 80253ee:	f7fd fe33 	bl	8023058 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80253f2:	4b11      	ldr	r3, [pc, #68]	@ (8025438 <mg_error+0x60>)
 80253f4:	681b      	ldr	r3, [r3, #0]
 80253f6:	2b00      	cmp	r3, #0
 80253f8:	dc0f      	bgt.n	802541a <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80253fa:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80253fe:	f043 0320 	orr.w	r3, r3, #32
 8025402:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8025406:	aa02      	add	r2, sp, #8
 8025408:	2100      	movs	r1, #0
 802540a:	4620      	mov	r0, r4
 802540c:	f7fc fb9c 	bl	8021b48 <mg_call>
}
 8025410:	b013      	add	sp, #76	@ 0x4c
 8025412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025416:	b003      	add	sp, #12
 8025418:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 802541a:	4b08      	ldr	r3, [pc, #32]	@ (802543c <mg_error+0x64>)
 802541c:	f240 5253 	movw	r2, #1363	@ 0x553
 8025420:	4907      	ldr	r1, [pc, #28]	@ (8025440 <mg_error+0x68>)
 8025422:	2001      	movs	r0, #1
 8025424:	f7ff fef0 	bl	8025208 <mg_log_prefix>
 8025428:	ab02      	add	r3, sp, #8
 802542a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802542c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802542e:	4805      	ldr	r0, [pc, #20]	@ (8025444 <mg_error+0x6c>)
 8025430:	f7fd fdd4 	bl	8022fdc <mg_log>
 8025434:	e7e1      	b.n	80253fa <mg_error+0x22>
 8025436:	bf00      	nop
 8025438:	200000a8 	.word	0x200000a8
 802543c:	0803a198 	.word	0x0803a198
 8025440:	08039744 	.word	0x08039744
 8025444:	080397a0 	.word	0x080397a0

08025448 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 8025448:	b570      	push	{r4, r5, r6, lr}
 802544a:	b082      	sub	sp, #8
 802544c:	4606      	mov	r6, r0
 802544e:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8025450:	6809      	ldr	r1, [r1, #0]
 8025452:	68a5      	ldr	r5, [r4, #8]
 8025454:	6862      	ldr	r2, [r4, #4]
 8025456:	1b52      	subs	r2, r2, r5
 8025458:	4429      	add	r1, r5
 802545a:	f7ff fa07 	bl	802486c <mg_tls_recv>
 802545e:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 8025460:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8025464:	d003      	beq.n	802546e <handle_tls_recv+0x26>
  } else if (n > 0) {
 8025466:	2800      	cmp	r0, #0
 8025468:	dc06      	bgt.n	8025478 <handle_tls_recv+0x30>
}
 802546a:	b002      	add	sp, #8
 802546c:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 802546e:	4906      	ldr	r1, [pc, #24]	@ (8025488 <handle_tls_recv+0x40>)
 8025470:	4630      	mov	r0, r6
 8025472:	f7ff ffb1 	bl	80253d8 <mg_error>
 8025476:	e7f8      	b.n	802546a <handle_tls_recv+0x22>
    io->len += (size_t) n;
 8025478:	4405      	add	r5, r0
 802547a:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 802547c:	aa01      	add	r2, sp, #4
 802547e:	2107      	movs	r1, #7
 8025480:	4630      	mov	r0, r6
 8025482:	f7fc fb61 	bl	8021b48 <mg_call>
}
 8025486:	e7f0      	b.n	802546a <handle_tls_recv+0x22>
 8025488:	080397ac 	.word	0x080397ac

0802548c <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 802548c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025490:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8025494:	4607      	mov	r7, r0
 8025496:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8025498:	2907      	cmp	r1, #7
 802549a:	f000 80e3 	beq.w	8025664 <http_cb+0x1d8>
 802549e:	2909      	cmp	r1, #9
 80254a0:	f000 814a 	beq.w	8025738 <http_cb+0x2ac>
 80254a4:	2902      	cmp	r1, #2
 80254a6:	f040 80d9 	bne.w	802565c <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80254aa:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 80254ae:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80254b2:	f023 030b 	bic.w	r3, r3, #11
 80254b6:	04db      	lsls	r3, r3, #19
 80254b8:	0cdb      	lsrs	r3, r3, #19
 80254ba:	2b04      	cmp	r3, #4
 80254bc:	f040 80ce 	bne.w	802565c <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 80254c0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80254c2:	2b00      	cmp	r3, #0
 80254c4:	f000 80ca 	beq.w	802565c <http_cb+0x1d0>
 80254c8:	f04f 0900 	mov.w	r9, #0
 80254cc:	e0cc      	b.n	8025668 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 80254ce:	4b9f      	ldr	r3, [pc, #636]	@ (802574c <http_cb+0x2c0>)
 80254d0:	681b      	ldr	r3, [r3, #0]
 80254d2:	2b00      	cmp	r3, #0
 80254d4:	dc11      	bgt.n	80254fa <http_cb+0x6e>
        c->is_draining = 1;
 80254d6:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80254da:	f043 0310 	orr.w	r3, r3, #16
 80254de:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 80254e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80254e4:	eba3 0109 	sub.w	r1, r3, r9
 80254e8:	2910      	cmp	r1, #16
 80254ea:	bf28      	it	cs
 80254ec:	2110      	movcs	r1, #16
 80254ee:	4620      	mov	r0, r4
 80254f0:	f7fc fed4 	bl	802229c <mg_hexdump>
        c->recv.len = 0;
 80254f4:	2300      	movs	r3, #0
 80254f6:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 80254f8:	e0b0      	b.n	802565c <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 80254fa:	4b95      	ldr	r3, [pc, #596]	@ (8025750 <http_cb+0x2c4>)
 80254fc:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8025500:	4994      	ldr	r1, [pc, #592]	@ (8025754 <http_cb+0x2c8>)
 8025502:	2001      	movs	r0, #1
 8025504:	f7ff fe80 	bl	8025208 <mg_log_prefix>
 8025508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802550a:	4893      	ldr	r0, [pc, #588]	@ (8025758 <http_cb+0x2cc>)
 802550c:	f7fd fd66 	bl	8022fdc <mg_log>
 8025510:	e7e1      	b.n	80254d6 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8025512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025514:	eba3 0309 	sub.w	r3, r3, r9
 8025518:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 802551a:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 802551c:	9986      	ldr	r1, [sp, #536]	@ 0x218
 802551e:	1a52      	subs	r2, r2, r1
 8025520:	1a9b      	subs	r3, r3, r2
 8025522:	9383      	str	r3, [sp, #524]	@ 0x20c
 8025524:	e0bf      	b.n	80256a6 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8025526:	ad88      	add	r5, sp, #544	@ 0x220
 8025528:	498c      	ldr	r1, [pc, #560]	@ (802575c <http_cb+0x2d0>)
 802552a:	4628      	mov	r0, r5
 802552c:	f7fd ff34 	bl	8023398 <mg_str_s>
 8025530:	e895 000c 	ldmia.w	r5, {r2, r3}
 8025534:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025538:	f7fe f829 	bl	802358e <mg_strcasecmp>
 802553c:	4604      	mov	r4, r0
 802553e:	b950      	cbnz	r0, 8025556 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 8025540:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8025542:	eb08 0309 	add.w	r3, r8, r9
 8025546:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8025548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802554a:	eba3 0309 	sub.w	r3, r3, r9
 802554e:	eba3 0b08 	sub.w	fp, r3, r8
 8025552:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8025554:	e04a      	b.n	80255ec <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8025556:	4982      	ldr	r1, [pc, #520]	@ (8025760 <http_cb+0x2d4>)
 8025558:	4638      	mov	r0, r7
 802555a:	f7ff ff3d 	bl	80253d8 <mg_error>
          return;
 802555e:	e07d      	b.n	802565c <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8025560:	2205      	movs	r2, #5
 8025562:	4980      	ldr	r1, [pc, #512]	@ (8025764 <http_cb+0x2d8>)
 8025564:	9802      	ldr	r0, [sp, #8]
 8025566:	f7f9 fcad 	bl	801eec4 <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 802556a:	2800      	cmp	r0, #0
 802556c:	d032      	beq.n	80255d4 <http_cb+0x148>
 802556e:	ac8a      	add	r4, sp, #552	@ 0x228
 8025570:	497d      	ldr	r1, [pc, #500]	@ (8025768 <http_cb+0x2dc>)
 8025572:	4620      	mov	r0, r4
 8025574:	f7fd ff10 	bl	8023398 <mg_str_s>
 8025578:	a902      	add	r1, sp, #8
 802557a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802557e:	c903      	ldmia	r1, {r0, r1}
 8025580:	f7fe f805 	bl	802358e <mg_strcasecmp>
 8025584:	b9c0      	cbnz	r0, 80255b8 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 8025586:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8025588:	4a78      	ldr	r2, [pc, #480]	@ (802576c <http_cb+0x2e0>)
 802558a:	4613      	mov	r3, r2
 802558c:	f240 119b 	movw	r1, #411	@ 0x19b
 8025590:	4638      	mov	r0, r7
 8025592:	f7fd fd77 	bl	8023084 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8025596:	4b6d      	ldr	r3, [pc, #436]	@ (802574c <http_cb+0x2c0>)
 8025598:	681b      	ldr	r3, [r3, #0]
 802559a:	2b00      	cmp	r3, #0
 802559c:	f340 8092 	ble.w	80256c4 <http_cb+0x238>
 80255a0:	4b6b      	ldr	r3, [pc, #428]	@ (8025750 <http_cb+0x2c4>)
 80255a2:	f640 42ca 	movw	r2, #3274	@ 0xcca
 80255a6:	496b      	ldr	r1, [pc, #428]	@ (8025754 <http_cb+0x2c8>)
 80255a8:	2001      	movs	r0, #1
 80255aa:	f7ff fe2d 	bl	8025208 <mg_log_prefix>
 80255ae:	4970      	ldr	r1, [pc, #448]	@ (8025770 <http_cb+0x2e4>)
 80255b0:	4870      	ldr	r0, [pc, #448]	@ (8025774 <http_cb+0x2e8>)
 80255b2:	f7fd fd13 	bl	8022fdc <mg_log>
      if (is_chunked) {
 80255b6:	e085      	b.n	80256c4 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 80255b8:	ac8c      	add	r4, sp, #560	@ 0x230
 80255ba:	496f      	ldr	r1, [pc, #444]	@ (8025778 <http_cb+0x2ec>)
 80255bc:	4620      	mov	r0, r4
 80255be:	f7fd feeb 	bl	8023398 <mg_str_s>
 80255c2:	a902      	add	r1, sp, #8
 80255c4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80255c8:	c903      	ldmia	r1, {r0, r1}
 80255ca:	f7fd ffe0 	bl	802358e <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80255ce:	2800      	cmp	r0, #0
 80255d0:	d178      	bne.n	80256c4 <http_cb+0x238>
 80255d2:	e7d8      	b.n	8025586 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 80255d4:	a802      	add	r0, sp, #8
 80255d6:	f7fc fba9 	bl	8021d2c <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 80255da:	28c7      	cmp	r0, #199	@ 0xc7
 80255dc:	dd72      	ble.n	80256c4 <http_cb+0x238>
 80255de:	28cc      	cmp	r0, #204	@ 0xcc
 80255e0:	d070      	beq.n	80256c4 <http_cb+0x238>
 80255e2:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 80255e6:	d1cf      	bne.n	8025588 <http_cb+0xfc>
 80255e8:	e06c      	b.n	80256c4 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 80255ea:	4406      	add	r6, r0
 80255ec:	ab01      	add	r3, sp, #4
 80255ee:	466a      	mov	r2, sp
 80255f0:	ebab 0106 	sub.w	r1, fp, r6
 80255f4:	19a8      	adds	r0, r5, r6
 80255f6:	f7fe ff09 	bl	802440c <skip_chunk>
 80255fa:	2800      	cmp	r0, #0
 80255fc:	dd02      	ble.n	8025604 <http_cb+0x178>
 80255fe:	9b01      	ldr	r3, [sp, #4]
 8025600:	2b00      	cmp	r3, #0
 8025602:	d1f2      	bne.n	80255ea <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8025604:	b338      	cbz	r0, 8025656 <http_cb+0x1ca>
        if (cl < 0) {
 8025606:	2800      	cmp	r0, #0
 8025608:	db21      	blt.n	802564e <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 802560a:	2300      	movs	r3, #0
 802560c:	9383      	str	r3, [sp, #524]	@ 0x20c
 802560e:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8025612:	ab01      	add	r3, sp, #4
 8025614:	466a      	mov	r2, sp
 8025616:	ebab 0104 	sub.w	r1, fp, r4
 802561a:	1928      	adds	r0, r5, r4
 802561c:	f7fe fef6 	bl	802440c <skip_chunk>
 8025620:	1e06      	subs	r6, r0, #0
 8025622:	dd11      	ble.n	8025648 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8025624:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 8025626:	9900      	ldr	r1, [sp, #0]
 8025628:	4421      	add	r1, r4
 802562a:	9a01      	ldr	r2, [sp, #4]
 802562c:	4429      	add	r1, r5
 802562e:	4428      	add	r0, r5
 8025630:	f006 f9cc 	bl	802b9cc <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8025634:	4434      	add	r4, r6
 8025636:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8025638:	9b01      	ldr	r3, [sp, #4]
 802563a:	441a      	add	r2, r3
 802563c:	9283      	str	r2, [sp, #524]	@ 0x20c
 802563e:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 8025640:	441a      	add	r2, r3
 8025642:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 8025644:	2b00      	cmp	r3, #0
 8025646:	d1e4      	bne.n	8025612 <http_cb+0x186>
        ofs += (size_t) (n + o);
 8025648:	4444      	add	r4, r8
 802564a:	44a1      	add	r9, r4
 802564c:	e044      	b.n	80256d8 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 802564e:	494b      	ldr	r1, [pc, #300]	@ (802577c <http_cb+0x2f0>)
 8025650:	4638      	mov	r0, r7
 8025652:	f7ff fec1 	bl	80253d8 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8025656:	f1b9 0f00 	cmp.w	r9, #0
 802565a:	d170      	bne.n	802573e <http_cb+0x2b2>
}
 802565c:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8025660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025664:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8025668:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 802566c:	2b00      	cmp	r3, #0
 802566e:	dbf2      	blt.n	8025656 <http_cb+0x1ca>
 8025670:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8025672:	4549      	cmp	r1, r9
 8025674:	d9ef      	bls.n	8025656 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 8025676:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8025678:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 802567a:	aa02      	add	r2, sp, #8
 802567c:	eba1 0109 	sub.w	r1, r1, r9
 8025680:	4620      	mov	r0, r4
 8025682:	f7fd ffb3 	bl	80235ec <mg_http_parse>
      if (n < 0) {
 8025686:	f1b0 0800 	subs.w	r8, r0, #0
 802568a:	f6ff af20 	blt.w	80254ce <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 802568e:	f1b8 0f00 	cmp.w	r8, #0
 8025692:	d0e0      	beq.n	8025656 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8025694:	aa02      	add	r2, sp, #8
 8025696:	210a      	movs	r1, #10
 8025698:	4638      	mov	r0, r7
 802569a:	f7fc fa55 	bl	8021b48 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 802569e:	f1ba 0f09 	cmp.w	sl, #9
 80256a2:	f43f af36 	beq.w	8025512 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 80256a6:	4936      	ldr	r1, [pc, #216]	@ (8025780 <http_cb+0x2f4>)
 80256a8:	a802      	add	r0, sp, #8
 80256aa:	f7fc fb15 	bl	8021cd8 <mg_http_get_header>
 80256ae:	4604      	mov	r4, r0
 80256b0:	2800      	cmp	r0, #0
 80256b2:	f47f af38 	bne.w	8025526 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 80256b6:	4933      	ldr	r1, [pc, #204]	@ (8025784 <http_cb+0x2f8>)
 80256b8:	a802      	add	r0, sp, #8
 80256ba:	f7fc fb0d 	bl	8021cd8 <mg_http_get_header>
 80256be:	2800      	cmp	r0, #0
 80256c0:	f43f af4e 	beq.w	8025560 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 80256c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80256c6:	eba3 0309 	sub.w	r3, r3, r9
 80256ca:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 80256ce:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 80256d0:	429a      	cmp	r2, r3
 80256d2:	d8c0      	bhi.n	8025656 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 80256d4:	4490      	add	r8, r2
 80256d6:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 80256d8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80256dc:	f013 0f04 	tst.w	r3, #4
 80256e0:	d005      	beq.n	80256ee <http_cb+0x262>
 80256e2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80256e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80256ea:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 80256ee:	aa02      	add	r2, sp, #8
 80256f0:	210b      	movs	r1, #11
 80256f2:	4638      	mov	r0, r7
 80256f4:	f7fc fa28 	bl	8021b48 <mg_call>
      if (c->is_accepted) {
 80256f8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80256fc:	f013 0f04 	tst.w	r3, #4
 8025700:	d0b2      	beq.n	8025668 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8025702:	4921      	ldr	r1, [pc, #132]	@ (8025788 <http_cb+0x2fc>)
 8025704:	a802      	add	r0, sp, #8
 8025706:	f7fc fae7 	bl	8021cd8 <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 802570a:	4605      	mov	r5, r0
 802570c:	2800      	cmp	r0, #0
 802570e:	d0ab      	beq.n	8025668 <http_cb+0x1dc>
 8025710:	ac8e      	add	r4, sp, #568	@ 0x238
 8025712:	491e      	ldr	r1, [pc, #120]	@ (802578c <http_cb+0x300>)
 8025714:	4620      	mov	r0, r4
 8025716:	f7fd fe3f 	bl	8023398 <mg_str_s>
 802571a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802571e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025722:	f7fd ff34 	bl	802358e <mg_strcasecmp>
 8025726:	2800      	cmp	r0, #0
 8025728:	d19e      	bne.n	8025668 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 802572a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 802572e:	f043 0310 	orr.w	r3, r3, #16
 8025732:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 8025736:	e78e      	b.n	8025656 <http_cb+0x1ca>
 8025738:	f04f 0900 	mov.w	r9, #0
 802573c:	e794      	b.n	8025668 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 802573e:	464a      	mov	r2, r9
 8025740:	2100      	movs	r1, #0
 8025742:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8025746:	f7ff f964 	bl	8024a12 <mg_iobuf_del>
 802574a:	e787      	b.n	802565c <http_cb+0x1d0>
 802574c:	200000a8 	.word	0x200000a8
 8025750:	0803a190 	.word	0x0803a190
 8025754:	08039744 	.word	0x08039744
 8025758:	080397bc 	.word	0x080397bc
 802575c:	080397d4 	.word	0x080397d4
 8025760:	080397dc 	.word	0x080397dc
 8025764:	08038f3c 	.word	0x08038f3c
 8025768:	08035520 	.word	0x08035520
 802576c:	08035a68 	.word	0x08035a68
 8025770:	08039808 	.word	0x08039808
 8025774:	08039a5c 	.word	0x08039a5c
 8025778:	080360e4 	.word	0x080360e4
 802577c:	0803982c 	.word	0x0803982c
 8025780:	080397e4 	.word	0x080397e4
 8025784:	080397f8 	.word	0x080397f8
 8025788:	0803983c 	.word	0x0803983c
 802578c:	08039848 	.word	0x08039848

08025790 <uri_to_path2>:
                        char *path, size_t path_size) {
 8025790:	b082      	sub	sp, #8
 8025792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025796:	b086      	sub	sp, #24
 8025798:	4681      	mov	r9, r0
 802579a:	460e      	mov	r6, r1
 802579c:	4690      	mov	r8, r2
 802579e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80257a0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80257a2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 80257a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80257a6:	9300      	str	r3, [sp, #0]
 80257a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80257aa:	4a6f      	ldr	r2, [pc, #444]	@ (8025968 <uri_to_path2+0x1d8>)
 80257ac:	4639      	mov	r1, r7
 80257ae:	4628      	mov	r0, r5
 80257b0:	f7fc ff68 	bl	8022684 <mg_snprintf>
  if (n + 2 >= path_size) {
 80257b4:	1c83      	adds	r3, r0, #2
 80257b6:	42bb      	cmp	r3, r7
 80257b8:	d227      	bcs.n	802580a <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 80257ba:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 80257be:	2300      	movs	r3, #0
 80257c0:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 80257c4:	b150      	cbz	r0, 80257dc <uri_to_path2+0x4c>
 80257c6:	182b      	adds	r3, r5, r0
 80257c8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80257cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80257ce:	d005      	beq.n	80257dc <uri_to_path2+0x4c>
 80257d0:	1c43      	adds	r3, r0, #1
 80257d2:	222f      	movs	r2, #47	@ 0x2f
 80257d4:	542a      	strb	r2, [r5, r0]
 80257d6:	2200      	movs	r2, #0
 80257d8:	54ea      	strb	r2, [r5, r3]
 80257da:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 80257dc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80257de:	68f1      	ldr	r1, [r6, #12]
 80257e0:	428c      	cmp	r4, r1
 80257e2:	d31c      	bcc.n	802581e <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 80257e4:	2300      	movs	r3, #0
 80257e6:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 80257ea:	ac02      	add	r4, sp, #8
 80257ec:	463a      	mov	r2, r7
 80257ee:	4629      	mov	r1, r5
 80257f0:	4620      	mov	r0, r4
 80257f2:	f7fd fddd 	bl	80233b0 <mg_str_n>
 80257f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80257fa:	f7ff fcdb 	bl	80251b4 <mg_path_is_sane>
 80257fe:	b1c0      	cbz	r0, 8025832 <uri_to_path2+0xa2>
  n = strlen(path);
 8025800:	4628      	mov	r0, r5
 8025802:	f7ea fd4d 	bl	80102a0 <strlen>
 8025806:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8025808:	e020      	b.n	802584c <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 802580a:	4b58      	ldr	r3, [pc, #352]	@ (802596c <uri_to_path2+0x1dc>)
 802580c:	4a58      	ldr	r2, [pc, #352]	@ (8025970 <uri_to_path2+0x1e0>)
 802580e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8025812:	4648      	mov	r0, r9
 8025814:	f7fd fc36 	bl	8023084 <mg_http_reply>
    return -1;
 8025818:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802581c:	e046      	b.n	80258ac <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 802581e:	2300      	movs	r3, #0
 8025820:	9300      	str	r3, [sp, #0]
 8025822:	1a3b      	subs	r3, r7, r0
 8025824:	182a      	adds	r2, r5, r0
 8025826:	1b09      	subs	r1, r1, r4
 8025828:	68b0      	ldr	r0, [r6, #8]
 802582a:	4420      	add	r0, r4
 802582c:	f7fe fc42 	bl	80240b4 <mg_url_decode>
 8025830:	e7d8      	b.n	80257e4 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 8025832:	4b50      	ldr	r3, [pc, #320]	@ (8025974 <uri_to_path2+0x1e4>)
 8025834:	4a4e      	ldr	r2, [pc, #312]	@ (8025970 <uri_to_path2+0x1e0>)
 8025836:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802583a:	4648      	mov	r0, r9
 802583c:	f7fd fc22 	bl	8023084 <mg_http_reply>
    return -1;
 8025840:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8025844:	e032      	b.n	80258ac <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8025846:	2200      	movs	r2, #0
 8025848:	54ea      	strb	r2, [r5, r3]
 802584a:	461c      	mov	r4, r3
 802584c:	2c01      	cmp	r4, #1
 802584e:	d905      	bls.n	802585c <uri_to_path2+0xcc>
 8025850:	1e63      	subs	r3, r4, #1
 8025852:	f815 c003 	ldrb.w	ip, [r5, r3]
 8025856:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 802585a:	d0f4      	beq.n	8025846 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 802585c:	f10d 0a10 	add.w	sl, sp, #16
 8025860:	4945      	ldr	r1, [pc, #276]	@ (8025978 <uri_to_path2+0x1e8>)
 8025862:	4650      	mov	r0, sl
 8025864:	f7fd fd98 	bl	8023398 <mg_str_s>
 8025868:	e89a 000c 	ldmia.w	sl, {r2, r3}
 802586c:	f106 0108 	add.w	r1, r6, #8
 8025870:	c903      	ldmia	r1, {r0, r1}
 8025872:	f7fd fe62 	bl	802353a <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 8025876:	b1f8      	cbz	r0, 80258b8 <uri_to_path2+0x128>
 8025878:	f8d8 3000 	ldr.w	r3, [r8]
 802587c:	2200      	movs	r2, #0
 802587e:	4611      	mov	r1, r2
 8025880:	4628      	mov	r0, r5
 8025882:	4798      	blx	r3
 8025884:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8025886:	4b3d      	ldr	r3, [pc, #244]	@ (802597c <uri_to_path2+0x1ec>)
 8025888:	681b      	ldr	r3, [r3, #0]
 802588a:	2b03      	cmp	r3, #3
 802588c:	dc17      	bgt.n	80258be <uri_to_path2+0x12e>
  if (flags == 0) {
 802588e:	f1ba 0f00 	cmp.w	sl, #0
 8025892:	d00b      	beq.n	80258ac <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8025894:	f01a 0104 	ands.w	r1, sl, #4
 8025898:	d007      	beq.n	80258aa <uri_to_path2+0x11a>
 802589a:	68f2      	ldr	r2, [r6, #12]
 802589c:	b12a      	cbz	r2, 80258aa <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 802589e:	68b3      	ldr	r3, [r6, #8]
 80258a0:	1898      	adds	r0, r3, r2
 80258a2:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80258a6:	282f      	cmp	r0, #47	@ 0x2f
 80258a8:	d11b      	bne.n	80258e2 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 80258aa:	bb39      	cbnz	r1, 80258fc <uri_to_path2+0x16c>
}
 80258ac:	4650      	mov	r0, sl
 80258ae:	b006      	add	sp, #24
 80258b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80258b4:	b002      	add	sp, #8
 80258b6:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 80258b8:	f04f 0a04 	mov.w	sl, #4
 80258bc:	e7e3      	b.n	8025886 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 80258be:	4b30      	ldr	r3, [pc, #192]	@ (8025980 <uri_to_path2+0x1f0>)
 80258c0:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 80258c4:	492f      	ldr	r1, [pc, #188]	@ (8025984 <uri_to_path2+0x1f4>)
 80258c6:	2004      	movs	r0, #4
 80258c8:	f7ff fc9e 	bl	8025208 <mg_log_prefix>
 80258cc:	f8cd a004 	str.w	sl, [sp, #4]
 80258d0:	9500      	str	r5, [sp, #0]
 80258d2:	68b3      	ldr	r3, [r6, #8]
 80258d4:	68f2      	ldr	r2, [r6, #12]
 80258d6:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 80258da:	482b      	ldr	r0, [pc, #172]	@ (8025988 <uri_to_path2+0x1f8>)
 80258dc:	f7fd fb7e 	bl	8022fdc <mg_log>
 80258e0:	e7d5      	b.n	802588e <uri_to_path2+0xfe>
    mg_printf(c,
 80258e2:	492a      	ldr	r1, [pc, #168]	@ (802598c <uri_to_path2+0x1fc>)
 80258e4:	4648      	mov	r0, r9
 80258e6:	f7fd fba7 	bl	8023038 <mg_printf>
    c->is_resp = 0;
 80258ea:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 80258ee:	f36f 13c7 	bfc	r3, #7, #1
 80258f2:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 80258f6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80258fa:	e7d7      	b.n	80258ac <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80258fc:	192e      	adds	r6, r5, r4
 80258fe:	1b3f      	subs	r7, r7, r4
 8025900:	4a23      	ldr	r2, [pc, #140]	@ (8025990 <uri_to_path2+0x200>)
 8025902:	4639      	mov	r1, r7
 8025904:	4630      	mov	r0, r6
 8025906:	f7fc febd 	bl	8022684 <mg_snprintf>
 802590a:	b130      	cbz	r0, 802591a <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 802590c:	f8d8 3000 	ldr.w	r3, [r8]
 8025910:	2200      	movs	r2, #0
 8025912:	4611      	mov	r1, r2
 8025914:	4628      	mov	r0, r5
 8025916:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8025918:	bb08      	cbnz	r0, 802595e <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 802591a:	4a1e      	ldr	r2, [pc, #120]	@ (8025994 <uri_to_path2+0x204>)
 802591c:	4639      	mov	r1, r7
 802591e:	4630      	mov	r0, r6
 8025920:	f7fc feb0 	bl	8022684 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8025924:	b130      	cbz	r0, 8025934 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8025926:	f8d8 3000 	ldr.w	r3, [r8]
 802592a:	2200      	movs	r2, #0
 802592c:	4611      	mov	r1, r2
 802592e:	4628      	mov	r0, r5
 8025930:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8025932:	b9b0      	cbnz	r0, 8025962 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8025934:	4a18      	ldr	r2, [pc, #96]	@ (8025998 <uri_to_path2+0x208>)
 8025936:	4639      	mov	r1, r7
 8025938:	4630      	mov	r0, r6
 802593a:	f7fc fea3 	bl	8022684 <mg_snprintf>
 802593e:	b158      	cbz	r0, 8025958 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 8025940:	f8d8 3000 	ldr.w	r3, [r8]
 8025944:	2200      	movs	r2, #0
 8025946:	4611      	mov	r1, r2
 8025948:	4628      	mov	r0, r5
 802594a:	4798      	blx	r3
                    0 &&
 802594c:	b120      	cbz	r0, 8025958 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 802594e:	340b      	adds	r4, #11
 8025950:	2200      	movs	r2, #0
 8025952:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 8025954:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8025956:	e7a9      	b.n	80258ac <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 8025958:	2300      	movs	r3, #0
 802595a:	7033      	strb	r3, [r6, #0]
 802595c:	e7a6      	b.n	80258ac <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 802595e:	4682      	mov	sl, r0
 8025960:	e7a4      	b.n	80258ac <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8025962:	4682      	mov	sl, r0
 8025964:	e7a2      	b.n	80258ac <uri_to_path2+0x11c>
 8025966:	bf00      	nop
 8025968:	08038e94 	.word	0x08038e94
 802596c:	08039850 	.word	0x08039850
 8025970:	08035a68 	.word	0x08035a68
 8025974:	08039864 	.word	0x08039864
 8025978:	08038f40 	.word	0x08038f40
 802597c:	200000a8 	.word	0x200000a8
 8025980:	0803a180 	.word	0x0803a180
 8025984:	08039744 	.word	0x08039744
 8025988:	08039874 	.word	0x08039874
 802598c:	08039888 	.word	0x08039888
 8025990:	080398c4 	.word	0x080398c4
 8025994:	080398d0 	.word	0x080398d0
 8025998:	080398e0 	.word	0x080398e0

0802599c <uri_to_path>:
                       size_t path_size) {
 802599c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80259a0:	b096      	sub	sp, #88	@ 0x58
 80259a2:	4606      	mov	r6, r0
 80259a4:	460d      	mov	r5, r1
 80259a6:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80259a8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80259ac:	f1b8 0f00 	cmp.w	r8, #0
 80259b0:	d069      	beq.n	8025a86 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 80259b2:	6811      	ldr	r1, [r2, #0]
 80259b4:	a80c      	add	r0, sp, #48	@ 0x30
 80259b6:	f7fd fcef 	bl	8023398 <mg_str_s>
 80259ba:	2300      	movs	r3, #0
 80259bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80259be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80259c0:	ab08      	add	r3, sp, #32
 80259c2:	aa0a      	add	r2, sp, #40	@ 0x28
 80259c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80259c8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 80259cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80259ce:	222c      	movs	r2, #44	@ 0x2c
 80259d0:	9200      	str	r2, [sp, #0]
 80259d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80259d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80259d8:	f7fd ff9b 	bl	8023912 <mg_span>
 80259dc:	2800      	cmp	r0, #0
 80259de:	d055      	beq.n	8025a8c <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 80259e0:	233d      	movs	r3, #61	@ 0x3d
 80259e2:	9300      	str	r3, [sp, #0]
 80259e4:	ab10      	add	r3, sp, #64	@ 0x40
 80259e6:	aa12      	add	r2, sp, #72	@ 0x48
 80259e8:	ac0e      	add	r4, sp, #56	@ 0x38
 80259ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80259ee:	f7fd ff90 	bl	8023912 <mg_span>
 80259f2:	b978      	cbnz	r0, 8025a14 <uri_to_path+0x78>
 80259f4:	ab12      	add	r3, sp, #72	@ 0x48
 80259f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80259fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80259fe:	ac06      	add	r4, sp, #24
 8025a00:	2200      	movs	r2, #0
 8025a02:	4611      	mov	r1, r2
 8025a04:	4620      	mov	r0, r4
 8025a06:	f7fd fcd3 	bl	80233b0 <mg_str_n>
 8025a0a:	ab10      	add	r3, sp, #64	@ 0x40
 8025a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025a10:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8025a14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025a16:	b9c3      	cbnz	r3, 8025a4a <uri_to_path+0xae>
 8025a18:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 8025a1c:	ac12      	add	r4, sp, #72	@ 0x48
 8025a1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025a22:	e889 0003 	stmia.w	r9, {r0, r1}
 8025a26:	f10d 0a18 	add.w	sl, sp, #24
 8025a2a:	4922      	ldr	r1, [pc, #136]	@ (8025ab4 <uri_to_path+0x118>)
 8025a2c:	4650      	mov	r0, sl
 8025a2e:	f7fd fcb3 	bl	8023398 <mg_str_s>
 8025a32:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8025a36:	e884 0003 	stmia.w	r4, {r0, r1}
 8025a3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8025a3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8025a40:	ab08      	add	r3, sp, #32
 8025a42:	e899 0003 	ldmia.w	r9, {r0, r1}
 8025a46:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8025a4a:	68eb      	ldr	r3, [r5, #12]
 8025a4c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025a4e:	4293      	cmp	r3, r2
 8025a50:	d3bc      	bcc.n	80259cc <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8025a52:	ac14      	add	r4, sp, #80	@ 0x50
 8025a54:	68a9      	ldr	r1, [r5, #8]
 8025a56:	4620      	mov	r0, r4
 8025a58:	f7fd fcaa 	bl	80233b0 <mg_str_n>
 8025a5c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8025a60:	a912      	add	r1, sp, #72	@ 0x48
 8025a62:	c903      	ldmia	r1, {r0, r1}
 8025a64:	f7fd fd69 	bl	802353a <mg_strcmp>
 8025a68:	2800      	cmp	r0, #0
 8025a6a:	d1af      	bne.n	80259cc <uri_to_path+0x30>
    u = k, p = v;
 8025a6c:	ab0a      	add	r3, sp, #40	@ 0x28
 8025a6e:	aa12      	add	r2, sp, #72	@ 0x48
 8025a70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025a74:	e883 0003 	stmia.w	r3, {r0, r1}
 8025a78:	ab08      	add	r3, sp, #32
 8025a7a:	aa10      	add	r2, sp, #64	@ 0x40
 8025a7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025a80:	e883 0003 	stmia.w	r3, {r0, r1}
 8025a84:	e7a2      	b.n	80259cc <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8025a86:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8025ab8 <uri_to_path+0x11c>
 8025a8a:	e792      	b.n	80259b2 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8025a8c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025a8e:	9304      	str	r3, [sp, #16]
 8025a90:	9703      	str	r7, [sp, #12]
 8025a92:	ab01      	add	r3, sp, #4
 8025a94:	aa08      	add	r2, sp, #32
 8025a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025a9a:	e883 0003 	stmia.w	r3, {r0, r1}
 8025a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025aa0:	9300      	str	r3, [sp, #0]
 8025aa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025aa4:	4642      	mov	r2, r8
 8025aa6:	4629      	mov	r1, r5
 8025aa8:	4630      	mov	r0, r6
 8025aaa:	f7ff fe71 	bl	8025790 <uri_to_path2>
}
 8025aae:	b016      	add	sp, #88	@ 0x58
 8025ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025ab4:	08038f40 	.word	0x08038f40
 8025ab8:	200000ac 	.word	0x200000ac

08025abc <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 8025abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025ac0:	b0a7      	sub	sp, #156	@ 0x9c
 8025ac2:	4607      	mov	r7, r0
 8025ac4:	460e      	mov	r6, r1
 8025ac6:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 8025ac8:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8025acc:	2380      	movs	r3, #128	@ 0x80
 8025ace:	9300      	str	r3, [sp, #0]
 8025ad0:	ab02      	add	r3, sp, #8
 8025ad2:	f7ff ff63 	bl	802599c <uri_to_path>
  if (flags < 0) {
 8025ad6:	2800      	cmp	r0, #0
 8025ad8:	db20      	blt.n	8025b1c <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 8025ada:	f010 0f04 	tst.w	r0, #4
 8025ade:	d120      	bne.n	8025b22 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8025ae0:	b1b0      	cbz	r0, 8025b10 <mg_http_serve_dir+0x54>
 8025ae2:	f1b8 0f00 	cmp.w	r8, #0
 8025ae6:	d013      	beq.n	8025b10 <mg_http_serve_dir+0x54>
 8025ae8:	ac22      	add	r4, sp, #136	@ 0x88
 8025aea:	a902      	add	r1, sp, #8
 8025aec:	4620      	mov	r0, r4
 8025aee:	f7fd fc53 	bl	8023398 <mg_str_s>
 8025af2:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 8025af6:	4641      	mov	r1, r8
 8025af8:	4648      	mov	r0, r9
 8025afa:	f7fd fc4d 	bl	8023398 <mg_str_s>
 8025afe:	2300      	movs	r3, #0
 8025b00:	9300      	str	r3, [sp, #0]
 8025b02:	e899 000c 	ldmia.w	r9, {r2, r3}
 8025b06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025b0a:	f7fd fe67 	bl	80237dc <mg_match>
 8025b0e:	b978      	cbnz	r0, 8025b30 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8025b10:	462b      	mov	r3, r5
 8025b12:	aa02      	add	r2, sp, #8
 8025b14:	4631      	mov	r1, r6
 8025b16:	4638      	mov	r0, r7
 8025b18:	f7fe f81c 	bl	8023b54 <mg_http_serve_file>
}
 8025b1c:	b027      	add	sp, #156	@ 0x9c
 8025b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 8025b22:	ab02      	add	r3, sp, #8
 8025b24:	462a      	mov	r2, r5
 8025b26:	4631      	mov	r1, r6
 8025b28:	4638      	mov	r0, r7
 8025b2a:	f7fe fbef 	bl	802430c <listdir>
 8025b2e:	e7f5      	b.n	8025b1c <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8025b30:	aa02      	add	r2, sp, #8
 8025b32:	6829      	ldr	r1, [r5, #0]
 8025b34:	4638      	mov	r0, r7
 8025b36:	f7fd fc25 	bl	8023384 <mg_http_serve_ssi>
 8025b3a:	e7ef      	b.n	8025b1c <mg_http_serve_dir+0x60>

08025b3c <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 8025b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b3e:	b0c3      	sub	sp, #268	@ 0x10c
 8025b40:	4605      	mov	r5, r0
 8025b42:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8025b44:	688b      	ldr	r3, [r1, #8]
 8025b46:	695e      	ldr	r6, [r3, #20]
 8025b48:	b1b6      	cbz	r6, 8025b78 <printdirentry+0x3c>
  size_t size = 0;
 8025b4a:	2300      	movs	r3, #0
 8025b4c:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 8025b4e:	2200      	movs	r2, #0
 8025b50:	2300      	movs	r3, #0
 8025b52:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8025b56:	9501      	str	r5, [sp, #4]
 8025b58:	232f      	movs	r3, #47	@ 0x2f
 8025b5a:	9300      	str	r3, [sp, #0]
 8025b5c:	68e3      	ldr	r3, [r4, #12]
 8025b5e:	4a3c      	ldr	r2, [pc, #240]	@ (8025c50 <printdirentry+0x114>)
 8025b60:	2180      	movs	r1, #128	@ 0x80
 8025b62:	a81e      	add	r0, sp, #120	@ 0x78
 8025b64:	f7fc fd8e 	bl	8022684 <mg_snprintf>
 8025b68:	2880      	cmp	r0, #128	@ 0x80
 8025b6a:	d913      	bls.n	8025b94 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 8025b6c:	4b39      	ldr	r3, [pc, #228]	@ (8025c54 <printdirentry+0x118>)
 8025b6e:	681b      	ldr	r3, [r3, #0]
 8025b70:	2b00      	cmp	r3, #0
 8025b72:	dc03      	bgt.n	8025b7c <printdirentry+0x40>
}
 8025b74:	b043      	add	sp, #268	@ 0x10c
 8025b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8025b78:	4e37      	ldr	r6, [pc, #220]	@ (8025c58 <printdirentry+0x11c>)
 8025b7a:	e7e6      	b.n	8025b4a <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 8025b7c:	4b37      	ldr	r3, [pc, #220]	@ (8025c5c <printdirentry+0x120>)
 8025b7e:	f640 3248 	movw	r2, #2888	@ 0xb48
 8025b82:	4937      	ldr	r1, [pc, #220]	@ (8025c60 <printdirentry+0x124>)
 8025b84:	2001      	movs	r0, #1
 8025b86:	f7ff fb3f 	bl	8025208 <mg_log_prefix>
 8025b8a:	4629      	mov	r1, r5
 8025b8c:	4835      	ldr	r0, [pc, #212]	@ (8025c64 <printdirentry+0x128>)
 8025b8e:	f7fd fa25 	bl	8022fdc <mg_log>
 8025b92:	e7ef      	b.n	8025b74 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8025b94:	6833      	ldr	r3, [r6, #0]
 8025b96:	aa3e      	add	r2, sp, #248	@ 0xf8
 8025b98:	a941      	add	r1, sp, #260	@ 0x104
 8025b9a:	a81e      	add	r0, sp, #120	@ 0x78
 8025b9c:	4798      	blx	r3
 8025b9e:	b9a8      	cbnz	r0, 8025bcc <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8025ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8025c54 <printdirentry+0x118>)
 8025ba2:	681b      	ldr	r3, [r3, #0]
 8025ba4:	2b00      	cmp	r3, #0
 8025ba6:	dde5      	ble.n	8025b74 <printdirentry+0x38>
 8025ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8025c5c <printdirentry+0x120>)
 8025baa:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8025bae:	492c      	ldr	r1, [pc, #176]	@ (8025c60 <printdirentry+0x124>)
 8025bb0:	2001      	movs	r0, #1
 8025bb2:	f7ff fb29 	bl	8025208 <mg_log_prefix>
 8025bb6:	6823      	ldr	r3, [r4, #0]
 8025bb8:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8025bba:	f007 f925 	bl	802ce08 <__errno>
 8025bbe:	6803      	ldr	r3, [r0, #0]
 8025bc0:	aa1e      	add	r2, sp, #120	@ 0x78
 8025bc2:	4621      	mov	r1, r4
 8025bc4:	4828      	ldr	r0, [pc, #160]	@ (8025c68 <printdirentry+0x12c>)
 8025bc6:	f7fd fa09 	bl	8022fdc <mg_log>
 8025bca:	e7d3      	b.n	8025b74 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8025bcc:	f010 0604 	ands.w	r6, r0, #4
 8025bd0:	d02d      	beq.n	8025c2e <printdirentry+0xf2>
 8025bd2:	4f26      	ldr	r7, [pc, #152]	@ (8025c6c <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 8025bd4:	2e00      	cmp	r6, #0
 8025bd6:	d02c      	beq.n	8025c32 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8025bd8:	4b25      	ldr	r3, [pc, #148]	@ (8025c70 <printdirentry+0x134>)
 8025bda:	4a26      	ldr	r2, [pc, #152]	@ (8025c74 <printdirentry+0x138>)
 8025bdc:	2128      	movs	r1, #40	@ 0x28
 8025bde:	a814      	add	r0, sp, #80	@ 0x50
 8025be0:	f7fc fd50 	bl	8022684 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8025be4:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8025be6:	4a24      	ldr	r2, [pc, #144]	@ (8025c78 <printdirentry+0x13c>)
 8025be8:	2128      	movs	r1, #40	@ 0x28
 8025bea:	eb0d 0001 	add.w	r0, sp, r1
 8025bee:	f7fc fd49 	bl	8022684 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8025bf2:	4628      	mov	r0, r5
 8025bf4:	f7ea fb54 	bl	80102a0 <strlen>
 8025bf8:	4601      	mov	r1, r0
 8025bfa:	2380      	movs	r3, #128	@ 0x80
 8025bfc:	aa1e      	add	r2, sp, #120	@ 0x78
 8025bfe:	4628      	mov	r0, r5
 8025c00:	f7fd fa94 	bl	802312c <mg_url_encode>
 8025c04:	4602      	mov	r2, r0
    mg_printf(d->c,
 8025c06:	6820      	ldr	r0, [r4, #0]
 8025c08:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8025c0a:	b9e6      	cbnz	r6, 8025c46 <printdirentry+0x10a>
 8025c0c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8025c0e:	2400      	movs	r4, #0
 8025c10:	ae14      	add	r6, sp, #80	@ 0x50
 8025c12:	9608      	str	r6, [sp, #32]
 8025c14:	9306      	str	r3, [sp, #24]
 8025c16:	9407      	str	r4, [sp, #28]
 8025c18:	ab0a      	add	r3, sp, #40	@ 0x28
 8025c1a:	9304      	str	r3, [sp, #16]
 8025c1c:	9103      	str	r1, [sp, #12]
 8025c1e:	9702      	str	r7, [sp, #8]
 8025c20:	9501      	str	r5, [sp, #4]
 8025c22:	9700      	str	r7, [sp, #0]
 8025c24:	ab1e      	add	r3, sp, #120	@ 0x78
 8025c26:	4915      	ldr	r1, [pc, #84]	@ (8025c7c <printdirentry+0x140>)
 8025c28:	f7fd fa06 	bl	8023038 <mg_printf>
}
 8025c2c:	e7a2      	b.n	8025b74 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8025c2e:	4f14      	ldr	r7, [pc, #80]	@ (8025c80 <printdirentry+0x144>)
 8025c30:	e7d0      	b.n	8025bd4 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8025c32:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8025c34:	9300      	str	r3, [sp, #0]
 8025c36:	2300      	movs	r3, #0
 8025c38:	9301      	str	r3, [sp, #4]
 8025c3a:	4a12      	ldr	r2, [pc, #72]	@ (8025c84 <printdirentry+0x148>)
 8025c3c:	2128      	movs	r1, #40	@ 0x28
 8025c3e:	a814      	add	r0, sp, #80	@ 0x50
 8025c40:	f7fc fd20 	bl	8022684 <mg_snprintf>
 8025c44:	e7ce      	b.n	8025be4 <printdirentry+0xa8>
    mg_printf(d->c,
 8025c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025c4a:	461c      	mov	r4, r3
 8025c4c:	e7e0      	b.n	8025c10 <printdirentry+0xd4>
 8025c4e:	bf00      	nop
 8025c50:	080398f0 	.word	0x080398f0
 8025c54:	200000a8 	.word	0x200000a8
 8025c58:	200000ac 	.word	0x200000ac
 8025c5c:	0803a170 	.word	0x0803a170
 8025c60:	08039744 	.word	0x08039744
 8025c64:	080398f8 	.word	0x080398f8
 8025c68:	08039908 	.word	0x08039908
 8025c6c:	08038f40 	.word	0x08038f40
 8025c70:	0803991c 	.word	0x0803991c
 8025c74:	08039a5c 	.word	0x08039a5c
 8025c78:	08039d0c 	.word	0x08039d0c
 8025c7c:	0803992c 	.word	0x0803992c
 8025c80:	08035a68 	.word	0x08035a68
 8025c84:	08039924 	.word	0x08039924

08025c88 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8025c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025c8c:	b0ca      	sub	sp, #296	@ 0x128
 8025c8e:	4607      	mov	r7, r0
 8025c90:	460d      	mov	r5, r1
 8025c92:	4616      	mov	r6, r2
 8025c94:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8025c96:	2330      	movs	r3, #48	@ 0x30
 8025c98:	9343      	str	r3, [sp, #268]	@ 0x10c
 8025c9a:	2400      	movs	r4, #0
 8025c9c:	9444      	str	r4, [sp, #272]	@ 0x110
 8025c9e:	9445      	str	r4, [sp, #276]	@ 0x114
 8025ca0:	9446      	str	r4, [sp, #280]	@ 0x118
 8025ca2:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8025ca4:	f101 0a10 	add.w	sl, r1, #16
 8025ca8:	2314      	movs	r3, #20
 8025caa:	aa43      	add	r2, sp, #268	@ 0x10c
 8025cac:	4964      	ldr	r1, [pc, #400]	@ (8025e40 <mg_http_upload+0x1b8>)
 8025cae:	4650      	mov	r0, sl
 8025cb0:	f7fe fa5f 	bl	8024172 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8025cb4:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 8025cb8:	2380      	movs	r3, #128	@ 0x80
 8025cba:	464a      	mov	r2, r9
 8025cbc:	4961      	ldr	r1, [pc, #388]	@ (8025e44 <mg_http_upload+0x1bc>)
 8025cbe:	4650      	mov	r0, sl
 8025cc0:	f7fe fa57 	bl	8024172 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8025cc4:	4622      	mov	r2, r4
 8025cc6:	4621      	mov	r1, r4
 8025cc8:	a843      	add	r0, sp, #268	@ 0x10c
 8025cca:	f005 fa1f 	bl	802b10c <strtol>
 8025cce:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8025cd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8025cd4:	232f      	movs	r3, #47	@ 0x2f
 8025cd6:	9300      	str	r3, [sp, #0]
 8025cd8:	4643      	mov	r3, r8
 8025cda:	4a5b      	ldr	r2, [pc, #364]	@ (8025e48 <mg_http_upload+0x1c0>)
 8025cdc:	2180      	movs	r1, #128	@ 0x80
 8025cde:	a803      	add	r0, sp, #12
 8025ce0:	f7fc fcd0 	bl	8022684 <mg_snprintf>
  if (hm->body.len == 0) {
 8025ce4:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 8025ce8:	f1b8 0f00 	cmp.w	r8, #0
 8025cec:	d047      	beq.n	8025d7e <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 8025cee:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8025cf2:	2b00      	cmp	r3, #0
 8025cf4:	d04c      	beq.n	8025d90 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8025cf6:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 8025cfa:	a923      	add	r1, sp, #140	@ 0x8c
 8025cfc:	4648      	mov	r0, r9
 8025cfe:	f7fd fb4b 	bl	8023398 <mg_str_s>
 8025d02:	e899 0003 	ldmia.w	r9, {r0, r1}
 8025d06:	f7ff fa55 	bl	80251b4 <mg_path_is_sane>
 8025d0a:	2800      	cmp	r0, #0
 8025d0c:	d04a      	beq.n	8025da4 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 8025d0e:	2c00      	cmp	r4, #0
 8025d10:	db54      	blt.n	8025dbc <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8025d12:	44a0      	add	r8, r4
 8025d14:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8025d16:	4598      	cmp	r8, r3
 8025d18:	d85a      	bhi.n	8025dd0 <mg_http_upload+0x148>
    size_t current_size = 0;
 8025d1a:	2300      	movs	r3, #0
 8025d1c:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8025d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8025e4c <mg_http_upload+0x1c4>)
 8025d20:	681b      	ldr	r3, [r3, #0]
 8025d22:	2b02      	cmp	r3, #2
 8025d24:	dc61      	bgt.n	8025dea <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8025d26:	b914      	cbnz	r4, 8025d2e <mg_http_upload+0xa6>
 8025d28:	6a33      	ldr	r3, [r6, #32]
 8025d2a:	a803      	add	r0, sp, #12
 8025d2c:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8025d2e:	6833      	ldr	r3, [r6, #0]
 8025d30:	2200      	movs	r2, #0
 8025d32:	a902      	add	r1, sp, #8
 8025d34:	a803      	add	r0, sp, #12
 8025d36:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8025d38:	2c00      	cmp	r4, #0
 8025d3a:	dd02      	ble.n	8025d42 <mg_http_upload+0xba>
 8025d3c:	9b02      	ldr	r3, [sp, #8]
 8025d3e:	429c      	cmp	r4, r3
 8025d40:	d162      	bne.n	8025e08 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8025d42:	2202      	movs	r2, #2
 8025d44:	a903      	add	r1, sp, #12
 8025d46:	4630      	mov	r0, r6
 8025d48:	f7fb ff0d 	bl	8021b66 <mg_fs_open>
 8025d4c:	4680      	mov	r8, r0
 8025d4e:	2800      	cmp	r0, #0
 8025d50:	d066      	beq.n	8025e20 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8025d52:	6973      	ldr	r3, [r6, #20]
 8025d54:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8025d58:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 8025d5c:	6800      	ldr	r0, [r0, #0]
 8025d5e:	4798      	blx	r3
 8025d60:	4404      	add	r4, r0
      mg_fs_close(fd);
 8025d62:	4640      	mov	r0, r8
 8025d64:	f7fb ff18 	bl	8021b98 <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8025d68:	9400      	str	r4, [sp, #0]
 8025d6a:	4b39      	ldr	r3, [pc, #228]	@ (8025e50 <mg_http_upload+0x1c8>)
 8025d6c:	4a39      	ldr	r2, [pc, #228]	@ (8025e54 <mg_http_upload+0x1cc>)
 8025d6e:	21c8      	movs	r1, #200	@ 0xc8
 8025d70:	4638      	mov	r0, r7
 8025d72:	f7fd f987 	bl	8023084 <mg_http_reply>
}
 8025d76:	4620      	mov	r0, r4
 8025d78:	b04a      	add	sp, #296	@ 0x128
 8025d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8025d7e:	2400      	movs	r4, #0
 8025d80:	9400      	str	r4, [sp, #0]
 8025d82:	4b33      	ldr	r3, [pc, #204]	@ (8025e50 <mg_http_upload+0x1c8>)
 8025d84:	4a33      	ldr	r2, [pc, #204]	@ (8025e54 <mg_http_upload+0x1cc>)
 8025d86:	21c8      	movs	r1, #200	@ 0xc8
 8025d88:	4638      	mov	r0, r7
 8025d8a:	f7fd f97b 	bl	8023084 <mg_http_reply>
 8025d8e:	e7f2      	b.n	8025d76 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8025d90:	4b31      	ldr	r3, [pc, #196]	@ (8025e58 <mg_http_upload+0x1d0>)
 8025d92:	4a32      	ldr	r2, [pc, #200]	@ (8025e5c <mg_http_upload+0x1d4>)
 8025d94:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8025d98:	4638      	mov	r0, r7
 8025d9a:	f7fd f973 	bl	8023084 <mg_http_reply>
    res = -1;
 8025d9e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8025da2:	e7e8      	b.n	8025d76 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8025da4:	ab23      	add	r3, sp, #140	@ 0x8c
 8025da6:	9300      	str	r3, [sp, #0]
 8025da8:	4b2d      	ldr	r3, [pc, #180]	@ (8025e60 <mg_http_upload+0x1d8>)
 8025daa:	4a2c      	ldr	r2, [pc, #176]	@ (8025e5c <mg_http_upload+0x1d4>)
 8025dac:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8025db0:	4638      	mov	r0, r7
 8025db2:	f7fd f967 	bl	8023084 <mg_http_reply>
    res = -2;
 8025db6:	f06f 0401 	mvn.w	r4, #1
 8025dba:	e7dc      	b.n	8025d76 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 8025dbc:	4b29      	ldr	r3, [pc, #164]	@ (8025e64 <mg_http_upload+0x1dc>)
 8025dbe:	4a27      	ldr	r2, [pc, #156]	@ (8025e5c <mg_http_upload+0x1d4>)
 8025dc0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8025dc4:	4638      	mov	r0, r7
 8025dc6:	f7fd f95d 	bl	8023084 <mg_http_reply>
    res = -3;
 8025dca:	f06f 0402 	mvn.w	r4, #2
 8025dce:	e7d2      	b.n	8025d76 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8025dd0:	9301      	str	r3, [sp, #4]
 8025dd2:	ab03      	add	r3, sp, #12
 8025dd4:	9300      	str	r3, [sp, #0]
 8025dd6:	4b24      	ldr	r3, [pc, #144]	@ (8025e68 <mg_http_upload+0x1e0>)
 8025dd8:	4a20      	ldr	r2, [pc, #128]	@ (8025e5c <mg_http_upload+0x1d4>)
 8025dda:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8025dde:	4638      	mov	r0, r7
 8025de0:	f7fd f950 	bl	8023084 <mg_http_reply>
    res = -4;
 8025de4:	f06f 0403 	mvn.w	r4, #3
 8025de8:	e7c5      	b.n	8025d76 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8025dea:	4b20      	ldr	r3, [pc, #128]	@ (8025e6c <mg_http_upload+0x1e4>)
 8025dec:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8025df0:	491f      	ldr	r1, [pc, #124]	@ (8025e70 <mg_http_upload+0x1e8>)
 8025df2:	2003      	movs	r0, #3
 8025df4:	f7ff fa08 	bl	8025208 <mg_log_prefix>
 8025df8:	4623      	mov	r3, r4
 8025dfa:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8025dfe:	a903      	add	r1, sp, #12
 8025e00:	481c      	ldr	r0, [pc, #112]	@ (8025e74 <mg_http_upload+0x1ec>)
 8025e02:	f7fd f8eb 	bl	8022fdc <mg_log>
 8025e06:	e78e      	b.n	8025d26 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8025e08:	ab03      	add	r3, sp, #12
 8025e0a:	9300      	str	r3, [sp, #0]
 8025e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8025e78 <mg_http_upload+0x1f0>)
 8025e0e:	4a13      	ldr	r2, [pc, #76]	@ (8025e5c <mg_http_upload+0x1d4>)
 8025e10:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8025e14:	4638      	mov	r0, r7
 8025e16:	f7fd f935 	bl	8023084 <mg_http_reply>
      res = -5;
 8025e1a:	f06f 0404 	mvn.w	r4, #4
 8025e1e:	e7aa      	b.n	8025d76 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8025e20:	f006 fff2 	bl	802ce08 <__errno>
 8025e24:	6803      	ldr	r3, [r0, #0]
 8025e26:	9301      	str	r3, [sp, #4]
 8025e28:	ab03      	add	r3, sp, #12
 8025e2a:	9300      	str	r3, [sp, #0]
 8025e2c:	4b13      	ldr	r3, [pc, #76]	@ (8025e7c <mg_http_upload+0x1f4>)
 8025e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8025e5c <mg_http_upload+0x1d4>)
 8025e30:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8025e34:	4638      	mov	r0, r7
 8025e36:	f7fd f925 	bl	8023084 <mg_http_reply>
      res = -6;
 8025e3a:	f06f 0405 	mvn.w	r4, #5
 8025e3e:	e79a      	b.n	8025d76 <mg_http_upload+0xee>
 8025e40:	08039984 	.word	0x08039984
 8025e44:	080399ac 	.word	0x080399ac
 8025e48:	080398f0 	.word	0x080398f0
 8025e4c:	200000a8 	.word	0x200000a8
 8025e50:	0803998c 	.word	0x0803998c
 8025e54:	08035564 	.word	0x08035564
 8025e58:	08039990 	.word	0x08039990
 8025e5c:	08035a68 	.word	0x08035a68
 8025e60:	080399a0 	.word	0x080399a0
 8025e64:	080399b4 	.word	0x080399b4
 8025e68:	080399c4 	.word	0x080399c4
 8025e6c:	0803a160 	.word	0x0803a160
 8025e70:	08039744 	.word	0x08039744
 8025e74:	080399e0 	.word	0x080399e0
 8025e78:	080399f8 	.word	0x080399f8
 8025e7c:	08039a0c 	.word	0x08039a0c

08025e80 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8025e80:	b570      	push	{r4, r5, r6, lr}
 8025e82:	b082      	sub	sp, #8
 8025e84:	4604      	mov	r4, r0
 8025e86:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 8025e88:	68e1      	ldr	r1, [r4, #12]
 8025e8a:	f7f9 fc7b 	bl	801f784 <roundup>
  if (new_size == 0) {
 8025e8e:	b130      	cbz	r0, 8025e9e <mg_iobuf_resize+0x1e>
 8025e90:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8025e92:	6863      	ldr	r3, [r4, #4]
 8025e94:	4283      	cmp	r3, r0
 8025e96:	d10f      	bne.n	8025eb8 <mg_iobuf_resize+0x38>
  int ok = 1;
 8025e98:	2001      	movs	r0, #1
}
 8025e9a:	b002      	add	sp, #8
 8025e9c:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 8025e9e:	6861      	ldr	r1, [r4, #4]
 8025ea0:	6820      	ldr	r0, [r4, #0]
 8025ea2:	f7fe fdab 	bl	80249fc <mg_bzero>
    free(io->buf);
 8025ea6:	6820      	ldr	r0, [r4, #0]
 8025ea8:	f7f3 fea0 	bl	8019bec <vPortFree>
    io->buf = NULL;
 8025eac:	2300      	movs	r3, #0
 8025eae:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 8025eb0:	6063      	str	r3, [r4, #4]
 8025eb2:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 8025eb4:	2001      	movs	r0, #1
 8025eb6:	e7f0      	b.n	8025e9a <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 8025eb8:	4601      	mov	r1, r0
 8025eba:	2001      	movs	r0, #1
 8025ebc:	f7fb fd1c 	bl	80218f8 <mg_calloc>
    if (p != NULL) {
 8025ec0:	4606      	mov	r6, r0
 8025ec2:	b198      	cbz	r0, 8025eec <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 8025ec4:	68a2      	ldr	r2, [r4, #8]
 8025ec6:	42aa      	cmp	r2, r5
 8025ec8:	bf28      	it	cs
 8025eca:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8025ecc:	b11a      	cbz	r2, 8025ed6 <mg_iobuf_resize+0x56>
 8025ece:	6821      	ldr	r1, [r4, #0]
 8025ed0:	b109      	cbz	r1, 8025ed6 <mg_iobuf_resize+0x56>
 8025ed2:	f005 fd7b 	bl	802b9cc <memmove>
      mg_bzero(io->buf, io->size);
 8025ed6:	6861      	ldr	r1, [r4, #4]
 8025ed8:	6820      	ldr	r0, [r4, #0]
 8025eda:	f7fe fd8f 	bl	80249fc <mg_bzero>
      free(io->buf);
 8025ede:	6820      	ldr	r0, [r4, #0]
 8025ee0:	f7f3 fe84 	bl	8019bec <vPortFree>
      io->buf = (unsigned char *) p;
 8025ee4:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 8025ee6:	6065      	str	r5, [r4, #4]
  int ok = 1;
 8025ee8:	2001      	movs	r0, #1
 8025eea:	e7d6      	b.n	8025e9a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8025eec:	4b0b      	ldr	r3, [pc, #44]	@ (8025f1c <mg_iobuf_resize+0x9c>)
 8025eee:	681b      	ldr	r3, [r3, #0]
 8025ef0:	2b00      	cmp	r3, #0
 8025ef2:	dc01      	bgt.n	8025ef8 <mg_iobuf_resize+0x78>
      ok = 0;
 8025ef4:	2000      	movs	r0, #0
  return ok;
 8025ef6:	e7d0      	b.n	8025e9a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8025ef8:	4b09      	ldr	r3, [pc, #36]	@ (8025f20 <mg_iobuf_resize+0xa0>)
 8025efa:	f640 5244 	movw	r2, #3396	@ 0xd44
 8025efe:	4909      	ldr	r1, [pc, #36]	@ (8025f24 <mg_iobuf_resize+0xa4>)
 8025f00:	2001      	movs	r0, #1
 8025f02:	f7ff f981 	bl	8025208 <mg_log_prefix>
 8025f06:	2600      	movs	r6, #0
 8025f08:	9500      	str	r5, [sp, #0]
 8025f0a:	9601      	str	r6, [sp, #4]
 8025f0c:	6862      	ldr	r2, [r4, #4]
 8025f0e:	4633      	mov	r3, r6
 8025f10:	4805      	ldr	r0, [pc, #20]	@ (8025f28 <mg_iobuf_resize+0xa8>)
 8025f12:	f7fd f863 	bl	8022fdc <mg_log>
      ok = 0;
 8025f16:	4630      	mov	r0, r6
 8025f18:	e7bf      	b.n	8025e9a <mg_iobuf_resize+0x1a>
 8025f1a:	bf00      	nop
 8025f1c:	200000a8 	.word	0x200000a8
 8025f20:	0803a150 	.word	0x0803a150
 8025f24:	08039744 	.word	0x08039744
 8025f28:	08039a1c 	.word	0x08039a1c

08025f2c <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8025f2c:	b538      	push	{r3, r4, r5, lr}
 8025f2e:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8025f30:	2908      	cmp	r1, #8
 8025f32:	d004      	beq.n	8025f3e <static_cb+0x12>
 8025f34:	2902      	cmp	r1, #2
 8025f36:	d002      	beq.n	8025f3e <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 8025f38:	2909      	cmp	r1, #9
 8025f3a:	d02b      	beq.n	8025f94 <static_cb+0x68>
}
 8025f3c:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8025f3e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8025f42:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8025f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8025f48:	d31d      	bcc.n	8025f86 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8025f4a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8025f4c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8025f4e:	4299      	cmp	r1, r3
 8025f50:	d2f4      	bcs.n	8025f3c <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8025f52:	1a5b      	subs	r3, r3, r1
 8025f54:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8025f58:	429a      	cmp	r2, r3
 8025f5a:	d300      	bcc.n	8025f5e <static_cb+0x32>
 8025f5c:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8025f5e:	686b      	ldr	r3, [r5, #4]
 8025f60:	691b      	ldr	r3, [r3, #16]
 8025f62:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8025f64:	4401      	add	r1, r0
 8025f66:	6828      	ldr	r0, [r5, #0]
 8025f68:	4798      	blx	r3
    c->send.len += n;
 8025f6a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8025f6c:	4403      	add	r3, r0
 8025f6e:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 8025f70:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8025f74:	1a1b      	subs	r3, r3, r0
 8025f76:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 8025f7a:	2800      	cmp	r0, #0
 8025f7c:	d1de      	bne.n	8025f3c <static_cb+0x10>
 8025f7e:	4620      	mov	r0, r4
 8025f80:	f7fb fe16 	bl	8021bb0 <restore_http_cb>
 8025f84:	e7da      	b.n	8025f3c <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8025f86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8025f8a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8025f8e:	f7ff ff77 	bl	8025e80 <mg_iobuf_resize>
 8025f92:	e7da      	b.n	8025f4a <static_cb+0x1e>
    restore_http_cb(c);
 8025f94:	f7fb fe0c 	bl	8021bb0 <restore_http_cb>
  (void) ev_data;
 8025f98:	e7d0      	b.n	8025f3c <static_cb+0x10>

08025f9a <mg_iobuf_add>:
                    size_t len) {
 8025f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f9e:	4604      	mov	r4, r0
 8025fa0:	460f      	mov	r7, r1
 8025fa2:	4690      	mov	r8, r2
 8025fa4:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8025fa6:	6880      	ldr	r0, [r0, #8]
 8025fa8:	68e1      	ldr	r1, [r4, #12]
 8025faa:	4418      	add	r0, r3
 8025fac:	f7f9 fbea 	bl	801f784 <roundup>
 8025fb0:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8025fb2:	4601      	mov	r1, r0
 8025fb4:	4620      	mov	r0, r4
 8025fb6:	f7ff ff63 	bl	8025e80 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8025fba:	6863      	ldr	r3, [r4, #4]
 8025fbc:	42b3      	cmp	r3, r6
 8025fbe:	d000      	beq.n	8025fc2 <mg_iobuf_add+0x28>
 8025fc0:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8025fc2:	68a2      	ldr	r2, [r4, #8]
 8025fc4:	42ba      	cmp	r2, r7
 8025fc6:	d812      	bhi.n	8025fee <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8025fc8:	f1b8 0f00 	cmp.w	r8, #0
 8025fcc:	d005      	beq.n	8025fda <mg_iobuf_add+0x40>
 8025fce:	6820      	ldr	r0, [r4, #0]
 8025fd0:	462a      	mov	r2, r5
 8025fd2:	4641      	mov	r1, r8
 8025fd4:	4438      	add	r0, r7
 8025fd6:	f005 fcf9 	bl	802b9cc <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8025fda:	68a3      	ldr	r3, [r4, #8]
 8025fdc:	42bb      	cmp	r3, r7
 8025fde:	d200      	bcs.n	8025fe2 <mg_iobuf_add+0x48>
 8025fe0:	60a7      	str	r7, [r4, #8]
  io->len += len;
 8025fe2:	68a3      	ldr	r3, [r4, #8]
 8025fe4:	442b      	add	r3, r5
 8025fe6:	60a3      	str	r3, [r4, #8]
}
 8025fe8:	4628      	mov	r0, r5
 8025fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8025fee:	6823      	ldr	r3, [r4, #0]
 8025ff0:	19e8      	adds	r0, r5, r7
 8025ff2:	1bd2      	subs	r2, r2, r7
 8025ff4:	19d9      	adds	r1, r3, r7
 8025ff6:	4418      	add	r0, r3
 8025ff8:	f005 fce8 	bl	802b9cc <memmove>
 8025ffc:	e7e4      	b.n	8025fc8 <mg_iobuf_add+0x2e>

08025ffe <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 8025ffe:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 8026000:	2100      	movs	r1, #0
 8026002:	f7ff ff3d 	bl	8025e80 <mg_iobuf_resize>
}
 8026006:	bd08      	pop	{r3, pc}

08026008 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026008:	b538      	push	{r3, r4, r5, lr}
 802600a:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 802600c:	2201      	movs	r2, #1
 802600e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8026010:	f7fb fc97 	bl	8021942 <getpeer>
  if (c == NULL) {
 8026014:	b368      	cbz	r0, 8026072 <rx_udp+0x6a>
 8026016:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 8026018:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802601a:	881b      	ldrh	r3, [r3, #0]
 802601c:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802601e:	69e3      	ldr	r3, [r4, #28]
 8026020:	68db      	ldr	r3, [r3, #12]
 8026022:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8026024:	6923      	ldr	r3, [r4, #16]
 8026026:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802602a:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 802602e:	895b      	ldrh	r3, [r3, #10]
 8026030:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8026034:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8026036:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 802603a:	d21b      	bcs.n	8026074 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802603c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802603e:	1ad2      	subs	r2, r2, r3
 8026040:	68e1      	ldr	r1, [r4, #12]
 8026042:	428a      	cmp	r2, r1
 8026044:	d204      	bcs.n	8026050 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8026046:	4419      	add	r1, r3
 8026048:	3038      	adds	r0, #56	@ 0x38
 802604a:	f7ff ff19 	bl	8025e80 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802604e:	b1a8      	cbz	r0, 802607c <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8026050:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8026052:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8026054:	68e2      	ldr	r2, [r4, #12]
 8026056:	68a1      	ldr	r1, [r4, #8]
 8026058:	4418      	add	r0, r3
 802605a:	f006 ff0d 	bl	802ce78 <memcpy>
      c->recv.len += pkt->pay.len;
 802605e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8026060:	4622      	mov	r2, r4
 8026062:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 8026066:	440b      	add	r3, r1
 8026068:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802606a:	2107      	movs	r1, #7
 802606c:	4628      	mov	r0, r5
 802606e:	f7fb fd6b 	bl	8021b48 <mg_call>
}
 8026072:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 8026074:	4904      	ldr	r1, [pc, #16]	@ (8026088 <rx_udp+0x80>)
 8026076:	f7ff f9af 	bl	80253d8 <mg_error>
 802607a:	e7fa      	b.n	8026072 <rx_udp+0x6a>
      mg_error(c, "oom");
 802607c:	4903      	ldr	r1, [pc, #12]	@ (802608c <rx_udp+0x84>)
 802607e:	4628      	mov	r0, r5
 8026080:	f7ff f9aa 	bl	80253d8 <mg_error>
 8026084:	e7f5      	b.n	8026072 <rx_udp+0x6a>
 8026086:	bf00      	nop
 8026088:	08039a28 	.word	0x08039a28
 802608c:	08039a44 	.word	0x08039a44

08026090 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8026090:	b538      	push	{r3, r4, r5, lr}
 8026092:	4605      	mov	r5, r0
 8026094:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8026096:	b122      	cbz	r2, 80260a2 <mg_pfn_iobuf_private+0x12>
 8026098:	6889      	ldr	r1, [r1, #8]
 802609a:	3102      	adds	r1, #2
 802609c:	6863      	ldr	r3, [r4, #4]
 802609e:	4299      	cmp	r1, r3
 80260a0:	d80d      	bhi.n	80260be <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 80260a2:	68a3      	ldr	r3, [r4, #8]
 80260a4:	1c99      	adds	r1, r3, #2
 80260a6:	6862      	ldr	r2, [r4, #4]
 80260a8:	4291      	cmp	r1, r2
 80260aa:	d80c      	bhi.n	80260c6 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 80260ac:	6822      	ldr	r2, [r4, #0]
 80260ae:	1c59      	adds	r1, r3, #1
 80260b0:	60a1      	str	r1, [r4, #8]
 80260b2:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 80260b4:	6822      	ldr	r2, [r4, #0]
 80260b6:	68a3      	ldr	r3, [r4, #8]
 80260b8:	2100      	movs	r1, #0
 80260ba:	54d1      	strb	r1, [r2, r3]
}
 80260bc:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 80260be:	4620      	mov	r0, r4
 80260c0:	f7ff fede 	bl	8025e80 <mg_iobuf_resize>
 80260c4:	e7ed      	b.n	80260a2 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 80260c6:	4293      	cmp	r3, r2
 80260c8:	d2f8      	bcs.n	80260bc <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 80260ca:	6822      	ldr	r2, [r4, #0]
 80260cc:	1c59      	adds	r1, r3, #1
 80260ce:	60a1      	str	r1, [r4, #8]
 80260d0:	2100      	movs	r1, #0
 80260d2:	54d1      	strb	r1, [r2, r3]
}
 80260d4:	e7f2      	b.n	80260bc <mg_pfn_iobuf_private+0x2c>

080260d6 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 80260d6:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 80260d8:	2201      	movs	r2, #1
 80260da:	f7ff ffd9 	bl	8026090 <mg_pfn_iobuf_private>
}
 80260de:	bd08      	pop	{r3, pc}

080260e0 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 80260e0:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 80260e2:	2200      	movs	r2, #0
 80260e4:	f7ff ffd4 	bl	8026090 <mg_pfn_iobuf_private>
}
 80260e8:	bd08      	pop	{r3, pc}
	...

080260ec <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 80260ec:	b510      	push	{r4, lr}
 80260ee:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 80260f0:	f7fb fcc9 	bl	8021a86 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80260f4:	6862      	ldr	r2, [r4, #4]
 80260f6:	e000      	b.n	80260fa <mg_close_conn+0xe>
 80260f8:	461a      	mov	r2, r3
 80260fa:	6813      	ldr	r3, [r2, #0]
 80260fc:	42a3      	cmp	r3, r4
 80260fe:	d1fb      	bne.n	80260f8 <mg_close_conn+0xc>
 8026100:	6823      	ldr	r3, [r4, #0]
 8026102:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8026104:	6863      	ldr	r3, [r4, #4]
 8026106:	689a      	ldr	r2, [r3, #8]
 8026108:	42a2      	cmp	r2, r4
 802610a:	d020      	beq.n	802614e <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 802610c:	6863      	ldr	r3, [r4, #4]
 802610e:	691a      	ldr	r2, [r3, #16]
 8026110:	42a2      	cmp	r2, r4
 8026112:	d01f      	beq.n	8026154 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 8026114:	2200      	movs	r2, #0
 8026116:	2109      	movs	r1, #9
 8026118:	4620      	mov	r0, r4
 802611a:	f7fb fd15 	bl	8021b48 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802611e:	4b15      	ldr	r3, [pc, #84]	@ (8026174 <mg_close_conn+0x88>)
 8026120:	681b      	ldr	r3, [r3, #0]
 8026122:	2b02      	cmp	r3, #2
 8026124:	dc19      	bgt.n	802615a <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 8026126:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 802612a:	f7ff ff68 	bl	8025ffe <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 802612e:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8026132:	f7ff ff64 	bl	8025ffe <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8026136:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802613a:	f7ff ff60 	bl	8025ffe <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 802613e:	21b0      	movs	r1, #176	@ 0xb0
 8026140:	4620      	mov	r0, r4
 8026142:	f7fe fc5b 	bl	80249fc <mg_bzero>
  free(c);
 8026146:	4620      	mov	r0, r4
 8026148:	f7f3 fd50 	bl	8019bec <vPortFree>
}
 802614c:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 802614e:	2200      	movs	r2, #0
 8026150:	609a      	str	r2, [r3, #8]
 8026152:	e7db      	b.n	802610c <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8026154:	2200      	movs	r2, #0
 8026156:	611a      	str	r2, [r3, #16]
 8026158:	e7dc      	b.n	8026114 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802615a:	4b07      	ldr	r3, [pc, #28]	@ (8026178 <mg_close_conn+0x8c>)
 802615c:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 8026160:	4906      	ldr	r1, [pc, #24]	@ (802617c <mg_close_conn+0x90>)
 8026162:	2003      	movs	r0, #3
 8026164:	f7ff f850 	bl	8025208 <mg_log_prefix>
 8026168:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802616a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802616c:	4804      	ldr	r0, [pc, #16]	@ (8026180 <mg_close_conn+0x94>)
 802616e:	f7fc ff35 	bl	8022fdc <mg_log>
 8026172:	e7d8      	b.n	8026126 <mg_close_conn+0x3a>
 8026174:	200000a8 	.word	0x200000a8
 8026178:	0803a12c 	.word	0x0803a12c
 802617c:	08039744 	.word	0x08039744
 8026180:	08039a48 	.word	0x08039a48

08026184 <close_conn>:
static void close_conn(struct mg_connection *c) {
 8026184:	b510      	push	{r4, lr}
 8026186:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8026188:	30d0      	adds	r0, #208	@ 0xd0
 802618a:	f7ff ff38 	bl	8025ffe <mg_iobuf_free>
  mg_close_conn(c);
 802618e:	4620      	mov	r0, r4
 8026190:	f7ff ffac 	bl	80260ec <mg_close_conn>
}
 8026194:	bd10      	pop	{r4, pc}
	...

08026198 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 8026198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802619c:	4606      	mov	r6, r0
 802619e:	460d      	mov	r5, r1
 80261a0:	4690      	mov	r8, r2
 80261a2:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 80261a4:	f7fc fa42 	bl	802262c <mg_alloc_conn>
 80261a8:	4604      	mov	r4, r0
 80261aa:	2800      	cmp	r0, #0
 80261ac:	d03f      	beq.n	802622e <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 80261ae:	4629      	mov	r1, r5
 80261b0:	f7fe fe5b 	bl	8024e6a <mg_open_listener>
 80261b4:	2800      	cmp	r0, #0
 80261b6:	d04d      	beq.n	8026254 <mg_listen+0xbc>
    c->is_listening = 1;
 80261b8:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80261bc:	f043 0301 	orr.w	r3, r3, #1
 80261c0:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 80261c4:	2204      	movs	r2, #4
 80261c6:	492f      	ldr	r1, [pc, #188]	@ (8026284 <mg_listen+0xec>)
 80261c8:	4628      	mov	r0, r5
 80261ca:	f005 fc4e 	bl	802ba6a <strncmp>
 80261ce:	fab0 f080 	clz	r0, r0
 80261d2:	0940      	lsrs	r0, r0, #5
 80261d4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80261d8:	f360 0300 	bfi	r3, r0, #0, #1
 80261dc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80261e0:	6833      	ldr	r3, [r6, #0]
 80261e2:	6023      	str	r3, [r4, #0]
 80261e4:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 80261e6:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 80261ea:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 80261ec:	2200      	movs	r2, #0
 80261ee:	2101      	movs	r1, #1
 80261f0:	4620      	mov	r0, r4
 80261f2:	f7fb fca9 	bl	8021b48 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 80261f6:	4628      	mov	r0, r5
 80261f8:	f7fe fb52 	bl	80248a0 <mg_url_is_ssl>
 80261fc:	b128      	cbz	r0, 802620a <mg_listen+0x72>
 80261fe:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8026202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026206:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802620a:	4b1f      	ldr	r3, [pc, #124]	@ (8026288 <mg_listen+0xf0>)
 802620c:	681b      	ldr	r3, [r3, #0]
 802620e:	2b02      	cmp	r3, #2
 8026210:	dd11      	ble.n	8026236 <mg_listen+0x9e>
 8026212:	4b1e      	ldr	r3, [pc, #120]	@ (802628c <mg_listen+0xf4>)
 8026214:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 8026218:	491d      	ldr	r1, [pc, #116]	@ (8026290 <mg_listen+0xf8>)
 802621a:	2003      	movs	r0, #3
 802621c:	f7fe fff4 	bl	8025208 <mg_log_prefix>
 8026220:	462b      	mov	r3, r5
 8026222:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8026224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026226:	481b      	ldr	r0, [pc, #108]	@ (8026294 <mg_listen+0xfc>)
 8026228:	f7fc fed8 	bl	8022fdc <mg_log>
  return c;
 802622c:	e003      	b.n	8026236 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 802622e:	4b16      	ldr	r3, [pc, #88]	@ (8026288 <mg_listen+0xf0>)
 8026230:	681b      	ldr	r3, [r3, #0]
 8026232:	2b00      	cmp	r3, #0
 8026234:	dc02      	bgt.n	802623c <mg_listen+0xa4>
}
 8026236:	4620      	mov	r0, r4
 8026238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 802623c:	4b13      	ldr	r3, [pc, #76]	@ (802628c <mg_listen+0xf4>)
 802623e:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 8026242:	4913      	ldr	r1, [pc, #76]	@ (8026290 <mg_listen+0xf8>)
 8026244:	2001      	movs	r0, #1
 8026246:	f7fe ffdf 	bl	8025208 <mg_log_prefix>
 802624a:	4629      	mov	r1, r5
 802624c:	4812      	ldr	r0, [pc, #72]	@ (8026298 <mg_listen+0x100>)
 802624e:	f7fc fec5 	bl	8022fdc <mg_log>
 8026252:	e7f0      	b.n	8026236 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8026254:	4b0c      	ldr	r3, [pc, #48]	@ (8026288 <mg_listen+0xf0>)
 8026256:	681b      	ldr	r3, [r3, #0]
 8026258:	2b00      	cmp	r3, #0
 802625a:	dc04      	bgt.n	8026266 <mg_listen+0xce>
    free(c);
 802625c:	4620      	mov	r0, r4
 802625e:	f7f3 fcc5 	bl	8019bec <vPortFree>
    c = NULL;
 8026262:	2400      	movs	r4, #0
 8026264:	e7e7      	b.n	8026236 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8026266:	4b09      	ldr	r3, [pc, #36]	@ (802628c <mg_listen+0xf4>)
 8026268:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 802626c:	4908      	ldr	r1, [pc, #32]	@ (8026290 <mg_listen+0xf8>)
 802626e:	2001      	movs	r0, #1
 8026270:	f7fe ffca 	bl	8025208 <mg_log_prefix>
 8026274:	f006 fdc8 	bl	802ce08 <__errno>
 8026278:	6802      	ldr	r2, [r0, #0]
 802627a:	4629      	mov	r1, r5
 802627c:	4807      	ldr	r0, [pc, #28]	@ (802629c <mg_listen+0x104>)
 802627e:	f7fc fead 	bl	8022fdc <mg_log>
 8026282:	e7eb      	b.n	802625c <mg_listen+0xc4>
 8026284:	08039a78 	.word	0x08039a78
 8026288:	200000a8 	.word	0x200000a8
 802628c:	0803a114 	.word	0x0803a114
 8026290:	08039744 	.word	0x08039744
 8026294:	080397a0 	.word	0x080397a0
 8026298:	08039a58 	.word	0x08039a58
 802629c:	08039a60 	.word	0x08039a60

080262a0 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 80262a0:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 80262a2:	f7ff ff79 	bl	8026198 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 80262a6:	b110      	cbz	r0, 80262ae <mg_http_listen+0xe>
 80262a8:	4b01      	ldr	r3, [pc, #4]	@ (80262b0 <mg_http_listen+0x10>)
 80262aa:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 80262ae:	bd08      	pop	{r3, pc}
 80262b0:	0802548d 	.word	0x0802548d

080262b4 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 80262b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80262b8:	4605      	mov	r5, r0
 80262ba:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80262bc:	6843      	ldr	r3, [r0, #4]
 80262be:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 80262c0:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80262c4:	f013 0301 	ands.w	r3, r3, #1
 80262c8:	d02c      	beq.n	8026324 <trim_len+0x70>
 80262ca:	2608      	movs	r6, #8
  size_t max_headers_len =
 80262cc:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80262d0:	bb53      	cbnz	r3, 8026328 <trim_len+0x74>
 80262d2:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 80262d4:	eb08 0304 	add.w	r3, r8, r4
 80262d8:	69ba      	ldr	r2, [r7, #24]
 80262da:	4293      	cmp	r3, r2
 80262dc:	d901      	bls.n	80262e2 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 80262de:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 80262e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80262e6:	42b3      	cmp	r3, r6
 80262e8:	d205      	bcs.n	80262f6 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80262ea:	4b1c      	ldr	r3, [pc, #112]	@ (802635c <trim_len+0xa8>)
 80262ec:	681b      	ldr	r3, [r3, #0]
 80262ee:	2b00      	cmp	r3, #0
 80262f0:	dc1c      	bgt.n	802632c <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 80262f2:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 80262f6:	eb04 0308 	add.w	r3, r4, r8
 80262fa:	3b0e      	subs	r3, #14
 80262fc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8026300:	4293      	cmp	r3, r2
 8026302:	d90c      	bls.n	802631e <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 8026304:	eba2 0208 	sub.w	r2, r2, r8
 8026308:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 802630c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026310:	f013 0f01 	tst.w	r3, #1
 8026314:	d003      	beq.n	802631e <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8026316:	4b11      	ldr	r3, [pc, #68]	@ (802635c <trim_len+0xa8>)
 8026318:	681b      	ldr	r3, [r3, #0]
 802631a:	2b00      	cmp	r3, #0
 802631c:	dc12      	bgt.n	8026344 <trim_len+0x90>
}
 802631e:	4620      	mov	r0, r4
 8026320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8026324:	263c      	movs	r6, #60	@ 0x3c
 8026326:	e7d1      	b.n	80262cc <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8026328:	2644      	movs	r6, #68	@ 0x44
 802632a:	e7d3      	b.n	80262d4 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802632c:	4b0c      	ldr	r3, [pc, #48]	@ (8026360 <trim_len+0xac>)
 802632e:	f241 528c 	movw	r2, #5516	@ 0x158c
 8026332:	490c      	ldr	r1, [pc, #48]	@ (8026364 <trim_len+0xb0>)
 8026334:	2001      	movs	r0, #1
 8026336:	f7fe ff67 	bl	8025208 <mg_log_prefix>
 802633a:	4631      	mov	r1, r6
 802633c:	480a      	ldr	r0, [pc, #40]	@ (8026368 <trim_len+0xb4>)
 802633e:	f7fc fe4d 	bl	8022fdc <mg_log>
 8026342:	e7d6      	b.n	80262f2 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8026344:	4b06      	ldr	r3, [pc, #24]	@ (8026360 <trim_len+0xac>)
 8026346:	f241 5293 	movw	r2, #5523	@ 0x1593
 802634a:	4906      	ldr	r1, [pc, #24]	@ (8026364 <trim_len+0xb0>)
 802634c:	2001      	movs	r0, #1
 802634e:	f7fe ff5b 	bl	8025208 <mg_log_prefix>
 8026352:	4806      	ldr	r0, [pc, #24]	@ (802636c <trim_len+0xb8>)
 8026354:	f7fc fe42 	bl	8022fdc <mg_log>
 8026358:	e7e1      	b.n	802631e <trim_len+0x6a>
 802635a:	bf00      	nop
 802635c:	200000a8 	.word	0x200000a8
 8026360:	0803a108 	.word	0x0803a108
 8026364:	08039744 	.word	0x08039744
 8026368:	08039a80 	.word	0x08039a80
 802636c:	08039aac 	.word	0x08039aac

08026370 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8026370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026372:	b085      	sub	sp, #20
 8026374:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8026376:	6843      	ldr	r3, [r0, #4]
 8026378:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802637a:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 802637c:	68ab      	ldr	r3, [r5, #8]
 802637e:	b123      	cbz	r3, 802638a <mg_send+0x1a>
 8026380:	460e      	mov	r6, r1
 8026382:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8026386:	2b03      	cmp	r3, #3
 8026388:	d006      	beq.n	8026398 <mg_send+0x28>
    mg_error(c, "net down");
 802638a:	4913      	ldr	r1, [pc, #76]	@ (80263d8 <mg_send+0x68>)
 802638c:	4620      	mov	r0, r4
 802638e:	f7ff f823 	bl	80253d8 <mg_error>
  bool res = false;
 8026392:	2000      	movs	r0, #0
}
 8026394:	b005      	add	sp, #20
 8026396:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 8026398:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 802639c:	f013 0f01 	tst.w	r3, #1
 80263a0:	d010      	beq.n	80263c4 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 80263a2:	4611      	mov	r1, r2
 80263a4:	f7ff ff86 	bl	80262b4 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 80263a8:	68aa      	ldr	r2, [r5, #8]
 80263aa:	9003      	str	r0, [sp, #12]
 80263ac:	9602      	str	r6, [sp, #8]
 80263ae:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80263b0:	9301      	str	r3, [sp, #4]
 80263b2:	9700      	str	r7, [sp, #0]
 80263b4:	8b23      	ldrh	r3, [r4, #24]
 80263b6:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 80263ba:	4628      	mov	r0, r5
 80263bc:	f7fe fcd3 	bl	8024d66 <tx_udp>
    res = true;
 80263c0:	2001      	movs	r0, #1
 80263c2:	e7e7      	b.n	8026394 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 80263c4:	4613      	mov	r3, r2
 80263c6:	460a      	mov	r2, r1
 80263c8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80263ca:	3048      	adds	r0, #72	@ 0x48
 80263cc:	f7ff fde5 	bl	8025f9a <mg_iobuf_add>
 80263d0:	3800      	subs	r0, #0
 80263d2:	bf18      	it	ne
 80263d4:	2001      	movne	r0, #1
 80263d6:	e7dd      	b.n	8026394 <mg_send+0x24>
 80263d8:	08039ad8 	.word	0x08039ad8

080263dc <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 80263dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80263de:	b0c5      	sub	sp, #276	@ 0x114
 80263e0:	4606      	mov	r6, r0
 80263e2:	460d      	mov	r5, r1
 80263e4:	4614      	mov	r4, r2
 80263e6:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 80263e8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80263ec:	2100      	movs	r1, #0
 80263ee:	a801      	add	r0, sp, #4
 80263f0:	f005 fb06 	bl	802ba00 <memset>
  pkt.header.txnid = mg_htons(txnid);
 80263f4:	4620      	mov	r0, r4
 80263f6:	f7fe fc01 	bl	8024bfc <mg_ntohs>
 80263fa:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 80263fe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8026402:	f7fe fbfb 	bl	8024bfc <mg_ntohs>
 8026406:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 802640a:	2001      	movs	r0, #1
 802640c:	f7fe fbf6 	bl	8024bfc <mg_ntohs>
 8026410:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8026414:	f04f 0c00 	mov.w	ip, #0
 8026418:	4664      	mov	r4, ip
 802641a:	e015      	b.n	8026448 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 802641c:	eba4 020c 	sub.w	r2, r4, ip
 8026420:	ab01      	add	r3, sp, #4
 8026422:	4463      	add	r3, ip
 8026424:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8026426:	f10c 0309 	add.w	r3, ip, #9
 802642a:	aa01      	add	r2, sp, #4
 802642c:	18d0      	adds	r0, r2, r3
 802642e:	6829      	ldr	r1, [r5, #0]
 8026430:	eba4 020c 	sub.w	r2, r4, ip
 8026434:	4461      	add	r1, ip
 8026436:	3004      	adds	r0, #4
 8026438:	f006 fd1e 	bl	802ce78 <memcpy>
      n = i + 1;
 802643c:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 8026440:	686a      	ldr	r2, [r5, #4]
 8026442:	42a2      	cmp	r2, r4
 8026444:	d90a      	bls.n	802645c <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8026446:	3401      	adds	r4, #1
 8026448:	2cfa      	cmp	r4, #250	@ 0xfa
 802644a:	d807      	bhi.n	802645c <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 802644c:	682b      	ldr	r3, [r5, #0]
 802644e:	5d1a      	ldrb	r2, [r3, r4]
 8026450:	2a2e      	cmp	r2, #46	@ 0x2e
 8026452:	d0e3      	beq.n	802641c <mg_dns_send+0x40>
 8026454:	686b      	ldr	r3, [r5, #4]
 8026456:	42a3      	cmp	r3, r4
 8026458:	d8f2      	bhi.n	8026440 <mg_dns_send+0x64>
 802645a:	e7df      	b.n	802641c <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 802645c:	f10c 0308 	add.w	r3, ip, #8
 8026460:	aa01      	add	r2, sp, #4
 8026462:	4413      	add	r3, r2
 8026464:	4a0a      	ldr	r2, [pc, #40]	@ (8026490 <mg_dns_send+0xb4>)
 8026466:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 802646a:	6058      	str	r0, [r3, #4]
 802646c:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 8026470:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8026472:	b12f      	cbz	r7, 8026480 <mg_dns_send+0xa4>
 8026474:	f10c 0302 	add.w	r3, ip, #2
 8026478:	aa01      	add	r2, sp, #4
 802647a:	4413      	add	r3, r2
 802647c:	221c      	movs	r2, #28
 802647e:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8026480:	f10c 0211 	add.w	r2, ip, #17
 8026484:	a901      	add	r1, sp, #4
 8026486:	4630      	mov	r0, r6
 8026488:	f7ff ff72 	bl	8026370 <mg_send>
}
 802648c:	b045      	add	sp, #276	@ 0x114
 802648e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026490:	08034d4c 	.word	0x08034d4c

08026494 <mg_mqtt_send_header>:
                         uint32_t len) {
 8026494:	b500      	push	{lr}
 8026496:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8026498:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 802649c:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 80264a0:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 80264a4:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 80264a8:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 80264aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80264ac:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 80264b0:	d90e      	bls.n	80264d0 <mg_mqtt_send_header+0x3c>
 80264b2:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 80264b6:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 80264ba:	f10d 0105 	add.w	r1, sp, #5
 80264be:	428a      	cmp	r2, r1
 80264c0:	d3f0      	bcc.n	80264a4 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 80264c2:	4669      	mov	r1, sp
 80264c4:	1a52      	subs	r2, r2, r1
 80264c6:	f7ff ff53 	bl	8026370 <mg_send>
}
 80264ca:	b003      	add	sp, #12
 80264cc:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 80264d0:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 80264d2:	e7f6      	b.n	80264c2 <mg_mqtt_send_header+0x2e>

080264d4 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 80264d4:	b500      	push	{lr}
 80264d6:	b083      	sub	sp, #12
 80264d8:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 80264da:	2204      	movs	r2, #4
 80264dc:	eb0d 0102 	add.w	r1, sp, r2
 80264e0:	f7ff ff46 	bl	8026370 <mg_send>
}
 80264e4:	b003      	add	sp, #12
 80264e6:	f85d fb04 	ldr.w	pc, [sp], #4

080264ea <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 80264ea:	b500      	push	{lr}
 80264ec:	b083      	sub	sp, #12
 80264ee:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 80264f2:	2202      	movs	r2, #2
 80264f4:	f10d 0106 	add.w	r1, sp, #6
 80264f8:	f7ff ff3a 	bl	8026370 <mg_send>
}
 80264fc:	b003      	add	sp, #12
 80264fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08026504 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8026504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026508:	b083      	sub	sp, #12
 802650a:	4606      	mov	r6, r0
 802650c:	460f      	mov	r7, r1
 802650e:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 8026510:	4611      	mov	r1, r2
 8026512:	4638      	mov	r0, r7
 8026514:	f7f9 fe82 	bl	802021c <get_properties_length>
 8026518:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 802651a:	2500      	movs	r5, #0
 802651c:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 802651e:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 8026520:	4668      	mov	r0, sp
 8026522:	f7f9 fe2c 	bl	802017e <encode_varint>
 8026526:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 8026528:	4669      	mov	r1, sp
 802652a:	4630      	mov	r0, r6
 802652c:	f7ff ff20 	bl	8026370 <mg_send>
  for (i = 0; i < nprops; i++) {
 8026530:	e018      	b.n	8026564 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8026532:	89a0      	ldrh	r0, [r4, #12]
 8026534:	f7fe fb62 	bl	8024bfc <mg_ntohs>
 8026538:	4601      	mov	r1, r0
 802653a:	4630      	mov	r0, r6
 802653c:	f7ff ffd5 	bl	80264ea <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 8026540:	68e2      	ldr	r2, [r4, #12]
 8026542:	68a1      	ldr	r1, [r4, #8]
 8026544:	4630      	mov	r0, r6
 8026546:	f7ff ff13 	bl	8026370 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 802654a:	8aa0      	ldrh	r0, [r4, #20]
 802654c:	f7fe fb56 	bl	8024bfc <mg_ntohs>
 8026550:	4601      	mov	r1, r0
 8026552:	4630      	mov	r0, r6
 8026554:	f7ff ffc9 	bl	80264ea <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8026558:	6962      	ldr	r2, [r4, #20]
 802655a:	6921      	ldr	r1, [r4, #16]
 802655c:	4630      	mov	r0, r6
 802655e:	f7ff ff07 	bl	8026370 <mg_send>
  for (i = 0; i < nprops; i++) {
 8026562:	3501      	adds	r5, #1
 8026564:	454d      	cmp	r5, r9
 8026566:	d25b      	bcs.n	8026620 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8026568:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 802656c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8026570:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8026574:	2201      	movs	r2, #1
 8026576:	4621      	mov	r1, r4
 8026578:	4630      	mov	r0, r6
 802657a:	f7ff fef9 	bl	8026370 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802657e:	f817 0008 	ldrb.w	r0, [r7, r8]
 8026582:	f7f9 fe37 	bl	80201f4 <mqtt_prop_type_by_id>
 8026586:	2806      	cmp	r0, #6
 8026588:	d8eb      	bhi.n	8026562 <mg_send_mqtt_properties+0x5e>
 802658a:	a301      	add	r3, pc, #4	@ (adr r3, 8026590 <mg_send_mqtt_properties+0x8c>)
 802658c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8026590:	080265ad 	.word	0x080265ad
 8026594:	080265d9 	.word	0x080265d9
 8026598:	08026533 	.word	0x08026533
 802659c:	080265f3 	.word	0x080265f3
 80265a0:	0802660d 	.word	0x0802660d
 80265a4:	080265c9 	.word	0x080265c9
 80265a8:	080265b9 	.word	0x080265b9
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 80265ac:	2201      	movs	r2, #1
 80265ae:	1d21      	adds	r1, r4, #4
 80265b0:	4630      	mov	r0, r6
 80265b2:	f7ff fedd 	bl	8026370 <mg_send>
        break;
 80265b6:	e7d4      	b.n	8026562 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 80265b8:	88a0      	ldrh	r0, [r4, #4]
 80265ba:	f7fe fb1f 	bl	8024bfc <mg_ntohs>
 80265be:	4601      	mov	r1, r0
 80265c0:	4630      	mov	r0, r6
 80265c2:	f7ff ff92 	bl	80264ea <mg_send_u16>
        break;
 80265c6:	e7cc      	b.n	8026562 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 80265c8:	6860      	ldr	r0, [r4, #4]
 80265ca:	f7fe fa7f 	bl	8024acc <mg_ntohl>
 80265ce:	4601      	mov	r1, r0
 80265d0:	4630      	mov	r0, r6
 80265d2:	f7ff ff7f 	bl	80264d4 <mg_send_u32>
        break;
 80265d6:	e7c4      	b.n	8026562 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80265d8:	8aa0      	ldrh	r0, [r4, #20]
 80265da:	f7fe fb0f 	bl	8024bfc <mg_ntohs>
 80265de:	4601      	mov	r1, r0
 80265e0:	4630      	mov	r0, r6
 80265e2:	f7ff ff82 	bl	80264ea <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80265e6:	6962      	ldr	r2, [r4, #20]
 80265e8:	6921      	ldr	r1, [r4, #16]
 80265ea:	4630      	mov	r0, r6
 80265ec:	f7ff fec0 	bl	8026370 <mg_send>
        break;
 80265f0:	e7b7      	b.n	8026562 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80265f2:	8aa0      	ldrh	r0, [r4, #20]
 80265f4:	f7fe fb02 	bl	8024bfc <mg_ntohs>
 80265f8:	4601      	mov	r1, r0
 80265fa:	4630      	mov	r0, r6
 80265fc:	f7ff ff75 	bl	80264ea <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8026600:	6962      	ldr	r2, [r4, #20]
 8026602:	6921      	ldr	r1, [r4, #16]
 8026604:	4630      	mov	r0, r6
 8026606:	f7ff feb3 	bl	8026370 <mg_send>
        break;
 802660a:	e7aa      	b.n	8026562 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 802660c:	6861      	ldr	r1, [r4, #4]
 802660e:	a801      	add	r0, sp, #4
 8026610:	f7f9 fdb5 	bl	802017e <encode_varint>
 8026614:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 8026616:	a901      	add	r1, sp, #4
 8026618:	4630      	mov	r0, r6
 802661a:	f7ff fea9 	bl	8026370 <mg_send>
        break;
 802661e:	e7a0      	b.n	8026562 <mg_send_mqtt_properties+0x5e>
}
 8026620:	b003      	add	sp, #12
 8026622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026626:	bf00      	nop

08026628 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8026628:	b5f0      	push	{r4, r5, r6, r7, lr}
 802662a:	b08b      	sub	sp, #44	@ 0x2c
 802662c:	4605      	mov	r5, r0
 802662e:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 8026630:	ab02      	add	r3, sp, #8
 8026632:	f101 0210 	add.w	r2, r1, #16
 8026636:	e892 0003 	ldmia.w	r2, {r0, r1}
 802663a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 802663e:	2300      	movs	r3, #0
 8026640:	f88d 3000 	strb.w	r3, [sp]
 8026644:	2204      	movs	r2, #4
 8026646:	f88d 2001 	strb.w	r2, [sp, #1]
 802664a:	224d      	movs	r2, #77	@ 0x4d
 802664c:	f88d 2002 	strb.w	r2, [sp, #2]
 8026650:	2251      	movs	r2, #81	@ 0x51
 8026652:	f88d 2003 	strb.w	r2, [sp, #3]
 8026656:	2254      	movs	r2, #84	@ 0x54
 8026658:	f88d 2004 	strb.w	r2, [sp, #4]
 802665c:	f88d 2005 	strb.w	r2, [sp, #5]
 8026660:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8026664:	f88d 2006 	strb.w	r2, [sp, #6]
 8026668:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 802666c:	2900      	cmp	r1, #0
 802666e:	f000 809f 	beq.w	80267b0 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8026672:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8026676:	b913      	cbnz	r3, 802667e <mg_mqtt_login+0x56>
 8026678:	2304      	movs	r3, #4
 802667a:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 802667e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8026682:	2b05      	cmp	r3, #5
 8026684:	bf14      	ite	ne
 8026686:	2300      	movne	r3, #0
 8026688:	2301      	moveq	r3, #1
 802668a:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 802668e:	f363 0282 	bfi	r2, r3, #2, #1
 8026692:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8026696:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 802669a:	00d2      	lsls	r2, r2, #3
 802669c:	f002 0218 	and.w	r2, r2, #24
 80266a0:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 80266a4:	6863      	ldr	r3, [r4, #4]
 80266a6:	2b00      	cmp	r3, #0
 80266a8:	f000 808e 	beq.w	80267c8 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 80266ac:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 80266ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80266b2:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 80266b6:	68e2      	ldr	r2, [r4, #12]
 80266b8:	b13a      	cbz	r2, 80266ca <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 80266ba:	441a      	add	r2, r3
 80266bc:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 80266be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80266c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80266c6:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 80266ca:	69e2      	ldr	r2, [r4, #28]
 80266cc:	b14a      	cbz	r2, 80266e2 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 80266ce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80266d0:	440a      	add	r2, r1
 80266d2:	441a      	add	r2, r3
 80266d4:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 80266d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80266da:	f042 0204 	orr.w	r2, r2, #4
 80266de:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 80266e2:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 80266e6:	b90a      	cbnz	r2, 80266ec <mg_mqtt_login+0xc4>
 80266e8:	9a03      	ldr	r2, [sp, #12]
 80266ea:	b92a      	cbnz	r2, 80266f8 <mg_mqtt_login+0xd0>
 80266ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80266f0:	f042 0202 	orr.w	r2, r2, #2
 80266f4:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 80266f8:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 80266fc:	b12a      	cbz	r2, 802670a <mg_mqtt_login+0xe2>
 80266fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8026702:	f042 0220 	orr.w	r2, r2, #32
 8026706:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 802670a:	9f03      	ldr	r7, [sp, #12]
 802670c:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 802670e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026712:	f013 0f04 	tst.w	r3, #4
 8026716:	d159      	bne.n	80267cc <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8026718:	4633      	mov	r3, r6
 802671a:	2200      	movs	r2, #0
 802671c:	2101      	movs	r1, #1
 802671e:	4628      	mov	r0, r5
 8026720:	f7ff feb8 	bl	8026494 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8026724:	2208      	movs	r2, #8
 8026726:	4669      	mov	r1, sp
 8026728:	4628      	mov	r0, r5
 802672a:	f7ff fe21 	bl	8026370 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 802672e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8026730:	f7fe fa64 	bl	8024bfc <mg_ntohs>
 8026734:	4601      	mov	r1, r0
 8026736:	4628      	mov	r0, r5
 8026738:	f7ff fed7 	bl	80264ea <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802673c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026740:	f013 0f04 	tst.w	r3, #4
 8026744:	d152      	bne.n	80267ec <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8026746:	b2b8      	uxth	r0, r7
 8026748:	f7fe fa58 	bl	8024bfc <mg_ntohs>
 802674c:	4601      	mov	r1, r0
 802674e:	4628      	mov	r0, r5
 8026750:	f7ff fecb 	bl	80264ea <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8026754:	463a      	mov	r2, r7
 8026756:	9902      	ldr	r1, [sp, #8]
 8026758:	4628      	mov	r0, r5
 802675a:	f7ff fe09 	bl	8026370 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 802675e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8026762:	f013 0f04 	tst.w	r3, #4
 8026766:	d01c      	beq.n	80267a2 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 8026768:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 802676c:	f013 0f04 	tst.w	r3, #4
 8026770:	d142      	bne.n	80267f8 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8026772:	8ba0      	ldrh	r0, [r4, #28]
 8026774:	f7fe fa42 	bl	8024bfc <mg_ntohs>
 8026778:	4601      	mov	r1, r0
 802677a:	4628      	mov	r0, r5
 802677c:	f7ff feb5 	bl	80264ea <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8026780:	69e2      	ldr	r2, [r4, #28]
 8026782:	69a1      	ldr	r1, [r4, #24]
 8026784:	4628      	mov	r0, r5
 8026786:	f7ff fdf3 	bl	8026370 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 802678a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 802678c:	f7fe fa36 	bl	8024bfc <mg_ntohs>
 8026790:	4601      	mov	r1, r0
 8026792:	4628      	mov	r0, r5
 8026794:	f7ff fea9 	bl	80264ea <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8026798:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802679a:	6a21      	ldr	r1, [r4, #32]
 802679c:	4628      	mov	r0, r5
 802679e:	f7ff fde7 	bl	8026370 <mg_send>
  if (opts->user.len > 0) {
 80267a2:	6860      	ldr	r0, [r4, #4]
 80267a4:	bb70      	cbnz	r0, 8026804 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 80267a6:	68e0      	ldr	r0, [r4, #12]
 80267a8:	2800      	cmp	r0, #0
 80267aa:	d138      	bne.n	802681e <mg_mqtt_login+0x1f6>
}
 80267ac:	b00b      	add	sp, #44	@ 0x2c
 80267ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 80267b0:	2114      	movs	r1, #20
 80267b2:	a804      	add	r0, sp, #16
 80267b4:	f7fe f95e 	bl	8024a74 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 80267b8:	2300      	movs	r3, #0
 80267ba:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 80267be:	a904      	add	r1, sp, #16
 80267c0:	a802      	add	r0, sp, #8
 80267c2:	f7fc fde9 	bl	8023398 <mg_str_s>
 80267c6:	e754      	b.n	8026672 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 80267c8:	230c      	movs	r3, #12
 80267ca:	e774      	b.n	80266b6 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 80267cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80267ce:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80267d0:	f7f9 fd68 	bl	80202a4 <get_props_size>
 80267d4:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 80267d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80267da:	f013 0f04 	tst.w	r3, #4
 80267de:	d09b      	beq.n	8026718 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 80267e0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80267e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80267e4:	f7f9 fd5e 	bl	80202a4 <get_props_size>
 80267e8:	4406      	add	r6, r0
 80267ea:	e795      	b.n	8026718 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80267ec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80267ee:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80267f0:	4628      	mov	r0, r5
 80267f2:	f7ff fe87 	bl	8026504 <mg_send_mqtt_properties>
 80267f6:	e7a6      	b.n	8026746 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 80267f8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80267fa:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80267fc:	4628      	mov	r0, r5
 80267fe:	f7ff fe81 	bl	8026504 <mg_send_mqtt_properties>
 8026802:	e7b6      	b.n	8026772 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8026804:	b280      	uxth	r0, r0
 8026806:	f7fe f9f9 	bl	8024bfc <mg_ntohs>
 802680a:	4601      	mov	r1, r0
 802680c:	4628      	mov	r0, r5
 802680e:	f7ff fe6c 	bl	80264ea <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8026812:	6862      	ldr	r2, [r4, #4]
 8026814:	6821      	ldr	r1, [r4, #0]
 8026816:	4628      	mov	r0, r5
 8026818:	f7ff fdaa 	bl	8026370 <mg_send>
 802681c:	e7c3      	b.n	80267a6 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 802681e:	b280      	uxth	r0, r0
 8026820:	f7fe f9ec 	bl	8024bfc <mg_ntohs>
 8026824:	4601      	mov	r1, r0
 8026826:	4628      	mov	r0, r5
 8026828:	f7ff fe5f 	bl	80264ea <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 802682c:	68e2      	ldr	r2, [r4, #12]
 802682e:	68a1      	ldr	r1, [r4, #8]
 8026830:	4628      	mov	r0, r5
 8026832:	f7ff fd9d 	bl	8026370 <mg_send>
}
 8026836:	e7b9      	b.n	80267ac <mg_mqtt_login+0x184>

08026838 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8026838:	b530      	push	{r4, r5, lr}
 802683a:	b083      	sub	sp, #12
 802683c:	4604      	mov	r4, r0
 802683e:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 8026840:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8026844:	f003 0303 	and.w	r3, r3, #3
 8026848:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802684c:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8026850:	f013 0f04 	tst.w	r3, #4
 8026854:	d133      	bne.n	80268be <mg_mqtt_sub+0x86>
 8026856:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8026858:	69eb      	ldr	r3, [r5, #28]
 802685a:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 802685c:	3305      	adds	r3, #5
 802685e:	2202      	movs	r2, #2
 8026860:	2108      	movs	r1, #8
 8026862:	4620      	mov	r0, r4
 8026864:	f7ff fe16 	bl	8026494 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8026868:	6862      	ldr	r2, [r4, #4]
 802686a:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 802686c:	3301      	adds	r3, #1
 802686e:	b29b      	uxth	r3, r3
 8026870:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8026872:	b91b      	cbnz	r3, 802687c <mg_mqtt_sub+0x44>
 8026874:	6862      	ldr	r2, [r4, #4]
 8026876:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8026878:	3301      	adds	r3, #1
 802687a:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 802687c:	6863      	ldr	r3, [r4, #4]
 802687e:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8026880:	f7fe f9bc 	bl	8024bfc <mg_ntohs>
 8026884:	4601      	mov	r1, r0
 8026886:	4620      	mov	r0, r4
 8026888:	f7ff fe2f 	bl	80264ea <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802688c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026890:	f013 0f04 	tst.w	r3, #4
 8026894:	d118      	bne.n	80268c8 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8026896:	8ba8      	ldrh	r0, [r5, #28]
 8026898:	f7fe f9b0 	bl	8024bfc <mg_ntohs>
 802689c:	4601      	mov	r1, r0
 802689e:	4620      	mov	r0, r4
 80268a0:	f7ff fe23 	bl	80264ea <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 80268a4:	69ea      	ldr	r2, [r5, #28]
 80268a6:	69a9      	ldr	r1, [r5, #24]
 80268a8:	4620      	mov	r0, r4
 80268aa:	f7ff fd61 	bl	8026370 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 80268ae:	2201      	movs	r2, #1
 80268b0:	f10d 0107 	add.w	r1, sp, #7
 80268b4:	4620      	mov	r0, r4
 80268b6:	f7ff fd5b 	bl	8026370 <mg_send>
}
 80268ba:	b003      	add	sp, #12
 80268bc:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 80268be:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80268c0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80268c2:	f7f9 fcef 	bl	80202a4 <get_props_size>
 80268c6:	e7c7      	b.n	8026858 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80268c8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80268ca:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 80268cc:	4620      	mov	r0, r4
 80268ce:	f7ff fe19 	bl	8026504 <mg_send_mqtt_properties>
 80268d2:	e7e0      	b.n	8026896 <mg_mqtt_sub+0x5e>

080268d4 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80268d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268d8:	b083      	sub	sp, #12
 80268da:	4605      	mov	r5, r0
 80268dc:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 80268de:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 80268e2:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80268e6:	005b      	lsls	r3, r3, #1
 80268e8:	f003 0306 	and.w	r3, r3, #6
 80268ec:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 80268f0:	2a00      	cmp	r2, #0
 80268f2:	d057      	beq.n	80269a4 <mg_mqtt_pub+0xd0>
 80268f4:	2201      	movs	r2, #1
 80268f6:	ea43 0a02 	orr.w	sl, r3, r2
 80268fa:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 80268fc:	69e7      	ldr	r7, [r4, #28]
 80268fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8026900:	441f      	add	r7, r3
 8026902:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8026906:	4b3a      	ldr	r3, [pc, #232]	@ (80269f0 <mg_mqtt_pub+0x11c>)
 8026908:	681b      	ldr	r3, [r3, #0]
 802690a:	2b02      	cmp	r3, #2
 802690c:	dc4c      	bgt.n	80269a8 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 802690e:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 8026912:	f1bb 0f00 	cmp.w	fp, #0
 8026916:	d001      	beq.n	802691c <mg_mqtt_pub+0x48>
 8026918:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802691c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026920:	f013 0f04 	tst.w	r3, #4
 8026924:	d152      	bne.n	80269cc <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8026926:	f1bb 0f00 	cmp.w	fp, #0
 802692a:	d004      	beq.n	8026936 <mg_mqtt_pub+0x62>
 802692c:	f1b8 0f00 	cmp.w	r8, #0
 8026930:	d001      	beq.n	8026936 <mg_mqtt_pub+0x62>
 8026932:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8026936:	464b      	mov	r3, r9
 8026938:	4632      	mov	r2, r6
 802693a:	2103      	movs	r1, #3
 802693c:	4628      	mov	r0, r5
 802693e:	f7ff fda9 	bl	8026494 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8026942:	8ba0      	ldrh	r0, [r4, #28]
 8026944:	f7fe f95a 	bl	8024bfc <mg_ntohs>
 8026948:	4601      	mov	r1, r0
 802694a:	4628      	mov	r0, r5
 802694c:	f7ff fdcd 	bl	80264ea <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8026950:	69e2      	ldr	r2, [r4, #28]
 8026952:	69a1      	ldr	r1, [r4, #24]
 8026954:	4628      	mov	r0, r5
 8026956:	f7ff fd0b 	bl	8026370 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 802695a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 802695e:	b1b3      	cbz	r3, 802698e <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 8026960:	f1b8 0f00 	cmp.w	r8, #0
 8026964:	d10c      	bne.n	8026980 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8026966:	686a      	ldr	r2, [r5, #4]
 8026968:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 802696a:	3301      	adds	r3, #1
 802696c:	b29b      	uxth	r3, r3
 802696e:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8026970:	b91b      	cbnz	r3, 802697a <mg_mqtt_pub+0xa6>
 8026972:	686a      	ldr	r2, [r5, #4]
 8026974:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8026976:	3301      	adds	r3, #1
 8026978:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 802697a:	686b      	ldr	r3, [r5, #4]
 802697c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8026980:	4640      	mov	r0, r8
 8026982:	f7fe f93b 	bl	8024bfc <mg_ntohs>
 8026986:	4601      	mov	r1, r0
 8026988:	4628      	mov	r0, r5
 802698a:	f7ff fdae 	bl	80264ea <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802698e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026992:	f013 0f04 	tst.w	r3, #4
 8026996:	d11f      	bne.n	80269d8 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8026998:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802699a:	bb1a      	cbnz	r2, 80269e4 <mg_mqtt_pub+0x110>
}
 802699c:	4640      	mov	r0, r8
 802699e:	b003      	add	sp, #12
 80269a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 80269a4:	2200      	movs	r2, #0
 80269a6:	e7a6      	b.n	80268f6 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 80269a8:	4b12      	ldr	r3, [pc, #72]	@ (80269f4 <mg_mqtt_pub+0x120>)
 80269aa:	f241 123c 	movw	r2, #4412	@ 0x113c
 80269ae:	4912      	ldr	r1, [pc, #72]	@ (80269f8 <mg_mqtt_pub+0x124>)
 80269b0:	2003      	movs	r0, #3
 80269b2:	f7fe fc29 	bl	8025208 <mg_log_prefix>
 80269b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80269b8:	6a22      	ldr	r2, [r4, #32]
 80269ba:	9201      	str	r2, [sp, #4]
 80269bc:	9300      	str	r3, [sp, #0]
 80269be:	69a3      	ldr	r3, [r4, #24]
 80269c0:	69e2      	ldr	r2, [r4, #28]
 80269c2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80269c4:	480d      	ldr	r0, [pc, #52]	@ (80269fc <mg_mqtt_pub+0x128>)
 80269c6:	f7fc fb09 	bl	8022fdc <mg_log>
 80269ca:	e7a0      	b.n	802690e <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 80269cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80269ce:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80269d0:	f7f9 fc68 	bl	80202a4 <get_props_size>
 80269d4:	4481      	add	r9, r0
 80269d6:	e7a6      	b.n	8026926 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80269d8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80269da:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80269dc:	4628      	mov	r0, r5
 80269de:	f7ff fd91 	bl	8026504 <mg_send_mqtt_properties>
 80269e2:	e7d9      	b.n	8026998 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 80269e4:	6a21      	ldr	r1, [r4, #32]
 80269e6:	4628      	mov	r0, r5
 80269e8:	f7ff fcc2 	bl	8026370 <mg_send>
 80269ec:	e7d6      	b.n	802699c <mg_mqtt_pub+0xc8>
 80269ee:	bf00      	nop
 80269f0:	200000a8 	.word	0x200000a8
 80269f4:	0803a144 	.word	0x0803a144
 80269f8:	08039744 	.word	0x08039744
 80269fc:	08039ae4 	.word	0x08039ae4

08026a00 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8026a00:	b530      	push	{r4, r5, lr}
 8026a02:	b08f      	sub	sp, #60	@ 0x3c
 8026a04:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 8026a06:	2907      	cmp	r1, #7
 8026a08:	f000 808f 	beq.w	8026b2a <mqtt_cb+0x12a>
}
 8026a0c:	b00f      	add	sp, #60	@ 0x3c
 8026a0e:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8026a10:	2204      	movs	r2, #4
 8026a12:	e091      	b.n	8026b38 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8026a14:	4b73      	ldr	r3, [pc, #460]	@ (8026be4 <mqtt_cb+0x1e4>)
 8026a16:	681b      	ldr	r3, [r3, #0]
 8026a18:	2b00      	cmp	r3, #0
 8026a1a:	dc06      	bgt.n	8026a2a <mqtt_cb+0x2a>
        c->is_closing = 1;
 8026a1c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026a20:	f043 0320 	orr.w	r3, r3, #32
 8026a24:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 8026a28:	e7f0      	b.n	8026a0c <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8026a2a:	4b6f      	ldr	r3, [pc, #444]	@ (8026be8 <mqtt_cb+0x1e8>)
 8026a2c:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 8026a30:	496e      	ldr	r1, [pc, #440]	@ (8026bec <mqtt_cb+0x1ec>)
 8026a32:	2001      	movs	r0, #1
 8026a34:	f7fe fbe8 	bl	8025208 <mg_log_prefix>
 8026a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026a3a:	486d      	ldr	r0, [pc, #436]	@ (8026bf0 <mqtt_cb+0x1f0>)
 8026a3c:	f7fc face 	bl	8022fdc <mg_log>
 8026a40:	e7ec      	b.n	8026a1c <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8026a42:	4b69      	ldr	r3, [pc, #420]	@ (8026be8 <mqtt_cb+0x1e8>)
 8026a44:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 8026a48:	4968      	ldr	r1, [pc, #416]	@ (8026bec <mqtt_cb+0x1ec>)
 8026a4a:	2004      	movs	r0, #4
 8026a4c:	f7fe fbdc 	bl	8025208 <mg_log_prefix>
 8026a50:	9b06      	ldr	r3, [sp, #24]
 8026a52:	9301      	str	r3, [sp, #4]
 8026a54:	9b07      	ldr	r3, [sp, #28]
 8026a56:	9300      	str	r3, [sp, #0]
 8026a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a5a:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 8026a5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026a60:	4864      	ldr	r0, [pc, #400]	@ (8026bf4 <mqtt_cb+0x1f4>)
 8026a62:	f7fc fabb 	bl	8022fdc <mg_log>
 8026a66:	e077      	b.n	8026b58 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8026a68:	aa0b      	add	r2, sp, #44	@ 0x2c
 8026a6a:	2111      	movs	r1, #17
 8026a6c:	4620      	mov	r0, r4
 8026a6e:	f7fb f86b 	bl	8021b48 <mg_call>
            if (mm.ack == 0) {
 8026a72:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8026a76:	b97b      	cbnz	r3, 8026a98 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 8026a78:	4b5a      	ldr	r3, [pc, #360]	@ (8026be4 <mqtt_cb+0x1e4>)
 8026a7a:	681b      	ldr	r3, [r3, #0]
 8026a7c:	2b02      	cmp	r3, #2
 8026a7e:	dd49      	ble.n	8026b14 <mqtt_cb+0x114>
 8026a80:	4b59      	ldr	r3, [pc, #356]	@ (8026be8 <mqtt_cb+0x1e8>)
 8026a82:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8026a86:	4959      	ldr	r1, [pc, #356]	@ (8026bec <mqtt_cb+0x1ec>)
 8026a88:	2003      	movs	r0, #3
 8026a8a:	f7fe fbbd 	bl	8025208 <mg_log_prefix>
 8026a8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026a90:	4859      	ldr	r0, [pc, #356]	@ (8026bf8 <mqtt_cb+0x1f8>)
 8026a92:	f7fc faa3 	bl	8022fdc <mg_log>
 8026a96:	e03d      	b.n	8026b14 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8026a98:	4b52      	ldr	r3, [pc, #328]	@ (8026be4 <mqtt_cb+0x1e4>)
 8026a9a:	681b      	ldr	r3, [r3, #0]
 8026a9c:	2b00      	cmp	r3, #0
 8026a9e:	dc06      	bgt.n	8026aae <mqtt_cb+0xae>
              c->is_closing = 1;
 8026aa0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026aa4:	f043 0320 	orr.w	r3, r3, #32
 8026aa8:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8026aac:	e032      	b.n	8026b14 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8026aae:	4b4e      	ldr	r3, [pc, #312]	@ (8026be8 <mqtt_cb+0x1e8>)
 8026ab0:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 8026ab4:	494d      	ldr	r1, [pc, #308]	@ (8026bec <mqtt_cb+0x1ec>)
 8026ab6:	2001      	movs	r0, #1
 8026ab8:	f7fe fba6 	bl	8025208 <mg_log_prefix>
 8026abc:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8026ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026ac2:	484e      	ldr	r0, [pc, #312]	@ (8026bfc <mqtt_cb+0x1fc>)
 8026ac4:	f7fc fa8a 	bl	8022fdc <mg_log>
 8026ac8:	e7ea      	b.n	8026aa0 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 8026aca:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 8026ace:	b1e5      	cbz	r5, 8026b0a <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 8026ad0:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8026ad4:	f7fe f892 	bl	8024bfc <mg_ntohs>
 8026ad8:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8026adc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026ae0:	f013 0f04 	tst.w	r3, #4
 8026ae4:	d14a      	bne.n	8026b7c <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 8026ae6:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 8026ae8:	2d02      	cmp	r5, #2
 8026aea:	d049      	beq.n	8026b80 <mqtt_cb+0x180>
 8026aec:	2104      	movs	r1, #4
 8026aee:	2200      	movs	r2, #0
 8026af0:	4620      	mov	r0, r4
 8026af2:	f7ff fccf 	bl	8026494 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 8026af6:	2202      	movs	r2, #2
 8026af8:	a903      	add	r1, sp, #12
 8026afa:	4620      	mov	r0, r4
 8026afc:	f7ff fc38 	bl	8026370 <mg_send>
              if (c->is_mqtt5) {
 8026b00:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026b04:	f013 0f04 	tst.w	r3, #4
 8026b08:	d13c      	bne.n	8026b84 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 8026b0a:	aa04      	add	r2, sp, #16
 8026b0c:	2110      	movs	r1, #16
 8026b0e:	4620      	mov	r0, r4
 8026b10:	f7fb f81a 	bl	8021b48 <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8026b14:	aa04      	add	r2, sp, #16
 8026b16:	210f      	movs	r1, #15
 8026b18:	4620      	mov	r0, r4
 8026b1a:	f7fb f815 	bl	8021b48 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8026b1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026b20:	2100      	movs	r1, #0
 8026b22:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8026b26:	f7fd ff74 	bl	8024a12 <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8026b2a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026b2e:	f013 0f04 	tst.w	r3, #4
 8026b32:	f43f af6d 	beq.w	8026a10 <mqtt_cb+0x10>
 8026b36:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8026b38:	ab04      	add	r3, sp, #16
 8026b3a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8026b3c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8026b3e:	f7fb fcc6 	bl	80224ce <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 8026b42:	2802      	cmp	r0, #2
 8026b44:	f43f af66 	beq.w	8026a14 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 8026b48:	2800      	cmp	r0, #0
 8026b4a:	f47f af5f 	bne.w	8026a0c <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8026b4e:	4b25      	ldr	r3, [pc, #148]	@ (8026be4 <mqtt_cb+0x1e4>)
 8026b50:	681b      	ldr	r3, [r3, #0]
 8026b52:	2b03      	cmp	r3, #3
 8026b54:	f73f af75 	bgt.w	8026a42 <mqtt_cb+0x42>
        switch (mm.cmd) {
 8026b58:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8026b5c:	3b02      	subs	r3, #2
 8026b5e:	2b04      	cmp	r3, #4
 8026b60:	d8d8      	bhi.n	8026b14 <mqtt_cb+0x114>
 8026b62:	a201      	add	r2, pc, #4	@ (adr r2, 8026b68 <mqtt_cb+0x168>)
 8026b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026b68:	08026a69 	.word	0x08026a69
 8026b6c:	08026acb 	.word	0x08026acb
 8026b70:	08026b15 	.word	0x08026b15
 8026b74:	08026b99 	.word	0x08026b99
 8026b78:	08026bbf 	.word	0x08026bbf
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8026b7c:	2304      	movs	r3, #4
 8026b7e:	e7b3      	b.n	8026ae8 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8026b80:	2105      	movs	r1, #5
 8026b82:	e7b4      	b.n	8026aee <mqtt_cb+0xee>
                uint16_t zero = 0;
 8026b84:	2300      	movs	r3, #0
 8026b86:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 8026b8a:	2202      	movs	r2, #2
 8026b8c:	f10d 010e 	add.w	r1, sp, #14
 8026b90:	4620      	mov	r0, r4
 8026b92:	f7ff fbed 	bl	8026370 <mg_send>
 8026b96:	e7b8      	b.n	8026b0a <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8026b98:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8026b9c:	f7fe f82e 	bl	8024bfc <mg_ntohs>
 8026ba0:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8026ba4:	2302      	movs	r3, #2
 8026ba6:	461a      	mov	r2, r3
 8026ba8:	2106      	movs	r1, #6
 8026baa:	4620      	mov	r0, r4
 8026bac:	f7ff fc72 	bl	8026494 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8026bb0:	2202      	movs	r2, #2
 8026bb2:	f10d 010e 	add.w	r1, sp, #14
 8026bb6:	4620      	mov	r0, r4
 8026bb8:	f7ff fbda 	bl	8026370 <mg_send>
            break;
 8026bbc:	e7aa      	b.n	8026b14 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 8026bbe:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8026bc2:	f7fe f81b 	bl	8024bfc <mg_ntohs>
 8026bc6:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8026bca:	2302      	movs	r3, #2
 8026bcc:	2200      	movs	r2, #0
 8026bce:	2107      	movs	r1, #7
 8026bd0:	4620      	mov	r0, r4
 8026bd2:	f7ff fc5f 	bl	8026494 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8026bd6:	2202      	movs	r2, #2
 8026bd8:	f10d 010e 	add.w	r1, sp, #14
 8026bdc:	4620      	mov	r0, r4
 8026bde:	f7ff fbc7 	bl	8026370 <mg_send>
            break;
 8026be2:	e797      	b.n	8026b14 <mqtt_cb+0x114>
 8026be4:	200000a8 	.word	0x200000a8
 8026be8:	0803a13c 	.word	0x0803a13c
 8026bec:	08039744 	.word	0x08039744
 8026bf0:	08039afc 	.word	0x08039afc
 8026bf4:	08039b18 	.word	0x08039b18
 8026bf8:	08039b38 	.word	0x08039b38
 8026bfc:	08039b48 	.word	0x08039b48

08026c00 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8026c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026c04:	b088      	sub	sp, #32
 8026c06:	4605      	mov	r5, r0
 8026c08:	469a      	mov	sl, r3
 8026c0a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8026c0c:	f107 0614 	add.w	r6, r7, #20
 8026c10:	9601      	str	r6, [sp, #4]
 8026c12:	9200      	str	r2, [sp, #0]
 8026c14:	6883      	ldr	r3, [r0, #8]
 8026c16:	2206      	movs	r2, #6
 8026c18:	f7fe f810 	bl	8024c3c <tx_ip>
 8026c1c:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8026c1e:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 8026c22:	2200      	movs	r2, #0
 8026c24:	6142      	str	r2, [r0, #20]
 8026c26:	6182      	str	r2, [r0, #24]
 8026c28:	61c2      	str	r2, [r0, #28]
 8026c2a:	6202      	str	r2, [r0, #32]
 8026c2c:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8026c2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026c30:	b10b      	cbz	r3, 8026c36 <tx_tcp+0x36>
 8026c32:	2f00      	cmp	r7, #0
 8026c34:	d147      	bne.n	8026cc6 <tx_tcp+0xc6>
  tcp->sport = sport;
 8026c36:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8026c3a:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 8026c3c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8026c40:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 8026c42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026c44:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 8026c46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026c48:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 8026c4a:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 8026c4e:	f241 7070 	movw	r0, #6000	@ 0x1770
 8026c52:	f7fd ffd3 	bl	8024bfc <mg_ntohs>
 8026c56:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8026c58:	2350      	movs	r3, #80	@ 0x50
 8026c5a:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8026c5e:	b2bb      	uxth	r3, r7
 8026c60:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8026c62:	2000      	movs	r0, #0
 8026c64:	f88d 001c 	strb.w	r0, [sp, #28]
 8026c68:	7a62      	ldrb	r2, [r4, #9]
 8026c6a:	f88d 201d 	strb.w	r2, [sp, #29]
 8026c6e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8026c72:	f88d 201e 	strb.w	r2, [sp, #30]
 8026c76:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 8026c7a:	b2b2      	uxth	r2, r6
 8026c7c:	4649      	mov	r1, r9
 8026c7e:	f7f9 fb71 	bl	8020364 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8026c82:	f104 060c 	add.w	r6, r4, #12
 8026c86:	2204      	movs	r2, #4
 8026c88:	4631      	mov	r1, r6
 8026c8a:	f7f9 fb6b 	bl	8020364 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8026c8e:	f104 0810 	add.w	r8, r4, #16
 8026c92:	2204      	movs	r2, #4
 8026c94:	4641      	mov	r1, r8
 8026c96:	f7f9 fb65 	bl	8020364 <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8026c9a:	2204      	movs	r2, #4
 8026c9c:	a907      	add	r1, sp, #28
 8026c9e:	f7f9 fb61 	bl	8020364 <csumup>
  tcp->csum = csumfin(cs);
 8026ca2:	f7fd ffb7 	bl	8024c14 <csumfin>
 8026ca6:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8026ca8:	4b18      	ldr	r3, [pc, #96]	@ (8026d0c <tx_tcp+0x10c>)
 8026caa:	681b      	ldr	r3, [r3, #0]
 8026cac:	2b03      	cmp	r3, #3
 8026cae:	dc10      	bgt.n	8026cd2 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8026cb0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8026cb4:	696b      	ldr	r3, [r5, #20]
 8026cb6:	1ac9      	subs	r1, r1, r3
 8026cb8:	4439      	add	r1, r7
 8026cba:	4628      	mov	r0, r5
 8026cbc:	f7f9 fb63 	bl	8020386 <ether_output>
}
 8026cc0:	b008      	add	sp, #32
 8026cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8026cc6:	463a      	mov	r2, r7
 8026cc8:	4619      	mov	r1, r3
 8026cca:	3028      	adds	r0, #40	@ 0x28
 8026ccc:	f004 fe7e 	bl	802b9cc <memmove>
 8026cd0:	e7b1      	b.n	8026c36 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8026cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8026d10 <tx_tcp+0x110>)
 8026cd4:	f241 5254 	movw	r2, #5460	@ 0x1554
 8026cd8:	490e      	ldr	r1, [pc, #56]	@ (8026d14 <tx_tcp+0x114>)
 8026cda:	2004      	movs	r0, #4
 8026cdc:	f7fe fa94 	bl	8025208 <mg_log_prefix>
 8026ce0:	8aa0      	ldrh	r0, [r4, #20]
 8026ce2:	f7fd ff8b 	bl	8024bfc <mg_ntohs>
 8026ce6:	4681      	mov	r9, r0
 8026ce8:	8ae0      	ldrh	r0, [r4, #22]
 8026cea:	f7fd ff87 	bl	8024bfc <mg_ntohs>
 8026cee:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8026cf2:	4909      	ldr	r1, [pc, #36]	@ (8026d18 <tx_tcp+0x118>)
 8026cf4:	9704      	str	r7, [sp, #16]
 8026cf6:	9303      	str	r3, [sp, #12]
 8026cf8:	9002      	str	r0, [sp, #8]
 8026cfa:	f8cd 8004 	str.w	r8, [sp, #4]
 8026cfe:	9100      	str	r1, [sp, #0]
 8026d00:	464b      	mov	r3, r9
 8026d02:	4632      	mov	r2, r6
 8026d04:	4805      	ldr	r0, [pc, #20]	@ (8026d1c <tx_tcp+0x11c>)
 8026d06:	f7fc f969 	bl	8022fdc <mg_log>
 8026d0a:	e7d1      	b.n	8026cb0 <tx_tcp+0xb0>
 8026d0c:	200000a8 	.word	0x200000a8
 8026d10:	0803a100 	.word	0x0803a100
 8026d14:	08039744 	.word	0x08039744
 8026d18:	08022f9d 	.word	0x08022f9d
 8026d1c:	08039b68 	.word	0x08039b68

08026d20 <send_syn>:
static void send_syn(struct mg_connection *c) {
 8026d20:	b530      	push	{r4, r5, lr}
 8026d22:	b087      	sub	sp, #28
 8026d24:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8026d26:	8b05      	ldrh	r5, [r0, #24]
 8026d28:	4628      	mov	r0, r5
 8026d2a:	f7fd ff67 	bl	8024bfc <mg_ntohs>
 8026d2e:	f7fd fecd 	bl	8024acc <mg_ntohl>
 8026d32:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8026d34:	6863      	ldr	r3, [r4, #4]
 8026d36:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8026d38:	2300      	movs	r3, #0
 8026d3a:	9305      	str	r3, [sp, #20]
 8026d3c:	9304      	str	r3, [sp, #16]
 8026d3e:	9303      	str	r3, [sp, #12]
 8026d40:	9202      	str	r2, [sp, #8]
 8026d42:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8026d44:	9301      	str	r3, [sp, #4]
 8026d46:	9500      	str	r5, [sp, #0]
 8026d48:	2302      	movs	r3, #2
 8026d4a:	69e2      	ldr	r2, [r4, #28]
 8026d4c:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8026d50:	f7ff ff56 	bl	8026c00 <tx_tcp>
}
 8026d54:	b007      	add	sp, #28
 8026d56:	bd30      	pop	{r4, r5, pc}

08026d58 <tx_tcp_pkt>:
                         size_t len) {
 8026d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d5c:	b087      	sub	sp, #28
 8026d5e:	4605      	mov	r5, r0
 8026d60:	4617      	mov	r7, r2
 8026d62:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8026d64:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8026d66:	7b5c      	ldrb	r4, [r3, #13]
 8026d68:	f014 0403 	ands.w	r4, r4, #3
 8026d6c:	bf18      	it	ne
 8026d6e:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8026d70:	690e      	ldr	r6, [r1, #16]
 8026d72:	3606      	adds	r6, #6
 8026d74:	69ca      	ldr	r2, [r1, #28]
 8026d76:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8026d7a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8026d7e:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8026d82:	6858      	ldr	r0, [r3, #4]
 8026d84:	f7fd fea2 	bl	8024acc <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8026d88:	4420      	add	r0, r4
 8026d8a:	f7fd fe9f 	bl	8024acc <mg_ntohl>
 8026d8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d90:	9305      	str	r3, [sp, #20]
 8026d92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026d94:	9304      	str	r3, [sp, #16]
 8026d96:	9003      	str	r0, [sp, #12]
 8026d98:	f8cd 8008 	str.w	r8, [sp, #8]
 8026d9c:	f8cd b004 	str.w	fp, [sp, #4]
 8026da0:	f8cd a000 	str.w	sl, [sp]
 8026da4:	463b      	mov	r3, r7
 8026da6:	464a      	mov	r2, r9
 8026da8:	4631      	mov	r1, r6
 8026daa:	4628      	mov	r0, r5
 8026dac:	f7ff ff28 	bl	8026c00 <tx_tcp>
}
 8026db0:	b007      	add	sp, #28
 8026db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08026db8 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 8026db8:	b530      	push	{r4, r5, lr}
 8026dba:	b083      	sub	sp, #12
 8026dbc:	4604      	mov	r4, r0
 8026dbe:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8026dc0:	6843      	ldr	r3, [r0, #4]
 8026dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8026dc4:	2901      	cmp	r1, #1
 8026dc6:	d01a      	beq.n	8026dfe <settmout+0x46>
 8026dc8:	2903      	cmp	r1, #3
 8026dca:	d01a      	beq.n	8026e02 <settmout+0x4a>
 8026dcc:	2904      	cmp	r1, #4
 8026dce:	d01b      	beq.n	8026e08 <settmout+0x50>
 8026dd0:	2902      	cmp	r1, #2
 8026dd2:	d012      	beq.n	8026dfa <settmout+0x42>
 8026dd4:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 8026dd8:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8026dda:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8026ddc:	185b      	adds	r3, r3, r1
 8026dde:	f142 0200 	adc.w	r2, r2, #0
 8026de2:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8026de6:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 8026dea:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8026dee:	4b10      	ldr	r3, [pc, #64]	@ (8026e30 <settmout+0x78>)
 8026df0:	681b      	ldr	r3, [r3, #0]
 8026df2:	2b03      	cmp	r3, #3
 8026df4:	dc0b      	bgt.n	8026e0e <settmout+0x56>
}
 8026df6:	b003      	add	sp, #12
 8026df8:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8026dfa:	2364      	movs	r3, #100	@ 0x64
 8026dfc:	e7ec      	b.n	8026dd8 <settmout+0x20>
 8026dfe:	2396      	movs	r3, #150	@ 0x96
 8026e00:	e7ea      	b.n	8026dd8 <settmout+0x20>
 8026e02:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8026e06:	e7e7      	b.n	8026dd8 <settmout+0x20>
 8026e08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8026e0c:	e7e4      	b.n	8026dd8 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8026e0e:	4b09      	ldr	r3, [pc, #36]	@ (8026e34 <settmout+0x7c>)
 8026e10:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8026e14:	4908      	ldr	r1, [pc, #32]	@ (8026e38 <settmout+0x80>)
 8026e16:	2004      	movs	r0, #4
 8026e18:	f7fe f9f6 	bl	8025208 <mg_log_prefix>
 8026e1c:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 8026e20:	e9cd 2300 	strd	r2, r3, [sp]
 8026e24:	462a      	mov	r2, r5
 8026e26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026e28:	4804      	ldr	r0, [pc, #16]	@ (8026e3c <settmout+0x84>)
 8026e2a:	f7fc f8d7 	bl	8022fdc <mg_log>
}
 8026e2e:	e7e2      	b.n	8026df6 <settmout+0x3e>
 8026e30:	200000a8 	.word	0x200000a8
 8026e34:	0803a0f4 	.word	0x0803a0f4
 8026e38:	08039744 	.word	0x08039744
 8026e3c:	08039b8c 	.word	0x08039b8c

08026e40 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8026e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e44:	b089      	sub	sp, #36	@ 0x24
 8026e46:	4604      	mov	r4, r0
 8026e48:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8026e4a:	6843      	ldr	r3, [r0, #4]
 8026e4c:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 8026e4e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 8026e52:	4611      	mov	r1, r2
 8026e54:	f7ff fa2e 	bl	80262b4 <trim_len>
 8026e58:	4605      	mov	r5, r0
  if (c->is_udp) {
 8026e5a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026e5e:	f013 0f01 	tst.w	r3, #1
 8026e62:	d010      	beq.n	8026e86 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8026e64:	68ba      	ldr	r2, [r7, #8]
 8026e66:	9003      	str	r0, [sp, #12]
 8026e68:	9602      	str	r6, [sp, #8]
 8026e6a:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8026e6c:	9301      	str	r3, [sp, #4]
 8026e6e:	f8cd 8000 	str.w	r8, [sp]
 8026e72:	8b23      	ldrh	r3, [r4, #24]
 8026e74:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8026e78:	4638      	mov	r0, r7
 8026e7a:	f7fd ff74 	bl	8024d66 <tx_udp>
  return (long) len;
 8026e7e:	4628      	mov	r0, r5
}
 8026e80:	b009      	add	sp, #36	@ 0x24
 8026e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8026e86:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8026e8a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8026e8e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8026e92:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8026e96:	f7fd fe19 	bl	8024acc <mg_ntohl>
 8026e9a:	9007      	str	r0, [sp, #28]
 8026e9c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8026ea0:	f7fd fe14 	bl	8024acc <mg_ntohl>
 8026ea4:	9505      	str	r5, [sp, #20]
 8026ea6:	9604      	str	r6, [sp, #16]
 8026ea8:	9003      	str	r0, [sp, #12]
 8026eaa:	9b07      	ldr	r3, [sp, #28]
 8026eac:	9302      	str	r3, [sp, #8]
 8026eae:	f8cd b004 	str.w	fp, [sp, #4]
 8026eb2:	f8cd a000 	str.w	sl, [sp]
 8026eb6:	2318      	movs	r3, #24
 8026eb8:	4642      	mov	r2, r8
 8026eba:	4649      	mov	r1, r9
 8026ebc:	4638      	mov	r0, r7
 8026ebe:	f7ff fe9f 	bl	8026c00 <tx_tcp>
    if (sent == 0) {
 8026ec2:	b180      	cbz	r0, 8026ee6 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 8026ec4:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8026ec8:	d010      	beq.n	8026eec <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 8026eca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8026ece:	442b      	add	r3, r5
 8026ed0:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8026ed4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8026ed8:	2b01      	cmp	r3, #1
 8026eda:	d1d0      	bne.n	8026e7e <mg_io_send+0x3e>
 8026edc:	2100      	movs	r1, #0
 8026ede:	4620      	mov	r0, r4
 8026ee0:	f7ff ff6a 	bl	8026db8 <settmout>
 8026ee4:	e7cb      	b.n	8026e7e <mg_io_send+0x3e>
      return MG_IO_WAIT;
 8026ee6:	f06f 0001 	mvn.w	r0, #1
 8026eea:	e7c9      	b.n	8026e80 <mg_io_send+0x40>
      return MG_IO_ERR;
 8026eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026ef0:	e7c6      	b.n	8026e80 <mg_io_send+0x40>
	...

08026ef4 <write_conn>:
static void write_conn(struct mg_connection *c) {
 8026ef4:	b510      	push	{r4, lr}
 8026ef6:	b082      	sub	sp, #8
 8026ef8:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8026efa:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 8026efe:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8026f02:	d00b      	beq.n	8026f1c <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8026f04:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8026f06:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8026f08:	f7fd fcbc 	bl	8024884 <mg_tls_send>
 8026f0c:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 8026f0e:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8026f12:	d008      	beq.n	8026f26 <write_conn+0x32>
  } else if (len > 0) {
 8026f14:	2800      	cmp	r0, #0
 8026f16:	dc0b      	bgt.n	8026f30 <write_conn+0x3c>
}
 8026f18:	b002      	add	sp, #8
 8026f1a:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 8026f1c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8026f1e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8026f20:	f7ff ff8e 	bl	8026e40 <mg_io_send>
 8026f24:	e7f2      	b.n	8026f0c <write_conn+0x18>
    mg_error(c, "tx err");
 8026f26:	4908      	ldr	r1, [pc, #32]	@ (8026f48 <write_conn+0x54>)
 8026f28:	4620      	mov	r0, r4
 8026f2a:	f7fe fa55 	bl	80253d8 <mg_error>
 8026f2e:	e7f3      	b.n	8026f18 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8026f30:	4602      	mov	r2, r0
 8026f32:	2100      	movs	r1, #0
 8026f34:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8026f38:	f7fd fd6b 	bl	8024a12 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8026f3c:	aa01      	add	r2, sp, #4
 8026f3e:	2108      	movs	r1, #8
 8026f40:	4620      	mov	r0, r4
 8026f42:	f7fa fe01 	bl	8021b48 <mg_call>
}
 8026f46:	e7e7      	b.n	8026f18 <write_conn+0x24>
 8026f48:	08039b9c 	.word	0x08039b9c

08026f4c <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 8026f4c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8026f50:	f240 1221 	movw	r2, #289	@ 0x121
 8026f54:	421a      	tst	r2, r3
 8026f56:	d000      	beq.n	8026f5a <init_closure+0xe>
 8026f58:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 8026f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026f5e:	b086      	sub	sp, #24
 8026f60:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8026f62:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 8026f64:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8026f66:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8026f6a:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 8026f6e:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 8026f72:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 8026f76:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 8026f7a:	f7fd fda7 	bl	8024acc <mg_ntohl>
 8026f7e:	4605      	mov	r5, r0
 8026f80:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8026f84:	f7fd fda2 	bl	8024acc <mg_ntohl>
 8026f88:	2300      	movs	r3, #0
 8026f8a:	9305      	str	r3, [sp, #20]
 8026f8c:	9304      	str	r3, [sp, #16]
 8026f8e:	9003      	str	r0, [sp, #12]
 8026f90:	9502      	str	r5, [sp, #8]
 8026f92:	f8cd a004 	str.w	sl, [sp, #4]
 8026f96:	f8cd 9000 	str.w	r9, [sp]
 8026f9a:	2311      	movs	r3, #17
 8026f9c:	4642      	mov	r2, r8
 8026f9e:	4639      	mov	r1, r7
 8026fa0:	4630      	mov	r0, r6
 8026fa2:	f7ff fe2d 	bl	8026c00 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8026fa6:	2104      	movs	r1, #4
 8026fa8:	4620      	mov	r0, r4
 8026faa:	f7ff ff05 	bl	8026db8 <settmout>
}
 8026fae:	b006      	add	sp, #24
 8026fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08026fb4 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 8026fb4:	b530      	push	{r4, r5, lr}
 8026fb6:	b085      	sub	sp, #20
 8026fb8:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8026fba:	6843      	ldr	r3, [r0, #4]
 8026fbc:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8026fbe:	69c3      	ldr	r3, [r0, #28]
 8026fc0:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 8026fc2:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8026fc6:	f36f 03c3 	bfc	r3, #3, #1
 8026fca:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8026fce:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 8026fd2:	2b00      	cmp	r3, #0
 8026fd4:	db03      	blt.n	8026fde <mg_connect_resolved+0x2a>
 8026fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8026fda:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8026fde:	68ab      	ldr	r3, [r5, #8]
 8026fe0:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 8026fe2:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 8026fe6:	1c43      	adds	r3, r0, #1
 8026fe8:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 8026fec:	f7fd fe06 	bl	8024bfc <mg_ntohs>
 8026ff0:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8026ff2:	4b51      	ldr	r3, [pc, #324]	@ (8027138 <mg_connect_resolved+0x184>)
 8026ff4:	681b      	ldr	r3, [r3, #0]
 8026ff6:	2b02      	cmp	r3, #2
 8026ff8:	dc36      	bgt.n	8027068 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 8026ffa:	2200      	movs	r2, #0
 8026ffc:	2103      	movs	r1, #3
 8026ffe:	4620      	mov	r0, r4
 8027000:	f7fa fda2 	bl	8021b48 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8027004:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027008:	f013 0301 	ands.w	r3, r3, #1
 802700c:	d009      	beq.n	8027022 <mg_connect_resolved+0x6e>
 802700e:	9903      	ldr	r1, [sp, #12]
 8027010:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8027014:	d03b      	beq.n	802708e <mg_connect_resolved+0xda>
 8027016:	68aa      	ldr	r2, [r5, #8]
 8027018:	68e8      	ldr	r0, [r5, #12]
 802701a:	ea62 0200 	orn	r2, r2, r0
 802701e:	4291      	cmp	r1, r2
 8027020:	d035      	beq.n	802708e <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8027022:	68aa      	ldr	r2, [r5, #8]
 8027024:	2a00      	cmp	r2, #0
 8027026:	d046      	beq.n	80270b6 <mg_connect_resolved+0x102>
 8027028:	9903      	ldr	r1, [sp, #12]
 802702a:	68e8      	ldr	r0, [r5, #12]
 802702c:	404a      	eors	r2, r1
 802702e:	4202      	tst	r2, r0
 8027030:	d141      	bne.n	80270b6 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8027032:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8027034:	4291      	cmp	r1, r2
 8027036:	d03e      	beq.n	80270b6 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8027038:	4b3f      	ldr	r3, [pc, #252]	@ (8027138 <mg_connect_resolved+0x184>)
 802703a:	681b      	ldr	r3, [r3, #0]
 802703c:	2b02      	cmp	r3, #2
 802703e:	dc2e      	bgt.n	802709e <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 8027040:	9903      	ldr	r1, [sp, #12]
 8027042:	4628      	mov	r0, r5
 8027044:	f7fd fed7 	bl	8024df6 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8027048:	2102      	movs	r1, #2
 802704a:	4620      	mov	r0, r4
 802704c:	f7ff feb4 	bl	8026db8 <settmout>
    c->is_arplooking = 1;
 8027050:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027054:	f043 0310 	orr.w	r3, r3, #16
 8027058:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 802705c:	b2db      	uxtb	r3, r3
 802705e:	f043 0320 	orr.w	r3, r3, #32
 8027062:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 8027066:	e018      	b.n	802709a <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8027068:	4b34      	ldr	r3, [pc, #208]	@ (802713c <mg_connect_resolved+0x188>)
 802706a:	f241 724f 	movw	r2, #5967	@ 0x174f
 802706e:	4934      	ldr	r1, [pc, #208]	@ (8027140 <mg_connect_resolved+0x18c>)
 8027070:	2003      	movs	r0, #3
 8027072:	f7fe f8c9 	bl	8025208 <mg_log_prefix>
 8027076:	4a33      	ldr	r2, [pc, #204]	@ (8027144 <mg_connect_resolved+0x190>)
 8027078:	f104 031c 	add.w	r3, r4, #28
 802707c:	9301      	str	r3, [sp, #4]
 802707e:	9200      	str	r2, [sp, #0]
 8027080:	f104 0308 	add.w	r3, r4, #8
 8027084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027086:	4830      	ldr	r0, [pc, #192]	@ (8027148 <mg_connect_resolved+0x194>)
 8027088:	f7fb ffa8 	bl	8022fdc <mg_log>
 802708c:	e7b5      	b.n	8026ffa <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 802708e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027092:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8027096:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 802709a:	b005      	add	sp, #20
 802709c:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 802709e:	4b27      	ldr	r3, [pc, #156]	@ (802713c <mg_connect_resolved+0x188>)
 80270a0:	f241 7258 	movw	r2, #5976	@ 0x1758
 80270a4:	4926      	ldr	r1, [pc, #152]	@ (8027140 <mg_connect_resolved+0x18c>)
 80270a6:	2003      	movs	r0, #3
 80270a8:	f7fe f8ae 	bl	8025208 <mg_log_prefix>
 80270ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80270ae:	4827      	ldr	r0, [pc, #156]	@ (802714c <mg_connect_resolved+0x198>)
 80270b0:	f7fb ff94 	bl	8022fdc <mg_log>
 80270b4:	e7c4      	b.n	8027040 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 80270b6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80270ba:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 80270be:	2ae0      	cmp	r2, #224	@ 0xe0
 80270c0:	d00e      	beq.n	80270e0 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 80270c2:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 80270c6:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 80270ca:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 80270ce:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 80270d2:	b31b      	cbz	r3, 802711c <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 80270d4:	2200      	movs	r2, #0
 80270d6:	2104      	movs	r1, #4
 80270d8:	4620      	mov	r0, r4
 80270da:	f7fa fd35 	bl	8021b48 <mg_call>
 80270de:	e7dc      	b.n	802709a <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 80270e0:	4b1b      	ldr	r3, [pc, #108]	@ (8027150 <mg_connect_resolved+0x19c>)
 80270e2:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80270e6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80270ea:	0c1b      	lsrs	r3, r3, #16
 80270ec:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 80270f0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80270f4:	b2db      	uxtb	r3, r3
 80270f6:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 80270fa:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 80270fe:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 8027102:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8027106:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 802710a:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 802710e:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8027112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8027116:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 802711a:	e7be      	b.n	802709a <mg_connect_resolved+0xe6>
      send_syn(c);
 802711c:	4620      	mov	r0, r4
 802711e:	f7ff fdff 	bl	8026d20 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8027122:	2103      	movs	r1, #3
 8027124:	4620      	mov	r0, r4
 8027126:	f7ff fe47 	bl	8026db8 <settmout>
      c->is_connecting = 1;
 802712a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802712e:	f043 0320 	orr.w	r3, r3, #32
 8027132:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 8027136:	e7b0      	b.n	802709a <mg_connect_resolved+0xe6>
 8027138:	200000a8 	.word	0x200000a8
 802713c:	0803a0d0 	.word	0x0803a0d0
 8027140:	08039744 	.word	0x08039744
 8027144:	08025135 	.word	0x08025135
 8027148:	08039ba4 	.word	0x08039ba4
 802714c:	08039bb4 	.word	0x08039bb4
 8027150:	08034d4c 	.word	0x08034d4c

08027154 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8027154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027156:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8027158:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 802715a:	2902      	cmp	r1, #2
 802715c:	d009      	beq.n	8027172 <dns_cb+0x1e>
 802715e:	4604      	mov	r4, r0
 8027160:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 8027164:	2907      	cmp	r1, #7
 8027166:	d016      	beq.n	8027196 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 8027168:	2909      	cmp	r1, #9
 802716a:	f000 809a 	beq.w	80272a2 <dns_cb+0x14e>
}
 802716e:	b049      	add	sp, #292	@ 0x124
 8027170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 8027172:	6816      	ldr	r6, [r2, #0]
 8027174:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 8027176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027178:	e000      	b.n	802717c <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 802717a:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 802717c:	2b00      	cmp	r3, #0
 802717e:	d0f6      	beq.n	802716e <dns_cb+0x1a>
      tmp = d->next;
 8027180:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8027182:	6899      	ldr	r1, [r3, #8]
 8027184:	68da      	ldr	r2, [r3, #12]
 8027186:	42b1      	cmp	r1, r6
 8027188:	41aa      	sbcs	r2, r5
 802718a:	d2f6      	bcs.n	802717a <dns_cb+0x26>
 802718c:	494c      	ldr	r1, [pc, #304]	@ (80272c0 <dns_cb+0x16c>)
 802718e:	6858      	ldr	r0, [r3, #4]
 8027190:	f7fe f922 	bl	80253d8 <mg_error>
 8027194:	e7f1      	b.n	802717a <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8027196:	aa02      	add	r2, sp, #8
 8027198:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802719a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802719c:	f7fe f870 	bl	8025280 <mg_dns_parse>
 80271a0:	b9c8      	cbnz	r0, 80271d6 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 80271a2:	4b48      	ldr	r3, [pc, #288]	@ (80272c4 <dns_cb+0x170>)
 80271a4:	681b      	ldr	r3, [r3, #0]
 80271a6:	2b00      	cmp	r3, #0
 80271a8:	dc0a      	bgt.n	80271c0 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 80271aa:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80271ac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80271ae:	f7fb f875 	bl	802229c <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80271b2:	4b44      	ldr	r3, [pc, #272]	@ (80272c4 <dns_cb+0x170>)
 80271b4:	681b      	ldr	r3, [r3, #0]
 80271b6:	2b00      	cmp	r3, #0
 80271b8:	dc68      	bgt.n	802728c <dns_cb+0x138>
    c->recv.len = 0;
 80271ba:	2300      	movs	r3, #0
 80271bc:	6423      	str	r3, [r4, #64]	@ 0x40
 80271be:	e7d6      	b.n	802716e <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 80271c0:	4b41      	ldr	r3, [pc, #260]	@ (80272c8 <dns_cb+0x174>)
 80271c2:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 80271c6:	4941      	ldr	r1, [pc, #260]	@ (80272cc <dns_cb+0x178>)
 80271c8:	2001      	movs	r0, #1
 80271ca:	f7fe f81d 	bl	8025208 <mg_log_prefix>
 80271ce:	4840      	ldr	r0, [pc, #256]	@ (80272d0 <dns_cb+0x17c>)
 80271d0:	f7fb ff04 	bl	8022fdc <mg_log>
 80271d4:	e7e9      	b.n	80271aa <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 80271d6:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 80271d8:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 80271da:	e008      	b.n	80271ee <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 80271dc:	6868      	ldr	r0, [r5, #4]
 80271de:	f7ff fee9 	bl	8026fb4 <mg_connect_resolved>
        mg_dns_free(head, d);
 80271e2:	4629      	mov	r1, r5
 80271e4:	4630      	mov	r0, r6
 80271e6:	f7f9 fad8 	bl	802079a <mg_dns_free>
        resolved = 1;
 80271ea:	2101      	movs	r1, #1
 80271ec:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 80271ee:	2d00      	cmp	r5, #0
 80271f0:	d049      	beq.n	8027286 <dns_cb+0x132>
        tmp = d->next;
 80271f2:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 80271f4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80271f8:	8a2b      	ldrh	r3, [r5, #16]
 80271fa:	429a      	cmp	r2, r3
 80271fc:	d1f6      	bne.n	80271ec <dns_cb+0x98>
        if (d->c->is_resolving) {
 80271fe:	6868      	ldr	r0, [r5, #4]
 8027200:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027204:	f013 0f08 	tst.w	r3, #8
 8027208:	d02c      	beq.n	8027264 <dns_cb+0x110>
          if (dm.resolved) {
 802720a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 802720e:	b323      	cbz	r3, 802725a <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 8027210:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8027212:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 8027216:	686b      	ldr	r3, [r5, #4]
 8027218:	f103 0c1c 	add.w	ip, r3, #28
 802721c:	f10d 0e0c 	add.w	lr, sp, #12
 8027220:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8027224:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8027228:	f8de 3000 	ldr.w	r3, [lr]
 802722c:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 8027230:	4b24      	ldr	r3, [pc, #144]	@ (80272c4 <dns_cb+0x170>)
 8027232:	681b      	ldr	r3, [r3, #0]
 8027234:	2b02      	cmp	r3, #2
 8027236:	ddd1      	ble.n	80271dc <dns_cb+0x88>
 8027238:	4b23      	ldr	r3, [pc, #140]	@ (80272c8 <dns_cb+0x174>)
 802723a:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 802723e:	4923      	ldr	r1, [pc, #140]	@ (80272cc <dns_cb+0x178>)
 8027240:	2003      	movs	r0, #3
 8027242:	f7fd ffe1 	bl	8025208 <mg_log_prefix>
 8027246:	686b      	ldr	r3, [r5, #4]
 8027248:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802724a:	331c      	adds	r3, #28
 802724c:	9300      	str	r3, [sp, #0]
 802724e:	4b21      	ldr	r3, [pc, #132]	@ (80272d4 <dns_cb+0x180>)
 8027250:	aa08      	add	r2, sp, #32
 8027252:	4821      	ldr	r0, [pc, #132]	@ (80272d8 <dns_cb+0x184>)
 8027254:	f7fb fec2 	bl	8022fdc <mg_log>
 8027258:	e7c0      	b.n	80271dc <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 802725a:	aa08      	add	r2, sp, #32
 802725c:	491f      	ldr	r1, [pc, #124]	@ (80272dc <dns_cb+0x188>)
 802725e:	f7fe f8bb 	bl	80253d8 <mg_error>
 8027262:	e7be      	b.n	80271e2 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8027264:	4b17      	ldr	r3, [pc, #92]	@ (80272c4 <dns_cb+0x170>)
 8027266:	681b      	ldr	r3, [r3, #0]
 8027268:	2b00      	cmp	r3, #0
 802726a:	ddba      	ble.n	80271e2 <dns_cb+0x8e>
 802726c:	4b16      	ldr	r3, [pc, #88]	@ (80272c8 <dns_cb+0x174>)
 802726e:	f240 42da 	movw	r2, #1242	@ 0x4da
 8027272:	4916      	ldr	r1, [pc, #88]	@ (80272cc <dns_cb+0x178>)
 8027274:	2001      	movs	r0, #1
 8027276:	f7fd ffc7 	bl	8025208 <mg_log_prefix>
 802727a:	686b      	ldr	r3, [r5, #4]
 802727c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802727e:	4818      	ldr	r0, [pc, #96]	@ (80272e0 <dns_cb+0x18c>)
 8027280:	f7fb feac 	bl	8022fdc <mg_log>
 8027284:	e7ad      	b.n	80271e2 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8027286:	2900      	cmp	r1, #0
 8027288:	d197      	bne.n	80271ba <dns_cb+0x66>
 802728a:	e792      	b.n	80271b2 <dns_cb+0x5e>
 802728c:	4b0e      	ldr	r3, [pc, #56]	@ (80272c8 <dns_cb+0x174>)
 802728e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8027292:	490e      	ldr	r1, [pc, #56]	@ (80272cc <dns_cb+0x178>)
 8027294:	2001      	movs	r0, #1
 8027296:	f7fd ffb7 	bl	8025208 <mg_log_prefix>
 802729a:	4812      	ldr	r0, [pc, #72]	@ (80272e4 <dns_cb+0x190>)
 802729c:	f7fb fe9e 	bl	8022fdc <mg_log>
 80272a0:	e78b      	b.n	80271ba <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 80272a2:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80272a4:	2c00      	cmp	r4, #0
 80272a6:	f43f af62 	beq.w	802716e <dns_cb+0x1a>
      tmp = d->next;
 80272aa:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 80272ac:	490e      	ldr	r1, [pc, #56]	@ (80272e8 <dns_cb+0x194>)
 80272ae:	6860      	ldr	r0, [r4, #4]
 80272b0:	f7fe f892 	bl	80253d8 <mg_error>
      mg_dns_free(head, d);
 80272b4:	4621      	mov	r1, r4
 80272b6:	4630      	mov	r0, r6
 80272b8:	f7f9 fa6f 	bl	802079a <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 80272bc:	462c      	mov	r4, r5
 80272be:	e7f1      	b.n	80272a4 <dns_cb+0x150>
 80272c0:	08039bc8 	.word	0x08039bc8
 80272c4:	200000a8 	.word	0x200000a8
 80272c8:	0803a1a4 	.word	0x0803a1a4
 80272cc:	08039744 	.word	0x08039744
 80272d0:	08039bd4 	.word	0x08039bd4
 80272d4:	08025119 	.word	0x08025119
 80272d8:	08039bf0 	.word	0x08039bf0
 80272dc:	08039c00 	.word	0x08039c00
 80272e0:	08039c18 	.word	0x08039c18
 80272e4:	08039c30 	.word	0x08039c30
 80272e8:	08039c40 	.word	0x08039c40

080272ec <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 80272ec:	b510      	push	{r4, lr}
 80272ee:	b086      	sub	sp, #24
 80272f0:	4604      	mov	r4, r0
  uint8_t opts[] = {
 80272f2:	4a12      	ldr	r2, [pc, #72]	@ (802733c <tx_dhcp_discover+0x50>)
 80272f4:	ab04      	add	r3, sp, #16
 80272f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80272fa:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 80272fe:	2200      	movs	r2, #0
 8027300:	9202      	str	r2, [sp, #8]
 8027302:	2108      	movs	r1, #8
 8027304:	9101      	str	r1, [sp, #4]
 8027306:	9300      	str	r3, [sp, #0]
 8027308:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802730c:	490c      	ldr	r1, [pc, #48]	@ (8027340 <tx_dhcp_discover+0x54>)
 802730e:	4620      	mov	r0, r4
 8027310:	f7fd fdb6 	bl	8024e80 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8027314:	4b0b      	ldr	r3, [pc, #44]	@ (8027344 <tx_dhcp_discover+0x58>)
 8027316:	681b      	ldr	r3, [r3, #0]
 8027318:	2b02      	cmp	r3, #2
 802731a:	dc01      	bgt.n	8027320 <tx_dhcp_discover+0x34>
}
 802731c:	b006      	add	sp, #24
 802731e:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8027320:	4b09      	ldr	r3, [pc, #36]	@ (8027348 <tx_dhcp_discover+0x5c>)
 8027322:	f241 4270 	movw	r2, #5232	@ 0x1470
 8027326:	4909      	ldr	r1, [pc, #36]	@ (802734c <tx_dhcp_discover+0x60>)
 8027328:	2003      	movs	r0, #3
 802732a:	f7fd ff6d 	bl	8025208 <mg_log_prefix>
 802732e:	4622      	mov	r2, r4
 8027330:	4907      	ldr	r1, [pc, #28]	@ (8027350 <tx_dhcp_discover+0x64>)
 8027332:	4808      	ldr	r0, [pc, #32]	@ (8027354 <tx_dhcp_discover+0x68>)
 8027334:	f7fb fe52 	bl	8022fdc <mg_log>
}
 8027338:	e7f0      	b.n	802731c <tx_dhcp_discover+0x30>
 802733a:	bf00      	nop
 802733c:	08039c6c 	.word	0x08039c6c
 8027340:	0803a1cc 	.word	0x0803a1cc
 8027344:	200000a8 	.word	0x200000a8
 8027348:	0803a0a0 	.word	0x0803a0a0
 802734c:	08039744 	.word	0x08039744
 8027350:	08022fad 	.word	0x08022fad
 8027354:	08039c4c 	.word	0x08039c4c

08027358 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 8027358:	b510      	push	{r4, lr}
 802735a:	b086      	sub	sp, #24
  uint8_t opts[] = {
 802735c:	4c0d      	ldr	r4, [pc, #52]	@ (8027394 <tx_dhcp_request_re+0x3c>)
 802735e:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8027360:	2401      	movs	r4, #1
 8027362:	9402      	str	r4, [sp, #8]
 8027364:	2404      	movs	r4, #4
 8027366:	9401      	str	r4, [sp, #4]
 8027368:	ac05      	add	r4, sp, #20
 802736a:	9400      	str	r4, [sp, #0]
 802736c:	f7fd fd88 	bl	8024e80 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8027370:	4b09      	ldr	r3, [pc, #36]	@ (8027398 <tx_dhcp_request_re+0x40>)
 8027372:	681b      	ldr	r3, [r3, #0]
 8027374:	2b02      	cmp	r3, #2
 8027376:	dc01      	bgt.n	802737c <tx_dhcp_request_re+0x24>
}
 8027378:	b006      	add	sp, #24
 802737a:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 802737c:	4b07      	ldr	r3, [pc, #28]	@ (802739c <tx_dhcp_request_re+0x44>)
 802737e:	f241 4266 	movw	r2, #5222	@ 0x1466
 8027382:	4907      	ldr	r1, [pc, #28]	@ (80273a0 <tx_dhcp_request_re+0x48>)
 8027384:	2003      	movs	r0, #3
 8027386:	f7fd ff3f 	bl	8025208 <mg_log_prefix>
 802738a:	4806      	ldr	r0, [pc, #24]	@ (80273a4 <tx_dhcp_request_re+0x4c>)
 802738c:	f7fb fe26 	bl	8022fdc <mg_log>
}
 8027390:	e7f2      	b.n	8027378 <tx_dhcp_request_re+0x20>
 8027392:	bf00      	nop
 8027394:	ff030135 	.word	0xff030135
 8027398:	200000a8 	.word	0x200000a8
 802739c:	0803a07c 	.word	0x0803a07c
 80273a0:	08039744 	.word	0x08039744
 80273a4:	08039c78 	.word	0x08039c78

080273a8 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80273a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80273aa:	b083      	sub	sp, #12
 80273ac:	4604      	mov	r4, r0
 80273ae:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80273b0:	698e      	ldr	r6, [r1, #24]
 80273b2:	88f7      	ldrh	r7, [r6, #6]
 80273b4:	2001      	movs	r0, #1
 80273b6:	f7fd fc21 	bl	8024bfc <mg_ntohs>
 80273ba:	4287      	cmp	r7, r0
 80273bc:	d006      	beq.n	80273cc <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 80273be:	2002      	movs	r0, #2
 80273c0:	f7fd fc1c 	bl	8024bfc <mg_ntohs>
 80273c4:	4287      	cmp	r7, r0
 80273c6:	d05a      	beq.n	802747e <rx_arp+0xd6>
}
 80273c8:	b003      	add	sp, #12
 80273ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80273cc:	69b2      	ldr	r2, [r6, #24]
 80273ce:	68a3      	ldr	r3, [r4, #8]
 80273d0:	429a      	cmp	r2, r3
 80273d2:	d1f4      	bne.n	80273be <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 80273d4:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 80273d6:	692b      	ldr	r3, [r5, #16]
 80273d8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80273dc:	6032      	str	r2, [r6, #0]
 80273de:	895b      	ldrh	r3, [r3, #10]
 80273e0:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80273e2:	6823      	ldr	r3, [r4, #0]
 80273e4:	f8c6 3006 	str.w	r3, [r6, #6]
 80273e8:	88a3      	ldrh	r3, [r4, #4]
 80273ea:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 80273ec:	f640 0006 	movw	r0, #2054	@ 0x806
 80273f0:	f7fd fc04 	bl	8024bfc <mg_ntohs>
 80273f4:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 80273f6:	69ab      	ldr	r3, [r5, #24]
 80273f8:	6818      	ldr	r0, [r3, #0]
 80273fa:	6859      	ldr	r1, [r3, #4]
 80273fc:	689a      	ldr	r2, [r3, #8]
 80273fe:	68df      	ldr	r7, [r3, #12]
 8027400:	f8c6 000e 	str.w	r0, [r6, #14]
 8027404:	f8c6 1012 	str.w	r1, [r6, #18]
 8027408:	f8c6 2016 	str.w	r2, [r6, #22]
 802740c:	f8c6 701a 	str.w	r7, [r6, #26]
 8027410:	6918      	ldr	r0, [r3, #16]
 8027412:	6959      	ldr	r1, [r3, #20]
 8027414:	699a      	ldr	r2, [r3, #24]
 8027416:	f8c6 001e 	str.w	r0, [r6, #30]
 802741a:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 802741e:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 8027422:	2002      	movs	r0, #2
 8027424:	f7fd fbea 	bl	8024bfc <mg_ntohs>
 8027428:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 802742a:	69ab      	ldr	r3, [r5, #24]
 802742c:	689a      	ldr	r2, [r3, #8]
 802742e:	6232      	str	r2, [r6, #32]
 8027430:	899b      	ldrh	r3, [r3, #12]
 8027432:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8027434:	6823      	ldr	r3, [r4, #0]
 8027436:	f8c6 3016 	str.w	r3, [r6, #22]
 802743a:	88a3      	ldrh	r3, [r4, #4]
 802743c:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 802743e:	69ab      	ldr	r3, [r5, #24]
 8027440:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8027444:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 8027448:	68a3      	ldr	r3, [r4, #8]
 802744a:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802744c:	4b32      	ldr	r3, [pc, #200]	@ (8027518 <rx_arp+0x170>)
 802744e:	681b      	ldr	r3, [r3, #0]
 8027450:	2b02      	cmp	r3, #2
 8027452:	dc04      	bgt.n	802745e <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 8027454:	212a      	movs	r1, #42	@ 0x2a
 8027456:	4620      	mov	r0, r4
 8027458:	f7f8 ff95 	bl	8020386 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802745c:	e7b4      	b.n	80273c8 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802745e:	4b2f      	ldr	r3, [pc, #188]	@ (802751c <rx_arp+0x174>)
 8027460:	f241 4292 	movw	r2, #5266	@ 0x1492
 8027464:	492e      	ldr	r1, [pc, #184]	@ (8027520 <rx_arp+0x178>)
 8027466:	2003      	movs	r0, #3
 8027468:	f7fd fece 	bl	8025208 <mg_log_prefix>
 802746c:	9400      	str	r4, [sp, #0]
 802746e:	4b2d      	ldr	r3, [pc, #180]	@ (8027524 <rx_arp+0x17c>)
 8027470:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8027474:	492c      	ldr	r1, [pc, #176]	@ (8027528 <rx_arp+0x180>)
 8027476:	482d      	ldr	r0, [pc, #180]	@ (802752c <rx_arp+0x184>)
 8027478:	f7fb fdb0 	bl	8022fdc <mg_log>
 802747c:	e7ea      	b.n	8027454 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 802747e:	2206      	movs	r2, #6
 8027480:	4621      	mov	r1, r4
 8027482:	f106 0012 	add.w	r0, r6, #18
 8027486:	f004 fa27 	bl	802b8d8 <memcmp>
 802748a:	2800      	cmp	r0, #0
 802748c:	d19c      	bne.n	80273c8 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 802748e:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8027492:	6923      	ldr	r3, [r4, #16]
 8027494:	429a      	cmp	r2, r3
 8027496:	d026      	beq.n	80274e6 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8027498:	2200      	movs	r2, #0
 802749a:	4629      	mov	r1, r5
 802749c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 802749e:	f7fa fa50 	bl	8021942 <getpeer>
      if (c != NULL && c->is_arplooking) {
 80274a2:	4604      	mov	r4, r0
 80274a4:	2800      	cmp	r0, #0
 80274a6:	d08f      	beq.n	80273c8 <rx_arp+0x20>
 80274a8:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80274ac:	f013 0f10 	tst.w	r3, #16
 80274b0:	d08a      	beq.n	80273c8 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 80274b2:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 80274b6:	68b3      	ldr	r3, [r6, #8]
 80274b8:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 80274bc:	89b3      	ldrh	r3, [r6, #12]
 80274be:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 80274c2:	4b15      	ldr	r3, [pc, #84]	@ (8027518 <rx_arp+0x170>)
 80274c4:	681b      	ldr	r3, [r3, #0]
 80274c6:	2b02      	cmp	r3, #2
 80274c8:	dc14      	bgt.n	80274f4 <rx_arp+0x14c>
        c->is_arplooking = 0;
 80274ca:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80274ce:	f36f 1304 	bfc	r3, #4, #1
 80274d2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 80274d6:	4620      	mov	r0, r4
 80274d8:	f7ff fc22 	bl	8026d20 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 80274dc:	2103      	movs	r1, #3
 80274de:	4620      	mov	r0, r4
 80274e0:	f7ff fc6a 	bl	8026db8 <settmout>
 80274e4:	e770      	b.n	80273c8 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 80274e6:	68b3      	ldr	r3, [r6, #8]
 80274e8:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 80274ec:	89b3      	ldrh	r3, [r6, #12]
 80274ee:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80274f2:	e769      	b.n	80273c8 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 80274f4:	4b09      	ldr	r3, [pc, #36]	@ (802751c <rx_arp+0x174>)
 80274f6:	f241 429f 	movw	r2, #5279	@ 0x149f
 80274fa:	4909      	ldr	r1, [pc, #36]	@ (8027520 <rx_arp+0x178>)
 80274fc:	2003      	movs	r0, #3
 80274fe:	f7fd fe83 	bl	8025208 <mg_log_prefix>
 8027502:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027504:	9501      	str	r5, [sp, #4]
 8027506:	4b07      	ldr	r3, [pc, #28]	@ (8027524 <rx_arp+0x17c>)
 8027508:	9300      	str	r3, [sp, #0]
 802750a:	f104 031c 	add.w	r3, r4, #28
 802750e:	4a06      	ldr	r2, [pc, #24]	@ (8027528 <rx_arp+0x180>)
 8027510:	4807      	ldr	r0, [pc, #28]	@ (8027530 <rx_arp+0x188>)
 8027512:	f7fb fd63 	bl	8022fdc <mg_log>
 8027516:	e7d8      	b.n	80274ca <rx_arp+0x122>
 8027518:	200000a8 	.word	0x200000a8
 802751c:	0803a068 	.word	0x0803a068
 8027520:	08039744 	.word	0x08039744
 8027524:	08022fad 	.word	0x08022fad
 8027528:	08022f9d 	.word	0x08022f9d
 802752c:	08039c88 	.word	0x08039c88
 8027530:	08039ca0 	.word	0x08039ca0

08027534 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 8027534:	b570      	push	{r4, r5, r6, lr}
 8027536:	b08c      	sub	sp, #48	@ 0x30
 8027538:	4686      	mov	lr, r0
 802753a:	460d      	mov	r5, r1
 802753c:	4616      	mov	r6, r2
  uint8_t opts[] = {
 802753e:	f10d 0c14 	add.w	ip, sp, #20
 8027542:	4c22      	ldr	r4, [pc, #136]	@ (80275cc <tx_dhcp_request_sel+0x98>)
 8027544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8027546:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802754a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802754e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8027552:	f82c 2b02 	strh.w	r2, [ip], #2
 8027556:	0c12      	lsrs	r2, r2, #16
 8027558:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 802755c:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8027560:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8027562:	f89e 301f 	ldrb.w	r3, [lr, #31]
 8027566:	b323      	cbz	r3, 80275b2 <tx_dhcp_request_sel+0x7e>
 8027568:	2306      	movs	r3, #6
 802756a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 802756e:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 8027570:	f89e 2020 	ldrb.w	r2, [lr, #32]
 8027574:	b132      	cbz	r2, 8027584 <tx_dhcp_request_sel+0x50>
 8027576:	1c5a      	adds	r2, r3, #1
 8027578:	3348      	adds	r3, #72	@ 0x48
 802757a:	446b      	add	r3, sp
 802757c:	212a      	movs	r1, #42	@ 0x2a
 802757e:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8027582:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8027584:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8027588:	441a      	add	r2, r3
 802758a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 802758e:	2200      	movs	r2, #0
 8027590:	9202      	str	r2, [sp, #8]
 8027592:	3319      	adds	r3, #25
 8027594:	9301      	str	r3, [sp, #4]
 8027596:	ab05      	add	r3, sp, #20
 8027598:	9300      	str	r3, [sp, #0]
 802759a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802759e:	490c      	ldr	r1, [pc, #48]	@ (80275d0 <tx_dhcp_request_sel+0x9c>)
 80275a0:	4670      	mov	r0, lr
 80275a2:	f7fd fc6d 	bl	8024e80 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 80275a6:	4b0b      	ldr	r3, [pc, #44]	@ (80275d4 <tx_dhcp_request_sel+0xa0>)
 80275a8:	681b      	ldr	r3, [r3, #0]
 80275aa:	2b02      	cmp	r3, #2
 80275ac:	dc03      	bgt.n	80275b6 <tx_dhcp_request_sel+0x82>
}
 80275ae:	b00c      	add	sp, #48	@ 0x30
 80275b0:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 80275b2:	2300      	movs	r3, #0
 80275b4:	e7dc      	b.n	8027570 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 80275b6:	4b08      	ldr	r3, [pc, #32]	@ (80275d8 <tx_dhcp_request_sel+0xa4>)
 80275b8:	f241 425b 	movw	r2, #5211	@ 0x145b
 80275bc:	4907      	ldr	r1, [pc, #28]	@ (80275dc <tx_dhcp_request_sel+0xa8>)
 80275be:	2003      	movs	r0, #3
 80275c0:	f7fd fe22 	bl	8025208 <mg_log_prefix>
 80275c4:	4806      	ldr	r0, [pc, #24]	@ (80275e0 <tx_dhcp_request_sel+0xac>)
 80275c6:	f7fb fd09 	bl	8022fdc <mg_log>
}
 80275ca:	e7f0      	b.n	80275ae <tx_dhcp_request_sel+0x7a>
 80275cc:	08034f78 	.word	0x08034f78
 80275d0:	0803a1cc 	.word	0x0803a1cc
 80275d4:	200000a8 	.word	0x200000a8
 80275d8:	0803a03c 	.word	0x0803a03c
 80275dc:	08039744 	.word	0x08039744
 80275e0:	08039c78 	.word	0x08039c78

080275e4 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 80275e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80275e8:	b089      	sub	sp, #36	@ 0x24
 80275ea:	4604      	mov	r4, r0
 80275ec:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 80275ee:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80275f2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80275f6:	d049      	beq.n	802768c <read_conn+0xa8>
 80275f8:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 80275fc:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 80275fe:	6878      	ldr	r0, [r7, #4]
 8027600:	f7fd fa64 	bl	8024acc <mg_ntohl>
 8027604:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8027606:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 8027608:	7b7b      	ldrb	r3, [r7, #13]
 802760a:	f013 0f01 	tst.w	r3, #1
 802760e:	d053      	beq.n	80276b8 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8027610:	68eb      	ldr	r3, [r5, #12]
 8027612:	4403      	add	r3, r0
 8027614:	3301      	adds	r3, #1
 8027616:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 802761a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802761e:	f013 0f10 	tst.w	r3, #16
 8027622:	d003      	beq.n	802762c <read_conn+0x48>
 8027624:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8027628:	2b04      	cmp	r3, #4
 802762a:	d032      	beq.n	8027692 <read_conn+0xae>
      c->is_draining = 1;
 802762c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027630:	f043 0310 	orr.w	r3, r3, #16
 8027634:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8027638:	2104      	movs	r1, #4
 802763a:	4620      	mov	r0, r4
 802763c:	f7ff fbbc 	bl	8026db8 <settmout>
      flags |= TH_FIN;
 8027640:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 8027644:	6863      	ldr	r3, [r4, #4]
 8027646:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8027648:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 802764c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8027650:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8027654:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8027658:	f7fd fa38 	bl	8024acc <mg_ntohl>
 802765c:	4605      	mov	r5, r0
 802765e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027662:	f7fd fa33 	bl	8024acc <mg_ntohl>
 8027666:	2300      	movs	r3, #0
 8027668:	9305      	str	r3, [sp, #20]
 802766a:	4b9b      	ldr	r3, [pc, #620]	@ (80278d8 <read_conn+0x2f4>)
 802766c:	9304      	str	r3, [sp, #16]
 802766e:	9003      	str	r0, [sp, #12]
 8027670:	9502      	str	r5, [sp, #8]
 8027672:	f8cd a004 	str.w	sl, [sp, #4]
 8027676:	f8cd 9000 	str.w	r9, [sp]
 802767a:	465b      	mov	r3, fp
 802767c:	4632      	mov	r2, r6
 802767e:	4641      	mov	r1, r8
 8027680:	4638      	mov	r0, r7
 8027682:	f7ff fabd 	bl	8026c00 <tx_tcp>
}
 8027686:	b009      	add	sp, #36	@ 0x24
 8027688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802768c:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8027690:	e7b4      	b.n	80275fc <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8027692:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8027696:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8027698:	6898      	ldr	r0, [r3, #8]
 802769a:	f7fd fa17 	bl	8024acc <mg_ntohl>
 802769e:	4287      	cmp	r7, r0
 80276a0:	d004      	beq.n	80276ac <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 80276a2:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 80276a6:	f04f 0b10 	mov.w	fp, #16
 80276aa:	e7cb      	b.n	8027644 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 80276ac:	3701      	adds	r7, #1
 80276ae:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 80276b2:	f04f 0b10 	mov.w	fp, #16
 80276b6:	e7c5      	b.n	8027644 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 80276b8:	68eb      	ldr	r3, [r5, #12]
 80276ba:	2b00      	cmp	r3, #0
 80276bc:	d0e3      	beq.n	8027686 <read_conn+0xa2>
  } else if (seq != s->ack) {
 80276be:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80276c2:	4282      	cmp	r2, r0
 80276c4:	d046      	beq.n	8027754 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 80276c6:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 80276c8:	42aa      	cmp	r2, r5
 80276ca:	d025      	beq.n	8027718 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 80276cc:	4b83      	ldr	r3, [pc, #524]	@ (80278dc <read_conn+0x2f8>)
 80276ce:	681b      	ldr	r3, [r3, #0]
 80276d0:	2b03      	cmp	r3, #3
 80276d2:	dc30      	bgt.n	8027736 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 80276d4:	6863      	ldr	r3, [r4, #4]
 80276d6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 80276d8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80276dc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 80276e0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 80276e4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80276e8:	f7fd f9f0 	bl	8024acc <mg_ntohl>
 80276ec:	4605      	mov	r5, r0
 80276ee:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80276f2:	f7fd f9eb 	bl	8024acc <mg_ntohl>
 80276f6:	2300      	movs	r3, #0
 80276f8:	9305      	str	r3, [sp, #20]
 80276fa:	4b77      	ldr	r3, [pc, #476]	@ (80278d8 <read_conn+0x2f4>)
 80276fc:	9304      	str	r3, [sp, #16]
 80276fe:	9003      	str	r0, [sp, #12]
 8027700:	9502      	str	r5, [sp, #8]
 8027702:	f8cd a004 	str.w	sl, [sp, #4]
 8027706:	f8cd 9000 	str.w	r9, [sp]
 802770a:	2310      	movs	r3, #16
 802770c:	4632      	mov	r2, r6
 802770e:	4641      	mov	r1, r8
 8027710:	4638      	mov	r0, r7
 8027712:	f7ff fa75 	bl	8026c00 <tx_tcp>
 8027716:	e7b6      	b.n	8027686 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8027718:	4b70      	ldr	r3, [pc, #448]	@ (80278dc <read_conn+0x2f8>)
 802771a:	681b      	ldr	r3, [r3, #0]
 802771c:	2b03      	cmp	r3, #3
 802771e:	ddb2      	ble.n	8027686 <read_conn+0xa2>
 8027720:	4b6f      	ldr	r3, [pc, #444]	@ (80278e0 <read_conn+0x2fc>)
 8027722:	f241 52da 	movw	r2, #5594	@ 0x15da
 8027726:	496f      	ldr	r1, [pc, #444]	@ (80278e4 <read_conn+0x300>)
 8027728:	2004      	movs	r0, #4
 802772a:	f7fd fd6d 	bl	8025208 <mg_log_prefix>
 802772e:	486e      	ldr	r0, [pc, #440]	@ (80278e8 <read_conn+0x304>)
 8027730:	f7fb fc54 	bl	8022fdc <mg_log>
 8027734:	e7a7      	b.n	8027686 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8027736:	4b6a      	ldr	r3, [pc, #424]	@ (80278e0 <read_conn+0x2fc>)
 8027738:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 802773c:	4969      	ldr	r1, [pc, #420]	@ (80278e4 <read_conn+0x300>)
 802773e:	2004      	movs	r0, #4
 8027740:	f7fd fd62 	bl	8025208 <mg_log_prefix>
 8027744:	462b      	mov	r3, r5
 8027746:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 802774a:	4641      	mov	r1, r8
 802774c:	4867      	ldr	r0, [pc, #412]	@ (80278ec <read_conn+0x308>)
 802774e:	f7fb fc45 	bl	8022fdc <mg_log>
 8027752:	e7bf      	b.n	80276d4 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 8027754:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8027758:	f8d9 1008 	ldr.w	r1, [r9, #8]
 802775c:	1a52      	subs	r2, r2, r1
 802775e:	4293      	cmp	r3, r2
 8027760:	d905      	bls.n	802776e <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8027762:	4419      	add	r1, r3
 8027764:	4648      	mov	r0, r9
 8027766:	f7fe fb8b 	bl	8025e80 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 802776a:	2800      	cmp	r0, #0
 802776c:	d05c      	beq.n	8027828 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 802776e:	f8d9 0000 	ldr.w	r0, [r9]
 8027772:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8027776:	68ea      	ldr	r2, [r5, #12]
 8027778:	68a9      	ldr	r1, [r5, #8]
 802777a:	4418      	add	r0, r3
 802777c:	f005 fb7c 	bl	802ce78 <memcpy>
    io->len += pkt->pay.len;
 8027780:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8027784:	68ea      	ldr	r2, [r5, #12]
 8027786:	4413      	add	r3, r2
 8027788:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 802778c:	4b53      	ldr	r3, [pc, #332]	@ (80278dc <read_conn+0x2f8>)
 802778e:	681b      	ldr	r3, [r3, #0]
 8027790:	2b03      	cmp	r3, #3
 8027792:	dc4e      	bgt.n	8027832 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8027794:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8027796:	6858      	ldr	r0, [r3, #4]
 8027798:	f7fd f998 	bl	8024acc <mg_ntohl>
 802779c:	68eb      	ldr	r3, [r5, #12]
 802779e:	4418      	add	r0, r3
 80277a0:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 80277a4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80277a8:	68ea      	ldr	r2, [r5, #12]
 80277aa:	4413      	add	r3, r2
 80277ac:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 80277b0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80277b4:	4293      	cmp	r3, r2
 80277b6:	d95e      	bls.n	8027876 <read_conn+0x292>
 80277b8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 80277bc:	4298      	cmp	r0, r3
 80277be:	d05a      	beq.n	8027876 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 80277c0:	4b46      	ldr	r3, [pc, #280]	@ (80278dc <read_conn+0x2f8>)
 80277c2:	681b      	ldr	r3, [r3, #0]
 80277c4:	2b03      	cmp	r3, #3
 80277c6:	dc48      	bgt.n	802785a <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 80277c8:	6863      	ldr	r3, [r4, #4]
 80277ca:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 80277ce:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80277d2:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 80277d6:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 80277da:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80277de:	f7fd f975 	bl	8024acc <mg_ntohl>
 80277e2:	9007      	str	r0, [sp, #28]
 80277e4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80277e8:	f7fd f970 	bl	8024acc <mg_ntohl>
 80277ec:	2700      	movs	r7, #0
 80277ee:	9705      	str	r7, [sp, #20]
 80277f0:	9704      	str	r7, [sp, #16]
 80277f2:	9003      	str	r0, [sp, #12]
 80277f4:	9b07      	ldr	r3, [sp, #28]
 80277f6:	9302      	str	r3, [sp, #8]
 80277f8:	f8cd b004 	str.w	fp, [sp, #4]
 80277fc:	f8cd a000 	str.w	sl, [sp]
 8027800:	2310      	movs	r3, #16
 8027802:	4632      	mov	r2, r6
 8027804:	4641      	mov	r1, r8
 8027806:	4648      	mov	r0, r9
 8027808:	f7ff f9fa 	bl	8026c00 <tx_tcp>
      s->unacked = 0;
 802780c:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 8027810:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8027814:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8027818:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802781c:	b37b      	cbz	r3, 802787e <read_conn+0x29a>
 802781e:	4639      	mov	r1, r7
 8027820:	4620      	mov	r0, r4
 8027822:	f7ff fac9 	bl	8026db8 <settmout>
 8027826:	e02a      	b.n	802787e <read_conn+0x29a>
    mg_error(c, "oom");
 8027828:	4931      	ldr	r1, [pc, #196]	@ (80278f0 <read_conn+0x30c>)
 802782a:	4620      	mov	r0, r4
 802782c:	f7fd fdd4 	bl	80253d8 <mg_error>
 8027830:	e729      	b.n	8027686 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8027832:	4b2b      	ldr	r3, [pc, #172]	@ (80278e0 <read_conn+0x2fc>)
 8027834:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 8027838:	492a      	ldr	r1, [pc, #168]	@ (80278e4 <read_conn+0x300>)
 802783a:	2004      	movs	r0, #4
 802783c:	f7fd fce4 	bl	8025208 <mg_log_prefix>
 8027840:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8027842:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8027844:	6858      	ldr	r0, [r3, #4]
 8027846:	f7fd f941 	bl	8024acc <mg_ntohl>
 802784a:	4602      	mov	r2, r0
 802784c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8027850:	4639      	mov	r1, r7
 8027852:	4828      	ldr	r0, [pc, #160]	@ (80278f4 <read_conn+0x310>)
 8027854:	f7fb fbc2 	bl	8022fdc <mg_log>
 8027858:	e79c      	b.n	8027794 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 802785a:	4b21      	ldr	r3, [pc, #132]	@ (80278e0 <read_conn+0x2fc>)
 802785c:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 8027860:	4920      	ldr	r1, [pc, #128]	@ (80278e4 <read_conn+0x300>)
 8027862:	2004      	movs	r0, #4
 8027864:	f7fd fcd0 	bl	8025208 <mg_log_prefix>
 8027868:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 802786c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802786e:	4822      	ldr	r0, [pc, #136]	@ (80278f8 <read_conn+0x314>)
 8027870:	f7fb fbb4 	bl	8022fdc <mg_log>
 8027874:	e7a8      	b.n	80277c8 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8027876:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802787a:	2b01      	cmp	r3, #1
 802787c:	d11b      	bne.n	80278b6 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 802787e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027882:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8027886:	2ac0      	cmp	r2, #192	@ 0xc0
 8027888:	f43f aefd 	beq.w	8027686 <read_conn+0xa2>
    } else if (c->is_tls) {
 802788c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8027890:	d01b      	beq.n	80278ca <read_conn+0x2e6>
      io = &c->recv;
 8027892:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8027896:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8027898:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802789a:	1a5b      	subs	r3, r3, r1
 802789c:	68ea      	ldr	r2, [r5, #12]
 802789e:	4293      	cmp	r3, r2
 80278a0:	d204      	bcs.n	80278ac <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 80278a2:	4411      	add	r1, r2
 80278a4:	4630      	mov	r0, r6
 80278a6:	f7fe faeb 	bl	8025e80 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 80278aa:	b148      	cbz	r0, 80278c0 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 80278ac:	4631      	mov	r1, r6
 80278ae:	4620      	mov	r0, r4
 80278b0:	f7fd fdca 	bl	8025448 <handle_tls_recv>
 80278b4:	e6e7      	b.n	8027686 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 80278b6:	2101      	movs	r1, #1
 80278b8:	4620      	mov	r0, r4
 80278ba:	f7ff fa7d 	bl	8026db8 <settmout>
 80278be:	e7de      	b.n	802787e <read_conn+0x29a>
        mg_error(c, "oom");
 80278c0:	490b      	ldr	r1, [pc, #44]	@ (80278f0 <read_conn+0x30c>)
 80278c2:	4620      	mov	r0, r4
 80278c4:	f7fd fd88 	bl	80253d8 <mg_error>
 80278c8:	e6dd      	b.n	8027686 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 80278ca:	f105 020c 	add.w	r2, r5, #12
 80278ce:	2107      	movs	r1, #7
 80278d0:	4620      	mov	r0, r4
 80278d2:	f7fa f939 	bl	8021b48 <mg_call>
}
 80278d6:	e6d6      	b.n	8027686 <read_conn+0xa2>
 80278d8:	08035a68 	.word	0x08035a68
 80278dc:	200000a8 	.word	0x200000a8
 80278e0:	0803a030 	.word	0x0803a030
 80278e4:	08039744 	.word	0x08039744
 80278e8:	08039cbc 	.word	0x08039cbc
 80278ec:	08039cd4 	.word	0x08039cd4
 80278f0:	08039a44 	.word	0x08039a44
 80278f4:	08039cec 	.word	0x08039cec
 80278f8:	08039d00 	.word	0x08039d00

080278fc <accept_conn>:
                                         struct pkt *pkt) {
 80278fc:	b570      	push	{r4, r5, r6, lr}
 80278fe:	4605      	mov	r5, r0
 8027900:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8027902:	6840      	ldr	r0, [r0, #4]
 8027904:	f7fa fe92 	bl	802262c <mg_alloc_conn>
  if (c == NULL) {
 8027908:	4604      	mov	r4, r0
 802790a:	2800      	cmp	r0, #0
 802790c:	d058      	beq.n	80279c0 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 802790e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8027910:	6898      	ldr	r0, [r3, #8]
 8027912:	f7fd f8db 	bl	8024acc <mg_ntohl>
 8027916:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 802791a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 802791c:	6858      	ldr	r0, [r3, #4]
 802791e:	f7fd f8d5 	bl	8024acc <mg_ntohl>
 8027922:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8027926:	6933      	ldr	r3, [r6, #16]
 8027928:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802792c:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8027930:	895b      	ldrh	r3, [r3, #10]
 8027932:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8027936:	2100      	movs	r1, #0
 8027938:	4620      	mov	r0, r4
 802793a:	f7ff fa3d 	bl	8026db8 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802793e:	69f3      	ldr	r3, [r6, #28]
 8027940:	68db      	ldr	r3, [r3, #12]
 8027942:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 8027944:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8027946:	881b      	ldrh	r3, [r3, #0]
 8027948:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802794a:	4b2c      	ldr	r3, [pc, #176]	@ (80279fc <accept_conn+0x100>)
 802794c:	681b      	ldr	r3, [r3, #0]
 802794e:	2b02      	cmp	r3, #2
 8027950:	dc45      	bgt.n	80279de <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8027952:	686b      	ldr	r3, [r5, #4]
 8027954:	681b      	ldr	r3, [r3, #0]
 8027956:	6023      	str	r3, [r4, #0]
 8027958:	686b      	ldr	r3, [r5, #4]
 802795a:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 802795c:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027960:	f043 0304 	orr.w	r3, r3, #4
 8027964:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8027968:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 802796c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8027970:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 8027974:	f363 02c3 	bfi	r2, r3, #3, #1
 8027978:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 802797c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8027980:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8027984:	f104 0608 	add.w	r6, r4, #8
 8027988:	f105 0c08 	add.w	ip, r5, #8
 802798c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8027990:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8027992:	f8dc 3000 	ldr.w	r3, [ip]
 8027996:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 8027998:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 802799c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 80279a0:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 80279a2:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 80279a4:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 80279a6:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 80279a8:	2200      	movs	r2, #0
 80279aa:	2101      	movs	r1, #1
 80279ac:	4620      	mov	r0, r4
 80279ae:	f7fa f8cb 	bl	8021b48 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 80279b2:	2200      	movs	r2, #0
 80279b4:	2105      	movs	r1, #5
 80279b6:	4620      	mov	r0, r4
 80279b8:	f7fa f8c6 	bl	8021b48 <mg_call>
}
 80279bc:	4620      	mov	r0, r4
 80279be:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 80279c0:	4b0e      	ldr	r3, [pc, #56]	@ (80279fc <accept_conn+0x100>)
 80279c2:	681b      	ldr	r3, [r3, #0]
 80279c4:	2b00      	cmp	r3, #0
 80279c6:	ddf9      	ble.n	80279bc <accept_conn+0xc0>
 80279c8:	4b0d      	ldr	r3, [pc, #52]	@ (8027a00 <accept_conn+0x104>)
 80279ca:	f241 5268 	movw	r2, #5480	@ 0x1568
 80279ce:	490d      	ldr	r1, [pc, #52]	@ (8027a04 <accept_conn+0x108>)
 80279d0:	2001      	movs	r0, #1
 80279d2:	f7fd fc19 	bl	8025208 <mg_log_prefix>
 80279d6:	480c      	ldr	r0, [pc, #48]	@ (8027a08 <accept_conn+0x10c>)
 80279d8:	f7fb fb00 	bl	8022fdc <mg_log>
    return NULL;
 80279dc:	e7ee      	b.n	80279bc <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 80279de:	4b08      	ldr	r3, [pc, #32]	@ (8027a00 <accept_conn+0x104>)
 80279e0:	f241 5271 	movw	r2, #5489	@ 0x1571
 80279e4:	4907      	ldr	r1, [pc, #28]	@ (8027a04 <accept_conn+0x108>)
 80279e6:	2003      	movs	r0, #3
 80279e8:	f7fd fc0e 	bl	8025208 <mg_log_prefix>
 80279ec:	f104 031c 	add.w	r3, r4, #28
 80279f0:	4a06      	ldr	r2, [pc, #24]	@ (8027a0c <accept_conn+0x110>)
 80279f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80279f4:	4806      	ldr	r0, [pc, #24]	@ (8027a10 <accept_conn+0x114>)
 80279f6:	f7fb faf1 	bl	8022fdc <mg_log>
 80279fa:	e7aa      	b.n	8027952 <accept_conn+0x56>
 80279fc:	200000a8 	.word	0x200000a8
 8027a00:	0803a024 	.word	0x0803a024
 8027a04:	08039744 	.word	0x08039744
 8027a08:	08039d6c 	.word	0x08039d6c
 8027a0c:	08025135 	.word	0x08025135
 8027a10:	08039d10 	.word	0x08039d10

08027a14 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8027a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027a18:	b083      	sub	sp, #12
 8027a1a:	4606      	mov	r6, r0
 8027a1c:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8027a1e:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 8027a20:	2200      	movs	r2, #0
 8027a22:	4638      	mov	r0, r7
 8027a24:	f7f9 ff8d 	bl	8021942 <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8027a28:	4605      	mov	r5, r0
 8027a2a:	b380      	cbz	r0, 8027a8e <rx_tcp+0x7a>
 8027a2c:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8027a30:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027a34:	f013 0f20 	tst.w	r3, #32
 8027a38:	d02b      	beq.n	8027a92 <rx_tcp+0x7e>
 8027a3a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8027a3c:	7b5a      	ldrb	r2, [r3, #13]
 8027a3e:	2a12      	cmp	r2, #18
 8027a40:	d126      	bne.n	8027a90 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8027a42:	6898      	ldr	r0, [r3, #8]
 8027a44:	f7fd f842 	bl	8024acc <mg_ntohl>
 8027a48:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 8027a4c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8027a4e:	6858      	ldr	r0, [r3, #4]
 8027a50:	f7fd f83c 	bl	8024acc <mg_ntohl>
 8027a54:	3001      	adds	r0, #1
 8027a56:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 8027a5a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8027a5c:	689b      	ldr	r3, [r3, #8]
 8027a5e:	2700      	movs	r7, #0
 8027a60:	9701      	str	r7, [sp, #4]
 8027a62:	9700      	str	r7, [sp, #0]
 8027a64:	2210      	movs	r2, #16
 8027a66:	4621      	mov	r1, r4
 8027a68:	4630      	mov	r0, r6
 8027a6a:	f7ff f975 	bl	8026d58 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 8027a6e:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8027a72:	f367 1345 	bfi	r3, r7, #5, #1
 8027a76:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 8027a7a:	4639      	mov	r1, r7
 8027a7c:	4628      	mov	r0, r5
 8027a7e:	f7ff f99b 	bl	8026db8 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8027a82:	463a      	mov	r2, r7
 8027a84:	2104      	movs	r1, #4
 8027a86:	4628      	mov	r0, r5
 8027a88:	f7fa f85e 	bl	8021b48 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 8027a8c:	e01b      	b.n	8027ac6 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8027a8e:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8027a90:	b385      	cbz	r5, 8027af4 <rx_tcp+0xe0>
 8027a92:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8027a96:	f013 0f20 	tst.w	r3, #32
 8027a9a:	d004      	beq.n	8027aa6 <rx_tcp+0x92>
 8027a9c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8027a9e:	7b5a      	ldrb	r2, [r3, #13]
 8027aa0:	2a10      	cmp	r2, #16
 8027aa2:	d113      	bne.n	8027acc <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8027aa4:	b335      	cbz	r5, 8027af4 <rx_tcp+0xe0>
 8027aa6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8027aa8:	7b5b      	ldrb	r3, [r3, #13]
 8027aaa:	f013 0f04 	tst.w	r3, #4
 8027aae:	d117      	bne.n	8027ae0 <rx_tcp+0xcc>
  } else if (c != NULL) {
 8027ab0:	b305      	cbz	r5, 8027af4 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8027ab2:	2300      	movs	r3, #0
 8027ab4:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8027ab8:	f898 301e 	ldrb.w	r3, [r8, #30]
 8027abc:	b1ab      	cbz	r3, 8027aea <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 8027abe:	4621      	mov	r1, r4
 8027ac0:	4628      	mov	r0, r5
 8027ac2:	f7ff fd8f 	bl	80275e4 <read_conn>
}
 8027ac6:	b003      	add	sp, #12
 8027ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8027acc:	689b      	ldr	r3, [r3, #8]
 8027ace:	2200      	movs	r2, #0
 8027ad0:	9201      	str	r2, [sp, #4]
 8027ad2:	9200      	str	r2, [sp, #0]
 8027ad4:	2214      	movs	r2, #20
 8027ad6:	4621      	mov	r1, r4
 8027ad8:	4630      	mov	r0, r6
 8027ada:	f7ff f93d 	bl	8026d58 <tx_tcp_pkt>
 8027ade:	e7f2      	b.n	8027ac6 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8027ae0:	4934      	ldr	r1, [pc, #208]	@ (8027bb4 <rx_tcp+0x1a0>)
 8027ae2:	4628      	mov	r0, r5
 8027ae4:	f7fd fc78 	bl	80253d8 <mg_error>
 8027ae8:	e7ed      	b.n	8027ac6 <rx_tcp+0xb2>
      settmout(c,
 8027aea:	2100      	movs	r1, #0
 8027aec:	4628      	mov	r0, r5
 8027aee:	f7ff f963 	bl	8026db8 <settmout>
 8027af2:	e7e4      	b.n	8027abe <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8027af4:	2201      	movs	r2, #1
 8027af6:	4621      	mov	r1, r4
 8027af8:	4638      	mov	r0, r7
 8027afa:	f7f9 ff22 	bl	8021942 <getpeer>
 8027afe:	4607      	mov	r7, r0
 8027b00:	b168      	cbz	r0, 8027b1e <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 8027b02:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8027b04:	7b6b      	ldrb	r3, [r5, #13]
 8027b06:	f013 0f04 	tst.w	r3, #4
 8027b0a:	d013      	beq.n	8027b34 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8027b0c:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027b10:	f013 0f04 	tst.w	r3, #4
 8027b14:	d0d7      	beq.n	8027ac6 <rx_tcp+0xb2>
 8027b16:	4927      	ldr	r1, [pc, #156]	@ (8027bb4 <rx_tcp+0x1a0>)
 8027b18:	f7fd fc5e 	bl	80253d8 <mg_error>
 8027b1c:	e7d3      	b.n	8027ac6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8027b1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8027b20:	689b      	ldr	r3, [r3, #8]
 8027b22:	2200      	movs	r2, #0
 8027b24:	9201      	str	r2, [sp, #4]
 8027b26:	9200      	str	r2, [sp, #0]
 8027b28:	2214      	movs	r2, #20
 8027b2a:	4621      	mov	r1, r4
 8027b2c:	4630      	mov	r0, r6
 8027b2e:	f7ff f913 	bl	8026d58 <tx_tcp_pkt>
 8027b32:	e7c8      	b.n	8027ac6 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 8027b34:	f013 0f02 	tst.w	r3, #2
 8027b38:	d11d      	bne.n	8027b76 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 8027b3a:	f013 0f01 	tst.w	r3, #1
 8027b3e:	d129      	bne.n	8027b94 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8027b40:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8027b44:	4648      	mov	r0, r9
 8027b46:	f7fc ffc1 	bl	8024acc <mg_ntohl>
 8027b4a:	4680      	mov	r8, r0
 8027b4c:	8828      	ldrh	r0, [r5, #0]
 8027b4e:	f7fd f855 	bl	8024bfc <mg_ntohs>
 8027b52:	1c43      	adds	r3, r0, #1
 8027b54:	4598      	cmp	r8, r3
 8027b56:	d027      	beq.n	8027ba8 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 8027b58:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8027b5c:	f013 0f04 	tst.w	r3, #4
 8027b60:	d1b1      	bne.n	8027ac6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8027b62:	2300      	movs	r3, #0
 8027b64:	9301      	str	r3, [sp, #4]
 8027b66:	9300      	str	r3, [sp, #0]
 8027b68:	464b      	mov	r3, r9
 8027b6a:	2214      	movs	r2, #20
 8027b6c:	4621      	mov	r1, r4
 8027b6e:	4630      	mov	r0, r6
 8027b70:	f7ff f8f2 	bl	8026d58 <tx_tcp_pkt>
}
 8027b74:	e7a7      	b.n	8027ac6 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 8027b76:	8828      	ldrh	r0, [r5, #0]
 8027b78:	f7fd f840 	bl	8024bfc <mg_ntohs>
 8027b7c:	f7fc ffa6 	bl	8024acc <mg_ntohl>
 8027b80:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8027b82:	2200      	movs	r2, #0
 8027b84:	9201      	str	r2, [sp, #4]
 8027b86:	9200      	str	r2, [sp, #0]
 8027b88:	2212      	movs	r2, #18
 8027b8a:	4621      	mov	r1, r4
 8027b8c:	4630      	mov	r0, r6
 8027b8e:	f7ff f8e3 	bl	8026d58 <tx_tcp_pkt>
 8027b92:	e798      	b.n	8027ac6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8027b94:	68ab      	ldr	r3, [r5, #8]
 8027b96:	2200      	movs	r2, #0
 8027b98:	9201      	str	r2, [sp, #4]
 8027b9a:	9200      	str	r2, [sp, #0]
 8027b9c:	2211      	movs	r2, #17
 8027b9e:	4621      	mov	r1, r4
 8027ba0:	4630      	mov	r0, r6
 8027ba2:	f7ff f8d9 	bl	8026d58 <tx_tcp_pkt>
 8027ba6:	e78e      	b.n	8027ac6 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8027ba8:	4621      	mov	r1, r4
 8027baa:	4638      	mov	r0, r7
 8027bac:	f7ff fea6 	bl	80278fc <accept_conn>
 8027bb0:	e789      	b.n	8027ac6 <rx_tcp+0xb2>
 8027bb2:	bf00      	nop
 8027bb4:	08039d20 	.word	0x08039d20

08027bb8 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 8027bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027bbc:	b082      	sub	sp, #8
 8027bbe:	4604      	mov	r4, r0
 8027bc0:	4688      	mov	r8, r1
 8027bc2:	4617      	mov	r7, r2
 8027bc4:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 8027bc6:	6819      	ldr	r1, [r3, #0]
 8027bc8:	2900      	cmp	r1, #0
 8027bca:	d037      	beq.n	8027c3c <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 8027bcc:	685b      	ldr	r3, [r3, #4]
 8027bce:	2b00      	cmp	r3, #0
 8027bd0:	d038      	beq.n	8027c44 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 8027bd2:	686b      	ldr	r3, [r5, #4]
 8027bd4:	2b00      	cmp	r3, #0
 8027bd6:	d040      	beq.n	8027c5a <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8027bd8:	2118      	movs	r1, #24
 8027bda:	2001      	movs	r0, #1
 8027bdc:	f7f9 fe8c 	bl	80218f8 <mg_calloc>
 8027be0:	4606      	mov	r6, r0
 8027be2:	2800      	cmp	r0, #0
 8027be4:	d03e      	beq.n	8027c64 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8027be6:	6863      	ldr	r3, [r4, #4]
 8027be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8027bea:	2b00      	cmp	r3, #0
 8027bec:	d03f      	beq.n	8027c6e <mg_sendnsreq+0xb6>
 8027bee:	8a1b      	ldrh	r3, [r3, #16]
 8027bf0:	3301      	adds	r3, #1
 8027bf2:	b29b      	uxth	r3, r3
 8027bf4:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8027bf6:	6863      	ldr	r3, [r4, #4]
 8027bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027bfa:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 8027bfc:	6863      	ldr	r3, [r4, #4]
 8027bfe:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8027c00:	f7fd fafd 	bl	80251fe <mg_millis>
 8027c04:	19c0      	adds	r0, r0, r7
 8027c06:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 8027c0a:	60b0      	str	r0, [r6, #8]
 8027c0c:	60f1      	str	r1, [r6, #12]
    d->c = c;
 8027c0e:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8027c10:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027c14:	f043 0308 	orr.w	r3, r3, #8
 8027c18:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8027c1c:	4b21      	ldr	r3, [pc, #132]	@ (8027ca4 <mg_sendnsreq+0xec>)
 8027c1e:	681b      	ldr	r3, [r3, #0]
 8027c20:	2b03      	cmp	r3, #3
 8027c22:	dc26      	bgt.n	8027c72 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8027c24:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8027c28:	8a32      	ldrh	r2, [r6, #16]
 8027c2a:	4641      	mov	r1, r8
 8027c2c:	6868      	ldr	r0, [r5, #4]
 8027c2e:	f7fe fbd5 	bl	80263dc <mg_dns_send>
 8027c32:	2800      	cmp	r0, #0
 8027c34:	d031      	beq.n	8027c9a <mg_sendnsreq+0xe2>
}
 8027c36:	b002      	add	sp, #8
 8027c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8027c3c:	491a      	ldr	r1, [pc, #104]	@ (8027ca8 <mg_sendnsreq+0xf0>)
 8027c3e:	f7fd fbcb 	bl	80253d8 <mg_error>
 8027c42:	e7c6      	b.n	8027bd2 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8027c44:	461a      	mov	r2, r3
 8027c46:	6840      	ldr	r0, [r0, #4]
 8027c48:	f000 f866 	bl	8027d18 <mg_connect>
 8027c4c:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 8027c4e:	2800      	cmp	r0, #0
 8027c50:	d0bf      	beq.n	8027bd2 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 8027c52:	4b16      	ldr	r3, [pc, #88]	@ (8027cac <mg_sendnsreq+0xf4>)
 8027c54:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8027c58:	e7bb      	b.n	8027bd2 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 8027c5a:	4915      	ldr	r1, [pc, #84]	@ (8027cb0 <mg_sendnsreq+0xf8>)
 8027c5c:	4620      	mov	r0, r4
 8027c5e:	f7fd fbbb 	bl	80253d8 <mg_error>
 8027c62:	e7e8      	b.n	8027c36 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 8027c64:	4913      	ldr	r1, [pc, #76]	@ (8027cb4 <mg_sendnsreq+0xfc>)
 8027c66:	4620      	mov	r0, r4
 8027c68:	f7fd fbb6 	bl	80253d8 <mg_error>
 8027c6c:	e7e3      	b.n	8027c36 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8027c6e:	2301      	movs	r3, #1
 8027c70:	e7c0      	b.n	8027bf4 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8027c72:	4b11      	ldr	r3, [pc, #68]	@ (8027cb8 <mg_sendnsreq+0x100>)
 8027c74:	f240 521e 	movw	r2, #1310	@ 0x51e
 8027c78:	4910      	ldr	r1, [pc, #64]	@ (8027cbc <mg_sendnsreq+0x104>)
 8027c7a:	2004      	movs	r0, #4
 8027c7c:	f7fd fac4 	bl	8025208 <mg_log_prefix>
 8027c80:	8a33      	ldrh	r3, [r6, #16]
 8027c82:	9301      	str	r3, [sp, #4]
 8027c84:	682b      	ldr	r3, [r5, #0]
 8027c86:	9300      	str	r3, [sp, #0]
 8027c88:	f8d8 3000 	ldr.w	r3, [r8]
 8027c8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8027c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027c92:	480b      	ldr	r0, [pc, #44]	@ (8027cc0 <mg_sendnsreq+0x108>)
 8027c94:	f7fb f9a2 	bl	8022fdc <mg_log>
 8027c98:	e7c4      	b.n	8027c24 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 8027c9a:	490a      	ldr	r1, [pc, #40]	@ (8027cc4 <mg_sendnsreq+0x10c>)
 8027c9c:	6868      	ldr	r0, [r5, #4]
 8027c9e:	f7fd fb9b 	bl	80253d8 <mg_error>
}
 8027ca2:	e7c8      	b.n	8027c36 <mg_sendnsreq+0x7e>
 8027ca4:	200000a8 	.word	0x200000a8
 8027ca8:	08039d2c 	.word	0x08039d2c
 8027cac:	08027155 	.word	0x08027155
 8027cb0:	08039d58 	.word	0x08039d58
 8027cb4:	08039d64 	.word	0x08039d64
 8027cb8:	0803a1ac 	.word	0x0803a1ac
 8027cbc:	08039744 	.word	0x08039744
 8027cc0:	08039d70 	.word	0x08039d70
 8027cc4:	08039d94 	.word	0x08039d94

08027cc8 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 8027cc8:	b570      	push	{r4, r5, r6, lr}
 8027cca:	b084      	sub	sp, #16
 8027ccc:	4604      	mov	r4, r0
 8027cce:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 8027cd0:	ad02      	add	r5, sp, #8
 8027cd2:	4628      	mov	r0, r5
 8027cd4:	f7fc fe24 	bl	8024920 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8027cd8:	4630      	mov	r0, r6
 8027cda:	f7fc fe3f 	bl	802495c <mg_url_port>
 8027cde:	f7fc ff8d 	bl	8024bfc <mg_ntohs>
 8027ce2:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8027ce4:	f104 021c 	add.w	r2, r4, #28
 8027ce8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027cec:	f7fc ff22 	bl	8024b34 <mg_aton>
 8027cf0:	b960      	cbnz	r0, 8027d0c <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8027cf2:	6862      	ldr	r2, [r4, #4]
 8027cf4:	7e11      	ldrb	r1, [r2, #24]
 8027cf6:	b169      	cbz	r1, 8027d14 <mg_resolve+0x4c>
 8027cf8:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8027cfc:	6952      	ldr	r2, [r2, #20]
 8027cfe:	9100      	str	r1, [sp, #0]
 8027d00:	a902      	add	r1, sp, #8
 8027d02:	4620      	mov	r0, r4
 8027d04:	f7ff ff58 	bl	8027bb8 <mg_sendnsreq>
}
 8027d08:	b004      	add	sp, #16
 8027d0a:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 8027d0c:	4620      	mov	r0, r4
 8027d0e:	f7ff f951 	bl	8026fb4 <mg_connect_resolved>
 8027d12:	e7f9      	b.n	8027d08 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8027d14:	1d13      	adds	r3, r2, #4
 8027d16:	e7f1      	b.n	8027cfc <mg_resolve+0x34>

08027d18 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8027d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 8027d1c:	b129      	cbz	r1, 8027d2a <mg_connect+0x12>
 8027d1e:	4680      	mov	r8, r0
 8027d20:	4617      	mov	r7, r2
 8027d22:	461e      	mov	r6, r3
 8027d24:	460d      	mov	r5, r1
 8027d26:	780b      	ldrb	r3, [r1, #0]
 8027d28:	b99b      	cbnz	r3, 8027d52 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 8027d2a:	4b30      	ldr	r3, [pc, #192]	@ (8027dec <mg_connect+0xd4>)
 8027d2c:	681b      	ldr	r3, [r3, #0]
 8027d2e:	2b00      	cmp	r3, #0
 8027d30:	dc03      	bgt.n	8027d3a <mg_connect+0x22>
  struct mg_connection *c = NULL;
 8027d32:	2400      	movs	r4, #0
}
 8027d34:	4620      	mov	r0, r4
 8027d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 8027d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8027df0 <mg_connect+0xd8>)
 8027d3c:	f241 22be 	movw	r2, #4798	@ 0x12be
 8027d40:	492c      	ldr	r1, [pc, #176]	@ (8027df4 <mg_connect+0xdc>)
 8027d42:	2001      	movs	r0, #1
 8027d44:	f7fd fa60 	bl	8025208 <mg_log_prefix>
 8027d48:	482b      	ldr	r0, [pc, #172]	@ (8027df8 <mg_connect+0xe0>)
 8027d4a:	f7fb f947 	bl	8022fdc <mg_log>
  struct mg_connection *c = NULL;
 8027d4e:	2400      	movs	r4, #0
 8027d50:	e7f0      	b.n	8027d34 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8027d52:	f7fa fc6b 	bl	802262c <mg_alloc_conn>
 8027d56:	4604      	mov	r4, r0
 8027d58:	b358      	cbz	r0, 8027db2 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8027d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8027d5e:	6003      	str	r3, [r0, #0]
 8027d60:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8027d64:	2204      	movs	r2, #4
 8027d66:	4925      	ldr	r1, [pc, #148]	@ (8027dfc <mg_connect+0xe4>)
 8027d68:	4628      	mov	r0, r5
 8027d6a:	f003 fe7e 	bl	802ba6a <strncmp>
 8027d6e:	fab0 f080 	clz	r0, r0
 8027d72:	0940      	lsrs	r0, r0, #5
 8027d74:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027d78:	f360 0300 	bfi	r3, r0, #0, #1
 8027d7c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8027d80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027d84:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 8027d86:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 8027d88:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027d8c:	f043 0302 	orr.w	r3, r3, #2
 8027d90:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 8027d94:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8027d96:	4b15      	ldr	r3, [pc, #84]	@ (8027dec <mg_connect+0xd4>)
 8027d98:	681b      	ldr	r3, [r3, #0]
 8027d9a:	2b02      	cmp	r3, #2
 8027d9c:	dc18      	bgt.n	8027dd0 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 8027d9e:	462a      	mov	r2, r5
 8027da0:	2101      	movs	r1, #1
 8027da2:	4620      	mov	r0, r4
 8027da4:	f7f9 fed0 	bl	8021b48 <mg_call>
    mg_resolve(c, url);
 8027da8:	4629      	mov	r1, r5
 8027daa:	4620      	mov	r0, r4
 8027dac:	f7ff ff8c 	bl	8027cc8 <mg_resolve>
 8027db0:	e7c0      	b.n	8027d34 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 8027db2:	4b0e      	ldr	r3, [pc, #56]	@ (8027dec <mg_connect+0xd4>)
 8027db4:	681b      	ldr	r3, [r3, #0]
 8027db6:	2b00      	cmp	r3, #0
 8027db8:	ddbc      	ble.n	8027d34 <mg_connect+0x1c>
 8027dba:	4b0d      	ldr	r3, [pc, #52]	@ (8027df0 <mg_connect+0xd8>)
 8027dbc:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8027dc0:	490c      	ldr	r1, [pc, #48]	@ (8027df4 <mg_connect+0xdc>)
 8027dc2:	2001      	movs	r0, #1
 8027dc4:	f7fd fa20 	bl	8025208 <mg_log_prefix>
 8027dc8:	480d      	ldr	r0, [pc, #52]	@ (8027e00 <mg_connect+0xe8>)
 8027dca:	f7fb f907 	bl	8022fdc <mg_log>
 8027dce:	e7b1      	b.n	8027d34 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8027dd0:	4b07      	ldr	r3, [pc, #28]	@ (8027df0 <mg_connect+0xd8>)
 8027dd2:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 8027dd6:	4907      	ldr	r1, [pc, #28]	@ (8027df4 <mg_connect+0xdc>)
 8027dd8:	2003      	movs	r0, #3
 8027dda:	f7fd fa15 	bl	8025208 <mg_log_prefix>
 8027dde:	462b      	mov	r3, r5
 8027de0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8027de2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027de4:	4807      	ldr	r0, [pc, #28]	@ (8027e04 <mg_connect+0xec>)
 8027de6:	f7fb f8f9 	bl	8022fdc <mg_log>
 8027dea:	e7d8      	b.n	8027d9e <mg_connect+0x86>
 8027dec:	200000a8 	.word	0x200000a8
 8027df0:	0803a120 	.word	0x0803a120
 8027df4:	08039744 	.word	0x08039744
 8027df8:	08039da0 	.word	0x08039da0
 8027dfc:	08039a78 	.word	0x08039a78
 8027e00:	08039d6c 	.word	0x08039d6c
 8027e04:	080397a0 	.word	0x080397a0

08027e08 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 8027e08:	b530      	push	{r4, r5, lr}
 8027e0a:	b091      	sub	sp, #68	@ 0x44
 8027e0c:	4614      	mov	r4, r2
 8027e0e:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8027e10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027e12:	f7ff ff81 	bl	8027d18 <mg_connect>
  if (c != NULL) {
 8027e16:	4605      	mov	r5, r0
 8027e18:	b160      	cbz	r0, 8027e34 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 8027e1a:	2240      	movs	r2, #64	@ 0x40
 8027e1c:	2100      	movs	r1, #0
 8027e1e:	4668      	mov	r0, sp
 8027e20:	f003 fdee 	bl	802ba00 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8027e24:	b14c      	cbz	r4, 8027e3a <mg_mqtt_connect+0x32>
 8027e26:	4621      	mov	r1, r4
 8027e28:	4628      	mov	r0, r5
 8027e2a:	f7fe fbfd 	bl	8026628 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 8027e2e:	4b04      	ldr	r3, [pc, #16]	@ (8027e40 <mg_mqtt_connect+0x38>)
 8027e30:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 8027e34:	4628      	mov	r0, r5
 8027e36:	b011      	add	sp, #68	@ 0x44
 8027e38:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8027e3a:	466c      	mov	r4, sp
 8027e3c:	e7f3      	b.n	8027e26 <mg_mqtt_connect+0x1e>
 8027e3e:	bf00      	nop
 8027e40:	08026a01 	.word	0x08026a01

08027e44 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8027e44:	b538      	push	{r3, r4, r5, lr}
 8027e46:	4605      	mov	r5, r0
 8027e48:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8027e4a:	680b      	ldr	r3, [r1, #0]
 8027e4c:	b90b      	cbnz	r3, 8027e52 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8027e4e:	888b      	ldrh	r3, [r1, #4]
 8027e50:	b1a3      	cbz	r3, 8027e7c <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8027e52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027e54:	681b      	ldr	r3, [r3, #0]
 8027e56:	b34b      	cbz	r3, 8027eac <mg_tcpip_init+0x68>
 8027e58:	4620      	mov	r0, r4
 8027e5a:	4798      	blx	r3
 8027e5c:	bb30      	cbnz	r0, 8027eac <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 8027e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8027f4c <mg_tcpip_init+0x108>)
 8027e60:	681b      	ldr	r3, [r3, #0]
 8027e62:	2b00      	cmp	r3, #0
 8027e64:	dd5f      	ble.n	8027f26 <mg_tcpip_init+0xe2>
 8027e66:	4b3a      	ldr	r3, [pc, #232]	@ (8027f50 <mg_tcpip_init+0x10c>)
 8027e68:	f241 7223 	movw	r2, #5923	@ 0x1723
 8027e6c:	4939      	ldr	r1, [pc, #228]	@ (8027f54 <mg_tcpip_init+0x110>)
 8027e6e:	2001      	movs	r0, #1
 8027e70:	f7fd f9ca 	bl	8025208 <mg_log_prefix>
 8027e74:	4838      	ldr	r0, [pc, #224]	@ (8027f58 <mg_tcpip_init+0x114>)
 8027e76:	f7fb f8b1 	bl	8022fdc <mg_log>
 8027e7a:	e054      	b.n	8027f26 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 8027e7c:	4608      	mov	r0, r1
 8027e7e:	2302      	movs	r3, #2
 8027e80:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8027e84:	2105      	movs	r1, #5
 8027e86:	f7fc fde6 	bl	8024a56 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8027e8a:	4b30      	ldr	r3, [pc, #192]	@ (8027f4c <mg_tcpip_init+0x108>)
 8027e8c:	681b      	ldr	r3, [r3, #0]
 8027e8e:	2b01      	cmp	r3, #1
 8027e90:	dddf      	ble.n	8027e52 <mg_tcpip_init+0xe>
 8027e92:	4b2f      	ldr	r3, [pc, #188]	@ (8027f50 <mg_tcpip_init+0x10c>)
 8027e94:	f241 721f 	movw	r2, #5919	@ 0x171f
 8027e98:	492e      	ldr	r1, [pc, #184]	@ (8027f54 <mg_tcpip_init+0x110>)
 8027e9a:	2002      	movs	r0, #2
 8027e9c:	f7fd f9b4 	bl	8025208 <mg_log_prefix>
 8027ea0:	4622      	mov	r2, r4
 8027ea2:	492e      	ldr	r1, [pc, #184]	@ (8027f5c <mg_tcpip_init+0x118>)
 8027ea4:	482e      	ldr	r0, [pc, #184]	@ (8027f60 <mg_tcpip_init+0x11c>)
 8027ea6:	f7fb f899 	bl	8022fdc <mg_log>
 8027eaa:	e7d2      	b.n	8027e52 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8027eac:	f240 6104 	movw	r1, #1540	@ 0x604
 8027eb0:	2001      	movs	r0, #1
 8027eb2:	f7f9 fd21 	bl	80218f8 <mg_calloc>
 8027eb6:	6160      	str	r0, [r4, #20]
 8027eb8:	f240 6304 	movw	r3, #1540	@ 0x604
 8027ebc:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 8027ebe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8027ec0:	b92b      	cbnz	r3, 8027ece <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8027ec2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027ec4:	689b      	ldr	r3, [r3, #8]
 8027ec6:	b37b      	cbz	r3, 8027f28 <mg_tcpip_init+0xe4>
 8027ec8:	f240 6304 	movw	r3, #1540	@ 0x604
 8027ecc:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8027ece:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8027ed0:	2001      	movs	r0, #1
 8027ed2:	f7f9 fd11 	bl	80218f8 <mg_calloc>
 8027ed6:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8027ed8:	f7fd f991 	bl	80251fe <mg_millis>
 8027edc:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 8027ee0:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 8027ee2:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8027ee4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8027ee8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 8027eec:	2330      	movs	r3, #48	@ 0x30
 8027eee:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8027ef0:	68a3      	ldr	r3, [r4, #8]
 8027ef2:	b90b      	cbnz	r3, 8027ef8 <mg_tcpip_init+0xb4>
 8027ef4:	2301      	movs	r3, #1
 8027ef6:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8027ef8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027efc:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8027f00:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8027f04:	2102      	movs	r1, #2
 8027f06:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8027f0a:	f7fc fda4 	bl	8024a56 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8027f0e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8027f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8027f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8027f1a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8027f1e:	6963      	ldr	r3, [r4, #20]
 8027f20:	b12b      	cbz	r3, 8027f2e <mg_tcpip_init+0xea>
 8027f22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8027f24:	b11b      	cbz	r3, 8027f2e <mg_tcpip_init+0xea>
}
 8027f26:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8027f28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8027f2c:	e7ce      	b.n	8027ecc <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8027f2e:	4b07      	ldr	r3, [pc, #28]	@ (8027f4c <mg_tcpip_init+0x108>)
 8027f30:	681b      	ldr	r3, [r3, #0]
 8027f32:	2b00      	cmp	r3, #0
 8027f34:	ddf7      	ble.n	8027f26 <mg_tcpip_init+0xe2>
 8027f36:	4b06      	ldr	r3, [pc, #24]	@ (8027f50 <mg_tcpip_init+0x10c>)
 8027f38:	f241 7234 	movw	r2, #5940	@ 0x1734
 8027f3c:	4905      	ldr	r1, [pc, #20]	@ (8027f54 <mg_tcpip_init+0x110>)
 8027f3e:	2001      	movs	r0, #1
 8027f40:	f7fd f962 	bl	8025208 <mg_log_prefix>
 8027f44:	4807      	ldr	r0, [pc, #28]	@ (8027f64 <mg_tcpip_init+0x120>)
 8027f46:	f7fb f849 	bl	8022fdc <mg_log>
}
 8027f4a:	e7ec      	b.n	8027f26 <mg_tcpip_init+0xe2>
 8027f4c:	200000a8 	.word	0x200000a8
 8027f50:	0803a0e4 	.word	0x0803a0e4
 8027f54:	08039744 	.word	0x08039744
 8027f58:	08039dd0 	.word	0x08039dd0
 8027f5c:	08022fad 	.word	0x08022fad
 8027f60:	08039dac 	.word	0x08039dac
 8027f64:	08039d6c 	.word	0x08039d6c

08027f68 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 8027f68:	b510      	push	{r4, lr}
 8027f6a:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8027f6c:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 8027f70:	2b03      	cmp	r3, #3
 8027f72:	d011      	beq.n	8027f98 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8027f74:	2b01      	cmp	r3, #1
 8027f76:	d04f      	beq.n	8028018 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8027f78:	b9f3      	cbnz	r3, 8027fb8 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 8027f7a:	4b31      	ldr	r3, [pc, #196]	@ (8028040 <onstatechange+0xd8>)
 8027f7c:	681b      	ldr	r3, [r3, #0]
 8027f7e:	2b00      	cmp	r3, #0
 8027f80:	dd1a      	ble.n	8027fb8 <onstatechange+0x50>
 8027f82:	4b30      	ldr	r3, [pc, #192]	@ (8028044 <onstatechange+0xdc>)
 8027f84:	f241 4209 	movw	r2, #5129	@ 0x1409
 8027f88:	492f      	ldr	r1, [pc, #188]	@ (8028048 <onstatechange+0xe0>)
 8027f8a:	2001      	movs	r0, #1
 8027f8c:	f7fd f93c 	bl	8025208 <mg_log_prefix>
 8027f90:	482e      	ldr	r0, [pc, #184]	@ (802804c <onstatechange+0xe4>)
 8027f92:	f7fb f823 	bl	8022fdc <mg_log>
 8027f96:	e00f      	b.n	8027fb8 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8027f98:	4b29      	ldr	r3, [pc, #164]	@ (8028040 <onstatechange+0xd8>)
 8027f9a:	681b      	ldr	r3, [r3, #0]
 8027f9c:	2b01      	cmp	r3, #1
 8027f9e:	dc12      	bgt.n	8027fc6 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8027fa0:	4b27      	ldr	r3, [pc, #156]	@ (8028040 <onstatechange+0xd8>)
 8027fa2:	681b      	ldr	r3, [r3, #0]
 8027fa4:	2b01      	cmp	r3, #1
 8027fa6:	dc1c      	bgt.n	8027fe2 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8027fa8:	4b25      	ldr	r3, [pc, #148]	@ (8028040 <onstatechange+0xd8>)
 8027faa:	681b      	ldr	r3, [r3, #0]
 8027fac:	2b01      	cmp	r3, #1
 8027fae:	dc26      	bgt.n	8027ffe <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 8027fb0:	6921      	ldr	r1, [r4, #16]
 8027fb2:	4620      	mov	r0, r4
 8027fb4:	f7fc ff1f 	bl	8024df6 <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8027fb8:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 8027fbc:	2100      	movs	r1, #0
 8027fbe:	4620      	mov	r0, r4
 8027fc0:	f7f8 f9cb 	bl	802035a <mg_tcpip_call>
}
 8027fc4:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8027fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8028044 <onstatechange+0xdc>)
 8027fc8:	f241 4201 	movw	r2, #5121	@ 0x1401
 8027fcc:	491e      	ldr	r1, [pc, #120]	@ (8028048 <onstatechange+0xe0>)
 8027fce:	2002      	movs	r0, #2
 8027fd0:	f7fd f91a 	bl	8025208 <mg_log_prefix>
 8027fd4:	f104 0208 	add.w	r2, r4, #8
 8027fd8:	491d      	ldr	r1, [pc, #116]	@ (8028050 <onstatechange+0xe8>)
 8027fda:	481e      	ldr	r0, [pc, #120]	@ (8028054 <onstatechange+0xec>)
 8027fdc:	f7fa fffe 	bl	8022fdc <mg_log>
 8027fe0:	e7de      	b.n	8027fa0 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8027fe2:	4b18      	ldr	r3, [pc, #96]	@ (8028044 <onstatechange+0xdc>)
 8027fe4:	f241 4202 	movw	r2, #5122	@ 0x1402
 8027fe8:	4917      	ldr	r1, [pc, #92]	@ (8028048 <onstatechange+0xe0>)
 8027fea:	2002      	movs	r0, #2
 8027fec:	f7fd f90c 	bl	8025208 <mg_log_prefix>
 8027ff0:	f104 0210 	add.w	r2, r4, #16
 8027ff4:	4916      	ldr	r1, [pc, #88]	@ (8028050 <onstatechange+0xe8>)
 8027ff6:	4818      	ldr	r0, [pc, #96]	@ (8028058 <onstatechange+0xf0>)
 8027ff8:	f7fa fff0 	bl	8022fdc <mg_log>
 8027ffc:	e7d4      	b.n	8027fa8 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8027ffe:	4b11      	ldr	r3, [pc, #68]	@ (8028044 <onstatechange+0xdc>)
 8028000:	f241 4203 	movw	r2, #5123	@ 0x1403
 8028004:	4910      	ldr	r1, [pc, #64]	@ (8028048 <onstatechange+0xe0>)
 8028006:	2002      	movs	r0, #2
 8028008:	f7fd f8fe 	bl	8025208 <mg_log_prefix>
 802800c:	4622      	mov	r2, r4
 802800e:	4913      	ldr	r1, [pc, #76]	@ (802805c <onstatechange+0xf4>)
 8028010:	4813      	ldr	r0, [pc, #76]	@ (8028060 <onstatechange+0xf8>)
 8028012:	f7fa ffe3 	bl	8022fdc <mg_log>
 8028016:	e7cb      	b.n	8027fb0 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 8028018:	4b09      	ldr	r3, [pc, #36]	@ (8028040 <onstatechange+0xd8>)
 802801a:	681b      	ldr	r3, [r3, #0]
 802801c:	2b00      	cmp	r3, #0
 802801e:	dc04      	bgt.n	802802a <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 8028020:	f7fd f8ed 	bl	80251fe <mg_millis>
 8028024:	f002 ff9c 	bl	802af60 <srand>
 8028028:	e7c6      	b.n	8027fb8 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 802802a:	4b06      	ldr	r3, [pc, #24]	@ (8028044 <onstatechange+0xdc>)
 802802c:	f241 4206 	movw	r2, #5126	@ 0x1406
 8028030:	4905      	ldr	r1, [pc, #20]	@ (8028048 <onstatechange+0xe0>)
 8028032:	2001      	movs	r0, #1
 8028034:	f7fd f8e8 	bl	8025208 <mg_log_prefix>
 8028038:	480a      	ldr	r0, [pc, #40]	@ (8028064 <onstatechange+0xfc>)
 802803a:	f7fa ffcf 	bl	8022fdc <mg_log>
 802803e:	e7ef      	b.n	8028020 <onstatechange+0xb8>
 8028040:	200000a8 	.word	0x200000a8
 8028044:	0803a090 	.word	0x0803a090
 8028048:	08039744 	.word	0x08039744
 802804c:	08039e1c 	.word	0x08039e1c
 8028050:	08022f9d 	.word	0x08022f9d
 8028054:	08039de4 	.word	0x08039de4
 8028058:	08039df4 	.word	0x08039df4
 802805c:	08022fad 	.word	0x08022fad
 8028060:	08039e04 	.word	0x08039e04
 8028064:	08039e14 	.word	0x08039e14

08028068 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802806c:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 802806e:	2300      	movs	r3, #0
 8028070:	9305      	str	r3, [sp, #20]
 8028072:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 8028074:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 8028078:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802807c:	680e      	ldr	r6, [r1, #0]
 802807e:	684b      	ldr	r3, [r1, #4]
 8028080:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8028082:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 8028086:	42b3      	cmp	r3, r6
 8028088:	d87b      	bhi.n	8028182 <rx_dhcp_client+0x11a>
 802808a:	4605      	mov	r5, r0
 802808c:	460f      	mov	r7, r1
 802808e:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8028092:	2204      	movs	r2, #4
 8028094:	1c81      	adds	r1, r0, #2
 8028096:	eb08 0002 	add.w	r0, r8, r2
 802809a:	f003 fc1d 	bl	802b8d8 <memcmp>
 802809e:	2800      	cmp	r0, #0
 80280a0:	d16f      	bne.n	8028182 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 80280a2:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 80280a6:	4648      	mov	r0, r9
 80280a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80280ac:	f8cd 9000 	str.w	r9, [sp]
 80280b0:	46cb      	mov	fp, r9
 80280b2:	e026      	b.n	8028102 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80280b4:	7862      	ldrb	r2, [r4, #1]
 80280b6:	2a04      	cmp	r2, #4
 80280b8:	d12b      	bne.n	8028112 <rx_dhcp_client+0xaa>
 80280ba:	1da2      	adds	r2, r4, #6
 80280bc:	42b2      	cmp	r2, r6
 80280be:	d228      	bcs.n	8028112 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 80280c0:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80280c4:	9301      	str	r3, [sp, #4]
 80280c6:	e019      	b.n	80280fc <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 80280c8:	7862      	ldrb	r2, [r4, #1]
 80280ca:	2a04      	cmp	r2, #4
 80280cc:	d123      	bne.n	8028116 <rx_dhcp_client+0xae>
 80280ce:	1da2      	adds	r2, r4, #6
 80280d0:	42b2      	cmp	r2, r6
 80280d2:	d220      	bcs.n	8028116 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 80280d4:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 80280d8:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80280dc:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 80280de:	e00d      	b.n	80280fc <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80280e0:	7862      	ldrb	r2, [r4, #1]
 80280e2:	2a04      	cmp	r2, #4
 80280e4:	d11b      	bne.n	802811e <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 80280e6:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80280e8:	42b2      	cmp	r2, r6
 80280ea:	d218      	bcs.n	802811e <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 80280ec:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80280f0:	9305      	str	r3, [sp, #20]
 80280f2:	e003      	b.n	80280fc <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80280f4:	2b33      	cmp	r3, #51	@ 0x33
 80280f6:	d022      	beq.n	802813e <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80280f8:	2b35      	cmp	r3, #53	@ 0x35
 80280fa:	d02b      	beq.n	8028154 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 80280fc:	7863      	ldrb	r3, [r4, #1]
 80280fe:	3302      	adds	r3, #2
 8028100:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8028102:	1c63      	adds	r3, r4, #1
 8028104:	42b3      	cmp	r3, r6
 8028106:	d22e      	bcs.n	8028166 <rx_dhcp_client+0xfe>
 8028108:	7823      	ldrb	r3, [r4, #0]
 802810a:	2bff      	cmp	r3, #255	@ 0xff
 802810c:	d02b      	beq.n	8028166 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 802810e:	2b01      	cmp	r3, #1
 8028110:	d0d0      	beq.n	80280b4 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8028112:	2b03      	cmp	r3, #3
 8028114:	d0d8      	beq.n	80280c8 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8028116:	7fea      	ldrb	r2, [r5, #31]
 8028118:	b10a      	cbz	r2, 802811e <rx_dhcp_client+0xb6>
 802811a:	2b06      	cmp	r3, #6
 802811c:	d0e0      	beq.n	80280e0 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802811e:	f895 2020 	ldrb.w	r2, [r5, #32]
 8028122:	2a00      	cmp	r2, #0
 8028124:	d0e6      	beq.n	80280f4 <rx_dhcp_client+0x8c>
 8028126:	2b2a      	cmp	r3, #42	@ 0x2a
 8028128:	d1e4      	bne.n	80280f4 <rx_dhcp_client+0x8c>
 802812a:	7862      	ldrb	r2, [r4, #1]
 802812c:	2a04      	cmp	r2, #4
 802812e:	d1e1      	bne.n	80280f4 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 8028130:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8028132:	42b2      	cmp	r2, r6
 8028134:	d2de      	bcs.n	80280f4 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 8028136:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802813a:	9304      	str	r3, [sp, #16]
 802813c:	e7de      	b.n	80280fc <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802813e:	7862      	ldrb	r2, [r4, #1]
 8028140:	2a04      	cmp	r2, #4
 8028142:	d1d9      	bne.n	80280f8 <rx_dhcp_client+0x90>
 8028144:	1da2      	adds	r2, r4, #6
 8028146:	42b2      	cmp	r2, r6
 8028148:	d2d6      	bcs.n	80280f8 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 802814a:	f8d4 0002 	ldr.w	r0, [r4, #2]
 802814e:	f7fc fcbd 	bl	8024acc <mg_ntohl>
 8028152:	e7d3      	b.n	80280fc <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8028154:	7863      	ldrb	r3, [r4, #1]
 8028156:	2b01      	cmp	r3, #1
 8028158:	d1d0      	bne.n	80280fc <rx_dhcp_client+0x94>
 802815a:	1da3      	adds	r3, r4, #6
 802815c:	42b3      	cmp	r3, r6
 802815e:	d2cd      	bcs.n	80280fc <rx_dhcp_client+0x94>
      msgtype = p[2];
 8028160:	f894 9002 	ldrb.w	r9, [r4, #2]
 8028164:	e7ca      	b.n	80280fc <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8028166:	f1b9 0f06 	cmp.w	r9, #6
 802816a:	d00d      	beq.n	8028188 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802816c:	f1b9 0f02 	cmp.w	r9, #2
 8028170:	d013      	beq.n	802819a <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 8028172:	f1b9 0f05 	cmp.w	r9, #5
 8028176:	d028      	beq.n	80281ca <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 8028178:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802817c:	4553      	cmp	r3, sl
 802817e:	f040 80b4 	bne.w	80282ea <rx_dhcp_client+0x282>
}
 8028182:	b007      	add	sp, #28
 8028184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8028188:	68ab      	ldr	r3, [r5, #8]
 802818a:	455b      	cmp	r3, fp
 802818c:	d1ee      	bne.n	802816c <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802818e:	2301      	movs	r3, #1
 8028190:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8028194:	2300      	movs	r3, #0
 8028196:	60ab      	str	r3, [r5, #8]
 8028198:	e7ee      	b.n	8028178 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802819a:	f1ba 0f01 	cmp.w	sl, #1
 802819e:	d1e8      	bne.n	8028172 <rx_dhcp_client+0x10a>
 80281a0:	f1bb 0f00 	cmp.w	fp, #0
 80281a4:	d0e5      	beq.n	8028172 <rx_dhcp_client+0x10a>
 80281a6:	9b00      	ldr	r3, [sp, #0]
 80281a8:	2b00      	cmp	r3, #0
 80281aa:	d0e2      	beq.n	8028172 <rx_dhcp_client+0x10a>
 80281ac:	2800      	cmp	r0, #0
 80281ae:	d0e0      	beq.n	8028172 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80281b0:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 80281b4:	b90a      	cbnz	r2, 80281ba <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80281b6:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 80281b8:	68da      	ldr	r2, [r3, #12]
 80281ba:	4659      	mov	r1, fp
 80281bc:	4628      	mov	r0, r5
 80281be:	f7ff f9b9 	bl	8027534 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 80281c2:	2302      	movs	r3, #2
 80281c4:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 80281c8:	e7d6      	b.n	8028178 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80281ca:	f1ba 0f02 	cmp.w	sl, #2
 80281ce:	d02a      	beq.n	8028226 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 80281d0:	f1ba 0f03 	cmp.w	sl, #3
 80281d4:	d1d0      	bne.n	8028178 <rx_dhcp_client+0x110>
 80281d6:	68ab      	ldr	r3, [r5, #8]
 80281d8:	455b      	cmp	r3, fp
 80281da:	d1cd      	bne.n	8028178 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 80281dc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80281de:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80281e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80281e4:	4604      	mov	r4, r0
 80281e6:	fb00 f202 	mul.w	r2, r0, r2
 80281ea:	189b      	adds	r3, r3, r2
 80281ec:	f141 0100 	adc.w	r1, r1, #0
 80281f0:	662b      	str	r3, [r5, #96]	@ 0x60
 80281f2:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80281f4:	4b3f      	ldr	r3, [pc, #252]	@ (80282f4 <rx_dhcp_client+0x28c>)
 80281f6:	681b      	ldr	r3, [r3, #0]
 80281f8:	2b01      	cmp	r3, #1
 80281fa:	ddbd      	ble.n	8028178 <rx_dhcp_client+0x110>
 80281fc:	4b3e      	ldr	r3, [pc, #248]	@ (80282f8 <rx_dhcp_client+0x290>)
 80281fe:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 8028202:	493e      	ldr	r1, [pc, #248]	@ (80282fc <rx_dhcp_client+0x294>)
 8028204:	2002      	movs	r0, #2
 8028206:	f7fc ffff 	bl	8025208 <mg_log_prefix>
 802820a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802820e:	2300      	movs	r3, #0
 8028210:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 8028214:	f7e8 fda0 	bl	8010d58 <__aeabi_uldivmod>
 8028218:	4602      	mov	r2, r0
 802821a:	460b      	mov	r3, r1
 802821c:	4621      	mov	r1, r4
 802821e:	4838      	ldr	r0, [pc, #224]	@ (8028300 <rx_dhcp_client+0x298>)
 8028220:	f7fa fedc 	bl	8022fdc <mg_log>
 8028224:	e7a8      	b.n	8028178 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8028226:	f1bb 0f00 	cmp.w	fp, #0
 802822a:	d0d1      	beq.n	80281d0 <rx_dhcp_client+0x168>
 802822c:	9b00      	ldr	r3, [sp, #0]
 802822e:	2b00      	cmp	r3, #0
 8028230:	d0ce      	beq.n	80281d0 <rx_dhcp_client+0x168>
 8028232:	4604      	mov	r4, r0
 8028234:	2800      	cmp	r0, #0
 8028236:	d0cb      	beq.n	80281d0 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 8028238:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802823a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802823c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028240:	fb00 f202 	mul.w	r2, r0, r2
 8028244:	189b      	adds	r3, r3, r2
 8028246:	f141 0100 	adc.w	r1, r1, #0
 802824a:	662b      	str	r3, [r5, #96]	@ 0x60
 802824c:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802824e:	4b29      	ldr	r3, [pc, #164]	@ (80282f4 <rx_dhcp_client+0x28c>)
 8028250:	681b      	ldr	r3, [r3, #0]
 8028252:	2b01      	cmp	r3, #1
 8028254:	dc2e      	bgt.n	80282b4 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8028256:	693b      	ldr	r3, [r7, #16]
 8028258:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802825c:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 8028260:	895b      	ldrh	r3, [r3, #10]
 8028262:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8028266:	f8c5 b008 	str.w	fp, [r5, #8]
 802826a:	9b00      	ldr	r3, [sp, #0]
 802826c:	612b      	str	r3, [r5, #16]
 802826e:	9b01      	ldr	r3, [sp, #4]
 8028270:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 8028272:	2303      	movs	r3, #3
 8028274:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 8028278:	2108      	movs	r1, #8
 802827a:	eb0d 0001 	add.w	r0, sp, r1
 802827e:	f7fc fbea 	bl	8024a56 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8028282:	9c02      	ldr	r4, [sp, #8]
 8028284:	f7fc ffbb 	bl	80251fe <mg_millis>
 8028288:	4420      	add	r0, r4
 802828a:	f002 fe69 	bl	802af60 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802828e:	7feb      	ldrb	r3, [r5, #31]
 8028290:	b10b      	cbz	r3, 8028296 <rx_dhcp_client+0x22e>
 8028292:	9b05      	ldr	r3, [sp, #20]
 8028294:	bb1b      	cbnz	r3, 80282de <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 8028296:	f895 3020 	ldrb.w	r3, [r5, #32]
 802829a:	2b00      	cmp	r3, #0
 802829c:	f43f af6c 	beq.w	8028178 <rx_dhcp_client+0x110>
 80282a0:	9b04      	ldr	r3, [sp, #16]
 80282a2:	2b00      	cmp	r3, #0
 80282a4:	f43f af68 	beq.w	8028178 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 80282a8:	aa04      	add	r2, sp, #16
 80282aa:	2102      	movs	r1, #2
 80282ac:	4628      	mov	r0, r5
 80282ae:	f7f8 f854 	bl	802035a <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80282b2:	e761      	b.n	8028178 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80282b4:	4b10      	ldr	r3, [pc, #64]	@ (80282f8 <rx_dhcp_client+0x290>)
 80282b6:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 80282ba:	4910      	ldr	r1, [pc, #64]	@ (80282fc <rx_dhcp_client+0x294>)
 80282bc:	2002      	movs	r0, #2
 80282be:	f7fc ffa3 	bl	8025208 <mg_log_prefix>
 80282c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80282c6:	2300      	movs	r3, #0
 80282c8:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 80282cc:	f7e8 fd44 	bl	8010d58 <__aeabi_uldivmod>
 80282d0:	4602      	mov	r2, r0
 80282d2:	460b      	mov	r3, r1
 80282d4:	4621      	mov	r1, r4
 80282d6:	480a      	ldr	r0, [pc, #40]	@ (8028300 <rx_dhcp_client+0x298>)
 80282d8:	f7fa fe80 	bl	8022fdc <mg_log>
 80282dc:	e7bb      	b.n	8028256 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 80282de:	aa05      	add	r2, sp, #20
 80282e0:	2101      	movs	r1, #1
 80282e2:	4628      	mov	r0, r5
 80282e4:	f7f8 f839 	bl	802035a <mg_tcpip_call>
 80282e8:	e7d5      	b.n	8028296 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 80282ea:	4628      	mov	r0, r5
 80282ec:	f7ff fe3c 	bl	8027f68 <onstatechange>
 80282f0:	e747      	b.n	8028182 <rx_dhcp_client+0x11a>
 80282f2:	bf00      	nop
 80282f4:	200000a8 	.word	0x200000a8
 80282f8:	0803a050 	.word	0x0803a050
 80282fc:	08039744 	.word	0x08039744
 8028300:	08039e28 	.word	0x08039e28

08028304 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028308:	b084      	sub	sp, #16
 802830a:	4605      	mov	r5, r0
 802830c:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 802830e:	69c9      	ldr	r1, [r1, #28]
 8028310:	88cb      	ldrh	r3, [r1, #6]
 8028312:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8028316:	b29b      	uxth	r3, r3
 8028318:	b1c3      	cbz	r3, 802834c <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802831a:	7a4b      	ldrb	r3, [r1, #9]
 802831c:	2b11      	cmp	r3, #17
 802831e:	d00e      	beq.n	802833e <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8028320:	7a4b      	ldrb	r3, [r1, #9]
 8028322:	2b06      	cmp	r3, #6
 8028324:	d00f      	beq.n	8028346 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8028326:	2200      	movs	r2, #0
 8028328:	4621      	mov	r1, r4
 802832a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 802832c:	f7f9 fb09 	bl	8021942 <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 8028330:	b110      	cbz	r0, 8028338 <rx_ip+0x34>
 8028332:	4963      	ldr	r1, [pc, #396]	@ (80284c0 <rx_ip+0x1bc>)
 8028334:	f7fd f850 	bl	80253d8 <mg_error>
}
 8028338:	b004      	add	sp, #16
 802833a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802833e:	f101 0314 	add.w	r3, r1, #20
 8028342:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8028344:	e7ec      	b.n	8028320 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8028346:	3114      	adds	r1, #20
 8028348:	62a1      	str	r1, [r4, #40]	@ 0x28
 802834a:	e7ec      	b.n	8028326 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 802834c:	7a4b      	ldrb	r3, [r1, #9]
 802834e:	2b01      	cmp	r3, #1
 8028350:	d024      	beq.n	802839c <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 8028352:	2b11      	cmp	r3, #17
 8028354:	d031      	beq.n	80283ba <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 8028356:	2b06      	cmp	r3, #6
 8028358:	d1ee      	bne.n	8028338 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802835a:	f101 0314 	add.w	r3, r1, #20
 802835e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8028360:	68e3      	ldr	r3, [r4, #12]
 8028362:	2b13      	cmp	r3, #19
 8028364:	d9e8      	bls.n	8028338 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 8028366:	3128      	adds	r1, #40	@ 0x28
 8028368:	4620      	mov	r0, r4
 802836a:	f7fb f8d4 	bl	8023516 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 802836e:	69e3      	ldr	r3, [r4, #28]
 8028370:	8858      	ldrh	r0, [r3, #2]
 8028372:	f7fc fc43 	bl	8024bfc <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8028376:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028378:	7b1b      	ldrb	r3, [r3, #12]
 802837a:	091b      	lsrs	r3, r3, #4
 802837c:	3305      	adds	r3, #5
 802837e:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8028380:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8028384:	d301      	bcc.n	802838a <rx_ip+0x86>
 8028386:	1a80      	subs	r0, r0, r2
 8028388:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802838a:	4b4e      	ldr	r3, [pc, #312]	@ (80284c4 <rx_ip+0x1c0>)
 802838c:	681b      	ldr	r3, [r3, #0]
 802838e:	2b03      	cmp	r3, #3
 8028390:	dc74      	bgt.n	802847c <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 8028392:	4621      	mov	r1, r4
 8028394:	4628      	mov	r0, r5
 8028396:	f7ff fb3d 	bl	8027a14 <rx_tcp>
 802839a:	e7cd      	b.n	8028338 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 802839c:	f101 0314 	add.w	r3, r1, #20
 80283a0:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 80283a2:	68e3      	ldr	r3, [r4, #12]
 80283a4:	2b03      	cmp	r3, #3
 80283a6:	d9c7      	bls.n	8028338 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 80283a8:	3118      	adds	r1, #24
 80283aa:	4620      	mov	r0, r4
 80283ac:	f7fb f8b3 	bl	8023516 <mkpay>
    rx_icmp(ifp, pkt);
 80283b0:	4621      	mov	r1, r4
 80283b2:	4628      	mov	r0, r5
 80283b4:	f7fc fc77 	bl	8024ca6 <rx_icmp>
 80283b8:	e7be      	b.n	8028338 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 80283ba:	f101 0314 	add.w	r3, r1, #20
 80283be:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 80283c0:	68e3      	ldr	r3, [r4, #12]
 80283c2:	2b07      	cmp	r3, #7
 80283c4:	d9b8      	bls.n	8028338 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 80283c6:	311c      	adds	r1, #28
 80283c8:	4620      	mov	r0, r4
 80283ca:	f7fb f8a4 	bl	8023516 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80283ce:	4b3d      	ldr	r3, [pc, #244]	@ (80284c4 <rx_ip+0x1c0>)
 80283d0:	681b      	ldr	r3, [r3, #0]
 80283d2:	2b03      	cmp	r3, #3
 80283d4:	dc16      	bgt.n	8028404 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 80283d6:	7f2b      	ldrb	r3, [r5, #28]
 80283d8:	b133      	cbz	r3, 80283e8 <rx_ip+0xe4>
 80283da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80283dc:	8877      	ldrh	r7, [r6, #2]
 80283de:	2044      	movs	r0, #68	@ 0x44
 80283e0:	f7fc fc0c 	bl	8024bfc <mg_ntohs>
 80283e4:	4287      	cmp	r7, r0
 80283e6:	d02f      	beq.n	8028448 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 80283e8:	7f6b      	ldrb	r3, [r5, #29]
 80283ea:	b133      	cbz	r3, 80283fa <rx_ip+0xf6>
 80283ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80283ee:	8877      	ldrh	r7, [r6, #2]
 80283f0:	2043      	movs	r0, #67	@ 0x43
 80283f2:	f7fc fc03 	bl	8024bfc <mg_ntohs>
 80283f6:	4287      	cmp	r7, r0
 80283f8:	d033      	beq.n	8028462 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 80283fa:	4621      	mov	r1, r4
 80283fc:	4628      	mov	r0, r5
 80283fe:	f7fd fe03 	bl	8026008 <rx_udp>
 8028402:	e799      	b.n	8028338 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8028404:	4b30      	ldr	r3, [pc, #192]	@ (80284c8 <rx_ip+0x1c4>)
 8028406:	f241 6255 	movw	r2, #5717	@ 0x1655
 802840a:	4930      	ldr	r1, [pc, #192]	@ (80284cc <rx_ip+0x1c8>)
 802840c:	2004      	movs	r0, #4
 802840e:	f7fc fefb 	bl	8025208 <mg_log_prefix>
 8028412:	69e7      	ldr	r7, [r4, #28]
 8028414:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 8028418:	f8b8 0000 	ldrh.w	r0, [r8]
 802841c:	f7fc fbee 	bl	8024bfc <mg_ntohs>
 8028420:	4606      	mov	r6, r0
 8028422:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8028426:	f7fc fbe9 	bl	8024bfc <mg_ntohs>
 802842a:	68e3      	ldr	r3, [r4, #12]
 802842c:	4928      	ldr	r1, [pc, #160]	@ (80284d0 <rx_ip+0x1cc>)
 802842e:	9303      	str	r3, [sp, #12]
 8028430:	9002      	str	r0, [sp, #8]
 8028432:	f107 0310 	add.w	r3, r7, #16
 8028436:	9301      	str	r3, [sp, #4]
 8028438:	9100      	str	r1, [sp, #0]
 802843a:	4633      	mov	r3, r6
 802843c:	f107 020c 	add.w	r2, r7, #12
 8028440:	4824      	ldr	r0, [pc, #144]	@ (80284d4 <rx_ip+0x1d0>)
 8028442:	f7fa fdcb 	bl	8022fdc <mg_log>
 8028446:	e7c6      	b.n	80283d6 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8028448:	f106 0308 	add.w	r3, r6, #8
 802844c:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 802844e:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8028452:	4620      	mov	r0, r4
 8028454:	f7fb f85f 	bl	8023516 <mkpay>
      rx_dhcp_client(ifp, pkt);
 8028458:	4621      	mov	r1, r4
 802845a:	4628      	mov	r0, r5
 802845c:	f7ff fe04 	bl	8028068 <rx_dhcp_client>
 8028460:	e76a      	b.n	8028338 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8028462:	f106 0308 	add.w	r3, r6, #8
 8028466:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8028468:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 802846c:	4620      	mov	r0, r4
 802846e:	f7fb f852 	bl	8023516 <mkpay>
      rx_dhcp_server(ifp, pkt);
 8028472:	4621      	mov	r1, r4
 8028474:	4628      	mov	r0, r5
 8028476:	f7fc fd41 	bl	8024efc <rx_dhcp_server>
 802847a:	e75d      	b.n	8028338 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802847c:	4b12      	ldr	r3, [pc, #72]	@ (80284c8 <rx_ip+0x1c4>)
 802847e:	f241 626a 	movw	r2, #5738	@ 0x166a
 8028482:	4912      	ldr	r1, [pc, #72]	@ (80284cc <rx_ip+0x1c8>)
 8028484:	2004      	movs	r0, #4
 8028486:	f7fc febf 	bl	8025208 <mg_log_prefix>
 802848a:	69e7      	ldr	r7, [r4, #28]
 802848c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8028490:	f8b8 0000 	ldrh.w	r0, [r8]
 8028494:	f7fc fbb2 	bl	8024bfc <mg_ntohs>
 8028498:	4606      	mov	r6, r0
 802849a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802849e:	f7fc fbad 	bl	8024bfc <mg_ntohs>
 80284a2:	68e3      	ldr	r3, [r4, #12]
 80284a4:	490a      	ldr	r1, [pc, #40]	@ (80284d0 <rx_ip+0x1cc>)
 80284a6:	9303      	str	r3, [sp, #12]
 80284a8:	9002      	str	r0, [sp, #8]
 80284aa:	f107 0310 	add.w	r3, r7, #16
 80284ae:	9301      	str	r3, [sp, #4]
 80284b0:	9100      	str	r1, [sp, #0]
 80284b2:	4633      	mov	r3, r6
 80284b4:	f107 020c 	add.w	r2, r7, #12
 80284b8:	4807      	ldr	r0, [pc, #28]	@ (80284d8 <rx_ip+0x1d4>)
 80284ba:	f7fa fd8f 	bl	8022fdc <mg_log>
 80284be:	e768      	b.n	8028392 <rx_ip+0x8e>
 80284c0:	08039e40 	.word	0x08039e40
 80284c4:	200000a8 	.word	0x200000a8
 80284c8:	0803a060 	.word	0x0803a060
 80284cc:	08039744 	.word	0x08039744
 80284d0:	08022f9d 	.word	0x08022f9d
 80284d4:	08039e5c 	.word	0x08039e5c
 80284d8:	08039e78 	.word	0x08039e78

080284dc <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 80284dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80284e0:	b08e      	sub	sp, #56	@ 0x38
 80284e2:	4606      	mov	r6, r0
 80284e4:	460c      	mov	r4, r1
 80284e6:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 80284e8:	2234      	movs	r2, #52	@ 0x34
 80284ea:	2100      	movs	r1, #0
 80284ec:	a801      	add	r0, sp, #4
 80284ee:	f003 fa87 	bl	802ba00 <memset>
  pkt.raw.buf = (char *) buf;
 80284f2:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 80284f4:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 80284f6:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 80284f8:	2d0d      	cmp	r5, #13
 80284fa:	d93f      	bls.n	802857c <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 80284fc:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8028500:	b15b      	cbz	r3, 802851a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8028502:	2206      	movs	r2, #6
 8028504:	4631      	mov	r1, r6
 8028506:	4620      	mov	r0, r4
 8028508:	f003 f9e6 	bl	802b8d8 <memcmp>
  if (ifp->enable_mac_check &&
 802850c:	b128      	cbz	r0, 802851a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 802850e:	2206      	movs	r2, #6
 8028510:	4945      	ldr	r1, [pc, #276]	@ (8028628 <mg_tcpip_rx+0x14c>)
 8028512:	4620      	mov	r0, r4
 8028514:	f003 f9e0 	bl	802b8d8 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8028518:	bb80      	cbnz	r0, 802857c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 802851a:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 802851e:	b18b      	cbz	r3, 8028544 <mg_tcpip_rx+0x68>
 8028520:	2d04      	cmp	r5, #4
 8028522:	d92e      	bls.n	8028582 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 8028524:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8028528:	4642      	mov	r2, r8
 802852a:	4621      	mov	r1, r4
 802852c:	2000      	movs	r0, #0
 802852e:	f7fc fe1b 	bl	8025168 <mg_crc32>
 8028532:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8028534:	2204      	movs	r2, #4
 8028536:	4669      	mov	r1, sp
 8028538:	eb04 0008 	add.w	r0, r4, r8
 802853c:	f003 f9cc 	bl	802b8d8 <memcmp>
 8028540:	b108      	cbz	r0, 8028546 <mg_tcpip_rx+0x6a>
 8028542:	e01b      	b.n	802857c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8028544:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 8028546:	89a7      	ldrh	r7, [r4, #12]
 8028548:	f640 0006 	movw	r0, #2054	@ 0x806
 802854c:	f7fc fb56 	bl	8024bfc <mg_ntohs>
 8028550:	4287      	cmp	r7, r0
 8028552:	d018      	beq.n	8028586 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8028554:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8028558:	f7fc fb50 	bl	8024bfc <mg_ntohs>
 802855c:	4287      	cmp	r7, r0
 802855e:	d01b      	beq.n	8028598 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8028560:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8028564:	f7fc fb4a 	bl	8024bfc <mg_ntohs>
 8028568:	4287      	cmp	r7, r0
 802856a:	d028      	beq.n	80285be <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 802856c:	4b2f      	ldr	r3, [pc, #188]	@ (802862c <mg_tcpip_rx+0x150>)
 802856e:	681b      	ldr	r3, [r3, #0]
 8028570:	2b02      	cmp	r3, #2
 8028572:	dc41      	bgt.n	80285f8 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8028574:	4b2d      	ldr	r3, [pc, #180]	@ (802862c <mg_tcpip_rx+0x150>)
 8028576:	681b      	ldr	r3, [r3, #0]
 8028578:	2b03      	cmp	r3, #3
 802857a:	dc4d      	bgt.n	8028618 <mg_tcpip_rx+0x13c>
}
 802857c:	b00e      	add	sp, #56	@ 0x38
 802857e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 8028582:	46a8      	mov	r8, r5
 8028584:	e7df      	b.n	8028546 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8028586:	340e      	adds	r4, #14
 8028588:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802858a:	2d29      	cmp	r5, #41	@ 0x29
 802858c:	d9f6      	bls.n	802857c <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 802858e:	a901      	add	r1, sp, #4
 8028590:	4630      	mov	r0, r6
 8028592:	f7fe ff09 	bl	80273a8 <rx_arp>
 8028596:	e7f1      	b.n	802857c <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8028598:	f104 030e 	add.w	r3, r4, #14
 802859c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802859e:	2d35      	cmp	r5, #53	@ 0x35
 80285a0:	d9ec      	bls.n	802857c <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 80285a2:	7ba3      	ldrb	r3, [r4, #14]
 80285a4:	091b      	lsrs	r3, r3, #4
 80285a6:	2b06      	cmp	r3, #6
 80285a8:	d1e8      	bne.n	802857c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 80285aa:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 80285ae:	a801      	add	r0, sp, #4
 80285b0:	f7fa ffb1 	bl	8023516 <mkpay>
    rx_ip6(ifp, &pkt);
 80285b4:	a901      	add	r1, sp, #4
 80285b6:	4630      	mov	r0, r6
 80285b8:	f7fc fbaf 	bl	8024d1a <rx_ip6>
 80285bc:	e7de      	b.n	802857c <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 80285be:	f104 030e 	add.w	r3, r4, #14
 80285c2:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80285c4:	2d21      	cmp	r5, #33	@ 0x21
 80285c6:	d9d9      	bls.n	802857c <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 80285c8:	8a20      	ldrh	r0, [r4, #16]
 80285ca:	f7fc fb17 	bl	8024bfc <mg_ntohs>
 80285ce:	300e      	adds	r0, #14
 80285d0:	42a8      	cmp	r0, r5
 80285d2:	d200      	bcs.n	80285d6 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 80285d4:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80285d6:	9b02      	ldr	r3, [sp, #8]
 80285d8:	2b21      	cmp	r3, #33	@ 0x21
 80285da:	d9cf      	bls.n	802857c <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 80285dc:	7ba3      	ldrb	r3, [r4, #14]
 80285de:	091b      	lsrs	r3, r3, #4
 80285e0:	2b04      	cmp	r3, #4
 80285e2:	d1cb      	bne.n	802857c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 80285e4:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 80285e8:	a801      	add	r0, sp, #4
 80285ea:	f7fa ff94 	bl	8023516 <mkpay>
    rx_ip(ifp, &pkt);
 80285ee:	a901      	add	r1, sp, #4
 80285f0:	4630      	mov	r0, r6
 80285f2:	f7ff fe87 	bl	8028304 <rx_ip>
 80285f6:	e7c1      	b.n	802857c <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 80285f8:	4b0d      	ldr	r3, [pc, #52]	@ (8028630 <mg_tcpip_rx+0x154>)
 80285fa:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 80285fe:	490d      	ldr	r1, [pc, #52]	@ (8028634 <mg_tcpip_rx+0x158>)
 8028600:	2003      	movs	r0, #3
 8028602:	f7fc fe01 	bl	8025208 <mg_log_prefix>
 8028606:	9b05      	ldr	r3, [sp, #20]
 8028608:	8998      	ldrh	r0, [r3, #12]
 802860a:	f7fc faf7 	bl	8024bfc <mg_ntohs>
 802860e:	4601      	mov	r1, r0
 8028610:	4809      	ldr	r0, [pc, #36]	@ (8028638 <mg_tcpip_rx+0x15c>)
 8028612:	f7fa fce3 	bl	8022fdc <mg_log>
 8028616:	e7ad      	b.n	8028574 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8028618:	4641      	mov	r1, r8
 802861a:	2920      	cmp	r1, #32
 802861c:	bf28      	it	cs
 802861e:	2120      	movcs	r1, #32
 8028620:	4620      	mov	r0, r4
 8028622:	f7f9 fe3b 	bl	802229c <mg_hexdump>
 8028626:	e7a9      	b.n	802857c <mg_tcpip_rx+0xa0>
 8028628:	0803a1cc 	.word	0x0803a1cc
 802862c:	200000a8 	.word	0x200000a8
 8028630:	0803a070 	.word	0x0803a070
 8028634:	08039744 	.word	0x08039744
 8028638:	08039e94 	.word	0x08039e94

0802863c <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 802863c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028640:	b08b      	sub	sp, #44	@ 0x2c
 8028642:	4605      	mov	r5, r0
 8028644:	4616      	mov	r6, r2
 8028646:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8028648:	9200      	str	r2, [sp, #0]
 802864a:	9301      	str	r3, [sp, #4]
 802864c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028650:	2300      	movs	r3, #0
 8028652:	3058      	adds	r0, #88	@ 0x58
 8028654:	f7fc f8a4 	bl	80247a0 <mg_timer_expired>
  ifp->now = now;
 8028658:	652e      	str	r6, [r5, #80]	@ 0x50
 802865a:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 802865c:	4604      	mov	r4, r0
 802865e:	b318      	cbz	r0, 80286a8 <mg_tcpip_poll+0x6c>
 8028660:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8028662:	68db      	ldr	r3, [r3, #12]
 8028664:	b303      	cbz	r3, 80286a8 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 8028666:	4628      	mov	r0, r5
 8028668:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 802866a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802866e:	3b00      	subs	r3, #0
 8028670:	bf18      	it	ne
 8028672:	2301      	movne	r3, #1
    if (up != current) {
 8028674:	4298      	cmp	r0, r3
 8028676:	d010      	beq.n	802869a <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8028678:	b120      	cbz	r0, 8028684 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 802867a:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802867c:	2b00      	cmp	r3, #0
 802867e:	d06e      	beq.n	802875e <mg_tcpip_poll+0x122>
 8028680:	2301      	movs	r3, #1
 8028682:	e000      	b.n	8028686 <mg_tcpip_poll+0x4a>
 8028684:	2300      	movs	r3, #0
 8028686:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 802868a:	b918      	cbnz	r0, 8028694 <mg_tcpip_poll+0x58>
 802868c:	7f2b      	ldrb	r3, [r5, #28]
 802868e:	b10b      	cbz	r3, 8028694 <mg_tcpip_poll+0x58>
 8028690:	2300      	movs	r3, #0
 8028692:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8028694:	4628      	mov	r0, r5
 8028696:	f7ff fc67 	bl	8027f68 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802869a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802869e:	b91b      	cbnz	r3, 80286a8 <mg_tcpip_poll+0x6c>
 80286a0:	4ba8      	ldr	r3, [pc, #672]	@ (8028944 <mg_tcpip_poll+0x308>)
 80286a2:	681b      	ldr	r3, [r3, #0]
 80286a4:	2b00      	cmp	r3, #0
 80286a6:	dc5c      	bgt.n	8028762 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80286a8:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 80286ac:	2b00      	cmp	r3, #0
 80286ae:	f000 8146 	beq.w	802893e <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 80286b2:	2b01      	cmp	r3, #1
 80286b4:	d060      	beq.n	8028778 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 80286b6:	2c00      	cmp	r4, #0
 80286b8:	d05f      	beq.n	802877a <mg_tcpip_poll+0x13e>
 80286ba:	2b03      	cmp	r3, #3
 80286bc:	d15d      	bne.n	802877a <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 80286be:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 80286c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 80286c2:	ea52 0103 	orrs.w	r1, r2, r3
 80286c6:	d058      	beq.n	802877a <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 80286c8:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80286ca:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80286cc:	4290      	cmp	r0, r2
 80286ce:	eb71 0403 	sbcs.w	r4, r1, r3
 80286d2:	d262      	bcs.n	802879a <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80286d4:	4c9c      	ldr	r4, [pc, #624]	@ (8028948 <mg_tcpip_poll+0x30c>)
 80286d6:	1904      	adds	r4, r0, r4
 80286d8:	f141 0c00 	adc.w	ip, r1, #0
 80286dc:	42a2      	cmp	r2, r4
 80286de:	eb73 030c 	sbcs.w	r3, r3, ip
 80286e2:	d24a      	bcs.n	802877a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 80286e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80286e8:	2300      	movs	r3, #0
 80286ea:	f7e8 fb35 	bl	8010d58 <__aeabi_uldivmod>
 80286ee:	4602      	mov	r2, r0
 80286f0:	2000      	movs	r0, #0
 80286f2:	1853      	adds	r3, r2, r1
 80286f4:	d25a      	bcs.n	80287ac <mg_tcpip_poll+0x170>
 80286f6:	4403      	add	r3, r0
 80286f8:	4894      	ldr	r0, [pc, #592]	@ (802894c <mg_tcpip_poll+0x310>)
 80286fa:	fba0 4003 	umull	r4, r0, r0, r3
 80286fe:	08c0      	lsrs	r0, r0, #3
 8028700:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8028704:	1a1b      	subs	r3, r3, r0
 8028706:	1ad3      	subs	r3, r2, r3
 8028708:	f161 0c00 	sbc.w	ip, r1, #0
 802870c:	4c90      	ldr	r4, [pc, #576]	@ (8028950 <mg_tcpip_poll+0x314>)
 802870e:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 8028712:	fb03 f000 	mul.w	r0, r3, r0
 8028716:	fb04 000c 	mla	r0, r4, ip, r0
 802871a:	fba3 3404 	umull	r3, r4, r3, r4
 802871e:	4420      	add	r0, r4
 8028720:	089b      	lsrs	r3, r3, #2
 8028722:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 8028726:	0880      	lsrs	r0, r0, #2
 8028728:	0104      	lsls	r4, r0, #4
 802872a:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 802872e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8028732:	ebbc 0c03 	subs.w	ip, ip, r3
 8028736:	eb64 0300 	sbc.w	r3, r4, r0
 802873a:	009b      	lsls	r3, r3, #2
 802873c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8028740:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8028744:	1a12      	subs	r2, r2, r0
 8028746:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 802874a:	430a      	orrs	r2, r1
 802874c:	d115      	bne.n	802877a <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 802874e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028752:	68aa      	ldr	r2, [r5, #8]
 8028754:	497f      	ldr	r1, [pc, #508]	@ (8028954 <mg_tcpip_poll+0x318>)
 8028756:	4628      	mov	r0, r5
 8028758:	f7fe fdfe 	bl	8027358 <tx_dhcp_request_re>
 802875c:	e00d      	b.n	802877a <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802875e:	2303      	movs	r3, #3
 8028760:	e791      	b.n	8028686 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8028762:	4b7d      	ldr	r3, [pc, #500]	@ (8028958 <mg_tcpip_poll+0x31c>)
 8028764:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8028768:	497c      	ldr	r1, [pc, #496]	@ (802895c <mg_tcpip_poll+0x320>)
 802876a:	2001      	movs	r0, #1
 802876c:	f7fc fd4c 	bl	8025208 <mg_log_prefix>
 8028770:	487b      	ldr	r0, [pc, #492]	@ (8028960 <mg_tcpip_poll+0x324>)
 8028772:	f7fa fc33 	bl	8022fdc <mg_log>
 8028776:	e797      	b.n	80286a8 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8028778:	b95c      	cbnz	r4, 8028792 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 802877a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802877c:	689b      	ldr	r3, [r3, #8]
 802877e:	b1fb      	cbz	r3, 80287c0 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8028780:	462a      	mov	r2, r5
 8028782:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8028784:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8028786:	4798      	blx	r3
    if (len > 0) {
 8028788:	4602      	mov	r2, r0
 802878a:	b988      	cbnz	r0, 80287b0 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 802878c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802878e:	681c      	ldr	r4, [r3, #0]
 8028790:	e0a3      	b.n	80288da <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8028792:	4628      	mov	r0, r5
 8028794:	f7fe fdaa 	bl	80272ec <tx_dhcp_discover>
 8028798:	e7ef      	b.n	802877a <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 802879a:	2301      	movs	r3, #1
 802879c:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 80287a0:	2300      	movs	r3, #0
 80287a2:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 80287a4:	4628      	mov	r0, r5
 80287a6:	f7ff fbdf 	bl	8027f68 <onstatechange>
 80287aa:	e7e6      	b.n	802877a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 80287ac:	2001      	movs	r0, #1
 80287ae:	e7a2      	b.n	80286f6 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 80287b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80287b2:	3301      	adds	r3, #1
 80287b4:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 80287b6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80287b8:	4628      	mov	r0, r5
 80287ba:	f7ff fe8f 	bl	80284dc <mg_tcpip_rx>
 80287be:	e7e5      	b.n	802878c <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 80287c0:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 80287c4:	a909      	add	r1, sp, #36	@ 0x24
 80287c6:	4620      	mov	r0, r4
 80287c8:	f7fa fd13 	bl	80231f2 <mg_queue_next>
    if (len > 0) {
 80287cc:	4680      	mov	r8, r0
 80287ce:	2800      	cmp	r0, #0
 80287d0:	d0dc      	beq.n	802878c <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 80287d2:	4602      	mov	r2, r0
 80287d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80287d6:	4628      	mov	r0, r5
 80287d8:	f7ff fe80 	bl	80284dc <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 80287dc:	4641      	mov	r1, r8
 80287de:	4620      	mov	r0, r4
 80287e0:	f7fa fd23 	bl	802322a <mg_queue_del>
 80287e4:	e7d2      	b.n	802878c <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80287e6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 80287ea:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80287ee:	4291      	cmp	r1, r2
 80287f0:	f000 8088 	beq.w	8028904 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80287f4:	4b53      	ldr	r3, [pc, #332]	@ (8028944 <mg_tcpip_poll+0x308>)
 80287f6:	681b      	ldr	r3, [r3, #0]
 80287f8:	2b03      	cmp	r3, #3
 80287fa:	dc23      	bgt.n	8028844 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80287fc:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8028800:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8028804:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8028808:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 802880c:	f7fc f95e 	bl	8024acc <mg_ntohl>
 8028810:	9007      	str	r0, [sp, #28]
 8028812:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028816:	f7fc f959 	bl	8024acc <mg_ntohl>
 802881a:	2300      	movs	r3, #0
 802881c:	9305      	str	r3, [sp, #20]
 802881e:	9304      	str	r3, [sp, #16]
 8028820:	9003      	str	r0, [sp, #12]
 8028822:	9b07      	ldr	r3, [sp, #28]
 8028824:	9302      	str	r3, [sp, #8]
 8028826:	f8cd b004 	str.w	fp, [sp, #4]
 802882a:	f8cd a000 	str.w	sl, [sp]
 802882e:	2310      	movs	r3, #16
 8028830:	4642      	mov	r2, r8
 8028832:	4649      	mov	r1, r9
 8028834:	4628      	mov	r0, r5
 8028836:	f7fe f9e3 	bl	8026c00 <tx_tcp>
        s->acked = s->ack;
 802883a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 802883e:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8028842:	e045      	b.n	80288d0 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8028844:	4b44      	ldr	r3, [pc, #272]	@ (8028958 <mg_tcpip_poll+0x31c>)
 8028846:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 802884a:	4944      	ldr	r1, [pc, #272]	@ (802895c <mg_tcpip_poll+0x320>)
 802884c:	2004      	movs	r0, #4
 802884e:	f7fc fcdb 	bl	8025208 <mg_log_prefix>
 8028852:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028856:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 802885a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802885c:	4841      	ldr	r0, [pc, #260]	@ (8028964 <mg_tcpip_poll+0x328>)
 802885e:	f7fa fbbd 	bl	8022fdc <mg_log>
 8028862:	e7cb      	b.n	80287fc <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 8028864:	4940      	ldr	r1, [pc, #256]	@ (8028968 <mg_tcpip_poll+0x32c>)
 8028866:	4620      	mov	r0, r4
 8028868:	f7fc fdb6 	bl	80253d8 <mg_error>
 802886c:	e030      	b.n	80288d0 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 802886e:	493f      	ldr	r1, [pc, #252]	@ (802896c <mg_tcpip_poll+0x330>)
 8028870:	4620      	mov	r0, r4
 8028872:	f7fc fdb1 	bl	80253d8 <mg_error>
 8028876:	e02b      	b.n	80288d0 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 8028878:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802887c:	f043 0320 	orr.w	r3, r3, #32
 8028880:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 8028884:	e028      	b.n	80288d8 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 8028886:	493a      	ldr	r1, [pc, #232]	@ (8028970 <mg_tcpip_poll+0x334>)
 8028888:	4620      	mov	r0, r4
 802888a:	f7fc fda5 	bl	80253d8 <mg_error>
 802888e:	e01f      	b.n	80288d0 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8028890:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8028894:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8028898:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 802889c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80288a0:	3801      	subs	r0, #1
 80288a2:	f7fc f913 	bl	8024acc <mg_ntohl>
 80288a6:	9007      	str	r0, [sp, #28]
 80288a8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80288ac:	f7fc f90e 	bl	8024acc <mg_ntohl>
 80288b0:	2300      	movs	r3, #0
 80288b2:	9305      	str	r3, [sp, #20]
 80288b4:	9304      	str	r3, [sp, #16]
 80288b6:	9003      	str	r0, [sp, #12]
 80288b8:	9b07      	ldr	r3, [sp, #28]
 80288ba:	9302      	str	r3, [sp, #8]
 80288bc:	f8cd b004 	str.w	fp, [sp, #4]
 80288c0:	f8cd a000 	str.w	sl, [sp]
 80288c4:	2310      	movs	r3, #16
 80288c6:	4642      	mov	r2, r8
 80288c8:	4649      	mov	r1, r9
 80288ca:	4628      	mov	r0, r5
 80288cc:	f7fe f998 	bl	8026c00 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 80288d0:	2100      	movs	r1, #0
 80288d2:	4620      	mov	r0, r4
 80288d4:	f7fe fa70 	bl	8026db8 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80288d8:	6824      	ldr	r4, [r4, #0]
 80288da:	b384      	cbz	r4, 802893e <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 80288dc:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 80288e0:	f240 1209 	movw	r2, #265	@ 0x109
 80288e4:	421a      	tst	r2, r3
 80288e6:	d1f7      	bne.n	80288d8 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80288e8:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 80288ec:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 80288f0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 80288f4:	42b2      	cmp	r2, r6
 80288f6:	41bb      	sbcs	r3, r7
 80288f8:	d2ee      	bcs.n	80288d8 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80288fa:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80288fe:	2b01      	cmp	r3, #1
 8028900:	f43f af71 	beq.w	80287e6 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 8028904:	2b02      	cmp	r3, #2
 8028906:	d0ad      	beq.n	8028864 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8028908:	2b03      	cmp	r3, #3
 802890a:	d0b0      	beq.n	802886e <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 802890c:	2b04      	cmp	r3, #4
 802890e:	d0b3      	beq.n	8028878 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 8028910:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8028914:	1c5a      	adds	r2, r3, #1
 8028916:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 802891a:	2b02      	cmp	r3, #2
 802891c:	d8b3      	bhi.n	8028886 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 802891e:	4b09      	ldr	r3, [pc, #36]	@ (8028944 <mg_tcpip_poll+0x308>)
 8028920:	681b      	ldr	r3, [r3, #0]
 8028922:	2b03      	cmp	r3, #3
 8028924:	ddb4      	ble.n	8028890 <mg_tcpip_poll+0x254>
 8028926:	4b0c      	ldr	r3, [pc, #48]	@ (8028958 <mg_tcpip_poll+0x31c>)
 8028928:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 802892c:	490b      	ldr	r1, [pc, #44]	@ (802895c <mg_tcpip_poll+0x320>)
 802892e:	2004      	movs	r0, #4
 8028930:	f7fc fc6a 	bl	8025208 <mg_log_prefix>
 8028934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028936:	480f      	ldr	r0, [pc, #60]	@ (8028974 <mg_tcpip_poll+0x338>)
 8028938:	f7fa fb50 	bl	8022fdc <mg_log>
 802893c:	e7a8      	b.n	8028890 <mg_tcpip_poll+0x254>
}
 802893e:	b00b      	add	sp, #44	@ 0x2c
 8028940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028944:	200000a8 	.word	0x200000a8
 8028948:	001b7740 	.word	0x001b7740
 802894c:	88888889 	.word	0x88888889
 8028950:	eeeeeeef 	.word	0xeeeeeeef
 8028954:	0803a1cc 	.word	0x0803a1cc
 8028958:	0803a0b4 	.word	0x0803a0b4
 802895c:	08039744 	.word	0x08039744
 8028960:	08039ea8 	.word	0x08039ea8
 8028964:	08039eb8 	.word	0x08039eb8
 8028968:	08039ec8 	.word	0x08039ec8
 802896c:	08039ed4 	.word	0x08039ed4
 8028970:	08039eec 	.word	0x08039eec
 8028974:	08039ee8 	.word	0x08039ee8

08028978 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8028978:	b5f0      	push	{r4, r5, r6, r7, lr}
 802897a:	b087      	sub	sp, #28
 802897c:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 802897e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 8028980:	f7fc fc3d 	bl	80251fe <mg_millis>
 8028984:	4602      	mov	r2, r0
 8028986:	460b      	mov	r3, r1
 8028988:	9004      	str	r0, [sp, #16]
 802898a:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 802898c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8028990:	f7fb ff3a 	bl	8024808 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8028994:	2d00      	cmp	r5, #0
 8028996:	d078      	beq.n	8028a8a <mg_mgr_poll+0x112>
 8028998:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802899a:	2b00      	cmp	r3, #0
 802899c:	d075      	beq.n	8028a8a <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 802899e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80289a2:	4628      	mov	r0, r5
 80289a4:	f7ff fe4a 	bl	802863c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 80289a8:	6824      	ldr	r4, [r4, #0]
 80289aa:	e040      	b.n	8028a2e <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 80289ac:	4b38      	ldr	r3, [pc, #224]	@ (8028a90 <mg_mgr_poll+0x118>)
 80289ae:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 80289b2:	4938      	ldr	r1, [pc, #224]	@ (8028a94 <mg_mgr_poll+0x11c>)
 80289b4:	2004      	movs	r0, #4
 80289b6:	f7fc fc27 	bl	8025208 <mg_log_prefix>
 80289ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80289bc:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 80289c0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80289c4:	d019      	beq.n	80289fa <mg_mgr_poll+0x82>
 80289c6:	2254      	movs	r2, #84	@ 0x54
 80289c8:	f010 0f20 	tst.w	r0, #32
 80289cc:	d017      	beq.n	80289fe <mg_mgr_poll+0x86>
 80289ce:	2343      	movs	r3, #67	@ 0x43
 80289d0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80289d4:	d115      	bne.n	8028a02 <mg_mgr_poll+0x8a>
 80289d6:	2668      	movs	r6, #104	@ 0x68
 80289d8:	f010 0f08 	tst.w	r0, #8
 80289dc:	d013      	beq.n	8028a06 <mg_mgr_poll+0x8e>
 80289de:	2752      	movs	r7, #82	@ 0x52
 80289e0:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 80289e4:	f010 0f20 	tst.w	r0, #32
 80289e8:	d00f      	beq.n	8028a0a <mg_mgr_poll+0x92>
 80289ea:	2043      	movs	r0, #67	@ 0x43
 80289ec:	9002      	str	r0, [sp, #8]
 80289ee:	9701      	str	r7, [sp, #4]
 80289f0:	9600      	str	r6, [sp, #0]
 80289f2:	4829      	ldr	r0, [pc, #164]	@ (8028a98 <mg_mgr_poll+0x120>)
 80289f4:	f7fa faf2 	bl	8022fdc <mg_log>
 80289f8:	e024      	b.n	8028a44 <mg_mgr_poll+0xcc>
 80289fa:	2274      	movs	r2, #116	@ 0x74
 80289fc:	e7e4      	b.n	80289c8 <mg_mgr_poll+0x50>
 80289fe:	2363      	movs	r3, #99	@ 0x63
 8028a00:	e7e6      	b.n	80289d0 <mg_mgr_poll+0x58>
 8028a02:	2648      	movs	r6, #72	@ 0x48
 8028a04:	e7e8      	b.n	80289d8 <mg_mgr_poll+0x60>
 8028a06:	2772      	movs	r7, #114	@ 0x72
 8028a08:	e7ea      	b.n	80289e0 <mg_mgr_poll+0x68>
 8028a0a:	2063      	movs	r0, #99	@ 0x63
 8028a0c:	e7ee      	b.n	80289ec <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8028a0e:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 8028a12:	4620      	mov	r0, r4
 8028a14:	f7fc fd18 	bl	8025448 <handle_tls_recv>
 8028a18:	e01e      	b.n	8028a58 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 8028a1a:	4620      	mov	r0, r4
 8028a1c:	f7fe fa6a 	bl	8026ef4 <write_conn>
 8028a20:	e01f      	b.n	8028a62 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 8028a22:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028a26:	f013 0f20 	tst.w	r3, #32
 8028a2a:	d12a      	bne.n	8028a82 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8028a2c:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 8028a2e:	b364      	cbz	r4, 8028a8a <mg_mgr_poll+0x112>
    tmp = c->next;
 8028a30:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 8028a32:	aa04      	add	r2, sp, #16
 8028a34:	2102      	movs	r1, #2
 8028a36:	4620      	mov	r0, r4
 8028a38:	f7f9 f886 	bl	8021b48 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8028a3c:	4b17      	ldr	r3, [pc, #92]	@ (8028a9c <mg_mgr_poll+0x124>)
 8028a3e:	681b      	ldr	r3, [r3, #0]
 8028a40:	2b03      	cmp	r3, #3
 8028a42:	dcb3      	bgt.n	80289ac <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 8028a44:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028a48:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028a4c:	d004      	beq.n	8028a58 <mg_mgr_poll+0xe0>
 8028a4e:	4620      	mov	r0, r4
 8028a50:	f7fb ff24 	bl	802489c <mg_tls_pending>
 8028a54:	2800      	cmp	r0, #0
 8028a56:	d1da      	bne.n	8028a0e <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 8028a58:	4620      	mov	r0, r4
 8028a5a:	f7f7 fca3 	bl	80203a4 <can_write>
 8028a5e:	2800      	cmp	r0, #0
 8028a60:	d1db      	bne.n	8028a1a <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8028a62:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028a66:	f013 0f10 	tst.w	r3, #16
 8028a6a:	d0da      	beq.n	8028a22 <mg_mgr_poll+0xaa>
 8028a6c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8028a6e:	2b00      	cmp	r3, #0
 8028a70:	d1d7      	bne.n	8028a22 <mg_mgr_poll+0xaa>
 8028a72:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028a76:	2b04      	cmp	r3, #4
 8028a78:	d0d3      	beq.n	8028a22 <mg_mgr_poll+0xaa>
      init_closure(c);
 8028a7a:	4620      	mov	r0, r4
 8028a7c:	f7fe fa66 	bl	8026f4c <init_closure>
 8028a80:	e7cf      	b.n	8028a22 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 8028a82:	4620      	mov	r0, r4
 8028a84:	f7fd fb7e 	bl	8026184 <close_conn>
 8028a88:	e7d0      	b.n	8028a2c <mg_mgr_poll+0xb4>
}
 8028a8a:	b007      	add	sp, #28
 8028a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028a8e:	bf00      	nop
 8028a90:	0803a0c4 	.word	0x0803a0c4
 8028a94:	08039744 	.word	0x08039744
 8028a98:	08039ef8 	.word	0x08039ef8
 8028a9c:	200000a8 	.word	0x200000a8

08028aa0 <mg_now>:
uint64_t mg_now(void) {
 8028aa0:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 8028aa2:	f7fc fbac 	bl	80251fe <mg_millis>
 8028aa6:	4a03      	ldr	r2, [pc, #12]	@ (8028ab4 <mg_now+0x14>)
 8028aa8:	6813      	ldr	r3, [r2, #0]
 8028aaa:	6852      	ldr	r2, [r2, #4]
 8028aac:	18c0      	adds	r0, r0, r3
}
 8028aae:	eb42 0101 	adc.w	r1, r2, r1
 8028ab2:	bd08      	pop	{r3, pc}
 8028ab4:	20018de8 	.word	0x20018de8

08028ab8 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8028ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028abc:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 8028abe:	460a      	mov	r2, r1
 8028ac0:	b129      	cbz	r1, 8028ace <mg_sntp_parse+0x16>
 8028ac2:	7801      	ldrb	r1, [r0, #0]
 8028ac4:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8028ac8:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 8028acc:	e001      	b.n	8028ad2 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 8028ace:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8028ad0:	461d      	mov	r5, r3
  if (len < 48) {
 8028ad2:	2a2f      	cmp	r2, #47	@ 0x2f
 8028ad4:	d817      	bhi.n	8028b06 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 8028ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8028c04 <mg_sntp_parse+0x14c>)
 8028ad8:	681b      	ldr	r3, [r3, #0]
 8028ada:	2b00      	cmp	r3, #0
 8028adc:	dc04      	bgt.n	8028ae8 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 8028ade:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028ae2:	4601      	mov	r1, r0
}
 8028ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 8028ae8:	4b47      	ldr	r3, [pc, #284]	@ (8028c08 <mg_sntp_parse+0x150>)
 8028aea:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 8028aee:	4947      	ldr	r1, [pc, #284]	@ (8028c0c <mg_sntp_parse+0x154>)
 8028af0:	2001      	movs	r0, #1
 8028af2:	f7fc fb89 	bl	8025208 <mg_log_prefix>
 8028af6:	4946      	ldr	r1, [pc, #280]	@ (8028c10 <mg_sntp_parse+0x158>)
 8028af8:	4846      	ldr	r0, [pc, #280]	@ (8028c14 <mg_sntp_parse+0x15c>)
 8028afa:	f7fa fa6f 	bl	8022fdc <mg_log>
  int64_t epoch_milliseconds = -1;
 8028afe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028b02:	4601      	mov	r1, r0
 8028b04:	e7ee      	b.n	8028ae4 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 8028b06:	3b04      	subs	r3, #4
 8028b08:	2b01      	cmp	r3, #1
 8028b0a:	d916      	bls.n	8028b3a <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 8028b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8028c04 <mg_sntp_parse+0x14c>)
 8028b0e:	681b      	ldr	r3, [r3, #0]
 8028b10:	2b00      	cmp	r3, #0
 8028b12:	dc03      	bgt.n	8028b1c <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 8028b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028b18:	4601      	mov	r1, r0
 8028b1a:	e7e3      	b.n	8028ae4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 8028b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8028c08 <mg_sntp_parse+0x150>)
 8028b1e:	f641 4210 	movw	r2, #7184	@ 0x1c10
 8028b22:	493a      	ldr	r1, [pc, #232]	@ (8028c0c <mg_sntp_parse+0x154>)
 8028b24:	2001      	movs	r0, #1
 8028b26:	f7fc fb6f 	bl	8025208 <mg_log_prefix>
 8028b2a:	493b      	ldr	r1, [pc, #236]	@ (8028c18 <mg_sntp_parse+0x160>)
 8028b2c:	4839      	ldr	r0, [pc, #228]	@ (8028c14 <mg_sntp_parse+0x15c>)
 8028b2e:	f7fa fa55 	bl	8022fdc <mg_log>
  int64_t epoch_milliseconds = -1;
 8028b32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028b36:	4601      	mov	r1, r0
 8028b38:	e7d4      	b.n	8028ae4 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 8028b3a:	7863      	ldrb	r3, [r4, #1]
 8028b3c:	b9b3      	cbnz	r3, 8028b6c <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8028b3e:	4b31      	ldr	r3, [pc, #196]	@ (8028c04 <mg_sntp_parse+0x14c>)
 8028b40:	681b      	ldr	r3, [r3, #0]
 8028b42:	2b00      	cmp	r3, #0
 8028b44:	dc03      	bgt.n	8028b4e <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 8028b46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028b4a:	4601      	mov	r1, r0
 8028b4c:	e7ca      	b.n	8028ae4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8028b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8028c08 <mg_sntp_parse+0x150>)
 8028b50:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8028b54:	492d      	ldr	r1, [pc, #180]	@ (8028c0c <mg_sntp_parse+0x154>)
 8028b56:	2001      	movs	r0, #1
 8028b58:	f7fc fb56 	bl	8025208 <mg_log_prefix>
 8028b5c:	492f      	ldr	r1, [pc, #188]	@ (8028c1c <mg_sntp_parse+0x164>)
 8028b5e:	482d      	ldr	r0, [pc, #180]	@ (8028c14 <mg_sntp_parse+0x15c>)
 8028b60:	f7fa fa3c 	bl	8022fdc <mg_log>
  int64_t epoch_milliseconds = -1;
 8028b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028b68:	4601      	mov	r1, r0
 8028b6a:	e7bb      	b.n	8028ae4 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 8028b6c:	1eeb      	subs	r3, r5, #3
 8028b6e:	2b01      	cmp	r3, #1
 8028b70:	d907      	bls.n	8028b82 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 8028b72:	4b24      	ldr	r3, [pc, #144]	@ (8028c04 <mg_sntp_parse+0x14c>)
 8028b74:	681b      	ldr	r3, [r3, #0]
 8028b76:	2b00      	cmp	r3, #0
 8028b78:	dc35      	bgt.n	8028be6 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 8028b7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028b7e:	4601      	mov	r1, r0
  return epoch_milliseconds;
 8028b80:	e7b0      	b.n	8028ae4 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8028b82:	f104 0018 	add.w	r0, r4, #24
 8028b86:	f7fb ffff 	bl	8024b88 <gettimestamp>
 8028b8a:	4606      	mov	r6, r0
 8028b8c:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8028b8e:	f104 0020 	add.w	r0, r4, #32
 8028b92:	f7fb fff9 	bl	8024b88 <gettimestamp>
 8028b96:	4680      	mov	r8, r0
 8028b98:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 8028b9a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8028b9e:	f7fb fff3 	bl	8024b88 <gettimestamp>
 8028ba2:	4607      	mov	r7, r0
 8028ba4:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 8028ba6:	f7fc fb2a 	bl	80251fe <mg_millis>
 8028baa:	4605      	mov	r5, r0
 8028bac:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 8028bae:	1b86      	subs	r6, r0, r6
 8028bb0:	eb61 020a 	sbc.w	r2, r1, sl
 8028bb4:	ebb7 0808 	subs.w	r8, r7, r8
 8028bb8:	eb64 0909 	sbc.w	r9, r4, r9
 8028bbc:	ebb6 0608 	subs.w	r6, r6, r8
 8028bc0:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 8028bc4:	0fd3      	lsrs	r3, r2, #31
 8028bc6:	199b      	adds	r3, r3, r6
 8028bc8:	f142 0200 	adc.w	r2, r2, #0
 8028bcc:	085b      	lsrs	r3, r3, #1
 8028bce:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8028bd2:	19d8      	adds	r0, r3, r7
 8028bd4:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8028bd8:	1b45      	subs	r5, r0, r5
 8028bda:	eb61 030c 	sbc.w	r3, r1, ip
 8028bde:	4a10      	ldr	r2, [pc, #64]	@ (8028c20 <mg_sntp_parse+0x168>)
 8028be0:	6015      	str	r5, [r2, #0]
 8028be2:	6053      	str	r3, [r2, #4]
 8028be4:	e77e      	b.n	8028ae4 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 8028be6:	4b08      	ldr	r3, [pc, #32]	@ (8028c08 <mg_sntp_parse+0x150>)
 8028be8:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 8028bec:	4907      	ldr	r1, [pc, #28]	@ (8028c0c <mg_sntp_parse+0x154>)
 8028bee:	2001      	movs	r0, #1
 8028bf0:	f7fc fb0a 	bl	8025208 <mg_log_prefix>
 8028bf4:	4629      	mov	r1, r5
 8028bf6:	480b      	ldr	r0, [pc, #44]	@ (8028c24 <mg_sntp_parse+0x16c>)
 8028bf8:	f7fa f9f0 	bl	8022fdc <mg_log>
  int64_t epoch_milliseconds = -1;
 8028bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028c00:	4601      	mov	r1, r0
 8028c02:	e76f      	b.n	8028ae4 <mg_sntp_parse+0x2c>
 8028c04:	200000a8 	.word	0x200000a8
 8028c08:	0803a014 	.word	0x0803a014
 8028c0c:	08039744 	.word	0x08039744
 8028c10:	08039f0c 	.word	0x08039f0c
 8028c14:	08039a5c 	.word	0x08039a5c
 8028c18:	08039f1c 	.word	0x08039f1c
 8028c1c:	08039f30 	.word	0x08039f30
 8028c20:	20018de8 	.word	0x20018de8
 8028c24:	08039f4c 	.word	0x08039f4c

08028c28 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 8028c28:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8028c2c:	b08c      	sub	sp, #48	@ 0x30
 8028c2e:	4604      	mov	r4, r0
  if (c->is_resolving) {
 8028c30:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028c34:	f013 0f08 	tst.w	r3, #8
 8028c38:	d012      	beq.n	8028c60 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 8028c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8028ce8 <mg_sntp_request+0xc0>)
 8028c3c:	681b      	ldr	r3, [r3, #0]
 8028c3e:	2b00      	cmp	r3, #0
 8028c40:	dc02      	bgt.n	8028c48 <mg_sntp_request+0x20>
}
 8028c42:	b00c      	add	sp, #48	@ 0x30
 8028c44:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 8028c48:	4b28      	ldr	r3, [pc, #160]	@ (8028cec <mg_sntp_request+0xc4>)
 8028c4a:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 8028c4e:	4928      	ldr	r1, [pc, #160]	@ (8028cf0 <mg_sntp_request+0xc8>)
 8028c50:	2001      	movs	r0, #1
 8028c52:	f7fc fad9 	bl	8025208 <mg_log_prefix>
 8028c56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028c58:	4826      	ldr	r0, [pc, #152]	@ (8028cf4 <mg_sntp_request+0xcc>)
 8028c5a:	f7fa f9bf 	bl	8022fdc <mg_log>
 8028c5e:	e7f0      	b.n	8028c42 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8028c60:	f7fc facd 	bl	80251fe <mg_millis>
 8028c64:	4606      	mov	r6, r0
 8028c66:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 8028c68:	2100      	movs	r1, #0
 8028c6a:	9100      	str	r1, [sp, #0]
 8028c6c:	222c      	movs	r2, #44	@ 0x2c
 8028c6e:	a801      	add	r0, sp, #4
 8028c70:	f002 fec6 	bl	802ba00 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8028c74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028c78:	2300      	movs	r3, #0
 8028c7a:	4630      	mov	r0, r6
 8028c7c:	4629      	mov	r1, r5
 8028c7e:	f7e8 f81b 	bl	8010cb8 <__aeabi_ldivmod>
 8028c82:	4610      	mov	r0, r2
 8028c84:	4619      	mov	r1, r3
 8028c86:	f7e7 fca1 	bl	80105cc <__aeabi_l2d>
 8028c8a:	2200      	movs	r2, #0
 8028c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8028cf8 <mg_sntp_request+0xd0>)
 8028c8e:	f7e7 fdf5 	bl	801087c <__aeabi_ddiv>
 8028c92:	a313      	add	r3, pc, #76	@ (adr r3, 8028ce0 <mg_sntp_request+0xb8>)
 8028c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028c98:	f7e7 fcc6 	bl	8010628 <__aeabi_dmul>
 8028c9c:	4680      	mov	r8, r0
 8028c9e:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8028ca0:	2323      	movs	r3, #35	@ 0x23
 8028ca2:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8028ca6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028caa:	2300      	movs	r3, #0
 8028cac:	4630      	mov	r0, r6
 8028cae:	4629      	mov	r1, r5
 8028cb0:	f7e8 f802 	bl	8010cb8 <__aeabi_ldivmod>
 8028cb4:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 8028cb8:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 8028cbc:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 8028cc0:	f7fb ff04 	bl	8024acc <mg_ntohl>
 8028cc4:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 8028cc6:	4640      	mov	r0, r8
 8028cc8:	4649      	mov	r1, r9
 8028cca:	f7e7 ff85 	bl	8010bd8 <__aeabi_d2uiz>
 8028cce:	f7fb fefd 	bl	8024acc <mg_ntohl>
 8028cd2:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 8028cd4:	2230      	movs	r2, #48	@ 0x30
 8028cd6:	4669      	mov	r1, sp
 8028cd8:	4620      	mov	r0, r4
 8028cda:	f7fd fb49 	bl	8026370 <mg_send>
}
 8028cde:	e7b0      	b.n	8028c42 <mg_sntp_request+0x1a>
 8028ce0:	ffe00000 	.word	0xffe00000
 8028ce4:	41efffff 	.word	0x41efffff
 8028ce8:	200000a8 	.word	0x200000a8
 8028cec:	0803a004 	.word	0x0803a004
 8028cf0:	08039744 	.word	0x08039744
 8028cf4:	08039f64 	.word	0x08039f64
 8028cf8:	408f4000 	.word	0x408f4000

08028cfc <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 8028cfc:	b570      	push	{r4, r5, r6, lr}
 8028cfe:	b082      	sub	sp, #8
 8028d00:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 8028d02:	3901      	subs	r1, #1
 8028d04:	2906      	cmp	r1, #6
 8028d06:	d810      	bhi.n	8028d2a <sntp_cb+0x2e>
 8028d08:	e8df f001 	tbb	[pc, r1]
 8028d0c:	110f4604 	.word	0x110f4604
 8028d10:	0f0f      	.short	0x0f0f
 8028d12:	14          	.byte	0x14
 8028d13:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 8028d14:	f7fc fa73 	bl	80251fe <mg_millis>
 8028d18:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8028d1c:	18c0      	adds	r0, r0, r3
 8028d1e:	f141 0100 	adc.w	r1, r1, #0
 8028d22:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8028d26:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 8028d2a:	b002      	add	sp, #8
 8028d2c:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 8028d2e:	f7ff ff7b 	bl	8028c28 <mg_sntp_request>
 8028d32:	e7fa      	b.n	8028d2a <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8028d34:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8028d36:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8028d38:	f7ff febe 	bl	8028ab8 <mg_sntp_parse>
 8028d3c:	4605      	mov	r5, r0
 8028d3e:	460e      	mov	r6, r1
 8028d40:	9000      	str	r0, [sp, #0]
 8028d42:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 8028d44:	2801      	cmp	r0, #1
 8028d46:	f171 0300 	sbcs.w	r3, r1, #0
 8028d4a:	da06      	bge.n	8028d5a <sntp_cb+0x5e>
    c->is_closing = 1;
 8028d4c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028d50:	f043 0320 	orr.w	r3, r3, #32
 8028d54:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8028d58:	e7e7      	b.n	8028d2a <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 8028d5a:	f7fc fa50 	bl	80251fe <mg_millis>
 8028d5e:	1a2d      	subs	r5, r5, r0
 8028d60:	eb66 0601 	sbc.w	r6, r6, r1
 8028d64:	4b14      	ldr	r3, [pc, #80]	@ (8028db8 <sntp_cb+0xbc>)
 8028d66:	601d      	str	r5, [r3, #0]
 8028d68:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 8028d6a:	466a      	mov	r2, sp
 8028d6c:	2112      	movs	r1, #18
 8028d6e:	4620      	mov	r0, r4
 8028d70:	f7f8 feea 	bl	8021b48 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8028d74:	4b11      	ldr	r3, [pc, #68]	@ (8028dbc <sntp_cb+0xc0>)
 8028d76:	681b      	ldr	r3, [r3, #0]
 8028d78:	2b02      	cmp	r3, #2
 8028d7a:	dde7      	ble.n	8028d4c <sntp_cb+0x50>
 8028d7c:	4b10      	ldr	r3, [pc, #64]	@ (8028dc0 <sntp_cb+0xc4>)
 8028d7e:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8028d82:	4910      	ldr	r1, [pc, #64]	@ (8028dc4 <sntp_cb+0xc8>)
 8028d84:	2003      	movs	r0, #3
 8028d86:	f7fc fa3f 	bl	8025208 <mg_log_prefix>
 8028d8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028d8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028d90:	480d      	ldr	r0, [pc, #52]	@ (8028dc8 <sntp_cb+0xcc>)
 8028d92:	f7fa f923 	bl	8022fdc <mg_log>
 8028d96:	e7d9      	b.n	8028d4c <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8028d98:	f7fc fa31 	bl	80251fe <mg_millis>
 8028d9c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8028da0:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8028da4:	4282      	cmp	r2, r0
 8028da6:	418b      	sbcs	r3, r1
 8028da8:	d2bf      	bcs.n	8028d2a <sntp_cb+0x2e>
 8028daa:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028dae:	f043 0320 	orr.w	r3, r3, #32
 8028db2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8028db6:	e7b8      	b.n	8028d2a <sntp_cb+0x2e>
 8028db8:	20018de8 	.word	0x20018de8
 8028dbc:	200000a8 	.word	0x200000a8
 8028dc0:	08039ffc 	.word	0x08039ffc
 8028dc4:	08039744 	.word	0x08039744
 8028dc8:	08039f7c 	.word	0x08039f7c

08028dcc <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 8028dcc:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 8028dce:	460d      	mov	r5, r1
 8028dd0:	b169      	cbz	r1, 8028dee <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 8028dd2:	4629      	mov	r1, r5
 8028dd4:	f7fe ffa0 	bl	8027d18 <mg_connect>
 8028dd8:	4604      	mov	r4, r0
 8028dda:	b130      	cbz	r0, 8028dea <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 8028ddc:	4b05      	ldr	r3, [pc, #20]	@ (8028df4 <mg_sntp_connect+0x28>)
 8028dde:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 8028de2:	462a      	mov	r2, r5
 8028de4:	2101      	movs	r1, #1
 8028de6:	f7ff ff89 	bl	8028cfc <sntp_cb>
}
 8028dea:	4620      	mov	r0, r4
 8028dec:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 8028dee:	4d02      	ldr	r5, [pc, #8]	@ (8028df8 <mg_sntp_connect+0x2c>)
 8028df0:	e7ef      	b.n	8028dd2 <mg_sntp_connect+0x6>
 8028df2:	bf00      	nop
 8028df4:	08028cfd 	.word	0x08028cfd
 8028df8:	08039fa0 	.word	0x08039fa0

08028dfc <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 8028dfc:	b508      	push	{r3, lr}
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 8028dfe:	2207      	movs	r2, #7
 8028e00:	4903      	ldr	r1, [pc, #12]	@ (8028e10 <has_mqtt_prefix+0x14>)
 8028e02:	f002 fe32 	bl	802ba6a <strncmp>
}
 8028e06:	fab0 f080 	clz	r0, r0
 8028e0a:	0940      	lsrs	r0, r0, #5
 8028e0c:	bd08      	pop	{r3, pc}
 8028e0e:	bf00      	nop
 8028e10:	0803a61c 	.word	0x0803a61c

08028e14 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8028e14:	b570      	push	{r4, r5, r6, lr}
 8028e16:	4604      	mov	r4, r0
    int dot_count = 0;
    int is_ip_format = 1;

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8028e18:	2200      	movs	r2, #0
    int dot_count = 0;
 8028e1a:	4610      	mov	r0, r2
    for (int i = 0; host[i] != '\0'; i++) {
 8028e1c:	e001      	b.n	8028e22 <is_valid_ip_or_domain+0xe>
        if (host[i] == '.') {
            dot_count++;
 8028e1e:	3001      	adds	r0, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8028e20:	3201      	adds	r2, #1
 8028e22:	5ca3      	ldrb	r3, [r4, r2]
 8028e24:	b143      	cbz	r3, 8028e38 <is_valid_ip_or_domain+0x24>
        if (host[i] == '.') {
 8028e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8028e28:	d0f9      	beq.n	8028e1e <is_valid_ip_or_domain+0xa>
        } else if (!isdigit(host[i])) {
 8028e2a:	491d      	ldr	r1, [pc, #116]	@ (8028ea0 <is_valid_ip_or_domain+0x8c>)
 8028e2c:	5ccb      	ldrb	r3, [r1, r3]
 8028e2e:	f013 0f04 	tst.w	r3, #4
 8028e32:	d1f5      	bne.n	8028e20 <is_valid_ip_or_domain+0xc>
            is_ip_format = 0;
 8028e34:	2500      	movs	r5, #0
 8028e36:	e000      	b.n	8028e3a <is_valid_ip_or_domain+0x26>
    int is_ip_format = 1;
 8028e38:	2501      	movs	r5, #1
            break;
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 8028e3a:	b335      	cbz	r5, 8028e8a <is_valid_ip_or_domain+0x76>
 8028e3c:	2803      	cmp	r0, #3
 8028e3e:	d013      	beq.n	8028e68 <is_valid_ip_or_domain+0x54>
 8028e40:	2200      	movs	r2, #0
 8028e42:	4615      	mov	r5, r2
 8028e44:	e014      	b.n	8028e70 <is_valid_ip_or_domain+0x5c>
        int octet;
        const char *ptr = host;

        for (int i = 0; i < 4; i++) {
 8028e46:	3601      	adds	r6, #1
 8028e48:	2e03      	cmp	r6, #3
 8028e4a:	dc24      	bgt.n	8028e96 <is_valid_ip_or_domain+0x82>
            octet = atoi(ptr);
 8028e4c:	4620      	mov	r0, r4
 8028e4e:	f000 f8a3 	bl	8028f98 <atoi>
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8028e52:	28ff      	cmp	r0, #255	@ 0xff
 8028e54:	d821      	bhi.n	8028e9a <is_valid_ip_or_domain+0x86>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 8028e56:	212e      	movs	r1, #46	@ 0x2e
 8028e58:	4620      	mov	r0, r4
 8028e5a:	f002 fde8 	bl	802ba2e <strchr>
            if (ptr != NULL) ptr++;
 8028e5e:	4604      	mov	r4, r0
 8028e60:	2800      	cmp	r0, #0
 8028e62:	d0f0      	beq.n	8028e46 <is_valid_ip_or_domain+0x32>
 8028e64:	3401      	adds	r4, #1
 8028e66:	e7ee      	b.n	8028e46 <is_valid_ip_or_domain+0x32>
        for (int i = 0; i < 4; i++) {
 8028e68:	2600      	movs	r6, #0
 8028e6a:	e7ed      	b.n	8028e48 <is_valid_ip_or_domain+0x34>

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
    for (int i = 0; host[i] != '\0'; i++) {
        if (host[i] == '.') {
            dot_count++;
 8028e6c:	3501      	adds	r5, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8028e6e:	3201      	adds	r2, #1
 8028e70:	5ca3      	ldrb	r3, [r4, r2]
 8028e72:	b163      	cbz	r3, 8028e8e <is_valid_ip_or_domain+0x7a>
        if (host[i] == '.') {
 8028e74:	2b2e      	cmp	r3, #46	@ 0x2e
 8028e76:	d0f9      	beq.n	8028e6c <is_valid_ip_or_domain+0x58>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 8028e78:	4909      	ldr	r1, [pc, #36]	@ (8028ea0 <is_valid_ip_or_domain+0x8c>)
 8028e7a:	5cc9      	ldrb	r1, [r1, r3]
 8028e7c:	f011 0f07 	tst.w	r1, #7
 8028e80:	d1f5      	bne.n	8028e6e <is_valid_ip_or_domain+0x5a>
 8028e82:	2b2d      	cmp	r3, #45	@ 0x2d
 8028e84:	d0f3      	beq.n	8028e6e <is_valid_ip_or_domain+0x5a>
            return 0;  // Некорректный символ для доменного имени
 8028e86:	2500      	movs	r5, #0
 8028e88:	e005      	b.n	8028e96 <is_valid_ip_or_domain+0x82>
 8028e8a:	462a      	mov	r2, r5
 8028e8c:	e7f0      	b.n	8028e70 <is_valid_ip_or_domain+0x5c>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 8028e8e:	2d00      	cmp	r5, #0
 8028e90:	bfd4      	ite	le
 8028e92:	2500      	movle	r5, #0
 8028e94:	2501      	movgt	r5, #1
}
 8028e96:	4628      	mov	r0, r5
 8028e98:	bd70      	pop	{r4, r5, r6, pc}
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8028e9a:	2500      	movs	r5, #0
 8028e9c:	e7fb      	b.n	8028e96 <is_valid_ip_or_domain+0x82>
 8028e9e:	bf00      	nop
 8028ea0:	0803aabd 	.word	0x0803aabd

08028ea4 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8028ea4:	b510      	push	{r4, lr}
 8028ea6:	4604      	mov	r4, r0
    int port = atoi(port_str);
 8028ea8:	f000 f876 	bl	8028f98 <atoi>
    if (port < 1 || port > MAX_PORT) {
 8028eac:	3801      	subs	r0, #1
 8028eae:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8028eb2:	4298      	cmp	r0, r3
 8028eb4:	d80a      	bhi.n	8028ecc <is_valid_port+0x28>
        return 0; // Порт вне диапазона
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
 8028eb6:	7823      	ldrb	r3, [r4, #0]
 8028eb8:	b133      	cbz	r3, 8028ec8 <is_valid_port+0x24>
        if (!isdigit(*port_str)) {
 8028eba:	4a06      	ldr	r2, [pc, #24]	@ (8028ed4 <is_valid_port+0x30>)
 8028ebc:	5cd3      	ldrb	r3, [r2, r3]
 8028ebe:	f013 0f04 	tst.w	r3, #4
 8028ec2:	d005      	beq.n	8028ed0 <is_valid_port+0x2c>
            return 0;
        }
        port_str++;
 8028ec4:	3401      	adds	r4, #1
 8028ec6:	e7f6      	b.n	8028eb6 <is_valid_port+0x12>
    }
    return 1;
 8028ec8:	2001      	movs	r0, #1
 8028eca:	e000      	b.n	8028ece <is_valid_port+0x2a>
        return 0; // Порт вне диапазона
 8028ecc:	2000      	movs	r0, #0
}
 8028ece:	bd10      	pop	{r4, pc}
            return 0;
 8028ed0:	2000      	movs	r0, #0
 8028ed2:	e7fc      	b.n	8028ece <is_valid_port+0x2a>
 8028ed4:	0803aabd 	.word	0x0803aabd

08028ed8 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 8028ed8:	b570      	push	{r4, r5, r6, lr}
 8028eda:	b0c0      	sub	sp, #256	@ 0x100
 8028edc:	4604      	mov	r4, r0
    if (!has_mqtt_prefix(url)) {
 8028ede:	f7ff ff8d 	bl	8028dfc <has_mqtt_prefix>
 8028ee2:	b1d0      	cbz	r0, 8028f1a <is_valid_mqtt_url+0x42>
        printf("Error: URL does not start with 'mqtt://'\n");
        return -1;
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8028ee4:	3407      	adds	r4, #7
    const char *colon = strchr(host_start, ':');
 8028ee6:	213a      	movs	r1, #58	@ 0x3a
 8028ee8:	4620      	mov	r0, r4
 8028eea:	f002 fda0 	bl	802ba2e <strchr>
    if (!colon) {
 8028eee:	4606      	mov	r6, r0
 8028ef0:	b1c8      	cbz	r0, 8028f26 <is_valid_mqtt_url+0x4e>
        return -2;
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 8028ef2:	1b05      	subs	r5, r0, r4
 8028ef4:	462a      	mov	r2, r5
 8028ef6:	4621      	mov	r1, r4
 8028ef8:	4668      	mov	r0, sp
 8028efa:	f002 fdc8 	bl	802ba8e <strncpy>
    host[colon - host_start] = '\0';
 8028efe:	2300      	movs	r3, #0
 8028f00:	f80d 3005 	strb.w	r3, [sp, r5]

    if (!is_valid_ip_or_domain(host)) {
 8028f04:	4668      	mov	r0, sp
 8028f06:	f7ff ff85 	bl	8028e14 <is_valid_ip_or_domain>
 8028f0a:	b190      	cbz	r0, 8028f32 <is_valid_mqtt_url+0x5a>
        return -3;
    }

    // Проверить порт
    const char *port_str = colon + 1;
    if (!is_valid_port(port_str)) {
 8028f0c:	1c70      	adds	r0, r6, #1
 8028f0e:	f7ff ffc9 	bl	8028ea4 <is_valid_port>
 8028f12:	b1a0      	cbz	r0, 8028f3e <is_valid_mqtt_url+0x66>
        printf("Error: Invalid port number\n");
        return -4;
    }

    return 0; // URL прошел все проверки
 8028f14:	2000      	movs	r0, #0
}
 8028f16:	b040      	add	sp, #256	@ 0x100
 8028f18:	bd70      	pop	{r4, r5, r6, pc}
        printf("Error: URL does not start with 'mqtt://'\n");
 8028f1a:	480c      	ldr	r0, [pc, #48]	@ (8028f4c <is_valid_mqtt_url+0x74>)
 8028f1c:	f002 f818 	bl	802af50 <puts>
        return -1;
 8028f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028f24:	e7f7      	b.n	8028f16 <is_valid_mqtt_url+0x3e>
        printf("Error: URL does not contain a port separator ':'\n");
 8028f26:	480a      	ldr	r0, [pc, #40]	@ (8028f50 <is_valid_mqtt_url+0x78>)
 8028f28:	f002 f812 	bl	802af50 <puts>
        return -2;
 8028f2c:	f06f 0001 	mvn.w	r0, #1
 8028f30:	e7f1      	b.n	8028f16 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid domain or IP address\n");
 8028f32:	4808      	ldr	r0, [pc, #32]	@ (8028f54 <is_valid_mqtt_url+0x7c>)
 8028f34:	f002 f80c 	bl	802af50 <puts>
        return -3;
 8028f38:	f06f 0002 	mvn.w	r0, #2
 8028f3c:	e7eb      	b.n	8028f16 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid port number\n");
 8028f3e:	4806      	ldr	r0, [pc, #24]	@ (8028f58 <is_valid_mqtt_url+0x80>)
 8028f40:	f002 f806 	bl	802af50 <puts>
        return -4;
 8028f44:	f06f 0003 	mvn.w	r0, #3
 8028f48:	e7e5      	b.n	8028f16 <is_valid_mqtt_url+0x3e>
 8028f4a:	bf00      	nop
 8028f4c:	0803a624 	.word	0x0803a624
 8028f50:	0803a650 	.word	0x0803a650
 8028f54:	0803a684 	.word	0x0803a684
 8028f58:	0803a6a8 	.word	0x0803a6a8

08028f5c <__assert_func>:
 8028f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028f5e:	4614      	mov	r4, r2
 8028f60:	461a      	mov	r2, r3
 8028f62:	4b09      	ldr	r3, [pc, #36]	@ (8028f88 <__assert_func+0x2c>)
 8028f64:	681b      	ldr	r3, [r3, #0]
 8028f66:	4605      	mov	r5, r0
 8028f68:	68d8      	ldr	r0, [r3, #12]
 8028f6a:	b954      	cbnz	r4, 8028f82 <__assert_func+0x26>
 8028f6c:	4b07      	ldr	r3, [pc, #28]	@ (8028f8c <__assert_func+0x30>)
 8028f6e:	461c      	mov	r4, r3
 8028f70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028f74:	9100      	str	r1, [sp, #0]
 8028f76:	462b      	mov	r3, r5
 8028f78:	4905      	ldr	r1, [pc, #20]	@ (8028f90 <__assert_func+0x34>)
 8028f7a:	f000 f811 	bl	8028fa0 <fiprintf>
 8028f7e:	f003 ffdf 	bl	802cf40 <abort>
 8028f82:	4b04      	ldr	r3, [pc, #16]	@ (8028f94 <__assert_func+0x38>)
 8028f84:	e7f4      	b.n	8028f70 <__assert_func+0x14>
 8028f86:	bf00      	nop
 8028f88:	20000254 	.word	0x20000254
 8028f8c:	0803a6fe 	.word	0x0803a6fe
 8028f90:	0803a6d0 	.word	0x0803a6d0
 8028f94:	0803a6c3 	.word	0x0803a6c3

08028f98 <atoi>:
 8028f98:	220a      	movs	r2, #10
 8028f9a:	2100      	movs	r1, #0
 8028f9c:	f002 b8b6 	b.w	802b10c <strtol>

08028fa0 <fiprintf>:
 8028fa0:	b40e      	push	{r1, r2, r3}
 8028fa2:	b503      	push	{r0, r1, lr}
 8028fa4:	4601      	mov	r1, r0
 8028fa6:	ab03      	add	r3, sp, #12
 8028fa8:	4805      	ldr	r0, [pc, #20]	@ (8028fc0 <fiprintf+0x20>)
 8028faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8028fae:	6800      	ldr	r0, [r0, #0]
 8028fb0:	9301      	str	r3, [sp, #4]
 8028fb2:	f001 fab7 	bl	802a524 <_vfiprintf_r>
 8028fb6:	b002      	add	sp, #8
 8028fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8028fbc:	b003      	add	sp, #12
 8028fbe:	4770      	bx	lr
 8028fc0:	20000254 	.word	0x20000254

08028fc4 <printf>:
 8028fc4:	b40f      	push	{r0, r1, r2, r3}
 8028fc6:	b507      	push	{r0, r1, r2, lr}
 8028fc8:	4906      	ldr	r1, [pc, #24]	@ (8028fe4 <printf+0x20>)
 8028fca:	ab04      	add	r3, sp, #16
 8028fcc:	6808      	ldr	r0, [r1, #0]
 8028fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8028fd2:	6881      	ldr	r1, [r0, #8]
 8028fd4:	9301      	str	r3, [sp, #4]
 8028fd6:	f000 f807 	bl	8028fe8 <_vfprintf_r>
 8028fda:	b003      	add	sp, #12
 8028fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8028fe0:	b004      	add	sp, #16
 8028fe2:	4770      	bx	lr
 8028fe4:	20000254 	.word	0x20000254

08028fe8 <_vfprintf_r>:
 8028fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fec:	b0d3      	sub	sp, #332	@ 0x14c
 8028fee:	468b      	mov	fp, r1
 8028ff0:	4690      	mov	r8, r2
 8028ff2:	461c      	mov	r4, r3
 8028ff4:	461e      	mov	r6, r3
 8028ff6:	9003      	str	r0, [sp, #12]
 8028ff8:	f003 fe90 	bl	802cd1c <_localeconv_r>
 8028ffc:	6803      	ldr	r3, [r0, #0]
 8028ffe:	9316      	str	r3, [sp, #88]	@ 0x58
 8029000:	4618      	mov	r0, r3
 8029002:	f7e7 f94d 	bl	80102a0 <strlen>
 8029006:	9b03      	ldr	r3, [sp, #12]
 8029008:	900d      	str	r0, [sp, #52]	@ 0x34
 802900a:	b123      	cbz	r3, 8029016 <_vfprintf_r+0x2e>
 802900c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802900e:	b913      	cbnz	r3, 8029016 <_vfprintf_r+0x2e>
 8029010:	9803      	ldr	r0, [sp, #12]
 8029012:	f002 fa4f 	bl	802b4b4 <__sinit>
 8029016:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802901a:	07da      	lsls	r2, r3, #31
 802901c:	d407      	bmi.n	802902e <_vfprintf_r+0x46>
 802901e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029022:	059b      	lsls	r3, r3, #22
 8029024:	d403      	bmi.n	802902e <_vfprintf_r+0x46>
 8029026:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802902a:	f003 ff22 	bl	802ce72 <__retarget_lock_acquire_recursive>
 802902e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8029032:	049f      	lsls	r7, r3, #18
 8029034:	d409      	bmi.n	802904a <_vfprintf_r+0x62>
 8029036:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802903a:	f8ab 300c 	strh.w	r3, [fp, #12]
 802903e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8029042:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8029046:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802904a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802904e:	071d      	lsls	r5, r3, #28
 8029050:	d502      	bpl.n	8029058 <_vfprintf_r+0x70>
 8029052:	f8db 3010 	ldr.w	r3, [fp, #16]
 8029056:	b9c3      	cbnz	r3, 802908a <_vfprintf_r+0xa2>
 8029058:	9803      	ldr	r0, [sp, #12]
 802905a:	4659      	mov	r1, fp
 802905c:	f002 fbe6 	bl	802b82c <__swsetup_r>
 8029060:	b198      	cbz	r0, 802908a <_vfprintf_r+0xa2>
 8029062:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8029066:	07d8      	lsls	r0, r3, #31
 8029068:	d506      	bpl.n	8029078 <_vfprintf_r+0x90>
 802906a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802906e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029070:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8029072:	b053      	add	sp, #332	@ 0x14c
 8029074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029078:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802907c:	0599      	lsls	r1, r3, #22
 802907e:	d4f4      	bmi.n	802906a <_vfprintf_r+0x82>
 8029080:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8029084:	f003 fef7 	bl	802ce76 <__retarget_lock_release_recursive>
 8029088:	e7ef      	b.n	802906a <_vfprintf_r+0x82>
 802908a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802908e:	f003 021a 	and.w	r2, r3, #26
 8029092:	2a0a      	cmp	r2, #10
 8029094:	d116      	bne.n	80290c4 <_vfprintf_r+0xdc>
 8029096:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 802909a:	2a00      	cmp	r2, #0
 802909c:	db12      	blt.n	80290c4 <_vfprintf_r+0xdc>
 802909e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 80290a2:	07d2      	lsls	r2, r2, #31
 80290a4:	d405      	bmi.n	80290b2 <_vfprintf_r+0xca>
 80290a6:	059b      	lsls	r3, r3, #22
 80290a8:	d403      	bmi.n	80290b2 <_vfprintf_r+0xca>
 80290aa:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80290ae:	f003 fee2 	bl	802ce76 <__retarget_lock_release_recursive>
 80290b2:	9803      	ldr	r0, [sp, #12]
 80290b4:	4623      	mov	r3, r4
 80290b6:	4642      	mov	r2, r8
 80290b8:	4659      	mov	r1, fp
 80290ba:	b053      	add	sp, #332	@ 0x14c
 80290bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80290c0:	f001 b9be 	b.w	802a440 <__sbprintf>
 80290c4:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8029310 <_vfprintf_r+0x328>
 80290c8:	2300      	movs	r3, #0
 80290ca:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80290ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80290d2:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80290d6:	ac29      	add	r4, sp, #164	@ 0xa4
 80290d8:	9426      	str	r4, [sp, #152]	@ 0x98
 80290da:	9304      	str	r3, [sp, #16]
 80290dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80290de:	9312      	str	r3, [sp, #72]	@ 0x48
 80290e0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80290e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80290e4:	4643      	mov	r3, r8
 80290e6:	461d      	mov	r5, r3
 80290e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80290ec:	b10a      	cbz	r2, 80290f2 <_vfprintf_r+0x10a>
 80290ee:	2a25      	cmp	r2, #37	@ 0x25
 80290f0:	d1f9      	bne.n	80290e6 <_vfprintf_r+0xfe>
 80290f2:	ebb5 0708 	subs.w	r7, r5, r8
 80290f6:	d00d      	beq.n	8029114 <_vfprintf_r+0x12c>
 80290f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80290fa:	443b      	add	r3, r7
 80290fc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80290fe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029100:	3301      	adds	r3, #1
 8029102:	2b07      	cmp	r3, #7
 8029104:	e9c4 8700 	strd	r8, r7, [r4]
 8029108:	9327      	str	r3, [sp, #156]	@ 0x9c
 802910a:	dc75      	bgt.n	80291f8 <_vfprintf_r+0x210>
 802910c:	3408      	adds	r4, #8
 802910e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029110:	443b      	add	r3, r7
 8029112:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029114:	782b      	ldrb	r3, [r5, #0]
 8029116:	2b00      	cmp	r3, #0
 8029118:	f001 814f 	beq.w	802a3ba <_vfprintf_r+0x13d2>
 802911c:	2200      	movs	r2, #0
 802911e:	1c6b      	adds	r3, r5, #1
 8029120:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8029124:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8029128:	920e      	str	r2, [sp, #56]	@ 0x38
 802912a:	4615      	mov	r5, r2
 802912c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029130:	9206      	str	r2, [sp, #24]
 8029132:	930c      	str	r3, [sp, #48]	@ 0x30
 8029134:	9b06      	ldr	r3, [sp, #24]
 8029136:	3b20      	subs	r3, #32
 8029138:	2b5a      	cmp	r3, #90	@ 0x5a
 802913a:	f200 85aa 	bhi.w	8029c92 <_vfprintf_r+0xcaa>
 802913e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8029142:	009d      	.short	0x009d
 8029144:	05a805a8 	.word	0x05a805a8
 8029148:	05a800a5 	.word	0x05a800a5
 802914c:	05a805a8 	.word	0x05a805a8
 8029150:	05a80085 	.word	0x05a80085
 8029154:	00a805a8 	.word	0x00a805a8
 8029158:	05a800b2 	.word	0x05a800b2
 802915c:	00b400af 	.word	0x00b400af
 8029160:	00ce05a8 	.word	0x00ce05a8
 8029164:	00d100d1 	.word	0x00d100d1
 8029168:	00d100d1 	.word	0x00d100d1
 802916c:	00d100d1 	.word	0x00d100d1
 8029170:	00d100d1 	.word	0x00d100d1
 8029174:	05a800d1 	.word	0x05a800d1
 8029178:	05a805a8 	.word	0x05a805a8
 802917c:	05a805a8 	.word	0x05a805a8
 8029180:	05a805a8 	.word	0x05a805a8
 8029184:	05a80146 	.word	0x05a80146
 8029188:	011a0107 	.word	0x011a0107
 802918c:	01460146 	.word	0x01460146
 8029190:	05a80146 	.word	0x05a80146
 8029194:	05a805a8 	.word	0x05a805a8
 8029198:	00e205a8 	.word	0x00e205a8
 802919c:	05a805a8 	.word	0x05a805a8
 80291a0:	05a804a3 	.word	0x05a804a3
 80291a4:	05a805a8 	.word	0x05a805a8
 80291a8:	05a804ed 	.word	0x05a804ed
 80291ac:	05a8050e 	.word	0x05a8050e
 80291b0:	053005a8 	.word	0x053005a8
 80291b4:	05a805a8 	.word	0x05a805a8
 80291b8:	05a805a8 	.word	0x05a805a8
 80291bc:	05a805a8 	.word	0x05a805a8
 80291c0:	05a805a8 	.word	0x05a805a8
 80291c4:	05a80146 	.word	0x05a80146
 80291c8:	011c0107 	.word	0x011c0107
 80291cc:	01460146 	.word	0x01460146
 80291d0:	00ed0146 	.word	0x00ed0146
 80291d4:	0101011c 	.word	0x0101011c
 80291d8:	00fa05a8 	.word	0x00fa05a8
 80291dc:	048705a8 	.word	0x048705a8
 80291e0:	04dc04a5 	.word	0x04dc04a5
 80291e4:	05a80101 	.word	0x05a80101
 80291e8:	009b04ed 	.word	0x009b04ed
 80291ec:	05a80510 	.word	0x05a80510
 80291f0:	006505a8 	.word	0x006505a8
 80291f4:	009b05a8 	.word	0x009b05a8
 80291f8:	9803      	ldr	r0, [sp, #12]
 80291fa:	aa26      	add	r2, sp, #152	@ 0x98
 80291fc:	4659      	mov	r1, fp
 80291fe:	f001 f95f 	bl	802a4c0 <__sprint_r>
 8029202:	2800      	cmp	r0, #0
 8029204:	f040 814d 	bne.w	80294a2 <_vfprintf_r+0x4ba>
 8029208:	ac29      	add	r4, sp, #164	@ 0xa4
 802920a:	e780      	b.n	802910e <_vfprintf_r+0x126>
 802920c:	4b42      	ldr	r3, [pc, #264]	@ (8029318 <_vfprintf_r+0x330>)
 802920e:	9319      	str	r3, [sp, #100]	@ 0x64
 8029210:	f015 0320 	ands.w	r3, r5, #32
 8029214:	f000 84c8 	beq.w	8029ba8 <_vfprintf_r+0xbc0>
 8029218:	3607      	adds	r6, #7
 802921a:	f026 0307 	bic.w	r3, r6, #7
 802921e:	461a      	mov	r2, r3
 8029220:	685f      	ldr	r7, [r3, #4]
 8029222:	f852 6b08 	ldr.w	r6, [r2], #8
 8029226:	9207      	str	r2, [sp, #28]
 8029228:	07eb      	lsls	r3, r5, #31
 802922a:	d50a      	bpl.n	8029242 <_vfprintf_r+0x25a>
 802922c:	ea56 0307 	orrs.w	r3, r6, r7
 8029230:	d007      	beq.n	8029242 <_vfprintf_r+0x25a>
 8029232:	2330      	movs	r3, #48	@ 0x30
 8029234:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8029238:	9b06      	ldr	r3, [sp, #24]
 802923a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802923e:	f045 0502 	orr.w	r5, r5, #2
 8029242:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8029246:	2302      	movs	r3, #2
 8029248:	f000 bc2e 	b.w	8029aa8 <_vfprintf_r+0xac0>
 802924c:	9803      	ldr	r0, [sp, #12]
 802924e:	f003 fd65 	bl	802cd1c <_localeconv_r>
 8029252:	6843      	ldr	r3, [r0, #4]
 8029254:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029256:	4618      	mov	r0, r3
 8029258:	f7e7 f822 	bl	80102a0 <strlen>
 802925c:	9012      	str	r0, [sp, #72]	@ 0x48
 802925e:	9803      	ldr	r0, [sp, #12]
 8029260:	f003 fd5c 	bl	802cd1c <_localeconv_r>
 8029264:	6883      	ldr	r3, [r0, #8]
 8029266:	9309      	str	r3, [sp, #36]	@ 0x24
 8029268:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802926a:	b12b      	cbz	r3, 8029278 <_vfprintf_r+0x290>
 802926c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802926e:	b11b      	cbz	r3, 8029278 <_vfprintf_r+0x290>
 8029270:	781b      	ldrb	r3, [r3, #0]
 8029272:	b10b      	cbz	r3, 8029278 <_vfprintf_r+0x290>
 8029274:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8029278:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802927a:	e757      	b.n	802912c <_vfprintf_r+0x144>
 802927c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8029280:	2b00      	cmp	r3, #0
 8029282:	d1f9      	bne.n	8029278 <_vfprintf_r+0x290>
 8029284:	2320      	movs	r3, #32
 8029286:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802928a:	e7f5      	b.n	8029278 <_vfprintf_r+0x290>
 802928c:	f045 0501 	orr.w	r5, r5, #1
 8029290:	e7f2      	b.n	8029278 <_vfprintf_r+0x290>
 8029292:	f856 3b04 	ldr.w	r3, [r6], #4
 8029296:	930e      	str	r3, [sp, #56]	@ 0x38
 8029298:	2b00      	cmp	r3, #0
 802929a:	daed      	bge.n	8029278 <_vfprintf_r+0x290>
 802929c:	425b      	negs	r3, r3
 802929e:	930e      	str	r3, [sp, #56]	@ 0x38
 80292a0:	f045 0504 	orr.w	r5, r5, #4
 80292a4:	e7e8      	b.n	8029278 <_vfprintf_r+0x290>
 80292a6:	232b      	movs	r3, #43	@ 0x2b
 80292a8:	e7ed      	b.n	8029286 <_vfprintf_r+0x29e>
 80292aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80292ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80292b0:	9206      	str	r2, [sp, #24]
 80292b2:	2a2a      	cmp	r2, #42	@ 0x2a
 80292b4:	d10f      	bne.n	80292d6 <_vfprintf_r+0x2ee>
 80292b6:	f856 2b04 	ldr.w	r2, [r6], #4
 80292ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80292bc:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 80292c0:	e7da      	b.n	8029278 <_vfprintf_r+0x290>
 80292c2:	fb01 2909 	mla	r9, r1, r9, r2
 80292c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80292ca:	9206      	str	r2, [sp, #24]
 80292cc:	9a06      	ldr	r2, [sp, #24]
 80292ce:	3a30      	subs	r2, #48	@ 0x30
 80292d0:	2a09      	cmp	r2, #9
 80292d2:	d9f6      	bls.n	80292c2 <_vfprintf_r+0x2da>
 80292d4:	e72d      	b.n	8029132 <_vfprintf_r+0x14a>
 80292d6:	f04f 0900 	mov.w	r9, #0
 80292da:	210a      	movs	r1, #10
 80292dc:	e7f6      	b.n	80292cc <_vfprintf_r+0x2e4>
 80292de:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80292e2:	e7c9      	b.n	8029278 <_vfprintf_r+0x290>
 80292e4:	2200      	movs	r2, #0
 80292e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80292e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80292ea:	210a      	movs	r1, #10
 80292ec:	9a06      	ldr	r2, [sp, #24]
 80292ee:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80292f0:	3a30      	subs	r2, #48	@ 0x30
 80292f2:	fb01 2200 	mla	r2, r1, r0, r2
 80292f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80292f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80292fc:	9206      	str	r2, [sp, #24]
 80292fe:	3a30      	subs	r2, #48	@ 0x30
 8029300:	2a09      	cmp	r2, #9
 8029302:	d9f3      	bls.n	80292ec <_vfprintf_r+0x304>
 8029304:	e715      	b.n	8029132 <_vfprintf_r+0x14a>
 8029306:	f045 0508 	orr.w	r5, r5, #8
 802930a:	e7b5      	b.n	8029278 <_vfprintf_r+0x290>
 802930c:	f3af 8000 	nop.w
	...
 8029318:	0803a70f 	.word	0x0803a70f
 802931c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802931e:	781b      	ldrb	r3, [r3, #0]
 8029320:	2b68      	cmp	r3, #104	@ 0x68
 8029322:	bf01      	itttt	eq
 8029324:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8029326:	3301      	addeq	r3, #1
 8029328:	930c      	streq	r3, [sp, #48]	@ 0x30
 802932a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802932e:	bf18      	it	ne
 8029330:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8029334:	e7a0      	b.n	8029278 <_vfprintf_r+0x290>
 8029336:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029338:	781b      	ldrb	r3, [r3, #0]
 802933a:	2b6c      	cmp	r3, #108	@ 0x6c
 802933c:	d105      	bne.n	802934a <_vfprintf_r+0x362>
 802933e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029340:	3301      	adds	r3, #1
 8029342:	930c      	str	r3, [sp, #48]	@ 0x30
 8029344:	f045 0520 	orr.w	r5, r5, #32
 8029348:	e796      	b.n	8029278 <_vfprintf_r+0x290>
 802934a:	f045 0510 	orr.w	r5, r5, #16
 802934e:	e793      	b.n	8029278 <_vfprintf_r+0x290>
 8029350:	4632      	mov	r2, r6
 8029352:	f852 3b04 	ldr.w	r3, [r2], #4
 8029356:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802935a:	2300      	movs	r3, #0
 802935c:	9207      	str	r2, [sp, #28]
 802935e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8029362:	469a      	mov	sl, r3
 8029364:	f04f 0901 	mov.w	r9, #1
 8029368:	9310      	str	r3, [sp, #64]	@ 0x40
 802936a:	461f      	mov	r7, r3
 802936c:	9308      	str	r3, [sp, #32]
 802936e:	461e      	mov	r6, r3
 8029370:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8029374:	e1da      	b.n	802972c <_vfprintf_r+0x744>
 8029376:	f045 0510 	orr.w	r5, r5, #16
 802937a:	06af      	lsls	r7, r5, #26
 802937c:	d512      	bpl.n	80293a4 <_vfprintf_r+0x3bc>
 802937e:	3607      	adds	r6, #7
 8029380:	f026 0307 	bic.w	r3, r6, #7
 8029384:	461a      	mov	r2, r3
 8029386:	685f      	ldr	r7, [r3, #4]
 8029388:	f852 6b08 	ldr.w	r6, [r2], #8
 802938c:	9207      	str	r2, [sp, #28]
 802938e:	2f00      	cmp	r7, #0
 8029390:	da06      	bge.n	80293a0 <_vfprintf_r+0x3b8>
 8029392:	4276      	negs	r6, r6
 8029394:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8029398:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802939c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80293a0:	2301      	movs	r3, #1
 80293a2:	e384      	b.n	8029aae <_vfprintf_r+0xac6>
 80293a4:	4633      	mov	r3, r6
 80293a6:	06ee      	lsls	r6, r5, #27
 80293a8:	f853 7b04 	ldr.w	r7, [r3], #4
 80293ac:	9307      	str	r3, [sp, #28]
 80293ae:	d502      	bpl.n	80293b6 <_vfprintf_r+0x3ce>
 80293b0:	463e      	mov	r6, r7
 80293b2:	17ff      	asrs	r7, r7, #31
 80293b4:	e7eb      	b.n	802938e <_vfprintf_r+0x3a6>
 80293b6:	0668      	lsls	r0, r5, #25
 80293b8:	d503      	bpl.n	80293c2 <_vfprintf_r+0x3da>
 80293ba:	b23e      	sxth	r6, r7
 80293bc:	f347 37c0 	sbfx	r7, r7, #15, #1
 80293c0:	e7e5      	b.n	802938e <_vfprintf_r+0x3a6>
 80293c2:	05a9      	lsls	r1, r5, #22
 80293c4:	d5f4      	bpl.n	80293b0 <_vfprintf_r+0x3c8>
 80293c6:	b27e      	sxtb	r6, r7
 80293c8:	f347 17c0 	sbfx	r7, r7, #7, #1
 80293cc:	e7df      	b.n	802938e <_vfprintf_r+0x3a6>
 80293ce:	3607      	adds	r6, #7
 80293d0:	f026 0307 	bic.w	r3, r6, #7
 80293d4:	ecb3 7b02 	vldmia	r3!, {d7}
 80293d8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80293dc:	9307      	str	r3, [sp, #28]
 80293de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80293e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80293e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80293e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80293e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80293ea:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80293ee:	4b85      	ldr	r3, [pc, #532]	@ (8029604 <_vfprintf_r+0x61c>)
 80293f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80293f4:	f7e7 fbb2 	bl	8010b5c <__aeabi_dcmpun>
 80293f8:	bb10      	cbnz	r0, 8029440 <_vfprintf_r+0x458>
 80293fa:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80293fe:	4b81      	ldr	r3, [pc, #516]	@ (8029604 <_vfprintf_r+0x61c>)
 8029400:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8029404:	f7e7 fb8c 	bl	8010b20 <__aeabi_dcmple>
 8029408:	b9d0      	cbnz	r0, 8029440 <_vfprintf_r+0x458>
 802940a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802940e:	2200      	movs	r2, #0
 8029410:	2300      	movs	r3, #0
 8029412:	f7e7 fb7b 	bl	8010b0c <__aeabi_dcmplt>
 8029416:	b110      	cbz	r0, 802941e <_vfprintf_r+0x436>
 8029418:	232d      	movs	r3, #45	@ 0x2d
 802941a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802941e:	4a7a      	ldr	r2, [pc, #488]	@ (8029608 <_vfprintf_r+0x620>)
 8029420:	4b7a      	ldr	r3, [pc, #488]	@ (802960c <_vfprintf_r+0x624>)
 8029422:	9906      	ldr	r1, [sp, #24]
 8029424:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8029428:	2947      	cmp	r1, #71	@ 0x47
 802942a:	bfd4      	ite	le
 802942c:	4690      	movle	r8, r2
 802942e:	4698      	movgt	r8, r3
 8029430:	f04f 0a00 	mov.w	sl, #0
 8029434:	f04f 0903 	mov.w	r9, #3
 8029438:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802943c:	f000 bff8 	b.w	802a430 <_vfprintf_r+0x1448>
 8029440:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8029444:	4610      	mov	r0, r2
 8029446:	4619      	mov	r1, r3
 8029448:	f7e7 fb88 	bl	8010b5c <__aeabi_dcmpun>
 802944c:	4682      	mov	sl, r0
 802944e:	b140      	cbz	r0, 8029462 <_vfprintf_r+0x47a>
 8029450:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029452:	4a6f      	ldr	r2, [pc, #444]	@ (8029610 <_vfprintf_r+0x628>)
 8029454:	2b00      	cmp	r3, #0
 8029456:	bfbc      	itt	lt
 8029458:	232d      	movlt	r3, #45	@ 0x2d
 802945a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802945e:	4b6d      	ldr	r3, [pc, #436]	@ (8029614 <_vfprintf_r+0x62c>)
 8029460:	e7df      	b.n	8029422 <_vfprintf_r+0x43a>
 8029462:	9b06      	ldr	r3, [sp, #24]
 8029464:	2b61      	cmp	r3, #97	@ 0x61
 8029466:	d02e      	beq.n	80294c6 <_vfprintf_r+0x4de>
 8029468:	2b41      	cmp	r3, #65	@ 0x41
 802946a:	d12e      	bne.n	80294ca <_vfprintf_r+0x4e2>
 802946c:	2358      	movs	r3, #88	@ 0x58
 802946e:	2230      	movs	r2, #48	@ 0x30
 8029470:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8029474:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8029478:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802947c:	f045 0502 	orr.w	r5, r5, #2
 8029480:	f340 80ae 	ble.w	80295e0 <_vfprintf_r+0x5f8>
 8029484:	9803      	ldr	r0, [sp, #12]
 8029486:	f109 0101 	add.w	r1, r9, #1
 802948a:	f004 fd0f 	bl	802deac <_malloc_r>
 802948e:	4680      	mov	r8, r0
 8029490:	2800      	cmp	r0, #0
 8029492:	f040 80aa 	bne.w	80295ea <_vfprintf_r+0x602>
 8029496:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802949a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802949e:	f8ab 300c 	strh.w	r3, [fp, #12]
 80294a2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80294a6:	07d9      	lsls	r1, r3, #31
 80294a8:	d407      	bmi.n	80294ba <_vfprintf_r+0x4d2>
 80294aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80294ae:	059a      	lsls	r2, r3, #22
 80294b0:	d403      	bmi.n	80294ba <_vfprintf_r+0x4d2>
 80294b2:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80294b6:	f003 fcde 	bl	802ce76 <__retarget_lock_release_recursive>
 80294ba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80294be:	065b      	lsls	r3, r3, #25
 80294c0:	f57f add6 	bpl.w	8029070 <_vfprintf_r+0x88>
 80294c4:	e5d1      	b.n	802906a <_vfprintf_r+0x82>
 80294c6:	2378      	movs	r3, #120	@ 0x78
 80294c8:	e7d1      	b.n	802946e <_vfprintf_r+0x486>
 80294ca:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80294ce:	f000 808e 	beq.w	80295ee <_vfprintf_r+0x606>
 80294d2:	9b06      	ldr	r3, [sp, #24]
 80294d4:	f023 0320 	bic.w	r3, r3, #32
 80294d8:	2b47      	cmp	r3, #71	@ 0x47
 80294da:	d105      	bne.n	80294e8 <_vfprintf_r+0x500>
 80294dc:	f1b9 0f00 	cmp.w	r9, #0
 80294e0:	d102      	bne.n	80294e8 <_vfprintf_r+0x500>
 80294e2:	46ca      	mov	sl, r9
 80294e4:	f04f 0901 	mov.w	r9, #1
 80294e8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80294ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80294ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80294f0:	2b00      	cmp	r3, #0
 80294f2:	da7f      	bge.n	80295f4 <_vfprintf_r+0x60c>
 80294f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80294f6:	9314      	str	r3, [sp, #80]	@ 0x50
 80294f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80294fa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80294fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8029500:	232d      	movs	r3, #45	@ 0x2d
 8029502:	931c      	str	r3, [sp, #112]	@ 0x70
 8029504:	9b06      	ldr	r3, [sp, #24]
 8029506:	f023 0320 	bic.w	r3, r3, #32
 802950a:	2b41      	cmp	r3, #65	@ 0x41
 802950c:	9308      	str	r3, [sp, #32]
 802950e:	f040 81e7 	bne.w	80298e0 <_vfprintf_r+0x8f8>
 8029512:	a820      	add	r0, sp, #128	@ 0x80
 8029514:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8029518:	f003 fcd2 	bl	802cec0 <frexp>
 802951c:	2200      	movs	r2, #0
 802951e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8029522:	ec51 0b10 	vmov	r0, r1, d0
 8029526:	f7e7 f87f 	bl	8010628 <__aeabi_dmul>
 802952a:	4602      	mov	r2, r0
 802952c:	460b      	mov	r3, r1
 802952e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8029532:	2200      	movs	r2, #0
 8029534:	2300      	movs	r3, #0
 8029536:	f7e7 fadf 	bl	8010af8 <__aeabi_dcmpeq>
 802953a:	b108      	cbz	r0, 8029540 <_vfprintf_r+0x558>
 802953c:	2301      	movs	r3, #1
 802953e:	9320      	str	r3, [sp, #128]	@ 0x80
 8029540:	4a35      	ldr	r2, [pc, #212]	@ (8029618 <_vfprintf_r+0x630>)
 8029542:	4b36      	ldr	r3, [pc, #216]	@ (802961c <_vfprintf_r+0x634>)
 8029544:	9906      	ldr	r1, [sp, #24]
 8029546:	2961      	cmp	r1, #97	@ 0x61
 8029548:	bf18      	it	ne
 802954a:	461a      	movne	r2, r3
 802954c:	9210      	str	r2, [sp, #64]	@ 0x40
 802954e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 8029552:	4646      	mov	r6, r8
 8029554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029558:	4b31      	ldr	r3, [pc, #196]	@ (8029620 <_vfprintf_r+0x638>)
 802955a:	2200      	movs	r2, #0
 802955c:	f7e7 f864 	bl	8010628 <__aeabi_dmul>
 8029560:	4602      	mov	r2, r0
 8029562:	460b      	mov	r3, r1
 8029564:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8029568:	f7e7 fb0e 	bl	8010b88 <__aeabi_d2iz>
 802956c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802956e:	f7e6 fff1 	bl	8010554 <__aeabi_i2d>
 8029572:	4602      	mov	r2, r0
 8029574:	460b      	mov	r3, r1
 8029576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802957a:	f7e6 fe9d 	bl	80102b8 <__aeabi_dsub>
 802957e:	4602      	mov	r2, r0
 8029580:	460b      	mov	r3, r1
 8029582:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8029586:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029588:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802958a:	5c9b      	ldrb	r3, [r3, r2]
 802958c:	f806 3b01 	strb.w	r3, [r6], #1
 8029590:	1c7a      	adds	r2, r7, #1
 8029592:	d006      	beq.n	80295a2 <_vfprintf_r+0x5ba>
 8029594:	1e7b      	subs	r3, r7, #1
 8029596:	931d      	str	r3, [sp, #116]	@ 0x74
 8029598:	2200      	movs	r2, #0
 802959a:	2300      	movs	r3, #0
 802959c:	f7e7 faac 	bl	8010af8 <__aeabi_dcmpeq>
 80295a0:	b370      	cbz	r0, 8029600 <_vfprintf_r+0x618>
 80295a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80295a6:	4b1f      	ldr	r3, [pc, #124]	@ (8029624 <_vfprintf_r+0x63c>)
 80295a8:	2200      	movs	r2, #0
 80295aa:	f7e7 facd 	bl	8010b48 <__aeabi_dcmpgt>
 80295ae:	2800      	cmp	r0, #0
 80295b0:	d13a      	bne.n	8029628 <_vfprintf_r+0x640>
 80295b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80295b6:	4b1b      	ldr	r3, [pc, #108]	@ (8029624 <_vfprintf_r+0x63c>)
 80295b8:	2200      	movs	r2, #0
 80295ba:	f7e7 fa9d 	bl	8010af8 <__aeabi_dcmpeq>
 80295be:	b110      	cbz	r0, 80295c6 <_vfprintf_r+0x5de>
 80295c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80295c2:	07db      	lsls	r3, r3, #31
 80295c4:	d430      	bmi.n	8029628 <_vfprintf_r+0x640>
 80295c6:	4633      	mov	r3, r6
 80295c8:	19f1      	adds	r1, r6, r7
 80295ca:	2030      	movs	r0, #48	@ 0x30
 80295cc:	1aca      	subs	r2, r1, r3
 80295ce:	2a00      	cmp	r2, #0
 80295d0:	f280 8183 	bge.w	80298da <_vfprintf_r+0x8f2>
 80295d4:	1c7b      	adds	r3, r7, #1
 80295d6:	3701      	adds	r7, #1
 80295d8:	bfb8      	it	lt
 80295da:	2300      	movlt	r3, #0
 80295dc:	441e      	add	r6, r3
 80295de:	e037      	b.n	8029650 <_vfprintf_r+0x668>
 80295e0:	f04f 0a00 	mov.w	sl, #0
 80295e4:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 80295e8:	e77e      	b.n	80294e8 <_vfprintf_r+0x500>
 80295ea:	4682      	mov	sl, r0
 80295ec:	e77c      	b.n	80294e8 <_vfprintf_r+0x500>
 80295ee:	f04f 0906 	mov.w	r9, #6
 80295f2:	e779      	b.n	80294e8 <_vfprintf_r+0x500>
 80295f4:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 80295f8:	2300      	movs	r3, #0
 80295fa:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80295fe:	e780      	b.n	8029502 <_vfprintf_r+0x51a>
 8029600:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8029602:	e7a7      	b.n	8029554 <_vfprintf_r+0x56c>
 8029604:	7fefffff 	.word	0x7fefffff
 8029608:	0803a6ff 	.word	0x0803a6ff
 802960c:	0803a703 	.word	0x0803a703
 8029610:	0803a707 	.word	0x0803a707
 8029614:	0803a70b 	.word	0x0803a70b
 8029618:	0803a70f 	.word	0x0803a70f
 802961c:	0803a720 	.word	0x0803a720
 8029620:	40300000 	.word	0x40300000
 8029624:	3fe00000 	.word	0x3fe00000
 8029628:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802962a:	9624      	str	r6, [sp, #144]	@ 0x90
 802962c:	7bd9      	ldrb	r1, [r3, #15]
 802962e:	2030      	movs	r0, #48	@ 0x30
 8029630:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8029632:	1e53      	subs	r3, r2, #1
 8029634:	9324      	str	r3, [sp, #144]	@ 0x90
 8029636:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802963a:	428b      	cmp	r3, r1
 802963c:	f000 814a 	beq.w	80298d4 <_vfprintf_r+0x8ec>
 8029640:	2b39      	cmp	r3, #57	@ 0x39
 8029642:	bf0b      	itete	eq
 8029644:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8029646:	3301      	addne	r3, #1
 8029648:	7a9b      	ldrbeq	r3, [r3, #10]
 802964a:	b2db      	uxtbne	r3, r3
 802964c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8029650:	eba6 0308 	sub.w	r3, r6, r8
 8029654:	9304      	str	r3, [sp, #16]
 8029656:	9b08      	ldr	r3, [sp, #32]
 8029658:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802965a:	2b47      	cmp	r3, #71	@ 0x47
 802965c:	f040 8189 	bne.w	8029972 <_vfprintf_r+0x98a>
 8029660:	1cf1      	adds	r1, r6, #3
 8029662:	db02      	blt.n	802966a <_vfprintf_r+0x682>
 8029664:	45b1      	cmp	r9, r6
 8029666:	f280 81a7 	bge.w	80299b8 <_vfprintf_r+0x9d0>
 802966a:	9b06      	ldr	r3, [sp, #24]
 802966c:	3b02      	subs	r3, #2
 802966e:	9306      	str	r3, [sp, #24]
 8029670:	9906      	ldr	r1, [sp, #24]
 8029672:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8029676:	f021 0120 	bic.w	r1, r1, #32
 802967a:	2941      	cmp	r1, #65	@ 0x41
 802967c:	bf08      	it	eq
 802967e:	320f      	addeq	r2, #15
 8029680:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8029684:	bf06      	itte	eq
 8029686:	b2d2      	uxtbeq	r2, r2
 8029688:	2101      	moveq	r1, #1
 802968a:	2100      	movne	r1, #0
 802968c:	2b00      	cmp	r3, #0
 802968e:	9320      	str	r3, [sp, #128]	@ 0x80
 8029690:	bfb8      	it	lt
 8029692:	f1c6 0301 	rsblt	r3, r6, #1
 8029696:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802969a:	bfb4      	ite	lt
 802969c:	222d      	movlt	r2, #45	@ 0x2d
 802969e:	222b      	movge	r2, #43	@ 0x2b
 80296a0:	2b09      	cmp	r3, #9
 80296a2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 80296a6:	f340 817a 	ble.w	802999e <_vfprintf_r+0x9b6>
 80296aa:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80296ae:	270a      	movs	r7, #10
 80296b0:	4602      	mov	r2, r0
 80296b2:	fbb3 f6f7 	udiv	r6, r3, r7
 80296b6:	fb07 3116 	mls	r1, r7, r6, r3
 80296ba:	3130      	adds	r1, #48	@ 0x30
 80296bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80296c0:	4619      	mov	r1, r3
 80296c2:	2963      	cmp	r1, #99	@ 0x63
 80296c4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 80296c8:	4633      	mov	r3, r6
 80296ca:	dcf1      	bgt.n	80296b0 <_vfprintf_r+0x6c8>
 80296cc:	3330      	adds	r3, #48	@ 0x30
 80296ce:	1e91      	subs	r1, r2, #2
 80296d0:	f800 3c01 	strb.w	r3, [r0, #-1]
 80296d4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 80296d8:	460b      	mov	r3, r1
 80296da:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80296de:	4283      	cmp	r3, r0
 80296e0:	f0c0 8158 	bcc.w	8029994 <_vfprintf_r+0x9ac>
 80296e4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 80296e8:	1a9b      	subs	r3, r3, r2
 80296ea:	4281      	cmp	r1, r0
 80296ec:	bf88      	it	hi
 80296ee:	2300      	movhi	r3, #0
 80296f0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80296f4:	441a      	add	r2, r3
 80296f6:	ab22      	add	r3, sp, #136	@ 0x88
 80296f8:	1ad3      	subs	r3, r2, r3
 80296fa:	9a04      	ldr	r2, [sp, #16]
 80296fc:	9318      	str	r3, [sp, #96]	@ 0x60
 80296fe:	2a01      	cmp	r2, #1
 8029700:	eb03 0902 	add.w	r9, r3, r2
 8029704:	dc01      	bgt.n	802970a <_vfprintf_r+0x722>
 8029706:	07ea      	lsls	r2, r5, #31
 8029708:	d501      	bpl.n	802970e <_vfprintf_r+0x726>
 802970a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802970c:	4499      	add	r9, r3
 802970e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8029712:	2700      	movs	r7, #0
 8029714:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8029718:	9311      	str	r3, [sp, #68]	@ 0x44
 802971a:	9708      	str	r7, [sp, #32]
 802971c:	463e      	mov	r6, r7
 802971e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029720:	2b00      	cmp	r3, #0
 8029722:	f040 8191 	bne.w	8029a48 <_vfprintf_r+0xa60>
 8029726:	2300      	movs	r3, #0
 8029728:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802972a:	9310      	str	r3, [sp, #64]	@ 0x40
 802972c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802972e:	454b      	cmp	r3, r9
 8029730:	bfb8      	it	lt
 8029732:	464b      	movlt	r3, r9
 8029734:	9311      	str	r3, [sp, #68]	@ 0x44
 8029736:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802973a:	b113      	cbz	r3, 8029742 <_vfprintf_r+0x75a>
 802973c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802973e:	3301      	adds	r3, #1
 8029740:	9311      	str	r3, [sp, #68]	@ 0x44
 8029742:	f015 0302 	ands.w	r3, r5, #2
 8029746:	931c      	str	r3, [sp, #112]	@ 0x70
 8029748:	bf1e      	ittt	ne
 802974a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802974c:	3302      	addne	r3, #2
 802974e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8029750:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8029754:	931d      	str	r3, [sp, #116]	@ 0x74
 8029756:	d122      	bne.n	802979e <_vfprintf_r+0x7b6>
 8029758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802975a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802975c:	1a9b      	subs	r3, r3, r2
 802975e:	2b00      	cmp	r3, #0
 8029760:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029762:	dd1c      	ble.n	802979e <_vfprintf_r+0x7b6>
 8029764:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8029766:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802976a:	2810      	cmp	r0, #16
 802976c:	489f      	ldr	r0, [pc, #636]	@ (80299ec <_vfprintf_r+0xa04>)
 802976e:	6020      	str	r0, [r4, #0]
 8029770:	f102 0201 	add.w	r2, r2, #1
 8029774:	f104 0108 	add.w	r1, r4, #8
 8029778:	f300 8297 	bgt.w	8029caa <_vfprintf_r+0xcc2>
 802977c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802977e:	6060      	str	r0, [r4, #4]
 8029780:	4403      	add	r3, r0
 8029782:	2a07      	cmp	r2, #7
 8029784:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8029788:	f340 82a4 	ble.w	8029cd4 <_vfprintf_r+0xcec>
 802978c:	9803      	ldr	r0, [sp, #12]
 802978e:	aa26      	add	r2, sp, #152	@ 0x98
 8029790:	4659      	mov	r1, fp
 8029792:	f000 fe95 	bl	802a4c0 <__sprint_r>
 8029796:	2800      	cmp	r0, #0
 8029798:	f040 85ed 	bne.w	802a376 <_vfprintf_r+0x138e>
 802979c:	ac29      	add	r4, sp, #164	@ 0xa4
 802979e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 80297a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80297a4:	b16a      	cbz	r2, 80297c2 <_vfprintf_r+0x7da>
 80297a6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 80297aa:	6022      	str	r2, [r4, #0]
 80297ac:	2201      	movs	r2, #1
 80297ae:	4413      	add	r3, r2
 80297b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80297b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80297b4:	6062      	str	r2, [r4, #4]
 80297b6:	4413      	add	r3, r2
 80297b8:	2b07      	cmp	r3, #7
 80297ba:	9327      	str	r3, [sp, #156]	@ 0x9c
 80297bc:	f300 828c 	bgt.w	8029cd8 <_vfprintf_r+0xcf0>
 80297c0:	3408      	adds	r4, #8
 80297c2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80297c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80297c6:	b162      	cbz	r2, 80297e2 <_vfprintf_r+0x7fa>
 80297c8:	aa1f      	add	r2, sp, #124	@ 0x7c
 80297ca:	6022      	str	r2, [r4, #0]
 80297cc:	2202      	movs	r2, #2
 80297ce:	4413      	add	r3, r2
 80297d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80297d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80297d4:	6062      	str	r2, [r4, #4]
 80297d6:	3301      	adds	r3, #1
 80297d8:	2b07      	cmp	r3, #7
 80297da:	9327      	str	r3, [sp, #156]	@ 0x9c
 80297dc:	f300 8286 	bgt.w	8029cec <_vfprintf_r+0xd04>
 80297e0:	3408      	adds	r4, #8
 80297e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80297e4:	2b80      	cmp	r3, #128	@ 0x80
 80297e6:	d122      	bne.n	802982e <_vfprintf_r+0x846>
 80297e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80297ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80297ec:	1a9b      	subs	r3, r3, r2
 80297ee:	2b00      	cmp	r3, #0
 80297f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80297f2:	dd1c      	ble.n	802982e <_vfprintf_r+0x846>
 80297f4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80297f6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80297fa:	2810      	cmp	r0, #16
 80297fc:	487c      	ldr	r0, [pc, #496]	@ (80299f0 <_vfprintf_r+0xa08>)
 80297fe:	6020      	str	r0, [r4, #0]
 8029800:	f102 0201 	add.w	r2, r2, #1
 8029804:	f104 0108 	add.w	r1, r4, #8
 8029808:	f300 827a 	bgt.w	8029d00 <_vfprintf_r+0xd18>
 802980c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802980e:	6060      	str	r0, [r4, #4]
 8029810:	4403      	add	r3, r0
 8029812:	2a07      	cmp	r2, #7
 8029814:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8029818:	f340 8287 	ble.w	8029d2a <_vfprintf_r+0xd42>
 802981c:	9803      	ldr	r0, [sp, #12]
 802981e:	aa26      	add	r2, sp, #152	@ 0x98
 8029820:	4659      	mov	r1, fp
 8029822:	f000 fe4d 	bl	802a4c0 <__sprint_r>
 8029826:	2800      	cmp	r0, #0
 8029828:	f040 85a5 	bne.w	802a376 <_vfprintf_r+0x138e>
 802982c:	ac29      	add	r4, sp, #164	@ 0xa4
 802982e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029830:	eba3 0309 	sub.w	r3, r3, r9
 8029834:	2b00      	cmp	r3, #0
 8029836:	9310      	str	r3, [sp, #64]	@ 0x40
 8029838:	dd1c      	ble.n	8029874 <_vfprintf_r+0x88c>
 802983a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802983c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8029840:	2810      	cmp	r0, #16
 8029842:	486b      	ldr	r0, [pc, #428]	@ (80299f0 <_vfprintf_r+0xa08>)
 8029844:	6020      	str	r0, [r4, #0]
 8029846:	f102 0201 	add.w	r2, r2, #1
 802984a:	f104 0108 	add.w	r1, r4, #8
 802984e:	f300 826e 	bgt.w	8029d2e <_vfprintf_r+0xd46>
 8029852:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029854:	6060      	str	r0, [r4, #4]
 8029856:	4403      	add	r3, r0
 8029858:	2a07      	cmp	r2, #7
 802985a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802985e:	f340 827b 	ble.w	8029d58 <_vfprintf_r+0xd70>
 8029862:	9803      	ldr	r0, [sp, #12]
 8029864:	aa26      	add	r2, sp, #152	@ 0x98
 8029866:	4659      	mov	r1, fp
 8029868:	f000 fe2a 	bl	802a4c0 <__sprint_r>
 802986c:	2800      	cmp	r0, #0
 802986e:	f040 8582 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029872:	ac29      	add	r4, sp, #164	@ 0xa4
 8029874:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029876:	9310      	str	r3, [sp, #64]	@ 0x40
 8029878:	05e8      	lsls	r0, r5, #23
 802987a:	f100 8273 	bmi.w	8029d64 <_vfprintf_r+0xd7c>
 802987e:	444b      	add	r3, r9
 8029880:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029882:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029884:	3301      	adds	r3, #1
 8029886:	2b07      	cmp	r3, #7
 8029888:	e9c4 8900 	strd	r8, r9, [r4]
 802988c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802988e:	f300 82af 	bgt.w	8029df0 <_vfprintf_r+0xe08>
 8029892:	3408      	adds	r4, #8
 8029894:	0768      	lsls	r0, r5, #29
 8029896:	f100 8550 	bmi.w	802a33a <_vfprintf_r+0x1352>
 802989a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802989e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80298a0:	428a      	cmp	r2, r1
 80298a2:	bfac      	ite	ge
 80298a4:	189b      	addge	r3, r3, r2
 80298a6:	185b      	addlt	r3, r3, r1
 80298a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80298aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80298ac:	b13b      	cbz	r3, 80298be <_vfprintf_r+0x8d6>
 80298ae:	9803      	ldr	r0, [sp, #12]
 80298b0:	aa26      	add	r2, sp, #152	@ 0x98
 80298b2:	4659      	mov	r1, fp
 80298b4:	f000 fe04 	bl	802a4c0 <__sprint_r>
 80298b8:	2800      	cmp	r0, #0
 80298ba:	f040 855c 	bne.w	802a376 <_vfprintf_r+0x138e>
 80298be:	2300      	movs	r3, #0
 80298c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80298c2:	f1ba 0f00 	cmp.w	sl, #0
 80298c6:	f040 8572 	bne.w	802a3ae <_vfprintf_r+0x13c6>
 80298ca:	9e07      	ldr	r6, [sp, #28]
 80298cc:	ac29      	add	r4, sp, #164	@ 0xa4
 80298ce:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80298d2:	e407      	b.n	80290e4 <_vfprintf_r+0xfc>
 80298d4:	f802 0c01 	strb.w	r0, [r2, #-1]
 80298d8:	e6aa      	b.n	8029630 <_vfprintf_r+0x648>
 80298da:	f803 0b01 	strb.w	r0, [r3], #1
 80298de:	e675      	b.n	80295cc <_vfprintf_r+0x5e4>
 80298e0:	9b08      	ldr	r3, [sp, #32]
 80298e2:	2b46      	cmp	r3, #70	@ 0x46
 80298e4:	d005      	beq.n	80298f2 <_vfprintf_r+0x90a>
 80298e6:	2b45      	cmp	r3, #69	@ 0x45
 80298e8:	d11a      	bne.n	8029920 <_vfprintf_r+0x938>
 80298ea:	f109 0601 	add.w	r6, r9, #1
 80298ee:	2102      	movs	r1, #2
 80298f0:	e001      	b.n	80298f6 <_vfprintf_r+0x90e>
 80298f2:	464e      	mov	r6, r9
 80298f4:	2103      	movs	r1, #3
 80298f6:	ab24      	add	r3, sp, #144	@ 0x90
 80298f8:	9301      	str	r3, [sp, #4]
 80298fa:	ab21      	add	r3, sp, #132	@ 0x84
 80298fc:	9300      	str	r3, [sp, #0]
 80298fe:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8029902:	ab20      	add	r3, sp, #128	@ 0x80
 8029904:	9803      	ldr	r0, [sp, #12]
 8029906:	4632      	mov	r2, r6
 8029908:	f003 fbb6 	bl	802d078 <_dtoa_r>
 802990c:	9b08      	ldr	r3, [sp, #32]
 802990e:	2b47      	cmp	r3, #71	@ 0x47
 8029910:	4680      	mov	r8, r0
 8029912:	d119      	bne.n	8029948 <_vfprintf_r+0x960>
 8029914:	07e8      	lsls	r0, r5, #31
 8029916:	d405      	bmi.n	8029924 <_vfprintf_r+0x93c>
 8029918:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802991a:	eba3 0308 	sub.w	r3, r3, r8
 802991e:	e699      	b.n	8029654 <_vfprintf_r+0x66c>
 8029920:	464e      	mov	r6, r9
 8029922:	e7e4      	b.n	80298ee <_vfprintf_r+0x906>
 8029924:	eb08 0706 	add.w	r7, r8, r6
 8029928:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802992c:	2200      	movs	r2, #0
 802992e:	2300      	movs	r3, #0
 8029930:	f7e7 f8e2 	bl	8010af8 <__aeabi_dcmpeq>
 8029934:	b100      	cbz	r0, 8029938 <_vfprintf_r+0x950>
 8029936:	9724      	str	r7, [sp, #144]	@ 0x90
 8029938:	2230      	movs	r2, #48	@ 0x30
 802993a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802993c:	429f      	cmp	r7, r3
 802993e:	d9eb      	bls.n	8029918 <_vfprintf_r+0x930>
 8029940:	1c59      	adds	r1, r3, #1
 8029942:	9124      	str	r1, [sp, #144]	@ 0x90
 8029944:	701a      	strb	r2, [r3, #0]
 8029946:	e7f8      	b.n	802993a <_vfprintf_r+0x952>
 8029948:	9b08      	ldr	r3, [sp, #32]
 802994a:	2b46      	cmp	r3, #70	@ 0x46
 802994c:	eb00 0706 	add.w	r7, r0, r6
 8029950:	d1ea      	bne.n	8029928 <_vfprintf_r+0x940>
 8029952:	7803      	ldrb	r3, [r0, #0]
 8029954:	2b30      	cmp	r3, #48	@ 0x30
 8029956:	d109      	bne.n	802996c <_vfprintf_r+0x984>
 8029958:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802995c:	2200      	movs	r2, #0
 802995e:	2300      	movs	r3, #0
 8029960:	f7e7 f8ca 	bl	8010af8 <__aeabi_dcmpeq>
 8029964:	b910      	cbnz	r0, 802996c <_vfprintf_r+0x984>
 8029966:	f1c6 0601 	rsb	r6, r6, #1
 802996a:	9620      	str	r6, [sp, #128]	@ 0x80
 802996c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802996e:	441f      	add	r7, r3
 8029970:	e7da      	b.n	8029928 <_vfprintf_r+0x940>
 8029972:	9b08      	ldr	r3, [sp, #32]
 8029974:	2b46      	cmp	r3, #70	@ 0x46
 8029976:	f47f ae7b 	bne.w	8029670 <_vfprintf_r+0x688>
 802997a:	f005 0301 	and.w	r3, r5, #1
 802997e:	2e00      	cmp	r6, #0
 8029980:	ea43 0309 	orr.w	r3, r3, r9
 8029984:	dd25      	ble.n	80299d2 <_vfprintf_r+0x9ea>
 8029986:	b37b      	cbz	r3, 80299e8 <_vfprintf_r+0xa00>
 8029988:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802998a:	18f3      	adds	r3, r6, r3
 802998c:	4499      	add	r9, r3
 802998e:	2366      	movs	r3, #102	@ 0x66
 8029990:	9306      	str	r3, [sp, #24]
 8029992:	e033      	b.n	80299fc <_vfprintf_r+0xa14>
 8029994:	f813 7b01 	ldrb.w	r7, [r3], #1
 8029998:	f806 7f01 	strb.w	r7, [r6, #1]!
 802999c:	e69f      	b.n	80296de <_vfprintf_r+0x6f6>
 802999e:	b941      	cbnz	r1, 80299b2 <_vfprintf_r+0x9ca>
 80299a0:	2230      	movs	r2, #48	@ 0x30
 80299a2:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 80299a6:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 80299aa:	3330      	adds	r3, #48	@ 0x30
 80299ac:	f802 3b01 	strb.w	r3, [r2], #1
 80299b0:	e6a1      	b.n	80296f6 <_vfprintf_r+0x70e>
 80299b2:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80299b6:	e7f8      	b.n	80299aa <_vfprintf_r+0x9c2>
 80299b8:	9b04      	ldr	r3, [sp, #16]
 80299ba:	42b3      	cmp	r3, r6
 80299bc:	dd0d      	ble.n	80299da <_vfprintf_r+0x9f2>
 80299be:	9b04      	ldr	r3, [sp, #16]
 80299c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80299c2:	2e00      	cmp	r6, #0
 80299c4:	eb03 0902 	add.w	r9, r3, r2
 80299c8:	dc0c      	bgt.n	80299e4 <_vfprintf_r+0x9fc>
 80299ca:	f1c6 0301 	rsb	r3, r6, #1
 80299ce:	4499      	add	r9, r3
 80299d0:	e008      	b.n	80299e4 <_vfprintf_r+0x9fc>
 80299d2:	b17b      	cbz	r3, 80299f4 <_vfprintf_r+0xa0c>
 80299d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80299d6:	3301      	adds	r3, #1
 80299d8:	e7d8      	b.n	802998c <_vfprintf_r+0x9a4>
 80299da:	07eb      	lsls	r3, r5, #31
 80299dc:	d521      	bpl.n	8029a22 <_vfprintf_r+0xa3a>
 80299de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80299e0:	eb06 0903 	add.w	r9, r6, r3
 80299e4:	2367      	movs	r3, #103	@ 0x67
 80299e6:	e7d3      	b.n	8029990 <_vfprintf_r+0x9a8>
 80299e8:	46b1      	mov	r9, r6
 80299ea:	e7d0      	b.n	802998e <_vfprintf_r+0x9a6>
 80299ec:	0803a743 	.word	0x0803a743
 80299f0:	0803a733 	.word	0x0803a733
 80299f4:	2366      	movs	r3, #102	@ 0x66
 80299f6:	9306      	str	r3, [sp, #24]
 80299f8:	f04f 0901 	mov.w	r9, #1
 80299fc:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8029a00:	9308      	str	r3, [sp, #32]
 8029a02:	d01f      	beq.n	8029a44 <_vfprintf_r+0xa5c>
 8029a04:	2700      	movs	r7, #0
 8029a06:	2e00      	cmp	r6, #0
 8029a08:	9708      	str	r7, [sp, #32]
 8029a0a:	f77f ae88 	ble.w	802971e <_vfprintf_r+0x736>
 8029a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029a10:	781b      	ldrb	r3, [r3, #0]
 8029a12:	2bff      	cmp	r3, #255	@ 0xff
 8029a14:	d107      	bne.n	8029a26 <_vfprintf_r+0xa3e>
 8029a16:	9b08      	ldr	r3, [sp, #32]
 8029a18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029a1a:	443b      	add	r3, r7
 8029a1c:	fb02 9903 	mla	r9, r2, r3, r9
 8029a20:	e67d      	b.n	802971e <_vfprintf_r+0x736>
 8029a22:	46b1      	mov	r9, r6
 8029a24:	e7de      	b.n	80299e4 <_vfprintf_r+0x9fc>
 8029a26:	42b3      	cmp	r3, r6
 8029a28:	daf5      	bge.n	8029a16 <_vfprintf_r+0xa2e>
 8029a2a:	1af6      	subs	r6, r6, r3
 8029a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029a2e:	785b      	ldrb	r3, [r3, #1]
 8029a30:	b133      	cbz	r3, 8029a40 <_vfprintf_r+0xa58>
 8029a32:	9b08      	ldr	r3, [sp, #32]
 8029a34:	3301      	adds	r3, #1
 8029a36:	9308      	str	r3, [sp, #32]
 8029a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029a3a:	3301      	adds	r3, #1
 8029a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8029a3e:	e7e6      	b.n	8029a0e <_vfprintf_r+0xa26>
 8029a40:	3701      	adds	r7, #1
 8029a42:	e7e4      	b.n	8029a0e <_vfprintf_r+0xa26>
 8029a44:	9f08      	ldr	r7, [sp, #32]
 8029a46:	e66a      	b.n	802971e <_vfprintf_r+0x736>
 8029a48:	232d      	movs	r3, #45	@ 0x2d
 8029a4a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8029a4e:	e66a      	b.n	8029726 <_vfprintf_r+0x73e>
 8029a50:	06af      	lsls	r7, r5, #26
 8029a52:	d507      	bpl.n	8029a64 <_vfprintf_r+0xa7c>
 8029a54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029a56:	6833      	ldr	r3, [r6, #0]
 8029a58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8029a5a:	17d2      	asrs	r2, r2, #31
 8029a5c:	e9c3 1200 	strd	r1, r2, [r3]
 8029a60:	3604      	adds	r6, #4
 8029a62:	e734      	b.n	80298ce <_vfprintf_r+0x8e6>
 8029a64:	06e8      	lsls	r0, r5, #27
 8029a66:	d503      	bpl.n	8029a70 <_vfprintf_r+0xa88>
 8029a68:	6833      	ldr	r3, [r6, #0]
 8029a6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029a6c:	601a      	str	r2, [r3, #0]
 8029a6e:	e7f7      	b.n	8029a60 <_vfprintf_r+0xa78>
 8029a70:	0669      	lsls	r1, r5, #25
 8029a72:	d503      	bpl.n	8029a7c <_vfprintf_r+0xa94>
 8029a74:	6833      	ldr	r3, [r6, #0]
 8029a76:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029a78:	801a      	strh	r2, [r3, #0]
 8029a7a:	e7f1      	b.n	8029a60 <_vfprintf_r+0xa78>
 8029a7c:	05aa      	lsls	r2, r5, #22
 8029a7e:	d5f3      	bpl.n	8029a68 <_vfprintf_r+0xa80>
 8029a80:	6833      	ldr	r3, [r6, #0]
 8029a82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029a84:	701a      	strb	r2, [r3, #0]
 8029a86:	e7eb      	b.n	8029a60 <_vfprintf_r+0xa78>
 8029a88:	f045 0510 	orr.w	r5, r5, #16
 8029a8c:	f015 0320 	ands.w	r3, r5, #32
 8029a90:	d020      	beq.n	8029ad4 <_vfprintf_r+0xaec>
 8029a92:	3607      	adds	r6, #7
 8029a94:	f026 0307 	bic.w	r3, r6, #7
 8029a98:	461a      	mov	r2, r3
 8029a9a:	685f      	ldr	r7, [r3, #4]
 8029a9c:	f852 6b08 	ldr.w	r6, [r2], #8
 8029aa0:	9207      	str	r2, [sp, #28]
 8029aa2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8029aa6:	2300      	movs	r3, #0
 8029aa8:	2200      	movs	r2, #0
 8029aaa:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8029aae:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8029ab2:	f000 8491 	beq.w	802a3d8 <_vfprintf_r+0x13f0>
 8029ab6:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8029aba:	9208      	str	r2, [sp, #32]
 8029abc:	ea56 0207 	orrs.w	r2, r6, r7
 8029ac0:	f040 848f 	bne.w	802a3e2 <_vfprintf_r+0x13fa>
 8029ac4:	f1b9 0f00 	cmp.w	r9, #0
 8029ac8:	f000 80db 	beq.w	8029c82 <_vfprintf_r+0xc9a>
 8029acc:	2b01      	cmp	r3, #1
 8029ace:	f040 848b 	bne.w	802a3e8 <_vfprintf_r+0x1400>
 8029ad2:	e083      	b.n	8029bdc <_vfprintf_r+0xbf4>
 8029ad4:	4632      	mov	r2, r6
 8029ad6:	f015 0710 	ands.w	r7, r5, #16
 8029ada:	f852 6b04 	ldr.w	r6, [r2], #4
 8029ade:	9207      	str	r2, [sp, #28]
 8029ae0:	d001      	beq.n	8029ae6 <_vfprintf_r+0xafe>
 8029ae2:	461f      	mov	r7, r3
 8029ae4:	e7dd      	b.n	8029aa2 <_vfprintf_r+0xaba>
 8029ae6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8029aea:	d001      	beq.n	8029af0 <_vfprintf_r+0xb08>
 8029aec:	b2b6      	uxth	r6, r6
 8029aee:	e7d8      	b.n	8029aa2 <_vfprintf_r+0xaba>
 8029af0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8029af4:	d0d5      	beq.n	8029aa2 <_vfprintf_r+0xaba>
 8029af6:	b2f6      	uxtb	r6, r6
 8029af8:	e7f3      	b.n	8029ae2 <_vfprintf_r+0xafa>
 8029afa:	4633      	mov	r3, r6
 8029afc:	2278      	movs	r2, #120	@ 0x78
 8029afe:	f853 6b04 	ldr.w	r6, [r3], #4
 8029b02:	9307      	str	r3, [sp, #28]
 8029b04:	f647 0330 	movw	r3, #30768	@ 0x7830
 8029b08:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8029b0c:	4b93      	ldr	r3, [pc, #588]	@ (8029d5c <_vfprintf_r+0xd74>)
 8029b0e:	9319      	str	r3, [sp, #100]	@ 0x64
 8029b10:	2700      	movs	r7, #0
 8029b12:	f045 0502 	orr.w	r5, r5, #2
 8029b16:	2302      	movs	r3, #2
 8029b18:	9206      	str	r2, [sp, #24]
 8029b1a:	e7c5      	b.n	8029aa8 <_vfprintf_r+0xac0>
 8029b1c:	4633      	mov	r3, r6
 8029b1e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8029b22:	f853 8b04 	ldr.w	r8, [r3], #4
 8029b26:	9307      	str	r3, [sp, #28]
 8029b28:	f04f 0600 	mov.w	r6, #0
 8029b2c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8029b30:	d00f      	beq.n	8029b52 <_vfprintf_r+0xb6a>
 8029b32:	464a      	mov	r2, r9
 8029b34:	4631      	mov	r1, r6
 8029b36:	4640      	mov	r0, r8
 8029b38:	f7e6 fb62 	bl	8010200 <memchr>
 8029b3c:	4682      	mov	sl, r0
 8029b3e:	2800      	cmp	r0, #0
 8029b40:	f43f ac7a 	beq.w	8029438 <_vfprintf_r+0x450>
 8029b44:	eba0 0908 	sub.w	r9, r0, r8
 8029b48:	46b2      	mov	sl, r6
 8029b4a:	9610      	str	r6, [sp, #64]	@ 0x40
 8029b4c:	4637      	mov	r7, r6
 8029b4e:	9608      	str	r6, [sp, #32]
 8029b50:	e5ec      	b.n	802972c <_vfprintf_r+0x744>
 8029b52:	4640      	mov	r0, r8
 8029b54:	f7e6 fba4 	bl	80102a0 <strlen>
 8029b58:	46b2      	mov	sl, r6
 8029b5a:	4681      	mov	r9, r0
 8029b5c:	e46c      	b.n	8029438 <_vfprintf_r+0x450>
 8029b5e:	f045 0510 	orr.w	r5, r5, #16
 8029b62:	f015 0320 	ands.w	r3, r5, #32
 8029b66:	d009      	beq.n	8029b7c <_vfprintf_r+0xb94>
 8029b68:	3607      	adds	r6, #7
 8029b6a:	f026 0307 	bic.w	r3, r6, #7
 8029b6e:	461a      	mov	r2, r3
 8029b70:	685f      	ldr	r7, [r3, #4]
 8029b72:	f852 6b08 	ldr.w	r6, [r2], #8
 8029b76:	9207      	str	r2, [sp, #28]
 8029b78:	2301      	movs	r3, #1
 8029b7a:	e795      	b.n	8029aa8 <_vfprintf_r+0xac0>
 8029b7c:	4632      	mov	r2, r6
 8029b7e:	f015 0710 	ands.w	r7, r5, #16
 8029b82:	f852 6b04 	ldr.w	r6, [r2], #4
 8029b86:	9207      	str	r2, [sp, #28]
 8029b88:	d001      	beq.n	8029b8e <_vfprintf_r+0xba6>
 8029b8a:	461f      	mov	r7, r3
 8029b8c:	e7f4      	b.n	8029b78 <_vfprintf_r+0xb90>
 8029b8e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8029b92:	d001      	beq.n	8029b98 <_vfprintf_r+0xbb0>
 8029b94:	b2b6      	uxth	r6, r6
 8029b96:	e7ef      	b.n	8029b78 <_vfprintf_r+0xb90>
 8029b98:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8029b9c:	d0ec      	beq.n	8029b78 <_vfprintf_r+0xb90>
 8029b9e:	b2f6      	uxtb	r6, r6
 8029ba0:	e7f3      	b.n	8029b8a <_vfprintf_r+0xba2>
 8029ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8029d60 <_vfprintf_r+0xd78>)
 8029ba4:	f7ff bb33 	b.w	802920e <_vfprintf_r+0x226>
 8029ba8:	4632      	mov	r2, r6
 8029baa:	f015 0710 	ands.w	r7, r5, #16
 8029bae:	f852 6b04 	ldr.w	r6, [r2], #4
 8029bb2:	9207      	str	r2, [sp, #28]
 8029bb4:	d002      	beq.n	8029bbc <_vfprintf_r+0xbd4>
 8029bb6:	461f      	mov	r7, r3
 8029bb8:	f7ff bb36 	b.w	8029228 <_vfprintf_r+0x240>
 8029bbc:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8029bc0:	d002      	beq.n	8029bc8 <_vfprintf_r+0xbe0>
 8029bc2:	b2b6      	uxth	r6, r6
 8029bc4:	f7ff bb30 	b.w	8029228 <_vfprintf_r+0x240>
 8029bc8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8029bcc:	f43f ab2c 	beq.w	8029228 <_vfprintf_r+0x240>
 8029bd0:	b2f6      	uxtb	r6, r6
 8029bd2:	e7f0      	b.n	8029bb6 <_vfprintf_r+0xbce>
 8029bd4:	2e0a      	cmp	r6, #10
 8029bd6:	f177 0300 	sbcs.w	r3, r7, #0
 8029bda:	d207      	bcs.n	8029bec <_vfprintf_r+0xc04>
 8029bdc:	3630      	adds	r6, #48	@ 0x30
 8029bde:	b2f6      	uxtb	r6, r6
 8029be0:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8029be4:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8029be8:	f000 bc1a 	b.w	802a420 <_vfprintf_r+0x1438>
 8029bec:	2300      	movs	r3, #0
 8029bee:	9304      	str	r3, [sp, #16]
 8029bf0:	9b08      	ldr	r3, [sp, #32]
 8029bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8029bf6:	ad52      	add	r5, sp, #328	@ 0x148
 8029bf8:	9310      	str	r3, [sp, #64]	@ 0x40
 8029bfa:	220a      	movs	r2, #10
 8029bfc:	2300      	movs	r3, #0
 8029bfe:	4630      	mov	r0, r6
 8029c00:	4639      	mov	r1, r7
 8029c02:	f7e7 f8a9 	bl	8010d58 <__aeabi_uldivmod>
 8029c06:	9b04      	ldr	r3, [sp, #16]
 8029c08:	9011      	str	r0, [sp, #68]	@ 0x44
 8029c0a:	3301      	adds	r3, #1
 8029c0c:	9304      	str	r3, [sp, #16]
 8029c0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029c10:	3230      	adds	r2, #48	@ 0x30
 8029c12:	468a      	mov	sl, r1
 8029c14:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8029c18:	f805 2c01 	strb.w	r2, [r5, #-1]
 8029c1c:	b1d3      	cbz	r3, 8029c54 <_vfprintf_r+0xc6c>
 8029c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c20:	9a04      	ldr	r2, [sp, #16]
 8029c22:	781b      	ldrb	r3, [r3, #0]
 8029c24:	429a      	cmp	r2, r3
 8029c26:	d115      	bne.n	8029c54 <_vfprintf_r+0xc6c>
 8029c28:	2aff      	cmp	r2, #255	@ 0xff
 8029c2a:	d013      	beq.n	8029c54 <_vfprintf_r+0xc6c>
 8029c2c:	2e0a      	cmp	r6, #10
 8029c2e:	f177 0300 	sbcs.w	r3, r7, #0
 8029c32:	d30f      	bcc.n	8029c54 <_vfprintf_r+0xc6c>
 8029c34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029c36:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8029c38:	eba8 0803 	sub.w	r8, r8, r3
 8029c3c:	461a      	mov	r2, r3
 8029c3e:	4640      	mov	r0, r8
 8029c40:	f001 ff25 	bl	802ba8e <strncpy>
 8029c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c46:	785b      	ldrb	r3, [r3, #1]
 8029c48:	b11b      	cbz	r3, 8029c52 <_vfprintf_r+0xc6a>
 8029c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c4c:	3301      	adds	r3, #1
 8029c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8029c50:	2300      	movs	r3, #0
 8029c52:	9304      	str	r3, [sp, #16]
 8029c54:	2e0a      	cmp	r6, #10
 8029c56:	f177 0700 	sbcs.w	r7, r7, #0
 8029c5a:	f0c0 83e1 	bcc.w	802a420 <_vfprintf_r+0x1438>
 8029c5e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8029c60:	4657      	mov	r7, sl
 8029c62:	4645      	mov	r5, r8
 8029c64:	e7c9      	b.n	8029bfa <_vfprintf_r+0xc12>
 8029c66:	f006 030f 	and.w	r3, r6, #15
 8029c6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8029c6c:	0936      	lsrs	r6, r6, #4
 8029c6e:	5cd3      	ldrb	r3, [r2, r3]
 8029c70:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8029c74:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8029c78:	093f      	lsrs	r7, r7, #4
 8029c7a:	ea56 0307 	orrs.w	r3, r6, r7
 8029c7e:	d1f2      	bne.n	8029c66 <_vfprintf_r+0xc7e>
 8029c80:	e3ce      	b.n	802a420 <_vfprintf_r+0x1438>
 8029c82:	b91b      	cbnz	r3, 8029c8c <_vfprintf_r+0xca4>
 8029c84:	07ed      	lsls	r5, r5, #31
 8029c86:	d501      	bpl.n	8029c8c <_vfprintf_r+0xca4>
 8029c88:	2630      	movs	r6, #48	@ 0x30
 8029c8a:	e7a9      	b.n	8029be0 <_vfprintf_r+0xbf8>
 8029c8c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8029c90:	e3c6      	b.n	802a420 <_vfprintf_r+0x1438>
 8029c92:	9b06      	ldr	r3, [sp, #24]
 8029c94:	2b00      	cmp	r3, #0
 8029c96:	f000 8390 	beq.w	802a3ba <_vfprintf_r+0x13d2>
 8029c9a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8029c9e:	2300      	movs	r3, #0
 8029ca0:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8029ca4:	9607      	str	r6, [sp, #28]
 8029ca6:	f7ff bb5c 	b.w	8029362 <_vfprintf_r+0x37a>
 8029caa:	2010      	movs	r0, #16
 8029cac:	4403      	add	r3, r0
 8029cae:	2a07      	cmp	r2, #7
 8029cb0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8029cb4:	6060      	str	r0, [r4, #4]
 8029cb6:	dd08      	ble.n	8029cca <_vfprintf_r+0xce2>
 8029cb8:	9803      	ldr	r0, [sp, #12]
 8029cba:	aa26      	add	r2, sp, #152	@ 0x98
 8029cbc:	4659      	mov	r1, fp
 8029cbe:	f000 fbff 	bl	802a4c0 <__sprint_r>
 8029cc2:	2800      	cmp	r0, #0
 8029cc4:	f040 8357 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029cc8:	a929      	add	r1, sp, #164	@ 0xa4
 8029cca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029ccc:	3b10      	subs	r3, #16
 8029cce:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029cd0:	460c      	mov	r4, r1
 8029cd2:	e547      	b.n	8029764 <_vfprintf_r+0x77c>
 8029cd4:	460c      	mov	r4, r1
 8029cd6:	e562      	b.n	802979e <_vfprintf_r+0x7b6>
 8029cd8:	9803      	ldr	r0, [sp, #12]
 8029cda:	aa26      	add	r2, sp, #152	@ 0x98
 8029cdc:	4659      	mov	r1, fp
 8029cde:	f000 fbef 	bl	802a4c0 <__sprint_r>
 8029ce2:	2800      	cmp	r0, #0
 8029ce4:	f040 8347 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029ce8:	ac29      	add	r4, sp, #164	@ 0xa4
 8029cea:	e56a      	b.n	80297c2 <_vfprintf_r+0x7da>
 8029cec:	9803      	ldr	r0, [sp, #12]
 8029cee:	aa26      	add	r2, sp, #152	@ 0x98
 8029cf0:	4659      	mov	r1, fp
 8029cf2:	f000 fbe5 	bl	802a4c0 <__sprint_r>
 8029cf6:	2800      	cmp	r0, #0
 8029cf8:	f040 833d 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029cfc:	ac29      	add	r4, sp, #164	@ 0xa4
 8029cfe:	e570      	b.n	80297e2 <_vfprintf_r+0x7fa>
 8029d00:	2010      	movs	r0, #16
 8029d02:	4403      	add	r3, r0
 8029d04:	2a07      	cmp	r2, #7
 8029d06:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8029d0a:	6060      	str	r0, [r4, #4]
 8029d0c:	dd08      	ble.n	8029d20 <_vfprintf_r+0xd38>
 8029d0e:	9803      	ldr	r0, [sp, #12]
 8029d10:	aa26      	add	r2, sp, #152	@ 0x98
 8029d12:	4659      	mov	r1, fp
 8029d14:	f000 fbd4 	bl	802a4c0 <__sprint_r>
 8029d18:	2800      	cmp	r0, #0
 8029d1a:	f040 832c 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029d1e:	a929      	add	r1, sp, #164	@ 0xa4
 8029d20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029d22:	3b10      	subs	r3, #16
 8029d24:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029d26:	460c      	mov	r4, r1
 8029d28:	e564      	b.n	80297f4 <_vfprintf_r+0x80c>
 8029d2a:	460c      	mov	r4, r1
 8029d2c:	e57f      	b.n	802982e <_vfprintf_r+0x846>
 8029d2e:	2010      	movs	r0, #16
 8029d30:	4403      	add	r3, r0
 8029d32:	2a07      	cmp	r2, #7
 8029d34:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8029d38:	6060      	str	r0, [r4, #4]
 8029d3a:	dd08      	ble.n	8029d4e <_vfprintf_r+0xd66>
 8029d3c:	9803      	ldr	r0, [sp, #12]
 8029d3e:	aa26      	add	r2, sp, #152	@ 0x98
 8029d40:	4659      	mov	r1, fp
 8029d42:	f000 fbbd 	bl	802a4c0 <__sprint_r>
 8029d46:	2800      	cmp	r0, #0
 8029d48:	f040 8315 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029d4c:	a929      	add	r1, sp, #164	@ 0xa4
 8029d4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029d50:	3b10      	subs	r3, #16
 8029d52:	9310      	str	r3, [sp, #64]	@ 0x40
 8029d54:	460c      	mov	r4, r1
 8029d56:	e570      	b.n	802983a <_vfprintf_r+0x852>
 8029d58:	460c      	mov	r4, r1
 8029d5a:	e58b      	b.n	8029874 <_vfprintf_r+0x88c>
 8029d5c:	0803a70f 	.word	0x0803a70f
 8029d60:	0803a720 	.word	0x0803a720
 8029d64:	9b06      	ldr	r3, [sp, #24]
 8029d66:	2b65      	cmp	r3, #101	@ 0x65
 8029d68:	f340 8245 	ble.w	802a1f6 <_vfprintf_r+0x120e>
 8029d6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8029d70:	2200      	movs	r2, #0
 8029d72:	2300      	movs	r3, #0
 8029d74:	f7e6 fec0 	bl	8010af8 <__aeabi_dcmpeq>
 8029d78:	2800      	cmp	r0, #0
 8029d7a:	d06a      	beq.n	8029e52 <_vfprintf_r+0xe6a>
 8029d7c:	4b73      	ldr	r3, [pc, #460]	@ (8029f4c <_vfprintf_r+0xf64>)
 8029d7e:	6023      	str	r3, [r4, #0]
 8029d80:	2301      	movs	r3, #1
 8029d82:	6063      	str	r3, [r4, #4]
 8029d84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029d86:	3301      	adds	r3, #1
 8029d88:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029d8a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029d8c:	3301      	adds	r3, #1
 8029d8e:	2b07      	cmp	r3, #7
 8029d90:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029d92:	dc37      	bgt.n	8029e04 <_vfprintf_r+0xe1c>
 8029d94:	3408      	adds	r4, #8
 8029d96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029d98:	9a04      	ldr	r2, [sp, #16]
 8029d9a:	4293      	cmp	r3, r2
 8029d9c:	db02      	blt.n	8029da4 <_vfprintf_r+0xdbc>
 8029d9e:	07e9      	lsls	r1, r5, #31
 8029da0:	f57f ad78 	bpl.w	8029894 <_vfprintf_r+0x8ac>
 8029da4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029da6:	6023      	str	r3, [r4, #0]
 8029da8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029daa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029dac:	6063      	str	r3, [r4, #4]
 8029dae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029db0:	4413      	add	r3, r2
 8029db2:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029db4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029db6:	3301      	adds	r3, #1
 8029db8:	2b07      	cmp	r3, #7
 8029dba:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029dbc:	dc2c      	bgt.n	8029e18 <_vfprintf_r+0xe30>
 8029dbe:	3408      	adds	r4, #8
 8029dc0:	9b04      	ldr	r3, [sp, #16]
 8029dc2:	1e5e      	subs	r6, r3, #1
 8029dc4:	2e00      	cmp	r6, #0
 8029dc6:	f77f ad65 	ble.w	8029894 <_vfprintf_r+0x8ac>
 8029dca:	4f61      	ldr	r7, [pc, #388]	@ (8029f50 <_vfprintf_r+0xf68>)
 8029dcc:	f04f 0810 	mov.w	r8, #16
 8029dd0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8029dd4:	2e10      	cmp	r6, #16
 8029dd6:	f103 0301 	add.w	r3, r3, #1
 8029dda:	f104 0108 	add.w	r1, r4, #8
 8029dde:	6027      	str	r7, [r4, #0]
 8029de0:	dc24      	bgt.n	8029e2c <_vfprintf_r+0xe44>
 8029de2:	6066      	str	r6, [r4, #4]
 8029de4:	2b07      	cmp	r3, #7
 8029de6:	4416      	add	r6, r2
 8029de8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8029dec:	f340 82a2 	ble.w	802a334 <_vfprintf_r+0x134c>
 8029df0:	9803      	ldr	r0, [sp, #12]
 8029df2:	aa26      	add	r2, sp, #152	@ 0x98
 8029df4:	4659      	mov	r1, fp
 8029df6:	f000 fb63 	bl	802a4c0 <__sprint_r>
 8029dfa:	2800      	cmp	r0, #0
 8029dfc:	f040 82bb 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029e00:	ac29      	add	r4, sp, #164	@ 0xa4
 8029e02:	e547      	b.n	8029894 <_vfprintf_r+0x8ac>
 8029e04:	9803      	ldr	r0, [sp, #12]
 8029e06:	aa26      	add	r2, sp, #152	@ 0x98
 8029e08:	4659      	mov	r1, fp
 8029e0a:	f000 fb59 	bl	802a4c0 <__sprint_r>
 8029e0e:	2800      	cmp	r0, #0
 8029e10:	f040 82b1 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029e14:	ac29      	add	r4, sp, #164	@ 0xa4
 8029e16:	e7be      	b.n	8029d96 <_vfprintf_r+0xdae>
 8029e18:	9803      	ldr	r0, [sp, #12]
 8029e1a:	aa26      	add	r2, sp, #152	@ 0x98
 8029e1c:	4659      	mov	r1, fp
 8029e1e:	f000 fb4f 	bl	802a4c0 <__sprint_r>
 8029e22:	2800      	cmp	r0, #0
 8029e24:	f040 82a7 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029e28:	ac29      	add	r4, sp, #164	@ 0xa4
 8029e2a:	e7c9      	b.n	8029dc0 <_vfprintf_r+0xdd8>
 8029e2c:	3210      	adds	r2, #16
 8029e2e:	2b07      	cmp	r3, #7
 8029e30:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8029e34:	f8c4 8004 	str.w	r8, [r4, #4]
 8029e38:	dd08      	ble.n	8029e4c <_vfprintf_r+0xe64>
 8029e3a:	9803      	ldr	r0, [sp, #12]
 8029e3c:	aa26      	add	r2, sp, #152	@ 0x98
 8029e3e:	4659      	mov	r1, fp
 8029e40:	f000 fb3e 	bl	802a4c0 <__sprint_r>
 8029e44:	2800      	cmp	r0, #0
 8029e46:	f040 8296 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029e4a:	a929      	add	r1, sp, #164	@ 0xa4
 8029e4c:	3e10      	subs	r6, #16
 8029e4e:	460c      	mov	r4, r1
 8029e50:	e7be      	b.n	8029dd0 <_vfprintf_r+0xde8>
 8029e52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029e54:	2b00      	cmp	r3, #0
 8029e56:	dc7d      	bgt.n	8029f54 <_vfprintf_r+0xf6c>
 8029e58:	4b3c      	ldr	r3, [pc, #240]	@ (8029f4c <_vfprintf_r+0xf64>)
 8029e5a:	6023      	str	r3, [r4, #0]
 8029e5c:	2301      	movs	r3, #1
 8029e5e:	6063      	str	r3, [r4, #4]
 8029e60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029e62:	3301      	adds	r3, #1
 8029e64:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029e66:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029e68:	3301      	adds	r3, #1
 8029e6a:	2b07      	cmp	r3, #7
 8029e6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029e6e:	dc46      	bgt.n	8029efe <_vfprintf_r+0xf16>
 8029e70:	3408      	adds	r4, #8
 8029e72:	9904      	ldr	r1, [sp, #16]
 8029e74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029e76:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8029e78:	430b      	orrs	r3, r1
 8029e7a:	f005 0101 	and.w	r1, r5, #1
 8029e7e:	430b      	orrs	r3, r1
 8029e80:	f43f ad08 	beq.w	8029894 <_vfprintf_r+0x8ac>
 8029e84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029e86:	6023      	str	r3, [r4, #0]
 8029e88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029e8a:	6063      	str	r3, [r4, #4]
 8029e8c:	441a      	add	r2, r3
 8029e8e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029e90:	9228      	str	r2, [sp, #160]	@ 0xa0
 8029e92:	3301      	adds	r3, #1
 8029e94:	2b07      	cmp	r3, #7
 8029e96:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029e98:	dc3b      	bgt.n	8029f12 <_vfprintf_r+0xf2a>
 8029e9a:	f104 0308 	add.w	r3, r4, #8
 8029e9e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8029ea0:	2e00      	cmp	r6, #0
 8029ea2:	da1b      	bge.n	8029edc <_vfprintf_r+0xef4>
 8029ea4:	4f2a      	ldr	r7, [pc, #168]	@ (8029f50 <_vfprintf_r+0xf68>)
 8029ea6:	4276      	negs	r6, r6
 8029ea8:	461a      	mov	r2, r3
 8029eaa:	2410      	movs	r4, #16
 8029eac:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8029eb0:	2e10      	cmp	r6, #16
 8029eb2:	f101 0101 	add.w	r1, r1, #1
 8029eb6:	f103 0308 	add.w	r3, r3, #8
 8029eba:	6017      	str	r7, [r2, #0]
 8029ebc:	dc33      	bgt.n	8029f26 <_vfprintf_r+0xf3e>
 8029ebe:	6056      	str	r6, [r2, #4]
 8029ec0:	2907      	cmp	r1, #7
 8029ec2:	4406      	add	r6, r0
 8029ec4:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8029ec8:	dd08      	ble.n	8029edc <_vfprintf_r+0xef4>
 8029eca:	9803      	ldr	r0, [sp, #12]
 8029ecc:	aa26      	add	r2, sp, #152	@ 0x98
 8029ece:	4659      	mov	r1, fp
 8029ed0:	f000 faf6 	bl	802a4c0 <__sprint_r>
 8029ed4:	2800      	cmp	r0, #0
 8029ed6:	f040 824e 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029eda:	ab29      	add	r3, sp, #164	@ 0xa4
 8029edc:	9a04      	ldr	r2, [sp, #16]
 8029ede:	9904      	ldr	r1, [sp, #16]
 8029ee0:	605a      	str	r2, [r3, #4]
 8029ee2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8029ee4:	f8c3 8000 	str.w	r8, [r3]
 8029ee8:	440a      	add	r2, r1
 8029eea:	9228      	str	r2, [sp, #160]	@ 0xa0
 8029eec:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8029eee:	3201      	adds	r2, #1
 8029ef0:	2a07      	cmp	r2, #7
 8029ef2:	9227      	str	r2, [sp, #156]	@ 0x9c
 8029ef4:	f73f af7c 	bgt.w	8029df0 <_vfprintf_r+0xe08>
 8029ef8:	f103 0408 	add.w	r4, r3, #8
 8029efc:	e4ca      	b.n	8029894 <_vfprintf_r+0x8ac>
 8029efe:	9803      	ldr	r0, [sp, #12]
 8029f00:	aa26      	add	r2, sp, #152	@ 0x98
 8029f02:	4659      	mov	r1, fp
 8029f04:	f000 fadc 	bl	802a4c0 <__sprint_r>
 8029f08:	2800      	cmp	r0, #0
 8029f0a:	f040 8234 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029f0e:	ac29      	add	r4, sp, #164	@ 0xa4
 8029f10:	e7af      	b.n	8029e72 <_vfprintf_r+0xe8a>
 8029f12:	9803      	ldr	r0, [sp, #12]
 8029f14:	aa26      	add	r2, sp, #152	@ 0x98
 8029f16:	4659      	mov	r1, fp
 8029f18:	f000 fad2 	bl	802a4c0 <__sprint_r>
 8029f1c:	2800      	cmp	r0, #0
 8029f1e:	f040 822a 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029f22:	ab29      	add	r3, sp, #164	@ 0xa4
 8029f24:	e7bb      	b.n	8029e9e <_vfprintf_r+0xeb6>
 8029f26:	3010      	adds	r0, #16
 8029f28:	2907      	cmp	r1, #7
 8029f2a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8029f2e:	6054      	str	r4, [r2, #4]
 8029f30:	dd08      	ble.n	8029f44 <_vfprintf_r+0xf5c>
 8029f32:	9803      	ldr	r0, [sp, #12]
 8029f34:	aa26      	add	r2, sp, #152	@ 0x98
 8029f36:	4659      	mov	r1, fp
 8029f38:	f000 fac2 	bl	802a4c0 <__sprint_r>
 8029f3c:	2800      	cmp	r0, #0
 8029f3e:	f040 821a 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029f42:	ab29      	add	r3, sp, #164	@ 0xa4
 8029f44:	3e10      	subs	r6, #16
 8029f46:	461a      	mov	r2, r3
 8029f48:	e7b0      	b.n	8029eac <_vfprintf_r+0xec4>
 8029f4a:	bf00      	nop
 8029f4c:	0803a731 	.word	0x0803a731
 8029f50:	0803a733 	.word	0x0803a733
 8029f54:	9b04      	ldr	r3, [sp, #16]
 8029f56:	4443      	add	r3, r8
 8029f58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029f5a:	9b04      	ldr	r3, [sp, #16]
 8029f5c:	42b3      	cmp	r3, r6
 8029f5e:	bfa8      	it	ge
 8029f60:	4633      	movge	r3, r6
 8029f62:	2b00      	cmp	r3, #0
 8029f64:	4699      	mov	r9, r3
 8029f66:	dd0b      	ble.n	8029f80 <_vfprintf_r+0xf98>
 8029f68:	e9c4 8300 	strd	r8, r3, [r4]
 8029f6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029f6e:	444b      	add	r3, r9
 8029f70:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029f72:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029f74:	3301      	adds	r3, #1
 8029f76:	2b07      	cmp	r3, #7
 8029f78:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029f7a:	f300 8089 	bgt.w	802a090 <_vfprintf_r+0x10a8>
 8029f7e:	3408      	adds	r4, #8
 8029f80:	f1b9 0f00 	cmp.w	r9, #0
 8029f84:	bfac      	ite	ge
 8029f86:	eba6 0309 	subge.w	r3, r6, r9
 8029f8a:	4633      	movlt	r3, r6
 8029f8c:	2b00      	cmp	r3, #0
 8029f8e:	9306      	str	r3, [sp, #24]
 8029f90:	dd1c      	ble.n	8029fcc <_vfprintf_r+0xfe4>
 8029f92:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 802a2f8 <_vfprintf_r+0x1310>
 8029f96:	9806      	ldr	r0, [sp, #24]
 8029f98:	f8c4 9000 	str.w	r9, [r4]
 8029f9c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8029fa0:	2810      	cmp	r0, #16
 8029fa2:	f102 0201 	add.w	r2, r2, #1
 8029fa6:	f104 0108 	add.w	r1, r4, #8
 8029faa:	dc7b      	bgt.n	802a0a4 <_vfprintf_r+0x10bc>
 8029fac:	4403      	add	r3, r0
 8029fae:	2a07      	cmp	r2, #7
 8029fb0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8029fb4:	6060      	str	r0, [r4, #4]
 8029fb6:	f340 808a 	ble.w	802a0ce <_vfprintf_r+0x10e6>
 8029fba:	9803      	ldr	r0, [sp, #12]
 8029fbc:	aa26      	add	r2, sp, #152	@ 0x98
 8029fbe:	4659      	mov	r1, fp
 8029fc0:	f000 fa7e 	bl	802a4c0 <__sprint_r>
 8029fc4:	2800      	cmp	r0, #0
 8029fc6:	f040 81d6 	bne.w	802a376 <_vfprintf_r+0x138e>
 8029fca:	ac29      	add	r4, sp, #164	@ 0xa4
 8029fcc:	056a      	lsls	r2, r5, #21
 8029fce:	44b0      	add	r8, r6
 8029fd0:	d508      	bpl.n	8029fe4 <_vfprintf_r+0xffc>
 8029fd2:	9b08      	ldr	r3, [sp, #32]
 8029fd4:	2b00      	cmp	r3, #0
 8029fd6:	d17c      	bne.n	802a0d2 <_vfprintf_r+0x10ea>
 8029fd8:	2f00      	cmp	r7, #0
 8029fda:	d17c      	bne.n	802a0d6 <_vfprintf_r+0x10ee>
 8029fdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029fde:	4598      	cmp	r8, r3
 8029fe0:	bf28      	it	cs
 8029fe2:	4698      	movcs	r8, r3
 8029fe4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029fe6:	9a04      	ldr	r2, [sp, #16]
 8029fe8:	4293      	cmp	r3, r2
 8029fea:	db01      	blt.n	8029ff0 <_vfprintf_r+0x1008>
 8029fec:	07eb      	lsls	r3, r5, #31
 8029fee:	d50e      	bpl.n	802a00e <_vfprintf_r+0x1026>
 8029ff0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029ff2:	6023      	str	r3, [r4, #0]
 8029ff4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029ff6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029ff8:	6063      	str	r3, [r4, #4]
 8029ffa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029ffc:	4413      	add	r3, r2
 8029ffe:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a000:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a002:	3301      	adds	r3, #1
 802a004:	2b07      	cmp	r3, #7
 802a006:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a008:	f300 80e1 	bgt.w	802a1ce <_vfprintf_r+0x11e6>
 802a00c:	3408      	adds	r4, #8
 802a00e:	9b04      	ldr	r3, [sp, #16]
 802a010:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802a012:	1bdf      	subs	r7, r3, r7
 802a014:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a016:	eba3 0308 	sub.w	r3, r3, r8
 802a01a:	429f      	cmp	r7, r3
 802a01c:	bfa8      	it	ge
 802a01e:	461f      	movge	r7, r3
 802a020:	2f00      	cmp	r7, #0
 802a022:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a024:	dd0a      	ble.n	802a03c <_vfprintf_r+0x1054>
 802a026:	443b      	add	r3, r7
 802a028:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a02a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a02c:	3301      	adds	r3, #1
 802a02e:	2b07      	cmp	r3, #7
 802a030:	e9c4 8700 	strd	r8, r7, [r4]
 802a034:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a036:	f300 80d4 	bgt.w	802a1e2 <_vfprintf_r+0x11fa>
 802a03a:	3408      	adds	r4, #8
 802a03c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a03e:	9b04      	ldr	r3, [sp, #16]
 802a040:	2f00      	cmp	r7, #0
 802a042:	eba3 0606 	sub.w	r6, r3, r6
 802a046:	bfa8      	it	ge
 802a048:	1bf6      	subge	r6, r6, r7
 802a04a:	2e00      	cmp	r6, #0
 802a04c:	f77f ac22 	ble.w	8029894 <_vfprintf_r+0x8ac>
 802a050:	4fa9      	ldr	r7, [pc, #676]	@ (802a2f8 <_vfprintf_r+0x1310>)
 802a052:	f04f 0810 	mov.w	r8, #16
 802a056:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a05a:	2e10      	cmp	r6, #16
 802a05c:	f103 0301 	add.w	r3, r3, #1
 802a060:	f104 0108 	add.w	r1, r4, #8
 802a064:	6027      	str	r7, [r4, #0]
 802a066:	f77f aebc 	ble.w	8029de2 <_vfprintf_r+0xdfa>
 802a06a:	3210      	adds	r2, #16
 802a06c:	2b07      	cmp	r3, #7
 802a06e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802a072:	f8c4 8004 	str.w	r8, [r4, #4]
 802a076:	dd08      	ble.n	802a08a <_vfprintf_r+0x10a2>
 802a078:	9803      	ldr	r0, [sp, #12]
 802a07a:	aa26      	add	r2, sp, #152	@ 0x98
 802a07c:	4659      	mov	r1, fp
 802a07e:	f000 fa1f 	bl	802a4c0 <__sprint_r>
 802a082:	2800      	cmp	r0, #0
 802a084:	f040 8177 	bne.w	802a376 <_vfprintf_r+0x138e>
 802a088:	a929      	add	r1, sp, #164	@ 0xa4
 802a08a:	3e10      	subs	r6, #16
 802a08c:	460c      	mov	r4, r1
 802a08e:	e7e2      	b.n	802a056 <_vfprintf_r+0x106e>
 802a090:	9803      	ldr	r0, [sp, #12]
 802a092:	aa26      	add	r2, sp, #152	@ 0x98
 802a094:	4659      	mov	r1, fp
 802a096:	f000 fa13 	bl	802a4c0 <__sprint_r>
 802a09a:	2800      	cmp	r0, #0
 802a09c:	f040 816b 	bne.w	802a376 <_vfprintf_r+0x138e>
 802a0a0:	ac29      	add	r4, sp, #164	@ 0xa4
 802a0a2:	e76d      	b.n	8029f80 <_vfprintf_r+0xf98>
 802a0a4:	2010      	movs	r0, #16
 802a0a6:	4403      	add	r3, r0
 802a0a8:	2a07      	cmp	r2, #7
 802a0aa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a0ae:	6060      	str	r0, [r4, #4]
 802a0b0:	dd08      	ble.n	802a0c4 <_vfprintf_r+0x10dc>
 802a0b2:	9803      	ldr	r0, [sp, #12]
 802a0b4:	aa26      	add	r2, sp, #152	@ 0x98
 802a0b6:	4659      	mov	r1, fp
 802a0b8:	f000 fa02 	bl	802a4c0 <__sprint_r>
 802a0bc:	2800      	cmp	r0, #0
 802a0be:	f040 815a 	bne.w	802a376 <_vfprintf_r+0x138e>
 802a0c2:	a929      	add	r1, sp, #164	@ 0xa4
 802a0c4:	9b06      	ldr	r3, [sp, #24]
 802a0c6:	3b10      	subs	r3, #16
 802a0c8:	9306      	str	r3, [sp, #24]
 802a0ca:	460c      	mov	r4, r1
 802a0cc:	e763      	b.n	8029f96 <_vfprintf_r+0xfae>
 802a0ce:	460c      	mov	r4, r1
 802a0d0:	e77c      	b.n	8029fcc <_vfprintf_r+0xfe4>
 802a0d2:	2f00      	cmp	r7, #0
 802a0d4:	d04b      	beq.n	802a16e <_vfprintf_r+0x1186>
 802a0d6:	3f01      	subs	r7, #1
 802a0d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a0da:	6023      	str	r3, [r4, #0]
 802a0dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a0de:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a0e0:	6063      	str	r3, [r4, #4]
 802a0e2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a0e4:	4413      	add	r3, r2
 802a0e6:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a0e8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a0ea:	3301      	adds	r3, #1
 802a0ec:	2b07      	cmp	r3, #7
 802a0ee:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a0f0:	dc44      	bgt.n	802a17c <_vfprintf_r+0x1194>
 802a0f2:	3408      	adds	r4, #8
 802a0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a0f6:	f893 9000 	ldrb.w	r9, [r3]
 802a0fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a0fc:	eba3 0308 	sub.w	r3, r3, r8
 802a100:	4599      	cmp	r9, r3
 802a102:	bfa8      	it	ge
 802a104:	4699      	movge	r9, r3
 802a106:	f1b9 0f00 	cmp.w	r9, #0
 802a10a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a10c:	dd09      	ble.n	802a122 <_vfprintf_r+0x113a>
 802a10e:	444b      	add	r3, r9
 802a110:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a112:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a114:	3301      	adds	r3, #1
 802a116:	2b07      	cmp	r3, #7
 802a118:	e9c4 8900 	strd	r8, r9, [r4]
 802a11c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a11e:	dc37      	bgt.n	802a190 <_vfprintf_r+0x11a8>
 802a120:	3408      	adds	r4, #8
 802a122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a124:	781e      	ldrb	r6, [r3, #0]
 802a126:	f1b9 0f00 	cmp.w	r9, #0
 802a12a:	bfa8      	it	ge
 802a12c:	eba6 0609 	subge.w	r6, r6, r9
 802a130:	2e00      	cmp	r6, #0
 802a132:	dd18      	ble.n	802a166 <_vfprintf_r+0x117e>
 802a134:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a138:	486f      	ldr	r0, [pc, #444]	@ (802a2f8 <_vfprintf_r+0x1310>)
 802a13a:	6020      	str	r0, [r4, #0]
 802a13c:	2e10      	cmp	r6, #16
 802a13e:	f103 0301 	add.w	r3, r3, #1
 802a142:	f104 0108 	add.w	r1, r4, #8
 802a146:	dc2d      	bgt.n	802a1a4 <_vfprintf_r+0x11bc>
 802a148:	6066      	str	r6, [r4, #4]
 802a14a:	2b07      	cmp	r3, #7
 802a14c:	4416      	add	r6, r2
 802a14e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802a152:	dd3a      	ble.n	802a1ca <_vfprintf_r+0x11e2>
 802a154:	9803      	ldr	r0, [sp, #12]
 802a156:	aa26      	add	r2, sp, #152	@ 0x98
 802a158:	4659      	mov	r1, fp
 802a15a:	f000 f9b1 	bl	802a4c0 <__sprint_r>
 802a15e:	2800      	cmp	r0, #0
 802a160:	f040 8109 	bne.w	802a376 <_vfprintf_r+0x138e>
 802a164:	ac29      	add	r4, sp, #164	@ 0xa4
 802a166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a168:	781b      	ldrb	r3, [r3, #0]
 802a16a:	4498      	add	r8, r3
 802a16c:	e731      	b.n	8029fd2 <_vfprintf_r+0xfea>
 802a16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a170:	3b01      	subs	r3, #1
 802a172:	9309      	str	r3, [sp, #36]	@ 0x24
 802a174:	9b08      	ldr	r3, [sp, #32]
 802a176:	3b01      	subs	r3, #1
 802a178:	9308      	str	r3, [sp, #32]
 802a17a:	e7ad      	b.n	802a0d8 <_vfprintf_r+0x10f0>
 802a17c:	9803      	ldr	r0, [sp, #12]
 802a17e:	aa26      	add	r2, sp, #152	@ 0x98
 802a180:	4659      	mov	r1, fp
 802a182:	f000 f99d 	bl	802a4c0 <__sprint_r>
 802a186:	2800      	cmp	r0, #0
 802a188:	f040 80f5 	bne.w	802a376 <_vfprintf_r+0x138e>
 802a18c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a18e:	e7b1      	b.n	802a0f4 <_vfprintf_r+0x110c>
 802a190:	9803      	ldr	r0, [sp, #12]
 802a192:	aa26      	add	r2, sp, #152	@ 0x98
 802a194:	4659      	mov	r1, fp
 802a196:	f000 f993 	bl	802a4c0 <__sprint_r>
 802a19a:	2800      	cmp	r0, #0
 802a19c:	f040 80eb 	bne.w	802a376 <_vfprintf_r+0x138e>
 802a1a0:	ac29      	add	r4, sp, #164	@ 0xa4
 802a1a2:	e7be      	b.n	802a122 <_vfprintf_r+0x113a>
 802a1a4:	2010      	movs	r0, #16
 802a1a6:	4402      	add	r2, r0
 802a1a8:	2b07      	cmp	r3, #7
 802a1aa:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802a1ae:	6060      	str	r0, [r4, #4]
 802a1b0:	dd08      	ble.n	802a1c4 <_vfprintf_r+0x11dc>
 802a1b2:	9803      	ldr	r0, [sp, #12]
 802a1b4:	aa26      	add	r2, sp, #152	@ 0x98
 802a1b6:	4659      	mov	r1, fp
 802a1b8:	f000 f982 	bl	802a4c0 <__sprint_r>
 802a1bc:	2800      	cmp	r0, #0
 802a1be:	f040 80da 	bne.w	802a376 <_vfprintf_r+0x138e>
 802a1c2:	a929      	add	r1, sp, #164	@ 0xa4
 802a1c4:	3e10      	subs	r6, #16
 802a1c6:	460c      	mov	r4, r1
 802a1c8:	e7b4      	b.n	802a134 <_vfprintf_r+0x114c>
 802a1ca:	460c      	mov	r4, r1
 802a1cc:	e7cb      	b.n	802a166 <_vfprintf_r+0x117e>
 802a1ce:	9803      	ldr	r0, [sp, #12]
 802a1d0:	aa26      	add	r2, sp, #152	@ 0x98
 802a1d2:	4659      	mov	r1, fp
 802a1d4:	f000 f974 	bl	802a4c0 <__sprint_r>
 802a1d8:	2800      	cmp	r0, #0
 802a1da:	f040 80cc 	bne.w	802a376 <_vfprintf_r+0x138e>
 802a1de:	ac29      	add	r4, sp, #164	@ 0xa4
 802a1e0:	e715      	b.n	802a00e <_vfprintf_r+0x1026>
 802a1e2:	9803      	ldr	r0, [sp, #12]
 802a1e4:	aa26      	add	r2, sp, #152	@ 0x98
 802a1e6:	4659      	mov	r1, fp
 802a1e8:	f000 f96a 	bl	802a4c0 <__sprint_r>
 802a1ec:	2800      	cmp	r0, #0
 802a1ee:	f040 80c2 	bne.w	802a376 <_vfprintf_r+0x138e>
 802a1f2:	ac29      	add	r4, sp, #164	@ 0xa4
 802a1f4:	e722      	b.n	802a03c <_vfprintf_r+0x1054>
 802a1f6:	9904      	ldr	r1, [sp, #16]
 802a1f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a1fa:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802a1fc:	2901      	cmp	r1, #1
 802a1fe:	f103 0301 	add.w	r3, r3, #1
 802a202:	f102 0201 	add.w	r2, r2, #1
 802a206:	f104 0608 	add.w	r6, r4, #8
 802a20a:	dc02      	bgt.n	802a212 <_vfprintf_r+0x122a>
 802a20c:	07ef      	lsls	r7, r5, #31
 802a20e:	f140 8086 	bpl.w	802a31e <_vfprintf_r+0x1336>
 802a212:	2101      	movs	r1, #1
 802a214:	2a07      	cmp	r2, #7
 802a216:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a21a:	f8c4 8000 	str.w	r8, [r4]
 802a21e:	6061      	str	r1, [r4, #4]
 802a220:	dd08      	ble.n	802a234 <_vfprintf_r+0x124c>
 802a222:	9803      	ldr	r0, [sp, #12]
 802a224:	aa26      	add	r2, sp, #152	@ 0x98
 802a226:	4659      	mov	r1, fp
 802a228:	f000 f94a 	bl	802a4c0 <__sprint_r>
 802a22c:	2800      	cmp	r0, #0
 802a22e:	f040 80a2 	bne.w	802a376 <_vfprintf_r+0x138e>
 802a232:	ae29      	add	r6, sp, #164	@ 0xa4
 802a234:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a236:	6033      	str	r3, [r6, #0]
 802a238:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a23a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a23c:	6073      	str	r3, [r6, #4]
 802a23e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a240:	4413      	add	r3, r2
 802a242:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a244:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a246:	3301      	adds	r3, #1
 802a248:	2b07      	cmp	r3, #7
 802a24a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a24c:	dc33      	bgt.n	802a2b6 <_vfprintf_r+0x12ce>
 802a24e:	3608      	adds	r6, #8
 802a250:	9b04      	ldr	r3, [sp, #16]
 802a252:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802a256:	1e5c      	subs	r4, r3, #1
 802a258:	2200      	movs	r2, #0
 802a25a:	2300      	movs	r3, #0
 802a25c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 802a260:	f7e6 fc4a 	bl	8010af8 <__aeabi_dcmpeq>
 802a264:	2800      	cmp	r0, #0
 802a266:	d12f      	bne.n	802a2c8 <_vfprintf_r+0x12e0>
 802a268:	f108 0201 	add.w	r2, r8, #1
 802a26c:	e9c6 2400 	strd	r2, r4, [r6]
 802a270:	9a04      	ldr	r2, [sp, #16]
 802a272:	f109 0301 	add.w	r3, r9, #1
 802a276:	3f01      	subs	r7, #1
 802a278:	4417      	add	r7, r2
 802a27a:	2b07      	cmp	r3, #7
 802a27c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802a280:	dd56      	ble.n	802a330 <_vfprintf_r+0x1348>
 802a282:	9803      	ldr	r0, [sp, #12]
 802a284:	aa26      	add	r2, sp, #152	@ 0x98
 802a286:	4659      	mov	r1, fp
 802a288:	f000 f91a 	bl	802a4c0 <__sprint_r>
 802a28c:	2800      	cmp	r0, #0
 802a28e:	d172      	bne.n	802a376 <_vfprintf_r+0x138e>
 802a290:	ae29      	add	r6, sp, #164	@ 0xa4
 802a292:	ab22      	add	r3, sp, #136	@ 0x88
 802a294:	6033      	str	r3, [r6, #0]
 802a296:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a298:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802a29a:	6073      	str	r3, [r6, #4]
 802a29c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a29e:	4413      	add	r3, r2
 802a2a0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a2a2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a2a4:	3301      	adds	r3, #1
 802a2a6:	2b07      	cmp	r3, #7
 802a2a8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a2aa:	f73f ada1 	bgt.w	8029df0 <_vfprintf_r+0xe08>
 802a2ae:	f106 0408 	add.w	r4, r6, #8
 802a2b2:	f7ff baef 	b.w	8029894 <_vfprintf_r+0x8ac>
 802a2b6:	9803      	ldr	r0, [sp, #12]
 802a2b8:	aa26      	add	r2, sp, #152	@ 0x98
 802a2ba:	4659      	mov	r1, fp
 802a2bc:	f000 f900 	bl	802a4c0 <__sprint_r>
 802a2c0:	2800      	cmp	r0, #0
 802a2c2:	d158      	bne.n	802a376 <_vfprintf_r+0x138e>
 802a2c4:	ae29      	add	r6, sp, #164	@ 0xa4
 802a2c6:	e7c3      	b.n	802a250 <_vfprintf_r+0x1268>
 802a2c8:	9b04      	ldr	r3, [sp, #16]
 802a2ca:	2b01      	cmp	r3, #1
 802a2cc:	dde1      	ble.n	802a292 <_vfprintf_r+0x12aa>
 802a2ce:	4f0a      	ldr	r7, [pc, #40]	@ (802a2f8 <_vfprintf_r+0x1310>)
 802a2d0:	f04f 0810 	mov.w	r8, #16
 802a2d4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a2d8:	2c10      	cmp	r4, #16
 802a2da:	f103 0301 	add.w	r3, r3, #1
 802a2de:	f106 0108 	add.w	r1, r6, #8
 802a2e2:	6037      	str	r7, [r6, #0]
 802a2e4:	dc0a      	bgt.n	802a2fc <_vfprintf_r+0x1314>
 802a2e6:	6074      	str	r4, [r6, #4]
 802a2e8:	2b07      	cmp	r3, #7
 802a2ea:	4414      	add	r4, r2
 802a2ec:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802a2f0:	dcc7      	bgt.n	802a282 <_vfprintf_r+0x129a>
 802a2f2:	460e      	mov	r6, r1
 802a2f4:	e7cd      	b.n	802a292 <_vfprintf_r+0x12aa>
 802a2f6:	bf00      	nop
 802a2f8:	0803a733 	.word	0x0803a733
 802a2fc:	3210      	adds	r2, #16
 802a2fe:	2b07      	cmp	r3, #7
 802a300:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802a304:	f8c6 8004 	str.w	r8, [r6, #4]
 802a308:	dd06      	ble.n	802a318 <_vfprintf_r+0x1330>
 802a30a:	9803      	ldr	r0, [sp, #12]
 802a30c:	aa26      	add	r2, sp, #152	@ 0x98
 802a30e:	4659      	mov	r1, fp
 802a310:	f000 f8d6 	bl	802a4c0 <__sprint_r>
 802a314:	bb78      	cbnz	r0, 802a376 <_vfprintf_r+0x138e>
 802a316:	a929      	add	r1, sp, #164	@ 0xa4
 802a318:	3c10      	subs	r4, #16
 802a31a:	460e      	mov	r6, r1
 802a31c:	e7da      	b.n	802a2d4 <_vfprintf_r+0x12ec>
 802a31e:	2101      	movs	r1, #1
 802a320:	2a07      	cmp	r2, #7
 802a322:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a326:	f8c4 8000 	str.w	r8, [r4]
 802a32a:	6061      	str	r1, [r4, #4]
 802a32c:	ddb1      	ble.n	802a292 <_vfprintf_r+0x12aa>
 802a32e:	e7a8      	b.n	802a282 <_vfprintf_r+0x129a>
 802a330:	3608      	adds	r6, #8
 802a332:	e7ae      	b.n	802a292 <_vfprintf_r+0x12aa>
 802a334:	460c      	mov	r4, r1
 802a336:	f7ff baad 	b.w	8029894 <_vfprintf_r+0x8ac>
 802a33a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a33c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a33e:	1a9d      	subs	r5, r3, r2
 802a340:	2d00      	cmp	r5, #0
 802a342:	f77f aaaa 	ble.w	802989a <_vfprintf_r+0x8b2>
 802a346:	4e3d      	ldr	r6, [pc, #244]	@ (802a43c <_vfprintf_r+0x1454>)
 802a348:	2710      	movs	r7, #16
 802a34a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a34e:	2d10      	cmp	r5, #16
 802a350:	f103 0301 	add.w	r3, r3, #1
 802a354:	6026      	str	r6, [r4, #0]
 802a356:	dc18      	bgt.n	802a38a <_vfprintf_r+0x13a2>
 802a358:	6065      	str	r5, [r4, #4]
 802a35a:	2b07      	cmp	r3, #7
 802a35c:	4415      	add	r5, r2
 802a35e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 802a362:	f77f aa9a 	ble.w	802989a <_vfprintf_r+0x8b2>
 802a366:	9803      	ldr	r0, [sp, #12]
 802a368:	aa26      	add	r2, sp, #152	@ 0x98
 802a36a:	4659      	mov	r1, fp
 802a36c:	f000 f8a8 	bl	802a4c0 <__sprint_r>
 802a370:	2800      	cmp	r0, #0
 802a372:	f43f aa92 	beq.w	802989a <_vfprintf_r+0x8b2>
 802a376:	f1ba 0f00 	cmp.w	sl, #0
 802a37a:	f43f a892 	beq.w	80294a2 <_vfprintf_r+0x4ba>
 802a37e:	9803      	ldr	r0, [sp, #12]
 802a380:	4651      	mov	r1, sl
 802a382:	f003 fc7b 	bl	802dc7c <_free_r>
 802a386:	f7ff b88c 	b.w	80294a2 <_vfprintf_r+0x4ba>
 802a38a:	3210      	adds	r2, #16
 802a38c:	2b07      	cmp	r3, #7
 802a38e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802a392:	6067      	str	r7, [r4, #4]
 802a394:	dc02      	bgt.n	802a39c <_vfprintf_r+0x13b4>
 802a396:	3408      	adds	r4, #8
 802a398:	3d10      	subs	r5, #16
 802a39a:	e7d6      	b.n	802a34a <_vfprintf_r+0x1362>
 802a39c:	9803      	ldr	r0, [sp, #12]
 802a39e:	aa26      	add	r2, sp, #152	@ 0x98
 802a3a0:	4659      	mov	r1, fp
 802a3a2:	f000 f88d 	bl	802a4c0 <__sprint_r>
 802a3a6:	2800      	cmp	r0, #0
 802a3a8:	d1e5      	bne.n	802a376 <_vfprintf_r+0x138e>
 802a3aa:	ac29      	add	r4, sp, #164	@ 0xa4
 802a3ac:	e7f4      	b.n	802a398 <_vfprintf_r+0x13b0>
 802a3ae:	9803      	ldr	r0, [sp, #12]
 802a3b0:	4651      	mov	r1, sl
 802a3b2:	f003 fc63 	bl	802dc7c <_free_r>
 802a3b6:	f7ff ba88 	b.w	80298ca <_vfprintf_r+0x8e2>
 802a3ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a3bc:	b91b      	cbnz	r3, 802a3c6 <_vfprintf_r+0x13de>
 802a3be:	2300      	movs	r3, #0
 802a3c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a3c2:	f7ff b86e 	b.w	80294a2 <_vfprintf_r+0x4ba>
 802a3c6:	9803      	ldr	r0, [sp, #12]
 802a3c8:	aa26      	add	r2, sp, #152	@ 0x98
 802a3ca:	4659      	mov	r1, fp
 802a3cc:	f000 f878 	bl	802a4c0 <__sprint_r>
 802a3d0:	2800      	cmp	r0, #0
 802a3d2:	d0f4      	beq.n	802a3be <_vfprintf_r+0x13d6>
 802a3d4:	f7ff b865 	b.w	80294a2 <_vfprintf_r+0x4ba>
 802a3d8:	ea56 0207 	orrs.w	r2, r6, r7
 802a3dc:	9508      	str	r5, [sp, #32]
 802a3de:	f43f ab75 	beq.w	8029acc <_vfprintf_r+0xae4>
 802a3e2:	2b01      	cmp	r3, #1
 802a3e4:	f43f abf6 	beq.w	8029bd4 <_vfprintf_r+0xbec>
 802a3e8:	2b02      	cmp	r3, #2
 802a3ea:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802a3ee:	f43f ac3a 	beq.w	8029c66 <_vfprintf_r+0xc7e>
 802a3f2:	f006 0307 	and.w	r3, r6, #7
 802a3f6:	08f6      	lsrs	r6, r6, #3
 802a3f8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802a3fc:	08ff      	lsrs	r7, r7, #3
 802a3fe:	3330      	adds	r3, #48	@ 0x30
 802a400:	ea56 0107 	orrs.w	r1, r6, r7
 802a404:	4642      	mov	r2, r8
 802a406:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802a40a:	d1f2      	bne.n	802a3f2 <_vfprintf_r+0x140a>
 802a40c:	9908      	ldr	r1, [sp, #32]
 802a40e:	07ce      	lsls	r6, r1, #31
 802a410:	d506      	bpl.n	802a420 <_vfprintf_r+0x1438>
 802a412:	2b30      	cmp	r3, #48	@ 0x30
 802a414:	d004      	beq.n	802a420 <_vfprintf_r+0x1438>
 802a416:	2330      	movs	r3, #48	@ 0x30
 802a418:	f808 3c01 	strb.w	r3, [r8, #-1]
 802a41c:	f1a2 0802 	sub.w	r8, r2, #2
 802a420:	ab52      	add	r3, sp, #328	@ 0x148
 802a422:	9d08      	ldr	r5, [sp, #32]
 802a424:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 802a428:	f04f 0a00 	mov.w	sl, #0
 802a42c:	eba3 0908 	sub.w	r9, r3, r8
 802a430:	4657      	mov	r7, sl
 802a432:	f8cd a020 	str.w	sl, [sp, #32]
 802a436:	4656      	mov	r6, sl
 802a438:	f7ff b978 	b.w	802972c <_vfprintf_r+0x744>
 802a43c:	0803a743 	.word	0x0803a743

0802a440 <__sbprintf>:
 802a440:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a442:	461f      	mov	r7, r3
 802a444:	898b      	ldrh	r3, [r1, #12]
 802a446:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802a44a:	f023 0302 	bic.w	r3, r3, #2
 802a44e:	f8ad 300c 	strh.w	r3, [sp, #12]
 802a452:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802a454:	9319      	str	r3, [sp, #100]	@ 0x64
 802a456:	89cb      	ldrh	r3, [r1, #14]
 802a458:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a45c:	69cb      	ldr	r3, [r1, #28]
 802a45e:	9307      	str	r3, [sp, #28]
 802a460:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802a462:	9309      	str	r3, [sp, #36]	@ 0x24
 802a464:	ab1a      	add	r3, sp, #104	@ 0x68
 802a466:	9300      	str	r3, [sp, #0]
 802a468:	9304      	str	r3, [sp, #16]
 802a46a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802a46e:	4615      	mov	r5, r2
 802a470:	4606      	mov	r6, r0
 802a472:	9302      	str	r3, [sp, #8]
 802a474:	9305      	str	r3, [sp, #20]
 802a476:	a816      	add	r0, sp, #88	@ 0x58
 802a478:	2300      	movs	r3, #0
 802a47a:	460c      	mov	r4, r1
 802a47c:	9306      	str	r3, [sp, #24]
 802a47e:	f002 fcf5 	bl	802ce6c <__retarget_lock_init_recursive>
 802a482:	462a      	mov	r2, r5
 802a484:	463b      	mov	r3, r7
 802a486:	4669      	mov	r1, sp
 802a488:	4630      	mov	r0, r6
 802a48a:	f7fe fdad 	bl	8028fe8 <_vfprintf_r>
 802a48e:	1e05      	subs	r5, r0, #0
 802a490:	db07      	blt.n	802a4a2 <__sbprintf+0x62>
 802a492:	4669      	mov	r1, sp
 802a494:	4630      	mov	r0, r6
 802a496:	f000 fecb 	bl	802b230 <_fflush_r>
 802a49a:	2800      	cmp	r0, #0
 802a49c:	bf18      	it	ne
 802a49e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802a4a2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802a4a6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802a4a8:	065b      	lsls	r3, r3, #25
 802a4aa:	bf42      	ittt	mi
 802a4ac:	89a3      	ldrhmi	r3, [r4, #12]
 802a4ae:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802a4b2:	81a3      	strhmi	r3, [r4, #12]
 802a4b4:	f002 fcdb 	bl	802ce6e <__retarget_lock_close_recursive>
 802a4b8:	4628      	mov	r0, r5
 802a4ba:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802a4be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802a4c0 <__sprint_r>:
 802a4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a4c4:	6893      	ldr	r3, [r2, #8]
 802a4c6:	4680      	mov	r8, r0
 802a4c8:	460e      	mov	r6, r1
 802a4ca:	4614      	mov	r4, r2
 802a4cc:	b343      	cbz	r3, 802a520 <__sprint_r+0x60>
 802a4ce:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802a4d0:	049d      	lsls	r5, r3, #18
 802a4d2:	d522      	bpl.n	802a51a <__sprint_r+0x5a>
 802a4d4:	6815      	ldr	r5, [r2, #0]
 802a4d6:	68a0      	ldr	r0, [r4, #8]
 802a4d8:	3508      	adds	r5, #8
 802a4da:	b928      	cbnz	r0, 802a4e8 <__sprint_r+0x28>
 802a4dc:	2300      	movs	r3, #0
 802a4de:	60a3      	str	r3, [r4, #8]
 802a4e0:	2300      	movs	r3, #0
 802a4e2:	6063      	str	r3, [r4, #4]
 802a4e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a4e8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802a4ec:	f04f 0900 	mov.w	r9, #0
 802a4f0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 802a4f4:	45ca      	cmp	sl, r9
 802a4f6:	dc05      	bgt.n	802a504 <__sprint_r+0x44>
 802a4f8:	68a3      	ldr	r3, [r4, #8]
 802a4fa:	f027 0703 	bic.w	r7, r7, #3
 802a4fe:	1bdb      	subs	r3, r3, r7
 802a500:	60a3      	str	r3, [r4, #8]
 802a502:	e7e8      	b.n	802a4d6 <__sprint_r+0x16>
 802a504:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802a508:	4632      	mov	r2, r6
 802a50a:	4640      	mov	r0, r8
 802a50c:	f001 fa35 	bl	802b97a <_fputwc_r>
 802a510:	1c43      	adds	r3, r0, #1
 802a512:	d0e3      	beq.n	802a4dc <__sprint_r+0x1c>
 802a514:	f109 0901 	add.w	r9, r9, #1
 802a518:	e7ec      	b.n	802a4f4 <__sprint_r+0x34>
 802a51a:	f001 f81d 	bl	802b558 <__sfvwrite_r>
 802a51e:	e7dd      	b.n	802a4dc <__sprint_r+0x1c>
 802a520:	4618      	mov	r0, r3
 802a522:	e7dd      	b.n	802a4e0 <__sprint_r+0x20>

0802a524 <_vfiprintf_r>:
 802a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a528:	b0bb      	sub	sp, #236	@ 0xec
 802a52a:	460f      	mov	r7, r1
 802a52c:	4693      	mov	fp, r2
 802a52e:	461c      	mov	r4, r3
 802a530:	461d      	mov	r5, r3
 802a532:	9000      	str	r0, [sp, #0]
 802a534:	b118      	cbz	r0, 802a53e <_vfiprintf_r+0x1a>
 802a536:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802a538:	b90b      	cbnz	r3, 802a53e <_vfiprintf_r+0x1a>
 802a53a:	f000 ffbb 	bl	802b4b4 <__sinit>
 802a53e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802a540:	07db      	lsls	r3, r3, #31
 802a542:	d405      	bmi.n	802a550 <_vfiprintf_r+0x2c>
 802a544:	89bb      	ldrh	r3, [r7, #12]
 802a546:	059e      	lsls	r6, r3, #22
 802a548:	d402      	bmi.n	802a550 <_vfiprintf_r+0x2c>
 802a54a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802a54c:	f002 fc91 	bl	802ce72 <__retarget_lock_acquire_recursive>
 802a550:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802a554:	0498      	lsls	r0, r3, #18
 802a556:	d406      	bmi.n	802a566 <_vfiprintf_r+0x42>
 802a558:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802a55c:	81bb      	strh	r3, [r7, #12]
 802a55e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802a560:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802a564:	667b      	str	r3, [r7, #100]	@ 0x64
 802a566:	89bb      	ldrh	r3, [r7, #12]
 802a568:	0719      	lsls	r1, r3, #28
 802a56a:	d501      	bpl.n	802a570 <_vfiprintf_r+0x4c>
 802a56c:	693b      	ldr	r3, [r7, #16]
 802a56e:	b9ab      	cbnz	r3, 802a59c <_vfiprintf_r+0x78>
 802a570:	9800      	ldr	r0, [sp, #0]
 802a572:	4639      	mov	r1, r7
 802a574:	f001 f95a 	bl	802b82c <__swsetup_r>
 802a578:	b180      	cbz	r0, 802a59c <_vfiprintf_r+0x78>
 802a57a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802a57c:	07da      	lsls	r2, r3, #31
 802a57e:	d506      	bpl.n	802a58e <_vfiprintf_r+0x6a>
 802a580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a584:	9303      	str	r3, [sp, #12]
 802a586:	9803      	ldr	r0, [sp, #12]
 802a588:	b03b      	add	sp, #236	@ 0xec
 802a58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a58e:	89bb      	ldrh	r3, [r7, #12]
 802a590:	059b      	lsls	r3, r3, #22
 802a592:	d4f5      	bmi.n	802a580 <_vfiprintf_r+0x5c>
 802a594:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802a596:	f002 fc6e 	bl	802ce76 <__retarget_lock_release_recursive>
 802a59a:	e7f1      	b.n	802a580 <_vfiprintf_r+0x5c>
 802a59c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802a5a0:	f003 021a 	and.w	r2, r3, #26
 802a5a4:	2a0a      	cmp	r2, #10
 802a5a6:	d114      	bne.n	802a5d2 <_vfiprintf_r+0xae>
 802a5a8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802a5ac:	2a00      	cmp	r2, #0
 802a5ae:	db10      	blt.n	802a5d2 <_vfiprintf_r+0xae>
 802a5b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802a5b2:	07d6      	lsls	r6, r2, #31
 802a5b4:	d404      	bmi.n	802a5c0 <_vfiprintf_r+0x9c>
 802a5b6:	059d      	lsls	r5, r3, #22
 802a5b8:	d402      	bmi.n	802a5c0 <_vfiprintf_r+0x9c>
 802a5ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802a5bc:	f002 fc5b 	bl	802ce76 <__retarget_lock_release_recursive>
 802a5c0:	9800      	ldr	r0, [sp, #0]
 802a5c2:	4623      	mov	r3, r4
 802a5c4:	465a      	mov	r2, fp
 802a5c6:	4639      	mov	r1, r7
 802a5c8:	b03b      	add	sp, #236	@ 0xec
 802a5ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a5ce:	f000 bc31 	b.w	802ae34 <__sbprintf>
 802a5d2:	2300      	movs	r3, #0
 802a5d4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802a5d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802a5dc:	ae11      	add	r6, sp, #68	@ 0x44
 802a5de:	960e      	str	r6, [sp, #56]	@ 0x38
 802a5e0:	9307      	str	r3, [sp, #28]
 802a5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 802a5e4:	9303      	str	r3, [sp, #12]
 802a5e6:	465b      	mov	r3, fp
 802a5e8:	461c      	mov	r4, r3
 802a5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a5ee:	b10a      	cbz	r2, 802a5f4 <_vfiprintf_r+0xd0>
 802a5f0:	2a25      	cmp	r2, #37	@ 0x25
 802a5f2:	d1f9      	bne.n	802a5e8 <_vfiprintf_r+0xc4>
 802a5f4:	ebb4 080b 	subs.w	r8, r4, fp
 802a5f8:	d00d      	beq.n	802a616 <_vfiprintf_r+0xf2>
 802a5fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a5fc:	4443      	add	r3, r8
 802a5fe:	9310      	str	r3, [sp, #64]	@ 0x40
 802a600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802a602:	3301      	adds	r3, #1
 802a604:	2b07      	cmp	r3, #7
 802a606:	e9c6 b800 	strd	fp, r8, [r6]
 802a60a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a60c:	dc75      	bgt.n	802a6fa <_vfiprintf_r+0x1d6>
 802a60e:	3608      	adds	r6, #8
 802a610:	9b03      	ldr	r3, [sp, #12]
 802a612:	4443      	add	r3, r8
 802a614:	9303      	str	r3, [sp, #12]
 802a616:	7823      	ldrb	r3, [r4, #0]
 802a618:	2b00      	cmp	r3, #0
 802a61a:	f000 83cd 	beq.w	802adb8 <_vfiprintf_r+0x894>
 802a61e:	2300      	movs	r3, #0
 802a620:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a624:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802a628:	3401      	adds	r4, #1
 802a62a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802a62e:	469a      	mov	sl, r3
 802a630:	46a3      	mov	fp, r4
 802a632:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802a636:	f1a3 0220 	sub.w	r2, r3, #32
 802a63a:	2a5a      	cmp	r2, #90	@ 0x5a
 802a63c:	f200 8316 	bhi.w	802ac6c <_vfiprintf_r+0x748>
 802a640:	e8df f012 	tbh	[pc, r2, lsl #1]
 802a644:	0314009a 	.word	0x0314009a
 802a648:	00a20314 	.word	0x00a20314
 802a64c:	03140314 	.word	0x03140314
 802a650:	00820314 	.word	0x00820314
 802a654:	03140314 	.word	0x03140314
 802a658:	00af00a5 	.word	0x00af00a5
 802a65c:	00ac0314 	.word	0x00ac0314
 802a660:	031400b1 	.word	0x031400b1
 802a664:	00d000cd 	.word	0x00d000cd
 802a668:	00d000d0 	.word	0x00d000d0
 802a66c:	00d000d0 	.word	0x00d000d0
 802a670:	00d000d0 	.word	0x00d000d0
 802a674:	00d000d0 	.word	0x00d000d0
 802a678:	03140314 	.word	0x03140314
 802a67c:	03140314 	.word	0x03140314
 802a680:	03140314 	.word	0x03140314
 802a684:	03140314 	.word	0x03140314
 802a688:	00f70314 	.word	0x00f70314
 802a68c:	03140104 	.word	0x03140104
 802a690:	03140314 	.word	0x03140314
 802a694:	03140314 	.word	0x03140314
 802a698:	03140314 	.word	0x03140314
 802a69c:	03140314 	.word	0x03140314
 802a6a0:	01520314 	.word	0x01520314
 802a6a4:	03140314 	.word	0x03140314
 802a6a8:	019a0314 	.word	0x019a0314
 802a6ac:	027a0314 	.word	0x027a0314
 802a6b0:	03140314 	.word	0x03140314
 802a6b4:	0314029a 	.word	0x0314029a
 802a6b8:	03140314 	.word	0x03140314
 802a6bc:	03140314 	.word	0x03140314
 802a6c0:	03140314 	.word	0x03140314
 802a6c4:	03140314 	.word	0x03140314
 802a6c8:	00f70314 	.word	0x00f70314
 802a6cc:	03140106 	.word	0x03140106
 802a6d0:	03140314 	.word	0x03140314
 802a6d4:	010600e0 	.word	0x010600e0
 802a6d8:	031400f1 	.word	0x031400f1
 802a6dc:	031400eb 	.word	0x031400eb
 802a6e0:	01540132 	.word	0x01540132
 802a6e4:	00f10189 	.word	0x00f10189
 802a6e8:	019a0314 	.word	0x019a0314
 802a6ec:	027c0098 	.word	0x027c0098
 802a6f0:	03140314 	.word	0x03140314
 802a6f4:	03140065 	.word	0x03140065
 802a6f8:	0098      	.short	0x0098
 802a6fa:	9800      	ldr	r0, [sp, #0]
 802a6fc:	aa0e      	add	r2, sp, #56	@ 0x38
 802a6fe:	4639      	mov	r1, r7
 802a700:	f7ff fede 	bl	802a4c0 <__sprint_r>
 802a704:	2800      	cmp	r0, #0
 802a706:	f040 8336 	bne.w	802ad76 <_vfiprintf_r+0x852>
 802a70a:	ae11      	add	r6, sp, #68	@ 0x44
 802a70c:	e780      	b.n	802a610 <_vfiprintf_r+0xec>
 802a70e:	4a99      	ldr	r2, [pc, #612]	@ (802a974 <_vfiprintf_r+0x450>)
 802a710:	9205      	str	r2, [sp, #20]
 802a712:	f01a 0220 	ands.w	r2, sl, #32
 802a716:	f000 8231 	beq.w	802ab7c <_vfiprintf_r+0x658>
 802a71a:	3507      	adds	r5, #7
 802a71c:	f025 0507 	bic.w	r5, r5, #7
 802a720:	46a8      	mov	r8, r5
 802a722:	686d      	ldr	r5, [r5, #4]
 802a724:	f858 4b08 	ldr.w	r4, [r8], #8
 802a728:	f01a 0f01 	tst.w	sl, #1
 802a72c:	d009      	beq.n	802a742 <_vfiprintf_r+0x21e>
 802a72e:	ea54 0205 	orrs.w	r2, r4, r5
 802a732:	bf1f      	itttt	ne
 802a734:	2230      	movne	r2, #48	@ 0x30
 802a736:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802a73a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802a73e:	f04a 0a02 	orrne.w	sl, sl, #2
 802a742:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802a746:	e112      	b.n	802a96e <_vfiprintf_r+0x44a>
 802a748:	9800      	ldr	r0, [sp, #0]
 802a74a:	f002 fae7 	bl	802cd1c <_localeconv_r>
 802a74e:	6843      	ldr	r3, [r0, #4]
 802a750:	9309      	str	r3, [sp, #36]	@ 0x24
 802a752:	4618      	mov	r0, r3
 802a754:	f7e5 fda4 	bl	80102a0 <strlen>
 802a758:	9007      	str	r0, [sp, #28]
 802a75a:	9800      	ldr	r0, [sp, #0]
 802a75c:	f002 fade 	bl	802cd1c <_localeconv_r>
 802a760:	6883      	ldr	r3, [r0, #8]
 802a762:	9306      	str	r3, [sp, #24]
 802a764:	9b07      	ldr	r3, [sp, #28]
 802a766:	b12b      	cbz	r3, 802a774 <_vfiprintf_r+0x250>
 802a768:	9b06      	ldr	r3, [sp, #24]
 802a76a:	b11b      	cbz	r3, 802a774 <_vfiprintf_r+0x250>
 802a76c:	781b      	ldrb	r3, [r3, #0]
 802a76e:	b10b      	cbz	r3, 802a774 <_vfiprintf_r+0x250>
 802a770:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 802a774:	465c      	mov	r4, fp
 802a776:	e75b      	b.n	802a630 <_vfiprintf_r+0x10c>
 802a778:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802a77c:	2b00      	cmp	r3, #0
 802a77e:	d1f9      	bne.n	802a774 <_vfiprintf_r+0x250>
 802a780:	2320      	movs	r3, #32
 802a782:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802a786:	e7f5      	b.n	802a774 <_vfiprintf_r+0x250>
 802a788:	f04a 0a01 	orr.w	sl, sl, #1
 802a78c:	e7f2      	b.n	802a774 <_vfiprintf_r+0x250>
 802a78e:	f855 3b04 	ldr.w	r3, [r5], #4
 802a792:	9302      	str	r3, [sp, #8]
 802a794:	2b00      	cmp	r3, #0
 802a796:	daed      	bge.n	802a774 <_vfiprintf_r+0x250>
 802a798:	425b      	negs	r3, r3
 802a79a:	9302      	str	r3, [sp, #8]
 802a79c:	f04a 0a04 	orr.w	sl, sl, #4
 802a7a0:	e7e8      	b.n	802a774 <_vfiprintf_r+0x250>
 802a7a2:	232b      	movs	r3, #43	@ 0x2b
 802a7a4:	e7ed      	b.n	802a782 <_vfiprintf_r+0x25e>
 802a7a6:	465a      	mov	r2, fp
 802a7a8:	f812 3b01 	ldrb.w	r3, [r2], #1
 802a7ac:	2b2a      	cmp	r3, #42	@ 0x2a
 802a7ae:	d112      	bne.n	802a7d6 <_vfiprintf_r+0x2b2>
 802a7b0:	f855 3b04 	ldr.w	r3, [r5], #4
 802a7b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802a7b8:	9301      	str	r3, [sp, #4]
 802a7ba:	4693      	mov	fp, r2
 802a7bc:	e7da      	b.n	802a774 <_vfiprintf_r+0x250>
 802a7be:	9b01      	ldr	r3, [sp, #4]
 802a7c0:	fb00 1303 	mla	r3, r0, r3, r1
 802a7c4:	9301      	str	r3, [sp, #4]
 802a7c6:	f812 3b01 	ldrb.w	r3, [r2], #1
 802a7ca:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802a7ce:	2909      	cmp	r1, #9
 802a7d0:	d9f5      	bls.n	802a7be <_vfiprintf_r+0x29a>
 802a7d2:	4693      	mov	fp, r2
 802a7d4:	e72f      	b.n	802a636 <_vfiprintf_r+0x112>
 802a7d6:	2100      	movs	r1, #0
 802a7d8:	9101      	str	r1, [sp, #4]
 802a7da:	200a      	movs	r0, #10
 802a7dc:	e7f5      	b.n	802a7ca <_vfiprintf_r+0x2a6>
 802a7de:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802a7e2:	e7c7      	b.n	802a774 <_vfiprintf_r+0x250>
 802a7e4:	2100      	movs	r1, #0
 802a7e6:	465a      	mov	r2, fp
 802a7e8:	9102      	str	r1, [sp, #8]
 802a7ea:	200a      	movs	r0, #10
 802a7ec:	9902      	ldr	r1, [sp, #8]
 802a7ee:	3b30      	subs	r3, #48	@ 0x30
 802a7f0:	fb00 3301 	mla	r3, r0, r1, r3
 802a7f4:	9302      	str	r3, [sp, #8]
 802a7f6:	f812 3b01 	ldrb.w	r3, [r2], #1
 802a7fa:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802a7fe:	2909      	cmp	r1, #9
 802a800:	d9f4      	bls.n	802a7ec <_vfiprintf_r+0x2c8>
 802a802:	e7e6      	b.n	802a7d2 <_vfiprintf_r+0x2ae>
 802a804:	f89b 3000 	ldrb.w	r3, [fp]
 802a808:	2b68      	cmp	r3, #104	@ 0x68
 802a80a:	bf06      	itte	eq
 802a80c:	f10b 0b01 	addeq.w	fp, fp, #1
 802a810:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802a814:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 802a818:	e7ac      	b.n	802a774 <_vfiprintf_r+0x250>
 802a81a:	f89b 3000 	ldrb.w	r3, [fp]
 802a81e:	2b6c      	cmp	r3, #108	@ 0x6c
 802a820:	d104      	bne.n	802a82c <_vfiprintf_r+0x308>
 802a822:	f10b 0b01 	add.w	fp, fp, #1
 802a826:	f04a 0a20 	orr.w	sl, sl, #32
 802a82a:	e7a3      	b.n	802a774 <_vfiprintf_r+0x250>
 802a82c:	f04a 0a10 	orr.w	sl, sl, #16
 802a830:	e7a0      	b.n	802a774 <_vfiprintf_r+0x250>
 802a832:	46a8      	mov	r8, r5
 802a834:	2400      	movs	r4, #0
 802a836:	f858 3b04 	ldr.w	r3, [r8], #4
 802a83a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802a83e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802a842:	2301      	movs	r3, #1
 802a844:	9301      	str	r3, [sp, #4]
 802a846:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802a84a:	e0ab      	b.n	802a9a4 <_vfiprintf_r+0x480>
 802a84c:	f04a 0a10 	orr.w	sl, sl, #16
 802a850:	f01a 0f20 	tst.w	sl, #32
 802a854:	d011      	beq.n	802a87a <_vfiprintf_r+0x356>
 802a856:	3507      	adds	r5, #7
 802a858:	f025 0507 	bic.w	r5, r5, #7
 802a85c:	46a8      	mov	r8, r5
 802a85e:	686d      	ldr	r5, [r5, #4]
 802a860:	f858 4b08 	ldr.w	r4, [r8], #8
 802a864:	2d00      	cmp	r5, #0
 802a866:	da06      	bge.n	802a876 <_vfiprintf_r+0x352>
 802a868:	4264      	negs	r4, r4
 802a86a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802a86e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802a872:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802a876:	2301      	movs	r3, #1
 802a878:	e048      	b.n	802a90c <_vfiprintf_r+0x3e8>
 802a87a:	46a8      	mov	r8, r5
 802a87c:	f01a 0f10 	tst.w	sl, #16
 802a880:	f858 5b04 	ldr.w	r5, [r8], #4
 802a884:	d002      	beq.n	802a88c <_vfiprintf_r+0x368>
 802a886:	462c      	mov	r4, r5
 802a888:	17ed      	asrs	r5, r5, #31
 802a88a:	e7eb      	b.n	802a864 <_vfiprintf_r+0x340>
 802a88c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802a890:	d003      	beq.n	802a89a <_vfiprintf_r+0x376>
 802a892:	b22c      	sxth	r4, r5
 802a894:	f345 35c0 	sbfx	r5, r5, #15, #1
 802a898:	e7e4      	b.n	802a864 <_vfiprintf_r+0x340>
 802a89a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802a89e:	d0f2      	beq.n	802a886 <_vfiprintf_r+0x362>
 802a8a0:	b26c      	sxtb	r4, r5
 802a8a2:	f345 15c0 	sbfx	r5, r5, #7, #1
 802a8a6:	e7dd      	b.n	802a864 <_vfiprintf_r+0x340>
 802a8a8:	f01a 0f20 	tst.w	sl, #32
 802a8ac:	d007      	beq.n	802a8be <_vfiprintf_r+0x39a>
 802a8ae:	9a03      	ldr	r2, [sp, #12]
 802a8b0:	682b      	ldr	r3, [r5, #0]
 802a8b2:	9903      	ldr	r1, [sp, #12]
 802a8b4:	17d2      	asrs	r2, r2, #31
 802a8b6:	e9c3 1200 	strd	r1, r2, [r3]
 802a8ba:	3504      	adds	r5, #4
 802a8bc:	e693      	b.n	802a5e6 <_vfiprintf_r+0xc2>
 802a8be:	f01a 0f10 	tst.w	sl, #16
 802a8c2:	d003      	beq.n	802a8cc <_vfiprintf_r+0x3a8>
 802a8c4:	682b      	ldr	r3, [r5, #0]
 802a8c6:	9a03      	ldr	r2, [sp, #12]
 802a8c8:	601a      	str	r2, [r3, #0]
 802a8ca:	e7f6      	b.n	802a8ba <_vfiprintf_r+0x396>
 802a8cc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802a8d0:	d003      	beq.n	802a8da <_vfiprintf_r+0x3b6>
 802a8d2:	682b      	ldr	r3, [r5, #0]
 802a8d4:	9a03      	ldr	r2, [sp, #12]
 802a8d6:	801a      	strh	r2, [r3, #0]
 802a8d8:	e7ef      	b.n	802a8ba <_vfiprintf_r+0x396>
 802a8da:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802a8de:	d0f1      	beq.n	802a8c4 <_vfiprintf_r+0x3a0>
 802a8e0:	682b      	ldr	r3, [r5, #0]
 802a8e2:	9a03      	ldr	r2, [sp, #12]
 802a8e4:	701a      	strb	r2, [r3, #0]
 802a8e6:	e7e8      	b.n	802a8ba <_vfiprintf_r+0x396>
 802a8e8:	f04a 0a10 	orr.w	sl, sl, #16
 802a8ec:	f01a 0320 	ands.w	r3, sl, #32
 802a8f0:	d01f      	beq.n	802a932 <_vfiprintf_r+0x40e>
 802a8f2:	3507      	adds	r5, #7
 802a8f4:	f025 0507 	bic.w	r5, r5, #7
 802a8f8:	46a8      	mov	r8, r5
 802a8fa:	686d      	ldr	r5, [r5, #4]
 802a8fc:	f858 4b08 	ldr.w	r4, [r8], #8
 802a900:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802a904:	2300      	movs	r3, #0
 802a906:	2200      	movs	r2, #0
 802a908:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802a90c:	9a01      	ldr	r2, [sp, #4]
 802a90e:	3201      	adds	r2, #1
 802a910:	f000 825f 	beq.w	802add2 <_vfiprintf_r+0x8ae>
 802a914:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 802a918:	9204      	str	r2, [sp, #16]
 802a91a:	ea54 0205 	orrs.w	r2, r4, r5
 802a91e:	f040 825e 	bne.w	802adde <_vfiprintf_r+0x8ba>
 802a922:	9a01      	ldr	r2, [sp, #4]
 802a924:	2a00      	cmp	r2, #0
 802a926:	f000 8198 	beq.w	802ac5a <_vfiprintf_r+0x736>
 802a92a:	2b01      	cmp	r3, #1
 802a92c:	f040 825a 	bne.w	802ade4 <_vfiprintf_r+0x8c0>
 802a930:	e13b      	b.n	802abaa <_vfiprintf_r+0x686>
 802a932:	46a8      	mov	r8, r5
 802a934:	f01a 0510 	ands.w	r5, sl, #16
 802a938:	f858 4b04 	ldr.w	r4, [r8], #4
 802a93c:	d001      	beq.n	802a942 <_vfiprintf_r+0x41e>
 802a93e:	461d      	mov	r5, r3
 802a940:	e7de      	b.n	802a900 <_vfiprintf_r+0x3dc>
 802a942:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802a946:	d001      	beq.n	802a94c <_vfiprintf_r+0x428>
 802a948:	b2a4      	uxth	r4, r4
 802a94a:	e7d9      	b.n	802a900 <_vfiprintf_r+0x3dc>
 802a94c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802a950:	d0d6      	beq.n	802a900 <_vfiprintf_r+0x3dc>
 802a952:	b2e4      	uxtb	r4, r4
 802a954:	e7f3      	b.n	802a93e <_vfiprintf_r+0x41a>
 802a956:	46a8      	mov	r8, r5
 802a958:	f647 0330 	movw	r3, #30768	@ 0x7830
 802a95c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802a960:	f858 4b04 	ldr.w	r4, [r8], #4
 802a964:	4b03      	ldr	r3, [pc, #12]	@ (802a974 <_vfiprintf_r+0x450>)
 802a966:	9305      	str	r3, [sp, #20]
 802a968:	2500      	movs	r5, #0
 802a96a:	f04a 0a02 	orr.w	sl, sl, #2
 802a96e:	2302      	movs	r3, #2
 802a970:	e7c9      	b.n	802a906 <_vfiprintf_r+0x3e2>
 802a972:	bf00      	nop
 802a974:	0803a70f 	.word	0x0803a70f
 802a978:	9b01      	ldr	r3, [sp, #4]
 802a97a:	46a8      	mov	r8, r5
 802a97c:	1c5c      	adds	r4, r3, #1
 802a97e:	f04f 0500 	mov.w	r5, #0
 802a982:	f858 9b04 	ldr.w	r9, [r8], #4
 802a986:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802a98a:	f000 80d0 	beq.w	802ab2e <_vfiprintf_r+0x60a>
 802a98e:	461a      	mov	r2, r3
 802a990:	4629      	mov	r1, r5
 802a992:	4648      	mov	r0, r9
 802a994:	f7e5 fc34 	bl	8010200 <memchr>
 802a998:	4604      	mov	r4, r0
 802a99a:	b118      	cbz	r0, 802a9a4 <_vfiprintf_r+0x480>
 802a99c:	eba0 0309 	sub.w	r3, r0, r9
 802a9a0:	9301      	str	r3, [sp, #4]
 802a9a2:	462c      	mov	r4, r5
 802a9a4:	9b01      	ldr	r3, [sp, #4]
 802a9a6:	42a3      	cmp	r3, r4
 802a9a8:	bfb8      	it	lt
 802a9aa:	4623      	movlt	r3, r4
 802a9ac:	9304      	str	r3, [sp, #16]
 802a9ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802a9b2:	b113      	cbz	r3, 802a9ba <_vfiprintf_r+0x496>
 802a9b4:	9b04      	ldr	r3, [sp, #16]
 802a9b6:	3301      	adds	r3, #1
 802a9b8:	9304      	str	r3, [sp, #16]
 802a9ba:	f01a 0302 	ands.w	r3, sl, #2
 802a9be:	9308      	str	r3, [sp, #32]
 802a9c0:	bf1e      	ittt	ne
 802a9c2:	9b04      	ldrne	r3, [sp, #16]
 802a9c4:	3302      	addne	r3, #2
 802a9c6:	9304      	strne	r3, [sp, #16]
 802a9c8:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802a9cc:	930a      	str	r3, [sp, #40]	@ 0x28
 802a9ce:	d11f      	bne.n	802aa10 <_vfiprintf_r+0x4ec>
 802a9d0:	9b02      	ldr	r3, [sp, #8]
 802a9d2:	9a04      	ldr	r2, [sp, #16]
 802a9d4:	1a9d      	subs	r5, r3, r2
 802a9d6:	2d00      	cmp	r5, #0
 802a9d8:	dd1a      	ble.n	802aa10 <_vfiprintf_r+0x4ec>
 802a9da:	4ba9      	ldr	r3, [pc, #676]	@ (802ac80 <_vfiprintf_r+0x75c>)
 802a9dc:	6033      	str	r3, [r6, #0]
 802a9de:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802a9e2:	2d10      	cmp	r5, #16
 802a9e4:	f102 0201 	add.w	r2, r2, #1
 802a9e8:	f106 0008 	add.w	r0, r6, #8
 802a9ec:	f300 814e 	bgt.w	802ac8c <_vfiprintf_r+0x768>
 802a9f0:	6075      	str	r5, [r6, #4]
 802a9f2:	2a07      	cmp	r2, #7
 802a9f4:	4465      	add	r5, ip
 802a9f6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802a9fa:	f340 815a 	ble.w	802acb2 <_vfiprintf_r+0x78e>
 802a9fe:	9800      	ldr	r0, [sp, #0]
 802aa00:	aa0e      	add	r2, sp, #56	@ 0x38
 802aa02:	4639      	mov	r1, r7
 802aa04:	f7ff fd5c 	bl	802a4c0 <__sprint_r>
 802aa08:	2800      	cmp	r0, #0
 802aa0a:	f040 81b4 	bne.w	802ad76 <_vfiprintf_r+0x852>
 802aa0e:	ae11      	add	r6, sp, #68	@ 0x44
 802aa10:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802aa14:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802aa18:	b161      	cbz	r1, 802aa34 <_vfiprintf_r+0x510>
 802aa1a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802aa1e:	3301      	adds	r3, #1
 802aa20:	6031      	str	r1, [r6, #0]
 802aa22:	2101      	movs	r1, #1
 802aa24:	440a      	add	r2, r1
 802aa26:	2b07      	cmp	r3, #7
 802aa28:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802aa2c:	6071      	str	r1, [r6, #4]
 802aa2e:	f300 8142 	bgt.w	802acb6 <_vfiprintf_r+0x792>
 802aa32:	3608      	adds	r6, #8
 802aa34:	9908      	ldr	r1, [sp, #32]
 802aa36:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802aa3a:	b159      	cbz	r1, 802aa54 <_vfiprintf_r+0x530>
 802aa3c:	a90d      	add	r1, sp, #52	@ 0x34
 802aa3e:	3301      	adds	r3, #1
 802aa40:	6031      	str	r1, [r6, #0]
 802aa42:	2102      	movs	r1, #2
 802aa44:	440a      	add	r2, r1
 802aa46:	2b07      	cmp	r3, #7
 802aa48:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802aa4c:	6071      	str	r1, [r6, #4]
 802aa4e:	f300 813b 	bgt.w	802acc8 <_vfiprintf_r+0x7a4>
 802aa52:	3608      	adds	r6, #8
 802aa54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aa56:	2b80      	cmp	r3, #128	@ 0x80
 802aa58:	d11f      	bne.n	802aa9a <_vfiprintf_r+0x576>
 802aa5a:	9b02      	ldr	r3, [sp, #8]
 802aa5c:	9a04      	ldr	r2, [sp, #16]
 802aa5e:	1a9d      	subs	r5, r3, r2
 802aa60:	2d00      	cmp	r5, #0
 802aa62:	dd1a      	ble.n	802aa9a <_vfiprintf_r+0x576>
 802aa64:	4b87      	ldr	r3, [pc, #540]	@ (802ac84 <_vfiprintf_r+0x760>)
 802aa66:	6033      	str	r3, [r6, #0]
 802aa68:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802aa6c:	2d10      	cmp	r5, #16
 802aa6e:	f102 0201 	add.w	r2, r2, #1
 802aa72:	f106 0008 	add.w	r0, r6, #8
 802aa76:	f300 8130 	bgt.w	802acda <_vfiprintf_r+0x7b6>
 802aa7a:	6075      	str	r5, [r6, #4]
 802aa7c:	2a07      	cmp	r2, #7
 802aa7e:	4465      	add	r5, ip
 802aa80:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802aa84:	f340 813c 	ble.w	802ad00 <_vfiprintf_r+0x7dc>
 802aa88:	9800      	ldr	r0, [sp, #0]
 802aa8a:	aa0e      	add	r2, sp, #56	@ 0x38
 802aa8c:	4639      	mov	r1, r7
 802aa8e:	f7ff fd17 	bl	802a4c0 <__sprint_r>
 802aa92:	2800      	cmp	r0, #0
 802aa94:	f040 816f 	bne.w	802ad76 <_vfiprintf_r+0x852>
 802aa98:	ae11      	add	r6, sp, #68	@ 0x44
 802aa9a:	9b01      	ldr	r3, [sp, #4]
 802aa9c:	1ae4      	subs	r4, r4, r3
 802aa9e:	2c00      	cmp	r4, #0
 802aaa0:	dd1a      	ble.n	802aad8 <_vfiprintf_r+0x5b4>
 802aaa2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802aaa6:	4877      	ldr	r0, [pc, #476]	@ (802ac84 <_vfiprintf_r+0x760>)
 802aaa8:	6030      	str	r0, [r6, #0]
 802aaaa:	2c10      	cmp	r4, #16
 802aaac:	f103 0301 	add.w	r3, r3, #1
 802aab0:	f106 0108 	add.w	r1, r6, #8
 802aab4:	f300 8126 	bgt.w	802ad04 <_vfiprintf_r+0x7e0>
 802aab8:	6074      	str	r4, [r6, #4]
 802aaba:	2b07      	cmp	r3, #7
 802aabc:	4414      	add	r4, r2
 802aabe:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802aac2:	f340 8130 	ble.w	802ad26 <_vfiprintf_r+0x802>
 802aac6:	9800      	ldr	r0, [sp, #0]
 802aac8:	aa0e      	add	r2, sp, #56	@ 0x38
 802aaca:	4639      	mov	r1, r7
 802aacc:	f7ff fcf8 	bl	802a4c0 <__sprint_r>
 802aad0:	2800      	cmp	r0, #0
 802aad2:	f040 8150 	bne.w	802ad76 <_vfiprintf_r+0x852>
 802aad6:	ae11      	add	r6, sp, #68	@ 0x44
 802aad8:	9b01      	ldr	r3, [sp, #4]
 802aada:	9a01      	ldr	r2, [sp, #4]
 802aadc:	6073      	str	r3, [r6, #4]
 802aade:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802aae0:	f8c6 9000 	str.w	r9, [r6]
 802aae4:	4413      	add	r3, r2
 802aae6:	9310      	str	r3, [sp, #64]	@ 0x40
 802aae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802aaea:	3301      	adds	r3, #1
 802aaec:	2b07      	cmp	r3, #7
 802aaee:	930f      	str	r3, [sp, #60]	@ 0x3c
 802aaf0:	f300 811b 	bgt.w	802ad2a <_vfiprintf_r+0x806>
 802aaf4:	f106 0308 	add.w	r3, r6, #8
 802aaf8:	f01a 0f04 	tst.w	sl, #4
 802aafc:	f040 811d 	bne.w	802ad3a <_vfiprintf_r+0x816>
 802ab00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802ab04:	9904      	ldr	r1, [sp, #16]
 802ab06:	428a      	cmp	r2, r1
 802ab08:	bfac      	ite	ge
 802ab0a:	189b      	addge	r3, r3, r2
 802ab0c:	185b      	addlt	r3, r3, r1
 802ab0e:	9303      	str	r3, [sp, #12]
 802ab10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ab12:	b13b      	cbz	r3, 802ab24 <_vfiprintf_r+0x600>
 802ab14:	9800      	ldr	r0, [sp, #0]
 802ab16:	aa0e      	add	r2, sp, #56	@ 0x38
 802ab18:	4639      	mov	r1, r7
 802ab1a:	f7ff fcd1 	bl	802a4c0 <__sprint_r>
 802ab1e:	2800      	cmp	r0, #0
 802ab20:	f040 8129 	bne.w	802ad76 <_vfiprintf_r+0x852>
 802ab24:	2300      	movs	r3, #0
 802ab26:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ab28:	4645      	mov	r5, r8
 802ab2a:	ae11      	add	r6, sp, #68	@ 0x44
 802ab2c:	e55b      	b.n	802a5e6 <_vfiprintf_r+0xc2>
 802ab2e:	4648      	mov	r0, r9
 802ab30:	f7e5 fbb6 	bl	80102a0 <strlen>
 802ab34:	9001      	str	r0, [sp, #4]
 802ab36:	e734      	b.n	802a9a2 <_vfiprintf_r+0x47e>
 802ab38:	f04a 0a10 	orr.w	sl, sl, #16
 802ab3c:	f01a 0320 	ands.w	r3, sl, #32
 802ab40:	d008      	beq.n	802ab54 <_vfiprintf_r+0x630>
 802ab42:	3507      	adds	r5, #7
 802ab44:	f025 0507 	bic.w	r5, r5, #7
 802ab48:	46a8      	mov	r8, r5
 802ab4a:	686d      	ldr	r5, [r5, #4]
 802ab4c:	f858 4b08 	ldr.w	r4, [r8], #8
 802ab50:	2301      	movs	r3, #1
 802ab52:	e6d8      	b.n	802a906 <_vfiprintf_r+0x3e2>
 802ab54:	46a8      	mov	r8, r5
 802ab56:	f01a 0510 	ands.w	r5, sl, #16
 802ab5a:	f858 4b04 	ldr.w	r4, [r8], #4
 802ab5e:	d001      	beq.n	802ab64 <_vfiprintf_r+0x640>
 802ab60:	461d      	mov	r5, r3
 802ab62:	e7f5      	b.n	802ab50 <_vfiprintf_r+0x62c>
 802ab64:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802ab68:	d001      	beq.n	802ab6e <_vfiprintf_r+0x64a>
 802ab6a:	b2a4      	uxth	r4, r4
 802ab6c:	e7f0      	b.n	802ab50 <_vfiprintf_r+0x62c>
 802ab6e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802ab72:	d0ed      	beq.n	802ab50 <_vfiprintf_r+0x62c>
 802ab74:	b2e4      	uxtb	r4, r4
 802ab76:	e7f3      	b.n	802ab60 <_vfiprintf_r+0x63c>
 802ab78:	4a43      	ldr	r2, [pc, #268]	@ (802ac88 <_vfiprintf_r+0x764>)
 802ab7a:	e5c9      	b.n	802a710 <_vfiprintf_r+0x1ec>
 802ab7c:	46a8      	mov	r8, r5
 802ab7e:	f01a 0510 	ands.w	r5, sl, #16
 802ab82:	f858 4b04 	ldr.w	r4, [r8], #4
 802ab86:	d001      	beq.n	802ab8c <_vfiprintf_r+0x668>
 802ab88:	4615      	mov	r5, r2
 802ab8a:	e5cd      	b.n	802a728 <_vfiprintf_r+0x204>
 802ab8c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802ab90:	d001      	beq.n	802ab96 <_vfiprintf_r+0x672>
 802ab92:	b2a4      	uxth	r4, r4
 802ab94:	e5c8      	b.n	802a728 <_vfiprintf_r+0x204>
 802ab96:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802ab9a:	f43f adc5 	beq.w	802a728 <_vfiprintf_r+0x204>
 802ab9e:	b2e4      	uxtb	r4, r4
 802aba0:	e7f2      	b.n	802ab88 <_vfiprintf_r+0x664>
 802aba2:	2c0a      	cmp	r4, #10
 802aba4:	f175 0300 	sbcs.w	r3, r5, #0
 802aba8:	d206      	bcs.n	802abb8 <_vfiprintf_r+0x694>
 802abaa:	3430      	adds	r4, #48	@ 0x30
 802abac:	b2e4      	uxtb	r4, r4
 802abae:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802abb2:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 802abb6:	e131      	b.n	802ae1c <_vfiprintf_r+0x8f8>
 802abb8:	ab3a      	add	r3, sp, #232	@ 0xe8
 802abba:	9308      	str	r3, [sp, #32]
 802abbc:	9b04      	ldr	r3, [sp, #16]
 802abbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802abc2:	f04f 0a00 	mov.w	sl, #0
 802abc6:	930a      	str	r3, [sp, #40]	@ 0x28
 802abc8:	220a      	movs	r2, #10
 802abca:	2300      	movs	r3, #0
 802abcc:	4620      	mov	r0, r4
 802abce:	4629      	mov	r1, r5
 802abd0:	f7e6 f8c2 	bl	8010d58 <__aeabi_uldivmod>
 802abd4:	460b      	mov	r3, r1
 802abd6:	9908      	ldr	r1, [sp, #32]
 802abd8:	900b      	str	r0, [sp, #44]	@ 0x2c
 802abda:	3230      	adds	r2, #48	@ 0x30
 802abdc:	f801 2c01 	strb.w	r2, [r1, #-1]
 802abe0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802abe2:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 802abe6:	f10a 0a01 	add.w	sl, sl, #1
 802abea:	b1e2      	cbz	r2, 802ac26 <_vfiprintf_r+0x702>
 802abec:	9a06      	ldr	r2, [sp, #24]
 802abee:	7812      	ldrb	r2, [r2, #0]
 802abf0:	4552      	cmp	r2, sl
 802abf2:	d118      	bne.n	802ac26 <_vfiprintf_r+0x702>
 802abf4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802abf8:	d015      	beq.n	802ac26 <_vfiprintf_r+0x702>
 802abfa:	2c0a      	cmp	r4, #10
 802abfc:	f175 0200 	sbcs.w	r2, r5, #0
 802ac00:	d311      	bcc.n	802ac26 <_vfiprintf_r+0x702>
 802ac02:	9308      	str	r3, [sp, #32]
 802ac04:	9b07      	ldr	r3, [sp, #28]
 802ac06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ac08:	eba9 0903 	sub.w	r9, r9, r3
 802ac0c:	461a      	mov	r2, r3
 802ac0e:	4648      	mov	r0, r9
 802ac10:	f000 ff3d 	bl	802ba8e <strncpy>
 802ac14:	9b06      	ldr	r3, [sp, #24]
 802ac16:	785a      	ldrb	r2, [r3, #1]
 802ac18:	9b08      	ldr	r3, [sp, #32]
 802ac1a:	b172      	cbz	r2, 802ac3a <_vfiprintf_r+0x716>
 802ac1c:	9a06      	ldr	r2, [sp, #24]
 802ac1e:	3201      	adds	r2, #1
 802ac20:	9206      	str	r2, [sp, #24]
 802ac22:	f04f 0a00 	mov.w	sl, #0
 802ac26:	2c0a      	cmp	r4, #10
 802ac28:	f175 0500 	sbcs.w	r5, r5, #0
 802ac2c:	f0c0 80f6 	bcc.w	802ae1c <_vfiprintf_r+0x8f8>
 802ac30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802ac32:	f8cd 9020 	str.w	r9, [sp, #32]
 802ac36:	461d      	mov	r5, r3
 802ac38:	e7c6      	b.n	802abc8 <_vfiprintf_r+0x6a4>
 802ac3a:	4692      	mov	sl, r2
 802ac3c:	e7f3      	b.n	802ac26 <_vfiprintf_r+0x702>
 802ac3e:	f004 030f 	and.w	r3, r4, #15
 802ac42:	9a05      	ldr	r2, [sp, #20]
 802ac44:	0924      	lsrs	r4, r4, #4
 802ac46:	5cd3      	ldrb	r3, [r2, r3]
 802ac48:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802ac4c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802ac50:	092d      	lsrs	r5, r5, #4
 802ac52:	ea54 0305 	orrs.w	r3, r4, r5
 802ac56:	d1f2      	bne.n	802ac3e <_vfiprintf_r+0x71a>
 802ac58:	e0e0      	b.n	802ae1c <_vfiprintf_r+0x8f8>
 802ac5a:	b923      	cbnz	r3, 802ac66 <_vfiprintf_r+0x742>
 802ac5c:	f01a 0f01 	tst.w	sl, #1
 802ac60:	d001      	beq.n	802ac66 <_vfiprintf_r+0x742>
 802ac62:	2430      	movs	r4, #48	@ 0x30
 802ac64:	e7a3      	b.n	802abae <_vfiprintf_r+0x68a>
 802ac66:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802ac6a:	e0d7      	b.n	802ae1c <_vfiprintf_r+0x8f8>
 802ac6c:	2b00      	cmp	r3, #0
 802ac6e:	f000 80a3 	beq.w	802adb8 <_vfiprintf_r+0x894>
 802ac72:	2400      	movs	r4, #0
 802ac74:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802ac78:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802ac7c:	46a8      	mov	r8, r5
 802ac7e:	e5e0      	b.n	802a842 <_vfiprintf_r+0x31e>
 802ac80:	0803a763 	.word	0x0803a763
 802ac84:	0803a753 	.word	0x0803a753
 802ac88:	0803a720 	.word	0x0803a720
 802ac8c:	2110      	movs	r1, #16
 802ac8e:	6071      	str	r1, [r6, #4]
 802ac90:	2a07      	cmp	r2, #7
 802ac92:	4461      	add	r1, ip
 802ac94:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ac98:	dd08      	ble.n	802acac <_vfiprintf_r+0x788>
 802ac9a:	9800      	ldr	r0, [sp, #0]
 802ac9c:	aa0e      	add	r2, sp, #56	@ 0x38
 802ac9e:	4639      	mov	r1, r7
 802aca0:	f7ff fc0e 	bl	802a4c0 <__sprint_r>
 802aca4:	2800      	cmp	r0, #0
 802aca6:	d166      	bne.n	802ad76 <_vfiprintf_r+0x852>
 802aca8:	4b60      	ldr	r3, [pc, #384]	@ (802ae2c <_vfiprintf_r+0x908>)
 802acaa:	a811      	add	r0, sp, #68	@ 0x44
 802acac:	3d10      	subs	r5, #16
 802acae:	4606      	mov	r6, r0
 802acb0:	e694      	b.n	802a9dc <_vfiprintf_r+0x4b8>
 802acb2:	4606      	mov	r6, r0
 802acb4:	e6ac      	b.n	802aa10 <_vfiprintf_r+0x4ec>
 802acb6:	9800      	ldr	r0, [sp, #0]
 802acb8:	aa0e      	add	r2, sp, #56	@ 0x38
 802acba:	4639      	mov	r1, r7
 802acbc:	f7ff fc00 	bl	802a4c0 <__sprint_r>
 802acc0:	2800      	cmp	r0, #0
 802acc2:	d158      	bne.n	802ad76 <_vfiprintf_r+0x852>
 802acc4:	ae11      	add	r6, sp, #68	@ 0x44
 802acc6:	e6b5      	b.n	802aa34 <_vfiprintf_r+0x510>
 802acc8:	9800      	ldr	r0, [sp, #0]
 802acca:	aa0e      	add	r2, sp, #56	@ 0x38
 802accc:	4639      	mov	r1, r7
 802acce:	f7ff fbf7 	bl	802a4c0 <__sprint_r>
 802acd2:	2800      	cmp	r0, #0
 802acd4:	d14f      	bne.n	802ad76 <_vfiprintf_r+0x852>
 802acd6:	ae11      	add	r6, sp, #68	@ 0x44
 802acd8:	e6bc      	b.n	802aa54 <_vfiprintf_r+0x530>
 802acda:	2110      	movs	r1, #16
 802acdc:	6071      	str	r1, [r6, #4]
 802acde:	2a07      	cmp	r2, #7
 802ace0:	4461      	add	r1, ip
 802ace2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ace6:	dd08      	ble.n	802acfa <_vfiprintf_r+0x7d6>
 802ace8:	9800      	ldr	r0, [sp, #0]
 802acea:	aa0e      	add	r2, sp, #56	@ 0x38
 802acec:	4639      	mov	r1, r7
 802acee:	f7ff fbe7 	bl	802a4c0 <__sprint_r>
 802acf2:	2800      	cmp	r0, #0
 802acf4:	d13f      	bne.n	802ad76 <_vfiprintf_r+0x852>
 802acf6:	4b4e      	ldr	r3, [pc, #312]	@ (802ae30 <_vfiprintf_r+0x90c>)
 802acf8:	a811      	add	r0, sp, #68	@ 0x44
 802acfa:	3d10      	subs	r5, #16
 802acfc:	4606      	mov	r6, r0
 802acfe:	e6b2      	b.n	802aa66 <_vfiprintf_r+0x542>
 802ad00:	4606      	mov	r6, r0
 802ad02:	e6ca      	b.n	802aa9a <_vfiprintf_r+0x576>
 802ad04:	2010      	movs	r0, #16
 802ad06:	4402      	add	r2, r0
 802ad08:	2b07      	cmp	r3, #7
 802ad0a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802ad0e:	6070      	str	r0, [r6, #4]
 802ad10:	dd06      	ble.n	802ad20 <_vfiprintf_r+0x7fc>
 802ad12:	9800      	ldr	r0, [sp, #0]
 802ad14:	aa0e      	add	r2, sp, #56	@ 0x38
 802ad16:	4639      	mov	r1, r7
 802ad18:	f7ff fbd2 	bl	802a4c0 <__sprint_r>
 802ad1c:	bb58      	cbnz	r0, 802ad76 <_vfiprintf_r+0x852>
 802ad1e:	a911      	add	r1, sp, #68	@ 0x44
 802ad20:	3c10      	subs	r4, #16
 802ad22:	460e      	mov	r6, r1
 802ad24:	e6bd      	b.n	802aaa2 <_vfiprintf_r+0x57e>
 802ad26:	460e      	mov	r6, r1
 802ad28:	e6d6      	b.n	802aad8 <_vfiprintf_r+0x5b4>
 802ad2a:	9800      	ldr	r0, [sp, #0]
 802ad2c:	aa0e      	add	r2, sp, #56	@ 0x38
 802ad2e:	4639      	mov	r1, r7
 802ad30:	f7ff fbc6 	bl	802a4c0 <__sprint_r>
 802ad34:	b9f8      	cbnz	r0, 802ad76 <_vfiprintf_r+0x852>
 802ad36:	ab11      	add	r3, sp, #68	@ 0x44
 802ad38:	e6de      	b.n	802aaf8 <_vfiprintf_r+0x5d4>
 802ad3a:	9a02      	ldr	r2, [sp, #8]
 802ad3c:	9904      	ldr	r1, [sp, #16]
 802ad3e:	1a54      	subs	r4, r2, r1
 802ad40:	2c00      	cmp	r4, #0
 802ad42:	f77f aedd 	ble.w	802ab00 <_vfiprintf_r+0x5dc>
 802ad46:	4d39      	ldr	r5, [pc, #228]	@ (802ae2c <_vfiprintf_r+0x908>)
 802ad48:	2610      	movs	r6, #16
 802ad4a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802ad4e:	2c10      	cmp	r4, #16
 802ad50:	f102 0201 	add.w	r2, r2, #1
 802ad54:	601d      	str	r5, [r3, #0]
 802ad56:	dc1d      	bgt.n	802ad94 <_vfiprintf_r+0x870>
 802ad58:	605c      	str	r4, [r3, #4]
 802ad5a:	2a07      	cmp	r2, #7
 802ad5c:	440c      	add	r4, r1
 802ad5e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802ad62:	f77f aecd 	ble.w	802ab00 <_vfiprintf_r+0x5dc>
 802ad66:	9800      	ldr	r0, [sp, #0]
 802ad68:	aa0e      	add	r2, sp, #56	@ 0x38
 802ad6a:	4639      	mov	r1, r7
 802ad6c:	f7ff fba8 	bl	802a4c0 <__sprint_r>
 802ad70:	2800      	cmp	r0, #0
 802ad72:	f43f aec5 	beq.w	802ab00 <_vfiprintf_r+0x5dc>
 802ad76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802ad78:	07d9      	lsls	r1, r3, #31
 802ad7a:	d405      	bmi.n	802ad88 <_vfiprintf_r+0x864>
 802ad7c:	89bb      	ldrh	r3, [r7, #12]
 802ad7e:	059a      	lsls	r2, r3, #22
 802ad80:	d402      	bmi.n	802ad88 <_vfiprintf_r+0x864>
 802ad82:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802ad84:	f002 f877 	bl	802ce76 <__retarget_lock_release_recursive>
 802ad88:	89bb      	ldrh	r3, [r7, #12]
 802ad8a:	065b      	lsls	r3, r3, #25
 802ad8c:	f57f abfb 	bpl.w	802a586 <_vfiprintf_r+0x62>
 802ad90:	f7ff bbf6 	b.w	802a580 <_vfiprintf_r+0x5c>
 802ad94:	3110      	adds	r1, #16
 802ad96:	2a07      	cmp	r2, #7
 802ad98:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ad9c:	605e      	str	r6, [r3, #4]
 802ad9e:	dc02      	bgt.n	802ada6 <_vfiprintf_r+0x882>
 802ada0:	3308      	adds	r3, #8
 802ada2:	3c10      	subs	r4, #16
 802ada4:	e7d1      	b.n	802ad4a <_vfiprintf_r+0x826>
 802ada6:	9800      	ldr	r0, [sp, #0]
 802ada8:	aa0e      	add	r2, sp, #56	@ 0x38
 802adaa:	4639      	mov	r1, r7
 802adac:	f7ff fb88 	bl	802a4c0 <__sprint_r>
 802adb0:	2800      	cmp	r0, #0
 802adb2:	d1e0      	bne.n	802ad76 <_vfiprintf_r+0x852>
 802adb4:	ab11      	add	r3, sp, #68	@ 0x44
 802adb6:	e7f4      	b.n	802ada2 <_vfiprintf_r+0x87e>
 802adb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802adba:	b913      	cbnz	r3, 802adc2 <_vfiprintf_r+0x89e>
 802adbc:	2300      	movs	r3, #0
 802adbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 802adc0:	e7d9      	b.n	802ad76 <_vfiprintf_r+0x852>
 802adc2:	9800      	ldr	r0, [sp, #0]
 802adc4:	aa0e      	add	r2, sp, #56	@ 0x38
 802adc6:	4639      	mov	r1, r7
 802adc8:	f7ff fb7a 	bl	802a4c0 <__sprint_r>
 802adcc:	2800      	cmp	r0, #0
 802adce:	d0f5      	beq.n	802adbc <_vfiprintf_r+0x898>
 802add0:	e7d1      	b.n	802ad76 <_vfiprintf_r+0x852>
 802add2:	ea54 0205 	orrs.w	r2, r4, r5
 802add6:	f8cd a010 	str.w	sl, [sp, #16]
 802adda:	f43f ada6 	beq.w	802a92a <_vfiprintf_r+0x406>
 802adde:	2b01      	cmp	r3, #1
 802ade0:	f43f aedf 	beq.w	802aba2 <_vfiprintf_r+0x67e>
 802ade4:	2b02      	cmp	r3, #2
 802ade6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802adea:	f43f af28 	beq.w	802ac3e <_vfiprintf_r+0x71a>
 802adee:	f004 0307 	and.w	r3, r4, #7
 802adf2:	08e4      	lsrs	r4, r4, #3
 802adf4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802adf8:	08ed      	lsrs	r5, r5, #3
 802adfa:	3330      	adds	r3, #48	@ 0x30
 802adfc:	ea54 0105 	orrs.w	r1, r4, r5
 802ae00:	464a      	mov	r2, r9
 802ae02:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802ae06:	d1f2      	bne.n	802adee <_vfiprintf_r+0x8ca>
 802ae08:	9904      	ldr	r1, [sp, #16]
 802ae0a:	07c8      	lsls	r0, r1, #31
 802ae0c:	d506      	bpl.n	802ae1c <_vfiprintf_r+0x8f8>
 802ae0e:	2b30      	cmp	r3, #48	@ 0x30
 802ae10:	d004      	beq.n	802ae1c <_vfiprintf_r+0x8f8>
 802ae12:	2330      	movs	r3, #48	@ 0x30
 802ae14:	f809 3c01 	strb.w	r3, [r9, #-1]
 802ae18:	f1a2 0902 	sub.w	r9, r2, #2
 802ae1c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802ae1e:	eba3 0309 	sub.w	r3, r3, r9
 802ae22:	9c01      	ldr	r4, [sp, #4]
 802ae24:	f8dd a010 	ldr.w	sl, [sp, #16]
 802ae28:	9301      	str	r3, [sp, #4]
 802ae2a:	e5bb      	b.n	802a9a4 <_vfiprintf_r+0x480>
 802ae2c:	0803a763 	.word	0x0803a763
 802ae30:	0803a753 	.word	0x0803a753

0802ae34 <__sbprintf>:
 802ae34:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ae36:	461f      	mov	r7, r3
 802ae38:	898b      	ldrh	r3, [r1, #12]
 802ae3a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802ae3e:	f023 0302 	bic.w	r3, r3, #2
 802ae42:	f8ad 300c 	strh.w	r3, [sp, #12]
 802ae46:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802ae48:	9319      	str	r3, [sp, #100]	@ 0x64
 802ae4a:	89cb      	ldrh	r3, [r1, #14]
 802ae4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802ae50:	69cb      	ldr	r3, [r1, #28]
 802ae52:	9307      	str	r3, [sp, #28]
 802ae54:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802ae56:	9309      	str	r3, [sp, #36]	@ 0x24
 802ae58:	ab1a      	add	r3, sp, #104	@ 0x68
 802ae5a:	9300      	str	r3, [sp, #0]
 802ae5c:	9304      	str	r3, [sp, #16]
 802ae5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802ae62:	4615      	mov	r5, r2
 802ae64:	4606      	mov	r6, r0
 802ae66:	9302      	str	r3, [sp, #8]
 802ae68:	9305      	str	r3, [sp, #20]
 802ae6a:	a816      	add	r0, sp, #88	@ 0x58
 802ae6c:	2300      	movs	r3, #0
 802ae6e:	460c      	mov	r4, r1
 802ae70:	9306      	str	r3, [sp, #24]
 802ae72:	f001 fffb 	bl	802ce6c <__retarget_lock_init_recursive>
 802ae76:	462a      	mov	r2, r5
 802ae78:	463b      	mov	r3, r7
 802ae7a:	4669      	mov	r1, sp
 802ae7c:	4630      	mov	r0, r6
 802ae7e:	f7ff fb51 	bl	802a524 <_vfiprintf_r>
 802ae82:	1e05      	subs	r5, r0, #0
 802ae84:	db07      	blt.n	802ae96 <__sbprintf+0x62>
 802ae86:	4669      	mov	r1, sp
 802ae88:	4630      	mov	r0, r6
 802ae8a:	f000 f9d1 	bl	802b230 <_fflush_r>
 802ae8e:	2800      	cmp	r0, #0
 802ae90:	bf18      	it	ne
 802ae92:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802ae96:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802ae9a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802ae9c:	065b      	lsls	r3, r3, #25
 802ae9e:	bf42      	ittt	mi
 802aea0:	89a3      	ldrhmi	r3, [r4, #12]
 802aea2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802aea6:	81a3      	strhmi	r3, [r4, #12]
 802aea8:	f001 ffe1 	bl	802ce6e <__retarget_lock_close_recursive>
 802aeac:	4628      	mov	r0, r5
 802aeae:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802aeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802aeb4 <putchar>:
 802aeb4:	4b02      	ldr	r3, [pc, #8]	@ (802aec0 <putchar+0xc>)
 802aeb6:	4601      	mov	r1, r0
 802aeb8:	6818      	ldr	r0, [r3, #0]
 802aeba:	6882      	ldr	r2, [r0, #8]
 802aebc:	f007 bacc 	b.w	8032458 <_putc_r>
 802aec0:	20000254 	.word	0x20000254

0802aec4 <_puts_r>:
 802aec4:	b530      	push	{r4, r5, lr}
 802aec6:	4605      	mov	r5, r0
 802aec8:	b089      	sub	sp, #36	@ 0x24
 802aeca:	4608      	mov	r0, r1
 802aecc:	460c      	mov	r4, r1
 802aece:	f7e5 f9e7 	bl	80102a0 <strlen>
 802aed2:	4b1e      	ldr	r3, [pc, #120]	@ (802af4c <_puts_r+0x88>)
 802aed4:	9306      	str	r3, [sp, #24]
 802aed6:	2301      	movs	r3, #1
 802aed8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802aedc:	9307      	str	r3, [sp, #28]
 802aede:	4418      	add	r0, r3
 802aee0:	ab04      	add	r3, sp, #16
 802aee2:	9301      	str	r3, [sp, #4]
 802aee4:	2302      	movs	r3, #2
 802aee6:	9302      	str	r3, [sp, #8]
 802aee8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802aeea:	68ac      	ldr	r4, [r5, #8]
 802aeec:	9003      	str	r0, [sp, #12]
 802aeee:	b913      	cbnz	r3, 802aef6 <_puts_r+0x32>
 802aef0:	4628      	mov	r0, r5
 802aef2:	f000 fadf 	bl	802b4b4 <__sinit>
 802aef6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802aef8:	07db      	lsls	r3, r3, #31
 802aefa:	d405      	bmi.n	802af08 <_puts_r+0x44>
 802aefc:	89a3      	ldrh	r3, [r4, #12]
 802aefe:	0598      	lsls	r0, r3, #22
 802af00:	d402      	bmi.n	802af08 <_puts_r+0x44>
 802af02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802af04:	f001 ffb5 	bl	802ce72 <__retarget_lock_acquire_recursive>
 802af08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802af0c:	0499      	lsls	r1, r3, #18
 802af0e:	d406      	bmi.n	802af1e <_puts_r+0x5a>
 802af10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802af14:	81a3      	strh	r3, [r4, #12]
 802af16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802af18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802af1c:	6663      	str	r3, [r4, #100]	@ 0x64
 802af1e:	4628      	mov	r0, r5
 802af20:	aa01      	add	r2, sp, #4
 802af22:	4621      	mov	r1, r4
 802af24:	f000 fb18 	bl	802b558 <__sfvwrite_r>
 802af28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802af2a:	2800      	cmp	r0, #0
 802af2c:	bf0c      	ite	eq
 802af2e:	250a      	moveq	r5, #10
 802af30:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802af34:	07da      	lsls	r2, r3, #31
 802af36:	d405      	bmi.n	802af44 <_puts_r+0x80>
 802af38:	89a3      	ldrh	r3, [r4, #12]
 802af3a:	059b      	lsls	r3, r3, #22
 802af3c:	d402      	bmi.n	802af44 <_puts_r+0x80>
 802af3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802af40:	f001 ff99 	bl	802ce76 <__retarget_lock_release_recursive>
 802af44:	4628      	mov	r0, r5
 802af46:	b009      	add	sp, #36	@ 0x24
 802af48:	bd30      	pop	{r4, r5, pc}
 802af4a:	bf00      	nop
 802af4c:	0803a6fd 	.word	0x0803a6fd

0802af50 <puts>:
 802af50:	4b02      	ldr	r3, [pc, #8]	@ (802af5c <puts+0xc>)
 802af52:	4601      	mov	r1, r0
 802af54:	6818      	ldr	r0, [r3, #0]
 802af56:	f7ff bfb5 	b.w	802aec4 <_puts_r>
 802af5a:	bf00      	nop
 802af5c:	20000254 	.word	0x20000254

0802af60 <srand>:
 802af60:	4b03      	ldr	r3, [pc, #12]	@ (802af70 <srand+0x10>)
 802af62:	681b      	ldr	r3, [r3, #0]
 802af64:	2200      	movs	r2, #0
 802af66:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802af6a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802af6e:	4770      	bx	lr
 802af70:	20000254 	.word	0x20000254

0802af74 <rand>:
 802af74:	4b0a      	ldr	r3, [pc, #40]	@ (802afa0 <rand+0x2c>)
 802af76:	480b      	ldr	r0, [pc, #44]	@ (802afa4 <rand+0x30>)
 802af78:	6819      	ldr	r1, [r3, #0]
 802af7a:	4a0b      	ldr	r2, [pc, #44]	@ (802afa8 <rand+0x34>)
 802af7c:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 802af80:	b510      	push	{r4, lr}
 802af82:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 802af86:	4358      	muls	r0, r3
 802af88:	fb02 0004 	mla	r0, r2, r4, r0
 802af8c:	fba3 3202 	umull	r3, r2, r3, r2
 802af90:	3301      	adds	r3, #1
 802af92:	eb40 0002 	adc.w	r0, r0, r2
 802af96:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802af9a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802af9e:	bd10      	pop	{r4, pc}
 802afa0:	20000254 	.word	0x20000254
 802afa4:	5851f42d 	.word	0x5851f42d
 802afa8:	4c957f2d 	.word	0x4c957f2d

0802afac <snprintf>:
 802afac:	b40c      	push	{r2, r3}
 802afae:	b530      	push	{r4, r5, lr}
 802afb0:	4b17      	ldr	r3, [pc, #92]	@ (802b010 <snprintf+0x64>)
 802afb2:	1e0c      	subs	r4, r1, #0
 802afb4:	681d      	ldr	r5, [r3, #0]
 802afb6:	b09d      	sub	sp, #116	@ 0x74
 802afb8:	da08      	bge.n	802afcc <snprintf+0x20>
 802afba:	238b      	movs	r3, #139	@ 0x8b
 802afbc:	602b      	str	r3, [r5, #0]
 802afbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802afc2:	b01d      	add	sp, #116	@ 0x74
 802afc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802afc8:	b002      	add	sp, #8
 802afca:	4770      	bx	lr
 802afcc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802afd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 802afd4:	bf14      	ite	ne
 802afd6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802afda:	4623      	moveq	r3, r4
 802afdc:	9304      	str	r3, [sp, #16]
 802afde:	9307      	str	r3, [sp, #28]
 802afe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802afe4:	9002      	str	r0, [sp, #8]
 802afe6:	9006      	str	r0, [sp, #24]
 802afe8:	f8ad 3016 	strh.w	r3, [sp, #22]
 802afec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802afee:	ab21      	add	r3, sp, #132	@ 0x84
 802aff0:	a902      	add	r1, sp, #8
 802aff2:	4628      	mov	r0, r5
 802aff4:	9301      	str	r3, [sp, #4]
 802aff6:	f004 fe7b 	bl	802fcf0 <_svfprintf_r>
 802affa:	1c43      	adds	r3, r0, #1
 802affc:	bfbc      	itt	lt
 802affe:	238b      	movlt	r3, #139	@ 0x8b
 802b000:	602b      	strlt	r3, [r5, #0]
 802b002:	2c00      	cmp	r4, #0
 802b004:	d0dd      	beq.n	802afc2 <snprintf+0x16>
 802b006:	9b02      	ldr	r3, [sp, #8]
 802b008:	2200      	movs	r2, #0
 802b00a:	701a      	strb	r2, [r3, #0]
 802b00c:	e7d9      	b.n	802afc2 <snprintf+0x16>
 802b00e:	bf00      	nop
 802b010:	20000254 	.word	0x20000254

0802b014 <_strtol_l.constprop.0>:
 802b014:	2b24      	cmp	r3, #36	@ 0x24
 802b016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b01a:	4686      	mov	lr, r0
 802b01c:	4690      	mov	r8, r2
 802b01e:	d801      	bhi.n	802b024 <_strtol_l.constprop.0+0x10>
 802b020:	2b01      	cmp	r3, #1
 802b022:	d106      	bne.n	802b032 <_strtol_l.constprop.0+0x1e>
 802b024:	f001 fef0 	bl	802ce08 <__errno>
 802b028:	2316      	movs	r3, #22
 802b02a:	6003      	str	r3, [r0, #0]
 802b02c:	2000      	movs	r0, #0
 802b02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b032:	4834      	ldr	r0, [pc, #208]	@ (802b104 <_strtol_l.constprop.0+0xf0>)
 802b034:	460d      	mov	r5, r1
 802b036:	462a      	mov	r2, r5
 802b038:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b03c:	5d06      	ldrb	r6, [r0, r4]
 802b03e:	f016 0608 	ands.w	r6, r6, #8
 802b042:	d1f8      	bne.n	802b036 <_strtol_l.constprop.0+0x22>
 802b044:	2c2d      	cmp	r4, #45	@ 0x2d
 802b046:	d12d      	bne.n	802b0a4 <_strtol_l.constprop.0+0x90>
 802b048:	782c      	ldrb	r4, [r5, #0]
 802b04a:	2601      	movs	r6, #1
 802b04c:	1c95      	adds	r5, r2, #2
 802b04e:	f033 0210 	bics.w	r2, r3, #16
 802b052:	d109      	bne.n	802b068 <_strtol_l.constprop.0+0x54>
 802b054:	2c30      	cmp	r4, #48	@ 0x30
 802b056:	d12a      	bne.n	802b0ae <_strtol_l.constprop.0+0x9a>
 802b058:	782a      	ldrb	r2, [r5, #0]
 802b05a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802b05e:	2a58      	cmp	r2, #88	@ 0x58
 802b060:	d125      	bne.n	802b0ae <_strtol_l.constprop.0+0x9a>
 802b062:	786c      	ldrb	r4, [r5, #1]
 802b064:	2310      	movs	r3, #16
 802b066:	3502      	adds	r5, #2
 802b068:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802b06c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802b070:	2200      	movs	r2, #0
 802b072:	fbbc f9f3 	udiv	r9, ip, r3
 802b076:	4610      	mov	r0, r2
 802b078:	fb03 ca19 	mls	sl, r3, r9, ip
 802b07c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802b080:	2f09      	cmp	r7, #9
 802b082:	d81b      	bhi.n	802b0bc <_strtol_l.constprop.0+0xa8>
 802b084:	463c      	mov	r4, r7
 802b086:	42a3      	cmp	r3, r4
 802b088:	dd27      	ble.n	802b0da <_strtol_l.constprop.0+0xc6>
 802b08a:	1c57      	adds	r7, r2, #1
 802b08c:	d007      	beq.n	802b09e <_strtol_l.constprop.0+0x8a>
 802b08e:	4581      	cmp	r9, r0
 802b090:	d320      	bcc.n	802b0d4 <_strtol_l.constprop.0+0xc0>
 802b092:	d101      	bne.n	802b098 <_strtol_l.constprop.0+0x84>
 802b094:	45a2      	cmp	sl, r4
 802b096:	db1d      	blt.n	802b0d4 <_strtol_l.constprop.0+0xc0>
 802b098:	fb00 4003 	mla	r0, r0, r3, r4
 802b09c:	2201      	movs	r2, #1
 802b09e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b0a2:	e7eb      	b.n	802b07c <_strtol_l.constprop.0+0x68>
 802b0a4:	2c2b      	cmp	r4, #43	@ 0x2b
 802b0a6:	bf04      	itt	eq
 802b0a8:	782c      	ldrbeq	r4, [r5, #0]
 802b0aa:	1c95      	addeq	r5, r2, #2
 802b0ac:	e7cf      	b.n	802b04e <_strtol_l.constprop.0+0x3a>
 802b0ae:	2b00      	cmp	r3, #0
 802b0b0:	d1da      	bne.n	802b068 <_strtol_l.constprop.0+0x54>
 802b0b2:	2c30      	cmp	r4, #48	@ 0x30
 802b0b4:	bf0c      	ite	eq
 802b0b6:	2308      	moveq	r3, #8
 802b0b8:	230a      	movne	r3, #10
 802b0ba:	e7d5      	b.n	802b068 <_strtol_l.constprop.0+0x54>
 802b0bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802b0c0:	2f19      	cmp	r7, #25
 802b0c2:	d801      	bhi.n	802b0c8 <_strtol_l.constprop.0+0xb4>
 802b0c4:	3c37      	subs	r4, #55	@ 0x37
 802b0c6:	e7de      	b.n	802b086 <_strtol_l.constprop.0+0x72>
 802b0c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802b0cc:	2f19      	cmp	r7, #25
 802b0ce:	d804      	bhi.n	802b0da <_strtol_l.constprop.0+0xc6>
 802b0d0:	3c57      	subs	r4, #87	@ 0x57
 802b0d2:	e7d8      	b.n	802b086 <_strtol_l.constprop.0+0x72>
 802b0d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b0d8:	e7e1      	b.n	802b09e <_strtol_l.constprop.0+0x8a>
 802b0da:	1c53      	adds	r3, r2, #1
 802b0dc:	d108      	bne.n	802b0f0 <_strtol_l.constprop.0+0xdc>
 802b0de:	2322      	movs	r3, #34	@ 0x22
 802b0e0:	f8ce 3000 	str.w	r3, [lr]
 802b0e4:	4660      	mov	r0, ip
 802b0e6:	f1b8 0f00 	cmp.w	r8, #0
 802b0ea:	d0a0      	beq.n	802b02e <_strtol_l.constprop.0+0x1a>
 802b0ec:	1e69      	subs	r1, r5, #1
 802b0ee:	e006      	b.n	802b0fe <_strtol_l.constprop.0+0xea>
 802b0f0:	b106      	cbz	r6, 802b0f4 <_strtol_l.constprop.0+0xe0>
 802b0f2:	4240      	negs	r0, r0
 802b0f4:	f1b8 0f00 	cmp.w	r8, #0
 802b0f8:	d099      	beq.n	802b02e <_strtol_l.constprop.0+0x1a>
 802b0fa:	2a00      	cmp	r2, #0
 802b0fc:	d1f6      	bne.n	802b0ec <_strtol_l.constprop.0+0xd8>
 802b0fe:	f8c8 1000 	str.w	r1, [r8]
 802b102:	e794      	b.n	802b02e <_strtol_l.constprop.0+0x1a>
 802b104:	0803aabd 	.word	0x0803aabd

0802b108 <_strtol_r>:
 802b108:	f7ff bf84 	b.w	802b014 <_strtol_l.constprop.0>

0802b10c <strtol>:
 802b10c:	4613      	mov	r3, r2
 802b10e:	460a      	mov	r2, r1
 802b110:	4601      	mov	r1, r0
 802b112:	4802      	ldr	r0, [pc, #8]	@ (802b11c <strtol+0x10>)
 802b114:	6800      	ldr	r0, [r0, #0]
 802b116:	f7ff bf7d 	b.w	802b014 <_strtol_l.constprop.0>
 802b11a:	bf00      	nop
 802b11c:	20000254 	.word	0x20000254

0802b120 <__sflush_r>:
 802b120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b124:	4605      	mov	r5, r0
 802b126:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802b12a:	0706      	lsls	r6, r0, #28
 802b12c:	460c      	mov	r4, r1
 802b12e:	d457      	bmi.n	802b1e0 <__sflush_r+0xc0>
 802b130:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802b134:	818b      	strh	r3, [r1, #12]
 802b136:	684b      	ldr	r3, [r1, #4]
 802b138:	2b00      	cmp	r3, #0
 802b13a:	dc02      	bgt.n	802b142 <__sflush_r+0x22>
 802b13c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802b13e:	2b00      	cmp	r3, #0
 802b140:	dd4c      	ble.n	802b1dc <__sflush_r+0xbc>
 802b142:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b144:	2e00      	cmp	r6, #0
 802b146:	d049      	beq.n	802b1dc <__sflush_r+0xbc>
 802b148:	2300      	movs	r3, #0
 802b14a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802b14e:	682f      	ldr	r7, [r5, #0]
 802b150:	69e1      	ldr	r1, [r4, #28]
 802b152:	602b      	str	r3, [r5, #0]
 802b154:	d034      	beq.n	802b1c0 <__sflush_r+0xa0>
 802b156:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802b158:	89a3      	ldrh	r3, [r4, #12]
 802b15a:	0759      	lsls	r1, r3, #29
 802b15c:	d505      	bpl.n	802b16a <__sflush_r+0x4a>
 802b15e:	6863      	ldr	r3, [r4, #4]
 802b160:	1ad2      	subs	r2, r2, r3
 802b162:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802b164:	b10b      	cbz	r3, 802b16a <__sflush_r+0x4a>
 802b166:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802b168:	1ad2      	subs	r2, r2, r3
 802b16a:	2300      	movs	r3, #0
 802b16c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b16e:	69e1      	ldr	r1, [r4, #28]
 802b170:	4628      	mov	r0, r5
 802b172:	47b0      	blx	r6
 802b174:	1c43      	adds	r3, r0, #1
 802b176:	d106      	bne.n	802b186 <__sflush_r+0x66>
 802b178:	682a      	ldr	r2, [r5, #0]
 802b17a:	2a1d      	cmp	r2, #29
 802b17c:	d848      	bhi.n	802b210 <__sflush_r+0xf0>
 802b17e:	4b2b      	ldr	r3, [pc, #172]	@ (802b22c <__sflush_r+0x10c>)
 802b180:	4113      	asrs	r3, r2
 802b182:	07de      	lsls	r6, r3, #31
 802b184:	d444      	bmi.n	802b210 <__sflush_r+0xf0>
 802b186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b18a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802b18e:	81a2      	strh	r2, [r4, #12]
 802b190:	2200      	movs	r2, #0
 802b192:	6062      	str	r2, [r4, #4]
 802b194:	04d9      	lsls	r1, r3, #19
 802b196:	6922      	ldr	r2, [r4, #16]
 802b198:	6022      	str	r2, [r4, #0]
 802b19a:	d504      	bpl.n	802b1a6 <__sflush_r+0x86>
 802b19c:	1c42      	adds	r2, r0, #1
 802b19e:	d101      	bne.n	802b1a4 <__sflush_r+0x84>
 802b1a0:	682b      	ldr	r3, [r5, #0]
 802b1a2:	b903      	cbnz	r3, 802b1a6 <__sflush_r+0x86>
 802b1a4:	6520      	str	r0, [r4, #80]	@ 0x50
 802b1a6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802b1a8:	602f      	str	r7, [r5, #0]
 802b1aa:	b1b9      	cbz	r1, 802b1dc <__sflush_r+0xbc>
 802b1ac:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802b1b0:	4299      	cmp	r1, r3
 802b1b2:	d002      	beq.n	802b1ba <__sflush_r+0x9a>
 802b1b4:	4628      	mov	r0, r5
 802b1b6:	f002 fd61 	bl	802dc7c <_free_r>
 802b1ba:	2300      	movs	r3, #0
 802b1bc:	6323      	str	r3, [r4, #48]	@ 0x30
 802b1be:	e00d      	b.n	802b1dc <__sflush_r+0xbc>
 802b1c0:	2301      	movs	r3, #1
 802b1c2:	4628      	mov	r0, r5
 802b1c4:	47b0      	blx	r6
 802b1c6:	4602      	mov	r2, r0
 802b1c8:	1c50      	adds	r0, r2, #1
 802b1ca:	d1c5      	bne.n	802b158 <__sflush_r+0x38>
 802b1cc:	682b      	ldr	r3, [r5, #0]
 802b1ce:	2b00      	cmp	r3, #0
 802b1d0:	d0c2      	beq.n	802b158 <__sflush_r+0x38>
 802b1d2:	2b1d      	cmp	r3, #29
 802b1d4:	d001      	beq.n	802b1da <__sflush_r+0xba>
 802b1d6:	2b16      	cmp	r3, #22
 802b1d8:	d11a      	bne.n	802b210 <__sflush_r+0xf0>
 802b1da:	602f      	str	r7, [r5, #0]
 802b1dc:	2000      	movs	r0, #0
 802b1de:	e01e      	b.n	802b21e <__sflush_r+0xfe>
 802b1e0:	690f      	ldr	r7, [r1, #16]
 802b1e2:	2f00      	cmp	r7, #0
 802b1e4:	d0fa      	beq.n	802b1dc <__sflush_r+0xbc>
 802b1e6:	0783      	lsls	r3, r0, #30
 802b1e8:	680e      	ldr	r6, [r1, #0]
 802b1ea:	bf08      	it	eq
 802b1ec:	694b      	ldreq	r3, [r1, #20]
 802b1ee:	600f      	str	r7, [r1, #0]
 802b1f0:	bf18      	it	ne
 802b1f2:	2300      	movne	r3, #0
 802b1f4:	eba6 0807 	sub.w	r8, r6, r7
 802b1f8:	608b      	str	r3, [r1, #8]
 802b1fa:	f1b8 0f00 	cmp.w	r8, #0
 802b1fe:	dded      	ble.n	802b1dc <__sflush_r+0xbc>
 802b200:	69e1      	ldr	r1, [r4, #28]
 802b202:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802b204:	4643      	mov	r3, r8
 802b206:	463a      	mov	r2, r7
 802b208:	4628      	mov	r0, r5
 802b20a:	47b0      	blx	r6
 802b20c:	2800      	cmp	r0, #0
 802b20e:	dc08      	bgt.n	802b222 <__sflush_r+0x102>
 802b210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b218:	81a3      	strh	r3, [r4, #12]
 802b21a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b222:	4407      	add	r7, r0
 802b224:	eba8 0800 	sub.w	r8, r8, r0
 802b228:	e7e7      	b.n	802b1fa <__sflush_r+0xda>
 802b22a:	bf00      	nop
 802b22c:	dfbffffe 	.word	0xdfbffffe

0802b230 <_fflush_r>:
 802b230:	b538      	push	{r3, r4, r5, lr}
 802b232:	460c      	mov	r4, r1
 802b234:	4605      	mov	r5, r0
 802b236:	b118      	cbz	r0, 802b240 <_fflush_r+0x10>
 802b238:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802b23a:	b90b      	cbnz	r3, 802b240 <_fflush_r+0x10>
 802b23c:	f000 f93a 	bl	802b4b4 <__sinit>
 802b240:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802b244:	b1b8      	cbz	r0, 802b276 <_fflush_r+0x46>
 802b246:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b248:	07db      	lsls	r3, r3, #31
 802b24a:	d404      	bmi.n	802b256 <_fflush_r+0x26>
 802b24c:	0581      	lsls	r1, r0, #22
 802b24e:	d402      	bmi.n	802b256 <_fflush_r+0x26>
 802b250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b252:	f001 fe0e 	bl	802ce72 <__retarget_lock_acquire_recursive>
 802b256:	4628      	mov	r0, r5
 802b258:	4621      	mov	r1, r4
 802b25a:	f7ff ff61 	bl	802b120 <__sflush_r>
 802b25e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b260:	07da      	lsls	r2, r3, #31
 802b262:	4605      	mov	r5, r0
 802b264:	d405      	bmi.n	802b272 <_fflush_r+0x42>
 802b266:	89a3      	ldrh	r3, [r4, #12]
 802b268:	059b      	lsls	r3, r3, #22
 802b26a:	d402      	bmi.n	802b272 <_fflush_r+0x42>
 802b26c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b26e:	f001 fe02 	bl	802ce76 <__retarget_lock_release_recursive>
 802b272:	4628      	mov	r0, r5
 802b274:	bd38      	pop	{r3, r4, r5, pc}
 802b276:	4605      	mov	r5, r0
 802b278:	e7fb      	b.n	802b272 <_fflush_r+0x42>
	...

0802b27c <sprintf>:
 802b27c:	b40e      	push	{r1, r2, r3}
 802b27e:	b500      	push	{lr}
 802b280:	b09c      	sub	sp, #112	@ 0x70
 802b282:	ab1d      	add	r3, sp, #116	@ 0x74
 802b284:	9002      	str	r0, [sp, #8]
 802b286:	9006      	str	r0, [sp, #24]
 802b288:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802b28c:	4809      	ldr	r0, [pc, #36]	@ (802b2b4 <sprintf+0x38>)
 802b28e:	9107      	str	r1, [sp, #28]
 802b290:	9104      	str	r1, [sp, #16]
 802b292:	4909      	ldr	r1, [pc, #36]	@ (802b2b8 <sprintf+0x3c>)
 802b294:	f853 2b04 	ldr.w	r2, [r3], #4
 802b298:	9105      	str	r1, [sp, #20]
 802b29a:	6800      	ldr	r0, [r0, #0]
 802b29c:	9301      	str	r3, [sp, #4]
 802b29e:	a902      	add	r1, sp, #8
 802b2a0:	f004 fd26 	bl	802fcf0 <_svfprintf_r>
 802b2a4:	9b02      	ldr	r3, [sp, #8]
 802b2a6:	2200      	movs	r2, #0
 802b2a8:	701a      	strb	r2, [r3, #0]
 802b2aa:	b01c      	add	sp, #112	@ 0x70
 802b2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 802b2b0:	b003      	add	sp, #12
 802b2b2:	4770      	bx	lr
 802b2b4:	20000254 	.word	0x20000254
 802b2b8:	ffff0208 	.word	0xffff0208

0802b2bc <sscanf>:
 802b2bc:	b40e      	push	{r1, r2, r3}
 802b2be:	b530      	push	{r4, r5, lr}
 802b2c0:	b09c      	sub	sp, #112	@ 0x70
 802b2c2:	ac1f      	add	r4, sp, #124	@ 0x7c
 802b2c4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802b2c8:	f854 5b04 	ldr.w	r5, [r4], #4
 802b2cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 802b2d0:	9002      	str	r0, [sp, #8]
 802b2d2:	9006      	str	r0, [sp, #24]
 802b2d4:	f7e4 ffe4 	bl	80102a0 <strlen>
 802b2d8:	4b0b      	ldr	r3, [pc, #44]	@ (802b308 <sscanf+0x4c>)
 802b2da:	9003      	str	r0, [sp, #12]
 802b2dc:	9007      	str	r0, [sp, #28]
 802b2de:	930a      	str	r3, [sp, #40]	@ 0x28
 802b2e0:	480a      	ldr	r0, [pc, #40]	@ (802b30c <sscanf+0x50>)
 802b2e2:	9401      	str	r4, [sp, #4]
 802b2e4:	2300      	movs	r3, #0
 802b2e6:	930e      	str	r3, [sp, #56]	@ 0x38
 802b2e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b2ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802b2ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 802b2f2:	462a      	mov	r2, r5
 802b2f4:	4623      	mov	r3, r4
 802b2f6:	a902      	add	r1, sp, #8
 802b2f8:	6800      	ldr	r0, [r0, #0]
 802b2fa:	f005 ff3b 	bl	8031174 <__ssvfscanf_r>
 802b2fe:	b01c      	add	sp, #112	@ 0x70
 802b300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b304:	b003      	add	sp, #12
 802b306:	4770      	bx	lr
 802b308:	0802b333 	.word	0x0802b333
 802b30c:	20000254 	.word	0x20000254

0802b310 <__sread>:
 802b310:	b510      	push	{r4, lr}
 802b312:	460c      	mov	r4, r1
 802b314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b318:	f001 fd52 	bl	802cdc0 <_read_r>
 802b31c:	2800      	cmp	r0, #0
 802b31e:	bfab      	itete	ge
 802b320:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802b322:	89a3      	ldrhlt	r3, [r4, #12]
 802b324:	181b      	addge	r3, r3, r0
 802b326:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802b32a:	bfac      	ite	ge
 802b32c:	6523      	strge	r3, [r4, #80]	@ 0x50
 802b32e:	81a3      	strhlt	r3, [r4, #12]
 802b330:	bd10      	pop	{r4, pc}

0802b332 <__seofread>:
 802b332:	2000      	movs	r0, #0
 802b334:	4770      	bx	lr

0802b336 <__swrite>:
 802b336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b33a:	461f      	mov	r7, r3
 802b33c:	898b      	ldrh	r3, [r1, #12]
 802b33e:	05db      	lsls	r3, r3, #23
 802b340:	4605      	mov	r5, r0
 802b342:	460c      	mov	r4, r1
 802b344:	4616      	mov	r6, r2
 802b346:	d505      	bpl.n	802b354 <__swrite+0x1e>
 802b348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b34c:	2302      	movs	r3, #2
 802b34e:	2200      	movs	r2, #0
 802b350:	f001 fd24 	bl	802cd9c <_lseek_r>
 802b354:	89a3      	ldrh	r3, [r4, #12]
 802b356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b35a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802b35e:	81a3      	strh	r3, [r4, #12]
 802b360:	4632      	mov	r2, r6
 802b362:	463b      	mov	r3, r7
 802b364:	4628      	mov	r0, r5
 802b366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b36a:	f001 bd3b 	b.w	802cde4 <_write_r>

0802b36e <__sseek>:
 802b36e:	b510      	push	{r4, lr}
 802b370:	460c      	mov	r4, r1
 802b372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b376:	f001 fd11 	bl	802cd9c <_lseek_r>
 802b37a:	1c43      	adds	r3, r0, #1
 802b37c:	89a3      	ldrh	r3, [r4, #12]
 802b37e:	bf15      	itete	ne
 802b380:	6520      	strne	r0, [r4, #80]	@ 0x50
 802b382:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b386:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b38a:	81a3      	strheq	r3, [r4, #12]
 802b38c:	bf18      	it	ne
 802b38e:	81a3      	strhne	r3, [r4, #12]
 802b390:	bd10      	pop	{r4, pc}

0802b392 <__sclose>:
 802b392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b396:	f001 bcc5 	b.w	802cd24 <_close_r>
	...

0802b39c <std>:
 802b39c:	2300      	movs	r3, #0
 802b39e:	b510      	push	{r4, lr}
 802b3a0:	4604      	mov	r4, r0
 802b3a2:	e9c0 3300 	strd	r3, r3, [r0]
 802b3a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b3aa:	6083      	str	r3, [r0, #8]
 802b3ac:	8181      	strh	r1, [r0, #12]
 802b3ae:	6643      	str	r3, [r0, #100]	@ 0x64
 802b3b0:	81c2      	strh	r2, [r0, #14]
 802b3b2:	6183      	str	r3, [r0, #24]
 802b3b4:	4619      	mov	r1, r3
 802b3b6:	2208      	movs	r2, #8
 802b3b8:	305c      	adds	r0, #92	@ 0x5c
 802b3ba:	f000 fb21 	bl	802ba00 <memset>
 802b3be:	4b0d      	ldr	r3, [pc, #52]	@ (802b3f4 <std+0x58>)
 802b3c0:	6223      	str	r3, [r4, #32]
 802b3c2:	4b0d      	ldr	r3, [pc, #52]	@ (802b3f8 <std+0x5c>)
 802b3c4:	6263      	str	r3, [r4, #36]	@ 0x24
 802b3c6:	4b0d      	ldr	r3, [pc, #52]	@ (802b3fc <std+0x60>)
 802b3c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 802b3ca:	4b0d      	ldr	r3, [pc, #52]	@ (802b400 <std+0x64>)
 802b3cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802b3ce:	4b0d      	ldr	r3, [pc, #52]	@ (802b404 <std+0x68>)
 802b3d0:	61e4      	str	r4, [r4, #28]
 802b3d2:	429c      	cmp	r4, r3
 802b3d4:	d006      	beq.n	802b3e4 <std+0x48>
 802b3d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802b3da:	4294      	cmp	r4, r2
 802b3dc:	d002      	beq.n	802b3e4 <std+0x48>
 802b3de:	33d0      	adds	r3, #208	@ 0xd0
 802b3e0:	429c      	cmp	r4, r3
 802b3e2:	d105      	bne.n	802b3f0 <std+0x54>
 802b3e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802b3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b3ec:	f001 bd3e 	b.w	802ce6c <__retarget_lock_init_recursive>
 802b3f0:	bd10      	pop	{r4, pc}
 802b3f2:	bf00      	nop
 802b3f4:	0802b311 	.word	0x0802b311
 802b3f8:	0802b337 	.word	0x0802b337
 802b3fc:	0802b36f 	.word	0x0802b36f
 802b400:	0802b393 	.word	0x0802b393
 802b404:	20018df4 	.word	0x20018df4

0802b408 <stdio_exit_handler>:
 802b408:	4a02      	ldr	r2, [pc, #8]	@ (802b414 <stdio_exit_handler+0xc>)
 802b40a:	4903      	ldr	r1, [pc, #12]	@ (802b418 <stdio_exit_handler+0x10>)
 802b40c:	4803      	ldr	r0, [pc, #12]	@ (802b41c <stdio_exit_handler+0x14>)
 802b40e:	f000 b9ef 	b.w	802b7f0 <_fwalk_sglue>
 802b412:	bf00      	nop
 802b414:	200000d4 	.word	0x200000d4
 802b418:	08032db1 	.word	0x08032db1
 802b41c:	20000258 	.word	0x20000258

0802b420 <cleanup_stdio>:
 802b420:	6841      	ldr	r1, [r0, #4]
 802b422:	4b0c      	ldr	r3, [pc, #48]	@ (802b454 <cleanup_stdio+0x34>)
 802b424:	4299      	cmp	r1, r3
 802b426:	b510      	push	{r4, lr}
 802b428:	4604      	mov	r4, r0
 802b42a:	d001      	beq.n	802b430 <cleanup_stdio+0x10>
 802b42c:	f007 fcc0 	bl	8032db0 <_fclose_r>
 802b430:	68a1      	ldr	r1, [r4, #8]
 802b432:	4b09      	ldr	r3, [pc, #36]	@ (802b458 <cleanup_stdio+0x38>)
 802b434:	4299      	cmp	r1, r3
 802b436:	d002      	beq.n	802b43e <cleanup_stdio+0x1e>
 802b438:	4620      	mov	r0, r4
 802b43a:	f007 fcb9 	bl	8032db0 <_fclose_r>
 802b43e:	68e1      	ldr	r1, [r4, #12]
 802b440:	4b06      	ldr	r3, [pc, #24]	@ (802b45c <cleanup_stdio+0x3c>)
 802b442:	4299      	cmp	r1, r3
 802b444:	d004      	beq.n	802b450 <cleanup_stdio+0x30>
 802b446:	4620      	mov	r0, r4
 802b448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b44c:	f007 bcb0 	b.w	8032db0 <_fclose_r>
 802b450:	bd10      	pop	{r4, pc}
 802b452:	bf00      	nop
 802b454:	20018df4 	.word	0x20018df4
 802b458:	20018e5c 	.word	0x20018e5c
 802b45c:	20018ec4 	.word	0x20018ec4

0802b460 <global_stdio_init.part.0>:
 802b460:	b510      	push	{r4, lr}
 802b462:	4b0b      	ldr	r3, [pc, #44]	@ (802b490 <global_stdio_init.part.0+0x30>)
 802b464:	4c0b      	ldr	r4, [pc, #44]	@ (802b494 <global_stdio_init.part.0+0x34>)
 802b466:	4a0c      	ldr	r2, [pc, #48]	@ (802b498 <global_stdio_init.part.0+0x38>)
 802b468:	601a      	str	r2, [r3, #0]
 802b46a:	4620      	mov	r0, r4
 802b46c:	2200      	movs	r2, #0
 802b46e:	2104      	movs	r1, #4
 802b470:	f7ff ff94 	bl	802b39c <std>
 802b474:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802b478:	2201      	movs	r2, #1
 802b47a:	2109      	movs	r1, #9
 802b47c:	f7ff ff8e 	bl	802b39c <std>
 802b480:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802b484:	2202      	movs	r2, #2
 802b486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b48a:	2112      	movs	r1, #18
 802b48c:	f7ff bf86 	b.w	802b39c <std>
 802b490:	20018f2c 	.word	0x20018f2c
 802b494:	20018df4 	.word	0x20018df4
 802b498:	0802b409 	.word	0x0802b409

0802b49c <__sfp_lock_acquire>:
 802b49c:	4801      	ldr	r0, [pc, #4]	@ (802b4a4 <__sfp_lock_acquire+0x8>)
 802b49e:	f001 bce8 	b.w	802ce72 <__retarget_lock_acquire_recursive>
 802b4a2:	bf00      	nop
 802b4a4:	20018f5c 	.word	0x20018f5c

0802b4a8 <__sfp_lock_release>:
 802b4a8:	4801      	ldr	r0, [pc, #4]	@ (802b4b0 <__sfp_lock_release+0x8>)
 802b4aa:	f001 bce4 	b.w	802ce76 <__retarget_lock_release_recursive>
 802b4ae:	bf00      	nop
 802b4b0:	20018f5c 	.word	0x20018f5c

0802b4b4 <__sinit>:
 802b4b4:	b510      	push	{r4, lr}
 802b4b6:	4604      	mov	r4, r0
 802b4b8:	f7ff fff0 	bl	802b49c <__sfp_lock_acquire>
 802b4bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802b4be:	b11b      	cbz	r3, 802b4c8 <__sinit+0x14>
 802b4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b4c4:	f7ff bff0 	b.w	802b4a8 <__sfp_lock_release>
 802b4c8:	4b04      	ldr	r3, [pc, #16]	@ (802b4dc <__sinit+0x28>)
 802b4ca:	6363      	str	r3, [r4, #52]	@ 0x34
 802b4cc:	4b04      	ldr	r3, [pc, #16]	@ (802b4e0 <__sinit+0x2c>)
 802b4ce:	681b      	ldr	r3, [r3, #0]
 802b4d0:	2b00      	cmp	r3, #0
 802b4d2:	d1f5      	bne.n	802b4c0 <__sinit+0xc>
 802b4d4:	f7ff ffc4 	bl	802b460 <global_stdio_init.part.0>
 802b4d8:	e7f2      	b.n	802b4c0 <__sinit+0xc>
 802b4da:	bf00      	nop
 802b4dc:	0802b421 	.word	0x0802b421
 802b4e0:	20018f2c 	.word	0x20018f2c

0802b4e4 <_vsnprintf_r>:
 802b4e4:	b530      	push	{r4, r5, lr}
 802b4e6:	4614      	mov	r4, r2
 802b4e8:	2c00      	cmp	r4, #0
 802b4ea:	b09b      	sub	sp, #108	@ 0x6c
 802b4ec:	4605      	mov	r5, r0
 802b4ee:	461a      	mov	r2, r3
 802b4f0:	da05      	bge.n	802b4fe <_vsnprintf_r+0x1a>
 802b4f2:	238b      	movs	r3, #139	@ 0x8b
 802b4f4:	6003      	str	r3, [r0, #0]
 802b4f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b4fa:	b01b      	add	sp, #108	@ 0x6c
 802b4fc:	bd30      	pop	{r4, r5, pc}
 802b4fe:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802b502:	f8ad 300c 	strh.w	r3, [sp, #12]
 802b506:	bf14      	ite	ne
 802b508:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802b50c:	4623      	moveq	r3, r4
 802b50e:	9302      	str	r3, [sp, #8]
 802b510:	9305      	str	r3, [sp, #20]
 802b512:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802b516:	9100      	str	r1, [sp, #0]
 802b518:	9104      	str	r1, [sp, #16]
 802b51a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b51e:	4669      	mov	r1, sp
 802b520:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802b522:	f004 fbe5 	bl	802fcf0 <_svfprintf_r>
 802b526:	1c43      	adds	r3, r0, #1
 802b528:	bfbc      	itt	lt
 802b52a:	238b      	movlt	r3, #139	@ 0x8b
 802b52c:	602b      	strlt	r3, [r5, #0]
 802b52e:	2c00      	cmp	r4, #0
 802b530:	d0e3      	beq.n	802b4fa <_vsnprintf_r+0x16>
 802b532:	9b00      	ldr	r3, [sp, #0]
 802b534:	2200      	movs	r2, #0
 802b536:	701a      	strb	r2, [r3, #0]
 802b538:	e7df      	b.n	802b4fa <_vsnprintf_r+0x16>
	...

0802b53c <vsnprintf>:
 802b53c:	b507      	push	{r0, r1, r2, lr}
 802b53e:	9300      	str	r3, [sp, #0]
 802b540:	4613      	mov	r3, r2
 802b542:	460a      	mov	r2, r1
 802b544:	4601      	mov	r1, r0
 802b546:	4803      	ldr	r0, [pc, #12]	@ (802b554 <vsnprintf+0x18>)
 802b548:	6800      	ldr	r0, [r0, #0]
 802b54a:	f7ff ffcb 	bl	802b4e4 <_vsnprintf_r>
 802b54e:	b003      	add	sp, #12
 802b550:	f85d fb04 	ldr.w	pc, [sp], #4
 802b554:	20000254 	.word	0x20000254

0802b558 <__sfvwrite_r>:
 802b558:	6893      	ldr	r3, [r2, #8]
 802b55a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b55e:	4606      	mov	r6, r0
 802b560:	460c      	mov	r4, r1
 802b562:	4691      	mov	r9, r2
 802b564:	b91b      	cbnz	r3, 802b56e <__sfvwrite_r+0x16>
 802b566:	2000      	movs	r0, #0
 802b568:	b003      	add	sp, #12
 802b56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b56e:	898b      	ldrh	r3, [r1, #12]
 802b570:	0718      	lsls	r0, r3, #28
 802b572:	d550      	bpl.n	802b616 <__sfvwrite_r+0xbe>
 802b574:	690b      	ldr	r3, [r1, #16]
 802b576:	2b00      	cmp	r3, #0
 802b578:	d04d      	beq.n	802b616 <__sfvwrite_r+0xbe>
 802b57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b57e:	f8d9 8000 	ldr.w	r8, [r9]
 802b582:	f013 0702 	ands.w	r7, r3, #2
 802b586:	d16b      	bne.n	802b660 <__sfvwrite_r+0x108>
 802b588:	f013 0301 	ands.w	r3, r3, #1
 802b58c:	f000 809c 	beq.w	802b6c8 <__sfvwrite_r+0x170>
 802b590:	4638      	mov	r0, r7
 802b592:	46ba      	mov	sl, r7
 802b594:	46bb      	mov	fp, r7
 802b596:	f1bb 0f00 	cmp.w	fp, #0
 802b59a:	f000 8103 	beq.w	802b7a4 <__sfvwrite_r+0x24c>
 802b59e:	b950      	cbnz	r0, 802b5b6 <__sfvwrite_r+0x5e>
 802b5a0:	465a      	mov	r2, fp
 802b5a2:	210a      	movs	r1, #10
 802b5a4:	4650      	mov	r0, sl
 802b5a6:	f7e4 fe2b 	bl	8010200 <memchr>
 802b5aa:	2800      	cmp	r0, #0
 802b5ac:	f000 8100 	beq.w	802b7b0 <__sfvwrite_r+0x258>
 802b5b0:	3001      	adds	r0, #1
 802b5b2:	eba0 070a 	sub.w	r7, r0, sl
 802b5b6:	6820      	ldr	r0, [r4, #0]
 802b5b8:	6921      	ldr	r1, [r4, #16]
 802b5ba:	68a5      	ldr	r5, [r4, #8]
 802b5bc:	6963      	ldr	r3, [r4, #20]
 802b5be:	455f      	cmp	r7, fp
 802b5c0:	463a      	mov	r2, r7
 802b5c2:	bf28      	it	cs
 802b5c4:	465a      	movcs	r2, fp
 802b5c6:	4288      	cmp	r0, r1
 802b5c8:	f240 80f5 	bls.w	802b7b6 <__sfvwrite_r+0x25e>
 802b5cc:	441d      	add	r5, r3
 802b5ce:	42aa      	cmp	r2, r5
 802b5d0:	f340 80f1 	ble.w	802b7b6 <__sfvwrite_r+0x25e>
 802b5d4:	4651      	mov	r1, sl
 802b5d6:	462a      	mov	r2, r5
 802b5d8:	f000 f9f8 	bl	802b9cc <memmove>
 802b5dc:	6823      	ldr	r3, [r4, #0]
 802b5de:	442b      	add	r3, r5
 802b5e0:	6023      	str	r3, [r4, #0]
 802b5e2:	4621      	mov	r1, r4
 802b5e4:	4630      	mov	r0, r6
 802b5e6:	f7ff fe23 	bl	802b230 <_fflush_r>
 802b5ea:	2800      	cmp	r0, #0
 802b5ec:	d167      	bne.n	802b6be <__sfvwrite_r+0x166>
 802b5ee:	1b7f      	subs	r7, r7, r5
 802b5f0:	f040 80f9 	bne.w	802b7e6 <__sfvwrite_r+0x28e>
 802b5f4:	4621      	mov	r1, r4
 802b5f6:	4630      	mov	r0, r6
 802b5f8:	f7ff fe1a 	bl	802b230 <_fflush_r>
 802b5fc:	2800      	cmp	r0, #0
 802b5fe:	d15e      	bne.n	802b6be <__sfvwrite_r+0x166>
 802b600:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802b604:	1b5b      	subs	r3, r3, r5
 802b606:	44aa      	add	sl, r5
 802b608:	ebab 0b05 	sub.w	fp, fp, r5
 802b60c:	f8c9 3008 	str.w	r3, [r9, #8]
 802b610:	2b00      	cmp	r3, #0
 802b612:	d1c0      	bne.n	802b596 <__sfvwrite_r+0x3e>
 802b614:	e7a7      	b.n	802b566 <__sfvwrite_r+0xe>
 802b616:	4621      	mov	r1, r4
 802b618:	4630      	mov	r0, r6
 802b61a:	f000 f907 	bl	802b82c <__swsetup_r>
 802b61e:	2800      	cmp	r0, #0
 802b620:	d0ab      	beq.n	802b57a <__sfvwrite_r+0x22>
 802b622:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b626:	e79f      	b.n	802b568 <__sfvwrite_r+0x10>
 802b628:	e9d8 a500 	ldrd	sl, r5, [r8]
 802b62c:	f108 0808 	add.w	r8, r8, #8
 802b630:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 802b634:	69e1      	ldr	r1, [r4, #28]
 802b636:	2d00      	cmp	r5, #0
 802b638:	d0f6      	beq.n	802b628 <__sfvwrite_r+0xd0>
 802b63a:	42bd      	cmp	r5, r7
 802b63c:	462b      	mov	r3, r5
 802b63e:	4652      	mov	r2, sl
 802b640:	bf28      	it	cs
 802b642:	463b      	movcs	r3, r7
 802b644:	4630      	mov	r0, r6
 802b646:	47d8      	blx	fp
 802b648:	2800      	cmp	r0, #0
 802b64a:	dd38      	ble.n	802b6be <__sfvwrite_r+0x166>
 802b64c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802b650:	1a1b      	subs	r3, r3, r0
 802b652:	4482      	add	sl, r0
 802b654:	1a2d      	subs	r5, r5, r0
 802b656:	f8c9 3008 	str.w	r3, [r9, #8]
 802b65a:	2b00      	cmp	r3, #0
 802b65c:	d1e8      	bne.n	802b630 <__sfvwrite_r+0xd8>
 802b65e:	e782      	b.n	802b566 <__sfvwrite_r+0xe>
 802b660:	f04f 0a00 	mov.w	sl, #0
 802b664:	4f61      	ldr	r7, [pc, #388]	@ (802b7ec <__sfvwrite_r+0x294>)
 802b666:	4655      	mov	r5, sl
 802b668:	e7e2      	b.n	802b630 <__sfvwrite_r+0xd8>
 802b66a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802b66e:	f108 0808 	add.w	r8, r8, #8
 802b672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b676:	6820      	ldr	r0, [r4, #0]
 802b678:	68a2      	ldr	r2, [r4, #8]
 802b67a:	f1ba 0f00 	cmp.w	sl, #0
 802b67e:	d0f4      	beq.n	802b66a <__sfvwrite_r+0x112>
 802b680:	0599      	lsls	r1, r3, #22
 802b682:	d563      	bpl.n	802b74c <__sfvwrite_r+0x1f4>
 802b684:	4552      	cmp	r2, sl
 802b686:	d836      	bhi.n	802b6f6 <__sfvwrite_r+0x19e>
 802b688:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802b68c:	d033      	beq.n	802b6f6 <__sfvwrite_r+0x19e>
 802b68e:	6921      	ldr	r1, [r4, #16]
 802b690:	6965      	ldr	r5, [r4, #20]
 802b692:	eba0 0b01 	sub.w	fp, r0, r1
 802b696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802b69a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802b69e:	f10b 0201 	add.w	r2, fp, #1
 802b6a2:	106d      	asrs	r5, r5, #1
 802b6a4:	4452      	add	r2, sl
 802b6a6:	4295      	cmp	r5, r2
 802b6a8:	bf38      	it	cc
 802b6aa:	4615      	movcc	r5, r2
 802b6ac:	055b      	lsls	r3, r3, #21
 802b6ae:	d53d      	bpl.n	802b72c <__sfvwrite_r+0x1d4>
 802b6b0:	4629      	mov	r1, r5
 802b6b2:	4630      	mov	r0, r6
 802b6b4:	f002 fbfa 	bl	802deac <_malloc_r>
 802b6b8:	b948      	cbnz	r0, 802b6ce <__sfvwrite_r+0x176>
 802b6ba:	230c      	movs	r3, #12
 802b6bc:	6033      	str	r3, [r6, #0]
 802b6be:	89a3      	ldrh	r3, [r4, #12]
 802b6c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b6c4:	81a3      	strh	r3, [r4, #12]
 802b6c6:	e7ac      	b.n	802b622 <__sfvwrite_r+0xca>
 802b6c8:	461f      	mov	r7, r3
 802b6ca:	469a      	mov	sl, r3
 802b6cc:	e7d1      	b.n	802b672 <__sfvwrite_r+0x11a>
 802b6ce:	465a      	mov	r2, fp
 802b6d0:	6921      	ldr	r1, [r4, #16]
 802b6d2:	9001      	str	r0, [sp, #4]
 802b6d4:	f001 fbd0 	bl	802ce78 <memcpy>
 802b6d8:	89a2      	ldrh	r2, [r4, #12]
 802b6da:	9b01      	ldr	r3, [sp, #4]
 802b6dc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802b6e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802b6e4:	81a2      	strh	r2, [r4, #12]
 802b6e6:	6123      	str	r3, [r4, #16]
 802b6e8:	6165      	str	r5, [r4, #20]
 802b6ea:	445b      	add	r3, fp
 802b6ec:	eba5 050b 	sub.w	r5, r5, fp
 802b6f0:	6023      	str	r3, [r4, #0]
 802b6f2:	4652      	mov	r2, sl
 802b6f4:	60a5      	str	r5, [r4, #8]
 802b6f6:	4552      	cmp	r2, sl
 802b6f8:	bf28      	it	cs
 802b6fa:	4652      	movcs	r2, sl
 802b6fc:	6820      	ldr	r0, [r4, #0]
 802b6fe:	9201      	str	r2, [sp, #4]
 802b700:	4639      	mov	r1, r7
 802b702:	f000 f963 	bl	802b9cc <memmove>
 802b706:	68a3      	ldr	r3, [r4, #8]
 802b708:	9a01      	ldr	r2, [sp, #4]
 802b70a:	1a9b      	subs	r3, r3, r2
 802b70c:	60a3      	str	r3, [r4, #8]
 802b70e:	6823      	ldr	r3, [r4, #0]
 802b710:	4413      	add	r3, r2
 802b712:	4655      	mov	r5, sl
 802b714:	6023      	str	r3, [r4, #0]
 802b716:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802b71a:	1b5b      	subs	r3, r3, r5
 802b71c:	442f      	add	r7, r5
 802b71e:	ebaa 0a05 	sub.w	sl, sl, r5
 802b722:	f8c9 3008 	str.w	r3, [r9, #8]
 802b726:	2b00      	cmp	r3, #0
 802b728:	d1a3      	bne.n	802b672 <__sfvwrite_r+0x11a>
 802b72a:	e71c      	b.n	802b566 <__sfvwrite_r+0xe>
 802b72c:	462a      	mov	r2, r5
 802b72e:	4630      	mov	r0, r6
 802b730:	f007 fbcc 	bl	8032ecc <_realloc_r>
 802b734:	4603      	mov	r3, r0
 802b736:	2800      	cmp	r0, #0
 802b738:	d1d5      	bne.n	802b6e6 <__sfvwrite_r+0x18e>
 802b73a:	6921      	ldr	r1, [r4, #16]
 802b73c:	4630      	mov	r0, r6
 802b73e:	f002 fa9d 	bl	802dc7c <_free_r>
 802b742:	89a3      	ldrh	r3, [r4, #12]
 802b744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802b748:	81a3      	strh	r3, [r4, #12]
 802b74a:	e7b6      	b.n	802b6ba <__sfvwrite_r+0x162>
 802b74c:	6923      	ldr	r3, [r4, #16]
 802b74e:	4283      	cmp	r3, r0
 802b750:	d302      	bcc.n	802b758 <__sfvwrite_r+0x200>
 802b752:	6961      	ldr	r1, [r4, #20]
 802b754:	4551      	cmp	r1, sl
 802b756:	d915      	bls.n	802b784 <__sfvwrite_r+0x22c>
 802b758:	4552      	cmp	r2, sl
 802b75a:	bf28      	it	cs
 802b75c:	4652      	movcs	r2, sl
 802b75e:	4639      	mov	r1, r7
 802b760:	4615      	mov	r5, r2
 802b762:	f000 f933 	bl	802b9cc <memmove>
 802b766:	68a3      	ldr	r3, [r4, #8]
 802b768:	6822      	ldr	r2, [r4, #0]
 802b76a:	1b5b      	subs	r3, r3, r5
 802b76c:	442a      	add	r2, r5
 802b76e:	60a3      	str	r3, [r4, #8]
 802b770:	6022      	str	r2, [r4, #0]
 802b772:	2b00      	cmp	r3, #0
 802b774:	d1cf      	bne.n	802b716 <__sfvwrite_r+0x1be>
 802b776:	4621      	mov	r1, r4
 802b778:	4630      	mov	r0, r6
 802b77a:	f7ff fd59 	bl	802b230 <_fflush_r>
 802b77e:	2800      	cmp	r0, #0
 802b780:	d0c9      	beq.n	802b716 <__sfvwrite_r+0x1be>
 802b782:	e79c      	b.n	802b6be <__sfvwrite_r+0x166>
 802b784:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802b788:	4553      	cmp	r3, sl
 802b78a:	bf28      	it	cs
 802b78c:	4653      	movcs	r3, sl
 802b78e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802b790:	fb93 f3f1 	sdiv	r3, r3, r1
 802b794:	463a      	mov	r2, r7
 802b796:	434b      	muls	r3, r1
 802b798:	4630      	mov	r0, r6
 802b79a:	69e1      	ldr	r1, [r4, #28]
 802b79c:	47a8      	blx	r5
 802b79e:	1e05      	subs	r5, r0, #0
 802b7a0:	dcb9      	bgt.n	802b716 <__sfvwrite_r+0x1be>
 802b7a2:	e78c      	b.n	802b6be <__sfvwrite_r+0x166>
 802b7a4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802b7a8:	2000      	movs	r0, #0
 802b7aa:	f108 0808 	add.w	r8, r8, #8
 802b7ae:	e6f2      	b.n	802b596 <__sfvwrite_r+0x3e>
 802b7b0:	f10b 0701 	add.w	r7, fp, #1
 802b7b4:	e6ff      	b.n	802b5b6 <__sfvwrite_r+0x5e>
 802b7b6:	4293      	cmp	r3, r2
 802b7b8:	dc08      	bgt.n	802b7cc <__sfvwrite_r+0x274>
 802b7ba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802b7bc:	69e1      	ldr	r1, [r4, #28]
 802b7be:	4652      	mov	r2, sl
 802b7c0:	4630      	mov	r0, r6
 802b7c2:	47a8      	blx	r5
 802b7c4:	1e05      	subs	r5, r0, #0
 802b7c6:	f73f af12 	bgt.w	802b5ee <__sfvwrite_r+0x96>
 802b7ca:	e778      	b.n	802b6be <__sfvwrite_r+0x166>
 802b7cc:	4651      	mov	r1, sl
 802b7ce:	9201      	str	r2, [sp, #4]
 802b7d0:	f000 f8fc 	bl	802b9cc <memmove>
 802b7d4:	9a01      	ldr	r2, [sp, #4]
 802b7d6:	68a3      	ldr	r3, [r4, #8]
 802b7d8:	1a9b      	subs	r3, r3, r2
 802b7da:	60a3      	str	r3, [r4, #8]
 802b7dc:	6823      	ldr	r3, [r4, #0]
 802b7de:	4413      	add	r3, r2
 802b7e0:	6023      	str	r3, [r4, #0]
 802b7e2:	4615      	mov	r5, r2
 802b7e4:	e703      	b.n	802b5ee <__sfvwrite_r+0x96>
 802b7e6:	2001      	movs	r0, #1
 802b7e8:	e70a      	b.n	802b600 <__sfvwrite_r+0xa8>
 802b7ea:	bf00      	nop
 802b7ec:	7ffffc00 	.word	0x7ffffc00

0802b7f0 <_fwalk_sglue>:
 802b7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b7f4:	4607      	mov	r7, r0
 802b7f6:	4688      	mov	r8, r1
 802b7f8:	4614      	mov	r4, r2
 802b7fa:	2600      	movs	r6, #0
 802b7fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b800:	f1b9 0901 	subs.w	r9, r9, #1
 802b804:	d505      	bpl.n	802b812 <_fwalk_sglue+0x22>
 802b806:	6824      	ldr	r4, [r4, #0]
 802b808:	2c00      	cmp	r4, #0
 802b80a:	d1f7      	bne.n	802b7fc <_fwalk_sglue+0xc>
 802b80c:	4630      	mov	r0, r6
 802b80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b812:	89ab      	ldrh	r3, [r5, #12]
 802b814:	2b01      	cmp	r3, #1
 802b816:	d907      	bls.n	802b828 <_fwalk_sglue+0x38>
 802b818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b81c:	3301      	adds	r3, #1
 802b81e:	d003      	beq.n	802b828 <_fwalk_sglue+0x38>
 802b820:	4629      	mov	r1, r5
 802b822:	4638      	mov	r0, r7
 802b824:	47c0      	blx	r8
 802b826:	4306      	orrs	r6, r0
 802b828:	3568      	adds	r5, #104	@ 0x68
 802b82a:	e7e9      	b.n	802b800 <_fwalk_sglue+0x10>

0802b82c <__swsetup_r>:
 802b82c:	b538      	push	{r3, r4, r5, lr}
 802b82e:	4b29      	ldr	r3, [pc, #164]	@ (802b8d4 <__swsetup_r+0xa8>)
 802b830:	4605      	mov	r5, r0
 802b832:	6818      	ldr	r0, [r3, #0]
 802b834:	460c      	mov	r4, r1
 802b836:	b118      	cbz	r0, 802b840 <__swsetup_r+0x14>
 802b838:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802b83a:	b90b      	cbnz	r3, 802b840 <__swsetup_r+0x14>
 802b83c:	f7ff fe3a 	bl	802b4b4 <__sinit>
 802b840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b844:	0719      	lsls	r1, r3, #28
 802b846:	d422      	bmi.n	802b88e <__swsetup_r+0x62>
 802b848:	06da      	lsls	r2, r3, #27
 802b84a:	d407      	bmi.n	802b85c <__swsetup_r+0x30>
 802b84c:	2209      	movs	r2, #9
 802b84e:	602a      	str	r2, [r5, #0]
 802b850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b854:	81a3      	strh	r3, [r4, #12]
 802b856:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b85a:	e033      	b.n	802b8c4 <__swsetup_r+0x98>
 802b85c:	0758      	lsls	r0, r3, #29
 802b85e:	d512      	bpl.n	802b886 <__swsetup_r+0x5a>
 802b860:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802b862:	b141      	cbz	r1, 802b876 <__swsetup_r+0x4a>
 802b864:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802b868:	4299      	cmp	r1, r3
 802b86a:	d002      	beq.n	802b872 <__swsetup_r+0x46>
 802b86c:	4628      	mov	r0, r5
 802b86e:	f002 fa05 	bl	802dc7c <_free_r>
 802b872:	2300      	movs	r3, #0
 802b874:	6323      	str	r3, [r4, #48]	@ 0x30
 802b876:	89a3      	ldrh	r3, [r4, #12]
 802b878:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802b87c:	81a3      	strh	r3, [r4, #12]
 802b87e:	2300      	movs	r3, #0
 802b880:	6063      	str	r3, [r4, #4]
 802b882:	6923      	ldr	r3, [r4, #16]
 802b884:	6023      	str	r3, [r4, #0]
 802b886:	89a3      	ldrh	r3, [r4, #12]
 802b888:	f043 0308 	orr.w	r3, r3, #8
 802b88c:	81a3      	strh	r3, [r4, #12]
 802b88e:	6923      	ldr	r3, [r4, #16]
 802b890:	b94b      	cbnz	r3, 802b8a6 <__swsetup_r+0x7a>
 802b892:	89a3      	ldrh	r3, [r4, #12]
 802b894:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802b898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802b89c:	d003      	beq.n	802b8a6 <__swsetup_r+0x7a>
 802b89e:	4621      	mov	r1, r4
 802b8a0:	4628      	mov	r0, r5
 802b8a2:	f005 fc2b 	bl	80310fc <__smakebuf_r>
 802b8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b8aa:	f013 0201 	ands.w	r2, r3, #1
 802b8ae:	d00a      	beq.n	802b8c6 <__swsetup_r+0x9a>
 802b8b0:	2200      	movs	r2, #0
 802b8b2:	60a2      	str	r2, [r4, #8]
 802b8b4:	6962      	ldr	r2, [r4, #20]
 802b8b6:	4252      	negs	r2, r2
 802b8b8:	61a2      	str	r2, [r4, #24]
 802b8ba:	6922      	ldr	r2, [r4, #16]
 802b8bc:	b942      	cbnz	r2, 802b8d0 <__swsetup_r+0xa4>
 802b8be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802b8c2:	d1c5      	bne.n	802b850 <__swsetup_r+0x24>
 802b8c4:	bd38      	pop	{r3, r4, r5, pc}
 802b8c6:	0799      	lsls	r1, r3, #30
 802b8c8:	bf58      	it	pl
 802b8ca:	6962      	ldrpl	r2, [r4, #20]
 802b8cc:	60a2      	str	r2, [r4, #8]
 802b8ce:	e7f4      	b.n	802b8ba <__swsetup_r+0x8e>
 802b8d0:	2000      	movs	r0, #0
 802b8d2:	e7f7      	b.n	802b8c4 <__swsetup_r+0x98>
 802b8d4:	20000254 	.word	0x20000254

0802b8d8 <memcmp>:
 802b8d8:	b510      	push	{r4, lr}
 802b8da:	3901      	subs	r1, #1
 802b8dc:	4402      	add	r2, r0
 802b8de:	4290      	cmp	r0, r2
 802b8e0:	d101      	bne.n	802b8e6 <memcmp+0xe>
 802b8e2:	2000      	movs	r0, #0
 802b8e4:	e005      	b.n	802b8f2 <memcmp+0x1a>
 802b8e6:	7803      	ldrb	r3, [r0, #0]
 802b8e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802b8ec:	42a3      	cmp	r3, r4
 802b8ee:	d001      	beq.n	802b8f4 <memcmp+0x1c>
 802b8f0:	1b18      	subs	r0, r3, r4
 802b8f2:	bd10      	pop	{r4, pc}
 802b8f4:	3001      	adds	r0, #1
 802b8f6:	e7f2      	b.n	802b8de <memcmp+0x6>

0802b8f8 <__fputwc>:
 802b8f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802b8fc:	4680      	mov	r8, r0
 802b8fe:	460f      	mov	r7, r1
 802b900:	4614      	mov	r4, r2
 802b902:	f001 fa05 	bl	802cd10 <__locale_mb_cur_max>
 802b906:	2801      	cmp	r0, #1
 802b908:	4605      	mov	r5, r0
 802b90a:	d11b      	bne.n	802b944 <__fputwc+0x4c>
 802b90c:	1e7b      	subs	r3, r7, #1
 802b90e:	2bfe      	cmp	r3, #254	@ 0xfe
 802b910:	d818      	bhi.n	802b944 <__fputwc+0x4c>
 802b912:	f88d 7004 	strb.w	r7, [sp, #4]
 802b916:	2600      	movs	r6, #0
 802b918:	f10d 0904 	add.w	r9, sp, #4
 802b91c:	42ae      	cmp	r6, r5
 802b91e:	d021      	beq.n	802b964 <__fputwc+0x6c>
 802b920:	68a3      	ldr	r3, [r4, #8]
 802b922:	f816 1009 	ldrb.w	r1, [r6, r9]
 802b926:	3b01      	subs	r3, #1
 802b928:	2b00      	cmp	r3, #0
 802b92a:	60a3      	str	r3, [r4, #8]
 802b92c:	da04      	bge.n	802b938 <__fputwc+0x40>
 802b92e:	69a2      	ldr	r2, [r4, #24]
 802b930:	4293      	cmp	r3, r2
 802b932:	db1b      	blt.n	802b96c <__fputwc+0x74>
 802b934:	290a      	cmp	r1, #10
 802b936:	d019      	beq.n	802b96c <__fputwc+0x74>
 802b938:	6823      	ldr	r3, [r4, #0]
 802b93a:	1c5a      	adds	r2, r3, #1
 802b93c:	6022      	str	r2, [r4, #0]
 802b93e:	7019      	strb	r1, [r3, #0]
 802b940:	3601      	adds	r6, #1
 802b942:	e7eb      	b.n	802b91c <__fputwc+0x24>
 802b944:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 802b948:	463a      	mov	r2, r7
 802b94a:	a901      	add	r1, sp, #4
 802b94c:	4640      	mov	r0, r8
 802b94e:	f001 faa1 	bl	802ce94 <_wcrtomb_r>
 802b952:	1c43      	adds	r3, r0, #1
 802b954:	4605      	mov	r5, r0
 802b956:	d1de      	bne.n	802b916 <__fputwc+0x1e>
 802b958:	89a3      	ldrh	r3, [r4, #12]
 802b95a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b95e:	81a3      	strh	r3, [r4, #12]
 802b960:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802b964:	4638      	mov	r0, r7
 802b966:	b003      	add	sp, #12
 802b968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b96c:	4622      	mov	r2, r4
 802b96e:	4640      	mov	r0, r8
 802b970:	f008 fb1d 	bl	8033fae <__swbuf_r>
 802b974:	3001      	adds	r0, #1
 802b976:	d1e3      	bne.n	802b940 <__fputwc+0x48>
 802b978:	e7f2      	b.n	802b960 <__fputwc+0x68>

0802b97a <_fputwc_r>:
 802b97a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 802b97c:	07db      	lsls	r3, r3, #31
 802b97e:	b570      	push	{r4, r5, r6, lr}
 802b980:	4605      	mov	r5, r0
 802b982:	460e      	mov	r6, r1
 802b984:	4614      	mov	r4, r2
 802b986:	d405      	bmi.n	802b994 <_fputwc_r+0x1a>
 802b988:	8993      	ldrh	r3, [r2, #12]
 802b98a:	0598      	lsls	r0, r3, #22
 802b98c:	d402      	bmi.n	802b994 <_fputwc_r+0x1a>
 802b98e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 802b990:	f001 fa6f 	bl	802ce72 <__retarget_lock_acquire_recursive>
 802b994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b998:	0499      	lsls	r1, r3, #18
 802b99a:	d406      	bmi.n	802b9aa <_fputwc_r+0x30>
 802b99c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b9a0:	81a3      	strh	r3, [r4, #12]
 802b9a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b9a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b9a8:	6663      	str	r3, [r4, #100]	@ 0x64
 802b9aa:	4622      	mov	r2, r4
 802b9ac:	4628      	mov	r0, r5
 802b9ae:	4631      	mov	r1, r6
 802b9b0:	f7ff ffa2 	bl	802b8f8 <__fputwc>
 802b9b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b9b6:	07da      	lsls	r2, r3, #31
 802b9b8:	4605      	mov	r5, r0
 802b9ba:	d405      	bmi.n	802b9c8 <_fputwc_r+0x4e>
 802b9bc:	89a3      	ldrh	r3, [r4, #12]
 802b9be:	059b      	lsls	r3, r3, #22
 802b9c0:	d402      	bmi.n	802b9c8 <_fputwc_r+0x4e>
 802b9c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b9c4:	f001 fa57 	bl	802ce76 <__retarget_lock_release_recursive>
 802b9c8:	4628      	mov	r0, r5
 802b9ca:	bd70      	pop	{r4, r5, r6, pc}

0802b9cc <memmove>:
 802b9cc:	4288      	cmp	r0, r1
 802b9ce:	b510      	push	{r4, lr}
 802b9d0:	eb01 0402 	add.w	r4, r1, r2
 802b9d4:	d902      	bls.n	802b9dc <memmove+0x10>
 802b9d6:	4284      	cmp	r4, r0
 802b9d8:	4623      	mov	r3, r4
 802b9da:	d807      	bhi.n	802b9ec <memmove+0x20>
 802b9dc:	1e43      	subs	r3, r0, #1
 802b9de:	42a1      	cmp	r1, r4
 802b9e0:	d008      	beq.n	802b9f4 <memmove+0x28>
 802b9e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b9e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802b9ea:	e7f8      	b.n	802b9de <memmove+0x12>
 802b9ec:	4402      	add	r2, r0
 802b9ee:	4601      	mov	r1, r0
 802b9f0:	428a      	cmp	r2, r1
 802b9f2:	d100      	bne.n	802b9f6 <memmove+0x2a>
 802b9f4:	bd10      	pop	{r4, pc}
 802b9f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802b9fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802b9fe:	e7f7      	b.n	802b9f0 <memmove+0x24>

0802ba00 <memset>:
 802ba00:	4402      	add	r2, r0
 802ba02:	4603      	mov	r3, r0
 802ba04:	4293      	cmp	r3, r2
 802ba06:	d100      	bne.n	802ba0a <memset+0xa>
 802ba08:	4770      	bx	lr
 802ba0a:	f803 1b01 	strb.w	r1, [r3], #1
 802ba0e:	e7f9      	b.n	802ba04 <memset+0x4>

0802ba10 <strcat>:
 802ba10:	b510      	push	{r4, lr}
 802ba12:	4602      	mov	r2, r0
 802ba14:	7814      	ldrb	r4, [r2, #0]
 802ba16:	4613      	mov	r3, r2
 802ba18:	3201      	adds	r2, #1
 802ba1a:	2c00      	cmp	r4, #0
 802ba1c:	d1fa      	bne.n	802ba14 <strcat+0x4>
 802ba1e:	3b01      	subs	r3, #1
 802ba20:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ba24:	f803 2f01 	strb.w	r2, [r3, #1]!
 802ba28:	2a00      	cmp	r2, #0
 802ba2a:	d1f9      	bne.n	802ba20 <strcat+0x10>
 802ba2c:	bd10      	pop	{r4, pc}

0802ba2e <strchr>:
 802ba2e:	b2c9      	uxtb	r1, r1
 802ba30:	4603      	mov	r3, r0
 802ba32:	4618      	mov	r0, r3
 802ba34:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ba38:	b112      	cbz	r2, 802ba40 <strchr+0x12>
 802ba3a:	428a      	cmp	r2, r1
 802ba3c:	d1f9      	bne.n	802ba32 <strchr+0x4>
 802ba3e:	4770      	bx	lr
 802ba40:	2900      	cmp	r1, #0
 802ba42:	bf18      	it	ne
 802ba44:	2000      	movne	r0, #0
 802ba46:	4770      	bx	lr

0802ba48 <strcspn>:
 802ba48:	b570      	push	{r4, r5, r6, lr}
 802ba4a:	4603      	mov	r3, r0
 802ba4c:	461e      	mov	r6, r3
 802ba4e:	f813 4b01 	ldrb.w	r4, [r3], #1
 802ba52:	b144      	cbz	r4, 802ba66 <strcspn+0x1e>
 802ba54:	1e4a      	subs	r2, r1, #1
 802ba56:	e001      	b.n	802ba5c <strcspn+0x14>
 802ba58:	42a5      	cmp	r5, r4
 802ba5a:	d004      	beq.n	802ba66 <strcspn+0x1e>
 802ba5c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802ba60:	2d00      	cmp	r5, #0
 802ba62:	d1f9      	bne.n	802ba58 <strcspn+0x10>
 802ba64:	e7f2      	b.n	802ba4c <strcspn+0x4>
 802ba66:	1a30      	subs	r0, r6, r0
 802ba68:	bd70      	pop	{r4, r5, r6, pc}

0802ba6a <strncmp>:
 802ba6a:	b510      	push	{r4, lr}
 802ba6c:	b16a      	cbz	r2, 802ba8a <strncmp+0x20>
 802ba6e:	3901      	subs	r1, #1
 802ba70:	1884      	adds	r4, r0, r2
 802ba72:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ba76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802ba7a:	429a      	cmp	r2, r3
 802ba7c:	d103      	bne.n	802ba86 <strncmp+0x1c>
 802ba7e:	42a0      	cmp	r0, r4
 802ba80:	d001      	beq.n	802ba86 <strncmp+0x1c>
 802ba82:	2a00      	cmp	r2, #0
 802ba84:	d1f5      	bne.n	802ba72 <strncmp+0x8>
 802ba86:	1ad0      	subs	r0, r2, r3
 802ba88:	bd10      	pop	{r4, pc}
 802ba8a:	4610      	mov	r0, r2
 802ba8c:	e7fc      	b.n	802ba88 <strncmp+0x1e>

0802ba8e <strncpy>:
 802ba8e:	b510      	push	{r4, lr}
 802ba90:	3901      	subs	r1, #1
 802ba92:	4603      	mov	r3, r0
 802ba94:	b132      	cbz	r2, 802baa4 <strncpy+0x16>
 802ba96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802ba9a:	f803 4b01 	strb.w	r4, [r3], #1
 802ba9e:	3a01      	subs	r2, #1
 802baa0:	2c00      	cmp	r4, #0
 802baa2:	d1f7      	bne.n	802ba94 <strncpy+0x6>
 802baa4:	441a      	add	r2, r3
 802baa6:	2100      	movs	r1, #0
 802baa8:	4293      	cmp	r3, r2
 802baaa:	d100      	bne.n	802baae <strncpy+0x20>
 802baac:	bd10      	pop	{r4, pc}
 802baae:	f803 1b01 	strb.w	r1, [r3], #1
 802bab2:	e7f9      	b.n	802baa8 <strncpy+0x1a>

0802bab4 <strrchr>:
 802bab4:	b538      	push	{r3, r4, r5, lr}
 802bab6:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802baba:	4603      	mov	r3, r0
 802babc:	d10e      	bne.n	802badc <strrchr+0x28>
 802babe:	4621      	mov	r1, r4
 802bac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bac4:	f7ff bfb3 	b.w	802ba2e <strchr>
 802bac8:	1c43      	adds	r3, r0, #1
 802baca:	4605      	mov	r5, r0
 802bacc:	4621      	mov	r1, r4
 802bace:	4618      	mov	r0, r3
 802bad0:	f7ff ffad 	bl	802ba2e <strchr>
 802bad4:	2800      	cmp	r0, #0
 802bad6:	d1f7      	bne.n	802bac8 <strrchr+0x14>
 802bad8:	4628      	mov	r0, r5
 802bada:	bd38      	pop	{r3, r4, r5, pc}
 802badc:	2500      	movs	r5, #0
 802bade:	e7f5      	b.n	802bacc <strrchr+0x18>

0802bae0 <strspn>:
 802bae0:	b570      	push	{r4, r5, r6, lr}
 802bae2:	4603      	mov	r3, r0
 802bae4:	461e      	mov	r6, r3
 802bae6:	f813 4b01 	ldrb.w	r4, [r3], #1
 802baea:	b13c      	cbz	r4, 802bafc <strspn+0x1c>
 802baec:	1e4a      	subs	r2, r1, #1
 802baee:	e001      	b.n	802baf4 <strspn+0x14>
 802baf0:	42a5      	cmp	r5, r4
 802baf2:	d0f7      	beq.n	802bae4 <strspn+0x4>
 802baf4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802baf8:	2d00      	cmp	r5, #0
 802bafa:	d1f9      	bne.n	802baf0 <strspn+0x10>
 802bafc:	1a30      	subs	r0, r6, r0
 802bafe:	bd70      	pop	{r4, r5, r6, pc}

0802bb00 <strstr>:
 802bb00:	780a      	ldrb	r2, [r1, #0]
 802bb02:	b570      	push	{r4, r5, r6, lr}
 802bb04:	b96a      	cbnz	r2, 802bb22 <strstr+0x22>
 802bb06:	bd70      	pop	{r4, r5, r6, pc}
 802bb08:	429a      	cmp	r2, r3
 802bb0a:	d109      	bne.n	802bb20 <strstr+0x20>
 802bb0c:	460c      	mov	r4, r1
 802bb0e:	4605      	mov	r5, r0
 802bb10:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802bb14:	2b00      	cmp	r3, #0
 802bb16:	d0f6      	beq.n	802bb06 <strstr+0x6>
 802bb18:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802bb1c:	429e      	cmp	r6, r3
 802bb1e:	d0f7      	beq.n	802bb10 <strstr+0x10>
 802bb20:	3001      	adds	r0, #1
 802bb22:	7803      	ldrb	r3, [r0, #0]
 802bb24:	2b00      	cmp	r3, #0
 802bb26:	d1ef      	bne.n	802bb08 <strstr+0x8>
 802bb28:	4618      	mov	r0, r3
 802bb2a:	e7ec      	b.n	802bb06 <strstr+0x6>

0802bb2c <localtime_r>:
 802bb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bb30:	460c      	mov	r4, r1
 802bb32:	4680      	mov	r8, r0
 802bb34:	f008 fab6 	bl	80340a4 <__gettzinfo>
 802bb38:	4621      	mov	r1, r4
 802bb3a:	4605      	mov	r5, r0
 802bb3c:	4640      	mov	r0, r8
 802bb3e:	f008 fab5 	bl	80340ac <gmtime_r>
 802bb42:	6943      	ldr	r3, [r0, #20]
 802bb44:	0799      	lsls	r1, r3, #30
 802bb46:	4604      	mov	r4, r0
 802bb48:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 802bb4c:	d106      	bne.n	802bb5c <localtime_r+0x30>
 802bb4e:	2264      	movs	r2, #100	@ 0x64
 802bb50:	fb97 f3f2 	sdiv	r3, r7, r2
 802bb54:	fb02 7313 	mls	r3, r2, r3, r7
 802bb58:	2b00      	cmp	r3, #0
 802bb5a:	d170      	bne.n	802bc3e <localtime_r+0x112>
 802bb5c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802bb60:	fb97 f3f2 	sdiv	r3, r7, r2
 802bb64:	fb02 7313 	mls	r3, r2, r3, r7
 802bb68:	fab3 f383 	clz	r3, r3
 802bb6c:	095b      	lsrs	r3, r3, #5
 802bb6e:	4e64      	ldr	r6, [pc, #400]	@ (802bd00 <localtime_r+0x1d4>)
 802bb70:	2230      	movs	r2, #48	@ 0x30
 802bb72:	fb02 6603 	mla	r6, r2, r3, r6
 802bb76:	f000 fe97 	bl	802c8a8 <__tz_lock>
 802bb7a:	f000 fea1 	bl	802c8c0 <_tzset_unlocked>
 802bb7e:	4b61      	ldr	r3, [pc, #388]	@ (802bd04 <localtime_r+0x1d8>)
 802bb80:	681b      	ldr	r3, [r3, #0]
 802bb82:	2b00      	cmp	r3, #0
 802bb84:	d06a      	beq.n	802bc5c <localtime_r+0x130>
 802bb86:	686b      	ldr	r3, [r5, #4]
 802bb88:	42bb      	cmp	r3, r7
 802bb8a:	d15a      	bne.n	802bc42 <localtime_r+0x116>
 802bb8c:	682f      	ldr	r7, [r5, #0]
 802bb8e:	e9d8 2300 	ldrd	r2, r3, [r8]
 802bb92:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802bb96:	2f00      	cmp	r7, #0
 802bb98:	d15b      	bne.n	802bc52 <localtime_r+0x126>
 802bb9a:	4282      	cmp	r2, r0
 802bb9c:	eb73 0101 	sbcs.w	r1, r3, r1
 802bba0:	db5e      	blt.n	802bc60 <localtime_r+0x134>
 802bba2:	2301      	movs	r3, #1
 802bba4:	6223      	str	r3, [r4, #32]
 802bba6:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802bba8:	6861      	ldr	r1, [r4, #4]
 802bbaa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802bbae:	fb93 f0f2 	sdiv	r0, r3, r2
 802bbb2:	fb02 3310 	mls	r3, r2, r0, r3
 802bbb6:	223c      	movs	r2, #60	@ 0x3c
 802bbb8:	fb93 f5f2 	sdiv	r5, r3, r2
 802bbbc:	fb02 3215 	mls	r2, r2, r5, r3
 802bbc0:	6823      	ldr	r3, [r4, #0]
 802bbc2:	1a9b      	subs	r3, r3, r2
 802bbc4:	68a2      	ldr	r2, [r4, #8]
 802bbc6:	6023      	str	r3, [r4, #0]
 802bbc8:	1b49      	subs	r1, r1, r5
 802bbca:	1a12      	subs	r2, r2, r0
 802bbcc:	2b3b      	cmp	r3, #59	@ 0x3b
 802bbce:	6061      	str	r1, [r4, #4]
 802bbd0:	60a2      	str	r2, [r4, #8]
 802bbd2:	dd51      	ble.n	802bc78 <localtime_r+0x14c>
 802bbd4:	3101      	adds	r1, #1
 802bbd6:	6061      	str	r1, [r4, #4]
 802bbd8:	3b3c      	subs	r3, #60	@ 0x3c
 802bbda:	6023      	str	r3, [r4, #0]
 802bbdc:	6863      	ldr	r3, [r4, #4]
 802bbde:	2b3b      	cmp	r3, #59	@ 0x3b
 802bbe0:	dd50      	ble.n	802bc84 <localtime_r+0x158>
 802bbe2:	3201      	adds	r2, #1
 802bbe4:	60a2      	str	r2, [r4, #8]
 802bbe6:	3b3c      	subs	r3, #60	@ 0x3c
 802bbe8:	6063      	str	r3, [r4, #4]
 802bbea:	68a3      	ldr	r3, [r4, #8]
 802bbec:	2b17      	cmp	r3, #23
 802bbee:	dd4f      	ble.n	802bc90 <localtime_r+0x164>
 802bbf0:	69e2      	ldr	r2, [r4, #28]
 802bbf2:	3201      	adds	r2, #1
 802bbf4:	61e2      	str	r2, [r4, #28]
 802bbf6:	69a2      	ldr	r2, [r4, #24]
 802bbf8:	3201      	adds	r2, #1
 802bbfa:	2a07      	cmp	r2, #7
 802bbfc:	bfa8      	it	ge
 802bbfe:	2200      	movge	r2, #0
 802bc00:	61a2      	str	r2, [r4, #24]
 802bc02:	68e2      	ldr	r2, [r4, #12]
 802bc04:	3b18      	subs	r3, #24
 802bc06:	3201      	adds	r2, #1
 802bc08:	60a3      	str	r3, [r4, #8]
 802bc0a:	6923      	ldr	r3, [r4, #16]
 802bc0c:	60e2      	str	r2, [r4, #12]
 802bc0e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802bc12:	428a      	cmp	r2, r1
 802bc14:	dd0e      	ble.n	802bc34 <localtime_r+0x108>
 802bc16:	2b0b      	cmp	r3, #11
 802bc18:	eba2 0201 	sub.w	r2, r2, r1
 802bc1c:	60e2      	str	r2, [r4, #12]
 802bc1e:	f103 0201 	add.w	r2, r3, #1
 802bc22:	bf09      	itett	eq
 802bc24:	6963      	ldreq	r3, [r4, #20]
 802bc26:	6122      	strne	r2, [r4, #16]
 802bc28:	2200      	moveq	r2, #0
 802bc2a:	3301      	addeq	r3, #1
 802bc2c:	bf02      	ittt	eq
 802bc2e:	6122      	streq	r2, [r4, #16]
 802bc30:	6163      	streq	r3, [r4, #20]
 802bc32:	61e2      	streq	r2, [r4, #28]
 802bc34:	f000 fe3e 	bl	802c8b4 <__tz_unlock>
 802bc38:	4620      	mov	r0, r4
 802bc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bc3e:	2301      	movs	r3, #1
 802bc40:	e795      	b.n	802bb6e <localtime_r+0x42>
 802bc42:	4638      	mov	r0, r7
 802bc44:	f000 fd86 	bl	802c754 <__tzcalc_limits>
 802bc48:	2800      	cmp	r0, #0
 802bc4a:	d19f      	bne.n	802bb8c <localtime_r+0x60>
 802bc4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802bc50:	e004      	b.n	802bc5c <localtime_r+0x130>
 802bc52:	4282      	cmp	r2, r0
 802bc54:	eb73 0101 	sbcs.w	r1, r3, r1
 802bc58:	da02      	bge.n	802bc60 <localtime_r+0x134>
 802bc5a:	2300      	movs	r3, #0
 802bc5c:	6223      	str	r3, [r4, #32]
 802bc5e:	e009      	b.n	802bc74 <localtime_r+0x148>
 802bc60:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802bc64:	4282      	cmp	r2, r0
 802bc66:	418b      	sbcs	r3, r1
 802bc68:	bfb4      	ite	lt
 802bc6a:	2301      	movlt	r3, #1
 802bc6c:	2300      	movge	r3, #0
 802bc6e:	6223      	str	r3, [r4, #32]
 802bc70:	2b00      	cmp	r3, #0
 802bc72:	d198      	bne.n	802bba6 <localtime_r+0x7a>
 802bc74:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802bc76:	e797      	b.n	802bba8 <localtime_r+0x7c>
 802bc78:	2b00      	cmp	r3, #0
 802bc7a:	daaf      	bge.n	802bbdc <localtime_r+0xb0>
 802bc7c:	3901      	subs	r1, #1
 802bc7e:	6061      	str	r1, [r4, #4]
 802bc80:	333c      	adds	r3, #60	@ 0x3c
 802bc82:	e7aa      	b.n	802bbda <localtime_r+0xae>
 802bc84:	2b00      	cmp	r3, #0
 802bc86:	dab0      	bge.n	802bbea <localtime_r+0xbe>
 802bc88:	3a01      	subs	r2, #1
 802bc8a:	60a2      	str	r2, [r4, #8]
 802bc8c:	333c      	adds	r3, #60	@ 0x3c
 802bc8e:	e7ab      	b.n	802bbe8 <localtime_r+0xbc>
 802bc90:	2b00      	cmp	r3, #0
 802bc92:	dacf      	bge.n	802bc34 <localtime_r+0x108>
 802bc94:	69e2      	ldr	r2, [r4, #28]
 802bc96:	3a01      	subs	r2, #1
 802bc98:	61e2      	str	r2, [r4, #28]
 802bc9a:	69a2      	ldr	r2, [r4, #24]
 802bc9c:	3a01      	subs	r2, #1
 802bc9e:	bf48      	it	mi
 802bca0:	2206      	movmi	r2, #6
 802bca2:	61a2      	str	r2, [r4, #24]
 802bca4:	68e2      	ldr	r2, [r4, #12]
 802bca6:	3318      	adds	r3, #24
 802bca8:	3a01      	subs	r2, #1
 802bcaa:	60e2      	str	r2, [r4, #12]
 802bcac:	60a3      	str	r3, [r4, #8]
 802bcae:	2a00      	cmp	r2, #0
 802bcb0:	d1c0      	bne.n	802bc34 <localtime_r+0x108>
 802bcb2:	6923      	ldr	r3, [r4, #16]
 802bcb4:	3b01      	subs	r3, #1
 802bcb6:	d405      	bmi.n	802bcc4 <localtime_r+0x198>
 802bcb8:	6123      	str	r3, [r4, #16]
 802bcba:	6923      	ldr	r3, [r4, #16]
 802bcbc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802bcc0:	60e3      	str	r3, [r4, #12]
 802bcc2:	e7b7      	b.n	802bc34 <localtime_r+0x108>
 802bcc4:	230b      	movs	r3, #11
 802bcc6:	6123      	str	r3, [r4, #16]
 802bcc8:	6963      	ldr	r3, [r4, #20]
 802bcca:	1e5a      	subs	r2, r3, #1
 802bccc:	6162      	str	r2, [r4, #20]
 802bcce:	0792      	lsls	r2, r2, #30
 802bcd0:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802bcd4:	d105      	bne.n	802bce2 <localtime_r+0x1b6>
 802bcd6:	2164      	movs	r1, #100	@ 0x64
 802bcd8:	fb93 f2f1 	sdiv	r2, r3, r1
 802bcdc:	fb01 3212 	mls	r2, r1, r2, r3
 802bce0:	b962      	cbnz	r2, 802bcfc <localtime_r+0x1d0>
 802bce2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802bce6:	fb93 f1f2 	sdiv	r1, r3, r2
 802bcea:	fb02 3311 	mls	r3, r2, r1, r3
 802bcee:	fab3 f383 	clz	r3, r3
 802bcf2:	095b      	lsrs	r3, r3, #5
 802bcf4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802bcf8:	61e3      	str	r3, [r4, #28]
 802bcfa:	e7de      	b.n	802bcba <localtime_r+0x18e>
 802bcfc:	2301      	movs	r3, #1
 802bcfe:	e7f9      	b.n	802bcf4 <localtime_r+0x1c8>
 802bd00:	0803a774 	.word	0x0803a774
 802bd04:	20018f50 	.word	0x20018f50

0802bd08 <iso_year_adjust>:
 802bd08:	6942      	ldr	r2, [r0, #20]
 802bd0a:	2a00      	cmp	r2, #0
 802bd0c:	f240 736c 	movw	r3, #1900	@ 0x76c
 802bd10:	bfa8      	it	ge
 802bd12:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802bd16:	4413      	add	r3, r2
 802bd18:	0792      	lsls	r2, r2, #30
 802bd1a:	d105      	bne.n	802bd28 <iso_year_adjust+0x20>
 802bd1c:	2164      	movs	r1, #100	@ 0x64
 802bd1e:	fb93 f2f1 	sdiv	r2, r3, r1
 802bd22:	fb01 3212 	mls	r2, r1, r2, r3
 802bd26:	b9ca      	cbnz	r2, 802bd5c <iso_year_adjust+0x54>
 802bd28:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802bd2c:	fb93 f1f2 	sdiv	r1, r3, r2
 802bd30:	fb02 3311 	mls	r3, r2, r1, r3
 802bd34:	fab3 f383 	clz	r3, r3
 802bd38:	095b      	lsrs	r3, r3, #5
 802bd3a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802bd3e:	0040      	lsls	r0, r0, #1
 802bd40:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802bd44:	4418      	add	r0, r3
 802bd46:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802bd4a:	4298      	cmp	r0, r3
 802bd4c:	d027      	beq.n	802bd9e <iso_year_adjust+0x96>
 802bd4e:	dc11      	bgt.n	802bd74 <iso_year_adjust+0x6c>
 802bd50:	2801      	cmp	r0, #1
 802bd52:	dc0a      	bgt.n	802bd6a <iso_year_adjust+0x62>
 802bd54:	43c0      	mvns	r0, r0
 802bd56:	0fc0      	lsrs	r0, r0, #31
 802bd58:	4240      	negs	r0, r0
 802bd5a:	4770      	bx	lr
 802bd5c:	2301      	movs	r3, #1
 802bd5e:	e7ec      	b.n	802bd3a <iso_year_adjust+0x32>
 802bd60:	4b10      	ldr	r3, [pc, #64]	@ (802bda4 <iso_year_adjust+0x9c>)
 802bd62:	40c3      	lsrs	r3, r0
 802bd64:	f343 0000 	sbfx	r0, r3, #0, #1
 802bd68:	4770      	bx	lr
 802bd6a:	380a      	subs	r0, #10
 802bd6c:	2817      	cmp	r0, #23
 802bd6e:	d9f7      	bls.n	802bd60 <iso_year_adjust+0x58>
 802bd70:	2000      	movs	r0, #0
 802bd72:	4770      	bx	lr
 802bd74:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 802bd78:	4298      	cmp	r0, r3
 802bd7a:	dc06      	bgt.n	802bd8a <iso_year_adjust+0x82>
 802bd7c:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 802bd80:	4298      	cmp	r0, r3
 802bd82:	bfd4      	ite	le
 802bd84:	2000      	movle	r0, #0
 802bd86:	2001      	movgt	r0, #1
 802bd88:	4770      	bx	lr
 802bd8a:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 802bd8e:	3802      	subs	r0, #2
 802bd90:	2815      	cmp	r0, #21
 802bd92:	d8ed      	bhi.n	802bd70 <iso_year_adjust+0x68>
 802bd94:	4b04      	ldr	r3, [pc, #16]	@ (802bda8 <iso_year_adjust+0xa0>)
 802bd96:	40c3      	lsrs	r3, r0
 802bd98:	f003 0001 	and.w	r0, r3, #1
 802bd9c:	4770      	bx	lr
 802bd9e:	2001      	movs	r0, #1
 802bda0:	4770      	bx	lr
 802bda2:	bf00      	nop
 802bda4:	00cc00cf 	.word	0x00cc00cf
 802bda8:	002a001f 	.word	0x002a001f

0802bdac <__strftime.isra.0>:
 802bdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bdb0:	b08f      	sub	sp, #60	@ 0x3c
 802bdb2:	461e      	mov	r6, r3
 802bdb4:	2300      	movs	r3, #0
 802bdb6:	4607      	mov	r7, r0
 802bdb8:	460d      	mov	r5, r1
 802bdba:	9302      	str	r3, [sp, #8]
 802bdbc:	461c      	mov	r4, r3
 802bdbe:	7813      	ldrb	r3, [r2, #0]
 802bdc0:	2b00      	cmp	r3, #0
 802bdc2:	f000 84ae 	beq.w	802c722 <__strftime.isra.0+0x976>
 802bdc6:	2b25      	cmp	r3, #37	@ 0x25
 802bdc8:	d11f      	bne.n	802be0a <__strftime.isra.0+0x5e>
 802bdca:	f892 9001 	ldrb.w	r9, [r2, #1]
 802bdce:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802bdd2:	d024      	beq.n	802be1e <__strftime.isra.0+0x72>
 802bdd4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802bdd8:	d021      	beq.n	802be1e <__strftime.isra.0+0x72>
 802bdda:	f102 0801 	add.w	r8, r2, #1
 802bdde:	f04f 0900 	mov.w	r9, #0
 802bde2:	f898 2000 	ldrb.w	r2, [r8]
 802bde6:	3a31      	subs	r2, #49	@ 0x31
 802bde8:	2a08      	cmp	r2, #8
 802bdea:	d81b      	bhi.n	802be24 <__strftime.isra.0+0x78>
 802bdec:	220a      	movs	r2, #10
 802bdee:	4640      	mov	r0, r8
 802bdf0:	a906      	add	r1, sp, #24
 802bdf2:	f008 f88b 	bl	8033f0c <strtoul>
 802bdf6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802bdfa:	4602      	mov	r2, r0
 802bdfc:	f898 1000 	ldrb.w	r1, [r8]
 802be00:	2945      	cmp	r1, #69	@ 0x45
 802be02:	d111      	bne.n	802be28 <__strftime.isra.0+0x7c>
 802be04:	f108 0801 	add.w	r8, r8, #1
 802be08:	e010      	b.n	802be2c <__strftime.isra.0+0x80>
 802be0a:	1e69      	subs	r1, r5, #1
 802be0c:	42a1      	cmp	r1, r4
 802be0e:	f240 815d 	bls.w	802c0cc <__strftime.isra.0+0x320>
 802be12:	553b      	strb	r3, [r7, r4]
 802be14:	3201      	adds	r2, #1
 802be16:	f104 0a01 	add.w	sl, r4, #1
 802be1a:	4654      	mov	r4, sl
 802be1c:	e7cf      	b.n	802bdbe <__strftime.isra.0+0x12>
 802be1e:	f102 0802 	add.w	r8, r2, #2
 802be22:	e7de      	b.n	802bde2 <__strftime.isra.0+0x36>
 802be24:	2200      	movs	r2, #0
 802be26:	e7e9      	b.n	802bdfc <__strftime.isra.0+0x50>
 802be28:	294f      	cmp	r1, #79	@ 0x4f
 802be2a:	d0eb      	beq.n	802be04 <__strftime.isra.0+0x58>
 802be2c:	f898 0000 	ldrb.w	r0, [r8]
 802be30:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802be34:	2955      	cmp	r1, #85	@ 0x55
 802be36:	f200 8149 	bhi.w	802c0cc <__strftime.isra.0+0x320>
 802be3a:	e8df f011 	tbh	[pc, r1, lsl #1]
 802be3e:	046a      	.short	0x046a
 802be40:	01470147 	.word	0x01470147
 802be44:	01470147 	.word	0x01470147
 802be48:	01470147 	.word	0x01470147
 802be4c:	01470147 	.word	0x01470147
 802be50:	01470147 	.word	0x01470147
 802be54:	01470147 	.word	0x01470147
 802be58:	01470147 	.word	0x01470147
 802be5c:	01470147 	.word	0x01470147
 802be60:	01470147 	.word	0x01470147
 802be64:	01470147 	.word	0x01470147
 802be68:	01470147 	.word	0x01470147
 802be6c:	01470147 	.word	0x01470147
 802be70:	01470147 	.word	0x01470147
 802be74:	00750147 	.word	0x00750147
 802be78:	00dc00a3 	.word	0x00dc00a3
 802be7c:	01470128 	.word	0x01470128
 802be80:	01cb0159 	.word	0x01cb0159
 802be84:	02590252 	.word	0x02590252
 802be88:	01470147 	.word	0x01470147
 802be8c:	02710147 	.word	0x02710147
 802be90:	01470147 	.word	0x01470147
 802be94:	0147027c 	.word	0x0147027c
 802be98:	033402ac 	.word	0x033402ac
 802be9c:	036a033e 	.word	0x036a033e
 802bea0:	03d80372 	.word	0x03d80372
 802bea4:	03ee00d8 	.word	0x03ee00d8
 802bea8:	01470440 	.word	0x01470440
 802beac:	01470147 	.word	0x01470147
 802beb0:	01470147 	.word	0x01470147
 802beb4:	00560147 	.word	0x00560147
 802beb8:	00ba008d 	.word	0x00ba008d
 802bebc:	011d011d 	.word	0x011d011d
 802bec0:	017e0147 	.word	0x017e0147
 802bec4:	0147008d 	.word	0x0147008d
 802bec8:	0252026a 	.word	0x0252026a
 802becc:	026e0259 	.word	0x026e0259
 802bed0:	01470273 	.word	0x01470273
 802bed4:	02a5027c 	.word	0x02a5027c
 802bed8:	02b500d0 	.word	0x02b500d0
 802bedc:	035d0336 	.word	0x035d0336
 802bee0:	03cf03a4 	.word	0x03cf03a4
 802bee4:	03e000d4 	.word	0x03e000d4
 802bee8:	0403      	.short	0x0403
 802beea:	69b3      	ldr	r3, [r6, #24]
 802beec:	4aad      	ldr	r2, [pc, #692]	@ (802c1a4 <__strftime.isra.0+0x3f8>)
 802beee:	3318      	adds	r3, #24
 802bef0:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802bef4:	4658      	mov	r0, fp
 802bef6:	f7e4 f9d3 	bl	80102a0 <strlen>
 802befa:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802befe:	eb04 0a00 	add.w	sl, r4, r0
 802bf02:	1e6b      	subs	r3, r5, #1
 802bf04:	45a2      	cmp	sl, r4
 802bf06:	d107      	bne.n	802bf18 <__strftime.isra.0+0x16c>
 802bf08:	f898 3000 	ldrb.w	r3, [r8]
 802bf0c:	2b00      	cmp	r3, #0
 802bf0e:	f000 8409 	beq.w	802c724 <__strftime.isra.0+0x978>
 802bf12:	f108 0201 	add.w	r2, r8, #1
 802bf16:	e780      	b.n	802be1a <__strftime.isra.0+0x6e>
 802bf18:	42a3      	cmp	r3, r4
 802bf1a:	f240 80d7 	bls.w	802c0cc <__strftime.isra.0+0x320>
 802bf1e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802bf22:	553a      	strb	r2, [r7, r4]
 802bf24:	3401      	adds	r4, #1
 802bf26:	e7ed      	b.n	802bf04 <__strftime.isra.0+0x158>
 802bf28:	69b2      	ldr	r2, [r6, #24]
 802bf2a:	4b9e      	ldr	r3, [pc, #632]	@ (802c1a4 <__strftime.isra.0+0x3f8>)
 802bf2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802bf30:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802bf34:	4658      	mov	r0, fp
 802bf36:	f7e4 f9b3 	bl	80102a0 <strlen>
 802bf3a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802bf3e:	eb04 0a00 	add.w	sl, r4, r0
 802bf42:	1e6b      	subs	r3, r5, #1
 802bf44:	4554      	cmp	r4, sl
 802bf46:	d0df      	beq.n	802bf08 <__strftime.isra.0+0x15c>
 802bf48:	42a3      	cmp	r3, r4
 802bf4a:	f240 80bf 	bls.w	802c0cc <__strftime.isra.0+0x320>
 802bf4e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802bf52:	553a      	strb	r2, [r7, r4]
 802bf54:	3401      	adds	r4, #1
 802bf56:	e7f5      	b.n	802bf44 <__strftime.isra.0+0x198>
 802bf58:	4b92      	ldr	r3, [pc, #584]	@ (802c1a4 <__strftime.isra.0+0x3f8>)
 802bf5a:	6932      	ldr	r2, [r6, #16]
 802bf5c:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802bf60:	4658      	mov	r0, fp
 802bf62:	f7e4 f99d 	bl	80102a0 <strlen>
 802bf66:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802bf6a:	eb04 0a00 	add.w	sl, r4, r0
 802bf6e:	1e6b      	subs	r3, r5, #1
 802bf70:	45a2      	cmp	sl, r4
 802bf72:	d0c9      	beq.n	802bf08 <__strftime.isra.0+0x15c>
 802bf74:	42a3      	cmp	r3, r4
 802bf76:	f240 80a9 	bls.w	802c0cc <__strftime.isra.0+0x320>
 802bf7a:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802bf7e:	553a      	strb	r2, [r7, r4]
 802bf80:	3401      	adds	r4, #1
 802bf82:	e7f5      	b.n	802bf70 <__strftime.isra.0+0x1c4>
 802bf84:	6933      	ldr	r3, [r6, #16]
 802bf86:	4a87      	ldr	r2, [pc, #540]	@ (802c1a4 <__strftime.isra.0+0x3f8>)
 802bf88:	330c      	adds	r3, #12
 802bf8a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802bf8e:	4658      	mov	r0, fp
 802bf90:	f7e4 f986 	bl	80102a0 <strlen>
 802bf94:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802bf98:	eb04 0a00 	add.w	sl, r4, r0
 802bf9c:	1e6b      	subs	r3, r5, #1
 802bf9e:	45a2      	cmp	sl, r4
 802bfa0:	d0b2      	beq.n	802bf08 <__strftime.isra.0+0x15c>
 802bfa2:	42a3      	cmp	r3, r4
 802bfa4:	f240 8092 	bls.w	802c0cc <__strftime.isra.0+0x320>
 802bfa8:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802bfac:	553a      	strb	r2, [r7, r4]
 802bfae:	3401      	adds	r4, #1
 802bfb0:	e7f5      	b.n	802bf9e <__strftime.isra.0+0x1f2>
 802bfb2:	4b7c      	ldr	r3, [pc, #496]	@ (802c1a4 <__strftime.isra.0+0x3f8>)
 802bfb4:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802bfb8:	4650      	mov	r0, sl
 802bfba:	f7e4 f971 	bl	80102a0 <strlen>
 802bfbe:	f89a 3000 	ldrb.w	r3, [sl]
 802bfc2:	2b00      	cmp	r3, #0
 802bfc4:	f000 8341 	beq.w	802c64a <__strftime.isra.0+0x89e>
 802bfc8:	4633      	mov	r3, r6
 802bfca:	4652      	mov	r2, sl
 802bfcc:	1b29      	subs	r1, r5, r4
 802bfce:	1938      	adds	r0, r7, r4
 802bfd0:	f7ff feec 	bl	802bdac <__strftime.isra.0>
 802bfd4:	2800      	cmp	r0, #0
 802bfd6:	dd79      	ble.n	802c0cc <__strftime.isra.0+0x320>
 802bfd8:	eb04 0a00 	add.w	sl, r4, r0
 802bfdc:	e794      	b.n	802bf08 <__strftime.isra.0+0x15c>
 802bfde:	4b71      	ldr	r3, [pc, #452]	@ (802c1a4 <__strftime.isra.0+0x3f8>)
 802bfe0:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802bfe4:	e7e8      	b.n	802bfb8 <__strftime.isra.0+0x20c>
 802bfe6:	4b6f      	ldr	r3, [pc, #444]	@ (802c1a4 <__strftime.isra.0+0x3f8>)
 802bfe8:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802bfec:	e7e4      	b.n	802bfb8 <__strftime.isra.0+0x20c>
 802bfee:	4b6d      	ldr	r3, [pc, #436]	@ (802c1a4 <__strftime.isra.0+0x3f8>)
 802bff0:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802bff4:	e7e0      	b.n	802bfb8 <__strftime.isra.0+0x20c>
 802bff6:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802bffa:	496b      	ldr	r1, [pc, #428]	@ (802c1a8 <__strftime.isra.0+0x3fc>)
 802bffc:	458a      	cmp	sl, r1
 802bffe:	bfac      	ite	ge
 802c000:	f04f 0b00 	movge.w	fp, #0
 802c004:	f04f 0b01 	movlt.w	fp, #1
 802c008:	f1ba 0f00 	cmp.w	sl, #0
 802c00c:	db12      	blt.n	802c034 <__strftime.isra.0+0x288>
 802c00e:	2064      	movs	r0, #100	@ 0x64
 802c010:	fb9a f0f0 	sdiv	r0, sl, r0
 802c014:	3013      	adds	r0, #19
 802c016:	f1b9 0f00 	cmp.w	r9, #0
 802c01a:	d015      	beq.n	802c048 <__strftime.isra.0+0x29c>
 802c01c:	2863      	cmp	r0, #99	@ 0x63
 802c01e:	dd28      	ble.n	802c072 <__strftime.isra.0+0x2c6>
 802c020:	4b62      	ldr	r3, [pc, #392]	@ (802c1ac <__strftime.isra.0+0x400>)
 802c022:	4963      	ldr	r1, [pc, #396]	@ (802c1b0 <__strftime.isra.0+0x404>)
 802c024:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802c028:	bf0c      	ite	eq
 802c02a:	469c      	moveq	ip, r3
 802c02c:	468c      	movne	ip, r1
 802c02e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802c1cc <__strftime.isra.0+0x420>
 802c032:	e00d      	b.n	802c050 <__strftime.isra.0+0x2a4>
 802c034:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802c038:	9203      	str	r2, [sp, #12]
 802c03a:	f000 ff88 	bl	802cf4e <abs>
 802c03e:	2164      	movs	r1, #100	@ 0x64
 802c040:	9a03      	ldr	r2, [sp, #12]
 802c042:	fb90 f0f1 	sdiv	r0, r0, r1
 802c046:	e7e6      	b.n	802c016 <__strftime.isra.0+0x26a>
 802c048:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802c1b0 <__strftime.isra.0+0x404>
 802c04c:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802c1d0 <__strftime.isra.0+0x424>
 802c050:	4b58      	ldr	r3, [pc, #352]	@ (802c1b4 <__strftime.isra.0+0x408>)
 802c052:	9001      	str	r0, [sp, #4]
 802c054:	2a02      	cmp	r2, #2
 802c056:	bf2c      	ite	cs
 802c058:	ebcb 0102 	rsbcs	r1, fp, r2
 802c05c:	f1cb 0102 	rsbcc	r1, fp, #2
 802c060:	4a51      	ldr	r2, [pc, #324]	@ (802c1a8 <__strftime.isra.0+0x3fc>)
 802c062:	9100      	str	r1, [sp, #0]
 802c064:	4592      	cmp	sl, r2
 802c066:	bfa8      	it	ge
 802c068:	4663      	movge	r3, ip
 802c06a:	4672      	mov	r2, lr
 802c06c:	1b29      	subs	r1, r5, r4
 802c06e:	1938      	adds	r0, r7, r4
 802c070:	e023      	b.n	802c0ba <__strftime.isra.0+0x30e>
 802c072:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802c1b0 <__strftime.isra.0+0x404>
 802c076:	e7da      	b.n	802c02e <__strftime.isra.0+0x282>
 802c078:	494f      	ldr	r1, [pc, #316]	@ (802c1b8 <__strftime.isra.0+0x40c>)
 802c07a:	4a50      	ldr	r2, [pc, #320]	@ (802c1bc <__strftime.isra.0+0x410>)
 802c07c:	68f3      	ldr	r3, [r6, #12]
 802c07e:	2864      	cmp	r0, #100	@ 0x64
 802c080:	bf18      	it	ne
 802c082:	460a      	movne	r2, r1
 802c084:	1b29      	subs	r1, r5, r4
 802c086:	1938      	adds	r0, r7, r4
 802c088:	f002 f986 	bl	802e398 <sniprintf>
 802c08c:	e017      	b.n	802c0be <__strftime.isra.0+0x312>
 802c08e:	6970      	ldr	r0, [r6, #20]
 802c090:	6933      	ldr	r3, [r6, #16]
 802c092:	2800      	cmp	r0, #0
 802c094:	f103 0a01 	add.w	sl, r3, #1
 802c098:	eb07 0b04 	add.w	fp, r7, r4
 802c09c:	68f3      	ldr	r3, [r6, #12]
 802c09e:	eba5 0904 	sub.w	r9, r5, r4
 802c0a2:	db19      	blt.n	802c0d8 <__strftime.isra.0+0x32c>
 802c0a4:	2264      	movs	r2, #100	@ 0x64
 802c0a6:	fb90 fcf2 	sdiv	ip, r0, r2
 802c0aa:	fb02 001c 	mls	r0, r2, ip, r0
 802c0ae:	4a44      	ldr	r2, [pc, #272]	@ (802c1c0 <__strftime.isra.0+0x414>)
 802c0b0:	e9cd 3000 	strd	r3, r0, [sp]
 802c0b4:	4649      	mov	r1, r9
 802c0b6:	4653      	mov	r3, sl
 802c0b8:	4658      	mov	r0, fp
 802c0ba:	f002 f96d 	bl	802e398 <sniprintf>
 802c0be:	2800      	cmp	r0, #0
 802c0c0:	db04      	blt.n	802c0cc <__strftime.isra.0+0x320>
 802c0c2:	eb00 0a04 	add.w	sl, r0, r4
 802c0c6:	4555      	cmp	r5, sl
 802c0c8:	f63f af1e 	bhi.w	802bf08 <__strftime.isra.0+0x15c>
 802c0cc:	f04f 0a00 	mov.w	sl, #0
 802c0d0:	4650      	mov	r0, sl
 802c0d2:	b00f      	add	sp, #60	@ 0x3c
 802c0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c0d8:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802c0dc:	9303      	str	r3, [sp, #12]
 802c0de:	f000 ff36 	bl	802cf4e <abs>
 802c0e2:	2264      	movs	r2, #100	@ 0x64
 802c0e4:	9b03      	ldr	r3, [sp, #12]
 802c0e6:	fb90 fcf2 	sdiv	ip, r0, r2
 802c0ea:	fb0c 0012 	mls	r0, ip, r2, r0
 802c0ee:	e7de      	b.n	802c0ae <__strftime.isra.0+0x302>
 802c0f0:	2125      	movs	r1, #37	@ 0x25
 802c0f2:	f88d 1018 	strb.w	r1, [sp, #24]
 802c0f6:	f1b9 0f00 	cmp.w	r9, #0
 802c0fa:	d00b      	beq.n	802c114 <__strftime.isra.0+0x368>
 802c0fc:	2a05      	cmp	r2, #5
 802c0fe:	f88d 9019 	strb.w	r9, [sp, #25]
 802c102:	d817      	bhi.n	802c134 <__strftime.isra.0+0x388>
 802c104:	f10d 001a 	add.w	r0, sp, #26
 802c108:	492e      	ldr	r1, [pc, #184]	@ (802c1c4 <__strftime.isra.0+0x418>)
 802c10a:	f000 fe83 	bl	802ce14 <strcpy>
 802c10e:	4633      	mov	r3, r6
 802c110:	aa06      	add	r2, sp, #24
 802c112:	e75b      	b.n	802bfcc <__strftime.isra.0+0x220>
 802c114:	232b      	movs	r3, #43	@ 0x2b
 802c116:	f88d 3019 	strb.w	r3, [sp, #25]
 802c11a:	2304      	movs	r3, #4
 802c11c:	4a2a      	ldr	r2, [pc, #168]	@ (802c1c8 <__strftime.isra.0+0x41c>)
 802c11e:	211e      	movs	r1, #30
 802c120:	f10d 001a 	add.w	r0, sp, #26
 802c124:	f002 f938 	bl	802e398 <sniprintf>
 802c128:	2800      	cmp	r0, #0
 802c12a:	ddeb      	ble.n	802c104 <__strftime.isra.0+0x358>
 802c12c:	f10d 031a 	add.w	r3, sp, #26
 802c130:	4418      	add	r0, r3
 802c132:	e7e9      	b.n	802c108 <__strftime.isra.0+0x35c>
 802c134:	1f93      	subs	r3, r2, #6
 802c136:	d0e5      	beq.n	802c104 <__strftime.isra.0+0x358>
 802c138:	e7f0      	b.n	802c11c <__strftime.isra.0+0x370>
 802c13a:	4630      	mov	r0, r6
 802c13c:	f7ff fde4 	bl	802bd08 <iso_year_adjust>
 802c140:	4682      	mov	sl, r0
 802c142:	6970      	ldr	r0, [r6, #20]
 802c144:	2800      	cmp	r0, #0
 802c146:	db11      	blt.n	802c16c <__strftime.isra.0+0x3c0>
 802c148:	2364      	movs	r3, #100	@ 0x64
 802c14a:	fb90 f2f3 	sdiv	r2, r0, r3
 802c14e:	fb03 0012 	mls	r0, r3, r2, r0
 802c152:	2364      	movs	r3, #100	@ 0x64
 802c154:	4482      	add	sl, r0
 802c156:	fb9a f2f3 	sdiv	r2, sl, r3
 802c15a:	fb03 aa12 	mls	sl, r3, r2, sl
 802c15e:	449a      	add	sl, r3
 802c160:	fbba f2f3 	udiv	r2, sl, r3
 802c164:	fb03 a312 	mls	r3, r3, r2, sl
 802c168:	4a14      	ldr	r2, [pc, #80]	@ (802c1bc <__strftime.isra.0+0x410>)
 802c16a:	e78b      	b.n	802c084 <__strftime.isra.0+0x2d8>
 802c16c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802c170:	f000 feed 	bl	802cf4e <abs>
 802c174:	2364      	movs	r3, #100	@ 0x64
 802c176:	f1ba 0f00 	cmp.w	sl, #0
 802c17a:	fb90 f2f3 	sdiv	r2, r0, r3
 802c17e:	fb02 0013 	mls	r0, r2, r3, r0
 802c182:	da07      	bge.n	802c194 <__strftime.isra.0+0x3e8>
 802c184:	6972      	ldr	r2, [r6, #20]
 802c186:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802c18a:	429a      	cmp	r2, r3
 802c18c:	bfb8      	it	lt
 802c18e:	f04f 0a01 	movlt.w	sl, #1
 802c192:	e7de      	b.n	802c152 <__strftime.isra.0+0x3a6>
 802c194:	d0dd      	beq.n	802c152 <__strftime.isra.0+0x3a6>
 802c196:	6972      	ldr	r2, [r6, #20]
 802c198:	4b03      	ldr	r3, [pc, #12]	@ (802c1a8 <__strftime.isra.0+0x3fc>)
 802c19a:	429a      	cmp	r2, r3
 802c19c:	bfb8      	it	lt
 802c19e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802c1a2:	e7d6      	b.n	802c152 <__strftime.isra.0+0x3a6>
 802c1a4:	0803a9c0 	.word	0x0803a9c0
 802c1a8:	fffff894 	.word	0xfffff894
 802c1ac:	0803a7e3 	.word	0x0803a7e3
 802c1b0:	0803a6fe 	.word	0x0803a6fe
 802c1b4:	0803a7e5 	.word	0x0803a7e5
 802c1b8:	0803a7e7 	.word	0x0803a7e7
 802c1bc:	0803a7f5 	.word	0x0803a7f5
 802c1c0:	0803a7eb 	.word	0x0803a7eb
 802c1c4:	0803a7fe 	.word	0x0803a7fe
 802c1c8:	0803a7fa 	.word	0x0803a7fa
 802c1cc:	0803a7db 	.word	0x0803a7db
 802c1d0:	0803a7d4 	.word	0x0803a7d4
 802c1d4:	6971      	ldr	r1, [r6, #20]
 802c1d6:	48bc      	ldr	r0, [pc, #752]	@ (802c4c8 <__strftime.isra.0+0x71c>)
 802c1d8:	9205      	str	r2, [sp, #20]
 802c1da:	4281      	cmp	r1, r0
 802c1dc:	bfac      	ite	ge
 802c1de:	2300      	movge	r3, #0
 802c1e0:	2301      	movlt	r3, #1
 802c1e2:	4630      	mov	r0, r6
 802c1e4:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802c1e8:	f7ff fd8e 	bl	802bd08 <iso_year_adjust>
 802c1ec:	9904      	ldr	r1, [sp, #16]
 802c1ee:	9a05      	ldr	r2, [sp, #20]
 802c1f0:	2900      	cmp	r1, #0
 802c1f2:	4682      	mov	sl, r0
 802c1f4:	db3a      	blt.n	802c26c <__strftime.isra.0+0x4c0>
 802c1f6:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802c1fa:	fb91 fbfb 	sdiv	fp, r1, fp
 802c1fe:	f10b 0b13 	add.w	fp, fp, #19
 802c202:	6970      	ldr	r0, [r6, #20]
 802c204:	2800      	cmp	r0, #0
 802c206:	db3e      	blt.n	802c286 <__strftime.isra.0+0x4da>
 802c208:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802c20c:	f1ba 0f00 	cmp.w	sl, #0
 802c210:	fb90 fefc 	sdiv	lr, r0, ip
 802c214:	fb0c 001e 	mls	r0, ip, lr, r0
 802c218:	da4f      	bge.n	802c2ba <__strftime.isra.0+0x50e>
 802c21a:	4482      	add	sl, r0
 802c21c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802c220:	d157      	bne.n	802c2d2 <__strftime.isra.0+0x526>
 802c222:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c226:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802c22a:	9b03      	ldr	r3, [sp, #12]
 802c22c:	2164      	movs	r1, #100	@ 0x64
 802c22e:	fb01 aa0b 	mla	sl, r1, fp, sl
 802c232:	2b00      	cmp	r3, #0
 802c234:	f040 81f7 	bne.w	802c626 <__strftime.isra.0+0x87a>
 802c238:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802c23c:	d104      	bne.n	802c248 <__strftime.isra.0+0x49c>
 802c23e:	f242 710f 	movw	r1, #9999	@ 0x270f
 802c242:	458a      	cmp	sl, r1
 802c244:	f200 8275 	bhi.w	802c732 <__strftime.isra.0+0x986>
 802c248:	a906      	add	r1, sp, #24
 802c24a:	2025      	movs	r0, #37	@ 0x25
 802c24c:	7008      	strb	r0, [r1, #0]
 802c24e:	f1b9 0f00 	cmp.w	r9, #0
 802c252:	f040 81f3 	bne.w	802c63c <__strftime.isra.0+0x890>
 802c256:	1c48      	adds	r0, r1, #1
 802c258:	499c      	ldr	r1, [pc, #624]	@ (802c4cc <__strftime.isra.0+0x720>)
 802c25a:	9203      	str	r2, [sp, #12]
 802c25c:	f000 fdda 	bl	802ce14 <strcpy>
 802c260:	9a03      	ldr	r2, [sp, #12]
 802c262:	f8cd a000 	str.w	sl, [sp]
 802c266:	4613      	mov	r3, r2
 802c268:	aa06      	add	r2, sp, #24
 802c26a:	e098      	b.n	802c39e <__strftime.isra.0+0x5f2>
 802c26c:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802c270:	9205      	str	r2, [sp, #20]
 802c272:	9104      	str	r1, [sp, #16]
 802c274:	f000 fe6b 	bl	802cf4e <abs>
 802c278:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802c27c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802c280:	fb90 fbfc 	sdiv	fp, r0, ip
 802c284:	e7bd      	b.n	802c202 <__strftime.isra.0+0x456>
 802c286:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802c28a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802c28e:	f000 fe5e 	bl	802cf4e <abs>
 802c292:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802c296:	f1ba 0f00 	cmp.w	sl, #0
 802c29a:	fb90 fefc 	sdiv	lr, r0, ip
 802c29e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802c2a2:	fb0e 001c 	mls	r0, lr, ip, r0
 802c2a6:	da08      	bge.n	802c2ba <__strftime.isra.0+0x50e>
 802c2a8:	6971      	ldr	r1, [r6, #20]
 802c2aa:	4b89      	ldr	r3, [pc, #548]	@ (802c4d0 <__strftime.isra.0+0x724>)
 802c2ac:	4299      	cmp	r1, r3
 802c2ae:	dab4      	bge.n	802c21a <__strftime.isra.0+0x46e>
 802c2b0:	f04f 0a01 	mov.w	sl, #1
 802c2b4:	f8cd a00c 	str.w	sl, [sp, #12]
 802c2b8:	e7af      	b.n	802c21a <__strftime.isra.0+0x46e>
 802c2ba:	f1ba 0f00 	cmp.w	sl, #0
 802c2be:	d0ac      	beq.n	802c21a <__strftime.isra.0+0x46e>
 802c2c0:	4b81      	ldr	r3, [pc, #516]	@ (802c4c8 <__strftime.isra.0+0x71c>)
 802c2c2:	4299      	cmp	r1, r3
 802c2c4:	9b03      	ldr	r3, [sp, #12]
 802c2c6:	bfbc      	itt	lt
 802c2c8:	2301      	movlt	r3, #1
 802c2ca:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802c2ce:	9303      	str	r3, [sp, #12]
 802c2d0:	e7a3      	b.n	802c21a <__strftime.isra.0+0x46e>
 802c2d2:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802c2d6:	bf04      	itt	eq
 802c2d8:	f10b 0b01 	addeq.w	fp, fp, #1
 802c2dc:	f04f 0a00 	moveq.w	sl, #0
 802c2e0:	e7a3      	b.n	802c22a <__strftime.isra.0+0x47e>
 802c2e2:	497c      	ldr	r1, [pc, #496]	@ (802c4d4 <__strftime.isra.0+0x728>)
 802c2e4:	4a7c      	ldr	r2, [pc, #496]	@ (802c4d8 <__strftime.isra.0+0x72c>)
 802c2e6:	68b3      	ldr	r3, [r6, #8]
 802c2e8:	286b      	cmp	r0, #107	@ 0x6b
 802c2ea:	bf18      	it	ne
 802c2ec:	460a      	movne	r2, r1
 802c2ee:	e6c9      	b.n	802c084 <__strftime.isra.0+0x2d8>
 802c2f0:	68b3      	ldr	r3, [r6, #8]
 802c2f2:	b163      	cbz	r3, 802c30e <__strftime.isra.0+0x562>
 802c2f4:	2b0c      	cmp	r3, #12
 802c2f6:	d004      	beq.n	802c302 <__strftime.isra.0+0x556>
 802c2f8:	210c      	movs	r1, #12
 802c2fa:	fb93 f2f1 	sdiv	r2, r3, r1
 802c2fe:	fb01 3312 	mls	r3, r1, r2, r3
 802c302:	4975      	ldr	r1, [pc, #468]	@ (802c4d8 <__strftime.isra.0+0x72c>)
 802c304:	4a73      	ldr	r2, [pc, #460]	@ (802c4d4 <__strftime.isra.0+0x728>)
 802c306:	2849      	cmp	r0, #73	@ 0x49
 802c308:	bf18      	it	ne
 802c30a:	460a      	movne	r2, r1
 802c30c:	e6ba      	b.n	802c084 <__strftime.isra.0+0x2d8>
 802c30e:	230c      	movs	r3, #12
 802c310:	e7f7      	b.n	802c302 <__strftime.isra.0+0x556>
 802c312:	69f3      	ldr	r3, [r6, #28]
 802c314:	4a71      	ldr	r2, [pc, #452]	@ (802c4dc <__strftime.isra.0+0x730>)
 802c316:	3301      	adds	r3, #1
 802c318:	e6b4      	b.n	802c084 <__strftime.isra.0+0x2d8>
 802c31a:	6933      	ldr	r3, [r6, #16]
 802c31c:	3301      	adds	r3, #1
 802c31e:	e723      	b.n	802c168 <__strftime.isra.0+0x3bc>
 802c320:	6873      	ldr	r3, [r6, #4]
 802c322:	e721      	b.n	802c168 <__strftime.isra.0+0x3bc>
 802c324:	1e6b      	subs	r3, r5, #1
 802c326:	429c      	cmp	r4, r3
 802c328:	f4bf aed0 	bcs.w	802c0cc <__strftime.isra.0+0x320>
 802c32c:	f104 0a01 	add.w	sl, r4, #1
 802c330:	230a      	movs	r3, #10
 802c332:	553b      	strb	r3, [r7, r4]
 802c334:	e5e8      	b.n	802bf08 <__strftime.isra.0+0x15c>
 802c336:	68b3      	ldr	r3, [r6, #8]
 802c338:	2b0b      	cmp	r3, #11
 802c33a:	4b69      	ldr	r3, [pc, #420]	@ (802c4e0 <__strftime.isra.0+0x734>)
 802c33c:	bfd4      	ite	le
 802c33e:	2200      	movle	r2, #0
 802c340:	2201      	movgt	r2, #1
 802c342:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802c346:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802c34a:	4658      	mov	r0, fp
 802c34c:	f7e3 ffa8 	bl	80102a0 <strlen>
 802c350:	eb04 0a00 	add.w	sl, r4, r0
 802c354:	4863      	ldr	r0, [pc, #396]	@ (802c4e4 <__strftime.isra.0+0x738>)
 802c356:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c35a:	1e69      	subs	r1, r5, #1
 802c35c:	45a2      	cmp	sl, r4
 802c35e:	f43f add3 	beq.w	802bf08 <__strftime.isra.0+0x15c>
 802c362:	42a1      	cmp	r1, r4
 802c364:	f67f aeb2 	bls.w	802c0cc <__strftime.isra.0+0x320>
 802c368:	f898 2000 	ldrb.w	r2, [r8]
 802c36c:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802c370:	2a50      	cmp	r2, #80	@ 0x50
 802c372:	d106      	bne.n	802c382 <__strftime.isra.0+0x5d6>
 802c374:	5cc2      	ldrb	r2, [r0, r3]
 802c376:	f002 0203 	and.w	r2, r2, #3
 802c37a:	2a01      	cmp	r2, #1
 802c37c:	bf08      	it	eq
 802c37e:	3320      	addeq	r3, #32
 802c380:	b2db      	uxtb	r3, r3
 802c382:	553b      	strb	r3, [r7, r4]
 802c384:	3401      	adds	r4, #1
 802c386:	e7e9      	b.n	802c35c <__strftime.isra.0+0x5b0>
 802c388:	2203      	movs	r2, #3
 802c38a:	6933      	ldr	r3, [r6, #16]
 802c38c:	fb93 f3f2 	sdiv	r3, r3, r2
 802c390:	4a55      	ldr	r2, [pc, #340]	@ (802c4e8 <__strftime.isra.0+0x73c>)
 802c392:	3301      	adds	r3, #1
 802c394:	e676      	b.n	802c084 <__strftime.isra.0+0x2d8>
 802c396:	6873      	ldr	r3, [r6, #4]
 802c398:	9300      	str	r3, [sp, #0]
 802c39a:	68b3      	ldr	r3, [r6, #8]
 802c39c:	4a53      	ldr	r2, [pc, #332]	@ (802c4ec <__strftime.isra.0+0x740>)
 802c39e:	1b29      	subs	r1, r5, r4
 802c3a0:	1938      	adds	r0, r7, r4
 802c3a2:	f001 fff9 	bl	802e398 <sniprintf>
 802c3a6:	e68a      	b.n	802c0be <__strftime.isra.0+0x312>
 802c3a8:	6a33      	ldr	r3, [r6, #32]
 802c3aa:	2b00      	cmp	r3, #0
 802c3ac:	db78      	blt.n	802c4a0 <__strftime.isra.0+0x6f4>
 802c3ae:	f000 fa7b 	bl	802c8a8 <__tz_lock>
 802c3b2:	9b02      	ldr	r3, [sp, #8]
 802c3b4:	b90b      	cbnz	r3, 802c3ba <__strftime.isra.0+0x60e>
 802c3b6:	f000 fa83 	bl	802c8c0 <_tzset_unlocked>
 802c3ba:	f007 fe73 	bl	80340a4 <__gettzinfo>
 802c3be:	6a33      	ldr	r3, [r6, #32]
 802c3c0:	2b00      	cmp	r3, #0
 802c3c2:	bfd4      	ite	le
 802c3c4:	2200      	movle	r2, #0
 802c3c6:	2201      	movgt	r2, #1
 802c3c8:	2328      	movs	r3, #40	@ 0x28
 802c3ca:	fb02 3303 	mla	r3, r2, r3, r3
 802c3ce:	58c3      	ldr	r3, [r0, r3]
 802c3d0:	f1c3 0a00 	rsb	sl, r3, #0
 802c3d4:	f000 fa6e 	bl	802c8b4 <__tz_unlock>
 802c3d8:	2301      	movs	r3, #1
 802c3da:	9302      	str	r3, [sp, #8]
 802c3dc:	6972      	ldr	r2, [r6, #20]
 802c3de:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802c3e2:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802c3e6:	f16c 0c00 	sbc.w	ip, ip, #0
 802c3ea:	f1bc 0f00 	cmp.w	ip, #0
 802c3ee:	eba5 0104 	sub.w	r1, r5, r4
 802c3f2:	eb07 0004 	add.w	r0, r7, r4
 802c3f6:	da02      	bge.n	802c3fe <__strftime.isra.0+0x652>
 802c3f8:	3303      	adds	r3, #3
 802c3fa:	f14c 0c00 	adc.w	ip, ip, #0
 802c3fe:	089b      	lsrs	r3, r3, #2
 802c400:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802c404:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802c408:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802c40c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802c410:	fb9e fefb 	sdiv	lr, lr, fp
 802c414:	ebb3 030e 	subs.w	r3, r3, lr
 802c418:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802c41c:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802c420:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802c424:	fb9e fefb 	sdiv	lr, lr, fp
 802c428:	eb13 030e 	adds.w	r3, r3, lr
 802c42c:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802c430:	3a46      	subs	r2, #70	@ 0x46
 802c432:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802c436:	fb0e f202 	mul.w	r2, lr, r2
 802c43a:	189b      	adds	r3, r3, r2
 802c43c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802c440:	69f2      	ldr	r2, [r6, #28]
 802c442:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802c446:	189b      	adds	r3, r3, r2
 802c448:	f04f 0e18 	mov.w	lr, #24
 802c44c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802c450:	fba3 230e 	umull	r2, r3, r3, lr
 802c454:	fb0e 330c 	mla	r3, lr, ip, r3
 802c458:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802c45c:	eb12 020c 	adds.w	r2, r2, ip
 802c460:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802c464:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802c468:	fba2 2e0c 	umull	r2, lr, r2, ip
 802c46c:	fb0c ee03 	mla	lr, ip, r3, lr
 802c470:	eb12 030b 	adds.w	r3, r2, fp
 802c474:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802c478:	fba3 e30c 	umull	lr, r3, r3, ip
 802c47c:	fb0c 3302 	mla	r3, ip, r2, r3
 802c480:	f8d6 c000 	ldr.w	ip, [r6]
 802c484:	eb1e 020c 	adds.w	r2, lr, ip
 802c488:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802c48c:	ebb2 020a 	subs.w	r2, r2, sl
 802c490:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802c494:	e9cd 2300 	strd	r2, r3, [sp]
 802c498:	4a15      	ldr	r2, [pc, #84]	@ (802c4f0 <__strftime.isra.0+0x744>)
 802c49a:	f001 ff7d 	bl	802e398 <sniprintf>
 802c49e:	e60e      	b.n	802c0be <__strftime.isra.0+0x312>
 802c4a0:	f04f 0a00 	mov.w	sl, #0
 802c4a4:	e79a      	b.n	802c3dc <__strftime.isra.0+0x630>
 802c4a6:	6833      	ldr	r3, [r6, #0]
 802c4a8:	e65e      	b.n	802c168 <__strftime.isra.0+0x3bc>
 802c4aa:	1e6b      	subs	r3, r5, #1
 802c4ac:	429c      	cmp	r4, r3
 802c4ae:	f4bf ae0d 	bcs.w	802c0cc <__strftime.isra.0+0x320>
 802c4b2:	f104 0a01 	add.w	sl, r4, #1
 802c4b6:	2309      	movs	r3, #9
 802c4b8:	e73b      	b.n	802c332 <__strftime.isra.0+0x586>
 802c4ba:	6833      	ldr	r3, [r6, #0]
 802c4bc:	9301      	str	r3, [sp, #4]
 802c4be:	6873      	ldr	r3, [r6, #4]
 802c4c0:	9300      	str	r3, [sp, #0]
 802c4c2:	68b3      	ldr	r3, [r6, #8]
 802c4c4:	4a0b      	ldr	r2, [pc, #44]	@ (802c4f4 <__strftime.isra.0+0x748>)
 802c4c6:	e5d1      	b.n	802c06c <__strftime.isra.0+0x2c0>
 802c4c8:	fffff894 	.word	0xfffff894
 802c4cc:	0803a806 	.word	0x0803a806
 802c4d0:	fffff895 	.word	0xfffff895
 802c4d4:	0803a7f5 	.word	0x0803a7f5
 802c4d8:	0803a7e7 	.word	0x0803a7e7
 802c4dc:	0803a80a 	.word	0x0803a80a
 802c4e0:	0803a9c0 	.word	0x0803a9c0
 802c4e4:	0803aabd 	.word	0x0803aabd
 802c4e8:	0803a80f 	.word	0x0803a80f
 802c4ec:	0803a81e 	.word	0x0803a81e
 802c4f0:	0803a814 	.word	0x0803a814
 802c4f4:	0803a819 	.word	0x0803a819
 802c4f8:	1e6b      	subs	r3, r5, #1
 802c4fa:	429c      	cmp	r4, r3
 802c4fc:	f4bf ade6 	bcs.w	802c0cc <__strftime.isra.0+0x320>
 802c500:	69b3      	ldr	r3, [r6, #24]
 802c502:	b91b      	cbnz	r3, 802c50c <__strftime.isra.0+0x760>
 802c504:	2337      	movs	r3, #55	@ 0x37
 802c506:	f104 0a01 	add.w	sl, r4, #1
 802c50a:	e712      	b.n	802c332 <__strftime.isra.0+0x586>
 802c50c:	3330      	adds	r3, #48	@ 0x30
 802c50e:	b2db      	uxtb	r3, r3
 802c510:	e7f9      	b.n	802c506 <__strftime.isra.0+0x75a>
 802c512:	69f3      	ldr	r3, [r6, #28]
 802c514:	69b2      	ldr	r2, [r6, #24]
 802c516:	3307      	adds	r3, #7
 802c518:	1a9b      	subs	r3, r3, r2
 802c51a:	2207      	movs	r2, #7
 802c51c:	fb93 f3f2 	sdiv	r3, r3, r2
 802c520:	e622      	b.n	802c168 <__strftime.isra.0+0x3bc>
 802c522:	4630      	mov	r0, r6
 802c524:	f7ff fbf0 	bl	802bd08 <iso_year_adjust>
 802c528:	69b2      	ldr	r2, [r6, #24]
 802c52a:	b132      	cbz	r2, 802c53a <__strftime.isra.0+0x78e>
 802c52c:	3a01      	subs	r2, #1
 802c52e:	2800      	cmp	r0, #0
 802c530:	69f3      	ldr	r3, [r6, #28]
 802c532:	dc26      	bgt.n	802c582 <__strftime.isra.0+0x7d6>
 802c534:	d103      	bne.n	802c53e <__strftime.isra.0+0x792>
 802c536:	330a      	adds	r3, #10
 802c538:	e7ee      	b.n	802c518 <__strftime.isra.0+0x76c>
 802c53a:	2206      	movs	r2, #6
 802c53c:	e7f7      	b.n	802c52e <__strftime.isra.0+0x782>
 802c53e:	1ad2      	subs	r2, r2, r3
 802c540:	6973      	ldr	r3, [r6, #20]
 802c542:	2b00      	cmp	r3, #0
 802c544:	f240 716b 	movw	r1, #1899	@ 0x76b
 802c548:	bfa8      	it	ge
 802c54a:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802c54e:	440b      	add	r3, r1
 802c550:	0799      	lsls	r1, r3, #30
 802c552:	d105      	bne.n	802c560 <__strftime.isra.0+0x7b4>
 802c554:	2064      	movs	r0, #100	@ 0x64
 802c556:	fb93 f1f0 	sdiv	r1, r3, r0
 802c55a:	fb00 3111 	mls	r1, r0, r1, r3
 802c55e:	b971      	cbnz	r1, 802c57e <__strftime.isra.0+0x7d2>
 802c560:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802c564:	fb93 f0f1 	sdiv	r0, r3, r1
 802c568:	fb01 3310 	mls	r3, r1, r0, r3
 802c56c:	fab3 f383 	clz	r3, r3
 802c570:	095b      	lsrs	r3, r3, #5
 802c572:	1ad2      	subs	r2, r2, r3
 802c574:	2a04      	cmp	r2, #4
 802c576:	bfcc      	ite	gt
 802c578:	2334      	movgt	r3, #52	@ 0x34
 802c57a:	2335      	movle	r3, #53	@ 0x35
 802c57c:	e5f4      	b.n	802c168 <__strftime.isra.0+0x3bc>
 802c57e:	2301      	movs	r3, #1
 802c580:	e7f7      	b.n	802c572 <__strftime.isra.0+0x7c6>
 802c582:	2301      	movs	r3, #1
 802c584:	e5f0      	b.n	802c168 <__strftime.isra.0+0x3bc>
 802c586:	496c      	ldr	r1, [pc, #432]	@ (802c738 <__strftime.isra.0+0x98c>)
 802c588:	9203      	str	r2, [sp, #12]
 802c58a:	a806      	add	r0, sp, #24
 802c58c:	f000 fc42 	bl	802ce14 <strcpy>
 802c590:	a806      	add	r0, sp, #24
 802c592:	f7e3 fe85 	bl	80102a0 <strlen>
 802c596:	ab06      	add	r3, sp, #24
 802c598:	eb03 0a00 	add.w	sl, r3, r0
 802c59c:	f10a 0a01 	add.w	sl, sl, #1
 802c5a0:	46d3      	mov	fp, sl
 802c5a2:	f1b9 0f00 	cmp.w	r9, #0
 802c5a6:	d009      	beq.n	802c5bc <__strftime.isra.0+0x810>
 802c5a8:	9a03      	ldr	r2, [sp, #12]
 802c5aa:	f803 9000 	strb.w	r9, [r3, r0]
 802c5ae:	2a05      	cmp	r2, #5
 802c5b0:	d901      	bls.n	802c5b6 <__strftime.isra.0+0x80a>
 802c5b2:	1f93      	subs	r3, r2, #6
 802c5b4:	d106      	bne.n	802c5c4 <__strftime.isra.0+0x818>
 802c5b6:	4961      	ldr	r1, [pc, #388]	@ (802c73c <__strftime.isra.0+0x990>)
 802c5b8:	4658      	mov	r0, fp
 802c5ba:	e5a6      	b.n	802c10a <__strftime.isra.0+0x35e>
 802c5bc:	aa06      	add	r2, sp, #24
 802c5be:	232b      	movs	r3, #43	@ 0x2b
 802c5c0:	5413      	strb	r3, [r2, r0]
 802c5c2:	2304      	movs	r3, #4
 802c5c4:	a90e      	add	r1, sp, #56	@ 0x38
 802c5c6:	4a5e      	ldr	r2, [pc, #376]	@ (802c740 <__strftime.isra.0+0x994>)
 802c5c8:	eba1 010a 	sub.w	r1, r1, sl
 802c5cc:	4650      	mov	r0, sl
 802c5ce:	f001 fee3 	bl	802e398 <sniprintf>
 802c5d2:	2800      	cmp	r0, #0
 802c5d4:	bfc8      	it	gt
 802c5d6:	eb0a 0b00 	addgt.w	fp, sl, r0
 802c5da:	e7ec      	b.n	802c5b6 <__strftime.isra.0+0x80a>
 802c5dc:	1e6b      	subs	r3, r5, #1
 802c5de:	429c      	cmp	r4, r3
 802c5e0:	f4bf ad74 	bcs.w	802c0cc <__strftime.isra.0+0x320>
 802c5e4:	69b3      	ldr	r3, [r6, #24]
 802c5e6:	f104 0a01 	add.w	sl, r4, #1
 802c5ea:	3330      	adds	r3, #48	@ 0x30
 802c5ec:	e6a1      	b.n	802c332 <__strftime.isra.0+0x586>
 802c5ee:	69b2      	ldr	r2, [r6, #24]
 802c5f0:	b11a      	cbz	r2, 802c5fa <__strftime.isra.0+0x84e>
 802c5f2:	3a01      	subs	r2, #1
 802c5f4:	69f3      	ldr	r3, [r6, #28]
 802c5f6:	3307      	adds	r3, #7
 802c5f8:	e78e      	b.n	802c518 <__strftime.isra.0+0x76c>
 802c5fa:	2206      	movs	r2, #6
 802c5fc:	e7fa      	b.n	802c5f4 <__strftime.isra.0+0x848>
 802c5fe:	6970      	ldr	r0, [r6, #20]
 802c600:	2800      	cmp	r0, #0
 802c602:	db05      	blt.n	802c610 <__strftime.isra.0+0x864>
 802c604:	2364      	movs	r3, #100	@ 0x64
 802c606:	fb90 f2f3 	sdiv	r2, r0, r3
 802c60a:	fb02 0313 	mls	r3, r2, r3, r0
 802c60e:	e5ab      	b.n	802c168 <__strftime.isra.0+0x3bc>
 802c610:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802c614:	f000 fc9b 	bl	802cf4e <abs>
 802c618:	e7f4      	b.n	802c604 <__strftime.isra.0+0x858>
 802c61a:	6971      	ldr	r1, [r6, #20]
 802c61c:	4849      	ldr	r0, [pc, #292]	@ (802c744 <__strftime.isra.0+0x998>)
 802c61e:	4281      	cmp	r1, r0
 802c620:	da09      	bge.n	802c636 <__strftime.isra.0+0x88a>
 802c622:	eba0 0a01 	sub.w	sl, r0, r1
 802c626:	212d      	movs	r1, #45	@ 0x2d
 802c628:	f88d 1018 	strb.w	r1, [sp, #24]
 802c62c:	b102      	cbz	r2, 802c630 <__strftime.isra.0+0x884>
 802c62e:	3a01      	subs	r2, #1
 802c630:	f10d 0119 	add.w	r1, sp, #25
 802c634:	e609      	b.n	802c24a <__strftime.isra.0+0x49e>
 802c636:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802c63a:	e5fd      	b.n	802c238 <__strftime.isra.0+0x48c>
 802c63c:	2330      	movs	r3, #48	@ 0x30
 802c63e:	1c88      	adds	r0, r1, #2
 802c640:	704b      	strb	r3, [r1, #1]
 802c642:	e609      	b.n	802c258 <__strftime.isra.0+0x4ac>
 802c644:	6a33      	ldr	r3, [r6, #32]
 802c646:	2b00      	cmp	r3, #0
 802c648:	da01      	bge.n	802c64e <__strftime.isra.0+0x8a2>
 802c64a:	46a2      	mov	sl, r4
 802c64c:	e45c      	b.n	802bf08 <__strftime.isra.0+0x15c>
 802c64e:	f000 f92b 	bl	802c8a8 <__tz_lock>
 802c652:	9b02      	ldr	r3, [sp, #8]
 802c654:	b90b      	cbnz	r3, 802c65a <__strftime.isra.0+0x8ae>
 802c656:	f000 f933 	bl	802c8c0 <_tzset_unlocked>
 802c65a:	f007 fd23 	bl	80340a4 <__gettzinfo>
 802c65e:	6a33      	ldr	r3, [r6, #32]
 802c660:	2b00      	cmp	r3, #0
 802c662:	bfd4      	ite	le
 802c664:	2200      	movle	r2, #0
 802c666:	2201      	movgt	r2, #1
 802c668:	2328      	movs	r3, #40	@ 0x28
 802c66a:	fb02 3303 	mla	r3, r2, r3, r3
 802c66e:	eb07 0a04 	add.w	sl, r7, r4
 802c672:	58c3      	ldr	r3, [r0, r3]
 802c674:	f1c3 0900 	rsb	r9, r3, #0
 802c678:	f000 f91c 	bl	802c8b4 <__tz_unlock>
 802c67c:	233c      	movs	r3, #60	@ 0x3c
 802c67e:	fb99 f0f3 	sdiv	r0, r9, r3
 802c682:	f001 fbfe 	bl	802de82 <labs>
 802c686:	233c      	movs	r3, #60	@ 0x3c
 802c688:	eba5 0b04 	sub.w	fp, r5, r4
 802c68c:	fb90 f2f3 	sdiv	r2, r0, r3
 802c690:	fb02 0013 	mls	r0, r2, r3, r0
 802c694:	9000      	str	r0, [sp, #0]
 802c696:	4a2c      	ldr	r2, [pc, #176]	@ (802c748 <__strftime.isra.0+0x99c>)
 802c698:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802c69c:	4659      	mov	r1, fp
 802c69e:	4650      	mov	r0, sl
 802c6a0:	fb99 f3f3 	sdiv	r3, r9, r3
 802c6a4:	f001 fe78 	bl	802e398 <sniprintf>
 802c6a8:	2800      	cmp	r0, #0
 802c6aa:	f6ff ad0f 	blt.w	802c0cc <__strftime.isra.0+0x320>
 802c6ae:	eb00 0a04 	add.w	sl, r0, r4
 802c6b2:	4555      	cmp	r5, sl
 802c6b4:	f67f ad0a 	bls.w	802c0cc <__strftime.isra.0+0x320>
 802c6b8:	2301      	movs	r3, #1
 802c6ba:	9302      	str	r3, [sp, #8]
 802c6bc:	e424      	b.n	802bf08 <__strftime.isra.0+0x15c>
 802c6be:	6a33      	ldr	r3, [r6, #32]
 802c6c0:	2b00      	cmp	r3, #0
 802c6c2:	dbc2      	blt.n	802c64a <__strftime.isra.0+0x89e>
 802c6c4:	f000 f8f0 	bl	802c8a8 <__tz_lock>
 802c6c8:	9b02      	ldr	r3, [sp, #8]
 802c6ca:	b90b      	cbnz	r3, 802c6d0 <__strftime.isra.0+0x924>
 802c6cc:	f000 f8f8 	bl	802c8c0 <_tzset_unlocked>
 802c6d0:	6a33      	ldr	r3, [r6, #32]
 802c6d2:	4a1e      	ldr	r2, [pc, #120]	@ (802c74c <__strftime.isra.0+0x9a0>)
 802c6d4:	2b00      	cmp	r3, #0
 802c6d6:	bfd4      	ite	le
 802c6d8:	2300      	movle	r3, #0
 802c6da:	2301      	movgt	r3, #1
 802c6dc:	46a2      	mov	sl, r4
 802c6de:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802c6e2:	4648      	mov	r0, r9
 802c6e4:	f7e3 fddc 	bl	80102a0 <strlen>
 802c6e8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802c6ec:	4420      	add	r0, r4
 802c6ee:	1e6b      	subs	r3, r5, #1
 802c6f0:	4550      	cmp	r0, sl
 802c6f2:	d102      	bne.n	802c6fa <__strftime.isra.0+0x94e>
 802c6f4:	f000 f8de 	bl	802c8b4 <__tz_unlock>
 802c6f8:	e7de      	b.n	802c6b8 <__strftime.isra.0+0x90c>
 802c6fa:	4553      	cmp	r3, sl
 802c6fc:	d906      	bls.n	802c70c <__strftime.isra.0+0x960>
 802c6fe:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802c702:	f807 200a 	strb.w	r2, [r7, sl]
 802c706:	f10a 0a01 	add.w	sl, sl, #1
 802c70a:	e7f1      	b.n	802c6f0 <__strftime.isra.0+0x944>
 802c70c:	f000 f8d2 	bl	802c8b4 <__tz_unlock>
 802c710:	e4dc      	b.n	802c0cc <__strftime.isra.0+0x320>
 802c712:	1e6b      	subs	r3, r5, #1
 802c714:	429c      	cmp	r4, r3
 802c716:	f4bf acd9 	bcs.w	802c0cc <__strftime.isra.0+0x320>
 802c71a:	f104 0a01 	add.w	sl, r4, #1
 802c71e:	2325      	movs	r3, #37	@ 0x25
 802c720:	e607      	b.n	802c332 <__strftime.isra.0+0x586>
 802c722:	46a2      	mov	sl, r4
 802c724:	2d00      	cmp	r5, #0
 802c726:	f43f acd3 	beq.w	802c0d0 <__strftime.isra.0+0x324>
 802c72a:	2300      	movs	r3, #0
 802c72c:	f807 300a 	strb.w	r3, [r7, sl]
 802c730:	e4ce      	b.n	802c0d0 <__strftime.isra.0+0x324>
 802c732:	4649      	mov	r1, r9
 802c734:	e778      	b.n	802c628 <__strftime.isra.0+0x87c>
 802c736:	bf00      	nop
 802c738:	0803a828 	.word	0x0803a828
 802c73c:	0803a990 	.word	0x0803a990
 802c740:	0803a7fa 	.word	0x0803a7fa
 802c744:	fffff894 	.word	0xfffff894
 802c748:	0803a830 	.word	0x0803a830
 802c74c:	200000e0 	.word	0x200000e0

0802c750 <strftime>:
 802c750:	f7ff bb2c 	b.w	802bdac <__strftime.isra.0>

0802c754 <__tzcalc_limits>:
 802c754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c758:	4604      	mov	r4, r0
 802c75a:	f007 fca3 	bl	80340a4 <__gettzinfo>
 802c75e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802c762:	429c      	cmp	r4, r3
 802c764:	f340 8099 	ble.w	802c89a <__tzcalc_limits+0x146>
 802c768:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802c76c:	19e5      	adds	r5, r4, r7
 802c76e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802c772:	f240 126d 	movw	r2, #365	@ 0x16d
 802c776:	10ad      	asrs	r5, r5, #2
 802c778:	fb02 5503 	mla	r5, r2, r3, r5
 802c77c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802c780:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802c784:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802c788:	4f45      	ldr	r7, [pc, #276]	@ (802c8a0 <__tzcalc_limits+0x14c>)
 802c78a:	fb93 f3f2 	sdiv	r3, r3, r2
 802c78e:	441d      	add	r5, r3
 802c790:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802c794:	eb04 030c 	add.w	r3, r4, ip
 802c798:	6044      	str	r4, [r0, #4]
 802c79a:	fbb3 f3f2 	udiv	r3, r3, r2
 802c79e:	4601      	mov	r1, r0
 802c7a0:	441d      	add	r5, r3
 802c7a2:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802c7a6:	7a0b      	ldrb	r3, [r1, #8]
 802c7a8:	694a      	ldr	r2, [r1, #20]
 802c7aa:	2b4a      	cmp	r3, #74	@ 0x4a
 802c7ac:	d133      	bne.n	802c816 <__tzcalc_limits+0xc2>
 802c7ae:	07a6      	lsls	r6, r4, #30
 802c7b0:	eb05 0302 	add.w	r3, r5, r2
 802c7b4:	d106      	bne.n	802c7c4 <__tzcalc_limits+0x70>
 802c7b6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802c7ba:	fb94 f6fe 	sdiv	r6, r4, lr
 802c7be:	fb0e 4616 	mls	r6, lr, r6, r4
 802c7c2:	b936      	cbnz	r6, 802c7d2 <__tzcalc_limits+0x7e>
 802c7c4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802c7c8:	fb94 f6fe 	sdiv	r6, r4, lr
 802c7cc:	fb0e 4616 	mls	r6, lr, r6, r4
 802c7d0:	b9fe      	cbnz	r6, 802c812 <__tzcalc_limits+0xbe>
 802c7d2:	2a3b      	cmp	r2, #59	@ 0x3b
 802c7d4:	bfd4      	ite	le
 802c7d6:	2200      	movle	r2, #0
 802c7d8:	2201      	movgt	r2, #1
 802c7da:	4413      	add	r3, r2
 802c7dc:	3b01      	subs	r3, #1
 802c7de:	698a      	ldr	r2, [r1, #24]
 802c7e0:	17d6      	asrs	r6, r2, #31
 802c7e2:	fbc3 2607 	smlal	r2, r6, r3, r7
 802c7e6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802c7e8:	18d2      	adds	r2, r2, r3
 802c7ea:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802c7ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802c7f2:	3128      	adds	r1, #40	@ 0x28
 802c7f4:	458c      	cmp	ip, r1
 802c7f6:	d1d6      	bne.n	802c7a6 <__tzcalc_limits+0x52>
 802c7f8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802c7fc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802c800:	428c      	cmp	r4, r1
 802c802:	4193      	sbcs	r3, r2
 802c804:	bfb4      	ite	lt
 802c806:	2301      	movlt	r3, #1
 802c808:	2300      	movge	r3, #0
 802c80a:	6003      	str	r3, [r0, #0]
 802c80c:	2001      	movs	r0, #1
 802c80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c812:	2200      	movs	r2, #0
 802c814:	e7e1      	b.n	802c7da <__tzcalc_limits+0x86>
 802c816:	2b44      	cmp	r3, #68	@ 0x44
 802c818:	d101      	bne.n	802c81e <__tzcalc_limits+0xca>
 802c81a:	18ab      	adds	r3, r5, r2
 802c81c:	e7df      	b.n	802c7de <__tzcalc_limits+0x8a>
 802c81e:	07a3      	lsls	r3, r4, #30
 802c820:	d105      	bne.n	802c82e <__tzcalc_limits+0xda>
 802c822:	2664      	movs	r6, #100	@ 0x64
 802c824:	fb94 f3f6 	sdiv	r3, r4, r6
 802c828:	fb06 4313 	mls	r3, r6, r3, r4
 802c82c:	bb7b      	cbnz	r3, 802c88e <__tzcalc_limits+0x13a>
 802c82e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802c832:	fb94 f6f3 	sdiv	r6, r4, r3
 802c836:	fb03 4616 	mls	r6, r3, r6, r4
 802c83a:	fab6 f686 	clz	r6, r6
 802c83e:	0976      	lsrs	r6, r6, #5
 802c840:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802c8a4 <__tzcalc_limits+0x150>
 802c844:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802c848:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802c84c:	462b      	mov	r3, r5
 802c84e:	f04f 0800 	mov.w	r8, #0
 802c852:	fb0a e606 	mla	r6, sl, r6, lr
 802c856:	f108 0801 	add.w	r8, r8, #1
 802c85a:	45c1      	cmp	r9, r8
 802c85c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802c860:	dc17      	bgt.n	802c892 <__tzcalc_limits+0x13e>
 802c862:	f103 0804 	add.w	r8, r3, #4
 802c866:	2607      	movs	r6, #7
 802c868:	fb98 f6f6 	sdiv	r6, r8, r6
 802c86c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802c870:	eba8 0606 	sub.w	r6, r8, r6
 802c874:	1b92      	subs	r2, r2, r6
 802c876:	690e      	ldr	r6, [r1, #16]
 802c878:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802c87c:	bf48      	it	mi
 802c87e:	3207      	addmi	r2, #7
 802c880:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802c884:	4432      	add	r2, r6
 802c886:	4572      	cmp	r2, lr
 802c888:	da05      	bge.n	802c896 <__tzcalc_limits+0x142>
 802c88a:	4413      	add	r3, r2
 802c88c:	e7a7      	b.n	802c7de <__tzcalc_limits+0x8a>
 802c88e:	2601      	movs	r6, #1
 802c890:	e7d6      	b.n	802c840 <__tzcalc_limits+0xec>
 802c892:	4473      	add	r3, lr
 802c894:	e7df      	b.n	802c856 <__tzcalc_limits+0x102>
 802c896:	3a07      	subs	r2, #7
 802c898:	e7f5      	b.n	802c886 <__tzcalc_limits+0x132>
 802c89a:	2000      	movs	r0, #0
 802c89c:	e7b7      	b.n	802c80e <__tzcalc_limits+0xba>
 802c89e:	bf00      	nop
 802c8a0:	00015180 	.word	0x00015180
 802c8a4:	0803a770 	.word	0x0803a770

0802c8a8 <__tz_lock>:
 802c8a8:	4801      	ldr	r0, [pc, #4]	@ (802c8b0 <__tz_lock+0x8>)
 802c8aa:	f000 bae1 	b.w	802ce70 <__retarget_lock_acquire>
 802c8ae:	bf00      	nop
 802c8b0:	20018f58 	.word	0x20018f58

0802c8b4 <__tz_unlock>:
 802c8b4:	4801      	ldr	r0, [pc, #4]	@ (802c8bc <__tz_unlock+0x8>)
 802c8b6:	f000 badd 	b.w	802ce74 <__retarget_lock_release>
 802c8ba:	bf00      	nop
 802c8bc:	20018f58 	.word	0x20018f58

0802c8c0 <_tzset_unlocked>:
 802c8c0:	4b01      	ldr	r3, [pc, #4]	@ (802c8c8 <_tzset_unlocked+0x8>)
 802c8c2:	6818      	ldr	r0, [r3, #0]
 802c8c4:	f000 b802 	b.w	802c8cc <_tzset_unlocked_r>
 802c8c8:	20000254 	.word	0x20000254

0802c8cc <_tzset_unlocked_r>:
 802c8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c8d0:	b08d      	sub	sp, #52	@ 0x34
 802c8d2:	4607      	mov	r7, r0
 802c8d4:	f007 fbe6 	bl	80340a4 <__gettzinfo>
 802c8d8:	49bc      	ldr	r1, [pc, #752]	@ (802cbcc <_tzset_unlocked_r+0x300>)
 802c8da:	4dbd      	ldr	r5, [pc, #756]	@ (802cbd0 <_tzset_unlocked_r+0x304>)
 802c8dc:	4604      	mov	r4, r0
 802c8de:	4638      	mov	r0, r7
 802c8e0:	f001 fac8 	bl	802de74 <_getenv_r>
 802c8e4:	4606      	mov	r6, r0
 802c8e6:	bb10      	cbnz	r0, 802c92e <_tzset_unlocked_r+0x62>
 802c8e8:	4bba      	ldr	r3, [pc, #744]	@ (802cbd4 <_tzset_unlocked_r+0x308>)
 802c8ea:	4abb      	ldr	r2, [pc, #748]	@ (802cbd8 <_tzset_unlocked_r+0x30c>)
 802c8ec:	6018      	str	r0, [r3, #0]
 802c8ee:	4bbb      	ldr	r3, [pc, #748]	@ (802cbdc <_tzset_unlocked_r+0x310>)
 802c8f0:	62a0      	str	r0, [r4, #40]	@ 0x28
 802c8f2:	6018      	str	r0, [r3, #0]
 802c8f4:	4bba      	ldr	r3, [pc, #744]	@ (802cbe0 <_tzset_unlocked_r+0x314>)
 802c8f6:	6520      	str	r0, [r4, #80]	@ 0x50
 802c8f8:	e9c3 2200 	strd	r2, r2, [r3]
 802c8fc:	214a      	movs	r1, #74	@ 0x4a
 802c8fe:	2200      	movs	r2, #0
 802c900:	2300      	movs	r3, #0
 802c902:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802c906:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802c90a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802c90e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802c912:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802c916:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802c91a:	6828      	ldr	r0, [r5, #0]
 802c91c:	7221      	strb	r1, [r4, #8]
 802c91e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802c922:	f001 fabb 	bl	802de9c <free>
 802c926:	602e      	str	r6, [r5, #0]
 802c928:	b00d      	add	sp, #52	@ 0x34
 802c92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c92e:	6829      	ldr	r1, [r5, #0]
 802c930:	2900      	cmp	r1, #0
 802c932:	f040 808e 	bne.w	802ca52 <_tzset_unlocked_r+0x186>
 802c936:	6828      	ldr	r0, [r5, #0]
 802c938:	f001 fab0 	bl	802de9c <free>
 802c93c:	4630      	mov	r0, r6
 802c93e:	f7e3 fcaf 	bl	80102a0 <strlen>
 802c942:	1c41      	adds	r1, r0, #1
 802c944:	4638      	mov	r0, r7
 802c946:	f001 fab1 	bl	802deac <_malloc_r>
 802c94a:	6028      	str	r0, [r5, #0]
 802c94c:	2800      	cmp	r0, #0
 802c94e:	f040 8086 	bne.w	802ca5e <_tzset_unlocked_r+0x192>
 802c952:	4aa2      	ldr	r2, [pc, #648]	@ (802cbdc <_tzset_unlocked_r+0x310>)
 802c954:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802cbe0 <_tzset_unlocked_r+0x314>
 802c958:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802cbd4 <_tzset_unlocked_r+0x308>
 802c95c:	2300      	movs	r3, #0
 802c95e:	6013      	str	r3, [r2, #0]
 802c960:	4aa0      	ldr	r2, [pc, #640]	@ (802cbe4 <_tzset_unlocked_r+0x318>)
 802c962:	f8ca 3000 	str.w	r3, [sl]
 802c966:	2000      	movs	r0, #0
 802c968:	2100      	movs	r1, #0
 802c96a:	e9c8 2200 	strd	r2, r2, [r8]
 802c96e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802c972:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802c976:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802c97a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802c97e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802c982:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802c986:	224a      	movs	r2, #74	@ 0x4a
 802c988:	7222      	strb	r2, [r4, #8]
 802c98a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802c98c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802c990:	6523      	str	r3, [r4, #80]	@ 0x50
 802c992:	7833      	ldrb	r3, [r6, #0]
 802c994:	2b3a      	cmp	r3, #58	@ 0x3a
 802c996:	bf08      	it	eq
 802c998:	3601      	addeq	r6, #1
 802c99a:	7833      	ldrb	r3, [r6, #0]
 802c99c:	2b3c      	cmp	r3, #60	@ 0x3c
 802c99e:	d162      	bne.n	802ca66 <_tzset_unlocked_r+0x19a>
 802c9a0:	1c75      	adds	r5, r6, #1
 802c9a2:	4a91      	ldr	r2, [pc, #580]	@ (802cbe8 <_tzset_unlocked_r+0x31c>)
 802c9a4:	4991      	ldr	r1, [pc, #580]	@ (802cbec <_tzset_unlocked_r+0x320>)
 802c9a6:	ab0a      	add	r3, sp, #40	@ 0x28
 802c9a8:	4628      	mov	r0, r5
 802c9aa:	f001 fccb 	bl	802e344 <siscanf>
 802c9ae:	2800      	cmp	r0, #0
 802c9b0:	ddba      	ble.n	802c928 <_tzset_unlocked_r+0x5c>
 802c9b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c9b4:	1eda      	subs	r2, r3, #3
 802c9b6:	2a07      	cmp	r2, #7
 802c9b8:	d8b6      	bhi.n	802c928 <_tzset_unlocked_r+0x5c>
 802c9ba:	5ceb      	ldrb	r3, [r5, r3]
 802c9bc:	2b3e      	cmp	r3, #62	@ 0x3e
 802c9be:	d1b3      	bne.n	802c928 <_tzset_unlocked_r+0x5c>
 802c9c0:	3602      	adds	r6, #2
 802c9c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c9c4:	18f5      	adds	r5, r6, r3
 802c9c6:	5cf3      	ldrb	r3, [r6, r3]
 802c9c8:	2b2d      	cmp	r3, #45	@ 0x2d
 802c9ca:	d15a      	bne.n	802ca82 <_tzset_unlocked_r+0x1b6>
 802c9cc:	3501      	adds	r5, #1
 802c9ce:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802c9d2:	2300      	movs	r3, #0
 802c9d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 802c9d8:	f8ad 3020 	strh.w	r3, [sp, #32]
 802c9dc:	af08      	add	r7, sp, #32
 802c9de:	ab0a      	add	r3, sp, #40	@ 0x28
 802c9e0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802c9e4:	9303      	str	r3, [sp, #12]
 802c9e6:	f10d 031e 	add.w	r3, sp, #30
 802c9ea:	9300      	str	r3, [sp, #0]
 802c9ec:	4980      	ldr	r1, [pc, #512]	@ (802cbf0 <_tzset_unlocked_r+0x324>)
 802c9ee:	ab0a      	add	r3, sp, #40	@ 0x28
 802c9f0:	aa07      	add	r2, sp, #28
 802c9f2:	4628      	mov	r0, r5
 802c9f4:	f001 fca6 	bl	802e344 <siscanf>
 802c9f8:	2800      	cmp	r0, #0
 802c9fa:	dd95      	ble.n	802c928 <_tzset_unlocked_r+0x5c>
 802c9fc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802ca00:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802ca04:	223c      	movs	r2, #60	@ 0x3c
 802ca06:	fb02 6603 	mla	r6, r2, r3, r6
 802ca0a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802ca0e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802ca12:	fb02 6603 	mla	r6, r2, r3, r6
 802ca16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ca18:	fb09 f606 	mul.w	r6, r9, r6
 802ca1c:	eb05 0903 	add.w	r9, r5, r3
 802ca20:	5ceb      	ldrb	r3, [r5, r3]
 802ca22:	2b3c      	cmp	r3, #60	@ 0x3c
 802ca24:	f040 80ee 	bne.w	802cc04 <_tzset_unlocked_r+0x338>
 802ca28:	f109 0501 	add.w	r5, r9, #1
 802ca2c:	4a71      	ldr	r2, [pc, #452]	@ (802cbf4 <_tzset_unlocked_r+0x328>)
 802ca2e:	496f      	ldr	r1, [pc, #444]	@ (802cbec <_tzset_unlocked_r+0x320>)
 802ca30:	ab0a      	add	r3, sp, #40	@ 0x28
 802ca32:	4628      	mov	r0, r5
 802ca34:	f001 fc86 	bl	802e344 <siscanf>
 802ca38:	2800      	cmp	r0, #0
 802ca3a:	dc28      	bgt.n	802ca8e <_tzset_unlocked_r+0x1c2>
 802ca3c:	f899 3001 	ldrb.w	r3, [r9, #1]
 802ca40:	2b3e      	cmp	r3, #62	@ 0x3e
 802ca42:	d124      	bne.n	802ca8e <_tzset_unlocked_r+0x1c2>
 802ca44:	4b68      	ldr	r3, [pc, #416]	@ (802cbe8 <_tzset_unlocked_r+0x31c>)
 802ca46:	62a6      	str	r6, [r4, #40]	@ 0x28
 802ca48:	e9c8 3300 	strd	r3, r3, [r8]
 802ca4c:	f8ca 6000 	str.w	r6, [sl]
 802ca50:	e76a      	b.n	802c928 <_tzset_unlocked_r+0x5c>
 802ca52:	f7e3 fbc5 	bl	80101e0 <strcmp>
 802ca56:	2800      	cmp	r0, #0
 802ca58:	f47f af6d 	bne.w	802c936 <_tzset_unlocked_r+0x6a>
 802ca5c:	e764      	b.n	802c928 <_tzset_unlocked_r+0x5c>
 802ca5e:	4631      	mov	r1, r6
 802ca60:	f000 f9d8 	bl	802ce14 <strcpy>
 802ca64:	e775      	b.n	802c952 <_tzset_unlocked_r+0x86>
 802ca66:	4a60      	ldr	r2, [pc, #384]	@ (802cbe8 <_tzset_unlocked_r+0x31c>)
 802ca68:	4963      	ldr	r1, [pc, #396]	@ (802cbf8 <_tzset_unlocked_r+0x32c>)
 802ca6a:	ab0a      	add	r3, sp, #40	@ 0x28
 802ca6c:	4630      	mov	r0, r6
 802ca6e:	f001 fc69 	bl	802e344 <siscanf>
 802ca72:	2800      	cmp	r0, #0
 802ca74:	f77f af58 	ble.w	802c928 <_tzset_unlocked_r+0x5c>
 802ca78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ca7a:	3b03      	subs	r3, #3
 802ca7c:	2b07      	cmp	r3, #7
 802ca7e:	d9a0      	bls.n	802c9c2 <_tzset_unlocked_r+0xf6>
 802ca80:	e752      	b.n	802c928 <_tzset_unlocked_r+0x5c>
 802ca82:	2b2b      	cmp	r3, #43	@ 0x2b
 802ca84:	bf08      	it	eq
 802ca86:	3501      	addeq	r5, #1
 802ca88:	f04f 0901 	mov.w	r9, #1
 802ca8c:	e7a1      	b.n	802c9d2 <_tzset_unlocked_r+0x106>
 802ca8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ca90:	1eda      	subs	r2, r3, #3
 802ca92:	2a07      	cmp	r2, #7
 802ca94:	f63f af48 	bhi.w	802c928 <_tzset_unlocked_r+0x5c>
 802ca98:	5ceb      	ldrb	r3, [r5, r3]
 802ca9a:	2b3e      	cmp	r3, #62	@ 0x3e
 802ca9c:	f47f af44 	bne.w	802c928 <_tzset_unlocked_r+0x5c>
 802caa0:	f109 0902 	add.w	r9, r9, #2
 802caa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802caa6:	eb09 0503 	add.w	r5, r9, r3
 802caaa:	f819 3003 	ldrb.w	r3, [r9, r3]
 802caae:	2b2d      	cmp	r3, #45	@ 0x2d
 802cab0:	f040 80b7 	bne.w	802cc22 <_tzset_unlocked_r+0x356>
 802cab4:	3501      	adds	r5, #1
 802cab6:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802caba:	2300      	movs	r3, #0
 802cabc:	f8ad 301c 	strh.w	r3, [sp, #28]
 802cac0:	f8ad 301e 	strh.w	r3, [sp, #30]
 802cac4:	f8ad 3020 	strh.w	r3, [sp, #32]
 802cac8:	930a      	str	r3, [sp, #40]	@ 0x28
 802caca:	ab0a      	add	r3, sp, #40	@ 0x28
 802cacc:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802cad0:	9301      	str	r3, [sp, #4]
 802cad2:	f10d 031e 	add.w	r3, sp, #30
 802cad6:	9300      	str	r3, [sp, #0]
 802cad8:	4945      	ldr	r1, [pc, #276]	@ (802cbf0 <_tzset_unlocked_r+0x324>)
 802cada:	ab0a      	add	r3, sp, #40	@ 0x28
 802cadc:	aa07      	add	r2, sp, #28
 802cade:	4628      	mov	r0, r5
 802cae0:	f001 fc30 	bl	802e344 <siscanf>
 802cae4:	2800      	cmp	r0, #0
 802cae6:	f300 80a2 	bgt.w	802cc2e <_tzset_unlocked_r+0x362>
 802caea:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802caee:	9304      	str	r3, [sp, #16]
 802caf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802caf2:	4627      	mov	r7, r4
 802caf4:	441d      	add	r5, r3
 802caf6:	f04f 0b00 	mov.w	fp, #0
 802cafa:	782b      	ldrb	r3, [r5, #0]
 802cafc:	2b2c      	cmp	r3, #44	@ 0x2c
 802cafe:	bf08      	it	eq
 802cb00:	3501      	addeq	r5, #1
 802cb02:	f895 9000 	ldrb.w	r9, [r5]
 802cb06:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802cb0a:	f040 80a3 	bne.w	802cc54 <_tzset_unlocked_r+0x388>
 802cb0e:	ab0a      	add	r3, sp, #40	@ 0x28
 802cb10:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802cb14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802cb18:	aa09      	add	r2, sp, #36	@ 0x24
 802cb1a:	9200      	str	r2, [sp, #0]
 802cb1c:	4937      	ldr	r1, [pc, #220]	@ (802cbfc <_tzset_unlocked_r+0x330>)
 802cb1e:	9303      	str	r3, [sp, #12]
 802cb20:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802cb24:	4628      	mov	r0, r5
 802cb26:	f001 fc0d 	bl	802e344 <siscanf>
 802cb2a:	2803      	cmp	r0, #3
 802cb2c:	f47f aefc 	bne.w	802c928 <_tzset_unlocked_r+0x5c>
 802cb30:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802cb34:	1e4b      	subs	r3, r1, #1
 802cb36:	2b0b      	cmp	r3, #11
 802cb38:	f63f aef6 	bhi.w	802c928 <_tzset_unlocked_r+0x5c>
 802cb3c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802cb40:	1e53      	subs	r3, r2, #1
 802cb42:	2b04      	cmp	r3, #4
 802cb44:	f63f aef0 	bhi.w	802c928 <_tzset_unlocked_r+0x5c>
 802cb48:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802cb4c:	2b06      	cmp	r3, #6
 802cb4e:	f63f aeeb 	bhi.w	802c928 <_tzset_unlocked_r+0x5c>
 802cb52:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802cb56:	f887 9008 	strb.w	r9, [r7, #8]
 802cb5a:	617b      	str	r3, [r7, #20]
 802cb5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802cb5e:	eb05 0903 	add.w	r9, r5, r3
 802cb62:	2500      	movs	r5, #0
 802cb64:	f04f 0302 	mov.w	r3, #2
 802cb68:	f8ad 301c 	strh.w	r3, [sp, #28]
 802cb6c:	f8ad 501e 	strh.w	r5, [sp, #30]
 802cb70:	f8ad 5020 	strh.w	r5, [sp, #32]
 802cb74:	950a      	str	r5, [sp, #40]	@ 0x28
 802cb76:	f899 3000 	ldrb.w	r3, [r9]
 802cb7a:	2b2f      	cmp	r3, #47	@ 0x2f
 802cb7c:	f040 8096 	bne.w	802ccac <_tzset_unlocked_r+0x3e0>
 802cb80:	ab0a      	add	r3, sp, #40	@ 0x28
 802cb82:	aa08      	add	r2, sp, #32
 802cb84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802cb88:	f10d 021e 	add.w	r2, sp, #30
 802cb8c:	9200      	str	r2, [sp, #0]
 802cb8e:	491c      	ldr	r1, [pc, #112]	@ (802cc00 <_tzset_unlocked_r+0x334>)
 802cb90:	9303      	str	r3, [sp, #12]
 802cb92:	aa07      	add	r2, sp, #28
 802cb94:	4648      	mov	r0, r9
 802cb96:	f001 fbd5 	bl	802e344 <siscanf>
 802cb9a:	42a8      	cmp	r0, r5
 802cb9c:	f300 8086 	bgt.w	802ccac <_tzset_unlocked_r+0x3e0>
 802cba0:	214a      	movs	r1, #74	@ 0x4a
 802cba2:	2200      	movs	r2, #0
 802cba4:	2300      	movs	r3, #0
 802cba6:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802cbaa:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802cbae:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802cbb2:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802cbb6:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802cbba:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802cbbe:	7221      	strb	r1, [r4, #8]
 802cbc0:	62a5      	str	r5, [r4, #40]	@ 0x28
 802cbc2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802cbc6:	6525      	str	r5, [r4, #80]	@ 0x50
 802cbc8:	e6ae      	b.n	802c928 <_tzset_unlocked_r+0x5c>
 802cbca:	bf00      	nop
 802cbcc:	0803a83c 	.word	0x0803a83c
 802cbd0:	20018f30 	.word	0x20018f30
 802cbd4:	20018f4c 	.word	0x20018f4c
 802cbd8:	0803a83f 	.word	0x0803a83f
 802cbdc:	20018f50 	.word	0x20018f50
 802cbe0:	200000e0 	.word	0x200000e0
 802cbe4:	0803a6fe 	.word	0x0803a6fe
 802cbe8:	20018f40 	.word	0x20018f40
 802cbec:	0803a843 	.word	0x0803a843
 802cbf0:	0803a878 	.word	0x0803a878
 802cbf4:	20018f34 	.word	0x20018f34
 802cbf8:	0803a856 	.word	0x0803a856
 802cbfc:	0803a864 	.word	0x0803a864
 802cc00:	0803a877 	.word	0x0803a877
 802cc04:	4a3e      	ldr	r2, [pc, #248]	@ (802cd00 <_tzset_unlocked_r+0x434>)
 802cc06:	493f      	ldr	r1, [pc, #252]	@ (802cd04 <_tzset_unlocked_r+0x438>)
 802cc08:	ab0a      	add	r3, sp, #40	@ 0x28
 802cc0a:	4648      	mov	r0, r9
 802cc0c:	f001 fb9a 	bl	802e344 <siscanf>
 802cc10:	2800      	cmp	r0, #0
 802cc12:	f77f af17 	ble.w	802ca44 <_tzset_unlocked_r+0x178>
 802cc16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802cc18:	3b03      	subs	r3, #3
 802cc1a:	2b07      	cmp	r3, #7
 802cc1c:	f67f af42 	bls.w	802caa4 <_tzset_unlocked_r+0x1d8>
 802cc20:	e682      	b.n	802c928 <_tzset_unlocked_r+0x5c>
 802cc22:	2b2b      	cmp	r3, #43	@ 0x2b
 802cc24:	bf08      	it	eq
 802cc26:	3501      	addeq	r5, #1
 802cc28:	f04f 0901 	mov.w	r9, #1
 802cc2c:	e745      	b.n	802caba <_tzset_unlocked_r+0x1ee>
 802cc2e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802cc32:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802cc36:	213c      	movs	r1, #60	@ 0x3c
 802cc38:	fb01 3302 	mla	r3, r1, r2, r3
 802cc3c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802cc40:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802cc44:	fb01 3302 	mla	r3, r1, r2, r3
 802cc48:	fb09 f303 	mul.w	r3, r9, r3
 802cc4c:	e74f      	b.n	802caee <_tzset_unlocked_r+0x222>
 802cc4e:	f04f 0b01 	mov.w	fp, #1
 802cc52:	e752      	b.n	802cafa <_tzset_unlocked_r+0x22e>
 802cc54:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802cc58:	bf06      	itte	eq
 802cc5a:	3501      	addeq	r5, #1
 802cc5c:	464b      	moveq	r3, r9
 802cc5e:	2344      	movne	r3, #68	@ 0x44
 802cc60:	220a      	movs	r2, #10
 802cc62:	a90b      	add	r1, sp, #44	@ 0x2c
 802cc64:	4628      	mov	r0, r5
 802cc66:	9305      	str	r3, [sp, #20]
 802cc68:	f007 f950 	bl	8033f0c <strtoul>
 802cc6c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802cc70:	9b05      	ldr	r3, [sp, #20]
 802cc72:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802cc76:	45a9      	cmp	r9, r5
 802cc78:	d114      	bne.n	802cca4 <_tzset_unlocked_r+0x3d8>
 802cc7a:	234d      	movs	r3, #77	@ 0x4d
 802cc7c:	f1bb 0f00 	cmp.w	fp, #0
 802cc80:	d107      	bne.n	802cc92 <_tzset_unlocked_r+0x3c6>
 802cc82:	7223      	strb	r3, [r4, #8]
 802cc84:	2103      	movs	r1, #3
 802cc86:	2302      	movs	r3, #2
 802cc88:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802cc8c:	f8c4 b014 	str.w	fp, [r4, #20]
 802cc90:	e767      	b.n	802cb62 <_tzset_unlocked_r+0x296>
 802cc92:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802cc96:	220b      	movs	r2, #11
 802cc98:	2301      	movs	r3, #1
 802cc9a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802cc9e:	2300      	movs	r3, #0
 802cca0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802cca2:	e75e      	b.n	802cb62 <_tzset_unlocked_r+0x296>
 802cca4:	b280      	uxth	r0, r0
 802cca6:	723b      	strb	r3, [r7, #8]
 802cca8:	6178      	str	r0, [r7, #20]
 802ccaa:	e75a      	b.n	802cb62 <_tzset_unlocked_r+0x296>
 802ccac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802ccb0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802ccb4:	213c      	movs	r1, #60	@ 0x3c
 802ccb6:	fb01 3302 	mla	r3, r1, r2, r3
 802ccba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802ccbe:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802ccc2:	fb01 3302 	mla	r3, r1, r2, r3
 802ccc6:	61bb      	str	r3, [r7, #24]
 802ccc8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802ccca:	3728      	adds	r7, #40	@ 0x28
 802cccc:	444d      	add	r5, r9
 802ccce:	f1bb 0f00 	cmp.w	fp, #0
 802ccd2:	d0bc      	beq.n	802cc4e <_tzset_unlocked_r+0x382>
 802ccd4:	9b04      	ldr	r3, [sp, #16]
 802ccd6:	6523      	str	r3, [r4, #80]	@ 0x50
 802ccd8:	4b0b      	ldr	r3, [pc, #44]	@ (802cd08 <_tzset_unlocked_r+0x43c>)
 802ccda:	f8c8 3000 	str.w	r3, [r8]
 802ccde:	6860      	ldr	r0, [r4, #4]
 802cce0:	4b07      	ldr	r3, [pc, #28]	@ (802cd00 <_tzset_unlocked_r+0x434>)
 802cce2:	62a6      	str	r6, [r4, #40]	@ 0x28
 802cce4:	f8c8 3004 	str.w	r3, [r8, #4]
 802cce8:	f7ff fd34 	bl	802c754 <__tzcalc_limits>
 802ccec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802ccee:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802ccf0:	f8ca 2000 	str.w	r2, [sl]
 802ccf4:	1a9b      	subs	r3, r3, r2
 802ccf6:	4a05      	ldr	r2, [pc, #20]	@ (802cd0c <_tzset_unlocked_r+0x440>)
 802ccf8:	bf18      	it	ne
 802ccfa:	2301      	movne	r3, #1
 802ccfc:	6013      	str	r3, [r2, #0]
 802ccfe:	e613      	b.n	802c928 <_tzset_unlocked_r+0x5c>
 802cd00:	20018f34 	.word	0x20018f34
 802cd04:	0803a856 	.word	0x0803a856
 802cd08:	20018f40 	.word	0x20018f40
 802cd0c:	20018f50 	.word	0x20018f50

0802cd10 <__locale_mb_cur_max>:
 802cd10:	4b01      	ldr	r3, [pc, #4]	@ (802cd18 <__locale_mb_cur_max+0x8>)
 802cd12:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802cd16:	4770      	bx	lr
 802cd18:	200000e8 	.word	0x200000e8

0802cd1c <_localeconv_r>:
 802cd1c:	4800      	ldr	r0, [pc, #0]	@ (802cd20 <_localeconv_r+0x4>)
 802cd1e:	4770      	bx	lr
 802cd20:	200001d8 	.word	0x200001d8

0802cd24 <_close_r>:
 802cd24:	b538      	push	{r3, r4, r5, lr}
 802cd26:	4d06      	ldr	r5, [pc, #24]	@ (802cd40 <_close_r+0x1c>)
 802cd28:	2300      	movs	r3, #0
 802cd2a:	4604      	mov	r4, r0
 802cd2c:	4608      	mov	r0, r1
 802cd2e:	602b      	str	r3, [r5, #0]
 802cd30:	f7e5 faae 	bl	8012290 <_close>
 802cd34:	1c43      	adds	r3, r0, #1
 802cd36:	d102      	bne.n	802cd3e <_close_r+0x1a>
 802cd38:	682b      	ldr	r3, [r5, #0]
 802cd3a:	b103      	cbz	r3, 802cd3e <_close_r+0x1a>
 802cd3c:	6023      	str	r3, [r4, #0]
 802cd3e:	bd38      	pop	{r3, r4, r5, pc}
 802cd40:	20018f54 	.word	0x20018f54

0802cd44 <_reclaim_reent>:
 802cd44:	4b14      	ldr	r3, [pc, #80]	@ (802cd98 <_reclaim_reent+0x54>)
 802cd46:	681b      	ldr	r3, [r3, #0]
 802cd48:	4283      	cmp	r3, r0
 802cd4a:	b570      	push	{r4, r5, r6, lr}
 802cd4c:	4604      	mov	r4, r0
 802cd4e:	d022      	beq.n	802cd96 <_reclaim_reent+0x52>
 802cd50:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802cd52:	b153      	cbz	r3, 802cd6a <_reclaim_reent+0x26>
 802cd54:	2500      	movs	r5, #0
 802cd56:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802cd58:	5959      	ldr	r1, [r3, r5]
 802cd5a:	b9b1      	cbnz	r1, 802cd8a <_reclaim_reent+0x46>
 802cd5c:	3504      	adds	r5, #4
 802cd5e:	2d80      	cmp	r5, #128	@ 0x80
 802cd60:	d1f9      	bne.n	802cd56 <_reclaim_reent+0x12>
 802cd62:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802cd64:	4620      	mov	r0, r4
 802cd66:	f000 ff89 	bl	802dc7c <_free_r>
 802cd6a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802cd6c:	b111      	cbz	r1, 802cd74 <_reclaim_reent+0x30>
 802cd6e:	4620      	mov	r0, r4
 802cd70:	f000 ff84 	bl	802dc7c <_free_r>
 802cd74:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802cd76:	b111      	cbz	r1, 802cd7e <_reclaim_reent+0x3a>
 802cd78:	4620      	mov	r0, r4
 802cd7a:	f000 ff7f 	bl	802dc7c <_free_r>
 802cd7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802cd80:	b14b      	cbz	r3, 802cd96 <_reclaim_reent+0x52>
 802cd82:	4620      	mov	r0, r4
 802cd84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802cd88:	4718      	bx	r3
 802cd8a:	680e      	ldr	r6, [r1, #0]
 802cd8c:	4620      	mov	r0, r4
 802cd8e:	f000 ff75 	bl	802dc7c <_free_r>
 802cd92:	4631      	mov	r1, r6
 802cd94:	e7e1      	b.n	802cd5a <_reclaim_reent+0x16>
 802cd96:	bd70      	pop	{r4, r5, r6, pc}
 802cd98:	20000254 	.word	0x20000254

0802cd9c <_lseek_r>:
 802cd9c:	b538      	push	{r3, r4, r5, lr}
 802cd9e:	4d07      	ldr	r5, [pc, #28]	@ (802cdbc <_lseek_r+0x20>)
 802cda0:	4604      	mov	r4, r0
 802cda2:	4608      	mov	r0, r1
 802cda4:	4611      	mov	r1, r2
 802cda6:	2200      	movs	r2, #0
 802cda8:	602a      	str	r2, [r5, #0]
 802cdaa:	461a      	mov	r2, r3
 802cdac:	f7e5 fa7a 	bl	80122a4 <_lseek>
 802cdb0:	1c43      	adds	r3, r0, #1
 802cdb2:	d102      	bne.n	802cdba <_lseek_r+0x1e>
 802cdb4:	682b      	ldr	r3, [r5, #0]
 802cdb6:	b103      	cbz	r3, 802cdba <_lseek_r+0x1e>
 802cdb8:	6023      	str	r3, [r4, #0]
 802cdba:	bd38      	pop	{r3, r4, r5, pc}
 802cdbc:	20018f54 	.word	0x20018f54

0802cdc0 <_read_r>:
 802cdc0:	b538      	push	{r3, r4, r5, lr}
 802cdc2:	4d07      	ldr	r5, [pc, #28]	@ (802cde0 <_read_r+0x20>)
 802cdc4:	4604      	mov	r4, r0
 802cdc6:	4608      	mov	r0, r1
 802cdc8:	4611      	mov	r1, r2
 802cdca:	2200      	movs	r2, #0
 802cdcc:	602a      	str	r2, [r5, #0]
 802cdce:	461a      	mov	r2, r3
 802cdd0:	f7e5 fa40 	bl	8012254 <_read>
 802cdd4:	1c43      	adds	r3, r0, #1
 802cdd6:	d102      	bne.n	802cdde <_read_r+0x1e>
 802cdd8:	682b      	ldr	r3, [r5, #0]
 802cdda:	b103      	cbz	r3, 802cdde <_read_r+0x1e>
 802cddc:	6023      	str	r3, [r4, #0]
 802cdde:	bd38      	pop	{r3, r4, r5, pc}
 802cde0:	20018f54 	.word	0x20018f54

0802cde4 <_write_r>:
 802cde4:	b538      	push	{r3, r4, r5, lr}
 802cde6:	4d07      	ldr	r5, [pc, #28]	@ (802ce04 <_write_r+0x20>)
 802cde8:	4604      	mov	r4, r0
 802cdea:	4608      	mov	r0, r1
 802cdec:	4611      	mov	r1, r2
 802cdee:	2200      	movs	r2, #0
 802cdf0:	602a      	str	r2, [r5, #0]
 802cdf2:	461a      	mov	r2, r3
 802cdf4:	f7e5 fa3e 	bl	8012274 <_write>
 802cdf8:	1c43      	adds	r3, r0, #1
 802cdfa:	d102      	bne.n	802ce02 <_write_r+0x1e>
 802cdfc:	682b      	ldr	r3, [r5, #0]
 802cdfe:	b103      	cbz	r3, 802ce02 <_write_r+0x1e>
 802ce00:	6023      	str	r3, [r4, #0]
 802ce02:	bd38      	pop	{r3, r4, r5, pc}
 802ce04:	20018f54 	.word	0x20018f54

0802ce08 <__errno>:
 802ce08:	4b01      	ldr	r3, [pc, #4]	@ (802ce10 <__errno+0x8>)
 802ce0a:	6818      	ldr	r0, [r3, #0]
 802ce0c:	4770      	bx	lr
 802ce0e:	bf00      	nop
 802ce10:	20000254 	.word	0x20000254

0802ce14 <strcpy>:
 802ce14:	4603      	mov	r3, r0
 802ce16:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ce1a:	f803 2b01 	strb.w	r2, [r3], #1
 802ce1e:	2a00      	cmp	r2, #0
 802ce20:	d1f9      	bne.n	802ce16 <strcpy+0x2>
 802ce22:	4770      	bx	lr

0802ce24 <__libc_init_array>:
 802ce24:	b570      	push	{r4, r5, r6, lr}
 802ce26:	4d0d      	ldr	r5, [pc, #52]	@ (802ce5c <__libc_init_array+0x38>)
 802ce28:	4c0d      	ldr	r4, [pc, #52]	@ (802ce60 <__libc_init_array+0x3c>)
 802ce2a:	1b64      	subs	r4, r4, r5
 802ce2c:	10a4      	asrs	r4, r4, #2
 802ce2e:	2600      	movs	r6, #0
 802ce30:	42a6      	cmp	r6, r4
 802ce32:	d109      	bne.n	802ce48 <__libc_init_array+0x24>
 802ce34:	4d0b      	ldr	r5, [pc, #44]	@ (802ce64 <__libc_init_array+0x40>)
 802ce36:	4c0c      	ldr	r4, [pc, #48]	@ (802ce68 <__libc_init_array+0x44>)
 802ce38:	f007 ff60 	bl	8034cfc <_init>
 802ce3c:	1b64      	subs	r4, r4, r5
 802ce3e:	10a4      	asrs	r4, r4, #2
 802ce40:	2600      	movs	r6, #0
 802ce42:	42a6      	cmp	r6, r4
 802ce44:	d105      	bne.n	802ce52 <__libc_init_array+0x2e>
 802ce46:	bd70      	pop	{r4, r5, r6, pc}
 802ce48:	f855 3b04 	ldr.w	r3, [r5], #4
 802ce4c:	4798      	blx	r3
 802ce4e:	3601      	adds	r6, #1
 802ce50:	e7ee      	b.n	802ce30 <__libc_init_array+0xc>
 802ce52:	f855 3b04 	ldr.w	r3, [r5], #4
 802ce56:	4798      	blx	r3
 802ce58:	3601      	adds	r6, #1
 802ce5a:	e7f2      	b.n	802ce42 <__libc_init_array+0x1e>
 802ce5c:	0803aed0 	.word	0x0803aed0
 802ce60:	0803aed0 	.word	0x0803aed0
 802ce64:	0803aed0 	.word	0x0803aed0
 802ce68:	0803aed8 	.word	0x0803aed8

0802ce6c <__retarget_lock_init_recursive>:
 802ce6c:	4770      	bx	lr

0802ce6e <__retarget_lock_close_recursive>:
 802ce6e:	4770      	bx	lr

0802ce70 <__retarget_lock_acquire>:
 802ce70:	4770      	bx	lr

0802ce72 <__retarget_lock_acquire_recursive>:
 802ce72:	4770      	bx	lr

0802ce74 <__retarget_lock_release>:
 802ce74:	4770      	bx	lr

0802ce76 <__retarget_lock_release_recursive>:
 802ce76:	4770      	bx	lr

0802ce78 <memcpy>:
 802ce78:	440a      	add	r2, r1
 802ce7a:	4291      	cmp	r1, r2
 802ce7c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802ce80:	d100      	bne.n	802ce84 <memcpy+0xc>
 802ce82:	4770      	bx	lr
 802ce84:	b510      	push	{r4, lr}
 802ce86:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ce8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802ce8e:	4291      	cmp	r1, r2
 802ce90:	d1f9      	bne.n	802ce86 <memcpy+0xe>
 802ce92:	bd10      	pop	{r4, pc}

0802ce94 <_wcrtomb_r>:
 802ce94:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ce96:	4c09      	ldr	r4, [pc, #36]	@ (802cebc <_wcrtomb_r+0x28>)
 802ce98:	b085      	sub	sp, #20
 802ce9a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802ce9e:	4605      	mov	r5, r0
 802cea0:	461e      	mov	r6, r3
 802cea2:	b909      	cbnz	r1, 802cea8 <_wcrtomb_r+0x14>
 802cea4:	460a      	mov	r2, r1
 802cea6:	a901      	add	r1, sp, #4
 802cea8:	47b8      	blx	r7
 802ceaa:	1c43      	adds	r3, r0, #1
 802ceac:	bf01      	itttt	eq
 802ceae:	2300      	moveq	r3, #0
 802ceb0:	6033      	streq	r3, [r6, #0]
 802ceb2:	238a      	moveq	r3, #138	@ 0x8a
 802ceb4:	602b      	streq	r3, [r5, #0]
 802ceb6:	b005      	add	sp, #20
 802ceb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ceba:	bf00      	nop
 802cebc:	200000e8 	.word	0x200000e8

0802cec0 <frexp>:
 802cec0:	b570      	push	{r4, r5, r6, lr}
 802cec2:	2100      	movs	r1, #0
 802cec4:	ec55 4b10 	vmov	r4, r5, d0
 802cec8:	6001      	str	r1, [r0, #0]
 802ceca:	4915      	ldr	r1, [pc, #84]	@ (802cf20 <frexp+0x60>)
 802cecc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802ced0:	428a      	cmp	r2, r1
 802ced2:	4606      	mov	r6, r0
 802ced4:	462b      	mov	r3, r5
 802ced6:	d820      	bhi.n	802cf1a <frexp+0x5a>
 802ced8:	4621      	mov	r1, r4
 802ceda:	4311      	orrs	r1, r2
 802cedc:	d01d      	beq.n	802cf1a <frexp+0x5a>
 802cede:	4911      	ldr	r1, [pc, #68]	@ (802cf24 <frexp+0x64>)
 802cee0:	4029      	ands	r1, r5
 802cee2:	b961      	cbnz	r1, 802cefe <frexp+0x3e>
 802cee4:	4b10      	ldr	r3, [pc, #64]	@ (802cf28 <frexp+0x68>)
 802cee6:	2200      	movs	r2, #0
 802cee8:	4620      	mov	r0, r4
 802ceea:	4629      	mov	r1, r5
 802ceec:	f7e3 fb9c 	bl	8010628 <__aeabi_dmul>
 802cef0:	460b      	mov	r3, r1
 802cef2:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802cef6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802cefa:	4604      	mov	r4, r0
 802cefc:	6031      	str	r1, [r6, #0]
 802cefe:	6831      	ldr	r1, [r6, #0]
 802cf00:	1512      	asrs	r2, r2, #20
 802cf02:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802cf06:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802cf0a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802cf0e:	4411      	add	r1, r2
 802cf10:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802cf14:	6031      	str	r1, [r6, #0]
 802cf16:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802cf1a:	ec45 4b10 	vmov	d0, r4, r5
 802cf1e:	bd70      	pop	{r4, r5, r6, pc}
 802cf20:	7fefffff 	.word	0x7fefffff
 802cf24:	7ff00000 	.word	0x7ff00000
 802cf28:	43500000 	.word	0x43500000

0802cf2c <register_fini>:
 802cf2c:	4b02      	ldr	r3, [pc, #8]	@ (802cf38 <register_fini+0xc>)
 802cf2e:	b113      	cbz	r3, 802cf36 <register_fini+0xa>
 802cf30:	4802      	ldr	r0, [pc, #8]	@ (802cf3c <register_fini+0x10>)
 802cf32:	f000 b810 	b.w	802cf56 <atexit>
 802cf36:	4770      	bx	lr
 802cf38:	00000000 	.word	0x00000000
 802cf3c:	080343bd 	.word	0x080343bd

0802cf40 <abort>:
 802cf40:	b508      	push	{r3, lr}
 802cf42:	2006      	movs	r0, #6
 802cf44:	f007 f8a6 	bl	8034094 <raise>
 802cf48:	2001      	movs	r0, #1
 802cf4a:	f7e5 f97d 	bl	8012248 <_exit>

0802cf4e <abs>:
 802cf4e:	2800      	cmp	r0, #0
 802cf50:	bfb8      	it	lt
 802cf52:	4240      	neglt	r0, r0
 802cf54:	4770      	bx	lr

0802cf56 <atexit>:
 802cf56:	2300      	movs	r3, #0
 802cf58:	4601      	mov	r1, r0
 802cf5a:	461a      	mov	r2, r3
 802cf5c:	4618      	mov	r0, r3
 802cf5e:	f007 bb01 	b.w	8034564 <__register_exitproc>

0802cf62 <quorem>:
 802cf62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cf66:	6903      	ldr	r3, [r0, #16]
 802cf68:	690c      	ldr	r4, [r1, #16]
 802cf6a:	42a3      	cmp	r3, r4
 802cf6c:	4607      	mov	r7, r0
 802cf6e:	db7e      	blt.n	802d06e <quorem+0x10c>
 802cf70:	3c01      	subs	r4, #1
 802cf72:	f101 0814 	add.w	r8, r1, #20
 802cf76:	00a3      	lsls	r3, r4, #2
 802cf78:	f100 0514 	add.w	r5, r0, #20
 802cf7c:	9300      	str	r3, [sp, #0]
 802cf7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802cf82:	9301      	str	r3, [sp, #4]
 802cf84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802cf88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802cf8c:	3301      	adds	r3, #1
 802cf8e:	429a      	cmp	r2, r3
 802cf90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802cf94:	fbb2 f6f3 	udiv	r6, r2, r3
 802cf98:	d32e      	bcc.n	802cff8 <quorem+0x96>
 802cf9a:	f04f 0a00 	mov.w	sl, #0
 802cf9e:	46c4      	mov	ip, r8
 802cfa0:	46ae      	mov	lr, r5
 802cfa2:	46d3      	mov	fp, sl
 802cfa4:	f85c 3b04 	ldr.w	r3, [ip], #4
 802cfa8:	b298      	uxth	r0, r3
 802cfaa:	fb06 a000 	mla	r0, r6, r0, sl
 802cfae:	0c02      	lsrs	r2, r0, #16
 802cfb0:	0c1b      	lsrs	r3, r3, #16
 802cfb2:	fb06 2303 	mla	r3, r6, r3, r2
 802cfb6:	f8de 2000 	ldr.w	r2, [lr]
 802cfba:	b280      	uxth	r0, r0
 802cfbc:	b292      	uxth	r2, r2
 802cfbe:	1a12      	subs	r2, r2, r0
 802cfc0:	445a      	add	r2, fp
 802cfc2:	f8de 0000 	ldr.w	r0, [lr]
 802cfc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802cfca:	b29b      	uxth	r3, r3
 802cfcc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802cfd0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802cfd4:	b292      	uxth	r2, r2
 802cfd6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802cfda:	45e1      	cmp	r9, ip
 802cfdc:	f84e 2b04 	str.w	r2, [lr], #4
 802cfe0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802cfe4:	d2de      	bcs.n	802cfa4 <quorem+0x42>
 802cfe6:	9b00      	ldr	r3, [sp, #0]
 802cfe8:	58eb      	ldr	r3, [r5, r3]
 802cfea:	b92b      	cbnz	r3, 802cff8 <quorem+0x96>
 802cfec:	9b01      	ldr	r3, [sp, #4]
 802cfee:	3b04      	subs	r3, #4
 802cff0:	429d      	cmp	r5, r3
 802cff2:	461a      	mov	r2, r3
 802cff4:	d32f      	bcc.n	802d056 <quorem+0xf4>
 802cff6:	613c      	str	r4, [r7, #16]
 802cff8:	4638      	mov	r0, r7
 802cffa:	f005 fce3 	bl	80329c4 <__mcmp>
 802cffe:	2800      	cmp	r0, #0
 802d000:	db25      	blt.n	802d04e <quorem+0xec>
 802d002:	4629      	mov	r1, r5
 802d004:	2000      	movs	r0, #0
 802d006:	f858 2b04 	ldr.w	r2, [r8], #4
 802d00a:	f8d1 c000 	ldr.w	ip, [r1]
 802d00e:	fa1f fe82 	uxth.w	lr, r2
 802d012:	fa1f f38c 	uxth.w	r3, ip
 802d016:	eba3 030e 	sub.w	r3, r3, lr
 802d01a:	4403      	add	r3, r0
 802d01c:	0c12      	lsrs	r2, r2, #16
 802d01e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802d022:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802d026:	b29b      	uxth	r3, r3
 802d028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802d02c:	45c1      	cmp	r9, r8
 802d02e:	f841 3b04 	str.w	r3, [r1], #4
 802d032:	ea4f 4022 	mov.w	r0, r2, asr #16
 802d036:	d2e6      	bcs.n	802d006 <quorem+0xa4>
 802d038:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802d03c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802d040:	b922      	cbnz	r2, 802d04c <quorem+0xea>
 802d042:	3b04      	subs	r3, #4
 802d044:	429d      	cmp	r5, r3
 802d046:	461a      	mov	r2, r3
 802d048:	d30b      	bcc.n	802d062 <quorem+0x100>
 802d04a:	613c      	str	r4, [r7, #16]
 802d04c:	3601      	adds	r6, #1
 802d04e:	4630      	mov	r0, r6
 802d050:	b003      	add	sp, #12
 802d052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d056:	6812      	ldr	r2, [r2, #0]
 802d058:	3b04      	subs	r3, #4
 802d05a:	2a00      	cmp	r2, #0
 802d05c:	d1cb      	bne.n	802cff6 <quorem+0x94>
 802d05e:	3c01      	subs	r4, #1
 802d060:	e7c6      	b.n	802cff0 <quorem+0x8e>
 802d062:	6812      	ldr	r2, [r2, #0]
 802d064:	3b04      	subs	r3, #4
 802d066:	2a00      	cmp	r2, #0
 802d068:	d1ef      	bne.n	802d04a <quorem+0xe8>
 802d06a:	3c01      	subs	r4, #1
 802d06c:	e7ea      	b.n	802d044 <quorem+0xe2>
 802d06e:	2000      	movs	r0, #0
 802d070:	e7ee      	b.n	802d050 <quorem+0xee>
 802d072:	0000      	movs	r0, r0
 802d074:	0000      	movs	r0, r0
	...

0802d078 <_dtoa_r>:
 802d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d07c:	b099      	sub	sp, #100	@ 0x64
 802d07e:	ed8d 0b02 	vstr	d0, [sp, #8]
 802d082:	9109      	str	r1, [sp, #36]	@ 0x24
 802d084:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802d086:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802d088:	920e      	str	r2, [sp, #56]	@ 0x38
 802d08a:	ec55 4b10 	vmov	r4, r5, d0
 802d08e:	4683      	mov	fp, r0
 802d090:	9313      	str	r3, [sp, #76]	@ 0x4c
 802d092:	b149      	cbz	r1, 802d0a8 <_dtoa_r+0x30>
 802d094:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802d096:	604a      	str	r2, [r1, #4]
 802d098:	2301      	movs	r3, #1
 802d09a:	4093      	lsls	r3, r2
 802d09c:	608b      	str	r3, [r1, #8]
 802d09e:	f005 fa40 	bl	8032522 <_Bfree>
 802d0a2:	2300      	movs	r3, #0
 802d0a4:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802d0a8:	1e2b      	subs	r3, r5, #0
 802d0aa:	bfb9      	ittee	lt
 802d0ac:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802d0b0:	9303      	strlt	r3, [sp, #12]
 802d0b2:	2300      	movge	r3, #0
 802d0b4:	6033      	strge	r3, [r6, #0]
 802d0b6:	9f03      	ldr	r7, [sp, #12]
 802d0b8:	4b97      	ldr	r3, [pc, #604]	@ (802d318 <_dtoa_r+0x2a0>)
 802d0ba:	bfbc      	itt	lt
 802d0bc:	2201      	movlt	r2, #1
 802d0be:	6032      	strlt	r2, [r6, #0]
 802d0c0:	43bb      	bics	r3, r7
 802d0c2:	d114      	bne.n	802d0ee <_dtoa_r+0x76>
 802d0c4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802d0c6:	f242 730f 	movw	r3, #9999	@ 0x270f
 802d0ca:	6013      	str	r3, [r2, #0]
 802d0cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802d0d0:	4323      	orrs	r3, r4
 802d0d2:	f000 854c 	beq.w	802db6e <_dtoa_r+0xaf6>
 802d0d6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802d0d8:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802d330 <_dtoa_r+0x2b8>
 802d0dc:	b11b      	cbz	r3, 802d0e6 <_dtoa_r+0x6e>
 802d0de:	f10a 0303 	add.w	r3, sl, #3
 802d0e2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802d0e4:	6013      	str	r3, [r2, #0]
 802d0e6:	4650      	mov	r0, sl
 802d0e8:	b019      	add	sp, #100	@ 0x64
 802d0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d0ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 802d0f2:	2200      	movs	r2, #0
 802d0f4:	ec51 0b17 	vmov	r0, r1, d7
 802d0f8:	2300      	movs	r3, #0
 802d0fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802d0fe:	f7e3 fcfb 	bl	8010af8 <__aeabi_dcmpeq>
 802d102:	4680      	mov	r8, r0
 802d104:	b150      	cbz	r0, 802d11c <_dtoa_r+0xa4>
 802d106:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802d108:	2301      	movs	r3, #1
 802d10a:	6013      	str	r3, [r2, #0]
 802d10c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802d10e:	b113      	cbz	r3, 802d116 <_dtoa_r+0x9e>
 802d110:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802d112:	4b82      	ldr	r3, [pc, #520]	@ (802d31c <_dtoa_r+0x2a4>)
 802d114:	6013      	str	r3, [r2, #0]
 802d116:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802d334 <_dtoa_r+0x2bc>
 802d11a:	e7e4      	b.n	802d0e6 <_dtoa_r+0x6e>
 802d11c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802d120:	aa16      	add	r2, sp, #88	@ 0x58
 802d122:	a917      	add	r1, sp, #92	@ 0x5c
 802d124:	4658      	mov	r0, fp
 802d126:	f005 fd6d 	bl	8032c04 <__d2b>
 802d12a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802d12e:	4681      	mov	r9, r0
 802d130:	2e00      	cmp	r6, #0
 802d132:	d077      	beq.n	802d224 <_dtoa_r+0x1ac>
 802d134:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802d136:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802d13a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802d13e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802d142:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802d146:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802d14a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802d14e:	4619      	mov	r1, r3
 802d150:	2200      	movs	r2, #0
 802d152:	4b73      	ldr	r3, [pc, #460]	@ (802d320 <_dtoa_r+0x2a8>)
 802d154:	f7e3 f8b0 	bl	80102b8 <__aeabi_dsub>
 802d158:	a369      	add	r3, pc, #420	@ (adr r3, 802d300 <_dtoa_r+0x288>)
 802d15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d15e:	f7e3 fa63 	bl	8010628 <__aeabi_dmul>
 802d162:	a369      	add	r3, pc, #420	@ (adr r3, 802d308 <_dtoa_r+0x290>)
 802d164:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d168:	f7e3 f8a8 	bl	80102bc <__adddf3>
 802d16c:	4604      	mov	r4, r0
 802d16e:	4630      	mov	r0, r6
 802d170:	460d      	mov	r5, r1
 802d172:	f7e3 f9ef 	bl	8010554 <__aeabi_i2d>
 802d176:	a366      	add	r3, pc, #408	@ (adr r3, 802d310 <_dtoa_r+0x298>)
 802d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d17c:	f7e3 fa54 	bl	8010628 <__aeabi_dmul>
 802d180:	4602      	mov	r2, r0
 802d182:	460b      	mov	r3, r1
 802d184:	4620      	mov	r0, r4
 802d186:	4629      	mov	r1, r5
 802d188:	f7e3 f898 	bl	80102bc <__adddf3>
 802d18c:	4604      	mov	r4, r0
 802d18e:	460d      	mov	r5, r1
 802d190:	f7e3 fcfa 	bl	8010b88 <__aeabi_d2iz>
 802d194:	2200      	movs	r2, #0
 802d196:	4607      	mov	r7, r0
 802d198:	2300      	movs	r3, #0
 802d19a:	4620      	mov	r0, r4
 802d19c:	4629      	mov	r1, r5
 802d19e:	f7e3 fcb5 	bl	8010b0c <__aeabi_dcmplt>
 802d1a2:	b140      	cbz	r0, 802d1b6 <_dtoa_r+0x13e>
 802d1a4:	4638      	mov	r0, r7
 802d1a6:	f7e3 f9d5 	bl	8010554 <__aeabi_i2d>
 802d1aa:	4622      	mov	r2, r4
 802d1ac:	462b      	mov	r3, r5
 802d1ae:	f7e3 fca3 	bl	8010af8 <__aeabi_dcmpeq>
 802d1b2:	b900      	cbnz	r0, 802d1b6 <_dtoa_r+0x13e>
 802d1b4:	3f01      	subs	r7, #1
 802d1b6:	2f16      	cmp	r7, #22
 802d1b8:	d851      	bhi.n	802d25e <_dtoa_r+0x1e6>
 802d1ba:	4b5a      	ldr	r3, [pc, #360]	@ (802d324 <_dtoa_r+0x2ac>)
 802d1bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d1c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802d1c8:	f7e3 fca0 	bl	8010b0c <__aeabi_dcmplt>
 802d1cc:	2800      	cmp	r0, #0
 802d1ce:	d048      	beq.n	802d262 <_dtoa_r+0x1ea>
 802d1d0:	3f01      	subs	r7, #1
 802d1d2:	2300      	movs	r3, #0
 802d1d4:	9312      	str	r3, [sp, #72]	@ 0x48
 802d1d6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802d1d8:	1b9b      	subs	r3, r3, r6
 802d1da:	1e5a      	subs	r2, r3, #1
 802d1dc:	bf44      	itt	mi
 802d1de:	f1c3 0801 	rsbmi	r8, r3, #1
 802d1e2:	2300      	movmi	r3, #0
 802d1e4:	9208      	str	r2, [sp, #32]
 802d1e6:	bf54      	ite	pl
 802d1e8:	f04f 0800 	movpl.w	r8, #0
 802d1ec:	9308      	strmi	r3, [sp, #32]
 802d1ee:	2f00      	cmp	r7, #0
 802d1f0:	db39      	blt.n	802d266 <_dtoa_r+0x1ee>
 802d1f2:	9b08      	ldr	r3, [sp, #32]
 802d1f4:	970f      	str	r7, [sp, #60]	@ 0x3c
 802d1f6:	443b      	add	r3, r7
 802d1f8:	9308      	str	r3, [sp, #32]
 802d1fa:	2300      	movs	r3, #0
 802d1fc:	930a      	str	r3, [sp, #40]	@ 0x28
 802d1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d200:	2b09      	cmp	r3, #9
 802d202:	d865      	bhi.n	802d2d0 <_dtoa_r+0x258>
 802d204:	2b05      	cmp	r3, #5
 802d206:	bfc4      	itt	gt
 802d208:	3b04      	subgt	r3, #4
 802d20a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802d20c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d20e:	f1a3 0302 	sub.w	r3, r3, #2
 802d212:	bfcc      	ite	gt
 802d214:	2400      	movgt	r4, #0
 802d216:	2401      	movle	r4, #1
 802d218:	2b03      	cmp	r3, #3
 802d21a:	d864      	bhi.n	802d2e6 <_dtoa_r+0x26e>
 802d21c:	e8df f003 	tbb	[pc, r3]
 802d220:	5635372a 	.word	0x5635372a
 802d224:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802d228:	441e      	add	r6, r3
 802d22a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802d22e:	2b20      	cmp	r3, #32
 802d230:	bfc1      	itttt	gt
 802d232:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802d236:	409f      	lslgt	r7, r3
 802d238:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802d23c:	fa24 f303 	lsrgt.w	r3, r4, r3
 802d240:	bfd6      	itet	le
 802d242:	f1c3 0320 	rsble	r3, r3, #32
 802d246:	ea47 0003 	orrgt.w	r0, r7, r3
 802d24a:	fa04 f003 	lslle.w	r0, r4, r3
 802d24e:	f7e3 f971 	bl	8010534 <__aeabi_ui2d>
 802d252:	2201      	movs	r2, #1
 802d254:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802d258:	3e01      	subs	r6, #1
 802d25a:	9214      	str	r2, [sp, #80]	@ 0x50
 802d25c:	e777      	b.n	802d14e <_dtoa_r+0xd6>
 802d25e:	2301      	movs	r3, #1
 802d260:	e7b8      	b.n	802d1d4 <_dtoa_r+0x15c>
 802d262:	9012      	str	r0, [sp, #72]	@ 0x48
 802d264:	e7b7      	b.n	802d1d6 <_dtoa_r+0x15e>
 802d266:	427b      	negs	r3, r7
 802d268:	930a      	str	r3, [sp, #40]	@ 0x28
 802d26a:	2300      	movs	r3, #0
 802d26c:	eba8 0807 	sub.w	r8, r8, r7
 802d270:	930f      	str	r3, [sp, #60]	@ 0x3c
 802d272:	e7c4      	b.n	802d1fe <_dtoa_r+0x186>
 802d274:	2300      	movs	r3, #0
 802d276:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d278:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802d27a:	2b00      	cmp	r3, #0
 802d27c:	dc36      	bgt.n	802d2ec <_dtoa_r+0x274>
 802d27e:	2301      	movs	r3, #1
 802d280:	9300      	str	r3, [sp, #0]
 802d282:	9307      	str	r3, [sp, #28]
 802d284:	461a      	mov	r2, r3
 802d286:	920e      	str	r2, [sp, #56]	@ 0x38
 802d288:	e00b      	b.n	802d2a2 <_dtoa_r+0x22a>
 802d28a:	2301      	movs	r3, #1
 802d28c:	e7f3      	b.n	802d276 <_dtoa_r+0x1fe>
 802d28e:	2300      	movs	r3, #0
 802d290:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802d294:	18fb      	adds	r3, r7, r3
 802d296:	9300      	str	r3, [sp, #0]
 802d298:	3301      	adds	r3, #1
 802d29a:	2b01      	cmp	r3, #1
 802d29c:	9307      	str	r3, [sp, #28]
 802d29e:	bfb8      	it	lt
 802d2a0:	2301      	movlt	r3, #1
 802d2a2:	2100      	movs	r1, #0
 802d2a4:	2204      	movs	r2, #4
 802d2a6:	f102 0014 	add.w	r0, r2, #20
 802d2aa:	4298      	cmp	r0, r3
 802d2ac:	d922      	bls.n	802d2f4 <_dtoa_r+0x27c>
 802d2ae:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802d2b2:	4658      	mov	r0, fp
 802d2b4:	f005 f910 	bl	80324d8 <_Balloc>
 802d2b8:	4682      	mov	sl, r0
 802d2ba:	2800      	cmp	r0, #0
 802d2bc:	d13c      	bne.n	802d338 <_dtoa_r+0x2c0>
 802d2be:	4b1a      	ldr	r3, [pc, #104]	@ (802d328 <_dtoa_r+0x2b0>)
 802d2c0:	4602      	mov	r2, r0
 802d2c2:	f240 11af 	movw	r1, #431	@ 0x1af
 802d2c6:	4819      	ldr	r0, [pc, #100]	@ (802d32c <_dtoa_r+0x2b4>)
 802d2c8:	f7fb fe48 	bl	8028f5c <__assert_func>
 802d2cc:	2301      	movs	r3, #1
 802d2ce:	e7df      	b.n	802d290 <_dtoa_r+0x218>
 802d2d0:	2401      	movs	r4, #1
 802d2d2:	2300      	movs	r3, #0
 802d2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 802d2d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 802d2d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802d2dc:	9300      	str	r3, [sp, #0]
 802d2de:	9307      	str	r3, [sp, #28]
 802d2e0:	2200      	movs	r2, #0
 802d2e2:	2312      	movs	r3, #18
 802d2e4:	e7cf      	b.n	802d286 <_dtoa_r+0x20e>
 802d2e6:	2301      	movs	r3, #1
 802d2e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d2ea:	e7f5      	b.n	802d2d8 <_dtoa_r+0x260>
 802d2ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802d2ee:	9300      	str	r3, [sp, #0]
 802d2f0:	9307      	str	r3, [sp, #28]
 802d2f2:	e7d6      	b.n	802d2a2 <_dtoa_r+0x22a>
 802d2f4:	3101      	adds	r1, #1
 802d2f6:	0052      	lsls	r2, r2, #1
 802d2f8:	e7d5      	b.n	802d2a6 <_dtoa_r+0x22e>
 802d2fa:	bf00      	nop
 802d2fc:	f3af 8000 	nop.w
 802d300:	636f4361 	.word	0x636f4361
 802d304:	3fd287a7 	.word	0x3fd287a7
 802d308:	8b60c8b3 	.word	0x8b60c8b3
 802d30c:	3fc68a28 	.word	0x3fc68a28
 802d310:	509f79fb 	.word	0x509f79fb
 802d314:	3fd34413 	.word	0x3fd34413
 802d318:	7ff00000 	.word	0x7ff00000
 802d31c:	0803a732 	.word	0x0803a732
 802d320:	3ff80000 	.word	0x3ff80000
 802d324:	0803ad50 	.word	0x0803ad50
 802d328:	0803abca 	.word	0x0803abca
 802d32c:	0803abdb 	.word	0x0803abdb
 802d330:	0803abc6 	.word	0x0803abc6
 802d334:	0803a731 	.word	0x0803a731
 802d338:	9b07      	ldr	r3, [sp, #28]
 802d33a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802d33e:	2b0e      	cmp	r3, #14
 802d340:	f200 80a4 	bhi.w	802d48c <_dtoa_r+0x414>
 802d344:	2c00      	cmp	r4, #0
 802d346:	f000 80a1 	beq.w	802d48c <_dtoa_r+0x414>
 802d34a:	2f00      	cmp	r7, #0
 802d34c:	dd33      	ble.n	802d3b6 <_dtoa_r+0x33e>
 802d34e:	4bae      	ldr	r3, [pc, #696]	@ (802d608 <_dtoa_r+0x590>)
 802d350:	f007 020f 	and.w	r2, r7, #15
 802d354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802d358:	ed93 7b00 	vldr	d7, [r3]
 802d35c:	05f8      	lsls	r0, r7, #23
 802d35e:	ed8d 7b04 	vstr	d7, [sp, #16]
 802d362:	ea4f 1427 	mov.w	r4, r7, asr #4
 802d366:	d516      	bpl.n	802d396 <_dtoa_r+0x31e>
 802d368:	4ba8      	ldr	r3, [pc, #672]	@ (802d60c <_dtoa_r+0x594>)
 802d36a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802d36e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802d372:	f7e3 fa83 	bl	801087c <__aeabi_ddiv>
 802d376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802d37a:	f004 040f 	and.w	r4, r4, #15
 802d37e:	2603      	movs	r6, #3
 802d380:	4da2      	ldr	r5, [pc, #648]	@ (802d60c <_dtoa_r+0x594>)
 802d382:	b954      	cbnz	r4, 802d39a <_dtoa_r+0x322>
 802d384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802d388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802d38c:	f7e3 fa76 	bl	801087c <__aeabi_ddiv>
 802d390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802d394:	e028      	b.n	802d3e8 <_dtoa_r+0x370>
 802d396:	2602      	movs	r6, #2
 802d398:	e7f2      	b.n	802d380 <_dtoa_r+0x308>
 802d39a:	07e1      	lsls	r1, r4, #31
 802d39c:	d508      	bpl.n	802d3b0 <_dtoa_r+0x338>
 802d39e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802d3a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 802d3a6:	f7e3 f93f 	bl	8010628 <__aeabi_dmul>
 802d3aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802d3ae:	3601      	adds	r6, #1
 802d3b0:	1064      	asrs	r4, r4, #1
 802d3b2:	3508      	adds	r5, #8
 802d3b4:	e7e5      	b.n	802d382 <_dtoa_r+0x30a>
 802d3b6:	f000 80d2 	beq.w	802d55e <_dtoa_r+0x4e6>
 802d3ba:	427c      	negs	r4, r7
 802d3bc:	4b92      	ldr	r3, [pc, #584]	@ (802d608 <_dtoa_r+0x590>)
 802d3be:	4d93      	ldr	r5, [pc, #588]	@ (802d60c <_dtoa_r+0x594>)
 802d3c0:	f004 020f 	and.w	r2, r4, #15
 802d3c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802d3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d3cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802d3d0:	f7e3 f92a 	bl	8010628 <__aeabi_dmul>
 802d3d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802d3d8:	1124      	asrs	r4, r4, #4
 802d3da:	2300      	movs	r3, #0
 802d3dc:	2602      	movs	r6, #2
 802d3de:	2c00      	cmp	r4, #0
 802d3e0:	f040 80b2 	bne.w	802d548 <_dtoa_r+0x4d0>
 802d3e4:	2b00      	cmp	r3, #0
 802d3e6:	d1d3      	bne.n	802d390 <_dtoa_r+0x318>
 802d3e8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802d3ea:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802d3ee:	2b00      	cmp	r3, #0
 802d3f0:	f000 80b7 	beq.w	802d562 <_dtoa_r+0x4ea>
 802d3f4:	4b86      	ldr	r3, [pc, #536]	@ (802d610 <_dtoa_r+0x598>)
 802d3f6:	2200      	movs	r2, #0
 802d3f8:	4620      	mov	r0, r4
 802d3fa:	4629      	mov	r1, r5
 802d3fc:	f7e3 fb86 	bl	8010b0c <__aeabi_dcmplt>
 802d400:	2800      	cmp	r0, #0
 802d402:	f000 80ae 	beq.w	802d562 <_dtoa_r+0x4ea>
 802d406:	9b07      	ldr	r3, [sp, #28]
 802d408:	2b00      	cmp	r3, #0
 802d40a:	f000 80aa 	beq.w	802d562 <_dtoa_r+0x4ea>
 802d40e:	9b00      	ldr	r3, [sp, #0]
 802d410:	2b00      	cmp	r3, #0
 802d412:	dd37      	ble.n	802d484 <_dtoa_r+0x40c>
 802d414:	1e7b      	subs	r3, r7, #1
 802d416:	9304      	str	r3, [sp, #16]
 802d418:	4620      	mov	r0, r4
 802d41a:	4b7e      	ldr	r3, [pc, #504]	@ (802d614 <_dtoa_r+0x59c>)
 802d41c:	2200      	movs	r2, #0
 802d41e:	4629      	mov	r1, r5
 802d420:	f7e3 f902 	bl	8010628 <__aeabi_dmul>
 802d424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802d428:	9c00      	ldr	r4, [sp, #0]
 802d42a:	3601      	adds	r6, #1
 802d42c:	4630      	mov	r0, r6
 802d42e:	f7e3 f891 	bl	8010554 <__aeabi_i2d>
 802d432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802d436:	f7e3 f8f7 	bl	8010628 <__aeabi_dmul>
 802d43a:	4b77      	ldr	r3, [pc, #476]	@ (802d618 <_dtoa_r+0x5a0>)
 802d43c:	2200      	movs	r2, #0
 802d43e:	f7e2 ff3d 	bl	80102bc <__adddf3>
 802d442:	4605      	mov	r5, r0
 802d444:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802d448:	2c00      	cmp	r4, #0
 802d44a:	f040 808d 	bne.w	802d568 <_dtoa_r+0x4f0>
 802d44e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802d452:	4b72      	ldr	r3, [pc, #456]	@ (802d61c <_dtoa_r+0x5a4>)
 802d454:	2200      	movs	r2, #0
 802d456:	f7e2 ff2f 	bl	80102b8 <__aeabi_dsub>
 802d45a:	4602      	mov	r2, r0
 802d45c:	460b      	mov	r3, r1
 802d45e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802d462:	462a      	mov	r2, r5
 802d464:	4633      	mov	r3, r6
 802d466:	f7e3 fb6f 	bl	8010b48 <__aeabi_dcmpgt>
 802d46a:	2800      	cmp	r0, #0
 802d46c:	f040 828c 	bne.w	802d988 <_dtoa_r+0x910>
 802d470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802d474:	462a      	mov	r2, r5
 802d476:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802d47a:	f7e3 fb47 	bl	8010b0c <__aeabi_dcmplt>
 802d47e:	2800      	cmp	r0, #0
 802d480:	f040 8129 	bne.w	802d6d6 <_dtoa_r+0x65e>
 802d484:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802d488:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802d48c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802d48e:	2b00      	cmp	r3, #0
 802d490:	f2c0 815b 	blt.w	802d74a <_dtoa_r+0x6d2>
 802d494:	2f0e      	cmp	r7, #14
 802d496:	f300 8158 	bgt.w	802d74a <_dtoa_r+0x6d2>
 802d49a:	4b5b      	ldr	r3, [pc, #364]	@ (802d608 <_dtoa_r+0x590>)
 802d49c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802d4a0:	ed93 7b00 	vldr	d7, [r3]
 802d4a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802d4a6:	2b00      	cmp	r3, #0
 802d4a8:	ed8d 7b00 	vstr	d7, [sp]
 802d4ac:	da03      	bge.n	802d4b6 <_dtoa_r+0x43e>
 802d4ae:	9b07      	ldr	r3, [sp, #28]
 802d4b0:	2b00      	cmp	r3, #0
 802d4b2:	f340 8102 	ble.w	802d6ba <_dtoa_r+0x642>
 802d4b6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802d4ba:	4656      	mov	r6, sl
 802d4bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 802d4c0:	4620      	mov	r0, r4
 802d4c2:	4629      	mov	r1, r5
 802d4c4:	f7e3 f9da 	bl	801087c <__aeabi_ddiv>
 802d4c8:	f7e3 fb5e 	bl	8010b88 <__aeabi_d2iz>
 802d4cc:	4680      	mov	r8, r0
 802d4ce:	f7e3 f841 	bl	8010554 <__aeabi_i2d>
 802d4d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 802d4d6:	f7e3 f8a7 	bl	8010628 <__aeabi_dmul>
 802d4da:	4602      	mov	r2, r0
 802d4dc:	460b      	mov	r3, r1
 802d4de:	4620      	mov	r0, r4
 802d4e0:	4629      	mov	r1, r5
 802d4e2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802d4e6:	f7e2 fee7 	bl	80102b8 <__aeabi_dsub>
 802d4ea:	f806 4b01 	strb.w	r4, [r6], #1
 802d4ee:	9d07      	ldr	r5, [sp, #28]
 802d4f0:	eba6 040a 	sub.w	r4, r6, sl
 802d4f4:	42a5      	cmp	r5, r4
 802d4f6:	4602      	mov	r2, r0
 802d4f8:	460b      	mov	r3, r1
 802d4fa:	f040 8118 	bne.w	802d72e <_dtoa_r+0x6b6>
 802d4fe:	f7e2 fedd 	bl	80102bc <__adddf3>
 802d502:	e9dd 2300 	ldrd	r2, r3, [sp]
 802d506:	4604      	mov	r4, r0
 802d508:	460d      	mov	r5, r1
 802d50a:	f7e3 fb1d 	bl	8010b48 <__aeabi_dcmpgt>
 802d50e:	2800      	cmp	r0, #0
 802d510:	f040 80fa 	bne.w	802d708 <_dtoa_r+0x690>
 802d514:	e9dd 2300 	ldrd	r2, r3, [sp]
 802d518:	4620      	mov	r0, r4
 802d51a:	4629      	mov	r1, r5
 802d51c:	f7e3 faec 	bl	8010af8 <__aeabi_dcmpeq>
 802d520:	b118      	cbz	r0, 802d52a <_dtoa_r+0x4b2>
 802d522:	f018 0f01 	tst.w	r8, #1
 802d526:	f040 80ef 	bne.w	802d708 <_dtoa_r+0x690>
 802d52a:	4649      	mov	r1, r9
 802d52c:	4658      	mov	r0, fp
 802d52e:	f004 fff8 	bl	8032522 <_Bfree>
 802d532:	2300      	movs	r3, #0
 802d534:	7033      	strb	r3, [r6, #0]
 802d536:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802d538:	3701      	adds	r7, #1
 802d53a:	601f      	str	r7, [r3, #0]
 802d53c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802d53e:	2b00      	cmp	r3, #0
 802d540:	f43f add1 	beq.w	802d0e6 <_dtoa_r+0x6e>
 802d544:	601e      	str	r6, [r3, #0]
 802d546:	e5ce      	b.n	802d0e6 <_dtoa_r+0x6e>
 802d548:	07e2      	lsls	r2, r4, #31
 802d54a:	d505      	bpl.n	802d558 <_dtoa_r+0x4e0>
 802d54c:	e9d5 2300 	ldrd	r2, r3, [r5]
 802d550:	f7e3 f86a 	bl	8010628 <__aeabi_dmul>
 802d554:	3601      	adds	r6, #1
 802d556:	2301      	movs	r3, #1
 802d558:	1064      	asrs	r4, r4, #1
 802d55a:	3508      	adds	r5, #8
 802d55c:	e73f      	b.n	802d3de <_dtoa_r+0x366>
 802d55e:	2602      	movs	r6, #2
 802d560:	e742      	b.n	802d3e8 <_dtoa_r+0x370>
 802d562:	9c07      	ldr	r4, [sp, #28]
 802d564:	9704      	str	r7, [sp, #16]
 802d566:	e761      	b.n	802d42c <_dtoa_r+0x3b4>
 802d568:	4b27      	ldr	r3, [pc, #156]	@ (802d608 <_dtoa_r+0x590>)
 802d56a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802d56c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802d570:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802d574:	4454      	add	r4, sl
 802d576:	2900      	cmp	r1, #0
 802d578:	d054      	beq.n	802d624 <_dtoa_r+0x5ac>
 802d57a:	4929      	ldr	r1, [pc, #164]	@ (802d620 <_dtoa_r+0x5a8>)
 802d57c:	2000      	movs	r0, #0
 802d57e:	f7e3 f97d 	bl	801087c <__aeabi_ddiv>
 802d582:	4633      	mov	r3, r6
 802d584:	462a      	mov	r2, r5
 802d586:	f7e2 fe97 	bl	80102b8 <__aeabi_dsub>
 802d58a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802d58e:	4656      	mov	r6, sl
 802d590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802d594:	f7e3 faf8 	bl	8010b88 <__aeabi_d2iz>
 802d598:	4605      	mov	r5, r0
 802d59a:	f7e2 ffdb 	bl	8010554 <__aeabi_i2d>
 802d59e:	4602      	mov	r2, r0
 802d5a0:	460b      	mov	r3, r1
 802d5a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802d5a6:	f7e2 fe87 	bl	80102b8 <__aeabi_dsub>
 802d5aa:	3530      	adds	r5, #48	@ 0x30
 802d5ac:	4602      	mov	r2, r0
 802d5ae:	460b      	mov	r3, r1
 802d5b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802d5b4:	f806 5b01 	strb.w	r5, [r6], #1
 802d5b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802d5bc:	f7e3 faa6 	bl	8010b0c <__aeabi_dcmplt>
 802d5c0:	2800      	cmp	r0, #0
 802d5c2:	d172      	bne.n	802d6aa <_dtoa_r+0x632>
 802d5c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802d5c8:	4911      	ldr	r1, [pc, #68]	@ (802d610 <_dtoa_r+0x598>)
 802d5ca:	2000      	movs	r0, #0
 802d5cc:	f7e2 fe74 	bl	80102b8 <__aeabi_dsub>
 802d5d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802d5d4:	f7e3 fa9a 	bl	8010b0c <__aeabi_dcmplt>
 802d5d8:	2800      	cmp	r0, #0
 802d5da:	f040 8096 	bne.w	802d70a <_dtoa_r+0x692>
 802d5de:	42a6      	cmp	r6, r4
 802d5e0:	f43f af50 	beq.w	802d484 <_dtoa_r+0x40c>
 802d5e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802d5e8:	4b0a      	ldr	r3, [pc, #40]	@ (802d614 <_dtoa_r+0x59c>)
 802d5ea:	2200      	movs	r2, #0
 802d5ec:	f7e3 f81c 	bl	8010628 <__aeabi_dmul>
 802d5f0:	4b08      	ldr	r3, [pc, #32]	@ (802d614 <_dtoa_r+0x59c>)
 802d5f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802d5f6:	2200      	movs	r2, #0
 802d5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802d5fc:	f7e3 f814 	bl	8010628 <__aeabi_dmul>
 802d600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802d604:	e7c4      	b.n	802d590 <_dtoa_r+0x518>
 802d606:	bf00      	nop
 802d608:	0803ad50 	.word	0x0803ad50
 802d60c:	0803ad28 	.word	0x0803ad28
 802d610:	3ff00000 	.word	0x3ff00000
 802d614:	40240000 	.word	0x40240000
 802d618:	401c0000 	.word	0x401c0000
 802d61c:	40140000 	.word	0x40140000
 802d620:	3fe00000 	.word	0x3fe00000
 802d624:	4631      	mov	r1, r6
 802d626:	4628      	mov	r0, r5
 802d628:	f7e2 fffe 	bl	8010628 <__aeabi_dmul>
 802d62c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802d630:	9415      	str	r4, [sp, #84]	@ 0x54
 802d632:	4656      	mov	r6, sl
 802d634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802d638:	f7e3 faa6 	bl	8010b88 <__aeabi_d2iz>
 802d63c:	4605      	mov	r5, r0
 802d63e:	f7e2 ff89 	bl	8010554 <__aeabi_i2d>
 802d642:	4602      	mov	r2, r0
 802d644:	460b      	mov	r3, r1
 802d646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802d64a:	f7e2 fe35 	bl	80102b8 <__aeabi_dsub>
 802d64e:	3530      	adds	r5, #48	@ 0x30
 802d650:	f806 5b01 	strb.w	r5, [r6], #1
 802d654:	4602      	mov	r2, r0
 802d656:	460b      	mov	r3, r1
 802d658:	42a6      	cmp	r6, r4
 802d65a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802d65e:	f04f 0200 	mov.w	r2, #0
 802d662:	d124      	bne.n	802d6ae <_dtoa_r+0x636>
 802d664:	4bac      	ldr	r3, [pc, #688]	@ (802d918 <_dtoa_r+0x8a0>)
 802d666:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802d66a:	f7e2 fe27 	bl	80102bc <__adddf3>
 802d66e:	4602      	mov	r2, r0
 802d670:	460b      	mov	r3, r1
 802d672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802d676:	f7e3 fa67 	bl	8010b48 <__aeabi_dcmpgt>
 802d67a:	2800      	cmp	r0, #0
 802d67c:	d145      	bne.n	802d70a <_dtoa_r+0x692>
 802d67e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802d682:	49a5      	ldr	r1, [pc, #660]	@ (802d918 <_dtoa_r+0x8a0>)
 802d684:	2000      	movs	r0, #0
 802d686:	f7e2 fe17 	bl	80102b8 <__aeabi_dsub>
 802d68a:	4602      	mov	r2, r0
 802d68c:	460b      	mov	r3, r1
 802d68e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802d692:	f7e3 fa3b 	bl	8010b0c <__aeabi_dcmplt>
 802d696:	2800      	cmp	r0, #0
 802d698:	f43f aef4 	beq.w	802d484 <_dtoa_r+0x40c>
 802d69c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802d69e:	1e73      	subs	r3, r6, #1
 802d6a0:	9315      	str	r3, [sp, #84]	@ 0x54
 802d6a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802d6a6:	2b30      	cmp	r3, #48	@ 0x30
 802d6a8:	d0f8      	beq.n	802d69c <_dtoa_r+0x624>
 802d6aa:	9f04      	ldr	r7, [sp, #16]
 802d6ac:	e73d      	b.n	802d52a <_dtoa_r+0x4b2>
 802d6ae:	4b9b      	ldr	r3, [pc, #620]	@ (802d91c <_dtoa_r+0x8a4>)
 802d6b0:	f7e2 ffba 	bl	8010628 <__aeabi_dmul>
 802d6b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802d6b8:	e7bc      	b.n	802d634 <_dtoa_r+0x5bc>
 802d6ba:	d10c      	bne.n	802d6d6 <_dtoa_r+0x65e>
 802d6bc:	4b98      	ldr	r3, [pc, #608]	@ (802d920 <_dtoa_r+0x8a8>)
 802d6be:	2200      	movs	r2, #0
 802d6c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802d6c4:	f7e2 ffb0 	bl	8010628 <__aeabi_dmul>
 802d6c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802d6cc:	f7e3 fa32 	bl	8010b34 <__aeabi_dcmpge>
 802d6d0:	2800      	cmp	r0, #0
 802d6d2:	f000 8157 	beq.w	802d984 <_dtoa_r+0x90c>
 802d6d6:	2400      	movs	r4, #0
 802d6d8:	4625      	mov	r5, r4
 802d6da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802d6dc:	43db      	mvns	r3, r3
 802d6de:	9304      	str	r3, [sp, #16]
 802d6e0:	4656      	mov	r6, sl
 802d6e2:	2700      	movs	r7, #0
 802d6e4:	4621      	mov	r1, r4
 802d6e6:	4658      	mov	r0, fp
 802d6e8:	f004 ff1b 	bl	8032522 <_Bfree>
 802d6ec:	2d00      	cmp	r5, #0
 802d6ee:	d0dc      	beq.n	802d6aa <_dtoa_r+0x632>
 802d6f0:	b12f      	cbz	r7, 802d6fe <_dtoa_r+0x686>
 802d6f2:	42af      	cmp	r7, r5
 802d6f4:	d003      	beq.n	802d6fe <_dtoa_r+0x686>
 802d6f6:	4639      	mov	r1, r7
 802d6f8:	4658      	mov	r0, fp
 802d6fa:	f004 ff12 	bl	8032522 <_Bfree>
 802d6fe:	4629      	mov	r1, r5
 802d700:	4658      	mov	r0, fp
 802d702:	f004 ff0e 	bl	8032522 <_Bfree>
 802d706:	e7d0      	b.n	802d6aa <_dtoa_r+0x632>
 802d708:	9704      	str	r7, [sp, #16]
 802d70a:	4633      	mov	r3, r6
 802d70c:	461e      	mov	r6, r3
 802d70e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802d712:	2a39      	cmp	r2, #57	@ 0x39
 802d714:	d107      	bne.n	802d726 <_dtoa_r+0x6ae>
 802d716:	459a      	cmp	sl, r3
 802d718:	d1f8      	bne.n	802d70c <_dtoa_r+0x694>
 802d71a:	9a04      	ldr	r2, [sp, #16]
 802d71c:	3201      	adds	r2, #1
 802d71e:	9204      	str	r2, [sp, #16]
 802d720:	2230      	movs	r2, #48	@ 0x30
 802d722:	f88a 2000 	strb.w	r2, [sl]
 802d726:	781a      	ldrb	r2, [r3, #0]
 802d728:	3201      	adds	r2, #1
 802d72a:	701a      	strb	r2, [r3, #0]
 802d72c:	e7bd      	b.n	802d6aa <_dtoa_r+0x632>
 802d72e:	4b7b      	ldr	r3, [pc, #492]	@ (802d91c <_dtoa_r+0x8a4>)
 802d730:	2200      	movs	r2, #0
 802d732:	f7e2 ff79 	bl	8010628 <__aeabi_dmul>
 802d736:	2200      	movs	r2, #0
 802d738:	2300      	movs	r3, #0
 802d73a:	4604      	mov	r4, r0
 802d73c:	460d      	mov	r5, r1
 802d73e:	f7e3 f9db 	bl	8010af8 <__aeabi_dcmpeq>
 802d742:	2800      	cmp	r0, #0
 802d744:	f43f aeba 	beq.w	802d4bc <_dtoa_r+0x444>
 802d748:	e6ef      	b.n	802d52a <_dtoa_r+0x4b2>
 802d74a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802d74c:	2a00      	cmp	r2, #0
 802d74e:	f000 80db 	beq.w	802d908 <_dtoa_r+0x890>
 802d752:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d754:	2a01      	cmp	r2, #1
 802d756:	f300 80bf 	bgt.w	802d8d8 <_dtoa_r+0x860>
 802d75a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802d75c:	2a00      	cmp	r2, #0
 802d75e:	f000 80b7 	beq.w	802d8d0 <_dtoa_r+0x858>
 802d762:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802d766:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802d768:	4646      	mov	r6, r8
 802d76a:	9a08      	ldr	r2, [sp, #32]
 802d76c:	2101      	movs	r1, #1
 802d76e:	441a      	add	r2, r3
 802d770:	4658      	mov	r0, fp
 802d772:	4498      	add	r8, r3
 802d774:	9208      	str	r2, [sp, #32]
 802d776:	f004 ffb9 	bl	80326ec <__i2b>
 802d77a:	4605      	mov	r5, r0
 802d77c:	b15e      	cbz	r6, 802d796 <_dtoa_r+0x71e>
 802d77e:	9b08      	ldr	r3, [sp, #32]
 802d780:	2b00      	cmp	r3, #0
 802d782:	dd08      	ble.n	802d796 <_dtoa_r+0x71e>
 802d784:	42b3      	cmp	r3, r6
 802d786:	9a08      	ldr	r2, [sp, #32]
 802d788:	bfa8      	it	ge
 802d78a:	4633      	movge	r3, r6
 802d78c:	eba8 0803 	sub.w	r8, r8, r3
 802d790:	1af6      	subs	r6, r6, r3
 802d792:	1ad3      	subs	r3, r2, r3
 802d794:	9308      	str	r3, [sp, #32]
 802d796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d798:	b1f3      	cbz	r3, 802d7d8 <_dtoa_r+0x760>
 802d79a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d79c:	2b00      	cmp	r3, #0
 802d79e:	f000 80b7 	beq.w	802d910 <_dtoa_r+0x898>
 802d7a2:	b18c      	cbz	r4, 802d7c8 <_dtoa_r+0x750>
 802d7a4:	4629      	mov	r1, r5
 802d7a6:	4622      	mov	r2, r4
 802d7a8:	4658      	mov	r0, fp
 802d7aa:	f005 f85f 	bl	803286c <__pow5mult>
 802d7ae:	464a      	mov	r2, r9
 802d7b0:	4601      	mov	r1, r0
 802d7b2:	4605      	mov	r5, r0
 802d7b4:	4658      	mov	r0, fp
 802d7b6:	f004 ffaf 	bl	8032718 <__multiply>
 802d7ba:	4649      	mov	r1, r9
 802d7bc:	9004      	str	r0, [sp, #16]
 802d7be:	4658      	mov	r0, fp
 802d7c0:	f004 feaf 	bl	8032522 <_Bfree>
 802d7c4:	9b04      	ldr	r3, [sp, #16]
 802d7c6:	4699      	mov	r9, r3
 802d7c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d7ca:	1b1a      	subs	r2, r3, r4
 802d7cc:	d004      	beq.n	802d7d8 <_dtoa_r+0x760>
 802d7ce:	4649      	mov	r1, r9
 802d7d0:	4658      	mov	r0, fp
 802d7d2:	f005 f84b 	bl	803286c <__pow5mult>
 802d7d6:	4681      	mov	r9, r0
 802d7d8:	2101      	movs	r1, #1
 802d7da:	4658      	mov	r0, fp
 802d7dc:	f004 ff86 	bl	80326ec <__i2b>
 802d7e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802d7e2:	4604      	mov	r4, r0
 802d7e4:	2b00      	cmp	r3, #0
 802d7e6:	f000 81cc 	beq.w	802db82 <_dtoa_r+0xb0a>
 802d7ea:	461a      	mov	r2, r3
 802d7ec:	4601      	mov	r1, r0
 802d7ee:	4658      	mov	r0, fp
 802d7f0:	f005 f83c 	bl	803286c <__pow5mult>
 802d7f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d7f6:	2b01      	cmp	r3, #1
 802d7f8:	4604      	mov	r4, r0
 802d7fa:	f300 8095 	bgt.w	802d928 <_dtoa_r+0x8b0>
 802d7fe:	9b02      	ldr	r3, [sp, #8]
 802d800:	2b00      	cmp	r3, #0
 802d802:	f040 8087 	bne.w	802d914 <_dtoa_r+0x89c>
 802d806:	9b03      	ldr	r3, [sp, #12]
 802d808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802d80c:	2b00      	cmp	r3, #0
 802d80e:	f040 8089 	bne.w	802d924 <_dtoa_r+0x8ac>
 802d812:	9b03      	ldr	r3, [sp, #12]
 802d814:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802d818:	0d1b      	lsrs	r3, r3, #20
 802d81a:	051b      	lsls	r3, r3, #20
 802d81c:	b12b      	cbz	r3, 802d82a <_dtoa_r+0x7b2>
 802d81e:	9b08      	ldr	r3, [sp, #32]
 802d820:	3301      	adds	r3, #1
 802d822:	9308      	str	r3, [sp, #32]
 802d824:	f108 0801 	add.w	r8, r8, #1
 802d828:	2301      	movs	r3, #1
 802d82a:	930a      	str	r3, [sp, #40]	@ 0x28
 802d82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802d82e:	2b00      	cmp	r3, #0
 802d830:	f000 81ad 	beq.w	802db8e <_dtoa_r+0xb16>
 802d834:	6923      	ldr	r3, [r4, #16]
 802d836:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802d83a:	6918      	ldr	r0, [r3, #16]
 802d83c:	f004 ff0a 	bl	8032654 <__hi0bits>
 802d840:	f1c0 0020 	rsb	r0, r0, #32
 802d844:	9b08      	ldr	r3, [sp, #32]
 802d846:	4418      	add	r0, r3
 802d848:	f010 001f 	ands.w	r0, r0, #31
 802d84c:	d077      	beq.n	802d93e <_dtoa_r+0x8c6>
 802d84e:	f1c0 0320 	rsb	r3, r0, #32
 802d852:	2b04      	cmp	r3, #4
 802d854:	dd6b      	ble.n	802d92e <_dtoa_r+0x8b6>
 802d856:	9b08      	ldr	r3, [sp, #32]
 802d858:	f1c0 001c 	rsb	r0, r0, #28
 802d85c:	4403      	add	r3, r0
 802d85e:	4480      	add	r8, r0
 802d860:	4406      	add	r6, r0
 802d862:	9308      	str	r3, [sp, #32]
 802d864:	f1b8 0f00 	cmp.w	r8, #0
 802d868:	dd05      	ble.n	802d876 <_dtoa_r+0x7fe>
 802d86a:	4649      	mov	r1, r9
 802d86c:	4642      	mov	r2, r8
 802d86e:	4658      	mov	r0, fp
 802d870:	f005 f83c 	bl	80328ec <__lshift>
 802d874:	4681      	mov	r9, r0
 802d876:	9b08      	ldr	r3, [sp, #32]
 802d878:	2b00      	cmp	r3, #0
 802d87a:	dd05      	ble.n	802d888 <_dtoa_r+0x810>
 802d87c:	4621      	mov	r1, r4
 802d87e:	461a      	mov	r2, r3
 802d880:	4658      	mov	r0, fp
 802d882:	f005 f833 	bl	80328ec <__lshift>
 802d886:	4604      	mov	r4, r0
 802d888:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802d88a:	2b00      	cmp	r3, #0
 802d88c:	d059      	beq.n	802d942 <_dtoa_r+0x8ca>
 802d88e:	4621      	mov	r1, r4
 802d890:	4648      	mov	r0, r9
 802d892:	f005 f897 	bl	80329c4 <__mcmp>
 802d896:	2800      	cmp	r0, #0
 802d898:	da53      	bge.n	802d942 <_dtoa_r+0x8ca>
 802d89a:	1e7b      	subs	r3, r7, #1
 802d89c:	9304      	str	r3, [sp, #16]
 802d89e:	4649      	mov	r1, r9
 802d8a0:	2300      	movs	r3, #0
 802d8a2:	220a      	movs	r2, #10
 802d8a4:	4658      	mov	r0, fp
 802d8a6:	f004 fe45 	bl	8032534 <__multadd>
 802d8aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d8ac:	4681      	mov	r9, r0
 802d8ae:	2b00      	cmp	r3, #0
 802d8b0:	f000 816f 	beq.w	802db92 <_dtoa_r+0xb1a>
 802d8b4:	2300      	movs	r3, #0
 802d8b6:	4629      	mov	r1, r5
 802d8b8:	220a      	movs	r2, #10
 802d8ba:	4658      	mov	r0, fp
 802d8bc:	f004 fe3a 	bl	8032534 <__multadd>
 802d8c0:	9b00      	ldr	r3, [sp, #0]
 802d8c2:	2b00      	cmp	r3, #0
 802d8c4:	4605      	mov	r5, r0
 802d8c6:	dc67      	bgt.n	802d998 <_dtoa_r+0x920>
 802d8c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d8ca:	2b02      	cmp	r3, #2
 802d8cc:	dc41      	bgt.n	802d952 <_dtoa_r+0x8da>
 802d8ce:	e063      	b.n	802d998 <_dtoa_r+0x920>
 802d8d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802d8d2:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802d8d6:	e746      	b.n	802d766 <_dtoa_r+0x6ee>
 802d8d8:	9b07      	ldr	r3, [sp, #28]
 802d8da:	1e5c      	subs	r4, r3, #1
 802d8dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d8de:	42a3      	cmp	r3, r4
 802d8e0:	bfbf      	itttt	lt
 802d8e2:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802d8e4:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802d8e6:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802d8e8:	1ae3      	sublt	r3, r4, r3
 802d8ea:	bfb4      	ite	lt
 802d8ec:	18d2      	addlt	r2, r2, r3
 802d8ee:	1b1c      	subge	r4, r3, r4
 802d8f0:	9b07      	ldr	r3, [sp, #28]
 802d8f2:	bfbc      	itt	lt
 802d8f4:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802d8f6:	2400      	movlt	r4, #0
 802d8f8:	2b00      	cmp	r3, #0
 802d8fa:	bfb5      	itete	lt
 802d8fc:	eba8 0603 	sublt.w	r6, r8, r3
 802d900:	9b07      	ldrge	r3, [sp, #28]
 802d902:	2300      	movlt	r3, #0
 802d904:	4646      	movge	r6, r8
 802d906:	e730      	b.n	802d76a <_dtoa_r+0x6f2>
 802d908:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802d90a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802d90c:	4646      	mov	r6, r8
 802d90e:	e735      	b.n	802d77c <_dtoa_r+0x704>
 802d910:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802d912:	e75c      	b.n	802d7ce <_dtoa_r+0x756>
 802d914:	2300      	movs	r3, #0
 802d916:	e788      	b.n	802d82a <_dtoa_r+0x7b2>
 802d918:	3fe00000 	.word	0x3fe00000
 802d91c:	40240000 	.word	0x40240000
 802d920:	40140000 	.word	0x40140000
 802d924:	9b02      	ldr	r3, [sp, #8]
 802d926:	e780      	b.n	802d82a <_dtoa_r+0x7b2>
 802d928:	2300      	movs	r3, #0
 802d92a:	930a      	str	r3, [sp, #40]	@ 0x28
 802d92c:	e782      	b.n	802d834 <_dtoa_r+0x7bc>
 802d92e:	d099      	beq.n	802d864 <_dtoa_r+0x7ec>
 802d930:	9a08      	ldr	r2, [sp, #32]
 802d932:	331c      	adds	r3, #28
 802d934:	441a      	add	r2, r3
 802d936:	4498      	add	r8, r3
 802d938:	441e      	add	r6, r3
 802d93a:	9208      	str	r2, [sp, #32]
 802d93c:	e792      	b.n	802d864 <_dtoa_r+0x7ec>
 802d93e:	4603      	mov	r3, r0
 802d940:	e7f6      	b.n	802d930 <_dtoa_r+0x8b8>
 802d942:	9b07      	ldr	r3, [sp, #28]
 802d944:	9704      	str	r7, [sp, #16]
 802d946:	2b00      	cmp	r3, #0
 802d948:	dc20      	bgt.n	802d98c <_dtoa_r+0x914>
 802d94a:	9300      	str	r3, [sp, #0]
 802d94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d94e:	2b02      	cmp	r3, #2
 802d950:	dd1e      	ble.n	802d990 <_dtoa_r+0x918>
 802d952:	9b00      	ldr	r3, [sp, #0]
 802d954:	2b00      	cmp	r3, #0
 802d956:	f47f aec0 	bne.w	802d6da <_dtoa_r+0x662>
 802d95a:	4621      	mov	r1, r4
 802d95c:	2205      	movs	r2, #5
 802d95e:	4658      	mov	r0, fp
 802d960:	f004 fde8 	bl	8032534 <__multadd>
 802d964:	4601      	mov	r1, r0
 802d966:	4604      	mov	r4, r0
 802d968:	4648      	mov	r0, r9
 802d96a:	f005 f82b 	bl	80329c4 <__mcmp>
 802d96e:	2800      	cmp	r0, #0
 802d970:	f77f aeb3 	ble.w	802d6da <_dtoa_r+0x662>
 802d974:	4656      	mov	r6, sl
 802d976:	2331      	movs	r3, #49	@ 0x31
 802d978:	f806 3b01 	strb.w	r3, [r6], #1
 802d97c:	9b04      	ldr	r3, [sp, #16]
 802d97e:	3301      	adds	r3, #1
 802d980:	9304      	str	r3, [sp, #16]
 802d982:	e6ae      	b.n	802d6e2 <_dtoa_r+0x66a>
 802d984:	9c07      	ldr	r4, [sp, #28]
 802d986:	9704      	str	r7, [sp, #16]
 802d988:	4625      	mov	r5, r4
 802d98a:	e7f3      	b.n	802d974 <_dtoa_r+0x8fc>
 802d98c:	9b07      	ldr	r3, [sp, #28]
 802d98e:	9300      	str	r3, [sp, #0]
 802d990:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d992:	2b00      	cmp	r3, #0
 802d994:	f000 8101 	beq.w	802db9a <_dtoa_r+0xb22>
 802d998:	2e00      	cmp	r6, #0
 802d99a:	dd05      	ble.n	802d9a8 <_dtoa_r+0x930>
 802d99c:	4629      	mov	r1, r5
 802d99e:	4632      	mov	r2, r6
 802d9a0:	4658      	mov	r0, fp
 802d9a2:	f004 ffa3 	bl	80328ec <__lshift>
 802d9a6:	4605      	mov	r5, r0
 802d9a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d9aa:	2b00      	cmp	r3, #0
 802d9ac:	d059      	beq.n	802da62 <_dtoa_r+0x9ea>
 802d9ae:	6869      	ldr	r1, [r5, #4]
 802d9b0:	4658      	mov	r0, fp
 802d9b2:	f004 fd91 	bl	80324d8 <_Balloc>
 802d9b6:	4606      	mov	r6, r0
 802d9b8:	b920      	cbnz	r0, 802d9c4 <_dtoa_r+0x94c>
 802d9ba:	4b83      	ldr	r3, [pc, #524]	@ (802dbc8 <_dtoa_r+0xb50>)
 802d9bc:	4602      	mov	r2, r0
 802d9be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802d9c2:	e480      	b.n	802d2c6 <_dtoa_r+0x24e>
 802d9c4:	692a      	ldr	r2, [r5, #16]
 802d9c6:	3202      	adds	r2, #2
 802d9c8:	0092      	lsls	r2, r2, #2
 802d9ca:	f105 010c 	add.w	r1, r5, #12
 802d9ce:	300c      	adds	r0, #12
 802d9d0:	f7ff fa52 	bl	802ce78 <memcpy>
 802d9d4:	2201      	movs	r2, #1
 802d9d6:	4631      	mov	r1, r6
 802d9d8:	4658      	mov	r0, fp
 802d9da:	f004 ff87 	bl	80328ec <__lshift>
 802d9de:	f10a 0301 	add.w	r3, sl, #1
 802d9e2:	9307      	str	r3, [sp, #28]
 802d9e4:	9b00      	ldr	r3, [sp, #0]
 802d9e6:	4453      	add	r3, sl
 802d9e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d9ea:	9b02      	ldr	r3, [sp, #8]
 802d9ec:	f003 0301 	and.w	r3, r3, #1
 802d9f0:	462f      	mov	r7, r5
 802d9f2:	930a      	str	r3, [sp, #40]	@ 0x28
 802d9f4:	4605      	mov	r5, r0
 802d9f6:	9b07      	ldr	r3, [sp, #28]
 802d9f8:	4621      	mov	r1, r4
 802d9fa:	3b01      	subs	r3, #1
 802d9fc:	4648      	mov	r0, r9
 802d9fe:	9300      	str	r3, [sp, #0]
 802da00:	f7ff faaf 	bl	802cf62 <quorem>
 802da04:	4639      	mov	r1, r7
 802da06:	9002      	str	r0, [sp, #8]
 802da08:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802da0c:	4648      	mov	r0, r9
 802da0e:	f004 ffd9 	bl	80329c4 <__mcmp>
 802da12:	462a      	mov	r2, r5
 802da14:	9008      	str	r0, [sp, #32]
 802da16:	4621      	mov	r1, r4
 802da18:	4658      	mov	r0, fp
 802da1a:	f004 ffef 	bl	80329fc <__mdiff>
 802da1e:	68c2      	ldr	r2, [r0, #12]
 802da20:	4606      	mov	r6, r0
 802da22:	bb02      	cbnz	r2, 802da66 <_dtoa_r+0x9ee>
 802da24:	4601      	mov	r1, r0
 802da26:	4648      	mov	r0, r9
 802da28:	f004 ffcc 	bl	80329c4 <__mcmp>
 802da2c:	4602      	mov	r2, r0
 802da2e:	4631      	mov	r1, r6
 802da30:	4658      	mov	r0, fp
 802da32:	920e      	str	r2, [sp, #56]	@ 0x38
 802da34:	f004 fd75 	bl	8032522 <_Bfree>
 802da38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802da3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802da3c:	9e07      	ldr	r6, [sp, #28]
 802da3e:	ea43 0102 	orr.w	r1, r3, r2
 802da42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802da44:	4319      	orrs	r1, r3
 802da46:	d110      	bne.n	802da6a <_dtoa_r+0x9f2>
 802da48:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802da4c:	d029      	beq.n	802daa2 <_dtoa_r+0xa2a>
 802da4e:	9b08      	ldr	r3, [sp, #32]
 802da50:	2b00      	cmp	r3, #0
 802da52:	dd02      	ble.n	802da5a <_dtoa_r+0x9e2>
 802da54:	9b02      	ldr	r3, [sp, #8]
 802da56:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802da5a:	9b00      	ldr	r3, [sp, #0]
 802da5c:	f883 8000 	strb.w	r8, [r3]
 802da60:	e640      	b.n	802d6e4 <_dtoa_r+0x66c>
 802da62:	4628      	mov	r0, r5
 802da64:	e7bb      	b.n	802d9de <_dtoa_r+0x966>
 802da66:	2201      	movs	r2, #1
 802da68:	e7e1      	b.n	802da2e <_dtoa_r+0x9b6>
 802da6a:	9b08      	ldr	r3, [sp, #32]
 802da6c:	2b00      	cmp	r3, #0
 802da6e:	db04      	blt.n	802da7a <_dtoa_r+0xa02>
 802da70:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802da72:	430b      	orrs	r3, r1
 802da74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802da76:	430b      	orrs	r3, r1
 802da78:	d120      	bne.n	802dabc <_dtoa_r+0xa44>
 802da7a:	2a00      	cmp	r2, #0
 802da7c:	dded      	ble.n	802da5a <_dtoa_r+0x9e2>
 802da7e:	4649      	mov	r1, r9
 802da80:	2201      	movs	r2, #1
 802da82:	4658      	mov	r0, fp
 802da84:	f004 ff32 	bl	80328ec <__lshift>
 802da88:	4621      	mov	r1, r4
 802da8a:	4681      	mov	r9, r0
 802da8c:	f004 ff9a 	bl	80329c4 <__mcmp>
 802da90:	2800      	cmp	r0, #0
 802da92:	dc03      	bgt.n	802da9c <_dtoa_r+0xa24>
 802da94:	d1e1      	bne.n	802da5a <_dtoa_r+0x9e2>
 802da96:	f018 0f01 	tst.w	r8, #1
 802da9a:	d0de      	beq.n	802da5a <_dtoa_r+0x9e2>
 802da9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802daa0:	d1d8      	bne.n	802da54 <_dtoa_r+0x9dc>
 802daa2:	9a00      	ldr	r2, [sp, #0]
 802daa4:	2339      	movs	r3, #57	@ 0x39
 802daa6:	7013      	strb	r3, [r2, #0]
 802daa8:	4633      	mov	r3, r6
 802daaa:	461e      	mov	r6, r3
 802daac:	3b01      	subs	r3, #1
 802daae:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802dab2:	2a39      	cmp	r2, #57	@ 0x39
 802dab4:	d052      	beq.n	802db5c <_dtoa_r+0xae4>
 802dab6:	3201      	adds	r2, #1
 802dab8:	701a      	strb	r2, [r3, #0]
 802daba:	e613      	b.n	802d6e4 <_dtoa_r+0x66c>
 802dabc:	2a00      	cmp	r2, #0
 802dabe:	dd07      	ble.n	802dad0 <_dtoa_r+0xa58>
 802dac0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802dac4:	d0ed      	beq.n	802daa2 <_dtoa_r+0xa2a>
 802dac6:	9a00      	ldr	r2, [sp, #0]
 802dac8:	f108 0301 	add.w	r3, r8, #1
 802dacc:	7013      	strb	r3, [r2, #0]
 802dace:	e609      	b.n	802d6e4 <_dtoa_r+0x66c>
 802dad0:	9b07      	ldr	r3, [sp, #28]
 802dad2:	9a07      	ldr	r2, [sp, #28]
 802dad4:	f803 8c01 	strb.w	r8, [r3, #-1]
 802dad8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802dada:	4293      	cmp	r3, r2
 802dadc:	d028      	beq.n	802db30 <_dtoa_r+0xab8>
 802dade:	4649      	mov	r1, r9
 802dae0:	2300      	movs	r3, #0
 802dae2:	220a      	movs	r2, #10
 802dae4:	4658      	mov	r0, fp
 802dae6:	f004 fd25 	bl	8032534 <__multadd>
 802daea:	42af      	cmp	r7, r5
 802daec:	4681      	mov	r9, r0
 802daee:	f04f 0300 	mov.w	r3, #0
 802daf2:	f04f 020a 	mov.w	r2, #10
 802daf6:	4639      	mov	r1, r7
 802daf8:	4658      	mov	r0, fp
 802dafa:	d107      	bne.n	802db0c <_dtoa_r+0xa94>
 802dafc:	f004 fd1a 	bl	8032534 <__multadd>
 802db00:	4607      	mov	r7, r0
 802db02:	4605      	mov	r5, r0
 802db04:	9b07      	ldr	r3, [sp, #28]
 802db06:	3301      	adds	r3, #1
 802db08:	9307      	str	r3, [sp, #28]
 802db0a:	e774      	b.n	802d9f6 <_dtoa_r+0x97e>
 802db0c:	f004 fd12 	bl	8032534 <__multadd>
 802db10:	4629      	mov	r1, r5
 802db12:	4607      	mov	r7, r0
 802db14:	2300      	movs	r3, #0
 802db16:	220a      	movs	r2, #10
 802db18:	4658      	mov	r0, fp
 802db1a:	f004 fd0b 	bl	8032534 <__multadd>
 802db1e:	4605      	mov	r5, r0
 802db20:	e7f0      	b.n	802db04 <_dtoa_r+0xa8c>
 802db22:	9b00      	ldr	r3, [sp, #0]
 802db24:	2b00      	cmp	r3, #0
 802db26:	bfcc      	ite	gt
 802db28:	461e      	movgt	r6, r3
 802db2a:	2601      	movle	r6, #1
 802db2c:	4456      	add	r6, sl
 802db2e:	2700      	movs	r7, #0
 802db30:	4649      	mov	r1, r9
 802db32:	2201      	movs	r2, #1
 802db34:	4658      	mov	r0, fp
 802db36:	f004 fed9 	bl	80328ec <__lshift>
 802db3a:	4621      	mov	r1, r4
 802db3c:	4681      	mov	r9, r0
 802db3e:	f004 ff41 	bl	80329c4 <__mcmp>
 802db42:	2800      	cmp	r0, #0
 802db44:	dcb0      	bgt.n	802daa8 <_dtoa_r+0xa30>
 802db46:	d102      	bne.n	802db4e <_dtoa_r+0xad6>
 802db48:	f018 0f01 	tst.w	r8, #1
 802db4c:	d1ac      	bne.n	802daa8 <_dtoa_r+0xa30>
 802db4e:	4633      	mov	r3, r6
 802db50:	461e      	mov	r6, r3
 802db52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802db56:	2a30      	cmp	r2, #48	@ 0x30
 802db58:	d0fa      	beq.n	802db50 <_dtoa_r+0xad8>
 802db5a:	e5c3      	b.n	802d6e4 <_dtoa_r+0x66c>
 802db5c:	459a      	cmp	sl, r3
 802db5e:	d1a4      	bne.n	802daaa <_dtoa_r+0xa32>
 802db60:	9b04      	ldr	r3, [sp, #16]
 802db62:	3301      	adds	r3, #1
 802db64:	9304      	str	r3, [sp, #16]
 802db66:	2331      	movs	r3, #49	@ 0x31
 802db68:	f88a 3000 	strb.w	r3, [sl]
 802db6c:	e5ba      	b.n	802d6e4 <_dtoa_r+0x66c>
 802db6e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802db70:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802dbcc <_dtoa_r+0xb54>
 802db74:	2b00      	cmp	r3, #0
 802db76:	f43f aab6 	beq.w	802d0e6 <_dtoa_r+0x6e>
 802db7a:	f10a 0308 	add.w	r3, sl, #8
 802db7e:	f7ff bab0 	b.w	802d0e2 <_dtoa_r+0x6a>
 802db82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802db84:	2b01      	cmp	r3, #1
 802db86:	f77f ae3a 	ble.w	802d7fe <_dtoa_r+0x786>
 802db8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802db8c:	930a      	str	r3, [sp, #40]	@ 0x28
 802db8e:	2001      	movs	r0, #1
 802db90:	e658      	b.n	802d844 <_dtoa_r+0x7cc>
 802db92:	9b00      	ldr	r3, [sp, #0]
 802db94:	2b00      	cmp	r3, #0
 802db96:	f77f aed9 	ble.w	802d94c <_dtoa_r+0x8d4>
 802db9a:	4656      	mov	r6, sl
 802db9c:	4621      	mov	r1, r4
 802db9e:	4648      	mov	r0, r9
 802dba0:	f7ff f9df 	bl	802cf62 <quorem>
 802dba4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802dba8:	f806 8b01 	strb.w	r8, [r6], #1
 802dbac:	9b00      	ldr	r3, [sp, #0]
 802dbae:	eba6 020a 	sub.w	r2, r6, sl
 802dbb2:	4293      	cmp	r3, r2
 802dbb4:	ddb5      	ble.n	802db22 <_dtoa_r+0xaaa>
 802dbb6:	4649      	mov	r1, r9
 802dbb8:	2300      	movs	r3, #0
 802dbba:	220a      	movs	r2, #10
 802dbbc:	4658      	mov	r0, fp
 802dbbe:	f004 fcb9 	bl	8032534 <__multadd>
 802dbc2:	4681      	mov	r9, r0
 802dbc4:	e7ea      	b.n	802db9c <_dtoa_r+0xb24>
 802dbc6:	bf00      	nop
 802dbc8:	0803abca 	.word	0x0803abca
 802dbcc:	0803abbd 	.word	0x0803abbd

0802dbd0 <_malloc_trim_r>:
 802dbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802dbd4:	4606      	mov	r6, r0
 802dbd6:	2008      	movs	r0, #8
 802dbd8:	4689      	mov	r9, r1
 802dbda:	f006 fb53 	bl	8034284 <sysconf>
 802dbde:	4f24      	ldr	r7, [pc, #144]	@ (802dc70 <_malloc_trim_r+0xa0>)
 802dbe0:	4680      	mov	r8, r0
 802dbe2:	4630      	mov	r0, r6
 802dbe4:	f004 fc6c 	bl	80324c0 <__malloc_lock>
 802dbe8:	68bb      	ldr	r3, [r7, #8]
 802dbea:	685d      	ldr	r5, [r3, #4]
 802dbec:	f025 0503 	bic.w	r5, r5, #3
 802dbf0:	f1a5 0411 	sub.w	r4, r5, #17
 802dbf4:	eba4 0409 	sub.w	r4, r4, r9
 802dbf8:	4444      	add	r4, r8
 802dbfa:	fbb4 f4f8 	udiv	r4, r4, r8
 802dbfe:	3c01      	subs	r4, #1
 802dc00:	fb08 f404 	mul.w	r4, r8, r4
 802dc04:	45a0      	cmp	r8, r4
 802dc06:	dd05      	ble.n	802dc14 <_malloc_trim_r+0x44>
 802dc08:	4630      	mov	r0, r6
 802dc0a:	f004 fc5f 	bl	80324cc <__malloc_unlock>
 802dc0e:	2000      	movs	r0, #0
 802dc10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802dc14:	2100      	movs	r1, #0
 802dc16:	4630      	mov	r0, r6
 802dc18:	f006 fb24 	bl	8034264 <_sbrk_r>
 802dc1c:	68bb      	ldr	r3, [r7, #8]
 802dc1e:	442b      	add	r3, r5
 802dc20:	4298      	cmp	r0, r3
 802dc22:	d1f1      	bne.n	802dc08 <_malloc_trim_r+0x38>
 802dc24:	4261      	negs	r1, r4
 802dc26:	4630      	mov	r0, r6
 802dc28:	f006 fb1c 	bl	8034264 <_sbrk_r>
 802dc2c:	3001      	adds	r0, #1
 802dc2e:	d110      	bne.n	802dc52 <_malloc_trim_r+0x82>
 802dc30:	2100      	movs	r1, #0
 802dc32:	4630      	mov	r0, r6
 802dc34:	f006 fb16 	bl	8034264 <_sbrk_r>
 802dc38:	68ba      	ldr	r2, [r7, #8]
 802dc3a:	1a83      	subs	r3, r0, r2
 802dc3c:	2b0f      	cmp	r3, #15
 802dc3e:	dde3      	ble.n	802dc08 <_malloc_trim_r+0x38>
 802dc40:	490c      	ldr	r1, [pc, #48]	@ (802dc74 <_malloc_trim_r+0xa4>)
 802dc42:	6809      	ldr	r1, [r1, #0]
 802dc44:	1a40      	subs	r0, r0, r1
 802dc46:	490c      	ldr	r1, [pc, #48]	@ (802dc78 <_malloc_trim_r+0xa8>)
 802dc48:	f043 0301 	orr.w	r3, r3, #1
 802dc4c:	6008      	str	r0, [r1, #0]
 802dc4e:	6053      	str	r3, [r2, #4]
 802dc50:	e7da      	b.n	802dc08 <_malloc_trim_r+0x38>
 802dc52:	68bb      	ldr	r3, [r7, #8]
 802dc54:	4a08      	ldr	r2, [pc, #32]	@ (802dc78 <_malloc_trim_r+0xa8>)
 802dc56:	1b2d      	subs	r5, r5, r4
 802dc58:	f045 0501 	orr.w	r5, r5, #1
 802dc5c:	605d      	str	r5, [r3, #4]
 802dc5e:	6813      	ldr	r3, [r2, #0]
 802dc60:	4630      	mov	r0, r6
 802dc62:	1b1b      	subs	r3, r3, r4
 802dc64:	6013      	str	r3, [r2, #0]
 802dc66:	f004 fc31 	bl	80324cc <__malloc_unlock>
 802dc6a:	2001      	movs	r0, #1
 802dc6c:	e7d0      	b.n	802dc10 <_malloc_trim_r+0x40>
 802dc6e:	bf00      	nop
 802dc70:	20000384 	.word	0x20000384
 802dc74:	2000037c 	.word	0x2000037c
 802dc78:	20018f64 	.word	0x20018f64

0802dc7c <_free_r>:
 802dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dc7e:	4604      	mov	r4, r0
 802dc80:	460f      	mov	r7, r1
 802dc82:	2900      	cmp	r1, #0
 802dc84:	f000 80b1 	beq.w	802ddea <_free_r+0x16e>
 802dc88:	f004 fc1a 	bl	80324c0 <__malloc_lock>
 802dc8c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802dc90:	4d56      	ldr	r5, [pc, #344]	@ (802ddec <_free_r+0x170>)
 802dc92:	f022 0001 	bic.w	r0, r2, #1
 802dc96:	f1a7 0308 	sub.w	r3, r7, #8
 802dc9a:	eb03 0c00 	add.w	ip, r3, r0
 802dc9e:	68a9      	ldr	r1, [r5, #8]
 802dca0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802dca4:	4561      	cmp	r1, ip
 802dca6:	f026 0603 	bic.w	r6, r6, #3
 802dcaa:	f002 0201 	and.w	r2, r2, #1
 802dcae:	d11b      	bne.n	802dce8 <_free_r+0x6c>
 802dcb0:	4406      	add	r6, r0
 802dcb2:	b93a      	cbnz	r2, 802dcc4 <_free_r+0x48>
 802dcb4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802dcb8:	1a9b      	subs	r3, r3, r2
 802dcba:	4416      	add	r6, r2
 802dcbc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802dcc0:	60ca      	str	r2, [r1, #12]
 802dcc2:	6091      	str	r1, [r2, #8]
 802dcc4:	f046 0201 	orr.w	r2, r6, #1
 802dcc8:	605a      	str	r2, [r3, #4]
 802dcca:	60ab      	str	r3, [r5, #8]
 802dccc:	4b48      	ldr	r3, [pc, #288]	@ (802ddf0 <_free_r+0x174>)
 802dcce:	681b      	ldr	r3, [r3, #0]
 802dcd0:	42b3      	cmp	r3, r6
 802dcd2:	d804      	bhi.n	802dcde <_free_r+0x62>
 802dcd4:	4b47      	ldr	r3, [pc, #284]	@ (802ddf4 <_free_r+0x178>)
 802dcd6:	4620      	mov	r0, r4
 802dcd8:	6819      	ldr	r1, [r3, #0]
 802dcda:	f7ff ff79 	bl	802dbd0 <_malloc_trim_r>
 802dcde:	4620      	mov	r0, r4
 802dce0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802dce4:	f004 bbf2 	b.w	80324cc <__malloc_unlock>
 802dce8:	f8cc 6004 	str.w	r6, [ip, #4]
 802dcec:	2a00      	cmp	r2, #0
 802dcee:	d138      	bne.n	802dd62 <_free_r+0xe6>
 802dcf0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802dcf4:	1a5b      	subs	r3, r3, r1
 802dcf6:	4408      	add	r0, r1
 802dcf8:	6899      	ldr	r1, [r3, #8]
 802dcfa:	f105 0708 	add.w	r7, r5, #8
 802dcfe:	42b9      	cmp	r1, r7
 802dd00:	d031      	beq.n	802dd66 <_free_r+0xea>
 802dd02:	68df      	ldr	r7, [r3, #12]
 802dd04:	60cf      	str	r7, [r1, #12]
 802dd06:	60b9      	str	r1, [r7, #8]
 802dd08:	eb0c 0106 	add.w	r1, ip, r6
 802dd0c:	6849      	ldr	r1, [r1, #4]
 802dd0e:	07c9      	lsls	r1, r1, #31
 802dd10:	d40b      	bmi.n	802dd2a <_free_r+0xae>
 802dd12:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802dd16:	4430      	add	r0, r6
 802dd18:	bb3a      	cbnz	r2, 802dd6a <_free_r+0xee>
 802dd1a:	4e37      	ldr	r6, [pc, #220]	@ (802ddf8 <_free_r+0x17c>)
 802dd1c:	42b1      	cmp	r1, r6
 802dd1e:	d124      	bne.n	802dd6a <_free_r+0xee>
 802dd20:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802dd24:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802dd28:	2201      	movs	r2, #1
 802dd2a:	f040 0101 	orr.w	r1, r0, #1
 802dd2e:	6059      	str	r1, [r3, #4]
 802dd30:	5018      	str	r0, [r3, r0]
 802dd32:	2a00      	cmp	r2, #0
 802dd34:	d1d3      	bne.n	802dcde <_free_r+0x62>
 802dd36:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802dd3a:	d21b      	bcs.n	802dd74 <_free_r+0xf8>
 802dd3c:	08c2      	lsrs	r2, r0, #3
 802dd3e:	2101      	movs	r1, #1
 802dd40:	0940      	lsrs	r0, r0, #5
 802dd42:	4081      	lsls	r1, r0
 802dd44:	6868      	ldr	r0, [r5, #4]
 802dd46:	3201      	adds	r2, #1
 802dd48:	4301      	orrs	r1, r0
 802dd4a:	6069      	str	r1, [r5, #4]
 802dd4c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802dd50:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802dd54:	3908      	subs	r1, #8
 802dd56:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802dd5a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802dd5e:	60c3      	str	r3, [r0, #12]
 802dd60:	e7bd      	b.n	802dcde <_free_r+0x62>
 802dd62:	2200      	movs	r2, #0
 802dd64:	e7d0      	b.n	802dd08 <_free_r+0x8c>
 802dd66:	2201      	movs	r2, #1
 802dd68:	e7ce      	b.n	802dd08 <_free_r+0x8c>
 802dd6a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802dd6e:	60ce      	str	r6, [r1, #12]
 802dd70:	60b1      	str	r1, [r6, #8]
 802dd72:	e7da      	b.n	802dd2a <_free_r+0xae>
 802dd74:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802dd78:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802dd7c:	d214      	bcs.n	802dda8 <_free_r+0x12c>
 802dd7e:	0982      	lsrs	r2, r0, #6
 802dd80:	3238      	adds	r2, #56	@ 0x38
 802dd82:	1c51      	adds	r1, r2, #1
 802dd84:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802dd88:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802dd8c:	428e      	cmp	r6, r1
 802dd8e:	d125      	bne.n	802dddc <_free_r+0x160>
 802dd90:	2001      	movs	r0, #1
 802dd92:	1092      	asrs	r2, r2, #2
 802dd94:	fa00 f202 	lsl.w	r2, r0, r2
 802dd98:	6868      	ldr	r0, [r5, #4]
 802dd9a:	4302      	orrs	r2, r0
 802dd9c:	606a      	str	r2, [r5, #4]
 802dd9e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802dda2:	60b3      	str	r3, [r6, #8]
 802dda4:	60cb      	str	r3, [r1, #12]
 802dda6:	e79a      	b.n	802dcde <_free_r+0x62>
 802dda8:	2a14      	cmp	r2, #20
 802ddaa:	d801      	bhi.n	802ddb0 <_free_r+0x134>
 802ddac:	325b      	adds	r2, #91	@ 0x5b
 802ddae:	e7e8      	b.n	802dd82 <_free_r+0x106>
 802ddb0:	2a54      	cmp	r2, #84	@ 0x54
 802ddb2:	d802      	bhi.n	802ddba <_free_r+0x13e>
 802ddb4:	0b02      	lsrs	r2, r0, #12
 802ddb6:	326e      	adds	r2, #110	@ 0x6e
 802ddb8:	e7e3      	b.n	802dd82 <_free_r+0x106>
 802ddba:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802ddbe:	d802      	bhi.n	802ddc6 <_free_r+0x14a>
 802ddc0:	0bc2      	lsrs	r2, r0, #15
 802ddc2:	3277      	adds	r2, #119	@ 0x77
 802ddc4:	e7dd      	b.n	802dd82 <_free_r+0x106>
 802ddc6:	f240 5154 	movw	r1, #1364	@ 0x554
 802ddca:	428a      	cmp	r2, r1
 802ddcc:	bf9a      	itte	ls
 802ddce:	0c82      	lsrls	r2, r0, #18
 802ddd0:	327c      	addls	r2, #124	@ 0x7c
 802ddd2:	227e      	movhi	r2, #126	@ 0x7e
 802ddd4:	e7d5      	b.n	802dd82 <_free_r+0x106>
 802ddd6:	6889      	ldr	r1, [r1, #8]
 802ddd8:	428e      	cmp	r6, r1
 802ddda:	d004      	beq.n	802dde6 <_free_r+0x16a>
 802dddc:	684a      	ldr	r2, [r1, #4]
 802ddde:	f022 0203 	bic.w	r2, r2, #3
 802dde2:	4282      	cmp	r2, r0
 802dde4:	d8f7      	bhi.n	802ddd6 <_free_r+0x15a>
 802dde6:	68ce      	ldr	r6, [r1, #12]
 802dde8:	e7d9      	b.n	802dd9e <_free_r+0x122>
 802ddea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ddec:	20000384 	.word	0x20000384
 802ddf0:	20000380 	.word	0x20000380
 802ddf4:	20018f94 	.word	0x20018f94
 802ddf8:	2000038c 	.word	0x2000038c

0802ddfc <_findenv_r>:
 802ddfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802de00:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802de70 <_findenv_r+0x74>
 802de04:	4606      	mov	r6, r0
 802de06:	4689      	mov	r9, r1
 802de08:	4617      	mov	r7, r2
 802de0a:	f006 fc31 	bl	8034670 <__env_lock>
 802de0e:	f8da 4000 	ldr.w	r4, [sl]
 802de12:	b134      	cbz	r4, 802de22 <_findenv_r+0x26>
 802de14:	464b      	mov	r3, r9
 802de16:	4698      	mov	r8, r3
 802de18:	f813 2b01 	ldrb.w	r2, [r3], #1
 802de1c:	b13a      	cbz	r2, 802de2e <_findenv_r+0x32>
 802de1e:	2a3d      	cmp	r2, #61	@ 0x3d
 802de20:	d1f9      	bne.n	802de16 <_findenv_r+0x1a>
 802de22:	4630      	mov	r0, r6
 802de24:	f006 fc2a 	bl	803467c <__env_unlock>
 802de28:	2000      	movs	r0, #0
 802de2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802de2e:	eba8 0809 	sub.w	r8, r8, r9
 802de32:	46a3      	mov	fp, r4
 802de34:	f854 0b04 	ldr.w	r0, [r4], #4
 802de38:	2800      	cmp	r0, #0
 802de3a:	d0f2      	beq.n	802de22 <_findenv_r+0x26>
 802de3c:	4642      	mov	r2, r8
 802de3e:	4649      	mov	r1, r9
 802de40:	f7fd fe13 	bl	802ba6a <strncmp>
 802de44:	2800      	cmp	r0, #0
 802de46:	d1f4      	bne.n	802de32 <_findenv_r+0x36>
 802de48:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802de4c:	eb03 0508 	add.w	r5, r3, r8
 802de50:	f813 3008 	ldrb.w	r3, [r3, r8]
 802de54:	2b3d      	cmp	r3, #61	@ 0x3d
 802de56:	d1ec      	bne.n	802de32 <_findenv_r+0x36>
 802de58:	f8da 3000 	ldr.w	r3, [sl]
 802de5c:	ebab 0303 	sub.w	r3, fp, r3
 802de60:	109b      	asrs	r3, r3, #2
 802de62:	4630      	mov	r0, r6
 802de64:	603b      	str	r3, [r7, #0]
 802de66:	f006 fc09 	bl	803467c <__env_unlock>
 802de6a:	1c68      	adds	r0, r5, #1
 802de6c:	e7dd      	b.n	802de2a <_findenv_r+0x2e>
 802de6e:	bf00      	nop
 802de70:	20000014 	.word	0x20000014

0802de74 <_getenv_r>:
 802de74:	b507      	push	{r0, r1, r2, lr}
 802de76:	aa01      	add	r2, sp, #4
 802de78:	f7ff ffc0 	bl	802ddfc <_findenv_r>
 802de7c:	b003      	add	sp, #12
 802de7e:	f85d fb04 	ldr.w	pc, [sp], #4

0802de82 <labs>:
 802de82:	2800      	cmp	r0, #0
 802de84:	bfb8      	it	lt
 802de86:	4240      	neglt	r0, r0
 802de88:	4770      	bx	lr
	...

0802de8c <malloc>:
 802de8c:	4b02      	ldr	r3, [pc, #8]	@ (802de98 <malloc+0xc>)
 802de8e:	4601      	mov	r1, r0
 802de90:	6818      	ldr	r0, [r3, #0]
 802de92:	f000 b80b 	b.w	802deac <_malloc_r>
 802de96:	bf00      	nop
 802de98:	20000254 	.word	0x20000254

0802de9c <free>:
 802de9c:	4b02      	ldr	r3, [pc, #8]	@ (802dea8 <free+0xc>)
 802de9e:	4601      	mov	r1, r0
 802dea0:	6818      	ldr	r0, [r3, #0]
 802dea2:	f7ff beeb 	b.w	802dc7c <_free_r>
 802dea6:	bf00      	nop
 802dea8:	20000254 	.word	0x20000254

0802deac <_malloc_r>:
 802deac:	f101 030b 	add.w	r3, r1, #11
 802deb0:	2b16      	cmp	r3, #22
 802deb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802deb6:	4605      	mov	r5, r0
 802deb8:	d906      	bls.n	802dec8 <_malloc_r+0x1c>
 802deba:	f033 0707 	bics.w	r7, r3, #7
 802debe:	d504      	bpl.n	802deca <_malloc_r+0x1e>
 802dec0:	230c      	movs	r3, #12
 802dec2:	602b      	str	r3, [r5, #0]
 802dec4:	2400      	movs	r4, #0
 802dec6:	e1a3      	b.n	802e210 <_malloc_r+0x364>
 802dec8:	2710      	movs	r7, #16
 802deca:	42b9      	cmp	r1, r7
 802decc:	d8f8      	bhi.n	802dec0 <_malloc_r+0x14>
 802dece:	4628      	mov	r0, r5
 802ded0:	f004 faf6 	bl	80324c0 <__malloc_lock>
 802ded4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802ded8:	4eaf      	ldr	r6, [pc, #700]	@ (802e198 <_malloc_r+0x2ec>)
 802deda:	d237      	bcs.n	802df4c <_malloc_r+0xa0>
 802dedc:	f107 0208 	add.w	r2, r7, #8
 802dee0:	4432      	add	r2, r6
 802dee2:	f1a2 0108 	sub.w	r1, r2, #8
 802dee6:	6854      	ldr	r4, [r2, #4]
 802dee8:	428c      	cmp	r4, r1
 802deea:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802deee:	d102      	bne.n	802def6 <_malloc_r+0x4a>
 802def0:	68d4      	ldr	r4, [r2, #12]
 802def2:	42a2      	cmp	r2, r4
 802def4:	d010      	beq.n	802df18 <_malloc_r+0x6c>
 802def6:	6863      	ldr	r3, [r4, #4]
 802def8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802defc:	f023 0303 	bic.w	r3, r3, #3
 802df00:	60ca      	str	r2, [r1, #12]
 802df02:	4423      	add	r3, r4
 802df04:	6091      	str	r1, [r2, #8]
 802df06:	685a      	ldr	r2, [r3, #4]
 802df08:	f042 0201 	orr.w	r2, r2, #1
 802df0c:	605a      	str	r2, [r3, #4]
 802df0e:	4628      	mov	r0, r5
 802df10:	f004 fadc 	bl	80324cc <__malloc_unlock>
 802df14:	3408      	adds	r4, #8
 802df16:	e17b      	b.n	802e210 <_malloc_r+0x364>
 802df18:	3302      	adds	r3, #2
 802df1a:	6934      	ldr	r4, [r6, #16]
 802df1c:	499f      	ldr	r1, [pc, #636]	@ (802e19c <_malloc_r+0x2f0>)
 802df1e:	428c      	cmp	r4, r1
 802df20:	d077      	beq.n	802e012 <_malloc_r+0x166>
 802df22:	6862      	ldr	r2, [r4, #4]
 802df24:	f022 0c03 	bic.w	ip, r2, #3
 802df28:	ebac 0007 	sub.w	r0, ip, r7
 802df2c:	280f      	cmp	r0, #15
 802df2e:	dd48      	ble.n	802dfc2 <_malloc_r+0x116>
 802df30:	19e2      	adds	r2, r4, r7
 802df32:	f040 0301 	orr.w	r3, r0, #1
 802df36:	f047 0701 	orr.w	r7, r7, #1
 802df3a:	6067      	str	r7, [r4, #4]
 802df3c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802df40:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802df44:	6053      	str	r3, [r2, #4]
 802df46:	f844 000c 	str.w	r0, [r4, ip]
 802df4a:	e7e0      	b.n	802df0e <_malloc_r+0x62>
 802df4c:	0a7b      	lsrs	r3, r7, #9
 802df4e:	d02a      	beq.n	802dfa6 <_malloc_r+0xfa>
 802df50:	2b04      	cmp	r3, #4
 802df52:	d812      	bhi.n	802df7a <_malloc_r+0xce>
 802df54:	09bb      	lsrs	r3, r7, #6
 802df56:	3338      	adds	r3, #56	@ 0x38
 802df58:	1c5a      	adds	r2, r3, #1
 802df5a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802df5e:	f1a2 0c08 	sub.w	ip, r2, #8
 802df62:	6854      	ldr	r4, [r2, #4]
 802df64:	4564      	cmp	r4, ip
 802df66:	d006      	beq.n	802df76 <_malloc_r+0xca>
 802df68:	6862      	ldr	r2, [r4, #4]
 802df6a:	f022 0203 	bic.w	r2, r2, #3
 802df6e:	1bd0      	subs	r0, r2, r7
 802df70:	280f      	cmp	r0, #15
 802df72:	dd1c      	ble.n	802dfae <_malloc_r+0x102>
 802df74:	3b01      	subs	r3, #1
 802df76:	3301      	adds	r3, #1
 802df78:	e7cf      	b.n	802df1a <_malloc_r+0x6e>
 802df7a:	2b14      	cmp	r3, #20
 802df7c:	d801      	bhi.n	802df82 <_malloc_r+0xd6>
 802df7e:	335b      	adds	r3, #91	@ 0x5b
 802df80:	e7ea      	b.n	802df58 <_malloc_r+0xac>
 802df82:	2b54      	cmp	r3, #84	@ 0x54
 802df84:	d802      	bhi.n	802df8c <_malloc_r+0xe0>
 802df86:	0b3b      	lsrs	r3, r7, #12
 802df88:	336e      	adds	r3, #110	@ 0x6e
 802df8a:	e7e5      	b.n	802df58 <_malloc_r+0xac>
 802df8c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802df90:	d802      	bhi.n	802df98 <_malloc_r+0xec>
 802df92:	0bfb      	lsrs	r3, r7, #15
 802df94:	3377      	adds	r3, #119	@ 0x77
 802df96:	e7df      	b.n	802df58 <_malloc_r+0xac>
 802df98:	f240 5254 	movw	r2, #1364	@ 0x554
 802df9c:	4293      	cmp	r3, r2
 802df9e:	d804      	bhi.n	802dfaa <_malloc_r+0xfe>
 802dfa0:	0cbb      	lsrs	r3, r7, #18
 802dfa2:	337c      	adds	r3, #124	@ 0x7c
 802dfa4:	e7d8      	b.n	802df58 <_malloc_r+0xac>
 802dfa6:	233f      	movs	r3, #63	@ 0x3f
 802dfa8:	e7d6      	b.n	802df58 <_malloc_r+0xac>
 802dfaa:	237e      	movs	r3, #126	@ 0x7e
 802dfac:	e7d4      	b.n	802df58 <_malloc_r+0xac>
 802dfae:	2800      	cmp	r0, #0
 802dfb0:	68e1      	ldr	r1, [r4, #12]
 802dfb2:	db04      	blt.n	802dfbe <_malloc_r+0x112>
 802dfb4:	68a3      	ldr	r3, [r4, #8]
 802dfb6:	60d9      	str	r1, [r3, #12]
 802dfb8:	608b      	str	r3, [r1, #8]
 802dfba:	18a3      	adds	r3, r4, r2
 802dfbc:	e7a3      	b.n	802df06 <_malloc_r+0x5a>
 802dfbe:	460c      	mov	r4, r1
 802dfc0:	e7d0      	b.n	802df64 <_malloc_r+0xb8>
 802dfc2:	2800      	cmp	r0, #0
 802dfc4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802dfc8:	db07      	blt.n	802dfda <_malloc_r+0x12e>
 802dfca:	44a4      	add	ip, r4
 802dfcc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802dfd0:	f043 0301 	orr.w	r3, r3, #1
 802dfd4:	f8cc 3004 	str.w	r3, [ip, #4]
 802dfd8:	e799      	b.n	802df0e <_malloc_r+0x62>
 802dfda:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802dfde:	6870      	ldr	r0, [r6, #4]
 802dfe0:	f080 8095 	bcs.w	802e10e <_malloc_r+0x262>
 802dfe4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802dfe8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802dfec:	f04f 0c01 	mov.w	ip, #1
 802dff0:	3201      	adds	r2, #1
 802dff2:	fa0c fc0e 	lsl.w	ip, ip, lr
 802dff6:	ea4c 0000 	orr.w	r0, ip, r0
 802dffa:	6070      	str	r0, [r6, #4]
 802dffc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802e000:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802e004:	3808      	subs	r0, #8
 802e006:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802e00a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802e00e:	f8cc 400c 	str.w	r4, [ip, #12]
 802e012:	1098      	asrs	r0, r3, #2
 802e014:	2201      	movs	r2, #1
 802e016:	4082      	lsls	r2, r0
 802e018:	6870      	ldr	r0, [r6, #4]
 802e01a:	4290      	cmp	r0, r2
 802e01c:	d326      	bcc.n	802e06c <_malloc_r+0x1c0>
 802e01e:	4210      	tst	r0, r2
 802e020:	d106      	bne.n	802e030 <_malloc_r+0x184>
 802e022:	f023 0303 	bic.w	r3, r3, #3
 802e026:	0052      	lsls	r2, r2, #1
 802e028:	4210      	tst	r0, r2
 802e02a:	f103 0304 	add.w	r3, r3, #4
 802e02e:	d0fa      	beq.n	802e026 <_malloc_r+0x17a>
 802e030:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802e034:	46c1      	mov	r9, r8
 802e036:	469e      	mov	lr, r3
 802e038:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802e03c:	454c      	cmp	r4, r9
 802e03e:	f040 80b9 	bne.w	802e1b4 <_malloc_r+0x308>
 802e042:	f10e 0e01 	add.w	lr, lr, #1
 802e046:	f01e 0f03 	tst.w	lr, #3
 802e04a:	f109 0908 	add.w	r9, r9, #8
 802e04e:	d1f3      	bne.n	802e038 <_malloc_r+0x18c>
 802e050:	0798      	lsls	r0, r3, #30
 802e052:	f040 80e3 	bne.w	802e21c <_malloc_r+0x370>
 802e056:	6873      	ldr	r3, [r6, #4]
 802e058:	ea23 0302 	bic.w	r3, r3, r2
 802e05c:	6073      	str	r3, [r6, #4]
 802e05e:	6870      	ldr	r0, [r6, #4]
 802e060:	0052      	lsls	r2, r2, #1
 802e062:	4290      	cmp	r0, r2
 802e064:	d302      	bcc.n	802e06c <_malloc_r+0x1c0>
 802e066:	2a00      	cmp	r2, #0
 802e068:	f040 80e5 	bne.w	802e236 <_malloc_r+0x38a>
 802e06c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802e070:	f8da 3004 	ldr.w	r3, [sl, #4]
 802e074:	f023 0903 	bic.w	r9, r3, #3
 802e078:	45b9      	cmp	r9, r7
 802e07a:	d304      	bcc.n	802e086 <_malloc_r+0x1da>
 802e07c:	eba9 0207 	sub.w	r2, r9, r7
 802e080:	2a0f      	cmp	r2, #15
 802e082:	f300 8141 	bgt.w	802e308 <_malloc_r+0x45c>
 802e086:	4b46      	ldr	r3, [pc, #280]	@ (802e1a0 <_malloc_r+0x2f4>)
 802e088:	6819      	ldr	r1, [r3, #0]
 802e08a:	3110      	adds	r1, #16
 802e08c:	4439      	add	r1, r7
 802e08e:	2008      	movs	r0, #8
 802e090:	9101      	str	r1, [sp, #4]
 802e092:	f006 f8f7 	bl	8034284 <sysconf>
 802e096:	4a43      	ldr	r2, [pc, #268]	@ (802e1a4 <_malloc_r+0x2f8>)
 802e098:	9901      	ldr	r1, [sp, #4]
 802e09a:	6813      	ldr	r3, [r2, #0]
 802e09c:	3301      	adds	r3, #1
 802e09e:	bf1f      	itttt	ne
 802e0a0:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802e0a4:	1809      	addne	r1, r1, r0
 802e0a6:	4243      	negne	r3, r0
 802e0a8:	4019      	andne	r1, r3
 802e0aa:	4680      	mov	r8, r0
 802e0ac:	4628      	mov	r0, r5
 802e0ae:	9101      	str	r1, [sp, #4]
 802e0b0:	f006 f8d8 	bl	8034264 <_sbrk_r>
 802e0b4:	1c42      	adds	r2, r0, #1
 802e0b6:	eb0a 0b09 	add.w	fp, sl, r9
 802e0ba:	4604      	mov	r4, r0
 802e0bc:	f000 80f7 	beq.w	802e2ae <_malloc_r+0x402>
 802e0c0:	4583      	cmp	fp, r0
 802e0c2:	9901      	ldr	r1, [sp, #4]
 802e0c4:	4a37      	ldr	r2, [pc, #220]	@ (802e1a4 <_malloc_r+0x2f8>)
 802e0c6:	d902      	bls.n	802e0ce <_malloc_r+0x222>
 802e0c8:	45b2      	cmp	sl, r6
 802e0ca:	f040 80f0 	bne.w	802e2ae <_malloc_r+0x402>
 802e0ce:	4b36      	ldr	r3, [pc, #216]	@ (802e1a8 <_malloc_r+0x2fc>)
 802e0d0:	6818      	ldr	r0, [r3, #0]
 802e0d2:	45a3      	cmp	fp, r4
 802e0d4:	eb00 0e01 	add.w	lr, r0, r1
 802e0d8:	f8c3 e000 	str.w	lr, [r3]
 802e0dc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802e0e0:	f040 80ab 	bne.w	802e23a <_malloc_r+0x38e>
 802e0e4:	ea1b 0f0c 	tst.w	fp, ip
 802e0e8:	f040 80a7 	bne.w	802e23a <_malloc_r+0x38e>
 802e0ec:	68b2      	ldr	r2, [r6, #8]
 802e0ee:	4449      	add	r1, r9
 802e0f0:	f041 0101 	orr.w	r1, r1, #1
 802e0f4:	6051      	str	r1, [r2, #4]
 802e0f6:	4a2d      	ldr	r2, [pc, #180]	@ (802e1ac <_malloc_r+0x300>)
 802e0f8:	681b      	ldr	r3, [r3, #0]
 802e0fa:	6811      	ldr	r1, [r2, #0]
 802e0fc:	428b      	cmp	r3, r1
 802e0fe:	bf88      	it	hi
 802e100:	6013      	strhi	r3, [r2, #0]
 802e102:	4a2b      	ldr	r2, [pc, #172]	@ (802e1b0 <_malloc_r+0x304>)
 802e104:	6811      	ldr	r1, [r2, #0]
 802e106:	428b      	cmp	r3, r1
 802e108:	bf88      	it	hi
 802e10a:	6013      	strhi	r3, [r2, #0]
 802e10c:	e0cf      	b.n	802e2ae <_malloc_r+0x402>
 802e10e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802e112:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802e116:	d218      	bcs.n	802e14a <_malloc_r+0x29e>
 802e118:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802e11c:	3238      	adds	r2, #56	@ 0x38
 802e11e:	f102 0e01 	add.w	lr, r2, #1
 802e122:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802e126:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802e12a:	45f0      	cmp	r8, lr
 802e12c:	d12b      	bne.n	802e186 <_malloc_r+0x2da>
 802e12e:	1092      	asrs	r2, r2, #2
 802e130:	f04f 0c01 	mov.w	ip, #1
 802e134:	fa0c f202 	lsl.w	r2, ip, r2
 802e138:	4302      	orrs	r2, r0
 802e13a:	6072      	str	r2, [r6, #4]
 802e13c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802e140:	f8c8 4008 	str.w	r4, [r8, #8]
 802e144:	f8ce 400c 	str.w	r4, [lr, #12]
 802e148:	e763      	b.n	802e012 <_malloc_r+0x166>
 802e14a:	2a14      	cmp	r2, #20
 802e14c:	d801      	bhi.n	802e152 <_malloc_r+0x2a6>
 802e14e:	325b      	adds	r2, #91	@ 0x5b
 802e150:	e7e5      	b.n	802e11e <_malloc_r+0x272>
 802e152:	2a54      	cmp	r2, #84	@ 0x54
 802e154:	d803      	bhi.n	802e15e <_malloc_r+0x2b2>
 802e156:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802e15a:	326e      	adds	r2, #110	@ 0x6e
 802e15c:	e7df      	b.n	802e11e <_malloc_r+0x272>
 802e15e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802e162:	d803      	bhi.n	802e16c <_malloc_r+0x2c0>
 802e164:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802e168:	3277      	adds	r2, #119	@ 0x77
 802e16a:	e7d8      	b.n	802e11e <_malloc_r+0x272>
 802e16c:	f240 5e54 	movw	lr, #1364	@ 0x554
 802e170:	4572      	cmp	r2, lr
 802e172:	bf9a      	itte	ls
 802e174:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802e178:	327c      	addls	r2, #124	@ 0x7c
 802e17a:	227e      	movhi	r2, #126	@ 0x7e
 802e17c:	e7cf      	b.n	802e11e <_malloc_r+0x272>
 802e17e:	f8de e008 	ldr.w	lr, [lr, #8]
 802e182:	45f0      	cmp	r8, lr
 802e184:	d005      	beq.n	802e192 <_malloc_r+0x2e6>
 802e186:	f8de 2004 	ldr.w	r2, [lr, #4]
 802e18a:	f022 0203 	bic.w	r2, r2, #3
 802e18e:	4562      	cmp	r2, ip
 802e190:	d8f5      	bhi.n	802e17e <_malloc_r+0x2d2>
 802e192:	f8de 800c 	ldr.w	r8, [lr, #12]
 802e196:	e7d1      	b.n	802e13c <_malloc_r+0x290>
 802e198:	20000384 	.word	0x20000384
 802e19c:	2000038c 	.word	0x2000038c
 802e1a0:	20018f94 	.word	0x20018f94
 802e1a4:	2000037c 	.word	0x2000037c
 802e1a8:	20018f64 	.word	0x20018f64
 802e1ac:	20018f90 	.word	0x20018f90
 802e1b0:	20018f8c 	.word	0x20018f8c
 802e1b4:	6860      	ldr	r0, [r4, #4]
 802e1b6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802e1ba:	f020 0003 	bic.w	r0, r0, #3
 802e1be:	eba0 0a07 	sub.w	sl, r0, r7
 802e1c2:	f1ba 0f0f 	cmp.w	sl, #15
 802e1c6:	dd12      	ble.n	802e1ee <_malloc_r+0x342>
 802e1c8:	68a3      	ldr	r3, [r4, #8]
 802e1ca:	19e2      	adds	r2, r4, r7
 802e1cc:	f047 0701 	orr.w	r7, r7, #1
 802e1d0:	6067      	str	r7, [r4, #4]
 802e1d2:	f8c3 c00c 	str.w	ip, [r3, #12]
 802e1d6:	f8cc 3008 	str.w	r3, [ip, #8]
 802e1da:	f04a 0301 	orr.w	r3, sl, #1
 802e1de:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802e1e2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802e1e6:	6053      	str	r3, [r2, #4]
 802e1e8:	f844 a000 	str.w	sl, [r4, r0]
 802e1ec:	e68f      	b.n	802df0e <_malloc_r+0x62>
 802e1ee:	f1ba 0f00 	cmp.w	sl, #0
 802e1f2:	db11      	blt.n	802e218 <_malloc_r+0x36c>
 802e1f4:	4420      	add	r0, r4
 802e1f6:	6843      	ldr	r3, [r0, #4]
 802e1f8:	f043 0301 	orr.w	r3, r3, #1
 802e1fc:	6043      	str	r3, [r0, #4]
 802e1fe:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802e202:	4628      	mov	r0, r5
 802e204:	f8c3 c00c 	str.w	ip, [r3, #12]
 802e208:	f8cc 3008 	str.w	r3, [ip, #8]
 802e20c:	f004 f95e 	bl	80324cc <__malloc_unlock>
 802e210:	4620      	mov	r0, r4
 802e212:	b003      	add	sp, #12
 802e214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e218:	4664      	mov	r4, ip
 802e21a:	e70f      	b.n	802e03c <_malloc_r+0x190>
 802e21c:	f858 0908 	ldr.w	r0, [r8], #-8
 802e220:	4540      	cmp	r0, r8
 802e222:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802e226:	f43f af13 	beq.w	802e050 <_malloc_r+0x1a4>
 802e22a:	e718      	b.n	802e05e <_malloc_r+0x1b2>
 802e22c:	3304      	adds	r3, #4
 802e22e:	0052      	lsls	r2, r2, #1
 802e230:	4210      	tst	r0, r2
 802e232:	d0fb      	beq.n	802e22c <_malloc_r+0x380>
 802e234:	e6fc      	b.n	802e030 <_malloc_r+0x184>
 802e236:	4673      	mov	r3, lr
 802e238:	e7fa      	b.n	802e230 <_malloc_r+0x384>
 802e23a:	6810      	ldr	r0, [r2, #0]
 802e23c:	3001      	adds	r0, #1
 802e23e:	bf1b      	ittet	ne
 802e240:	eba4 0b0b 	subne.w	fp, r4, fp
 802e244:	eb0b 020e 	addne.w	r2, fp, lr
 802e248:	6014      	streq	r4, [r2, #0]
 802e24a:	601a      	strne	r2, [r3, #0]
 802e24c:	f014 0b07 	ands.w	fp, r4, #7
 802e250:	bf1a      	itte	ne
 802e252:	f1cb 0008 	rsbne	r0, fp, #8
 802e256:	1824      	addne	r4, r4, r0
 802e258:	4658      	moveq	r0, fp
 802e25a:	1862      	adds	r2, r4, r1
 802e25c:	ea02 010c 	and.w	r1, r2, ip
 802e260:	4480      	add	r8, r0
 802e262:	eba8 0801 	sub.w	r8, r8, r1
 802e266:	ea08 080c 	and.w	r8, r8, ip
 802e26a:	4641      	mov	r1, r8
 802e26c:	4628      	mov	r0, r5
 802e26e:	9201      	str	r2, [sp, #4]
 802e270:	f005 fff8 	bl	8034264 <_sbrk_r>
 802e274:	1c43      	adds	r3, r0, #1
 802e276:	9a01      	ldr	r2, [sp, #4]
 802e278:	4b28      	ldr	r3, [pc, #160]	@ (802e31c <_malloc_r+0x470>)
 802e27a:	d107      	bne.n	802e28c <_malloc_r+0x3e0>
 802e27c:	f1bb 0f00 	cmp.w	fp, #0
 802e280:	d023      	beq.n	802e2ca <_malloc_r+0x41e>
 802e282:	f1ab 0008 	sub.w	r0, fp, #8
 802e286:	4410      	add	r0, r2
 802e288:	f04f 0800 	mov.w	r8, #0
 802e28c:	681a      	ldr	r2, [r3, #0]
 802e28e:	60b4      	str	r4, [r6, #8]
 802e290:	1b00      	subs	r0, r0, r4
 802e292:	4440      	add	r0, r8
 802e294:	4442      	add	r2, r8
 802e296:	f040 0001 	orr.w	r0, r0, #1
 802e29a:	45b2      	cmp	sl, r6
 802e29c:	601a      	str	r2, [r3, #0]
 802e29e:	6060      	str	r0, [r4, #4]
 802e2a0:	f43f af29 	beq.w	802e0f6 <_malloc_r+0x24a>
 802e2a4:	f1b9 0f0f 	cmp.w	r9, #15
 802e2a8:	d812      	bhi.n	802e2d0 <_malloc_r+0x424>
 802e2aa:	2301      	movs	r3, #1
 802e2ac:	6063      	str	r3, [r4, #4]
 802e2ae:	68b3      	ldr	r3, [r6, #8]
 802e2b0:	685b      	ldr	r3, [r3, #4]
 802e2b2:	f023 0303 	bic.w	r3, r3, #3
 802e2b6:	42bb      	cmp	r3, r7
 802e2b8:	eba3 0207 	sub.w	r2, r3, r7
 802e2bc:	d301      	bcc.n	802e2c2 <_malloc_r+0x416>
 802e2be:	2a0f      	cmp	r2, #15
 802e2c0:	dc22      	bgt.n	802e308 <_malloc_r+0x45c>
 802e2c2:	4628      	mov	r0, r5
 802e2c4:	f004 f902 	bl	80324cc <__malloc_unlock>
 802e2c8:	e5fc      	b.n	802dec4 <_malloc_r+0x18>
 802e2ca:	4610      	mov	r0, r2
 802e2cc:	46d8      	mov	r8, fp
 802e2ce:	e7dd      	b.n	802e28c <_malloc_r+0x3e0>
 802e2d0:	f8da 2004 	ldr.w	r2, [sl, #4]
 802e2d4:	f1a9 090c 	sub.w	r9, r9, #12
 802e2d8:	f029 0907 	bic.w	r9, r9, #7
 802e2dc:	f002 0201 	and.w	r2, r2, #1
 802e2e0:	ea42 0209 	orr.w	r2, r2, r9
 802e2e4:	f8ca 2004 	str.w	r2, [sl, #4]
 802e2e8:	2105      	movs	r1, #5
 802e2ea:	eb0a 0209 	add.w	r2, sl, r9
 802e2ee:	f1b9 0f0f 	cmp.w	r9, #15
 802e2f2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802e2f6:	f67f aefe 	bls.w	802e0f6 <_malloc_r+0x24a>
 802e2fa:	f10a 0108 	add.w	r1, sl, #8
 802e2fe:	4628      	mov	r0, r5
 802e300:	f7ff fcbc 	bl	802dc7c <_free_r>
 802e304:	4b05      	ldr	r3, [pc, #20]	@ (802e31c <_malloc_r+0x470>)
 802e306:	e6f6      	b.n	802e0f6 <_malloc_r+0x24a>
 802e308:	68b4      	ldr	r4, [r6, #8]
 802e30a:	f047 0301 	orr.w	r3, r7, #1
 802e30e:	4427      	add	r7, r4
 802e310:	f042 0201 	orr.w	r2, r2, #1
 802e314:	6063      	str	r3, [r4, #4]
 802e316:	60b7      	str	r7, [r6, #8]
 802e318:	607a      	str	r2, [r7, #4]
 802e31a:	e5f8      	b.n	802df0e <_malloc_r+0x62>
 802e31c:	20018f64 	.word	0x20018f64

0802e320 <__ascii_mbtowc>:
 802e320:	b082      	sub	sp, #8
 802e322:	b901      	cbnz	r1, 802e326 <__ascii_mbtowc+0x6>
 802e324:	a901      	add	r1, sp, #4
 802e326:	b142      	cbz	r2, 802e33a <__ascii_mbtowc+0x1a>
 802e328:	b14b      	cbz	r3, 802e33e <__ascii_mbtowc+0x1e>
 802e32a:	7813      	ldrb	r3, [r2, #0]
 802e32c:	600b      	str	r3, [r1, #0]
 802e32e:	7812      	ldrb	r2, [r2, #0]
 802e330:	1e10      	subs	r0, r2, #0
 802e332:	bf18      	it	ne
 802e334:	2001      	movne	r0, #1
 802e336:	b002      	add	sp, #8
 802e338:	4770      	bx	lr
 802e33a:	4610      	mov	r0, r2
 802e33c:	e7fb      	b.n	802e336 <__ascii_mbtowc+0x16>
 802e33e:	f06f 0001 	mvn.w	r0, #1
 802e342:	e7f8      	b.n	802e336 <__ascii_mbtowc+0x16>

0802e344 <siscanf>:
 802e344:	b40e      	push	{r1, r2, r3}
 802e346:	b530      	push	{r4, r5, lr}
 802e348:	b09c      	sub	sp, #112	@ 0x70
 802e34a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802e34c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802e350:	f854 5b04 	ldr.w	r5, [r4], #4
 802e354:	f8ad 2014 	strh.w	r2, [sp, #20]
 802e358:	9002      	str	r0, [sp, #8]
 802e35a:	9006      	str	r0, [sp, #24]
 802e35c:	f7e1 ffa0 	bl	80102a0 <strlen>
 802e360:	4b0b      	ldr	r3, [pc, #44]	@ (802e390 <siscanf+0x4c>)
 802e362:	9003      	str	r0, [sp, #12]
 802e364:	9007      	str	r0, [sp, #28]
 802e366:	930a      	str	r3, [sp, #40]	@ 0x28
 802e368:	480a      	ldr	r0, [pc, #40]	@ (802e394 <siscanf+0x50>)
 802e36a:	9401      	str	r4, [sp, #4]
 802e36c:	2300      	movs	r3, #0
 802e36e:	930e      	str	r3, [sp, #56]	@ 0x38
 802e370:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802e376:	f8ad 3016 	strh.w	r3, [sp, #22]
 802e37a:	462a      	mov	r2, r5
 802e37c:	4623      	mov	r3, r4
 802e37e:	a902      	add	r1, sp, #8
 802e380:	6800      	ldr	r0, [r0, #0]
 802e382:	f000 fd99 	bl	802eeb8 <__ssvfiscanf_r>
 802e386:	b01c      	add	sp, #112	@ 0x70
 802e388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e38c:	b003      	add	sp, #12
 802e38e:	4770      	bx	lr
 802e390:	0802b333 	.word	0x0802b333
 802e394:	20000254 	.word	0x20000254

0802e398 <sniprintf>:
 802e398:	b40c      	push	{r2, r3}
 802e39a:	b530      	push	{r4, r5, lr}
 802e39c:	4b17      	ldr	r3, [pc, #92]	@ (802e3fc <sniprintf+0x64>)
 802e39e:	1e0c      	subs	r4, r1, #0
 802e3a0:	681d      	ldr	r5, [r3, #0]
 802e3a2:	b09d      	sub	sp, #116	@ 0x74
 802e3a4:	da08      	bge.n	802e3b8 <sniprintf+0x20>
 802e3a6:	238b      	movs	r3, #139	@ 0x8b
 802e3a8:	602b      	str	r3, [r5, #0]
 802e3aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e3ae:	b01d      	add	sp, #116	@ 0x74
 802e3b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e3b4:	b002      	add	sp, #8
 802e3b6:	4770      	bx	lr
 802e3b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802e3bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 802e3c0:	bf14      	ite	ne
 802e3c2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802e3c6:	4623      	moveq	r3, r4
 802e3c8:	9304      	str	r3, [sp, #16]
 802e3ca:	9307      	str	r3, [sp, #28]
 802e3cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802e3d0:	9002      	str	r0, [sp, #8]
 802e3d2:	9006      	str	r0, [sp, #24]
 802e3d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 802e3d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802e3da:	ab21      	add	r3, sp, #132	@ 0x84
 802e3dc:	a902      	add	r1, sp, #8
 802e3de:	4628      	mov	r0, r5
 802e3e0:	9301      	str	r3, [sp, #4]
 802e3e2:	f000 f88b 	bl	802e4fc <_svfiprintf_r>
 802e3e6:	1c43      	adds	r3, r0, #1
 802e3e8:	bfbc      	itt	lt
 802e3ea:	238b      	movlt	r3, #139	@ 0x8b
 802e3ec:	602b      	strlt	r3, [r5, #0]
 802e3ee:	2c00      	cmp	r4, #0
 802e3f0:	d0dd      	beq.n	802e3ae <sniprintf+0x16>
 802e3f2:	9b02      	ldr	r3, [sp, #8]
 802e3f4:	2200      	movs	r2, #0
 802e3f6:	701a      	strb	r2, [r3, #0]
 802e3f8:	e7d9      	b.n	802e3ae <sniprintf+0x16>
 802e3fa:	bf00      	nop
 802e3fc:	20000254 	.word	0x20000254

0802e400 <__ssprint_r>:
 802e400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e404:	6893      	ldr	r3, [r2, #8]
 802e406:	f8d2 b000 	ldr.w	fp, [r2]
 802e40a:	9001      	str	r0, [sp, #4]
 802e40c:	460c      	mov	r4, r1
 802e40e:	4617      	mov	r7, r2
 802e410:	2b00      	cmp	r3, #0
 802e412:	d157      	bne.n	802e4c4 <__ssprint_r+0xc4>
 802e414:	2000      	movs	r0, #0
 802e416:	2300      	movs	r3, #0
 802e418:	607b      	str	r3, [r7, #4]
 802e41a:	b003      	add	sp, #12
 802e41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e420:	e9db a800 	ldrd	sl, r8, [fp]
 802e424:	f10b 0b08 	add.w	fp, fp, #8
 802e428:	68a6      	ldr	r6, [r4, #8]
 802e42a:	6820      	ldr	r0, [r4, #0]
 802e42c:	f1b8 0f00 	cmp.w	r8, #0
 802e430:	d0f6      	beq.n	802e420 <__ssprint_r+0x20>
 802e432:	45b0      	cmp	r8, r6
 802e434:	d32e      	bcc.n	802e494 <__ssprint_r+0x94>
 802e436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e43a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802e43e:	d029      	beq.n	802e494 <__ssprint_r+0x94>
 802e440:	6921      	ldr	r1, [r4, #16]
 802e442:	6965      	ldr	r5, [r4, #20]
 802e444:	eba0 0901 	sub.w	r9, r0, r1
 802e448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802e44c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802e450:	f109 0001 	add.w	r0, r9, #1
 802e454:	106d      	asrs	r5, r5, #1
 802e456:	4440      	add	r0, r8
 802e458:	4285      	cmp	r5, r0
 802e45a:	bf38      	it	cc
 802e45c:	4605      	movcc	r5, r0
 802e45e:	0553      	lsls	r3, r2, #21
 802e460:	d534      	bpl.n	802e4cc <__ssprint_r+0xcc>
 802e462:	9801      	ldr	r0, [sp, #4]
 802e464:	4629      	mov	r1, r5
 802e466:	f7ff fd21 	bl	802deac <_malloc_r>
 802e46a:	4606      	mov	r6, r0
 802e46c:	2800      	cmp	r0, #0
 802e46e:	d038      	beq.n	802e4e2 <__ssprint_r+0xe2>
 802e470:	464a      	mov	r2, r9
 802e472:	6921      	ldr	r1, [r4, #16]
 802e474:	f7fe fd00 	bl	802ce78 <memcpy>
 802e478:	89a2      	ldrh	r2, [r4, #12]
 802e47a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802e47e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802e482:	81a2      	strh	r2, [r4, #12]
 802e484:	6126      	str	r6, [r4, #16]
 802e486:	6165      	str	r5, [r4, #20]
 802e488:	444e      	add	r6, r9
 802e48a:	eba5 0509 	sub.w	r5, r5, r9
 802e48e:	6026      	str	r6, [r4, #0]
 802e490:	60a5      	str	r5, [r4, #8]
 802e492:	4646      	mov	r6, r8
 802e494:	4546      	cmp	r6, r8
 802e496:	bf28      	it	cs
 802e498:	4646      	movcs	r6, r8
 802e49a:	4632      	mov	r2, r6
 802e49c:	4651      	mov	r1, sl
 802e49e:	6820      	ldr	r0, [r4, #0]
 802e4a0:	f7fd fa94 	bl	802b9cc <memmove>
 802e4a4:	68a2      	ldr	r2, [r4, #8]
 802e4a6:	1b92      	subs	r2, r2, r6
 802e4a8:	60a2      	str	r2, [r4, #8]
 802e4aa:	6822      	ldr	r2, [r4, #0]
 802e4ac:	4432      	add	r2, r6
 802e4ae:	6022      	str	r2, [r4, #0]
 802e4b0:	68ba      	ldr	r2, [r7, #8]
 802e4b2:	eba2 0308 	sub.w	r3, r2, r8
 802e4b6:	44c2      	add	sl, r8
 802e4b8:	60bb      	str	r3, [r7, #8]
 802e4ba:	2b00      	cmp	r3, #0
 802e4bc:	d0aa      	beq.n	802e414 <__ssprint_r+0x14>
 802e4be:	f04f 0800 	mov.w	r8, #0
 802e4c2:	e7b1      	b.n	802e428 <__ssprint_r+0x28>
 802e4c4:	f04f 0a00 	mov.w	sl, #0
 802e4c8:	46d0      	mov	r8, sl
 802e4ca:	e7ad      	b.n	802e428 <__ssprint_r+0x28>
 802e4cc:	9801      	ldr	r0, [sp, #4]
 802e4ce:	462a      	mov	r2, r5
 802e4d0:	f004 fcfc 	bl	8032ecc <_realloc_r>
 802e4d4:	4606      	mov	r6, r0
 802e4d6:	2800      	cmp	r0, #0
 802e4d8:	d1d4      	bne.n	802e484 <__ssprint_r+0x84>
 802e4da:	6921      	ldr	r1, [r4, #16]
 802e4dc:	9801      	ldr	r0, [sp, #4]
 802e4de:	f7ff fbcd 	bl	802dc7c <_free_r>
 802e4e2:	9a01      	ldr	r2, [sp, #4]
 802e4e4:	230c      	movs	r3, #12
 802e4e6:	6013      	str	r3, [r2, #0]
 802e4e8:	89a3      	ldrh	r3, [r4, #12]
 802e4ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802e4ee:	81a3      	strh	r3, [r4, #12]
 802e4f0:	2300      	movs	r3, #0
 802e4f2:	60bb      	str	r3, [r7, #8]
 802e4f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e4f8:	e78d      	b.n	802e416 <__ssprint_r+0x16>
	...

0802e4fc <_svfiprintf_r>:
 802e4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e500:	461d      	mov	r5, r3
 802e502:	898b      	ldrh	r3, [r1, #12]
 802e504:	b0bb      	sub	sp, #236	@ 0xec
 802e506:	468b      	mov	fp, r1
 802e508:	0619      	lsls	r1, r3, #24
 802e50a:	9001      	str	r0, [sp, #4]
 802e50c:	9202      	str	r2, [sp, #8]
 802e50e:	d514      	bpl.n	802e53a <_svfiprintf_r+0x3e>
 802e510:	f8db 3010 	ldr.w	r3, [fp, #16]
 802e514:	b98b      	cbnz	r3, 802e53a <_svfiprintf_r+0x3e>
 802e516:	2140      	movs	r1, #64	@ 0x40
 802e518:	f7ff fcc8 	bl	802deac <_malloc_r>
 802e51c:	f8cb 0000 	str.w	r0, [fp]
 802e520:	f8cb 0010 	str.w	r0, [fp, #16]
 802e524:	b930      	cbnz	r0, 802e534 <_svfiprintf_r+0x38>
 802e526:	9a01      	ldr	r2, [sp, #4]
 802e528:	230c      	movs	r3, #12
 802e52a:	6013      	str	r3, [r2, #0]
 802e52c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e530:	9304      	str	r3, [sp, #16]
 802e532:	e3df      	b.n	802ecf4 <_svfiprintf_r+0x7f8>
 802e534:	2340      	movs	r3, #64	@ 0x40
 802e536:	f8cb 3014 	str.w	r3, [fp, #20]
 802e53a:	2300      	movs	r3, #0
 802e53c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802e540:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802e544:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802e548:	ae11      	add	r6, sp, #68	@ 0x44
 802e54a:	960e      	str	r6, [sp, #56]	@ 0x38
 802e54c:	9304      	str	r3, [sp, #16]
 802e54e:	9b02      	ldr	r3, [sp, #8]
 802e550:	461c      	mov	r4, r3
 802e552:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e556:	b10a      	cbz	r2, 802e55c <_svfiprintf_r+0x60>
 802e558:	2a25      	cmp	r2, #37	@ 0x25
 802e55a:	d1f9      	bne.n	802e550 <_svfiprintf_r+0x54>
 802e55c:	9a02      	ldr	r2, [sp, #8]
 802e55e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802e560:	1aa7      	subs	r7, r4, r2
 802e562:	d00c      	beq.n	802e57e <_svfiprintf_r+0x82>
 802e564:	443b      	add	r3, r7
 802e566:	9310      	str	r3, [sp, #64]	@ 0x40
 802e568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e56a:	3301      	adds	r3, #1
 802e56c:	2b07      	cmp	r3, #7
 802e56e:	e9c6 2700 	strd	r2, r7, [r6]
 802e572:	930f      	str	r3, [sp, #60]	@ 0x3c
 802e574:	dc76      	bgt.n	802e664 <_svfiprintf_r+0x168>
 802e576:	3608      	adds	r6, #8
 802e578:	9b04      	ldr	r3, [sp, #16]
 802e57a:	443b      	add	r3, r7
 802e57c:	9304      	str	r3, [sp, #16]
 802e57e:	7823      	ldrb	r3, [r4, #0]
 802e580:	2b00      	cmp	r3, #0
 802e582:	f000 83ce 	beq.w	802ed22 <_svfiprintf_r+0x826>
 802e586:	2300      	movs	r3, #0
 802e588:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802e58c:	3401      	adds	r4, #1
 802e58e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802e592:	9200      	str	r2, [sp, #0]
 802e594:	9303      	str	r3, [sp, #12]
 802e596:	4699      	mov	r9, r3
 802e598:	4622      	mov	r2, r4
 802e59a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802e59e:	9202      	str	r2, [sp, #8]
 802e5a0:	f1a3 0220 	sub.w	r2, r3, #32
 802e5a4:	2a5a      	cmp	r2, #90	@ 0x5a
 802e5a6:	f200 8318 	bhi.w	802ebda <_svfiprintf_r+0x6de>
 802e5aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 802e5ae:	009a      	.short	0x009a
 802e5b0:	03160316 	.word	0x03160316
 802e5b4:	031600a2 	.word	0x031600a2
 802e5b8:	03160316 	.word	0x03160316
 802e5bc:	03160082 	.word	0x03160082
 802e5c0:	00a50316 	.word	0x00a50316
 802e5c4:	031600af 	.word	0x031600af
 802e5c8:	00b100ac 	.word	0x00b100ac
 802e5cc:	00cc0316 	.word	0x00cc0316
 802e5d0:	00cf00cf 	.word	0x00cf00cf
 802e5d4:	00cf00cf 	.word	0x00cf00cf
 802e5d8:	00cf00cf 	.word	0x00cf00cf
 802e5dc:	00cf00cf 	.word	0x00cf00cf
 802e5e0:	031600cf 	.word	0x031600cf
 802e5e4:	03160316 	.word	0x03160316
 802e5e8:	03160316 	.word	0x03160316
 802e5ec:	03160316 	.word	0x03160316
 802e5f0:	03160316 	.word	0x03160316
 802e5f4:	010600f9 	.word	0x010600f9
 802e5f8:	03160316 	.word	0x03160316
 802e5fc:	03160316 	.word	0x03160316
 802e600:	03160316 	.word	0x03160316
 802e604:	03160316 	.word	0x03160316
 802e608:	03160316 	.word	0x03160316
 802e60c:	03160154 	.word	0x03160154
 802e610:	03160316 	.word	0x03160316
 802e614:	0316019b 	.word	0x0316019b
 802e618:	0316027d 	.word	0x0316027d
 802e61c:	029d0316 	.word	0x029d0316
 802e620:	03160316 	.word	0x03160316
 802e624:	03160316 	.word	0x03160316
 802e628:	03160316 	.word	0x03160316
 802e62c:	03160316 	.word	0x03160316
 802e630:	03160316 	.word	0x03160316
 802e634:	010800f9 	.word	0x010800f9
 802e638:	03160316 	.word	0x03160316
 802e63c:	00df0316 	.word	0x00df0316
 802e640:	00f30108 	.word	0x00f30108
 802e644:	00ec0316 	.word	0x00ec0316
 802e648:	01340316 	.word	0x01340316
 802e64c:	018a0156 	.word	0x018a0156
 802e650:	031600f3 	.word	0x031600f3
 802e654:	0098019b 	.word	0x0098019b
 802e658:	0316027f 	.word	0x0316027f
 802e65c:	00650316 	.word	0x00650316
 802e660:	00980316 	.word	0x00980316
 802e664:	9801      	ldr	r0, [sp, #4]
 802e666:	aa0e      	add	r2, sp, #56	@ 0x38
 802e668:	4659      	mov	r1, fp
 802e66a:	f7ff fec9 	bl	802e400 <__ssprint_r>
 802e66e:	2800      	cmp	r0, #0
 802e670:	f040 833b 	bne.w	802ecea <_svfiprintf_r+0x7ee>
 802e674:	ae11      	add	r6, sp, #68	@ 0x44
 802e676:	e77f      	b.n	802e578 <_svfiprintf_r+0x7c>
 802e678:	4a99      	ldr	r2, [pc, #612]	@ (802e8e0 <_svfiprintf_r+0x3e4>)
 802e67a:	9205      	str	r2, [sp, #20]
 802e67c:	f019 0220 	ands.w	r2, r9, #32
 802e680:	f000 8234 	beq.w	802eaec <_svfiprintf_r+0x5f0>
 802e684:	3507      	adds	r5, #7
 802e686:	f025 0507 	bic.w	r5, r5, #7
 802e68a:	462f      	mov	r7, r5
 802e68c:	686d      	ldr	r5, [r5, #4]
 802e68e:	f857 4b08 	ldr.w	r4, [r7], #8
 802e692:	f019 0f01 	tst.w	r9, #1
 802e696:	d009      	beq.n	802e6ac <_svfiprintf_r+0x1b0>
 802e698:	ea54 0205 	orrs.w	r2, r4, r5
 802e69c:	bf1f      	itttt	ne
 802e69e:	2230      	movne	r2, #48	@ 0x30
 802e6a0:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802e6a4:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802e6a8:	f049 0902 	orrne.w	r9, r9, #2
 802e6ac:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802e6b0:	e113      	b.n	802e8da <_svfiprintf_r+0x3de>
 802e6b2:	9801      	ldr	r0, [sp, #4]
 802e6b4:	f7fe fb32 	bl	802cd1c <_localeconv_r>
 802e6b8:	6843      	ldr	r3, [r0, #4]
 802e6ba:	9308      	str	r3, [sp, #32]
 802e6bc:	4618      	mov	r0, r3
 802e6be:	f7e1 fdef 	bl	80102a0 <strlen>
 802e6c2:	9007      	str	r0, [sp, #28]
 802e6c4:	9801      	ldr	r0, [sp, #4]
 802e6c6:	f7fe fb29 	bl	802cd1c <_localeconv_r>
 802e6ca:	6883      	ldr	r3, [r0, #8]
 802e6cc:	9306      	str	r3, [sp, #24]
 802e6ce:	9b07      	ldr	r3, [sp, #28]
 802e6d0:	b12b      	cbz	r3, 802e6de <_svfiprintf_r+0x1e2>
 802e6d2:	9b06      	ldr	r3, [sp, #24]
 802e6d4:	b11b      	cbz	r3, 802e6de <_svfiprintf_r+0x1e2>
 802e6d6:	781b      	ldrb	r3, [r3, #0]
 802e6d8:	b10b      	cbz	r3, 802e6de <_svfiprintf_r+0x1e2>
 802e6da:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802e6de:	9c02      	ldr	r4, [sp, #8]
 802e6e0:	e75a      	b.n	802e598 <_svfiprintf_r+0x9c>
 802e6e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802e6e6:	2b00      	cmp	r3, #0
 802e6e8:	d1f9      	bne.n	802e6de <_svfiprintf_r+0x1e2>
 802e6ea:	2320      	movs	r3, #32
 802e6ec:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802e6f0:	e7f5      	b.n	802e6de <_svfiprintf_r+0x1e2>
 802e6f2:	f049 0901 	orr.w	r9, r9, #1
 802e6f6:	e7f2      	b.n	802e6de <_svfiprintf_r+0x1e2>
 802e6f8:	f855 3b04 	ldr.w	r3, [r5], #4
 802e6fc:	9303      	str	r3, [sp, #12]
 802e6fe:	2b00      	cmp	r3, #0
 802e700:	daed      	bge.n	802e6de <_svfiprintf_r+0x1e2>
 802e702:	425b      	negs	r3, r3
 802e704:	9303      	str	r3, [sp, #12]
 802e706:	f049 0904 	orr.w	r9, r9, #4
 802e70a:	e7e8      	b.n	802e6de <_svfiprintf_r+0x1e2>
 802e70c:	232b      	movs	r3, #43	@ 0x2b
 802e70e:	e7ed      	b.n	802e6ec <_svfiprintf_r+0x1f0>
 802e710:	9a02      	ldr	r2, [sp, #8]
 802e712:	f812 3b01 	ldrb.w	r3, [r2], #1
 802e716:	2b2a      	cmp	r3, #42	@ 0x2a
 802e718:	d111      	bne.n	802e73e <_svfiprintf_r+0x242>
 802e71a:	f855 3b04 	ldr.w	r3, [r5], #4
 802e71e:	9202      	str	r2, [sp, #8]
 802e720:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802e724:	9300      	str	r3, [sp, #0]
 802e726:	e7da      	b.n	802e6de <_svfiprintf_r+0x1e2>
 802e728:	9b00      	ldr	r3, [sp, #0]
 802e72a:	fb00 1303 	mla	r3, r0, r3, r1
 802e72e:	9300      	str	r3, [sp, #0]
 802e730:	f812 3b01 	ldrb.w	r3, [r2], #1
 802e734:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802e738:	2909      	cmp	r1, #9
 802e73a:	d9f5      	bls.n	802e728 <_svfiprintf_r+0x22c>
 802e73c:	e72f      	b.n	802e59e <_svfiprintf_r+0xa2>
 802e73e:	2100      	movs	r1, #0
 802e740:	9100      	str	r1, [sp, #0]
 802e742:	200a      	movs	r0, #10
 802e744:	e7f6      	b.n	802e734 <_svfiprintf_r+0x238>
 802e746:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802e74a:	e7c8      	b.n	802e6de <_svfiprintf_r+0x1e2>
 802e74c:	2100      	movs	r1, #0
 802e74e:	9a02      	ldr	r2, [sp, #8]
 802e750:	9103      	str	r1, [sp, #12]
 802e752:	200a      	movs	r0, #10
 802e754:	9903      	ldr	r1, [sp, #12]
 802e756:	3b30      	subs	r3, #48	@ 0x30
 802e758:	fb00 3301 	mla	r3, r0, r1, r3
 802e75c:	9303      	str	r3, [sp, #12]
 802e75e:	f812 3b01 	ldrb.w	r3, [r2], #1
 802e762:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802e766:	2909      	cmp	r1, #9
 802e768:	d9f4      	bls.n	802e754 <_svfiprintf_r+0x258>
 802e76a:	e718      	b.n	802e59e <_svfiprintf_r+0xa2>
 802e76c:	9b02      	ldr	r3, [sp, #8]
 802e76e:	781b      	ldrb	r3, [r3, #0]
 802e770:	2b68      	cmp	r3, #104	@ 0x68
 802e772:	bf01      	itttt	eq
 802e774:	9b02      	ldreq	r3, [sp, #8]
 802e776:	3301      	addeq	r3, #1
 802e778:	9302      	streq	r3, [sp, #8]
 802e77a:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802e77e:	bf18      	it	ne
 802e780:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802e784:	e7ab      	b.n	802e6de <_svfiprintf_r+0x1e2>
 802e786:	9b02      	ldr	r3, [sp, #8]
 802e788:	781b      	ldrb	r3, [r3, #0]
 802e78a:	2b6c      	cmp	r3, #108	@ 0x6c
 802e78c:	d105      	bne.n	802e79a <_svfiprintf_r+0x29e>
 802e78e:	9b02      	ldr	r3, [sp, #8]
 802e790:	3301      	adds	r3, #1
 802e792:	9302      	str	r3, [sp, #8]
 802e794:	f049 0920 	orr.w	r9, r9, #32
 802e798:	e7a1      	b.n	802e6de <_svfiprintf_r+0x1e2>
 802e79a:	f049 0910 	orr.w	r9, r9, #16
 802e79e:	e79e      	b.n	802e6de <_svfiprintf_r+0x1e2>
 802e7a0:	462f      	mov	r7, r5
 802e7a2:	2400      	movs	r4, #0
 802e7a4:	f857 3b04 	ldr.w	r3, [r7], #4
 802e7a8:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802e7ac:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802e7b0:	2301      	movs	r3, #1
 802e7b2:	9300      	str	r3, [sp, #0]
 802e7b4:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802e7b8:	e0aa      	b.n	802e910 <_svfiprintf_r+0x414>
 802e7ba:	f049 0910 	orr.w	r9, r9, #16
 802e7be:	f019 0f20 	tst.w	r9, #32
 802e7c2:	d011      	beq.n	802e7e8 <_svfiprintf_r+0x2ec>
 802e7c4:	3507      	adds	r5, #7
 802e7c6:	f025 0507 	bic.w	r5, r5, #7
 802e7ca:	462f      	mov	r7, r5
 802e7cc:	686d      	ldr	r5, [r5, #4]
 802e7ce:	f857 4b08 	ldr.w	r4, [r7], #8
 802e7d2:	2d00      	cmp	r5, #0
 802e7d4:	da06      	bge.n	802e7e4 <_svfiprintf_r+0x2e8>
 802e7d6:	4264      	negs	r4, r4
 802e7d8:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802e7dc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802e7e0:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802e7e4:	2301      	movs	r3, #1
 802e7e6:	e048      	b.n	802e87a <_svfiprintf_r+0x37e>
 802e7e8:	462f      	mov	r7, r5
 802e7ea:	f019 0f10 	tst.w	r9, #16
 802e7ee:	f857 5b04 	ldr.w	r5, [r7], #4
 802e7f2:	d002      	beq.n	802e7fa <_svfiprintf_r+0x2fe>
 802e7f4:	462c      	mov	r4, r5
 802e7f6:	17ed      	asrs	r5, r5, #31
 802e7f8:	e7eb      	b.n	802e7d2 <_svfiprintf_r+0x2d6>
 802e7fa:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802e7fe:	d003      	beq.n	802e808 <_svfiprintf_r+0x30c>
 802e800:	b22c      	sxth	r4, r5
 802e802:	f345 35c0 	sbfx	r5, r5, #15, #1
 802e806:	e7e4      	b.n	802e7d2 <_svfiprintf_r+0x2d6>
 802e808:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802e80c:	d0f2      	beq.n	802e7f4 <_svfiprintf_r+0x2f8>
 802e80e:	b26c      	sxtb	r4, r5
 802e810:	f345 15c0 	sbfx	r5, r5, #7, #1
 802e814:	e7dd      	b.n	802e7d2 <_svfiprintf_r+0x2d6>
 802e816:	f019 0f20 	tst.w	r9, #32
 802e81a:	d007      	beq.n	802e82c <_svfiprintf_r+0x330>
 802e81c:	9a04      	ldr	r2, [sp, #16]
 802e81e:	682b      	ldr	r3, [r5, #0]
 802e820:	9904      	ldr	r1, [sp, #16]
 802e822:	17d2      	asrs	r2, r2, #31
 802e824:	e9c3 1200 	strd	r1, r2, [r3]
 802e828:	3504      	adds	r5, #4
 802e82a:	e690      	b.n	802e54e <_svfiprintf_r+0x52>
 802e82c:	f019 0f10 	tst.w	r9, #16
 802e830:	d003      	beq.n	802e83a <_svfiprintf_r+0x33e>
 802e832:	682b      	ldr	r3, [r5, #0]
 802e834:	9a04      	ldr	r2, [sp, #16]
 802e836:	601a      	str	r2, [r3, #0]
 802e838:	e7f6      	b.n	802e828 <_svfiprintf_r+0x32c>
 802e83a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802e83e:	d003      	beq.n	802e848 <_svfiprintf_r+0x34c>
 802e840:	682b      	ldr	r3, [r5, #0]
 802e842:	9a04      	ldr	r2, [sp, #16]
 802e844:	801a      	strh	r2, [r3, #0]
 802e846:	e7ef      	b.n	802e828 <_svfiprintf_r+0x32c>
 802e848:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802e84c:	d0f1      	beq.n	802e832 <_svfiprintf_r+0x336>
 802e84e:	682b      	ldr	r3, [r5, #0]
 802e850:	9a04      	ldr	r2, [sp, #16]
 802e852:	701a      	strb	r2, [r3, #0]
 802e854:	e7e8      	b.n	802e828 <_svfiprintf_r+0x32c>
 802e856:	f049 0910 	orr.w	r9, r9, #16
 802e85a:	f019 0320 	ands.w	r3, r9, #32
 802e85e:	d01e      	beq.n	802e89e <_svfiprintf_r+0x3a2>
 802e860:	3507      	adds	r5, #7
 802e862:	f025 0507 	bic.w	r5, r5, #7
 802e866:	462f      	mov	r7, r5
 802e868:	686d      	ldr	r5, [r5, #4]
 802e86a:	f857 4b08 	ldr.w	r4, [r7], #8
 802e86e:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802e872:	2300      	movs	r3, #0
 802e874:	2200      	movs	r2, #0
 802e876:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802e87a:	9a00      	ldr	r2, [sp, #0]
 802e87c:	3201      	adds	r2, #1
 802e87e:	f000 8259 	beq.w	802ed34 <_svfiprintf_r+0x838>
 802e882:	ea54 0205 	orrs.w	r2, r4, r5
 802e886:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802e88a:	f040 8258 	bne.w	802ed3e <_svfiprintf_r+0x842>
 802e88e:	9a00      	ldr	r2, [sp, #0]
 802e890:	2a00      	cmp	r2, #0
 802e892:	f000 8199 	beq.w	802ebc8 <_svfiprintf_r+0x6cc>
 802e896:	2b01      	cmp	r3, #1
 802e898:	f040 8254 	bne.w	802ed44 <_svfiprintf_r+0x848>
 802e89c:	e13d      	b.n	802eb1a <_svfiprintf_r+0x61e>
 802e89e:	462f      	mov	r7, r5
 802e8a0:	f019 0510 	ands.w	r5, r9, #16
 802e8a4:	f857 4b04 	ldr.w	r4, [r7], #4
 802e8a8:	d001      	beq.n	802e8ae <_svfiprintf_r+0x3b2>
 802e8aa:	461d      	mov	r5, r3
 802e8ac:	e7df      	b.n	802e86e <_svfiprintf_r+0x372>
 802e8ae:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802e8b2:	d001      	beq.n	802e8b8 <_svfiprintf_r+0x3bc>
 802e8b4:	b2a4      	uxth	r4, r4
 802e8b6:	e7da      	b.n	802e86e <_svfiprintf_r+0x372>
 802e8b8:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802e8bc:	d0d7      	beq.n	802e86e <_svfiprintf_r+0x372>
 802e8be:	b2e4      	uxtb	r4, r4
 802e8c0:	e7f3      	b.n	802e8aa <_svfiprintf_r+0x3ae>
 802e8c2:	462f      	mov	r7, r5
 802e8c4:	f647 0330 	movw	r3, #30768	@ 0x7830
 802e8c8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802e8cc:	f857 4b04 	ldr.w	r4, [r7], #4
 802e8d0:	4b03      	ldr	r3, [pc, #12]	@ (802e8e0 <_svfiprintf_r+0x3e4>)
 802e8d2:	9305      	str	r3, [sp, #20]
 802e8d4:	2500      	movs	r5, #0
 802e8d6:	f049 0902 	orr.w	r9, r9, #2
 802e8da:	2302      	movs	r3, #2
 802e8dc:	e7ca      	b.n	802e874 <_svfiprintf_r+0x378>
 802e8de:	bf00      	nop
 802e8e0:	0803a70f 	.word	0x0803a70f
 802e8e4:	9b00      	ldr	r3, [sp, #0]
 802e8e6:	462f      	mov	r7, r5
 802e8e8:	1c5a      	adds	r2, r3, #1
 802e8ea:	f04f 0500 	mov.w	r5, #0
 802e8ee:	f857 8b04 	ldr.w	r8, [r7], #4
 802e8f2:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802e8f6:	f000 80d2 	beq.w	802ea9e <_svfiprintf_r+0x5a2>
 802e8fa:	461a      	mov	r2, r3
 802e8fc:	4629      	mov	r1, r5
 802e8fe:	4640      	mov	r0, r8
 802e900:	f7e1 fc7e 	bl	8010200 <memchr>
 802e904:	4604      	mov	r4, r0
 802e906:	b118      	cbz	r0, 802e910 <_svfiprintf_r+0x414>
 802e908:	eba0 0308 	sub.w	r3, r0, r8
 802e90c:	9300      	str	r3, [sp, #0]
 802e90e:	462c      	mov	r4, r5
 802e910:	9d00      	ldr	r5, [sp, #0]
 802e912:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802e916:	42a5      	cmp	r5, r4
 802e918:	bfb8      	it	lt
 802e91a:	4625      	movlt	r5, r4
 802e91c:	b103      	cbz	r3, 802e920 <_svfiprintf_r+0x424>
 802e91e:	3501      	adds	r5, #1
 802e920:	f019 0302 	ands.w	r3, r9, #2
 802e924:	9309      	str	r3, [sp, #36]	@ 0x24
 802e926:	bf18      	it	ne
 802e928:	3502      	addne	r5, #2
 802e92a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802e92e:	930a      	str	r3, [sp, #40]	@ 0x28
 802e930:	d123      	bne.n	802e97a <_svfiprintf_r+0x47e>
 802e932:	9b03      	ldr	r3, [sp, #12]
 802e934:	eba3 0a05 	sub.w	sl, r3, r5
 802e938:	f1ba 0f00 	cmp.w	sl, #0
 802e93c:	dd1d      	ble.n	802e97a <_svfiprintf_r+0x47e>
 802e93e:	4bac      	ldr	r3, [pc, #688]	@ (802ebf0 <_svfiprintf_r+0x6f4>)
 802e940:	6033      	str	r3, [r6, #0]
 802e942:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802e946:	f1ba 0f10 	cmp.w	sl, #16
 802e94a:	f102 0201 	add.w	r2, r2, #1
 802e94e:	f106 0008 	add.w	r0, r6, #8
 802e952:	f300 8153 	bgt.w	802ebfc <_svfiprintf_r+0x700>
 802e956:	eb0c 010a 	add.w	r1, ip, sl
 802e95a:	2a07      	cmp	r2, #7
 802e95c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802e960:	f8c6 a004 	str.w	sl, [r6, #4]
 802e964:	f340 815e 	ble.w	802ec24 <_svfiprintf_r+0x728>
 802e968:	9801      	ldr	r0, [sp, #4]
 802e96a:	aa0e      	add	r2, sp, #56	@ 0x38
 802e96c:	4659      	mov	r1, fp
 802e96e:	f7ff fd47 	bl	802e400 <__ssprint_r>
 802e972:	2800      	cmp	r0, #0
 802e974:	f040 81b9 	bne.w	802ecea <_svfiprintf_r+0x7ee>
 802e978:	ae11      	add	r6, sp, #68	@ 0x44
 802e97a:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802e97e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802e982:	b161      	cbz	r1, 802e99e <_svfiprintf_r+0x4a2>
 802e984:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802e988:	3301      	adds	r3, #1
 802e98a:	6031      	str	r1, [r6, #0]
 802e98c:	2101      	movs	r1, #1
 802e98e:	440a      	add	r2, r1
 802e990:	2b07      	cmp	r3, #7
 802e992:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802e996:	6071      	str	r1, [r6, #4]
 802e998:	f300 8146 	bgt.w	802ec28 <_svfiprintf_r+0x72c>
 802e99c:	3608      	adds	r6, #8
 802e99e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802e9a0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802e9a4:	b159      	cbz	r1, 802e9be <_svfiprintf_r+0x4c2>
 802e9a6:	a90d      	add	r1, sp, #52	@ 0x34
 802e9a8:	3301      	adds	r3, #1
 802e9aa:	6031      	str	r1, [r6, #0]
 802e9ac:	2102      	movs	r1, #2
 802e9ae:	440a      	add	r2, r1
 802e9b0:	2b07      	cmp	r3, #7
 802e9b2:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802e9b6:	6071      	str	r1, [r6, #4]
 802e9b8:	f300 813f 	bgt.w	802ec3a <_svfiprintf_r+0x73e>
 802e9bc:	3608      	adds	r6, #8
 802e9be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e9c0:	2b80      	cmp	r3, #128	@ 0x80
 802e9c2:	d123      	bne.n	802ea0c <_svfiprintf_r+0x510>
 802e9c4:	9b03      	ldr	r3, [sp, #12]
 802e9c6:	eba3 0a05 	sub.w	sl, r3, r5
 802e9ca:	f1ba 0f00 	cmp.w	sl, #0
 802e9ce:	dd1d      	ble.n	802ea0c <_svfiprintf_r+0x510>
 802e9d0:	4b88      	ldr	r3, [pc, #544]	@ (802ebf4 <_svfiprintf_r+0x6f8>)
 802e9d2:	6033      	str	r3, [r6, #0]
 802e9d4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802e9d8:	f1ba 0f10 	cmp.w	sl, #16
 802e9dc:	f102 0201 	add.w	r2, r2, #1
 802e9e0:	f106 0008 	add.w	r0, r6, #8
 802e9e4:	f300 8132 	bgt.w	802ec4c <_svfiprintf_r+0x750>
 802e9e8:	eb0c 010a 	add.w	r1, ip, sl
 802e9ec:	2a07      	cmp	r2, #7
 802e9ee:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802e9f2:	f8c6 a004 	str.w	sl, [r6, #4]
 802e9f6:	f340 813d 	ble.w	802ec74 <_svfiprintf_r+0x778>
 802e9fa:	9801      	ldr	r0, [sp, #4]
 802e9fc:	aa0e      	add	r2, sp, #56	@ 0x38
 802e9fe:	4659      	mov	r1, fp
 802ea00:	f7ff fcfe 	bl	802e400 <__ssprint_r>
 802ea04:	2800      	cmp	r0, #0
 802ea06:	f040 8170 	bne.w	802ecea <_svfiprintf_r+0x7ee>
 802ea0a:	ae11      	add	r6, sp, #68	@ 0x44
 802ea0c:	9b00      	ldr	r3, [sp, #0]
 802ea0e:	1ae4      	subs	r4, r4, r3
 802ea10:	2c00      	cmp	r4, #0
 802ea12:	dd1a      	ble.n	802ea4a <_svfiprintf_r+0x54e>
 802ea14:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ea18:	4876      	ldr	r0, [pc, #472]	@ (802ebf4 <_svfiprintf_r+0x6f8>)
 802ea1a:	6030      	str	r0, [r6, #0]
 802ea1c:	2c10      	cmp	r4, #16
 802ea1e:	f103 0301 	add.w	r3, r3, #1
 802ea22:	f106 0108 	add.w	r1, r6, #8
 802ea26:	f300 8127 	bgt.w	802ec78 <_svfiprintf_r+0x77c>
 802ea2a:	6074      	str	r4, [r6, #4]
 802ea2c:	2b07      	cmp	r3, #7
 802ea2e:	4414      	add	r4, r2
 802ea30:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802ea34:	f340 8131 	ble.w	802ec9a <_svfiprintf_r+0x79e>
 802ea38:	9801      	ldr	r0, [sp, #4]
 802ea3a:	aa0e      	add	r2, sp, #56	@ 0x38
 802ea3c:	4659      	mov	r1, fp
 802ea3e:	f7ff fcdf 	bl	802e400 <__ssprint_r>
 802ea42:	2800      	cmp	r0, #0
 802ea44:	f040 8151 	bne.w	802ecea <_svfiprintf_r+0x7ee>
 802ea48:	ae11      	add	r6, sp, #68	@ 0x44
 802ea4a:	9b00      	ldr	r3, [sp, #0]
 802ea4c:	9a00      	ldr	r2, [sp, #0]
 802ea4e:	6073      	str	r3, [r6, #4]
 802ea50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ea52:	f8c6 8000 	str.w	r8, [r6]
 802ea56:	4413      	add	r3, r2
 802ea58:	9310      	str	r3, [sp, #64]	@ 0x40
 802ea5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ea5c:	3301      	adds	r3, #1
 802ea5e:	2b07      	cmp	r3, #7
 802ea60:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ea62:	f300 811c 	bgt.w	802ec9e <_svfiprintf_r+0x7a2>
 802ea66:	f106 0308 	add.w	r3, r6, #8
 802ea6a:	f019 0f04 	tst.w	r9, #4
 802ea6e:	f040 811e 	bne.w	802ecae <_svfiprintf_r+0x7b2>
 802ea72:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 802ea76:	42aa      	cmp	r2, r5
 802ea78:	bfac      	ite	ge
 802ea7a:	189b      	addge	r3, r3, r2
 802ea7c:	195b      	addlt	r3, r3, r5
 802ea7e:	9304      	str	r3, [sp, #16]
 802ea80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ea82:	b13b      	cbz	r3, 802ea94 <_svfiprintf_r+0x598>
 802ea84:	9801      	ldr	r0, [sp, #4]
 802ea86:	aa0e      	add	r2, sp, #56	@ 0x38
 802ea88:	4659      	mov	r1, fp
 802ea8a:	f7ff fcb9 	bl	802e400 <__ssprint_r>
 802ea8e:	2800      	cmp	r0, #0
 802ea90:	f040 812b 	bne.w	802ecea <_svfiprintf_r+0x7ee>
 802ea94:	2300      	movs	r3, #0
 802ea96:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ea98:	463d      	mov	r5, r7
 802ea9a:	ae11      	add	r6, sp, #68	@ 0x44
 802ea9c:	e557      	b.n	802e54e <_svfiprintf_r+0x52>
 802ea9e:	4640      	mov	r0, r8
 802eaa0:	f7e1 fbfe 	bl	80102a0 <strlen>
 802eaa4:	9000      	str	r0, [sp, #0]
 802eaa6:	e732      	b.n	802e90e <_svfiprintf_r+0x412>
 802eaa8:	f049 0910 	orr.w	r9, r9, #16
 802eaac:	f019 0320 	ands.w	r3, r9, #32
 802eab0:	d008      	beq.n	802eac4 <_svfiprintf_r+0x5c8>
 802eab2:	3507      	adds	r5, #7
 802eab4:	f025 0507 	bic.w	r5, r5, #7
 802eab8:	462f      	mov	r7, r5
 802eaba:	686d      	ldr	r5, [r5, #4]
 802eabc:	f857 4b08 	ldr.w	r4, [r7], #8
 802eac0:	2301      	movs	r3, #1
 802eac2:	e6d7      	b.n	802e874 <_svfiprintf_r+0x378>
 802eac4:	462f      	mov	r7, r5
 802eac6:	f019 0510 	ands.w	r5, r9, #16
 802eaca:	f857 4b04 	ldr.w	r4, [r7], #4
 802eace:	d001      	beq.n	802ead4 <_svfiprintf_r+0x5d8>
 802ead0:	461d      	mov	r5, r3
 802ead2:	e7f5      	b.n	802eac0 <_svfiprintf_r+0x5c4>
 802ead4:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802ead8:	d001      	beq.n	802eade <_svfiprintf_r+0x5e2>
 802eada:	b2a4      	uxth	r4, r4
 802eadc:	e7f0      	b.n	802eac0 <_svfiprintf_r+0x5c4>
 802eade:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802eae2:	d0ed      	beq.n	802eac0 <_svfiprintf_r+0x5c4>
 802eae4:	b2e4      	uxtb	r4, r4
 802eae6:	e7f3      	b.n	802ead0 <_svfiprintf_r+0x5d4>
 802eae8:	4a43      	ldr	r2, [pc, #268]	@ (802ebf8 <_svfiprintf_r+0x6fc>)
 802eaea:	e5c6      	b.n	802e67a <_svfiprintf_r+0x17e>
 802eaec:	462f      	mov	r7, r5
 802eaee:	f019 0510 	ands.w	r5, r9, #16
 802eaf2:	f857 4b04 	ldr.w	r4, [r7], #4
 802eaf6:	d001      	beq.n	802eafc <_svfiprintf_r+0x600>
 802eaf8:	4615      	mov	r5, r2
 802eafa:	e5ca      	b.n	802e692 <_svfiprintf_r+0x196>
 802eafc:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 802eb00:	d001      	beq.n	802eb06 <_svfiprintf_r+0x60a>
 802eb02:	b2a4      	uxth	r4, r4
 802eb04:	e5c5      	b.n	802e692 <_svfiprintf_r+0x196>
 802eb06:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802eb0a:	f43f adc2 	beq.w	802e692 <_svfiprintf_r+0x196>
 802eb0e:	b2e4      	uxtb	r4, r4
 802eb10:	e7f2      	b.n	802eaf8 <_svfiprintf_r+0x5fc>
 802eb12:	2c0a      	cmp	r4, #10
 802eb14:	f175 0300 	sbcs.w	r3, r5, #0
 802eb18:	d206      	bcs.n	802eb28 <_svfiprintf_r+0x62c>
 802eb1a:	3430      	adds	r4, #48	@ 0x30
 802eb1c:	b2e4      	uxtb	r4, r4
 802eb1e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802eb22:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 802eb26:	e129      	b.n	802ed7c <_svfiprintf_r+0x880>
 802eb28:	ab3a      	add	r3, sp, #232	@ 0xe8
 802eb2a:	9309      	str	r3, [sp, #36]	@ 0x24
 802eb2c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 802eb30:	f04f 0900 	mov.w	r9, #0
 802eb34:	930a      	str	r3, [sp, #40]	@ 0x28
 802eb36:	220a      	movs	r2, #10
 802eb38:	2300      	movs	r3, #0
 802eb3a:	4620      	mov	r0, r4
 802eb3c:	4629      	mov	r1, r5
 802eb3e:	f7e2 f90b 	bl	8010d58 <__aeabi_uldivmod>
 802eb42:	460b      	mov	r3, r1
 802eb44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802eb46:	900b      	str	r0, [sp, #44]	@ 0x2c
 802eb48:	3230      	adds	r2, #48	@ 0x30
 802eb4a:	f801 2c01 	strb.w	r2, [r1, #-1]
 802eb4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802eb50:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 802eb54:	f109 0901 	add.w	r9, r9, #1
 802eb58:	b1e2      	cbz	r2, 802eb94 <_svfiprintf_r+0x698>
 802eb5a:	9a06      	ldr	r2, [sp, #24]
 802eb5c:	7812      	ldrb	r2, [r2, #0]
 802eb5e:	454a      	cmp	r2, r9
 802eb60:	d118      	bne.n	802eb94 <_svfiprintf_r+0x698>
 802eb62:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802eb66:	d015      	beq.n	802eb94 <_svfiprintf_r+0x698>
 802eb68:	2c0a      	cmp	r4, #10
 802eb6a:	f175 0200 	sbcs.w	r2, r5, #0
 802eb6e:	d311      	bcc.n	802eb94 <_svfiprintf_r+0x698>
 802eb70:	9309      	str	r3, [sp, #36]	@ 0x24
 802eb72:	9b07      	ldr	r3, [sp, #28]
 802eb74:	9908      	ldr	r1, [sp, #32]
 802eb76:	eba8 0803 	sub.w	r8, r8, r3
 802eb7a:	461a      	mov	r2, r3
 802eb7c:	4640      	mov	r0, r8
 802eb7e:	f7fc ff86 	bl	802ba8e <strncpy>
 802eb82:	9b06      	ldr	r3, [sp, #24]
 802eb84:	785a      	ldrb	r2, [r3, #1]
 802eb86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802eb88:	b172      	cbz	r2, 802eba8 <_svfiprintf_r+0x6ac>
 802eb8a:	9a06      	ldr	r2, [sp, #24]
 802eb8c:	3201      	adds	r2, #1
 802eb8e:	9206      	str	r2, [sp, #24]
 802eb90:	f04f 0900 	mov.w	r9, #0
 802eb94:	2c0a      	cmp	r4, #10
 802eb96:	f175 0500 	sbcs.w	r5, r5, #0
 802eb9a:	f0c0 80ef 	bcc.w	802ed7c <_svfiprintf_r+0x880>
 802eb9e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802eba0:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802eba4:	461d      	mov	r5, r3
 802eba6:	e7c6      	b.n	802eb36 <_svfiprintf_r+0x63a>
 802eba8:	4691      	mov	r9, r2
 802ebaa:	e7f3      	b.n	802eb94 <_svfiprintf_r+0x698>
 802ebac:	f004 030f 	and.w	r3, r4, #15
 802ebb0:	9a05      	ldr	r2, [sp, #20]
 802ebb2:	0924      	lsrs	r4, r4, #4
 802ebb4:	5cd3      	ldrb	r3, [r2, r3]
 802ebb6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802ebba:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802ebbe:	092d      	lsrs	r5, r5, #4
 802ebc0:	ea54 0305 	orrs.w	r3, r4, r5
 802ebc4:	d1f2      	bne.n	802ebac <_svfiprintf_r+0x6b0>
 802ebc6:	e0d9      	b.n	802ed7c <_svfiprintf_r+0x880>
 802ebc8:	b923      	cbnz	r3, 802ebd4 <_svfiprintf_r+0x6d8>
 802ebca:	f019 0f01 	tst.w	r9, #1
 802ebce:	d001      	beq.n	802ebd4 <_svfiprintf_r+0x6d8>
 802ebd0:	2430      	movs	r4, #48	@ 0x30
 802ebd2:	e7a4      	b.n	802eb1e <_svfiprintf_r+0x622>
 802ebd4:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802ebd8:	e0d0      	b.n	802ed7c <_svfiprintf_r+0x880>
 802ebda:	2b00      	cmp	r3, #0
 802ebdc:	f000 80a1 	beq.w	802ed22 <_svfiprintf_r+0x826>
 802ebe0:	2400      	movs	r4, #0
 802ebe2:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802ebe6:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802ebea:	462f      	mov	r7, r5
 802ebec:	e5e0      	b.n	802e7b0 <_svfiprintf_r+0x2b4>
 802ebee:	bf00      	nop
 802ebf0:	0803ac43 	.word	0x0803ac43
 802ebf4:	0803ac33 	.word	0x0803ac33
 802ebf8:	0803a720 	.word	0x0803a720
 802ebfc:	2110      	movs	r1, #16
 802ebfe:	6071      	str	r1, [r6, #4]
 802ec00:	2a07      	cmp	r2, #7
 802ec02:	4461      	add	r1, ip
 802ec04:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ec08:	dd08      	ble.n	802ec1c <_svfiprintf_r+0x720>
 802ec0a:	9801      	ldr	r0, [sp, #4]
 802ec0c:	aa0e      	add	r2, sp, #56	@ 0x38
 802ec0e:	4659      	mov	r1, fp
 802ec10:	f7ff fbf6 	bl	802e400 <__ssprint_r>
 802ec14:	2800      	cmp	r0, #0
 802ec16:	d168      	bne.n	802ecea <_svfiprintf_r+0x7ee>
 802ec18:	4b5c      	ldr	r3, [pc, #368]	@ (802ed8c <_svfiprintf_r+0x890>)
 802ec1a:	a811      	add	r0, sp, #68	@ 0x44
 802ec1c:	f1aa 0a10 	sub.w	sl, sl, #16
 802ec20:	4606      	mov	r6, r0
 802ec22:	e68d      	b.n	802e940 <_svfiprintf_r+0x444>
 802ec24:	4606      	mov	r6, r0
 802ec26:	e6a8      	b.n	802e97a <_svfiprintf_r+0x47e>
 802ec28:	9801      	ldr	r0, [sp, #4]
 802ec2a:	aa0e      	add	r2, sp, #56	@ 0x38
 802ec2c:	4659      	mov	r1, fp
 802ec2e:	f7ff fbe7 	bl	802e400 <__ssprint_r>
 802ec32:	2800      	cmp	r0, #0
 802ec34:	d159      	bne.n	802ecea <_svfiprintf_r+0x7ee>
 802ec36:	ae11      	add	r6, sp, #68	@ 0x44
 802ec38:	e6b1      	b.n	802e99e <_svfiprintf_r+0x4a2>
 802ec3a:	9801      	ldr	r0, [sp, #4]
 802ec3c:	aa0e      	add	r2, sp, #56	@ 0x38
 802ec3e:	4659      	mov	r1, fp
 802ec40:	f7ff fbde 	bl	802e400 <__ssprint_r>
 802ec44:	2800      	cmp	r0, #0
 802ec46:	d150      	bne.n	802ecea <_svfiprintf_r+0x7ee>
 802ec48:	ae11      	add	r6, sp, #68	@ 0x44
 802ec4a:	e6b8      	b.n	802e9be <_svfiprintf_r+0x4c2>
 802ec4c:	2110      	movs	r1, #16
 802ec4e:	6071      	str	r1, [r6, #4]
 802ec50:	2a07      	cmp	r2, #7
 802ec52:	4461      	add	r1, ip
 802ec54:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ec58:	dd08      	ble.n	802ec6c <_svfiprintf_r+0x770>
 802ec5a:	9801      	ldr	r0, [sp, #4]
 802ec5c:	aa0e      	add	r2, sp, #56	@ 0x38
 802ec5e:	4659      	mov	r1, fp
 802ec60:	f7ff fbce 	bl	802e400 <__ssprint_r>
 802ec64:	2800      	cmp	r0, #0
 802ec66:	d140      	bne.n	802ecea <_svfiprintf_r+0x7ee>
 802ec68:	4b49      	ldr	r3, [pc, #292]	@ (802ed90 <_svfiprintf_r+0x894>)
 802ec6a:	a811      	add	r0, sp, #68	@ 0x44
 802ec6c:	f1aa 0a10 	sub.w	sl, sl, #16
 802ec70:	4606      	mov	r6, r0
 802ec72:	e6ae      	b.n	802e9d2 <_svfiprintf_r+0x4d6>
 802ec74:	4606      	mov	r6, r0
 802ec76:	e6c9      	b.n	802ea0c <_svfiprintf_r+0x510>
 802ec78:	2010      	movs	r0, #16
 802ec7a:	4402      	add	r2, r0
 802ec7c:	2b07      	cmp	r3, #7
 802ec7e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802ec82:	6070      	str	r0, [r6, #4]
 802ec84:	dd06      	ble.n	802ec94 <_svfiprintf_r+0x798>
 802ec86:	9801      	ldr	r0, [sp, #4]
 802ec88:	aa0e      	add	r2, sp, #56	@ 0x38
 802ec8a:	4659      	mov	r1, fp
 802ec8c:	f7ff fbb8 	bl	802e400 <__ssprint_r>
 802ec90:	bb58      	cbnz	r0, 802ecea <_svfiprintf_r+0x7ee>
 802ec92:	a911      	add	r1, sp, #68	@ 0x44
 802ec94:	3c10      	subs	r4, #16
 802ec96:	460e      	mov	r6, r1
 802ec98:	e6bc      	b.n	802ea14 <_svfiprintf_r+0x518>
 802ec9a:	460e      	mov	r6, r1
 802ec9c:	e6d5      	b.n	802ea4a <_svfiprintf_r+0x54e>
 802ec9e:	9801      	ldr	r0, [sp, #4]
 802eca0:	aa0e      	add	r2, sp, #56	@ 0x38
 802eca2:	4659      	mov	r1, fp
 802eca4:	f7ff fbac 	bl	802e400 <__ssprint_r>
 802eca8:	b9f8      	cbnz	r0, 802ecea <_svfiprintf_r+0x7ee>
 802ecaa:	ab11      	add	r3, sp, #68	@ 0x44
 802ecac:	e6dd      	b.n	802ea6a <_svfiprintf_r+0x56e>
 802ecae:	9a03      	ldr	r2, [sp, #12]
 802ecb0:	1b54      	subs	r4, r2, r5
 802ecb2:	2c00      	cmp	r4, #0
 802ecb4:	f77f aedd 	ble.w	802ea72 <_svfiprintf_r+0x576>
 802ecb8:	4e34      	ldr	r6, [pc, #208]	@ (802ed8c <_svfiprintf_r+0x890>)
 802ecba:	f04f 0810 	mov.w	r8, #16
 802ecbe:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802ecc2:	2c10      	cmp	r4, #16
 802ecc4:	f102 0201 	add.w	r2, r2, #1
 802ecc8:	601e      	str	r6, [r3, #0]
 802ecca:	dc17      	bgt.n	802ecfc <_svfiprintf_r+0x800>
 802eccc:	605c      	str	r4, [r3, #4]
 802ecce:	2a07      	cmp	r2, #7
 802ecd0:	440c      	add	r4, r1
 802ecd2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802ecd6:	f77f aecc 	ble.w	802ea72 <_svfiprintf_r+0x576>
 802ecda:	9801      	ldr	r0, [sp, #4]
 802ecdc:	aa0e      	add	r2, sp, #56	@ 0x38
 802ecde:	4659      	mov	r1, fp
 802ece0:	f7ff fb8e 	bl	802e400 <__ssprint_r>
 802ece4:	2800      	cmp	r0, #0
 802ece6:	f43f aec4 	beq.w	802ea72 <_svfiprintf_r+0x576>
 802ecea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802ecee:	065b      	lsls	r3, r3, #25
 802ecf0:	f53f ac1c 	bmi.w	802e52c <_svfiprintf_r+0x30>
 802ecf4:	9804      	ldr	r0, [sp, #16]
 802ecf6:	b03b      	add	sp, #236	@ 0xec
 802ecf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ecfc:	3110      	adds	r1, #16
 802ecfe:	2a07      	cmp	r2, #7
 802ed00:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ed04:	f8c3 8004 	str.w	r8, [r3, #4]
 802ed08:	dc02      	bgt.n	802ed10 <_svfiprintf_r+0x814>
 802ed0a:	3308      	adds	r3, #8
 802ed0c:	3c10      	subs	r4, #16
 802ed0e:	e7d6      	b.n	802ecbe <_svfiprintf_r+0x7c2>
 802ed10:	9801      	ldr	r0, [sp, #4]
 802ed12:	aa0e      	add	r2, sp, #56	@ 0x38
 802ed14:	4659      	mov	r1, fp
 802ed16:	f7ff fb73 	bl	802e400 <__ssprint_r>
 802ed1a:	2800      	cmp	r0, #0
 802ed1c:	d1e5      	bne.n	802ecea <_svfiprintf_r+0x7ee>
 802ed1e:	ab11      	add	r3, sp, #68	@ 0x44
 802ed20:	e7f4      	b.n	802ed0c <_svfiprintf_r+0x810>
 802ed22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ed24:	2b00      	cmp	r3, #0
 802ed26:	d0e0      	beq.n	802ecea <_svfiprintf_r+0x7ee>
 802ed28:	9801      	ldr	r0, [sp, #4]
 802ed2a:	aa0e      	add	r2, sp, #56	@ 0x38
 802ed2c:	4659      	mov	r1, fp
 802ed2e:	f7ff fb67 	bl	802e400 <__ssprint_r>
 802ed32:	e7da      	b.n	802ecea <_svfiprintf_r+0x7ee>
 802ed34:	ea54 0205 	orrs.w	r2, r4, r5
 802ed38:	46ca      	mov	sl, r9
 802ed3a:	f43f adac 	beq.w	802e896 <_svfiprintf_r+0x39a>
 802ed3e:	2b01      	cmp	r3, #1
 802ed40:	f43f aee7 	beq.w	802eb12 <_svfiprintf_r+0x616>
 802ed44:	2b02      	cmp	r3, #2
 802ed46:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802ed4a:	f43f af2f 	beq.w	802ebac <_svfiprintf_r+0x6b0>
 802ed4e:	f004 0307 	and.w	r3, r4, #7
 802ed52:	08e4      	lsrs	r4, r4, #3
 802ed54:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802ed58:	08ed      	lsrs	r5, r5, #3
 802ed5a:	3330      	adds	r3, #48	@ 0x30
 802ed5c:	ea54 0105 	orrs.w	r1, r4, r5
 802ed60:	4642      	mov	r2, r8
 802ed62:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802ed66:	d1f2      	bne.n	802ed4e <_svfiprintf_r+0x852>
 802ed68:	f01a 0f01 	tst.w	sl, #1
 802ed6c:	d006      	beq.n	802ed7c <_svfiprintf_r+0x880>
 802ed6e:	2b30      	cmp	r3, #48	@ 0x30
 802ed70:	d004      	beq.n	802ed7c <_svfiprintf_r+0x880>
 802ed72:	2330      	movs	r3, #48	@ 0x30
 802ed74:	f808 3c01 	strb.w	r3, [r8, #-1]
 802ed78:	f1a2 0802 	sub.w	r8, r2, #2
 802ed7c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802ed7e:	eba3 0308 	sub.w	r3, r3, r8
 802ed82:	9c00      	ldr	r4, [sp, #0]
 802ed84:	9300      	str	r3, [sp, #0]
 802ed86:	46d1      	mov	r9, sl
 802ed88:	e5c2      	b.n	802e910 <_svfiprintf_r+0x414>
 802ed8a:	bf00      	nop
 802ed8c:	0803ac43 	.word	0x0803ac43
 802ed90:	0803ac33 	.word	0x0803ac33

0802ed94 <_sungetc_r>:
 802ed94:	b538      	push	{r3, r4, r5, lr}
 802ed96:	1c4b      	adds	r3, r1, #1
 802ed98:	4614      	mov	r4, r2
 802ed9a:	d103      	bne.n	802eda4 <_sungetc_r+0x10>
 802ed9c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802eda0:	4628      	mov	r0, r5
 802eda2:	bd38      	pop	{r3, r4, r5, pc}
 802eda4:	8993      	ldrh	r3, [r2, #12]
 802eda6:	f023 0320 	bic.w	r3, r3, #32
 802edaa:	8193      	strh	r3, [r2, #12]
 802edac:	6853      	ldr	r3, [r2, #4]
 802edae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 802edb0:	b2cd      	uxtb	r5, r1
 802edb2:	b18a      	cbz	r2, 802edd8 <_sungetc_r+0x44>
 802edb4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802edb6:	429a      	cmp	r2, r3
 802edb8:	dd08      	ble.n	802edcc <_sungetc_r+0x38>
 802edba:	6823      	ldr	r3, [r4, #0]
 802edbc:	1e5a      	subs	r2, r3, #1
 802edbe:	6022      	str	r2, [r4, #0]
 802edc0:	f803 5c01 	strb.w	r5, [r3, #-1]
 802edc4:	6863      	ldr	r3, [r4, #4]
 802edc6:	3301      	adds	r3, #1
 802edc8:	6063      	str	r3, [r4, #4]
 802edca:	e7e9      	b.n	802eda0 <_sungetc_r+0xc>
 802edcc:	4621      	mov	r1, r4
 802edce:	f005 f8a7 	bl	8033f20 <__submore>
 802edd2:	2800      	cmp	r0, #0
 802edd4:	d0f1      	beq.n	802edba <_sungetc_r+0x26>
 802edd6:	e7e1      	b.n	802ed9c <_sungetc_r+0x8>
 802edd8:	6921      	ldr	r1, [r4, #16]
 802edda:	6822      	ldr	r2, [r4, #0]
 802eddc:	b141      	cbz	r1, 802edf0 <_sungetc_r+0x5c>
 802edde:	4291      	cmp	r1, r2
 802ede0:	d206      	bcs.n	802edf0 <_sungetc_r+0x5c>
 802ede2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802ede6:	42a9      	cmp	r1, r5
 802ede8:	d102      	bne.n	802edf0 <_sungetc_r+0x5c>
 802edea:	3a01      	subs	r2, #1
 802edec:	6022      	str	r2, [r4, #0]
 802edee:	e7ea      	b.n	802edc6 <_sungetc_r+0x32>
 802edf0:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 802edf4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802edf8:	6323      	str	r3, [r4, #48]	@ 0x30
 802edfa:	2303      	movs	r3, #3
 802edfc:	6363      	str	r3, [r4, #52]	@ 0x34
 802edfe:	4623      	mov	r3, r4
 802ee00:	f803 5f42 	strb.w	r5, [r3, #66]!
 802ee04:	6023      	str	r3, [r4, #0]
 802ee06:	2301      	movs	r3, #1
 802ee08:	e7de      	b.n	802edc8 <_sungetc_r+0x34>

0802ee0a <__ssrefill_r>:
 802ee0a:	b510      	push	{r4, lr}
 802ee0c:	460c      	mov	r4, r1
 802ee0e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802ee10:	b169      	cbz	r1, 802ee2e <__ssrefill_r+0x24>
 802ee12:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802ee16:	4299      	cmp	r1, r3
 802ee18:	d001      	beq.n	802ee1e <__ssrefill_r+0x14>
 802ee1a:	f7fe ff2f 	bl	802dc7c <_free_r>
 802ee1e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802ee20:	6063      	str	r3, [r4, #4]
 802ee22:	2000      	movs	r0, #0
 802ee24:	6320      	str	r0, [r4, #48]	@ 0x30
 802ee26:	b113      	cbz	r3, 802ee2e <__ssrefill_r+0x24>
 802ee28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802ee2a:	6023      	str	r3, [r4, #0]
 802ee2c:	bd10      	pop	{r4, pc}
 802ee2e:	6923      	ldr	r3, [r4, #16]
 802ee30:	6023      	str	r3, [r4, #0]
 802ee32:	2300      	movs	r3, #0
 802ee34:	6063      	str	r3, [r4, #4]
 802ee36:	89a3      	ldrh	r3, [r4, #12]
 802ee38:	f043 0320 	orr.w	r3, r3, #32
 802ee3c:	81a3      	strh	r3, [r4, #12]
 802ee3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ee42:	e7f3      	b.n	802ee2c <__ssrefill_r+0x22>

0802ee44 <_sfread_r>:
 802ee44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ee48:	461f      	mov	r7, r3
 802ee4a:	4613      	mov	r3, r2
 802ee4c:	437b      	muls	r3, r7
 802ee4e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802ee50:	9000      	str	r0, [sp, #0]
 802ee52:	4688      	mov	r8, r1
 802ee54:	4691      	mov	r9, r2
 802ee56:	d028      	beq.n	802eeaa <_sfread_r+0x66>
 802ee58:	461e      	mov	r6, r3
 802ee5a:	f04f 0b00 	mov.w	fp, #0
 802ee5e:	e9d4 1500 	ldrd	r1, r5, [r4]
 802ee62:	42b5      	cmp	r5, r6
 802ee64:	d30b      	bcc.n	802ee7e <_sfread_r+0x3a>
 802ee66:	4632      	mov	r2, r6
 802ee68:	4640      	mov	r0, r8
 802ee6a:	f7fe f805 	bl	802ce78 <memcpy>
 802ee6e:	6862      	ldr	r2, [r4, #4]
 802ee70:	6821      	ldr	r1, [r4, #0]
 802ee72:	1b92      	subs	r2, r2, r6
 802ee74:	4431      	add	r1, r6
 802ee76:	6062      	str	r2, [r4, #4]
 802ee78:	6021      	str	r1, [r4, #0]
 802ee7a:	463b      	mov	r3, r7
 802ee7c:	e015      	b.n	802eeaa <_sfread_r+0x66>
 802ee7e:	462a      	mov	r2, r5
 802ee80:	4640      	mov	r0, r8
 802ee82:	9301      	str	r3, [sp, #4]
 802ee84:	f7fd fff8 	bl	802ce78 <memcpy>
 802ee88:	6822      	ldr	r2, [r4, #0]
 802ee8a:	9800      	ldr	r0, [sp, #0]
 802ee8c:	442a      	add	r2, r5
 802ee8e:	e9c4 2b00 	strd	r2, fp, [r4]
 802ee92:	4621      	mov	r1, r4
 802ee94:	f7ff ffb9 	bl	802ee0a <__ssrefill_r>
 802ee98:	44a8      	add	r8, r5
 802ee9a:	9b01      	ldr	r3, [sp, #4]
 802ee9c:	eba6 0a05 	sub.w	sl, r6, r5
 802eea0:	b138      	cbz	r0, 802eeb2 <_sfread_r+0x6e>
 802eea2:	441d      	add	r5, r3
 802eea4:	1bad      	subs	r5, r5, r6
 802eea6:	fbb5 f3f9 	udiv	r3, r5, r9
 802eeaa:	4618      	mov	r0, r3
 802eeac:	b003      	add	sp, #12
 802eeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802eeb2:	4656      	mov	r6, sl
 802eeb4:	e7d3      	b.n	802ee5e <_sfread_r+0x1a>
	...

0802eeb8 <__ssvfiscanf_r>:
 802eeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eebc:	b0df      	sub	sp, #380	@ 0x17c
 802eebe:	af02      	add	r7, sp, #8
 802eec0:	460c      	mov	r4, r1
 802eec2:	623b      	str	r3, [r7, #32]
 802eec4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802eec8:	6278      	str	r0, [r7, #36]	@ 0x24
 802eeca:	049d      	lsls	r5, r3, #18
 802eecc:	60ba      	str	r2, [r7, #8]
 802eece:	d406      	bmi.n	802eede <__ssvfiscanf_r+0x26>
 802eed0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802eed4:	818b      	strh	r3, [r1, #12]
 802eed6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802eed8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802eedc:	664b      	str	r3, [r1, #100]	@ 0x64
 802eede:	2300      	movs	r3, #0
 802eee0:	e9c7 3305 	strd	r3, r3, [r7, #20]
 802eee4:	60fb      	str	r3, [r7, #12]
 802eee6:	469b      	mov	fp, r3
 802eee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802eeea:	61fb      	str	r3, [r7, #28]
 802eeec:	e005      	b.n	802eefa <__ssvfiscanf_r+0x42>
 802eeee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802eef0:	4621      	mov	r1, r4
 802eef2:	f7ff ff8a 	bl	802ee0a <__ssrefill_r>
 802eef6:	b168      	cbz	r0, 802ef14 <__ssvfiscanf_r+0x5c>
 802eef8:	60bd      	str	r5, [r7, #8]
 802eefa:	68bd      	ldr	r5, [r7, #8]
 802eefc:	f815 3b01 	ldrb.w	r3, [r5], #1
 802ef00:	637b      	str	r3, [r7, #52]	@ 0x34
 802ef02:	b333      	cbz	r3, 802ef52 <__ssvfiscanf_r+0x9a>
 802ef04:	4a75      	ldr	r2, [pc, #468]	@ (802f0dc <__ssvfiscanf_r+0x224>)
 802ef06:	5cd6      	ldrb	r6, [r2, r3]
 802ef08:	f016 0608 	ands.w	r6, r6, #8
 802ef0c:	d011      	beq.n	802ef32 <__ssvfiscanf_r+0x7a>
 802ef0e:	6863      	ldr	r3, [r4, #4]
 802ef10:	2b00      	cmp	r3, #0
 802ef12:	ddec      	ble.n	802eeee <__ssvfiscanf_r+0x36>
 802ef14:	6823      	ldr	r3, [r4, #0]
 802ef16:	4971      	ldr	r1, [pc, #452]	@ (802f0dc <__ssvfiscanf_r+0x224>)
 802ef18:	781a      	ldrb	r2, [r3, #0]
 802ef1a:	5c8a      	ldrb	r2, [r1, r2]
 802ef1c:	0710      	lsls	r0, r2, #28
 802ef1e:	d5eb      	bpl.n	802eef8 <__ssvfiscanf_r+0x40>
 802ef20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ef22:	3201      	adds	r2, #1
 802ef24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802ef26:	6862      	ldr	r2, [r4, #4]
 802ef28:	3301      	adds	r3, #1
 802ef2a:	3a01      	subs	r2, #1
 802ef2c:	6062      	str	r2, [r4, #4]
 802ef2e:	6023      	str	r3, [r4, #0]
 802ef30:	e7ed      	b.n	802ef0e <__ssvfiscanf_r+0x56>
 802ef32:	2b25      	cmp	r3, #37	@ 0x25
 802ef34:	d15f      	bne.n	802eff6 <__ssvfiscanf_r+0x13e>
 802ef36:	62be      	str	r6, [r7, #40]	@ 0x28
 802ef38:	462a      	mov	r2, r5
 802ef3a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ef3e:	60ba      	str	r2, [r7, #8]
 802ef40:	2b7a      	cmp	r3, #122	@ 0x7a
 802ef42:	d806      	bhi.n	802ef52 <__ssvfiscanf_r+0x9a>
 802ef44:	2b42      	cmp	r3, #66	@ 0x42
 802ef46:	d809      	bhi.n	802ef5c <__ssvfiscanf_r+0xa4>
 802ef48:	2b2a      	cmp	r3, #42	@ 0x2a
 802ef4a:	d079      	beq.n	802f040 <__ssvfiscanf_r+0x188>
 802ef4c:	d844      	bhi.n	802efd8 <__ssvfiscanf_r+0x120>
 802ef4e:	2b25      	cmp	r3, #37	@ 0x25
 802ef50:	d050      	beq.n	802eff4 <__ssvfiscanf_r+0x13c>
 802ef52:	f1bb 0f00 	cmp.w	fp, #0
 802ef56:	f000 810e 	beq.w	802f176 <__ssvfiscanf_r+0x2be>
 802ef5a:	e107      	b.n	802f16c <__ssvfiscanf_r+0x2b4>
 802ef5c:	3b43      	subs	r3, #67	@ 0x43
 802ef5e:	2b37      	cmp	r3, #55	@ 0x37
 802ef60:	f200 80fd 	bhi.w	802f15e <__ssvfiscanf_r+0x2a6>
 802ef64:	e8df f013 	tbh	[pc, r3, lsl #1]
 802ef68:	00a40117 	.word	0x00a40117
 802ef6c:	00fb00fb 	.word	0x00fb00fb
 802ef70:	00fb00fb 	.word	0x00fb00fb
 802ef74:	00fb00fb 	.word	0x00fb00fb
 802ef78:	008e00fb 	.word	0x008e00fb
 802ef7c:	00fb00fb 	.word	0x00fb00fb
 802ef80:	00fb00a8 	.word	0x00fb00a8
 802ef84:	00fb00fb 	.word	0x00fb00fb
 802ef88:	00fb00c0 	.word	0x00fb00c0
 802ef8c:	00fb00fb 	.word	0x00fb00fb
 802ef90:	00b400fb 	.word	0x00b400fb
 802ef94:	00fb00fb 	.word	0x00fb00fb
 802ef98:	00fb010d 	.word	0x00fb010d
 802ef9c:	00fb00fb 	.word	0x00fb00fb
 802efa0:	00fb00fb 	.word	0x00fb00fb
 802efa4:	00fb00fb 	.word	0x00fb00fb
 802efa8:	00a60119 	.word	0x00a60119
 802efac:	00fb00fb 	.word	0x00fb00fb
 802efb0:	008100fb 	.word	0x008100fb
 802efb4:	008e013e 	.word	0x008e013e
 802efb8:	007300fb 	.word	0x007300fb
 802efbc:	01200095 	.word	0x01200095
 802efc0:	011d00aa 	.word	0x011d00aa
 802efc4:	00fb00fb 	.word	0x00fb00fb
 802efc8:	009200c2 	.word	0x009200c2
 802efcc:	00fb00b0 	.word	0x00fb00b0
 802efd0:	00b400fb 	.word	0x00b400fb
 802efd4:	009200fb 	.word	0x009200fb
 802efd8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802efdc:	2a09      	cmp	r2, #9
 802efde:	d8b8      	bhi.n	802ef52 <__ssvfiscanf_r+0x9a>
 802efe0:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802efe4:	d1b5      	bne.n	802ef52 <__ssvfiscanf_r+0x9a>
 802efe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802efe8:	220a      	movs	r2, #10
 802efea:	fb02 3301 	mla	r3, r2, r1, r3
 802efee:	3b30      	subs	r3, #48	@ 0x30
 802eff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 802eff2:	e02a      	b.n	802f04a <__ssvfiscanf_r+0x192>
 802eff4:	68bd      	ldr	r5, [r7, #8]
 802eff6:	6863      	ldr	r3, [r4, #4]
 802eff8:	2b00      	cmp	r3, #0
 802effa:	dd0e      	ble.n	802f01a <__ssvfiscanf_r+0x162>
 802effc:	6823      	ldr	r3, [r4, #0]
 802effe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802f002:	7819      	ldrb	r1, [r3, #0]
 802f004:	4291      	cmp	r1, r2
 802f006:	d1a4      	bne.n	802ef52 <__ssvfiscanf_r+0x9a>
 802f008:	3301      	adds	r3, #1
 802f00a:	6862      	ldr	r2, [r4, #4]
 802f00c:	6023      	str	r3, [r4, #0]
 802f00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f010:	3a01      	subs	r2, #1
 802f012:	3301      	adds	r3, #1
 802f014:	6062      	str	r2, [r4, #4]
 802f016:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f018:	e76e      	b.n	802eef8 <__ssvfiscanf_r+0x40>
 802f01a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f01c:	4621      	mov	r1, r4
 802f01e:	f7ff fef4 	bl	802ee0a <__ssrefill_r>
 802f022:	2800      	cmp	r0, #0
 802f024:	d0ea      	beq.n	802effc <__ssvfiscanf_r+0x144>
 802f026:	69fb      	ldr	r3, [r7, #28]
 802f028:	b113      	cbz	r3, 802f030 <__ssvfiscanf_r+0x178>
 802f02a:	89a3      	ldrh	r3, [r4, #12]
 802f02c:	065b      	lsls	r3, r3, #25
 802f02e:	d590      	bpl.n	802ef52 <__ssvfiscanf_r+0x9a>
 802f030:	f1bb 0f00 	cmp.w	fp, #0
 802f034:	f040 8654 	bne.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f03c:	61fb      	str	r3, [r7, #28]
 802f03e:	e09a      	b.n	802f176 <__ssvfiscanf_r+0x2be>
 802f040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f042:	4333      	orrs	r3, r6
 802f044:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f046:	d184      	bne.n	802ef52 <__ssvfiscanf_r+0x9a>
 802f048:	2610      	movs	r6, #16
 802f04a:	68bd      	ldr	r5, [r7, #8]
 802f04c:	e774      	b.n	802ef38 <__ssvfiscanf_r+0x80>
 802f04e:	0731      	lsls	r1, r6, #28
 802f050:	f47f af7f 	bne.w	802ef52 <__ssvfiscanf_r+0x9a>
 802f054:	786b      	ldrb	r3, [r5, #1]
 802f056:	2b6c      	cmp	r3, #108	@ 0x6c
 802f058:	d104      	bne.n	802f064 <__ssvfiscanf_r+0x1ac>
 802f05a:	1cab      	adds	r3, r5, #2
 802f05c:	60bb      	str	r3, [r7, #8]
 802f05e:	f046 0602 	orr.w	r6, r6, #2
 802f062:	e7f2      	b.n	802f04a <__ssvfiscanf_r+0x192>
 802f064:	f046 0601 	orr.w	r6, r6, #1
 802f068:	e7ef      	b.n	802f04a <__ssvfiscanf_r+0x192>
 802f06a:	0732      	lsls	r2, r6, #28
 802f06c:	f47f af71 	bne.w	802ef52 <__ssvfiscanf_r+0x9a>
 802f070:	786b      	ldrb	r3, [r5, #1]
 802f072:	2b68      	cmp	r3, #104	@ 0x68
 802f074:	bf03      	ittte	eq
 802f076:	1cab      	addeq	r3, r5, #2
 802f078:	60bb      	streq	r3, [r7, #8]
 802f07a:	f046 0608 	orreq.w	r6, r6, #8
 802f07e:	f046 0604 	orrne.w	r6, r6, #4
 802f082:	e7e2      	b.n	802f04a <__ssvfiscanf_r+0x192>
 802f084:	0733      	lsls	r3, r6, #28
 802f086:	f47f af64 	bne.w	802ef52 <__ssvfiscanf_r+0x9a>
 802f08a:	e7e8      	b.n	802f05e <__ssvfiscanf_r+0x1a6>
 802f08c:	0735      	lsls	r5, r6, #28
 802f08e:	d0dc      	beq.n	802f04a <__ssvfiscanf_r+0x192>
 802f090:	e75f      	b.n	802ef52 <__ssvfiscanf_r+0x9a>
 802f092:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802f096:	f47f af5c 	bne.w	802ef52 <__ssvfiscanf_r+0x9a>
 802f09a:	f1bb 0f00 	cmp.w	fp, #0
 802f09e:	d104      	bne.n	802f0aa <__ssvfiscanf_r+0x1f2>
 802f0a0:	b082      	sub	sp, #8
 802f0a2:	f10d 0b08 	add.w	fp, sp, #8
 802f0a6:	e9cb 3300 	strd	r3, r3, [fp]
 802f0aa:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802f0ae:	e7cc      	b.n	802f04a <__ssvfiscanf_r+0x192>
 802f0b0:	f046 0601 	orr.w	r6, r6, #1
 802f0b4:	4b0a      	ldr	r3, [pc, #40]	@ (802f0e0 <__ssvfiscanf_r+0x228>)
 802f0b6:	e008      	b.n	802f0ca <__ssvfiscanf_r+0x212>
 802f0b8:	f046 0601 	orr.w	r6, r6, #1
 802f0bc:	4b09      	ldr	r3, [pc, #36]	@ (802f0e4 <__ssvfiscanf_r+0x22c>)
 802f0be:	60fb      	str	r3, [r7, #12]
 802f0c0:	2308      	movs	r3, #8
 802f0c2:	617b      	str	r3, [r7, #20]
 802f0c4:	2503      	movs	r5, #3
 802f0c6:	e012      	b.n	802f0ee <__ssvfiscanf_r+0x236>
 802f0c8:	4b06      	ldr	r3, [pc, #24]	@ (802f0e4 <__ssvfiscanf_r+0x22c>)
 802f0ca:	60fb      	str	r3, [r7, #12]
 802f0cc:	230a      	movs	r3, #10
 802f0ce:	e7f8      	b.n	802f0c2 <__ssvfiscanf_r+0x20a>
 802f0d0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802f0d4:	4b03      	ldr	r3, [pc, #12]	@ (802f0e4 <__ssvfiscanf_r+0x22c>)
 802f0d6:	60fb      	str	r3, [r7, #12]
 802f0d8:	2310      	movs	r3, #16
 802f0da:	e7f2      	b.n	802f0c2 <__ssvfiscanf_r+0x20a>
 802f0dc:	0803aabd 	.word	0x0803aabd
 802f0e0:	0802b109 	.word	0x0802b109
 802f0e4:	08033f09 	.word	0x08033f09
 802f0e8:	f046 0601 	orr.w	r6, r6, #1
 802f0ec:	2502      	movs	r5, #2
 802f0ee:	6863      	ldr	r3, [r4, #4]
 802f0f0:	2b00      	cmp	r3, #0
 802f0f2:	dd7b      	ble.n	802f1ec <__ssvfiscanf_r+0x334>
 802f0f4:	0671      	lsls	r1, r6, #25
 802f0f6:	d407      	bmi.n	802f108 <__ssvfiscanf_r+0x250>
 802f0f8:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 802f484 <__ssvfiscanf_r+0x5cc>
 802f0fc:	6823      	ldr	r3, [r4, #0]
 802f0fe:	781a      	ldrb	r2, [r3, #0]
 802f100:	f818 2002 	ldrb.w	r2, [r8, r2]
 802f104:	0712      	lsls	r2, r2, #28
 802f106:	d479      	bmi.n	802f1fc <__ssvfiscanf_r+0x344>
 802f108:	2d02      	cmp	r5, #2
 802f10a:	f000 836f 	beq.w	802f7ec <__ssvfiscanf_r+0x934>
 802f10e:	2d03      	cmp	r5, #3
 802f110:	f000 84f6 	beq.w	802fb00 <__ssvfiscanf_r+0xc48>
 802f114:	f006 0310 	and.w	r3, r6, #16
 802f118:	2d01      	cmp	r5, #1
 802f11a:	613b      	str	r3, [r7, #16]
 802f11c:	f006 0501 	and.w	r5, r6, #1
 802f120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f122:	f000 81b1 	beq.w	802f488 <__ssvfiscanf_r+0x5d0>
 802f126:	2b01      	cmp	r3, #1
 802f128:	bf38      	it	cc
 802f12a:	2301      	movcc	r3, #1
 802f12c:	4698      	mov	r8, r3
 802f12e:	693b      	ldr	r3, [r7, #16]
 802f130:	2d00      	cmp	r5, #0
 802f132:	f000 813b 	beq.w	802f3ac <__ssvfiscanf_r+0x4f4>
 802f136:	2b00      	cmp	r3, #0
 802f138:	f040 80d8 	bne.w	802f2ec <__ssvfiscanf_r+0x434>
 802f13c:	6a3b      	ldr	r3, [r7, #32]
 802f13e:	0636      	lsls	r6, r6, #24
 802f140:	f853 5b04 	ldr.w	r5, [r3], #4
 802f144:	623b      	str	r3, [r7, #32]
 802f146:	f140 80d7 	bpl.w	802f2f8 <__ssvfiscanf_r+0x440>
 802f14a:	b145      	cbz	r5, 802f15e <__ssvfiscanf_r+0x2a6>
 802f14c:	2080      	movs	r0, #128	@ 0x80
 802f14e:	f7fe fe9d 	bl	802de8c <malloc>
 802f152:	4606      	mov	r6, r0
 802f154:	2800      	cmp	r0, #0
 802f156:	d164      	bne.n	802f222 <__ssvfiscanf_r+0x36a>
 802f158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f15c:	61fb      	str	r3, [r7, #28]
 802f15e:	f1bb 0f00 	cmp.w	fp, #0
 802f162:	d008      	beq.n	802f176 <__ssvfiscanf_r+0x2be>
 802f164:	69fb      	ldr	r3, [r7, #28]
 802f166:	3301      	adds	r3, #1
 802f168:	f000 85ba 	beq.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f16c:	f8db 0000 	ldr.w	r0, [fp]
 802f170:	b108      	cbz	r0, 802f176 <__ssvfiscanf_r+0x2be>
 802f172:	f7fe fe93 	bl	802de9c <free>
 802f176:	69f8      	ldr	r0, [r7, #28]
 802f178:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 802f17c:	46bd      	mov	sp, r7
 802f17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f182:	68b9      	ldr	r1, [r7, #8]
 802f184:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 802f188:	f003 fe67 	bl	8032e5a <__sccl>
 802f18c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802f190:	60b8      	str	r0, [r7, #8]
 802f192:	2501      	movs	r5, #1
 802f194:	e7ab      	b.n	802f0ee <__ssvfiscanf_r+0x236>
 802f196:	f046 0601 	orr.w	r6, r6, #1
 802f19a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802f19e:	2500      	movs	r5, #0
 802f1a0:	e7a5      	b.n	802f0ee <__ssvfiscanf_r+0x236>
 802f1a2:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 802f1a6:	e795      	b.n	802f0d4 <__ssvfiscanf_r+0x21c>
 802f1a8:	06f0      	lsls	r0, r6, #27
 802f1aa:	f53f aea6 	bmi.w	802eefa <__ssvfiscanf_r+0x42>
 802f1ae:	6a3a      	ldr	r2, [r7, #32]
 802f1b0:	0731      	lsls	r1, r6, #28
 802f1b2:	f852 3b04 	ldr.w	r3, [r2], #4
 802f1b6:	623a      	str	r2, [r7, #32]
 802f1b8:	d502      	bpl.n	802f1c0 <__ssvfiscanf_r+0x308>
 802f1ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f1bc:	701a      	strb	r2, [r3, #0]
 802f1be:	e69c      	b.n	802eefa <__ssvfiscanf_r+0x42>
 802f1c0:	0772      	lsls	r2, r6, #29
 802f1c2:	d502      	bpl.n	802f1ca <__ssvfiscanf_r+0x312>
 802f1c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f1c6:	801a      	strh	r2, [r3, #0]
 802f1c8:	e697      	b.n	802eefa <__ssvfiscanf_r+0x42>
 802f1ca:	07f5      	lsls	r5, r6, #31
 802f1cc:	d502      	bpl.n	802f1d4 <__ssvfiscanf_r+0x31c>
 802f1ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f1d0:	601a      	str	r2, [r3, #0]
 802f1d2:	e692      	b.n	802eefa <__ssvfiscanf_r+0x42>
 802f1d4:	07b0      	lsls	r0, r6, #30
 802f1d6:	d5fa      	bpl.n	802f1ce <__ssvfiscanf_r+0x316>
 802f1d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f1da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802f1dc:	17d2      	asrs	r2, r2, #31
 802f1de:	e9c3 1200 	strd	r1, r2, [r3]
 802f1e2:	e68a      	b.n	802eefa <__ssvfiscanf_r+0x42>
 802f1e4:	4ba6      	ldr	r3, [pc, #664]	@ (802f480 <__ssvfiscanf_r+0x5c8>)
 802f1e6:	60fb      	str	r3, [r7, #12]
 802f1e8:	2300      	movs	r3, #0
 802f1ea:	e76a      	b.n	802f0c2 <__ssvfiscanf_r+0x20a>
 802f1ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f1ee:	4621      	mov	r1, r4
 802f1f0:	f7ff fe0b 	bl	802ee0a <__ssrefill_r>
 802f1f4:	2800      	cmp	r0, #0
 802f1f6:	f43f af7d 	beq.w	802f0f4 <__ssvfiscanf_r+0x23c>
 802f1fa:	e714      	b.n	802f026 <__ssvfiscanf_r+0x16e>
 802f1fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f1fe:	3201      	adds	r2, #1
 802f200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802f202:	6862      	ldr	r2, [r4, #4]
 802f204:	3a01      	subs	r2, #1
 802f206:	2a00      	cmp	r2, #0
 802f208:	6062      	str	r2, [r4, #4]
 802f20a:	dd02      	ble.n	802f212 <__ssvfiscanf_r+0x35a>
 802f20c:	3301      	adds	r3, #1
 802f20e:	6023      	str	r3, [r4, #0]
 802f210:	e774      	b.n	802f0fc <__ssvfiscanf_r+0x244>
 802f212:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f214:	4621      	mov	r1, r4
 802f216:	f7ff fdf8 	bl	802ee0a <__ssrefill_r>
 802f21a:	2800      	cmp	r0, #0
 802f21c:	f43f af6e 	beq.w	802f0fc <__ssvfiscanf_r+0x244>
 802f220:	e701      	b.n	802f026 <__ssvfiscanf_r+0x16e>
 802f222:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802f226:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802f22a:	6028      	str	r0, [r5, #0]
 802f22c:	4599      	cmp	r9, r3
 802f22e:	d314      	bcc.n	802f25a <__ssvfiscanf_r+0x3a2>
 802f230:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802f234:	4293      	cmp	r3, r2
 802f236:	f200 8553 	bhi.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f23a:	3308      	adds	r3, #8
 802f23c:	fa1f fa83 	uxth.w	sl, r3
 802f240:	f8db 0000 	ldr.w	r0, [fp]
 802f244:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802f248:	f003 fdaa 	bl	8032da0 <realloc>
 802f24c:	2800      	cmp	r0, #0
 802f24e:	f000 8547 	beq.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f252:	f8cb 0000 	str.w	r0, [fp]
 802f256:	f8ab a004 	strh.w	sl, [fp, #4]
 802f25a:	f8db 3000 	ldr.w	r3, [fp]
 802f25e:	f109 0201 	add.w	r2, r9, #1
 802f262:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802f266:	46aa      	mov	sl, r5
 802f268:	f8ab 2006 	strh.w	r2, [fp, #6]
 802f26c:	4635      	mov	r5, r6
 802f26e:	f04f 0920 	mov.w	r9, #32
 802f272:	2200      	movs	r2, #0
 802f274:	62ba      	str	r2, [r7, #40]	@ 0x28
 802f276:	f7fd fd4b 	bl	802cd10 <__locale_mb_cur_max>
 802f27a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802f27c:	4290      	cmp	r0, r2
 802f27e:	f43f aed2 	beq.w	802f026 <__ssvfiscanf_r+0x16e>
 802f282:	6821      	ldr	r1, [r4, #0]
 802f284:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 802f288:	f811 0b01 	ldrb.w	r0, [r1], #1
 802f28c:	f80c 0002 	strb.w	r0, [ip, r2]
 802f290:	1c53      	adds	r3, r2, #1
 802f292:	6862      	ldr	r2, [r4, #4]
 802f294:	3a01      	subs	r2, #1
 802f296:	e9c4 1200 	strd	r1, r2, [r4]
 802f29a:	69ba      	ldr	r2, [r7, #24]
 802f29c:	2a03      	cmp	r2, #3
 802f29e:	d102      	bne.n	802f2a6 <__ssvfiscanf_r+0x3ee>
 802f2a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802f2a2:	2a04      	cmp	r2, #4
 802f2a4:	d007      	beq.n	802f2b6 <__ssvfiscanf_r+0x3fe>
 802f2a6:	2208      	movs	r2, #8
 802f2a8:	2100      	movs	r1, #0
 802f2aa:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802f2ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f2b0:	f7fc fba6 	bl	802ba00 <memset>
 802f2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f2b6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 802f2ba:	9200      	str	r2, [sp, #0]
 802f2bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f2be:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f2c0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802f2c4:	4629      	mov	r1, r5
 802f2c6:	f005 f925 	bl	8034514 <_mbrtowc_r>
 802f2ca:	4603      	mov	r3, r0
 802f2cc:	61b8      	str	r0, [r7, #24]
 802f2ce:	1c58      	adds	r0, r3, #1
 802f2d0:	f43f aea9 	beq.w	802f026 <__ssvfiscanf_r+0x16e>
 802f2d4:	461a      	mov	r2, r3
 802f2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f2d8:	b9b2      	cbnz	r2, 802f308 <__ssvfiscanf_r+0x450>
 802f2da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f2dc:	441a      	add	r2, r3
 802f2de:	4613      	mov	r3, r2
 802f2e0:	693a      	ldr	r2, [r7, #16]
 802f2e2:	b172      	cbz	r2, 802f302 <__ssvfiscanf_r+0x44a>
 802f2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f2e6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802f2ea:	e019      	b.n	802f320 <__ssvfiscanf_r+0x468>
 802f2ec:	f04f 0900 	mov.w	r9, #0
 802f2f0:	464e      	mov	r6, r9
 802f2f2:	46ca      	mov	sl, r9
 802f2f4:	464d      	mov	r5, r9
 802f2f6:	e7bc      	b.n	802f272 <__ssvfiscanf_r+0x3ba>
 802f2f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802f2fc:	464e      	mov	r6, r9
 802f2fe:	46ca      	mov	sl, r9
 802f300:	e7b7      	b.n	802f272 <__ssvfiscanf_r+0x3ba>
 802f302:	693a      	ldr	r2, [r7, #16]
 802f304:	602a      	str	r2, [r5, #0]
 802f306:	e7ed      	b.n	802f2e4 <__ssvfiscanf_r+0x42c>
 802f308:	69ba      	ldr	r2, [r7, #24]
 802f30a:	3202      	adds	r2, #2
 802f30c:	d024      	beq.n	802f358 <__ssvfiscanf_r+0x4a0>
 802f30e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f310:	441a      	add	r2, r3
 802f312:	69bb      	ldr	r3, [r7, #24]
 802f314:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802f316:	2b03      	cmp	r3, #3
 802f318:	d1e5      	bne.n	802f2e6 <__ssvfiscanf_r+0x42e>
 802f31a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802f31c:	2b04      	cmp	r3, #4
 802f31e:	d1e2      	bne.n	802f2e6 <__ssvfiscanf_r+0x42e>
 802f320:	693b      	ldr	r3, [r7, #16]
 802f322:	b9bb      	cbnz	r3, 802f354 <__ssvfiscanf_r+0x49c>
 802f324:	f1ba 0f00 	cmp.w	sl, #0
 802f328:	d013      	beq.n	802f352 <__ssvfiscanf_r+0x49a>
 802f32a:	1bab      	subs	r3, r5, r6
 802f32c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802f330:	d80f      	bhi.n	802f352 <__ssvfiscanf_r+0x49a>
 802f332:	4630      	mov	r0, r6
 802f334:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802f338:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f33a:	f003 fd31 	bl	8032da0 <realloc>
 802f33e:	4606      	mov	r6, r0
 802f340:	2800      	cmp	r0, #0
 802f342:	f43f af09 	beq.w	802f158 <__ssvfiscanf_r+0x2a0>
 802f346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f348:	f8ca 0000 	str.w	r0, [sl]
 802f34c:	18c5      	adds	r5, r0, r3
 802f34e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802f352:	3504      	adds	r5, #4
 802f354:	2200      	movs	r2, #0
 802f356:	e000      	b.n	802f35a <__ssvfiscanf_r+0x4a2>
 802f358:	461a      	mov	r2, r3
 802f35a:	6863      	ldr	r3, [r4, #4]
 802f35c:	2b00      	cmp	r3, #0
 802f35e:	dc13      	bgt.n	802f388 <__ssvfiscanf_r+0x4d0>
 802f360:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f362:	62ba      	str	r2, [r7, #40]	@ 0x28
 802f364:	4621      	mov	r1, r4
 802f366:	f7ff fd50 	bl	802ee0a <__ssrefill_r>
 802f36a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802f36c:	b160      	cbz	r0, 802f388 <__ssvfiscanf_r+0x4d0>
 802f36e:	2a00      	cmp	r2, #0
 802f370:	f47f ae59 	bne.w	802f026 <__ssvfiscanf_r+0x16e>
 802f374:	f1ba 0f00 	cmp.w	sl, #0
 802f378:	d10b      	bne.n	802f392 <__ssvfiscanf_r+0x4da>
 802f37a:	693b      	ldr	r3, [r7, #16]
 802f37c:	2b00      	cmp	r3, #0
 802f37e:	f47f adbc 	bne.w	802eefa <__ssvfiscanf_r+0x42>
 802f382:	69fb      	ldr	r3, [r7, #28]
 802f384:	3301      	adds	r3, #1
 802f386:	e5b0      	b.n	802eeea <__ssvfiscanf_r+0x32>
 802f388:	f1b8 0f00 	cmp.w	r8, #0
 802f38c:	f47f af72 	bne.w	802f274 <__ssvfiscanf_r+0x3bc>
 802f390:	e7f0      	b.n	802f374 <__ssvfiscanf_r+0x4bc>
 802f392:	1ba9      	subs	r1, r5, r6
 802f394:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 802f398:	d9ef      	bls.n	802f37a <__ssvfiscanf_r+0x4c2>
 802f39a:	f8da 0000 	ldr.w	r0, [sl]
 802f39e:	f003 fcff 	bl	8032da0 <realloc>
 802f3a2:	2800      	cmp	r0, #0
 802f3a4:	d0e9      	beq.n	802f37a <__ssvfiscanf_r+0x4c2>
 802f3a6:	f8ca 0000 	str.w	r0, [sl]
 802f3aa:	e7e6      	b.n	802f37a <__ssvfiscanf_r+0x4c2>
 802f3ac:	b1db      	cbz	r3, 802f3e6 <__ssvfiscanf_r+0x52e>
 802f3ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 802f3b2:	4598      	cmp	r8, r3
 802f3b4:	dd10      	ble.n	802f3d8 <__ssvfiscanf_r+0x520>
 802f3b6:	441a      	add	r2, r3
 802f3b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f3ba:	6022      	str	r2, [r4, #0]
 802f3bc:	4621      	mov	r1, r4
 802f3be:	441d      	add	r5, r3
 802f3c0:	eba8 0803 	sub.w	r8, r8, r3
 802f3c4:	f7ff fd21 	bl	802ee0a <__ssrefill_r>
 802f3c8:	2800      	cmp	r0, #0
 802f3ca:	d0f0      	beq.n	802f3ae <__ssvfiscanf_r+0x4f6>
 802f3cc:	2d00      	cmp	r5, #0
 802f3ce:	f43f ae2a 	beq.w	802f026 <__ssvfiscanf_r+0x16e>
 802f3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f3d4:	442b      	add	r3, r5
 802f3d6:	e201      	b.n	802f7dc <__ssvfiscanf_r+0x924>
 802f3d8:	eba3 0308 	sub.w	r3, r3, r8
 802f3dc:	4442      	add	r2, r8
 802f3de:	4445      	add	r5, r8
 802f3e0:	6063      	str	r3, [r4, #4]
 802f3e2:	6022      	str	r2, [r4, #0]
 802f3e4:	e7f5      	b.n	802f3d2 <__ssvfiscanf_r+0x51a>
 802f3e6:	6a3b      	ldr	r3, [r7, #32]
 802f3e8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802f3ec:	f853 5b04 	ldr.w	r5, [r3], #4
 802f3f0:	623b      	str	r3, [r7, #32]
 802f3f2:	d02d      	beq.n	802f450 <__ssvfiscanf_r+0x598>
 802f3f4:	2d00      	cmp	r5, #0
 802f3f6:	f43f adac 	beq.w	802ef52 <__ssvfiscanf_r+0x9a>
 802f3fa:	4640      	mov	r0, r8
 802f3fc:	f7fe fd46 	bl	802de8c <malloc>
 802f400:	4681      	mov	r9, r0
 802f402:	2800      	cmp	r0, #0
 802f404:	f43f ae14 	beq.w	802f030 <__ssvfiscanf_r+0x178>
 802f408:	f8bb a006 	ldrh.w	sl, [fp, #6]
 802f40c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802f410:	6028      	str	r0, [r5, #0]
 802f412:	45b2      	cmp	sl, r6
 802f414:	d312      	bcc.n	802f43c <__ssvfiscanf_r+0x584>
 802f416:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802f41a:	429e      	cmp	r6, r3
 802f41c:	f200 8460 	bhi.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f420:	3608      	adds	r6, #8
 802f422:	b2b6      	uxth	r6, r6
 802f424:	f8db 0000 	ldr.w	r0, [fp]
 802f428:	00b1      	lsls	r1, r6, #2
 802f42a:	f003 fcb9 	bl	8032da0 <realloc>
 802f42e:	2800      	cmp	r0, #0
 802f430:	f000 8456 	beq.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f434:	f8cb 0000 	str.w	r0, [fp]
 802f438:	f8ab 6004 	strh.w	r6, [fp, #4]
 802f43c:	f8db 3000 	ldr.w	r3, [fp]
 802f440:	f10a 0201 	add.w	r2, sl, #1
 802f444:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802f448:	462e      	mov	r6, r5
 802f44a:	f8ab 2006 	strh.w	r2, [fp, #6]
 802f44e:	464d      	mov	r5, r9
 802f450:	9400      	str	r4, [sp, #0]
 802f452:	4629      	mov	r1, r5
 802f454:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f456:	4643      	mov	r3, r8
 802f458:	2201      	movs	r2, #1
 802f45a:	f7ff fcf3 	bl	802ee44 <_sfread_r>
 802f45e:	4605      	mov	r5, r0
 802f460:	2800      	cmp	r0, #0
 802f462:	f43f ade0 	beq.w	802f026 <__ssvfiscanf_r+0x16e>
 802f466:	b13e      	cbz	r6, 802f478 <__ssvfiscanf_r+0x5c0>
 802f468:	4580      	cmp	r8, r0
 802f46a:	d905      	bls.n	802f478 <__ssvfiscanf_r+0x5c0>
 802f46c:	4601      	mov	r1, r0
 802f46e:	6830      	ldr	r0, [r6, #0]
 802f470:	f003 fc96 	bl	8032da0 <realloc>
 802f474:	b100      	cbz	r0, 802f478 <__ssvfiscanf_r+0x5c0>
 802f476:	6030      	str	r0, [r6, #0]
 802f478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f47a:	442b      	add	r3, r5
 802f47c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f47e:	e780      	b.n	802f382 <__ssvfiscanf_r+0x4ca>
 802f480:	0802b109 	.word	0x0802b109
 802f484:	0803aabd 	.word	0x0803aabd
 802f488:	2b00      	cmp	r3, #0
 802f48a:	bf08      	it	eq
 802f48c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802f490:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f492:	693b      	ldr	r3, [r7, #16]
 802f494:	2d00      	cmp	r5, #0
 802f496:	f000 8100 	beq.w	802f69a <__ssvfiscanf_r+0x7e2>
 802f49a:	2b00      	cmp	r3, #0
 802f49c:	f040 80a5 	bne.w	802f5ea <__ssvfiscanf_r+0x732>
 802f4a0:	6a3b      	ldr	r3, [r7, #32]
 802f4a2:	0631      	lsls	r1, r6, #24
 802f4a4:	f853 5b04 	ldr.w	r5, [r3], #4
 802f4a8:	623b      	str	r3, [r7, #32]
 802f4aa:	f140 80a5 	bpl.w	802f5f8 <__ssvfiscanf_r+0x740>
 802f4ae:	2d00      	cmp	r5, #0
 802f4b0:	f43f ae55 	beq.w	802f15e <__ssvfiscanf_r+0x2a6>
 802f4b4:	2080      	movs	r0, #128	@ 0x80
 802f4b6:	f7fe fce9 	bl	802de8c <malloc>
 802f4ba:	4680      	mov	r8, r0
 802f4bc:	2800      	cmp	r0, #0
 802f4be:	f43f ae4b 	beq.w	802f158 <__ssvfiscanf_r+0x2a0>
 802f4c2:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 802f4c6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802f4ca:	6028      	str	r0, [r5, #0]
 802f4cc:	429e      	cmp	r6, r3
 802f4ce:	d314      	bcc.n	802f4fa <__ssvfiscanf_r+0x642>
 802f4d0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802f4d4:	4293      	cmp	r3, r2
 802f4d6:	f200 8403 	bhi.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f4da:	3308      	adds	r3, #8
 802f4dc:	fa1f f983 	uxth.w	r9, r3
 802f4e0:	f8db 0000 	ldr.w	r0, [fp]
 802f4e4:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802f4e8:	f003 fc5a 	bl	8032da0 <realloc>
 802f4ec:	2800      	cmp	r0, #0
 802f4ee:	f000 83f7 	beq.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f4f2:	f8cb 0000 	str.w	r0, [fp]
 802f4f6:	f8ab 9004 	strh.w	r9, [fp, #4]
 802f4fa:	f8db 3000 	ldr.w	r3, [fp]
 802f4fe:	1c72      	adds	r2, r6, #1
 802f500:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 802f504:	46aa      	mov	sl, r5
 802f506:	f8ab 2006 	strh.w	r2, [fp, #6]
 802f50a:	4645      	mov	r5, r8
 802f50c:	f04f 0920 	mov.w	r9, #32
 802f510:	2600      	movs	r6, #0
 802f512:	f7fd fbfd 	bl	802cd10 <__locale_mb_cur_max>
 802f516:	4286      	cmp	r6, r0
 802f518:	f43f ad85 	beq.w	802f026 <__ssvfiscanf_r+0x16e>
 802f51c:	1c73      	adds	r3, r6, #1
 802f51e:	607b      	str	r3, [r7, #4]
 802f520:	6823      	ldr	r3, [r4, #0]
 802f522:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802f526:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f52a:	558a      	strb	r2, [r1, r6]
 802f52c:	6862      	ldr	r2, [r4, #4]
 802f52e:	3a01      	subs	r2, #1
 802f530:	e9c4 3200 	strd	r3, r2, [r4]
 802f534:	69bb      	ldr	r3, [r7, #24]
 802f536:	2b03      	cmp	r3, #3
 802f538:	d102      	bne.n	802f540 <__ssvfiscanf_r+0x688>
 802f53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f53c:	2b04      	cmp	r3, #4
 802f53e:	d005      	beq.n	802f54c <__ssvfiscanf_r+0x694>
 802f540:	2208      	movs	r2, #8
 802f542:	2100      	movs	r1, #0
 802f544:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 802f548:	f7fc fa5a 	bl	802ba00 <memset>
 802f54c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 802f550:	9300      	str	r3, [sp, #0]
 802f552:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802f556:	687b      	ldr	r3, [r7, #4]
 802f558:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f55a:	4629      	mov	r1, r5
 802f55c:	f004 ffda 	bl	8034514 <_mbrtowc_r>
 802f560:	1c42      	adds	r2, r0, #1
 802f562:	61b8      	str	r0, [r7, #24]
 802f564:	f43f ad5f 	beq.w	802f026 <__ssvfiscanf_r+0x16e>
 802f568:	2800      	cmp	r0, #0
 802f56a:	d14a      	bne.n	802f602 <__ssvfiscanf_r+0x74a>
 802f56c:	6028      	str	r0, [r5, #0]
 802f56e:	682e      	ldr	r6, [r5, #0]
 802f570:	1c73      	adds	r3, r6, #1
 802f572:	d056      	beq.n	802f622 <__ssvfiscanf_r+0x76a>
 802f574:	2208      	movs	r2, #8
 802f576:	2100      	movs	r1, #0
 802f578:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802f57c:	f7fc fa40 	bl	802ba00 <memset>
 802f580:	4b99      	ldr	r3, [pc, #612]	@ (802f7e8 <__ssvfiscanf_r+0x930>)
 802f582:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802f588:	603b      	str	r3, [r7, #0]
 802f58a:	4632      	mov	r2, r6
 802f58c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802f590:	683e      	ldr	r6, [r7, #0]
 802f592:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802f596:	47b0      	blx	r6
 802f598:	2801      	cmp	r0, #1
 802f59a:	d144      	bne.n	802f626 <__ssvfiscanf_r+0x76e>
 802f59c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 802f5a0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802f5a4:	5c9b      	ldrb	r3, [r3, r2]
 802f5a6:	2b00      	cmp	r3, #0
 802f5a8:	d148      	bne.n	802f63c <__ssvfiscanf_r+0x784>
 802f5aa:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 802f5ae:	687b      	ldr	r3, [r7, #4]
 802f5b0:	2b00      	cmp	r3, #0
 802f5b2:	d13a      	bne.n	802f62a <__ssvfiscanf_r+0x772>
 802f5b4:	693b      	ldr	r3, [r7, #16]
 802f5b6:	2b00      	cmp	r3, #0
 802f5b8:	f47f ac9f 	bne.w	802eefa <__ssvfiscanf_r+0x42>
 802f5bc:	602b      	str	r3, [r5, #0]
 802f5be:	f1ba 0f00 	cmp.w	sl, #0
 802f5c2:	f43f aede 	beq.w	802f382 <__ssvfiscanf_r+0x4ca>
 802f5c6:	eba5 0108 	sub.w	r1, r5, r8
 802f5ca:	108b      	asrs	r3, r1, #2
 802f5cc:	3301      	adds	r3, #1
 802f5ce:	4599      	cmp	r9, r3
 802f5d0:	f67f aed7 	bls.w	802f382 <__ssvfiscanf_r+0x4ca>
 802f5d4:	f8da 0000 	ldr.w	r0, [sl]
 802f5d8:	3104      	adds	r1, #4
 802f5da:	f003 fbe1 	bl	8032da0 <realloc>
 802f5de:	2800      	cmp	r0, #0
 802f5e0:	f43f aecf 	beq.w	802f382 <__ssvfiscanf_r+0x4ca>
 802f5e4:	f8ca 0000 	str.w	r0, [sl]
 802f5e8:	e6cb      	b.n	802f382 <__ssvfiscanf_r+0x4ca>
 802f5ea:	f04f 0900 	mov.w	r9, #0
 802f5ee:	46c8      	mov	r8, r9
 802f5f0:	46ca      	mov	sl, r9
 802f5f2:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 802f5f6:	e78b      	b.n	802f510 <__ssvfiscanf_r+0x658>
 802f5f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802f5fc:	46c8      	mov	r8, r9
 802f5fe:	46ca      	mov	sl, r9
 802f600:	e786      	b.n	802f510 <__ssvfiscanf_r+0x658>
 802f602:	69bb      	ldr	r3, [r7, #24]
 802f604:	3302      	adds	r3, #2
 802f606:	d1b2      	bne.n	802f56e <__ssvfiscanf_r+0x6b6>
 802f608:	687e      	ldr	r6, [r7, #4]
 802f60a:	6863      	ldr	r3, [r4, #4]
 802f60c:	2b00      	cmp	r3, #0
 802f60e:	dc3f      	bgt.n	802f690 <__ssvfiscanf_r+0x7d8>
 802f610:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f612:	4621      	mov	r1, r4
 802f614:	f7ff fbf9 	bl	802ee0a <__ssrefill_r>
 802f618:	2800      	cmp	r0, #0
 802f61a:	d039      	beq.n	802f690 <__ssvfiscanf_r+0x7d8>
 802f61c:	2e00      	cmp	r6, #0
 802f61e:	d0c9      	beq.n	802f5b4 <__ssvfiscanf_r+0x6fc>
 802f620:	e501      	b.n	802f026 <__ssvfiscanf_r+0x16e>
 802f622:	4632      	mov	r2, r6
 802f624:	e7bc      	b.n	802f5a0 <__ssvfiscanf_r+0x6e8>
 802f626:	2200      	movs	r2, #0
 802f628:	e7ba      	b.n	802f5a0 <__ssvfiscanf_r+0x6e8>
 802f62a:	687b      	ldr	r3, [r7, #4]
 802f62c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f62e:	3b01      	subs	r3, #1
 802f630:	4622      	mov	r2, r4
 802f632:	5cf1      	ldrb	r1, [r6, r3]
 802f634:	607b      	str	r3, [r7, #4]
 802f636:	f7ff fbad 	bl	802ed94 <_sungetc_r>
 802f63a:	e7b8      	b.n	802f5ae <__ssvfiscanf_r+0x6f6>
 802f63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f63e:	687a      	ldr	r2, [r7, #4]
 802f640:	4413      	add	r3, r2
 802f642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f644:	69bb      	ldr	r3, [r7, #24]
 802f646:	2b03      	cmp	r3, #3
 802f648:	d102      	bne.n	802f650 <__ssvfiscanf_r+0x798>
 802f64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f64c:	2b04      	cmp	r3, #4
 802f64e:	d002      	beq.n	802f656 <__ssvfiscanf_r+0x79e>
 802f650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f652:	3b01      	subs	r3, #1
 802f654:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f656:	693b      	ldr	r3, [r7, #16]
 802f658:	b9c3      	cbnz	r3, 802f68c <__ssvfiscanf_r+0x7d4>
 802f65a:	3504      	adds	r5, #4
 802f65c:	f1ba 0f00 	cmp.w	sl, #0
 802f660:	d014      	beq.n	802f68c <__ssvfiscanf_r+0x7d4>
 802f662:	eba5 0608 	sub.w	r6, r5, r8
 802f666:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802f66a:	d80d      	bhi.n	802f688 <__ssvfiscanf_r+0x7d0>
 802f66c:	4640      	mov	r0, r8
 802f66e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802f672:	f003 fb95 	bl	8032da0 <realloc>
 802f676:	4680      	mov	r8, r0
 802f678:	2800      	cmp	r0, #0
 802f67a:	f43f ad6d 	beq.w	802f158 <__ssvfiscanf_r+0x2a0>
 802f67e:	1985      	adds	r5, r0, r6
 802f680:	f8ca 0000 	str.w	r0, [sl]
 802f684:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802f688:	693e      	ldr	r6, [r7, #16]
 802f68a:	e7be      	b.n	802f60a <__ssvfiscanf_r+0x752>
 802f68c:	2600      	movs	r6, #0
 802f68e:	e7bc      	b.n	802f60a <__ssvfiscanf_r+0x752>
 802f690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f692:	2b00      	cmp	r3, #0
 802f694:	f47f af3d 	bne.w	802f512 <__ssvfiscanf_r+0x65a>
 802f698:	e78c      	b.n	802f5b4 <__ssvfiscanf_r+0x6fc>
 802f69a:	b1e3      	cbz	r3, 802f6d6 <__ssvfiscanf_r+0x81e>
 802f69c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 802f6a0:	6823      	ldr	r3, [r4, #0]
 802f6a2:	781a      	ldrb	r2, [r3, #0]
 802f6a4:	5cb2      	ldrb	r2, [r6, r2]
 802f6a6:	b91a      	cbnz	r2, 802f6b0 <__ssvfiscanf_r+0x7f8>
 802f6a8:	2d00      	cmp	r5, #0
 802f6aa:	f47f ae92 	bne.w	802f3d2 <__ssvfiscanf_r+0x51a>
 802f6ae:	e450      	b.n	802ef52 <__ssvfiscanf_r+0x9a>
 802f6b0:	3301      	adds	r3, #1
 802f6b2:	6862      	ldr	r2, [r4, #4]
 802f6b4:	6023      	str	r3, [r4, #0]
 802f6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f6b8:	3501      	adds	r5, #1
 802f6ba:	3a01      	subs	r2, #1
 802f6bc:	42ab      	cmp	r3, r5
 802f6be:	6062      	str	r2, [r4, #4]
 802f6c0:	f43f ae87 	beq.w	802f3d2 <__ssvfiscanf_r+0x51a>
 802f6c4:	2a00      	cmp	r2, #0
 802f6c6:	dceb      	bgt.n	802f6a0 <__ssvfiscanf_r+0x7e8>
 802f6c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f6ca:	4621      	mov	r1, r4
 802f6cc:	f7ff fb9d 	bl	802ee0a <__ssrefill_r>
 802f6d0:	2800      	cmp	r0, #0
 802f6d2:	d0e5      	beq.n	802f6a0 <__ssvfiscanf_r+0x7e8>
 802f6d4:	e67d      	b.n	802f3d2 <__ssvfiscanf_r+0x51a>
 802f6d6:	6a3b      	ldr	r3, [r7, #32]
 802f6d8:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 802f6dc:	f853 5b04 	ldr.w	r5, [r3], #4
 802f6e0:	623b      	str	r3, [r7, #32]
 802f6e2:	d07e      	beq.n	802f7e2 <__ssvfiscanf_r+0x92a>
 802f6e4:	2d00      	cmp	r5, #0
 802f6e6:	f43f ac34 	beq.w	802ef52 <__ssvfiscanf_r+0x9a>
 802f6ea:	2020      	movs	r0, #32
 802f6ec:	f7fe fbce 	bl	802de8c <malloc>
 802f6f0:	4680      	mov	r8, r0
 802f6f2:	2800      	cmp	r0, #0
 802f6f4:	f43f ac9c 	beq.w	802f030 <__ssvfiscanf_r+0x178>
 802f6f8:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802f6fc:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802f700:	6028      	str	r0, [r5, #0]
 802f702:	45b1      	cmp	r9, r6
 802f704:	d312      	bcc.n	802f72c <__ssvfiscanf_r+0x874>
 802f706:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802f70a:	429e      	cmp	r6, r3
 802f70c:	f200 82e8 	bhi.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f710:	3608      	adds	r6, #8
 802f712:	b2b6      	uxth	r6, r6
 802f714:	f8db 0000 	ldr.w	r0, [fp]
 802f718:	00b1      	lsls	r1, r6, #2
 802f71a:	f003 fb41 	bl	8032da0 <realloc>
 802f71e:	2800      	cmp	r0, #0
 802f720:	f000 82de 	beq.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f724:	f8cb 0000 	str.w	r0, [fp]
 802f728:	f8ab 6004 	strh.w	r6, [fp, #4]
 802f72c:	f8db 3000 	ldr.w	r3, [fp]
 802f730:	f109 0201 	add.w	r2, r9, #1
 802f734:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802f738:	46aa      	mov	sl, r5
 802f73a:	f8ab 2006 	strh.w	r2, [fp, #6]
 802f73e:	4645      	mov	r5, r8
 802f740:	f04f 0920 	mov.w	r9, #32
 802f744:	462e      	mov	r6, r5
 802f746:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 802f74a:	6823      	ldr	r3, [r4, #0]
 802f74c:	781a      	ldrb	r2, [r3, #0]
 802f74e:	f818 2002 	ldrb.w	r2, [r8, r2]
 802f752:	b362      	cbz	r2, 802f7ae <__ssvfiscanf_r+0x8f6>
 802f754:	6862      	ldr	r2, [r4, #4]
 802f756:	3a01      	subs	r2, #1
 802f758:	6062      	str	r2, [r4, #4]
 802f75a:	1c5a      	adds	r2, r3, #1
 802f75c:	6022      	str	r2, [r4, #0]
 802f75e:	781b      	ldrb	r3, [r3, #0]
 802f760:	f805 3b01 	strb.w	r3, [r5], #1
 802f764:	f1ba 0f00 	cmp.w	sl, #0
 802f768:	d011      	beq.n	802f78e <__ssvfiscanf_r+0x8d6>
 802f76a:	1bab      	subs	r3, r5, r6
 802f76c:	454b      	cmp	r3, r9
 802f76e:	d30e      	bcc.n	802f78e <__ssvfiscanf_r+0x8d6>
 802f770:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802f774:	4630      	mov	r0, r6
 802f776:	4649      	mov	r1, r9
 802f778:	613b      	str	r3, [r7, #16]
 802f77a:	f003 fb11 	bl	8032da0 <realloc>
 802f77e:	4606      	mov	r6, r0
 802f780:	2800      	cmp	r0, #0
 802f782:	f43f ac55 	beq.w	802f030 <__ssvfiscanf_r+0x178>
 802f786:	693b      	ldr	r3, [r7, #16]
 802f788:	f8ca 0000 	str.w	r0, [sl]
 802f78c:	18c5      	adds	r5, r0, r3
 802f78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f790:	3b01      	subs	r3, #1
 802f792:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f794:	d00b      	beq.n	802f7ae <__ssvfiscanf_r+0x8f6>
 802f796:	6863      	ldr	r3, [r4, #4]
 802f798:	2b00      	cmp	r3, #0
 802f79a:	dcd6      	bgt.n	802f74a <__ssvfiscanf_r+0x892>
 802f79c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f79e:	4621      	mov	r1, r4
 802f7a0:	f7ff fb33 	bl	802ee0a <__ssrefill_r>
 802f7a4:	2800      	cmp	r0, #0
 802f7a6:	d0d0      	beq.n	802f74a <__ssvfiscanf_r+0x892>
 802f7a8:	42b5      	cmp	r5, r6
 802f7aa:	f43f ac3c 	beq.w	802f026 <__ssvfiscanf_r+0x16e>
 802f7ae:	1bae      	subs	r6, r5, r6
 802f7b0:	f43f abcf 	beq.w	802ef52 <__ssvfiscanf_r+0x9a>
 802f7b4:	2300      	movs	r3, #0
 802f7b6:	702b      	strb	r3, [r5, #0]
 802f7b8:	f1ba 0f00 	cmp.w	sl, #0
 802f7bc:	d009      	beq.n	802f7d2 <__ssvfiscanf_r+0x91a>
 802f7be:	1c71      	adds	r1, r6, #1
 802f7c0:	4589      	cmp	r9, r1
 802f7c2:	d906      	bls.n	802f7d2 <__ssvfiscanf_r+0x91a>
 802f7c4:	f8da 0000 	ldr.w	r0, [sl]
 802f7c8:	f003 faea 	bl	8032da0 <realloc>
 802f7cc:	b108      	cbz	r0, 802f7d2 <__ssvfiscanf_r+0x91a>
 802f7ce:	f8ca 0000 	str.w	r0, [sl]
 802f7d2:	69fb      	ldr	r3, [r7, #28]
 802f7d4:	3301      	adds	r3, #1
 802f7d6:	61fb      	str	r3, [r7, #28]
 802f7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f7da:	4433      	add	r3, r6
 802f7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f7de:	f7ff bb8c 	b.w	802eefa <__ssvfiscanf_r+0x42>
 802f7e2:	46ca      	mov	sl, r9
 802f7e4:	e7ae      	b.n	802f744 <__ssvfiscanf_r+0x88c>
 802f7e6:	bf00      	nop
 802f7e8:	200000e8 	.word	0x200000e8
 802f7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f7ee:	2b00      	cmp	r3, #0
 802f7f0:	bf08      	it	eq
 802f7f2:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802f7f6:	f016 0501 	ands.w	r5, r6, #1
 802f7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f7fc:	f006 0810 	and.w	r8, r6, #16
 802f800:	f000 80e1 	beq.w	802f9c6 <__ssvfiscanf_r+0xb0e>
 802f804:	f1b8 0f00 	cmp.w	r8, #0
 802f808:	f040 8089 	bne.w	802f91e <__ssvfiscanf_r+0xa66>
 802f80c:	6a3b      	ldr	r3, [r7, #32]
 802f80e:	0636      	lsls	r6, r6, #24
 802f810:	f853 5b04 	ldr.w	r5, [r3], #4
 802f814:	623b      	str	r3, [r7, #32]
 802f816:	f140 8089 	bpl.w	802f92c <__ssvfiscanf_r+0xa74>
 802f81a:	2d00      	cmp	r5, #0
 802f81c:	f43f ac9f 	beq.w	802f15e <__ssvfiscanf_r+0x2a6>
 802f820:	2080      	movs	r0, #128	@ 0x80
 802f822:	f7fe fb33 	bl	802de8c <malloc>
 802f826:	4606      	mov	r6, r0
 802f828:	2800      	cmp	r0, #0
 802f82a:	f43f ac95 	beq.w	802f158 <__ssvfiscanf_r+0x2a0>
 802f82e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802f832:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802f836:	6028      	str	r0, [r5, #0]
 802f838:	4599      	cmp	r9, r3
 802f83a:	d314      	bcc.n	802f866 <__ssvfiscanf_r+0x9ae>
 802f83c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802f840:	4293      	cmp	r3, r2
 802f842:	f200 824d 	bhi.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f846:	3308      	adds	r3, #8
 802f848:	fa1f fa83 	uxth.w	sl, r3
 802f84c:	f8db 0000 	ldr.w	r0, [fp]
 802f850:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802f854:	f003 faa4 	bl	8032da0 <realloc>
 802f858:	2800      	cmp	r0, #0
 802f85a:	f000 8241 	beq.w	802fce0 <__ssvfiscanf_r+0xe28>
 802f85e:	f8cb 0000 	str.w	r0, [fp]
 802f862:	f8ab a004 	strh.w	sl, [fp, #4]
 802f866:	f8db 3000 	ldr.w	r3, [fp]
 802f86a:	f109 0201 	add.w	r2, r9, #1
 802f86e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802f872:	46aa      	mov	sl, r5
 802f874:	f8ab 2006 	strh.w	r2, [fp, #6]
 802f878:	4635      	mov	r5, r6
 802f87a:	f04f 0920 	mov.w	r9, #32
 802f87e:	2300      	movs	r3, #0
 802f880:	6822      	ldr	r2, [r4, #0]
 802f882:	499e      	ldr	r1, [pc, #632]	@ (802fafc <__ssvfiscanf_r+0xc44>)
 802f884:	7812      	ldrb	r2, [r2, #0]
 802f886:	5c8a      	ldrb	r2, [r1, r2]
 802f888:	0711      	lsls	r1, r2, #28
 802f88a:	d43c      	bmi.n	802f906 <__ssvfiscanf_r+0xa4e>
 802f88c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802f88e:	2a00      	cmp	r2, #0
 802f890:	d039      	beq.n	802f906 <__ssvfiscanf_r+0xa4e>
 802f892:	613b      	str	r3, [r7, #16]
 802f894:	f7fd fa3c 	bl	802cd10 <__locale_mb_cur_max>
 802f898:	693b      	ldr	r3, [r7, #16]
 802f89a:	4298      	cmp	r0, r3
 802f89c:	f43f abc3 	beq.w	802f026 <__ssvfiscanf_r+0x16e>
 802f8a0:	1c5a      	adds	r2, r3, #1
 802f8a2:	613a      	str	r2, [r7, #16]
 802f8a4:	6822      	ldr	r2, [r4, #0]
 802f8a6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802f8aa:	f812 0b01 	ldrb.w	r0, [r2], #1
 802f8ae:	54c8      	strb	r0, [r1, r3]
 802f8b0:	6863      	ldr	r3, [r4, #4]
 802f8b2:	3b01      	subs	r3, #1
 802f8b4:	e9c4 2300 	strd	r2, r3, [r4]
 802f8b8:	69bb      	ldr	r3, [r7, #24]
 802f8ba:	2b03      	cmp	r3, #3
 802f8bc:	d102      	bne.n	802f8c4 <__ssvfiscanf_r+0xa0c>
 802f8be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802f8c0:	2b04      	cmp	r3, #4
 802f8c2:	d005      	beq.n	802f8d0 <__ssvfiscanf_r+0xa18>
 802f8c4:	2208      	movs	r2, #8
 802f8c6:	2100      	movs	r1, #0
 802f8c8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802f8cc:	f7fc f898 	bl	802ba00 <memset>
 802f8d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802f8d4:	9300      	str	r3, [sp, #0]
 802f8d6:	693b      	ldr	r3, [r7, #16]
 802f8d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f8da:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802f8de:	4629      	mov	r1, r5
 802f8e0:	f004 fe18 	bl	8034514 <_mbrtowc_r>
 802f8e4:	4603      	mov	r3, r0
 802f8e6:	61b8      	str	r0, [r7, #24]
 802f8e8:	1c58      	adds	r0, r3, #1
 802f8ea:	f43f ab9c 	beq.w	802f026 <__ssvfiscanf_r+0x16e>
 802f8ee:	bb0b      	cbnz	r3, 802f934 <__ssvfiscanf_r+0xa7c>
 802f8f0:	602b      	str	r3, [r5, #0]
 802f8f2:	6828      	ldr	r0, [r5, #0]
 802f8f4:	f004 fe28 	bl	8034548 <iswspace>
 802f8f8:	4603      	mov	r3, r0
 802f8fa:	2800      	cmp	r0, #0
 802f8fc:	d037      	beq.n	802f96e <__ssvfiscanf_r+0xab6>
 802f8fe:	693a      	ldr	r2, [r7, #16]
 802f900:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802f904:	bb4a      	cbnz	r2, 802f95a <__ssvfiscanf_r+0xaa2>
 802f906:	f1b8 0f00 	cmp.w	r8, #0
 802f90a:	f47f aaf6 	bne.w	802eefa <__ssvfiscanf_r+0x42>
 802f90e:	f8c5 8000 	str.w	r8, [r5]
 802f912:	f1ba 0f00 	cmp.w	sl, #0
 802f916:	f43f ad34 	beq.w	802f382 <__ssvfiscanf_r+0x4ca>
 802f91a:	1ba9      	subs	r1, r5, r6
 802f91c:	e655      	b.n	802f5ca <__ssvfiscanf_r+0x712>
 802f91e:	f04f 0900 	mov.w	r9, #0
 802f922:	464e      	mov	r6, r9
 802f924:	46ca      	mov	sl, r9
 802f926:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 802f92a:	e7a8      	b.n	802f87e <__ssvfiscanf_r+0x9c6>
 802f92c:	46c1      	mov	r9, r8
 802f92e:	4646      	mov	r6, r8
 802f930:	46c2      	mov	sl, r8
 802f932:	e7a4      	b.n	802f87e <__ssvfiscanf_r+0x9c6>
 802f934:	69bb      	ldr	r3, [r7, #24]
 802f936:	3302      	adds	r3, #2
 802f938:	d1db      	bne.n	802f8f2 <__ssvfiscanf_r+0xa3a>
 802f93a:	693b      	ldr	r3, [r7, #16]
 802f93c:	6862      	ldr	r2, [r4, #4]
 802f93e:	2a00      	cmp	r2, #0
 802f940:	dc9e      	bgt.n	802f880 <__ssvfiscanf_r+0x9c8>
 802f942:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f944:	613b      	str	r3, [r7, #16]
 802f946:	4621      	mov	r1, r4
 802f948:	f7ff fa5f 	bl	802ee0a <__ssrefill_r>
 802f94c:	693b      	ldr	r3, [r7, #16]
 802f94e:	2800      	cmp	r0, #0
 802f950:	d096      	beq.n	802f880 <__ssvfiscanf_r+0x9c8>
 802f952:	2b00      	cmp	r3, #0
 802f954:	f47f ab67 	bne.w	802f026 <__ssvfiscanf_r+0x16e>
 802f958:	e7d5      	b.n	802f906 <__ssvfiscanf_r+0xa4e>
 802f95a:	693a      	ldr	r2, [r7, #16]
 802f95c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f95e:	3a01      	subs	r2, #1
 802f960:	613a      	str	r2, [r7, #16]
 802f962:	6939      	ldr	r1, [r7, #16]
 802f964:	4622      	mov	r2, r4
 802f966:	5c59      	ldrb	r1, [r3, r1]
 802f968:	f7ff fa14 	bl	802ed94 <_sungetc_r>
 802f96c:	e7c7      	b.n	802f8fe <__ssvfiscanf_r+0xa46>
 802f96e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f970:	6939      	ldr	r1, [r7, #16]
 802f972:	440a      	add	r2, r1
 802f974:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802f976:	69ba      	ldr	r2, [r7, #24]
 802f978:	2a03      	cmp	r2, #3
 802f97a:	d102      	bne.n	802f982 <__ssvfiscanf_r+0xaca>
 802f97c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802f97e:	2a04      	cmp	r2, #4
 802f980:	d002      	beq.n	802f988 <__ssvfiscanf_r+0xad0>
 802f982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802f984:	3a01      	subs	r2, #1
 802f986:	62ba      	str	r2, [r7, #40]	@ 0x28
 802f988:	f1b8 0f00 	cmp.w	r8, #0
 802f98c:	d1d6      	bne.n	802f93c <__ssvfiscanf_r+0xa84>
 802f98e:	3504      	adds	r5, #4
 802f990:	f1ba 0f00 	cmp.w	sl, #0
 802f994:	d015      	beq.n	802f9c2 <__ssvfiscanf_r+0xb0a>
 802f996:	1bab      	subs	r3, r5, r6
 802f998:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802f99c:	d80f      	bhi.n	802f9be <__ssvfiscanf_r+0xb06>
 802f99e:	4630      	mov	r0, r6
 802f9a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802f9a4:	613b      	str	r3, [r7, #16]
 802f9a6:	f003 f9fb 	bl	8032da0 <realloc>
 802f9aa:	4606      	mov	r6, r0
 802f9ac:	2800      	cmp	r0, #0
 802f9ae:	f43f abd3 	beq.w	802f158 <__ssvfiscanf_r+0x2a0>
 802f9b2:	693b      	ldr	r3, [r7, #16]
 802f9b4:	f8ca 0000 	str.w	r0, [sl]
 802f9b8:	18c5      	adds	r5, r0, r3
 802f9ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802f9be:	4643      	mov	r3, r8
 802f9c0:	e7bc      	b.n	802f93c <__ssvfiscanf_r+0xa84>
 802f9c2:	4653      	mov	r3, sl
 802f9c4:	e7ba      	b.n	802f93c <__ssvfiscanf_r+0xa84>
 802f9c6:	f1b8 0f00 	cmp.w	r8, #0
 802f9ca:	d019      	beq.n	802fa00 <__ssvfiscanf_r+0xb48>
 802f9cc:	4e4b      	ldr	r6, [pc, #300]	@ (802fafc <__ssvfiscanf_r+0xc44>)
 802f9ce:	6823      	ldr	r3, [r4, #0]
 802f9d0:	781a      	ldrb	r2, [r3, #0]
 802f9d2:	5cb2      	ldrb	r2, [r6, r2]
 802f9d4:	0712      	lsls	r2, r2, #28
 802f9d6:	f53f acfc 	bmi.w	802f3d2 <__ssvfiscanf_r+0x51a>
 802f9da:	3301      	adds	r3, #1
 802f9dc:	6862      	ldr	r2, [r4, #4]
 802f9de:	6023      	str	r3, [r4, #0]
 802f9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f9e2:	3501      	adds	r5, #1
 802f9e4:	3a01      	subs	r2, #1
 802f9e6:	429d      	cmp	r5, r3
 802f9e8:	6062      	str	r2, [r4, #4]
 802f9ea:	f43f acf2 	beq.w	802f3d2 <__ssvfiscanf_r+0x51a>
 802f9ee:	2a00      	cmp	r2, #0
 802f9f0:	dced      	bgt.n	802f9ce <__ssvfiscanf_r+0xb16>
 802f9f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f9f4:	4621      	mov	r1, r4
 802f9f6:	f7ff fa08 	bl	802ee0a <__ssrefill_r>
 802f9fa:	2800      	cmp	r0, #0
 802f9fc:	d0e7      	beq.n	802f9ce <__ssvfiscanf_r+0xb16>
 802f9fe:	e4e8      	b.n	802f3d2 <__ssvfiscanf_r+0x51a>
 802fa00:	6a3b      	ldr	r3, [r7, #32]
 802fa02:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802fa06:	f853 5b04 	ldr.w	r5, [r3], #4
 802fa0a:	623b      	str	r3, [r7, #32]
 802fa0c:	d074      	beq.n	802faf8 <__ssvfiscanf_r+0xc40>
 802fa0e:	2d00      	cmp	r5, #0
 802fa10:	f43f aa9f 	beq.w	802ef52 <__ssvfiscanf_r+0x9a>
 802fa14:	2020      	movs	r0, #32
 802fa16:	f7fe fa39 	bl	802de8c <malloc>
 802fa1a:	4680      	mov	r8, r0
 802fa1c:	2800      	cmp	r0, #0
 802fa1e:	f43f ab07 	beq.w	802f030 <__ssvfiscanf_r+0x178>
 802fa22:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802fa26:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802fa2a:	6028      	str	r0, [r5, #0]
 802fa2c:	45b1      	cmp	r9, r6
 802fa2e:	d312      	bcc.n	802fa56 <__ssvfiscanf_r+0xb9e>
 802fa30:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802fa34:	429e      	cmp	r6, r3
 802fa36:	f200 8153 	bhi.w	802fce0 <__ssvfiscanf_r+0xe28>
 802fa3a:	3608      	adds	r6, #8
 802fa3c:	b2b6      	uxth	r6, r6
 802fa3e:	f8db 0000 	ldr.w	r0, [fp]
 802fa42:	00b1      	lsls	r1, r6, #2
 802fa44:	f003 f9ac 	bl	8032da0 <realloc>
 802fa48:	2800      	cmp	r0, #0
 802fa4a:	f000 8149 	beq.w	802fce0 <__ssvfiscanf_r+0xe28>
 802fa4e:	f8cb 0000 	str.w	r0, [fp]
 802fa52:	f8ab 6004 	strh.w	r6, [fp, #4]
 802fa56:	f8db 3000 	ldr.w	r3, [fp]
 802fa5a:	f109 0201 	add.w	r2, r9, #1
 802fa5e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802fa62:	46aa      	mov	sl, r5
 802fa64:	f8ab 2006 	strh.w	r2, [fp, #6]
 802fa68:	4645      	mov	r5, r8
 802fa6a:	2620      	movs	r6, #32
 802fa6c:	46a9      	mov	r9, r5
 802fa6e:	6823      	ldr	r3, [r4, #0]
 802fa70:	4922      	ldr	r1, [pc, #136]	@ (802fafc <__ssvfiscanf_r+0xc44>)
 802fa72:	781a      	ldrb	r2, [r3, #0]
 802fa74:	5c8a      	ldrb	r2, [r1, r2]
 802fa76:	0710      	lsls	r0, r2, #28
 802fa78:	d428      	bmi.n	802facc <__ssvfiscanf_r+0xc14>
 802fa7a:	6862      	ldr	r2, [r4, #4]
 802fa7c:	3a01      	subs	r2, #1
 802fa7e:	6062      	str	r2, [r4, #4]
 802fa80:	1c5a      	adds	r2, r3, #1
 802fa82:	6022      	str	r2, [r4, #0]
 802fa84:	781b      	ldrb	r3, [r3, #0]
 802fa86:	f805 3b01 	strb.w	r3, [r5], #1
 802fa8a:	f1ba 0f00 	cmp.w	sl, #0
 802fa8e:	d010      	beq.n	802fab2 <__ssvfiscanf_r+0xbfa>
 802fa90:	eba5 0809 	sub.w	r8, r5, r9
 802fa94:	45b0      	cmp	r8, r6
 802fa96:	d30c      	bcc.n	802fab2 <__ssvfiscanf_r+0xbfa>
 802fa98:	0076      	lsls	r6, r6, #1
 802fa9a:	4648      	mov	r0, r9
 802fa9c:	4631      	mov	r1, r6
 802fa9e:	f003 f97f 	bl	8032da0 <realloc>
 802faa2:	4681      	mov	r9, r0
 802faa4:	2800      	cmp	r0, #0
 802faa6:	f43f aac3 	beq.w	802f030 <__ssvfiscanf_r+0x178>
 802faaa:	eb00 0508 	add.w	r5, r0, r8
 802faae:	f8ca 0000 	str.w	r0, [sl]
 802fab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fab4:	3b01      	subs	r3, #1
 802fab6:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fab8:	d008      	beq.n	802facc <__ssvfiscanf_r+0xc14>
 802faba:	6863      	ldr	r3, [r4, #4]
 802fabc:	2b00      	cmp	r3, #0
 802fabe:	dcd6      	bgt.n	802fa6e <__ssvfiscanf_r+0xbb6>
 802fac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fac2:	4621      	mov	r1, r4
 802fac4:	f7ff f9a1 	bl	802ee0a <__ssrefill_r>
 802fac8:	2800      	cmp	r0, #0
 802faca:	d0d0      	beq.n	802fa6e <__ssvfiscanf_r+0xbb6>
 802facc:	2300      	movs	r3, #0
 802face:	702b      	strb	r3, [r5, #0]
 802fad0:	eba5 0509 	sub.w	r5, r5, r9
 802fad4:	f1ba 0f00 	cmp.w	sl, #0
 802fad8:	f43f acce 	beq.w	802f478 <__ssvfiscanf_r+0x5c0>
 802fadc:	1c69      	adds	r1, r5, #1
 802fade:	428e      	cmp	r6, r1
 802fae0:	f67f acca 	bls.w	802f478 <__ssvfiscanf_r+0x5c0>
 802fae4:	f8da 0000 	ldr.w	r0, [sl]
 802fae8:	f003 f95a 	bl	8032da0 <realloc>
 802faec:	2800      	cmp	r0, #0
 802faee:	f43f acc3 	beq.w	802f478 <__ssvfiscanf_r+0x5c0>
 802faf2:	f8ca 0000 	str.w	r0, [sl]
 802faf6:	e4bf      	b.n	802f478 <__ssvfiscanf_r+0x5c0>
 802faf8:	46b2      	mov	sl, r6
 802fafa:	e7b7      	b.n	802fa6c <__ssvfiscanf_r+0xbb4>
 802fafc:	0803aabd 	.word	0x0803aabd
 802fb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fb02:	3b01      	subs	r3, #1
 802fb04:	2b26      	cmp	r3, #38	@ 0x26
 802fb06:	bf81      	itttt	hi
 802fb08:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 802fb0a:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 802fb0e:	2327      	movhi	r3, #39	@ 0x27
 802fb10:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 802fb12:	bf98      	it	ls
 802fb14:	f04f 0800 	movls.w	r8, #0
 802fb18:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 802fb1c:	f04f 0900 	mov.w	r9, #0
 802fb20:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 802fb24:	6822      	ldr	r2, [r4, #0]
 802fb26:	7813      	ldrb	r3, [r2, #0]
 802fb28:	2b39      	cmp	r3, #57	@ 0x39
 802fb2a:	d80f      	bhi.n	802fb4c <__ssvfiscanf_r+0xc94>
 802fb2c:	2b2a      	cmp	r3, #42	@ 0x2a
 802fb2e:	d91a      	bls.n	802fb66 <__ssvfiscanf_r+0xcae>
 802fb30:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802fb34:	290e      	cmp	r1, #14
 802fb36:	d816      	bhi.n	802fb66 <__ssvfiscanf_r+0xcae>
 802fb38:	e8df f001 	tbb	[pc, r1]
 802fb3c:	15771577 	.word	0x15771577
 802fb40:	67673e15 	.word	0x67673e15
 802fb44:	67676767 	.word	0x67676767
 802fb48:	6f67      	.short	0x6f67
 802fb4a:	6f          	.byte	0x6f
 802fb4b:	00          	.byte	0x00
 802fb4c:	2b66      	cmp	r3, #102	@ 0x66
 802fb4e:	d831      	bhi.n	802fbb4 <__ssvfiscanf_r+0xcfc>
 802fb50:	2b60      	cmp	r3, #96	@ 0x60
 802fb52:	d803      	bhi.n	802fb5c <__ssvfiscanf_r+0xca4>
 802fb54:	2b46      	cmp	r3, #70	@ 0x46
 802fb56:	d804      	bhi.n	802fb62 <__ssvfiscanf_r+0xcaa>
 802fb58:	2b40      	cmp	r3, #64	@ 0x40
 802fb5a:	d904      	bls.n	802fb66 <__ssvfiscanf_r+0xcae>
 802fb5c:	6979      	ldr	r1, [r7, #20]
 802fb5e:	290a      	cmp	r1, #10
 802fb60:	e061      	b.n	802fc26 <__ssvfiscanf_r+0xd6e>
 802fb62:	2b58      	cmp	r3, #88	@ 0x58
 802fb64:	d066      	beq.n	802fc34 <__ssvfiscanf_r+0xd7c>
 802fb66:	05f1      	lsls	r1, r6, #23
 802fb68:	d511      	bpl.n	802fb8e <__ssvfiscanf_r+0xcd6>
 802fb6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802fb6e:	459a      	cmp	sl, r3
 802fb70:	d908      	bls.n	802fb84 <__ssvfiscanf_r+0xccc>
 802fb72:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 802fb76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fb78:	4622      	mov	r2, r4
 802fb7a:	f7ff f90b 	bl	802ed94 <_sungetc_r>
 802fb7e:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 802fb82:	46c2      	mov	sl, r8
 802fb84:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802fb88:	459a      	cmp	sl, r3
 802fb8a:	f43f a9e2 	beq.w	802ef52 <__ssvfiscanf_r+0x9a>
 802fb8e:	f016 0210 	ands.w	r2, r6, #16
 802fb92:	d16b      	bne.n	802fc6c <__ssvfiscanf_r+0xdb4>
 802fb94:	697b      	ldr	r3, [r7, #20]
 802fb96:	f88a 2000 	strb.w	r2, [sl]
 802fb9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fb9c:	68fd      	ldr	r5, [r7, #12]
 802fb9e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802fba2:	47a8      	blx	r5
 802fba4:	6a3b      	ldr	r3, [r7, #32]
 802fba6:	06b2      	lsls	r2, r6, #26
 802fba8:	f103 0804 	add.w	r8, r3, #4
 802fbac:	d555      	bpl.n	802fc5a <__ssvfiscanf_r+0xda2>
 802fbae:	681b      	ldr	r3, [r3, #0]
 802fbb0:	6018      	str	r0, [r3, #0]
 802fbb2:	e057      	b.n	802fc64 <__ssvfiscanf_r+0xdac>
 802fbb4:	2b78      	cmp	r3, #120	@ 0x78
 802fbb6:	e7d5      	b.n	802fb64 <__ssvfiscanf_r+0xcac>
 802fbb8:	0531      	lsls	r1, r6, #20
 802fbba:	d509      	bpl.n	802fbd0 <__ssvfiscanf_r+0xd18>
 802fbbc:	6979      	ldr	r1, [r7, #20]
 802fbbe:	b919      	cbnz	r1, 802fbc8 <__ssvfiscanf_r+0xd10>
 802fbc0:	2108      	movs	r1, #8
 802fbc2:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802fbc6:	6179      	str	r1, [r7, #20]
 802fbc8:	0575      	lsls	r5, r6, #21
 802fbca:	d506      	bpl.n	802fbda <__ssvfiscanf_r+0xd22>
 802fbcc:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 802fbd0:	4655      	mov	r5, sl
 802fbd2:	f805 3b01 	strb.w	r3, [r5], #1
 802fbd6:	46aa      	mov	sl, r5
 802fbd8:	e00b      	b.n	802fbf2 <__ssvfiscanf_r+0xd3a>
 802fbda:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 802fbde:	f1b8 0f00 	cmp.w	r8, #0
 802fbe2:	d004      	beq.n	802fbee <__ssvfiscanf_r+0xd36>
 802fbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fbe6:	3301      	adds	r3, #1
 802fbe8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802fbec:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fbee:	f109 0901 	add.w	r9, r9, #1
 802fbf2:	6863      	ldr	r3, [r4, #4]
 802fbf4:	3b01      	subs	r3, #1
 802fbf6:	2b00      	cmp	r3, #0
 802fbf8:	6063      	str	r3, [r4, #4]
 802fbfa:	dd27      	ble.n	802fc4c <__ssvfiscanf_r+0xd94>
 802fbfc:	3201      	adds	r2, #1
 802fbfe:	6022      	str	r2, [r4, #0]
 802fc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fc02:	3b01      	subs	r3, #1
 802fc04:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fc06:	d18d      	bne.n	802fb24 <__ssvfiscanf_r+0xc6c>
 802fc08:	e7ad      	b.n	802fb66 <__ssvfiscanf_r+0xcae>
 802fc0a:	6978      	ldr	r0, [r7, #20]
 802fc0c:	4936      	ldr	r1, [pc, #216]	@ (802fce8 <__ssvfiscanf_r+0xe30>)
 802fc0e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802fc12:	6179      	str	r1, [r7, #20]
 802fc14:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 802fc18:	e7da      	b.n	802fbd0 <__ssvfiscanf_r+0xd18>
 802fc1a:	6978      	ldr	r0, [r7, #20]
 802fc1c:	4932      	ldr	r1, [pc, #200]	@ (802fce8 <__ssvfiscanf_r+0xe30>)
 802fc1e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802fc22:	6179      	str	r1, [r7, #20]
 802fc24:	2908      	cmp	r1, #8
 802fc26:	dcf5      	bgt.n	802fc14 <__ssvfiscanf_r+0xd5c>
 802fc28:	e79d      	b.n	802fb66 <__ssvfiscanf_r+0xcae>
 802fc2a:	0630      	lsls	r0, r6, #24
 802fc2c:	d59b      	bpl.n	802fb66 <__ssvfiscanf_r+0xcae>
 802fc2e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 802fc32:	e7cd      	b.n	802fbd0 <__ssvfiscanf_r+0xd18>
 802fc34:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 802fc38:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802fc3c:	d193      	bne.n	802fb66 <__ssvfiscanf_r+0xcae>
 802fc3e:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 802fc42:	2110      	movs	r1, #16
 802fc44:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 802fc48:	6179      	str	r1, [r7, #20]
 802fc4a:	e7c1      	b.n	802fbd0 <__ssvfiscanf_r+0xd18>
 802fc4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fc4e:	4621      	mov	r1, r4
 802fc50:	f7ff f8db 	bl	802ee0a <__ssrefill_r>
 802fc54:	2800      	cmp	r0, #0
 802fc56:	d0d3      	beq.n	802fc00 <__ssvfiscanf_r+0xd48>
 802fc58:	e785      	b.n	802fb66 <__ssvfiscanf_r+0xcae>
 802fc5a:	0733      	lsls	r3, r6, #28
 802fc5c:	d50d      	bpl.n	802fc7a <__ssvfiscanf_r+0xdc2>
 802fc5e:	6a3b      	ldr	r3, [r7, #32]
 802fc60:	681b      	ldr	r3, [r3, #0]
 802fc62:	7018      	strb	r0, [r3, #0]
 802fc64:	69fb      	ldr	r3, [r7, #28]
 802fc66:	3301      	adds	r3, #1
 802fc68:	e9c7 3807 	strd	r3, r8, [r7, #28]
 802fc6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802fc70:	ebaa 0503 	sub.w	r5, sl, r3
 802fc74:	444d      	add	r5, r9
 802fc76:	f7ff bbac 	b.w	802f3d2 <__ssvfiscanf_r+0x51a>
 802fc7a:	0775      	lsls	r5, r6, #29
 802fc7c:	d503      	bpl.n	802fc86 <__ssvfiscanf_r+0xdce>
 802fc7e:	6a3b      	ldr	r3, [r7, #32]
 802fc80:	681b      	ldr	r3, [r3, #0]
 802fc82:	8018      	strh	r0, [r3, #0]
 802fc84:	e7ee      	b.n	802fc64 <__ssvfiscanf_r+0xdac>
 802fc86:	f016 0201 	ands.w	r2, r6, #1
 802fc8a:	d001      	beq.n	802fc90 <__ssvfiscanf_r+0xdd8>
 802fc8c:	6a3b      	ldr	r3, [r7, #32]
 802fc8e:	e78e      	b.n	802fbae <__ssvfiscanf_r+0xcf6>
 802fc90:	07b1      	lsls	r1, r6, #30
 802fc92:	d5fb      	bpl.n	802fc8c <__ssvfiscanf_r+0xdd4>
 802fc94:	4b15      	ldr	r3, [pc, #84]	@ (802fcec <__ssvfiscanf_r+0xe34>)
 802fc96:	68f9      	ldr	r1, [r7, #12]
 802fc98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fc9a:	4299      	cmp	r1, r3
 802fc9c:	697b      	ldr	r3, [r7, #20]
 802fc9e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802fca2:	d106      	bne.n	802fcb2 <__ssvfiscanf_r+0xdfa>
 802fca4:	f004 fc34 	bl	8034510 <_strtoull_r>
 802fca8:	6a3b      	ldr	r3, [r7, #32]
 802fcaa:	681b      	ldr	r3, [r3, #0]
 802fcac:	e9c3 0100 	strd	r0, r1, [r3]
 802fcb0:	e7d8      	b.n	802fc64 <__ssvfiscanf_r+0xdac>
 802fcb2:	f004 fb81 	bl	80343b8 <_strtoll_r>
 802fcb6:	e7f7      	b.n	802fca8 <__ssvfiscanf_r+0xdf0>
 802fcb8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802fcbc:	6818      	ldr	r0, [r3, #0]
 802fcbe:	f7fe f8ed 	bl	802de9c <free>
 802fcc2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802fcc6:	3401      	adds	r4, #1
 802fcc8:	601e      	str	r6, [r3, #0]
 802fcca:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 802fcce:	f8db 5000 	ldr.w	r5, [fp]
 802fcd2:	42a3      	cmp	r3, r4
 802fcd4:	dcf0      	bgt.n	802fcb8 <__ssvfiscanf_r+0xe00>
 802fcd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802fcda:	61fb      	str	r3, [r7, #28]
 802fcdc:	f7ff ba46 	b.w	802f16c <__ssvfiscanf_r+0x2b4>
 802fce0:	2400      	movs	r4, #0
 802fce2:	4626      	mov	r6, r4
 802fce4:	e7f1      	b.n	802fcca <__ssvfiscanf_r+0xe12>
 802fce6:	bf00      	nop
 802fce8:	0803ac54 	.word	0x0803ac54
 802fcec:	08033f09 	.word	0x08033f09

0802fcf0 <_svfprintf_r>:
 802fcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fcf4:	b0d3      	sub	sp, #332	@ 0x14c
 802fcf6:	468b      	mov	fp, r1
 802fcf8:	4691      	mov	r9, r2
 802fcfa:	461e      	mov	r6, r3
 802fcfc:	9003      	str	r0, [sp, #12]
 802fcfe:	f7fd f80d 	bl	802cd1c <_localeconv_r>
 802fd02:	6803      	ldr	r3, [r0, #0]
 802fd04:	9316      	str	r3, [sp, #88]	@ 0x58
 802fd06:	4618      	mov	r0, r3
 802fd08:	f7e0 faca 	bl	80102a0 <strlen>
 802fd0c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802fd10:	900d      	str	r0, [sp, #52]	@ 0x34
 802fd12:	061b      	lsls	r3, r3, #24
 802fd14:	d515      	bpl.n	802fd42 <_svfprintf_r+0x52>
 802fd16:	f8db 3010 	ldr.w	r3, [fp, #16]
 802fd1a:	b993      	cbnz	r3, 802fd42 <_svfprintf_r+0x52>
 802fd1c:	9803      	ldr	r0, [sp, #12]
 802fd1e:	2140      	movs	r1, #64	@ 0x40
 802fd20:	f7fe f8c4 	bl	802deac <_malloc_r>
 802fd24:	f8cb 0000 	str.w	r0, [fp]
 802fd28:	f8cb 0010 	str.w	r0, [fp, #16]
 802fd2c:	b930      	cbnz	r0, 802fd3c <_svfprintf_r+0x4c>
 802fd2e:	9a03      	ldr	r2, [sp, #12]
 802fd30:	230c      	movs	r3, #12
 802fd32:	6013      	str	r3, [r2, #0]
 802fd34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802fd38:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fd3a:	e1f7      	b.n	803012c <_svfprintf_r+0x43c>
 802fd3c:	2340      	movs	r3, #64	@ 0x40
 802fd3e:	f8cb 3014 	str.w	r3, [fp, #20]
 802fd42:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 802ff90 <_svfprintf_r+0x2a0>
 802fd46:	2300      	movs	r3, #0
 802fd48:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802fd4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802fd50:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 802fd54:	ac29      	add	r4, sp, #164	@ 0xa4
 802fd56:	9426      	str	r4, [sp, #152]	@ 0x98
 802fd58:	9304      	str	r3, [sp, #16]
 802fd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 802fd5c:	9312      	str	r3, [sp, #72]	@ 0x48
 802fd5e:	9317      	str	r3, [sp, #92]	@ 0x5c
 802fd60:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fd62:	464b      	mov	r3, r9
 802fd64:	461d      	mov	r5, r3
 802fd66:	f813 2b01 	ldrb.w	r2, [r3], #1
 802fd6a:	b10a      	cbz	r2, 802fd70 <_svfprintf_r+0x80>
 802fd6c:	2a25      	cmp	r2, #37	@ 0x25
 802fd6e:	d1f9      	bne.n	802fd64 <_svfprintf_r+0x74>
 802fd70:	ebb5 0709 	subs.w	r7, r5, r9
 802fd74:	d00d      	beq.n	802fd92 <_svfprintf_r+0xa2>
 802fd76:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802fd78:	443b      	add	r3, r7
 802fd7a:	9328      	str	r3, [sp, #160]	@ 0xa0
 802fd7c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802fd7e:	3301      	adds	r3, #1
 802fd80:	2b07      	cmp	r3, #7
 802fd82:	e9c4 9700 	strd	r9, r7, [r4]
 802fd86:	9327      	str	r3, [sp, #156]	@ 0x9c
 802fd88:	dc75      	bgt.n	802fe76 <_svfprintf_r+0x186>
 802fd8a:	3408      	adds	r4, #8
 802fd8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802fd8e:	443b      	add	r3, r7
 802fd90:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fd92:	782b      	ldrb	r3, [r5, #0]
 802fd94:	2b00      	cmp	r3, #0
 802fd96:	f001 8148 	beq.w	803102a <_svfprintf_r+0x133a>
 802fd9a:	2200      	movs	r2, #0
 802fd9c:	1c6b      	adds	r3, r5, #1
 802fd9e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802fda2:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 802fda6:	920e      	str	r2, [sp, #56]	@ 0x38
 802fda8:	4615      	mov	r5, r2
 802fdaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 802fdae:	9206      	str	r2, [sp, #24]
 802fdb0:	930c      	str	r3, [sp, #48]	@ 0x30
 802fdb2:	9b06      	ldr	r3, [sp, #24]
 802fdb4:	3b20      	subs	r3, #32
 802fdb6:	2b5a      	cmp	r3, #90	@ 0x5a
 802fdb8:	f200 85a4 	bhi.w	8030904 <_svfprintf_r+0xc14>
 802fdbc:	e8df f013 	tbh	[pc, r3, lsl #1]
 802fdc0:	05a2009d 	.word	0x05a2009d
 802fdc4:	00a505a2 	.word	0x00a505a2
 802fdc8:	05a205a2 	.word	0x05a205a2
 802fdcc:	008505a2 	.word	0x008505a2
 802fdd0:	05a205a2 	.word	0x05a205a2
 802fdd4:	00b200a8 	.word	0x00b200a8
 802fdd8:	00af05a2 	.word	0x00af05a2
 802fddc:	05a200b4 	.word	0x05a200b4
 802fde0:	00d100ce 	.word	0x00d100ce
 802fde4:	00d100d1 	.word	0x00d100d1
 802fde8:	00d100d1 	.word	0x00d100d1
 802fdec:	00d100d1 	.word	0x00d100d1
 802fdf0:	00d100d1 	.word	0x00d100d1
 802fdf4:	05a205a2 	.word	0x05a205a2
 802fdf8:	05a205a2 	.word	0x05a205a2
 802fdfc:	05a205a2 	.word	0x05a205a2
 802fe00:	014705a2 	.word	0x014705a2
 802fe04:	010805a2 	.word	0x010805a2
 802fe08:	0147011b 	.word	0x0147011b
 802fe0c:	01470147 	.word	0x01470147
 802fe10:	05a205a2 	.word	0x05a205a2
 802fe14:	05a205a2 	.word	0x05a205a2
 802fe18:	05a200e2 	.word	0x05a200e2
 802fe1c:	049d05a2 	.word	0x049d05a2
 802fe20:	05a205a2 	.word	0x05a205a2
 802fe24:	04e705a2 	.word	0x04e705a2
 802fe28:	050805a2 	.word	0x050805a2
 802fe2c:	05a205a2 	.word	0x05a205a2
 802fe30:	05a2052a 	.word	0x05a2052a
 802fe34:	05a205a2 	.word	0x05a205a2
 802fe38:	05a205a2 	.word	0x05a205a2
 802fe3c:	05a205a2 	.word	0x05a205a2
 802fe40:	014705a2 	.word	0x014705a2
 802fe44:	010805a2 	.word	0x010805a2
 802fe48:	0147011d 	.word	0x0147011d
 802fe4c:	01470147 	.word	0x01470147
 802fe50:	011d00ee 	.word	0x011d00ee
 802fe54:	05a20102 	.word	0x05a20102
 802fe58:	05a200fb 	.word	0x05a200fb
 802fe5c:	049f047e 	.word	0x049f047e
 802fe60:	010204d6 	.word	0x010204d6
 802fe64:	04e705a2 	.word	0x04e705a2
 802fe68:	050a009b 	.word	0x050a009b
 802fe6c:	05a205a2 	.word	0x05a205a2
 802fe70:	05a20065 	.word	0x05a20065
 802fe74:	009b      	.short	0x009b
 802fe76:	9803      	ldr	r0, [sp, #12]
 802fe78:	aa26      	add	r2, sp, #152	@ 0x98
 802fe7a:	4659      	mov	r1, fp
 802fe7c:	f7fe fac0 	bl	802e400 <__ssprint_r>
 802fe80:	2800      	cmp	r0, #0
 802fe82:	f040 814e 	bne.w	8030122 <_svfprintf_r+0x432>
 802fe86:	ac29      	add	r4, sp, #164	@ 0xa4
 802fe88:	e780      	b.n	802fd8c <_svfprintf_r+0x9c>
 802fe8a:	4b43      	ldr	r3, [pc, #268]	@ (802ff98 <_svfprintf_r+0x2a8>)
 802fe8c:	9319      	str	r3, [sp, #100]	@ 0x64
 802fe8e:	f015 0320 	ands.w	r3, r5, #32
 802fe92:	f000 84c2 	beq.w	803081a <_svfprintf_r+0xb2a>
 802fe96:	3607      	adds	r6, #7
 802fe98:	f026 0307 	bic.w	r3, r6, #7
 802fe9c:	461a      	mov	r2, r3
 802fe9e:	685f      	ldr	r7, [r3, #4]
 802fea0:	f852 6b08 	ldr.w	r6, [r2], #8
 802fea4:	9207      	str	r2, [sp, #28]
 802fea6:	07eb      	lsls	r3, r5, #31
 802fea8:	d50a      	bpl.n	802fec0 <_svfprintf_r+0x1d0>
 802feaa:	ea56 0307 	orrs.w	r3, r6, r7
 802feae:	d007      	beq.n	802fec0 <_svfprintf_r+0x1d0>
 802feb0:	2330      	movs	r3, #48	@ 0x30
 802feb2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 802feb6:	9b06      	ldr	r3, [sp, #24]
 802feb8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802febc:	f045 0502 	orr.w	r5, r5, #2
 802fec0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802fec4:	2302      	movs	r3, #2
 802fec6:	f000 bc28 	b.w	803071a <_svfprintf_r+0xa2a>
 802feca:	9803      	ldr	r0, [sp, #12]
 802fecc:	f7fc ff26 	bl	802cd1c <_localeconv_r>
 802fed0:	6843      	ldr	r3, [r0, #4]
 802fed2:	9317      	str	r3, [sp, #92]	@ 0x5c
 802fed4:	4618      	mov	r0, r3
 802fed6:	f7e0 f9e3 	bl	80102a0 <strlen>
 802feda:	9012      	str	r0, [sp, #72]	@ 0x48
 802fedc:	9803      	ldr	r0, [sp, #12]
 802fede:	f7fc ff1d 	bl	802cd1c <_localeconv_r>
 802fee2:	6883      	ldr	r3, [r0, #8]
 802fee4:	9309      	str	r3, [sp, #36]	@ 0x24
 802fee6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802fee8:	b12b      	cbz	r3, 802fef6 <_svfprintf_r+0x206>
 802feea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802feec:	b11b      	cbz	r3, 802fef6 <_svfprintf_r+0x206>
 802feee:	781b      	ldrb	r3, [r3, #0]
 802fef0:	b10b      	cbz	r3, 802fef6 <_svfprintf_r+0x206>
 802fef2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802fef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802fef8:	e757      	b.n	802fdaa <_svfprintf_r+0xba>
 802fefa:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802fefe:	2b00      	cmp	r3, #0
 802ff00:	d1f9      	bne.n	802fef6 <_svfprintf_r+0x206>
 802ff02:	2320      	movs	r3, #32
 802ff04:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802ff08:	e7f5      	b.n	802fef6 <_svfprintf_r+0x206>
 802ff0a:	f045 0501 	orr.w	r5, r5, #1
 802ff0e:	e7f2      	b.n	802fef6 <_svfprintf_r+0x206>
 802ff10:	f856 3b04 	ldr.w	r3, [r6], #4
 802ff14:	930e      	str	r3, [sp, #56]	@ 0x38
 802ff16:	2b00      	cmp	r3, #0
 802ff18:	daed      	bge.n	802fef6 <_svfprintf_r+0x206>
 802ff1a:	425b      	negs	r3, r3
 802ff1c:	930e      	str	r3, [sp, #56]	@ 0x38
 802ff1e:	f045 0504 	orr.w	r5, r5, #4
 802ff22:	e7e8      	b.n	802fef6 <_svfprintf_r+0x206>
 802ff24:	232b      	movs	r3, #43	@ 0x2b
 802ff26:	e7ed      	b.n	802ff04 <_svfprintf_r+0x214>
 802ff28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802ff2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ff2e:	9206      	str	r2, [sp, #24]
 802ff30:	2a2a      	cmp	r2, #42	@ 0x2a
 802ff32:	d10f      	bne.n	802ff54 <_svfprintf_r+0x264>
 802ff34:	f856 2b04 	ldr.w	r2, [r6], #4
 802ff38:	930c      	str	r3, [sp, #48]	@ 0x30
 802ff3a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 802ff3e:	e7da      	b.n	802fef6 <_svfprintf_r+0x206>
 802ff40:	fb01 2808 	mla	r8, r1, r8, r2
 802ff44:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ff48:	9206      	str	r2, [sp, #24]
 802ff4a:	9a06      	ldr	r2, [sp, #24]
 802ff4c:	3a30      	subs	r2, #48	@ 0x30
 802ff4e:	2a09      	cmp	r2, #9
 802ff50:	d9f6      	bls.n	802ff40 <_svfprintf_r+0x250>
 802ff52:	e72d      	b.n	802fdb0 <_svfprintf_r+0xc0>
 802ff54:	f04f 0800 	mov.w	r8, #0
 802ff58:	210a      	movs	r1, #10
 802ff5a:	e7f6      	b.n	802ff4a <_svfprintf_r+0x25a>
 802ff5c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802ff60:	e7c9      	b.n	802fef6 <_svfprintf_r+0x206>
 802ff62:	2200      	movs	r2, #0
 802ff64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802ff66:	920e      	str	r2, [sp, #56]	@ 0x38
 802ff68:	210a      	movs	r1, #10
 802ff6a:	9a06      	ldr	r2, [sp, #24]
 802ff6c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802ff6e:	3a30      	subs	r2, #48	@ 0x30
 802ff70:	fb01 2200 	mla	r2, r1, r0, r2
 802ff74:	920e      	str	r2, [sp, #56]	@ 0x38
 802ff76:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ff7a:	9206      	str	r2, [sp, #24]
 802ff7c:	3a30      	subs	r2, #48	@ 0x30
 802ff7e:	2a09      	cmp	r2, #9
 802ff80:	d9f3      	bls.n	802ff6a <_svfprintf_r+0x27a>
 802ff82:	e715      	b.n	802fdb0 <_svfprintf_r+0xc0>
 802ff84:	f045 0508 	orr.w	r5, r5, #8
 802ff88:	e7b5      	b.n	802fef6 <_svfprintf_r+0x206>
 802ff8a:	bf00      	nop
 802ff8c:	f3af 8000 	nop.w
	...
 802ff98:	0803a70f 	.word	0x0803a70f
 802ff9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802ff9e:	781b      	ldrb	r3, [r3, #0]
 802ffa0:	2b68      	cmp	r3, #104	@ 0x68
 802ffa2:	bf01      	itttt	eq
 802ffa4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802ffa6:	3301      	addeq	r3, #1
 802ffa8:	930c      	streq	r3, [sp, #48]	@ 0x30
 802ffaa:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802ffae:	bf18      	it	ne
 802ffb0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802ffb4:	e79f      	b.n	802fef6 <_svfprintf_r+0x206>
 802ffb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802ffb8:	781b      	ldrb	r3, [r3, #0]
 802ffba:	2b6c      	cmp	r3, #108	@ 0x6c
 802ffbc:	d105      	bne.n	802ffca <_svfprintf_r+0x2da>
 802ffbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802ffc0:	3301      	adds	r3, #1
 802ffc2:	930c      	str	r3, [sp, #48]	@ 0x30
 802ffc4:	f045 0520 	orr.w	r5, r5, #32
 802ffc8:	e795      	b.n	802fef6 <_svfprintf_r+0x206>
 802ffca:	f045 0510 	orr.w	r5, r5, #16
 802ffce:	e792      	b.n	802fef6 <_svfprintf_r+0x206>
 802ffd0:	4632      	mov	r2, r6
 802ffd2:	f852 3b04 	ldr.w	r3, [r2], #4
 802ffd6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802ffda:	2300      	movs	r3, #0
 802ffdc:	9207      	str	r2, [sp, #28]
 802ffde:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802ffe2:	469a      	mov	sl, r3
 802ffe4:	f04f 0801 	mov.w	r8, #1
 802ffe8:	9310      	str	r3, [sp, #64]	@ 0x40
 802ffea:	461f      	mov	r7, r3
 802ffec:	9308      	str	r3, [sp, #32]
 802ffee:	461e      	mov	r6, r3
 802fff0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802fff4:	e1d2      	b.n	803039c <_svfprintf_r+0x6ac>
 802fff6:	f045 0510 	orr.w	r5, r5, #16
 802fffa:	06af      	lsls	r7, r5, #26
 802fffc:	d512      	bpl.n	8030024 <_svfprintf_r+0x334>
 802fffe:	3607      	adds	r6, #7
 8030000:	f026 0307 	bic.w	r3, r6, #7
 8030004:	461a      	mov	r2, r3
 8030006:	685f      	ldr	r7, [r3, #4]
 8030008:	f852 6b08 	ldr.w	r6, [r2], #8
 803000c:	9207      	str	r2, [sp, #28]
 803000e:	2f00      	cmp	r7, #0
 8030010:	da06      	bge.n	8030020 <_svfprintf_r+0x330>
 8030012:	4276      	negs	r6, r6
 8030014:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8030018:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 803001c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030020:	2301      	movs	r3, #1
 8030022:	e37d      	b.n	8030720 <_svfprintf_r+0xa30>
 8030024:	4633      	mov	r3, r6
 8030026:	06ee      	lsls	r6, r5, #27
 8030028:	f853 7b04 	ldr.w	r7, [r3], #4
 803002c:	9307      	str	r3, [sp, #28]
 803002e:	d502      	bpl.n	8030036 <_svfprintf_r+0x346>
 8030030:	463e      	mov	r6, r7
 8030032:	17ff      	asrs	r7, r7, #31
 8030034:	e7eb      	b.n	803000e <_svfprintf_r+0x31e>
 8030036:	0668      	lsls	r0, r5, #25
 8030038:	d503      	bpl.n	8030042 <_svfprintf_r+0x352>
 803003a:	b23e      	sxth	r6, r7
 803003c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8030040:	e7e5      	b.n	803000e <_svfprintf_r+0x31e>
 8030042:	05a9      	lsls	r1, r5, #22
 8030044:	d5f4      	bpl.n	8030030 <_svfprintf_r+0x340>
 8030046:	b27e      	sxtb	r6, r7
 8030048:	f347 17c0 	sbfx	r7, r7, #7, #1
 803004c:	e7df      	b.n	803000e <_svfprintf_r+0x31e>
 803004e:	3607      	adds	r6, #7
 8030050:	f026 0307 	bic.w	r3, r6, #7
 8030054:	ecb3 7b02 	vldmia	r3!, {d7}
 8030058:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 803005c:	9307      	str	r3, [sp, #28]
 803005e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030060:	931a      	str	r3, [sp, #104]	@ 0x68
 8030062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030064:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8030068:	931b      	str	r3, [sp, #108]	@ 0x6c
 803006a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803006e:	4b81      	ldr	r3, [pc, #516]	@ (8030274 <_svfprintf_r+0x584>)
 8030070:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8030074:	f7e0 fd72 	bl	8010b5c <__aeabi_dcmpun>
 8030078:	bb10      	cbnz	r0, 80300c0 <_svfprintf_r+0x3d0>
 803007a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803007e:	4b7d      	ldr	r3, [pc, #500]	@ (8030274 <_svfprintf_r+0x584>)
 8030080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8030084:	f7e0 fd4c 	bl	8010b20 <__aeabi_dcmple>
 8030088:	b9d0      	cbnz	r0, 80300c0 <_svfprintf_r+0x3d0>
 803008a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803008e:	2200      	movs	r2, #0
 8030090:	2300      	movs	r3, #0
 8030092:	f7e0 fd3b 	bl	8010b0c <__aeabi_dcmplt>
 8030096:	b110      	cbz	r0, 803009e <_svfprintf_r+0x3ae>
 8030098:	232d      	movs	r3, #45	@ 0x2d
 803009a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803009e:	4a76      	ldr	r2, [pc, #472]	@ (8030278 <_svfprintf_r+0x588>)
 80300a0:	4b76      	ldr	r3, [pc, #472]	@ (803027c <_svfprintf_r+0x58c>)
 80300a2:	9906      	ldr	r1, [sp, #24]
 80300a4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80300a8:	2947      	cmp	r1, #71	@ 0x47
 80300aa:	bfd4      	ite	le
 80300ac:	4691      	movle	r9, r2
 80300ae:	4699      	movgt	r9, r3
 80300b0:	f04f 0a00 	mov.w	sl, #0
 80300b4:	f04f 0803 	mov.w	r8, #3
 80300b8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80300bc:	f000 bfec 	b.w	8031098 <_svfprintf_r+0x13a8>
 80300c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80300c4:	4610      	mov	r0, r2
 80300c6:	4619      	mov	r1, r3
 80300c8:	f7e0 fd48 	bl	8010b5c <__aeabi_dcmpun>
 80300cc:	4682      	mov	sl, r0
 80300ce:	b140      	cbz	r0, 80300e2 <_svfprintf_r+0x3f2>
 80300d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80300d2:	4a6b      	ldr	r2, [pc, #428]	@ (8030280 <_svfprintf_r+0x590>)
 80300d4:	2b00      	cmp	r3, #0
 80300d6:	bfbc      	itt	lt
 80300d8:	232d      	movlt	r3, #45	@ 0x2d
 80300da:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80300de:	4b69      	ldr	r3, [pc, #420]	@ (8030284 <_svfprintf_r+0x594>)
 80300e0:	e7df      	b.n	80300a2 <_svfprintf_r+0x3b2>
 80300e2:	9b06      	ldr	r3, [sp, #24]
 80300e4:	2b61      	cmp	r3, #97	@ 0x61
 80300e6:	d025      	beq.n	8030134 <_svfprintf_r+0x444>
 80300e8:	2b41      	cmp	r3, #65	@ 0x41
 80300ea:	d125      	bne.n	8030138 <_svfprintf_r+0x448>
 80300ec:	2358      	movs	r3, #88	@ 0x58
 80300ee:	2230      	movs	r2, #48	@ 0x30
 80300f0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 80300f4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80300f8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80300fc:	f045 0502 	orr.w	r5, r5, #2
 8030100:	f340 80a5 	ble.w	803024e <_svfprintf_r+0x55e>
 8030104:	9803      	ldr	r0, [sp, #12]
 8030106:	f108 0101 	add.w	r1, r8, #1
 803010a:	f7fd fecf 	bl	802deac <_malloc_r>
 803010e:	4681      	mov	r9, r0
 8030110:	2800      	cmp	r0, #0
 8030112:	f040 80a1 	bne.w	8030258 <_svfprintf_r+0x568>
 8030116:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803011a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803011e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8030122:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8030126:	065b      	lsls	r3, r3, #25
 8030128:	f53f ae04 	bmi.w	802fd34 <_svfprintf_r+0x44>
 803012c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803012e:	b053      	add	sp, #332	@ 0x14c
 8030130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030134:	2378      	movs	r3, #120	@ 0x78
 8030136:	e7da      	b.n	80300ee <_svfprintf_r+0x3fe>
 8030138:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803013c:	f000 808e 	beq.w	803025c <_svfprintf_r+0x56c>
 8030140:	9b06      	ldr	r3, [sp, #24]
 8030142:	f023 0320 	bic.w	r3, r3, #32
 8030146:	2b47      	cmp	r3, #71	@ 0x47
 8030148:	d105      	bne.n	8030156 <_svfprintf_r+0x466>
 803014a:	f1b8 0f00 	cmp.w	r8, #0
 803014e:	d102      	bne.n	8030156 <_svfprintf_r+0x466>
 8030150:	46c2      	mov	sl, r8
 8030152:	f04f 0801 	mov.w	r8, #1
 8030156:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 803015a:	9311      	str	r3, [sp, #68]	@ 0x44
 803015c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803015e:	2b00      	cmp	r3, #0
 8030160:	da7f      	bge.n	8030262 <_svfprintf_r+0x572>
 8030162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030164:	9314      	str	r3, [sp, #80]	@ 0x50
 8030166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030168:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 803016c:	9315      	str	r3, [sp, #84]	@ 0x54
 803016e:	232d      	movs	r3, #45	@ 0x2d
 8030170:	931c      	str	r3, [sp, #112]	@ 0x70
 8030172:	9b06      	ldr	r3, [sp, #24]
 8030174:	f023 0320 	bic.w	r3, r3, #32
 8030178:	2b41      	cmp	r3, #65	@ 0x41
 803017a:	9308      	str	r3, [sp, #32]
 803017c:	f040 81e6 	bne.w	803054c <_svfprintf_r+0x85c>
 8030180:	a820      	add	r0, sp, #128	@ 0x80
 8030182:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8030186:	f7fc fe9b 	bl	802cec0 <frexp>
 803018a:	2200      	movs	r2, #0
 803018c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8030190:	ec51 0b10 	vmov	r0, r1, d0
 8030194:	f7e0 fa48 	bl	8010628 <__aeabi_dmul>
 8030198:	4602      	mov	r2, r0
 803019a:	460b      	mov	r3, r1
 803019c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80301a0:	2200      	movs	r2, #0
 80301a2:	2300      	movs	r3, #0
 80301a4:	f7e0 fca8 	bl	8010af8 <__aeabi_dcmpeq>
 80301a8:	b108      	cbz	r0, 80301ae <_svfprintf_r+0x4be>
 80301aa:	2301      	movs	r3, #1
 80301ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80301ae:	4a36      	ldr	r2, [pc, #216]	@ (8030288 <_svfprintf_r+0x598>)
 80301b0:	4b36      	ldr	r3, [pc, #216]	@ (803028c <_svfprintf_r+0x59c>)
 80301b2:	9906      	ldr	r1, [sp, #24]
 80301b4:	2961      	cmp	r1, #97	@ 0x61
 80301b6:	bf18      	it	ne
 80301b8:	461a      	movne	r2, r3
 80301ba:	9210      	str	r2, [sp, #64]	@ 0x40
 80301bc:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 80301c0:	464e      	mov	r6, r9
 80301c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80301c6:	4b32      	ldr	r3, [pc, #200]	@ (8030290 <_svfprintf_r+0x5a0>)
 80301c8:	2200      	movs	r2, #0
 80301ca:	f7e0 fa2d 	bl	8010628 <__aeabi_dmul>
 80301ce:	4602      	mov	r2, r0
 80301d0:	460b      	mov	r3, r1
 80301d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80301d6:	f7e0 fcd7 	bl	8010b88 <__aeabi_d2iz>
 80301da:	9013      	str	r0, [sp, #76]	@ 0x4c
 80301dc:	f7e0 f9ba 	bl	8010554 <__aeabi_i2d>
 80301e0:	4602      	mov	r2, r0
 80301e2:	460b      	mov	r3, r1
 80301e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80301e8:	f7e0 f866 	bl	80102b8 <__aeabi_dsub>
 80301ec:	4602      	mov	r2, r0
 80301ee:	460b      	mov	r3, r1
 80301f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80301f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80301f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80301f8:	5c9b      	ldrb	r3, [r3, r2]
 80301fa:	f806 3b01 	strb.w	r3, [r6], #1
 80301fe:	1c7a      	adds	r2, r7, #1
 8030200:	d006      	beq.n	8030210 <_svfprintf_r+0x520>
 8030202:	1e7b      	subs	r3, r7, #1
 8030204:	931d      	str	r3, [sp, #116]	@ 0x74
 8030206:	2200      	movs	r2, #0
 8030208:	2300      	movs	r3, #0
 803020a:	f7e0 fc75 	bl	8010af8 <__aeabi_dcmpeq>
 803020e:	b370      	cbz	r0, 803026e <_svfprintf_r+0x57e>
 8030210:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8030214:	4b1f      	ldr	r3, [pc, #124]	@ (8030294 <_svfprintf_r+0x5a4>)
 8030216:	2200      	movs	r2, #0
 8030218:	f7e0 fc96 	bl	8010b48 <__aeabi_dcmpgt>
 803021c:	2800      	cmp	r0, #0
 803021e:	d13b      	bne.n	8030298 <_svfprintf_r+0x5a8>
 8030220:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8030224:	4b1b      	ldr	r3, [pc, #108]	@ (8030294 <_svfprintf_r+0x5a4>)
 8030226:	2200      	movs	r2, #0
 8030228:	f7e0 fc66 	bl	8010af8 <__aeabi_dcmpeq>
 803022c:	b110      	cbz	r0, 8030234 <_svfprintf_r+0x544>
 803022e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8030230:	07db      	lsls	r3, r3, #31
 8030232:	d431      	bmi.n	8030298 <_svfprintf_r+0x5a8>
 8030234:	4633      	mov	r3, r6
 8030236:	19f1      	adds	r1, r6, r7
 8030238:	2030      	movs	r0, #48	@ 0x30
 803023a:	1aca      	subs	r2, r1, r3
 803023c:	2a00      	cmp	r2, #0
 803023e:	f280 8182 	bge.w	8030546 <_svfprintf_r+0x856>
 8030242:	1c7b      	adds	r3, r7, #1
 8030244:	3701      	adds	r7, #1
 8030246:	bfb8      	it	lt
 8030248:	2300      	movlt	r3, #0
 803024a:	441e      	add	r6, r3
 803024c:	e038      	b.n	80302c0 <_svfprintf_r+0x5d0>
 803024e:	f04f 0a00 	mov.w	sl, #0
 8030252:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8030256:	e77e      	b.n	8030156 <_svfprintf_r+0x466>
 8030258:	4682      	mov	sl, r0
 803025a:	e77c      	b.n	8030156 <_svfprintf_r+0x466>
 803025c:	f04f 0806 	mov.w	r8, #6
 8030260:	e779      	b.n	8030156 <_svfprintf_r+0x466>
 8030262:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8030266:	2300      	movs	r3, #0
 8030268:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 803026c:	e780      	b.n	8030170 <_svfprintf_r+0x480>
 803026e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8030270:	e7a7      	b.n	80301c2 <_svfprintf_r+0x4d2>
 8030272:	bf00      	nop
 8030274:	7fefffff 	.word	0x7fefffff
 8030278:	0803a6ff 	.word	0x0803a6ff
 803027c:	0803a703 	.word	0x0803a703
 8030280:	0803a707 	.word	0x0803a707
 8030284:	0803a70b 	.word	0x0803a70b
 8030288:	0803a70f 	.word	0x0803a70f
 803028c:	0803a720 	.word	0x0803a720
 8030290:	40300000 	.word	0x40300000
 8030294:	3fe00000 	.word	0x3fe00000
 8030298:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803029a:	9624      	str	r6, [sp, #144]	@ 0x90
 803029c:	7bd9      	ldrb	r1, [r3, #15]
 803029e:	2030      	movs	r0, #48	@ 0x30
 80302a0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80302a2:	1e53      	subs	r3, r2, #1
 80302a4:	9324      	str	r3, [sp, #144]	@ 0x90
 80302a6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80302aa:	428b      	cmp	r3, r1
 80302ac:	f000 8148 	beq.w	8030540 <_svfprintf_r+0x850>
 80302b0:	2b39      	cmp	r3, #57	@ 0x39
 80302b2:	bf0b      	itete	eq
 80302b4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 80302b6:	3301      	addne	r3, #1
 80302b8:	7a9b      	ldrbeq	r3, [r3, #10]
 80302ba:	b2db      	uxtbne	r3, r3
 80302bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80302c0:	eba6 0309 	sub.w	r3, r6, r9
 80302c4:	9304      	str	r3, [sp, #16]
 80302c6:	9b08      	ldr	r3, [sp, #32]
 80302c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80302ca:	2b47      	cmp	r3, #71	@ 0x47
 80302cc:	f040 8187 	bne.w	80305de <_svfprintf_r+0x8ee>
 80302d0:	1cf1      	adds	r1, r6, #3
 80302d2:	db02      	blt.n	80302da <_svfprintf_r+0x5ea>
 80302d4:	4546      	cmp	r6, r8
 80302d6:	f340 81a5 	ble.w	8030624 <_svfprintf_r+0x934>
 80302da:	9b06      	ldr	r3, [sp, #24]
 80302dc:	3b02      	subs	r3, #2
 80302de:	9306      	str	r3, [sp, #24]
 80302e0:	9906      	ldr	r1, [sp, #24]
 80302e2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80302e6:	f021 0120 	bic.w	r1, r1, #32
 80302ea:	2941      	cmp	r1, #65	@ 0x41
 80302ec:	bf08      	it	eq
 80302ee:	320f      	addeq	r2, #15
 80302f0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 80302f4:	bf06      	itte	eq
 80302f6:	b2d2      	uxtbeq	r2, r2
 80302f8:	2101      	moveq	r1, #1
 80302fa:	2100      	movne	r1, #0
 80302fc:	2b00      	cmp	r3, #0
 80302fe:	9320      	str	r3, [sp, #128]	@ 0x80
 8030300:	bfb8      	it	lt
 8030302:	f1c6 0301 	rsblt	r3, r6, #1
 8030306:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 803030a:	bfb4      	ite	lt
 803030c:	222d      	movlt	r2, #45	@ 0x2d
 803030e:	222b      	movge	r2, #43	@ 0x2b
 8030310:	2b09      	cmp	r3, #9
 8030312:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8030316:	f340 8178 	ble.w	803060a <_svfprintf_r+0x91a>
 803031a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803031e:	270a      	movs	r7, #10
 8030320:	4602      	mov	r2, r0
 8030322:	fbb3 f6f7 	udiv	r6, r3, r7
 8030326:	fb07 3116 	mls	r1, r7, r6, r3
 803032a:	3130      	adds	r1, #48	@ 0x30
 803032c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8030330:	4619      	mov	r1, r3
 8030332:	2963      	cmp	r1, #99	@ 0x63
 8030334:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8030338:	4633      	mov	r3, r6
 803033a:	dcf1      	bgt.n	8030320 <_svfprintf_r+0x630>
 803033c:	3330      	adds	r3, #48	@ 0x30
 803033e:	1e91      	subs	r1, r2, #2
 8030340:	f800 3c01 	strb.w	r3, [r0, #-1]
 8030344:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8030348:	460b      	mov	r3, r1
 803034a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803034e:	4283      	cmp	r3, r0
 8030350:	f0c0 8156 	bcc.w	8030600 <_svfprintf_r+0x910>
 8030354:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8030358:	1a9b      	subs	r3, r3, r2
 803035a:	4281      	cmp	r1, r0
 803035c:	bf88      	it	hi
 803035e:	2300      	movhi	r3, #0
 8030360:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8030364:	441a      	add	r2, r3
 8030366:	ab22      	add	r3, sp, #136	@ 0x88
 8030368:	1ad3      	subs	r3, r2, r3
 803036a:	9a04      	ldr	r2, [sp, #16]
 803036c:	9318      	str	r3, [sp, #96]	@ 0x60
 803036e:	2a01      	cmp	r2, #1
 8030370:	eb03 0802 	add.w	r8, r3, r2
 8030374:	dc01      	bgt.n	803037a <_svfprintf_r+0x68a>
 8030376:	07ea      	lsls	r2, r5, #31
 8030378:	d501      	bpl.n	803037e <_svfprintf_r+0x68e>
 803037a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803037c:	4498      	add	r8, r3
 803037e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030382:	2700      	movs	r7, #0
 8030384:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8030388:	9311      	str	r3, [sp, #68]	@ 0x44
 803038a:	9708      	str	r7, [sp, #32]
 803038c:	463e      	mov	r6, r7
 803038e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8030390:	2b00      	cmp	r3, #0
 8030392:	f040 818f 	bne.w	80306b4 <_svfprintf_r+0x9c4>
 8030396:	2300      	movs	r3, #0
 8030398:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 803039a:	9310      	str	r3, [sp, #64]	@ 0x40
 803039c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803039e:	4543      	cmp	r3, r8
 80303a0:	bfb8      	it	lt
 80303a2:	4643      	movlt	r3, r8
 80303a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80303a6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80303aa:	b113      	cbz	r3, 80303b2 <_svfprintf_r+0x6c2>
 80303ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80303ae:	3301      	adds	r3, #1
 80303b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80303b2:	f015 0302 	ands.w	r3, r5, #2
 80303b6:	931c      	str	r3, [sp, #112]	@ 0x70
 80303b8:	bf1e      	ittt	ne
 80303ba:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80303bc:	3302      	addne	r3, #2
 80303be:	9311      	strne	r3, [sp, #68]	@ 0x44
 80303c0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80303c4:	931d      	str	r3, [sp, #116]	@ 0x74
 80303c6:	d122      	bne.n	803040e <_svfprintf_r+0x71e>
 80303c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80303ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80303cc:	1a9b      	subs	r3, r3, r2
 80303ce:	2b00      	cmp	r3, #0
 80303d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80303d2:	dd1c      	ble.n	803040e <_svfprintf_r+0x71e>
 80303d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80303d6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80303da:	2810      	cmp	r0, #16
 80303dc:	489e      	ldr	r0, [pc, #632]	@ (8030658 <_svfprintf_r+0x968>)
 80303de:	6020      	str	r0, [r4, #0]
 80303e0:	f102 0201 	add.w	r2, r2, #1
 80303e4:	f104 0108 	add.w	r1, r4, #8
 80303e8:	f300 8298 	bgt.w	803091c <_svfprintf_r+0xc2c>
 80303ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80303ee:	6060      	str	r0, [r4, #4]
 80303f0:	4403      	add	r3, r0
 80303f2:	2a07      	cmp	r2, #7
 80303f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80303f8:	f340 82a5 	ble.w	8030946 <_svfprintf_r+0xc56>
 80303fc:	9803      	ldr	r0, [sp, #12]
 80303fe:	aa26      	add	r2, sp, #152	@ 0x98
 8030400:	4659      	mov	r1, fp
 8030402:	f7fd fffd 	bl	802e400 <__ssprint_r>
 8030406:	2800      	cmp	r0, #0
 8030408:	f040 85ed 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 803040c:	ac29      	add	r4, sp, #164	@ 0xa4
 803040e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8030412:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030414:	b16a      	cbz	r2, 8030432 <_svfprintf_r+0x742>
 8030416:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 803041a:	6022      	str	r2, [r4, #0]
 803041c:	2201      	movs	r2, #1
 803041e:	4413      	add	r3, r2
 8030420:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030422:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030424:	6062      	str	r2, [r4, #4]
 8030426:	4413      	add	r3, r2
 8030428:	2b07      	cmp	r3, #7
 803042a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803042c:	f300 828d 	bgt.w	803094a <_svfprintf_r+0xc5a>
 8030430:	3408      	adds	r4, #8
 8030432:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8030434:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030436:	b162      	cbz	r2, 8030452 <_svfprintf_r+0x762>
 8030438:	aa1f      	add	r2, sp, #124	@ 0x7c
 803043a:	6022      	str	r2, [r4, #0]
 803043c:	2202      	movs	r2, #2
 803043e:	4413      	add	r3, r2
 8030440:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030442:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030444:	6062      	str	r2, [r4, #4]
 8030446:	3301      	adds	r3, #1
 8030448:	2b07      	cmp	r3, #7
 803044a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803044c:	f300 8287 	bgt.w	803095e <_svfprintf_r+0xc6e>
 8030450:	3408      	adds	r4, #8
 8030452:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8030454:	2b80      	cmp	r3, #128	@ 0x80
 8030456:	d122      	bne.n	803049e <_svfprintf_r+0x7ae>
 8030458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803045a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803045c:	1a9b      	subs	r3, r3, r2
 803045e:	2b00      	cmp	r3, #0
 8030460:	9313      	str	r3, [sp, #76]	@ 0x4c
 8030462:	dd1c      	ble.n	803049e <_svfprintf_r+0x7ae>
 8030464:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8030466:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803046a:	2810      	cmp	r0, #16
 803046c:	487b      	ldr	r0, [pc, #492]	@ (803065c <_svfprintf_r+0x96c>)
 803046e:	6020      	str	r0, [r4, #0]
 8030470:	f102 0201 	add.w	r2, r2, #1
 8030474:	f104 0108 	add.w	r1, r4, #8
 8030478:	f300 827b 	bgt.w	8030972 <_svfprintf_r+0xc82>
 803047c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803047e:	6060      	str	r0, [r4, #4]
 8030480:	4403      	add	r3, r0
 8030482:	2a07      	cmp	r2, #7
 8030484:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030488:	f340 8288 	ble.w	803099c <_svfprintf_r+0xcac>
 803048c:	9803      	ldr	r0, [sp, #12]
 803048e:	aa26      	add	r2, sp, #152	@ 0x98
 8030490:	4659      	mov	r1, fp
 8030492:	f7fd ffb5 	bl	802e400 <__ssprint_r>
 8030496:	2800      	cmp	r0, #0
 8030498:	f040 85a5 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 803049c:	ac29      	add	r4, sp, #164	@ 0xa4
 803049e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80304a0:	eba3 0308 	sub.w	r3, r3, r8
 80304a4:	2b00      	cmp	r3, #0
 80304a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80304a8:	dd1c      	ble.n	80304e4 <_svfprintf_r+0x7f4>
 80304aa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80304ac:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80304b0:	2810      	cmp	r0, #16
 80304b2:	486a      	ldr	r0, [pc, #424]	@ (803065c <_svfprintf_r+0x96c>)
 80304b4:	6020      	str	r0, [r4, #0]
 80304b6:	f102 0201 	add.w	r2, r2, #1
 80304ba:	f104 0108 	add.w	r1, r4, #8
 80304be:	f300 826f 	bgt.w	80309a0 <_svfprintf_r+0xcb0>
 80304c2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80304c4:	6060      	str	r0, [r4, #4]
 80304c6:	4403      	add	r3, r0
 80304c8:	2a07      	cmp	r2, #7
 80304ca:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80304ce:	f340 827c 	ble.w	80309ca <_svfprintf_r+0xcda>
 80304d2:	9803      	ldr	r0, [sp, #12]
 80304d4:	aa26      	add	r2, sp, #152	@ 0x98
 80304d6:	4659      	mov	r1, fp
 80304d8:	f7fd ff92 	bl	802e400 <__ssprint_r>
 80304dc:	2800      	cmp	r0, #0
 80304de:	f040 8582 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 80304e2:	ac29      	add	r4, sp, #164	@ 0xa4
 80304e4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80304e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80304e8:	05ea      	lsls	r2, r5, #23
 80304ea:	f100 8275 	bmi.w	80309d8 <_svfprintf_r+0xce8>
 80304ee:	4443      	add	r3, r8
 80304f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80304f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80304f4:	3301      	adds	r3, #1
 80304f6:	2b07      	cmp	r3, #7
 80304f8:	e9c4 9800 	strd	r9, r8, [r4]
 80304fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80304fe:	f300 82b1 	bgt.w	8030a64 <_svfprintf_r+0xd74>
 8030502:	3408      	adds	r4, #8
 8030504:	076a      	lsls	r2, r5, #29
 8030506:	f100 8550 	bmi.w	8030faa <_svfprintf_r+0x12ba>
 803050a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 803050e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8030510:	428a      	cmp	r2, r1
 8030512:	bfac      	ite	ge
 8030514:	189b      	addge	r3, r3, r2
 8030516:	185b      	addlt	r3, r3, r1
 8030518:	930f      	str	r3, [sp, #60]	@ 0x3c
 803051a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803051c:	b13b      	cbz	r3, 803052e <_svfprintf_r+0x83e>
 803051e:	9803      	ldr	r0, [sp, #12]
 8030520:	aa26      	add	r2, sp, #152	@ 0x98
 8030522:	4659      	mov	r1, fp
 8030524:	f7fd ff6c 	bl	802e400 <__ssprint_r>
 8030528:	2800      	cmp	r0, #0
 803052a:	f040 855c 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 803052e:	2300      	movs	r3, #0
 8030530:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030532:	f1ba 0f00 	cmp.w	sl, #0
 8030536:	f040 8572 	bne.w	803101e <_svfprintf_r+0x132e>
 803053a:	9e07      	ldr	r6, [sp, #28]
 803053c:	ac29      	add	r4, sp, #164	@ 0xa4
 803053e:	e0c6      	b.n	80306ce <_svfprintf_r+0x9de>
 8030540:	f802 0c01 	strb.w	r0, [r2, #-1]
 8030544:	e6ac      	b.n	80302a0 <_svfprintf_r+0x5b0>
 8030546:	f803 0b01 	strb.w	r0, [r3], #1
 803054a:	e676      	b.n	803023a <_svfprintf_r+0x54a>
 803054c:	9b08      	ldr	r3, [sp, #32]
 803054e:	2b46      	cmp	r3, #70	@ 0x46
 8030550:	d005      	beq.n	803055e <_svfprintf_r+0x86e>
 8030552:	2b45      	cmp	r3, #69	@ 0x45
 8030554:	d11a      	bne.n	803058c <_svfprintf_r+0x89c>
 8030556:	f108 0601 	add.w	r6, r8, #1
 803055a:	2102      	movs	r1, #2
 803055c:	e001      	b.n	8030562 <_svfprintf_r+0x872>
 803055e:	4646      	mov	r6, r8
 8030560:	2103      	movs	r1, #3
 8030562:	ab24      	add	r3, sp, #144	@ 0x90
 8030564:	9301      	str	r3, [sp, #4]
 8030566:	ab21      	add	r3, sp, #132	@ 0x84
 8030568:	9300      	str	r3, [sp, #0]
 803056a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 803056e:	ab20      	add	r3, sp, #128	@ 0x80
 8030570:	9803      	ldr	r0, [sp, #12]
 8030572:	4632      	mov	r2, r6
 8030574:	f7fc fd80 	bl	802d078 <_dtoa_r>
 8030578:	9b08      	ldr	r3, [sp, #32]
 803057a:	2b47      	cmp	r3, #71	@ 0x47
 803057c:	4681      	mov	r9, r0
 803057e:	d119      	bne.n	80305b4 <_svfprintf_r+0x8c4>
 8030580:	07e8      	lsls	r0, r5, #31
 8030582:	d405      	bmi.n	8030590 <_svfprintf_r+0x8a0>
 8030584:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8030586:	eba3 0309 	sub.w	r3, r3, r9
 803058a:	e69b      	b.n	80302c4 <_svfprintf_r+0x5d4>
 803058c:	4646      	mov	r6, r8
 803058e:	e7e4      	b.n	803055a <_svfprintf_r+0x86a>
 8030590:	eb09 0706 	add.w	r7, r9, r6
 8030594:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8030598:	2200      	movs	r2, #0
 803059a:	2300      	movs	r3, #0
 803059c:	f7e0 faac 	bl	8010af8 <__aeabi_dcmpeq>
 80305a0:	b100      	cbz	r0, 80305a4 <_svfprintf_r+0x8b4>
 80305a2:	9724      	str	r7, [sp, #144]	@ 0x90
 80305a4:	2230      	movs	r2, #48	@ 0x30
 80305a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80305a8:	429f      	cmp	r7, r3
 80305aa:	d9eb      	bls.n	8030584 <_svfprintf_r+0x894>
 80305ac:	1c59      	adds	r1, r3, #1
 80305ae:	9124      	str	r1, [sp, #144]	@ 0x90
 80305b0:	701a      	strb	r2, [r3, #0]
 80305b2:	e7f8      	b.n	80305a6 <_svfprintf_r+0x8b6>
 80305b4:	9b08      	ldr	r3, [sp, #32]
 80305b6:	2b46      	cmp	r3, #70	@ 0x46
 80305b8:	eb00 0706 	add.w	r7, r0, r6
 80305bc:	d1ea      	bne.n	8030594 <_svfprintf_r+0x8a4>
 80305be:	7803      	ldrb	r3, [r0, #0]
 80305c0:	2b30      	cmp	r3, #48	@ 0x30
 80305c2:	d109      	bne.n	80305d8 <_svfprintf_r+0x8e8>
 80305c4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80305c8:	2200      	movs	r2, #0
 80305ca:	2300      	movs	r3, #0
 80305cc:	f7e0 fa94 	bl	8010af8 <__aeabi_dcmpeq>
 80305d0:	b910      	cbnz	r0, 80305d8 <_svfprintf_r+0x8e8>
 80305d2:	f1c6 0601 	rsb	r6, r6, #1
 80305d6:	9620      	str	r6, [sp, #128]	@ 0x80
 80305d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80305da:	441f      	add	r7, r3
 80305dc:	e7da      	b.n	8030594 <_svfprintf_r+0x8a4>
 80305de:	9b08      	ldr	r3, [sp, #32]
 80305e0:	2b46      	cmp	r3, #70	@ 0x46
 80305e2:	f47f ae7d 	bne.w	80302e0 <_svfprintf_r+0x5f0>
 80305e6:	f005 0301 	and.w	r3, r5, #1
 80305ea:	2e00      	cmp	r6, #0
 80305ec:	ea43 0308 	orr.w	r3, r3, r8
 80305f0:	dd25      	ble.n	803063e <_svfprintf_r+0x94e>
 80305f2:	b37b      	cbz	r3, 8030654 <_svfprintf_r+0x964>
 80305f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80305f6:	18f3      	adds	r3, r6, r3
 80305f8:	4498      	add	r8, r3
 80305fa:	2366      	movs	r3, #102	@ 0x66
 80305fc:	9306      	str	r3, [sp, #24]
 80305fe:	e033      	b.n	8030668 <_svfprintf_r+0x978>
 8030600:	f813 7b01 	ldrb.w	r7, [r3], #1
 8030604:	f806 7f01 	strb.w	r7, [r6, #1]!
 8030608:	e6a1      	b.n	803034e <_svfprintf_r+0x65e>
 803060a:	b941      	cbnz	r1, 803061e <_svfprintf_r+0x92e>
 803060c:	2230      	movs	r2, #48	@ 0x30
 803060e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8030612:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8030616:	3330      	adds	r3, #48	@ 0x30
 8030618:	f802 3b01 	strb.w	r3, [r2], #1
 803061c:	e6a3      	b.n	8030366 <_svfprintf_r+0x676>
 803061e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8030622:	e7f8      	b.n	8030616 <_svfprintf_r+0x926>
 8030624:	9b04      	ldr	r3, [sp, #16]
 8030626:	429e      	cmp	r6, r3
 8030628:	da0d      	bge.n	8030646 <_svfprintf_r+0x956>
 803062a:	9b04      	ldr	r3, [sp, #16]
 803062c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803062e:	2e00      	cmp	r6, #0
 8030630:	eb03 0802 	add.w	r8, r3, r2
 8030634:	dc0c      	bgt.n	8030650 <_svfprintf_r+0x960>
 8030636:	f1c6 0301 	rsb	r3, r6, #1
 803063a:	4498      	add	r8, r3
 803063c:	e008      	b.n	8030650 <_svfprintf_r+0x960>
 803063e:	b17b      	cbz	r3, 8030660 <_svfprintf_r+0x970>
 8030640:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030642:	3301      	adds	r3, #1
 8030644:	e7d8      	b.n	80305f8 <_svfprintf_r+0x908>
 8030646:	07eb      	lsls	r3, r5, #31
 8030648:	d521      	bpl.n	803068e <_svfprintf_r+0x99e>
 803064a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803064c:	eb06 0803 	add.w	r8, r6, r3
 8030650:	2367      	movs	r3, #103	@ 0x67
 8030652:	e7d3      	b.n	80305fc <_svfprintf_r+0x90c>
 8030654:	46b0      	mov	r8, r6
 8030656:	e7d0      	b.n	80305fa <_svfprintf_r+0x90a>
 8030658:	0803ac86 	.word	0x0803ac86
 803065c:	0803ac76 	.word	0x0803ac76
 8030660:	2366      	movs	r3, #102	@ 0x66
 8030662:	9306      	str	r3, [sp, #24]
 8030664:	f04f 0801 	mov.w	r8, #1
 8030668:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 803066c:	9308      	str	r3, [sp, #32]
 803066e:	d01f      	beq.n	80306b0 <_svfprintf_r+0x9c0>
 8030670:	2700      	movs	r7, #0
 8030672:	2e00      	cmp	r6, #0
 8030674:	9708      	str	r7, [sp, #32]
 8030676:	f77f ae8a 	ble.w	803038e <_svfprintf_r+0x69e>
 803067a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803067c:	781b      	ldrb	r3, [r3, #0]
 803067e:	2bff      	cmp	r3, #255	@ 0xff
 8030680:	d107      	bne.n	8030692 <_svfprintf_r+0x9a2>
 8030682:	9b08      	ldr	r3, [sp, #32]
 8030684:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8030686:	443b      	add	r3, r7
 8030688:	fb02 8803 	mla	r8, r2, r3, r8
 803068c:	e67f      	b.n	803038e <_svfprintf_r+0x69e>
 803068e:	46b0      	mov	r8, r6
 8030690:	e7de      	b.n	8030650 <_svfprintf_r+0x960>
 8030692:	42b3      	cmp	r3, r6
 8030694:	daf5      	bge.n	8030682 <_svfprintf_r+0x992>
 8030696:	1af6      	subs	r6, r6, r3
 8030698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803069a:	785b      	ldrb	r3, [r3, #1]
 803069c:	b133      	cbz	r3, 80306ac <_svfprintf_r+0x9bc>
 803069e:	9b08      	ldr	r3, [sp, #32]
 80306a0:	3301      	adds	r3, #1
 80306a2:	9308      	str	r3, [sp, #32]
 80306a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80306a6:	3301      	adds	r3, #1
 80306a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80306aa:	e7e6      	b.n	803067a <_svfprintf_r+0x98a>
 80306ac:	3701      	adds	r7, #1
 80306ae:	e7e4      	b.n	803067a <_svfprintf_r+0x98a>
 80306b0:	9f08      	ldr	r7, [sp, #32]
 80306b2:	e66c      	b.n	803038e <_svfprintf_r+0x69e>
 80306b4:	232d      	movs	r3, #45	@ 0x2d
 80306b6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80306ba:	e66c      	b.n	8030396 <_svfprintf_r+0x6a6>
 80306bc:	06af      	lsls	r7, r5, #26
 80306be:	d50a      	bpl.n	80306d6 <_svfprintf_r+0x9e6>
 80306c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80306c2:	6833      	ldr	r3, [r6, #0]
 80306c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80306c6:	17d2      	asrs	r2, r2, #31
 80306c8:	e9c3 1200 	strd	r1, r2, [r3]
 80306cc:	3604      	adds	r6, #4
 80306ce:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80306d2:	f7ff bb46 	b.w	802fd62 <_svfprintf_r+0x72>
 80306d6:	06e8      	lsls	r0, r5, #27
 80306d8:	d503      	bpl.n	80306e2 <_svfprintf_r+0x9f2>
 80306da:	6833      	ldr	r3, [r6, #0]
 80306dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80306de:	601a      	str	r2, [r3, #0]
 80306e0:	e7f4      	b.n	80306cc <_svfprintf_r+0x9dc>
 80306e2:	0669      	lsls	r1, r5, #25
 80306e4:	d503      	bpl.n	80306ee <_svfprintf_r+0x9fe>
 80306e6:	6833      	ldr	r3, [r6, #0]
 80306e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80306ea:	801a      	strh	r2, [r3, #0]
 80306ec:	e7ee      	b.n	80306cc <_svfprintf_r+0x9dc>
 80306ee:	05aa      	lsls	r2, r5, #22
 80306f0:	d5f3      	bpl.n	80306da <_svfprintf_r+0x9ea>
 80306f2:	6833      	ldr	r3, [r6, #0]
 80306f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80306f6:	701a      	strb	r2, [r3, #0]
 80306f8:	e7e8      	b.n	80306cc <_svfprintf_r+0x9dc>
 80306fa:	f045 0510 	orr.w	r5, r5, #16
 80306fe:	f015 0320 	ands.w	r3, r5, #32
 8030702:	d020      	beq.n	8030746 <_svfprintf_r+0xa56>
 8030704:	3607      	adds	r6, #7
 8030706:	f026 0307 	bic.w	r3, r6, #7
 803070a:	461a      	mov	r2, r3
 803070c:	685f      	ldr	r7, [r3, #4]
 803070e:	f852 6b08 	ldr.w	r6, [r2], #8
 8030712:	9207      	str	r2, [sp, #28]
 8030714:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030718:	2300      	movs	r3, #0
 803071a:	2200      	movs	r2, #0
 803071c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8030720:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8030724:	f000 848c 	beq.w	8031040 <_svfprintf_r+0x1350>
 8030728:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 803072c:	9208      	str	r2, [sp, #32]
 803072e:	ea56 0207 	orrs.w	r2, r6, r7
 8030732:	f040 848a 	bne.w	803104a <_svfprintf_r+0x135a>
 8030736:	f1b8 0f00 	cmp.w	r8, #0
 803073a:	f000 80db 	beq.w	80308f4 <_svfprintf_r+0xc04>
 803073e:	2b01      	cmp	r3, #1
 8030740:	f040 8486 	bne.w	8031050 <_svfprintf_r+0x1360>
 8030744:	e083      	b.n	803084e <_svfprintf_r+0xb5e>
 8030746:	4632      	mov	r2, r6
 8030748:	f015 0710 	ands.w	r7, r5, #16
 803074c:	f852 6b04 	ldr.w	r6, [r2], #4
 8030750:	9207      	str	r2, [sp, #28]
 8030752:	d001      	beq.n	8030758 <_svfprintf_r+0xa68>
 8030754:	461f      	mov	r7, r3
 8030756:	e7dd      	b.n	8030714 <_svfprintf_r+0xa24>
 8030758:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 803075c:	d001      	beq.n	8030762 <_svfprintf_r+0xa72>
 803075e:	b2b6      	uxth	r6, r6
 8030760:	e7d8      	b.n	8030714 <_svfprintf_r+0xa24>
 8030762:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8030766:	d0d5      	beq.n	8030714 <_svfprintf_r+0xa24>
 8030768:	b2f6      	uxtb	r6, r6
 803076a:	e7f3      	b.n	8030754 <_svfprintf_r+0xa64>
 803076c:	4633      	mov	r3, r6
 803076e:	2278      	movs	r2, #120	@ 0x78
 8030770:	f853 6b04 	ldr.w	r6, [r3], #4
 8030774:	9307      	str	r3, [sp, #28]
 8030776:	f647 0330 	movw	r3, #30768	@ 0x7830
 803077a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 803077e:	4b94      	ldr	r3, [pc, #592]	@ (80309d0 <_svfprintf_r+0xce0>)
 8030780:	9319      	str	r3, [sp, #100]	@ 0x64
 8030782:	2700      	movs	r7, #0
 8030784:	f045 0502 	orr.w	r5, r5, #2
 8030788:	2302      	movs	r3, #2
 803078a:	9206      	str	r2, [sp, #24]
 803078c:	e7c5      	b.n	803071a <_svfprintf_r+0xa2a>
 803078e:	4633      	mov	r3, r6
 8030790:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8030794:	f853 9b04 	ldr.w	r9, [r3], #4
 8030798:	9307      	str	r3, [sp, #28]
 803079a:	f04f 0600 	mov.w	r6, #0
 803079e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 80307a2:	d00f      	beq.n	80307c4 <_svfprintf_r+0xad4>
 80307a4:	4642      	mov	r2, r8
 80307a6:	4631      	mov	r1, r6
 80307a8:	4648      	mov	r0, r9
 80307aa:	f7df fd29 	bl	8010200 <memchr>
 80307ae:	4682      	mov	sl, r0
 80307b0:	2800      	cmp	r0, #0
 80307b2:	f43f ac81 	beq.w	80300b8 <_svfprintf_r+0x3c8>
 80307b6:	eba0 0809 	sub.w	r8, r0, r9
 80307ba:	46b2      	mov	sl, r6
 80307bc:	9610      	str	r6, [sp, #64]	@ 0x40
 80307be:	4637      	mov	r7, r6
 80307c0:	9608      	str	r6, [sp, #32]
 80307c2:	e5eb      	b.n	803039c <_svfprintf_r+0x6ac>
 80307c4:	4648      	mov	r0, r9
 80307c6:	f7df fd6b 	bl	80102a0 <strlen>
 80307ca:	46b2      	mov	sl, r6
 80307cc:	4680      	mov	r8, r0
 80307ce:	e473      	b.n	80300b8 <_svfprintf_r+0x3c8>
 80307d0:	f045 0510 	orr.w	r5, r5, #16
 80307d4:	f015 0320 	ands.w	r3, r5, #32
 80307d8:	d009      	beq.n	80307ee <_svfprintf_r+0xafe>
 80307da:	3607      	adds	r6, #7
 80307dc:	f026 0307 	bic.w	r3, r6, #7
 80307e0:	461a      	mov	r2, r3
 80307e2:	685f      	ldr	r7, [r3, #4]
 80307e4:	f852 6b08 	ldr.w	r6, [r2], #8
 80307e8:	9207      	str	r2, [sp, #28]
 80307ea:	2301      	movs	r3, #1
 80307ec:	e795      	b.n	803071a <_svfprintf_r+0xa2a>
 80307ee:	4632      	mov	r2, r6
 80307f0:	f015 0710 	ands.w	r7, r5, #16
 80307f4:	f852 6b04 	ldr.w	r6, [r2], #4
 80307f8:	9207      	str	r2, [sp, #28]
 80307fa:	d001      	beq.n	8030800 <_svfprintf_r+0xb10>
 80307fc:	461f      	mov	r7, r3
 80307fe:	e7f4      	b.n	80307ea <_svfprintf_r+0xafa>
 8030800:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8030804:	d001      	beq.n	803080a <_svfprintf_r+0xb1a>
 8030806:	b2b6      	uxth	r6, r6
 8030808:	e7ef      	b.n	80307ea <_svfprintf_r+0xafa>
 803080a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803080e:	d0ec      	beq.n	80307ea <_svfprintf_r+0xafa>
 8030810:	b2f6      	uxtb	r6, r6
 8030812:	e7f3      	b.n	80307fc <_svfprintf_r+0xb0c>
 8030814:	4b6f      	ldr	r3, [pc, #444]	@ (80309d4 <_svfprintf_r+0xce4>)
 8030816:	f7ff bb39 	b.w	802fe8c <_svfprintf_r+0x19c>
 803081a:	4632      	mov	r2, r6
 803081c:	f015 0710 	ands.w	r7, r5, #16
 8030820:	f852 6b04 	ldr.w	r6, [r2], #4
 8030824:	9207      	str	r2, [sp, #28]
 8030826:	d002      	beq.n	803082e <_svfprintf_r+0xb3e>
 8030828:	461f      	mov	r7, r3
 803082a:	f7ff bb3c 	b.w	802fea6 <_svfprintf_r+0x1b6>
 803082e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8030832:	d002      	beq.n	803083a <_svfprintf_r+0xb4a>
 8030834:	b2b6      	uxth	r6, r6
 8030836:	f7ff bb36 	b.w	802fea6 <_svfprintf_r+0x1b6>
 803083a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803083e:	f43f ab32 	beq.w	802fea6 <_svfprintf_r+0x1b6>
 8030842:	b2f6      	uxtb	r6, r6
 8030844:	e7f0      	b.n	8030828 <_svfprintf_r+0xb38>
 8030846:	2e0a      	cmp	r6, #10
 8030848:	f177 0300 	sbcs.w	r3, r7, #0
 803084c:	d207      	bcs.n	803085e <_svfprintf_r+0xb6e>
 803084e:	3630      	adds	r6, #48	@ 0x30
 8030850:	b2f6      	uxtb	r6, r6
 8030852:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8030856:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 803085a:	f000 bc15 	b.w	8031088 <_svfprintf_r+0x1398>
 803085e:	2300      	movs	r3, #0
 8030860:	9304      	str	r3, [sp, #16]
 8030862:	9b08      	ldr	r3, [sp, #32]
 8030864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8030868:	ad52      	add	r5, sp, #328	@ 0x148
 803086a:	9310      	str	r3, [sp, #64]	@ 0x40
 803086c:	220a      	movs	r2, #10
 803086e:	2300      	movs	r3, #0
 8030870:	4630      	mov	r0, r6
 8030872:	4639      	mov	r1, r7
 8030874:	f7e0 fa70 	bl	8010d58 <__aeabi_uldivmod>
 8030878:	9b04      	ldr	r3, [sp, #16]
 803087a:	9011      	str	r0, [sp, #68]	@ 0x44
 803087c:	3301      	adds	r3, #1
 803087e:	9304      	str	r3, [sp, #16]
 8030880:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030882:	3230      	adds	r2, #48	@ 0x30
 8030884:	468a      	mov	sl, r1
 8030886:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803088a:	f805 2c01 	strb.w	r2, [r5, #-1]
 803088e:	b1d3      	cbz	r3, 80308c6 <_svfprintf_r+0xbd6>
 8030890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030892:	9a04      	ldr	r2, [sp, #16]
 8030894:	781b      	ldrb	r3, [r3, #0]
 8030896:	429a      	cmp	r2, r3
 8030898:	d115      	bne.n	80308c6 <_svfprintf_r+0xbd6>
 803089a:	2aff      	cmp	r2, #255	@ 0xff
 803089c:	d013      	beq.n	80308c6 <_svfprintf_r+0xbd6>
 803089e:	2e0a      	cmp	r6, #10
 80308a0:	f177 0300 	sbcs.w	r3, r7, #0
 80308a4:	d30f      	bcc.n	80308c6 <_svfprintf_r+0xbd6>
 80308a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80308a8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80308aa:	eba9 0903 	sub.w	r9, r9, r3
 80308ae:	461a      	mov	r2, r3
 80308b0:	4648      	mov	r0, r9
 80308b2:	f7fb f8ec 	bl	802ba8e <strncpy>
 80308b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80308b8:	785b      	ldrb	r3, [r3, #1]
 80308ba:	b11b      	cbz	r3, 80308c4 <_svfprintf_r+0xbd4>
 80308bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80308be:	3301      	adds	r3, #1
 80308c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80308c2:	2300      	movs	r3, #0
 80308c4:	9304      	str	r3, [sp, #16]
 80308c6:	2e0a      	cmp	r6, #10
 80308c8:	f177 0700 	sbcs.w	r7, r7, #0
 80308cc:	f0c0 83dc 	bcc.w	8031088 <_svfprintf_r+0x1398>
 80308d0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80308d2:	4657      	mov	r7, sl
 80308d4:	464d      	mov	r5, r9
 80308d6:	e7c9      	b.n	803086c <_svfprintf_r+0xb7c>
 80308d8:	f006 030f 	and.w	r3, r6, #15
 80308dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80308de:	0936      	lsrs	r6, r6, #4
 80308e0:	5cd3      	ldrb	r3, [r2, r3]
 80308e2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80308e6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 80308ea:	093f      	lsrs	r7, r7, #4
 80308ec:	ea56 0307 	orrs.w	r3, r6, r7
 80308f0:	d1f2      	bne.n	80308d8 <_svfprintf_r+0xbe8>
 80308f2:	e3c9      	b.n	8031088 <_svfprintf_r+0x1398>
 80308f4:	b91b      	cbnz	r3, 80308fe <_svfprintf_r+0xc0e>
 80308f6:	07e9      	lsls	r1, r5, #31
 80308f8:	d501      	bpl.n	80308fe <_svfprintf_r+0xc0e>
 80308fa:	2630      	movs	r6, #48	@ 0x30
 80308fc:	e7a9      	b.n	8030852 <_svfprintf_r+0xb62>
 80308fe:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8030902:	e3c1      	b.n	8031088 <_svfprintf_r+0x1398>
 8030904:	9b06      	ldr	r3, [sp, #24]
 8030906:	2b00      	cmp	r3, #0
 8030908:	f000 838f 	beq.w	803102a <_svfprintf_r+0x133a>
 803090c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8030910:	2300      	movs	r3, #0
 8030912:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030916:	9607      	str	r6, [sp, #28]
 8030918:	f7ff bb63 	b.w	802ffe2 <_svfprintf_r+0x2f2>
 803091c:	2010      	movs	r0, #16
 803091e:	4403      	add	r3, r0
 8030920:	2a07      	cmp	r2, #7
 8030922:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030926:	6060      	str	r0, [r4, #4]
 8030928:	dd08      	ble.n	803093c <_svfprintf_r+0xc4c>
 803092a:	9803      	ldr	r0, [sp, #12]
 803092c:	aa26      	add	r2, sp, #152	@ 0x98
 803092e:	4659      	mov	r1, fp
 8030930:	f7fd fd66 	bl	802e400 <__ssprint_r>
 8030934:	2800      	cmp	r0, #0
 8030936:	f040 8356 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 803093a:	a929      	add	r1, sp, #164	@ 0xa4
 803093c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803093e:	3b10      	subs	r3, #16
 8030940:	9313      	str	r3, [sp, #76]	@ 0x4c
 8030942:	460c      	mov	r4, r1
 8030944:	e546      	b.n	80303d4 <_svfprintf_r+0x6e4>
 8030946:	460c      	mov	r4, r1
 8030948:	e561      	b.n	803040e <_svfprintf_r+0x71e>
 803094a:	9803      	ldr	r0, [sp, #12]
 803094c:	aa26      	add	r2, sp, #152	@ 0x98
 803094e:	4659      	mov	r1, fp
 8030950:	f7fd fd56 	bl	802e400 <__ssprint_r>
 8030954:	2800      	cmp	r0, #0
 8030956:	f040 8346 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 803095a:	ac29      	add	r4, sp, #164	@ 0xa4
 803095c:	e569      	b.n	8030432 <_svfprintf_r+0x742>
 803095e:	9803      	ldr	r0, [sp, #12]
 8030960:	aa26      	add	r2, sp, #152	@ 0x98
 8030962:	4659      	mov	r1, fp
 8030964:	f7fd fd4c 	bl	802e400 <__ssprint_r>
 8030968:	2800      	cmp	r0, #0
 803096a:	f040 833c 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 803096e:	ac29      	add	r4, sp, #164	@ 0xa4
 8030970:	e56f      	b.n	8030452 <_svfprintf_r+0x762>
 8030972:	2010      	movs	r0, #16
 8030974:	4403      	add	r3, r0
 8030976:	2a07      	cmp	r2, #7
 8030978:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803097c:	6060      	str	r0, [r4, #4]
 803097e:	dd08      	ble.n	8030992 <_svfprintf_r+0xca2>
 8030980:	9803      	ldr	r0, [sp, #12]
 8030982:	aa26      	add	r2, sp, #152	@ 0x98
 8030984:	4659      	mov	r1, fp
 8030986:	f7fd fd3b 	bl	802e400 <__ssprint_r>
 803098a:	2800      	cmp	r0, #0
 803098c:	f040 832b 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030990:	a929      	add	r1, sp, #164	@ 0xa4
 8030992:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8030994:	3b10      	subs	r3, #16
 8030996:	9313      	str	r3, [sp, #76]	@ 0x4c
 8030998:	460c      	mov	r4, r1
 803099a:	e563      	b.n	8030464 <_svfprintf_r+0x774>
 803099c:	460c      	mov	r4, r1
 803099e:	e57e      	b.n	803049e <_svfprintf_r+0x7ae>
 80309a0:	2010      	movs	r0, #16
 80309a2:	4403      	add	r3, r0
 80309a4:	2a07      	cmp	r2, #7
 80309a6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80309aa:	6060      	str	r0, [r4, #4]
 80309ac:	dd08      	ble.n	80309c0 <_svfprintf_r+0xcd0>
 80309ae:	9803      	ldr	r0, [sp, #12]
 80309b0:	aa26      	add	r2, sp, #152	@ 0x98
 80309b2:	4659      	mov	r1, fp
 80309b4:	f7fd fd24 	bl	802e400 <__ssprint_r>
 80309b8:	2800      	cmp	r0, #0
 80309ba:	f040 8314 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 80309be:	a929      	add	r1, sp, #164	@ 0xa4
 80309c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80309c2:	3b10      	subs	r3, #16
 80309c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80309c6:	460c      	mov	r4, r1
 80309c8:	e56f      	b.n	80304aa <_svfprintf_r+0x7ba>
 80309ca:	460c      	mov	r4, r1
 80309cc:	e58a      	b.n	80304e4 <_svfprintf_r+0x7f4>
 80309ce:	bf00      	nop
 80309d0:	0803a70f 	.word	0x0803a70f
 80309d4:	0803a720 	.word	0x0803a720
 80309d8:	9b06      	ldr	r3, [sp, #24]
 80309da:	2b65      	cmp	r3, #101	@ 0x65
 80309dc:	f340 8246 	ble.w	8030e6c <_svfprintf_r+0x117c>
 80309e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80309e4:	2200      	movs	r2, #0
 80309e6:	2300      	movs	r3, #0
 80309e8:	f7e0 f886 	bl	8010af8 <__aeabi_dcmpeq>
 80309ec:	2800      	cmp	r0, #0
 80309ee:	d06a      	beq.n	8030ac6 <_svfprintf_r+0xdd6>
 80309f0:	4b73      	ldr	r3, [pc, #460]	@ (8030bc0 <_svfprintf_r+0xed0>)
 80309f2:	6023      	str	r3, [r4, #0]
 80309f4:	2301      	movs	r3, #1
 80309f6:	6063      	str	r3, [r4, #4]
 80309f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80309fa:	3301      	adds	r3, #1
 80309fc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80309fe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030a00:	3301      	adds	r3, #1
 8030a02:	2b07      	cmp	r3, #7
 8030a04:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030a06:	dc37      	bgt.n	8030a78 <_svfprintf_r+0xd88>
 8030a08:	3408      	adds	r4, #8
 8030a0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8030a0c:	9a04      	ldr	r2, [sp, #16]
 8030a0e:	4293      	cmp	r3, r2
 8030a10:	db02      	blt.n	8030a18 <_svfprintf_r+0xd28>
 8030a12:	07ef      	lsls	r7, r5, #31
 8030a14:	f57f ad76 	bpl.w	8030504 <_svfprintf_r+0x814>
 8030a18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8030a1a:	6023      	str	r3, [r4, #0]
 8030a1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030a1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8030a20:	6063      	str	r3, [r4, #4]
 8030a22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030a24:	4413      	add	r3, r2
 8030a26:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030a28:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030a2a:	3301      	adds	r3, #1
 8030a2c:	2b07      	cmp	r3, #7
 8030a2e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030a30:	dc2c      	bgt.n	8030a8c <_svfprintf_r+0xd9c>
 8030a32:	3408      	adds	r4, #8
 8030a34:	9b04      	ldr	r3, [sp, #16]
 8030a36:	1e5e      	subs	r6, r3, #1
 8030a38:	2e00      	cmp	r6, #0
 8030a3a:	f77f ad63 	ble.w	8030504 <_svfprintf_r+0x814>
 8030a3e:	4f61      	ldr	r7, [pc, #388]	@ (8030bc4 <_svfprintf_r+0xed4>)
 8030a40:	f04f 0810 	mov.w	r8, #16
 8030a44:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8030a48:	2e10      	cmp	r6, #16
 8030a4a:	f103 0301 	add.w	r3, r3, #1
 8030a4e:	f104 0108 	add.w	r1, r4, #8
 8030a52:	6027      	str	r7, [r4, #0]
 8030a54:	dc24      	bgt.n	8030aa0 <_svfprintf_r+0xdb0>
 8030a56:	6066      	str	r6, [r4, #4]
 8030a58:	2b07      	cmp	r3, #7
 8030a5a:	4416      	add	r6, r2
 8030a5c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8030a60:	f340 82a0 	ble.w	8030fa4 <_svfprintf_r+0x12b4>
 8030a64:	9803      	ldr	r0, [sp, #12]
 8030a66:	aa26      	add	r2, sp, #152	@ 0x98
 8030a68:	4659      	mov	r1, fp
 8030a6a:	f7fd fcc9 	bl	802e400 <__ssprint_r>
 8030a6e:	2800      	cmp	r0, #0
 8030a70:	f040 82b9 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030a74:	ac29      	add	r4, sp, #164	@ 0xa4
 8030a76:	e545      	b.n	8030504 <_svfprintf_r+0x814>
 8030a78:	9803      	ldr	r0, [sp, #12]
 8030a7a:	aa26      	add	r2, sp, #152	@ 0x98
 8030a7c:	4659      	mov	r1, fp
 8030a7e:	f7fd fcbf 	bl	802e400 <__ssprint_r>
 8030a82:	2800      	cmp	r0, #0
 8030a84:	f040 82af 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030a88:	ac29      	add	r4, sp, #164	@ 0xa4
 8030a8a:	e7be      	b.n	8030a0a <_svfprintf_r+0xd1a>
 8030a8c:	9803      	ldr	r0, [sp, #12]
 8030a8e:	aa26      	add	r2, sp, #152	@ 0x98
 8030a90:	4659      	mov	r1, fp
 8030a92:	f7fd fcb5 	bl	802e400 <__ssprint_r>
 8030a96:	2800      	cmp	r0, #0
 8030a98:	f040 82a5 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030a9c:	ac29      	add	r4, sp, #164	@ 0xa4
 8030a9e:	e7c9      	b.n	8030a34 <_svfprintf_r+0xd44>
 8030aa0:	3210      	adds	r2, #16
 8030aa2:	2b07      	cmp	r3, #7
 8030aa4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8030aa8:	f8c4 8004 	str.w	r8, [r4, #4]
 8030aac:	dd08      	ble.n	8030ac0 <_svfprintf_r+0xdd0>
 8030aae:	9803      	ldr	r0, [sp, #12]
 8030ab0:	aa26      	add	r2, sp, #152	@ 0x98
 8030ab2:	4659      	mov	r1, fp
 8030ab4:	f7fd fca4 	bl	802e400 <__ssprint_r>
 8030ab8:	2800      	cmp	r0, #0
 8030aba:	f040 8294 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030abe:	a929      	add	r1, sp, #164	@ 0xa4
 8030ac0:	3e10      	subs	r6, #16
 8030ac2:	460c      	mov	r4, r1
 8030ac4:	e7be      	b.n	8030a44 <_svfprintf_r+0xd54>
 8030ac6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8030ac8:	2b00      	cmp	r3, #0
 8030aca:	dc7d      	bgt.n	8030bc8 <_svfprintf_r+0xed8>
 8030acc:	4b3c      	ldr	r3, [pc, #240]	@ (8030bc0 <_svfprintf_r+0xed0>)
 8030ace:	6023      	str	r3, [r4, #0]
 8030ad0:	2301      	movs	r3, #1
 8030ad2:	6063      	str	r3, [r4, #4]
 8030ad4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030ad6:	3301      	adds	r3, #1
 8030ad8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030ada:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030adc:	3301      	adds	r3, #1
 8030ade:	2b07      	cmp	r3, #7
 8030ae0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030ae2:	dc46      	bgt.n	8030b72 <_svfprintf_r+0xe82>
 8030ae4:	3408      	adds	r4, #8
 8030ae6:	9904      	ldr	r1, [sp, #16]
 8030ae8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8030aea:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8030aec:	430b      	orrs	r3, r1
 8030aee:	f005 0101 	and.w	r1, r5, #1
 8030af2:	430b      	orrs	r3, r1
 8030af4:	f43f ad06 	beq.w	8030504 <_svfprintf_r+0x814>
 8030af8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8030afa:	6023      	str	r3, [r4, #0]
 8030afc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030afe:	6063      	str	r3, [r4, #4]
 8030b00:	441a      	add	r2, r3
 8030b02:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030b04:	9228      	str	r2, [sp, #160]	@ 0xa0
 8030b06:	3301      	adds	r3, #1
 8030b08:	2b07      	cmp	r3, #7
 8030b0a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030b0c:	dc3b      	bgt.n	8030b86 <_svfprintf_r+0xe96>
 8030b0e:	f104 0308 	add.w	r3, r4, #8
 8030b12:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8030b14:	2e00      	cmp	r6, #0
 8030b16:	da1b      	bge.n	8030b50 <_svfprintf_r+0xe60>
 8030b18:	4f2a      	ldr	r7, [pc, #168]	@ (8030bc4 <_svfprintf_r+0xed4>)
 8030b1a:	4276      	negs	r6, r6
 8030b1c:	461a      	mov	r2, r3
 8030b1e:	2410      	movs	r4, #16
 8030b20:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8030b24:	2e10      	cmp	r6, #16
 8030b26:	f101 0101 	add.w	r1, r1, #1
 8030b2a:	f103 0308 	add.w	r3, r3, #8
 8030b2e:	6017      	str	r7, [r2, #0]
 8030b30:	dc33      	bgt.n	8030b9a <_svfprintf_r+0xeaa>
 8030b32:	6056      	str	r6, [r2, #4]
 8030b34:	2907      	cmp	r1, #7
 8030b36:	4406      	add	r6, r0
 8030b38:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8030b3c:	dd08      	ble.n	8030b50 <_svfprintf_r+0xe60>
 8030b3e:	9803      	ldr	r0, [sp, #12]
 8030b40:	aa26      	add	r2, sp, #152	@ 0x98
 8030b42:	4659      	mov	r1, fp
 8030b44:	f7fd fc5c 	bl	802e400 <__ssprint_r>
 8030b48:	2800      	cmp	r0, #0
 8030b4a:	f040 824c 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030b4e:	ab29      	add	r3, sp, #164	@ 0xa4
 8030b50:	9a04      	ldr	r2, [sp, #16]
 8030b52:	9904      	ldr	r1, [sp, #16]
 8030b54:	605a      	str	r2, [r3, #4]
 8030b56:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8030b58:	f8c3 9000 	str.w	r9, [r3]
 8030b5c:	440a      	add	r2, r1
 8030b5e:	9228      	str	r2, [sp, #160]	@ 0xa0
 8030b60:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8030b62:	3201      	adds	r2, #1
 8030b64:	2a07      	cmp	r2, #7
 8030b66:	9227      	str	r2, [sp, #156]	@ 0x9c
 8030b68:	f73f af7c 	bgt.w	8030a64 <_svfprintf_r+0xd74>
 8030b6c:	f103 0408 	add.w	r4, r3, #8
 8030b70:	e4c8      	b.n	8030504 <_svfprintf_r+0x814>
 8030b72:	9803      	ldr	r0, [sp, #12]
 8030b74:	aa26      	add	r2, sp, #152	@ 0x98
 8030b76:	4659      	mov	r1, fp
 8030b78:	f7fd fc42 	bl	802e400 <__ssprint_r>
 8030b7c:	2800      	cmp	r0, #0
 8030b7e:	f040 8232 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030b82:	ac29      	add	r4, sp, #164	@ 0xa4
 8030b84:	e7af      	b.n	8030ae6 <_svfprintf_r+0xdf6>
 8030b86:	9803      	ldr	r0, [sp, #12]
 8030b88:	aa26      	add	r2, sp, #152	@ 0x98
 8030b8a:	4659      	mov	r1, fp
 8030b8c:	f7fd fc38 	bl	802e400 <__ssprint_r>
 8030b90:	2800      	cmp	r0, #0
 8030b92:	f040 8228 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030b96:	ab29      	add	r3, sp, #164	@ 0xa4
 8030b98:	e7bb      	b.n	8030b12 <_svfprintf_r+0xe22>
 8030b9a:	3010      	adds	r0, #16
 8030b9c:	2907      	cmp	r1, #7
 8030b9e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8030ba2:	6054      	str	r4, [r2, #4]
 8030ba4:	dd08      	ble.n	8030bb8 <_svfprintf_r+0xec8>
 8030ba6:	9803      	ldr	r0, [sp, #12]
 8030ba8:	aa26      	add	r2, sp, #152	@ 0x98
 8030baa:	4659      	mov	r1, fp
 8030bac:	f7fd fc28 	bl	802e400 <__ssprint_r>
 8030bb0:	2800      	cmp	r0, #0
 8030bb2:	f040 8218 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030bb6:	ab29      	add	r3, sp, #164	@ 0xa4
 8030bb8:	3e10      	subs	r6, #16
 8030bba:	461a      	mov	r2, r3
 8030bbc:	e7b0      	b.n	8030b20 <_svfprintf_r+0xe30>
 8030bbe:	bf00      	nop
 8030bc0:	0803a731 	.word	0x0803a731
 8030bc4:	0803ac76 	.word	0x0803ac76
 8030bc8:	9b04      	ldr	r3, [sp, #16]
 8030bca:	444b      	add	r3, r9
 8030bcc:	9306      	str	r3, [sp, #24]
 8030bce:	9b04      	ldr	r3, [sp, #16]
 8030bd0:	42b3      	cmp	r3, r6
 8030bd2:	bfa8      	it	ge
 8030bd4:	4633      	movge	r3, r6
 8030bd6:	2b00      	cmp	r3, #0
 8030bd8:	4698      	mov	r8, r3
 8030bda:	dd0b      	ble.n	8030bf4 <_svfprintf_r+0xf04>
 8030bdc:	e9c4 9300 	strd	r9, r3, [r4]
 8030be0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030be2:	4443      	add	r3, r8
 8030be4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030be6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030be8:	3301      	adds	r3, #1
 8030bea:	2b07      	cmp	r3, #7
 8030bec:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030bee:	f300 8089 	bgt.w	8030d04 <_svfprintf_r+0x1014>
 8030bf2:	3408      	adds	r4, #8
 8030bf4:	4643      	mov	r3, r8
 8030bf6:	2b00      	cmp	r3, #0
 8030bf8:	bfac      	ite	ge
 8030bfa:	eba6 0808 	subge.w	r8, r6, r8
 8030bfe:	46b0      	movlt	r8, r6
 8030c00:	f1b8 0f00 	cmp.w	r8, #0
 8030c04:	dd1b      	ble.n	8030c3e <_svfprintf_r+0xf4e>
 8030c06:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8030c0a:	4897      	ldr	r0, [pc, #604]	@ (8030e68 <_svfprintf_r+0x1178>)
 8030c0c:	6020      	str	r0, [r4, #0]
 8030c0e:	f1b8 0f10 	cmp.w	r8, #16
 8030c12:	f102 0201 	add.w	r2, r2, #1
 8030c16:	f104 0108 	add.w	r1, r4, #8
 8030c1a:	dc7d      	bgt.n	8030d18 <_svfprintf_r+0x1028>
 8030c1c:	4443      	add	r3, r8
 8030c1e:	2a07      	cmp	r2, #7
 8030c20:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030c24:	f8c4 8004 	str.w	r8, [r4, #4]
 8030c28:	f340 808a 	ble.w	8030d40 <_svfprintf_r+0x1050>
 8030c2c:	9803      	ldr	r0, [sp, #12]
 8030c2e:	aa26      	add	r2, sp, #152	@ 0x98
 8030c30:	4659      	mov	r1, fp
 8030c32:	f7fd fbe5 	bl	802e400 <__ssprint_r>
 8030c36:	2800      	cmp	r0, #0
 8030c38:	f040 81d5 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030c3c:	ac29      	add	r4, sp, #164	@ 0xa4
 8030c3e:	eb09 0806 	add.w	r8, r9, r6
 8030c42:	056e      	lsls	r6, r5, #21
 8030c44:	d508      	bpl.n	8030c58 <_svfprintf_r+0xf68>
 8030c46:	9b08      	ldr	r3, [sp, #32]
 8030c48:	2b00      	cmp	r3, #0
 8030c4a:	d17b      	bne.n	8030d44 <_svfprintf_r+0x1054>
 8030c4c:	2f00      	cmp	r7, #0
 8030c4e:	d17b      	bne.n	8030d48 <_svfprintf_r+0x1058>
 8030c50:	9b06      	ldr	r3, [sp, #24]
 8030c52:	4598      	cmp	r8, r3
 8030c54:	bf28      	it	cs
 8030c56:	4698      	movcs	r8, r3
 8030c58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8030c5a:	9a04      	ldr	r2, [sp, #16]
 8030c5c:	4293      	cmp	r3, r2
 8030c5e:	db01      	blt.n	8030c64 <_svfprintf_r+0xf74>
 8030c60:	07e8      	lsls	r0, r5, #31
 8030c62:	d50e      	bpl.n	8030c82 <_svfprintf_r+0xf92>
 8030c64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8030c66:	6023      	str	r3, [r4, #0]
 8030c68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030c6a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8030c6c:	6063      	str	r3, [r4, #4]
 8030c6e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030c70:	4413      	add	r3, r2
 8030c72:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030c74:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030c76:	3301      	adds	r3, #1
 8030c78:	2b07      	cmp	r3, #7
 8030c7a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030c7c:	f300 80df 	bgt.w	8030e3e <_svfprintf_r+0x114e>
 8030c80:	3408      	adds	r4, #8
 8030c82:	9b04      	ldr	r3, [sp, #16]
 8030c84:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8030c86:	1bdf      	subs	r7, r3, r7
 8030c88:	9b06      	ldr	r3, [sp, #24]
 8030c8a:	eba3 0308 	sub.w	r3, r3, r8
 8030c8e:	429f      	cmp	r7, r3
 8030c90:	bfa8      	it	ge
 8030c92:	461f      	movge	r7, r3
 8030c94:	2f00      	cmp	r7, #0
 8030c96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030c98:	dd0a      	ble.n	8030cb0 <_svfprintf_r+0xfc0>
 8030c9a:	443b      	add	r3, r7
 8030c9c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030c9e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030ca0:	3301      	adds	r3, #1
 8030ca2:	2b07      	cmp	r3, #7
 8030ca4:	e9c4 8700 	strd	r8, r7, [r4]
 8030ca8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030caa:	f300 80d2 	bgt.w	8030e52 <_svfprintf_r+0x1162>
 8030cae:	3408      	adds	r4, #8
 8030cb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8030cb2:	9b04      	ldr	r3, [sp, #16]
 8030cb4:	2f00      	cmp	r7, #0
 8030cb6:	eba3 0606 	sub.w	r6, r3, r6
 8030cba:	bfa8      	it	ge
 8030cbc:	1bf6      	subge	r6, r6, r7
 8030cbe:	2e00      	cmp	r6, #0
 8030cc0:	f77f ac20 	ble.w	8030504 <_svfprintf_r+0x814>
 8030cc4:	4f68      	ldr	r7, [pc, #416]	@ (8030e68 <_svfprintf_r+0x1178>)
 8030cc6:	f04f 0810 	mov.w	r8, #16
 8030cca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8030cce:	2e10      	cmp	r6, #16
 8030cd0:	f103 0301 	add.w	r3, r3, #1
 8030cd4:	f104 0108 	add.w	r1, r4, #8
 8030cd8:	6027      	str	r7, [r4, #0]
 8030cda:	f77f aebc 	ble.w	8030a56 <_svfprintf_r+0xd66>
 8030cde:	3210      	adds	r2, #16
 8030ce0:	2b07      	cmp	r3, #7
 8030ce2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8030ce6:	f8c4 8004 	str.w	r8, [r4, #4]
 8030cea:	dd08      	ble.n	8030cfe <_svfprintf_r+0x100e>
 8030cec:	9803      	ldr	r0, [sp, #12]
 8030cee:	aa26      	add	r2, sp, #152	@ 0x98
 8030cf0:	4659      	mov	r1, fp
 8030cf2:	f7fd fb85 	bl	802e400 <__ssprint_r>
 8030cf6:	2800      	cmp	r0, #0
 8030cf8:	f040 8175 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030cfc:	a929      	add	r1, sp, #164	@ 0xa4
 8030cfe:	3e10      	subs	r6, #16
 8030d00:	460c      	mov	r4, r1
 8030d02:	e7e2      	b.n	8030cca <_svfprintf_r+0xfda>
 8030d04:	9803      	ldr	r0, [sp, #12]
 8030d06:	aa26      	add	r2, sp, #152	@ 0x98
 8030d08:	4659      	mov	r1, fp
 8030d0a:	f7fd fb79 	bl	802e400 <__ssprint_r>
 8030d0e:	2800      	cmp	r0, #0
 8030d10:	f040 8169 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030d14:	ac29      	add	r4, sp, #164	@ 0xa4
 8030d16:	e76d      	b.n	8030bf4 <_svfprintf_r+0xf04>
 8030d18:	2010      	movs	r0, #16
 8030d1a:	4403      	add	r3, r0
 8030d1c:	2a07      	cmp	r2, #7
 8030d1e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030d22:	6060      	str	r0, [r4, #4]
 8030d24:	dd08      	ble.n	8030d38 <_svfprintf_r+0x1048>
 8030d26:	9803      	ldr	r0, [sp, #12]
 8030d28:	aa26      	add	r2, sp, #152	@ 0x98
 8030d2a:	4659      	mov	r1, fp
 8030d2c:	f7fd fb68 	bl	802e400 <__ssprint_r>
 8030d30:	2800      	cmp	r0, #0
 8030d32:	f040 8158 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030d36:	a929      	add	r1, sp, #164	@ 0xa4
 8030d38:	f1a8 0810 	sub.w	r8, r8, #16
 8030d3c:	460c      	mov	r4, r1
 8030d3e:	e762      	b.n	8030c06 <_svfprintf_r+0xf16>
 8030d40:	460c      	mov	r4, r1
 8030d42:	e77c      	b.n	8030c3e <_svfprintf_r+0xf4e>
 8030d44:	2f00      	cmp	r7, #0
 8030d46:	d04a      	beq.n	8030dde <_svfprintf_r+0x10ee>
 8030d48:	3f01      	subs	r7, #1
 8030d4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8030d4c:	6023      	str	r3, [r4, #0]
 8030d4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8030d50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8030d52:	6063      	str	r3, [r4, #4]
 8030d54:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030d56:	4413      	add	r3, r2
 8030d58:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030d5a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030d5c:	3301      	adds	r3, #1
 8030d5e:	2b07      	cmp	r3, #7
 8030d60:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030d62:	dc43      	bgt.n	8030dec <_svfprintf_r+0x10fc>
 8030d64:	3408      	adds	r4, #8
 8030d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030d68:	781a      	ldrb	r2, [r3, #0]
 8030d6a:	9b06      	ldr	r3, [sp, #24]
 8030d6c:	eba3 0308 	sub.w	r3, r3, r8
 8030d70:	429a      	cmp	r2, r3
 8030d72:	bfa8      	it	ge
 8030d74:	461a      	movge	r2, r3
 8030d76:	2a00      	cmp	r2, #0
 8030d78:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030d7a:	4691      	mov	r9, r2
 8030d7c:	dd09      	ble.n	8030d92 <_svfprintf_r+0x10a2>
 8030d7e:	4413      	add	r3, r2
 8030d80:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030d82:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030d84:	3301      	adds	r3, #1
 8030d86:	2b07      	cmp	r3, #7
 8030d88:	e9c4 8200 	strd	r8, r2, [r4]
 8030d8c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030d8e:	dc37      	bgt.n	8030e00 <_svfprintf_r+0x1110>
 8030d90:	3408      	adds	r4, #8
 8030d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030d94:	781e      	ldrb	r6, [r3, #0]
 8030d96:	f1b9 0f00 	cmp.w	r9, #0
 8030d9a:	bfa8      	it	ge
 8030d9c:	eba6 0609 	subge.w	r6, r6, r9
 8030da0:	2e00      	cmp	r6, #0
 8030da2:	dd18      	ble.n	8030dd6 <_svfprintf_r+0x10e6>
 8030da4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8030da8:	482f      	ldr	r0, [pc, #188]	@ (8030e68 <_svfprintf_r+0x1178>)
 8030daa:	6020      	str	r0, [r4, #0]
 8030dac:	2e10      	cmp	r6, #16
 8030dae:	f103 0301 	add.w	r3, r3, #1
 8030db2:	f104 0108 	add.w	r1, r4, #8
 8030db6:	dc2d      	bgt.n	8030e14 <_svfprintf_r+0x1124>
 8030db8:	6066      	str	r6, [r4, #4]
 8030dba:	2b07      	cmp	r3, #7
 8030dbc:	4416      	add	r6, r2
 8030dbe:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8030dc2:	dd3a      	ble.n	8030e3a <_svfprintf_r+0x114a>
 8030dc4:	9803      	ldr	r0, [sp, #12]
 8030dc6:	aa26      	add	r2, sp, #152	@ 0x98
 8030dc8:	4659      	mov	r1, fp
 8030dca:	f7fd fb19 	bl	802e400 <__ssprint_r>
 8030dce:	2800      	cmp	r0, #0
 8030dd0:	f040 8109 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030dd4:	ac29      	add	r4, sp, #164	@ 0xa4
 8030dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030dd8:	781b      	ldrb	r3, [r3, #0]
 8030dda:	4498      	add	r8, r3
 8030ddc:	e733      	b.n	8030c46 <_svfprintf_r+0xf56>
 8030dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030de0:	3b01      	subs	r3, #1
 8030de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8030de4:	9b08      	ldr	r3, [sp, #32]
 8030de6:	3b01      	subs	r3, #1
 8030de8:	9308      	str	r3, [sp, #32]
 8030dea:	e7ae      	b.n	8030d4a <_svfprintf_r+0x105a>
 8030dec:	9803      	ldr	r0, [sp, #12]
 8030dee:	aa26      	add	r2, sp, #152	@ 0x98
 8030df0:	4659      	mov	r1, fp
 8030df2:	f7fd fb05 	bl	802e400 <__ssprint_r>
 8030df6:	2800      	cmp	r0, #0
 8030df8:	f040 80f5 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030dfc:	ac29      	add	r4, sp, #164	@ 0xa4
 8030dfe:	e7b2      	b.n	8030d66 <_svfprintf_r+0x1076>
 8030e00:	9803      	ldr	r0, [sp, #12]
 8030e02:	aa26      	add	r2, sp, #152	@ 0x98
 8030e04:	4659      	mov	r1, fp
 8030e06:	f7fd fafb 	bl	802e400 <__ssprint_r>
 8030e0a:	2800      	cmp	r0, #0
 8030e0c:	f040 80eb 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030e10:	ac29      	add	r4, sp, #164	@ 0xa4
 8030e12:	e7be      	b.n	8030d92 <_svfprintf_r+0x10a2>
 8030e14:	2010      	movs	r0, #16
 8030e16:	4402      	add	r2, r0
 8030e18:	2b07      	cmp	r3, #7
 8030e1a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8030e1e:	6060      	str	r0, [r4, #4]
 8030e20:	dd08      	ble.n	8030e34 <_svfprintf_r+0x1144>
 8030e22:	9803      	ldr	r0, [sp, #12]
 8030e24:	aa26      	add	r2, sp, #152	@ 0x98
 8030e26:	4659      	mov	r1, fp
 8030e28:	f7fd faea 	bl	802e400 <__ssprint_r>
 8030e2c:	2800      	cmp	r0, #0
 8030e2e:	f040 80da 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030e32:	a929      	add	r1, sp, #164	@ 0xa4
 8030e34:	3e10      	subs	r6, #16
 8030e36:	460c      	mov	r4, r1
 8030e38:	e7b4      	b.n	8030da4 <_svfprintf_r+0x10b4>
 8030e3a:	460c      	mov	r4, r1
 8030e3c:	e7cb      	b.n	8030dd6 <_svfprintf_r+0x10e6>
 8030e3e:	9803      	ldr	r0, [sp, #12]
 8030e40:	aa26      	add	r2, sp, #152	@ 0x98
 8030e42:	4659      	mov	r1, fp
 8030e44:	f7fd fadc 	bl	802e400 <__ssprint_r>
 8030e48:	2800      	cmp	r0, #0
 8030e4a:	f040 80cc 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030e4e:	ac29      	add	r4, sp, #164	@ 0xa4
 8030e50:	e717      	b.n	8030c82 <_svfprintf_r+0xf92>
 8030e52:	9803      	ldr	r0, [sp, #12]
 8030e54:	aa26      	add	r2, sp, #152	@ 0x98
 8030e56:	4659      	mov	r1, fp
 8030e58:	f7fd fad2 	bl	802e400 <__ssprint_r>
 8030e5c:	2800      	cmp	r0, #0
 8030e5e:	f040 80c2 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030e62:	ac29      	add	r4, sp, #164	@ 0xa4
 8030e64:	e724      	b.n	8030cb0 <_svfprintf_r+0xfc0>
 8030e66:	bf00      	nop
 8030e68:	0803ac76 	.word	0x0803ac76
 8030e6c:	9904      	ldr	r1, [sp, #16]
 8030e6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030e70:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8030e72:	2901      	cmp	r1, #1
 8030e74:	f103 0301 	add.w	r3, r3, #1
 8030e78:	f102 0201 	add.w	r2, r2, #1
 8030e7c:	f104 0608 	add.w	r6, r4, #8
 8030e80:	dc02      	bgt.n	8030e88 <_svfprintf_r+0x1198>
 8030e82:	07e9      	lsls	r1, r5, #31
 8030e84:	f140 8083 	bpl.w	8030f8e <_svfprintf_r+0x129e>
 8030e88:	2101      	movs	r1, #1
 8030e8a:	2a07      	cmp	r2, #7
 8030e8c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030e90:	f8c4 9000 	str.w	r9, [r4]
 8030e94:	6061      	str	r1, [r4, #4]
 8030e96:	dd08      	ble.n	8030eaa <_svfprintf_r+0x11ba>
 8030e98:	9803      	ldr	r0, [sp, #12]
 8030e9a:	aa26      	add	r2, sp, #152	@ 0x98
 8030e9c:	4659      	mov	r1, fp
 8030e9e:	f7fd faaf 	bl	802e400 <__ssprint_r>
 8030ea2:	2800      	cmp	r0, #0
 8030ea4:	f040 809f 	bne.w	8030fe6 <_svfprintf_r+0x12f6>
 8030ea8:	ae29      	add	r6, sp, #164	@ 0xa4
 8030eaa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8030eac:	6033      	str	r3, [r6, #0]
 8030eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030eb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8030eb2:	6073      	str	r3, [r6, #4]
 8030eb4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030eb6:	4413      	add	r3, r2
 8030eb8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030eba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030ebc:	3301      	adds	r3, #1
 8030ebe:	2b07      	cmp	r3, #7
 8030ec0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030ec2:	dc33      	bgt.n	8030f2c <_svfprintf_r+0x123c>
 8030ec4:	3608      	adds	r6, #8
 8030ec6:	9b04      	ldr	r3, [sp, #16]
 8030ec8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8030ecc:	1e5c      	subs	r4, r3, #1
 8030ece:	2200      	movs	r2, #0
 8030ed0:	2300      	movs	r3, #0
 8030ed2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 8030ed6:	f7df fe0f 	bl	8010af8 <__aeabi_dcmpeq>
 8030eda:	2800      	cmp	r0, #0
 8030edc:	d12f      	bne.n	8030f3e <_svfprintf_r+0x124e>
 8030ede:	f109 0201 	add.w	r2, r9, #1
 8030ee2:	e9c6 2400 	strd	r2, r4, [r6]
 8030ee6:	9a04      	ldr	r2, [sp, #16]
 8030ee8:	f108 0301 	add.w	r3, r8, #1
 8030eec:	3f01      	subs	r7, #1
 8030eee:	4417      	add	r7, r2
 8030ef0:	2b07      	cmp	r3, #7
 8030ef2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8030ef6:	dd53      	ble.n	8030fa0 <_svfprintf_r+0x12b0>
 8030ef8:	9803      	ldr	r0, [sp, #12]
 8030efa:	aa26      	add	r2, sp, #152	@ 0x98
 8030efc:	4659      	mov	r1, fp
 8030efe:	f7fd fa7f 	bl	802e400 <__ssprint_r>
 8030f02:	2800      	cmp	r0, #0
 8030f04:	d16f      	bne.n	8030fe6 <_svfprintf_r+0x12f6>
 8030f06:	ae29      	add	r6, sp, #164	@ 0xa4
 8030f08:	ab22      	add	r3, sp, #136	@ 0x88
 8030f0a:	6033      	str	r3, [r6, #0]
 8030f0c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8030f0e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8030f10:	6073      	str	r3, [r6, #4]
 8030f12:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030f14:	4413      	add	r3, r2
 8030f16:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030f18:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030f1a:	3301      	adds	r3, #1
 8030f1c:	2b07      	cmp	r3, #7
 8030f1e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030f20:	f73f ada0 	bgt.w	8030a64 <_svfprintf_r+0xd74>
 8030f24:	f106 0408 	add.w	r4, r6, #8
 8030f28:	f7ff baec 	b.w	8030504 <_svfprintf_r+0x814>
 8030f2c:	9803      	ldr	r0, [sp, #12]
 8030f2e:	aa26      	add	r2, sp, #152	@ 0x98
 8030f30:	4659      	mov	r1, fp
 8030f32:	f7fd fa65 	bl	802e400 <__ssprint_r>
 8030f36:	2800      	cmp	r0, #0
 8030f38:	d155      	bne.n	8030fe6 <_svfprintf_r+0x12f6>
 8030f3a:	ae29      	add	r6, sp, #164	@ 0xa4
 8030f3c:	e7c3      	b.n	8030ec6 <_svfprintf_r+0x11d6>
 8030f3e:	9b04      	ldr	r3, [sp, #16]
 8030f40:	2b01      	cmp	r3, #1
 8030f42:	dde1      	ble.n	8030f08 <_svfprintf_r+0x1218>
 8030f44:	4f57      	ldr	r7, [pc, #348]	@ (80310a4 <_svfprintf_r+0x13b4>)
 8030f46:	f04f 0810 	mov.w	r8, #16
 8030f4a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8030f4e:	2c10      	cmp	r4, #16
 8030f50:	f103 0301 	add.w	r3, r3, #1
 8030f54:	f106 0108 	add.w	r1, r6, #8
 8030f58:	6037      	str	r7, [r6, #0]
 8030f5a:	dc07      	bgt.n	8030f6c <_svfprintf_r+0x127c>
 8030f5c:	6074      	str	r4, [r6, #4]
 8030f5e:	2b07      	cmp	r3, #7
 8030f60:	4414      	add	r4, r2
 8030f62:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8030f66:	dcc7      	bgt.n	8030ef8 <_svfprintf_r+0x1208>
 8030f68:	460e      	mov	r6, r1
 8030f6a:	e7cd      	b.n	8030f08 <_svfprintf_r+0x1218>
 8030f6c:	3210      	adds	r2, #16
 8030f6e:	2b07      	cmp	r3, #7
 8030f70:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8030f74:	f8c6 8004 	str.w	r8, [r6, #4]
 8030f78:	dd06      	ble.n	8030f88 <_svfprintf_r+0x1298>
 8030f7a:	9803      	ldr	r0, [sp, #12]
 8030f7c:	aa26      	add	r2, sp, #152	@ 0x98
 8030f7e:	4659      	mov	r1, fp
 8030f80:	f7fd fa3e 	bl	802e400 <__ssprint_r>
 8030f84:	bb78      	cbnz	r0, 8030fe6 <_svfprintf_r+0x12f6>
 8030f86:	a929      	add	r1, sp, #164	@ 0xa4
 8030f88:	3c10      	subs	r4, #16
 8030f8a:	460e      	mov	r6, r1
 8030f8c:	e7dd      	b.n	8030f4a <_svfprintf_r+0x125a>
 8030f8e:	2101      	movs	r1, #1
 8030f90:	2a07      	cmp	r2, #7
 8030f92:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030f96:	f8c4 9000 	str.w	r9, [r4]
 8030f9a:	6061      	str	r1, [r4, #4]
 8030f9c:	ddb4      	ble.n	8030f08 <_svfprintf_r+0x1218>
 8030f9e:	e7ab      	b.n	8030ef8 <_svfprintf_r+0x1208>
 8030fa0:	3608      	adds	r6, #8
 8030fa2:	e7b1      	b.n	8030f08 <_svfprintf_r+0x1218>
 8030fa4:	460c      	mov	r4, r1
 8030fa6:	f7ff baad 	b.w	8030504 <_svfprintf_r+0x814>
 8030faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8030fac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8030fae:	1a9d      	subs	r5, r3, r2
 8030fb0:	2d00      	cmp	r5, #0
 8030fb2:	f77f aaaa 	ble.w	803050a <_svfprintf_r+0x81a>
 8030fb6:	4e3c      	ldr	r6, [pc, #240]	@ (80310a8 <_svfprintf_r+0x13b8>)
 8030fb8:	2710      	movs	r7, #16
 8030fba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8030fbe:	2d10      	cmp	r5, #16
 8030fc0:	f103 0301 	add.w	r3, r3, #1
 8030fc4:	6026      	str	r6, [r4, #0]
 8030fc6:	dc18      	bgt.n	8030ffa <_svfprintf_r+0x130a>
 8030fc8:	442a      	add	r2, r5
 8030fca:	2b07      	cmp	r3, #7
 8030fcc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8030fd0:	6065      	str	r5, [r4, #4]
 8030fd2:	f77f aa9a 	ble.w	803050a <_svfprintf_r+0x81a>
 8030fd6:	9803      	ldr	r0, [sp, #12]
 8030fd8:	aa26      	add	r2, sp, #152	@ 0x98
 8030fda:	4659      	mov	r1, fp
 8030fdc:	f7fd fa10 	bl	802e400 <__ssprint_r>
 8030fe0:	2800      	cmp	r0, #0
 8030fe2:	f43f aa92 	beq.w	803050a <_svfprintf_r+0x81a>
 8030fe6:	f1ba 0f00 	cmp.w	sl, #0
 8030fea:	f43f a89a 	beq.w	8030122 <_svfprintf_r+0x432>
 8030fee:	9803      	ldr	r0, [sp, #12]
 8030ff0:	4651      	mov	r1, sl
 8030ff2:	f7fc fe43 	bl	802dc7c <_free_r>
 8030ff6:	f7ff b894 	b.w	8030122 <_svfprintf_r+0x432>
 8030ffa:	3210      	adds	r2, #16
 8030ffc:	2b07      	cmp	r3, #7
 8030ffe:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031002:	6067      	str	r7, [r4, #4]
 8031004:	dc02      	bgt.n	803100c <_svfprintf_r+0x131c>
 8031006:	3408      	adds	r4, #8
 8031008:	3d10      	subs	r5, #16
 803100a:	e7d6      	b.n	8030fba <_svfprintf_r+0x12ca>
 803100c:	9803      	ldr	r0, [sp, #12]
 803100e:	aa26      	add	r2, sp, #152	@ 0x98
 8031010:	4659      	mov	r1, fp
 8031012:	f7fd f9f5 	bl	802e400 <__ssprint_r>
 8031016:	2800      	cmp	r0, #0
 8031018:	d1e5      	bne.n	8030fe6 <_svfprintf_r+0x12f6>
 803101a:	ac29      	add	r4, sp, #164	@ 0xa4
 803101c:	e7f4      	b.n	8031008 <_svfprintf_r+0x1318>
 803101e:	9803      	ldr	r0, [sp, #12]
 8031020:	4651      	mov	r1, sl
 8031022:	f7fc fe2b 	bl	802dc7c <_free_r>
 8031026:	f7ff ba88 	b.w	803053a <_svfprintf_r+0x84a>
 803102a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803102c:	2b00      	cmp	r3, #0
 803102e:	f43f a878 	beq.w	8030122 <_svfprintf_r+0x432>
 8031032:	9803      	ldr	r0, [sp, #12]
 8031034:	aa26      	add	r2, sp, #152	@ 0x98
 8031036:	4659      	mov	r1, fp
 8031038:	f7fd f9e2 	bl	802e400 <__ssprint_r>
 803103c:	f7ff b871 	b.w	8030122 <_svfprintf_r+0x432>
 8031040:	ea56 0207 	orrs.w	r2, r6, r7
 8031044:	9508      	str	r5, [sp, #32]
 8031046:	f43f ab7a 	beq.w	803073e <_svfprintf_r+0xa4e>
 803104a:	2b01      	cmp	r3, #1
 803104c:	f43f abfb 	beq.w	8030846 <_svfprintf_r+0xb56>
 8031050:	2b02      	cmp	r3, #2
 8031052:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8031056:	f43f ac3f 	beq.w	80308d8 <_svfprintf_r+0xbe8>
 803105a:	f006 0307 	and.w	r3, r6, #7
 803105e:	08f6      	lsrs	r6, r6, #3
 8031060:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8031064:	08ff      	lsrs	r7, r7, #3
 8031066:	3330      	adds	r3, #48	@ 0x30
 8031068:	ea56 0107 	orrs.w	r1, r6, r7
 803106c:	464a      	mov	r2, r9
 803106e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8031072:	d1f2      	bne.n	803105a <_svfprintf_r+0x136a>
 8031074:	9908      	ldr	r1, [sp, #32]
 8031076:	07c8      	lsls	r0, r1, #31
 8031078:	d506      	bpl.n	8031088 <_svfprintf_r+0x1398>
 803107a:	2b30      	cmp	r3, #48	@ 0x30
 803107c:	d004      	beq.n	8031088 <_svfprintf_r+0x1398>
 803107e:	2330      	movs	r3, #48	@ 0x30
 8031080:	f809 3c01 	strb.w	r3, [r9, #-1]
 8031084:	f1a2 0902 	sub.w	r9, r2, #2
 8031088:	ab52      	add	r3, sp, #328	@ 0x148
 803108a:	9d08      	ldr	r5, [sp, #32]
 803108c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8031090:	f04f 0a00 	mov.w	sl, #0
 8031094:	eba3 0809 	sub.w	r8, r3, r9
 8031098:	4657      	mov	r7, sl
 803109a:	f8cd a020 	str.w	sl, [sp, #32]
 803109e:	4656      	mov	r6, sl
 80310a0:	f7ff b97c 	b.w	803039c <_svfprintf_r+0x6ac>
 80310a4:	0803ac76 	.word	0x0803ac76
 80310a8:	0803ac86 	.word	0x0803ac86

080310ac <__swhatbuf_r>:
 80310ac:	b570      	push	{r4, r5, r6, lr}
 80310ae:	460c      	mov	r4, r1
 80310b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80310b4:	2900      	cmp	r1, #0
 80310b6:	b096      	sub	sp, #88	@ 0x58
 80310b8:	4615      	mov	r5, r2
 80310ba:	461e      	mov	r6, r3
 80310bc:	da07      	bge.n	80310ce <__swhatbuf_r+0x22>
 80310be:	89a1      	ldrh	r1, [r4, #12]
 80310c0:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80310c4:	d117      	bne.n	80310f6 <__swhatbuf_r+0x4a>
 80310c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80310ca:	4608      	mov	r0, r1
 80310cc:	e00f      	b.n	80310ee <__swhatbuf_r+0x42>
 80310ce:	466a      	mov	r2, sp
 80310d0:	f003 f892 	bl	80341f8 <_fstat_r>
 80310d4:	2800      	cmp	r0, #0
 80310d6:	dbf2      	blt.n	80310be <__swhatbuf_r+0x12>
 80310d8:	9901      	ldr	r1, [sp, #4]
 80310da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80310de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80310e2:	4259      	negs	r1, r3
 80310e4:	4159      	adcs	r1, r3
 80310e6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80310ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80310ee:	6031      	str	r1, [r6, #0]
 80310f0:	602b      	str	r3, [r5, #0]
 80310f2:	b016      	add	sp, #88	@ 0x58
 80310f4:	bd70      	pop	{r4, r5, r6, pc}
 80310f6:	2100      	movs	r1, #0
 80310f8:	2340      	movs	r3, #64	@ 0x40
 80310fa:	e7e6      	b.n	80310ca <__swhatbuf_r+0x1e>

080310fc <__smakebuf_r>:
 80310fc:	898b      	ldrh	r3, [r1, #12]
 80310fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8031100:	079d      	lsls	r5, r3, #30
 8031102:	4606      	mov	r6, r0
 8031104:	460c      	mov	r4, r1
 8031106:	d507      	bpl.n	8031118 <__smakebuf_r+0x1c>
 8031108:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 803110c:	6023      	str	r3, [r4, #0]
 803110e:	6123      	str	r3, [r4, #16]
 8031110:	2301      	movs	r3, #1
 8031112:	6163      	str	r3, [r4, #20]
 8031114:	b003      	add	sp, #12
 8031116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8031118:	ab01      	add	r3, sp, #4
 803111a:	466a      	mov	r2, sp
 803111c:	f7ff ffc6 	bl	80310ac <__swhatbuf_r>
 8031120:	9f00      	ldr	r7, [sp, #0]
 8031122:	4605      	mov	r5, r0
 8031124:	4639      	mov	r1, r7
 8031126:	4630      	mov	r0, r6
 8031128:	f7fc fec0 	bl	802deac <_malloc_r>
 803112c:	b948      	cbnz	r0, 8031142 <__smakebuf_r+0x46>
 803112e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031132:	059a      	lsls	r2, r3, #22
 8031134:	d4ee      	bmi.n	8031114 <__smakebuf_r+0x18>
 8031136:	f023 0303 	bic.w	r3, r3, #3
 803113a:	f043 0302 	orr.w	r3, r3, #2
 803113e:	81a3      	strh	r3, [r4, #12]
 8031140:	e7e2      	b.n	8031108 <__smakebuf_r+0xc>
 8031142:	89a3      	ldrh	r3, [r4, #12]
 8031144:	6020      	str	r0, [r4, #0]
 8031146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803114a:	81a3      	strh	r3, [r4, #12]
 803114c:	9b01      	ldr	r3, [sp, #4]
 803114e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8031152:	b15b      	cbz	r3, 803116c <__smakebuf_r+0x70>
 8031154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031158:	4630      	mov	r0, r6
 803115a:	f003 f85f 	bl	803421c <_isatty_r>
 803115e:	b128      	cbz	r0, 803116c <__smakebuf_r+0x70>
 8031160:	89a3      	ldrh	r3, [r4, #12]
 8031162:	f023 0303 	bic.w	r3, r3, #3
 8031166:	f043 0301 	orr.w	r3, r3, #1
 803116a:	81a3      	strh	r3, [r4, #12]
 803116c:	89a3      	ldrh	r3, [r4, #12]
 803116e:	431d      	orrs	r5, r3
 8031170:	81a5      	strh	r5, [r4, #12]
 8031172:	e7cf      	b.n	8031114 <__smakebuf_r+0x18>

08031174 <__ssvfscanf_r>:
 8031174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031178:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 803117c:	461d      	mov	r5, r3
 803117e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8031182:	af02      	add	r7, sp, #8
 8031184:	049e      	lsls	r6, r3, #18
 8031186:	62b8      	str	r0, [r7, #40]	@ 0x28
 8031188:	460c      	mov	r4, r1
 803118a:	617a      	str	r2, [r7, #20]
 803118c:	d406      	bmi.n	803119c <__ssvfscanf_r+0x28>
 803118e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8031192:	818b      	strh	r3, [r1, #12]
 8031194:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8031196:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803119a:	664b      	str	r3, [r1, #100]	@ 0x64
 803119c:	2300      	movs	r3, #0
 803119e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 80311a2:	61bb      	str	r3, [r7, #24]
 80311a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80311a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80311a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80311aa:	f8d7 8014 	ldr.w	r8, [r7, #20]
 80311ae:	f818 3b01 	ldrb.w	r3, [r8], #1
 80311b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80311b4:	2b00      	cmp	r3, #0
 80311b6:	f000 80d3 	beq.w	8031360 <__ssvfscanf_r+0x1ec>
 80311ba:	4a84      	ldr	r2, [pc, #528]	@ (80313cc <__ssvfscanf_r+0x258>)
 80311bc:	5cd6      	ldrb	r6, [r2, r3]
 80311be:	f016 0608 	ands.w	r6, r6, #8
 80311c2:	d01b      	beq.n	80311fc <__ssvfscanf_r+0x88>
 80311c4:	6863      	ldr	r3, [r4, #4]
 80311c6:	2b00      	cmp	r3, #0
 80311c8:	dd08      	ble.n	80311dc <__ssvfscanf_r+0x68>
 80311ca:	6823      	ldr	r3, [r4, #0]
 80311cc:	497f      	ldr	r1, [pc, #508]	@ (80313cc <__ssvfscanf_r+0x258>)
 80311ce:	781a      	ldrb	r2, [r3, #0]
 80311d0:	5c8a      	ldrb	r2, [r1, r2]
 80311d2:	0710      	lsls	r0, r2, #28
 80311d4:	d409      	bmi.n	80311ea <__ssvfscanf_r+0x76>
 80311d6:	f8c7 8014 	str.w	r8, [r7, #20]
 80311da:	e7e6      	b.n	80311aa <__ssvfscanf_r+0x36>
 80311dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80311de:	4621      	mov	r1, r4
 80311e0:	f7fd fe13 	bl	802ee0a <__ssrefill_r>
 80311e4:	2800      	cmp	r0, #0
 80311e6:	d0f0      	beq.n	80311ca <__ssvfscanf_r+0x56>
 80311e8:	e7f5      	b.n	80311d6 <__ssvfscanf_r+0x62>
 80311ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80311ec:	3201      	adds	r2, #1
 80311ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80311f0:	6862      	ldr	r2, [r4, #4]
 80311f2:	3301      	adds	r3, #1
 80311f4:	3a01      	subs	r2, #1
 80311f6:	6062      	str	r2, [r4, #4]
 80311f8:	6023      	str	r3, [r4, #0]
 80311fa:	e7e3      	b.n	80311c4 <__ssvfscanf_r+0x50>
 80311fc:	2b25      	cmp	r3, #37	@ 0x25
 80311fe:	d163      	bne.n	80312c8 <__ssvfscanf_r+0x154>
 8031200:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8031202:	4642      	mov	r2, r8
 8031204:	f812 3b01 	ldrb.w	r3, [r2], #1
 8031208:	617a      	str	r2, [r7, #20]
 803120a:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 803120e:	2a55      	cmp	r2, #85	@ 0x55
 8031210:	f200 816e 	bhi.w	80314f0 <__ssvfscanf_r+0x37c>
 8031214:	e8df f012 	tbh	[pc, r2, lsl #1]
 8031218:	016c0056 	.word	0x016c0056
 803121c:	016c016c 	.word	0x016c016c
 8031220:	007d016c 	.word	0x007d016c
 8031224:	016c016c 	.word	0x016c016c
 8031228:	016c016c 	.word	0x016c016c
 803122c:	00b9016c 	.word	0x00b9016c
 8031230:	00b900b9 	.word	0x00b900b9
 8031234:	00b900b9 	.word	0x00b900b9
 8031238:	00b900b9 	.word	0x00b900b9
 803123c:	00b900b9 	.word	0x00b900b9
 8031240:	016c00b9 	.word	0x016c00b9
 8031244:	016c016c 	.word	0x016c016c
 8031248:	016c016c 	.word	0x016c016c
 803124c:	016c016c 	.word	0x016c016c
 8031250:	016c00e0 	.word	0x016c00e0
 8031254:	00c3010a 	.word	0x00c3010a
 8031258:	00e000e0 	.word	0x00e000e0
 803125c:	016c00e0 	.word	0x016c00e0
 8031260:	016c016c 	.word	0x016c016c
 8031264:	00a2016c 	.word	0x00a2016c
 8031268:	016c016c 	.word	0x016c016c
 803126c:	016c00c7 	.word	0x016c00c7
 8031270:	016c016c 	.word	0x016c016c
 8031274:	016c00fa 	.word	0x016c00fa
 8031278:	016c016c 	.word	0x016c016c
 803127c:	00d4016c 	.word	0x00d4016c
 8031280:	016c016c 	.word	0x016c016c
 8031284:	016c00ff 	.word	0x016c00ff
 8031288:	016c016c 	.word	0x016c016c
 803128c:	016c016c 	.word	0x016c016c
 8031290:	016c00e0 	.word	0x016c00e0
 8031294:	00c5010c 	.word	0x00c5010c
 8031298:	00e000e0 	.word	0x00e000e0
 803129c:	009400e0 	.word	0x009400e0
 80312a0:	00a20130 	.word	0x00a20130
 80312a4:	0085016c 	.word	0x0085016c
 80312a8:	011400ac 	.word	0x011400ac
 80312ac:	011100c9 	.word	0x011100c9
 80312b0:	016c016c 	.word	0x016c016c
 80312b4:	00a900fc 	.word	0x00a900fc
 80312b8:	016c00d0 	.word	0x016c00d0
 80312bc:	00d4016c 	.word	0x00d4016c
 80312c0:	00a9016c 	.word	0x00a9016c
 80312c4:	f8d7 8014 	ldr.w	r8, [r7, #20]
 80312c8:	6863      	ldr	r3, [r4, #4]
 80312ca:	2b00      	cmp	r3, #0
 80312cc:	dd0e      	ble.n	80312ec <__ssvfscanf_r+0x178>
 80312ce:	6823      	ldr	r3, [r4, #0]
 80312d0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80312d4:	7819      	ldrb	r1, [r3, #0]
 80312d6:	4291      	cmp	r1, r2
 80312d8:	d142      	bne.n	8031360 <__ssvfscanf_r+0x1ec>
 80312da:	3301      	adds	r3, #1
 80312dc:	6862      	ldr	r2, [r4, #4]
 80312de:	6023      	str	r3, [r4, #0]
 80312e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80312e2:	3a01      	subs	r2, #1
 80312e4:	3301      	adds	r3, #1
 80312e6:	6062      	str	r2, [r4, #4]
 80312e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80312ea:	e774      	b.n	80311d6 <__ssvfscanf_r+0x62>
 80312ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80312ee:	4621      	mov	r1, r4
 80312f0:	f7fd fd8b 	bl	802ee0a <__ssrefill_r>
 80312f4:	2800      	cmp	r0, #0
 80312f6:	d0ea      	beq.n	80312ce <__ssvfscanf_r+0x15a>
 80312f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80312fa:	b113      	cbz	r3, 8031302 <__ssvfscanf_r+0x18e>
 80312fc:	89a3      	ldrh	r3, [r4, #12]
 80312fe:	065b      	lsls	r3, r3, #25
 8031300:	d52e      	bpl.n	8031360 <__ssvfscanf_r+0x1ec>
 8031302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031304:	2b00      	cmp	r3, #0
 8031306:	f041 809d 	bne.w	8032444 <__ssvfscanf_r+0x12d0>
 803130a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803130e:	627b      	str	r3, [r7, #36]	@ 0x24
 8031310:	e0f9      	b.n	8031506 <__ssvfscanf_r+0x392>
 8031312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031314:	4333      	orrs	r3, r6
 8031316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031318:	d122      	bne.n	8031360 <__ssvfscanf_r+0x1ec>
 803131a:	2610      	movs	r6, #16
 803131c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8031320:	e76f      	b.n	8031202 <__ssvfscanf_r+0x8e>
 8031322:	0731      	lsls	r1, r6, #28
 8031324:	d11c      	bne.n	8031360 <__ssvfscanf_r+0x1ec>
 8031326:	f898 3001 	ldrb.w	r3, [r8, #1]
 803132a:	2b6c      	cmp	r3, #108	@ 0x6c
 803132c:	d105      	bne.n	803133a <__ssvfscanf_r+0x1c6>
 803132e:	f108 0302 	add.w	r3, r8, #2
 8031332:	617b      	str	r3, [r7, #20]
 8031334:	f046 0602 	orr.w	r6, r6, #2
 8031338:	e7f0      	b.n	803131c <__ssvfscanf_r+0x1a8>
 803133a:	f046 0601 	orr.w	r6, r6, #1
 803133e:	e7ed      	b.n	803131c <__ssvfscanf_r+0x1a8>
 8031340:	0732      	lsls	r2, r6, #28
 8031342:	d10d      	bne.n	8031360 <__ssvfscanf_r+0x1ec>
 8031344:	f898 3001 	ldrb.w	r3, [r8, #1]
 8031348:	2b68      	cmp	r3, #104	@ 0x68
 803134a:	bf03      	ittte	eq
 803134c:	f108 0302 	addeq.w	r3, r8, #2
 8031350:	617b      	streq	r3, [r7, #20]
 8031352:	f046 0608 	orreq.w	r6, r6, #8
 8031356:	f046 0604 	orrne.w	r6, r6, #4
 803135a:	e7df      	b.n	803131c <__ssvfscanf_r+0x1a8>
 803135c:	0733      	lsls	r3, r6, #28
 803135e:	d0e9      	beq.n	8031334 <__ssvfscanf_r+0x1c0>
 8031360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031362:	2b00      	cmp	r3, #0
 8031364:	f000 80cf 	beq.w	8031506 <__ssvfscanf_r+0x392>
 8031368:	e0c8      	b.n	80314fc <__ssvfscanf_r+0x388>
 803136a:	0730      	lsls	r0, r6, #28
 803136c:	d0d6      	beq.n	803131c <__ssvfscanf_r+0x1a8>
 803136e:	e7f7      	b.n	8031360 <__ssvfscanf_r+0x1ec>
 8031370:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8031374:	d1f4      	bne.n	8031360 <__ssvfscanf_r+0x1ec>
 8031376:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8031378:	b922      	cbnz	r2, 8031384 <__ssvfscanf_r+0x210>
 803137a:	b082      	sub	sp, #8
 803137c:	aa02      	add	r2, sp, #8
 803137e:	e9c2 3300 	strd	r3, r3, [r2]
 8031382:	637a      	str	r2, [r7, #52]	@ 0x34
 8031384:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 8031388:	e7c8      	b.n	803131c <__ssvfscanf_r+0x1a8>
 803138a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 803138e:	d1e7      	bne.n	8031360 <__ssvfscanf_r+0x1ec>
 8031390:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8031392:	220a      	movs	r2, #10
 8031394:	fb02 3301 	mla	r3, r2, r1, r3
 8031398:	3b30      	subs	r3, #48	@ 0x30
 803139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803139c:	e7be      	b.n	803131c <__ssvfscanf_r+0x1a8>
 803139e:	f046 0601 	orr.w	r6, r6, #1
 80313a2:	4b0b      	ldr	r3, [pc, #44]	@ (80313d0 <__ssvfscanf_r+0x25c>)
 80313a4:	e009      	b.n	80313ba <__ssvfscanf_r+0x246>
 80313a6:	f046 0601 	orr.w	r6, r6, #1
 80313aa:	4b0a      	ldr	r3, [pc, #40]	@ (80313d4 <__ssvfscanf_r+0x260>)
 80313ac:	61bb      	str	r3, [r7, #24]
 80313ae:	2308      	movs	r3, #8
 80313b0:	61fb      	str	r3, [r7, #28]
 80313b2:	f04f 0803 	mov.w	r8, #3
 80313b6:	e011      	b.n	80313dc <__ssvfscanf_r+0x268>
 80313b8:	4b06      	ldr	r3, [pc, #24]	@ (80313d4 <__ssvfscanf_r+0x260>)
 80313ba:	61bb      	str	r3, [r7, #24]
 80313bc:	230a      	movs	r3, #10
 80313be:	e7f7      	b.n	80313b0 <__ssvfscanf_r+0x23c>
 80313c0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80313c4:	4b03      	ldr	r3, [pc, #12]	@ (80313d4 <__ssvfscanf_r+0x260>)
 80313c6:	61bb      	str	r3, [r7, #24]
 80313c8:	2310      	movs	r3, #16
 80313ca:	e7f1      	b.n	80313b0 <__ssvfscanf_r+0x23c>
 80313cc:	0803aabd 	.word	0x0803aabd
 80313d0:	0802b109 	.word	0x0802b109
 80313d4:	08033f09 	.word	0x08033f09
 80313d8:	f04f 0804 	mov.w	r8, #4
 80313dc:	6863      	ldr	r3, [r4, #4]
 80313de:	2b00      	cmp	r3, #0
 80313e0:	dd4e      	ble.n	8031480 <__ssvfscanf_r+0x30c>
 80313e2:	0673      	lsls	r3, r6, #25
 80313e4:	d407      	bmi.n	80313f6 <__ssvfscanf_r+0x282>
 80313e6:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 80316e4 <__ssvfscanf_r+0x570>
 80313ea:	6823      	ldr	r3, [r4, #0]
 80313ec:	781a      	ldrb	r2, [r3, #0]
 80313ee:	f819 2002 	ldrb.w	r2, [r9, r2]
 80313f2:	0710      	lsls	r0, r2, #28
 80313f4:	d44b      	bmi.n	803148e <__ssvfscanf_r+0x31a>
 80313f6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80313fa:	f1b8 0f03 	cmp.w	r8, #3
 80313fe:	d858      	bhi.n	80314b2 <__ssvfscanf_r+0x33e>
 8031400:	e8df f018 	tbh	[pc, r8, lsl #1]
 8031404:	037801c1 	.word	0x037801c1
 8031408:	05f30514 	.word	0x05f30514
 803140c:	f046 0601 	orr.w	r6, r6, #1
 8031410:	f04f 0802 	mov.w	r8, #2
 8031414:	e7e2      	b.n	80313dc <__ssvfscanf_r+0x268>
 8031416:	6979      	ldr	r1, [r7, #20]
 8031418:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 803141c:	f001 fd1d 	bl	8032e5a <__sccl>
 8031420:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8031424:	6178      	str	r0, [r7, #20]
 8031426:	f04f 0801 	mov.w	r8, #1
 803142a:	e7d7      	b.n	80313dc <__ssvfscanf_r+0x268>
 803142c:	f046 0601 	orr.w	r6, r6, #1
 8031430:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8031434:	f04f 0800 	mov.w	r8, #0
 8031438:	e7d0      	b.n	80313dc <__ssvfscanf_r+0x268>
 803143a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 803143e:	e7c1      	b.n	80313c4 <__ssvfscanf_r+0x250>
 8031440:	06f1      	lsls	r1, r6, #27
 8031442:	f53f aeb2 	bmi.w	80311aa <__ssvfscanf_r+0x36>
 8031446:	0732      	lsls	r2, r6, #28
 8031448:	f855 3b04 	ldr.w	r3, [r5], #4
 803144c:	d502      	bpl.n	8031454 <__ssvfscanf_r+0x2e0>
 803144e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031450:	701a      	strb	r2, [r3, #0]
 8031452:	e6aa      	b.n	80311aa <__ssvfscanf_r+0x36>
 8031454:	0770      	lsls	r0, r6, #29
 8031456:	d502      	bpl.n	803145e <__ssvfscanf_r+0x2ea>
 8031458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803145a:	801a      	strh	r2, [r3, #0]
 803145c:	e6a5      	b.n	80311aa <__ssvfscanf_r+0x36>
 803145e:	07f1      	lsls	r1, r6, #31
 8031460:	d502      	bpl.n	8031468 <__ssvfscanf_r+0x2f4>
 8031462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031464:	601a      	str	r2, [r3, #0]
 8031466:	e6a0      	b.n	80311aa <__ssvfscanf_r+0x36>
 8031468:	07b2      	lsls	r2, r6, #30
 803146a:	d5fa      	bpl.n	8031462 <__ssvfscanf_r+0x2ee>
 803146c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803146e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8031470:	17d2      	asrs	r2, r2, #31
 8031472:	e9c3 1200 	strd	r1, r2, [r3]
 8031476:	e698      	b.n	80311aa <__ssvfscanf_r+0x36>
 8031478:	4b99      	ldr	r3, [pc, #612]	@ (80316e0 <__ssvfscanf_r+0x56c>)
 803147a:	61bb      	str	r3, [r7, #24]
 803147c:	2300      	movs	r3, #0
 803147e:	e797      	b.n	80313b0 <__ssvfscanf_r+0x23c>
 8031480:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031482:	4621      	mov	r1, r4
 8031484:	f7fd fcc1 	bl	802ee0a <__ssrefill_r>
 8031488:	2800      	cmp	r0, #0
 803148a:	d0aa      	beq.n	80313e2 <__ssvfscanf_r+0x26e>
 803148c:	e734      	b.n	80312f8 <__ssvfscanf_r+0x184>
 803148e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031490:	3201      	adds	r2, #1
 8031492:	633a      	str	r2, [r7, #48]	@ 0x30
 8031494:	6862      	ldr	r2, [r4, #4]
 8031496:	3a01      	subs	r2, #1
 8031498:	2a00      	cmp	r2, #0
 803149a:	6062      	str	r2, [r4, #4]
 803149c:	dd02      	ble.n	80314a4 <__ssvfscanf_r+0x330>
 803149e:	3301      	adds	r3, #1
 80314a0:	6023      	str	r3, [r4, #0]
 80314a2:	e7a2      	b.n	80313ea <__ssvfscanf_r+0x276>
 80314a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80314a6:	4621      	mov	r1, r4
 80314a8:	f7fd fcaf 	bl	802ee0a <__ssrefill_r>
 80314ac:	2800      	cmp	r0, #0
 80314ae:	d09c      	beq.n	80313ea <__ssvfscanf_r+0x276>
 80314b0:	e722      	b.n	80312f8 <__ssvfscanf_r+0x184>
 80314b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80314b4:	2b01      	cmp	r3, #1
 80314b6:	bf38      	it	cc
 80314b8:	2301      	movcc	r3, #1
 80314ba:	4698      	mov	r8, r3
 80314bc:	f016 0301 	ands.w	r3, r6, #1
 80314c0:	f006 0b10 	and.w	fp, r6, #16
 80314c4:	f000 80eb 	beq.w	803169e <__ssvfscanf_r+0x52a>
 80314c8:	f1bb 0f00 	cmp.w	fp, #0
 80314cc:	f040 8085 	bne.w	80315da <__ssvfscanf_r+0x466>
 80314d0:	462b      	mov	r3, r5
 80314d2:	0631      	lsls	r1, r6, #24
 80314d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80314d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80314da:	f140 8085 	bpl.w	80315e8 <__ssvfscanf_r+0x474>
 80314de:	b13d      	cbz	r5, 80314f0 <__ssvfscanf_r+0x37c>
 80314e0:	2080      	movs	r0, #128	@ 0x80
 80314e2:	f7fc fcd3 	bl	802de8c <malloc>
 80314e6:	4606      	mov	r6, r0
 80314e8:	b998      	cbnz	r0, 8031512 <__ssvfscanf_r+0x39e>
 80314ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80314ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80314f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80314f2:	b143      	cbz	r3, 8031506 <__ssvfscanf_r+0x392>
 80314f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80314f6:	3301      	adds	r3, #1
 80314f8:	f000 87a4 	beq.w	8032444 <__ssvfscanf_r+0x12d0>
 80314fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80314fe:	6818      	ldr	r0, [r3, #0]
 8031500:	b108      	cbz	r0, 8031506 <__ssvfscanf_r+0x392>
 8031502:	f7fc fccb 	bl	802de9c <free>
 8031506:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031508:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 803150c:	46bd      	mov	sp, r7
 803150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031514:	6028      	str	r0, [r5, #0]
 8031516:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 803151a:	889b      	ldrh	r3, [r3, #4]
 803151c:	4599      	cmp	r9, r3
 803151e:	d314      	bcc.n	803154a <__ssvfscanf_r+0x3d6>
 8031520:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8031524:	4293      	cmp	r3, r2
 8031526:	f200 878d 	bhi.w	8032444 <__ssvfscanf_r+0x12d0>
 803152a:	3308      	adds	r3, #8
 803152c:	fa1f fa83 	uxth.w	sl, r3
 8031530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031532:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8031536:	6818      	ldr	r0, [r3, #0]
 8031538:	f001 fc32 	bl	8032da0 <realloc>
 803153c:	2800      	cmp	r0, #0
 803153e:	f000 8781 	beq.w	8032444 <__ssvfscanf_r+0x12d0>
 8031542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031544:	6018      	str	r0, [r3, #0]
 8031546:	f8a3 a004 	strh.w	sl, [r3, #4]
 803154a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803154c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803154e:	681b      	ldr	r3, [r3, #0]
 8031550:	f109 0201 	add.w	r2, r9, #1
 8031554:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8031558:	46aa      	mov	sl, r5
 803155a:	80ca      	strh	r2, [r1, #6]
 803155c:	4635      	mov	r5, r6
 803155e:	f04f 0920 	mov.w	r9, #32
 8031562:	2200      	movs	r2, #0
 8031564:	613a      	str	r2, [r7, #16]
 8031566:	f7fb fbd3 	bl	802cd10 <__locale_mb_cur_max>
 803156a:	693a      	ldr	r2, [r7, #16]
 803156c:	4290      	cmp	r0, r2
 803156e:	f43f aec3 	beq.w	80312f8 <__ssvfscanf_r+0x184>
 8031572:	6821      	ldr	r1, [r4, #0]
 8031574:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 8031578:	f811 0b01 	ldrb.w	r0, [r1], #1
 803157c:	f80c 0002 	strb.w	r0, [ip, r2]
 8031580:	1c53      	adds	r3, r2, #1
 8031582:	6862      	ldr	r2, [r4, #4]
 8031584:	3a01      	subs	r2, #1
 8031586:	e9c4 1200 	strd	r1, r2, [r4]
 803158a:	6a3a      	ldr	r2, [r7, #32]
 803158c:	2a03      	cmp	r2, #3
 803158e:	d102      	bne.n	8031596 <__ssvfscanf_r+0x422>
 8031590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8031592:	2a04      	cmp	r2, #4
 8031594:	d007      	beq.n	80315a6 <__ssvfscanf_r+0x432>
 8031596:	2208      	movs	r2, #8
 8031598:	2100      	movs	r1, #0
 803159a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 803159e:	623b      	str	r3, [r7, #32]
 80315a0:	f7fa fa2e 	bl	802ba00 <memset>
 80315a4:	6a3b      	ldr	r3, [r7, #32]
 80315a6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80315aa:	9200      	str	r2, [sp, #0]
 80315ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80315ae:	613b      	str	r3, [r7, #16]
 80315b0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80315b4:	4629      	mov	r1, r5
 80315b6:	f002 ffad 	bl	8034514 <_mbrtowc_r>
 80315ba:	1c42      	adds	r2, r0, #1
 80315bc:	6238      	str	r0, [r7, #32]
 80315be:	f43f ae9b 	beq.w	80312f8 <__ssvfscanf_r+0x184>
 80315c2:	693b      	ldr	r3, [r7, #16]
 80315c4:	b9b8      	cbnz	r0, 80315f6 <__ssvfscanf_r+0x482>
 80315c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80315c8:	441a      	add	r2, r3
 80315ca:	4613      	mov	r3, r2
 80315cc:	f1bb 0f00 	cmp.w	fp, #0
 80315d0:	d00e      	beq.n	80315f0 <__ssvfscanf_r+0x47c>
 80315d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80315d4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80315d8:	e019      	b.n	803160e <__ssvfscanf_r+0x49a>
 80315da:	f04f 0900 	mov.w	r9, #0
 80315de:	62fd      	str	r5, [r7, #44]	@ 0x2c
 80315e0:	464e      	mov	r6, r9
 80315e2:	46ca      	mov	sl, r9
 80315e4:	464d      	mov	r5, r9
 80315e6:	e7bc      	b.n	8031562 <__ssvfscanf_r+0x3ee>
 80315e8:	46d9      	mov	r9, fp
 80315ea:	465e      	mov	r6, fp
 80315ec:	46da      	mov	sl, fp
 80315ee:	e7b8      	b.n	8031562 <__ssvfscanf_r+0x3ee>
 80315f0:	f8c5 b000 	str.w	fp, [r5]
 80315f4:	e7ed      	b.n	80315d2 <__ssvfscanf_r+0x45e>
 80315f6:	6a3a      	ldr	r2, [r7, #32]
 80315f8:	3202      	adds	r2, #2
 80315fa:	d025      	beq.n	8031648 <__ssvfscanf_r+0x4d4>
 80315fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80315fe:	441a      	add	r2, r3
 8031600:	6a3b      	ldr	r3, [r7, #32]
 8031602:	633a      	str	r2, [r7, #48]	@ 0x30
 8031604:	2b03      	cmp	r3, #3
 8031606:	d1e5      	bne.n	80315d4 <__ssvfscanf_r+0x460>
 8031608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 803160a:	2b04      	cmp	r3, #4
 803160c:	d1e2      	bne.n	80315d4 <__ssvfscanf_r+0x460>
 803160e:	f1bb 0f00 	cmp.w	fp, #0
 8031612:	d117      	bne.n	8031644 <__ssvfscanf_r+0x4d0>
 8031614:	f1ba 0f00 	cmp.w	sl, #0
 8031618:	d013      	beq.n	8031642 <__ssvfscanf_r+0x4ce>
 803161a:	1bab      	subs	r3, r5, r6
 803161c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8031620:	d80f      	bhi.n	8031642 <__ssvfscanf_r+0x4ce>
 8031622:	4630      	mov	r0, r6
 8031624:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031628:	613b      	str	r3, [r7, #16]
 803162a:	f001 fbb9 	bl	8032da0 <realloc>
 803162e:	4606      	mov	r6, r0
 8031630:	2800      	cmp	r0, #0
 8031632:	f43f af5a 	beq.w	80314ea <__ssvfscanf_r+0x376>
 8031636:	693b      	ldr	r3, [r7, #16]
 8031638:	f8ca 0000 	str.w	r0, [sl]
 803163c:	18c5      	adds	r5, r0, r3
 803163e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8031642:	3504      	adds	r5, #4
 8031644:	2200      	movs	r2, #0
 8031646:	e000      	b.n	803164a <__ssvfscanf_r+0x4d6>
 8031648:	461a      	mov	r2, r3
 803164a:	6863      	ldr	r3, [r4, #4]
 803164c:	2b00      	cmp	r3, #0
 803164e:	dc14      	bgt.n	803167a <__ssvfscanf_r+0x506>
 8031650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031652:	613a      	str	r2, [r7, #16]
 8031654:	4621      	mov	r1, r4
 8031656:	f7fd fbd8 	bl	802ee0a <__ssrefill_r>
 803165a:	693a      	ldr	r2, [r7, #16]
 803165c:	b168      	cbz	r0, 803167a <__ssvfscanf_r+0x506>
 803165e:	2a00      	cmp	r2, #0
 8031660:	f47f ae4a 	bne.w	80312f8 <__ssvfscanf_r+0x184>
 8031664:	f1ba 0f00 	cmp.w	sl, #0
 8031668:	d10c      	bne.n	8031684 <__ssvfscanf_r+0x510>
 803166a:	f1bb 0f00 	cmp.w	fp, #0
 803166e:	d102      	bne.n	8031676 <__ssvfscanf_r+0x502>
 8031670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031672:	3301      	adds	r3, #1
 8031674:	627b      	str	r3, [r7, #36]	@ 0x24
 8031676:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8031678:	e597      	b.n	80311aa <__ssvfscanf_r+0x36>
 803167a:	f1b8 0f00 	cmp.w	r8, #0
 803167e:	f47f af71 	bne.w	8031564 <__ssvfscanf_r+0x3f0>
 8031682:	e7ef      	b.n	8031664 <__ssvfscanf_r+0x4f0>
 8031684:	1ba9      	subs	r1, r5, r6
 8031686:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 803168a:	d9ee      	bls.n	803166a <__ssvfscanf_r+0x4f6>
 803168c:	f8da 0000 	ldr.w	r0, [sl]
 8031690:	f001 fb86 	bl	8032da0 <realloc>
 8031694:	2800      	cmp	r0, #0
 8031696:	d0e8      	beq.n	803166a <__ssvfscanf_r+0x4f6>
 8031698:	f8ca 0000 	str.w	r0, [sl]
 803169c:	e7e5      	b.n	803166a <__ssvfscanf_r+0x4f6>
 803169e:	f1bb 0f00 	cmp.w	fp, #0
 80316a2:	d021      	beq.n	80316e8 <__ssvfscanf_r+0x574>
 80316a4:	461e      	mov	r6, r3
 80316a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80316aa:	4598      	cmp	r8, r3
 80316ac:	dd11      	ble.n	80316d2 <__ssvfscanf_r+0x55e>
 80316ae:	441a      	add	r2, r3
 80316b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80316b2:	6022      	str	r2, [r4, #0]
 80316b4:	4621      	mov	r1, r4
 80316b6:	441e      	add	r6, r3
 80316b8:	eba8 0803 	sub.w	r8, r8, r3
 80316bc:	f7fd fba5 	bl	802ee0a <__ssrefill_r>
 80316c0:	2800      	cmp	r0, #0
 80316c2:	d0f0      	beq.n	80316a6 <__ssvfscanf_r+0x532>
 80316c4:	2e00      	cmp	r6, #0
 80316c6:	f43f ae17 	beq.w	80312f8 <__ssvfscanf_r+0x184>
 80316ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80316cc:	4433      	add	r3, r6
 80316ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80316d0:	e56b      	b.n	80311aa <__ssvfscanf_r+0x36>
 80316d2:	eba3 0308 	sub.w	r3, r3, r8
 80316d6:	4442      	add	r2, r8
 80316d8:	4446      	add	r6, r8
 80316da:	6063      	str	r3, [r4, #4]
 80316dc:	6022      	str	r2, [r4, #0]
 80316de:	e7f4      	b.n	80316ca <__ssvfscanf_r+0x556>
 80316e0:	0802b109 	.word	0x0802b109
 80316e4:	0803aabd 	.word	0x0803aabd
 80316e8:	46a9      	mov	r9, r5
 80316ea:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80316ee:	f859 5b04 	ldr.w	r5, [r9], #4
 80316f2:	d02c      	beq.n	803174e <__ssvfscanf_r+0x5da>
 80316f4:	2d00      	cmp	r5, #0
 80316f6:	f43f ae33 	beq.w	8031360 <__ssvfscanf_r+0x1ec>
 80316fa:	4640      	mov	r0, r8
 80316fc:	f7fc fbc6 	bl	802de8c <malloc>
 8031700:	4682      	mov	sl, r0
 8031702:	2800      	cmp	r0, #0
 8031704:	f43f adfd 	beq.w	8031302 <__ssvfscanf_r+0x18e>
 8031708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803170a:	6028      	str	r0, [r5, #0]
 803170c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8031710:	889e      	ldrh	r6, [r3, #4]
 8031712:	45b3      	cmp	fp, r6
 8031714:	d311      	bcc.n	803173a <__ssvfscanf_r+0x5c6>
 8031716:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803171a:	429e      	cmp	r6, r3
 803171c:	f200 8692 	bhi.w	8032444 <__ssvfscanf_r+0x12d0>
 8031720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031722:	3608      	adds	r6, #8
 8031724:	b2b6      	uxth	r6, r6
 8031726:	6818      	ldr	r0, [r3, #0]
 8031728:	00b1      	lsls	r1, r6, #2
 803172a:	f001 fb39 	bl	8032da0 <realloc>
 803172e:	2800      	cmp	r0, #0
 8031730:	f000 8688 	beq.w	8032444 <__ssvfscanf_r+0x12d0>
 8031734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031736:	6018      	str	r0, [r3, #0]
 8031738:	809e      	strh	r6, [r3, #4]
 803173a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803173c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803173e:	681b      	ldr	r3, [r3, #0]
 8031740:	f10b 0201 	add.w	r2, fp, #1
 8031744:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8031748:	462e      	mov	r6, r5
 803174a:	80ca      	strh	r2, [r1, #6]
 803174c:	4655      	mov	r5, sl
 803174e:	9400      	str	r4, [sp, #0]
 8031750:	4629      	mov	r1, r5
 8031752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031754:	4643      	mov	r3, r8
 8031756:	2201      	movs	r2, #1
 8031758:	f7fd fb74 	bl	802ee44 <_sfread_r>
 803175c:	4605      	mov	r5, r0
 803175e:	2800      	cmp	r0, #0
 8031760:	f43f adca 	beq.w	80312f8 <__ssvfscanf_r+0x184>
 8031764:	b13e      	cbz	r6, 8031776 <__ssvfscanf_r+0x602>
 8031766:	4580      	cmp	r8, r0
 8031768:	d905      	bls.n	8031776 <__ssvfscanf_r+0x602>
 803176a:	4601      	mov	r1, r0
 803176c:	6830      	ldr	r0, [r6, #0]
 803176e:	f001 fb17 	bl	8032da0 <realloc>
 8031772:	b100      	cbz	r0, 8031776 <__ssvfscanf_r+0x602>
 8031774:	6030      	str	r0, [r6, #0]
 8031776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031778:	442b      	add	r3, r5
 803177a:	633b      	str	r3, [r7, #48]	@ 0x30
 803177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803177e:	3301      	adds	r3, #1
 8031780:	627b      	str	r3, [r7, #36]	@ 0x24
 8031782:	464d      	mov	r5, r9
 8031784:	e511      	b.n	80311aa <__ssvfscanf_r+0x36>
 8031786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031788:	2b00      	cmp	r3, #0
 803178a:	bf08      	it	eq
 803178c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8031790:	f016 0801 	ands.w	r8, r6, #1
 8031794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031796:	f006 0a10 	and.w	sl, r6, #16
 803179a:	f000 8101 	beq.w	80319a0 <__ssvfscanf_r+0x82c>
 803179e:	f1ba 0f00 	cmp.w	sl, #0
 80317a2:	f040 80a4 	bne.w	80318ee <__ssvfscanf_r+0x77a>
 80317a6:	462b      	mov	r3, r5
 80317a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80317ac:	60fb      	str	r3, [r7, #12]
 80317ae:	0633      	lsls	r3, r6, #24
 80317b0:	f140 80a5 	bpl.w	80318fe <__ssvfscanf_r+0x78a>
 80317b4:	2d00      	cmp	r5, #0
 80317b6:	f43f ae9b 	beq.w	80314f0 <__ssvfscanf_r+0x37c>
 80317ba:	2080      	movs	r0, #128	@ 0x80
 80317bc:	f7fc fb66 	bl	802de8c <malloc>
 80317c0:	4680      	mov	r8, r0
 80317c2:	2800      	cmp	r0, #0
 80317c4:	f43f ae91 	beq.w	80314ea <__ssvfscanf_r+0x376>
 80317c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80317ca:	6028      	str	r0, [r5, #0]
 80317cc:	88de      	ldrh	r6, [r3, #6]
 80317ce:	889b      	ldrh	r3, [r3, #4]
 80317d0:	429e      	cmp	r6, r3
 80317d2:	d314      	bcc.n	80317fe <__ssvfscanf_r+0x68a>
 80317d4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80317d8:	4293      	cmp	r3, r2
 80317da:	f200 8633 	bhi.w	8032444 <__ssvfscanf_r+0x12d0>
 80317de:	3308      	adds	r3, #8
 80317e0:	fa1f f983 	uxth.w	r9, r3
 80317e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80317e6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80317ea:	6818      	ldr	r0, [r3, #0]
 80317ec:	f001 fad8 	bl	8032da0 <realloc>
 80317f0:	2800      	cmp	r0, #0
 80317f2:	f000 8627 	beq.w	8032444 <__ssvfscanf_r+0x12d0>
 80317f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80317f8:	6018      	str	r0, [r3, #0]
 80317fa:	f8a3 9004 	strh.w	r9, [r3, #4]
 80317fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031800:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031802:	681b      	ldr	r3, [r3, #0]
 8031804:	1c72      	adds	r2, r6, #1
 8031806:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 803180a:	46ab      	mov	fp, r5
 803180c:	80ca      	strh	r2, [r1, #6]
 803180e:	4645      	mov	r5, r8
 8031810:	f04f 0920 	mov.w	r9, #32
 8031814:	2600      	movs	r6, #0
 8031816:	f7fb fa7b 	bl	802cd10 <__locale_mb_cur_max>
 803181a:	42b0      	cmp	r0, r6
 803181c:	f43f ad6c 	beq.w	80312f8 <__ssvfscanf_r+0x184>
 8031820:	1c73      	adds	r3, r6, #1
 8031822:	613b      	str	r3, [r7, #16]
 8031824:	6823      	ldr	r3, [r4, #0]
 8031826:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803182a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803182e:	558a      	strb	r2, [r1, r6]
 8031830:	6862      	ldr	r2, [r4, #4]
 8031832:	3a01      	subs	r2, #1
 8031834:	e9c4 3200 	strd	r3, r2, [r4]
 8031838:	6a3b      	ldr	r3, [r7, #32]
 803183a:	2b03      	cmp	r3, #3
 803183c:	d102      	bne.n	8031844 <__ssvfscanf_r+0x6d0>
 803183e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8031840:	2b04      	cmp	r3, #4
 8031842:	d005      	beq.n	8031850 <__ssvfscanf_r+0x6dc>
 8031844:	2208      	movs	r2, #8
 8031846:	2100      	movs	r1, #0
 8031848:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803184c:	f7fa f8d8 	bl	802ba00 <memset>
 8031850:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8031854:	9300      	str	r3, [sp, #0]
 8031856:	693b      	ldr	r3, [r7, #16]
 8031858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803185a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 803185e:	4629      	mov	r1, r5
 8031860:	f002 fe58 	bl	8034514 <_mbrtowc_r>
 8031864:	1c46      	adds	r6, r0, #1
 8031866:	6238      	str	r0, [r7, #32]
 8031868:	f43f ad46 	beq.w	80312f8 <__ssvfscanf_r+0x184>
 803186c:	2800      	cmp	r0, #0
 803186e:	d14a      	bne.n	8031906 <__ssvfscanf_r+0x792>
 8031870:	6028      	str	r0, [r5, #0]
 8031872:	682e      	ldr	r6, [r5, #0]
 8031874:	1c70      	adds	r0, r6, #1
 8031876:	d056      	beq.n	8031926 <__ssvfscanf_r+0x7b2>
 8031878:	2208      	movs	r2, #8
 803187a:	2100      	movs	r1, #0
 803187c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8031880:	f7fa f8be 	bl	802ba00 <memset>
 8031884:	4b9a      	ldr	r3, [pc, #616]	@ (8031af0 <__ssvfscanf_r+0x97c>)
 8031886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 803188c:	60bb      	str	r3, [r7, #8]
 803188e:	4632      	mov	r2, r6
 8031890:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8031894:	68be      	ldr	r6, [r7, #8]
 8031896:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 803189a:	47b0      	blx	r6
 803189c:	2801      	cmp	r0, #1
 803189e:	d144      	bne.n	803192a <__ssvfscanf_r+0x7b6>
 80318a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80318a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80318a8:	5c9b      	ldrb	r3, [r3, r2]
 80318aa:	2b00      	cmp	r3, #0
 80318ac:	d148      	bne.n	8031940 <__ssvfscanf_r+0x7cc>
 80318ae:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 80318b2:	693b      	ldr	r3, [r7, #16]
 80318b4:	2b00      	cmp	r3, #0
 80318b6:	d13a      	bne.n	803192e <__ssvfscanf_r+0x7ba>
 80318b8:	f1ba 0f00 	cmp.w	sl, #0
 80318bc:	d115      	bne.n	80318ea <__ssvfscanf_r+0x776>
 80318be:	f8c5 a000 	str.w	sl, [r5]
 80318c2:	f1bb 0f00 	cmp.w	fp, #0
 80318c6:	d00d      	beq.n	80318e4 <__ssvfscanf_r+0x770>
 80318c8:	eba5 0108 	sub.w	r1, r5, r8
 80318cc:	108b      	asrs	r3, r1, #2
 80318ce:	3301      	adds	r3, #1
 80318d0:	4599      	cmp	r9, r3
 80318d2:	d907      	bls.n	80318e4 <__ssvfscanf_r+0x770>
 80318d4:	f8db 0000 	ldr.w	r0, [fp]
 80318d8:	3104      	adds	r1, #4
 80318da:	f001 fa61 	bl	8032da0 <realloc>
 80318de:	b108      	cbz	r0, 80318e4 <__ssvfscanf_r+0x770>
 80318e0:	f8cb 0000 	str.w	r0, [fp]
 80318e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80318e6:	3301      	adds	r3, #1
 80318e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80318ea:	68fd      	ldr	r5, [r7, #12]
 80318ec:	e45d      	b.n	80311aa <__ssvfscanf_r+0x36>
 80318ee:	f04f 0900 	mov.w	r9, #0
 80318f2:	60fd      	str	r5, [r7, #12]
 80318f4:	46c8      	mov	r8, r9
 80318f6:	46cb      	mov	fp, r9
 80318f8:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 80318fc:	e78a      	b.n	8031814 <__ssvfscanf_r+0x6a0>
 80318fe:	46d1      	mov	r9, sl
 8031900:	46d0      	mov	r8, sl
 8031902:	46d3      	mov	fp, sl
 8031904:	e786      	b.n	8031814 <__ssvfscanf_r+0x6a0>
 8031906:	6a3b      	ldr	r3, [r7, #32]
 8031908:	3302      	adds	r3, #2
 803190a:	d1b2      	bne.n	8031872 <__ssvfscanf_r+0x6fe>
 803190c:	693e      	ldr	r6, [r7, #16]
 803190e:	6863      	ldr	r3, [r4, #4]
 8031910:	2b00      	cmp	r3, #0
 8031912:	dc40      	bgt.n	8031996 <__ssvfscanf_r+0x822>
 8031914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031916:	4621      	mov	r1, r4
 8031918:	f7fd fa77 	bl	802ee0a <__ssrefill_r>
 803191c:	2800      	cmp	r0, #0
 803191e:	d03a      	beq.n	8031996 <__ssvfscanf_r+0x822>
 8031920:	2e00      	cmp	r6, #0
 8031922:	d0c9      	beq.n	80318b8 <__ssvfscanf_r+0x744>
 8031924:	e4e8      	b.n	80312f8 <__ssvfscanf_r+0x184>
 8031926:	4632      	mov	r2, r6
 8031928:	e7bc      	b.n	80318a4 <__ssvfscanf_r+0x730>
 803192a:	2200      	movs	r2, #0
 803192c:	e7ba      	b.n	80318a4 <__ssvfscanf_r+0x730>
 803192e:	693b      	ldr	r3, [r7, #16]
 8031930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031932:	3b01      	subs	r3, #1
 8031934:	4622      	mov	r2, r4
 8031936:	5cf1      	ldrb	r1, [r6, r3]
 8031938:	613b      	str	r3, [r7, #16]
 803193a:	f7fd fa2b 	bl	802ed94 <_sungetc_r>
 803193e:	e7b8      	b.n	80318b2 <__ssvfscanf_r+0x73e>
 8031940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031942:	693a      	ldr	r2, [r7, #16]
 8031944:	4413      	add	r3, r2
 8031946:	633b      	str	r3, [r7, #48]	@ 0x30
 8031948:	6a3b      	ldr	r3, [r7, #32]
 803194a:	2b03      	cmp	r3, #3
 803194c:	d102      	bne.n	8031954 <__ssvfscanf_r+0x7e0>
 803194e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8031950:	2b04      	cmp	r3, #4
 8031952:	d002      	beq.n	803195a <__ssvfscanf_r+0x7e6>
 8031954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031956:	3b01      	subs	r3, #1
 8031958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803195a:	f1ba 0f00 	cmp.w	sl, #0
 803195e:	d118      	bne.n	8031992 <__ssvfscanf_r+0x81e>
 8031960:	3504      	adds	r5, #4
 8031962:	f1bb 0f00 	cmp.w	fp, #0
 8031966:	d014      	beq.n	8031992 <__ssvfscanf_r+0x81e>
 8031968:	eba5 0608 	sub.w	r6, r5, r8
 803196c:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8031970:	d80d      	bhi.n	803198e <__ssvfscanf_r+0x81a>
 8031972:	4640      	mov	r0, r8
 8031974:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031978:	f001 fa12 	bl	8032da0 <realloc>
 803197c:	4680      	mov	r8, r0
 803197e:	2800      	cmp	r0, #0
 8031980:	f43f adb3 	beq.w	80314ea <__ssvfscanf_r+0x376>
 8031984:	1985      	adds	r5, r0, r6
 8031986:	f8cb 0000 	str.w	r0, [fp]
 803198a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803198e:	4656      	mov	r6, sl
 8031990:	e7bd      	b.n	803190e <__ssvfscanf_r+0x79a>
 8031992:	2600      	movs	r6, #0
 8031994:	e7bb      	b.n	803190e <__ssvfscanf_r+0x79a>
 8031996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031998:	2b00      	cmp	r3, #0
 803199a:	f47f af3c 	bne.w	8031816 <__ssvfscanf_r+0x6a2>
 803199e:	e78b      	b.n	80318b8 <__ssvfscanf_r+0x744>
 80319a0:	f1ba 0f00 	cmp.w	sl, #0
 80319a4:	d01e      	beq.n	80319e4 <__ssvfscanf_r+0x870>
 80319a6:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 80319aa:	6823      	ldr	r3, [r4, #0]
 80319ac:	781a      	ldrb	r2, [r3, #0]
 80319ae:	5cb2      	ldrb	r2, [r6, r2]
 80319b0:	b91a      	cbnz	r2, 80319ba <__ssvfscanf_r+0x846>
 80319b2:	f1b8 0f00 	cmp.w	r8, #0
 80319b6:	d112      	bne.n	80319de <__ssvfscanf_r+0x86a>
 80319b8:	e4d2      	b.n	8031360 <__ssvfscanf_r+0x1ec>
 80319ba:	3301      	adds	r3, #1
 80319bc:	6862      	ldr	r2, [r4, #4]
 80319be:	6023      	str	r3, [r4, #0]
 80319c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80319c2:	f108 0801 	add.w	r8, r8, #1
 80319c6:	3a01      	subs	r2, #1
 80319c8:	4543      	cmp	r3, r8
 80319ca:	6062      	str	r2, [r4, #4]
 80319cc:	d007      	beq.n	80319de <__ssvfscanf_r+0x86a>
 80319ce:	2a00      	cmp	r2, #0
 80319d0:	dceb      	bgt.n	80319aa <__ssvfscanf_r+0x836>
 80319d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80319d4:	4621      	mov	r1, r4
 80319d6:	f7fd fa18 	bl	802ee0a <__ssrefill_r>
 80319da:	2800      	cmp	r0, #0
 80319dc:	d0e5      	beq.n	80319aa <__ssvfscanf_r+0x836>
 80319de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80319e0:	4443      	add	r3, r8
 80319e2:	e674      	b.n	80316ce <__ssvfscanf_r+0x55a>
 80319e4:	46a9      	mov	r9, r5
 80319e6:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80319ea:	f859 8b04 	ldr.w	r8, [r9], #4
 80319ee:	d07d      	beq.n	8031aec <__ssvfscanf_r+0x978>
 80319f0:	f1b8 0f00 	cmp.w	r8, #0
 80319f4:	f43f acb4 	beq.w	8031360 <__ssvfscanf_r+0x1ec>
 80319f8:	2020      	movs	r0, #32
 80319fa:	f7fc fa47 	bl	802de8c <malloc>
 80319fe:	4606      	mov	r6, r0
 8031a00:	2800      	cmp	r0, #0
 8031a02:	f43f ac7e 	beq.w	8031302 <__ssvfscanf_r+0x18e>
 8031a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031a08:	f8c8 0000 	str.w	r0, [r8]
 8031a0c:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8031a10:	889d      	ldrh	r5, [r3, #4]
 8031a12:	45aa      	cmp	sl, r5
 8031a14:	d311      	bcc.n	8031a3a <__ssvfscanf_r+0x8c6>
 8031a16:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8031a1a:	429d      	cmp	r5, r3
 8031a1c:	f200 8512 	bhi.w	8032444 <__ssvfscanf_r+0x12d0>
 8031a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031a22:	3508      	adds	r5, #8
 8031a24:	b2ad      	uxth	r5, r5
 8031a26:	6818      	ldr	r0, [r3, #0]
 8031a28:	00a9      	lsls	r1, r5, #2
 8031a2a:	f001 f9b9 	bl	8032da0 <realloc>
 8031a2e:	2800      	cmp	r0, #0
 8031a30:	f000 8508 	beq.w	8032444 <__ssvfscanf_r+0x12d0>
 8031a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031a36:	6018      	str	r0, [r3, #0]
 8031a38:	809d      	strh	r5, [r3, #4]
 8031a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031a3c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031a3e:	681b      	ldr	r3, [r3, #0]
 8031a40:	f10a 0201 	add.w	r2, sl, #1
 8031a44:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 8031a48:	80ca      	strh	r2, [r1, #6]
 8031a4a:	46c2      	mov	sl, r8
 8031a4c:	46b0      	mov	r8, r6
 8031a4e:	2620      	movs	r6, #32
 8031a50:	4645      	mov	r5, r8
 8031a52:	6823      	ldr	r3, [r4, #0]
 8031a54:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8031a58:	781a      	ldrb	r2, [r3, #0]
 8031a5a:	5c8a      	ldrb	r2, [r1, r2]
 8031a5c:	b35a      	cbz	r2, 8031ab6 <__ssvfscanf_r+0x942>
 8031a5e:	6862      	ldr	r2, [r4, #4]
 8031a60:	3a01      	subs	r2, #1
 8031a62:	6062      	str	r2, [r4, #4]
 8031a64:	1c5a      	adds	r2, r3, #1
 8031a66:	6022      	str	r2, [r4, #0]
 8031a68:	781b      	ldrb	r3, [r3, #0]
 8031a6a:	f808 3b01 	strb.w	r3, [r8], #1
 8031a6e:	f1ba 0f00 	cmp.w	sl, #0
 8031a72:	d010      	beq.n	8031a96 <__ssvfscanf_r+0x922>
 8031a74:	eba8 0b05 	sub.w	fp, r8, r5
 8031a78:	45b3      	cmp	fp, r6
 8031a7a:	d30c      	bcc.n	8031a96 <__ssvfscanf_r+0x922>
 8031a7c:	0076      	lsls	r6, r6, #1
 8031a7e:	4628      	mov	r0, r5
 8031a80:	4631      	mov	r1, r6
 8031a82:	f001 f98d 	bl	8032da0 <realloc>
 8031a86:	4605      	mov	r5, r0
 8031a88:	2800      	cmp	r0, #0
 8031a8a:	f43f ac3a 	beq.w	8031302 <__ssvfscanf_r+0x18e>
 8031a8e:	eb00 080b 	add.w	r8, r0, fp
 8031a92:	f8ca 0000 	str.w	r0, [sl]
 8031a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031a98:	3b01      	subs	r3, #1
 8031a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031a9c:	d00b      	beq.n	8031ab6 <__ssvfscanf_r+0x942>
 8031a9e:	6863      	ldr	r3, [r4, #4]
 8031aa0:	2b00      	cmp	r3, #0
 8031aa2:	dcd6      	bgt.n	8031a52 <__ssvfscanf_r+0x8de>
 8031aa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031aa6:	4621      	mov	r1, r4
 8031aa8:	f7fd f9af 	bl	802ee0a <__ssrefill_r>
 8031aac:	2800      	cmp	r0, #0
 8031aae:	d0d0      	beq.n	8031a52 <__ssvfscanf_r+0x8de>
 8031ab0:	45a8      	cmp	r8, r5
 8031ab2:	f43f ac21 	beq.w	80312f8 <__ssvfscanf_r+0x184>
 8031ab6:	ebb8 0505 	subs.w	r5, r8, r5
 8031aba:	f43f ac51 	beq.w	8031360 <__ssvfscanf_r+0x1ec>
 8031abe:	2300      	movs	r3, #0
 8031ac0:	f888 3000 	strb.w	r3, [r8]
 8031ac4:	f1ba 0f00 	cmp.w	sl, #0
 8031ac8:	d009      	beq.n	8031ade <__ssvfscanf_r+0x96a>
 8031aca:	1c69      	adds	r1, r5, #1
 8031acc:	428e      	cmp	r6, r1
 8031ace:	d906      	bls.n	8031ade <__ssvfscanf_r+0x96a>
 8031ad0:	f8da 0000 	ldr.w	r0, [sl]
 8031ad4:	f001 f964 	bl	8032da0 <realloc>
 8031ad8:	b108      	cbz	r0, 8031ade <__ssvfscanf_r+0x96a>
 8031ada:	f8ca 0000 	str.w	r0, [sl]
 8031ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031ae0:	3301      	adds	r3, #1
 8031ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8031ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031ae6:	442b      	add	r3, r5
 8031ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8031aea:	e64a      	b.n	8031782 <__ssvfscanf_r+0x60e>
 8031aec:	46b2      	mov	sl, r6
 8031aee:	e7af      	b.n	8031a50 <__ssvfscanf_r+0x8dc>
 8031af0:	200000e8 	.word	0x200000e8
 8031af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031af6:	2b00      	cmp	r3, #0
 8031af8:	bf08      	it	eq
 8031afa:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8031afe:	f016 0901 	ands.w	r9, r6, #1
 8031b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031b04:	f006 0810 	and.w	r8, r6, #16
 8031b08:	f000 80ef 	beq.w	8031cea <__ssvfscanf_r+0xb76>
 8031b0c:	f1b8 0f00 	cmp.w	r8, #0
 8031b10:	f040 8098 	bne.w	8031c44 <__ssvfscanf_r+0xad0>
 8031b14:	462b      	mov	r3, r5
 8031b16:	0631      	lsls	r1, r6, #24
 8031b18:	f853 5b04 	ldr.w	r5, [r3], #4
 8031b1c:	613b      	str	r3, [r7, #16]
 8031b1e:	f140 8099 	bpl.w	8031c54 <__ssvfscanf_r+0xae0>
 8031b22:	2d00      	cmp	r5, #0
 8031b24:	f43f ace4 	beq.w	80314f0 <__ssvfscanf_r+0x37c>
 8031b28:	2080      	movs	r0, #128	@ 0x80
 8031b2a:	f7fc f9af 	bl	802de8c <malloc>
 8031b2e:	4606      	mov	r6, r0
 8031b30:	2800      	cmp	r0, #0
 8031b32:	f43f acda 	beq.w	80314ea <__ssvfscanf_r+0x376>
 8031b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b38:	6028      	str	r0, [r5, #0]
 8031b3a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8031b3e:	889b      	ldrh	r3, [r3, #4]
 8031b40:	4599      	cmp	r9, r3
 8031b42:	d314      	bcc.n	8031b6e <__ssvfscanf_r+0x9fa>
 8031b44:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8031b48:	4293      	cmp	r3, r2
 8031b4a:	f200 847b 	bhi.w	8032444 <__ssvfscanf_r+0x12d0>
 8031b4e:	3308      	adds	r3, #8
 8031b50:	fa1f fa83 	uxth.w	sl, r3
 8031b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b56:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8031b5a:	6818      	ldr	r0, [r3, #0]
 8031b5c:	f001 f920 	bl	8032da0 <realloc>
 8031b60:	2800      	cmp	r0, #0
 8031b62:	f000 846f 	beq.w	8032444 <__ssvfscanf_r+0x12d0>
 8031b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b68:	6018      	str	r0, [r3, #0]
 8031b6a:	f8a3 a004 	strh.w	sl, [r3, #4]
 8031b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b70:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031b72:	681b      	ldr	r3, [r3, #0]
 8031b74:	f109 0201 	add.w	r2, r9, #1
 8031b78:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8031b7c:	46aa      	mov	sl, r5
 8031b7e:	80ca      	strh	r2, [r1, #6]
 8031b80:	4635      	mov	r5, r6
 8031b82:	f04f 0920 	mov.w	r9, #32
 8031b86:	2300      	movs	r3, #0
 8031b88:	6822      	ldr	r2, [r4, #0]
 8031b8a:	49a7      	ldr	r1, [pc, #668]	@ (8031e28 <__ssvfscanf_r+0xcb4>)
 8031b8c:	7812      	ldrb	r2, [r2, #0]
 8031b8e:	5c8a      	ldrb	r2, [r1, r2]
 8031b90:	0710      	lsls	r0, r2, #28
 8031b92:	d43c      	bmi.n	8031c0e <__ssvfscanf_r+0xa9a>
 8031b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8031b96:	2a00      	cmp	r2, #0
 8031b98:	d039      	beq.n	8031c0e <__ssvfscanf_r+0xa9a>
 8031b9a:	60fb      	str	r3, [r7, #12]
 8031b9c:	f7fb f8b8 	bl	802cd10 <__locale_mb_cur_max>
 8031ba0:	68fb      	ldr	r3, [r7, #12]
 8031ba2:	4298      	cmp	r0, r3
 8031ba4:	f43f aba8 	beq.w	80312f8 <__ssvfscanf_r+0x184>
 8031ba8:	6822      	ldr	r2, [r4, #0]
 8031baa:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8031bae:	f812 0b01 	ldrb.w	r0, [r2], #1
 8031bb2:	54c8      	strb	r0, [r1, r3]
 8031bb4:	f103 0b01 	add.w	fp, r3, #1
 8031bb8:	6863      	ldr	r3, [r4, #4]
 8031bba:	3b01      	subs	r3, #1
 8031bbc:	e9c4 2300 	strd	r2, r3, [r4]
 8031bc0:	6a3b      	ldr	r3, [r7, #32]
 8031bc2:	2b03      	cmp	r3, #3
 8031bc4:	d102      	bne.n	8031bcc <__ssvfscanf_r+0xa58>
 8031bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8031bc8:	2b04      	cmp	r3, #4
 8031bca:	d005      	beq.n	8031bd8 <__ssvfscanf_r+0xa64>
 8031bcc:	2208      	movs	r2, #8
 8031bce:	2100      	movs	r1, #0
 8031bd0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8031bd4:	f7f9 ff14 	bl	802ba00 <memset>
 8031bd8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8031bdc:	9300      	str	r3, [sp, #0]
 8031bde:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8031be2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031be4:	465b      	mov	r3, fp
 8031be6:	4629      	mov	r1, r5
 8031be8:	f002 fc94 	bl	8034514 <_mbrtowc_r>
 8031bec:	1c42      	adds	r2, r0, #1
 8031bee:	6238      	str	r0, [r7, #32]
 8031bf0:	f43f ab82 	beq.w	80312f8 <__ssvfscanf_r+0x184>
 8031bf4:	bb90      	cbnz	r0, 8031c5c <__ssvfscanf_r+0xae8>
 8031bf6:	6028      	str	r0, [r5, #0]
 8031bf8:	6828      	ldr	r0, [r5, #0]
 8031bfa:	f002 fca5 	bl	8034548 <iswspace>
 8031bfe:	4603      	mov	r3, r0
 8031c00:	2800      	cmp	r0, #0
 8031c02:	d047      	beq.n	8031c94 <__ssvfscanf_r+0xb20>
 8031c04:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8031c08:	f1bb 0f00 	cmp.w	fp, #0
 8031c0c:	d139      	bne.n	8031c82 <__ssvfscanf_r+0xb0e>
 8031c0e:	f1b8 0f00 	cmp.w	r8, #0
 8031c12:	d114      	bne.n	8031c3e <__ssvfscanf_r+0xaca>
 8031c14:	f8c5 8000 	str.w	r8, [r5]
 8031c18:	f1ba 0f00 	cmp.w	sl, #0
 8031c1c:	d00c      	beq.n	8031c38 <__ssvfscanf_r+0xac4>
 8031c1e:	1ba9      	subs	r1, r5, r6
 8031c20:	108b      	asrs	r3, r1, #2
 8031c22:	3301      	adds	r3, #1
 8031c24:	4599      	cmp	r9, r3
 8031c26:	d907      	bls.n	8031c38 <__ssvfscanf_r+0xac4>
 8031c28:	f8da 0000 	ldr.w	r0, [sl]
 8031c2c:	3104      	adds	r1, #4
 8031c2e:	f001 f8b7 	bl	8032da0 <realloc>
 8031c32:	b108      	cbz	r0, 8031c38 <__ssvfscanf_r+0xac4>
 8031c34:	f8ca 0000 	str.w	r0, [sl]
 8031c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031c3a:	3301      	adds	r3, #1
 8031c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8031c3e:	693d      	ldr	r5, [r7, #16]
 8031c40:	f7ff bab3 	b.w	80311aa <__ssvfscanf_r+0x36>
 8031c44:	f04f 0900 	mov.w	r9, #0
 8031c48:	613d      	str	r5, [r7, #16]
 8031c4a:	464e      	mov	r6, r9
 8031c4c:	46ca      	mov	sl, r9
 8031c4e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8031c52:	e798      	b.n	8031b86 <__ssvfscanf_r+0xa12>
 8031c54:	46c1      	mov	r9, r8
 8031c56:	4646      	mov	r6, r8
 8031c58:	46c2      	mov	sl, r8
 8031c5a:	e794      	b.n	8031b86 <__ssvfscanf_r+0xa12>
 8031c5c:	6a3b      	ldr	r3, [r7, #32]
 8031c5e:	3302      	adds	r3, #2
 8031c60:	d1ca      	bne.n	8031bf8 <__ssvfscanf_r+0xa84>
 8031c62:	465b      	mov	r3, fp
 8031c64:	6862      	ldr	r2, [r4, #4]
 8031c66:	2a00      	cmp	r2, #0
 8031c68:	dc8e      	bgt.n	8031b88 <__ssvfscanf_r+0xa14>
 8031c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031c6c:	60fb      	str	r3, [r7, #12]
 8031c6e:	4621      	mov	r1, r4
 8031c70:	f7fd f8cb 	bl	802ee0a <__ssrefill_r>
 8031c74:	68fb      	ldr	r3, [r7, #12]
 8031c76:	2800      	cmp	r0, #0
 8031c78:	d086      	beq.n	8031b88 <__ssvfscanf_r+0xa14>
 8031c7a:	2b00      	cmp	r3, #0
 8031c7c:	f47f ab3c 	bne.w	80312f8 <__ssvfscanf_r+0x184>
 8031c80:	e7c5      	b.n	8031c0e <__ssvfscanf_r+0xa9a>
 8031c82:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8031c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031c88:	f813 100b 	ldrb.w	r1, [r3, fp]
 8031c8c:	4622      	mov	r2, r4
 8031c8e:	f7fd f881 	bl	802ed94 <_sungetc_r>
 8031c92:	e7b7      	b.n	8031c04 <__ssvfscanf_r+0xa90>
 8031c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031c96:	445a      	add	r2, fp
 8031c98:	633a      	str	r2, [r7, #48]	@ 0x30
 8031c9a:	6a3a      	ldr	r2, [r7, #32]
 8031c9c:	2a03      	cmp	r2, #3
 8031c9e:	d102      	bne.n	8031ca6 <__ssvfscanf_r+0xb32>
 8031ca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8031ca2:	2a04      	cmp	r2, #4
 8031ca4:	d002      	beq.n	8031cac <__ssvfscanf_r+0xb38>
 8031ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8031ca8:	3a01      	subs	r2, #1
 8031caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8031cac:	f1b8 0f00 	cmp.w	r8, #0
 8031cb0:	d1d8      	bne.n	8031c64 <__ssvfscanf_r+0xaf0>
 8031cb2:	3504      	adds	r5, #4
 8031cb4:	f1ba 0f00 	cmp.w	sl, #0
 8031cb8:	d015      	beq.n	8031ce6 <__ssvfscanf_r+0xb72>
 8031cba:	eba5 0b06 	sub.w	fp, r5, r6
 8031cbe:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 8031cc2:	d80e      	bhi.n	8031ce2 <__ssvfscanf_r+0xb6e>
 8031cc4:	4630      	mov	r0, r6
 8031cc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031cca:	f001 f869 	bl	8032da0 <realloc>
 8031cce:	4606      	mov	r6, r0
 8031cd0:	2800      	cmp	r0, #0
 8031cd2:	f43f ac0a 	beq.w	80314ea <__ssvfscanf_r+0x376>
 8031cd6:	eb00 050b 	add.w	r5, r0, fp
 8031cda:	f8ca 0000 	str.w	r0, [sl]
 8031cde:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8031ce2:	4643      	mov	r3, r8
 8031ce4:	e7be      	b.n	8031c64 <__ssvfscanf_r+0xaf0>
 8031ce6:	4653      	mov	r3, sl
 8031ce8:	e7bc      	b.n	8031c64 <__ssvfscanf_r+0xaf0>
 8031cea:	f1b8 0f00 	cmp.w	r8, #0
 8031cee:	d01a      	beq.n	8031d26 <__ssvfscanf_r+0xbb2>
 8031cf0:	4e4d      	ldr	r6, [pc, #308]	@ (8031e28 <__ssvfscanf_r+0xcb4>)
 8031cf2:	6823      	ldr	r3, [r4, #0]
 8031cf4:	781a      	ldrb	r2, [r3, #0]
 8031cf6:	5cb2      	ldrb	r2, [r6, r2]
 8031cf8:	0711      	lsls	r1, r2, #28
 8031cfa:	d411      	bmi.n	8031d20 <__ssvfscanf_r+0xbac>
 8031cfc:	3301      	adds	r3, #1
 8031cfe:	6862      	ldr	r2, [r4, #4]
 8031d00:	6023      	str	r3, [r4, #0]
 8031d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031d04:	f109 0901 	add.w	r9, r9, #1
 8031d08:	3a01      	subs	r2, #1
 8031d0a:	454b      	cmp	r3, r9
 8031d0c:	6062      	str	r2, [r4, #4]
 8031d0e:	d007      	beq.n	8031d20 <__ssvfscanf_r+0xbac>
 8031d10:	2a00      	cmp	r2, #0
 8031d12:	dcee      	bgt.n	8031cf2 <__ssvfscanf_r+0xb7e>
 8031d14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031d16:	4621      	mov	r1, r4
 8031d18:	f7fd f877 	bl	802ee0a <__ssrefill_r>
 8031d1c:	2800      	cmp	r0, #0
 8031d1e:	d0e8      	beq.n	8031cf2 <__ssvfscanf_r+0xb7e>
 8031d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031d22:	444b      	add	r3, r9
 8031d24:	e4d3      	b.n	80316ce <__ssvfscanf_r+0x55a>
 8031d26:	46a8      	mov	r8, r5
 8031d28:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8031d2c:	f858 5b04 	ldr.w	r5, [r8], #4
 8031d30:	d077      	beq.n	8031e22 <__ssvfscanf_r+0xcae>
 8031d32:	2d00      	cmp	r5, #0
 8031d34:	f43f ab14 	beq.w	8031360 <__ssvfscanf_r+0x1ec>
 8031d38:	2020      	movs	r0, #32
 8031d3a:	f7fc f8a7 	bl	802de8c <malloc>
 8031d3e:	4681      	mov	r9, r0
 8031d40:	2800      	cmp	r0, #0
 8031d42:	f43f aade 	beq.w	8031302 <__ssvfscanf_r+0x18e>
 8031d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d48:	6028      	str	r0, [r5, #0]
 8031d4a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8031d4e:	889e      	ldrh	r6, [r3, #4]
 8031d50:	45b2      	cmp	sl, r6
 8031d52:	d311      	bcc.n	8031d78 <__ssvfscanf_r+0xc04>
 8031d54:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8031d58:	429e      	cmp	r6, r3
 8031d5a:	f200 8373 	bhi.w	8032444 <__ssvfscanf_r+0x12d0>
 8031d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d60:	3608      	adds	r6, #8
 8031d62:	b2b6      	uxth	r6, r6
 8031d64:	6818      	ldr	r0, [r3, #0]
 8031d66:	00b1      	lsls	r1, r6, #2
 8031d68:	f001 f81a 	bl	8032da0 <realloc>
 8031d6c:	2800      	cmp	r0, #0
 8031d6e:	f000 8369 	beq.w	8032444 <__ssvfscanf_r+0x12d0>
 8031d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d74:	6018      	str	r0, [r3, #0]
 8031d76:	809e      	strh	r6, [r3, #4]
 8031d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031d7c:	681b      	ldr	r3, [r3, #0]
 8031d7e:	f10a 0201 	add.w	r2, sl, #1
 8031d82:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8031d86:	80ca      	strh	r2, [r1, #6]
 8031d88:	46aa      	mov	sl, r5
 8031d8a:	2620      	movs	r6, #32
 8031d8c:	464d      	mov	r5, r9
 8031d8e:	46a9      	mov	r9, r5
 8031d90:	6823      	ldr	r3, [r4, #0]
 8031d92:	4925      	ldr	r1, [pc, #148]	@ (8031e28 <__ssvfscanf_r+0xcb4>)
 8031d94:	781a      	ldrb	r2, [r3, #0]
 8031d96:	5c8a      	ldrb	r2, [r1, r2]
 8031d98:	0712      	lsls	r2, r2, #28
 8031d9a:	d428      	bmi.n	8031dee <__ssvfscanf_r+0xc7a>
 8031d9c:	6862      	ldr	r2, [r4, #4]
 8031d9e:	3a01      	subs	r2, #1
 8031da0:	6062      	str	r2, [r4, #4]
 8031da2:	1c5a      	adds	r2, r3, #1
 8031da4:	6022      	str	r2, [r4, #0]
 8031da6:	781b      	ldrb	r3, [r3, #0]
 8031da8:	f805 3b01 	strb.w	r3, [r5], #1
 8031dac:	f1ba 0f00 	cmp.w	sl, #0
 8031db0:	d010      	beq.n	8031dd4 <__ssvfscanf_r+0xc60>
 8031db2:	eba5 0b09 	sub.w	fp, r5, r9
 8031db6:	45b3      	cmp	fp, r6
 8031db8:	d30c      	bcc.n	8031dd4 <__ssvfscanf_r+0xc60>
 8031dba:	0076      	lsls	r6, r6, #1
 8031dbc:	4648      	mov	r0, r9
 8031dbe:	4631      	mov	r1, r6
 8031dc0:	f000 ffee 	bl	8032da0 <realloc>
 8031dc4:	4681      	mov	r9, r0
 8031dc6:	2800      	cmp	r0, #0
 8031dc8:	f43f aa9b 	beq.w	8031302 <__ssvfscanf_r+0x18e>
 8031dcc:	eb00 050b 	add.w	r5, r0, fp
 8031dd0:	f8ca 0000 	str.w	r0, [sl]
 8031dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031dd6:	3b01      	subs	r3, #1
 8031dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031dda:	d008      	beq.n	8031dee <__ssvfscanf_r+0xc7a>
 8031ddc:	6863      	ldr	r3, [r4, #4]
 8031dde:	2b00      	cmp	r3, #0
 8031de0:	dcd6      	bgt.n	8031d90 <__ssvfscanf_r+0xc1c>
 8031de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031de4:	4621      	mov	r1, r4
 8031de6:	f7fd f810 	bl	802ee0a <__ssrefill_r>
 8031dea:	2800      	cmp	r0, #0
 8031dec:	d0d0      	beq.n	8031d90 <__ssvfscanf_r+0xc1c>
 8031dee:	2300      	movs	r3, #0
 8031df0:	702b      	strb	r3, [r5, #0]
 8031df2:	eba5 0509 	sub.w	r5, r5, r9
 8031df6:	f1ba 0f00 	cmp.w	sl, #0
 8031dfa:	d009      	beq.n	8031e10 <__ssvfscanf_r+0xc9c>
 8031dfc:	1c69      	adds	r1, r5, #1
 8031dfe:	428e      	cmp	r6, r1
 8031e00:	d906      	bls.n	8031e10 <__ssvfscanf_r+0xc9c>
 8031e02:	f8da 0000 	ldr.w	r0, [sl]
 8031e06:	f000 ffcb 	bl	8032da0 <realloc>
 8031e0a:	b108      	cbz	r0, 8031e10 <__ssvfscanf_r+0xc9c>
 8031e0c:	f8ca 0000 	str.w	r0, [sl]
 8031e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031e12:	442b      	add	r3, r5
 8031e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8031e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031e18:	3301      	adds	r3, #1
 8031e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8031e1c:	4645      	mov	r5, r8
 8031e1e:	f7ff b9c4 	b.w	80311aa <__ssvfscanf_r+0x36>
 8031e22:	46b2      	mov	sl, r6
 8031e24:	e7b3      	b.n	8031d8e <__ssvfscanf_r+0xc1a>
 8031e26:	bf00      	nop
 8031e28:	0803aabd 	.word	0x0803aabd
 8031e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031e2e:	3b01      	subs	r3, #1
 8031e30:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8031e34:	bf81      	itttt	hi
 8031e36:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8031e38:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 8031e3c:	eb03 090c 	addhi.w	r9, r3, ip
 8031e40:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8031e44:	bf8c      	ite	hi
 8031e46:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 8031e48:	f04f 0900 	movls.w	r9, #0
 8031e4c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 8031e50:	f04f 0a00 	mov.w	sl, #0
 8031e54:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 8031e58:	6822      	ldr	r2, [r4, #0]
 8031e5a:	7813      	ldrb	r3, [r2, #0]
 8031e5c:	2b39      	cmp	r3, #57	@ 0x39
 8031e5e:	d80f      	bhi.n	8031e80 <__ssvfscanf_r+0xd0c>
 8031e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8031e62:	d91a      	bls.n	8031e9a <__ssvfscanf_r+0xd26>
 8031e64:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8031e68:	290e      	cmp	r1, #14
 8031e6a:	d816      	bhi.n	8031e9a <__ssvfscanf_r+0xd26>
 8031e6c:	e8df f001 	tbb	[pc, r1]
 8031e70:	15781578 	.word	0x15781578
 8031e74:	68683f15 	.word	0x68683f15
 8031e78:	68686868 	.word	0x68686868
 8031e7c:	7068      	.short	0x7068
 8031e7e:	70          	.byte	0x70
 8031e7f:	00          	.byte	0x00
 8031e80:	2b66      	cmp	r3, #102	@ 0x66
 8031e82:	d832      	bhi.n	8031eea <__ssvfscanf_r+0xd76>
 8031e84:	2b60      	cmp	r3, #96	@ 0x60
 8031e86:	d803      	bhi.n	8031e90 <__ssvfscanf_r+0xd1c>
 8031e88:	2b46      	cmp	r3, #70	@ 0x46
 8031e8a:	d804      	bhi.n	8031e96 <__ssvfscanf_r+0xd22>
 8031e8c:	2b40      	cmp	r3, #64	@ 0x40
 8031e8e:	d904      	bls.n	8031e9a <__ssvfscanf_r+0xd26>
 8031e90:	69f9      	ldr	r1, [r7, #28]
 8031e92:	290a      	cmp	r1, #10
 8031e94:	e062      	b.n	8031f5c <__ssvfscanf_r+0xde8>
 8031e96:	2b58      	cmp	r3, #88	@ 0x58
 8031e98:	d068      	beq.n	8031f6c <__ssvfscanf_r+0xdf8>
 8031e9a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8031e9e:	d011      	beq.n	8031ec4 <__ssvfscanf_r+0xd50>
 8031ea0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8031ea4:	4598      	cmp	r8, r3
 8031ea6:	d908      	bls.n	8031eba <__ssvfscanf_r+0xd46>
 8031ea8:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8031eac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031eae:	4622      	mov	r2, r4
 8031eb0:	f7fc ff70 	bl	802ed94 <_sungetc_r>
 8031eb4:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 8031eb8:	46c8      	mov	r8, r9
 8031eba:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8031ebe:	4598      	cmp	r8, r3
 8031ec0:	f43f aa4e 	beq.w	8031360 <__ssvfscanf_r+0x1ec>
 8031ec4:	f01b 0210 	ands.w	r2, fp, #16
 8031ec8:	d16c      	bne.n	8031fa4 <__ssvfscanf_r+0xe30>
 8031eca:	69fb      	ldr	r3, [r7, #28]
 8031ecc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031ece:	69be      	ldr	r6, [r7, #24]
 8031ed0:	f888 2000 	strb.w	r2, [r8]
 8031ed4:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8031ed8:	47b0      	blx	r6
 8031eda:	f01b 0f20 	tst.w	fp, #32
 8031ede:	f105 0904 	add.w	r9, r5, #4
 8031ee2:	d056      	beq.n	8031f92 <__ssvfscanf_r+0xe1e>
 8031ee4:	682b      	ldr	r3, [r5, #0]
 8031ee6:	6018      	str	r0, [r3, #0]
 8031ee8:	e058      	b.n	8031f9c <__ssvfscanf_r+0xe28>
 8031eea:	2b78      	cmp	r3, #120	@ 0x78
 8031eec:	e7d4      	b.n	8031e98 <__ssvfscanf_r+0xd24>
 8031eee:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8031ef2:	d00a      	beq.n	8031f0a <__ssvfscanf_r+0xd96>
 8031ef4:	69f9      	ldr	r1, [r7, #28]
 8031ef6:	b919      	cbnz	r1, 8031f00 <__ssvfscanf_r+0xd8c>
 8031ef8:	2108      	movs	r1, #8
 8031efa:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 8031efe:	61f9      	str	r1, [r7, #28]
 8031f00:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8031f04:	d004      	beq.n	8031f10 <__ssvfscanf_r+0xd9c>
 8031f06:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 8031f0a:	f808 3b01 	strb.w	r3, [r8], #1
 8031f0e:	e00b      	b.n	8031f28 <__ssvfscanf_r+0xdb4>
 8031f10:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8031f14:	f1b9 0f00 	cmp.w	r9, #0
 8031f18:	d004      	beq.n	8031f24 <__ssvfscanf_r+0xdb0>
 8031f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031f1c:	3301      	adds	r3, #1
 8031f1e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8031f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031f24:	f10a 0a01 	add.w	sl, sl, #1
 8031f28:	6863      	ldr	r3, [r4, #4]
 8031f2a:	3b01      	subs	r3, #1
 8031f2c:	2b00      	cmp	r3, #0
 8031f2e:	6063      	str	r3, [r4, #4]
 8031f30:	dd28      	ble.n	8031f84 <__ssvfscanf_r+0xe10>
 8031f32:	3201      	adds	r2, #1
 8031f34:	6022      	str	r2, [r4, #0]
 8031f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031f38:	3b01      	subs	r3, #1
 8031f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031f3c:	d18c      	bne.n	8031e58 <__ssvfscanf_r+0xce4>
 8031f3e:	e7ac      	b.n	8031e9a <__ssvfscanf_r+0xd26>
 8031f40:	69f8      	ldr	r0, [r7, #28]
 8031f42:	499b      	ldr	r1, [pc, #620]	@ (80321b0 <__ssvfscanf_r+0x103c>)
 8031f44:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8031f48:	61f9      	str	r1, [r7, #28]
 8031f4a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 8031f4e:	e7dc      	b.n	8031f0a <__ssvfscanf_r+0xd96>
 8031f50:	69f8      	ldr	r0, [r7, #28]
 8031f52:	4997      	ldr	r1, [pc, #604]	@ (80321b0 <__ssvfscanf_r+0x103c>)
 8031f54:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8031f58:	61f9      	str	r1, [r7, #28]
 8031f5a:	2908      	cmp	r1, #8
 8031f5c:	dcf5      	bgt.n	8031f4a <__ssvfscanf_r+0xdd6>
 8031f5e:	e79c      	b.n	8031e9a <__ssvfscanf_r+0xd26>
 8031f60:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8031f64:	d099      	beq.n	8031e9a <__ssvfscanf_r+0xd26>
 8031f66:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 8031f6a:	e7ce      	b.n	8031f0a <__ssvfscanf_r+0xd96>
 8031f6c:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 8031f70:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8031f74:	d191      	bne.n	8031e9a <__ssvfscanf_r+0xd26>
 8031f76:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 8031f7a:	2110      	movs	r1, #16
 8031f7c:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8031f80:	61f9      	str	r1, [r7, #28]
 8031f82:	e7c2      	b.n	8031f0a <__ssvfscanf_r+0xd96>
 8031f84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031f86:	4621      	mov	r1, r4
 8031f88:	f7fc ff3f 	bl	802ee0a <__ssrefill_r>
 8031f8c:	2800      	cmp	r0, #0
 8031f8e:	d0d2      	beq.n	8031f36 <__ssvfscanf_r+0xdc2>
 8031f90:	e783      	b.n	8031e9a <__ssvfscanf_r+0xd26>
 8031f92:	f01b 0f08 	tst.w	fp, #8
 8031f96:	d00b      	beq.n	8031fb0 <__ssvfscanf_r+0xe3c>
 8031f98:	682b      	ldr	r3, [r5, #0]
 8031f9a:	7018      	strb	r0, [r3, #0]
 8031f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031f9e:	3301      	adds	r3, #1
 8031fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8031fa2:	464d      	mov	r5, r9
 8031fa4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8031fa8:	eba8 0803 	sub.w	r8, r8, r3
 8031fac:	44d0      	add	r8, sl
 8031fae:	e516      	b.n	80319de <__ssvfscanf_r+0x86a>
 8031fb0:	f01b 0f04 	tst.w	fp, #4
 8031fb4:	d002      	beq.n	8031fbc <__ssvfscanf_r+0xe48>
 8031fb6:	682b      	ldr	r3, [r5, #0]
 8031fb8:	8018      	strh	r0, [r3, #0]
 8031fba:	e7ef      	b.n	8031f9c <__ssvfscanf_r+0xe28>
 8031fbc:	f01b 0201 	ands.w	r2, fp, #1
 8031fc0:	d190      	bne.n	8031ee4 <__ssvfscanf_r+0xd70>
 8031fc2:	f01b 0f02 	tst.w	fp, #2
 8031fc6:	d08d      	beq.n	8031ee4 <__ssvfscanf_r+0xd70>
 8031fc8:	4b7a      	ldr	r3, [pc, #488]	@ (80321b4 <__ssvfscanf_r+0x1040>)
 8031fca:	69b9      	ldr	r1, [r7, #24]
 8031fcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031fce:	4299      	cmp	r1, r3
 8031fd0:	69fb      	ldr	r3, [r7, #28]
 8031fd2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8031fd6:	d105      	bne.n	8031fe4 <__ssvfscanf_r+0xe70>
 8031fd8:	f002 fa9a 	bl	8034510 <_strtoull_r>
 8031fdc:	682b      	ldr	r3, [r5, #0]
 8031fde:	e9c3 0100 	strd	r0, r1, [r3]
 8031fe2:	e7db      	b.n	8031f9c <__ssvfscanf_r+0xe28>
 8031fe4:	f002 f9e8 	bl	80343b8 <_strtoll_r>
 8031fe8:	e7f8      	b.n	8031fdc <__ssvfscanf_r+0xe68>
 8031fea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031fec:	f7fa fe96 	bl	802cd1c <_localeconv_r>
 8031ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031ff2:	6802      	ldr	r2, [r0, #0]
 8031ff4:	3b01      	subs	r3, #1
 8031ff6:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8031ffa:	f04f 0800 	mov.w	r8, #0
 8031ffe:	bf88      	it	hi
 8032000:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8032002:	f8c7 8010 	str.w	r8, [r7, #16]
 8032006:	e9c7 8802 	strd	r8, r8, [r7, #8]
 803200a:	bf81      	itttt	hi
 803200c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8032010:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8032014:	181b      	addhi	r3, r3, r0
 8032016:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8032018:	bf98      	it	ls
 803201a:	2300      	movls	r3, #0
 803201c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8032020:	46c3      	mov	fp, r8
 8032022:	46c2      	mov	sl, r8
 8032024:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8032028:	6821      	ldr	r1, [r4, #0]
 803202a:	6079      	str	r1, [r7, #4]
 803202c:	7808      	ldrb	r0, [r1, #0]
 803202e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 8032032:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 8032036:	f200 8123 	bhi.w	8032280 <__ssvfscanf_r+0x110c>
 803203a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 803203e:	0089      	.short	0x0089
 8032040:	00890121 	.word	0x00890121
 8032044:	01210121 	.word	0x01210121
 8032048:	006f004f 	.word	0x006f004f
 803204c:	006f006f 	.word	0x006f006f
 8032050:	006f006f 	.word	0x006f006f
 8032054:	006f006f 	.word	0x006f006f
 8032058:	006f006f 	.word	0x006f006f
 803205c:	01210121 	.word	0x01210121
 8032060:	01210121 	.word	0x01210121
 8032064:	01210121 	.word	0x01210121
 8032068:	00af0121 	.word	0x00af0121
 803206c:	006d006d 	.word	0x006d006d
 8032070:	011e006d 	.word	0x011e006d
 8032074:	012100ed 	.word	0x012100ed
 8032078:	00d60121 	.word	0x00d60121
 803207c:	01210121 	.word	0x01210121
 8032080:	01210121 	.word	0x01210121
 8032084:	01210090 	.word	0x01210090
 8032088:	01210104 	.word	0x01210104
 803208c:	01210121 	.word	0x01210121
 8032090:	012100f8 	.word	0x012100f8
 8032094:	01210121 	.word	0x01210121
 8032098:	00fe0073 	.word	0x00fe0073
 803209c:	01210121 	.word	0x01210121
 80320a0:	01210121 	.word	0x01210121
 80320a4:	01210121 	.word	0x01210121
 80320a8:	00af0121 	.word	0x00af0121
 80320ac:	006d006d 	.word	0x006d006d
 80320b0:	011e006d 	.word	0x011e006d
 80320b4:	012100ed 	.word	0x012100ed
 80320b8:	00d60121 	.word	0x00d60121
 80320bc:	01210121 	.word	0x01210121
 80320c0:	01210121 	.word	0x01210121
 80320c4:	01210090 	.word	0x01210090
 80320c8:	01210104 	.word	0x01210104
 80320cc:	01210121 	.word	0x01210121
 80320d0:	012100f8 	.word	0x012100f8
 80320d4:	01210121 	.word	0x01210121
 80320d8:	00fe0073 	.word	0x00fe0073
 80320dc:	05f1      	lsls	r1, r6, #23
 80320de:	d51d      	bpl.n	803211c <__ssvfscanf_r+0xfa8>
 80320e0:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80320e4:	f10a 0a01 	add.w	sl, sl, #1
 80320e8:	b11b      	cbz	r3, 80320f2 <__ssvfscanf_r+0xf7e>
 80320ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80320ec:	3001      	adds	r0, #1
 80320ee:	3b01      	subs	r3, #1
 80320f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80320f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80320f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80320f6:	3001      	adds	r0, #1
 80320f8:	6338      	str	r0, [r7, #48]	@ 0x30
 80320fa:	6860      	ldr	r0, [r4, #4]
 80320fc:	3801      	subs	r0, #1
 80320fe:	3901      	subs	r1, #1
 8032100:	2800      	cmp	r0, #0
 8032102:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8032104:	6060      	str	r0, [r4, #4]
 8032106:	f340 80cc 	ble.w	80322a2 <__ssvfscanf_r+0x112e>
 803210a:	6879      	ldr	r1, [r7, #4]
 803210c:	3101      	adds	r1, #1
 803210e:	6021      	str	r1, [r4, #0]
 8032110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032112:	2900      	cmp	r1, #0
 8032114:	d188      	bne.n	8032028 <__ssvfscanf_r+0xeb4>
 8032116:	e052      	b.n	80321be <__ssvfscanf_r+0x104a>
 8032118:	0531      	lsls	r1, r6, #20
 803211a:	d550      	bpl.n	80321be <__ssvfscanf_r+0x104a>
 803211c:	eb1b 0c08 	adds.w	ip, fp, r8
 8032120:	d041      	beq.n	80321a6 <__ssvfscanf_r+0x1032>
 8032122:	e04c      	b.n	80321be <__ssvfscanf_r+0x104a>
 8032124:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8032128:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 803212c:	d147      	bne.n	80321be <__ssvfscanf_r+0x104a>
 803212e:	f1ba 0f01 	cmp.w	sl, #1
 8032132:	d144      	bne.n	80321be <__ssvfscanf_r+0x104a>
 8032134:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032136:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 803213a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 803213e:	3901      	subs	r1, #1
 8032140:	f809 cb01 	strb.w	ip, [r9], #1
 8032144:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 8032148:	62f9      	str	r1, [r7, #44]	@ 0x2c
 803214a:	f04f 0a00 	mov.w	sl, #0
 803214e:	e003      	b.n	8032158 <__ssvfscanf_r+0xfe4>
 8032150:	0631      	lsls	r1, r6, #24
 8032152:	d534      	bpl.n	80321be <__ssvfscanf_r+0x104a>
 8032154:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8032158:	f809 0b01 	strb.w	r0, [r9], #1
 803215c:	e7c9      	b.n	80320f2 <__ssvfscanf_r+0xf7e>
 803215e:	f1bb 0f00 	cmp.w	fp, #0
 8032162:	d10c      	bne.n	803217e <__ssvfscanf_r+0x100a>
 8032164:	f1ba 0f00 	cmp.w	sl, #0
 8032168:	d10d      	bne.n	8032186 <__ssvfscanf_r+0x1012>
 803216a:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803216e:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8032172:	d108      	bne.n	8032186 <__ssvfscanf_r+0x1012>
 8032174:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8032178:	f04f 0b01 	mov.w	fp, #1
 803217c:	e7ec      	b.n	8032158 <__ssvfscanf_r+0xfe4>
 803217e:	f1bb 0f02 	cmp.w	fp, #2
 8032182:	f000 8088 	beq.w	8032296 <__ssvfscanf_r+0x1122>
 8032186:	f1b8 0f01 	cmp.w	r8, #1
 803218a:	d002      	beq.n	8032192 <__ssvfscanf_r+0x101e>
 803218c:	f1b8 0f04 	cmp.w	r8, #4
 8032190:	d115      	bne.n	80321be <__ssvfscanf_r+0x104a>
 8032192:	f108 0801 	add.w	r8, r8, #1
 8032196:	fa5f f888 	uxtb.w	r8, r8
 803219a:	e7dd      	b.n	8032158 <__ssvfscanf_r+0xfe4>
 803219c:	0531      	lsls	r1, r6, #20
 803219e:	d50b      	bpl.n	80321b8 <__ssvfscanf_r+0x1044>
 80321a0:	eb1b 0c08 	adds.w	ip, fp, r8
 80321a4:	d108      	bne.n	80321b8 <__ssvfscanf_r+0x1044>
 80321a6:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 80321aa:	46e0      	mov	r8, ip
 80321ac:	46e3      	mov	fp, ip
 80321ae:	e7d3      	b.n	8032158 <__ssvfscanf_r+0xfe4>
 80321b0:	0803ac9c 	.word	0x0803ac9c
 80321b4:	08033f09 	.word	0x08033f09
 80321b8:	f1bb 0f01 	cmp.w	fp, #1
 80321bc:	d06e      	beq.n	803229c <__ssvfscanf_r+0x1128>
 80321be:	f1ba 0f00 	cmp.w	sl, #0
 80321c2:	d001      	beq.n	80321c8 <__ssvfscanf_r+0x1054>
 80321c4:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 80321c8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80321cc:	f1bb 0f01 	cmp.w	fp, #1
 80321d0:	d873      	bhi.n	80322ba <__ssvfscanf_r+0x1146>
 80321d2:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80321d6:	45a9      	cmp	r9, r5
 80321d8:	f67f a8c2 	bls.w	8031360 <__ssvfscanf_r+0x1ec>
 80321dc:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80321e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80321e2:	4622      	mov	r2, r4
 80321e4:	f7fc fdd6 	bl	802ed94 <_sungetc_r>
 80321e8:	e7f5      	b.n	80321d6 <__ssvfscanf_r+0x1062>
 80321ea:	f1b8 0f00 	cmp.w	r8, #0
 80321ee:	d10d      	bne.n	803220c <__ssvfscanf_r+0x1098>
 80321f0:	f1ba 0f00 	cmp.w	sl, #0
 80321f4:	d1e6      	bne.n	80321c4 <__ssvfscanf_r+0x1050>
 80321f6:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 80321fa:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 80321fe:	f040 8124 	bne.w	803244a <__ssvfscanf_r+0x12d6>
 8032202:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8032206:	f04f 0801 	mov.w	r8, #1
 803220a:	e7a5      	b.n	8032158 <__ssvfscanf_r+0xfe4>
 803220c:	f1b8 0f03 	cmp.w	r8, #3
 8032210:	d0bf      	beq.n	8032192 <__ssvfscanf_r+0x101e>
 8032212:	f1b8 0f05 	cmp.w	r8, #5
 8032216:	e7bb      	b.n	8032190 <__ssvfscanf_r+0x101c>
 8032218:	0531      	lsls	r1, r6, #20
 803221a:	d502      	bpl.n	8032222 <__ssvfscanf_r+0x10ae>
 803221c:	eb1b 0c08 	adds.w	ip, fp, r8
 8032220:	d0c1      	beq.n	80321a6 <__ssvfscanf_r+0x1032>
 8032222:	f1b8 0f02 	cmp.w	r8, #2
 8032226:	d1ca      	bne.n	80321be <__ssvfscanf_r+0x104a>
 8032228:	f04f 0803 	mov.w	r8, #3
 803222c:	e794      	b.n	8032158 <__ssvfscanf_r+0xfe4>
 803222e:	f1b8 0f06 	cmp.w	r8, #6
 8032232:	d1c4      	bne.n	80321be <__ssvfscanf_r+0x104a>
 8032234:	f04f 0807 	mov.w	r8, #7
 8032238:	e78e      	b.n	8032158 <__ssvfscanf_r+0xfe4>
 803223a:	f1b8 0f07 	cmp.w	r8, #7
 803223e:	d1be      	bne.n	80321be <__ssvfscanf_r+0x104a>
 8032240:	f04f 0808 	mov.w	r8, #8
 8032244:	e788      	b.n	8032158 <__ssvfscanf_r+0xfe4>
 8032246:	0531      	lsls	r1, r6, #20
 8032248:	d5b9      	bpl.n	80321be <__ssvfscanf_r+0x104a>
 803224a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 803224e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 8032252:	d005      	beq.n	8032260 <__ssvfscanf_r+0x10ec>
 8032254:	0571      	lsls	r1, r6, #21
 8032256:	d5b2      	bpl.n	80321be <__ssvfscanf_r+0x104a>
 8032258:	f1ba 0f00 	cmp.w	sl, #0
 803225c:	f000 80f5 	beq.w	803244a <__ssvfscanf_r+0x12d6>
 8032260:	05b1      	lsls	r1, r6, #22
 8032262:	bf58      	it	pl
 8032264:	6939      	ldrpl	r1, [r7, #16]
 8032266:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 803226a:	bf5c      	itt	pl
 803226c:	ebaa 0101 	subpl.w	r1, sl, r1
 8032270:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 8032274:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 8032278:	e767      	b.n	803214a <__ssvfscanf_r+0xfd6>
 803227a:	0531      	lsls	r1, r6, #20
 803227c:	d5e5      	bpl.n	803224a <__ssvfscanf_r+0x10d6>
 803227e:	e74d      	b.n	803211c <__ssvfscanf_r+0xfa8>
 8032280:	f892 c000 	ldrb.w	ip, [r2]
 8032284:	4584      	cmp	ip, r0
 8032286:	d19a      	bne.n	80321be <__ssvfscanf_r+0x104a>
 8032288:	05b1      	lsls	r1, r6, #22
 803228a:	d598      	bpl.n	80321be <__ssvfscanf_r+0x104a>
 803228c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8032290:	f8c7 a010 	str.w	sl, [r7, #16]
 8032294:	e760      	b.n	8032158 <__ssvfscanf_r+0xfe4>
 8032296:	f04f 0b03 	mov.w	fp, #3
 803229a:	e75d      	b.n	8032158 <__ssvfscanf_r+0xfe4>
 803229c:	f04f 0b02 	mov.w	fp, #2
 80322a0:	e75a      	b.n	8032158 <__ssvfscanf_r+0xfe4>
 80322a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80322a4:	4621      	mov	r1, r4
 80322a6:	e9c7 2300 	strd	r2, r3, [r7]
 80322aa:	f7fc fdae 	bl	802ee0a <__ssrefill_r>
 80322ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80322b2:	2800      	cmp	r0, #0
 80322b4:	f43f af2c 	beq.w	8032110 <__ssvfscanf_r+0xf9c>
 80322b8:	e781      	b.n	80321be <__ssvfscanf_r+0x104a>
 80322ba:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80322be:	2b06      	cmp	r3, #6
 80322c0:	d827      	bhi.n	8032312 <__ssvfscanf_r+0x119e>
 80322c2:	f1b8 0f02 	cmp.w	r8, #2
 80322c6:	d834      	bhi.n	8032332 <__ssvfscanf_r+0x11be>
 80322c8:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80322cc:	45a9      	cmp	r9, r5
 80322ce:	f67f a847 	bls.w	8031360 <__ssvfscanf_r+0x1ec>
 80322d2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80322d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80322d8:	4622      	mov	r2, r4
 80322da:	f7fc fd5b 	bl	802ed94 <_sungetc_r>
 80322de:	e7f5      	b.n	80322cc <__ssvfscanf_r+0x1158>
 80322e0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80322e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80322e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80322e8:	4622      	mov	r2, r4
 80322ea:	f7fc fd53 	bl	802ed94 <_sungetc_r>
 80322ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80322f0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80322f4:	fa5f fb8b 	uxtb.w	fp, fp
 80322f8:	f1bb 0f02 	cmp.w	fp, #2
 80322fc:	d1f0      	bne.n	80322e0 <__ssvfscanf_r+0x116c>
 80322fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032300:	f1a8 0803 	sub.w	r8, r8, #3
 8032304:	fa5f f888 	uxtb.w	r8, r8
 8032308:	eba3 0308 	sub.w	r3, r3, r8
 803230c:	eba9 0908 	sub.w	r9, r9, r8
 8032310:	633b      	str	r3, [r7, #48]	@ 0x30
 8032312:	05f3      	lsls	r3, r6, #23
 8032314:	d52d      	bpl.n	8032372 <__ssvfscanf_r+0x11fe>
 8032316:	0570      	lsls	r0, r6, #21
 8032318:	d50e      	bpl.n	8032338 <__ssvfscanf_r+0x11c4>
 803231a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803231e:	45a9      	cmp	r9, r5
 8032320:	f67f a81e 	bls.w	8031360 <__ssvfscanf_r+0x1ec>
 8032324:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8032328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803232a:	4622      	mov	r2, r4
 803232c:	f7fc fd32 	bl	802ed94 <_sungetc_r>
 8032330:	e7f5      	b.n	803231e <__ssvfscanf_r+0x11aa>
 8032332:	46c3      	mov	fp, r8
 8032334:	464b      	mov	r3, r9
 8032336:	e7db      	b.n	80322f0 <__ssvfscanf_r+0x117c>
 8032338:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 803233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803233e:	2965      	cmp	r1, #101	@ 0x65
 8032340:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 8032344:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8032348:	d00c      	beq.n	8032364 <__ssvfscanf_r+0x11f0>
 803234a:	2945      	cmp	r1, #69	@ 0x45
 803234c:	d00a      	beq.n	8032364 <__ssvfscanf_r+0x11f0>
 803234e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032350:	4622      	mov	r2, r4
 8032352:	f7fc fd1f 	bl	802ed94 <_sungetc_r>
 8032356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032358:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 803235c:	f1a9 0802 	sub.w	r8, r9, #2
 8032360:	f1a3 0b02 	sub.w	fp, r3, #2
 8032364:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032366:	4622      	mov	r2, r4
 8032368:	f7fc fd14 	bl	802ed94 <_sungetc_r>
 803236c:	46c1      	mov	r9, r8
 803236e:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 8032372:	f016 0210 	ands.w	r2, r6, #16
 8032376:	f47e af18 	bne.w	80311aa <__ssvfscanf_r+0x36>
 803237a:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 803237e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8032382:	f889 2000 	strb.w	r2, [r9]
 8032386:	d119      	bne.n	80323bc <__ssvfscanf_r+0x1248>
 8032388:	693b      	ldr	r3, [r7, #16]
 803238a:	4553      	cmp	r3, sl
 803238c:	eba3 020a 	sub.w	r2, r3, sl
 8032390:	d121      	bne.n	80323d6 <__ssvfscanf_r+0x1262>
 8032392:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032398:	2200      	movs	r2, #0
 803239a:	f001 fd41 	bl	8033e20 <_strtod_r>
 803239e:	07f1      	lsls	r1, r6, #31
 80323a0:	ec59 8b10 	vmov	r8, r9, d0
 80323a4:	f105 0a04 	add.w	sl, r5, #4
 80323a8:	d520      	bpl.n	80323ec <__ssvfscanf_r+0x1278>
 80323aa:	682b      	ldr	r3, [r5, #0]
 80323ac:	ed83 0b00 	vstr	d0, [r3]
 80323b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80323b2:	3301      	adds	r3, #1
 80323b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80323b6:	4655      	mov	r5, sl
 80323b8:	f7fe bef7 	b.w	80311aa <__ssvfscanf_r+0x36>
 80323bc:	68fb      	ldr	r3, [r7, #12]
 80323be:	2b00      	cmp	r3, #0
 80323c0:	d0e7      	beq.n	8032392 <__ssvfscanf_r+0x121e>
 80323c2:	68b9      	ldr	r1, [r7, #8]
 80323c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80323c6:	230a      	movs	r3, #10
 80323c8:	3101      	adds	r1, #1
 80323ca:	f7f8 fe9d 	bl	802b108 <_strtol_r>
 80323ce:	68fb      	ldr	r3, [r7, #12]
 80323d0:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80323d4:	1ac2      	subs	r2, r0, r3
 80323d6:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 80323da:	4599      	cmp	r9, r3
 80323dc:	bf28      	it	cs
 80323de:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 80323e2:	491b      	ldr	r1, [pc, #108]	@ (8032450 <__ssvfscanf_r+0x12dc>)
 80323e4:	4648      	mov	r0, r9
 80323e6:	f7f8 ff49 	bl	802b27c <sprintf>
 80323ea:	e7d2      	b.n	8032392 <__ssvfscanf_r+0x121e>
 80323ec:	07b2      	lsls	r2, r6, #30
 80323ee:	682d      	ldr	r5, [r5, #0]
 80323f0:	d502      	bpl.n	80323f8 <__ssvfscanf_r+0x1284>
 80323f2:	ed85 0b00 	vstr	d0, [r5]
 80323f6:	e7db      	b.n	80323b0 <__ssvfscanf_r+0x123c>
 80323f8:	4642      	mov	r2, r8
 80323fa:	464b      	mov	r3, r9
 80323fc:	4640      	mov	r0, r8
 80323fe:	4649      	mov	r1, r9
 8032400:	f7de fbac 	bl	8010b5c <__aeabi_dcmpun>
 8032404:	b128      	cbz	r0, 8032412 <__ssvfscanf_r+0x129e>
 8032406:	4813      	ldr	r0, [pc, #76]	@ (8032454 <__ssvfscanf_r+0x12e0>)
 8032408:	f002 f8f6 	bl	80345f8 <nanf>
 803240c:	ed85 0a00 	vstr	s0, [r5]
 8032410:	e7ce      	b.n	80323b0 <__ssvfscanf_r+0x123c>
 8032412:	4640      	mov	r0, r8
 8032414:	4649      	mov	r1, r9
 8032416:	f7de fbff 	bl	8010c18 <__aeabi_d2f>
 803241a:	6028      	str	r0, [r5, #0]
 803241c:	e7c8      	b.n	80323b0 <__ssvfscanf_r+0x123c>
 803241e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8032422:	6818      	ldr	r0, [r3, #0]
 8032424:	f7fb fd3a 	bl	802de9c <free>
 8032428:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803242c:	3401      	adds	r4, #1
 803242e:	601e      	str	r6, [r3, #0]
 8032430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032432:	681d      	ldr	r5, [r3, #0]
 8032434:	88db      	ldrh	r3, [r3, #6]
 8032436:	42a3      	cmp	r3, r4
 8032438:	dcf1      	bgt.n	803241e <__ssvfscanf_r+0x12aa>
 803243a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803243e:	627b      	str	r3, [r7, #36]	@ 0x24
 8032440:	f7ff b85c 	b.w	80314fc <__ssvfscanf_r+0x388>
 8032444:	2400      	movs	r4, #0
 8032446:	4626      	mov	r6, r4
 8032448:	e7f2      	b.n	8032430 <__ssvfscanf_r+0x12bc>
 803244a:	f04f 0a00 	mov.w	sl, #0
 803244e:	e6bb      	b.n	80321c8 <__ssvfscanf_r+0x1054>
 8032450:	0803ac96 	.word	0x0803ac96
 8032454:	0803a6fe 	.word	0x0803a6fe

08032458 <_putc_r>:
 8032458:	b570      	push	{r4, r5, r6, lr}
 803245a:	460d      	mov	r5, r1
 803245c:	4614      	mov	r4, r2
 803245e:	4606      	mov	r6, r0
 8032460:	b118      	cbz	r0, 803246a <_putc_r+0x12>
 8032462:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8032464:	b90b      	cbnz	r3, 803246a <_putc_r+0x12>
 8032466:	f7f9 f825 	bl	802b4b4 <__sinit>
 803246a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803246c:	07d8      	lsls	r0, r3, #31
 803246e:	d405      	bmi.n	803247c <_putc_r+0x24>
 8032470:	89a3      	ldrh	r3, [r4, #12]
 8032472:	0599      	lsls	r1, r3, #22
 8032474:	d402      	bmi.n	803247c <_putc_r+0x24>
 8032476:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8032478:	f7fa fcfb 	bl	802ce72 <__retarget_lock_acquire_recursive>
 803247c:	68a3      	ldr	r3, [r4, #8]
 803247e:	3b01      	subs	r3, #1
 8032480:	2b00      	cmp	r3, #0
 8032482:	60a3      	str	r3, [r4, #8]
 8032484:	da05      	bge.n	8032492 <_putc_r+0x3a>
 8032486:	69a2      	ldr	r2, [r4, #24]
 8032488:	4293      	cmp	r3, r2
 803248a:	db12      	blt.n	80324b2 <_putc_r+0x5a>
 803248c:	b2eb      	uxtb	r3, r5
 803248e:	2b0a      	cmp	r3, #10
 8032490:	d00f      	beq.n	80324b2 <_putc_r+0x5a>
 8032492:	6823      	ldr	r3, [r4, #0]
 8032494:	1c5a      	adds	r2, r3, #1
 8032496:	6022      	str	r2, [r4, #0]
 8032498:	701d      	strb	r5, [r3, #0]
 803249a:	b2ed      	uxtb	r5, r5
 803249c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803249e:	07da      	lsls	r2, r3, #31
 80324a0:	d405      	bmi.n	80324ae <_putc_r+0x56>
 80324a2:	89a3      	ldrh	r3, [r4, #12]
 80324a4:	059b      	lsls	r3, r3, #22
 80324a6:	d402      	bmi.n	80324ae <_putc_r+0x56>
 80324a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80324aa:	f7fa fce4 	bl	802ce76 <__retarget_lock_release_recursive>
 80324ae:	4628      	mov	r0, r5
 80324b0:	bd70      	pop	{r4, r5, r6, pc}
 80324b2:	4629      	mov	r1, r5
 80324b4:	4622      	mov	r2, r4
 80324b6:	4630      	mov	r0, r6
 80324b8:	f001 fd79 	bl	8033fae <__swbuf_r>
 80324bc:	4605      	mov	r5, r0
 80324be:	e7ed      	b.n	803249c <_putc_r+0x44>

080324c0 <__malloc_lock>:
 80324c0:	4801      	ldr	r0, [pc, #4]	@ (80324c8 <__malloc_lock+0x8>)
 80324c2:	f7fa bcd6 	b.w	802ce72 <__retarget_lock_acquire_recursive>
 80324c6:	bf00      	nop
 80324c8:	20018f5a 	.word	0x20018f5a

080324cc <__malloc_unlock>:
 80324cc:	4801      	ldr	r0, [pc, #4]	@ (80324d4 <__malloc_unlock+0x8>)
 80324ce:	f7fa bcd2 	b.w	802ce76 <__retarget_lock_release_recursive>
 80324d2:	bf00      	nop
 80324d4:	20018f5a 	.word	0x20018f5a

080324d8 <_Balloc>:
 80324d8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80324da:	b570      	push	{r4, r5, r6, lr}
 80324dc:	4605      	mov	r5, r0
 80324de:	460c      	mov	r4, r1
 80324e0:	b17b      	cbz	r3, 8032502 <_Balloc+0x2a>
 80324e2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80324e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80324e8:	b9a0      	cbnz	r0, 8032514 <_Balloc+0x3c>
 80324ea:	2101      	movs	r1, #1
 80324ec:	fa01 f604 	lsl.w	r6, r1, r4
 80324f0:	1d72      	adds	r2, r6, #5
 80324f2:	0092      	lsls	r2, r2, #2
 80324f4:	4628      	mov	r0, r5
 80324f6:	f002 f885 	bl	8034604 <_calloc_r>
 80324fa:	b148      	cbz	r0, 8032510 <_Balloc+0x38>
 80324fc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8032500:	e00b      	b.n	803251a <_Balloc+0x42>
 8032502:	2221      	movs	r2, #33	@ 0x21
 8032504:	2104      	movs	r1, #4
 8032506:	f002 f87d 	bl	8034604 <_calloc_r>
 803250a:	6468      	str	r0, [r5, #68]	@ 0x44
 803250c:	2800      	cmp	r0, #0
 803250e:	d1e8      	bne.n	80324e2 <_Balloc+0xa>
 8032510:	2000      	movs	r0, #0
 8032512:	bd70      	pop	{r4, r5, r6, pc}
 8032514:	6802      	ldr	r2, [r0, #0]
 8032516:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 803251a:	2300      	movs	r3, #0
 803251c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8032520:	e7f7      	b.n	8032512 <_Balloc+0x3a>

08032522 <_Bfree>:
 8032522:	b131      	cbz	r1, 8032532 <_Bfree+0x10>
 8032524:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8032526:	684a      	ldr	r2, [r1, #4]
 8032528:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 803252c:	6008      	str	r0, [r1, #0]
 803252e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8032532:	4770      	bx	lr

08032534 <__multadd>:
 8032534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032538:	690d      	ldr	r5, [r1, #16]
 803253a:	4607      	mov	r7, r0
 803253c:	460c      	mov	r4, r1
 803253e:	461e      	mov	r6, r3
 8032540:	f101 0c14 	add.w	ip, r1, #20
 8032544:	2000      	movs	r0, #0
 8032546:	f8dc 3000 	ldr.w	r3, [ip]
 803254a:	b299      	uxth	r1, r3
 803254c:	fb02 6101 	mla	r1, r2, r1, r6
 8032550:	0c1e      	lsrs	r6, r3, #16
 8032552:	0c0b      	lsrs	r3, r1, #16
 8032554:	fb02 3306 	mla	r3, r2, r6, r3
 8032558:	b289      	uxth	r1, r1
 803255a:	3001      	adds	r0, #1
 803255c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8032560:	4285      	cmp	r5, r0
 8032562:	f84c 1b04 	str.w	r1, [ip], #4
 8032566:	ea4f 4613 	mov.w	r6, r3, lsr #16
 803256a:	dcec      	bgt.n	8032546 <__multadd+0x12>
 803256c:	b30e      	cbz	r6, 80325b2 <__multadd+0x7e>
 803256e:	68a3      	ldr	r3, [r4, #8]
 8032570:	42ab      	cmp	r3, r5
 8032572:	dc19      	bgt.n	80325a8 <__multadd+0x74>
 8032574:	6861      	ldr	r1, [r4, #4]
 8032576:	4638      	mov	r0, r7
 8032578:	3101      	adds	r1, #1
 803257a:	f7ff ffad 	bl	80324d8 <_Balloc>
 803257e:	4680      	mov	r8, r0
 8032580:	b928      	cbnz	r0, 803258e <__multadd+0x5a>
 8032582:	4602      	mov	r2, r0
 8032584:	4b0c      	ldr	r3, [pc, #48]	@ (80325b8 <__multadd+0x84>)
 8032586:	480d      	ldr	r0, [pc, #52]	@ (80325bc <__multadd+0x88>)
 8032588:	21ba      	movs	r1, #186	@ 0xba
 803258a:	f7f6 fce7 	bl	8028f5c <__assert_func>
 803258e:	6922      	ldr	r2, [r4, #16]
 8032590:	3202      	adds	r2, #2
 8032592:	f104 010c 	add.w	r1, r4, #12
 8032596:	0092      	lsls	r2, r2, #2
 8032598:	300c      	adds	r0, #12
 803259a:	f7fa fc6d 	bl	802ce78 <memcpy>
 803259e:	4621      	mov	r1, r4
 80325a0:	4638      	mov	r0, r7
 80325a2:	f7ff ffbe 	bl	8032522 <_Bfree>
 80325a6:	4644      	mov	r4, r8
 80325a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80325ac:	3501      	adds	r5, #1
 80325ae:	615e      	str	r6, [r3, #20]
 80325b0:	6125      	str	r5, [r4, #16]
 80325b2:	4620      	mov	r0, r4
 80325b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80325b8:	0803abca 	.word	0x0803abca
 80325bc:	0803acbe 	.word	0x0803acbe

080325c0 <__s2b>:
 80325c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80325c4:	460c      	mov	r4, r1
 80325c6:	4615      	mov	r5, r2
 80325c8:	461f      	mov	r7, r3
 80325ca:	2209      	movs	r2, #9
 80325cc:	3308      	adds	r3, #8
 80325ce:	4606      	mov	r6, r0
 80325d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80325d4:	2100      	movs	r1, #0
 80325d6:	2201      	movs	r2, #1
 80325d8:	429a      	cmp	r2, r3
 80325da:	db09      	blt.n	80325f0 <__s2b+0x30>
 80325dc:	4630      	mov	r0, r6
 80325de:	f7ff ff7b 	bl	80324d8 <_Balloc>
 80325e2:	b940      	cbnz	r0, 80325f6 <__s2b+0x36>
 80325e4:	4602      	mov	r2, r0
 80325e6:	4b19      	ldr	r3, [pc, #100]	@ (803264c <__s2b+0x8c>)
 80325e8:	4819      	ldr	r0, [pc, #100]	@ (8032650 <__s2b+0x90>)
 80325ea:	21d3      	movs	r1, #211	@ 0xd3
 80325ec:	f7f6 fcb6 	bl	8028f5c <__assert_func>
 80325f0:	0052      	lsls	r2, r2, #1
 80325f2:	3101      	adds	r1, #1
 80325f4:	e7f0      	b.n	80325d8 <__s2b+0x18>
 80325f6:	9b08      	ldr	r3, [sp, #32]
 80325f8:	6143      	str	r3, [r0, #20]
 80325fa:	2d09      	cmp	r5, #9
 80325fc:	f04f 0301 	mov.w	r3, #1
 8032600:	6103      	str	r3, [r0, #16]
 8032602:	dd16      	ble.n	8032632 <__s2b+0x72>
 8032604:	f104 0909 	add.w	r9, r4, #9
 8032608:	46c8      	mov	r8, r9
 803260a:	442c      	add	r4, r5
 803260c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8032610:	4601      	mov	r1, r0
 8032612:	3b30      	subs	r3, #48	@ 0x30
 8032614:	220a      	movs	r2, #10
 8032616:	4630      	mov	r0, r6
 8032618:	f7ff ff8c 	bl	8032534 <__multadd>
 803261c:	45a0      	cmp	r8, r4
 803261e:	d1f5      	bne.n	803260c <__s2b+0x4c>
 8032620:	f1a5 0408 	sub.w	r4, r5, #8
 8032624:	444c      	add	r4, r9
 8032626:	1b2d      	subs	r5, r5, r4
 8032628:	1963      	adds	r3, r4, r5
 803262a:	42bb      	cmp	r3, r7
 803262c:	db04      	blt.n	8032638 <__s2b+0x78>
 803262e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8032632:	340a      	adds	r4, #10
 8032634:	2509      	movs	r5, #9
 8032636:	e7f6      	b.n	8032626 <__s2b+0x66>
 8032638:	f814 3b01 	ldrb.w	r3, [r4], #1
 803263c:	4601      	mov	r1, r0
 803263e:	3b30      	subs	r3, #48	@ 0x30
 8032640:	220a      	movs	r2, #10
 8032642:	4630      	mov	r0, r6
 8032644:	f7ff ff76 	bl	8032534 <__multadd>
 8032648:	e7ee      	b.n	8032628 <__s2b+0x68>
 803264a:	bf00      	nop
 803264c:	0803abca 	.word	0x0803abca
 8032650:	0803acbe 	.word	0x0803acbe

08032654 <__hi0bits>:
 8032654:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8032658:	4603      	mov	r3, r0
 803265a:	bf36      	itet	cc
 803265c:	0403      	lslcc	r3, r0, #16
 803265e:	2000      	movcs	r0, #0
 8032660:	2010      	movcc	r0, #16
 8032662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8032666:	bf3c      	itt	cc
 8032668:	021b      	lslcc	r3, r3, #8
 803266a:	3008      	addcc	r0, #8
 803266c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8032670:	bf3c      	itt	cc
 8032672:	011b      	lslcc	r3, r3, #4
 8032674:	3004      	addcc	r0, #4
 8032676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803267a:	bf3c      	itt	cc
 803267c:	009b      	lslcc	r3, r3, #2
 803267e:	3002      	addcc	r0, #2
 8032680:	2b00      	cmp	r3, #0
 8032682:	db05      	blt.n	8032690 <__hi0bits+0x3c>
 8032684:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8032688:	f100 0001 	add.w	r0, r0, #1
 803268c:	bf08      	it	eq
 803268e:	2020      	moveq	r0, #32
 8032690:	4770      	bx	lr

08032692 <__lo0bits>:
 8032692:	6803      	ldr	r3, [r0, #0]
 8032694:	4602      	mov	r2, r0
 8032696:	f013 0007 	ands.w	r0, r3, #7
 803269a:	d00b      	beq.n	80326b4 <__lo0bits+0x22>
 803269c:	07d9      	lsls	r1, r3, #31
 803269e:	d421      	bmi.n	80326e4 <__lo0bits+0x52>
 80326a0:	0798      	lsls	r0, r3, #30
 80326a2:	bf49      	itett	mi
 80326a4:	085b      	lsrmi	r3, r3, #1
 80326a6:	089b      	lsrpl	r3, r3, #2
 80326a8:	2001      	movmi	r0, #1
 80326aa:	6013      	strmi	r3, [r2, #0]
 80326ac:	bf5c      	itt	pl
 80326ae:	6013      	strpl	r3, [r2, #0]
 80326b0:	2002      	movpl	r0, #2
 80326b2:	4770      	bx	lr
 80326b4:	b299      	uxth	r1, r3
 80326b6:	b909      	cbnz	r1, 80326bc <__lo0bits+0x2a>
 80326b8:	0c1b      	lsrs	r3, r3, #16
 80326ba:	2010      	movs	r0, #16
 80326bc:	b2d9      	uxtb	r1, r3
 80326be:	b909      	cbnz	r1, 80326c4 <__lo0bits+0x32>
 80326c0:	3008      	adds	r0, #8
 80326c2:	0a1b      	lsrs	r3, r3, #8
 80326c4:	0719      	lsls	r1, r3, #28
 80326c6:	bf04      	itt	eq
 80326c8:	091b      	lsreq	r3, r3, #4
 80326ca:	3004      	addeq	r0, #4
 80326cc:	0799      	lsls	r1, r3, #30
 80326ce:	bf04      	itt	eq
 80326d0:	089b      	lsreq	r3, r3, #2
 80326d2:	3002      	addeq	r0, #2
 80326d4:	07d9      	lsls	r1, r3, #31
 80326d6:	d403      	bmi.n	80326e0 <__lo0bits+0x4e>
 80326d8:	085b      	lsrs	r3, r3, #1
 80326da:	f100 0001 	add.w	r0, r0, #1
 80326de:	d003      	beq.n	80326e8 <__lo0bits+0x56>
 80326e0:	6013      	str	r3, [r2, #0]
 80326e2:	4770      	bx	lr
 80326e4:	2000      	movs	r0, #0
 80326e6:	4770      	bx	lr
 80326e8:	2020      	movs	r0, #32
 80326ea:	4770      	bx	lr

080326ec <__i2b>:
 80326ec:	b510      	push	{r4, lr}
 80326ee:	460c      	mov	r4, r1
 80326f0:	2101      	movs	r1, #1
 80326f2:	f7ff fef1 	bl	80324d8 <_Balloc>
 80326f6:	4602      	mov	r2, r0
 80326f8:	b928      	cbnz	r0, 8032706 <__i2b+0x1a>
 80326fa:	4b05      	ldr	r3, [pc, #20]	@ (8032710 <__i2b+0x24>)
 80326fc:	4805      	ldr	r0, [pc, #20]	@ (8032714 <__i2b+0x28>)
 80326fe:	f240 1145 	movw	r1, #325	@ 0x145
 8032702:	f7f6 fc2b 	bl	8028f5c <__assert_func>
 8032706:	2301      	movs	r3, #1
 8032708:	6144      	str	r4, [r0, #20]
 803270a:	6103      	str	r3, [r0, #16]
 803270c:	bd10      	pop	{r4, pc}
 803270e:	bf00      	nop
 8032710:	0803abca 	.word	0x0803abca
 8032714:	0803acbe 	.word	0x0803acbe

08032718 <__multiply>:
 8032718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803271c:	4614      	mov	r4, r2
 803271e:	690a      	ldr	r2, [r1, #16]
 8032720:	6923      	ldr	r3, [r4, #16]
 8032722:	429a      	cmp	r2, r3
 8032724:	bfa8      	it	ge
 8032726:	4623      	movge	r3, r4
 8032728:	460f      	mov	r7, r1
 803272a:	bfa4      	itt	ge
 803272c:	460c      	movge	r4, r1
 803272e:	461f      	movge	r7, r3
 8032730:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8032734:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8032738:	68a3      	ldr	r3, [r4, #8]
 803273a:	6861      	ldr	r1, [r4, #4]
 803273c:	eb0a 0609 	add.w	r6, sl, r9
 8032740:	42b3      	cmp	r3, r6
 8032742:	b085      	sub	sp, #20
 8032744:	bfb8      	it	lt
 8032746:	3101      	addlt	r1, #1
 8032748:	f7ff fec6 	bl	80324d8 <_Balloc>
 803274c:	b930      	cbnz	r0, 803275c <__multiply+0x44>
 803274e:	4602      	mov	r2, r0
 8032750:	4b44      	ldr	r3, [pc, #272]	@ (8032864 <__multiply+0x14c>)
 8032752:	4845      	ldr	r0, [pc, #276]	@ (8032868 <__multiply+0x150>)
 8032754:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8032758:	f7f6 fc00 	bl	8028f5c <__assert_func>
 803275c:	f100 0514 	add.w	r5, r0, #20
 8032760:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8032764:	462b      	mov	r3, r5
 8032766:	2200      	movs	r2, #0
 8032768:	4543      	cmp	r3, r8
 803276a:	d321      	bcc.n	80327b0 <__multiply+0x98>
 803276c:	f107 0114 	add.w	r1, r7, #20
 8032770:	f104 0214 	add.w	r2, r4, #20
 8032774:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8032778:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 803277c:	9302      	str	r3, [sp, #8]
 803277e:	1b13      	subs	r3, r2, r4
 8032780:	3b15      	subs	r3, #21
 8032782:	f023 0303 	bic.w	r3, r3, #3
 8032786:	3304      	adds	r3, #4
 8032788:	f104 0715 	add.w	r7, r4, #21
 803278c:	42ba      	cmp	r2, r7
 803278e:	bf38      	it	cc
 8032790:	2304      	movcc	r3, #4
 8032792:	9301      	str	r3, [sp, #4]
 8032794:	9b02      	ldr	r3, [sp, #8]
 8032796:	9103      	str	r1, [sp, #12]
 8032798:	428b      	cmp	r3, r1
 803279a:	d80c      	bhi.n	80327b6 <__multiply+0x9e>
 803279c:	2e00      	cmp	r6, #0
 803279e:	dd03      	ble.n	80327a8 <__multiply+0x90>
 80327a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80327a4:	2b00      	cmp	r3, #0
 80327a6:	d05b      	beq.n	8032860 <__multiply+0x148>
 80327a8:	6106      	str	r6, [r0, #16]
 80327aa:	b005      	add	sp, #20
 80327ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80327b0:	f843 2b04 	str.w	r2, [r3], #4
 80327b4:	e7d8      	b.n	8032768 <__multiply+0x50>
 80327b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80327ba:	f1ba 0f00 	cmp.w	sl, #0
 80327be:	d024      	beq.n	803280a <__multiply+0xf2>
 80327c0:	f104 0e14 	add.w	lr, r4, #20
 80327c4:	46a9      	mov	r9, r5
 80327c6:	f04f 0c00 	mov.w	ip, #0
 80327ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80327ce:	f8d9 3000 	ldr.w	r3, [r9]
 80327d2:	fa1f fb87 	uxth.w	fp, r7
 80327d6:	b29b      	uxth	r3, r3
 80327d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80327dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80327e0:	f8d9 7000 	ldr.w	r7, [r9]
 80327e4:	4463      	add	r3, ip
 80327e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80327ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80327ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80327f2:	b29b      	uxth	r3, r3
 80327f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80327f8:	4572      	cmp	r2, lr
 80327fa:	f849 3b04 	str.w	r3, [r9], #4
 80327fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8032802:	d8e2      	bhi.n	80327ca <__multiply+0xb2>
 8032804:	9b01      	ldr	r3, [sp, #4]
 8032806:	f845 c003 	str.w	ip, [r5, r3]
 803280a:	9b03      	ldr	r3, [sp, #12]
 803280c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8032810:	3104      	adds	r1, #4
 8032812:	f1b9 0f00 	cmp.w	r9, #0
 8032816:	d021      	beq.n	803285c <__multiply+0x144>
 8032818:	682b      	ldr	r3, [r5, #0]
 803281a:	f104 0c14 	add.w	ip, r4, #20
 803281e:	46ae      	mov	lr, r5
 8032820:	f04f 0a00 	mov.w	sl, #0
 8032824:	f8bc b000 	ldrh.w	fp, [ip]
 8032828:	f8be 7002 	ldrh.w	r7, [lr, #2]
 803282c:	fb09 770b 	mla	r7, r9, fp, r7
 8032830:	4457      	add	r7, sl
 8032832:	b29b      	uxth	r3, r3
 8032834:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8032838:	f84e 3b04 	str.w	r3, [lr], #4
 803283c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8032840:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8032844:	f8be 3000 	ldrh.w	r3, [lr]
 8032848:	fb09 330a 	mla	r3, r9, sl, r3
 803284c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8032850:	4562      	cmp	r2, ip
 8032852:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8032856:	d8e5      	bhi.n	8032824 <__multiply+0x10c>
 8032858:	9f01      	ldr	r7, [sp, #4]
 803285a:	51eb      	str	r3, [r5, r7]
 803285c:	3504      	adds	r5, #4
 803285e:	e799      	b.n	8032794 <__multiply+0x7c>
 8032860:	3e01      	subs	r6, #1
 8032862:	e79b      	b.n	803279c <__multiply+0x84>
 8032864:	0803abca 	.word	0x0803abca
 8032868:	0803acbe 	.word	0x0803acbe

0803286c <__pow5mult>:
 803286c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8032870:	4615      	mov	r5, r2
 8032872:	f012 0203 	ands.w	r2, r2, #3
 8032876:	4607      	mov	r7, r0
 8032878:	460e      	mov	r6, r1
 803287a:	d007      	beq.n	803288c <__pow5mult+0x20>
 803287c:	4c1a      	ldr	r4, [pc, #104]	@ (80328e8 <__pow5mult+0x7c>)
 803287e:	3a01      	subs	r2, #1
 8032880:	2300      	movs	r3, #0
 8032882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8032886:	f7ff fe55 	bl	8032534 <__multadd>
 803288a:	4606      	mov	r6, r0
 803288c:	10ad      	asrs	r5, r5, #2
 803288e:	d027      	beq.n	80328e0 <__pow5mult+0x74>
 8032890:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8032892:	b944      	cbnz	r4, 80328a6 <__pow5mult+0x3a>
 8032894:	f240 2171 	movw	r1, #625	@ 0x271
 8032898:	4638      	mov	r0, r7
 803289a:	f7ff ff27 	bl	80326ec <__i2b>
 803289e:	2300      	movs	r3, #0
 80328a0:	6438      	str	r0, [r7, #64]	@ 0x40
 80328a2:	4604      	mov	r4, r0
 80328a4:	6003      	str	r3, [r0, #0]
 80328a6:	f04f 0900 	mov.w	r9, #0
 80328aa:	07eb      	lsls	r3, r5, #31
 80328ac:	d50a      	bpl.n	80328c4 <__pow5mult+0x58>
 80328ae:	4631      	mov	r1, r6
 80328b0:	4622      	mov	r2, r4
 80328b2:	4638      	mov	r0, r7
 80328b4:	f7ff ff30 	bl	8032718 <__multiply>
 80328b8:	4631      	mov	r1, r6
 80328ba:	4680      	mov	r8, r0
 80328bc:	4638      	mov	r0, r7
 80328be:	f7ff fe30 	bl	8032522 <_Bfree>
 80328c2:	4646      	mov	r6, r8
 80328c4:	106d      	asrs	r5, r5, #1
 80328c6:	d00b      	beq.n	80328e0 <__pow5mult+0x74>
 80328c8:	6820      	ldr	r0, [r4, #0]
 80328ca:	b938      	cbnz	r0, 80328dc <__pow5mult+0x70>
 80328cc:	4622      	mov	r2, r4
 80328ce:	4621      	mov	r1, r4
 80328d0:	4638      	mov	r0, r7
 80328d2:	f7ff ff21 	bl	8032718 <__multiply>
 80328d6:	6020      	str	r0, [r4, #0]
 80328d8:	f8c0 9000 	str.w	r9, [r0]
 80328dc:	4604      	mov	r4, r0
 80328de:	e7e4      	b.n	80328aa <__pow5mult+0x3e>
 80328e0:	4630      	mov	r0, r6
 80328e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80328e6:	bf00      	nop
 80328e8:	0803ad18 	.word	0x0803ad18

080328ec <__lshift>:
 80328ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80328f0:	460c      	mov	r4, r1
 80328f2:	6849      	ldr	r1, [r1, #4]
 80328f4:	6923      	ldr	r3, [r4, #16]
 80328f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80328fa:	68a3      	ldr	r3, [r4, #8]
 80328fc:	4607      	mov	r7, r0
 80328fe:	4691      	mov	r9, r2
 8032900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8032904:	f108 0601 	add.w	r6, r8, #1
 8032908:	42b3      	cmp	r3, r6
 803290a:	db0b      	blt.n	8032924 <__lshift+0x38>
 803290c:	4638      	mov	r0, r7
 803290e:	f7ff fde3 	bl	80324d8 <_Balloc>
 8032912:	4605      	mov	r5, r0
 8032914:	b948      	cbnz	r0, 803292a <__lshift+0x3e>
 8032916:	4602      	mov	r2, r0
 8032918:	4b28      	ldr	r3, [pc, #160]	@ (80329bc <__lshift+0xd0>)
 803291a:	4829      	ldr	r0, [pc, #164]	@ (80329c0 <__lshift+0xd4>)
 803291c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8032920:	f7f6 fb1c 	bl	8028f5c <__assert_func>
 8032924:	3101      	adds	r1, #1
 8032926:	005b      	lsls	r3, r3, #1
 8032928:	e7ee      	b.n	8032908 <__lshift+0x1c>
 803292a:	2300      	movs	r3, #0
 803292c:	f100 0114 	add.w	r1, r0, #20
 8032930:	f100 0210 	add.w	r2, r0, #16
 8032934:	4618      	mov	r0, r3
 8032936:	4553      	cmp	r3, sl
 8032938:	db33      	blt.n	80329a2 <__lshift+0xb6>
 803293a:	6920      	ldr	r0, [r4, #16]
 803293c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8032940:	f104 0314 	add.w	r3, r4, #20
 8032944:	f019 091f 	ands.w	r9, r9, #31
 8032948:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 803294c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8032950:	d02b      	beq.n	80329aa <__lshift+0xbe>
 8032952:	f1c9 0e20 	rsb	lr, r9, #32
 8032956:	468a      	mov	sl, r1
 8032958:	2200      	movs	r2, #0
 803295a:	6818      	ldr	r0, [r3, #0]
 803295c:	fa00 f009 	lsl.w	r0, r0, r9
 8032960:	4310      	orrs	r0, r2
 8032962:	f84a 0b04 	str.w	r0, [sl], #4
 8032966:	f853 2b04 	ldr.w	r2, [r3], #4
 803296a:	459c      	cmp	ip, r3
 803296c:	fa22 f20e 	lsr.w	r2, r2, lr
 8032970:	d8f3      	bhi.n	803295a <__lshift+0x6e>
 8032972:	ebac 0304 	sub.w	r3, ip, r4
 8032976:	3b15      	subs	r3, #21
 8032978:	f023 0303 	bic.w	r3, r3, #3
 803297c:	3304      	adds	r3, #4
 803297e:	f104 0015 	add.w	r0, r4, #21
 8032982:	4584      	cmp	ip, r0
 8032984:	bf38      	it	cc
 8032986:	2304      	movcc	r3, #4
 8032988:	50ca      	str	r2, [r1, r3]
 803298a:	b10a      	cbz	r2, 8032990 <__lshift+0xa4>
 803298c:	f108 0602 	add.w	r6, r8, #2
 8032990:	3e01      	subs	r6, #1
 8032992:	4638      	mov	r0, r7
 8032994:	612e      	str	r6, [r5, #16]
 8032996:	4621      	mov	r1, r4
 8032998:	f7ff fdc3 	bl	8032522 <_Bfree>
 803299c:	4628      	mov	r0, r5
 803299e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80329a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80329a6:	3301      	adds	r3, #1
 80329a8:	e7c5      	b.n	8032936 <__lshift+0x4a>
 80329aa:	3904      	subs	r1, #4
 80329ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80329b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80329b4:	459c      	cmp	ip, r3
 80329b6:	d8f9      	bhi.n	80329ac <__lshift+0xc0>
 80329b8:	e7ea      	b.n	8032990 <__lshift+0xa4>
 80329ba:	bf00      	nop
 80329bc:	0803abca 	.word	0x0803abca
 80329c0:	0803acbe 	.word	0x0803acbe

080329c4 <__mcmp>:
 80329c4:	690a      	ldr	r2, [r1, #16]
 80329c6:	4603      	mov	r3, r0
 80329c8:	6900      	ldr	r0, [r0, #16]
 80329ca:	1a80      	subs	r0, r0, r2
 80329cc:	b530      	push	{r4, r5, lr}
 80329ce:	d10e      	bne.n	80329ee <__mcmp+0x2a>
 80329d0:	3314      	adds	r3, #20
 80329d2:	3114      	adds	r1, #20
 80329d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80329d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80329dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80329e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80329e4:	4295      	cmp	r5, r2
 80329e6:	d003      	beq.n	80329f0 <__mcmp+0x2c>
 80329e8:	d205      	bcs.n	80329f6 <__mcmp+0x32>
 80329ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80329ee:	bd30      	pop	{r4, r5, pc}
 80329f0:	42a3      	cmp	r3, r4
 80329f2:	d3f3      	bcc.n	80329dc <__mcmp+0x18>
 80329f4:	e7fb      	b.n	80329ee <__mcmp+0x2a>
 80329f6:	2001      	movs	r0, #1
 80329f8:	e7f9      	b.n	80329ee <__mcmp+0x2a>
	...

080329fc <__mdiff>:
 80329fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032a00:	4689      	mov	r9, r1
 8032a02:	4606      	mov	r6, r0
 8032a04:	4611      	mov	r1, r2
 8032a06:	4648      	mov	r0, r9
 8032a08:	4614      	mov	r4, r2
 8032a0a:	f7ff ffdb 	bl	80329c4 <__mcmp>
 8032a0e:	1e05      	subs	r5, r0, #0
 8032a10:	d112      	bne.n	8032a38 <__mdiff+0x3c>
 8032a12:	4629      	mov	r1, r5
 8032a14:	4630      	mov	r0, r6
 8032a16:	f7ff fd5f 	bl	80324d8 <_Balloc>
 8032a1a:	4602      	mov	r2, r0
 8032a1c:	b928      	cbnz	r0, 8032a2a <__mdiff+0x2e>
 8032a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8032b1c <__mdiff+0x120>)
 8032a20:	f240 2137 	movw	r1, #567	@ 0x237
 8032a24:	483e      	ldr	r0, [pc, #248]	@ (8032b20 <__mdiff+0x124>)
 8032a26:	f7f6 fa99 	bl	8028f5c <__assert_func>
 8032a2a:	2301      	movs	r3, #1
 8032a2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8032a30:	4610      	mov	r0, r2
 8032a32:	b003      	add	sp, #12
 8032a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032a38:	bfbc      	itt	lt
 8032a3a:	464b      	movlt	r3, r9
 8032a3c:	46a1      	movlt	r9, r4
 8032a3e:	4630      	mov	r0, r6
 8032a40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8032a44:	bfba      	itte	lt
 8032a46:	461c      	movlt	r4, r3
 8032a48:	2501      	movlt	r5, #1
 8032a4a:	2500      	movge	r5, #0
 8032a4c:	f7ff fd44 	bl	80324d8 <_Balloc>
 8032a50:	4602      	mov	r2, r0
 8032a52:	b918      	cbnz	r0, 8032a5c <__mdiff+0x60>
 8032a54:	4b31      	ldr	r3, [pc, #196]	@ (8032b1c <__mdiff+0x120>)
 8032a56:	f240 2145 	movw	r1, #581	@ 0x245
 8032a5a:	e7e3      	b.n	8032a24 <__mdiff+0x28>
 8032a5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8032a60:	6926      	ldr	r6, [r4, #16]
 8032a62:	60c5      	str	r5, [r0, #12]
 8032a64:	f109 0310 	add.w	r3, r9, #16
 8032a68:	f109 0514 	add.w	r5, r9, #20
 8032a6c:	f104 0e14 	add.w	lr, r4, #20
 8032a70:	f100 0b14 	add.w	fp, r0, #20
 8032a74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8032a78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8032a7c:	9301      	str	r3, [sp, #4]
 8032a7e:	46d9      	mov	r9, fp
 8032a80:	f04f 0c00 	mov.w	ip, #0
 8032a84:	9b01      	ldr	r3, [sp, #4]
 8032a86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8032a8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8032a8e:	9301      	str	r3, [sp, #4]
 8032a90:	fa1f f38a 	uxth.w	r3, sl
 8032a94:	4619      	mov	r1, r3
 8032a96:	b283      	uxth	r3, r0
 8032a98:	1acb      	subs	r3, r1, r3
 8032a9a:	0c00      	lsrs	r0, r0, #16
 8032a9c:	4463      	add	r3, ip
 8032a9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8032aa2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8032aa6:	b29b      	uxth	r3, r3
 8032aa8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8032aac:	4576      	cmp	r6, lr
 8032aae:	f849 3b04 	str.w	r3, [r9], #4
 8032ab2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8032ab6:	d8e5      	bhi.n	8032a84 <__mdiff+0x88>
 8032ab8:	1b33      	subs	r3, r6, r4
 8032aba:	3b15      	subs	r3, #21
 8032abc:	f023 0303 	bic.w	r3, r3, #3
 8032ac0:	3415      	adds	r4, #21
 8032ac2:	3304      	adds	r3, #4
 8032ac4:	42a6      	cmp	r6, r4
 8032ac6:	bf38      	it	cc
 8032ac8:	2304      	movcc	r3, #4
 8032aca:	441d      	add	r5, r3
 8032acc:	445b      	add	r3, fp
 8032ace:	461e      	mov	r6, r3
 8032ad0:	462c      	mov	r4, r5
 8032ad2:	4544      	cmp	r4, r8
 8032ad4:	d30e      	bcc.n	8032af4 <__mdiff+0xf8>
 8032ad6:	f108 0103 	add.w	r1, r8, #3
 8032ada:	1b49      	subs	r1, r1, r5
 8032adc:	f021 0103 	bic.w	r1, r1, #3
 8032ae0:	3d03      	subs	r5, #3
 8032ae2:	45a8      	cmp	r8, r5
 8032ae4:	bf38      	it	cc
 8032ae6:	2100      	movcc	r1, #0
 8032ae8:	440b      	add	r3, r1
 8032aea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8032aee:	b191      	cbz	r1, 8032b16 <__mdiff+0x11a>
 8032af0:	6117      	str	r7, [r2, #16]
 8032af2:	e79d      	b.n	8032a30 <__mdiff+0x34>
 8032af4:	f854 1b04 	ldr.w	r1, [r4], #4
 8032af8:	46e6      	mov	lr, ip
 8032afa:	0c08      	lsrs	r0, r1, #16
 8032afc:	fa1c fc81 	uxtah	ip, ip, r1
 8032b00:	4471      	add	r1, lr
 8032b02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8032b06:	b289      	uxth	r1, r1
 8032b08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8032b0c:	f846 1b04 	str.w	r1, [r6], #4
 8032b10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8032b14:	e7dd      	b.n	8032ad2 <__mdiff+0xd6>
 8032b16:	3f01      	subs	r7, #1
 8032b18:	e7e7      	b.n	8032aea <__mdiff+0xee>
 8032b1a:	bf00      	nop
 8032b1c:	0803abca 	.word	0x0803abca
 8032b20:	0803acbe 	.word	0x0803acbe

08032b24 <__ulp>:
 8032b24:	b082      	sub	sp, #8
 8032b26:	ed8d 0b00 	vstr	d0, [sp]
 8032b2a:	9a01      	ldr	r2, [sp, #4]
 8032b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8032b6c <__ulp+0x48>)
 8032b2e:	4013      	ands	r3, r2
 8032b30:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8032b34:	2b00      	cmp	r3, #0
 8032b36:	dc08      	bgt.n	8032b4a <__ulp+0x26>
 8032b38:	425b      	negs	r3, r3
 8032b3a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8032b3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8032b42:	da04      	bge.n	8032b4e <__ulp+0x2a>
 8032b44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8032b48:	4113      	asrs	r3, r2
 8032b4a:	2200      	movs	r2, #0
 8032b4c:	e008      	b.n	8032b60 <__ulp+0x3c>
 8032b4e:	f1a2 0314 	sub.w	r3, r2, #20
 8032b52:	2b1e      	cmp	r3, #30
 8032b54:	bfda      	itte	le
 8032b56:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8032b5a:	40da      	lsrle	r2, r3
 8032b5c:	2201      	movgt	r2, #1
 8032b5e:	2300      	movs	r3, #0
 8032b60:	4619      	mov	r1, r3
 8032b62:	4610      	mov	r0, r2
 8032b64:	ec41 0b10 	vmov	d0, r0, r1
 8032b68:	b002      	add	sp, #8
 8032b6a:	4770      	bx	lr
 8032b6c:	7ff00000 	.word	0x7ff00000

08032b70 <__b2d>:
 8032b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032b74:	6906      	ldr	r6, [r0, #16]
 8032b76:	f100 0814 	add.w	r8, r0, #20
 8032b7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8032b7e:	1f37      	subs	r7, r6, #4
 8032b80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8032b84:	4610      	mov	r0, r2
 8032b86:	f7ff fd65 	bl	8032654 <__hi0bits>
 8032b8a:	f1c0 0320 	rsb	r3, r0, #32
 8032b8e:	280a      	cmp	r0, #10
 8032b90:	600b      	str	r3, [r1, #0]
 8032b92:	491b      	ldr	r1, [pc, #108]	@ (8032c00 <__b2d+0x90>)
 8032b94:	dc15      	bgt.n	8032bc2 <__b2d+0x52>
 8032b96:	f1c0 0c0b 	rsb	ip, r0, #11
 8032b9a:	fa22 f30c 	lsr.w	r3, r2, ip
 8032b9e:	45b8      	cmp	r8, r7
 8032ba0:	ea43 0501 	orr.w	r5, r3, r1
 8032ba4:	bf34      	ite	cc
 8032ba6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8032baa:	2300      	movcs	r3, #0
 8032bac:	3015      	adds	r0, #21
 8032bae:	fa02 f000 	lsl.w	r0, r2, r0
 8032bb2:	fa23 f30c 	lsr.w	r3, r3, ip
 8032bb6:	4303      	orrs	r3, r0
 8032bb8:	461c      	mov	r4, r3
 8032bba:	ec45 4b10 	vmov	d0, r4, r5
 8032bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032bc2:	45b8      	cmp	r8, r7
 8032bc4:	bf3a      	itte	cc
 8032bc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8032bca:	f1a6 0708 	subcc.w	r7, r6, #8
 8032bce:	2300      	movcs	r3, #0
 8032bd0:	380b      	subs	r0, #11
 8032bd2:	d012      	beq.n	8032bfa <__b2d+0x8a>
 8032bd4:	f1c0 0120 	rsb	r1, r0, #32
 8032bd8:	fa23 f401 	lsr.w	r4, r3, r1
 8032bdc:	4082      	lsls	r2, r0
 8032bde:	4322      	orrs	r2, r4
 8032be0:	4547      	cmp	r7, r8
 8032be2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8032be6:	bf8c      	ite	hi
 8032be8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8032bec:	2200      	movls	r2, #0
 8032bee:	4083      	lsls	r3, r0
 8032bf0:	40ca      	lsrs	r2, r1
 8032bf2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8032bf6:	4313      	orrs	r3, r2
 8032bf8:	e7de      	b.n	8032bb8 <__b2d+0x48>
 8032bfa:	ea42 0501 	orr.w	r5, r2, r1
 8032bfe:	e7db      	b.n	8032bb8 <__b2d+0x48>
 8032c00:	3ff00000 	.word	0x3ff00000

08032c04 <__d2b>:
 8032c04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8032c08:	460f      	mov	r7, r1
 8032c0a:	2101      	movs	r1, #1
 8032c0c:	ec59 8b10 	vmov	r8, r9, d0
 8032c10:	4616      	mov	r6, r2
 8032c12:	f7ff fc61 	bl	80324d8 <_Balloc>
 8032c16:	4604      	mov	r4, r0
 8032c18:	b930      	cbnz	r0, 8032c28 <__d2b+0x24>
 8032c1a:	4602      	mov	r2, r0
 8032c1c:	4b23      	ldr	r3, [pc, #140]	@ (8032cac <__d2b+0xa8>)
 8032c1e:	4824      	ldr	r0, [pc, #144]	@ (8032cb0 <__d2b+0xac>)
 8032c20:	f240 310f 	movw	r1, #783	@ 0x30f
 8032c24:	f7f6 f99a 	bl	8028f5c <__assert_func>
 8032c28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8032c2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8032c30:	b10d      	cbz	r5, 8032c36 <__d2b+0x32>
 8032c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8032c36:	9301      	str	r3, [sp, #4]
 8032c38:	f1b8 0300 	subs.w	r3, r8, #0
 8032c3c:	d023      	beq.n	8032c86 <__d2b+0x82>
 8032c3e:	4668      	mov	r0, sp
 8032c40:	9300      	str	r3, [sp, #0]
 8032c42:	f7ff fd26 	bl	8032692 <__lo0bits>
 8032c46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8032c4a:	b1d0      	cbz	r0, 8032c82 <__d2b+0x7e>
 8032c4c:	f1c0 0320 	rsb	r3, r0, #32
 8032c50:	fa02 f303 	lsl.w	r3, r2, r3
 8032c54:	430b      	orrs	r3, r1
 8032c56:	40c2      	lsrs	r2, r0
 8032c58:	6163      	str	r3, [r4, #20]
 8032c5a:	9201      	str	r2, [sp, #4]
 8032c5c:	9b01      	ldr	r3, [sp, #4]
 8032c5e:	61a3      	str	r3, [r4, #24]
 8032c60:	2b00      	cmp	r3, #0
 8032c62:	bf0c      	ite	eq
 8032c64:	2201      	moveq	r2, #1
 8032c66:	2202      	movne	r2, #2
 8032c68:	6122      	str	r2, [r4, #16]
 8032c6a:	b1a5      	cbz	r5, 8032c96 <__d2b+0x92>
 8032c6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8032c70:	4405      	add	r5, r0
 8032c72:	603d      	str	r5, [r7, #0]
 8032c74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8032c78:	6030      	str	r0, [r6, #0]
 8032c7a:	4620      	mov	r0, r4
 8032c7c:	b003      	add	sp, #12
 8032c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8032c82:	6161      	str	r1, [r4, #20]
 8032c84:	e7ea      	b.n	8032c5c <__d2b+0x58>
 8032c86:	a801      	add	r0, sp, #4
 8032c88:	f7ff fd03 	bl	8032692 <__lo0bits>
 8032c8c:	9b01      	ldr	r3, [sp, #4]
 8032c8e:	6163      	str	r3, [r4, #20]
 8032c90:	3020      	adds	r0, #32
 8032c92:	2201      	movs	r2, #1
 8032c94:	e7e8      	b.n	8032c68 <__d2b+0x64>
 8032c96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8032c9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8032c9e:	6038      	str	r0, [r7, #0]
 8032ca0:	6918      	ldr	r0, [r3, #16]
 8032ca2:	f7ff fcd7 	bl	8032654 <__hi0bits>
 8032ca6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8032caa:	e7e5      	b.n	8032c78 <__d2b+0x74>
 8032cac:	0803abca 	.word	0x0803abca
 8032cb0:	0803acbe 	.word	0x0803acbe

08032cb4 <__ratio>:
 8032cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032cb8:	b085      	sub	sp, #20
 8032cba:	e9cd 1000 	strd	r1, r0, [sp]
 8032cbe:	a902      	add	r1, sp, #8
 8032cc0:	f7ff ff56 	bl	8032b70 <__b2d>
 8032cc4:	9800      	ldr	r0, [sp, #0]
 8032cc6:	a903      	add	r1, sp, #12
 8032cc8:	ec55 4b10 	vmov	r4, r5, d0
 8032ccc:	f7ff ff50 	bl	8032b70 <__b2d>
 8032cd0:	9b01      	ldr	r3, [sp, #4]
 8032cd2:	6919      	ldr	r1, [r3, #16]
 8032cd4:	9b00      	ldr	r3, [sp, #0]
 8032cd6:	691b      	ldr	r3, [r3, #16]
 8032cd8:	1ac9      	subs	r1, r1, r3
 8032cda:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8032cde:	1a9b      	subs	r3, r3, r2
 8032ce0:	ec5b ab10 	vmov	sl, fp, d0
 8032ce4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8032ce8:	2b00      	cmp	r3, #0
 8032cea:	bfce      	itee	gt
 8032cec:	462a      	movgt	r2, r5
 8032cee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8032cf2:	465a      	movle	r2, fp
 8032cf4:	462f      	mov	r7, r5
 8032cf6:	46d9      	mov	r9, fp
 8032cf8:	bfcc      	ite	gt
 8032cfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8032cfe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8032d02:	464b      	mov	r3, r9
 8032d04:	4652      	mov	r2, sl
 8032d06:	4620      	mov	r0, r4
 8032d08:	4639      	mov	r1, r7
 8032d0a:	f7dd fdb7 	bl	801087c <__aeabi_ddiv>
 8032d0e:	ec41 0b10 	vmov	d0, r0, r1
 8032d12:	b005      	add	sp, #20
 8032d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08032d18 <__copybits>:
 8032d18:	3901      	subs	r1, #1
 8032d1a:	b570      	push	{r4, r5, r6, lr}
 8032d1c:	1149      	asrs	r1, r1, #5
 8032d1e:	6914      	ldr	r4, [r2, #16]
 8032d20:	3101      	adds	r1, #1
 8032d22:	f102 0314 	add.w	r3, r2, #20
 8032d26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8032d2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8032d2e:	1f05      	subs	r5, r0, #4
 8032d30:	42a3      	cmp	r3, r4
 8032d32:	d30c      	bcc.n	8032d4e <__copybits+0x36>
 8032d34:	1aa3      	subs	r3, r4, r2
 8032d36:	3b11      	subs	r3, #17
 8032d38:	f023 0303 	bic.w	r3, r3, #3
 8032d3c:	3211      	adds	r2, #17
 8032d3e:	42a2      	cmp	r2, r4
 8032d40:	bf88      	it	hi
 8032d42:	2300      	movhi	r3, #0
 8032d44:	4418      	add	r0, r3
 8032d46:	2300      	movs	r3, #0
 8032d48:	4288      	cmp	r0, r1
 8032d4a:	d305      	bcc.n	8032d58 <__copybits+0x40>
 8032d4c:	bd70      	pop	{r4, r5, r6, pc}
 8032d4e:	f853 6b04 	ldr.w	r6, [r3], #4
 8032d52:	f845 6f04 	str.w	r6, [r5, #4]!
 8032d56:	e7eb      	b.n	8032d30 <__copybits+0x18>
 8032d58:	f840 3b04 	str.w	r3, [r0], #4
 8032d5c:	e7f4      	b.n	8032d48 <__copybits+0x30>

08032d5e <__any_on>:
 8032d5e:	f100 0214 	add.w	r2, r0, #20
 8032d62:	6900      	ldr	r0, [r0, #16]
 8032d64:	114b      	asrs	r3, r1, #5
 8032d66:	4298      	cmp	r0, r3
 8032d68:	b510      	push	{r4, lr}
 8032d6a:	db11      	blt.n	8032d90 <__any_on+0x32>
 8032d6c:	dd0a      	ble.n	8032d84 <__any_on+0x26>
 8032d6e:	f011 011f 	ands.w	r1, r1, #31
 8032d72:	d007      	beq.n	8032d84 <__any_on+0x26>
 8032d74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8032d78:	fa24 f001 	lsr.w	r0, r4, r1
 8032d7c:	fa00 f101 	lsl.w	r1, r0, r1
 8032d80:	428c      	cmp	r4, r1
 8032d82:	d10b      	bne.n	8032d9c <__any_on+0x3e>
 8032d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8032d88:	4293      	cmp	r3, r2
 8032d8a:	d803      	bhi.n	8032d94 <__any_on+0x36>
 8032d8c:	2000      	movs	r0, #0
 8032d8e:	bd10      	pop	{r4, pc}
 8032d90:	4603      	mov	r3, r0
 8032d92:	e7f7      	b.n	8032d84 <__any_on+0x26>
 8032d94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8032d98:	2900      	cmp	r1, #0
 8032d9a:	d0f5      	beq.n	8032d88 <__any_on+0x2a>
 8032d9c:	2001      	movs	r0, #1
 8032d9e:	e7f6      	b.n	8032d8e <__any_on+0x30>

08032da0 <realloc>:
 8032da0:	4b02      	ldr	r3, [pc, #8]	@ (8032dac <realloc+0xc>)
 8032da2:	460a      	mov	r2, r1
 8032da4:	4601      	mov	r1, r0
 8032da6:	6818      	ldr	r0, [r3, #0]
 8032da8:	f000 b890 	b.w	8032ecc <_realloc_r>
 8032dac:	20000254 	.word	0x20000254

08032db0 <_fclose_r>:
 8032db0:	b570      	push	{r4, r5, r6, lr}
 8032db2:	4605      	mov	r5, r0
 8032db4:	460c      	mov	r4, r1
 8032db6:	b1b1      	cbz	r1, 8032de6 <_fclose_r+0x36>
 8032db8:	b118      	cbz	r0, 8032dc2 <_fclose_r+0x12>
 8032dba:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8032dbc:	b90b      	cbnz	r3, 8032dc2 <_fclose_r+0x12>
 8032dbe:	f7f8 fb79 	bl	802b4b4 <__sinit>
 8032dc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8032dc4:	07de      	lsls	r6, r3, #31
 8032dc6:	d405      	bmi.n	8032dd4 <_fclose_r+0x24>
 8032dc8:	89a3      	ldrh	r3, [r4, #12]
 8032dca:	0598      	lsls	r0, r3, #22
 8032dcc:	d402      	bmi.n	8032dd4 <_fclose_r+0x24>
 8032dce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8032dd0:	f7fa f84f 	bl	802ce72 <__retarget_lock_acquire_recursive>
 8032dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032dd8:	b943      	cbnz	r3, 8032dec <_fclose_r+0x3c>
 8032dda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8032ddc:	07d9      	lsls	r1, r3, #31
 8032dde:	d402      	bmi.n	8032de6 <_fclose_r+0x36>
 8032de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8032de2:	f7fa f848 	bl	802ce76 <__retarget_lock_release_recursive>
 8032de6:	2600      	movs	r6, #0
 8032de8:	4630      	mov	r0, r6
 8032dea:	bd70      	pop	{r4, r5, r6, pc}
 8032dec:	4621      	mov	r1, r4
 8032dee:	4628      	mov	r0, r5
 8032df0:	f7f8 f996 	bl	802b120 <__sflush_r>
 8032df4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8032df6:	4606      	mov	r6, r0
 8032df8:	b133      	cbz	r3, 8032e08 <_fclose_r+0x58>
 8032dfa:	69e1      	ldr	r1, [r4, #28]
 8032dfc:	4628      	mov	r0, r5
 8032dfe:	4798      	blx	r3
 8032e00:	2800      	cmp	r0, #0
 8032e02:	bfb8      	it	lt
 8032e04:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8032e08:	89a3      	ldrh	r3, [r4, #12]
 8032e0a:	061a      	lsls	r2, r3, #24
 8032e0c:	d503      	bpl.n	8032e16 <_fclose_r+0x66>
 8032e0e:	6921      	ldr	r1, [r4, #16]
 8032e10:	4628      	mov	r0, r5
 8032e12:	f7fa ff33 	bl	802dc7c <_free_r>
 8032e16:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8032e18:	b141      	cbz	r1, 8032e2c <_fclose_r+0x7c>
 8032e1a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8032e1e:	4299      	cmp	r1, r3
 8032e20:	d002      	beq.n	8032e28 <_fclose_r+0x78>
 8032e22:	4628      	mov	r0, r5
 8032e24:	f7fa ff2a 	bl	802dc7c <_free_r>
 8032e28:	2300      	movs	r3, #0
 8032e2a:	6323      	str	r3, [r4, #48]	@ 0x30
 8032e2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8032e2e:	b121      	cbz	r1, 8032e3a <_fclose_r+0x8a>
 8032e30:	4628      	mov	r0, r5
 8032e32:	f7fa ff23 	bl	802dc7c <_free_r>
 8032e36:	2300      	movs	r3, #0
 8032e38:	6463      	str	r3, [r4, #68]	@ 0x44
 8032e3a:	f7f8 fb2f 	bl	802b49c <__sfp_lock_acquire>
 8032e3e:	2300      	movs	r3, #0
 8032e40:	81a3      	strh	r3, [r4, #12]
 8032e42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8032e44:	07db      	lsls	r3, r3, #31
 8032e46:	d402      	bmi.n	8032e4e <_fclose_r+0x9e>
 8032e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8032e4a:	f7fa f814 	bl	802ce76 <__retarget_lock_release_recursive>
 8032e4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8032e50:	f7fa f80d 	bl	802ce6e <__retarget_lock_close_recursive>
 8032e54:	f7f8 fb28 	bl	802b4a8 <__sfp_lock_release>
 8032e58:	e7c6      	b.n	8032de8 <_fclose_r+0x38>

08032e5a <__sccl>:
 8032e5a:	b570      	push	{r4, r5, r6, lr}
 8032e5c:	780b      	ldrb	r3, [r1, #0]
 8032e5e:	4604      	mov	r4, r0
 8032e60:	2b5e      	cmp	r3, #94	@ 0x5e
 8032e62:	bf0b      	itete	eq
 8032e64:	784b      	ldrbeq	r3, [r1, #1]
 8032e66:	1c4a      	addne	r2, r1, #1
 8032e68:	1c8a      	addeq	r2, r1, #2
 8032e6a:	2100      	movne	r1, #0
 8032e6c:	bf08      	it	eq
 8032e6e:	2101      	moveq	r1, #1
 8032e70:	3801      	subs	r0, #1
 8032e72:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8032e76:	f800 1f01 	strb.w	r1, [r0, #1]!
 8032e7a:	42a8      	cmp	r0, r5
 8032e7c:	d1fb      	bne.n	8032e76 <__sccl+0x1c>
 8032e7e:	b90b      	cbnz	r3, 8032e84 <__sccl+0x2a>
 8032e80:	1e50      	subs	r0, r2, #1
 8032e82:	bd70      	pop	{r4, r5, r6, pc}
 8032e84:	f081 0101 	eor.w	r1, r1, #1
 8032e88:	54e1      	strb	r1, [r4, r3]
 8032e8a:	4610      	mov	r0, r2
 8032e8c:	4602      	mov	r2, r0
 8032e8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8032e92:	2d2d      	cmp	r5, #45	@ 0x2d
 8032e94:	d005      	beq.n	8032ea2 <__sccl+0x48>
 8032e96:	2d5d      	cmp	r5, #93	@ 0x5d
 8032e98:	d016      	beq.n	8032ec8 <__sccl+0x6e>
 8032e9a:	2d00      	cmp	r5, #0
 8032e9c:	d0f1      	beq.n	8032e82 <__sccl+0x28>
 8032e9e:	462b      	mov	r3, r5
 8032ea0:	e7f2      	b.n	8032e88 <__sccl+0x2e>
 8032ea2:	7846      	ldrb	r6, [r0, #1]
 8032ea4:	2e5d      	cmp	r6, #93	@ 0x5d
 8032ea6:	d0fa      	beq.n	8032e9e <__sccl+0x44>
 8032ea8:	42b3      	cmp	r3, r6
 8032eaa:	dcf8      	bgt.n	8032e9e <__sccl+0x44>
 8032eac:	3002      	adds	r0, #2
 8032eae:	461a      	mov	r2, r3
 8032eb0:	3201      	adds	r2, #1
 8032eb2:	4296      	cmp	r6, r2
 8032eb4:	54a1      	strb	r1, [r4, r2]
 8032eb6:	dcfb      	bgt.n	8032eb0 <__sccl+0x56>
 8032eb8:	1af2      	subs	r2, r6, r3
 8032eba:	3a01      	subs	r2, #1
 8032ebc:	1c5d      	adds	r5, r3, #1
 8032ebe:	42b3      	cmp	r3, r6
 8032ec0:	bfa8      	it	ge
 8032ec2:	2200      	movge	r2, #0
 8032ec4:	18ab      	adds	r3, r5, r2
 8032ec6:	e7e1      	b.n	8032e8c <__sccl+0x32>
 8032ec8:	4610      	mov	r0, r2
 8032eca:	e7da      	b.n	8032e82 <__sccl+0x28>

08032ecc <_realloc_r>:
 8032ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032ed0:	4682      	mov	sl, r0
 8032ed2:	4693      	mov	fp, r2
 8032ed4:	460c      	mov	r4, r1
 8032ed6:	b929      	cbnz	r1, 8032ee4 <_realloc_r+0x18>
 8032ed8:	4611      	mov	r1, r2
 8032eda:	b003      	add	sp, #12
 8032edc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032ee0:	f7fa bfe4 	b.w	802deac <_malloc_r>
 8032ee4:	f7ff faec 	bl	80324c0 <__malloc_lock>
 8032ee8:	f10b 080b 	add.w	r8, fp, #11
 8032eec:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8032ef0:	f1b8 0f16 	cmp.w	r8, #22
 8032ef4:	f1a4 0908 	sub.w	r9, r4, #8
 8032ef8:	f025 0603 	bic.w	r6, r5, #3
 8032efc:	d908      	bls.n	8032f10 <_realloc_r+0x44>
 8032efe:	f038 0807 	bics.w	r8, r8, #7
 8032f02:	d507      	bpl.n	8032f14 <_realloc_r+0x48>
 8032f04:	230c      	movs	r3, #12
 8032f06:	f8ca 3000 	str.w	r3, [sl]
 8032f0a:	f04f 0b00 	mov.w	fp, #0
 8032f0e:	e032      	b.n	8032f76 <_realloc_r+0xaa>
 8032f10:	f04f 0810 	mov.w	r8, #16
 8032f14:	45c3      	cmp	fp, r8
 8032f16:	d8f5      	bhi.n	8032f04 <_realloc_r+0x38>
 8032f18:	4546      	cmp	r6, r8
 8032f1a:	f280 8174 	bge.w	8033206 <_realloc_r+0x33a>
 8032f1e:	4b9e      	ldr	r3, [pc, #632]	@ (8033198 <_realloc_r+0x2cc>)
 8032f20:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8032f24:	eb09 0106 	add.w	r1, r9, r6
 8032f28:	458c      	cmp	ip, r1
 8032f2a:	6848      	ldr	r0, [r1, #4]
 8032f2c:	d005      	beq.n	8032f3a <_realloc_r+0x6e>
 8032f2e:	f020 0201 	bic.w	r2, r0, #1
 8032f32:	440a      	add	r2, r1
 8032f34:	6852      	ldr	r2, [r2, #4]
 8032f36:	07d7      	lsls	r7, r2, #31
 8032f38:	d449      	bmi.n	8032fce <_realloc_r+0x102>
 8032f3a:	f020 0003 	bic.w	r0, r0, #3
 8032f3e:	458c      	cmp	ip, r1
 8032f40:	eb06 0700 	add.w	r7, r6, r0
 8032f44:	d11b      	bne.n	8032f7e <_realloc_r+0xb2>
 8032f46:	f108 0210 	add.w	r2, r8, #16
 8032f4a:	42ba      	cmp	r2, r7
 8032f4c:	dc41      	bgt.n	8032fd2 <_realloc_r+0x106>
 8032f4e:	eb09 0208 	add.w	r2, r9, r8
 8032f52:	eba7 0708 	sub.w	r7, r7, r8
 8032f56:	f047 0701 	orr.w	r7, r7, #1
 8032f5a:	609a      	str	r2, [r3, #8]
 8032f5c:	6057      	str	r7, [r2, #4]
 8032f5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8032f62:	f003 0301 	and.w	r3, r3, #1
 8032f66:	ea43 0308 	orr.w	r3, r3, r8
 8032f6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8032f6e:	4650      	mov	r0, sl
 8032f70:	f7ff faac 	bl	80324cc <__malloc_unlock>
 8032f74:	46a3      	mov	fp, r4
 8032f76:	4658      	mov	r0, fp
 8032f78:	b003      	add	sp, #12
 8032f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032f7e:	45b8      	cmp	r8, r7
 8032f80:	dc27      	bgt.n	8032fd2 <_realloc_r+0x106>
 8032f82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8032f86:	60d3      	str	r3, [r2, #12]
 8032f88:	609a      	str	r2, [r3, #8]
 8032f8a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8032f8e:	eba7 0008 	sub.w	r0, r7, r8
 8032f92:	280f      	cmp	r0, #15
 8032f94:	f003 0301 	and.w	r3, r3, #1
 8032f98:	eb09 0207 	add.w	r2, r9, r7
 8032f9c:	f240 8135 	bls.w	803320a <_realloc_r+0x33e>
 8032fa0:	eb09 0108 	add.w	r1, r9, r8
 8032fa4:	ea48 0303 	orr.w	r3, r8, r3
 8032fa8:	f040 0001 	orr.w	r0, r0, #1
 8032fac:	f8c9 3004 	str.w	r3, [r9, #4]
 8032fb0:	6048      	str	r0, [r1, #4]
 8032fb2:	6853      	ldr	r3, [r2, #4]
 8032fb4:	f043 0301 	orr.w	r3, r3, #1
 8032fb8:	6053      	str	r3, [r2, #4]
 8032fba:	3108      	adds	r1, #8
 8032fbc:	4650      	mov	r0, sl
 8032fbe:	f7fa fe5d 	bl	802dc7c <_free_r>
 8032fc2:	4650      	mov	r0, sl
 8032fc4:	f7ff fa82 	bl	80324cc <__malloc_unlock>
 8032fc8:	f109 0b08 	add.w	fp, r9, #8
 8032fcc:	e7d3      	b.n	8032f76 <_realloc_r+0xaa>
 8032fce:	2000      	movs	r0, #0
 8032fd0:	4601      	mov	r1, r0
 8032fd2:	07ea      	lsls	r2, r5, #31
 8032fd4:	f100 80c7 	bmi.w	8033166 <_realloc_r+0x29a>
 8032fd8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8032fdc:	eba9 0505 	sub.w	r5, r9, r5
 8032fe0:	686a      	ldr	r2, [r5, #4]
 8032fe2:	f022 0203 	bic.w	r2, r2, #3
 8032fe6:	4432      	add	r2, r6
 8032fe8:	9201      	str	r2, [sp, #4]
 8032fea:	2900      	cmp	r1, #0
 8032fec:	f000 8086 	beq.w	80330fc <_realloc_r+0x230>
 8032ff0:	458c      	cmp	ip, r1
 8032ff2:	eb00 0702 	add.w	r7, r0, r2
 8032ff6:	d149      	bne.n	803308c <_realloc_r+0x1c0>
 8032ff8:	f108 0210 	add.w	r2, r8, #16
 8032ffc:	42ba      	cmp	r2, r7
 8032ffe:	dc7d      	bgt.n	80330fc <_realloc_r+0x230>
 8033000:	46ab      	mov	fp, r5
 8033002:	68ea      	ldr	r2, [r5, #12]
 8033004:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8033008:	60ca      	str	r2, [r1, #12]
 803300a:	6091      	str	r1, [r2, #8]
 803300c:	1f32      	subs	r2, r6, #4
 803300e:	2a24      	cmp	r2, #36	@ 0x24
 8033010:	d836      	bhi.n	8033080 <_realloc_r+0x1b4>
 8033012:	2a13      	cmp	r2, #19
 8033014:	d932      	bls.n	803307c <_realloc_r+0x1b0>
 8033016:	6821      	ldr	r1, [r4, #0]
 8033018:	60a9      	str	r1, [r5, #8]
 803301a:	6861      	ldr	r1, [r4, #4]
 803301c:	60e9      	str	r1, [r5, #12]
 803301e:	2a1b      	cmp	r2, #27
 8033020:	d81a      	bhi.n	8033058 <_realloc_r+0x18c>
 8033022:	3408      	adds	r4, #8
 8033024:	f105 0210 	add.w	r2, r5, #16
 8033028:	6821      	ldr	r1, [r4, #0]
 803302a:	6011      	str	r1, [r2, #0]
 803302c:	6861      	ldr	r1, [r4, #4]
 803302e:	6051      	str	r1, [r2, #4]
 8033030:	68a1      	ldr	r1, [r4, #8]
 8033032:	6091      	str	r1, [r2, #8]
 8033034:	eb05 0208 	add.w	r2, r5, r8
 8033038:	eba7 0708 	sub.w	r7, r7, r8
 803303c:	f047 0701 	orr.w	r7, r7, #1
 8033040:	609a      	str	r2, [r3, #8]
 8033042:	6057      	str	r7, [r2, #4]
 8033044:	686b      	ldr	r3, [r5, #4]
 8033046:	f003 0301 	and.w	r3, r3, #1
 803304a:	ea43 0308 	orr.w	r3, r3, r8
 803304e:	606b      	str	r3, [r5, #4]
 8033050:	4650      	mov	r0, sl
 8033052:	f7ff fa3b 	bl	80324cc <__malloc_unlock>
 8033056:	e78e      	b.n	8032f76 <_realloc_r+0xaa>
 8033058:	68a1      	ldr	r1, [r4, #8]
 803305a:	6129      	str	r1, [r5, #16]
 803305c:	68e1      	ldr	r1, [r4, #12]
 803305e:	6169      	str	r1, [r5, #20]
 8033060:	2a24      	cmp	r2, #36	@ 0x24
 8033062:	bf01      	itttt	eq
 8033064:	6922      	ldreq	r2, [r4, #16]
 8033066:	61aa      	streq	r2, [r5, #24]
 8033068:	6961      	ldreq	r1, [r4, #20]
 803306a:	61e9      	streq	r1, [r5, #28]
 803306c:	bf19      	ittee	ne
 803306e:	3410      	addne	r4, #16
 8033070:	f105 0218 	addne.w	r2, r5, #24
 8033074:	f105 0220 	addeq.w	r2, r5, #32
 8033078:	3418      	addeq	r4, #24
 803307a:	e7d5      	b.n	8033028 <_realloc_r+0x15c>
 803307c:	465a      	mov	r2, fp
 803307e:	e7d3      	b.n	8033028 <_realloc_r+0x15c>
 8033080:	4621      	mov	r1, r4
 8033082:	4658      	mov	r0, fp
 8033084:	f7f8 fca2 	bl	802b9cc <memmove>
 8033088:	4b43      	ldr	r3, [pc, #268]	@ (8033198 <_realloc_r+0x2cc>)
 803308a:	e7d3      	b.n	8033034 <_realloc_r+0x168>
 803308c:	45b8      	cmp	r8, r7
 803308e:	dc35      	bgt.n	80330fc <_realloc_r+0x230>
 8033090:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8033094:	4628      	mov	r0, r5
 8033096:	60d3      	str	r3, [r2, #12]
 8033098:	609a      	str	r2, [r3, #8]
 803309a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803309e:	68eb      	ldr	r3, [r5, #12]
 80330a0:	60d3      	str	r3, [r2, #12]
 80330a2:	609a      	str	r2, [r3, #8]
 80330a4:	1f32      	subs	r2, r6, #4
 80330a6:	2a24      	cmp	r2, #36	@ 0x24
 80330a8:	d824      	bhi.n	80330f4 <_realloc_r+0x228>
 80330aa:	2a13      	cmp	r2, #19
 80330ac:	d908      	bls.n	80330c0 <_realloc_r+0x1f4>
 80330ae:	6823      	ldr	r3, [r4, #0]
 80330b0:	60ab      	str	r3, [r5, #8]
 80330b2:	6863      	ldr	r3, [r4, #4]
 80330b4:	60eb      	str	r3, [r5, #12]
 80330b6:	2a1b      	cmp	r2, #27
 80330b8:	d80a      	bhi.n	80330d0 <_realloc_r+0x204>
 80330ba:	3408      	adds	r4, #8
 80330bc:	f105 0010 	add.w	r0, r5, #16
 80330c0:	6823      	ldr	r3, [r4, #0]
 80330c2:	6003      	str	r3, [r0, #0]
 80330c4:	6863      	ldr	r3, [r4, #4]
 80330c6:	6043      	str	r3, [r0, #4]
 80330c8:	68a3      	ldr	r3, [r4, #8]
 80330ca:	6083      	str	r3, [r0, #8]
 80330cc:	46a9      	mov	r9, r5
 80330ce:	e75c      	b.n	8032f8a <_realloc_r+0xbe>
 80330d0:	68a3      	ldr	r3, [r4, #8]
 80330d2:	612b      	str	r3, [r5, #16]
 80330d4:	68e3      	ldr	r3, [r4, #12]
 80330d6:	616b      	str	r3, [r5, #20]
 80330d8:	2a24      	cmp	r2, #36	@ 0x24
 80330da:	bf01      	itttt	eq
 80330dc:	6923      	ldreq	r3, [r4, #16]
 80330de:	61ab      	streq	r3, [r5, #24]
 80330e0:	6963      	ldreq	r3, [r4, #20]
 80330e2:	61eb      	streq	r3, [r5, #28]
 80330e4:	bf19      	ittee	ne
 80330e6:	3410      	addne	r4, #16
 80330e8:	f105 0018 	addne.w	r0, r5, #24
 80330ec:	f105 0020 	addeq.w	r0, r5, #32
 80330f0:	3418      	addeq	r4, #24
 80330f2:	e7e5      	b.n	80330c0 <_realloc_r+0x1f4>
 80330f4:	4621      	mov	r1, r4
 80330f6:	f7f8 fc69 	bl	802b9cc <memmove>
 80330fa:	e7e7      	b.n	80330cc <_realloc_r+0x200>
 80330fc:	9b01      	ldr	r3, [sp, #4]
 80330fe:	4598      	cmp	r8, r3
 8033100:	dc31      	bgt.n	8033166 <_realloc_r+0x29a>
 8033102:	4628      	mov	r0, r5
 8033104:	68eb      	ldr	r3, [r5, #12]
 8033106:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803310a:	60d3      	str	r3, [r2, #12]
 803310c:	609a      	str	r2, [r3, #8]
 803310e:	1f32      	subs	r2, r6, #4
 8033110:	2a24      	cmp	r2, #36	@ 0x24
 8033112:	d824      	bhi.n	803315e <_realloc_r+0x292>
 8033114:	2a13      	cmp	r2, #19
 8033116:	d908      	bls.n	803312a <_realloc_r+0x25e>
 8033118:	6823      	ldr	r3, [r4, #0]
 803311a:	60ab      	str	r3, [r5, #8]
 803311c:	6863      	ldr	r3, [r4, #4]
 803311e:	60eb      	str	r3, [r5, #12]
 8033120:	2a1b      	cmp	r2, #27
 8033122:	d80a      	bhi.n	803313a <_realloc_r+0x26e>
 8033124:	3408      	adds	r4, #8
 8033126:	f105 0010 	add.w	r0, r5, #16
 803312a:	6823      	ldr	r3, [r4, #0]
 803312c:	6003      	str	r3, [r0, #0]
 803312e:	6863      	ldr	r3, [r4, #4]
 8033130:	6043      	str	r3, [r0, #4]
 8033132:	68a3      	ldr	r3, [r4, #8]
 8033134:	6083      	str	r3, [r0, #8]
 8033136:	9f01      	ldr	r7, [sp, #4]
 8033138:	e7c8      	b.n	80330cc <_realloc_r+0x200>
 803313a:	68a3      	ldr	r3, [r4, #8]
 803313c:	612b      	str	r3, [r5, #16]
 803313e:	68e3      	ldr	r3, [r4, #12]
 8033140:	616b      	str	r3, [r5, #20]
 8033142:	2a24      	cmp	r2, #36	@ 0x24
 8033144:	bf01      	itttt	eq
 8033146:	6923      	ldreq	r3, [r4, #16]
 8033148:	61ab      	streq	r3, [r5, #24]
 803314a:	6963      	ldreq	r3, [r4, #20]
 803314c:	61eb      	streq	r3, [r5, #28]
 803314e:	bf19      	ittee	ne
 8033150:	3410      	addne	r4, #16
 8033152:	f105 0018 	addne.w	r0, r5, #24
 8033156:	f105 0020 	addeq.w	r0, r5, #32
 803315a:	3418      	addeq	r4, #24
 803315c:	e7e5      	b.n	803312a <_realloc_r+0x25e>
 803315e:	4621      	mov	r1, r4
 8033160:	f7f8 fc34 	bl	802b9cc <memmove>
 8033164:	e7e7      	b.n	8033136 <_realloc_r+0x26a>
 8033166:	4659      	mov	r1, fp
 8033168:	4650      	mov	r0, sl
 803316a:	f7fa fe9f 	bl	802deac <_malloc_r>
 803316e:	4683      	mov	fp, r0
 8033170:	b918      	cbnz	r0, 803317a <_realloc_r+0x2ae>
 8033172:	4650      	mov	r0, sl
 8033174:	f7ff f9aa 	bl	80324cc <__malloc_unlock>
 8033178:	e6c7      	b.n	8032f0a <_realloc_r+0x3e>
 803317a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803317e:	f023 0301 	bic.w	r3, r3, #1
 8033182:	444b      	add	r3, r9
 8033184:	f1a0 0208 	sub.w	r2, r0, #8
 8033188:	4293      	cmp	r3, r2
 803318a:	d107      	bne.n	803319c <_realloc_r+0x2d0>
 803318c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8033190:	f027 0703 	bic.w	r7, r7, #3
 8033194:	4437      	add	r7, r6
 8033196:	e6f8      	b.n	8032f8a <_realloc_r+0xbe>
 8033198:	20000384 	.word	0x20000384
 803319c:	1f32      	subs	r2, r6, #4
 803319e:	2a24      	cmp	r2, #36	@ 0x24
 80331a0:	d82d      	bhi.n	80331fe <_realloc_r+0x332>
 80331a2:	2a13      	cmp	r2, #19
 80331a4:	d928      	bls.n	80331f8 <_realloc_r+0x32c>
 80331a6:	6823      	ldr	r3, [r4, #0]
 80331a8:	6003      	str	r3, [r0, #0]
 80331aa:	6863      	ldr	r3, [r4, #4]
 80331ac:	6043      	str	r3, [r0, #4]
 80331ae:	2a1b      	cmp	r2, #27
 80331b0:	d80e      	bhi.n	80331d0 <_realloc_r+0x304>
 80331b2:	f104 0208 	add.w	r2, r4, #8
 80331b6:	f100 0308 	add.w	r3, r0, #8
 80331ba:	6811      	ldr	r1, [r2, #0]
 80331bc:	6019      	str	r1, [r3, #0]
 80331be:	6851      	ldr	r1, [r2, #4]
 80331c0:	6059      	str	r1, [r3, #4]
 80331c2:	6892      	ldr	r2, [r2, #8]
 80331c4:	609a      	str	r2, [r3, #8]
 80331c6:	4621      	mov	r1, r4
 80331c8:	4650      	mov	r0, sl
 80331ca:	f7fa fd57 	bl	802dc7c <_free_r>
 80331ce:	e73f      	b.n	8033050 <_realloc_r+0x184>
 80331d0:	68a3      	ldr	r3, [r4, #8]
 80331d2:	6083      	str	r3, [r0, #8]
 80331d4:	68e3      	ldr	r3, [r4, #12]
 80331d6:	60c3      	str	r3, [r0, #12]
 80331d8:	2a24      	cmp	r2, #36	@ 0x24
 80331da:	bf01      	itttt	eq
 80331dc:	6923      	ldreq	r3, [r4, #16]
 80331de:	6103      	streq	r3, [r0, #16]
 80331e0:	6961      	ldreq	r1, [r4, #20]
 80331e2:	6141      	streq	r1, [r0, #20]
 80331e4:	bf19      	ittee	ne
 80331e6:	f104 0210 	addne.w	r2, r4, #16
 80331ea:	f100 0310 	addne.w	r3, r0, #16
 80331ee:	f104 0218 	addeq.w	r2, r4, #24
 80331f2:	f100 0318 	addeq.w	r3, r0, #24
 80331f6:	e7e0      	b.n	80331ba <_realloc_r+0x2ee>
 80331f8:	4603      	mov	r3, r0
 80331fa:	4622      	mov	r2, r4
 80331fc:	e7dd      	b.n	80331ba <_realloc_r+0x2ee>
 80331fe:	4621      	mov	r1, r4
 8033200:	f7f8 fbe4 	bl	802b9cc <memmove>
 8033204:	e7df      	b.n	80331c6 <_realloc_r+0x2fa>
 8033206:	4637      	mov	r7, r6
 8033208:	e6bf      	b.n	8032f8a <_realloc_r+0xbe>
 803320a:	431f      	orrs	r7, r3
 803320c:	f8c9 7004 	str.w	r7, [r9, #4]
 8033210:	6853      	ldr	r3, [r2, #4]
 8033212:	f043 0301 	orr.w	r3, r3, #1
 8033216:	6053      	str	r3, [r2, #4]
 8033218:	e6d3      	b.n	8032fc2 <_realloc_r+0xf6>
 803321a:	bf00      	nop

0803321c <sulp>:
 803321c:	b570      	push	{r4, r5, r6, lr}
 803321e:	4604      	mov	r4, r0
 8033220:	460d      	mov	r5, r1
 8033222:	ec45 4b10 	vmov	d0, r4, r5
 8033226:	4616      	mov	r6, r2
 8033228:	f7ff fc7c 	bl	8032b24 <__ulp>
 803322c:	ec51 0b10 	vmov	r0, r1, d0
 8033230:	b17e      	cbz	r6, 8033252 <sulp+0x36>
 8033232:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8033236:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803323a:	2b00      	cmp	r3, #0
 803323c:	dd09      	ble.n	8033252 <sulp+0x36>
 803323e:	051b      	lsls	r3, r3, #20
 8033240:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8033244:	2400      	movs	r4, #0
 8033246:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 803324a:	4622      	mov	r2, r4
 803324c:	462b      	mov	r3, r5
 803324e:	f7dd f9eb 	bl	8010628 <__aeabi_dmul>
 8033252:	ec41 0b10 	vmov	d0, r0, r1
 8033256:	bd70      	pop	{r4, r5, r6, pc}

08033258 <_strtod_l>:
 8033258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803325c:	b09f      	sub	sp, #124	@ 0x7c
 803325e:	460c      	mov	r4, r1
 8033260:	9217      	str	r2, [sp, #92]	@ 0x5c
 8033262:	2200      	movs	r2, #0
 8033264:	921a      	str	r2, [sp, #104]	@ 0x68
 8033266:	9005      	str	r0, [sp, #20]
 8033268:	f04f 0a00 	mov.w	sl, #0
 803326c:	f04f 0b00 	mov.w	fp, #0
 8033270:	460a      	mov	r2, r1
 8033272:	9219      	str	r2, [sp, #100]	@ 0x64
 8033274:	7811      	ldrb	r1, [r2, #0]
 8033276:	292b      	cmp	r1, #43	@ 0x2b
 8033278:	d04a      	beq.n	8033310 <_strtod_l+0xb8>
 803327a:	d838      	bhi.n	80332ee <_strtod_l+0x96>
 803327c:	290d      	cmp	r1, #13
 803327e:	d832      	bhi.n	80332e6 <_strtod_l+0x8e>
 8033280:	2908      	cmp	r1, #8
 8033282:	d832      	bhi.n	80332ea <_strtod_l+0x92>
 8033284:	2900      	cmp	r1, #0
 8033286:	d03b      	beq.n	8033300 <_strtod_l+0xa8>
 8033288:	2200      	movs	r2, #0
 803328a:	920b      	str	r2, [sp, #44]	@ 0x2c
 803328c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 803328e:	782a      	ldrb	r2, [r5, #0]
 8033290:	2a30      	cmp	r2, #48	@ 0x30
 8033292:	f040 80b3 	bne.w	80333fc <_strtod_l+0x1a4>
 8033296:	786a      	ldrb	r2, [r5, #1]
 8033298:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803329c:	2a58      	cmp	r2, #88	@ 0x58
 803329e:	d16e      	bne.n	803337e <_strtod_l+0x126>
 80332a0:	9302      	str	r3, [sp, #8]
 80332a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80332a4:	9301      	str	r3, [sp, #4]
 80332a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80332a8:	9300      	str	r3, [sp, #0]
 80332aa:	4a8e      	ldr	r2, [pc, #568]	@ (80334e4 <_strtod_l+0x28c>)
 80332ac:	9805      	ldr	r0, [sp, #20]
 80332ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80332b0:	a919      	add	r1, sp, #100	@ 0x64
 80332b2:	f001 fa51 	bl	8034758 <__gethex>
 80332b6:	f010 060f 	ands.w	r6, r0, #15
 80332ba:	4604      	mov	r4, r0
 80332bc:	d005      	beq.n	80332ca <_strtod_l+0x72>
 80332be:	2e06      	cmp	r6, #6
 80332c0:	d128      	bne.n	8033314 <_strtod_l+0xbc>
 80332c2:	3501      	adds	r5, #1
 80332c4:	2300      	movs	r3, #0
 80332c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80332c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80332ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80332cc:	2b00      	cmp	r3, #0
 80332ce:	f040 858e 	bne.w	8033dee <_strtod_l+0xb96>
 80332d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80332d4:	b1cb      	cbz	r3, 803330a <_strtod_l+0xb2>
 80332d6:	4652      	mov	r2, sl
 80332d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80332dc:	ec43 2b10 	vmov	d0, r2, r3
 80332e0:	b01f      	add	sp, #124	@ 0x7c
 80332e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80332e6:	2920      	cmp	r1, #32
 80332e8:	d1ce      	bne.n	8033288 <_strtod_l+0x30>
 80332ea:	3201      	adds	r2, #1
 80332ec:	e7c1      	b.n	8033272 <_strtod_l+0x1a>
 80332ee:	292d      	cmp	r1, #45	@ 0x2d
 80332f0:	d1ca      	bne.n	8033288 <_strtod_l+0x30>
 80332f2:	2101      	movs	r1, #1
 80332f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80332f6:	1c51      	adds	r1, r2, #1
 80332f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80332fa:	7852      	ldrb	r2, [r2, #1]
 80332fc:	2a00      	cmp	r2, #0
 80332fe:	d1c5      	bne.n	803328c <_strtod_l+0x34>
 8033300:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8033302:	9419      	str	r4, [sp, #100]	@ 0x64
 8033304:	2b00      	cmp	r3, #0
 8033306:	f040 8570 	bne.w	8033dea <_strtod_l+0xb92>
 803330a:	4652      	mov	r2, sl
 803330c:	465b      	mov	r3, fp
 803330e:	e7e5      	b.n	80332dc <_strtod_l+0x84>
 8033310:	2100      	movs	r1, #0
 8033312:	e7ef      	b.n	80332f4 <_strtod_l+0x9c>
 8033314:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8033316:	b13a      	cbz	r2, 8033328 <_strtod_l+0xd0>
 8033318:	2135      	movs	r1, #53	@ 0x35
 803331a:	a81c      	add	r0, sp, #112	@ 0x70
 803331c:	f7ff fcfc 	bl	8032d18 <__copybits>
 8033320:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033322:	9805      	ldr	r0, [sp, #20]
 8033324:	f7ff f8fd 	bl	8032522 <_Bfree>
 8033328:	3e01      	subs	r6, #1
 803332a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 803332c:	2e04      	cmp	r6, #4
 803332e:	d806      	bhi.n	803333e <_strtod_l+0xe6>
 8033330:	e8df f006 	tbb	[pc, r6]
 8033334:	201d0314 	.word	0x201d0314
 8033338:	14          	.byte	0x14
 8033339:	00          	.byte	0x00
 803333a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 803333e:	05e1      	lsls	r1, r4, #23
 8033340:	bf48      	it	mi
 8033342:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8033346:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803334a:	0d1b      	lsrs	r3, r3, #20
 803334c:	051b      	lsls	r3, r3, #20
 803334e:	2b00      	cmp	r3, #0
 8033350:	d1bb      	bne.n	80332ca <_strtod_l+0x72>
 8033352:	f7f9 fd59 	bl	802ce08 <__errno>
 8033356:	2322      	movs	r3, #34	@ 0x22
 8033358:	6003      	str	r3, [r0, #0]
 803335a:	e7b6      	b.n	80332ca <_strtod_l+0x72>
 803335c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8033360:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8033364:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8033368:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803336c:	e7e7      	b.n	803333e <_strtod_l+0xe6>
 803336e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80334ec <_strtod_l+0x294>
 8033372:	e7e4      	b.n	803333e <_strtod_l+0xe6>
 8033374:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8033378:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803337c:	e7df      	b.n	803333e <_strtod_l+0xe6>
 803337e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033380:	1c5a      	adds	r2, r3, #1
 8033382:	9219      	str	r2, [sp, #100]	@ 0x64
 8033384:	785b      	ldrb	r3, [r3, #1]
 8033386:	2b30      	cmp	r3, #48	@ 0x30
 8033388:	d0f9      	beq.n	803337e <_strtod_l+0x126>
 803338a:	2b00      	cmp	r3, #0
 803338c:	d09d      	beq.n	80332ca <_strtod_l+0x72>
 803338e:	2301      	movs	r3, #1
 8033390:	9309      	str	r3, [sp, #36]	@ 0x24
 8033392:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033394:	930c      	str	r3, [sp, #48]	@ 0x30
 8033396:	2300      	movs	r3, #0
 8033398:	9308      	str	r3, [sp, #32]
 803339a:	930a      	str	r3, [sp, #40]	@ 0x28
 803339c:	461f      	mov	r7, r3
 803339e:	220a      	movs	r2, #10
 80333a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80333a2:	7805      	ldrb	r5, [r0, #0]
 80333a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80333a8:	b2d9      	uxtb	r1, r3
 80333aa:	2909      	cmp	r1, #9
 80333ac:	d928      	bls.n	8033400 <_strtod_l+0x1a8>
 80333ae:	494e      	ldr	r1, [pc, #312]	@ (80334e8 <_strtod_l+0x290>)
 80333b0:	2201      	movs	r2, #1
 80333b2:	f7f8 fb5a 	bl	802ba6a <strncmp>
 80333b6:	2800      	cmp	r0, #0
 80333b8:	d032      	beq.n	8033420 <_strtod_l+0x1c8>
 80333ba:	2000      	movs	r0, #0
 80333bc:	462a      	mov	r2, r5
 80333be:	4681      	mov	r9, r0
 80333c0:	463d      	mov	r5, r7
 80333c2:	4603      	mov	r3, r0
 80333c4:	2a65      	cmp	r2, #101	@ 0x65
 80333c6:	d001      	beq.n	80333cc <_strtod_l+0x174>
 80333c8:	2a45      	cmp	r2, #69	@ 0x45
 80333ca:	d114      	bne.n	80333f6 <_strtod_l+0x19e>
 80333cc:	b91d      	cbnz	r5, 80333d6 <_strtod_l+0x17e>
 80333ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80333d0:	4302      	orrs	r2, r0
 80333d2:	d095      	beq.n	8033300 <_strtod_l+0xa8>
 80333d4:	2500      	movs	r5, #0
 80333d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80333d8:	1c62      	adds	r2, r4, #1
 80333da:	9219      	str	r2, [sp, #100]	@ 0x64
 80333dc:	7862      	ldrb	r2, [r4, #1]
 80333de:	2a2b      	cmp	r2, #43	@ 0x2b
 80333e0:	d077      	beq.n	80334d2 <_strtod_l+0x27a>
 80333e2:	2a2d      	cmp	r2, #45	@ 0x2d
 80333e4:	d07b      	beq.n	80334de <_strtod_l+0x286>
 80333e6:	f04f 0c00 	mov.w	ip, #0
 80333ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80333ee:	2909      	cmp	r1, #9
 80333f0:	f240 8082 	bls.w	80334f8 <_strtod_l+0x2a0>
 80333f4:	9419      	str	r4, [sp, #100]	@ 0x64
 80333f6:	f04f 0800 	mov.w	r8, #0
 80333fa:	e0a2      	b.n	8033542 <_strtod_l+0x2ea>
 80333fc:	2300      	movs	r3, #0
 80333fe:	e7c7      	b.n	8033390 <_strtod_l+0x138>
 8033400:	2f08      	cmp	r7, #8
 8033402:	bfd5      	itete	le
 8033404:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8033406:	9908      	ldrgt	r1, [sp, #32]
 8033408:	fb02 3301 	mlale	r3, r2, r1, r3
 803340c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8033410:	f100 0001 	add.w	r0, r0, #1
 8033414:	bfd4      	ite	le
 8033416:	930a      	strle	r3, [sp, #40]	@ 0x28
 8033418:	9308      	strgt	r3, [sp, #32]
 803341a:	3701      	adds	r7, #1
 803341c:	9019      	str	r0, [sp, #100]	@ 0x64
 803341e:	e7bf      	b.n	80333a0 <_strtod_l+0x148>
 8033420:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033422:	1c5a      	adds	r2, r3, #1
 8033424:	9219      	str	r2, [sp, #100]	@ 0x64
 8033426:	785a      	ldrb	r2, [r3, #1]
 8033428:	b37f      	cbz	r7, 803348a <_strtod_l+0x232>
 803342a:	4681      	mov	r9, r0
 803342c:	463d      	mov	r5, r7
 803342e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8033432:	2b09      	cmp	r3, #9
 8033434:	d912      	bls.n	803345c <_strtod_l+0x204>
 8033436:	2301      	movs	r3, #1
 8033438:	e7c4      	b.n	80333c4 <_strtod_l+0x16c>
 803343a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803343c:	1c5a      	adds	r2, r3, #1
 803343e:	9219      	str	r2, [sp, #100]	@ 0x64
 8033440:	785a      	ldrb	r2, [r3, #1]
 8033442:	3001      	adds	r0, #1
 8033444:	2a30      	cmp	r2, #48	@ 0x30
 8033446:	d0f8      	beq.n	803343a <_strtod_l+0x1e2>
 8033448:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 803344c:	2b08      	cmp	r3, #8
 803344e:	f200 84d3 	bhi.w	8033df8 <_strtod_l+0xba0>
 8033452:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033454:	930c      	str	r3, [sp, #48]	@ 0x30
 8033456:	4681      	mov	r9, r0
 8033458:	2000      	movs	r0, #0
 803345a:	4605      	mov	r5, r0
 803345c:	3a30      	subs	r2, #48	@ 0x30
 803345e:	f100 0301 	add.w	r3, r0, #1
 8033462:	d02a      	beq.n	80334ba <_strtod_l+0x262>
 8033464:	4499      	add	r9, r3
 8033466:	eb00 0c05 	add.w	ip, r0, r5
 803346a:	462b      	mov	r3, r5
 803346c:	210a      	movs	r1, #10
 803346e:	4563      	cmp	r3, ip
 8033470:	d10d      	bne.n	803348e <_strtod_l+0x236>
 8033472:	1c69      	adds	r1, r5, #1
 8033474:	4401      	add	r1, r0
 8033476:	4428      	add	r0, r5
 8033478:	2808      	cmp	r0, #8
 803347a:	dc16      	bgt.n	80334aa <_strtod_l+0x252>
 803347c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803347e:	230a      	movs	r3, #10
 8033480:	fb03 2300 	mla	r3, r3, r0, r2
 8033484:	930a      	str	r3, [sp, #40]	@ 0x28
 8033486:	2300      	movs	r3, #0
 8033488:	e018      	b.n	80334bc <_strtod_l+0x264>
 803348a:	4638      	mov	r0, r7
 803348c:	e7da      	b.n	8033444 <_strtod_l+0x1ec>
 803348e:	2b08      	cmp	r3, #8
 8033490:	f103 0301 	add.w	r3, r3, #1
 8033494:	dc03      	bgt.n	803349e <_strtod_l+0x246>
 8033496:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8033498:	434e      	muls	r6, r1
 803349a:	960a      	str	r6, [sp, #40]	@ 0x28
 803349c:	e7e7      	b.n	803346e <_strtod_l+0x216>
 803349e:	2b10      	cmp	r3, #16
 80334a0:	bfde      	ittt	le
 80334a2:	9e08      	ldrle	r6, [sp, #32]
 80334a4:	434e      	mulle	r6, r1
 80334a6:	9608      	strle	r6, [sp, #32]
 80334a8:	e7e1      	b.n	803346e <_strtod_l+0x216>
 80334aa:	280f      	cmp	r0, #15
 80334ac:	dceb      	bgt.n	8033486 <_strtod_l+0x22e>
 80334ae:	9808      	ldr	r0, [sp, #32]
 80334b0:	230a      	movs	r3, #10
 80334b2:	fb03 2300 	mla	r3, r3, r0, r2
 80334b6:	9308      	str	r3, [sp, #32]
 80334b8:	e7e5      	b.n	8033486 <_strtod_l+0x22e>
 80334ba:	4629      	mov	r1, r5
 80334bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80334be:	1c50      	adds	r0, r2, #1
 80334c0:	9019      	str	r0, [sp, #100]	@ 0x64
 80334c2:	7852      	ldrb	r2, [r2, #1]
 80334c4:	4618      	mov	r0, r3
 80334c6:	460d      	mov	r5, r1
 80334c8:	e7b1      	b.n	803342e <_strtod_l+0x1d6>
 80334ca:	f04f 0900 	mov.w	r9, #0
 80334ce:	2301      	movs	r3, #1
 80334d0:	e77d      	b.n	80333ce <_strtod_l+0x176>
 80334d2:	f04f 0c00 	mov.w	ip, #0
 80334d6:	1ca2      	adds	r2, r4, #2
 80334d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80334da:	78a2      	ldrb	r2, [r4, #2]
 80334dc:	e785      	b.n	80333ea <_strtod_l+0x192>
 80334de:	f04f 0c01 	mov.w	ip, #1
 80334e2:	e7f8      	b.n	80334d6 <_strtod_l+0x27e>
 80334e4:	0803ae2c 	.word	0x0803ae2c
 80334e8:	0803a892 	.word	0x0803a892
 80334ec:	7ff00000 	.word	0x7ff00000
 80334f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80334f2:	1c51      	adds	r1, r2, #1
 80334f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80334f6:	7852      	ldrb	r2, [r2, #1]
 80334f8:	2a30      	cmp	r2, #48	@ 0x30
 80334fa:	d0f9      	beq.n	80334f0 <_strtod_l+0x298>
 80334fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8033500:	2908      	cmp	r1, #8
 8033502:	f63f af78 	bhi.w	80333f6 <_strtod_l+0x19e>
 8033506:	3a30      	subs	r2, #48	@ 0x30
 8033508:	920e      	str	r2, [sp, #56]	@ 0x38
 803350a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803350c:	920f      	str	r2, [sp, #60]	@ 0x3c
 803350e:	f04f 080a 	mov.w	r8, #10
 8033512:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8033514:	1c56      	adds	r6, r2, #1
 8033516:	9619      	str	r6, [sp, #100]	@ 0x64
 8033518:	7852      	ldrb	r2, [r2, #1]
 803351a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 803351e:	f1be 0f09 	cmp.w	lr, #9
 8033522:	d939      	bls.n	8033598 <_strtod_l+0x340>
 8033524:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8033526:	1a76      	subs	r6, r6, r1
 8033528:	2e08      	cmp	r6, #8
 803352a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 803352e:	dc03      	bgt.n	8033538 <_strtod_l+0x2e0>
 8033530:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8033532:	4588      	cmp	r8, r1
 8033534:	bfa8      	it	ge
 8033536:	4688      	movge	r8, r1
 8033538:	f1bc 0f00 	cmp.w	ip, #0
 803353c:	d001      	beq.n	8033542 <_strtod_l+0x2ea>
 803353e:	f1c8 0800 	rsb	r8, r8, #0
 8033542:	2d00      	cmp	r5, #0
 8033544:	d14e      	bne.n	80335e4 <_strtod_l+0x38c>
 8033546:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8033548:	4308      	orrs	r0, r1
 803354a:	f47f aebe 	bne.w	80332ca <_strtod_l+0x72>
 803354e:	2b00      	cmp	r3, #0
 8033550:	f47f aed6 	bne.w	8033300 <_strtod_l+0xa8>
 8033554:	2a69      	cmp	r2, #105	@ 0x69
 8033556:	d028      	beq.n	80335aa <_strtod_l+0x352>
 8033558:	dc25      	bgt.n	80335a6 <_strtod_l+0x34e>
 803355a:	2a49      	cmp	r2, #73	@ 0x49
 803355c:	d025      	beq.n	80335aa <_strtod_l+0x352>
 803355e:	2a4e      	cmp	r2, #78	@ 0x4e
 8033560:	f47f aece 	bne.w	8033300 <_strtod_l+0xa8>
 8033564:	499b      	ldr	r1, [pc, #620]	@ (80337d4 <_strtod_l+0x57c>)
 8033566:	a819      	add	r0, sp, #100	@ 0x64
 8033568:	f001 fb18 	bl	8034b9c <__match>
 803356c:	2800      	cmp	r0, #0
 803356e:	f43f aec7 	beq.w	8033300 <_strtod_l+0xa8>
 8033572:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033574:	781b      	ldrb	r3, [r3, #0]
 8033576:	2b28      	cmp	r3, #40	@ 0x28
 8033578:	d12e      	bne.n	80335d8 <_strtod_l+0x380>
 803357a:	4997      	ldr	r1, [pc, #604]	@ (80337d8 <_strtod_l+0x580>)
 803357c:	aa1c      	add	r2, sp, #112	@ 0x70
 803357e:	a819      	add	r0, sp, #100	@ 0x64
 8033580:	f001 fb20 	bl	8034bc4 <__hexnan>
 8033584:	2805      	cmp	r0, #5
 8033586:	d127      	bne.n	80335d8 <_strtod_l+0x380>
 8033588:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 803358a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 803358e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8033592:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8033596:	e698      	b.n	80332ca <_strtod_l+0x72>
 8033598:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803359a:	fb08 2101 	mla	r1, r8, r1, r2
 803359e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80335a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80335a4:	e7b5      	b.n	8033512 <_strtod_l+0x2ba>
 80335a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80335a8:	e7da      	b.n	8033560 <_strtod_l+0x308>
 80335aa:	498c      	ldr	r1, [pc, #560]	@ (80337dc <_strtod_l+0x584>)
 80335ac:	a819      	add	r0, sp, #100	@ 0x64
 80335ae:	f001 faf5 	bl	8034b9c <__match>
 80335b2:	2800      	cmp	r0, #0
 80335b4:	f43f aea4 	beq.w	8033300 <_strtod_l+0xa8>
 80335b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80335ba:	4989      	ldr	r1, [pc, #548]	@ (80337e0 <_strtod_l+0x588>)
 80335bc:	3b01      	subs	r3, #1
 80335be:	a819      	add	r0, sp, #100	@ 0x64
 80335c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80335c2:	f001 faeb 	bl	8034b9c <__match>
 80335c6:	b910      	cbnz	r0, 80335ce <_strtod_l+0x376>
 80335c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80335ca:	3301      	adds	r3, #1
 80335cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80335ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80337f0 <_strtod_l+0x598>
 80335d2:	f04f 0a00 	mov.w	sl, #0
 80335d6:	e678      	b.n	80332ca <_strtod_l+0x72>
 80335d8:	4882      	ldr	r0, [pc, #520]	@ (80337e4 <_strtod_l+0x58c>)
 80335da:	f001 f805 	bl	80345e8 <nan>
 80335de:	ec5b ab10 	vmov	sl, fp, d0
 80335e2:	e672      	b.n	80332ca <_strtod_l+0x72>
 80335e4:	eba8 0309 	sub.w	r3, r8, r9
 80335e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80335ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80335ec:	2f00      	cmp	r7, #0
 80335ee:	bf08      	it	eq
 80335f0:	462f      	moveq	r7, r5
 80335f2:	2d10      	cmp	r5, #16
 80335f4:	462c      	mov	r4, r5
 80335f6:	bfa8      	it	ge
 80335f8:	2410      	movge	r4, #16
 80335fa:	f7dc ff9b 	bl	8010534 <__aeabi_ui2d>
 80335fe:	2d09      	cmp	r5, #9
 8033600:	4682      	mov	sl, r0
 8033602:	468b      	mov	fp, r1
 8033604:	dc13      	bgt.n	803362e <_strtod_l+0x3d6>
 8033606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033608:	2b00      	cmp	r3, #0
 803360a:	f43f ae5e 	beq.w	80332ca <_strtod_l+0x72>
 803360e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033610:	dd78      	ble.n	8033704 <_strtod_l+0x4ac>
 8033612:	2b16      	cmp	r3, #22
 8033614:	dc5f      	bgt.n	80336d6 <_strtod_l+0x47e>
 8033616:	4974      	ldr	r1, [pc, #464]	@ (80337e8 <_strtod_l+0x590>)
 8033618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803361c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8033620:	4652      	mov	r2, sl
 8033622:	465b      	mov	r3, fp
 8033624:	f7dd f800 	bl	8010628 <__aeabi_dmul>
 8033628:	4682      	mov	sl, r0
 803362a:	468b      	mov	fp, r1
 803362c:	e64d      	b.n	80332ca <_strtod_l+0x72>
 803362e:	4b6e      	ldr	r3, [pc, #440]	@ (80337e8 <_strtod_l+0x590>)
 8033630:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8033634:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8033638:	f7dc fff6 	bl	8010628 <__aeabi_dmul>
 803363c:	4682      	mov	sl, r0
 803363e:	9808      	ldr	r0, [sp, #32]
 8033640:	468b      	mov	fp, r1
 8033642:	f7dc ff77 	bl	8010534 <__aeabi_ui2d>
 8033646:	4602      	mov	r2, r0
 8033648:	460b      	mov	r3, r1
 803364a:	4650      	mov	r0, sl
 803364c:	4659      	mov	r1, fp
 803364e:	f7dc fe35 	bl	80102bc <__adddf3>
 8033652:	2d0f      	cmp	r5, #15
 8033654:	4682      	mov	sl, r0
 8033656:	468b      	mov	fp, r1
 8033658:	ddd5      	ble.n	8033606 <_strtod_l+0x3ae>
 803365a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803365c:	1b2c      	subs	r4, r5, r4
 803365e:	441c      	add	r4, r3
 8033660:	2c00      	cmp	r4, #0
 8033662:	f340 8096 	ble.w	8033792 <_strtod_l+0x53a>
 8033666:	f014 030f 	ands.w	r3, r4, #15
 803366a:	d00a      	beq.n	8033682 <_strtod_l+0x42a>
 803366c:	495e      	ldr	r1, [pc, #376]	@ (80337e8 <_strtod_l+0x590>)
 803366e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8033672:	4652      	mov	r2, sl
 8033674:	465b      	mov	r3, fp
 8033676:	e9d1 0100 	ldrd	r0, r1, [r1]
 803367a:	f7dc ffd5 	bl	8010628 <__aeabi_dmul>
 803367e:	4682      	mov	sl, r0
 8033680:	468b      	mov	fp, r1
 8033682:	f034 040f 	bics.w	r4, r4, #15
 8033686:	d073      	beq.n	8033770 <_strtod_l+0x518>
 8033688:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 803368c:	dd48      	ble.n	8033720 <_strtod_l+0x4c8>
 803368e:	2400      	movs	r4, #0
 8033690:	46a0      	mov	r8, r4
 8033692:	940a      	str	r4, [sp, #40]	@ 0x28
 8033694:	46a1      	mov	r9, r4
 8033696:	9a05      	ldr	r2, [sp, #20]
 8033698:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80337f0 <_strtod_l+0x598>
 803369c:	2322      	movs	r3, #34	@ 0x22
 803369e:	6013      	str	r3, [r2, #0]
 80336a0:	f04f 0a00 	mov.w	sl, #0
 80336a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80336a6:	2b00      	cmp	r3, #0
 80336a8:	f43f ae0f 	beq.w	80332ca <_strtod_l+0x72>
 80336ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80336ae:	9805      	ldr	r0, [sp, #20]
 80336b0:	f7fe ff37 	bl	8032522 <_Bfree>
 80336b4:	9805      	ldr	r0, [sp, #20]
 80336b6:	4649      	mov	r1, r9
 80336b8:	f7fe ff33 	bl	8032522 <_Bfree>
 80336bc:	9805      	ldr	r0, [sp, #20]
 80336be:	4641      	mov	r1, r8
 80336c0:	f7fe ff2f 	bl	8032522 <_Bfree>
 80336c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80336c6:	9805      	ldr	r0, [sp, #20]
 80336c8:	f7fe ff2b 	bl	8032522 <_Bfree>
 80336cc:	9805      	ldr	r0, [sp, #20]
 80336ce:	4621      	mov	r1, r4
 80336d0:	f7fe ff27 	bl	8032522 <_Bfree>
 80336d4:	e5f9      	b.n	80332ca <_strtod_l+0x72>
 80336d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80336d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80336dc:	4293      	cmp	r3, r2
 80336de:	dbbc      	blt.n	803365a <_strtod_l+0x402>
 80336e0:	4c41      	ldr	r4, [pc, #260]	@ (80337e8 <_strtod_l+0x590>)
 80336e2:	f1c5 050f 	rsb	r5, r5, #15
 80336e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80336ea:	4652      	mov	r2, sl
 80336ec:	465b      	mov	r3, fp
 80336ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80336f2:	f7dc ff99 	bl	8010628 <__aeabi_dmul>
 80336f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80336f8:	1b5d      	subs	r5, r3, r5
 80336fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80336fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8033702:	e78f      	b.n	8033624 <_strtod_l+0x3cc>
 8033704:	3316      	adds	r3, #22
 8033706:	dba8      	blt.n	803365a <_strtod_l+0x402>
 8033708:	4b37      	ldr	r3, [pc, #220]	@ (80337e8 <_strtod_l+0x590>)
 803370a:	eba9 0808 	sub.w	r8, r9, r8
 803370e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8033712:	e9d8 2300 	ldrd	r2, r3, [r8]
 8033716:	4650      	mov	r0, sl
 8033718:	4659      	mov	r1, fp
 803371a:	f7dd f8af 	bl	801087c <__aeabi_ddiv>
 803371e:	e783      	b.n	8033628 <_strtod_l+0x3d0>
 8033720:	4b32      	ldr	r3, [pc, #200]	@ (80337ec <_strtod_l+0x594>)
 8033722:	9308      	str	r3, [sp, #32]
 8033724:	2300      	movs	r3, #0
 8033726:	1124      	asrs	r4, r4, #4
 8033728:	4650      	mov	r0, sl
 803372a:	4659      	mov	r1, fp
 803372c:	461e      	mov	r6, r3
 803372e:	2c01      	cmp	r4, #1
 8033730:	dc21      	bgt.n	8033776 <_strtod_l+0x51e>
 8033732:	b10b      	cbz	r3, 8033738 <_strtod_l+0x4e0>
 8033734:	4682      	mov	sl, r0
 8033736:	468b      	mov	fp, r1
 8033738:	492c      	ldr	r1, [pc, #176]	@ (80337ec <_strtod_l+0x594>)
 803373a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 803373e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8033742:	4652      	mov	r2, sl
 8033744:	465b      	mov	r3, fp
 8033746:	e9d1 0100 	ldrd	r0, r1, [r1]
 803374a:	f7dc ff6d 	bl	8010628 <__aeabi_dmul>
 803374e:	4b28      	ldr	r3, [pc, #160]	@ (80337f0 <_strtod_l+0x598>)
 8033750:	460a      	mov	r2, r1
 8033752:	400b      	ands	r3, r1
 8033754:	4927      	ldr	r1, [pc, #156]	@ (80337f4 <_strtod_l+0x59c>)
 8033756:	428b      	cmp	r3, r1
 8033758:	4682      	mov	sl, r0
 803375a:	d898      	bhi.n	803368e <_strtod_l+0x436>
 803375c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8033760:	428b      	cmp	r3, r1
 8033762:	bf86      	itte	hi
 8033764:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80337f8 <_strtod_l+0x5a0>
 8033768:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 803376c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8033770:	2300      	movs	r3, #0
 8033772:	9308      	str	r3, [sp, #32]
 8033774:	e07a      	b.n	803386c <_strtod_l+0x614>
 8033776:	07e2      	lsls	r2, r4, #31
 8033778:	d505      	bpl.n	8033786 <_strtod_l+0x52e>
 803377a:	9b08      	ldr	r3, [sp, #32]
 803377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8033780:	f7dc ff52 	bl	8010628 <__aeabi_dmul>
 8033784:	2301      	movs	r3, #1
 8033786:	9a08      	ldr	r2, [sp, #32]
 8033788:	3208      	adds	r2, #8
 803378a:	3601      	adds	r6, #1
 803378c:	1064      	asrs	r4, r4, #1
 803378e:	9208      	str	r2, [sp, #32]
 8033790:	e7cd      	b.n	803372e <_strtod_l+0x4d6>
 8033792:	d0ed      	beq.n	8033770 <_strtod_l+0x518>
 8033794:	4264      	negs	r4, r4
 8033796:	f014 020f 	ands.w	r2, r4, #15
 803379a:	d00a      	beq.n	80337b2 <_strtod_l+0x55a>
 803379c:	4b12      	ldr	r3, [pc, #72]	@ (80337e8 <_strtod_l+0x590>)
 803379e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80337a2:	4650      	mov	r0, sl
 80337a4:	4659      	mov	r1, fp
 80337a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80337aa:	f7dd f867 	bl	801087c <__aeabi_ddiv>
 80337ae:	4682      	mov	sl, r0
 80337b0:	468b      	mov	fp, r1
 80337b2:	1124      	asrs	r4, r4, #4
 80337b4:	d0dc      	beq.n	8033770 <_strtod_l+0x518>
 80337b6:	2c1f      	cmp	r4, #31
 80337b8:	dd20      	ble.n	80337fc <_strtod_l+0x5a4>
 80337ba:	2400      	movs	r4, #0
 80337bc:	46a0      	mov	r8, r4
 80337be:	940a      	str	r4, [sp, #40]	@ 0x28
 80337c0:	46a1      	mov	r9, r4
 80337c2:	9a05      	ldr	r2, [sp, #20]
 80337c4:	2322      	movs	r3, #34	@ 0x22
 80337c6:	f04f 0a00 	mov.w	sl, #0
 80337ca:	f04f 0b00 	mov.w	fp, #0
 80337ce:	6013      	str	r3, [r2, #0]
 80337d0:	e768      	b.n	80336a4 <_strtod_l+0x44c>
 80337d2:	bf00      	nop
 80337d4:	0803a895 	.word	0x0803a895
 80337d8:	0803ae18 	.word	0x0803ae18
 80337dc:	0803a704 	.word	0x0803a704
 80337e0:	0803abc0 	.word	0x0803abc0
 80337e4:	0803a6fe 	.word	0x0803a6fe
 80337e8:	0803ad50 	.word	0x0803ad50
 80337ec:	0803ad28 	.word	0x0803ad28
 80337f0:	7ff00000 	.word	0x7ff00000
 80337f4:	7ca00000 	.word	0x7ca00000
 80337f8:	7fefffff 	.word	0x7fefffff
 80337fc:	f014 0310 	ands.w	r3, r4, #16
 8033800:	bf18      	it	ne
 8033802:	236a      	movne	r3, #106	@ 0x6a
 8033804:	4ea9      	ldr	r6, [pc, #676]	@ (8033aac <_strtod_l+0x854>)
 8033806:	9308      	str	r3, [sp, #32]
 8033808:	4650      	mov	r0, sl
 803380a:	4659      	mov	r1, fp
 803380c:	2300      	movs	r3, #0
 803380e:	07e2      	lsls	r2, r4, #31
 8033810:	d504      	bpl.n	803381c <_strtod_l+0x5c4>
 8033812:	e9d6 2300 	ldrd	r2, r3, [r6]
 8033816:	f7dc ff07 	bl	8010628 <__aeabi_dmul>
 803381a:	2301      	movs	r3, #1
 803381c:	1064      	asrs	r4, r4, #1
 803381e:	f106 0608 	add.w	r6, r6, #8
 8033822:	d1f4      	bne.n	803380e <_strtod_l+0x5b6>
 8033824:	b10b      	cbz	r3, 803382a <_strtod_l+0x5d2>
 8033826:	4682      	mov	sl, r0
 8033828:	468b      	mov	fp, r1
 803382a:	9b08      	ldr	r3, [sp, #32]
 803382c:	b1b3      	cbz	r3, 803385c <_strtod_l+0x604>
 803382e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8033832:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8033836:	2b00      	cmp	r3, #0
 8033838:	4659      	mov	r1, fp
 803383a:	dd0f      	ble.n	803385c <_strtod_l+0x604>
 803383c:	2b1f      	cmp	r3, #31
 803383e:	dd55      	ble.n	80338ec <_strtod_l+0x694>
 8033840:	2b34      	cmp	r3, #52	@ 0x34
 8033842:	bfde      	ittt	le
 8033844:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8033848:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 803384c:	4093      	lslle	r3, r2
 803384e:	f04f 0a00 	mov.w	sl, #0
 8033852:	bfcc      	ite	gt
 8033854:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8033858:	ea03 0b01 	andle.w	fp, r3, r1
 803385c:	2200      	movs	r2, #0
 803385e:	2300      	movs	r3, #0
 8033860:	4650      	mov	r0, sl
 8033862:	4659      	mov	r1, fp
 8033864:	f7dd f948 	bl	8010af8 <__aeabi_dcmpeq>
 8033868:	2800      	cmp	r0, #0
 803386a:	d1a6      	bne.n	80337ba <_strtod_l+0x562>
 803386c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803386e:	9300      	str	r3, [sp, #0]
 8033870:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8033872:	9805      	ldr	r0, [sp, #20]
 8033874:	462b      	mov	r3, r5
 8033876:	463a      	mov	r2, r7
 8033878:	f7fe fea2 	bl	80325c0 <__s2b>
 803387c:	900a      	str	r0, [sp, #40]	@ 0x28
 803387e:	2800      	cmp	r0, #0
 8033880:	f43f af05 	beq.w	803368e <_strtod_l+0x436>
 8033884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8033886:	2a00      	cmp	r2, #0
 8033888:	eba9 0308 	sub.w	r3, r9, r8
 803388c:	bfa8      	it	ge
 803388e:	2300      	movge	r3, #0
 8033890:	9312      	str	r3, [sp, #72]	@ 0x48
 8033892:	2400      	movs	r4, #0
 8033894:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8033898:	9316      	str	r3, [sp, #88]	@ 0x58
 803389a:	46a0      	mov	r8, r4
 803389c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803389e:	9805      	ldr	r0, [sp, #20]
 80338a0:	6859      	ldr	r1, [r3, #4]
 80338a2:	f7fe fe19 	bl	80324d8 <_Balloc>
 80338a6:	4681      	mov	r9, r0
 80338a8:	2800      	cmp	r0, #0
 80338aa:	f43f aef4 	beq.w	8033696 <_strtod_l+0x43e>
 80338ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80338b0:	691a      	ldr	r2, [r3, #16]
 80338b2:	3202      	adds	r2, #2
 80338b4:	f103 010c 	add.w	r1, r3, #12
 80338b8:	0092      	lsls	r2, r2, #2
 80338ba:	300c      	adds	r0, #12
 80338bc:	f7f9 fadc 	bl	802ce78 <memcpy>
 80338c0:	ec4b ab10 	vmov	d0, sl, fp
 80338c4:	9805      	ldr	r0, [sp, #20]
 80338c6:	aa1c      	add	r2, sp, #112	@ 0x70
 80338c8:	a91b      	add	r1, sp, #108	@ 0x6c
 80338ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80338ce:	f7ff f999 	bl	8032c04 <__d2b>
 80338d2:	901a      	str	r0, [sp, #104]	@ 0x68
 80338d4:	2800      	cmp	r0, #0
 80338d6:	f43f aede 	beq.w	8033696 <_strtod_l+0x43e>
 80338da:	9805      	ldr	r0, [sp, #20]
 80338dc:	2101      	movs	r1, #1
 80338de:	f7fe ff05 	bl	80326ec <__i2b>
 80338e2:	4680      	mov	r8, r0
 80338e4:	b948      	cbnz	r0, 80338fa <_strtod_l+0x6a2>
 80338e6:	f04f 0800 	mov.w	r8, #0
 80338ea:	e6d4      	b.n	8033696 <_strtod_l+0x43e>
 80338ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80338f0:	fa02 f303 	lsl.w	r3, r2, r3
 80338f4:	ea03 0a0a 	and.w	sl, r3, sl
 80338f8:	e7b0      	b.n	803385c <_strtod_l+0x604>
 80338fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80338fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80338fe:	2d00      	cmp	r5, #0
 8033900:	bfab      	itete	ge
 8033902:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8033904:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8033906:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8033908:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 803390a:	bfac      	ite	ge
 803390c:	18ef      	addge	r7, r5, r3
 803390e:	1b5e      	sublt	r6, r3, r5
 8033910:	9b08      	ldr	r3, [sp, #32]
 8033912:	1aed      	subs	r5, r5, r3
 8033914:	4415      	add	r5, r2
 8033916:	4b66      	ldr	r3, [pc, #408]	@ (8033ab0 <_strtod_l+0x858>)
 8033918:	3d01      	subs	r5, #1
 803391a:	429d      	cmp	r5, r3
 803391c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8033920:	da50      	bge.n	80339c4 <_strtod_l+0x76c>
 8033922:	1b5b      	subs	r3, r3, r5
 8033924:	2b1f      	cmp	r3, #31
 8033926:	eba2 0203 	sub.w	r2, r2, r3
 803392a:	f04f 0101 	mov.w	r1, #1
 803392e:	dc3d      	bgt.n	80339ac <_strtod_l+0x754>
 8033930:	fa01 f303 	lsl.w	r3, r1, r3
 8033934:	9313      	str	r3, [sp, #76]	@ 0x4c
 8033936:	2300      	movs	r3, #0
 8033938:	9310      	str	r3, [sp, #64]	@ 0x40
 803393a:	18bd      	adds	r5, r7, r2
 803393c:	9b08      	ldr	r3, [sp, #32]
 803393e:	42af      	cmp	r7, r5
 8033940:	4416      	add	r6, r2
 8033942:	441e      	add	r6, r3
 8033944:	463b      	mov	r3, r7
 8033946:	bfa8      	it	ge
 8033948:	462b      	movge	r3, r5
 803394a:	42b3      	cmp	r3, r6
 803394c:	bfa8      	it	ge
 803394e:	4633      	movge	r3, r6
 8033950:	2b00      	cmp	r3, #0
 8033952:	bfc2      	ittt	gt
 8033954:	1aed      	subgt	r5, r5, r3
 8033956:	1af6      	subgt	r6, r6, r3
 8033958:	1aff      	subgt	r7, r7, r3
 803395a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803395c:	2b00      	cmp	r3, #0
 803395e:	dd16      	ble.n	803398e <_strtod_l+0x736>
 8033960:	4641      	mov	r1, r8
 8033962:	9805      	ldr	r0, [sp, #20]
 8033964:	461a      	mov	r2, r3
 8033966:	f7fe ff81 	bl	803286c <__pow5mult>
 803396a:	4680      	mov	r8, r0
 803396c:	2800      	cmp	r0, #0
 803396e:	d0ba      	beq.n	80338e6 <_strtod_l+0x68e>
 8033970:	4601      	mov	r1, r0
 8033972:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8033974:	9805      	ldr	r0, [sp, #20]
 8033976:	f7fe fecf 	bl	8032718 <__multiply>
 803397a:	900e      	str	r0, [sp, #56]	@ 0x38
 803397c:	2800      	cmp	r0, #0
 803397e:	f43f ae8a 	beq.w	8033696 <_strtod_l+0x43e>
 8033982:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033984:	9805      	ldr	r0, [sp, #20]
 8033986:	f7fe fdcc 	bl	8032522 <_Bfree>
 803398a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803398c:	931a      	str	r3, [sp, #104]	@ 0x68
 803398e:	2d00      	cmp	r5, #0
 8033990:	dc1d      	bgt.n	80339ce <_strtod_l+0x776>
 8033992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033994:	2b00      	cmp	r3, #0
 8033996:	dd23      	ble.n	80339e0 <_strtod_l+0x788>
 8033998:	4649      	mov	r1, r9
 803399a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 803399c:	9805      	ldr	r0, [sp, #20]
 803399e:	f7fe ff65 	bl	803286c <__pow5mult>
 80339a2:	4681      	mov	r9, r0
 80339a4:	b9e0      	cbnz	r0, 80339e0 <_strtod_l+0x788>
 80339a6:	f04f 0900 	mov.w	r9, #0
 80339aa:	e674      	b.n	8033696 <_strtod_l+0x43e>
 80339ac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80339b0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80339b4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80339b8:	35e2      	adds	r5, #226	@ 0xe2
 80339ba:	fa01 f305 	lsl.w	r3, r1, r5
 80339be:	9310      	str	r3, [sp, #64]	@ 0x40
 80339c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80339c2:	e7ba      	b.n	803393a <_strtod_l+0x6e2>
 80339c4:	2300      	movs	r3, #0
 80339c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80339c8:	2301      	movs	r3, #1
 80339ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80339cc:	e7b5      	b.n	803393a <_strtod_l+0x6e2>
 80339ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80339d0:	9805      	ldr	r0, [sp, #20]
 80339d2:	462a      	mov	r2, r5
 80339d4:	f7fe ff8a 	bl	80328ec <__lshift>
 80339d8:	901a      	str	r0, [sp, #104]	@ 0x68
 80339da:	2800      	cmp	r0, #0
 80339dc:	d1d9      	bne.n	8033992 <_strtod_l+0x73a>
 80339de:	e65a      	b.n	8033696 <_strtod_l+0x43e>
 80339e0:	2e00      	cmp	r6, #0
 80339e2:	dd07      	ble.n	80339f4 <_strtod_l+0x79c>
 80339e4:	4649      	mov	r1, r9
 80339e6:	9805      	ldr	r0, [sp, #20]
 80339e8:	4632      	mov	r2, r6
 80339ea:	f7fe ff7f 	bl	80328ec <__lshift>
 80339ee:	4681      	mov	r9, r0
 80339f0:	2800      	cmp	r0, #0
 80339f2:	d0d8      	beq.n	80339a6 <_strtod_l+0x74e>
 80339f4:	2f00      	cmp	r7, #0
 80339f6:	dd08      	ble.n	8033a0a <_strtod_l+0x7b2>
 80339f8:	4641      	mov	r1, r8
 80339fa:	9805      	ldr	r0, [sp, #20]
 80339fc:	463a      	mov	r2, r7
 80339fe:	f7fe ff75 	bl	80328ec <__lshift>
 8033a02:	4680      	mov	r8, r0
 8033a04:	2800      	cmp	r0, #0
 8033a06:	f43f ae46 	beq.w	8033696 <_strtod_l+0x43e>
 8033a0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033a0c:	9805      	ldr	r0, [sp, #20]
 8033a0e:	464a      	mov	r2, r9
 8033a10:	f7fe fff4 	bl	80329fc <__mdiff>
 8033a14:	4604      	mov	r4, r0
 8033a16:	2800      	cmp	r0, #0
 8033a18:	f43f ae3d 	beq.w	8033696 <_strtod_l+0x43e>
 8033a1c:	68c3      	ldr	r3, [r0, #12]
 8033a1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8033a20:	2300      	movs	r3, #0
 8033a22:	60c3      	str	r3, [r0, #12]
 8033a24:	4641      	mov	r1, r8
 8033a26:	f7fe ffcd 	bl	80329c4 <__mcmp>
 8033a2a:	2800      	cmp	r0, #0
 8033a2c:	da46      	bge.n	8033abc <_strtod_l+0x864>
 8033a2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8033a30:	ea53 030a 	orrs.w	r3, r3, sl
 8033a34:	d16c      	bne.n	8033b10 <_strtod_l+0x8b8>
 8033a36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8033a3a:	2b00      	cmp	r3, #0
 8033a3c:	d168      	bne.n	8033b10 <_strtod_l+0x8b8>
 8033a3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8033a42:	0d1b      	lsrs	r3, r3, #20
 8033a44:	051b      	lsls	r3, r3, #20
 8033a46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8033a4a:	d961      	bls.n	8033b10 <_strtod_l+0x8b8>
 8033a4c:	6963      	ldr	r3, [r4, #20]
 8033a4e:	b913      	cbnz	r3, 8033a56 <_strtod_l+0x7fe>
 8033a50:	6923      	ldr	r3, [r4, #16]
 8033a52:	2b01      	cmp	r3, #1
 8033a54:	dd5c      	ble.n	8033b10 <_strtod_l+0x8b8>
 8033a56:	4621      	mov	r1, r4
 8033a58:	2201      	movs	r2, #1
 8033a5a:	9805      	ldr	r0, [sp, #20]
 8033a5c:	f7fe ff46 	bl	80328ec <__lshift>
 8033a60:	4641      	mov	r1, r8
 8033a62:	4604      	mov	r4, r0
 8033a64:	f7fe ffae 	bl	80329c4 <__mcmp>
 8033a68:	2800      	cmp	r0, #0
 8033a6a:	dd51      	ble.n	8033b10 <_strtod_l+0x8b8>
 8033a6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8033a70:	9a08      	ldr	r2, [sp, #32]
 8033a72:	0d1b      	lsrs	r3, r3, #20
 8033a74:	051b      	lsls	r3, r3, #20
 8033a76:	2a00      	cmp	r2, #0
 8033a78:	d06b      	beq.n	8033b52 <_strtod_l+0x8fa>
 8033a7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8033a7e:	d868      	bhi.n	8033b52 <_strtod_l+0x8fa>
 8033a80:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8033a84:	f67f ae9d 	bls.w	80337c2 <_strtod_l+0x56a>
 8033a88:	4b0a      	ldr	r3, [pc, #40]	@ (8033ab4 <_strtod_l+0x85c>)
 8033a8a:	4650      	mov	r0, sl
 8033a8c:	4659      	mov	r1, fp
 8033a8e:	2200      	movs	r2, #0
 8033a90:	f7dc fdca 	bl	8010628 <__aeabi_dmul>
 8033a94:	4b08      	ldr	r3, [pc, #32]	@ (8033ab8 <_strtod_l+0x860>)
 8033a96:	400b      	ands	r3, r1
 8033a98:	4682      	mov	sl, r0
 8033a9a:	468b      	mov	fp, r1
 8033a9c:	2b00      	cmp	r3, #0
 8033a9e:	f47f ae05 	bne.w	80336ac <_strtod_l+0x454>
 8033aa2:	9a05      	ldr	r2, [sp, #20]
 8033aa4:	2322      	movs	r3, #34	@ 0x22
 8033aa6:	6013      	str	r3, [r2, #0]
 8033aa8:	e600      	b.n	80336ac <_strtod_l+0x454>
 8033aaa:	bf00      	nop
 8033aac:	0803ae40 	.word	0x0803ae40
 8033ab0:	fffffc02 	.word	0xfffffc02
 8033ab4:	39500000 	.word	0x39500000
 8033ab8:	7ff00000 	.word	0x7ff00000
 8033abc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8033ac0:	d165      	bne.n	8033b8e <_strtod_l+0x936>
 8033ac2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8033ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8033ac8:	b35a      	cbz	r2, 8033b22 <_strtod_l+0x8ca>
 8033aca:	4a9f      	ldr	r2, [pc, #636]	@ (8033d48 <_strtod_l+0xaf0>)
 8033acc:	4293      	cmp	r3, r2
 8033ace:	d12b      	bne.n	8033b28 <_strtod_l+0x8d0>
 8033ad0:	9b08      	ldr	r3, [sp, #32]
 8033ad2:	4651      	mov	r1, sl
 8033ad4:	b303      	cbz	r3, 8033b18 <_strtod_l+0x8c0>
 8033ad6:	4b9d      	ldr	r3, [pc, #628]	@ (8033d4c <_strtod_l+0xaf4>)
 8033ad8:	465a      	mov	r2, fp
 8033ada:	4013      	ands	r3, r2
 8033adc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8033ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8033ae4:	d81b      	bhi.n	8033b1e <_strtod_l+0x8c6>
 8033ae6:	0d1b      	lsrs	r3, r3, #20
 8033ae8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8033aec:	fa02 f303 	lsl.w	r3, r2, r3
 8033af0:	4299      	cmp	r1, r3
 8033af2:	d119      	bne.n	8033b28 <_strtod_l+0x8d0>
 8033af4:	4b96      	ldr	r3, [pc, #600]	@ (8033d50 <_strtod_l+0xaf8>)
 8033af6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8033af8:	429a      	cmp	r2, r3
 8033afa:	d102      	bne.n	8033b02 <_strtod_l+0x8aa>
 8033afc:	3101      	adds	r1, #1
 8033afe:	f43f adca 	beq.w	8033696 <_strtod_l+0x43e>
 8033b02:	4b92      	ldr	r3, [pc, #584]	@ (8033d4c <_strtod_l+0xaf4>)
 8033b04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8033b06:	401a      	ands	r2, r3
 8033b08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8033b0c:	f04f 0a00 	mov.w	sl, #0
 8033b10:	9b08      	ldr	r3, [sp, #32]
 8033b12:	2b00      	cmp	r3, #0
 8033b14:	d1b8      	bne.n	8033a88 <_strtod_l+0x830>
 8033b16:	e5c9      	b.n	80336ac <_strtod_l+0x454>
 8033b18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8033b1c:	e7e8      	b.n	8033af0 <_strtod_l+0x898>
 8033b1e:	4613      	mov	r3, r2
 8033b20:	e7e6      	b.n	8033af0 <_strtod_l+0x898>
 8033b22:	ea53 030a 	orrs.w	r3, r3, sl
 8033b26:	d0a1      	beq.n	8033a6c <_strtod_l+0x814>
 8033b28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033b2a:	b1db      	cbz	r3, 8033b64 <_strtod_l+0x90c>
 8033b2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8033b2e:	4213      	tst	r3, r2
 8033b30:	d0ee      	beq.n	8033b10 <_strtod_l+0x8b8>
 8033b32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8033b34:	9a08      	ldr	r2, [sp, #32]
 8033b36:	4650      	mov	r0, sl
 8033b38:	4659      	mov	r1, fp
 8033b3a:	b1bb      	cbz	r3, 8033b6c <_strtod_l+0x914>
 8033b3c:	f7ff fb6e 	bl	803321c <sulp>
 8033b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8033b44:	ec53 2b10 	vmov	r2, r3, d0
 8033b48:	f7dc fbb8 	bl	80102bc <__adddf3>
 8033b4c:	4682      	mov	sl, r0
 8033b4e:	468b      	mov	fp, r1
 8033b50:	e7de      	b.n	8033b10 <_strtod_l+0x8b8>
 8033b52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8033b56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8033b5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8033b5e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8033b62:	e7d5      	b.n	8033b10 <_strtod_l+0x8b8>
 8033b64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8033b66:	ea13 0f0a 	tst.w	r3, sl
 8033b6a:	e7e1      	b.n	8033b30 <_strtod_l+0x8d8>
 8033b6c:	f7ff fb56 	bl	803321c <sulp>
 8033b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8033b74:	ec53 2b10 	vmov	r2, r3, d0
 8033b78:	f7dc fb9e 	bl	80102b8 <__aeabi_dsub>
 8033b7c:	2200      	movs	r2, #0
 8033b7e:	2300      	movs	r3, #0
 8033b80:	4682      	mov	sl, r0
 8033b82:	468b      	mov	fp, r1
 8033b84:	f7dc ffb8 	bl	8010af8 <__aeabi_dcmpeq>
 8033b88:	2800      	cmp	r0, #0
 8033b8a:	d0c1      	beq.n	8033b10 <_strtod_l+0x8b8>
 8033b8c:	e619      	b.n	80337c2 <_strtod_l+0x56a>
 8033b8e:	4641      	mov	r1, r8
 8033b90:	4620      	mov	r0, r4
 8033b92:	f7ff f88f 	bl	8032cb4 <__ratio>
 8033b96:	ec57 6b10 	vmov	r6, r7, d0
 8033b9a:	2200      	movs	r2, #0
 8033b9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8033ba0:	4630      	mov	r0, r6
 8033ba2:	4639      	mov	r1, r7
 8033ba4:	f7dc ffbc 	bl	8010b20 <__aeabi_dcmple>
 8033ba8:	2800      	cmp	r0, #0
 8033baa:	d06f      	beq.n	8033c8c <_strtod_l+0xa34>
 8033bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8033bae:	2b00      	cmp	r3, #0
 8033bb0:	d17a      	bne.n	8033ca8 <_strtod_l+0xa50>
 8033bb2:	f1ba 0f00 	cmp.w	sl, #0
 8033bb6:	d158      	bne.n	8033c6a <_strtod_l+0xa12>
 8033bb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8033bbe:	2b00      	cmp	r3, #0
 8033bc0:	d15a      	bne.n	8033c78 <_strtod_l+0xa20>
 8033bc2:	4b64      	ldr	r3, [pc, #400]	@ (8033d54 <_strtod_l+0xafc>)
 8033bc4:	2200      	movs	r2, #0
 8033bc6:	4630      	mov	r0, r6
 8033bc8:	4639      	mov	r1, r7
 8033bca:	f7dc ff9f 	bl	8010b0c <__aeabi_dcmplt>
 8033bce:	2800      	cmp	r0, #0
 8033bd0:	d159      	bne.n	8033c86 <_strtod_l+0xa2e>
 8033bd2:	4630      	mov	r0, r6
 8033bd4:	4639      	mov	r1, r7
 8033bd6:	4b60      	ldr	r3, [pc, #384]	@ (8033d58 <_strtod_l+0xb00>)
 8033bd8:	2200      	movs	r2, #0
 8033bda:	f7dc fd25 	bl	8010628 <__aeabi_dmul>
 8033bde:	4606      	mov	r6, r0
 8033be0:	460f      	mov	r7, r1
 8033be2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8033be6:	9606      	str	r6, [sp, #24]
 8033be8:	9307      	str	r3, [sp, #28]
 8033bea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8033bee:	4d57      	ldr	r5, [pc, #348]	@ (8033d4c <_strtod_l+0xaf4>)
 8033bf0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8033bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033bf6:	401d      	ands	r5, r3
 8033bf8:	4b58      	ldr	r3, [pc, #352]	@ (8033d5c <_strtod_l+0xb04>)
 8033bfa:	429d      	cmp	r5, r3
 8033bfc:	f040 80b2 	bne.w	8033d64 <_strtod_l+0xb0c>
 8033c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033c02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8033c06:	ec4b ab10 	vmov	d0, sl, fp
 8033c0a:	f7fe ff8b 	bl	8032b24 <__ulp>
 8033c0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8033c12:	ec51 0b10 	vmov	r0, r1, d0
 8033c16:	f7dc fd07 	bl	8010628 <__aeabi_dmul>
 8033c1a:	4652      	mov	r2, sl
 8033c1c:	465b      	mov	r3, fp
 8033c1e:	f7dc fb4d 	bl	80102bc <__adddf3>
 8033c22:	460b      	mov	r3, r1
 8033c24:	4949      	ldr	r1, [pc, #292]	@ (8033d4c <_strtod_l+0xaf4>)
 8033c26:	4a4e      	ldr	r2, [pc, #312]	@ (8033d60 <_strtod_l+0xb08>)
 8033c28:	4019      	ands	r1, r3
 8033c2a:	4291      	cmp	r1, r2
 8033c2c:	4682      	mov	sl, r0
 8033c2e:	d942      	bls.n	8033cb6 <_strtod_l+0xa5e>
 8033c30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8033c32:	4b47      	ldr	r3, [pc, #284]	@ (8033d50 <_strtod_l+0xaf8>)
 8033c34:	429a      	cmp	r2, r3
 8033c36:	d103      	bne.n	8033c40 <_strtod_l+0x9e8>
 8033c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8033c3a:	3301      	adds	r3, #1
 8033c3c:	f43f ad2b 	beq.w	8033696 <_strtod_l+0x43e>
 8033c40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8033d50 <_strtod_l+0xaf8>
 8033c44:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8033c48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033c4a:	9805      	ldr	r0, [sp, #20]
 8033c4c:	f7fe fc69 	bl	8032522 <_Bfree>
 8033c50:	9805      	ldr	r0, [sp, #20]
 8033c52:	4649      	mov	r1, r9
 8033c54:	f7fe fc65 	bl	8032522 <_Bfree>
 8033c58:	9805      	ldr	r0, [sp, #20]
 8033c5a:	4641      	mov	r1, r8
 8033c5c:	f7fe fc61 	bl	8032522 <_Bfree>
 8033c60:	9805      	ldr	r0, [sp, #20]
 8033c62:	4621      	mov	r1, r4
 8033c64:	f7fe fc5d 	bl	8032522 <_Bfree>
 8033c68:	e618      	b.n	803389c <_strtod_l+0x644>
 8033c6a:	f1ba 0f01 	cmp.w	sl, #1
 8033c6e:	d103      	bne.n	8033c78 <_strtod_l+0xa20>
 8033c70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033c72:	2b00      	cmp	r3, #0
 8033c74:	f43f ada5 	beq.w	80337c2 <_strtod_l+0x56a>
 8033c78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8033d28 <_strtod_l+0xad0>
 8033c7c:	4f35      	ldr	r7, [pc, #212]	@ (8033d54 <_strtod_l+0xafc>)
 8033c7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8033c82:	2600      	movs	r6, #0
 8033c84:	e7b1      	b.n	8033bea <_strtod_l+0x992>
 8033c86:	4f34      	ldr	r7, [pc, #208]	@ (8033d58 <_strtod_l+0xb00>)
 8033c88:	2600      	movs	r6, #0
 8033c8a:	e7aa      	b.n	8033be2 <_strtod_l+0x98a>
 8033c8c:	4b32      	ldr	r3, [pc, #200]	@ (8033d58 <_strtod_l+0xb00>)
 8033c8e:	4630      	mov	r0, r6
 8033c90:	4639      	mov	r1, r7
 8033c92:	2200      	movs	r2, #0
 8033c94:	f7dc fcc8 	bl	8010628 <__aeabi_dmul>
 8033c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8033c9a:	4606      	mov	r6, r0
 8033c9c:	460f      	mov	r7, r1
 8033c9e:	2b00      	cmp	r3, #0
 8033ca0:	d09f      	beq.n	8033be2 <_strtod_l+0x98a>
 8033ca2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8033ca6:	e7a0      	b.n	8033bea <_strtod_l+0x992>
 8033ca8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8033d30 <_strtod_l+0xad8>
 8033cac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8033cb0:	ec57 6b17 	vmov	r6, r7, d7
 8033cb4:	e799      	b.n	8033bea <_strtod_l+0x992>
 8033cb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8033cba:	9b08      	ldr	r3, [sp, #32]
 8033cbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8033cc0:	2b00      	cmp	r3, #0
 8033cc2:	d1c1      	bne.n	8033c48 <_strtod_l+0x9f0>
 8033cc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8033cc8:	0d1b      	lsrs	r3, r3, #20
 8033cca:	051b      	lsls	r3, r3, #20
 8033ccc:	429d      	cmp	r5, r3
 8033cce:	d1bb      	bne.n	8033c48 <_strtod_l+0x9f0>
 8033cd0:	4630      	mov	r0, r6
 8033cd2:	4639      	mov	r1, r7
 8033cd4:	f7dd f86c 	bl	8010db0 <__aeabi_d2lz>
 8033cd8:	f7dc fc78 	bl	80105cc <__aeabi_l2d>
 8033cdc:	4602      	mov	r2, r0
 8033cde:	460b      	mov	r3, r1
 8033ce0:	4630      	mov	r0, r6
 8033ce2:	4639      	mov	r1, r7
 8033ce4:	f7dc fae8 	bl	80102b8 <__aeabi_dsub>
 8033ce8:	460b      	mov	r3, r1
 8033cea:	4602      	mov	r2, r0
 8033cec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8033cf0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8033cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8033cf6:	ea46 060a 	orr.w	r6, r6, sl
 8033cfa:	431e      	orrs	r6, r3
 8033cfc:	d06f      	beq.n	8033dde <_strtod_l+0xb86>
 8033cfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8033d38 <_strtod_l+0xae0>)
 8033d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8033d04:	f7dc ff02 	bl	8010b0c <__aeabi_dcmplt>
 8033d08:	2800      	cmp	r0, #0
 8033d0a:	f47f accf 	bne.w	80336ac <_strtod_l+0x454>
 8033d0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8033d40 <_strtod_l+0xae8>)
 8033d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8033d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8033d18:	f7dc ff16 	bl	8010b48 <__aeabi_dcmpgt>
 8033d1c:	2800      	cmp	r0, #0
 8033d1e:	d093      	beq.n	8033c48 <_strtod_l+0x9f0>
 8033d20:	e4c4      	b.n	80336ac <_strtod_l+0x454>
 8033d22:	bf00      	nop
 8033d24:	f3af 8000 	nop.w
 8033d28:	00000000 	.word	0x00000000
 8033d2c:	bff00000 	.word	0xbff00000
 8033d30:	00000000 	.word	0x00000000
 8033d34:	3ff00000 	.word	0x3ff00000
 8033d38:	94a03595 	.word	0x94a03595
 8033d3c:	3fdfffff 	.word	0x3fdfffff
 8033d40:	35afe535 	.word	0x35afe535
 8033d44:	3fe00000 	.word	0x3fe00000
 8033d48:	000fffff 	.word	0x000fffff
 8033d4c:	7ff00000 	.word	0x7ff00000
 8033d50:	7fefffff 	.word	0x7fefffff
 8033d54:	3ff00000 	.word	0x3ff00000
 8033d58:	3fe00000 	.word	0x3fe00000
 8033d5c:	7fe00000 	.word	0x7fe00000
 8033d60:	7c9fffff 	.word	0x7c9fffff
 8033d64:	9b08      	ldr	r3, [sp, #32]
 8033d66:	b323      	cbz	r3, 8033db2 <_strtod_l+0xb5a>
 8033d68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8033d6c:	d821      	bhi.n	8033db2 <_strtod_l+0xb5a>
 8033d6e:	a328      	add	r3, pc, #160	@ (adr r3, 8033e10 <_strtod_l+0xbb8>)
 8033d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8033d74:	4630      	mov	r0, r6
 8033d76:	4639      	mov	r1, r7
 8033d78:	f7dc fed2 	bl	8010b20 <__aeabi_dcmple>
 8033d7c:	b1a0      	cbz	r0, 8033da8 <_strtod_l+0xb50>
 8033d7e:	4639      	mov	r1, r7
 8033d80:	4630      	mov	r0, r6
 8033d82:	f7dc ff29 	bl	8010bd8 <__aeabi_d2uiz>
 8033d86:	2801      	cmp	r0, #1
 8033d88:	bf38      	it	cc
 8033d8a:	2001      	movcc	r0, #1
 8033d8c:	f7dc fbd2 	bl	8010534 <__aeabi_ui2d>
 8033d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8033d92:	4606      	mov	r6, r0
 8033d94:	460f      	mov	r7, r1
 8033d96:	b9fb      	cbnz	r3, 8033dd8 <_strtod_l+0xb80>
 8033d98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8033d9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8033d9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8033da0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8033da4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8033da8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8033daa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8033dae:	1b5b      	subs	r3, r3, r5
 8033db0:	9311      	str	r3, [sp, #68]	@ 0x44
 8033db2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8033db6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8033dba:	f7fe feb3 	bl	8032b24 <__ulp>
 8033dbe:	4650      	mov	r0, sl
 8033dc0:	ec53 2b10 	vmov	r2, r3, d0
 8033dc4:	4659      	mov	r1, fp
 8033dc6:	f7dc fc2f 	bl	8010628 <__aeabi_dmul>
 8033dca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8033dce:	f7dc fa75 	bl	80102bc <__adddf3>
 8033dd2:	4682      	mov	sl, r0
 8033dd4:	468b      	mov	fp, r1
 8033dd6:	e770      	b.n	8033cba <_strtod_l+0xa62>
 8033dd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8033ddc:	e7e0      	b.n	8033da0 <_strtod_l+0xb48>
 8033dde:	a30e      	add	r3, pc, #56	@ (adr r3, 8033e18 <_strtod_l+0xbc0>)
 8033de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8033de4:	f7dc fe92 	bl	8010b0c <__aeabi_dcmplt>
 8033de8:	e798      	b.n	8033d1c <_strtod_l+0xac4>
 8033dea:	2300      	movs	r3, #0
 8033dec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8033dee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8033df0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033df2:	6013      	str	r3, [r2, #0]
 8033df4:	f7ff ba6d 	b.w	80332d2 <_strtod_l+0x7a>
 8033df8:	2a65      	cmp	r2, #101	@ 0x65
 8033dfa:	f43f ab66 	beq.w	80334ca <_strtod_l+0x272>
 8033dfe:	2a45      	cmp	r2, #69	@ 0x45
 8033e00:	f43f ab63 	beq.w	80334ca <_strtod_l+0x272>
 8033e04:	2301      	movs	r3, #1
 8033e06:	f7ff bb9e 	b.w	8033546 <_strtod_l+0x2ee>
 8033e0a:	bf00      	nop
 8033e0c:	f3af 8000 	nop.w
 8033e10:	ffc00000 	.word	0xffc00000
 8033e14:	41dfffff 	.word	0x41dfffff
 8033e18:	94a03595 	.word	0x94a03595
 8033e1c:	3fcfffff 	.word	0x3fcfffff

08033e20 <_strtod_r>:
 8033e20:	4b01      	ldr	r3, [pc, #4]	@ (8033e28 <_strtod_r+0x8>)
 8033e22:	f7ff ba19 	b.w	8033258 <_strtod_l>
 8033e26:	bf00      	nop
 8033e28:	200000e8 	.word	0x200000e8

08033e2c <_strtoul_l.constprop.0>:
 8033e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8033e30:	4e34      	ldr	r6, [pc, #208]	@ (8033f04 <_strtoul_l.constprop.0+0xd8>)
 8033e32:	4686      	mov	lr, r0
 8033e34:	460d      	mov	r5, r1
 8033e36:	4628      	mov	r0, r5
 8033e38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8033e3c:	5d37      	ldrb	r7, [r6, r4]
 8033e3e:	f017 0708 	ands.w	r7, r7, #8
 8033e42:	d1f8      	bne.n	8033e36 <_strtoul_l.constprop.0+0xa>
 8033e44:	2c2d      	cmp	r4, #45	@ 0x2d
 8033e46:	d12f      	bne.n	8033ea8 <_strtoul_l.constprop.0+0x7c>
 8033e48:	782c      	ldrb	r4, [r5, #0]
 8033e4a:	2701      	movs	r7, #1
 8033e4c:	1c85      	adds	r5, r0, #2
 8033e4e:	f033 0010 	bics.w	r0, r3, #16
 8033e52:	d109      	bne.n	8033e68 <_strtoul_l.constprop.0+0x3c>
 8033e54:	2c30      	cmp	r4, #48	@ 0x30
 8033e56:	d12c      	bne.n	8033eb2 <_strtoul_l.constprop.0+0x86>
 8033e58:	7828      	ldrb	r0, [r5, #0]
 8033e5a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8033e5e:	2858      	cmp	r0, #88	@ 0x58
 8033e60:	d127      	bne.n	8033eb2 <_strtoul_l.constprop.0+0x86>
 8033e62:	786c      	ldrb	r4, [r5, #1]
 8033e64:	2310      	movs	r3, #16
 8033e66:	3502      	adds	r5, #2
 8033e68:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8033e6c:	2600      	movs	r6, #0
 8033e6e:	fbb8 f8f3 	udiv	r8, r8, r3
 8033e72:	fb03 f908 	mul.w	r9, r3, r8
 8033e76:	ea6f 0909 	mvn.w	r9, r9
 8033e7a:	4630      	mov	r0, r6
 8033e7c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8033e80:	f1bc 0f09 	cmp.w	ip, #9
 8033e84:	d81c      	bhi.n	8033ec0 <_strtoul_l.constprop.0+0x94>
 8033e86:	4664      	mov	r4, ip
 8033e88:	42a3      	cmp	r3, r4
 8033e8a:	dd2a      	ble.n	8033ee2 <_strtoul_l.constprop.0+0xb6>
 8033e8c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8033e90:	d007      	beq.n	8033ea2 <_strtoul_l.constprop.0+0x76>
 8033e92:	4580      	cmp	r8, r0
 8033e94:	d322      	bcc.n	8033edc <_strtoul_l.constprop.0+0xb0>
 8033e96:	d101      	bne.n	8033e9c <_strtoul_l.constprop.0+0x70>
 8033e98:	45a1      	cmp	r9, r4
 8033e9a:	db1f      	blt.n	8033edc <_strtoul_l.constprop.0+0xb0>
 8033e9c:	fb00 4003 	mla	r0, r0, r3, r4
 8033ea0:	2601      	movs	r6, #1
 8033ea2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8033ea6:	e7e9      	b.n	8033e7c <_strtoul_l.constprop.0+0x50>
 8033ea8:	2c2b      	cmp	r4, #43	@ 0x2b
 8033eaa:	bf04      	itt	eq
 8033eac:	782c      	ldrbeq	r4, [r5, #0]
 8033eae:	1c85      	addeq	r5, r0, #2
 8033eb0:	e7cd      	b.n	8033e4e <_strtoul_l.constprop.0+0x22>
 8033eb2:	2b00      	cmp	r3, #0
 8033eb4:	d1d8      	bne.n	8033e68 <_strtoul_l.constprop.0+0x3c>
 8033eb6:	2c30      	cmp	r4, #48	@ 0x30
 8033eb8:	bf0c      	ite	eq
 8033eba:	2308      	moveq	r3, #8
 8033ebc:	230a      	movne	r3, #10
 8033ebe:	e7d3      	b.n	8033e68 <_strtoul_l.constprop.0+0x3c>
 8033ec0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8033ec4:	f1bc 0f19 	cmp.w	ip, #25
 8033ec8:	d801      	bhi.n	8033ece <_strtoul_l.constprop.0+0xa2>
 8033eca:	3c37      	subs	r4, #55	@ 0x37
 8033ecc:	e7dc      	b.n	8033e88 <_strtoul_l.constprop.0+0x5c>
 8033ece:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8033ed2:	f1bc 0f19 	cmp.w	ip, #25
 8033ed6:	d804      	bhi.n	8033ee2 <_strtoul_l.constprop.0+0xb6>
 8033ed8:	3c57      	subs	r4, #87	@ 0x57
 8033eda:	e7d5      	b.n	8033e88 <_strtoul_l.constprop.0+0x5c>
 8033edc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8033ee0:	e7df      	b.n	8033ea2 <_strtoul_l.constprop.0+0x76>
 8033ee2:	1c73      	adds	r3, r6, #1
 8033ee4:	d106      	bne.n	8033ef4 <_strtoul_l.constprop.0+0xc8>
 8033ee6:	2322      	movs	r3, #34	@ 0x22
 8033ee8:	f8ce 3000 	str.w	r3, [lr]
 8033eec:	4630      	mov	r0, r6
 8033eee:	b932      	cbnz	r2, 8033efe <_strtoul_l.constprop.0+0xd2>
 8033ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8033ef4:	b107      	cbz	r7, 8033ef8 <_strtoul_l.constprop.0+0xcc>
 8033ef6:	4240      	negs	r0, r0
 8033ef8:	2a00      	cmp	r2, #0
 8033efa:	d0f9      	beq.n	8033ef0 <_strtoul_l.constprop.0+0xc4>
 8033efc:	b106      	cbz	r6, 8033f00 <_strtoul_l.constprop.0+0xd4>
 8033efe:	1e69      	subs	r1, r5, #1
 8033f00:	6011      	str	r1, [r2, #0]
 8033f02:	e7f5      	b.n	8033ef0 <_strtoul_l.constprop.0+0xc4>
 8033f04:	0803aabd 	.word	0x0803aabd

08033f08 <_strtoul_r>:
 8033f08:	f7ff bf90 	b.w	8033e2c <_strtoul_l.constprop.0>

08033f0c <strtoul>:
 8033f0c:	4613      	mov	r3, r2
 8033f0e:	460a      	mov	r2, r1
 8033f10:	4601      	mov	r1, r0
 8033f12:	4802      	ldr	r0, [pc, #8]	@ (8033f1c <strtoul+0x10>)
 8033f14:	6800      	ldr	r0, [r0, #0]
 8033f16:	f7ff bf89 	b.w	8033e2c <_strtoul_l.constprop.0>
 8033f1a:	bf00      	nop
 8033f1c:	20000254 	.word	0x20000254

08033f20 <__submore>:
 8033f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033f24:	460c      	mov	r4, r1
 8033f26:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8033f28:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8033f2c:	4299      	cmp	r1, r3
 8033f2e:	d11d      	bne.n	8033f6c <__submore+0x4c>
 8033f30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8033f34:	f7f9 ffba 	bl	802deac <_malloc_r>
 8033f38:	b918      	cbnz	r0, 8033f42 <__submore+0x22>
 8033f3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8033f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033f42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8033f46:	6363      	str	r3, [r4, #52]	@ 0x34
 8033f48:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8033f4c:	6320      	str	r0, [r4, #48]	@ 0x30
 8033f4e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8033f52:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8033f56:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8033f5a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8033f5e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8033f62:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8033f66:	6020      	str	r0, [r4, #0]
 8033f68:	2000      	movs	r0, #0
 8033f6a:	e7e8      	b.n	8033f3e <__submore+0x1e>
 8033f6c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8033f6e:	0077      	lsls	r7, r6, #1
 8033f70:	463a      	mov	r2, r7
 8033f72:	f7fe ffab 	bl	8032ecc <_realloc_r>
 8033f76:	4605      	mov	r5, r0
 8033f78:	2800      	cmp	r0, #0
 8033f7a:	d0de      	beq.n	8033f3a <__submore+0x1a>
 8033f7c:	eb00 0806 	add.w	r8, r0, r6
 8033f80:	4601      	mov	r1, r0
 8033f82:	4632      	mov	r2, r6
 8033f84:	4640      	mov	r0, r8
 8033f86:	f7f8 ff77 	bl	802ce78 <memcpy>
 8033f8a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 8033f8e:	f8c4 8000 	str.w	r8, [r4]
 8033f92:	e7e9      	b.n	8033f68 <__submore+0x48>

08033f94 <__ascii_wctomb>:
 8033f94:	4603      	mov	r3, r0
 8033f96:	4608      	mov	r0, r1
 8033f98:	b141      	cbz	r1, 8033fac <__ascii_wctomb+0x18>
 8033f9a:	2aff      	cmp	r2, #255	@ 0xff
 8033f9c:	d904      	bls.n	8033fa8 <__ascii_wctomb+0x14>
 8033f9e:	228a      	movs	r2, #138	@ 0x8a
 8033fa0:	601a      	str	r2, [r3, #0]
 8033fa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8033fa6:	4770      	bx	lr
 8033fa8:	700a      	strb	r2, [r1, #0]
 8033faa:	2001      	movs	r0, #1
 8033fac:	4770      	bx	lr

08033fae <__swbuf_r>:
 8033fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8033fb0:	460e      	mov	r6, r1
 8033fb2:	4614      	mov	r4, r2
 8033fb4:	4605      	mov	r5, r0
 8033fb6:	b118      	cbz	r0, 8033fc0 <__swbuf_r+0x12>
 8033fb8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8033fba:	b90b      	cbnz	r3, 8033fc0 <__swbuf_r+0x12>
 8033fbc:	f7f7 fa7a 	bl	802b4b4 <__sinit>
 8033fc0:	69a3      	ldr	r3, [r4, #24]
 8033fc2:	60a3      	str	r3, [r4, #8]
 8033fc4:	89a3      	ldrh	r3, [r4, #12]
 8033fc6:	0719      	lsls	r1, r3, #28
 8033fc8:	d501      	bpl.n	8033fce <__swbuf_r+0x20>
 8033fca:	6923      	ldr	r3, [r4, #16]
 8033fcc:	b943      	cbnz	r3, 8033fe0 <__swbuf_r+0x32>
 8033fce:	4621      	mov	r1, r4
 8033fd0:	4628      	mov	r0, r5
 8033fd2:	f7f7 fc2b 	bl	802b82c <__swsetup_r>
 8033fd6:	b118      	cbz	r0, 8033fe0 <__swbuf_r+0x32>
 8033fd8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8033fdc:	4638      	mov	r0, r7
 8033fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8033fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8033fe4:	b2f6      	uxtb	r6, r6
 8033fe6:	049a      	lsls	r2, r3, #18
 8033fe8:	4637      	mov	r7, r6
 8033fea:	d406      	bmi.n	8033ffa <__swbuf_r+0x4c>
 8033fec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8033ff0:	81a3      	strh	r3, [r4, #12]
 8033ff2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033ff4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8033ff8:	6663      	str	r3, [r4, #100]	@ 0x64
 8033ffa:	6823      	ldr	r3, [r4, #0]
 8033ffc:	6922      	ldr	r2, [r4, #16]
 8033ffe:	1a98      	subs	r0, r3, r2
 8034000:	6963      	ldr	r3, [r4, #20]
 8034002:	4283      	cmp	r3, r0
 8034004:	dc05      	bgt.n	8034012 <__swbuf_r+0x64>
 8034006:	4621      	mov	r1, r4
 8034008:	4628      	mov	r0, r5
 803400a:	f7f7 f911 	bl	802b230 <_fflush_r>
 803400e:	2800      	cmp	r0, #0
 8034010:	d1e2      	bne.n	8033fd8 <__swbuf_r+0x2a>
 8034012:	68a3      	ldr	r3, [r4, #8]
 8034014:	3b01      	subs	r3, #1
 8034016:	60a3      	str	r3, [r4, #8]
 8034018:	6823      	ldr	r3, [r4, #0]
 803401a:	1c5a      	adds	r2, r3, #1
 803401c:	6022      	str	r2, [r4, #0]
 803401e:	701e      	strb	r6, [r3, #0]
 8034020:	6962      	ldr	r2, [r4, #20]
 8034022:	1c43      	adds	r3, r0, #1
 8034024:	429a      	cmp	r2, r3
 8034026:	d004      	beq.n	8034032 <__swbuf_r+0x84>
 8034028:	89a3      	ldrh	r3, [r4, #12]
 803402a:	07db      	lsls	r3, r3, #31
 803402c:	d5d6      	bpl.n	8033fdc <__swbuf_r+0x2e>
 803402e:	2e0a      	cmp	r6, #10
 8034030:	d1d4      	bne.n	8033fdc <__swbuf_r+0x2e>
 8034032:	4621      	mov	r1, r4
 8034034:	4628      	mov	r0, r5
 8034036:	f7f7 f8fb 	bl	802b230 <_fflush_r>
 803403a:	2800      	cmp	r0, #0
 803403c:	d0ce      	beq.n	8033fdc <__swbuf_r+0x2e>
 803403e:	e7cb      	b.n	8033fd8 <__swbuf_r+0x2a>

08034040 <_raise_r>:
 8034040:	291f      	cmp	r1, #31
 8034042:	b538      	push	{r3, r4, r5, lr}
 8034044:	4605      	mov	r5, r0
 8034046:	460c      	mov	r4, r1
 8034048:	d904      	bls.n	8034054 <_raise_r+0x14>
 803404a:	2316      	movs	r3, #22
 803404c:	6003      	str	r3, [r0, #0]
 803404e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034052:	bd38      	pop	{r3, r4, r5, pc}
 8034054:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8034058:	b112      	cbz	r2, 8034060 <_raise_r+0x20>
 803405a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803405e:	b94b      	cbnz	r3, 8034074 <_raise_r+0x34>
 8034060:	4628      	mov	r0, r5
 8034062:	f000 f8fd 	bl	8034260 <_getpid_r>
 8034066:	4622      	mov	r2, r4
 8034068:	4601      	mov	r1, r0
 803406a:	4628      	mov	r0, r5
 803406c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8034070:	f000 b8e4 	b.w	803423c <_kill_r>
 8034074:	2b01      	cmp	r3, #1
 8034076:	d00a      	beq.n	803408e <_raise_r+0x4e>
 8034078:	1c59      	adds	r1, r3, #1
 803407a:	d103      	bne.n	8034084 <_raise_r+0x44>
 803407c:	2316      	movs	r3, #22
 803407e:	6003      	str	r3, [r0, #0]
 8034080:	2001      	movs	r0, #1
 8034082:	e7e6      	b.n	8034052 <_raise_r+0x12>
 8034084:	2100      	movs	r1, #0
 8034086:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803408a:	4620      	mov	r0, r4
 803408c:	4798      	blx	r3
 803408e:	2000      	movs	r0, #0
 8034090:	e7df      	b.n	8034052 <_raise_r+0x12>
	...

08034094 <raise>:
 8034094:	4b02      	ldr	r3, [pc, #8]	@ (80340a0 <raise+0xc>)
 8034096:	4601      	mov	r1, r0
 8034098:	6818      	ldr	r0, [r3, #0]
 803409a:	f7ff bfd1 	b.w	8034040 <_raise_r>
 803409e:	bf00      	nop
 80340a0:	20000254 	.word	0x20000254

080340a4 <__gettzinfo>:
 80340a4:	4800      	ldr	r0, [pc, #0]	@ (80340a8 <__gettzinfo+0x4>)
 80340a6:	4770      	bx	lr
 80340a8:	20000790 	.word	0x20000790

080340ac <gmtime_r>:
 80340ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80340b0:	4a4d      	ldr	r2, [pc, #308]	@ (80341e8 <gmtime_r+0x13c>)
 80340b2:	460c      	mov	r4, r1
 80340b4:	2300      	movs	r3, #0
 80340b6:	e9d0 0100 	ldrd	r0, r1, [r0]
 80340ba:	f7dc fdfd 	bl	8010cb8 <__aeabi_ldivmod>
 80340be:	2a00      	cmp	r2, #0
 80340c0:	bfbc      	itt	lt
 80340c2:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 80340c6:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 80340ca:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80340ce:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 80340d2:	fbb2 f3f1 	udiv	r3, r2, r1
 80340d6:	fb01 2213 	mls	r2, r1, r3, r2
 80340da:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 80340de:	bfac      	ite	ge
 80340e0:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 80340e4:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 80340e8:	60a3      	str	r3, [r4, #8]
 80340ea:	fbb2 f3f1 	udiv	r3, r2, r1
 80340ee:	fb01 2213 	mls	r2, r1, r3, r2
 80340f2:	6063      	str	r3, [r4, #4]
 80340f4:	6022      	str	r2, [r4, #0]
 80340f6:	1cc3      	adds	r3, r0, #3
 80340f8:	2207      	movs	r2, #7
 80340fa:	fb93 f2f2 	sdiv	r2, r3, r2
 80340fe:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8034102:	1a9b      	subs	r3, r3, r2
 8034104:	bf48      	it	mi
 8034106:	3307      	addmi	r3, #7
 8034108:	2800      	cmp	r0, #0
 803410a:	61a3      	str	r3, [r4, #24]
 803410c:	bfb8      	it	lt
 803410e:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8034112:	4936      	ldr	r1, [pc, #216]	@ (80341ec <gmtime_r+0x140>)
 8034114:	bfae      	itee	ge
 8034116:	fb90 f1f1 	sdivge	r1, r0, r1
 803411a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 803411e:	fb93 f1f1 	sdivlt	r1, r3, r1
 8034122:	4b33      	ldr	r3, [pc, #204]	@ (80341f0 <gmtime_r+0x144>)
 8034124:	fb03 0001 	mla	r0, r3, r1, r0
 8034128:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 803412c:	fbb0 f3f3 	udiv	r3, r0, r3
 8034130:	4403      	add	r3, r0
 8034132:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8034136:	fbb0 f2fc 	udiv	r2, r0, ip
 803413a:	1a9b      	subs	r3, r3, r2
 803413c:	f240 176d 	movw	r7, #365	@ 0x16d
 8034140:	4a2c      	ldr	r2, [pc, #176]	@ (80341f4 <gmtime_r+0x148>)
 8034142:	fbb0 f2f2 	udiv	r2, r0, r2
 8034146:	2664      	movs	r6, #100	@ 0x64
 8034148:	1a9b      	subs	r3, r3, r2
 803414a:	fbb3 f2f7 	udiv	r2, r3, r7
 803414e:	fbb3 f3fc 	udiv	r3, r3, ip
 8034152:	fbb2 f5f6 	udiv	r5, r2, r6
 8034156:	1aeb      	subs	r3, r5, r3
 8034158:	4403      	add	r3, r0
 803415a:	fb07 3312 	mls	r3, r7, r2, r3
 803415e:	2099      	movs	r0, #153	@ 0x99
 8034160:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8034164:	3702      	adds	r7, #2
 8034166:	f103 0e01 	add.w	lr, r3, #1
 803416a:	fbb7 fcf0 	udiv	ip, r7, r0
 803416e:	fb00 f00c 	mul.w	r0, r0, ip
 8034172:	3002      	adds	r0, #2
 8034174:	f04f 0805 	mov.w	r8, #5
 8034178:	fbb0 f0f8 	udiv	r0, r0, r8
 803417c:	ebae 0000 	sub.w	r0, lr, r0
 8034180:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8034184:	4577      	cmp	r7, lr
 8034186:	bf8c      	ite	hi
 8034188:	f06f 0709 	mvnhi.w	r7, #9
 803418c:	2702      	movls	r7, #2
 803418e:	4467      	add	r7, ip
 8034190:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8034194:	fb0c 2101 	mla	r1, ip, r1, r2
 8034198:	2f01      	cmp	r7, #1
 803419a:	bf98      	it	ls
 803419c:	3101      	addls	r1, #1
 803419e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 80341a2:	d30c      	bcc.n	80341be <gmtime_r+0x112>
 80341a4:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80341a8:	61e3      	str	r3, [r4, #28]
 80341aa:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 80341ae:	2300      	movs	r3, #0
 80341b0:	60e0      	str	r0, [r4, #12]
 80341b2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80341b6:	6223      	str	r3, [r4, #32]
 80341b8:	4620      	mov	r0, r4
 80341ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80341be:	f012 0f03 	tst.w	r2, #3
 80341c2:	d102      	bne.n	80341ca <gmtime_r+0x11e>
 80341c4:	fb06 2515 	mls	r5, r6, r5, r2
 80341c8:	b95d      	cbnz	r5, 80341e2 <gmtime_r+0x136>
 80341ca:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 80341ce:	fbb2 f6f5 	udiv	r6, r2, r5
 80341d2:	fb05 2216 	mls	r2, r5, r6, r2
 80341d6:	fab2 f282 	clz	r2, r2
 80341da:	0952      	lsrs	r2, r2, #5
 80341dc:	333b      	adds	r3, #59	@ 0x3b
 80341de:	4413      	add	r3, r2
 80341e0:	e7e2      	b.n	80341a8 <gmtime_r+0xfc>
 80341e2:	2201      	movs	r2, #1
 80341e4:	e7fa      	b.n	80341dc <gmtime_r+0x130>
 80341e6:	bf00      	nop
 80341e8:	00015180 	.word	0x00015180
 80341ec:	00023ab1 	.word	0x00023ab1
 80341f0:	fffdc54f 	.word	0xfffdc54f
 80341f4:	00023ab0 	.word	0x00023ab0

080341f8 <_fstat_r>:
 80341f8:	b538      	push	{r3, r4, r5, lr}
 80341fa:	4d07      	ldr	r5, [pc, #28]	@ (8034218 <_fstat_r+0x20>)
 80341fc:	2300      	movs	r3, #0
 80341fe:	4604      	mov	r4, r0
 8034200:	4608      	mov	r0, r1
 8034202:	4611      	mov	r1, r2
 8034204:	602b      	str	r3, [r5, #0]
 8034206:	f7de f846 	bl	8012296 <_fstat>
 803420a:	1c43      	adds	r3, r0, #1
 803420c:	d102      	bne.n	8034214 <_fstat_r+0x1c>
 803420e:	682b      	ldr	r3, [r5, #0]
 8034210:	b103      	cbz	r3, 8034214 <_fstat_r+0x1c>
 8034212:	6023      	str	r3, [r4, #0]
 8034214:	bd38      	pop	{r3, r4, r5, pc}
 8034216:	bf00      	nop
 8034218:	20018f54 	.word	0x20018f54

0803421c <_isatty_r>:
 803421c:	b538      	push	{r3, r4, r5, lr}
 803421e:	4d06      	ldr	r5, [pc, #24]	@ (8034238 <_isatty_r+0x1c>)
 8034220:	2300      	movs	r3, #0
 8034222:	4604      	mov	r4, r0
 8034224:	4608      	mov	r0, r1
 8034226:	602b      	str	r3, [r5, #0]
 8034228:	f7de f83a 	bl	80122a0 <_isatty>
 803422c:	1c43      	adds	r3, r0, #1
 803422e:	d102      	bne.n	8034236 <_isatty_r+0x1a>
 8034230:	682b      	ldr	r3, [r5, #0]
 8034232:	b103      	cbz	r3, 8034236 <_isatty_r+0x1a>
 8034234:	6023      	str	r3, [r4, #0]
 8034236:	bd38      	pop	{r3, r4, r5, pc}
 8034238:	20018f54 	.word	0x20018f54

0803423c <_kill_r>:
 803423c:	b538      	push	{r3, r4, r5, lr}
 803423e:	4d07      	ldr	r5, [pc, #28]	@ (803425c <_kill_r+0x20>)
 8034240:	2300      	movs	r3, #0
 8034242:	4604      	mov	r4, r0
 8034244:	4608      	mov	r0, r1
 8034246:	4611      	mov	r1, r2
 8034248:	602b      	str	r3, [r5, #0]
 803424a:	f7dd fff5 	bl	8012238 <_kill>
 803424e:	1c43      	adds	r3, r0, #1
 8034250:	d102      	bne.n	8034258 <_kill_r+0x1c>
 8034252:	682b      	ldr	r3, [r5, #0]
 8034254:	b103      	cbz	r3, 8034258 <_kill_r+0x1c>
 8034256:	6023      	str	r3, [r4, #0]
 8034258:	bd38      	pop	{r3, r4, r5, pc}
 803425a:	bf00      	nop
 803425c:	20018f54 	.word	0x20018f54

08034260 <_getpid_r>:
 8034260:	f7dd bfe8 	b.w	8012234 <_getpid>

08034264 <_sbrk_r>:
 8034264:	b538      	push	{r3, r4, r5, lr}
 8034266:	4d06      	ldr	r5, [pc, #24]	@ (8034280 <_sbrk_r+0x1c>)
 8034268:	2300      	movs	r3, #0
 803426a:	4604      	mov	r4, r0
 803426c:	4608      	mov	r0, r1
 803426e:	602b      	str	r3, [r5, #0]
 8034270:	f7de f81a 	bl	80122a8 <_sbrk>
 8034274:	1c43      	adds	r3, r0, #1
 8034276:	d102      	bne.n	803427e <_sbrk_r+0x1a>
 8034278:	682b      	ldr	r3, [r5, #0]
 803427a:	b103      	cbz	r3, 803427e <_sbrk_r+0x1a>
 803427c:	6023      	str	r3, [r4, #0]
 803427e:	bd38      	pop	{r3, r4, r5, pc}
 8034280:	20018f54 	.word	0x20018f54

08034284 <sysconf>:
 8034284:	2808      	cmp	r0, #8
 8034286:	b508      	push	{r3, lr}
 8034288:	d006      	beq.n	8034298 <sysconf+0x14>
 803428a:	f7f8 fdbd 	bl	802ce08 <__errno>
 803428e:	2316      	movs	r3, #22
 8034290:	6003      	str	r3, [r0, #0]
 8034292:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034296:	bd08      	pop	{r3, pc}
 8034298:	2080      	movs	r0, #128	@ 0x80
 803429a:	e7fc      	b.n	8034296 <sysconf+0x12>

0803429c <_strtoll_l.constprop.0>:
 803429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80342a0:	b085      	sub	sp, #20
 80342a2:	4690      	mov	r8, r2
 80342a4:	4a43      	ldr	r2, [pc, #268]	@ (80343b4 <_strtoll_l.constprop.0+0x118>)
 80342a6:	9002      	str	r0, [sp, #8]
 80342a8:	4689      	mov	r9, r1
 80342aa:	461e      	mov	r6, r3
 80342ac:	460d      	mov	r5, r1
 80342ae:	462b      	mov	r3, r5
 80342b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80342b4:	5d17      	ldrb	r7, [r2, r4]
 80342b6:	f017 0708 	ands.w	r7, r7, #8
 80342ba:	d1f8      	bne.n	80342ae <_strtoll_l.constprop.0+0x12>
 80342bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80342be:	d149      	bne.n	8034354 <_strtoll_l.constprop.0+0xb8>
 80342c0:	782c      	ldrb	r4, [r5, #0]
 80342c2:	2701      	movs	r7, #1
 80342c4:	1c9d      	adds	r5, r3, #2
 80342c6:	f036 0310 	bics.w	r3, r6, #16
 80342ca:	d109      	bne.n	80342e0 <_strtoll_l.constprop.0+0x44>
 80342cc:	2c30      	cmp	r4, #48	@ 0x30
 80342ce:	d146      	bne.n	803435e <_strtoll_l.constprop.0+0xc2>
 80342d0:	782b      	ldrb	r3, [r5, #0]
 80342d2:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80342d6:	2b58      	cmp	r3, #88	@ 0x58
 80342d8:	d141      	bne.n	803435e <_strtoll_l.constprop.0+0xc2>
 80342da:	786c      	ldrb	r4, [r5, #1]
 80342dc:	2610      	movs	r6, #16
 80342de:	3502      	adds	r5, #2
 80342e0:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 80342e4:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 80342e8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80342ec:	17f3      	asrs	r3, r6, #31
 80342ee:	4632      	mov	r2, r6
 80342f0:	4658      	mov	r0, fp
 80342f2:	4651      	mov	r1, sl
 80342f4:	9303      	str	r3, [sp, #12]
 80342f6:	f7dc fd2f 	bl	8010d58 <__aeabi_uldivmod>
 80342fa:	9201      	str	r2, [sp, #4]
 80342fc:	2200      	movs	r2, #0
 80342fe:	468e      	mov	lr, r1
 8034300:	4684      	mov	ip, r0
 8034302:	4611      	mov	r1, r2
 8034304:	4610      	mov	r0, r2
 8034306:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 803430a:	2b09      	cmp	r3, #9
 803430c:	d905      	bls.n	803431a <_strtoll_l.constprop.0+0x7e>
 803430e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8034312:	2b19      	cmp	r3, #25
 8034314:	d82a      	bhi.n	803436c <_strtoll_l.constprop.0+0xd0>
 8034316:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 803431a:	429e      	cmp	r6, r3
 803431c:	dd30      	ble.n	8034380 <_strtoll_l.constprop.0+0xe4>
 803431e:	1c54      	adds	r4, r2, #1
 8034320:	d015      	beq.n	803434e <_strtoll_l.constprop.0+0xb2>
 8034322:	4584      	cmp	ip, r0
 8034324:	eb7e 0201 	sbcs.w	r2, lr, r1
 8034328:	d327      	bcc.n	803437a <_strtoll_l.constprop.0+0xde>
 803432a:	458e      	cmp	lr, r1
 803432c:	bf08      	it	eq
 803432e:	4584      	cmpeq	ip, r0
 8034330:	d102      	bne.n	8034338 <_strtoll_l.constprop.0+0x9c>
 8034332:	9a01      	ldr	r2, [sp, #4]
 8034334:	429a      	cmp	r2, r3
 8034336:	db20      	blt.n	803437a <_strtoll_l.constprop.0+0xde>
 8034338:	9a03      	ldr	r2, [sp, #12]
 803433a:	4371      	muls	r1, r6
 803433c:	fb00 1102 	mla	r1, r0, r2, r1
 8034340:	fba6 0200 	umull	r0, r2, r6, r0
 8034344:	440a      	add	r2, r1
 8034346:	1818      	adds	r0, r3, r0
 8034348:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 803434c:	2201      	movs	r2, #1
 803434e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034352:	e7d8      	b.n	8034306 <_strtoll_l.constprop.0+0x6a>
 8034354:	2c2b      	cmp	r4, #43	@ 0x2b
 8034356:	bf04      	itt	eq
 8034358:	782c      	ldrbeq	r4, [r5, #0]
 803435a:	1c9d      	addeq	r5, r3, #2
 803435c:	e7b3      	b.n	80342c6 <_strtoll_l.constprop.0+0x2a>
 803435e:	2e00      	cmp	r6, #0
 8034360:	d1be      	bne.n	80342e0 <_strtoll_l.constprop.0+0x44>
 8034362:	2c30      	cmp	r4, #48	@ 0x30
 8034364:	bf0c      	ite	eq
 8034366:	2608      	moveq	r6, #8
 8034368:	260a      	movne	r6, #10
 803436a:	e7b9      	b.n	80342e0 <_strtoll_l.constprop.0+0x44>
 803436c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8034370:	2b19      	cmp	r3, #25
 8034372:	d805      	bhi.n	8034380 <_strtoll_l.constprop.0+0xe4>
 8034374:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 8034378:	e7cf      	b.n	803431a <_strtoll_l.constprop.0+0x7e>
 803437a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803437e:	e7e6      	b.n	803434e <_strtoll_l.constprop.0+0xb2>
 8034380:	1c53      	adds	r3, r2, #1
 8034382:	d10a      	bne.n	803439a <_strtoll_l.constprop.0+0xfe>
 8034384:	9a02      	ldr	r2, [sp, #8]
 8034386:	2322      	movs	r3, #34	@ 0x22
 8034388:	6013      	str	r3, [r2, #0]
 803438a:	4658      	mov	r0, fp
 803438c:	4651      	mov	r1, sl
 803438e:	f1b8 0f00 	cmp.w	r8, #0
 8034392:	d10a      	bne.n	80343aa <_strtoll_l.constprop.0+0x10e>
 8034394:	b005      	add	sp, #20
 8034396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803439a:	b117      	cbz	r7, 80343a2 <_strtoll_l.constprop.0+0x106>
 803439c:	4240      	negs	r0, r0
 803439e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80343a2:	f1b8 0f00 	cmp.w	r8, #0
 80343a6:	d0f5      	beq.n	8034394 <_strtoll_l.constprop.0+0xf8>
 80343a8:	b10a      	cbz	r2, 80343ae <_strtoll_l.constprop.0+0x112>
 80343aa:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80343ae:	f8c8 9000 	str.w	r9, [r8]
 80343b2:	e7ef      	b.n	8034394 <_strtoll_l.constprop.0+0xf8>
 80343b4:	0803aabd 	.word	0x0803aabd

080343b8 <_strtoll_r>:
 80343b8:	f7ff bf70 	b.w	803429c <_strtoll_l.constprop.0>

080343bc <__libc_fini_array>:
 80343bc:	b538      	push	{r3, r4, r5, lr}
 80343be:	4d07      	ldr	r5, [pc, #28]	@ (80343dc <__libc_fini_array+0x20>)
 80343c0:	4c07      	ldr	r4, [pc, #28]	@ (80343e0 <__libc_fini_array+0x24>)
 80343c2:	1b64      	subs	r4, r4, r5
 80343c4:	10a4      	asrs	r4, r4, #2
 80343c6:	b91c      	cbnz	r4, 80343d0 <__libc_fini_array+0x14>
 80343c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80343cc:	f000 bc9c 	b.w	8034d08 <_fini>
 80343d0:	3c01      	subs	r4, #1
 80343d2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80343d6:	4798      	blx	r3
 80343d8:	e7f5      	b.n	80343c6 <__libc_fini_array+0xa>
 80343da:	bf00      	nop
 80343dc:	0803aed8 	.word	0x0803aed8
 80343e0:	0803aedc 	.word	0x0803aedc

080343e4 <_strtoull_l.constprop.0>:
 80343e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80343e8:	4691      	mov	r9, r2
 80343ea:	4a48      	ldr	r2, [pc, #288]	@ (803450c <_strtoull_l.constprop.0+0x128>)
 80343ec:	9001      	str	r0, [sp, #4]
 80343ee:	468a      	mov	sl, r1
 80343f0:	461e      	mov	r6, r3
 80343f2:	460d      	mov	r5, r1
 80343f4:	462b      	mov	r3, r5
 80343f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80343fa:	5d17      	ldrb	r7, [r2, r4]
 80343fc:	f017 0708 	ands.w	r7, r7, #8
 8034400:	d1f8      	bne.n	80343f4 <_strtoull_l.constprop.0+0x10>
 8034402:	2c2d      	cmp	r4, #45	@ 0x2d
 8034404:	d14a      	bne.n	803449c <_strtoull_l.constprop.0+0xb8>
 8034406:	782c      	ldrb	r4, [r5, #0]
 8034408:	2701      	movs	r7, #1
 803440a:	1c9d      	adds	r5, r3, #2
 803440c:	f036 0310 	bics.w	r3, r6, #16
 8034410:	d109      	bne.n	8034426 <_strtoull_l.constprop.0+0x42>
 8034412:	2c30      	cmp	r4, #48	@ 0x30
 8034414:	d147      	bne.n	80344a6 <_strtoull_l.constprop.0+0xc2>
 8034416:	782b      	ldrb	r3, [r5, #0]
 8034418:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803441c:	2b58      	cmp	r3, #88	@ 0x58
 803441e:	d142      	bne.n	80344a6 <_strtoull_l.constprop.0+0xc2>
 8034420:	786c      	ldrb	r4, [r5, #1]
 8034422:	2610      	movs	r6, #16
 8034424:	3502      	adds	r5, #2
 8034426:	ea4f 7be6 	mov.w	fp, r6, asr #31
 803442a:	4632      	mov	r2, r6
 803442c:	465b      	mov	r3, fp
 803442e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034432:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8034436:	f7dc fc8f 	bl	8010d58 <__aeabi_uldivmod>
 803443a:	4632      	mov	r2, r6
 803443c:	9000      	str	r0, [sp, #0]
 803443e:	4688      	mov	r8, r1
 8034440:	465b      	mov	r3, fp
 8034442:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034446:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 803444a:	f7dc fc85 	bl	8010d58 <__aeabi_uldivmod>
 803444e:	2300      	movs	r3, #0
 8034450:	4618      	mov	r0, r3
 8034452:	4619      	mov	r1, r3
 8034454:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8034458:	f1bc 0f09 	cmp.w	ip, #9
 803445c:	d82a      	bhi.n	80344b4 <_strtoull_l.constprop.0+0xd0>
 803445e:	4664      	mov	r4, ip
 8034460:	42a6      	cmp	r6, r4
 8034462:	dd38      	ble.n	80344d6 <_strtoull_l.constprop.0+0xf2>
 8034464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8034468:	d015      	beq.n	8034496 <_strtoull_l.constprop.0+0xb2>
 803446a:	9b00      	ldr	r3, [sp, #0]
 803446c:	4283      	cmp	r3, r0
 803446e:	eb78 0301 	sbcs.w	r3, r8, r1
 8034472:	d32d      	bcc.n	80344d0 <_strtoull_l.constprop.0+0xec>
 8034474:	9b00      	ldr	r3, [sp, #0]
 8034476:	4588      	cmp	r8, r1
 8034478:	bf08      	it	eq
 803447a:	4283      	cmpeq	r3, r0
 803447c:	d101      	bne.n	8034482 <_strtoull_l.constprop.0+0x9e>
 803447e:	42a2      	cmp	r2, r4
 8034480:	db26      	blt.n	80344d0 <_strtoull_l.constprop.0+0xec>
 8034482:	4371      	muls	r1, r6
 8034484:	fb00 110b 	mla	r1, r0, fp, r1
 8034488:	fba6 0300 	umull	r0, r3, r6, r0
 803448c:	4419      	add	r1, r3
 803448e:	1820      	adds	r0, r4, r0
 8034490:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8034494:	2301      	movs	r3, #1
 8034496:	f815 4b01 	ldrb.w	r4, [r5], #1
 803449a:	e7db      	b.n	8034454 <_strtoull_l.constprop.0+0x70>
 803449c:	2c2b      	cmp	r4, #43	@ 0x2b
 803449e:	bf04      	itt	eq
 80344a0:	782c      	ldrbeq	r4, [r5, #0]
 80344a2:	1c9d      	addeq	r5, r3, #2
 80344a4:	e7b2      	b.n	803440c <_strtoull_l.constprop.0+0x28>
 80344a6:	2e00      	cmp	r6, #0
 80344a8:	d1bd      	bne.n	8034426 <_strtoull_l.constprop.0+0x42>
 80344aa:	2c30      	cmp	r4, #48	@ 0x30
 80344ac:	bf0c      	ite	eq
 80344ae:	2608      	moveq	r6, #8
 80344b0:	260a      	movne	r6, #10
 80344b2:	e7b8      	b.n	8034426 <_strtoull_l.constprop.0+0x42>
 80344b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80344b8:	f1bc 0f19 	cmp.w	ip, #25
 80344bc:	d801      	bhi.n	80344c2 <_strtoull_l.constprop.0+0xde>
 80344be:	3c37      	subs	r4, #55	@ 0x37
 80344c0:	e7ce      	b.n	8034460 <_strtoull_l.constprop.0+0x7c>
 80344c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80344c6:	f1bc 0f19 	cmp.w	ip, #25
 80344ca:	d804      	bhi.n	80344d6 <_strtoull_l.constprop.0+0xf2>
 80344cc:	3c57      	subs	r4, #87	@ 0x57
 80344ce:	e7c7      	b.n	8034460 <_strtoull_l.constprop.0+0x7c>
 80344d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80344d4:	e7df      	b.n	8034496 <_strtoull_l.constprop.0+0xb2>
 80344d6:	1c5a      	adds	r2, r3, #1
 80344d8:	d10a      	bne.n	80344f0 <_strtoull_l.constprop.0+0x10c>
 80344da:	9901      	ldr	r1, [sp, #4]
 80344dc:	2222      	movs	r2, #34	@ 0x22
 80344de:	600a      	str	r2, [r1, #0]
 80344e0:	4618      	mov	r0, r3
 80344e2:	4619      	mov	r1, r3
 80344e4:	f1b9 0f00 	cmp.w	r9, #0
 80344e8:	d10a      	bne.n	8034500 <_strtoull_l.constprop.0+0x11c>
 80344ea:	b003      	add	sp, #12
 80344ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80344f0:	b117      	cbz	r7, 80344f8 <_strtoull_l.constprop.0+0x114>
 80344f2:	4240      	negs	r0, r0
 80344f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80344f8:	f1b9 0f00 	cmp.w	r9, #0
 80344fc:	d0f5      	beq.n	80344ea <_strtoull_l.constprop.0+0x106>
 80344fe:	b10b      	cbz	r3, 8034504 <_strtoull_l.constprop.0+0x120>
 8034500:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8034504:	f8c9 a000 	str.w	sl, [r9]
 8034508:	e7ef      	b.n	80344ea <_strtoull_l.constprop.0+0x106>
 803450a:	bf00      	nop
 803450c:	0803aabd 	.word	0x0803aabd

08034510 <_strtoull_r>:
 8034510:	f7ff bf68 	b.w	80343e4 <_strtoull_l.constprop.0>

08034514 <_mbrtowc_r>:
 8034514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8034516:	4c0a      	ldr	r4, [pc, #40]	@ (8034540 <_mbrtowc_r+0x2c>)
 8034518:	9e08      	ldr	r6, [sp, #32]
 803451a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 803451e:	9600      	str	r6, [sp, #0]
 8034520:	4605      	mov	r5, r0
 8034522:	4614      	mov	r4, r2
 8034524:	b912      	cbnz	r2, 803452c <_mbrtowc_r+0x18>
 8034526:	4a07      	ldr	r2, [pc, #28]	@ (8034544 <_mbrtowc_r+0x30>)
 8034528:	2301      	movs	r3, #1
 803452a:	4621      	mov	r1, r4
 803452c:	47b8      	blx	r7
 803452e:	1c43      	adds	r3, r0, #1
 8034530:	bf01      	itttt	eq
 8034532:	2300      	moveq	r3, #0
 8034534:	6033      	streq	r3, [r6, #0]
 8034536:	238a      	moveq	r3, #138	@ 0x8a
 8034538:	602b      	streq	r3, [r5, #0]
 803453a:	b003      	add	sp, #12
 803453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803453e:	bf00      	nop
 8034540:	200000e8 	.word	0x200000e8
 8034544:	0803a6fe 	.word	0x0803a6fe

08034548 <iswspace>:
 8034548:	2100      	movs	r1, #0
 803454a:	f000 b801 	b.w	8034550 <iswspace_l>
	...

08034550 <iswspace_l>:
 8034550:	28ff      	cmp	r0, #255	@ 0xff
 8034552:	bf9d      	ittte	ls
 8034554:	4b02      	ldrls	r3, [pc, #8]	@ (8034560 <iswspace_l+0x10>)
 8034556:	5c18      	ldrbls	r0, [r3, r0]
 8034558:	f000 0008 	andls.w	r0, r0, #8
 803455c:	2000      	movhi	r0, #0
 803455e:	4770      	bx	lr
 8034560:	0803aabd 	.word	0x0803aabd

08034564 <__register_exitproc>:
 8034564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8034568:	f8df a074 	ldr.w	sl, [pc, #116]	@ 80345e0 <__register_exitproc+0x7c>
 803456c:	4606      	mov	r6, r0
 803456e:	f8da 0000 	ldr.w	r0, [sl]
 8034572:	4698      	mov	r8, r3
 8034574:	460f      	mov	r7, r1
 8034576:	4691      	mov	r9, r2
 8034578:	f7f8 fc7b 	bl	802ce72 <__retarget_lock_acquire_recursive>
 803457c:	4b16      	ldr	r3, [pc, #88]	@ (80345d8 <__register_exitproc+0x74>)
 803457e:	681c      	ldr	r4, [r3, #0]
 8034580:	b90c      	cbnz	r4, 8034586 <__register_exitproc+0x22>
 8034582:	4c16      	ldr	r4, [pc, #88]	@ (80345dc <__register_exitproc+0x78>)
 8034584:	601c      	str	r4, [r3, #0]
 8034586:	6865      	ldr	r5, [r4, #4]
 8034588:	f8da 0000 	ldr.w	r0, [sl]
 803458c:	2d1f      	cmp	r5, #31
 803458e:	dd05      	ble.n	803459c <__register_exitproc+0x38>
 8034590:	f7f8 fc71 	bl	802ce76 <__retarget_lock_release_recursive>
 8034594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803459c:	b19e      	cbz	r6, 80345c6 <__register_exitproc+0x62>
 803459e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80345a2:	2201      	movs	r2, #1
 80345a4:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 80345a8:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 80345ac:	40aa      	lsls	r2, r5
 80345ae:	4313      	orrs	r3, r2
 80345b0:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 80345b4:	2e02      	cmp	r6, #2
 80345b6:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 80345ba:	bf02      	ittt	eq
 80345bc:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 80345c0:	4313      	orreq	r3, r2
 80345c2:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 80345c6:	1c6b      	adds	r3, r5, #1
 80345c8:	3502      	adds	r5, #2
 80345ca:	6063      	str	r3, [r4, #4]
 80345cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80345d0:	f7f8 fc51 	bl	802ce76 <__retarget_lock_release_recursive>
 80345d4:	2000      	movs	r0, #0
 80345d6:	e7df      	b.n	8034598 <__register_exitproc+0x34>
 80345d8:	20018f60 	.word	0x20018f60
 80345dc:	20018f98 	.word	0x20018f98
 80345e0:	20000378 	.word	0x20000378
 80345e4:	00000000 	.word	0x00000000

080345e8 <nan>:
 80345e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80345f0 <nan+0x8>
 80345ec:	4770      	bx	lr
 80345ee:	bf00      	nop
 80345f0:	00000000 	.word	0x00000000
 80345f4:	7ff80000 	.word	0x7ff80000

080345f8 <nanf>:
 80345f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8034600 <nanf+0x8>
 80345fc:	4770      	bx	lr
 80345fe:	bf00      	nop
 8034600:	7fc00000 	.word	0x7fc00000

08034604 <_calloc_r>:
 8034604:	b538      	push	{r3, r4, r5, lr}
 8034606:	fba1 1502 	umull	r1, r5, r1, r2
 803460a:	b935      	cbnz	r5, 803461a <_calloc_r+0x16>
 803460c:	f7f9 fc4e 	bl	802deac <_malloc_r>
 8034610:	4604      	mov	r4, r0
 8034612:	b938      	cbnz	r0, 8034624 <_calloc_r+0x20>
 8034614:	2400      	movs	r4, #0
 8034616:	4620      	mov	r0, r4
 8034618:	bd38      	pop	{r3, r4, r5, pc}
 803461a:	f7f8 fbf5 	bl	802ce08 <__errno>
 803461e:	230c      	movs	r3, #12
 8034620:	6003      	str	r3, [r0, #0]
 8034622:	e7f7      	b.n	8034614 <_calloc_r+0x10>
 8034624:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8034628:	f022 0203 	bic.w	r2, r2, #3
 803462c:	3a04      	subs	r2, #4
 803462e:	2a24      	cmp	r2, #36	@ 0x24
 8034630:	d819      	bhi.n	8034666 <_calloc_r+0x62>
 8034632:	2a13      	cmp	r2, #19
 8034634:	d915      	bls.n	8034662 <_calloc_r+0x5e>
 8034636:	2a1b      	cmp	r2, #27
 8034638:	e9c0 5500 	strd	r5, r5, [r0]
 803463c:	d806      	bhi.n	803464c <_calloc_r+0x48>
 803463e:	f100 0308 	add.w	r3, r0, #8
 8034642:	2200      	movs	r2, #0
 8034644:	e9c3 2200 	strd	r2, r2, [r3]
 8034648:	609a      	str	r2, [r3, #8]
 803464a:	e7e4      	b.n	8034616 <_calloc_r+0x12>
 803464c:	2a24      	cmp	r2, #36	@ 0x24
 803464e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8034652:	bf11      	iteee	ne
 8034654:	f100 0310 	addne.w	r3, r0, #16
 8034658:	6105      	streq	r5, [r0, #16]
 803465a:	f100 0318 	addeq.w	r3, r0, #24
 803465e:	6145      	streq	r5, [r0, #20]
 8034660:	e7ef      	b.n	8034642 <_calloc_r+0x3e>
 8034662:	4603      	mov	r3, r0
 8034664:	e7ed      	b.n	8034642 <_calloc_r+0x3e>
 8034666:	4629      	mov	r1, r5
 8034668:	f7f7 f9ca 	bl	802ba00 <memset>
 803466c:	e7d3      	b.n	8034616 <_calloc_r+0x12>
	...

08034670 <__env_lock>:
 8034670:	4801      	ldr	r0, [pc, #4]	@ (8034678 <__env_lock+0x8>)
 8034672:	f7f8 bbfe 	b.w	802ce72 <__retarget_lock_acquire_recursive>
 8034676:	bf00      	nop
 8034678:	20018f59 	.word	0x20018f59

0803467c <__env_unlock>:
 803467c:	4801      	ldr	r0, [pc, #4]	@ (8034684 <__env_unlock+0x8>)
 803467e:	f7f8 bbfa 	b.w	802ce76 <__retarget_lock_release_recursive>
 8034682:	bf00      	nop
 8034684:	20018f59 	.word	0x20018f59

08034688 <rshift>:
 8034688:	6903      	ldr	r3, [r0, #16]
 803468a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 803468e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8034692:	ea4f 1261 	mov.w	r2, r1, asr #5
 8034696:	f100 0414 	add.w	r4, r0, #20
 803469a:	dd45      	ble.n	8034728 <rshift+0xa0>
 803469c:	f011 011f 	ands.w	r1, r1, #31
 80346a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80346a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80346a8:	d10c      	bne.n	80346c4 <rshift+0x3c>
 80346aa:	f100 0710 	add.w	r7, r0, #16
 80346ae:	4629      	mov	r1, r5
 80346b0:	42b1      	cmp	r1, r6
 80346b2:	d334      	bcc.n	803471e <rshift+0x96>
 80346b4:	1a9b      	subs	r3, r3, r2
 80346b6:	009b      	lsls	r3, r3, #2
 80346b8:	1eea      	subs	r2, r5, #3
 80346ba:	4296      	cmp	r6, r2
 80346bc:	bf38      	it	cc
 80346be:	2300      	movcc	r3, #0
 80346c0:	4423      	add	r3, r4
 80346c2:	e015      	b.n	80346f0 <rshift+0x68>
 80346c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80346c8:	f1c1 0820 	rsb	r8, r1, #32
 80346cc:	40cf      	lsrs	r7, r1
 80346ce:	f105 0e04 	add.w	lr, r5, #4
 80346d2:	46a1      	mov	r9, r4
 80346d4:	4576      	cmp	r6, lr
 80346d6:	46f4      	mov	ip, lr
 80346d8:	d815      	bhi.n	8034706 <rshift+0x7e>
 80346da:	1a9a      	subs	r2, r3, r2
 80346dc:	0092      	lsls	r2, r2, #2
 80346de:	3a04      	subs	r2, #4
 80346e0:	3501      	adds	r5, #1
 80346e2:	42ae      	cmp	r6, r5
 80346e4:	bf38      	it	cc
 80346e6:	2200      	movcc	r2, #0
 80346e8:	18a3      	adds	r3, r4, r2
 80346ea:	50a7      	str	r7, [r4, r2]
 80346ec:	b107      	cbz	r7, 80346f0 <rshift+0x68>
 80346ee:	3304      	adds	r3, #4
 80346f0:	1b1a      	subs	r2, r3, r4
 80346f2:	42a3      	cmp	r3, r4
 80346f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80346f8:	bf08      	it	eq
 80346fa:	2300      	moveq	r3, #0
 80346fc:	6102      	str	r2, [r0, #16]
 80346fe:	bf08      	it	eq
 8034700:	6143      	streq	r3, [r0, #20]
 8034702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8034706:	f8dc c000 	ldr.w	ip, [ip]
 803470a:	fa0c fc08 	lsl.w	ip, ip, r8
 803470e:	ea4c 0707 	orr.w	r7, ip, r7
 8034712:	f849 7b04 	str.w	r7, [r9], #4
 8034716:	f85e 7b04 	ldr.w	r7, [lr], #4
 803471a:	40cf      	lsrs	r7, r1
 803471c:	e7da      	b.n	80346d4 <rshift+0x4c>
 803471e:	f851 cb04 	ldr.w	ip, [r1], #4
 8034722:	f847 cf04 	str.w	ip, [r7, #4]!
 8034726:	e7c3      	b.n	80346b0 <rshift+0x28>
 8034728:	4623      	mov	r3, r4
 803472a:	e7e1      	b.n	80346f0 <rshift+0x68>

0803472c <__hexdig_fun>:
 803472c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8034730:	2b09      	cmp	r3, #9
 8034732:	d802      	bhi.n	803473a <__hexdig_fun+0xe>
 8034734:	3820      	subs	r0, #32
 8034736:	b2c0      	uxtb	r0, r0
 8034738:	4770      	bx	lr
 803473a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 803473e:	2b05      	cmp	r3, #5
 8034740:	d801      	bhi.n	8034746 <__hexdig_fun+0x1a>
 8034742:	3847      	subs	r0, #71	@ 0x47
 8034744:	e7f7      	b.n	8034736 <__hexdig_fun+0xa>
 8034746:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 803474a:	2b05      	cmp	r3, #5
 803474c:	d801      	bhi.n	8034752 <__hexdig_fun+0x26>
 803474e:	3827      	subs	r0, #39	@ 0x27
 8034750:	e7f1      	b.n	8034736 <__hexdig_fun+0xa>
 8034752:	2000      	movs	r0, #0
 8034754:	4770      	bx	lr
	...

08034758 <__gethex>:
 8034758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803475c:	b085      	sub	sp, #20
 803475e:	468a      	mov	sl, r1
 8034760:	9302      	str	r3, [sp, #8]
 8034762:	680b      	ldr	r3, [r1, #0]
 8034764:	9001      	str	r0, [sp, #4]
 8034766:	4690      	mov	r8, r2
 8034768:	1c9c      	adds	r4, r3, #2
 803476a:	46a1      	mov	r9, r4
 803476c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8034770:	2830      	cmp	r0, #48	@ 0x30
 8034772:	d0fa      	beq.n	803476a <__gethex+0x12>
 8034774:	eba9 0303 	sub.w	r3, r9, r3
 8034778:	f1a3 0b02 	sub.w	fp, r3, #2
 803477c:	f7ff ffd6 	bl	803472c <__hexdig_fun>
 8034780:	4605      	mov	r5, r0
 8034782:	2800      	cmp	r0, #0
 8034784:	d168      	bne.n	8034858 <__gethex+0x100>
 8034786:	49a0      	ldr	r1, [pc, #640]	@ (8034a08 <__gethex+0x2b0>)
 8034788:	2201      	movs	r2, #1
 803478a:	4648      	mov	r0, r9
 803478c:	f7f7 f96d 	bl	802ba6a <strncmp>
 8034790:	4607      	mov	r7, r0
 8034792:	2800      	cmp	r0, #0
 8034794:	d167      	bne.n	8034866 <__gethex+0x10e>
 8034796:	f899 0001 	ldrb.w	r0, [r9, #1]
 803479a:	4626      	mov	r6, r4
 803479c:	f7ff ffc6 	bl	803472c <__hexdig_fun>
 80347a0:	2800      	cmp	r0, #0
 80347a2:	d062      	beq.n	803486a <__gethex+0x112>
 80347a4:	4623      	mov	r3, r4
 80347a6:	7818      	ldrb	r0, [r3, #0]
 80347a8:	2830      	cmp	r0, #48	@ 0x30
 80347aa:	4699      	mov	r9, r3
 80347ac:	f103 0301 	add.w	r3, r3, #1
 80347b0:	d0f9      	beq.n	80347a6 <__gethex+0x4e>
 80347b2:	f7ff ffbb 	bl	803472c <__hexdig_fun>
 80347b6:	fab0 f580 	clz	r5, r0
 80347ba:	096d      	lsrs	r5, r5, #5
 80347bc:	f04f 0b01 	mov.w	fp, #1
 80347c0:	464a      	mov	r2, r9
 80347c2:	4616      	mov	r6, r2
 80347c4:	3201      	adds	r2, #1
 80347c6:	7830      	ldrb	r0, [r6, #0]
 80347c8:	f7ff ffb0 	bl	803472c <__hexdig_fun>
 80347cc:	2800      	cmp	r0, #0
 80347ce:	d1f8      	bne.n	80347c2 <__gethex+0x6a>
 80347d0:	498d      	ldr	r1, [pc, #564]	@ (8034a08 <__gethex+0x2b0>)
 80347d2:	2201      	movs	r2, #1
 80347d4:	4630      	mov	r0, r6
 80347d6:	f7f7 f948 	bl	802ba6a <strncmp>
 80347da:	2800      	cmp	r0, #0
 80347dc:	d13f      	bne.n	803485e <__gethex+0x106>
 80347de:	b944      	cbnz	r4, 80347f2 <__gethex+0x9a>
 80347e0:	1c74      	adds	r4, r6, #1
 80347e2:	4622      	mov	r2, r4
 80347e4:	4616      	mov	r6, r2
 80347e6:	3201      	adds	r2, #1
 80347e8:	7830      	ldrb	r0, [r6, #0]
 80347ea:	f7ff ff9f 	bl	803472c <__hexdig_fun>
 80347ee:	2800      	cmp	r0, #0
 80347f0:	d1f8      	bne.n	80347e4 <__gethex+0x8c>
 80347f2:	1ba4      	subs	r4, r4, r6
 80347f4:	00a7      	lsls	r7, r4, #2
 80347f6:	7833      	ldrb	r3, [r6, #0]
 80347f8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80347fc:	2b50      	cmp	r3, #80	@ 0x50
 80347fe:	d13e      	bne.n	803487e <__gethex+0x126>
 8034800:	7873      	ldrb	r3, [r6, #1]
 8034802:	2b2b      	cmp	r3, #43	@ 0x2b
 8034804:	d033      	beq.n	803486e <__gethex+0x116>
 8034806:	2b2d      	cmp	r3, #45	@ 0x2d
 8034808:	d034      	beq.n	8034874 <__gethex+0x11c>
 803480a:	1c71      	adds	r1, r6, #1
 803480c:	2400      	movs	r4, #0
 803480e:	7808      	ldrb	r0, [r1, #0]
 8034810:	f7ff ff8c 	bl	803472c <__hexdig_fun>
 8034814:	1e43      	subs	r3, r0, #1
 8034816:	b2db      	uxtb	r3, r3
 8034818:	2b18      	cmp	r3, #24
 803481a:	d830      	bhi.n	803487e <__gethex+0x126>
 803481c:	f1a0 0210 	sub.w	r2, r0, #16
 8034820:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8034824:	f7ff ff82 	bl	803472c <__hexdig_fun>
 8034828:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 803482c:	fa5f fc8c 	uxtb.w	ip, ip
 8034830:	f1bc 0f18 	cmp.w	ip, #24
 8034834:	f04f 030a 	mov.w	r3, #10
 8034838:	d91e      	bls.n	8034878 <__gethex+0x120>
 803483a:	b104      	cbz	r4, 803483e <__gethex+0xe6>
 803483c:	4252      	negs	r2, r2
 803483e:	4417      	add	r7, r2
 8034840:	f8ca 1000 	str.w	r1, [sl]
 8034844:	b1ed      	cbz	r5, 8034882 <__gethex+0x12a>
 8034846:	f1bb 0f00 	cmp.w	fp, #0
 803484a:	bf0c      	ite	eq
 803484c:	2506      	moveq	r5, #6
 803484e:	2500      	movne	r5, #0
 8034850:	4628      	mov	r0, r5
 8034852:	b005      	add	sp, #20
 8034854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034858:	2500      	movs	r5, #0
 803485a:	462c      	mov	r4, r5
 803485c:	e7b0      	b.n	80347c0 <__gethex+0x68>
 803485e:	2c00      	cmp	r4, #0
 8034860:	d1c7      	bne.n	80347f2 <__gethex+0x9a>
 8034862:	4627      	mov	r7, r4
 8034864:	e7c7      	b.n	80347f6 <__gethex+0x9e>
 8034866:	464e      	mov	r6, r9
 8034868:	462f      	mov	r7, r5
 803486a:	2501      	movs	r5, #1
 803486c:	e7c3      	b.n	80347f6 <__gethex+0x9e>
 803486e:	2400      	movs	r4, #0
 8034870:	1cb1      	adds	r1, r6, #2
 8034872:	e7cc      	b.n	803480e <__gethex+0xb6>
 8034874:	2401      	movs	r4, #1
 8034876:	e7fb      	b.n	8034870 <__gethex+0x118>
 8034878:	fb03 0002 	mla	r0, r3, r2, r0
 803487c:	e7ce      	b.n	803481c <__gethex+0xc4>
 803487e:	4631      	mov	r1, r6
 8034880:	e7de      	b.n	8034840 <__gethex+0xe8>
 8034882:	eba6 0309 	sub.w	r3, r6, r9
 8034886:	3b01      	subs	r3, #1
 8034888:	4629      	mov	r1, r5
 803488a:	2b07      	cmp	r3, #7
 803488c:	dc0a      	bgt.n	80348a4 <__gethex+0x14c>
 803488e:	9801      	ldr	r0, [sp, #4]
 8034890:	f7fd fe22 	bl	80324d8 <_Balloc>
 8034894:	4604      	mov	r4, r0
 8034896:	b940      	cbnz	r0, 80348aa <__gethex+0x152>
 8034898:	4b5c      	ldr	r3, [pc, #368]	@ (8034a0c <__gethex+0x2b4>)
 803489a:	4602      	mov	r2, r0
 803489c:	21e4      	movs	r1, #228	@ 0xe4
 803489e:	485c      	ldr	r0, [pc, #368]	@ (8034a10 <__gethex+0x2b8>)
 80348a0:	f7f4 fb5c 	bl	8028f5c <__assert_func>
 80348a4:	3101      	adds	r1, #1
 80348a6:	105b      	asrs	r3, r3, #1
 80348a8:	e7ef      	b.n	803488a <__gethex+0x132>
 80348aa:	f100 0a14 	add.w	sl, r0, #20
 80348ae:	2300      	movs	r3, #0
 80348b0:	4655      	mov	r5, sl
 80348b2:	469b      	mov	fp, r3
 80348b4:	45b1      	cmp	r9, r6
 80348b6:	d337      	bcc.n	8034928 <__gethex+0x1d0>
 80348b8:	f845 bb04 	str.w	fp, [r5], #4
 80348bc:	eba5 050a 	sub.w	r5, r5, sl
 80348c0:	10ad      	asrs	r5, r5, #2
 80348c2:	6125      	str	r5, [r4, #16]
 80348c4:	4658      	mov	r0, fp
 80348c6:	f7fd fec5 	bl	8032654 <__hi0bits>
 80348ca:	016d      	lsls	r5, r5, #5
 80348cc:	f8d8 6000 	ldr.w	r6, [r8]
 80348d0:	1a2d      	subs	r5, r5, r0
 80348d2:	42b5      	cmp	r5, r6
 80348d4:	dd54      	ble.n	8034980 <__gethex+0x228>
 80348d6:	1bad      	subs	r5, r5, r6
 80348d8:	4629      	mov	r1, r5
 80348da:	4620      	mov	r0, r4
 80348dc:	f7fe fa3f 	bl	8032d5e <__any_on>
 80348e0:	4681      	mov	r9, r0
 80348e2:	b178      	cbz	r0, 8034904 <__gethex+0x1ac>
 80348e4:	1e6b      	subs	r3, r5, #1
 80348e6:	1159      	asrs	r1, r3, #5
 80348e8:	f003 021f 	and.w	r2, r3, #31
 80348ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80348f0:	f04f 0901 	mov.w	r9, #1
 80348f4:	fa09 f202 	lsl.w	r2, r9, r2
 80348f8:	420a      	tst	r2, r1
 80348fa:	d003      	beq.n	8034904 <__gethex+0x1ac>
 80348fc:	454b      	cmp	r3, r9
 80348fe:	dc36      	bgt.n	803496e <__gethex+0x216>
 8034900:	f04f 0902 	mov.w	r9, #2
 8034904:	4629      	mov	r1, r5
 8034906:	4620      	mov	r0, r4
 8034908:	f7ff febe 	bl	8034688 <rshift>
 803490c:	442f      	add	r7, r5
 803490e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8034912:	42bb      	cmp	r3, r7
 8034914:	da42      	bge.n	803499c <__gethex+0x244>
 8034916:	9801      	ldr	r0, [sp, #4]
 8034918:	4621      	mov	r1, r4
 803491a:	f7fd fe02 	bl	8032522 <_Bfree>
 803491e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034920:	2300      	movs	r3, #0
 8034922:	6013      	str	r3, [r2, #0]
 8034924:	25a3      	movs	r5, #163	@ 0xa3
 8034926:	e793      	b.n	8034850 <__gethex+0xf8>
 8034928:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 803492c:	2a2e      	cmp	r2, #46	@ 0x2e
 803492e:	d012      	beq.n	8034956 <__gethex+0x1fe>
 8034930:	2b20      	cmp	r3, #32
 8034932:	d104      	bne.n	803493e <__gethex+0x1e6>
 8034934:	f845 bb04 	str.w	fp, [r5], #4
 8034938:	f04f 0b00 	mov.w	fp, #0
 803493c:	465b      	mov	r3, fp
 803493e:	7830      	ldrb	r0, [r6, #0]
 8034940:	9303      	str	r3, [sp, #12]
 8034942:	f7ff fef3 	bl	803472c <__hexdig_fun>
 8034946:	9b03      	ldr	r3, [sp, #12]
 8034948:	f000 000f 	and.w	r0, r0, #15
 803494c:	4098      	lsls	r0, r3
 803494e:	ea4b 0b00 	orr.w	fp, fp, r0
 8034952:	3304      	adds	r3, #4
 8034954:	e7ae      	b.n	80348b4 <__gethex+0x15c>
 8034956:	45b1      	cmp	r9, r6
 8034958:	d8ea      	bhi.n	8034930 <__gethex+0x1d8>
 803495a:	492b      	ldr	r1, [pc, #172]	@ (8034a08 <__gethex+0x2b0>)
 803495c:	9303      	str	r3, [sp, #12]
 803495e:	2201      	movs	r2, #1
 8034960:	4630      	mov	r0, r6
 8034962:	f7f7 f882 	bl	802ba6a <strncmp>
 8034966:	9b03      	ldr	r3, [sp, #12]
 8034968:	2800      	cmp	r0, #0
 803496a:	d1e1      	bne.n	8034930 <__gethex+0x1d8>
 803496c:	e7a2      	b.n	80348b4 <__gethex+0x15c>
 803496e:	1ea9      	subs	r1, r5, #2
 8034970:	4620      	mov	r0, r4
 8034972:	f7fe f9f4 	bl	8032d5e <__any_on>
 8034976:	2800      	cmp	r0, #0
 8034978:	d0c2      	beq.n	8034900 <__gethex+0x1a8>
 803497a:	f04f 0903 	mov.w	r9, #3
 803497e:	e7c1      	b.n	8034904 <__gethex+0x1ac>
 8034980:	da09      	bge.n	8034996 <__gethex+0x23e>
 8034982:	1b75      	subs	r5, r6, r5
 8034984:	4621      	mov	r1, r4
 8034986:	9801      	ldr	r0, [sp, #4]
 8034988:	462a      	mov	r2, r5
 803498a:	f7fd ffaf 	bl	80328ec <__lshift>
 803498e:	1b7f      	subs	r7, r7, r5
 8034990:	4604      	mov	r4, r0
 8034992:	f100 0a14 	add.w	sl, r0, #20
 8034996:	f04f 0900 	mov.w	r9, #0
 803499a:	e7b8      	b.n	803490e <__gethex+0x1b6>
 803499c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80349a0:	42bd      	cmp	r5, r7
 80349a2:	dd6f      	ble.n	8034a84 <__gethex+0x32c>
 80349a4:	1bed      	subs	r5, r5, r7
 80349a6:	42ae      	cmp	r6, r5
 80349a8:	dc34      	bgt.n	8034a14 <__gethex+0x2bc>
 80349aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80349ae:	2b02      	cmp	r3, #2
 80349b0:	d022      	beq.n	80349f8 <__gethex+0x2a0>
 80349b2:	2b03      	cmp	r3, #3
 80349b4:	d024      	beq.n	8034a00 <__gethex+0x2a8>
 80349b6:	2b01      	cmp	r3, #1
 80349b8:	d115      	bne.n	80349e6 <__gethex+0x28e>
 80349ba:	42ae      	cmp	r6, r5
 80349bc:	d113      	bne.n	80349e6 <__gethex+0x28e>
 80349be:	2e01      	cmp	r6, #1
 80349c0:	d10b      	bne.n	80349da <__gethex+0x282>
 80349c2:	9a02      	ldr	r2, [sp, #8]
 80349c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80349c8:	6013      	str	r3, [r2, #0]
 80349ca:	2301      	movs	r3, #1
 80349cc:	6123      	str	r3, [r4, #16]
 80349ce:	f8ca 3000 	str.w	r3, [sl]
 80349d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80349d4:	2562      	movs	r5, #98	@ 0x62
 80349d6:	601c      	str	r4, [r3, #0]
 80349d8:	e73a      	b.n	8034850 <__gethex+0xf8>
 80349da:	1e71      	subs	r1, r6, #1
 80349dc:	4620      	mov	r0, r4
 80349de:	f7fe f9be 	bl	8032d5e <__any_on>
 80349e2:	2800      	cmp	r0, #0
 80349e4:	d1ed      	bne.n	80349c2 <__gethex+0x26a>
 80349e6:	9801      	ldr	r0, [sp, #4]
 80349e8:	4621      	mov	r1, r4
 80349ea:	f7fd fd9a 	bl	8032522 <_Bfree>
 80349ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80349f0:	2300      	movs	r3, #0
 80349f2:	6013      	str	r3, [r2, #0]
 80349f4:	2550      	movs	r5, #80	@ 0x50
 80349f6:	e72b      	b.n	8034850 <__gethex+0xf8>
 80349f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80349fa:	2b00      	cmp	r3, #0
 80349fc:	d1f3      	bne.n	80349e6 <__gethex+0x28e>
 80349fe:	e7e0      	b.n	80349c2 <__gethex+0x26a>
 8034a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034a02:	2b00      	cmp	r3, #0
 8034a04:	d1dd      	bne.n	80349c2 <__gethex+0x26a>
 8034a06:	e7ee      	b.n	80349e6 <__gethex+0x28e>
 8034a08:	0803a892 	.word	0x0803a892
 8034a0c:	0803abca 	.word	0x0803abca
 8034a10:	0803ae68 	.word	0x0803ae68
 8034a14:	1e6f      	subs	r7, r5, #1
 8034a16:	f1b9 0f00 	cmp.w	r9, #0
 8034a1a:	d130      	bne.n	8034a7e <__gethex+0x326>
 8034a1c:	b127      	cbz	r7, 8034a28 <__gethex+0x2d0>
 8034a1e:	4639      	mov	r1, r7
 8034a20:	4620      	mov	r0, r4
 8034a22:	f7fe f99c 	bl	8032d5e <__any_on>
 8034a26:	4681      	mov	r9, r0
 8034a28:	117a      	asrs	r2, r7, #5
 8034a2a:	2301      	movs	r3, #1
 8034a2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8034a30:	f007 071f 	and.w	r7, r7, #31
 8034a34:	40bb      	lsls	r3, r7
 8034a36:	4213      	tst	r3, r2
 8034a38:	4629      	mov	r1, r5
 8034a3a:	4620      	mov	r0, r4
 8034a3c:	bf18      	it	ne
 8034a3e:	f049 0902 	orrne.w	r9, r9, #2
 8034a42:	f7ff fe21 	bl	8034688 <rshift>
 8034a46:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8034a4a:	1b76      	subs	r6, r6, r5
 8034a4c:	2502      	movs	r5, #2
 8034a4e:	f1b9 0f00 	cmp.w	r9, #0
 8034a52:	d047      	beq.n	8034ae4 <__gethex+0x38c>
 8034a54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8034a58:	2b02      	cmp	r3, #2
 8034a5a:	d015      	beq.n	8034a88 <__gethex+0x330>
 8034a5c:	2b03      	cmp	r3, #3
 8034a5e:	d017      	beq.n	8034a90 <__gethex+0x338>
 8034a60:	2b01      	cmp	r3, #1
 8034a62:	d109      	bne.n	8034a78 <__gethex+0x320>
 8034a64:	f019 0f02 	tst.w	r9, #2
 8034a68:	d006      	beq.n	8034a78 <__gethex+0x320>
 8034a6a:	f8da 3000 	ldr.w	r3, [sl]
 8034a6e:	ea49 0903 	orr.w	r9, r9, r3
 8034a72:	f019 0f01 	tst.w	r9, #1
 8034a76:	d10e      	bne.n	8034a96 <__gethex+0x33e>
 8034a78:	f045 0510 	orr.w	r5, r5, #16
 8034a7c:	e032      	b.n	8034ae4 <__gethex+0x38c>
 8034a7e:	f04f 0901 	mov.w	r9, #1
 8034a82:	e7d1      	b.n	8034a28 <__gethex+0x2d0>
 8034a84:	2501      	movs	r5, #1
 8034a86:	e7e2      	b.n	8034a4e <__gethex+0x2f6>
 8034a88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034a8a:	f1c3 0301 	rsb	r3, r3, #1
 8034a8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8034a90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034a92:	2b00      	cmp	r3, #0
 8034a94:	d0f0      	beq.n	8034a78 <__gethex+0x320>
 8034a96:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8034a9a:	f104 0314 	add.w	r3, r4, #20
 8034a9e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8034aa2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8034aa6:	f04f 0c00 	mov.w	ip, #0
 8034aaa:	4618      	mov	r0, r3
 8034aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8034ab0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8034ab4:	d01b      	beq.n	8034aee <__gethex+0x396>
 8034ab6:	3201      	adds	r2, #1
 8034ab8:	6002      	str	r2, [r0, #0]
 8034aba:	2d02      	cmp	r5, #2
 8034abc:	f104 0314 	add.w	r3, r4, #20
 8034ac0:	d13c      	bne.n	8034b3c <__gethex+0x3e4>
 8034ac2:	f8d8 2000 	ldr.w	r2, [r8]
 8034ac6:	3a01      	subs	r2, #1
 8034ac8:	42b2      	cmp	r2, r6
 8034aca:	d109      	bne.n	8034ae0 <__gethex+0x388>
 8034acc:	1171      	asrs	r1, r6, #5
 8034ace:	2201      	movs	r2, #1
 8034ad0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8034ad4:	f006 061f 	and.w	r6, r6, #31
 8034ad8:	fa02 f606 	lsl.w	r6, r2, r6
 8034adc:	421e      	tst	r6, r3
 8034ade:	d13a      	bne.n	8034b56 <__gethex+0x3fe>
 8034ae0:	f045 0520 	orr.w	r5, r5, #32
 8034ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034ae6:	601c      	str	r4, [r3, #0]
 8034ae8:	9b02      	ldr	r3, [sp, #8]
 8034aea:	601f      	str	r7, [r3, #0]
 8034aec:	e6b0      	b.n	8034850 <__gethex+0xf8>
 8034aee:	4299      	cmp	r1, r3
 8034af0:	f843 cc04 	str.w	ip, [r3, #-4]
 8034af4:	d8d9      	bhi.n	8034aaa <__gethex+0x352>
 8034af6:	68a3      	ldr	r3, [r4, #8]
 8034af8:	459b      	cmp	fp, r3
 8034afa:	db17      	blt.n	8034b2c <__gethex+0x3d4>
 8034afc:	6861      	ldr	r1, [r4, #4]
 8034afe:	9801      	ldr	r0, [sp, #4]
 8034b00:	3101      	adds	r1, #1
 8034b02:	f7fd fce9 	bl	80324d8 <_Balloc>
 8034b06:	4681      	mov	r9, r0
 8034b08:	b918      	cbnz	r0, 8034b12 <__gethex+0x3ba>
 8034b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8034b74 <__gethex+0x41c>)
 8034b0c:	4602      	mov	r2, r0
 8034b0e:	2184      	movs	r1, #132	@ 0x84
 8034b10:	e6c5      	b.n	803489e <__gethex+0x146>
 8034b12:	6922      	ldr	r2, [r4, #16]
 8034b14:	3202      	adds	r2, #2
 8034b16:	f104 010c 	add.w	r1, r4, #12
 8034b1a:	0092      	lsls	r2, r2, #2
 8034b1c:	300c      	adds	r0, #12
 8034b1e:	f7f8 f9ab 	bl	802ce78 <memcpy>
 8034b22:	4621      	mov	r1, r4
 8034b24:	9801      	ldr	r0, [sp, #4]
 8034b26:	f7fd fcfc 	bl	8032522 <_Bfree>
 8034b2a:	464c      	mov	r4, r9
 8034b2c:	6923      	ldr	r3, [r4, #16]
 8034b2e:	1c5a      	adds	r2, r3, #1
 8034b30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8034b34:	6122      	str	r2, [r4, #16]
 8034b36:	2201      	movs	r2, #1
 8034b38:	615a      	str	r2, [r3, #20]
 8034b3a:	e7be      	b.n	8034aba <__gethex+0x362>
 8034b3c:	6922      	ldr	r2, [r4, #16]
 8034b3e:	455a      	cmp	r2, fp
 8034b40:	dd0b      	ble.n	8034b5a <__gethex+0x402>
 8034b42:	2101      	movs	r1, #1
 8034b44:	4620      	mov	r0, r4
 8034b46:	f7ff fd9f 	bl	8034688 <rshift>
 8034b4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8034b4e:	3701      	adds	r7, #1
 8034b50:	42bb      	cmp	r3, r7
 8034b52:	f6ff aee0 	blt.w	8034916 <__gethex+0x1be>
 8034b56:	2501      	movs	r5, #1
 8034b58:	e7c2      	b.n	8034ae0 <__gethex+0x388>
 8034b5a:	f016 061f 	ands.w	r6, r6, #31
 8034b5e:	d0fa      	beq.n	8034b56 <__gethex+0x3fe>
 8034b60:	4453      	add	r3, sl
 8034b62:	f1c6 0620 	rsb	r6, r6, #32
 8034b66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8034b6a:	f7fd fd73 	bl	8032654 <__hi0bits>
 8034b6e:	42b0      	cmp	r0, r6
 8034b70:	dbe7      	blt.n	8034b42 <__gethex+0x3ea>
 8034b72:	e7f0      	b.n	8034b56 <__gethex+0x3fe>
 8034b74:	0803abca 	.word	0x0803abca

08034b78 <L_shift>:
 8034b78:	f1c2 0208 	rsb	r2, r2, #8
 8034b7c:	0092      	lsls	r2, r2, #2
 8034b7e:	b570      	push	{r4, r5, r6, lr}
 8034b80:	f1c2 0620 	rsb	r6, r2, #32
 8034b84:	6843      	ldr	r3, [r0, #4]
 8034b86:	6804      	ldr	r4, [r0, #0]
 8034b88:	fa03 f506 	lsl.w	r5, r3, r6
 8034b8c:	432c      	orrs	r4, r5
 8034b8e:	40d3      	lsrs	r3, r2
 8034b90:	6004      	str	r4, [r0, #0]
 8034b92:	f840 3f04 	str.w	r3, [r0, #4]!
 8034b96:	4288      	cmp	r0, r1
 8034b98:	d3f4      	bcc.n	8034b84 <L_shift+0xc>
 8034b9a:	bd70      	pop	{r4, r5, r6, pc}

08034b9c <__match>:
 8034b9c:	b530      	push	{r4, r5, lr}
 8034b9e:	6803      	ldr	r3, [r0, #0]
 8034ba0:	3301      	adds	r3, #1
 8034ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8034ba6:	b914      	cbnz	r4, 8034bae <__match+0x12>
 8034ba8:	6003      	str	r3, [r0, #0]
 8034baa:	2001      	movs	r0, #1
 8034bac:	bd30      	pop	{r4, r5, pc}
 8034bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8034bb2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8034bb6:	2d19      	cmp	r5, #25
 8034bb8:	bf98      	it	ls
 8034bba:	3220      	addls	r2, #32
 8034bbc:	42a2      	cmp	r2, r4
 8034bbe:	d0f0      	beq.n	8034ba2 <__match+0x6>
 8034bc0:	2000      	movs	r0, #0
 8034bc2:	e7f3      	b.n	8034bac <__match+0x10>

08034bc4 <__hexnan>:
 8034bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034bc8:	680b      	ldr	r3, [r1, #0]
 8034bca:	6801      	ldr	r1, [r0, #0]
 8034bcc:	115e      	asrs	r6, r3, #5
 8034bce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8034bd2:	f013 031f 	ands.w	r3, r3, #31
 8034bd6:	b087      	sub	sp, #28
 8034bd8:	bf18      	it	ne
 8034bda:	3604      	addne	r6, #4
 8034bdc:	2500      	movs	r5, #0
 8034bde:	1f37      	subs	r7, r6, #4
 8034be0:	4682      	mov	sl, r0
 8034be2:	4690      	mov	r8, r2
 8034be4:	9301      	str	r3, [sp, #4]
 8034be6:	f846 5c04 	str.w	r5, [r6, #-4]
 8034bea:	46b9      	mov	r9, r7
 8034bec:	463c      	mov	r4, r7
 8034bee:	9502      	str	r5, [sp, #8]
 8034bf0:	46ab      	mov	fp, r5
 8034bf2:	784a      	ldrb	r2, [r1, #1]
 8034bf4:	1c4b      	adds	r3, r1, #1
 8034bf6:	9303      	str	r3, [sp, #12]
 8034bf8:	b342      	cbz	r2, 8034c4c <__hexnan+0x88>
 8034bfa:	4610      	mov	r0, r2
 8034bfc:	9105      	str	r1, [sp, #20]
 8034bfe:	9204      	str	r2, [sp, #16]
 8034c00:	f7ff fd94 	bl	803472c <__hexdig_fun>
 8034c04:	2800      	cmp	r0, #0
 8034c06:	d151      	bne.n	8034cac <__hexnan+0xe8>
 8034c08:	9a04      	ldr	r2, [sp, #16]
 8034c0a:	9905      	ldr	r1, [sp, #20]
 8034c0c:	2a20      	cmp	r2, #32
 8034c0e:	d818      	bhi.n	8034c42 <__hexnan+0x7e>
 8034c10:	9b02      	ldr	r3, [sp, #8]
 8034c12:	459b      	cmp	fp, r3
 8034c14:	dd13      	ble.n	8034c3e <__hexnan+0x7a>
 8034c16:	454c      	cmp	r4, r9
 8034c18:	d206      	bcs.n	8034c28 <__hexnan+0x64>
 8034c1a:	2d07      	cmp	r5, #7
 8034c1c:	dc04      	bgt.n	8034c28 <__hexnan+0x64>
 8034c1e:	462a      	mov	r2, r5
 8034c20:	4649      	mov	r1, r9
 8034c22:	4620      	mov	r0, r4
 8034c24:	f7ff ffa8 	bl	8034b78 <L_shift>
 8034c28:	4544      	cmp	r4, r8
 8034c2a:	d952      	bls.n	8034cd2 <__hexnan+0x10e>
 8034c2c:	2300      	movs	r3, #0
 8034c2e:	f1a4 0904 	sub.w	r9, r4, #4
 8034c32:	f844 3c04 	str.w	r3, [r4, #-4]
 8034c36:	f8cd b008 	str.w	fp, [sp, #8]
 8034c3a:	464c      	mov	r4, r9
 8034c3c:	461d      	mov	r5, r3
 8034c3e:	9903      	ldr	r1, [sp, #12]
 8034c40:	e7d7      	b.n	8034bf2 <__hexnan+0x2e>
 8034c42:	2a29      	cmp	r2, #41	@ 0x29
 8034c44:	d157      	bne.n	8034cf6 <__hexnan+0x132>
 8034c46:	3102      	adds	r1, #2
 8034c48:	f8ca 1000 	str.w	r1, [sl]
 8034c4c:	f1bb 0f00 	cmp.w	fp, #0
 8034c50:	d051      	beq.n	8034cf6 <__hexnan+0x132>
 8034c52:	454c      	cmp	r4, r9
 8034c54:	d206      	bcs.n	8034c64 <__hexnan+0xa0>
 8034c56:	2d07      	cmp	r5, #7
 8034c58:	dc04      	bgt.n	8034c64 <__hexnan+0xa0>
 8034c5a:	462a      	mov	r2, r5
 8034c5c:	4649      	mov	r1, r9
 8034c5e:	4620      	mov	r0, r4
 8034c60:	f7ff ff8a 	bl	8034b78 <L_shift>
 8034c64:	4544      	cmp	r4, r8
 8034c66:	d936      	bls.n	8034cd6 <__hexnan+0x112>
 8034c68:	f1a8 0204 	sub.w	r2, r8, #4
 8034c6c:	4623      	mov	r3, r4
 8034c6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8034c72:	f842 1f04 	str.w	r1, [r2, #4]!
 8034c76:	429f      	cmp	r7, r3
 8034c78:	d2f9      	bcs.n	8034c6e <__hexnan+0xaa>
 8034c7a:	1b3b      	subs	r3, r7, r4
 8034c7c:	f023 0303 	bic.w	r3, r3, #3
 8034c80:	3304      	adds	r3, #4
 8034c82:	3401      	adds	r4, #1
 8034c84:	3e03      	subs	r6, #3
 8034c86:	42b4      	cmp	r4, r6
 8034c88:	bf88      	it	hi
 8034c8a:	2304      	movhi	r3, #4
 8034c8c:	4443      	add	r3, r8
 8034c8e:	2200      	movs	r2, #0
 8034c90:	f843 2b04 	str.w	r2, [r3], #4
 8034c94:	429f      	cmp	r7, r3
 8034c96:	d2fb      	bcs.n	8034c90 <__hexnan+0xcc>
 8034c98:	683b      	ldr	r3, [r7, #0]
 8034c9a:	b91b      	cbnz	r3, 8034ca4 <__hexnan+0xe0>
 8034c9c:	4547      	cmp	r7, r8
 8034c9e:	d128      	bne.n	8034cf2 <__hexnan+0x12e>
 8034ca0:	2301      	movs	r3, #1
 8034ca2:	603b      	str	r3, [r7, #0]
 8034ca4:	2005      	movs	r0, #5
 8034ca6:	b007      	add	sp, #28
 8034ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034cac:	3501      	adds	r5, #1
 8034cae:	2d08      	cmp	r5, #8
 8034cb0:	f10b 0b01 	add.w	fp, fp, #1
 8034cb4:	dd06      	ble.n	8034cc4 <__hexnan+0x100>
 8034cb6:	4544      	cmp	r4, r8
 8034cb8:	d9c1      	bls.n	8034c3e <__hexnan+0x7a>
 8034cba:	2300      	movs	r3, #0
 8034cbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8034cc0:	2501      	movs	r5, #1
 8034cc2:	3c04      	subs	r4, #4
 8034cc4:	6822      	ldr	r2, [r4, #0]
 8034cc6:	f000 000f 	and.w	r0, r0, #15
 8034cca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8034cce:	6020      	str	r0, [r4, #0]
 8034cd0:	e7b5      	b.n	8034c3e <__hexnan+0x7a>
 8034cd2:	2508      	movs	r5, #8
 8034cd4:	e7b3      	b.n	8034c3e <__hexnan+0x7a>
 8034cd6:	9b01      	ldr	r3, [sp, #4]
 8034cd8:	2b00      	cmp	r3, #0
 8034cda:	d0dd      	beq.n	8034c98 <__hexnan+0xd4>
 8034cdc:	f1c3 0320 	rsb	r3, r3, #32
 8034ce0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034ce4:	40da      	lsrs	r2, r3
 8034ce6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8034cea:	4013      	ands	r3, r2
 8034cec:	f846 3c04 	str.w	r3, [r6, #-4]
 8034cf0:	e7d2      	b.n	8034c98 <__hexnan+0xd4>
 8034cf2:	3f04      	subs	r7, #4
 8034cf4:	e7d0      	b.n	8034c98 <__hexnan+0xd4>
 8034cf6:	2004      	movs	r0, #4
 8034cf8:	e7d5      	b.n	8034ca6 <__hexnan+0xe2>
	...

08034cfc <_init>:
 8034cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034cfe:	bf00      	nop
 8034d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8034d02:	bc08      	pop	{r3}
 8034d04:	469e      	mov	lr, r3
 8034d06:	4770      	bx	lr

08034d08 <_fini>:
 8034d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034d0a:	bf00      	nop
 8034d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8034d0e:	bc08      	pop	{r3}
 8034d10:	469e      	mov	lr, r3
 8034d12:	4770      	bx	lr
